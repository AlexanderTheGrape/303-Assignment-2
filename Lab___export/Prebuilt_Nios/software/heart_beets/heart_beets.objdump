
heart_beets.elf:     file format elf32-littlenios2
heart_beets.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00014d04 memsz 0x00014d04 flags r-x
    LOAD off    0x00015d24 vaddr 0x00814d24 paddr 0x008169fc align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x000186d4 vaddr 0x008186d4 paddr 0x008186d4 align 2**12
         filesz 0x00000000 memsz 0x000003d0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000143a8  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000738  008145ec  008145ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00814d24  008169fc  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003d0  008186d4  008186d4  000186d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00818aa4  00818aa4  000179fc  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000179fc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000179fc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010d0  00000000  00000000  00017a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b2a0  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a9d5  00000000  00000000  00043d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000df6a  00000000  00000000  0004e765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002930  00000000  00000000  0005c6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004895  00000000  00000000  0005f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000181fa  00000000  00000000  00063895  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007ba90  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019d0  00000000  00000000  0007baf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00082b75  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00082b78  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00082b7b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00082b7c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00082b7d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00082b81  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00082b85  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00082b89  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00082b92  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00082b9b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00082ba4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00082bb0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  00082bde  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008145ec l    d  .rodata	00000000 .rodata
00814d24 l    d  .rwdata	00000000 .rwdata
008186d4 l    d  .bss	00000000 .bss
00818aa4 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../heart_beets_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00814d24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00804598 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008147de l     O .rodata	00000010 zeroes.4404
00806bc4 l     F .text	000000bc __sbprintf
008147ee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00806e88 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008089b8 l     F .text	00000008 __fp_unlock
008089cc l     F .text	0000019c __sinit.part.1
00808b68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00815570 l     O .rwdata	00000020 lc_ctype_charset
00815550 l     O .rwdata	00000020 lc_message_charset
00815590 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0081481c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080b4a4 l     F .text	000000fc __sprint_r.part.0
00814950 l     O .rodata	00000010 blanks.4348
00814940 l     O .rodata	00000010 zeroes.4349
0080ca30 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008105f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810700 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0081072c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00810818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008108f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008109e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810bb8 l     F .text	0000003c alt_get_errno
00810bf4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00810e0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008169e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008111fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00811330 l     F .text	00000034 alt_dev_reg
00815770 l     O .rwdata	00001060 jtag_uart
008167d0 l     O .rwdata	00000120 lcd
008168f0 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081165c l     F .text	0000020c altera_avalon_jtag_uart_irq
00811868 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008169f0 l     O .rwdata	00000004 colstart
00811ea0 l     F .text	000000b8 lcd_write_command
00811f58 l     F .text	000000d8 lcd_write_data
00812030 l     F .text	000000d0 lcd_clear_screen
00812100 l     F .text	000001ec lcd_repaint_screen
008122ec l     F .text	000000cc lcd_scroll_up
008123b8 l     F .text	000002ac lcd_handle_escape
00812b3c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812d7c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081302c l     F .text	0000009c altera_avalon_uart_irq
008130c8 l     F .text	000000e4 altera_avalon_uart_rxirq
008131ac l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00813348 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813560 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813e40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00814ba3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00818888 g     O .bss	00000004 alt_instruction_exception_handler
00818728 g     O .bss	00000001 g83
00818729 g     O .bss	00000001 g40
0080ac18 g     F .text	00000074 _mprec_log10
0080ad04 g     F .text	0000008c __any_on
0080987c g     F .text	00000054 _isatty_r
00814828 g     O .rodata	00000028 __mprec_tinytens
0081872a g     O .bss	00000001 g91
00818708 g     O .bss	00000004 maskedButton1
00810af4 g     F .text	0000007c alt_main
008044c4 g     F .text	000000c0 _puts_r
0081872b g     O .bss	00000001 APace
008189a4 g     O .bss	00000100 alt_irq
008099ac g     F .text	00000060 _lseek_r
0081872c g     O .bss	00000001 g4
008169fc g       *ABS*	00000000 __flash_rwdata_start
0081872d g     O .bss	00000001 g108
0081872e g     O .bss	00000001 g19
0081872f g     O .bss	00000001 g111
00808d58 g     F .text	000000ac __sflags
0080eff4 g     F .text	00000088 .hidden __eqdf2
00818730 g     O .bss	00000001 PRE_g102
00818aa4 g       *ABS*	00000000 __alt_heap_start
00818731 g     O .bss	00000001 g80b
00804488 g     F .text	0000003c printf
00818732 g     O .bss	00000001 PRE_g23
0080d014 g     F .text	0000009c _wcrtomb_r
00818733 g     O .bss	00000001 g122_fix0
008003f0 g     F .text	00000040 AEI_timer_ISR
008048b4 g     F .text	0000005c __sseek
00808d08 g     F .text	00000010 __sinit
0080cebc g     F .text	00000140 __swbuf_r
00818734 g     O .bss	00000001 g55
00818735 g     O .bss	00000001 _cg59
00818736 g     O .bss	00000001 g27
00818737 g     O .bss	00000001 _Pacemaker1_local__reg_AEI_ex14
008098d0 g     F .text	0000007c _setlocale_r
00808b70 g     F .text	00000068 __sfmoreglue
00810b94 g     F .text	00000024 __malloc_unlock
00818738 g     O .bss	00000001 g112
00818739 g     O .bss	00000001 g33b
0081873a g     O .bss	00000001 PRE_g128
0081873b g     O .bss	00000001 g3
008188b4 g     O .bss	00000018 AtrialPace_timer
008188cc g     O .bss	00000018 Ventricular_timer
00809c38 g     F .text	0000015c memmove
0081873c g     O .bss	00000001 g103
0081873d g     O .bss	00000001 g55b
0081873e g     O .bss	00000001 g47
0081873f g     O .bss	00000001 g85
00818740 g     O .bss	00000001 g42
00808cf0 g     F .text	00000018 _cleanup
00818741 g     O .bss	00000001 _reg_VRP_start18
00809d94 g     F .text	000000a8 _Balloc
00818742 g     O .bss	00000001 g9
00818714 g     O .bss	00000004 switch_bits
00818743 g     O .bss	00000001 g127
00818744 g     O .bss	00000001 g94b
00818745 g     O .bss	00000001 LRITO
00818746 g     O .bss	00000001 _cg7
00818748 g     O .bss	00000004 _PRE_GO
0081874c g     O .bss	00000001 PRE_g3
0081874d g     O .bss	00000001 g102
0080f07c g     F .text	000000dc .hidden __gtdf2
00813fb0 g     F .text	00000024 altera_nios2_gen2_irq_init
0081874e g     O .bss	00000001 g122_e1_fix_fix
0081874f g     O .bss	00000001 g115
00818750 g     O .bss	00000001 AVI_start
00800000 g     F .entry	0000001c __reset
00818751 g     O .bss	00000001 _cg15
008186d8 g     O .bss	00000004 PVARPTOFlag
00818752 g     O .bss	00000001 _pre_VRP_start18
00818753 g     O .bss	00000001 PRE_g56
00800020 g       *ABS*	00000000 __flash_exceptions_start
008038ac g     F .text	0000005c _fstat_r
008002b8 g     F .text	00000028 Ventricular_timer_ISR
00818854 g     O .bss	00000004 errno
00818754 g     O .bss	00000001 PRE_g32
00818755 g     O .bss	00000001 g87
00818756 g     O .bss	00000001 g44
00804830 g     F .text	00000008 __seofread
00818757 g     O .bss	00000001 g130_e3
00818758 g     O .bss	00000001 g123
00818759 g     O .bss	00000001 _cg75
00818874 g     O .bss	00000004 alt_argv
0081875a g     O .bss	00000001 g121_e14
0081e9b4 g       *ABS*	00000000 _gp
00813f80 g     F .text	00000030 usleep
00800d4c g     F .text	000000a0 reset
0081875b g     O .bss	00000001 PRE_g65
0081875c g     O .bss	00000001 PRE_g20
0081875d g     O .bss	00000001 AVI_stop
0081875e g     O .bss	00000001 g92
0081875f g     O .bss	00000001 g1
00818760 g     O .bss	00000001 g61
00800bc8 g     F .text	000000a8 UARTreceive
00818761 g     O .bss	00000001 g89_e9
008155f0 g     O .rwdata	00000180 alt_fd_list
00818762 g     O .bss	00000001 g71
00818763 g     O .bss	00000001 g126_e2
00813930 g     F .text	00000090 alt_find_dev
00809af0 g     F .text	00000148 memcpy
00818764 g     O .bss	00000001 g126
008089c0 g     F .text	0000000c _cleanup_r
008102e0 g     F .text	000000dc .hidden __floatsidf
00818765 g     O .bss	00000001 g82
00813f04 g     F .text	0000007c alt_io_redirect
0080f158 g     F .text	000000f4 .hidden __ltdf2
00818766 g     O .bss	00000001 _cg33
008145ec g       *ABS*	00000000 __DTOR_END__
00818767 g     O .bss	00000001 g12
00800308 g     F .text	00000028 VentricularPace_timer_ISR
00804584 g     F .text	00000014 puts
008141bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00818768 g     O .bss	00000001 g97
00818769 g     O .bss	00000001 g52
0080b354 g     F .text	00000074 __fpclassifyd
0080ab74 g     F .text	000000a4 __ratio
0080ca14 g     F .text	0000001c __vfiprintf_internal
0081876a g     O .bss	00000001 _cg85
0081876b g     O .bss	00000001 _cg46
00811a60 g     F .text	0000021c altera_avalon_jtag_uart_read
0081876c g     O .bss	00000001 _cg35
00804458 g     F .text	00000030 _printf_r
0081876d g     O .bss	00000001 _cg74
0080dda4 g     F .text	00000064 .hidden __udivsi3
00810854 g     F .text	000000a4 isatty
0081876e g     O .bss	00000001 g17
0081876f g     O .bss	00000001 PRE_g34
00814878 g     O .rodata	000000c8 __mprec_tens
0080994c g     F .text	0000000c __locale_charset
00818770 g     O .bss	00000001 g76
00818771 g     O .bss	00000001 g31
0081412c g     F .text	00000090 alt_icache_flush
00818772 g     O .bss	00000001 g37
0080059c g     F .text	000001b0 heartLEDs
00818860 g     O .bss	00000004 __malloc_top_pad
008169c4 g     O .rwdata	00000004 __mb_cur_max
0080997c g     F .text	0000000c _localeconv_r
00818773 g     O .bss	00000001 g62
0080a1a0 g     F .text	0000003c __i2b
00809238 g     F .text	000004bc __sfvwrite_r
008188e4 g     O .bss	00000018 PVARP_timer
00804788 g     F .text	00000054 _sbrk_r
00818774 g     O .bss	00000001 g84
00818775 g     O .bss	00000001 g41
00818776 g     O .bss	00000001 _cg26
00818777 g     O .bss	00000001 g118
00818778 g     O .bss	00000001 PRE_g40
008004b0 g     F .text	00000058 checkSwitches
0080ad90 g     F .text	00000060 _read_r
00818779 g     O .bss	00000001 _Pacemaker1_local_URI_idle
008169dc g     O .rwdata	00000004 alt_max_fd
00800470 g     F .text	00000040 URI_timer_ISR
0081877a g     O .bss	00000001 LRI_stop
0080cbb0 g     F .text	000000f0 _fclose_r
00808988 g     F .text	00000030 fflush
00800330 g     F .text	00000040 AVI_timer_ISR
0081885c g     O .bss	00000004 __malloc_max_sbrked_mem
0081877b g     O .bss	00000001 g18
0081877c g     O .bss	00000001 PRE_g124
0081877d g     O .bss	00000001 ASense
008188fc g     O .bss	00000018 VRP_timer
0080de60 g     F .text	000008ac .hidden __adddf3
0081877e g     O .bss	00000001 g15b
0080a91c g     F .text	0000010c __b2d
0080d774 g     F .text	00000538 .hidden __umoddi3
00810a20 g     F .text	000000d4 lseek
008169b4 g     O .rwdata	00000004 _global_impure_ptr
0081877f g     O .bss	00000001 g48
0080adf0 g     F .text	00000564 _realloc_r
00818aa4 g       *ABS*	00000000 __bss_end
008186f4 g     O .bss	00000004 LED1
00813d50 g     F .text	000000f0 alt_iic_isr_register
00818780 g     O .bss	00000001 _Pacemaker1_local_VRP_ex
00818781 g     O .bss	00000001 g122_e1
008110f4 g     F .text	00000108 alt_tick
00818710 g     O .bss	00000004 button1_pressed
00818782 g     O .bss	00000001 _cg95
0080d1fc g     F .text	00000578 .hidden __udivdi3
0080ce18 g     F .text	00000024 _fputwc_r
00814850 g     O .rodata	00000028 __mprec_bigtens
00809f84 g     F .text	00000104 __s2b
00818783 g     O .bss	00000001 _cg111
00818784 g     O .bss	00000001 g24b
008103bc g     F .text	000000a8 .hidden __floatunsidf
00818785 g     O .bss	00000001 g38
00818786 g     O .bss	00000001 g105
0080a65c g     F .text	00000060 __mcmp
00812f80 g     F .text	000000ac altera_avalon_uart_init
00808d28 g     F .text	00000018 __fp_lock_all
00813d04 g     F .text	0000004c alt_ic_irq_enabled
00818787 g     O .bss	00000001 _cg21
00818914 g     O .bss	00000018 Atrial_timer
00811058 g     F .text	0000009c alt_alarm_stop
00818788 g     O .bss	00000001 g124b
00818884 g     O .bss	00000004 alt_irq_active
0080344c g     F .text	00000444 _fseeko_r
00818789 g     O .bss	00000001 g38_e4
0081878a g     O .bss	00000001 g117
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008155c8 g     O .rwdata	00000028 alt_dev_null
0081878b g     O .bss	00000001 _pre_LRI_stop
00813748 g     F .text	00000048 alt_dcache_flush_all
0080a088 g     F .text	00000068 __hi0bits
0081878c g     O .bss	00000001 _reg_LRI_stop
0081878d g     O .bss	00000001 _cg63
00810260 g     F .text	00000080 .hidden __fixdfsi
0081878e g     O .bss	00000001 g64
0081878f g     O .bss	00000001 g21
00818790 g     O .bss	00000001 g74b
00818791 g     O .bss	00000001 PRE_g12
0081870c g     O .bss	00000004 button0_pressed
00818792 g     O .bss	00000001 _cg68
00818793 g     O .bss	00000001 g79
00818794 g     O .bss	00000001 g34
008169fc g       *ABS*	00000000 __ram_rwdata_end
00818795 g     O .bss	00000001 g30_e3
00818796 g     O .bss	00000001 g5
008169d4 g     O .rwdata	00000008 alt_dev_list
00818797 g     O .bss	00000001 g94
00818798 g     O .bss	00000001 g83b
00818799 g     O .bss	00000001 g110
0081879a g     O .bss	00000001 g49
00811238 g     F .text	000000f8 write
0081879b g     O .bss	00000001 _Pacemaker1_local_PVARP_ex
0081879c g     O .bss	00000001 g2
008186d4 g     O .bss	00000004 AVITOFlag
0081879d g     O .bss	00000001 g7
0081879e g     O .bss	00000001 _cg53
0081879f g     O .bss	00000001 _cg16
00814d24 g       *ABS*	00000000 __ram_rodata_end
00810768 g     F .text	000000b0 fstat
0080f158 g     F .text	000000f4 .hidden __ledf2
008187a0 g     O .bss	00000001 g80
00818700 g     O .bss	00000004 uiButton
00818720 g     O .bss	00000004 uart_fd
0080a3d4 g     F .text	00000140 __pow5mult
0080b5b8 g     F .text	0000145c ___vfiprintf_internal_r
0081886c g     O .bss	00000004 __nlocale_changed
0080de08 g     F .text	00000058 .hidden __umodsi3
008187a1 g     O .bss	00000001 g128
00818aa4 g       *ABS*	00000000 end
008187a2 g     O .bss	00000001 g100
00812664 g     F .text	000004d8 altera_avalon_lcd_16207_write
00803890 g     F .text	0000001c fseeko
00818718 g     O .bss	00000004 mode
008187a3 g     O .bss	00000001 g59
008187a4 g     O .bss	00000001 g99
008187a5 g     O .bss	00000001 g54
0081359c g     F .text	000001ac altera_avalon_uart_write
00803430 g     F .text	0000001c fseek
008187a6 g     O .bss	00000001 g66
008187a7 g     O .bss	00000001 g23
008187a8 g     O .bss	00000001 g111b
0081159c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008186e8 g     O .bss	00000004 URITOFlag
008187a9 g     O .bss	00000001 _cg83
008187aa g     O .bss	00000001 _cg44
008145ec g       *ABS*	00000000 __CTOR_LIST__
008186f8 g     O .bss	00000004 LED3
01000000 g       *ABS*	00000000 __alt_stack_pointer
008187ab g     O .bss	00000001 _cg48
00812df4 g     F .text	0000007c alt_avalon_timer_sc_init
00812ed0 g     F .text	00000060 altera_avalon_uart_write_fd
00810464 g     F .text	00000064 .hidden __clzsi2
00812f30 g     F .text	00000050 altera_avalon_uart_close_fd
008187ac g     O .bss	00000001 _Pacemaker1_local__reg_LRI_ex10
00811c7c g     F .text	00000224 altera_avalon_jtag_uart_write
008187ad g     O .bss	00000001 PRE_g71
00808d18 g     F .text	00000004 __sfp_lock_acquire
00809a0c g     F .text	000000e4 memchr
008187ae g     O .bss	00000001 g14
008049b0 g     F .text	000021f8 ___vfprintf_internal_r
008187af g     O .bss	00000001 PRE_g79
00808f28 g     F .text	00000310 _free_r
0080074c g     F .text	00000130 setFlags
00809958 g     F .text	00000010 __locale_mb_cur_max
00814438 g     F .text	00000180 __call_exitprocs
008187b0 g     O .bss	00000001 g101
008187b1 g     O .bss	00000001 _Pacemaker1_local_AEI_ex
00818868 g     O .bss	00000004 __mlocale_changed
008187b2 g     O .bss	00000001 g97_e10
008187b3 g     O .bss	00000001 _Pacemaker1_local_FilteredVSense
008187b4 g     O .bss	00000001 g122_fix2
008169bc g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008187b5 g     O .bss	00000001 _cg100
008187b6 g     O .bss	00000001 g114
0081887c g     O .bss	00000004 _alt_tick_rate
008187b7 g     O .bss	00000001 g56
008187b8 g     O .bss	00000001 PRE_g52
008187b9 g     O .bss	00000001 g129
008187ba g     O .bss	00000001 g131
0080a514 g     F .text	00000148 __lshift
008187bb g     O .bss	00000001 VSense
00818880 g     O .bss	00000004 _alt_nticks
008187bc g     O .bss	00000001 PRE_g6
00810e48 g     F .text	000000fc read
0081139c g     F .text	0000009c alt_sys_init
008187bd g     O .bss	00000001 g78
008187be g     O .bss	00000001 g33
008187bf g     O .bss	00000001 _Pacemaker1_local__reg_URI_idle15
008043f8 g     F .text	00000060 _open_r
00814320 g     F .text	00000118 __register_exitproc
00800c70 g     F .text	000000a0 UARTwrite
008187c0 g     O .bss	00000001 PRE_g119
00818704 g     O .bss	00000004 maskedButton0
00818724 g     O .bss	00000004 uart_fp
008187c1 g     O .bss	00000001 g92b
008187c2 g     O .bss	00000001 VRP_start
008187c3 g     O .bss	00000001 g109b
008187c4 g     O .bss	00000001 g122
008003b0 g     F .text	00000040 VRP_timer_ISR
008187c5 g     O .bss	00000001 g35b
0080a1dc g     F .text	000001f8 __multiply
00811908 g     F .text	00000068 altera_avalon_jtag_uart_close
008187c6 g     O .bss	00000001 _Pacemaker1_local_LRI_ex
00814d24 g       *ABS*	00000000 __ram_rwdata_start
008145ec g       *ABS*	00000000 __ram_rodata_start
0081888c g     O .bss	00000028 __malloc_current_mallinfo
008187c7 g     O .bss	00000001 _Pacemaker1_local_FilteredASense
0080aa28 g     F .text	0000014c __d2b
008186e4 g     O .bss	00000004 LRITOFlag
008187c8 g     O .bss	00000001 g50_e5
008187c9 g     O .bss	00000001 _cg29
0081892c g     O .bss	00000018 AVI_timer
00818944 g     O .bss	00000018 LRI_timer
00811438 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008187ca g     O .bss	00000001 g35
00813ac8 g     F .text	000000a4 alt_get_fd
00813fd4 g     F .text	00000158 alt_busy_sleep
008187cb g     O .bss	00000001 g15
00806e34 g     F .text	00000054 _close_r
008187cc g     O .bss	00000001 g90
008187cd g     O .bss	00000001 _GO
008187ce g     O .bss	00000001 LRI_start
008142a4 g     F .text	0000007c memcmp
008187cf g     O .bss	00000001 URITO
008114f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008187d0 g     O .bss	00000001 VRPTO
008187d1 g     O .bss	00000001 PRE_g54
00818aa4 g       *ABS*	00000000 __alt_stack_base
00811548 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
008187d2 g     O .bss	00000001 PRE_g91
008187d3 g     O .bss	00000001 g122_fix3
00806ce0 g     F .text	00000154 __swsetup_r
00800dec g     F .text	00002534 tick
0080e70c g     F .text	000008e8 .hidden __divdf3
00808bd8 g     F .text	00000118 __sfp
008187d4 g     O .bss	00000001 g63
008187d5 g     O .bss	00000001 g20
0080ac8c g     F .text	00000078 __copybits
008186e0 g     O .bss	00000004 AEITOFlag
008187d6 g     O .bss	00000001 AVITO
008187d7 g     O .bss	00000001 g60
00815148 g     O .rwdata	00000408 __malloc_av_
00808d24 g     F .text	00000004 __sinit_lock_release
0080f24c g     F .text	00000718 .hidden __muldf3
008047dc g     F .text	00000054 __sread
0081895c g     O .bss	00000018 AEI_timer
008139c0 g     F .text	00000108 alt_find_file
008187d8 g     O .bss	00000001 g60_e6
008187d9 g     O .bss	00000001 g93
008137cc g     F .text	000000a4 alt_dev_llist_insert
00810b70 g     F .text	00000024 __malloc_lock
00810fa8 g     F .text	000000b0 sbrk
008187da g     O .bss	00000001 g119
0080892c g     F .text	0000005c _fflush_r
0080caec g     F .text	000000c4 _calloc_r
008187db g     O .bss	00000001 g21b
008187dc g     O .bss	00000001 g41b
00803414 g     F .text	00000018 fopen
008186d4 g       *ABS*	00000000 __bss_start
008187dd g     O .bss	00000001 g86
008187de g     O .bss	00000001 g43
008042d0 g     F .text	00000128 memset
00800d10 g     F .text	0000003c main
00818878 g     O .bss	00000004 alt_envp
00818858 g     O .bss	00000004 __malloc_max_total_mem
008187df g     O .bss	00000001 PRE_g43
008187e0 g     O .bss	00000001 _Pacemaker1_local_AVI_ex
00811498 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008187e1 g     O .bss	00000001 g53b
00800b50 g     F .text	00000078 initialiseUART
008187e2 g     O .bss	00000001 PVARPTO
0080cffc g     F .text	00000018 __swbuf
008187e3 g     O .bss	00000001 PRE_g14
008187e4 g     O .bss	00000001 PRE_g62
008187e5 g     O .bss	00000001 g36
00812be8 g     F .text	00000134 altera_avalon_lcd_16207_init
00818974 g     O .bss	00000018 URI_timer
008187e6 g     O .bss	00000001 g89
008187e7 g     O .bss	00000001 g46
00804910 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080cca0 g     F .text	00000014 fclose
008187e8 g     O .bss	00000001 PVARP_start
00807088 g     F .text	00001688 _dtoa_r
00803ac4 g     F .text	0000080c _malloc_r
0080d170 g     F .text	00000030 __ascii_wctomb
008187e9 g     O .bss	00000001 g57b
008169e0 g     O .rwdata	00000004 alt_errno
008096f4 g     F .text	000000c4 _fwalk
008187ea g     O .bss	00000001 g95
008187eb g     O .bss	00000001 g50
008187ec g     O .bss	00000001 _pre_AEI_stop15
00800430 g     F .text	00000040 LRI_timer_ISR
008187ed g     O .bss	00000001 g96
008187ee g     O .bss	00000001 g51
0080dcac g     F .text	00000084 .hidden __divsi3
00808e04 g     F .text	00000124 _malloc_trim_r
008145ec g       *ABS*	00000000 __CTOR_END__
0080b3c8 g     F .text	000000dc strcmp
008187ef g     O .bss	00000001 g107
008187f0 g     O .bss	00000001 g115c
008145ec g       *ABS*	00000000 __flash_rodata_start
008187f1 g     O .bss	00000001 g113
008145ec g       *ABS*	00000000 __DTOR_LIST__
00800370 g     F .text	00000040 PVARP_timer_ISR
008187f2 g     O .bss	00000001 g18_e2
0080eff4 g     F .text	00000088 .hidden __nedf2
008187f3 g     O .bss	00000001 _cg80
008187f4 g     O .bss	00000001 _cg41
00811364 g     F .text	00000038 alt_irq_init
00810f44 g     F .text	00000064 alt_release_fd
008187f5 g     O .bss	00000001 g104
008187f6 g     O .bss	00000001 g122_fix1
008187f7 g     O .bss	00000001 g13
00814960 g     O .rodata	00000100 .hidden __clz_tab
008187f8 g     O .bss	00000001 _Pacemaker1_local__pre_AEI_ex14
00818864 g     O .bss	00000004 _PathLocale
008187f9 g     O .bss	00000001 PRE_g115
008187fa g     O .bss	00000001 g98
008187fb g     O .bss	00000001 g53
008187fc g     O .bss	00000001 g8
008187fd g     O .bss	00000001 g57
008187fe g     O .bss	00000001 g122_e1_fix
00814258 g     F .text	00000014 atexit
008187ff g     O .bss	00000001 AEI_start
00806c80 g     F .text	00000060 _write_r
00818800 g     O .bss	00000001 g70
00818801 g     O .bss	00000001 _cg66
00818802 g     O .bss	00000001 _cg86
008002e0 g     F .text	00000028 AtrialPace_timer_ISR
00809988 g     F .text	00000018 setlocale
00818803 g     O .bss	00000001 g10_e1
00818804 g     O .bss	00000001 g116
008169b8 g     O .rwdata	00000004 _impure_ptr
00818870 g     O .bss	00000004 alt_argc
00818805 g     O .bss	00000001 g6
00808710 g     F .text	0000021c __sflush_r
008138d0 g     F .text	00000060 _do_dtors
00809974 g     F .text	00000008 __locale_cjk_lang
00818806 g     O .bss	00000001 _Pacemaker1_local_URI_ex
00818807 g     O .bss	00000001 g72
0080342c g     F .text	00000004 _fseek_r
00818808 g     O .bss	00000001 g81
008045b4 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00818809 g     O .bss	00000001 g122_fix4
0081880a g     O .bss	00000001 PRE_g110
0080a8b8 g     F .text	00000064 __ulp
00808d40 g     F .text	00000018 __fp_unlock_all
0081880b g     O .bss	00000001 g124
00812d1c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0081880c g     O .bss	00000001 _cg13
0081880d g     O .bss	00000001 _cg9
0081880e g     O .bss	00000001 PRE_g99
008169cc g     O .rwdata	00000008 alt_fs_list
008186dc g     O .bss	00000004 VRPTOFlag
0081880f g     O .bss	00000001 g0
00800508 g     F .text	00000094 pollButtons
008186ec g     O .bss	00000004 LEDbits
00818810 g     O .bss	00000001 g75
00818811 g     O .bss	00000001 g30
00818812 g     O .bss	00000001 g72b
00800020 g       *ABS*	00000000 __ram_exceptions_start
008099a0 g     F .text	0000000c localeconv
00818813 g     O .bss	00000001 _Pacemaker1_local__pre_LRI_ex10
00818814 g     O .bss	00000001 _reg_AEI_stop15
00818815 g     O .bss	00000001 g16
00818816 g     O .bss	00000001 _cg24
00813ba0 g     F .text	00000050 alt_ic_isr_register
00818817 g     O .bss	00000001 g58
00818818 g     O .bss	00000001 _cg94
00818819 g     O .bss	00000001 _cg57
0081881a g     O .bss	00000001 g68
0081881b g     O .bss	00000001 g25
008169fc g       *ABS*	00000000 _edata
00812e70 g     F .text	00000060 altera_avalon_uart_read_fd
0081881c g     O .bss	00000001 PRE_g93
00818aa4 g       *ABS*	00000000 _end
0081881d g     O .bss	00000001 g11
0080ccb4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00811970 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0081881e g     O .bss	00000001 g65
0081881f g     O .bss	00000001 g22
00818820 g     O .bss	00000001 g69_e7
00818821 g     O .bss	00000001 g28
00818822 g     O .bss	00000001 g73
008186fc g     O .bss	00000004 LED4
00813c78 g     F .text	0000008c alt_ic_irq_disable
00818823 g     O .bss	00000001 g115b
00804838 g     F .text	0000007c __swrite
008169c0 g     O .rwdata	00000004 __malloc_trim_threshold
00809968 g     F .text	0000000c __locale_msgcharset
00818824 g     O .bss	00000001 g113_e12
0081426c g     F .text	00000038 exit
00818825 g     O .bss	00000001 g125
008097b8 g     F .text	000000c4 _fwalk_reent
0080a6bc g     F .text	000001fc __mdiff
00818826 g     O .bss	00000001 g77
00818827 g     O .bss	00000001 g32
0080dd30 g     F .text	00000074 .hidden __modsi3
00818828 g     O .bss	00000001 g124c
008169f8 g     O .rwdata	00000004 __ctype_ptr__
00818829 g     O .bss	00000001 g63b
0081882a g     O .bss	00000001 g88
0081882b g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00808d1c g     F .text	00000004 __sfp_lock_release
0081898c g     O .bss	00000018 VentricularPace_timer
00800000 g       *ABS*	00000000 __alt_mem_sdram
0081882c g     O .bss	00000001 PRE_g82
0081882d g     O .bss	00000001 _cg103
0081882e g     O .bss	00000001 _cg92
0081882f g     O .bss	00000001 _cg55
00818830 g     O .bss	00000001 g130
00814aa2 g     O .rodata	00000101 _ctype_
00818831 g     O .bss	00000001 g106_e11
00818832 g     O .bss	00000001 g77_e8
008132f4 g     F .text	00000054 altera_avalon_uart_close
00818833 g     O .bss	00000001 PRE_g73
00803320 g     F .text	000000f4 _fopen_r
008145b8 g     F .text	00000034 _exit
008104c8 g     F .text	0000012c alt_alarm_start
00818834 g     O .bss	00000001 g121
0080087c g     F .text	000002d4 startTimers
00818835 g     O .bss	00000001 g100b
00818836 g     O .bss	00000001 _cg109
00803908 g     F .text	000001bc __smakebuf_r
00818837 g     O .bss	00000001 VPace
00804918 g     F .text	00000098 strlen
00818838 g     O .bss	00000001 g39
00810cb8 g     F .text	00000154 open
0080f07c g     F .text	000000dc .hidden __gedf2
00818839 g     O .bss	00000001 _cg88
0081883a g     O .bss	00000001 _cg49
0081883b g     O .bss	00000001 g120
0081883c g     O .bss	00000001 PRE_g108
008169c8 g     O .rwdata	00000004 __wctomb
0080b5a0 g     F .text	00000018 __sprint_r
00813b6c g     F .text	00000034 alt_icache_flush_all
0081883d g     O .bss	00000001 g29
0081883e g     O .bss	00000001 _cg4
0081883f g     O .bss	00000001 g67
00818840 g     O .bss	00000001 g24
00818841 g     O .bss	00000001 AEI_stop
00818842 g     O .bss	00000001 g117_e13
008169f4 g     O .rwdata	00000004 alt_priority_mask
00818843 g     O .bss	00000001 g109
00800290 g     F .text	00000028 Atrial_timer_ISR
00813bf0 g     F .text	00000088 alt_ic_irq_enable
00806ba8 g     F .text	0000001c __vfprintf_internal
008186f0 g     O .bss	00000004 LED0
00813384 g     F .text	000001dc altera_avalon_uart_read
0080d1a0 g     F .text	0000005c _wctomb_r
00818844 g     O .bss	00000001 URI_start
00818845 g     O .bss	00000001 g4b
0080f964 g     F .text	000008fc .hidden __subdf3
00818846 g     O .bss	00000001 g106
00818847 g     O .bss	00000001 _cg36
0080a0f0 g     F .text	000000b0 __lo0bits
0081871c g     O .bss	00000004 switch0
00818848 g     O .bss	00000001 g10
008169e8 g     O .rwdata	00000008 alt_alarm_list
00818849 g     O .bss	00000001 _cg27
00813870 g     F .text	00000060 _do_ctors
0080d0b0 g     F .text	000000c0 wcrtomb
0081884a g     O .bss	00000001 AEITO
0081884b g     O .bss	00000001 g69
0081884c g     O .bss	00000001 g26
00810630 g     F .text	000000d0 close
0081884d g     O .bss	00000001 g13b
00810960 g     F .text	00000084 alt_load
0081884e g     O .bss	00000001 _cg72
0081884f g     O .bss	00000001 _Pacemaker1_local__pre_URI_idle15
0080ce3c g     F .text	00000080 fputwc
00808d20 g     F .text	00000004 __sinit_lock_acquire
00818850 g     O .bss	00000001 _cg105
00809e64 g     F .text	00000120 __multadd
00809e3c g     F .text	00000028 _Bfree
00818851 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a26904 	addi	r2,r2,-30300
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a26904 	addi	r2,r2,-30300
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7b517 	ldw	r2,-24876(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7b517 	ldw	r2,-24876(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6ba6d14 	ori	gp,gp,59828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10a1b514 	ori	r2,r2,34516

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18e2a914 	ori	r3,r3,35492

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08109600 	call	810960 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	0810af40 	call	810af4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <Atrial_timer_ISR>:


//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 Atrial_timer_ISR(void* context)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	LED0 = 0; //Turn atrial LED off
  8002a0:	d0274f15 	stw	zero,-25284(gp)
	return 0; //Don't restart timer
  8002a4:	0005883a 	mov	r2,zero
}
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <Ventricular_timer_ISR>:

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 Ventricular_timer_ISR(void* context)
{
  8002b8:	defffe04 	addi	sp,sp,-8
  8002bc:	df000115 	stw	fp,4(sp)
  8002c0:	df000104 	addi	fp,sp,4
  8002c4:	e13fff15 	stw	r4,-4(fp)
	LED1 = 0; //Turn ventricular LED off
  8002c8:	d0275015 	stw	zero,-25280(gp)
	return 0; //Don't restart timer
  8002cc:	0005883a 	mov	r2,zero
}
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <AtrialPace_timer_ISR>:

//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 AtrialPace_timer_ISR(void* context)
{
  8002e0:	defffe04 	addi	sp,sp,-8
  8002e4:	df000115 	stw	fp,4(sp)
  8002e8:	df000104 	addi	fp,sp,4
  8002ec:	e13fff15 	stw	r4,-4(fp)
	LED3 = 0; //Turn atrial LED off
  8002f0:	d0275115 	stw	zero,-25276(gp)
	return 0; //Don't restart timer
  8002f4:	0005883a 	mov	r2,zero
}
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00104 	addi	sp,sp,4
  800304:	f800283a 	ret

00800308 <VentricularPace_timer_ISR>:

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 VentricularPace_timer_ISR(void* context)
{
  800308:	defffe04 	addi	sp,sp,-8
  80030c:	df000115 	stw	fp,4(sp)
  800310:	df000104 	addi	fp,sp,4
  800314:	e13fff15 	stw	r4,-4(fp)
	LED4 = 0; //Turn ventricular LED off
  800318:	d0275215 	stw	zero,-25272(gp)
	return 0; //Don't restart timer
  80031c:	0005883a 	mov	r2,zero
}
  800320:	e037883a 	mov	sp,fp
  800324:	df000017 	ldw	fp,0(sp)
  800328:	dec00104 	addi	sp,sp,4
  80032c:	f800283a 	ret

00800330 <AVI_timer_ISR>:

//ISR called when AVI timer ends. Used to set AVI timeout flag high
alt_u32 AVI_timer_ISR(void* context)
{
  800330:	defffd04 	addi	sp,sp,-12
  800334:	dfc00215 	stw	ra,8(sp)
  800338:	df000115 	stw	fp,4(sp)
  80033c:	df000104 	addi	fp,sp,4
  800340:	e13fff15 	stw	r4,-4(fp)
	AVITOFlag = 1; //Set AVI timeout flag
  800344:	00800044 	movi	r2,1
  800348:	d0a74815 	stw	r2,-25312(gp)
	printf("AVI timed out\n");
  80034c:	01002074 	movhi	r4,129
  800350:	21117b04 	addi	r4,r4,17900
  800354:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  800358:	0005883a 	mov	r2,zero
}
  80035c:	e037883a 	mov	sp,fp
  800360:	dfc00117 	ldw	ra,4(sp)
  800364:	df000017 	ldw	fp,0(sp)
  800368:	dec00204 	addi	sp,sp,8
  80036c:	f800283a 	ret

00800370 <PVARP_timer_ISR>:

//ISR called when PVARP timer ends. Used to set PVARP timeout flag high
alt_u32 PVARP_timer_ISR(void* context)
{
  800370:	defffd04 	addi	sp,sp,-12
  800374:	dfc00215 	stw	ra,8(sp)
  800378:	df000115 	stw	fp,4(sp)
  80037c:	df000104 	addi	fp,sp,4
  800380:	e13fff15 	stw	r4,-4(fp)
	PVARPTOFlag = 1; //Set PVARP timeout flag
  800384:	00800044 	movi	r2,1
  800388:	d0a74915 	stw	r2,-25308(gp)
	printf("PVARP timed out\n");
  80038c:	01002074 	movhi	r4,129
  800390:	21117f04 	addi	r4,r4,17916
  800394:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  800398:	0005883a 	mov	r2,zero
}
  80039c:	e037883a 	mov	sp,fp
  8003a0:	dfc00117 	ldw	ra,4(sp)
  8003a4:	df000017 	ldw	fp,0(sp)
  8003a8:	dec00204 	addi	sp,sp,8
  8003ac:	f800283a 	ret

008003b0 <VRP_timer_ISR>:

//ISR called when VRP timer ends. Used to set VRP timeout flag high
alt_u32 VRP_timer_ISR(void* context)
{
  8003b0:	defffd04 	addi	sp,sp,-12
  8003b4:	dfc00215 	stw	ra,8(sp)
  8003b8:	df000115 	stw	fp,4(sp)
  8003bc:	df000104 	addi	fp,sp,4
  8003c0:	e13fff15 	stw	r4,-4(fp)
	VRPTOFlag = 1; //Set VRP timeout flag
  8003c4:	00800044 	movi	r2,1
  8003c8:	d0a74a15 	stw	r2,-25304(gp)
	printf("VRP timed out\n");
  8003cc:	01002074 	movhi	r4,129
  8003d0:	21118304 	addi	r4,r4,17932
  8003d4:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  8003d8:	0005883a 	mov	r2,zero
}
  8003dc:	e037883a 	mov	sp,fp
  8003e0:	dfc00117 	ldw	ra,4(sp)
  8003e4:	df000017 	ldw	fp,0(sp)
  8003e8:	dec00204 	addi	sp,sp,8
  8003ec:	f800283a 	ret

008003f0 <AEI_timer_ISR>:

//ISR called when AEI timer ends. Used to set AEI timeout flag high
alt_u32 AEI_timer_ISR(void* context)
{
  8003f0:	defffd04 	addi	sp,sp,-12
  8003f4:	dfc00215 	stw	ra,8(sp)
  8003f8:	df000115 	stw	fp,4(sp)
  8003fc:	df000104 	addi	fp,sp,4
  800400:	e13fff15 	stw	r4,-4(fp)
	AEITOFlag = 1; //Set AEI timeout flag
  800404:	00800044 	movi	r2,1
  800408:	d0a74b15 	stw	r2,-25300(gp)
	printf("AEI timed out\n");
  80040c:	01002074 	movhi	r4,129
  800410:	21118704 	addi	r4,r4,17948
  800414:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  800418:	0005883a 	mov	r2,zero
}
  80041c:	e037883a 	mov	sp,fp
  800420:	dfc00117 	ldw	ra,4(sp)
  800424:	df000017 	ldw	fp,0(sp)
  800428:	dec00204 	addi	sp,sp,8
  80042c:	f800283a 	ret

00800430 <LRI_timer_ISR>:

//ISR called when LRI timer ends. Used to set LRI timeout flag high
alt_u32 LRI_timer_ISR(void* context)
{
  800430:	defffd04 	addi	sp,sp,-12
  800434:	dfc00215 	stw	ra,8(sp)
  800438:	df000115 	stw	fp,4(sp)
  80043c:	df000104 	addi	fp,sp,4
  800440:	e13fff15 	stw	r4,-4(fp)
	LRITOFlag = 1; //Set LRI timeout flag
  800444:	00800044 	movi	r2,1
  800448:	d0a74c15 	stw	r2,-25296(gp)
	printf("LRI timed out\n");
  80044c:	01002074 	movhi	r4,129
  800450:	21118b04 	addi	r4,r4,17964
  800454:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  800458:	0005883a 	mov	r2,zero
}
  80045c:	e037883a 	mov	sp,fp
  800460:	dfc00117 	ldw	ra,4(sp)
  800464:	df000017 	ldw	fp,0(sp)
  800468:	dec00204 	addi	sp,sp,8
  80046c:	f800283a 	ret

00800470 <URI_timer_ISR>:

//ISR called when URI timer ends. Used to set URI timeout flag high
alt_u32 URI_timer_ISR(void* context)
{
  800470:	defffd04 	addi	sp,sp,-12
  800474:	dfc00215 	stw	ra,8(sp)
  800478:	df000115 	stw	fp,4(sp)
  80047c:	df000104 	addi	fp,sp,4
  800480:	e13fff15 	stw	r4,-4(fp)
	URITOFlag = 1; //Set URI timeout flag
  800484:	00800044 	movi	r2,1
  800488:	d0a74d15 	stw	r2,-25292(gp)
	printf("URI timed out\n");
  80048c:	01002074 	movhi	r4,129
  800490:	21118f04 	addi	r4,r4,17980
  800494:	08045840 	call	804584 <puts>
	return 0; //Don't restart timer
  800498:	0005883a 	mov	r2,zero
}
  80049c:	e037883a 	mov	sp,fp
  8004a0:	dfc00117 	ldw	ra,4(sp)
  8004a4:	df000017 	ldw	fp,0(sp)
  8004a8:	dec00204 	addi	sp,sp,8
  8004ac:	f800283a 	ret

008004b0 <checkSwitches>:


void checkSwitches()
{
  8004b0:	deffff04 	addi	sp,sp,-4
  8004b4:	df000015 	stw	fp,0(sp)
  8004b8:	d839883a 	mov	fp,sp
	switch_bits = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE); // clear the edge capture register
  8004bc:	00804434 	movhi	r2,272
  8004c0:	10842404 	addi	r2,r2,4240
  8004c4:	10800037 	ldwio	r2,0(r2)
  8004c8:	d0a75815 	stw	r2,-25248(gp)
	switch0 = ((1 << 0)&(switch_bits)); // Mask switch 0
  8004cc:	d0a75817 	ldw	r2,-25248(gp)
  8004d0:	1080004c 	andi	r2,r2,1
  8004d4:	d0a75a15 	stw	r2,-25240(gp)
	if (switch0 == 0) // Mode 1 if switch set to 0
  8004d8:	d0a75a17 	ldw	r2,-25240(gp)
  8004dc:	1000031e 	bne	r2,zero,8004ec <checkSwitches+0x3c>
	{
		mode = 1;
  8004e0:	00800044 	movi	r2,1
  8004e4:	d0a75915 	stw	r2,-25244(gp)
	} else // Mode 2 if switch set to 1
	{
		mode = 2;
	}
}
  8004e8:	00000206 	br	8004f4 <checkSwitches+0x44>
	if (switch0 == 0) // Mode 1 if switch set to 0
	{
		mode = 1;
	} else // Mode 2 if switch set to 1
	{
		mode = 2;
  8004ec:	00800084 	movi	r2,2
  8004f0:	d0a75915 	stw	r2,-25244(gp)
	}
}
  8004f4:	0001883a 	nop
  8004f8:	e037883a 	mov	sp,fp
  8004fc:	df000017 	ldw	fp,0(sp)
  800500:	dec00104 	addi	sp,sp,4
  800504:	f800283a 	ret

00800508 <pollButtons>:

//This function checks if a button is pushed and sets the appropriate flag
void pollButtons()
{
  800508:	defffd04 	addi	sp,sp,-12
  80050c:	df000215 	stw	fp,8(sp)
  800510:	df000204 	addi	fp,sp,8
	if (mode == 1){ // Buttons disabled in mode 2
  800514:	d0a75917 	ldw	r2,-25244(gp)
  800518:	10800058 	cmpnei	r2,r2,1
  80051c:	10001a1e 	bne	r2,zero,800588 <pollButtons+0x80>
		// Poll buttons
		uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); //Read the buttons register
  800520:	00804434 	movhi	r2,272
  800524:	10842804 	addi	r2,r2,4256
  800528:	10800037 	ldwio	r2,0(r2)
  80052c:	d0a75315 	stw	r2,-25268(gp)
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// Clear the edge capture register
  800530:	0007883a 	mov	r3,zero
  800534:	00804434 	movhi	r2,272
  800538:	10842b04 	addi	r2,r2,4268
  80053c:	10c00035 	stwio	r3,0(r2)
		int maskedButton0 = uiButton & (1 << 0); //Mask out the bit for button 0 (ventricular event button)
  800540:	d0a75317 	ldw	r2,-25268(gp)
  800544:	1080004c 	andi	r2,r2,1
  800548:	e0bffe15 	stw	r2,-8(fp)
		int maskedButton1 = uiButton & (1 << 1); //Mask out the bit for button 1 (atrial event button)
  80054c:	d0a75317 	ldw	r2,-25268(gp)
  800550:	1080008c 	andi	r2,r2,2
  800554:	e0bfff15 	stw	r2,-4(fp)

		if (maskedButton1 > 0){ //Check if button 1 is not pushed
  800558:	e0bfff17 	ldw	r2,-4(fp)
  80055c:	0080020e 	bge	zero,r2,800568 <pollButtons+0x60>
			ASense = 0; //Reset atrial sense flag
  800560:	d0277245 	stb	zero,-25143(gp)
  800564:	00000206 	br	800570 <pollButtons+0x68>
		} else {
			ASense = 1; //Set atrial sense flag
  800568:	00800044 	movi	r2,1
  80056c:	d0a77245 	stb	r2,-25143(gp)
		}

		if (maskedButton0 > 0){ //Check if button 0 is not pushed
  800570:	e0bffe17 	ldw	r2,-8(fp)
  800574:	0080020e 	bge	zero,r2,800580 <pollButtons+0x78>
			VSense = 0; //Reset ventricular sense flag
  800578:	d02781c5 	stb	zero,-25081(gp)
		} else {
			VSense = 1; //Set ventricular sense flag
		}
	}
}
  80057c:	00000206 	br	800588 <pollButtons+0x80>
		}

		if (maskedButton0 > 0){ //Check if button 0 is not pushed
			VSense = 0; //Reset ventricular sense flag
		} else {
			VSense = 1; //Set ventricular sense flag
  800580:	00800044 	movi	r2,1
  800584:	d0a781c5 	stb	r2,-25081(gp)
		}
	}
}
  800588:	0001883a 	nop
  80058c:	e037883a 	mov	sp,fp
  800590:	df000017 	ldw	fp,0(sp)
  800594:	dec00104 	addi	sp,sp,4
  800598:	f800283a 	ret

0080059c <heartLEDs>:
//This function is used to blink the LEDs to show sensing
//and pacing of the heart.
void heartLEDs()
{
  80059c:	defffe04 	addi	sp,sp,-8
  8005a0:	dfc00115 	stw	ra,4(sp)
  8005a4:	df000015 	stw	fp,0(sp)
  8005a8:	d839883a 	mov	fp,sp
	if (ASense == 1) //Check if A was sensed
  8005ac:	d0a77243 	ldbu	r2,-25143(gp)
  8005b0:	10803fcc 	andi	r2,r2,255
  8005b4:	1080201c 	xori	r2,r2,128
  8005b8:	10bfe004 	addi	r2,r2,-128
  8005bc:	10800058 	cmpnei	r2,r2,1
  8005c0:	10000c1e 	bne	r2,zero,8005f4 <heartLEDs+0x58>
	{
		LED0 = 1; //Set atrial LED on
  8005c4:	00800044 	movi	r2,1
  8005c8:	d0a74f15 	stw	r2,-25284(gp)
		alt_alarm_stop(&Atrial_timer); //Check timer is stopped before starting
  8005cc:	010020b4 	movhi	r4,130
  8005d0:	21224504 	addi	r4,r4,-30444
  8005d4:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL); // Start timer
  8005d8:	000f883a 	mov	r7,zero
  8005dc:	01802034 	movhi	r6,128
  8005e0:	3180a404 	addi	r6,r6,656
  8005e4:	01401904 	movi	r5,100
  8005e8:	010020b4 	movhi	r4,130
  8005ec:	21224504 	addi	r4,r4,-30444
  8005f0:	08104c80 	call	8104c8 <alt_alarm_start>
	}

	if (VSense == 1) //Check if V was sensed
  8005f4:	d0a781c3 	ldbu	r2,-25081(gp)
  8005f8:	10803fcc 	andi	r2,r2,255
  8005fc:	1080201c 	xori	r2,r2,128
  800600:	10bfe004 	addi	r2,r2,-128
  800604:	10800058 	cmpnei	r2,r2,1
  800608:	10000c1e 	bne	r2,zero,80063c <heartLEDs+0xa0>
	{
		LED1 = 1; //Set ventricular LED on
  80060c:	00800044 	movi	r2,1
  800610:	d0a75015 	stw	r2,-25280(gp)
		alt_alarm_stop(&Ventricular_timer); //Check timer is stopped before starting
  800614:	010020b4 	movhi	r4,130
  800618:	21223304 	addi	r4,r4,-30516
  80061c:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL); // Start timer
  800620:	000f883a 	mov	r7,zero
  800624:	01802034 	movhi	r6,128
  800628:	3180ae04 	addi	r6,r6,696
  80062c:	01401904 	movi	r5,100
  800630:	010020b4 	movhi	r4,130
  800634:	21223304 	addi	r4,r4,-30516
  800638:	08104c80 	call	8104c8 <alt_alarm_start>
	}

	if (APace == 1) //Check if A was paced
  80063c:	d0a75dc3 	ldbu	r2,-25225(gp)
  800640:	10803fcc 	andi	r2,r2,255
  800644:	1080201c 	xori	r2,r2,128
  800648:	10bfe004 	addi	r2,r2,-128
  80064c:	10800058 	cmpnei	r2,r2,1
  800650:	10000c1e 	bne	r2,zero,800684 <heartLEDs+0xe8>
	{
		LED3 = 1; //Set atrial LED on
  800654:	00800044 	movi	r2,1
  800658:	d0a75115 	stw	r2,-25276(gp)
		alt_alarm_stop(&AtrialPace_timer); //Check timer is stopped before starting
  80065c:	010020b4 	movhi	r4,130
  800660:	21222d04 	addi	r4,r4,-30540
  800664:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&AtrialPace_timer, 100, AtrialPace_timer_ISR, NULL); // Start timer
  800668:	000f883a 	mov	r7,zero
  80066c:	01802034 	movhi	r6,128
  800670:	3180b804 	addi	r6,r6,736
  800674:	01401904 	movi	r5,100
  800678:	010020b4 	movhi	r4,130
  80067c:	21222d04 	addi	r4,r4,-30540
  800680:	08104c80 	call	8104c8 <alt_alarm_start>
	}
	if (VPace == 1) //Check if V was paced
  800684:	d0a7a0c3 	ldbu	r2,-24957(gp)
  800688:	10803fcc 	andi	r2,r2,255
  80068c:	1080201c 	xori	r2,r2,128
  800690:	10bfe004 	addi	r2,r2,-128
  800694:	10800058 	cmpnei	r2,r2,1
  800698:	10000c1e 	bne	r2,zero,8006cc <heartLEDs+0x130>
	{
		LED4 = 1; //Set ventricular LED on
  80069c:	00800044 	movi	r2,1
  8006a0:	d0a75215 	stw	r2,-25272(gp)
		alt_alarm_stop(&VentricularPace_timer); //Check timer is stopped before starting
  8006a4:	010020b4 	movhi	r4,130
  8006a8:	21226304 	addi	r4,r4,-30324
  8006ac:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&VentricularPace_timer, 100, VentricularPace_timer_ISR, NULL); // Start timer
  8006b0:	000f883a 	mov	r7,zero
  8006b4:	01802034 	movhi	r6,128
  8006b8:	3180c204 	addi	r6,r6,776
  8006bc:	01401904 	movi	r5,100
  8006c0:	010020b4 	movhi	r4,130
  8006c4:	21226304 	addi	r4,r4,-30324
  8006c8:	08104c80 	call	8104c8 <alt_alarm_start>
	}


	LEDbits = 0; //Set all LEDs off
  8006cc:	d0274e15 	stw	zero,-25288(gp)
	//Set atrial and ventricular LEDs to their current state
	LEDbits = (LEDbits | (LED0 << 1)); // LED 1 represents atrial senses
  8006d0:	d0a74f17 	ldw	r2,-25284(gp)
  8006d4:	1085883a 	add	r2,r2,r2
  8006d8:	1007883a 	mov	r3,r2
  8006dc:	d0a74e17 	ldw	r2,-25288(gp)
  8006e0:	1884b03a 	or	r2,r3,r2
  8006e4:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = (LEDbits | (LED1 << 0)); // LED 0 represents ventricular senses
  8006e8:	d0e74e17 	ldw	r3,-25288(gp)
  8006ec:	d0a75017 	ldw	r2,-25280(gp)
  8006f0:	1884b03a 	or	r2,r3,r2
  8006f4:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = (LEDbits | (LED3 << 4)); // LED 4 represents atrial senses
  8006f8:	d0a75117 	ldw	r2,-25276(gp)
  8006fc:	1006913a 	slli	r3,r2,4
  800700:	d0a74e17 	ldw	r2,-25288(gp)
  800704:	1884b03a 	or	r2,r3,r2
  800708:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = (LEDbits | (LED4 << 3)); // LED 3 represents ventricular senses
  80070c:	d0a75217 	ldw	r2,-25272(gp)
  800710:	100690fa 	slli	r3,r2,3
  800714:	d0a74e17 	ldw	r2,-25288(gp)
  800718:	1884b03a 	or	r2,r3,r2
  80071c:	d0a74e15 	stw	r2,-25288(gp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits); //Write LED values
  800720:	d0a74e17 	ldw	r2,-25288(gp)
  800724:	1007883a 	mov	r3,r2
  800728:	00804434 	movhi	r2,272
  80072c:	10841c04 	addi	r2,r2,4208
  800730:	10c00035 	stwio	r3,0(r2)
}
  800734:	0001883a 	nop
  800738:	e037883a 	mov	sp,fp
  80073c:	dfc00117 	ldw	ra,4(sp)
  800740:	df000017 	ldw	fp,0(sp)
  800744:	dec00204 	addi	sp,sp,8
  800748:	f800283a 	ret

0080074c <setFlags>:

//Flags are used as a buffer before being output to SCCharts.
// This function sets flags as a buffer, to account for the
// difference in speed between the C and SCC logic.
void setFlags()
{
  80074c:	defffe04 	addi	sp,sp,-8
  800750:	dfc00115 	stw	ra,4(sp)
  800754:	df000015 	stw	fp,0(sp)
  800758:	d839883a 	mov	fp,sp
	if (AVITOFlag == 1) {
  80075c:	d0a74817 	ldw	r2,-25312(gp)
  800760:	10800058 	cmpnei	r2,r2,1
  800764:	1000071e 	bne	r2,zero,800784 <setFlags+0x38>
		AVITO = 1;
  800768:	00800044 	movi	r2,1
  80076c:	d0a78885 	stb	r2,-25054(gp)
		AVITOFlag = 0;
  800770:	d0274815 	stw	zero,-25312(gp)
		printf("----AVI timed out----\n");
  800774:	01002074 	movhi	r4,129
  800778:	21119304 	addi	r4,r4,17996
  80077c:	08045840 	call	804584 <puts>
  800780:	00000106 	br	800788 <setFlags+0x3c>
	} else {
		AVITO = 0;
  800784:	d0278885 	stb	zero,-25054(gp)
	}

	if (PVARPTOFlag == 1) {
  800788:	d0a74917 	ldw	r2,-25308(gp)
  80078c:	10800058 	cmpnei	r2,r2,1
  800790:	1000071e 	bne	r2,zero,8007b0 <setFlags+0x64>
		PVARPTO = 1;
  800794:	00800044 	movi	r2,1
  800798:	d0a78b85 	stb	r2,-25042(gp)
		PVARPTOFlag = 0;
  80079c:	d0274915 	stw	zero,-25308(gp)
			printf("----PVARP timed out----\n");
  8007a0:	01002074 	movhi	r4,129
  8007a4:	21119904 	addi	r4,r4,18020
  8007a8:	08045840 	call	804584 <puts>
  8007ac:	00000106 	br	8007b4 <setFlags+0x68>
	} else {
		PVARPTO = 0;
  8007b0:	d0278b85 	stb	zero,-25042(gp)
	}

	if (VRPTOFlag == 1) {
  8007b4:	d0a74a17 	ldw	r2,-25304(gp)
  8007b8:	10800058 	cmpnei	r2,r2,1
  8007bc:	1000071e 	bne	r2,zero,8007dc <setFlags+0x90>
		VRPTO= 1;
  8007c0:	00800044 	movi	r2,1
  8007c4:	d0a78705 	stb	r2,-25060(gp)
		VRPTOFlag = 0;
  8007c8:	d0274a15 	stw	zero,-25304(gp)
			printf("----VRP timed out----\n");
  8007cc:	01002074 	movhi	r4,129
  8007d0:	21119f04 	addi	r4,r4,18044
  8007d4:	08045840 	call	804584 <puts>
  8007d8:	00000106 	br	8007e0 <setFlags+0x94>
	} else {
		VRPTO = 0;
  8007dc:	d0278705 	stb	zero,-25060(gp)
	}

	if (AEITOFlag == 1) {
  8007e0:	d0a74b17 	ldw	r2,-25300(gp)
  8007e4:	10800058 	cmpnei	r2,r2,1
  8007e8:	1000071e 	bne	r2,zero,800808 <setFlags+0xbc>
		AEITO = 1;
  8007ec:	00800044 	movi	r2,1
  8007f0:	d0a7a585 	stb	r2,-24938(gp)
		AEITOFlag = 0;
  8007f4:	d0274b15 	stw	zero,-25300(gp)
			printf("----AEI timed out----\n");
  8007f8:	01002074 	movhi	r4,129
  8007fc:	2111a504 	addi	r4,r4,18068
  800800:	08045840 	call	804584 <puts>
  800804:	00000106 	br	80080c <setFlags+0xc0>
	} else {
		AEITO = 0;
  800808:	d027a585 	stb	zero,-24938(gp)
	}

	if (LRITOFlag == 1) {
  80080c:	d0a74c17 	ldw	r2,-25296(gp)
  800810:	10800058 	cmpnei	r2,r2,1
  800814:	1000071e 	bne	r2,zero,800834 <setFlags+0xe8>
		LRITO= 1;
  800818:	00800044 	movi	r2,1
  80081c:	d0a76445 	stb	r2,-25199(gp)
		LRITOFlag = 0;
  800820:	d0274c15 	stw	zero,-25296(gp)
			printf("----LRI timed out----\n");
  800824:	01002074 	movhi	r4,129
  800828:	2111ab04 	addi	r4,r4,18092
  80082c:	08045840 	call	804584 <puts>
  800830:	00000106 	br	800838 <setFlags+0xec>
	} else {
		LRITO = 0;
  800834:	d0276445 	stb	zero,-25199(gp)
	}

	if (URITOFlag == 1) {
  800838:	d0a74d17 	ldw	r2,-25292(gp)
  80083c:	10800058 	cmpnei	r2,r2,1
  800840:	1000071e 	bne	r2,zero,800860 <setFlags+0x114>
		URITO = 1;
  800844:	00800044 	movi	r2,1
  800848:	d0a786c5 	stb	r2,-25061(gp)
		URITOFlag = 0;
  80084c:	d0274d15 	stw	zero,-25292(gp)
			printf("----URI timed out----\n");
  800850:	01002074 	movhi	r4,129
  800854:	2111b104 	addi	r4,r4,18116
  800858:	08045840 	call	804584 <puts>
	} else {
		URITO = 0;
	}
}
  80085c:	00000106 	br	800864 <setFlags+0x118>
	if (URITOFlag == 1) {
		URITO = 1;
		URITOFlag = 0;
			printf("----URI timed out----\n");
	} else {
		URITO = 0;
  800860:	d02786c5 	stb	zero,-25061(gp)
	}
}
  800864:	0001883a 	nop
  800868:	e037883a 	mov	sp,fp
  80086c:	dfc00117 	ldw	ra,4(sp)
  800870:	df000017 	ldw	fp,0(sp)
  800874:	dec00204 	addi	sp,sp,8
  800878:	f800283a 	ret

0080087c <startTimers>:

//This function is used to start all timers at the time they need starting.
void startTimers()
{
  80087c:	defffe04 	addi	sp,sp,-8
  800880:	dfc00115 	stw	ra,4(sp)
  800884:	df000015 	stw	fp,0(sp)
  800888:	d839883a 	mov	fp,sp

	if (AVI_start == 1) // Start the relevant timer if SCChart provides the start signal
  80088c:	d0a76703 	ldbu	r2,-25188(gp)
  800890:	10803fcc 	andi	r2,r2,255
  800894:	1080201c 	xori	r2,r2,128
  800898:	10bfe004 	addi	r2,r2,-128
  80089c:	10800058 	cmpnei	r2,r2,1
  8008a0:	10000e1e 	bne	r2,zero,8008dc <startTimers+0x60>
	{
		alt_alarm_stop(&AVI_timer); // Stop the timer, if it hasn't started yet it's ok
  8008a4:	010020b4 	movhi	r4,130
  8008a8:	21224b04 	addi	r4,r4,-30420
  8008ac:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL); // start timer
  8008b0:	000f883a 	mov	r7,zero
  8008b4:	01802034 	movhi	r6,128
  8008b8:	3180cc04 	addi	r6,r6,816
  8008bc:	01404b04 	movi	r5,300
  8008c0:	010020b4 	movhi	r4,130
  8008c4:	21224b04 	addi	r4,r4,-30420
  8008c8:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("avi start \n");
  8008cc:	01002074 	movhi	r4,129
  8008d0:	2111b704 	addi	r4,r4,18140
  8008d4:	08045840 	call	804584 <puts>
  8008d8:	00000c06 	br	80090c <startTimers+0x90>
	}
	else if (AVI_stop == 1)
  8008dc:	d0a76a43 	ldbu	r2,-25175(gp)
  8008e0:	10803fcc 	andi	r2,r2,255
  8008e4:	1080201c 	xori	r2,r2,128
  8008e8:	10bfe004 	addi	r2,r2,-128
  8008ec:	10800058 	cmpnei	r2,r2,1
  8008f0:	1000061e 	bne	r2,zero,80090c <startTimers+0x90>
	{
		alt_alarm_stop(&AVI_timer); // Stop the timer, if it hasn't started yet it's ok
  8008f4:	010020b4 	movhi	r4,130
  8008f8:	21224b04 	addi	r4,r4,-30420
  8008fc:	08110580 	call	811058 <alt_alarm_stop>
		printf("avi stop\n");
  800900:	01002074 	movhi	r4,129
  800904:	2111ba04 	addi	r4,r4,18152
  800908:	08045840 	call	804584 <puts>
	}

	if (PVARP_start == 1)
  80090c:	d0a78d03 	ldbu	r2,-25036(gp)
  800910:	10803fcc 	andi	r2,r2,255
  800914:	1080201c 	xori	r2,r2,128
  800918:	10bfe004 	addi	r2,r2,-128
  80091c:	10800058 	cmpnei	r2,r2,1
  800920:	10000d1e 	bne	r2,zero,800958 <startTimers+0xdc>
	{
		alt_alarm_stop(&PVARP_timer);// Stop the timer, if it hasn't started yet it's ok
  800924:	010020b4 	movhi	r4,130
  800928:	21223904 	addi	r4,r4,-30492
  80092c:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);// start timer
  800930:	000f883a 	mov	r7,zero
  800934:	01802034 	movhi	r6,128
  800938:	3180dc04 	addi	r6,r6,880
  80093c:	01400c84 	movi	r5,50
  800940:	010020b4 	movhi	r4,130
  800944:	21223904 	addi	r4,r4,-30492
  800948:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("pvarp start\n");
  80094c:	01002074 	movhi	r4,129
  800950:	2111bd04 	addi	r4,r4,18164
  800954:	08045840 	call	804584 <puts>
	}

	if(VRP_start==1)
  800958:	d0a78383 	ldbu	r2,-25074(gp)
  80095c:	10803fcc 	andi	r2,r2,255
  800960:	1080201c 	xori	r2,r2,128
  800964:	10bfe004 	addi	r2,r2,-128
  800968:	10800058 	cmpnei	r2,r2,1
  80096c:	10000d1e 	bne	r2,zero,8009a4 <startTimers+0x128>
	{
		alt_alarm_stop(&VRP_timer);// Stop the timer, if it hasn't started yet it's ok
  800970:	010020b4 	movhi	r4,130
  800974:	21223f04 	addi	r4,r4,-30468
  800978:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);// start timer
  80097c:	000f883a 	mov	r7,zero
  800980:	01802034 	movhi	r6,128
  800984:	3180ec04 	addi	r6,r6,944
  800988:	01402584 	movi	r5,150
  80098c:	010020b4 	movhi	r4,130
  800990:	21223f04 	addi	r4,r4,-30468
  800994:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("vrp start\n");
  800998:	01002074 	movhi	r4,129
  80099c:	2111c004 	addi	r4,r4,18176
  8009a0:	08045840 	call	804584 <puts>
	}

	if(AEI_start==1)
  8009a4:	d0a792c3 	ldbu	r2,-25013(gp)
  8009a8:	10803fcc 	andi	r2,r2,255
  8009ac:	1080201c 	xori	r2,r2,128
  8009b0:	10bfe004 	addi	r2,r2,-128
  8009b4:	10800058 	cmpnei	r2,r2,1
  8009b8:	10000e1e 	bne	r2,zero,8009f4 <startTimers+0x178>
	{
		alt_alarm_stop(&AEI_timer);// Stop the timer, if it hasn't started yet it's ok
  8009bc:	010020b4 	movhi	r4,130
  8009c0:	21225704 	addi	r4,r4,-30372
  8009c4:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);// start timer
  8009c8:	000f883a 	mov	r7,zero
  8009cc:	01802034 	movhi	r6,128
  8009d0:	3180fc04 	addi	r6,r6,1008
  8009d4:	0140c804 	movi	r5,800
  8009d8:	010020b4 	movhi	r4,130
  8009dc:	21225704 	addi	r4,r4,-30372
  8009e0:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("aei start\n");
  8009e4:	01002074 	movhi	r4,129
  8009e8:	2111c304 	addi	r4,r4,18188
  8009ec:	08045840 	call	804584 <puts>
  8009f0:	00000c06 	br	800a24 <startTimers+0x1a8>
	}
	else if (AEI_stop == 1)
  8009f4:	d0a7a343 	ldbu	r2,-24947(gp)
  8009f8:	10803fcc 	andi	r2,r2,255
  8009fc:	1080201c 	xori	r2,r2,128
  800a00:	10bfe004 	addi	r2,r2,-128
  800a04:	10800058 	cmpnei	r2,r2,1
  800a08:	1000061e 	bne	r2,zero,800a24 <startTimers+0x1a8>
	{
		alt_alarm_stop(&AEI_timer);// Stop the timer, if it hasn't started yet it's ok
  800a0c:	010020b4 	movhi	r4,130
  800a10:	21225704 	addi	r4,r4,-30372
  800a14:	08110580 	call	811058 <alt_alarm_stop>
		printf("aei stop \n");
  800a18:	01002074 	movhi	r4,129
  800a1c:	2111c604 	addi	r4,r4,18200
  800a20:	08045840 	call	804584 <puts>
	}

	if (URI_start == 1)
  800a24:	d0a7a403 	ldbu	r2,-24944(gp)
  800a28:	10803fcc 	andi	r2,r2,255
  800a2c:	1080201c 	xori	r2,r2,128
  800a30:	10bfe004 	addi	r2,r2,-128
  800a34:	10800058 	cmpnei	r2,r2,1
  800a38:	10000d1e 	bne	r2,zero,800a70 <startTimers+0x1f4>
	{
		alt_alarm_stop(&URI_timer);// Stop the timer, if it hasn't started yet it's ok
  800a3c:	010020b4 	movhi	r4,130
  800a40:	21225d04 	addi	r4,r4,-30348
  800a44:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);// start timer
  800a48:	000f883a 	mov	r7,zero
  800a4c:	01802034 	movhi	r6,128
  800a50:	31811c04 	addi	r6,r6,1136
  800a54:	0140e104 	movi	r5,900
  800a58:	010020b4 	movhi	r4,130
  800a5c:	21225d04 	addi	r4,r4,-30348
  800a60:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("uri start\n");
  800a64:	01002074 	movhi	r4,129
  800a68:	2111c904 	addi	r4,r4,18212
  800a6c:	08045840 	call	804584 <puts>
	}

	if (LRI_start == 1)
  800a70:	d0a78683 	ldbu	r2,-25062(gp)
  800a74:	10803fcc 	andi	r2,r2,255
  800a78:	1080201c 	xori	r2,r2,128
  800a7c:	10bfe004 	addi	r2,r2,-128
  800a80:	10800058 	cmpnei	r2,r2,1
  800a84:	10000e1e 	bne	r2,zero,800ac0 <startTimers+0x244>
	{
		alt_alarm_stop(&LRI_timer);// Stop the timer, if it hasn't started yet it's ok
  800a88:	010020b4 	movhi	r4,130
  800a8c:	21225104 	addi	r4,r4,-30396
  800a90:	08110580 	call	811058 <alt_alarm_stop>
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);// start timer
  800a94:	000f883a 	mov	r7,zero
  800a98:	01802034 	movhi	r6,128
  800a9c:	31810c04 	addi	r6,r6,1072
  800aa0:	0140ed84 	movi	r5,950
  800aa4:	010020b4 	movhi	r4,130
  800aa8:	21225104 	addi	r4,r4,-30396
  800aac:	08104c80 	call	8104c8 <alt_alarm_start>
		printf("lri start\n");
  800ab0:	01002074 	movhi	r4,129
  800ab4:	2111cc04 	addi	r4,r4,18224
  800ab8:	08045840 	call	804584 <puts>
  800abc:	00000c06 	br	800af0 <startTimers+0x274>
	}
	else if (LRI_stop == 1)
  800ac0:	d0a77183 	ldbu	r2,-25146(gp)
  800ac4:	10803fcc 	andi	r2,r2,255
  800ac8:	1080201c 	xori	r2,r2,128
  800acc:	10bfe004 	addi	r2,r2,-128
  800ad0:	10800058 	cmpnei	r2,r2,1
  800ad4:	1000061e 	bne	r2,zero,800af0 <startTimers+0x274>
	{
		alt_alarm_stop(&LRI_timer);// Stop the timer, if it hasn't started yet it's ok
  800ad8:	010020b4 	movhi	r4,130
  800adc:	21225104 	addi	r4,r4,-30396
  800ae0:	08110580 	call	811058 <alt_alarm_stop>
		printf("lri stop\n");
  800ae4:	01002074 	movhi	r4,129
  800ae8:	2111cf04 	addi	r4,r4,18236
  800aec:	08045840 	call	804584 <puts>
	}


	if (VPace == 1)
  800af0:	d0a7a0c3 	ldbu	r2,-24957(gp)
  800af4:	10803fcc 	andi	r2,r2,255
  800af8:	1080201c 	xori	r2,r2,128
  800afc:	10bfe004 	addi	r2,r2,-128
  800b00:	10800058 	cmpnei	r2,r2,1
  800b04:	1000031e 	bne	r2,zero,800b14 <startTimers+0x298>
	{
		printf("**********V paced**");
  800b08:	01002074 	movhi	r4,129
  800b0c:	2111d204 	addi	r4,r4,18248
  800b10:	08044880 	call	804488 <printf>
	}

	AVI_start = 0;
  800b14:	d0276705 	stb	zero,-25188(gp)
	PVARP_start = 0;
  800b18:	d0278d05 	stb	zero,-25036(gp)
	VRP_start = 0;
  800b1c:	d0278385 	stb	zero,-25074(gp)
	AEI_start = 0;
  800b20:	d02792c5 	stb	zero,-25013(gp)
	LRI_start = 0;
  800b24:	d0278685 	stb	zero,-25062(gp)
	URI_start = 0;
  800b28:	d027a405 	stb	zero,-24944(gp)

	AVI_stop = 0;
  800b2c:	d0276a45 	stb	zero,-25175(gp)
	AEI_stop = 0;
  800b30:	d027a345 	stb	zero,-24947(gp)
	LRI_stop = 0;
  800b34:	d0277185 	stb	zero,-25146(gp)
}
  800b38:	0001883a 	nop
  800b3c:	e037883a 	mov	sp,fp
  800b40:	dfc00117 	ldw	ra,4(sp)
  800b44:	df000017 	ldw	fp,0(sp)
  800b48:	dec00204 	addi	sp,sp,8
  800b4c:	f800283a 	ret

00800b50 <initialiseUART>:

void initialiseUART()
{
  800b50:	defffe04 	addi	sp,sp,-8
  800b54:	dfc00115 	stw	ra,4(sp)
  800b58:	df000015 	stw	fp,0(sp)
  800b5c:	d839883a 	mov	fp,sp
	//set the file pointer for the uart peripheral
	uart_fd = open(UART_NAME, O_RDWR | O_NONBLOCK);
  800b60:	01500084 	movi	r5,16386
  800b64:	01002074 	movhi	r4,129
  800b68:	2111d704 	addi	r4,r4,18268
  800b6c:	0810cb80 	call	810cb8 <open>
  800b70:	d0a75b15 	stw	r2,-25236(gp)
	uart_fp = fopen(UART_NAME,"r+"); // for reference
  800b74:	01402074 	movhi	r5,129
  800b78:	2951da04 	addi	r5,r5,18280
  800b7c:	01002074 	movhi	r4,129
  800b80:	2111d704 	addi	r4,r4,18268
  800b84:	08034140 	call	803414 <fopen>
  800b88:	d0a75c15 	stw	r2,-25232(gp)
	if(!uart_fp) // Check we actually have a file pointer
  800b8c:	d0a75c17 	ldw	r2,-25232(gp)
  800b90:	1000041e 	bne	r2,zero,800ba4 <initialiseUART+0x54>
	{
		printf("Failed to open UART");
  800b94:	01002074 	movhi	r4,129
  800b98:	2111db04 	addi	r4,r4,18284
  800b9c:	08044880 	call	804488 <printf>
	} else {
		printf("Open UART success");
	}
}
  800ba0:	00000306 	br	800bb0 <initialiseUART+0x60>
	uart_fp = fopen(UART_NAME,"r+"); // for reference
	if(!uart_fp) // Check we actually have a file pointer
	{
		printf("Failed to open UART");
	} else {
		printf("Open UART success");
  800ba4:	01002074 	movhi	r4,129
  800ba8:	2111e004 	addi	r4,r4,18304
  800bac:	08044880 	call	804488 <printf>
	}
}
  800bb0:	0001883a 	nop
  800bb4:	e037883a 	mov	sp,fp
  800bb8:	dfc00117 	ldw	ra,4(sp)
  800bbc:	df000017 	ldw	fp,0(sp)
  800bc0:	dec00204 	addi	sp,sp,8
  800bc4:	f800283a 	ret

00800bc8 <UARTreceive>:

void UARTreceive(){
  800bc8:	deffbd04 	addi	sp,sp,-268
  800bcc:	dfc04215 	stw	ra,264(sp)
  800bd0:	df004115 	stw	fp,260(sp)
  800bd4:	df004104 	addi	fp,sp,260
	if (mode == 2){
  800bd8:	d0a75917 	ldw	r2,-25244(gp)
  800bdc:	10800098 	cmpnei	r2,r2,2
  800be0:	10001d1e 	bne	r2,zero,800c58 <UARTreceive+0x90>
		char uartString[255]; // Create an empty string
		int uart_rxcount = read(uart_fd, &uartString, sizeof(uartString)); // Read from UART
  800be4:	d0a75b17 	ldw	r2,-25236(gp)
  800be8:	e0ffc004 	addi	r3,fp,-256
  800bec:	01803fc4 	movi	r6,255
  800bf0:	180b883a 	mov	r5,r3
  800bf4:	1009883a 	mov	r4,r2
  800bf8:	0810e480 	call	810e48 <read>
  800bfc:	e0bfbf15 	stw	r2,-260(fp)

		if(uart_rxcount > 0) // Check we've actually received something
  800c00:	e0bfbf17 	ldw	r2,-260(fp)
  800c04:	0080140e 	bge	zero,r2,800c58 <UARTreceive+0x90>
		{
			if(uartString[0] == 'A') // Check if we received ASense
  800c08:	e0bfc003 	ldbu	r2,-256(fp)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1080201c 	xori	r2,r2,128
  800c14:	10bfe004 	addi	r2,r2,-128
  800c18:	10801058 	cmpnei	r2,r2,65
  800c1c:	1000031e 	bne	r2,zero,800c2c <UARTreceive+0x64>
			{
				ASense = 1;
  800c20:	00800044 	movi	r2,1
  800c24:	d0a77245 	stb	r2,-25143(gp)
  800c28:	00000106 	br	800c30 <UARTreceive+0x68>
			}
			else
			{
				ASense = 0;
  800c2c:	d0277245 	stb	zero,-25143(gp)
			}

			if(uartString[0] == 'V') // Check if we received VSense
  800c30:	e0bfc003 	ldbu	r2,-256(fp)
  800c34:	10803fcc 	andi	r2,r2,255
  800c38:	1080201c 	xori	r2,r2,128
  800c3c:	10bfe004 	addi	r2,r2,-128
  800c40:	10801598 	cmpnei	r2,r2,86
  800c44:	1000031e 	bne	r2,zero,800c54 <UARTreceive+0x8c>
			{
				VSense = 1;
  800c48:	00800044 	movi	r2,1
  800c4c:	d0a781c5 	stb	r2,-25081(gp)
			{
				VSense = 0;
			}
		}
	}
}
  800c50:	00000106 	br	800c58 <UARTreceive+0x90>
			{
				VSense = 1;
			}
			else
			{
				VSense = 0;
  800c54:	d02781c5 	stb	zero,-25081(gp)
			}
		}
	}
}
  800c58:	0001883a 	nop
  800c5c:	e037883a 	mov	sp,fp
  800c60:	dfc00117 	ldw	ra,4(sp)
  800c64:	df000017 	ldw	fp,0(sp)
  800c68:	dec00204 	addi	sp,sp,8
  800c6c:	f800283a 	ret

00800c70 <UARTwrite>:

void UARTwrite(){
  800c70:	defffd04 	addi	sp,sp,-12
  800c74:	dfc00215 	stw	ra,8(sp)
  800c78:	df000115 	stw	fp,4(sp)
  800c7c:	df000104 	addi	fp,sp,4
	if (mode == 2)
  800c80:	d0a75917 	ldw	r2,-25244(gp)
  800c84:	10800098 	cmpnei	r2,r2,2
  800c88:	10001b1e 	bne	r2,zero,800cf8 <UARTwrite+0x88>
	{
		char A = 'A';
  800c8c:	00801044 	movi	r2,65
  800c90:	e0bfff05 	stb	r2,-4(fp)
		char V = 'V';
  800c94:	00801584 	movi	r2,86
  800c98:	e0bfff45 	stb	r2,-3(fp)

		if(APace == 1){
  800c9c:	d0a75dc3 	ldbu	r2,-25225(gp)
  800ca0:	10803fcc 	andi	r2,r2,255
  800ca4:	1080201c 	xori	r2,r2,128
  800ca8:	10bfe004 	addi	r2,r2,-128
  800cac:	10800058 	cmpnei	r2,r2,1
  800cb0:	1000051e 	bne	r2,zero,800cc8 <UARTwrite+0x58>
			write(uart_fd, &A, 1); // Write A to UART
  800cb4:	d0a75b17 	ldw	r2,-25236(gp)
  800cb8:	01800044 	movi	r6,1
  800cbc:	e17fff04 	addi	r5,fp,-4
  800cc0:	1009883a 	mov	r4,r2
  800cc4:	08112380 	call	811238 <write>
		}
		if(VPace == 1){
  800cc8:	d0a7a0c3 	ldbu	r2,-24957(gp)
  800ccc:	10803fcc 	andi	r2,r2,255
  800cd0:	1080201c 	xori	r2,r2,128
  800cd4:	10bfe004 	addi	r2,r2,-128
  800cd8:	10800058 	cmpnei	r2,r2,1
  800cdc:	1000061e 	bne	r2,zero,800cf8 <UARTwrite+0x88>
			write(uart_fd, &V, 1); // Write V to UART
  800ce0:	d0a75b17 	ldw	r2,-25236(gp)
  800ce4:	e0ffff44 	addi	r3,fp,-3
  800ce8:	01800044 	movi	r6,1
  800cec:	180b883a 	mov	r5,r3
  800cf0:	1009883a 	mov	r4,r2
  800cf4:	08112380 	call	811238 <write>
		}
	}
}
  800cf8:	0001883a 	nop
  800cfc:	e037883a 	mov	sp,fp
  800d00:	dfc00117 	ldw	ra,4(sp)
  800d04:	df000017 	ldw	fp,0(sp)
  800d08:	dec00204 	addi	sp,sp,8
  800d0c:	f800283a 	ret

00800d10 <main>:

int main()
{
  800d10:	defffe04 	addi	sp,sp,-8
  800d14:	dfc00115 	stw	ra,4(sp)
  800d18:	df000015 	stw	fp,0(sp)
  800d1c:	d839883a 	mov	fp,sp
	// Reset the scc
	reset();
  800d20:	0800d4c0 	call	800d4c <reset>

	initialiseUART();
  800d24:	0800b500 	call	800b50 <initialiseUART>

	while(1) // Main loop
	{
		pollButtons();
  800d28:	08005080 	call	800508 <pollButtons>
		setFlags();
  800d2c:	080074c0 	call	80074c <setFlags>
		tick();
  800d30:	0800dec0 	call	800dec <tick>
		startTimers();
  800d34:	080087c0 	call	80087c <startTimers>
		heartLEDs();
  800d38:	080059c0 	call	80059c <heartLEDs>
		checkSwitches();
  800d3c:	08004b00 	call	8004b0 <checkSwitches>
		UARTwrite();
  800d40:	0800c700 	call	800c70 <UARTwrite>
		UARTreceive();
  800d44:	0800bc80 	call	800bc8 <UARTreceive>
	}
  800d48:	003ff706 	br	800d28 <__alt_mem_onchip_mem+0xff780d28>

00800d4c <reset>:
char g122_e1_fix;
char g122_e1;
char g126_e2;
char g130_e3;
int _PRE_GO;
void reset(){
  800d4c:	deffff04 	addi	sp,sp,-4
  800d50:	df000015 	stw	fp,0(sp)
  800d54:	d839883a 	mov	fp,sp
   _GO = 1;
  800d58:	00800044 	movi	r2,1
  800d5c:	d0a78645 	stb	r2,-25063(gp)
   _PRE_GO = 0;
  800d60:	d0276515 	stw	zero,-25196(gp)
   PRE_g3 = 0;
  800d64:	d0276605 	stb	zero,-25192(gp)
   PRE_g6 = 0;
  800d68:	d0278205 	stb	zero,-25080(gp)
   PRE_g12 = 0;
  800d6c:	d0277745 	stb	zero,-25123(gp)
   PRE_g14 = 0;
  800d70:	d0278bc5 	stb	zero,-25041(gp)
   PRE_g20 = 0;
  800d74:	d0276a05 	stb	zero,-25176(gp)
   PRE_g23 = 0;
  800d78:	d0275f85 	stb	zero,-25218(gp)
   PRE_g32 = 0;
  800d7c:	d0276805 	stb	zero,-25184(gp)
   PRE_g34 = 0;
  800d80:	d0276ec5 	stb	zero,-25157(gp)
   PRE_g40 = 0;
  800d84:	d0277105 	stb	zero,-25148(gp)
   PRE_g43 = 0;
  800d88:	d0278ac5 	stb	zero,-25045(gp)
   PRE_g52 = 0;
  800d8c:	d0278105 	stb	zero,-25084(gp)
   PRE_g54 = 0;
  800d90:	d0278745 	stb	zero,-25059(gp)
   PRE_g56 = 0;
  800d94:	d02767c5 	stb	zero,-25185(gp)
   PRE_g62 = 0;
  800d98:	d0278c05 	stb	zero,-25040(gp)
   PRE_g65 = 0;
  800d9c:	d02769c5 	stb	zero,-25177(gp)
   PRE_g71 = 0;
  800da0:	d0277e45 	stb	zero,-25095(gp)
   PRE_g73 = 0;
  800da4:	d0279fc5 	stb	zero,-24961(gp)
   PRE_g79 = 0;
  800da8:	d0277ec5 	stb	zero,-25093(gp)
   PRE_g82 = 0;
  800dac:	d0279e05 	stb	zero,-24968(gp)
   PRE_g91 = 0;
  800db0:	d0278785 	stb	zero,-25058(gp)
   PRE_g93 = 0;
  800db4:	d0279a05 	stb	zero,-24984(gp)
   PRE_g99 = 0;
  800db8:	d0279685 	stb	zero,-24998(gp)
   PRE_g102 = 0;
  800dbc:	d0275f05 	stb	zero,-25220(gp)
   PRE_g108 = 0;
  800dc0:	d027a205 	stb	zero,-24952(gp)
   PRE_g110 = 0;
  800dc4:	d0279585 	stb	zero,-25002(gp)
   PRE_g115 = 0;
  800dc8:	d0279145 	stb	zero,-25019(gp)
   PRE_g119 = 0;
  800dcc:	d0278305 	stb	zero,-25076(gp)
   PRE_g124 = 0;
  800dd0:	d0277205 	stb	zero,-25144(gp)
   PRE_g128 = 0;
  800dd4:	d0276185 	stb	zero,-25210(gp)
   return;
  800dd8:	0001883a 	nop
}
  800ddc:	e037883a 	mov	sp,fp
  800de0:	df000017 	ldw	fp,0(sp)
  800de4:	dec00104 	addi	sp,sp,4
  800de8:	f800283a 	ret

00800dec <tick>:
void tick(){
  800dec:	deffff04 	addi	sp,sp,-4
  800df0:	df000015 	stw	fp,0(sp)
  800df4:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800df8:	d0a76517 	ldw	r2,-25196(gp)
  800dfc:	10800058 	cmpnei	r2,r2,1
  800e00:	1000011e 	bne	r2,zero,800e08 <tick+0x1c>
      _GO = 0;
  800e04:	d0278645 	stb	zero,-25063(gp)
   }
   {
      g0 = _GO;
  800e08:	d0a78643 	ldbu	r2,-25063(gp)
  800e0c:	d0a796c5 	stb	r2,-24997(gp)
      g1 = g0;
  800e10:	d0a796c3 	ldbu	r2,-24997(gp)
  800e14:	d0a76ac5 	stb	r2,-25173(gp)
      g2 = g1;
  800e18:	d0a76ac3 	ldbu	r2,-25173(gp)
  800e1c:	d0a77a05 	stb	r2,-25112(gp)
      g127 = g0;
  800e20:	d0a796c3 	ldbu	r2,-24997(gp)
  800e24:	d0a763c5 	stb	r2,-25201(gp)
      g129 =(PRE_g128);
  800e28:	d0a76183 	ldbu	r2,-25210(gp)
  800e2c:	d0a78145 	stb	r2,-25083(gp)
      g128 =(g127||g129);
  800e30:	d0a763c3 	ldbu	r2,-25201(gp)
  800e34:	10803fcc 	andi	r2,r2,255
  800e38:	1080201c 	xori	r2,r2,128
  800e3c:	10bfe004 	addi	r2,r2,-128
  800e40:	1000051e 	bne	r2,zero,800e58 <tick+0x6c>
  800e44:	d0a78143 	ldbu	r2,-25083(gp)
  800e48:	10803fcc 	andi	r2,r2,255
  800e4c:	1080201c 	xori	r2,r2,128
  800e50:	10bfe004 	addi	r2,r2,-128
  800e54:	10000226 	beq	r2,zero,800e60 <tick+0x74>
  800e58:	00800044 	movi	r2,1
  800e5c:	00000106 	br	800e64 <tick+0x78>
  800e60:	0005883a 	mov	r2,zero
  800e64:	d0a77b45 	stb	r2,-25107(gp)
      if(g128){
  800e68:	d0a77b43 	ldbu	r2,-25107(gp)
  800e6c:	10803fcc 	andi	r2,r2,255
  800e70:	1080201c 	xori	r2,r2,128
  800e74:	10bfe004 	addi	r2,r2,-128
  800e78:	10000b26 	beq	r2,zero,800ea8 <tick+0xbc>
         VPace = 0;
  800e7c:	d027a0c5 	stb	zero,-24957(gp)
         APace = 0;
  800e80:	d0275dc5 	stb	zero,-25225(gp)
         AVI_start = 0;
  800e84:	d0276705 	stb	zero,-25188(gp)
         LRI_start = 0;
  800e88:	d0278685 	stb	zero,-25062(gp)
         VRP_start = 0;
  800e8c:	d0278385 	stb	zero,-25074(gp)
         AEI_start = 0;
  800e90:	d02792c5 	stb	zero,-25013(gp)
         PVARP_start = 0;
  800e94:	d0278d05 	stb	zero,-25036(gp)
         URI_start = 0;
  800e98:	d027a405 	stb	zero,-24944(gp)
         AVI_stop = 0;
  800e9c:	d0276a45 	stb	zero,-25175(gp)
         LRI_stop = 0;
  800ea0:	d0277185 	stb	zero,-25146(gp)
         AEI_stop = 0;
  800ea4:	d027a345 	stb	zero,-24947(gp)
      }
      g116 =(PRE_g115);
  800ea8:	d0a79143 	ldbu	r2,-25019(gp)
  800eac:	d0a79405 	stb	r2,-25008(gp)
      if(g116){
  800eb0:	d0a79403 	ldbu	r2,-25008(gp)
  800eb4:	10803fcc 	andi	r2,r2,255
  800eb8:	1080201c 	xori	r2,r2,128
  800ebc:	10bfe004 	addi	r2,r2,-128
  800ec0:	10000626 	beq	r2,zero,800edc <tick+0xf0>
         _Pacemaker1_local__pre_LRI_ex10 = _Pacemaker1_local__reg_LRI_ex10;
  800ec4:	d0a77e03 	ldbu	r2,-25096(gp)
  800ec8:	d0a797c5 	stb	r2,-24993(gp)
         _Pacemaker1_local__pre_AEI_ex14 = _Pacemaker1_local__reg_AEI_ex14;
  800ecc:	d0a760c3 	ldbu	r2,-25213(gp)
  800ed0:	d0a79105 	stb	r2,-25020(gp)
         _Pacemaker1_local__pre_URI_idle15 = _Pacemaker1_local__reg_URI_idle15;
  800ed4:	d0a782c3 	ldbu	r2,-25077(gp)
  800ed8:	d0a7a6c5 	stb	r2,-24933(gp)
      }
      g125 =(PRE_g124);
  800edc:	d0a77203 	ldbu	r2,-25144(gp)
  800ee0:	d0a79c45 	stb	r2,-24975(gp)
      if(g125){
  800ee4:	d0a79c43 	ldbu	r2,-24975(gp)
  800ee8:	10803fcc 	andi	r2,r2,255
  800eec:	1080201c 	xori	r2,r2,128
  800ef0:	10bfe004 	addi	r2,r2,-128
  800ef4:	10000626 	beq	r2,zero,800f10 <tick+0x124>
         _pre_AEI_stop15 = _reg_AEI_stop15;
  800ef8:	d0a79803 	ldbu	r2,-24992(gp)
  800efc:	d0a78e05 	stb	r2,-25032(gp)
         _pre_VRP_start18 = _reg_VRP_start18;
  800f00:	d0a76343 	ldbu	r2,-25203(gp)
  800f04:	d0a76785 	stb	r2,-25186(gp)
         _pre_LRI_stop = _reg_LRI_stop;
  800f08:	d0a77603 	ldbu	r2,-25128(gp)
  800f0c:	d0a775c5 	stb	r2,-25129(gp)
      }
      g35 =(PRE_g34);
  800f10:	d0a76ec3 	ldbu	r2,-25157(gp)
  800f14:	d0a78585 	stb	r2,-25066(gp)
      g35b = g35;
  800f18:	d0a78583 	ldbu	r2,-25066(gp)
  800f1c:	d0a78445 	stb	r2,-25071(gp)
      _cg35 = _pre_LRI_stop;
  800f20:	d0a775c3 	ldbu	r2,-25129(gp)
  800f24:	d0a76e05 	stb	r2,-25160(gp)
      g36 =(g35b&&(!(_cg35)));
  800f28:	d0a78443 	ldbu	r2,-25071(gp)
  800f2c:	10803fcc 	andi	r2,r2,255
  800f30:	1080201c 	xori	r2,r2,128
  800f34:	10bfe004 	addi	r2,r2,-128
  800f38:	10000726 	beq	r2,zero,800f58 <tick+0x16c>
  800f3c:	d0a76e03 	ldbu	r2,-25160(gp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	1000021e 	bne	r2,zero,800f58 <tick+0x16c>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <tick+0x170>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	d0a78c45 	stb	r2,-25039(gp)
      _cg36 = _Pacemaker1_local__pre_LRI_ex10;
  800f60:	d0a797c3 	ldbu	r2,-24993(gp)
  800f64:	d0a7a4c5 	stb	r2,-24941(gp)
      g37 =(g36&&_cg36);
  800f68:	d0a78c43 	ldbu	r2,-25039(gp)
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	1080201c 	xori	r2,r2,128
  800f74:	10bfe004 	addi	r2,r2,-128
  800f78:	10000726 	beq	r2,zero,800f98 <tick+0x1ac>
  800f7c:	d0a7a4c3 	ldbu	r2,-24941(gp)
  800f80:	10803fcc 	andi	r2,r2,255
  800f84:	1080201c 	xori	r2,r2,128
  800f88:	10bfe004 	addi	r2,r2,-128
  800f8c:	10000226 	beq	r2,zero,800f98 <tick+0x1ac>
  800f90:	00800044 	movi	r2,1
  800f94:	00000106 	br	800f9c <tick+0x1b0>
  800f98:	0005883a 	mov	r2,zero
  800f9c:	d0a76f85 	stb	r2,-25154(gp)
      if(g37){
  800fa0:	d0a76f83 	ldbu	r2,-25154(gp)
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1080201c 	xori	r2,r2,128
  800fac:	10bfe004 	addi	r2,r2,-128
  800fb0:	10000226 	beq	r2,zero,800fbc <tick+0x1d0>
         VPace =(VPace||1);
  800fb4:	00800044 	movi	r2,1
  800fb8:	d0a7a0c5 	stb	r2,-24957(gp)
      }
      g57 =(PRE_g56);
  800fbc:	d0a767c3 	ldbu	r2,-25185(gp)
  800fc0:	d0a79245 	stb	r2,-25015(gp)
      g57b = g57;
  800fc4:	d0a79243 	ldbu	r2,-25015(gp)
  800fc8:	d0a78d45 	stb	r2,-25035(gp)
      _cg57 = _Pacemaker1_local__pre_URI_idle15;
  800fcc:	d0a7a6c3 	ldbu	r2,-24933(gp)
  800fd0:	d0a79945 	stb	r2,-24987(gp)
      g58 =(g57b&&_cg57);
  800fd4:	d0a78d43 	ldbu	r2,-25035(gp)
  800fd8:	10803fcc 	andi	r2,r2,255
  800fdc:	1080201c 	xori	r2,r2,128
  800fe0:	10bfe004 	addi	r2,r2,-128
  800fe4:	10000726 	beq	r2,zero,801004 <tick+0x218>
  800fe8:	d0a79943 	ldbu	r2,-24987(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	10000226 	beq	r2,zero,801004 <tick+0x218>
  800ffc:	00800044 	movi	r2,1
  801000:	00000106 	br	801008 <tick+0x21c>
  801004:	0005883a 	mov	r2,zero
  801008:	d0a798c5 	stb	r2,-24989(gp)
      if(g58){
  80100c:	d0a798c3 	ldbu	r2,-24989(gp)
  801010:	10803fcc 	andi	r2,r2,255
  801014:	1080201c 	xori	r2,r2,128
  801018:	10bfe004 	addi	r2,r2,-128
  80101c:	10000226 	beq	r2,zero,801028 <tick+0x23c>
         VPace =(VPace||1);
  801020:	00800044 	movi	r2,1
  801024:	d0a7a0c5 	stb	r2,-24957(gp)
      }
      g120 =(PRE_g119);
  801028:	d0a78303 	ldbu	r2,-25076(gp)
  80102c:	d0a7a1c5 	stb	r2,-24953(gp)
      g118 = g1;
  801030:	d0a76ac3 	ldbu	r2,-25173(gp)
  801034:	d0a770c5 	stb	r2,-25149(gp)
      g119 =(g120||g118);
  801038:	d0a7a1c3 	ldbu	r2,-24953(gp)
  80103c:	10803fcc 	andi	r2,r2,255
  801040:	1080201c 	xori	r2,r2,128
  801044:	10bfe004 	addi	r2,r2,-128
  801048:	1000051e 	bne	r2,zero,801060 <tick+0x274>
  80104c:	d0a770c3 	ldbu	r2,-25149(gp)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	10000226 	beq	r2,zero,801068 <tick+0x27c>
  801060:	00800044 	movi	r2,1
  801064:	00000106 	br	80106c <tick+0x280>
  801068:	0005883a 	mov	r2,zero
  80106c:	d0a78985 	stb	r2,-25050(gp)
      if(g119){
  801070:	d0a78983 	ldbu	r2,-25050(gp)
  801074:	10803fcc 	andi	r2,r2,255
  801078:	1080201c 	xori	r2,r2,128
  80107c:	10bfe004 	addi	r2,r2,-128
  801080:	10000926 	beq	r2,zero,8010a8 <tick+0x2bc>
         _Pacemaker1_local_LRI_ex = 0;
  801084:	d0278485 	stb	zero,-25070(gp)
         _Pacemaker1_local_VRP_ex = 0;
  801088:	d0277305 	stb	zero,-25140(gp)
         _Pacemaker1_local_AVI_ex = 0;
  80108c:	d0278b05 	stb	zero,-25044(gp)
         _Pacemaker1_local_URI_ex = 0;
  801090:	d0279485 	stb	zero,-25006(gp)
         _Pacemaker1_local_PVARP_ex = 0;
  801094:	d02779c5 	stb	zero,-25113(gp)
         _Pacemaker1_local_AEI_ex = 0;
  801098:	d0277f45 	stb	zero,-25091(gp)
         _Pacemaker1_local_FilteredASense = 0;
  80109c:	d02784c5 	stb	zero,-25069(gp)
         _Pacemaker1_local_FilteredVSense = 0;
  8010a0:	d0277fc5 	stb	zero,-25089(gp)
         _Pacemaker1_local_URI_idle = 0;
  8010a4:	d0277145 	stb	zero,-25147(gp)
      }
      g13 =(PRE_g12);
  8010a8:	d0a77743 	ldbu	r2,-25123(gp)
  8010ac:	d0a790c5 	stb	r2,-25021(gp)
      g13b = g13;
  8010b0:	d0a790c3 	ldbu	r2,-25021(gp)
  8010b4:	d0a7a645 	stb	r2,-24935(gp)
      _cg13 = _pre_VRP_start18;
  8010b8:	d0a76783 	ldbu	r2,-25186(gp)
  8010bc:	d0a79605 	stb	r2,-25000(gp)
      g16 =(g13b&&(!(_cg13)));
  8010c0:	d0a7a643 	ldbu	r2,-24935(gp)
  8010c4:	10803fcc 	andi	r2,r2,255
  8010c8:	1080201c 	xori	r2,r2,128
  8010cc:	10bfe004 	addi	r2,r2,-128
  8010d0:	10000726 	beq	r2,zero,8010f0 <tick+0x304>
  8010d4:	d0a79603 	ldbu	r2,-25000(gp)
  8010d8:	10803fcc 	andi	r2,r2,255
  8010dc:	1080201c 	xori	r2,r2,128
  8010e0:	10bfe004 	addi	r2,r2,-128
  8010e4:	1000021e 	bne	r2,zero,8010f0 <tick+0x304>
  8010e8:	00800044 	movi	r2,1
  8010ec:	00000106 	br	8010f4 <tick+0x308>
  8010f0:	0005883a 	mov	r2,zero
  8010f4:	d0a79845 	stb	r2,-24991(gp)
      _cg16 = VSense;
  8010f8:	d0a781c3 	ldbu	r2,-25081(gp)
  8010fc:	d0a77ac5 	stb	r2,-25109(gp)
      g17 =(g16&&_cg16);
  801100:	d0a79843 	ldbu	r2,-24991(gp)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	10000726 	beq	r2,zero,801130 <tick+0x344>
  801114:	d0a77ac3 	ldbu	r2,-25109(gp)
  801118:	10803fcc 	andi	r2,r2,255
  80111c:	1080201c 	xori	r2,r2,128
  801120:	10bfe004 	addi	r2,r2,-128
  801124:	10000226 	beq	r2,zero,801130 <tick+0x344>
  801128:	00800044 	movi	r2,1
  80112c:	00000106 	br	801134 <tick+0x348>
  801130:	0005883a 	mov	r2,zero
  801134:	d0a76e85 	stb	r2,-25158(gp)
      if(g17){
  801138:	d0a76e83 	ldbu	r2,-25158(gp)
  80113c:	10803fcc 	andi	r2,r2,255
  801140:	1080201c 	xori	r2,r2,128
  801144:	10bfe004 	addi	r2,r2,-128
  801148:	10000226 	beq	r2,zero,801154 <tick+0x368>
         _Pacemaker1_local_FilteredVSense =(_Pacemaker1_local_FilteredVSense||1);
  80114c:	00800044 	movi	r2,1
  801150:	d0a77fc5 	stb	r2,-25089(gp)
      }
      g4 =(PRE_g3);
  801154:	d0a76603 	ldbu	r2,-25192(gp)
  801158:	d0a75e05 	stb	r2,-25224(gp)
      g4b = g4;
  80115c:	d0a75e03 	ldbu	r2,-25224(gp)
  801160:	d0a7a445 	stb	r2,-24943(gp)
      _cg4 = _Pacemaker1_local_FilteredVSense;
  801164:	d0a77fc3 	ldbu	r2,-25089(gp)
  801168:	d0a7a285 	stb	r2,-24950(gp)
      g9 =(g4b&&(!(_cg4)));
  80116c:	d0a7a443 	ldbu	r2,-24943(gp)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	10000726 	beq	r2,zero,80119c <tick+0x3b0>
  801180:	d0a7a283 	ldbu	r2,-24950(gp)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1080201c 	xori	r2,r2,128
  80118c:	10bfe004 	addi	r2,r2,-128
  801190:	1000021e 	bne	r2,zero,80119c <tick+0x3b0>
  801194:	00800044 	movi	r2,1
  801198:	00000106 	br	8011a0 <tick+0x3b4>
  80119c:	0005883a 	mov	r2,zero
  8011a0:	d0a76385 	stb	r2,-25202(gp)
      _cg9 = VPace;
  8011a4:	d0a7a0c3 	ldbu	r2,-24957(gp)
  8011a8:	d0a79645 	stb	r2,-24999(gp)
      g7 =(PRE_g6);
  8011ac:	d0a78203 	ldbu	r2,-25080(gp)
  8011b0:	d0a77a45 	stb	r2,-25111(gp)
      _cg7 = VRPTO;
  8011b4:	d0a78703 	ldbu	r2,-25060(gp)
  8011b8:	d0a76485 	stb	r2,-25198(gp)
      g8 =(g7&&_cg7);
  8011bc:	d0a77a43 	ldbu	r2,-25111(gp)
  8011c0:	10803fcc 	andi	r2,r2,255
  8011c4:	1080201c 	xori	r2,r2,128
  8011c8:	10bfe004 	addi	r2,r2,-128
  8011cc:	10000726 	beq	r2,zero,8011ec <tick+0x400>
  8011d0:	d0a76483 	ldbu	r2,-25198(gp)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000226 	beq	r2,zero,8011ec <tick+0x400>
  8011e4:	00800044 	movi	r2,1
  8011e8:	00000106 	br	8011f0 <tick+0x404>
  8011ec:	0005883a 	mov	r2,zero
  8011f0:	d0a79205 	stb	r2,-25016(gp)
      if(g8){
  8011f4:	d0a79203 	ldbu	r2,-25016(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	10000226 	beq	r2,zero,801210 <tick+0x424>
         _Pacemaker1_local_VRP_ex =(_Pacemaker1_local_VRP_ex||1);
  801208:	00800044 	movi	r2,1
  80120c:	d0a77305 	stb	r2,-25140(gp)
      }
      g3 =((g9&&(!(_cg9)))||g8||g2);
  801210:	d0a76383 	ldbu	r2,-25202(gp)
  801214:	10803fcc 	andi	r2,r2,255
  801218:	1080201c 	xori	r2,r2,128
  80121c:	10bfe004 	addi	r2,r2,-128
  801220:	10000526 	beq	r2,zero,801238 <tick+0x44c>
  801224:	d0a79643 	ldbu	r2,-24999(gp)
  801228:	10803fcc 	andi	r2,r2,255
  80122c:	1080201c 	xori	r2,r2,128
  801230:	10bfe004 	addi	r2,r2,-128
  801234:	10000a26 	beq	r2,zero,801260 <tick+0x474>
  801238:	d0a79203 	ldbu	r2,-25016(gp)
  80123c:	10803fcc 	andi	r2,r2,255
  801240:	1080201c 	xori	r2,r2,128
  801244:	10bfe004 	addi	r2,r2,-128
  801248:	1000051e 	bne	r2,zero,801260 <tick+0x474>
  80124c:	d0a77a03 	ldbu	r2,-25112(gp)
  801250:	10803fcc 	andi	r2,r2,255
  801254:	1080201c 	xori	r2,r2,128
  801258:	10bfe004 	addi	r2,r2,-128
  80125c:	10000226 	beq	r2,zero,801268 <tick+0x47c>
  801260:	00800044 	movi	r2,1
  801264:	00000106 	br	80126c <tick+0x480>
  801268:	0005883a 	mov	r2,zero
  80126c:	d0a761c5 	stb	r2,-25209(gp)
      g5 =((g4b&&_cg4)||(g9&&_cg9));
  801270:	d0a7a443 	ldbu	r2,-24943(gp)
  801274:	10803fcc 	andi	r2,r2,255
  801278:	1080201c 	xori	r2,r2,128
  80127c:	10bfe004 	addi	r2,r2,-128
  801280:	10000526 	beq	r2,zero,801298 <tick+0x4ac>
  801284:	d0a7a283 	ldbu	r2,-24950(gp)
  801288:	10803fcc 	andi	r2,r2,255
  80128c:	1080201c 	xori	r2,r2,128
  801290:	10bfe004 	addi	r2,r2,-128
  801294:	10000a1e 	bne	r2,zero,8012c0 <tick+0x4d4>
  801298:	d0a76383 	ldbu	r2,-25202(gp)
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1080201c 	xori	r2,r2,128
  8012a4:	10bfe004 	addi	r2,r2,-128
  8012a8:	10000726 	beq	r2,zero,8012c8 <tick+0x4dc>
  8012ac:	d0a79643 	ldbu	r2,-24999(gp)
  8012b0:	10803fcc 	andi	r2,r2,255
  8012b4:	1080201c 	xori	r2,r2,128
  8012b8:	10bfe004 	addi	r2,r2,-128
  8012bc:	10000226 	beq	r2,zero,8012c8 <tick+0x4dc>
  8012c0:	00800044 	movi	r2,1
  8012c4:	00000106 	br	8012cc <tick+0x4e0>
  8012c8:	0005883a 	mov	r2,zero
  8012cc:	d0a77885 	stb	r2,-25118(gp)
      if(g5){
  8012d0:	d0a77883 	ldbu	r2,-25118(gp)
  8012d4:	10803fcc 	andi	r2,r2,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	10000226 	beq	r2,zero,8012ec <tick+0x500>
         VRP_start =(VRP_start||1);
  8012e4:	00800044 	movi	r2,1
  8012e8:	d0a78385 	stb	r2,-25074(gp)
      }
      g6 =(g5||(g7&&(!(_cg7))));
  8012ec:	d0a77883 	ldbu	r2,-25118(gp)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	10000a1e 	bne	r2,zero,801328 <tick+0x53c>
  801300:	d0a77a43 	ldbu	r2,-25111(gp)
  801304:	10803fcc 	andi	r2,r2,255
  801308:	1080201c 	xori	r2,r2,128
  80130c:	10bfe004 	addi	r2,r2,-128
  801310:	10000726 	beq	r2,zero,801330 <tick+0x544>
  801314:	d0a76483 	ldbu	r2,-25198(gp)
  801318:	10803fcc 	andi	r2,r2,255
  80131c:	1080201c 	xori	r2,r2,128
  801320:	10bfe004 	addi	r2,r2,-128
  801324:	1000021e 	bne	r2,zero,801330 <tick+0x544>
  801328:	00800044 	movi	r2,1
  80132c:	00000106 	br	801334 <tick+0x548>
  801330:	0005883a 	mov	r2,zero
  801334:	d0a79445 	stb	r2,-25007(gp)
      g11 = g1;
  801338:	d0a76ac3 	ldbu	r2,-25173(gp)
  80133c:	d0a79a45 	stb	r2,-24983(gp)
      g15 =(PRE_g14);
  801340:	d0a78bc3 	ldbu	r2,-25041(gp)
  801344:	d0a785c5 	stb	r2,-25065(gp)
      g15b = g15;
  801348:	d0a785c3 	ldbu	r2,-25065(gp)
  80134c:	d0a77285 	stb	r2,-25142(gp)
      _cg15 = _Pacemaker1_local_VRP_ex;
  801350:	d0a77303 	ldbu	r2,-25140(gp)
  801354:	d0a76745 	stb	r2,-25187(gp)
      g12 =(g17||(g16&&(!(_cg16)))||g11||(g15b&&_cg15));
  801358:	d0a76e83 	ldbu	r2,-25158(gp)
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	1080201c 	xori	r2,r2,128
  801364:	10bfe004 	addi	r2,r2,-128
  801368:	1000191e 	bne	r2,zero,8013d0 <tick+0x5e4>
  80136c:	d0a79843 	ldbu	r2,-24991(gp)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	10000526 	beq	r2,zero,801394 <tick+0x5a8>
  801380:	d0a77ac3 	ldbu	r2,-25109(gp)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	10000f26 	beq	r2,zero,8013d0 <tick+0x5e4>
  801394:	d0a79a43 	ldbu	r2,-24983(gp)
  801398:	10803fcc 	andi	r2,r2,255
  80139c:	1080201c 	xori	r2,r2,128
  8013a0:	10bfe004 	addi	r2,r2,-128
  8013a4:	10000a1e 	bne	r2,zero,8013d0 <tick+0x5e4>
  8013a8:	d0a77283 	ldbu	r2,-25142(gp)
  8013ac:	10803fcc 	andi	r2,r2,255
  8013b0:	1080201c 	xori	r2,r2,128
  8013b4:	10bfe004 	addi	r2,r2,-128
  8013b8:	10000726 	beq	r2,zero,8013d8 <tick+0x5ec>
  8013bc:	d0a76743 	ldbu	r2,-25187(gp)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000226 	beq	r2,zero,8013d8 <tick+0x5ec>
  8013d0:	00800044 	movi	r2,1
  8013d4:	00000106 	br	8013dc <tick+0x5f0>
  8013d8:	0005883a 	mov	r2,zero
  8013dc:	d0a76cc5 	stb	r2,-25165(gp)
      g14 =((g15b&&(!(_cg15)))||(g13b&&_cg13));
  8013e0:	d0a77283 	ldbu	r2,-25142(gp)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1080201c 	xori	r2,r2,128
  8013ec:	10bfe004 	addi	r2,r2,-128
  8013f0:	10000526 	beq	r2,zero,801408 <tick+0x61c>
  8013f4:	d0a76743 	ldbu	r2,-25187(gp)
  8013f8:	10803fcc 	andi	r2,r2,255
  8013fc:	1080201c 	xori	r2,r2,128
  801400:	10bfe004 	addi	r2,r2,-128
  801404:	10000a26 	beq	r2,zero,801430 <tick+0x644>
  801408:	d0a7a643 	ldbu	r2,-24935(gp)
  80140c:	10803fcc 	andi	r2,r2,255
  801410:	1080201c 	xori	r2,r2,128
  801414:	10bfe004 	addi	r2,r2,-128
  801418:	10000726 	beq	r2,zero,801438 <tick+0x64c>
  80141c:	d0a79603 	ldbu	r2,-25000(gp)
  801420:	10803fcc 	andi	r2,r2,255
  801424:	1080201c 	xori	r2,r2,128
  801428:	10bfe004 	addi	r2,r2,-128
  80142c:	10000226 	beq	r2,zero,801438 <tick+0x64c>
  801430:	00800044 	movi	r2,1
  801434:	00000106 	br	80143c <tick+0x650>
  801438:	0005883a 	mov	r2,zero
  80143c:	d0a77e85 	stb	r2,-25094(gp)
      g19 = g1;
  801440:	d0a76ac3 	ldbu	r2,-25173(gp)
  801444:	d0a75e85 	stb	r2,-25222(gp)
      g24 =(PRE_g23);
  801448:	d0a75f83 	ldbu	r2,-25218(gp)
  80144c:	d0a7a305 	stb	r2,-24948(gp)
      g24b = g24;
  801450:	d0a7a303 	ldbu	r2,-24948(gp)
  801454:	d0a77405 	stb	r2,-25136(gp)
      _cg24 = _Pacemaker1_local_FilteredVSense;
  801458:	d0a77fc3 	ldbu	r2,-25089(gp)
  80145c:	d0a79885 	stb	r2,-24990(gp)
      g26 =(g24b&&(!(_cg24)));
  801460:	d0a77403 	ldbu	r2,-25136(gp)
  801464:	10803fcc 	andi	r2,r2,255
  801468:	1080201c 	xori	r2,r2,128
  80146c:	10bfe004 	addi	r2,r2,-128
  801470:	10000726 	beq	r2,zero,801490 <tick+0x6a4>
  801474:	d0a79883 	ldbu	r2,-24990(gp)
  801478:	10803fcc 	andi	r2,r2,255
  80147c:	1080201c 	xori	r2,r2,128
  801480:	10bfe004 	addi	r2,r2,-128
  801484:	1000021e 	bne	r2,zero,801490 <tick+0x6a4>
  801488:	00800044 	movi	r2,1
  80148c:	00000106 	br	801494 <tick+0x6a8>
  801490:	0005883a 	mov	r2,zero
  801494:	d0a7a605 	stb	r2,-24936(gp)
      _cg26 = VPace;
  801498:	d0a7a0c3 	ldbu	r2,-24957(gp)
  80149c:	d0a77085 	stb	r2,-25150(gp)
      g25 =((g24b&&_cg24)||(g26&&_cg26));
  8014a0:	d0a77403 	ldbu	r2,-25136(gp)
  8014a4:	10803fcc 	andi	r2,r2,255
  8014a8:	1080201c 	xori	r2,r2,128
  8014ac:	10bfe004 	addi	r2,r2,-128
  8014b0:	10000526 	beq	r2,zero,8014c8 <tick+0x6dc>
  8014b4:	d0a79883 	ldbu	r2,-24990(gp)
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1080201c 	xori	r2,r2,128
  8014c0:	10bfe004 	addi	r2,r2,-128
  8014c4:	10000a1e 	bne	r2,zero,8014f0 <tick+0x704>
  8014c8:	d0a7a603 	ldbu	r2,-24936(gp)
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1080201c 	xori	r2,r2,128
  8014d4:	10bfe004 	addi	r2,r2,-128
  8014d8:	10000726 	beq	r2,zero,8014f8 <tick+0x70c>
  8014dc:	d0a77083 	ldbu	r2,-25150(gp)
  8014e0:	10803fcc 	andi	r2,r2,255
  8014e4:	1080201c 	xori	r2,r2,128
  8014e8:	10bfe004 	addi	r2,r2,-128
  8014ec:	10000226 	beq	r2,zero,8014f8 <tick+0x70c>
  8014f0:	00800044 	movi	r2,1
  8014f4:	00000106 	br	8014fc <tick+0x710>
  8014f8:	0005883a 	mov	r2,zero
  8014fc:	d0a799c5 	stb	r2,-24985(gp)
      if(g25){
  801500:	d0a799c3 	ldbu	r2,-24985(gp)
  801504:	10803fcc 	andi	r2,r2,255
  801508:	1080201c 	xori	r2,r2,128
  80150c:	10bfe004 	addi	r2,r2,-128
  801510:	10000226 	beq	r2,zero,80151c <tick+0x730>
         LRI_stop =(LRI_stop||1);
  801514:	00800044 	movi	r2,1
  801518:	d0a77185 	stb	r2,-25146(gp)
      }
      g21 =(PRE_g20);
  80151c:	d0a76a03 	ldbu	r2,-25176(gp)
  801520:	d0a776c5 	stb	r2,-25125(gp)
      g21b = g21;
  801524:	d0a776c3 	ldbu	r2,-25125(gp)
  801528:	d0a789c5 	stb	r2,-25049(gp)
      _cg21 = _Pacemaker1_local_FilteredVSense;
  80152c:	d0a77fc3 	ldbu	r2,-25089(gp)
  801530:	d0a774c5 	stb	r2,-25133(gp)
      g29 =(g21b&&(!(_cg21)));
  801534:	d0a789c3 	ldbu	r2,-25049(gp)
  801538:	10803fcc 	andi	r2,r2,255
  80153c:	1080201c 	xori	r2,r2,128
  801540:	10bfe004 	addi	r2,r2,-128
  801544:	10000726 	beq	r2,zero,801564 <tick+0x778>
  801548:	d0a774c3 	ldbu	r2,-25133(gp)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	1080201c 	xori	r2,r2,128
  801554:	10bfe004 	addi	r2,r2,-128
  801558:	1000021e 	bne	r2,zero,801564 <tick+0x778>
  80155c:	00800044 	movi	r2,1
  801560:	00000106 	br	801568 <tick+0x77c>
  801564:	0005883a 	mov	r2,zero
  801568:	d0a7a245 	stb	r2,-24951(gp)
      _cg29 = VPace;
  80156c:	d0a7a0c3 	ldbu	r2,-24957(gp)
  801570:	d0a78545 	stb	r2,-25067(gp)
      g27 =(g26&&(!(_cg26)));
  801574:	d0a7a603 	ldbu	r2,-24936(gp)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	10000726 	beq	r2,zero,8015a4 <tick+0x7b8>
  801588:	d0a77083 	ldbu	r2,-25150(gp)
  80158c:	10803fcc 	andi	r2,r2,255
  801590:	1080201c 	xori	r2,r2,128
  801594:	10bfe004 	addi	r2,r2,-128
  801598:	1000021e 	bne	r2,zero,8015a4 <tick+0x7b8>
  80159c:	00800044 	movi	r2,1
  8015a0:	00000106 	br	8015a8 <tick+0x7bc>
  8015a4:	0005883a 	mov	r2,zero
  8015a8:	d0a76085 	stb	r2,-25214(gp)
      _cg27 = LRITO;
  8015ac:	d0a76443 	ldbu	r2,-25199(gp)
  8015b0:	d0a7a545 	stb	r2,-24939(gp)
      g28 =(g27&&_cg27);
  8015b4:	d0a76083 	ldbu	r2,-25214(gp)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10000726 	beq	r2,zero,8015e4 <tick+0x7f8>
  8015c8:	d0a7a543 	ldbu	r2,-24939(gp)
  8015cc:	10803fcc 	andi	r2,r2,255
  8015d0:	1080201c 	xori	r2,r2,128
  8015d4:	10bfe004 	addi	r2,r2,-128
  8015d8:	10000226 	beq	r2,zero,8015e4 <tick+0x7f8>
  8015dc:	00800044 	movi	r2,1
  8015e0:	00000106 	br	8015e8 <tick+0x7fc>
  8015e4:	0005883a 	mov	r2,zero
  8015e8:	d0a79b45 	stb	r2,-24979(gp)
      if(g28){
  8015ec:	d0a79b43 	ldbu	r2,-24979(gp)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10000226 	beq	r2,zero,801608 <tick+0x81c>
         _Pacemaker1_local_LRI_ex =(_Pacemaker1_local_LRI_ex||1);
  801600:	00800044 	movi	r2,1
  801604:	d0a78485 	stb	r2,-25070(gp)
      }
      g20 =(g25||(g29&&(!(_cg29)))||g28||g19);
  801608:	d0a799c3 	ldbu	r2,-24985(gp)
  80160c:	10803fcc 	andi	r2,r2,255
  801610:	1080201c 	xori	r2,r2,128
  801614:	10bfe004 	addi	r2,r2,-128
  801618:	1000141e 	bne	r2,zero,80166c <tick+0x880>
  80161c:	d0a7a243 	ldbu	r2,-24951(gp)
  801620:	10803fcc 	andi	r2,r2,255
  801624:	1080201c 	xori	r2,r2,128
  801628:	10bfe004 	addi	r2,r2,-128
  80162c:	10000526 	beq	r2,zero,801644 <tick+0x858>
  801630:	d0a78543 	ldbu	r2,-25067(gp)
  801634:	10803fcc 	andi	r2,r2,255
  801638:	1080201c 	xori	r2,r2,128
  80163c:	10bfe004 	addi	r2,r2,-128
  801640:	10000a26 	beq	r2,zero,80166c <tick+0x880>
  801644:	d0a79b43 	ldbu	r2,-24979(gp)
  801648:	10803fcc 	andi	r2,r2,255
  80164c:	1080201c 	xori	r2,r2,128
  801650:	10bfe004 	addi	r2,r2,-128
  801654:	1000051e 	bne	r2,zero,80166c <tick+0x880>
  801658:	d0a75e83 	ldbu	r2,-25222(gp)
  80165c:	10803fcc 	andi	r2,r2,255
  801660:	1080201c 	xori	r2,r2,128
  801664:	10bfe004 	addi	r2,r2,-128
  801668:	10000226 	beq	r2,zero,801674 <tick+0x888>
  80166c:	00800044 	movi	r2,1
  801670:	00000106 	br	801678 <tick+0x88c>
  801674:	0005883a 	mov	r2,zero
  801678:	d0a78845 	stb	r2,-25055(gp)
      g22 =((g29&&_cg29)||(g21b&&_cg21));
  80167c:	d0a7a243 	ldbu	r2,-24951(gp)
  801680:	10803fcc 	andi	r2,r2,255
  801684:	1080201c 	xori	r2,r2,128
  801688:	10bfe004 	addi	r2,r2,-128
  80168c:	10000526 	beq	r2,zero,8016a4 <tick+0x8b8>
  801690:	d0a78543 	ldbu	r2,-25067(gp)
  801694:	10803fcc 	andi	r2,r2,255
  801698:	1080201c 	xori	r2,r2,128
  80169c:	10bfe004 	addi	r2,r2,-128
  8016a0:	10000a1e 	bne	r2,zero,8016cc <tick+0x8e0>
  8016a4:	d0a789c3 	ldbu	r2,-25049(gp)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	1080201c 	xori	r2,r2,128
  8016b0:	10bfe004 	addi	r2,r2,-128
  8016b4:	10000726 	beq	r2,zero,8016d4 <tick+0x8e8>
  8016b8:	d0a774c3 	ldbu	r2,-25133(gp)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10000226 	beq	r2,zero,8016d4 <tick+0x8e8>
  8016cc:	00800044 	movi	r2,1
  8016d0:	00000106 	br	8016d8 <tick+0x8ec>
  8016d4:	0005883a 	mov	r2,zero
  8016d8:	d0a79ac5 	stb	r2,-24981(gp)
      if(g22){
  8016dc:	d0a79ac3 	ldbu	r2,-24981(gp)
  8016e0:	10803fcc 	andi	r2,r2,255
  8016e4:	1080201c 	xori	r2,r2,128
  8016e8:	10bfe004 	addi	r2,r2,-128
  8016ec:	10000226 	beq	r2,zero,8016f8 <tick+0x90c>
         LRI_start =(LRI_start||1);
  8016f0:	00800044 	movi	r2,1
  8016f4:	d0a78685 	stb	r2,-25062(gp)
      }
      g23 =(g22||(g27&&(!(_cg27))));
  8016f8:	d0a79ac3 	ldbu	r2,-24981(gp)
  8016fc:	10803fcc 	andi	r2,r2,255
  801700:	1080201c 	xori	r2,r2,128
  801704:	10bfe004 	addi	r2,r2,-128
  801708:	10000a1e 	bne	r2,zero,801734 <tick+0x948>
  80170c:	d0a76083 	ldbu	r2,-25214(gp)
  801710:	10803fcc 	andi	r2,r2,255
  801714:	1080201c 	xori	r2,r2,128
  801718:	10bfe004 	addi	r2,r2,-128
  80171c:	10000726 	beq	r2,zero,80173c <tick+0x950>
  801720:	d0a7a543 	ldbu	r2,-24939(gp)
  801724:	10803fcc 	andi	r2,r2,255
  801728:	1080201c 	xori	r2,r2,128
  80172c:	10bfe004 	addi	r2,r2,-128
  801730:	1000021e 	bne	r2,zero,80173c <tick+0x950>
  801734:	00800044 	movi	r2,1
  801738:	00000106 	br	801740 <tick+0x954>
  80173c:	0005883a 	mov	r2,zero
  801740:	d0a77cc5 	stb	r2,-25101(gp)
      g31 = g1;
  801744:	d0a76ac3 	ldbu	r2,-25173(gp)
  801748:	d0a76f45 	stb	r2,-25155(gp)
      g33 =(PRE_g32);
  80174c:	d0a76803 	ldbu	r2,-25184(gp)
  801750:	d0a78285 	stb	r2,-25078(gp)
      g33b = g33;
  801754:	d0a78283 	ldbu	r2,-25078(gp)
  801758:	d0a76145 	stb	r2,-25211(gp)
      _cg33 = LRI_start;
  80175c:	d0a78683 	ldbu	r2,-25062(gp)
  801760:	d0a76c85 	stb	r2,-25166(gp)
      g32 =(g31||(g33b&&(!(_cg33)))||g37||(g35b&&_cg35));
  801764:	d0a76f43 	ldbu	r2,-25155(gp)
  801768:	10803fcc 	andi	r2,r2,255
  80176c:	1080201c 	xori	r2,r2,128
  801770:	10bfe004 	addi	r2,r2,-128
  801774:	1000191e 	bne	r2,zero,8017dc <tick+0x9f0>
  801778:	d0a76143 	ldbu	r2,-25211(gp)
  80177c:	10803fcc 	andi	r2,r2,255
  801780:	1080201c 	xori	r2,r2,128
  801784:	10bfe004 	addi	r2,r2,-128
  801788:	10000526 	beq	r2,zero,8017a0 <tick+0x9b4>
  80178c:	d0a76c83 	ldbu	r2,-25166(gp)
  801790:	10803fcc 	andi	r2,r2,255
  801794:	1080201c 	xori	r2,r2,128
  801798:	10bfe004 	addi	r2,r2,-128
  80179c:	10000f26 	beq	r2,zero,8017dc <tick+0x9f0>
  8017a0:	d0a76f83 	ldbu	r2,-25154(gp)
  8017a4:	10803fcc 	andi	r2,r2,255
  8017a8:	1080201c 	xori	r2,r2,128
  8017ac:	10bfe004 	addi	r2,r2,-128
  8017b0:	10000a1e 	bne	r2,zero,8017dc <tick+0x9f0>
  8017b4:	d0a78443 	ldbu	r2,-25071(gp)
  8017b8:	10803fcc 	andi	r2,r2,255
  8017bc:	1080201c 	xori	r2,r2,128
  8017c0:	10bfe004 	addi	r2,r2,-128
  8017c4:	10000726 	beq	r2,zero,8017e4 <tick+0x9f8>
  8017c8:	d0a76e03 	ldbu	r2,-25160(gp)
  8017cc:	10803fcc 	andi	r2,r2,255
  8017d0:	1080201c 	xori	r2,r2,128
  8017d4:	10bfe004 	addi	r2,r2,-128
  8017d8:	10000226 	beq	r2,zero,8017e4 <tick+0x9f8>
  8017dc:	00800044 	movi	r2,1
  8017e0:	00000106 	br	8017e8 <tick+0x9fc>
  8017e4:	0005883a 	mov	r2,zero
  8017e8:	d0a79cc5 	stb	r2,-24973(gp)
      g34 =((g33b&&_cg33)||(g36&&(!(_cg36))));
  8017ec:	d0a76143 	ldbu	r2,-25211(gp)
  8017f0:	10803fcc 	andi	r2,r2,255
  8017f4:	1080201c 	xori	r2,r2,128
  8017f8:	10bfe004 	addi	r2,r2,-128
  8017fc:	10000526 	beq	r2,zero,801814 <tick+0xa28>
  801800:	d0a76c83 	ldbu	r2,-25166(gp)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	1080201c 	xori	r2,r2,128
  80180c:	10bfe004 	addi	r2,r2,-128
  801810:	10000a1e 	bne	r2,zero,80183c <tick+0xa50>
  801814:	d0a78c43 	ldbu	r2,-25039(gp)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	1080201c 	xori	r2,r2,128
  801820:	10bfe004 	addi	r2,r2,-128
  801824:	10000726 	beq	r2,zero,801844 <tick+0xa58>
  801828:	d0a7a4c3 	ldbu	r2,-24941(gp)
  80182c:	10803fcc 	andi	r2,r2,255
  801830:	1080201c 	xori	r2,r2,128
  801834:	10bfe004 	addi	r2,r2,-128
  801838:	1000021e 	bne	r2,zero,801844 <tick+0xa58>
  80183c:	00800044 	movi	r2,1
  801840:	00000106 	br	801848 <tick+0xa5c>
  801844:	0005883a 	mov	r2,zero
  801848:	d0a77805 	stb	r2,-25120(gp)
      g39 = g1;
  80184c:	d0a76ac3 	ldbu	r2,-25173(gp)
  801850:	d0a7a105 	stb	r2,-24956(gp)
      g44 =(PRE_g43);
  801854:	d0a78ac3 	ldbu	r2,-25045(gp)
  801858:	d0a76885 	stb	r2,-25182(gp)
      _cg44 = AVITO;
  80185c:	d0a78883 	ldbu	r2,-25054(gp)
  801860:	d0a77d85 	stb	r2,-25098(gp)
      g46 =(g44&&(!(_cg44)));
  801864:	d0a76883 	ldbu	r2,-25182(gp)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	10000726 	beq	r2,zero,801894 <tick+0xaa8>
  801878:	d0a77d83 	ldbu	r2,-25098(gp)
  80187c:	10803fcc 	andi	r2,r2,255
  801880:	1080201c 	xori	r2,r2,128
  801884:	10bfe004 	addi	r2,r2,-128
  801888:	1000021e 	bne	r2,zero,801894 <tick+0xaa8>
  80188c:	00800044 	movi	r2,1
  801890:	00000106 	br	801898 <tick+0xaac>
  801894:	0005883a 	mov	r2,zero
  801898:	d0a78cc5 	stb	r2,-25037(gp)
      _cg46 = _Pacemaker1_local_FilteredVSense;
  80189c:	d0a77fc3 	ldbu	r2,-25089(gp)
  8018a0:	d0a76dc5 	stb	r2,-25161(gp)
      g48 =(g46&&(!(_cg46)));
  8018a4:	d0a78cc3 	ldbu	r2,-25037(gp)
  8018a8:	10803fcc 	andi	r2,r2,255
  8018ac:	1080201c 	xori	r2,r2,128
  8018b0:	10bfe004 	addi	r2,r2,-128
  8018b4:	10000726 	beq	r2,zero,8018d4 <tick+0xae8>
  8018b8:	d0a76dc3 	ldbu	r2,-25161(gp)
  8018bc:	10803fcc 	andi	r2,r2,255
  8018c0:	1080201c 	xori	r2,r2,128
  8018c4:	10bfe004 	addi	r2,r2,-128
  8018c8:	1000021e 	bne	r2,zero,8018d4 <tick+0xae8>
  8018cc:	00800044 	movi	r2,1
  8018d0:	00000106 	br	8018d8 <tick+0xaec>
  8018d4:	0005883a 	mov	r2,zero
  8018d8:	d0a772c5 	stb	r2,-25141(gp)
      _cg48 = VPace;
  8018dc:	d0a7a0c3 	ldbu	r2,-24957(gp)
  8018e0:	d0a77dc5 	stb	r2,-25097(gp)
      g47 =((g46&&_cg46)||(g48&&_cg48));
  8018e4:	d0a78cc3 	ldbu	r2,-25037(gp)
  8018e8:	10803fcc 	andi	r2,r2,255
  8018ec:	1080201c 	xori	r2,r2,128
  8018f0:	10bfe004 	addi	r2,r2,-128
  8018f4:	10000526 	beq	r2,zero,80190c <tick+0xb20>
  8018f8:	d0a76dc3 	ldbu	r2,-25161(gp)
  8018fc:	10803fcc 	andi	r2,r2,255
  801900:	1080201c 	xori	r2,r2,128
  801904:	10bfe004 	addi	r2,r2,-128
  801908:	10000a1e 	bne	r2,zero,801934 <tick+0xb48>
  80190c:	d0a772c3 	ldbu	r2,-25141(gp)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	1080201c 	xori	r2,r2,128
  801918:	10bfe004 	addi	r2,r2,-128
  80191c:	10000726 	beq	r2,zero,80193c <tick+0xb50>
  801920:	d0a77dc3 	ldbu	r2,-25097(gp)
  801924:	10803fcc 	andi	r2,r2,255
  801928:	1080201c 	xori	r2,r2,128
  80192c:	10bfe004 	addi	r2,r2,-128
  801930:	10000226 	beq	r2,zero,80193c <tick+0xb50>
  801934:	00800044 	movi	r2,1
  801938:	00000106 	br	801940 <tick+0xb54>
  80193c:	0005883a 	mov	r2,zero
  801940:	d0a76285 	stb	r2,-25206(gp)
      if(g47){
  801944:	d0a76283 	ldbu	r2,-25206(gp)
  801948:	10803fcc 	andi	r2,r2,255
  80194c:	1080201c 	xori	r2,r2,128
  801950:	10bfe004 	addi	r2,r2,-128
  801954:	10000226 	beq	r2,zero,801960 <tick+0xb74>
         AVI_stop =(AVI_stop||1);
  801958:	00800044 	movi	r2,1
  80195c:	d0a76a45 	stb	r2,-25175(gp)
      }
      g45 =(g44&&_cg44);
  801960:	d0a76883 	ldbu	r2,-25182(gp)
  801964:	10803fcc 	andi	r2,r2,255
  801968:	1080201c 	xori	r2,r2,128
  80196c:	10bfe004 	addi	r2,r2,-128
  801970:	10000726 	beq	r2,zero,801990 <tick+0xba4>
  801974:	d0a77d83 	ldbu	r2,-25098(gp)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1080201c 	xori	r2,r2,128
  801980:	10bfe004 	addi	r2,r2,-128
  801984:	10000226 	beq	r2,zero,801990 <tick+0xba4>
  801988:	00800044 	movi	r2,1
  80198c:	00000106 	br	801994 <tick+0xba8>
  801990:	0005883a 	mov	r2,zero
  801994:	d0a79dc5 	stb	r2,-24969(gp)
      if(g45){
  801998:	d0a79dc3 	ldbu	r2,-24969(gp)
  80199c:	10803fcc 	andi	r2,r2,255
  8019a0:	1080201c 	xori	r2,r2,128
  8019a4:	10bfe004 	addi	r2,r2,-128
  8019a8:	10000226 	beq	r2,zero,8019b4 <tick+0xbc8>
         _Pacemaker1_local_AVI_ex =(_Pacemaker1_local_AVI_ex||1);
  8019ac:	00800044 	movi	r2,1
  8019b0:	d0a78b05 	stb	r2,-25044(gp)
      }
      g94 =(PRE_g93);
  8019b4:	d0a79a03 	ldbu	r2,-24984(gp)
  8019b8:	d0a778c5 	stb	r2,-25117(gp)
      g94b = g94;
  8019bc:	d0a778c3 	ldbu	r2,-25117(gp)
  8019c0:	d0a76405 	stb	r2,-25200(gp)
      _cg94 = _pre_AEI_stop15;
  8019c4:	d0a78e03 	ldbu	r2,-25032(gp)
  8019c8:	d0a79905 	stb	r2,-24988(gp)
      g95 =(g94b&&(!(_cg94)));
  8019cc:	d0a76403 	ldbu	r2,-25200(gp)
  8019d0:	10803fcc 	andi	r2,r2,255
  8019d4:	1080201c 	xori	r2,r2,128
  8019d8:	10bfe004 	addi	r2,r2,-128
  8019dc:	10000726 	beq	r2,zero,8019fc <tick+0xc10>
  8019e0:	d0a79903 	ldbu	r2,-24988(gp)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	1000021e 	bne	r2,zero,8019fc <tick+0xc10>
  8019f4:	00800044 	movi	r2,1
  8019f8:	00000106 	br	801a00 <tick+0xc14>
  8019fc:	0005883a 	mov	r2,zero
  801a00:	d0a78d85 	stb	r2,-25034(gp)
      _cg95 = _Pacemaker1_local__pre_AEI_ex14;
  801a04:	d0a79103 	ldbu	r2,-25020(gp)
  801a08:	d0a77385 	stb	r2,-25138(gp)
      g96 =(g95&&_cg95);
  801a0c:	d0a78d83 	ldbu	r2,-25034(gp)
  801a10:	10803fcc 	andi	r2,r2,255
  801a14:	1080201c 	xori	r2,r2,128
  801a18:	10bfe004 	addi	r2,r2,-128
  801a1c:	10000726 	beq	r2,zero,801a3c <tick+0xc50>
  801a20:	d0a77383 	ldbu	r2,-25138(gp)
  801a24:	10803fcc 	andi	r2,r2,255
  801a28:	1080201c 	xori	r2,r2,128
  801a2c:	10bfe004 	addi	r2,r2,-128
  801a30:	10000226 	beq	r2,zero,801a3c <tick+0xc50>
  801a34:	00800044 	movi	r2,1
  801a38:	00000106 	br	801a40 <tick+0xc54>
  801a3c:	0005883a 	mov	r2,zero
  801a40:	d0a78e45 	stb	r2,-25031(gp)
      if(g96){
  801a44:	d0a78e43 	ldbu	r2,-25031(gp)
  801a48:	10803fcc 	andi	r2,r2,255
  801a4c:	1080201c 	xori	r2,r2,128
  801a50:	10bfe004 	addi	r2,r2,-128
  801a54:	10000226 	beq	r2,zero,801a60 <tick+0xc74>
         APace =(APace||1);
  801a58:	00800044 	movi	r2,1
  801a5c:	d0a75dc5 	stb	r2,-25225(gp)
      }
      g63 =(PRE_g62);
  801a60:	d0a78c03 	ldbu	r2,-25040(gp)
  801a64:	d0a78805 	stb	r2,-25056(gp)
      g63b = g63;
  801a68:	d0a78803 	ldbu	r2,-25056(gp)
  801a6c:	d0a79d45 	stb	r2,-24971(gp)
      _cg63 = _Pacemaker1_local_FilteredVSense;
  801a70:	d0a77fc3 	ldbu	r2,-25089(gp)
  801a74:	d0a77645 	stb	r2,-25127(gp)
      g68 =(g63b&&(!(_cg63)));
  801a78:	d0a79d43 	ldbu	r2,-24971(gp)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1080201c 	xori	r2,r2,128
  801a84:	10bfe004 	addi	r2,r2,-128
  801a88:	10000726 	beq	r2,zero,801aa8 <tick+0xcbc>
  801a8c:	d0a77643 	ldbu	r2,-25127(gp)
  801a90:	10803fcc 	andi	r2,r2,255
  801a94:	1080201c 	xori	r2,r2,128
  801a98:	10bfe004 	addi	r2,r2,-128
  801a9c:	1000021e 	bne	r2,zero,801aa8 <tick+0xcbc>
  801aa0:	00800044 	movi	r2,1
  801aa4:	00000106 	br	801aac <tick+0xcc0>
  801aa8:	0005883a 	mov	r2,zero
  801aac:	d0a79985 	stb	r2,-24986(gp)
      _cg68 = VPace;
  801ab0:	d0a7a0c3 	ldbu	r2,-24957(gp)
  801ab4:	d0a77785 	stb	r2,-25122(gp)
      g64 =((g63b&&_cg63)||(g68&&_cg68));
  801ab8:	d0a79d43 	ldbu	r2,-24971(gp)
  801abc:	10803fcc 	andi	r2,r2,255
  801ac0:	1080201c 	xori	r2,r2,128
  801ac4:	10bfe004 	addi	r2,r2,-128
  801ac8:	10000526 	beq	r2,zero,801ae0 <tick+0xcf4>
  801acc:	d0a77643 	ldbu	r2,-25127(gp)
  801ad0:	10803fcc 	andi	r2,r2,255
  801ad4:	1080201c 	xori	r2,r2,128
  801ad8:	10bfe004 	addi	r2,r2,-128
  801adc:	10000a1e 	bne	r2,zero,801b08 <tick+0xd1c>
  801ae0:	d0a79983 	ldbu	r2,-24986(gp)
  801ae4:	10803fcc 	andi	r2,r2,255
  801ae8:	1080201c 	xori	r2,r2,128
  801aec:	10bfe004 	addi	r2,r2,-128
  801af0:	10000726 	beq	r2,zero,801b10 <tick+0xd24>
  801af4:	d0a77783 	ldbu	r2,-25122(gp)
  801af8:	10803fcc 	andi	r2,r2,255
  801afc:	1080201c 	xori	r2,r2,128
  801b00:	10bfe004 	addi	r2,r2,-128
  801b04:	10000226 	beq	r2,zero,801b10 <tick+0xd24>
  801b08:	00800044 	movi	r2,1
  801b0c:	00000106 	br	801b14 <tick+0xd28>
  801b10:	0005883a 	mov	r2,zero
  801b14:	d0a77685 	stb	r2,-25126(gp)
      if(g64){
  801b18:	d0a77683 	ldbu	r2,-25126(gp)
  801b1c:	10803fcc 	andi	r2,r2,255
  801b20:	1080201c 	xori	r2,r2,128
  801b24:	10bfe004 	addi	r2,r2,-128
  801b28:	10000226 	beq	r2,zero,801b34 <tick+0xd48>
         PVARP_start =(PVARP_start||1);
  801b2c:	00800044 	movi	r2,1
  801b30:	d0a78d05 	stb	r2,-25036(gp)
      }
      g72 =(PRE_g71);
  801b34:	d0a77e43 	ldbu	r2,-25095(gp)
  801b38:	d0a794c5 	stb	r2,-25005(gp)
      g72b = g72;
  801b3c:	d0a794c3 	ldbu	r2,-25005(gp)
  801b40:	d0a79785 	stb	r2,-24994(gp)
      _cg72 = PVARP_start;
  801b44:	d0a78d03 	ldbu	r2,-25036(gp)
  801b48:	d0a7a685 	stb	r2,-24934(gp)
      g75 =(g72b&&(!(_cg72)));
  801b4c:	d0a79783 	ldbu	r2,-24994(gp)
  801b50:	10803fcc 	andi	r2,r2,255
  801b54:	1080201c 	xori	r2,r2,128
  801b58:	10bfe004 	addi	r2,r2,-128
  801b5c:	10000726 	beq	r2,zero,801b7c <tick+0xd90>
  801b60:	d0a7a683 	ldbu	r2,-24934(gp)
  801b64:	10803fcc 	andi	r2,r2,255
  801b68:	1080201c 	xori	r2,r2,128
  801b6c:	10bfe004 	addi	r2,r2,-128
  801b70:	1000021e 	bne	r2,zero,801b7c <tick+0xd90>
  801b74:	00800044 	movi	r2,1
  801b78:	00000106 	br	801b80 <tick+0xd94>
  801b7c:	0005883a 	mov	r2,zero
  801b80:	d0a79705 	stb	r2,-24996(gp)
      _cg75 = ASense;
  801b84:	d0a77243 	ldbu	r2,-25143(gp)
  801b88:	d0a76945 	stb	r2,-25179(gp)
      g76 =(g75&&_cg75);
  801b8c:	d0a79703 	ldbu	r2,-24996(gp)
  801b90:	10803fcc 	andi	r2,r2,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	10000726 	beq	r2,zero,801bbc <tick+0xdd0>
  801ba0:	d0a76943 	ldbu	r2,-25179(gp)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	10000226 	beq	r2,zero,801bbc <tick+0xdd0>
  801bb4:	00800044 	movi	r2,1
  801bb8:	00000106 	br	801bc0 <tick+0xdd4>
  801bbc:	0005883a 	mov	r2,zero
  801bc0:	d0a76f05 	stb	r2,-25156(gp)
      if(g76){
  801bc4:	d0a76f03 	ldbu	r2,-25156(gp)
  801bc8:	10803fcc 	andi	r2,r2,255
  801bcc:	1080201c 	xori	r2,r2,128
  801bd0:	10bfe004 	addi	r2,r2,-128
  801bd4:	10000226 	beq	r2,zero,801be0 <tick+0xdf4>
         _Pacemaker1_local_FilteredASense =(_Pacemaker1_local_FilteredASense||1);
  801bd8:	00800044 	movi	r2,1
  801bdc:	d0a784c5 	stb	r2,-25069(gp)
      }
      g41 =(PRE_g40);
  801be0:	d0a77103 	ldbu	r2,-25148(gp)
  801be4:	d0a77045 	stb	r2,-25151(gp)
      g41b = g41;
  801be8:	d0a77043 	ldbu	r2,-25151(gp)
  801bec:	d0a78a05 	stb	r2,-25048(gp)
      _cg41 = _Pacemaker1_local_FilteredASense;
  801bf0:	d0a784c3 	ldbu	r2,-25069(gp)
  801bf4:	d0a79005 	stb	r2,-25024(gp)
      g49 =(g41b&&(!(_cg41)));
  801bf8:	d0a78a03 	ldbu	r2,-25048(gp)
  801bfc:	10803fcc 	andi	r2,r2,255
  801c00:	1080201c 	xori	r2,r2,128
  801c04:	10bfe004 	addi	r2,r2,-128
  801c08:	10000726 	beq	r2,zero,801c28 <tick+0xe3c>
  801c0c:	d0a79003 	ldbu	r2,-25024(gp)
  801c10:	10803fcc 	andi	r2,r2,255
  801c14:	1080201c 	xori	r2,r2,128
  801c18:	10bfe004 	addi	r2,r2,-128
  801c1c:	1000021e 	bne	r2,zero,801c28 <tick+0xe3c>
  801c20:	00800044 	movi	r2,1
  801c24:	00000106 	br	801c2c <tick+0xe40>
  801c28:	0005883a 	mov	r2,zero
  801c2c:	d0a77985 	stb	r2,-25114(gp)
      _cg49 = APace;
  801c30:	d0a75dc3 	ldbu	r2,-25225(gp)
  801c34:	d0a7a185 	stb	r2,-24954(gp)
      g40 =(g47||g39||g45||(g49&&(!(_cg49))));
  801c38:	d0a76283 	ldbu	r2,-25206(gp)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	1080201c 	xori	r2,r2,128
  801c44:	10bfe004 	addi	r2,r2,-128
  801c48:	1000141e 	bne	r2,zero,801c9c <tick+0xeb0>
  801c4c:	d0a7a103 	ldbu	r2,-24956(gp)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	10000f1e 	bne	r2,zero,801c9c <tick+0xeb0>
  801c60:	d0a79dc3 	ldbu	r2,-24969(gp)
  801c64:	10803fcc 	andi	r2,r2,255
  801c68:	1080201c 	xori	r2,r2,128
  801c6c:	10bfe004 	addi	r2,r2,-128
  801c70:	10000a1e 	bne	r2,zero,801c9c <tick+0xeb0>
  801c74:	d0a77983 	ldbu	r2,-25114(gp)
  801c78:	10803fcc 	andi	r2,r2,255
  801c7c:	1080201c 	xori	r2,r2,128
  801c80:	10bfe004 	addi	r2,r2,-128
  801c84:	10000726 	beq	r2,zero,801ca4 <tick+0xeb8>
  801c88:	d0a7a183 	ldbu	r2,-24954(gp)
  801c8c:	10803fcc 	andi	r2,r2,255
  801c90:	1080201c 	xori	r2,r2,128
  801c94:	10bfe004 	addi	r2,r2,-128
  801c98:	1000021e 	bne	r2,zero,801ca4 <tick+0xeb8>
  801c9c:	00800044 	movi	r2,1
  801ca0:	00000106 	br	801ca8 <tick+0xebc>
  801ca4:	0005883a 	mov	r2,zero
  801ca8:	d0a75d45 	stb	r2,-25227(gp)
      g42 =((g41b&&_cg41)||(g49&&_cg49));
  801cac:	d0a78a03 	ldbu	r2,-25048(gp)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	10000526 	beq	r2,zero,801cd4 <tick+0xee8>
  801cc0:	d0a79003 	ldbu	r2,-25024(gp)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	10000a1e 	bne	r2,zero,801cfc <tick+0xf10>
  801cd4:	d0a77983 	ldbu	r2,-25114(gp)
  801cd8:	10803fcc 	andi	r2,r2,255
  801cdc:	1080201c 	xori	r2,r2,128
  801ce0:	10bfe004 	addi	r2,r2,-128
  801ce4:	10000726 	beq	r2,zero,801d04 <tick+0xf18>
  801ce8:	d0a7a183 	ldbu	r2,-24954(gp)
  801cec:	10803fcc 	andi	r2,r2,255
  801cf0:	1080201c 	xori	r2,r2,128
  801cf4:	10bfe004 	addi	r2,r2,-128
  801cf8:	10000226 	beq	r2,zero,801d04 <tick+0xf18>
  801cfc:	00800044 	movi	r2,1
  801d00:	00000106 	br	801d08 <tick+0xf1c>
  801d04:	0005883a 	mov	r2,zero
  801d08:	d0a76305 	stb	r2,-25204(gp)
      if(g42){
  801d0c:	d0a76303 	ldbu	r2,-25204(gp)
  801d10:	10803fcc 	andi	r2,r2,255
  801d14:	1080201c 	xori	r2,r2,128
  801d18:	10bfe004 	addi	r2,r2,-128
  801d1c:	10000226 	beq	r2,zero,801d28 <tick+0xf3c>
         AVI_start =(AVI_start||1);
  801d20:	00800044 	movi	r2,1
  801d24:	d0a76705 	stb	r2,-25188(gp)
      }
      g43 =(g42||(g48&&(!(_cg48))));
  801d28:	d0a76303 	ldbu	r2,-25204(gp)
  801d2c:	10803fcc 	andi	r2,r2,255
  801d30:	1080201c 	xori	r2,r2,128
  801d34:	10bfe004 	addi	r2,r2,-128
  801d38:	10000a1e 	bne	r2,zero,801d64 <tick+0xf78>
  801d3c:	d0a772c3 	ldbu	r2,-25141(gp)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	10000726 	beq	r2,zero,801d6c <tick+0xf80>
  801d50:	d0a77dc3 	ldbu	r2,-25097(gp)
  801d54:	10803fcc 	andi	r2,r2,255
  801d58:	1080201c 	xori	r2,r2,128
  801d5c:	10bfe004 	addi	r2,r2,-128
  801d60:	1000021e 	bne	r2,zero,801d6c <tick+0xf80>
  801d64:	00800044 	movi	r2,1
  801d68:	00000106 	br	801d70 <tick+0xf84>
  801d6c:	0005883a 	mov	r2,zero
  801d70:	d0a78a85 	stb	r2,-25046(gp)
      g51 = g1;
  801d74:	d0a76ac3 	ldbu	r2,-25173(gp)
  801d78:	d0a78e85 	stb	r2,-25030(gp)
      g53 =(PRE_g52);
  801d7c:	d0a78103 	ldbu	r2,-25084(gp)
  801d80:	d0a791c5 	stb	r2,-25017(gp)
      g53b = g53;
  801d84:	d0a791c3 	ldbu	r2,-25017(gp)
  801d88:	d0a78b45 	stb	r2,-25043(gp)
      _cg53 = AVI_start;
  801d8c:	d0a76703 	ldbu	r2,-25188(gp)
  801d90:	d0a77a85 	stb	r2,-25110(gp)
      g55 =(PRE_g54);
  801d94:	d0a78743 	ldbu	r2,-25059(gp)
  801d98:	d0a76005 	stb	r2,-25216(gp)
      g55b = g55;
  801d9c:	d0a76003 	ldbu	r2,-25216(gp)
  801da0:	d0a76245 	stb	r2,-25207(gp)
      _cg55 = _Pacemaker1_local_AVI_ex;
  801da4:	d0a78b03 	ldbu	r2,-25044(gp)
  801da8:	d0a79ec5 	stb	r2,-24965(gp)
      g59 =(g55b&&(!(_cg55)));
  801dac:	d0a76243 	ldbu	r2,-25207(gp)
  801db0:	10803fcc 	andi	r2,r2,255
  801db4:	1080201c 	xori	r2,r2,128
  801db8:	10bfe004 	addi	r2,r2,-128
  801dbc:	10000726 	beq	r2,zero,801ddc <tick+0xff0>
  801dc0:	d0a79ec3 	ldbu	r2,-24965(gp)
  801dc4:	10803fcc 	andi	r2,r2,255
  801dc8:	1080201c 	xori	r2,r2,128
  801dcc:	10bfe004 	addi	r2,r2,-128
  801dd0:	1000021e 	bne	r2,zero,801ddc <tick+0xff0>
  801dd4:	00800044 	movi	r2,1
  801dd8:	00000106 	br	801de0 <tick+0xff4>
  801ddc:	0005883a 	mov	r2,zero
  801de0:	d0a77bc5 	stb	r2,-25105(gp)
      _cg59 = AVI_stop;
  801de4:	d0a76a43 	ldbu	r2,-25175(gp)
  801de8:	d0a76045 	stb	r2,-25215(gp)
      g52 =(g51||g58||(g53b&&(!(_cg53)))||(g59&&_cg59));
  801dec:	d0a78e83 	ldbu	r2,-25030(gp)
  801df0:	10803fcc 	andi	r2,r2,255
  801df4:	1080201c 	xori	r2,r2,128
  801df8:	10bfe004 	addi	r2,r2,-128
  801dfc:	1000191e 	bne	r2,zero,801e64 <tick+0x1078>
  801e00:	d0a798c3 	ldbu	r2,-24989(gp)
  801e04:	10803fcc 	andi	r2,r2,255
  801e08:	1080201c 	xori	r2,r2,128
  801e0c:	10bfe004 	addi	r2,r2,-128
  801e10:	1000141e 	bne	r2,zero,801e64 <tick+0x1078>
  801e14:	d0a78b43 	ldbu	r2,-25043(gp)
  801e18:	10803fcc 	andi	r2,r2,255
  801e1c:	1080201c 	xori	r2,r2,128
  801e20:	10bfe004 	addi	r2,r2,-128
  801e24:	10000526 	beq	r2,zero,801e3c <tick+0x1050>
  801e28:	d0a77a83 	ldbu	r2,-25110(gp)
  801e2c:	10803fcc 	andi	r2,r2,255
  801e30:	1080201c 	xori	r2,r2,128
  801e34:	10bfe004 	addi	r2,r2,-128
  801e38:	10000a26 	beq	r2,zero,801e64 <tick+0x1078>
  801e3c:	d0a77bc3 	ldbu	r2,-25105(gp)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	10000726 	beq	r2,zero,801e6c <tick+0x1080>
  801e50:	d0a76043 	ldbu	r2,-25215(gp)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	10000226 	beq	r2,zero,801e6c <tick+0x1080>
  801e64:	00800044 	movi	r2,1
  801e68:	00000106 	br	801e70 <tick+0x1084>
  801e6c:	0005883a 	mov	r2,zero
  801e70:	d0a76d45 	stb	r2,-25163(gp)
      g54 =((g59&&(!(_cg59)))||(g53b&&_cg53));
  801e74:	d0a77bc3 	ldbu	r2,-25105(gp)
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	10000526 	beq	r2,zero,801e9c <tick+0x10b0>
  801e88:	d0a76043 	ldbu	r2,-25215(gp)
  801e8c:	10803fcc 	andi	r2,r2,255
  801e90:	1080201c 	xori	r2,r2,128
  801e94:	10bfe004 	addi	r2,r2,-128
  801e98:	10000a26 	beq	r2,zero,801ec4 <tick+0x10d8>
  801e9c:	d0a78b43 	ldbu	r2,-25043(gp)
  801ea0:	10803fcc 	andi	r2,r2,255
  801ea4:	1080201c 	xori	r2,r2,128
  801ea8:	10bfe004 	addi	r2,r2,-128
  801eac:	10000726 	beq	r2,zero,801ecc <tick+0x10e0>
  801eb0:	d0a77a83 	ldbu	r2,-25110(gp)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000226 	beq	r2,zero,801ecc <tick+0x10e0>
  801ec4:	00800044 	movi	r2,1
  801ec8:	00000106 	br	801ed0 <tick+0x10e4>
  801ecc:	0005883a 	mov	r2,zero
  801ed0:	d0a77c45 	stb	r2,-25103(gp)
      g56 =((g55b&&_cg55)||(g57b&&(!(_cg57))));
  801ed4:	d0a76243 	ldbu	r2,-25207(gp)
  801ed8:	10803fcc 	andi	r2,r2,255
  801edc:	1080201c 	xori	r2,r2,128
  801ee0:	10bfe004 	addi	r2,r2,-128
  801ee4:	10000526 	beq	r2,zero,801efc <tick+0x1110>
  801ee8:	d0a79ec3 	ldbu	r2,-24965(gp)
  801eec:	10803fcc 	andi	r2,r2,255
  801ef0:	1080201c 	xori	r2,r2,128
  801ef4:	10bfe004 	addi	r2,r2,-128
  801ef8:	10000a1e 	bne	r2,zero,801f24 <tick+0x1138>
  801efc:	d0a78d43 	ldbu	r2,-25035(gp)
  801f00:	10803fcc 	andi	r2,r2,255
  801f04:	1080201c 	xori	r2,r2,128
  801f08:	10bfe004 	addi	r2,r2,-128
  801f0c:	10000726 	beq	r2,zero,801f2c <tick+0x1140>
  801f10:	d0a79943 	ldbu	r2,-24987(gp)
  801f14:	10803fcc 	andi	r2,r2,255
  801f18:	1080201c 	xori	r2,r2,128
  801f1c:	10bfe004 	addi	r2,r2,-128
  801f20:	1000021e 	bne	r2,zero,801f2c <tick+0x1140>
  801f24:	00800044 	movi	r2,1
  801f28:	00000106 	br	801f30 <tick+0x1144>
  801f2c:	0005883a 	mov	r2,zero
  801f30:	d0a780c5 	stb	r2,-25085(gp)
      g61 = g1;
  801f34:	d0a76ac3 	ldbu	r2,-25173(gp)
  801f38:	d0a76b05 	stb	r2,-25172(gp)
      g66 =(PRE_g65);
  801f3c:	d0a769c3 	ldbu	r2,-25177(gp)
  801f40:	d0a77c85 	stb	r2,-25102(gp)
      _cg66 = PVARPTO;
  801f44:	d0a78b83 	ldbu	r2,-25042(gp)
  801f48:	d0a79345 	stb	r2,-25011(gp)
      g67 =(g66&&_cg66);
  801f4c:	d0a77c83 	ldbu	r2,-25102(gp)
  801f50:	10803fcc 	andi	r2,r2,255
  801f54:	1080201c 	xori	r2,r2,128
  801f58:	10bfe004 	addi	r2,r2,-128
  801f5c:	10000726 	beq	r2,zero,801f7c <tick+0x1190>
  801f60:	d0a79343 	ldbu	r2,-25011(gp)
  801f64:	10803fcc 	andi	r2,r2,255
  801f68:	1080201c 	xori	r2,r2,128
  801f6c:	10bfe004 	addi	r2,r2,-128
  801f70:	10000226 	beq	r2,zero,801f7c <tick+0x1190>
  801f74:	00800044 	movi	r2,1
  801f78:	00000106 	br	801f80 <tick+0x1194>
  801f7c:	0005883a 	mov	r2,zero
  801f80:	d0a7a2c5 	stb	r2,-24949(gp)
      if(g67){
  801f84:	d0a7a2c3 	ldbu	r2,-24949(gp)
  801f88:	10803fcc 	andi	r2,r2,255
  801f8c:	1080201c 	xori	r2,r2,128
  801f90:	10bfe004 	addi	r2,r2,-128
  801f94:	10000226 	beq	r2,zero,801fa0 <tick+0x11b4>
         _Pacemaker1_local_PVARP_ex =(_Pacemaker1_local_PVARP_ex||1);
  801f98:	00800044 	movi	r2,1
  801f9c:	d0a779c5 	stb	r2,-25113(gp)
      }
      g62 =((g68&&(!(_cg68)))||g61||g67);
  801fa0:	d0a79983 	ldbu	r2,-24986(gp)
  801fa4:	10803fcc 	andi	r2,r2,255
  801fa8:	1080201c 	xori	r2,r2,128
  801fac:	10bfe004 	addi	r2,r2,-128
  801fb0:	10000526 	beq	r2,zero,801fc8 <tick+0x11dc>
  801fb4:	d0a77783 	ldbu	r2,-25122(gp)
  801fb8:	10803fcc 	andi	r2,r2,255
  801fbc:	1080201c 	xori	r2,r2,128
  801fc0:	10bfe004 	addi	r2,r2,-128
  801fc4:	10000a26 	beq	r2,zero,801ff0 <tick+0x1204>
  801fc8:	d0a76b03 	ldbu	r2,-25172(gp)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	1000051e 	bne	r2,zero,801ff0 <tick+0x1204>
  801fdc:	d0a7a2c3 	ldbu	r2,-24949(gp)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	10000226 	beq	r2,zero,801ff8 <tick+0x120c>
  801ff0:	00800044 	movi	r2,1
  801ff4:	00000106 	br	801ffc <tick+0x1210>
  801ff8:	0005883a 	mov	r2,zero
  801ffc:	d0a76fc5 	stb	r2,-25153(gp)
      g65 =(g64||(g66&&(!(_cg66))));
  802000:	d0a77683 	ldbu	r2,-25126(gp)
  802004:	10803fcc 	andi	r2,r2,255
  802008:	1080201c 	xori	r2,r2,128
  80200c:	10bfe004 	addi	r2,r2,-128
  802010:	10000a1e 	bne	r2,zero,80203c <tick+0x1250>
  802014:	d0a77c83 	ldbu	r2,-25102(gp)
  802018:	10803fcc 	andi	r2,r2,255
  80201c:	1080201c 	xori	r2,r2,128
  802020:	10bfe004 	addi	r2,r2,-128
  802024:	10000726 	beq	r2,zero,802044 <tick+0x1258>
  802028:	d0a79343 	ldbu	r2,-25011(gp)
  80202c:	10803fcc 	andi	r2,r2,255
  802030:	1080201c 	xori	r2,r2,128
  802034:	10bfe004 	addi	r2,r2,-128
  802038:	1000021e 	bne	r2,zero,802044 <tick+0x1258>
  80203c:	00800044 	movi	r2,1
  802040:	00000106 	br	802048 <tick+0x125c>
  802044:	0005883a 	mov	r2,zero
  802048:	d0a79a85 	stb	r2,-24982(gp)
      g70 = g1;
  80204c:	d0a76ac3 	ldbu	r2,-25173(gp)
  802050:	d0a79305 	stb	r2,-25012(gp)
      g74 =(PRE_g73);
  802054:	d0a79fc3 	ldbu	r2,-24961(gp)
  802058:	d0a7a745 	stb	r2,-24931(gp)
      g74b = g74;
  80205c:	d0a7a743 	ldbu	r2,-24931(gp)
  802060:	d0a77705 	stb	r2,-25124(gp)
      _cg74 = _Pacemaker1_local_PVARP_ex;
  802064:	d0a779c3 	ldbu	r2,-25113(gp)
  802068:	d0a76e45 	stb	r2,-25159(gp)
      g71 =((g75&&(!(_cg75)))||g76||g70||(g74b&&_cg74));
  80206c:	d0a79703 	ldbu	r2,-24996(gp)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000526 	beq	r2,zero,802094 <tick+0x12a8>
  802080:	d0a76943 	ldbu	r2,-25179(gp)
  802084:	10803fcc 	andi	r2,r2,255
  802088:	1080201c 	xori	r2,r2,128
  80208c:	10bfe004 	addi	r2,r2,-128
  802090:	10001426 	beq	r2,zero,8020e4 <tick+0x12f8>
  802094:	d0a76f03 	ldbu	r2,-25156(gp)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10000f1e 	bne	r2,zero,8020e4 <tick+0x12f8>
  8020a8:	d0a79303 	ldbu	r2,-25012(gp)
  8020ac:	10803fcc 	andi	r2,r2,255
  8020b0:	1080201c 	xori	r2,r2,128
  8020b4:	10bfe004 	addi	r2,r2,-128
  8020b8:	10000a1e 	bne	r2,zero,8020e4 <tick+0x12f8>
  8020bc:	d0a77703 	ldbu	r2,-25124(gp)
  8020c0:	10803fcc 	andi	r2,r2,255
  8020c4:	1080201c 	xori	r2,r2,128
  8020c8:	10bfe004 	addi	r2,r2,-128
  8020cc:	10000726 	beq	r2,zero,8020ec <tick+0x1300>
  8020d0:	d0a76e43 	ldbu	r2,-25159(gp)
  8020d4:	10803fcc 	andi	r2,r2,255
  8020d8:	1080201c 	xori	r2,r2,128
  8020dc:	10bfe004 	addi	r2,r2,-128
  8020e0:	10000226 	beq	r2,zero,8020ec <tick+0x1300>
  8020e4:	00800044 	movi	r2,1
  8020e8:	00000106 	br	8020f0 <tick+0x1304>
  8020ec:	0005883a 	mov	r2,zero
  8020f0:	d0a76b85 	stb	r2,-25170(gp)
      g73 =((g72b&&_cg72)||(g74b&&(!(_cg74))));
  8020f4:	d0a79783 	ldbu	r2,-24994(gp)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	10000526 	beq	r2,zero,80211c <tick+0x1330>
  802108:	d0a7a683 	ldbu	r2,-24934(gp)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	10000a1e 	bne	r2,zero,802144 <tick+0x1358>
  80211c:	d0a77703 	ldbu	r2,-25124(gp)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	10000726 	beq	r2,zero,80214c <tick+0x1360>
  802130:	d0a76e43 	ldbu	r2,-25159(gp)
  802134:	10803fcc 	andi	r2,r2,255
  802138:	1080201c 	xori	r2,r2,128
  80213c:	10bfe004 	addi	r2,r2,-128
  802140:	1000021e 	bne	r2,zero,80214c <tick+0x1360>
  802144:	00800044 	movi	r2,1
  802148:	00000106 	br	802150 <tick+0x1364>
  80214c:	0005883a 	mov	r2,zero
  802150:	d0a79b85 	stb	r2,-24978(gp)
      g78 = g1;
  802154:	d0a76ac3 	ldbu	r2,-25173(gp)
  802158:	d0a78245 	stb	r2,-25079(gp)
      g83 =(PRE_g82);
  80215c:	d0a79e03 	ldbu	r2,-24968(gp)
  802160:	d0a75d05 	stb	r2,-25228(gp)
      g83b = g83;
  802164:	d0a75d03 	ldbu	r2,-25228(gp)
  802168:	d0a77905 	stb	r2,-25116(gp)
      _cg83 = _Pacemaker1_local_FilteredASense;
  80216c:	d0a784c3 	ldbu	r2,-25069(gp)
  802170:	d0a77d45 	stb	r2,-25099(gp)
      g85 =(g83b&&(!(_cg83)));
  802174:	d0a77903 	ldbu	r2,-25116(gp)
  802178:	10803fcc 	andi	r2,r2,255
  80217c:	1080201c 	xori	r2,r2,128
  802180:	10bfe004 	addi	r2,r2,-128
  802184:	10000726 	beq	r2,zero,8021a4 <tick+0x13b8>
  802188:	d0a77d43 	ldbu	r2,-25099(gp)
  80218c:	10803fcc 	andi	r2,r2,255
  802190:	1080201c 	xori	r2,r2,128
  802194:	10bfe004 	addi	r2,r2,-128
  802198:	1000021e 	bne	r2,zero,8021a4 <tick+0x13b8>
  80219c:	00800044 	movi	r2,1
  8021a0:	00000106 	br	8021a8 <tick+0x13bc>
  8021a4:	0005883a 	mov	r2,zero
  8021a8:	d0a762c5 	stb	r2,-25205(gp)
      _cg85 = APace;
  8021ac:	d0a75dc3 	ldbu	r2,-25225(gp)
  8021b0:	d0a76d85 	stb	r2,-25162(gp)
      g84 =((g83b&&_cg83)||(g85&&_cg85));
  8021b4:	d0a77903 	ldbu	r2,-25116(gp)
  8021b8:	10803fcc 	andi	r2,r2,255
  8021bc:	1080201c 	xori	r2,r2,128
  8021c0:	10bfe004 	addi	r2,r2,-128
  8021c4:	10000526 	beq	r2,zero,8021dc <tick+0x13f0>
  8021c8:	d0a77d43 	ldbu	r2,-25099(gp)
  8021cc:	10803fcc 	andi	r2,r2,255
  8021d0:	1080201c 	xori	r2,r2,128
  8021d4:	10bfe004 	addi	r2,r2,-128
  8021d8:	10000a1e 	bne	r2,zero,802204 <tick+0x1418>
  8021dc:	d0a762c3 	ldbu	r2,-25205(gp)
  8021e0:	10803fcc 	andi	r2,r2,255
  8021e4:	1080201c 	xori	r2,r2,128
  8021e8:	10bfe004 	addi	r2,r2,-128
  8021ec:	10000726 	beq	r2,zero,80220c <tick+0x1420>
  8021f0:	d0a76d83 	ldbu	r2,-25162(gp)
  8021f4:	10803fcc 	andi	r2,r2,255
  8021f8:	1080201c 	xori	r2,r2,128
  8021fc:	10bfe004 	addi	r2,r2,-128
  802200:	10000226 	beq	r2,zero,80220c <tick+0x1420>
  802204:	00800044 	movi	r2,1
  802208:	00000106 	br	802210 <tick+0x1424>
  80220c:	0005883a 	mov	r2,zero
  802210:	d0a77005 	stb	r2,-25152(gp)
      if(g84){
  802214:	d0a77003 	ldbu	r2,-25152(gp)
  802218:	10803fcc 	andi	r2,r2,255
  80221c:	1080201c 	xori	r2,r2,128
  802220:	10bfe004 	addi	r2,r2,-128
  802224:	10000226 	beq	r2,zero,802230 <tick+0x1444>
         AEI_stop =(AEI_stop||1);
  802228:	00800044 	movi	r2,1
  80222c:	d0a7a345 	stb	r2,-24947(gp)
      }
      g86 =(g85&&(!(_cg85)));
  802230:	d0a762c3 	ldbu	r2,-25205(gp)
  802234:	10803fcc 	andi	r2,r2,255
  802238:	1080201c 	xori	r2,r2,128
  80223c:	10bfe004 	addi	r2,r2,-128
  802240:	10000726 	beq	r2,zero,802260 <tick+0x1474>
  802244:	d0a76d83 	ldbu	r2,-25162(gp)
  802248:	10803fcc 	andi	r2,r2,255
  80224c:	1080201c 	xori	r2,r2,128
  802250:	10bfe004 	addi	r2,r2,-128
  802254:	1000021e 	bne	r2,zero,802260 <tick+0x1474>
  802258:	00800044 	movi	r2,1
  80225c:	00000106 	br	802264 <tick+0x1478>
  802260:	0005883a 	mov	r2,zero
  802264:	d0a78a45 	stb	r2,-25047(gp)
      _cg86 = AEITO;
  802268:	d0a7a583 	ldbu	r2,-24938(gp)
  80226c:	d0a79385 	stb	r2,-25010(gp)
      g87 =(g86&&_cg86);
  802270:	d0a78a43 	ldbu	r2,-25047(gp)
  802274:	10803fcc 	andi	r2,r2,255
  802278:	1080201c 	xori	r2,r2,128
  80227c:	10bfe004 	addi	r2,r2,-128
  802280:	10000726 	beq	r2,zero,8022a0 <tick+0x14b4>
  802284:	d0a79383 	ldbu	r2,-25010(gp)
  802288:	10803fcc 	andi	r2,r2,255
  80228c:	1080201c 	xori	r2,r2,128
  802290:	10bfe004 	addi	r2,r2,-128
  802294:	10000226 	beq	r2,zero,8022a0 <tick+0x14b4>
  802298:	00800044 	movi	r2,1
  80229c:	00000106 	br	8022a4 <tick+0x14b8>
  8022a0:	0005883a 	mov	r2,zero
  8022a4:	d0a76845 	stb	r2,-25183(gp)
      if(g87){
  8022a8:	d0a76843 	ldbu	r2,-25183(gp)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	10000226 	beq	r2,zero,8022c4 <tick+0x14d8>
         _Pacemaker1_local_AEI_ex =(_Pacemaker1_local_AEI_ex||1);
  8022bc:	00800044 	movi	r2,1
  8022c0:	d0a77f45 	stb	r2,-25091(gp)
      }
      g80 =(PRE_g79);
  8022c4:	d0a77ec3 	ldbu	r2,-25093(gp)
  8022c8:	d0a77b05 	stb	r2,-25108(gp)
      g80b = g80;
  8022cc:	d0a77b03 	ldbu	r2,-25108(gp)
  8022d0:	d0a75f45 	stb	r2,-25219(gp)
      _cg80 = _Pacemaker1_local_FilteredVSense;
  8022d4:	d0a77fc3 	ldbu	r2,-25089(gp)
  8022d8:	d0a78fc5 	stb	r2,-25025(gp)
      g88 =(g80b&&(!(_cg80)));
  8022dc:	d0a75f43 	ldbu	r2,-25219(gp)
  8022e0:	10803fcc 	andi	r2,r2,255
  8022e4:	1080201c 	xori	r2,r2,128
  8022e8:	10bfe004 	addi	r2,r2,-128
  8022ec:	10000726 	beq	r2,zero,80230c <tick+0x1520>
  8022f0:	d0a78fc3 	ldbu	r2,-25025(gp)
  8022f4:	10803fcc 	andi	r2,r2,255
  8022f8:	1080201c 	xori	r2,r2,128
  8022fc:	10bfe004 	addi	r2,r2,-128
  802300:	1000021e 	bne	r2,zero,80230c <tick+0x1520>
  802304:	00800044 	movi	r2,1
  802308:	00000106 	br	802310 <tick+0x1524>
  80230c:	0005883a 	mov	r2,zero
  802310:	d0a79d85 	stb	r2,-24970(gp)
      _cg88 = VPace;
  802314:	d0a7a0c3 	ldbu	r2,-24957(gp)
  802318:	d0a7a145 	stb	r2,-24955(gp)
      g79 =(g78||g84||g87||(g88&&(!(_cg88))));
  80231c:	d0a78243 	ldbu	r2,-25079(gp)
  802320:	10803fcc 	andi	r2,r2,255
  802324:	1080201c 	xori	r2,r2,128
  802328:	10bfe004 	addi	r2,r2,-128
  80232c:	1000141e 	bne	r2,zero,802380 <tick+0x1594>
  802330:	d0a77003 	ldbu	r2,-25152(gp)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	10000f1e 	bne	r2,zero,802380 <tick+0x1594>
  802344:	d0a76843 	ldbu	r2,-25183(gp)
  802348:	10803fcc 	andi	r2,r2,255
  80234c:	1080201c 	xori	r2,r2,128
  802350:	10bfe004 	addi	r2,r2,-128
  802354:	10000a1e 	bne	r2,zero,802380 <tick+0x1594>
  802358:	d0a79d83 	ldbu	r2,-24970(gp)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	10000726 	beq	r2,zero,802388 <tick+0x159c>
  80236c:	d0a7a143 	ldbu	r2,-24955(gp)
  802370:	10803fcc 	andi	r2,r2,255
  802374:	1080201c 	xori	r2,r2,128
  802378:	10bfe004 	addi	r2,r2,-128
  80237c:	1000021e 	bne	r2,zero,802388 <tick+0x159c>
  802380:	00800044 	movi	r2,1
  802384:	00000106 	br	80238c <tick+0x15a0>
  802388:	0005883a 	mov	r2,zero
  80238c:	d0a777c5 	stb	r2,-25121(gp)
      g81 =((g80b&&_cg80)||(g88&&_cg88));
  802390:	d0a75f43 	ldbu	r2,-25219(gp)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	10000526 	beq	r2,zero,8023b8 <tick+0x15cc>
  8023a4:	d0a78fc3 	ldbu	r2,-25025(gp)
  8023a8:	10803fcc 	andi	r2,r2,255
  8023ac:	1080201c 	xori	r2,r2,128
  8023b0:	10bfe004 	addi	r2,r2,-128
  8023b4:	10000a1e 	bne	r2,zero,8023e0 <tick+0x15f4>
  8023b8:	d0a79d83 	ldbu	r2,-24970(gp)
  8023bc:	10803fcc 	andi	r2,r2,255
  8023c0:	1080201c 	xori	r2,r2,128
  8023c4:	10bfe004 	addi	r2,r2,-128
  8023c8:	10000726 	beq	r2,zero,8023e8 <tick+0x15fc>
  8023cc:	d0a7a143 	ldbu	r2,-24955(gp)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	10000226 	beq	r2,zero,8023e8 <tick+0x15fc>
  8023e0:	00800044 	movi	r2,1
  8023e4:	00000106 	br	8023ec <tick+0x1600>
  8023e8:	0005883a 	mov	r2,zero
  8023ec:	d0a79505 	stb	r2,-25004(gp)
      if(g81){
  8023f0:	d0a79503 	ldbu	r2,-25004(gp)
  8023f4:	10803fcc 	andi	r2,r2,255
  8023f8:	1080201c 	xori	r2,r2,128
  8023fc:	10bfe004 	addi	r2,r2,-128
  802400:	10000226 	beq	r2,zero,80240c <tick+0x1620>
         AEI_start =(AEI_start||1);
  802404:	00800044 	movi	r2,1
  802408:	d0a792c5 	stb	r2,-25013(gp)
      }
      g82 =(g81||(g86&&(!(_cg86))));
  80240c:	d0a79503 	ldbu	r2,-25004(gp)
  802410:	10803fcc 	andi	r2,r2,255
  802414:	1080201c 	xori	r2,r2,128
  802418:	10bfe004 	addi	r2,r2,-128
  80241c:	10000a1e 	bne	r2,zero,802448 <tick+0x165c>
  802420:	d0a78a43 	ldbu	r2,-25047(gp)
  802424:	10803fcc 	andi	r2,r2,255
  802428:	1080201c 	xori	r2,r2,128
  80242c:	10bfe004 	addi	r2,r2,-128
  802430:	10000726 	beq	r2,zero,802450 <tick+0x1664>
  802434:	d0a79383 	ldbu	r2,-25010(gp)
  802438:	10803fcc 	andi	r2,r2,255
  80243c:	1080201c 	xori	r2,r2,128
  802440:	10bfe004 	addi	r2,r2,-128
  802444:	1000021e 	bne	r2,zero,802450 <tick+0x1664>
  802448:	00800044 	movi	r2,1
  80244c:	00000106 	br	802454 <tick+0x1668>
  802450:	0005883a 	mov	r2,zero
  802454:	d0a76c45 	stb	r2,-25167(gp)
      g90 = g1;
  802458:	d0a76ac3 	ldbu	r2,-25173(gp)
  80245c:	d0a78605 	stb	r2,-25064(gp)
      g92 =(PRE_g91);
  802460:	d0a78783 	ldbu	r2,-25058(gp)
  802464:	d0a76a85 	stb	r2,-25174(gp)
      g92b = g92;
  802468:	d0a76a83 	ldbu	r2,-25174(gp)
  80246c:	d0a78345 	stb	r2,-25075(gp)
      _cg92 = AEI_start;
  802470:	d0a792c3 	ldbu	r2,-25013(gp)
  802474:	d0a79e85 	stb	r2,-24966(gp)
      g91 =((g94b&&_cg94)||g90||g96||(g92b&&(!(_cg92))));
  802478:	d0a76403 	ldbu	r2,-25200(gp)
  80247c:	10803fcc 	andi	r2,r2,255
  802480:	1080201c 	xori	r2,r2,128
  802484:	10bfe004 	addi	r2,r2,-128
  802488:	10000526 	beq	r2,zero,8024a0 <tick+0x16b4>
  80248c:	d0a79903 	ldbu	r2,-24988(gp)
  802490:	10803fcc 	andi	r2,r2,255
  802494:	1080201c 	xori	r2,r2,128
  802498:	10bfe004 	addi	r2,r2,-128
  80249c:	1000141e 	bne	r2,zero,8024f0 <tick+0x1704>
  8024a0:	d0a78603 	ldbu	r2,-25064(gp)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	1080201c 	xori	r2,r2,128
  8024ac:	10bfe004 	addi	r2,r2,-128
  8024b0:	10000f1e 	bne	r2,zero,8024f0 <tick+0x1704>
  8024b4:	d0a78e43 	ldbu	r2,-25031(gp)
  8024b8:	10803fcc 	andi	r2,r2,255
  8024bc:	1080201c 	xori	r2,r2,128
  8024c0:	10bfe004 	addi	r2,r2,-128
  8024c4:	10000a1e 	bne	r2,zero,8024f0 <tick+0x1704>
  8024c8:	d0a78343 	ldbu	r2,-25075(gp)
  8024cc:	10803fcc 	andi	r2,r2,255
  8024d0:	1080201c 	xori	r2,r2,128
  8024d4:	10bfe004 	addi	r2,r2,-128
  8024d8:	10000726 	beq	r2,zero,8024f8 <tick+0x170c>
  8024dc:	d0a79e83 	ldbu	r2,-24966(gp)
  8024e0:	10803fcc 	andi	r2,r2,255
  8024e4:	1080201c 	xori	r2,r2,128
  8024e8:	10bfe004 	addi	r2,r2,-128
  8024ec:	1000021e 	bne	r2,zero,8024f8 <tick+0x170c>
  8024f0:	00800044 	movi	r2,1
  8024f4:	00000106 	br	8024fc <tick+0x1710>
  8024f8:	0005883a 	mov	r2,zero
  8024fc:	d0a75d85 	stb	r2,-25226(gp)
      g93 =((g92b&&_cg92)||(g95&&(!(_cg95))));
  802500:	d0a78343 	ldbu	r2,-25075(gp)
  802504:	10803fcc 	andi	r2,r2,255
  802508:	1080201c 	xori	r2,r2,128
  80250c:	10bfe004 	addi	r2,r2,-128
  802510:	10000526 	beq	r2,zero,802528 <tick+0x173c>
  802514:	d0a79e83 	ldbu	r2,-24966(gp)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	10000a1e 	bne	r2,zero,802550 <tick+0x1764>
  802528:	d0a78d83 	ldbu	r2,-25034(gp)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	10000726 	beq	r2,zero,802558 <tick+0x176c>
  80253c:	d0a77383 	ldbu	r2,-25138(gp)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	1000021e 	bne	r2,zero,802558 <tick+0x176c>
  802550:	00800044 	movi	r2,1
  802554:	00000106 	br	80255c <tick+0x1770>
  802558:	0005883a 	mov	r2,zero
  80255c:	d0a78945 	stb	r2,-25051(gp)
      g98 = g1;
  802560:	d0a76ac3 	ldbu	r2,-25173(gp)
  802564:	d0a79185 	stb	r2,-25018(gp)
      g103 =(PRE_g102);
  802568:	d0a75f03 	ldbu	r2,-25220(gp)
  80256c:	d0a76205 	stb	r2,-25208(gp)
      _cg103 = URITO;
  802570:	d0a786c3 	ldbu	r2,-25061(gp)
  802574:	d0a79e45 	stb	r2,-24967(gp)
      g104 =(g103&&_cg103);
  802578:	d0a76203 	ldbu	r2,-25208(gp)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	1080201c 	xori	r2,r2,128
  802584:	10bfe004 	addi	r2,r2,-128
  802588:	10000726 	beq	r2,zero,8025a8 <tick+0x17bc>
  80258c:	d0a79e43 	ldbu	r2,-24967(gp)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10000226 	beq	r2,zero,8025a8 <tick+0x17bc>
  8025a0:	00800044 	movi	r2,1
  8025a4:	00000106 	br	8025ac <tick+0x17c0>
  8025a8:	0005883a 	mov	r2,zero
  8025ac:	d0a79045 	stb	r2,-25023(gp)
      if(g104){
  8025b0:	d0a79043 	ldbu	r2,-25023(gp)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	10000226 	beq	r2,zero,8025cc <tick+0x17e0>
         _Pacemaker1_local_URI_ex =(_Pacemaker1_local_URI_ex||1);
  8025c4:	00800044 	movi	r2,1
  8025c8:	d0a79485 	stb	r2,-25006(gp)
      }
      g100 =(PRE_g99);
  8025cc:	d0a79683 	ldbu	r2,-24998(gp)
  8025d0:	d0a77b85 	stb	r2,-25106(gp)
      g100b = g100;
  8025d4:	d0a77b83 	ldbu	r2,-25106(gp)
  8025d8:	d0a7a045 	stb	r2,-24959(gp)
      _cg100 = _Pacemaker1_local_FilteredVSense;
  8025dc:	d0a77fc3 	ldbu	r2,-25089(gp)
  8025e0:	d0a78045 	stb	r2,-25087(gp)
      g105 =(g100b&&(!(_cg100)));
  8025e4:	d0a7a043 	ldbu	r2,-24959(gp)
  8025e8:	10803fcc 	andi	r2,r2,255
  8025ec:	1080201c 	xori	r2,r2,128
  8025f0:	10bfe004 	addi	r2,r2,-128
  8025f4:	10000726 	beq	r2,zero,802614 <tick+0x1828>
  8025f8:	d0a78043 	ldbu	r2,-25087(gp)
  8025fc:	10803fcc 	andi	r2,r2,255
  802600:	1080201c 	xori	r2,r2,128
  802604:	10bfe004 	addi	r2,r2,-128
  802608:	1000021e 	bne	r2,zero,802614 <tick+0x1828>
  80260c:	00800044 	movi	r2,1
  802610:	00000106 	br	802618 <tick+0x182c>
  802614:	0005883a 	mov	r2,zero
  802618:	d0a77485 	stb	r2,-25134(gp)
      _cg105 = VPace;
  80261c:	d0a7a0c3 	ldbu	r2,-24957(gp)
  802620:	d0a7a705 	stb	r2,-24932(gp)
      g99 =(g104||(g105&&(!(_cg105)))||g98);
  802624:	d0a79043 	ldbu	r2,-25023(gp)
  802628:	10803fcc 	andi	r2,r2,255
  80262c:	1080201c 	xori	r2,r2,128
  802630:	10bfe004 	addi	r2,r2,-128
  802634:	10000f1e 	bne	r2,zero,802674 <tick+0x1888>
  802638:	d0a77483 	ldbu	r2,-25134(gp)
  80263c:	10803fcc 	andi	r2,r2,255
  802640:	1080201c 	xori	r2,r2,128
  802644:	10bfe004 	addi	r2,r2,-128
  802648:	10000526 	beq	r2,zero,802660 <tick+0x1874>
  80264c:	d0a7a703 	ldbu	r2,-24932(gp)
  802650:	10803fcc 	andi	r2,r2,255
  802654:	1080201c 	xori	r2,r2,128
  802658:	10bfe004 	addi	r2,r2,-128
  80265c:	10000526 	beq	r2,zero,802674 <tick+0x1888>
  802660:	d0a79183 	ldbu	r2,-25018(gp)
  802664:	10803fcc 	andi	r2,r2,255
  802668:	1080201c 	xori	r2,r2,128
  80266c:	10bfe004 	addi	r2,r2,-128
  802670:	10000226 	beq	r2,zero,80267c <tick+0x1890>
  802674:	00800044 	movi	r2,1
  802678:	00000106 	br	802680 <tick+0x1894>
  80267c:	0005883a 	mov	r2,zero
  802680:	d0a77c05 	stb	r2,-25104(gp)
      g101 =((g100b&&_cg100)||(g105&&_cg105));
  802684:	d0a7a043 	ldbu	r2,-24959(gp)
  802688:	10803fcc 	andi	r2,r2,255
  80268c:	1080201c 	xori	r2,r2,128
  802690:	10bfe004 	addi	r2,r2,-128
  802694:	10000526 	beq	r2,zero,8026ac <tick+0x18c0>
  802698:	d0a78043 	ldbu	r2,-25087(gp)
  80269c:	10803fcc 	andi	r2,r2,255
  8026a0:	1080201c 	xori	r2,r2,128
  8026a4:	10bfe004 	addi	r2,r2,-128
  8026a8:	10000a1e 	bne	r2,zero,8026d4 <tick+0x18e8>
  8026ac:	d0a77483 	ldbu	r2,-25134(gp)
  8026b0:	10803fcc 	andi	r2,r2,255
  8026b4:	1080201c 	xori	r2,r2,128
  8026b8:	10bfe004 	addi	r2,r2,-128
  8026bc:	10000726 	beq	r2,zero,8026dc <tick+0x18f0>
  8026c0:	d0a7a703 	ldbu	r2,-24932(gp)
  8026c4:	10803fcc 	andi	r2,r2,255
  8026c8:	1080201c 	xori	r2,r2,128
  8026cc:	10bfe004 	addi	r2,r2,-128
  8026d0:	10000226 	beq	r2,zero,8026dc <tick+0x18f0>
  8026d4:	00800044 	movi	r2,1
  8026d8:	00000106 	br	8026e0 <tick+0x18f4>
  8026dc:	0005883a 	mov	r2,zero
  8026e0:	d0a77f05 	stb	r2,-25092(gp)
      if(g101){
  8026e4:	d0a77f03 	ldbu	r2,-25092(gp)
  8026e8:	10803fcc 	andi	r2,r2,255
  8026ec:	1080201c 	xori	r2,r2,128
  8026f0:	10bfe004 	addi	r2,r2,-128
  8026f4:	10000226 	beq	r2,zero,802700 <tick+0x1914>
         URI_start =(URI_start||1);
  8026f8:	00800044 	movi	r2,1
  8026fc:	d0a7a405 	stb	r2,-24944(gp)
      }
      g102 =(g101||(g103&&(!(_cg103))));
  802700:	d0a77f03 	ldbu	r2,-25092(gp)
  802704:	10803fcc 	andi	r2,r2,255
  802708:	1080201c 	xori	r2,r2,128
  80270c:	10bfe004 	addi	r2,r2,-128
  802710:	10000a1e 	bne	r2,zero,80273c <tick+0x1950>
  802714:	d0a76203 	ldbu	r2,-25208(gp)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	10000726 	beq	r2,zero,802744 <tick+0x1958>
  802728:	d0a79e43 	ldbu	r2,-24967(gp)
  80272c:	10803fcc 	andi	r2,r2,255
  802730:	1080201c 	xori	r2,r2,128
  802734:	10bfe004 	addi	r2,r2,-128
  802738:	1000021e 	bne	r2,zero,802744 <tick+0x1958>
  80273c:	00800044 	movi	r2,1
  802740:	00000106 	br	802748 <tick+0x195c>
  802744:	0005883a 	mov	r2,zero
  802748:	d0a76645 	stb	r2,-25191(gp)
      g107 = g1;
  80274c:	d0a76ac3 	ldbu	r2,-25173(gp)
  802750:	d0a78ec5 	stb	r2,-25029(gp)
      g111 =(PRE_g110);
  802754:	d0a79583 	ldbu	r2,-25002(gp)
  802758:	d0a75ec5 	stb	r2,-25221(gp)
      g111b = g111;
  80275c:	d0a75ec3 	ldbu	r2,-25221(gp)
  802760:	d0a77d05 	stb	r2,-25100(gp)
      _cg111 = _Pacemaker1_local_URI_ex;
  802764:	d0a79483 	ldbu	r2,-25006(gp)
  802768:	d0a773c5 	stb	r2,-25137(gp)
      g109 =(PRE_g108);
  80276c:	d0a7a203 	ldbu	r2,-24952(gp)
  802770:	d0a7a3c5 	stb	r2,-24945(gp)
      g109b = g109;
  802774:	d0a7a3c3 	ldbu	r2,-24945(gp)
  802778:	d0a783c5 	stb	r2,-25073(gp)
      _cg109 = URI_start;
  80277c:	d0a7a403 	ldbu	r2,-24944(gp)
  802780:	d0a7a085 	stb	r2,-24958(gp)
      g112 =(g109b&&(!(_cg109)));
  802784:	d0a783c3 	ldbu	r2,-25073(gp)
  802788:	10803fcc 	andi	r2,r2,255
  80278c:	1080201c 	xori	r2,r2,128
  802790:	10bfe004 	addi	r2,r2,-128
  802794:	10000726 	beq	r2,zero,8027b4 <tick+0x19c8>
  802798:	d0a7a083 	ldbu	r2,-24958(gp)
  80279c:	10803fcc 	andi	r2,r2,255
  8027a0:	1080201c 	xori	r2,r2,128
  8027a4:	10bfe004 	addi	r2,r2,-128
  8027a8:	1000021e 	bne	r2,zero,8027b4 <tick+0x19c8>
  8027ac:	00800044 	movi	r2,1
  8027b0:	00000106 	br	8027b8 <tick+0x19cc>
  8027b4:	0005883a 	mov	r2,zero
  8027b8:	d0a76105 	stb	r2,-25212(gp)
      if(g112){
  8027bc:	d0a76103 	ldbu	r2,-25212(gp)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1080201c 	xori	r2,r2,128
  8027c8:	10bfe004 	addi	r2,r2,-128
  8027cc:	10000226 	beq	r2,zero,8027d8 <tick+0x19ec>
         _Pacemaker1_local_URI_idle =(_Pacemaker1_local_URI_idle||1);
  8027d0:	00800044 	movi	r2,1
  8027d4:	d0a77145 	stb	r2,-25147(gp)
      }
      g108 =(g107||(g111b&&_cg111)||g112);
  8027d8:	d0a78ec3 	ldbu	r2,-25029(gp)
  8027dc:	10803fcc 	andi	r2,r2,255
  8027e0:	1080201c 	xori	r2,r2,128
  8027e4:	10bfe004 	addi	r2,r2,-128
  8027e8:	10000f1e 	bne	r2,zero,802828 <tick+0x1a3c>
  8027ec:	d0a77d03 	ldbu	r2,-25100(gp)
  8027f0:	10803fcc 	andi	r2,r2,255
  8027f4:	1080201c 	xori	r2,r2,128
  8027f8:	10bfe004 	addi	r2,r2,-128
  8027fc:	10000526 	beq	r2,zero,802814 <tick+0x1a28>
  802800:	d0a773c3 	ldbu	r2,-25137(gp)
  802804:	10803fcc 	andi	r2,r2,255
  802808:	1080201c 	xori	r2,r2,128
  80280c:	10bfe004 	addi	r2,r2,-128
  802810:	1000051e 	bne	r2,zero,802828 <tick+0x1a3c>
  802814:	d0a76103 	ldbu	r2,-25212(gp)
  802818:	10803fcc 	andi	r2,r2,255
  80281c:	1080201c 	xori	r2,r2,128
  802820:	10bfe004 	addi	r2,r2,-128
  802824:	10000226 	beq	r2,zero,802830 <tick+0x1a44>
  802828:	00800044 	movi	r2,1
  80282c:	00000106 	br	802834 <tick+0x1a48>
  802830:	0005883a 	mov	r2,zero
  802834:	d0a75e45 	stb	r2,-25223(gp)
      g110 =((g109b&&_cg109)||(g111b&&(!(_cg111))));
  802838:	d0a783c3 	ldbu	r2,-25073(gp)
  80283c:	10803fcc 	andi	r2,r2,255
  802840:	1080201c 	xori	r2,r2,128
  802844:	10bfe004 	addi	r2,r2,-128
  802848:	10000526 	beq	r2,zero,802860 <tick+0x1a74>
  80284c:	d0a7a083 	ldbu	r2,-24958(gp)
  802850:	10803fcc 	andi	r2,r2,255
  802854:	1080201c 	xori	r2,r2,128
  802858:	10bfe004 	addi	r2,r2,-128
  80285c:	10000a1e 	bne	r2,zero,802888 <tick+0x1a9c>
  802860:	d0a77d03 	ldbu	r2,-25100(gp)
  802864:	10803fcc 	andi	r2,r2,255
  802868:	1080201c 	xori	r2,r2,128
  80286c:	10bfe004 	addi	r2,r2,-128
  802870:	10000726 	beq	r2,zero,802890 <tick+0x1aa4>
  802874:	d0a773c3 	ldbu	r2,-25137(gp)
  802878:	10803fcc 	andi	r2,r2,255
  80287c:	1080201c 	xori	r2,r2,128
  802880:	10bfe004 	addi	r2,r2,-128
  802884:	1000021e 	bne	r2,zero,802890 <tick+0x1aa4>
  802888:	00800044 	movi	r2,1
  80288c:	00000106 	br	802894 <tick+0x1aa8>
  802890:	0005883a 	mov	r2,zero
  802894:	d0a77945 	stb	r2,-25115(gp)
      g114 = g1;
  802898:	d0a76ac3 	ldbu	r2,-25173(gp)
  80289c:	d0a78085 	stb	r2,-25086(gp)
      g115 =(g116||g114);
  8028a0:	d0a79403 	ldbu	r2,-25008(gp)
  8028a4:	10803fcc 	andi	r2,r2,255
  8028a8:	1080201c 	xori	r2,r2,128
  8028ac:	10bfe004 	addi	r2,r2,-128
  8028b0:	1000051e 	bne	r2,zero,8028c8 <tick+0x1adc>
  8028b4:	d0a78083 	ldbu	r2,-25086(gp)
  8028b8:	10803fcc 	andi	r2,r2,255
  8028bc:	1080201c 	xori	r2,r2,128
  8028c0:	10bfe004 	addi	r2,r2,-128
  8028c4:	10000226 	beq	r2,zero,8028d0 <tick+0x1ae4>
  8028c8:	00800044 	movi	r2,1
  8028cc:	00000106 	br	8028d4 <tick+0x1ae8>
  8028d0:	0005883a 	mov	r2,zero
  8028d4:	d0a766c5 	stb	r2,-25189(gp)
      if(g115){
  8028d8:	d0a766c3 	ldbu	r2,-25189(gp)
  8028dc:	10803fcc 	andi	r2,r2,255
  8028e0:	1080201c 	xori	r2,r2,128
  8028e4:	10bfe004 	addi	r2,r2,-128
  8028e8:	10000226 	beq	r2,zero,8028f4 <tick+0x1b08>
         _Pacemaker1_local__reg_LRI_ex10 = _Pacemaker1_local_LRI_ex;
  8028ec:	d0a78483 	ldbu	r2,-25070(gp)
  8028f0:	d0a77e05 	stb	r2,-25096(gp)
      }
      g115b = g115;
  8028f4:	d0a766c3 	ldbu	r2,-25189(gp)
  8028f8:	d0a79bc5 	stb	r2,-24977(gp)
      if(g115b){
  8028fc:	d0a79bc3 	ldbu	r2,-24977(gp)
  802900:	10803fcc 	andi	r2,r2,255
  802904:	1080201c 	xori	r2,r2,128
  802908:	10bfe004 	addi	r2,r2,-128
  80290c:	10000226 	beq	r2,zero,802918 <tick+0x1b2c>
         _Pacemaker1_local__reg_AEI_ex14 = _Pacemaker1_local_AEI_ex;
  802910:	d0a77f43 	ldbu	r2,-25091(gp)
  802914:	d0a760c5 	stb	r2,-25213(gp)
      }
      g115c = g115;
  802918:	d0a766c3 	ldbu	r2,-25189(gp)
  80291c:	d0a78f05 	stb	r2,-25028(gp)
      if(g115c){
  802920:	d0a78f03 	ldbu	r2,-25028(gp)
  802924:	10803fcc 	andi	r2,r2,255
  802928:	1080201c 	xori	r2,r2,128
  80292c:	10bfe004 	addi	r2,r2,-128
  802930:	10000226 	beq	r2,zero,80293c <tick+0x1b50>
         _Pacemaker1_local__reg_URI_idle15 = _Pacemaker1_local_URI_idle;
  802934:	d0a77143 	ldbu	r2,-25147(gp)
  802938:	d0a782c5 	stb	r2,-25077(gp)
      }
      g123 = g0;
  80293c:	d0a796c3 	ldbu	r2,-24997(gp)
  802940:	d0a76905 	stb	r2,-25180(gp)
      g124 =(g123||g125);
  802944:	d0a76903 	ldbu	r2,-25180(gp)
  802948:	10803fcc 	andi	r2,r2,255
  80294c:	1080201c 	xori	r2,r2,128
  802950:	10bfe004 	addi	r2,r2,-128
  802954:	1000051e 	bne	r2,zero,80296c <tick+0x1b80>
  802958:	d0a79c43 	ldbu	r2,-24975(gp)
  80295c:	10803fcc 	andi	r2,r2,255
  802960:	1080201c 	xori	r2,r2,128
  802964:	10bfe004 	addi	r2,r2,-128
  802968:	10000226 	beq	r2,zero,802974 <tick+0x1b88>
  80296c:	00800044 	movi	r2,1
  802970:	00000106 	br	802978 <tick+0x1b8c>
  802974:	0005883a 	mov	r2,zero
  802978:	d0a795c5 	stb	r2,-25001(gp)
      if(g124){
  80297c:	d0a795c3 	ldbu	r2,-25001(gp)
  802980:	10803fcc 	andi	r2,r2,255
  802984:	1080201c 	xori	r2,r2,128
  802988:	10bfe004 	addi	r2,r2,-128
  80298c:	10000226 	beq	r2,zero,802998 <tick+0x1bac>
         _reg_AEI_stop15 = AEI_stop;
  802990:	d0a7a343 	ldbu	r2,-24947(gp)
  802994:	d0a79805 	stb	r2,-24992(gp)
      }
      g124b = g124;
  802998:	d0a795c3 	ldbu	r2,-25001(gp)
  80299c:	d0a77505 	stb	r2,-25132(gp)
      if(g124b){
  8029a0:	d0a77503 	ldbu	r2,-25132(gp)
  8029a4:	10803fcc 	andi	r2,r2,255
  8029a8:	1080201c 	xori	r2,r2,128
  8029ac:	10bfe004 	addi	r2,r2,-128
  8029b0:	10000226 	beq	r2,zero,8029bc <tick+0x1bd0>
         _reg_VRP_start18 = VRP_start;
  8029b4:	d0a78383 	ldbu	r2,-25074(gp)
  8029b8:	d0a76345 	stb	r2,-25203(gp)
      }
      g124c = g124;
  8029bc:	d0a795c3 	ldbu	r2,-25001(gp)
  8029c0:	d0a79d05 	stb	r2,-24972(gp)
      if(g124c){
  8029c4:	d0a79d03 	ldbu	r2,-24972(gp)
  8029c8:	10803fcc 	andi	r2,r2,255
  8029cc:	1080201c 	xori	r2,r2,128
  8029d0:	10bfe004 	addi	r2,r2,-128
  8029d4:	10000226 	beq	r2,zero,8029e0 <tick+0x1bf4>
         _reg_LRI_stop = LRI_stop;
  8029d8:	d0a77183 	ldbu	r2,-25146(gp)
  8029dc:	d0a77605 	stb	r2,-25128(gp)
      }
      g10_e1 =(!((g4||g7)));
  8029e0:	d0a75e03 	ldbu	r2,-25224(gp)
  8029e4:	10803fcc 	andi	r2,r2,255
  8029e8:	1080201c 	xori	r2,r2,128
  8029ec:	10bfe004 	addi	r2,r2,-128
  8029f0:	1000071e 	bne	r2,zero,802a10 <tick+0x1c24>
  8029f4:	d0a77a43 	ldbu	r2,-25111(gp)
  8029f8:	10803fcc 	andi	r2,r2,255
  8029fc:	1080201c 	xori	r2,r2,128
  802a00:	10bfe004 	addi	r2,r2,-128
  802a04:	1000021e 	bne	r2,zero,802a10 <tick+0x1c24>
  802a08:	00800044 	movi	r2,1
  802a0c:	00000106 	br	802a14 <tick+0x1c28>
  802a10:	0005883a 	mov	r2,zero
  802a14:	d0a793c5 	stb	r2,-25009(gp)
      g18_e2 =(!((g13||g15)));
  802a18:	d0a790c3 	ldbu	r2,-25021(gp)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	1000071e 	bne	r2,zero,802a48 <tick+0x1c5c>
  802a2c:	d0a785c3 	ldbu	r2,-25065(gp)
  802a30:	10803fcc 	andi	r2,r2,255
  802a34:	1080201c 	xori	r2,r2,128
  802a38:	10bfe004 	addi	r2,r2,-128
  802a3c:	1000021e 	bne	r2,zero,802a48 <tick+0x1c5c>
  802a40:	00800044 	movi	r2,1
  802a44:	00000106 	br	802a4c <tick+0x1c60>
  802a48:	0005883a 	mov	r2,zero
  802a4c:	d0a78f85 	stb	r2,-25026(gp)
      g30_e3 =(!((g21||g24)));
  802a50:	d0a776c3 	ldbu	r2,-25125(gp)
  802a54:	10803fcc 	andi	r2,r2,255
  802a58:	1080201c 	xori	r2,r2,128
  802a5c:	10bfe004 	addi	r2,r2,-128
  802a60:	1000071e 	bne	r2,zero,802a80 <tick+0x1c94>
  802a64:	d0a7a303 	ldbu	r2,-24948(gp)
  802a68:	10803fcc 	andi	r2,r2,255
  802a6c:	1080201c 	xori	r2,r2,128
  802a70:	10bfe004 	addi	r2,r2,-128
  802a74:	1000021e 	bne	r2,zero,802a80 <tick+0x1c94>
  802a78:	00800044 	movi	r2,1
  802a7c:	00000106 	br	802a84 <tick+0x1c98>
  802a80:	0005883a 	mov	r2,zero
  802a84:	d0a77845 	stb	r2,-25119(gp)
      g38_e4 =(!((g33||g35)));
  802a88:	d0a78283 	ldbu	r2,-25078(gp)
  802a8c:	10803fcc 	andi	r2,r2,255
  802a90:	1080201c 	xori	r2,r2,128
  802a94:	10bfe004 	addi	r2,r2,-128
  802a98:	1000071e 	bne	r2,zero,802ab8 <tick+0x1ccc>
  802a9c:	d0a78583 	ldbu	r2,-25066(gp)
  802aa0:	10803fcc 	andi	r2,r2,255
  802aa4:	1080201c 	xori	r2,r2,128
  802aa8:	10bfe004 	addi	r2,r2,-128
  802aac:	1000021e 	bne	r2,zero,802ab8 <tick+0x1ccc>
  802ab0:	00800044 	movi	r2,1
  802ab4:	00000106 	br	802abc <tick+0x1cd0>
  802ab8:	0005883a 	mov	r2,zero
  802abc:	d0a77545 	stb	r2,-25131(gp)
      g50_e5 =(!((g41||g44)));
  802ac0:	d0a77043 	ldbu	r2,-25151(gp)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	1080201c 	xori	r2,r2,128
  802acc:	10bfe004 	addi	r2,r2,-128
  802ad0:	1000071e 	bne	r2,zero,802af0 <tick+0x1d04>
  802ad4:	d0a76883 	ldbu	r2,-25182(gp)
  802ad8:	10803fcc 	andi	r2,r2,255
  802adc:	1080201c 	xori	r2,r2,128
  802ae0:	10bfe004 	addi	r2,r2,-128
  802ae4:	1000021e 	bne	r2,zero,802af0 <tick+0x1d04>
  802ae8:	00800044 	movi	r2,1
  802aec:	00000106 	br	802af4 <tick+0x1d08>
  802af0:	0005883a 	mov	r2,zero
  802af4:	d0a78505 	stb	r2,-25068(gp)
      g60_e6 =(!((g53||g55||g57)));
  802af8:	d0a791c3 	ldbu	r2,-25017(gp)
  802afc:	10803fcc 	andi	r2,r2,255
  802b00:	1080201c 	xori	r2,r2,128
  802b04:	10bfe004 	addi	r2,r2,-128
  802b08:	10000c1e 	bne	r2,zero,802b3c <tick+0x1d50>
  802b0c:	d0a76003 	ldbu	r2,-25216(gp)
  802b10:	10803fcc 	andi	r2,r2,255
  802b14:	1080201c 	xori	r2,r2,128
  802b18:	10bfe004 	addi	r2,r2,-128
  802b1c:	1000071e 	bne	r2,zero,802b3c <tick+0x1d50>
  802b20:	d0a79243 	ldbu	r2,-25015(gp)
  802b24:	10803fcc 	andi	r2,r2,255
  802b28:	1080201c 	xori	r2,r2,128
  802b2c:	10bfe004 	addi	r2,r2,-128
  802b30:	1000021e 	bne	r2,zero,802b3c <tick+0x1d50>
  802b34:	00800044 	movi	r2,1
  802b38:	00000106 	br	802b40 <tick+0x1d54>
  802b3c:	0005883a 	mov	r2,zero
  802b40:	d0a78905 	stb	r2,-25052(gp)
      g69_e7 =(!((g63||g66)));
  802b44:	d0a78803 	ldbu	r2,-25056(gp)
  802b48:	10803fcc 	andi	r2,r2,255
  802b4c:	1080201c 	xori	r2,r2,128
  802b50:	10bfe004 	addi	r2,r2,-128
  802b54:	1000071e 	bne	r2,zero,802b74 <tick+0x1d88>
  802b58:	d0a77c83 	ldbu	r2,-25102(gp)
  802b5c:	10803fcc 	andi	r2,r2,255
  802b60:	1080201c 	xori	r2,r2,128
  802b64:	10bfe004 	addi	r2,r2,-128
  802b68:	1000021e 	bne	r2,zero,802b74 <tick+0x1d88>
  802b6c:	00800044 	movi	r2,1
  802b70:	00000106 	br	802b78 <tick+0x1d8c>
  802b74:	0005883a 	mov	r2,zero
  802b78:	d0a79b05 	stb	r2,-24980(gp)
      g77_e8 =(!((g72||g74)));
  802b7c:	d0a794c3 	ldbu	r2,-25005(gp)
  802b80:	10803fcc 	andi	r2,r2,255
  802b84:	1080201c 	xori	r2,r2,128
  802b88:	10bfe004 	addi	r2,r2,-128
  802b8c:	1000071e 	bne	r2,zero,802bac <tick+0x1dc0>
  802b90:	d0a7a743 	ldbu	r2,-24931(gp)
  802b94:	10803fcc 	andi	r2,r2,255
  802b98:	1080201c 	xori	r2,r2,128
  802b9c:	10bfe004 	addi	r2,r2,-128
  802ba0:	1000021e 	bne	r2,zero,802bac <tick+0x1dc0>
  802ba4:	00800044 	movi	r2,1
  802ba8:	00000106 	br	802bb0 <tick+0x1dc4>
  802bac:	0005883a 	mov	r2,zero
  802bb0:	d0a79f85 	stb	r2,-24962(gp)
      g89_e9 =(!((g80||g83)));
  802bb4:	d0a77b03 	ldbu	r2,-25108(gp)
  802bb8:	10803fcc 	andi	r2,r2,255
  802bbc:	1080201c 	xori	r2,r2,128
  802bc0:	10bfe004 	addi	r2,r2,-128
  802bc4:	1000071e 	bne	r2,zero,802be4 <tick+0x1df8>
  802bc8:	d0a75d03 	ldbu	r2,-25228(gp)
  802bcc:	10803fcc 	andi	r2,r2,255
  802bd0:	1080201c 	xori	r2,r2,128
  802bd4:	10bfe004 	addi	r2,r2,-128
  802bd8:	1000021e 	bne	r2,zero,802be4 <tick+0x1df8>
  802bdc:	00800044 	movi	r2,1
  802be0:	00000106 	br	802be8 <tick+0x1dfc>
  802be4:	0005883a 	mov	r2,zero
  802be8:	d0a76b45 	stb	r2,-25171(gp)
      g97_e10 =(!((g92||g94)));
  802bec:	d0a76a83 	ldbu	r2,-25174(gp)
  802bf0:	10803fcc 	andi	r2,r2,255
  802bf4:	1080201c 	xori	r2,r2,128
  802bf8:	10bfe004 	addi	r2,r2,-128
  802bfc:	1000071e 	bne	r2,zero,802c1c <tick+0x1e30>
  802c00:	d0a778c3 	ldbu	r2,-25117(gp)
  802c04:	10803fcc 	andi	r2,r2,255
  802c08:	1080201c 	xori	r2,r2,128
  802c0c:	10bfe004 	addi	r2,r2,-128
  802c10:	1000021e 	bne	r2,zero,802c1c <tick+0x1e30>
  802c14:	00800044 	movi	r2,1
  802c18:	00000106 	br	802c20 <tick+0x1e34>
  802c1c:	0005883a 	mov	r2,zero
  802c20:	d0a77f85 	stb	r2,-25090(gp)
      g106_e11 =(!((g100||g103)));
  802c24:	d0a77b83 	ldbu	r2,-25106(gp)
  802c28:	10803fcc 	andi	r2,r2,255
  802c2c:	1080201c 	xori	r2,r2,128
  802c30:	10bfe004 	addi	r2,r2,-128
  802c34:	1000071e 	bne	r2,zero,802c54 <tick+0x1e68>
  802c38:	d0a76203 	ldbu	r2,-25208(gp)
  802c3c:	10803fcc 	andi	r2,r2,255
  802c40:	1080201c 	xori	r2,r2,128
  802c44:	10bfe004 	addi	r2,r2,-128
  802c48:	1000021e 	bne	r2,zero,802c54 <tick+0x1e68>
  802c4c:	00800044 	movi	r2,1
  802c50:	00000106 	br	802c58 <tick+0x1e6c>
  802c54:	0005883a 	mov	r2,zero
  802c58:	d0a79f45 	stb	r2,-24963(gp)
      g113_e12 =(!((g109||g111)));
  802c5c:	d0a7a3c3 	ldbu	r2,-24945(gp)
  802c60:	10803fcc 	andi	r2,r2,255
  802c64:	1080201c 	xori	r2,r2,128
  802c68:	10bfe004 	addi	r2,r2,-128
  802c6c:	1000071e 	bne	r2,zero,802c8c <tick+0x1ea0>
  802c70:	d0a75ec3 	ldbu	r2,-25221(gp)
  802c74:	10803fcc 	andi	r2,r2,255
  802c78:	1080201c 	xori	r2,r2,128
  802c7c:	10bfe004 	addi	r2,r2,-128
  802c80:	1000021e 	bne	r2,zero,802c8c <tick+0x1ea0>
  802c84:	00800044 	movi	r2,1
  802c88:	00000106 	br	802c90 <tick+0x1ea4>
  802c8c:	0005883a 	mov	r2,zero
  802c90:	d0a79c05 	stb	r2,-24976(gp)
      g117_e13 =(!(g116));
  802c94:	d0a79403 	ldbu	r2,-25008(gp)
  802c98:	10803fcc 	andi	r2,r2,255
  802c9c:	1080201c 	xori	r2,r2,128
  802ca0:	10bfe004 	addi	r2,r2,-128
  802ca4:	1005003a 	cmpeq	r2,r2,zero
  802ca8:	d0a7a385 	stb	r2,-24946(gp)
      g121_e14 =(!(g120));
  802cac:	d0a7a1c3 	ldbu	r2,-24953(gp)
  802cb0:	10803fcc 	andi	r2,r2,255
  802cb4:	1080201c 	xori	r2,r2,128
  802cb8:	10bfe004 	addi	r2,r2,-128
  802cbc:	1005003a 	cmpeq	r2,r2,zero
  802cc0:	d0a76985 	stb	r2,-25178(gp)
      g122_fix0 =((g10_e1||g10)&&(g18_e2||g18)&&(g30_e3||g30)&&(g38_e4||g38));
  802cc4:	d0a793c3 	ldbu	r2,-25009(gp)
  802cc8:	10803fcc 	andi	r2,r2,255
  802ccc:	1080201c 	xori	r2,r2,128
  802cd0:	10bfe004 	addi	r2,r2,-128
  802cd4:	1000051e 	bne	r2,zero,802cec <tick+0x1f00>
  802cd8:	d0a7a503 	ldbu	r2,-24940(gp)
  802cdc:	10803fcc 	andi	r2,r2,255
  802ce0:	1080201c 	xori	r2,r2,128
  802ce4:	10bfe004 	addi	r2,r2,-128
  802ce8:	10002026 	beq	r2,zero,802d6c <tick+0x1f80>
  802cec:	d0a78f83 	ldbu	r2,-25026(gp)
  802cf0:	10803fcc 	andi	r2,r2,255
  802cf4:	1080201c 	xori	r2,r2,128
  802cf8:	10bfe004 	addi	r2,r2,-128
  802cfc:	1000051e 	bne	r2,zero,802d14 <tick+0x1f28>
  802d00:	d0a771c3 	ldbu	r2,-25145(gp)
  802d04:	10803fcc 	andi	r2,r2,255
  802d08:	1080201c 	xori	r2,r2,128
  802d0c:	10bfe004 	addi	r2,r2,-128
  802d10:	10001626 	beq	r2,zero,802d6c <tick+0x1f80>
  802d14:	d0a77843 	ldbu	r2,-25119(gp)
  802d18:	10803fcc 	andi	r2,r2,255
  802d1c:	1080201c 	xori	r2,r2,128
  802d20:	10bfe004 	addi	r2,r2,-128
  802d24:	1000051e 	bne	r2,zero,802d3c <tick+0x1f50>
  802d28:	d0a79743 	ldbu	r2,-24995(gp)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	1080201c 	xori	r2,r2,128
  802d34:	10bfe004 	addi	r2,r2,-128
  802d38:	10000c26 	beq	r2,zero,802d6c <tick+0x1f80>
  802d3c:	d0a77543 	ldbu	r2,-25131(gp)
  802d40:	10803fcc 	andi	r2,r2,255
  802d44:	1080201c 	xori	r2,r2,128
  802d48:	10bfe004 	addi	r2,r2,-128
  802d4c:	1000051e 	bne	r2,zero,802d64 <tick+0x1f78>
  802d50:	d0a77443 	ldbu	r2,-25135(gp)
  802d54:	10803fcc 	andi	r2,r2,255
  802d58:	1080201c 	xori	r2,r2,128
  802d5c:	10bfe004 	addi	r2,r2,-128
  802d60:	10000226 	beq	r2,zero,802d6c <tick+0x1f80>
  802d64:	00800044 	movi	r2,1
  802d68:	00000106 	br	802d70 <tick+0x1f84>
  802d6c:	0005883a 	mov	r2,zero
  802d70:	d0a75fc5 	stb	r2,-25217(gp)
      g122_fix1 =(g122_fix0&&(g50_e5||g50)&&(g60_e6||g60)&&(g69_e7||g69));
  802d74:	d0a75fc3 	ldbu	r2,-25217(gp)
  802d78:	10803fcc 	andi	r2,r2,255
  802d7c:	1080201c 	xori	r2,r2,128
  802d80:	10bfe004 	addi	r2,r2,-128
  802d84:	10002026 	beq	r2,zero,802e08 <tick+0x201c>
  802d88:	d0a78503 	ldbu	r2,-25068(gp)
  802d8c:	10803fcc 	andi	r2,r2,255
  802d90:	1080201c 	xori	r2,r2,128
  802d94:	10bfe004 	addi	r2,r2,-128
  802d98:	1000051e 	bne	r2,zero,802db0 <tick+0x1fc4>
  802d9c:	d0a78dc3 	ldbu	r2,-25033(gp)
  802da0:	10803fcc 	andi	r2,r2,255
  802da4:	1080201c 	xori	r2,r2,128
  802da8:	10bfe004 	addi	r2,r2,-128
  802dac:	10001626 	beq	r2,zero,802e08 <tick+0x201c>
  802db0:	d0a78903 	ldbu	r2,-25052(gp)
  802db4:	10803fcc 	andi	r2,r2,255
  802db8:	1080201c 	xori	r2,r2,128
  802dbc:	10bfe004 	addi	r2,r2,-128
  802dc0:	1000051e 	bne	r2,zero,802dd8 <tick+0x1fec>
  802dc4:	d0a788c3 	ldbu	r2,-25053(gp)
  802dc8:	10803fcc 	andi	r2,r2,255
  802dcc:	1080201c 	xori	r2,r2,128
  802dd0:	10bfe004 	addi	r2,r2,-128
  802dd4:	10000c26 	beq	r2,zero,802e08 <tick+0x201c>
  802dd8:	d0a79b03 	ldbu	r2,-24980(gp)
  802ddc:	10803fcc 	andi	r2,r2,255
  802de0:	1080201c 	xori	r2,r2,128
  802de4:	10bfe004 	addi	r2,r2,-128
  802de8:	1000051e 	bne	r2,zero,802e00 <tick+0x2014>
  802dec:	d0a7a5c3 	ldbu	r2,-24937(gp)
  802df0:	10803fcc 	andi	r2,r2,255
  802df4:	1080201c 	xori	r2,r2,128
  802df8:	10bfe004 	addi	r2,r2,-128
  802dfc:	10000226 	beq	r2,zero,802e08 <tick+0x201c>
  802e00:	00800044 	movi	r2,1
  802e04:	00000106 	br	802e0c <tick+0x2020>
  802e08:	0005883a 	mov	r2,zero
  802e0c:	d0a79085 	stb	r2,-25022(gp)
      g122_fix2 =(g122_fix1&&(g77_e8||g77)&&(g89_e9||g89)&&(g97_e10||g97));
  802e10:	d0a79083 	ldbu	r2,-25022(gp)
  802e14:	10803fcc 	andi	r2,r2,255
  802e18:	1080201c 	xori	r2,r2,128
  802e1c:	10bfe004 	addi	r2,r2,-128
  802e20:	10002026 	beq	r2,zero,802ea4 <tick+0x20b8>
  802e24:	d0a79f83 	ldbu	r2,-24962(gp)
  802e28:	10803fcc 	andi	r2,r2,255
  802e2c:	1080201c 	xori	r2,r2,128
  802e30:	10bfe004 	addi	r2,r2,-128
  802e34:	1000051e 	bne	r2,zero,802e4c <tick+0x2060>
  802e38:	d0a79c83 	ldbu	r2,-24974(gp)
  802e3c:	10803fcc 	andi	r2,r2,255
  802e40:	1080201c 	xori	r2,r2,128
  802e44:	10bfe004 	addi	r2,r2,-128
  802e48:	10001626 	beq	r2,zero,802ea4 <tick+0x20b8>
  802e4c:	d0a76b43 	ldbu	r2,-25171(gp)
  802e50:	10803fcc 	andi	r2,r2,255
  802e54:	1080201c 	xori	r2,r2,128
  802e58:	10bfe004 	addi	r2,r2,-128
  802e5c:	1000051e 	bne	r2,zero,802e74 <tick+0x2088>
  802e60:	d0a78c83 	ldbu	r2,-25038(gp)
  802e64:	10803fcc 	andi	r2,r2,255
  802e68:	1080201c 	xori	r2,r2,128
  802e6c:	10bfe004 	addi	r2,r2,-128
  802e70:	10000c26 	beq	r2,zero,802ea4 <tick+0x20b8>
  802e74:	d0a77f83 	ldbu	r2,-25090(gp)
  802e78:	10803fcc 	andi	r2,r2,255
  802e7c:	1080201c 	xori	r2,r2,128
  802e80:	10bfe004 	addi	r2,r2,-128
  802e84:	1000051e 	bne	r2,zero,802e9c <tick+0x20b0>
  802e88:	d0a76d03 	ldbu	r2,-25164(gp)
  802e8c:	10803fcc 	andi	r2,r2,255
  802e90:	1080201c 	xori	r2,r2,128
  802e94:	10bfe004 	addi	r2,r2,-128
  802e98:	10000226 	beq	r2,zero,802ea4 <tick+0x20b8>
  802e9c:	00800044 	movi	r2,1
  802ea0:	00000106 	br	802ea8 <tick+0x20bc>
  802ea4:	0005883a 	mov	r2,zero
  802ea8:	d0a78005 	stb	r2,-25088(gp)
      g122_fix3 =(g10||g18||g30||g38);
  802eac:	d0a7a503 	ldbu	r2,-24940(gp)
  802eb0:	10803fcc 	andi	r2,r2,255
  802eb4:	1080201c 	xori	r2,r2,128
  802eb8:	10bfe004 	addi	r2,r2,-128
  802ebc:	10000f1e 	bne	r2,zero,802efc <tick+0x2110>
  802ec0:	d0a771c3 	ldbu	r2,-25145(gp)
  802ec4:	10803fcc 	andi	r2,r2,255
  802ec8:	1080201c 	xori	r2,r2,128
  802ecc:	10bfe004 	addi	r2,r2,-128
  802ed0:	10000a1e 	bne	r2,zero,802efc <tick+0x2110>
  802ed4:	d0a79743 	ldbu	r2,-24995(gp)
  802ed8:	10803fcc 	andi	r2,r2,255
  802edc:	1080201c 	xori	r2,r2,128
  802ee0:	10bfe004 	addi	r2,r2,-128
  802ee4:	1000051e 	bne	r2,zero,802efc <tick+0x2110>
  802ee8:	d0a77443 	ldbu	r2,-25135(gp)
  802eec:	10803fcc 	andi	r2,r2,255
  802ef0:	1080201c 	xori	r2,r2,128
  802ef4:	10bfe004 	addi	r2,r2,-128
  802ef8:	10000226 	beq	r2,zero,802f04 <tick+0x2118>
  802efc:	00800044 	movi	r2,1
  802f00:	00000106 	br	802f08 <tick+0x211c>
  802f04:	0005883a 	mov	r2,zero
  802f08:	d0a787c5 	stb	r2,-25057(gp)
      g122_fix4 =(g122_fix3||g50||g60||g69);
  802f0c:	d0a787c3 	ldbu	r2,-25057(gp)
  802f10:	10803fcc 	andi	r2,r2,255
  802f14:	1080201c 	xori	r2,r2,128
  802f18:	10bfe004 	addi	r2,r2,-128
  802f1c:	10000f1e 	bne	r2,zero,802f5c <tick+0x2170>
  802f20:	d0a78dc3 	ldbu	r2,-25033(gp)
  802f24:	10803fcc 	andi	r2,r2,255
  802f28:	1080201c 	xori	r2,r2,128
  802f2c:	10bfe004 	addi	r2,r2,-128
  802f30:	10000a1e 	bne	r2,zero,802f5c <tick+0x2170>
  802f34:	d0a788c3 	ldbu	r2,-25053(gp)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	1080201c 	xori	r2,r2,128
  802f40:	10bfe004 	addi	r2,r2,-128
  802f44:	1000051e 	bne	r2,zero,802f5c <tick+0x2170>
  802f48:	d0a7a5c3 	ldbu	r2,-24937(gp)
  802f4c:	10803fcc 	andi	r2,r2,255
  802f50:	1080201c 	xori	r2,r2,128
  802f54:	10bfe004 	addi	r2,r2,-128
  802f58:	10000226 	beq	r2,zero,802f64 <tick+0x2178>
  802f5c:	00800044 	movi	r2,1
  802f60:	00000106 	br	802f68 <tick+0x217c>
  802f64:	0005883a 	mov	r2,zero
  802f68:	d0a79545 	stb	r2,-25003(gp)
      g122_e1_fix_fix =(g94||g111||g7||g24||g44||g66||g83||g103||g116);
  802f6c:	d0a778c3 	ldbu	r2,-25117(gp)
  802f70:	10803fcc 	andi	r2,r2,255
  802f74:	1080201c 	xori	r2,r2,128
  802f78:	10bfe004 	addi	r2,r2,-128
  802f7c:	1000281e 	bne	r2,zero,803020 <tick+0x2234>
  802f80:	d0a75ec3 	ldbu	r2,-25221(gp)
  802f84:	10803fcc 	andi	r2,r2,255
  802f88:	1080201c 	xori	r2,r2,128
  802f8c:	10bfe004 	addi	r2,r2,-128
  802f90:	1000231e 	bne	r2,zero,803020 <tick+0x2234>
  802f94:	d0a77a43 	ldbu	r2,-25111(gp)
  802f98:	10803fcc 	andi	r2,r2,255
  802f9c:	1080201c 	xori	r2,r2,128
  802fa0:	10bfe004 	addi	r2,r2,-128
  802fa4:	10001e1e 	bne	r2,zero,803020 <tick+0x2234>
  802fa8:	d0a7a303 	ldbu	r2,-24948(gp)
  802fac:	10803fcc 	andi	r2,r2,255
  802fb0:	1080201c 	xori	r2,r2,128
  802fb4:	10bfe004 	addi	r2,r2,-128
  802fb8:	1000191e 	bne	r2,zero,803020 <tick+0x2234>
  802fbc:	d0a76883 	ldbu	r2,-25182(gp)
  802fc0:	10803fcc 	andi	r2,r2,255
  802fc4:	1080201c 	xori	r2,r2,128
  802fc8:	10bfe004 	addi	r2,r2,-128
  802fcc:	1000141e 	bne	r2,zero,803020 <tick+0x2234>
  802fd0:	d0a77c83 	ldbu	r2,-25102(gp)
  802fd4:	10803fcc 	andi	r2,r2,255
  802fd8:	1080201c 	xori	r2,r2,128
  802fdc:	10bfe004 	addi	r2,r2,-128
  802fe0:	10000f1e 	bne	r2,zero,803020 <tick+0x2234>
  802fe4:	d0a75d03 	ldbu	r2,-25228(gp)
  802fe8:	10803fcc 	andi	r2,r2,255
  802fec:	1080201c 	xori	r2,r2,128
  802ff0:	10bfe004 	addi	r2,r2,-128
  802ff4:	10000a1e 	bne	r2,zero,803020 <tick+0x2234>
  802ff8:	d0a76203 	ldbu	r2,-25208(gp)
  802ffc:	10803fcc 	andi	r2,r2,255
  803000:	1080201c 	xori	r2,r2,128
  803004:	10bfe004 	addi	r2,r2,-128
  803008:	1000051e 	bne	r2,zero,803020 <tick+0x2234>
  80300c:	d0a79403 	ldbu	r2,-25008(gp)
  803010:	10803fcc 	andi	r2,r2,255
  803014:	1080201c 	xori	r2,r2,128
  803018:	10bfe004 	addi	r2,r2,-128
  80301c:	10000226 	beq	r2,zero,803028 <tick+0x223c>
  803020:	00800044 	movi	r2,1
  803024:	00000106 	br	80302c <tick+0x2240>
  803028:	0005883a 	mov	r2,zero
  80302c:	d0a76685 	stb	r2,-25190(gp)
      g122_e1_fix =(g80||g92||g100||g109||g15||g35||g55||g74||g57||g122_e1_fix_fix);
  803030:	d0a77b03 	ldbu	r2,-25108(gp)
  803034:	10803fcc 	andi	r2,r2,255
  803038:	1080201c 	xori	r2,r2,128
  80303c:	10bfe004 	addi	r2,r2,-128
  803040:	10002d1e 	bne	r2,zero,8030f8 <tick+0x230c>
  803044:	d0a76a83 	ldbu	r2,-25174(gp)
  803048:	10803fcc 	andi	r2,r2,255
  80304c:	1080201c 	xori	r2,r2,128
  803050:	10bfe004 	addi	r2,r2,-128
  803054:	1000281e 	bne	r2,zero,8030f8 <tick+0x230c>
  803058:	d0a77b83 	ldbu	r2,-25106(gp)
  80305c:	10803fcc 	andi	r2,r2,255
  803060:	1080201c 	xori	r2,r2,128
  803064:	10bfe004 	addi	r2,r2,-128
  803068:	1000231e 	bne	r2,zero,8030f8 <tick+0x230c>
  80306c:	d0a7a3c3 	ldbu	r2,-24945(gp)
  803070:	10803fcc 	andi	r2,r2,255
  803074:	1080201c 	xori	r2,r2,128
  803078:	10bfe004 	addi	r2,r2,-128
  80307c:	10001e1e 	bne	r2,zero,8030f8 <tick+0x230c>
  803080:	d0a785c3 	ldbu	r2,-25065(gp)
  803084:	10803fcc 	andi	r2,r2,255
  803088:	1080201c 	xori	r2,r2,128
  80308c:	10bfe004 	addi	r2,r2,-128
  803090:	1000191e 	bne	r2,zero,8030f8 <tick+0x230c>
  803094:	d0a78583 	ldbu	r2,-25066(gp)
  803098:	10803fcc 	andi	r2,r2,255
  80309c:	1080201c 	xori	r2,r2,128
  8030a0:	10bfe004 	addi	r2,r2,-128
  8030a4:	1000141e 	bne	r2,zero,8030f8 <tick+0x230c>
  8030a8:	d0a76003 	ldbu	r2,-25216(gp)
  8030ac:	10803fcc 	andi	r2,r2,255
  8030b0:	1080201c 	xori	r2,r2,128
  8030b4:	10bfe004 	addi	r2,r2,-128
  8030b8:	10000f1e 	bne	r2,zero,8030f8 <tick+0x230c>
  8030bc:	d0a7a743 	ldbu	r2,-24931(gp)
  8030c0:	10803fcc 	andi	r2,r2,255
  8030c4:	1080201c 	xori	r2,r2,128
  8030c8:	10bfe004 	addi	r2,r2,-128
  8030cc:	10000a1e 	bne	r2,zero,8030f8 <tick+0x230c>
  8030d0:	d0a79243 	ldbu	r2,-25015(gp)
  8030d4:	10803fcc 	andi	r2,r2,255
  8030d8:	1080201c 	xori	r2,r2,128
  8030dc:	10bfe004 	addi	r2,r2,-128
  8030e0:	1000051e 	bne	r2,zero,8030f8 <tick+0x230c>
  8030e4:	d0a76683 	ldbu	r2,-25190(gp)
  8030e8:	10803fcc 	andi	r2,r2,255
  8030ec:	1080201c 	xori	r2,r2,128
  8030f0:	10bfe004 	addi	r2,r2,-128
  8030f4:	10000226 	beq	r2,zero,803100 <tick+0x2314>
  8030f8:	00800044 	movi	r2,1
  8030fc:	00000106 	br	803104 <tick+0x2318>
  803100:	0005883a 	mov	r2,zero
  803104:	d0a79285 	stb	r2,-25014(gp)
      g122_e1 =(!((g4||g13||g21||g33||g41||g53||g63||g72||g120||g122_e1_fix)));
  803108:	d0a75e03 	ldbu	r2,-25224(gp)
  80310c:	10803fcc 	andi	r2,r2,255
  803110:	1080201c 	xori	r2,r2,128
  803114:	10bfe004 	addi	r2,r2,-128
  803118:	10002f1e 	bne	r2,zero,8031d8 <tick+0x23ec>
  80311c:	d0a790c3 	ldbu	r2,-25021(gp)
  803120:	10803fcc 	andi	r2,r2,255
  803124:	1080201c 	xori	r2,r2,128
  803128:	10bfe004 	addi	r2,r2,-128
  80312c:	10002a1e 	bne	r2,zero,8031d8 <tick+0x23ec>
  803130:	d0a776c3 	ldbu	r2,-25125(gp)
  803134:	10803fcc 	andi	r2,r2,255
  803138:	1080201c 	xori	r2,r2,128
  80313c:	10bfe004 	addi	r2,r2,-128
  803140:	1000251e 	bne	r2,zero,8031d8 <tick+0x23ec>
  803144:	d0a78283 	ldbu	r2,-25078(gp)
  803148:	10803fcc 	andi	r2,r2,255
  80314c:	1080201c 	xori	r2,r2,128
  803150:	10bfe004 	addi	r2,r2,-128
  803154:	1000201e 	bne	r2,zero,8031d8 <tick+0x23ec>
  803158:	d0a77043 	ldbu	r2,-25151(gp)
  80315c:	10803fcc 	andi	r2,r2,255
  803160:	1080201c 	xori	r2,r2,128
  803164:	10bfe004 	addi	r2,r2,-128
  803168:	10001b1e 	bne	r2,zero,8031d8 <tick+0x23ec>
  80316c:	d0a791c3 	ldbu	r2,-25017(gp)
  803170:	10803fcc 	andi	r2,r2,255
  803174:	1080201c 	xori	r2,r2,128
  803178:	10bfe004 	addi	r2,r2,-128
  80317c:	1000161e 	bne	r2,zero,8031d8 <tick+0x23ec>
  803180:	d0a78803 	ldbu	r2,-25056(gp)
  803184:	10803fcc 	andi	r2,r2,255
  803188:	1080201c 	xori	r2,r2,128
  80318c:	10bfe004 	addi	r2,r2,-128
  803190:	1000111e 	bne	r2,zero,8031d8 <tick+0x23ec>
  803194:	d0a794c3 	ldbu	r2,-25005(gp)
  803198:	10803fcc 	andi	r2,r2,255
  80319c:	1080201c 	xori	r2,r2,128
  8031a0:	10bfe004 	addi	r2,r2,-128
  8031a4:	10000c1e 	bne	r2,zero,8031d8 <tick+0x23ec>
  8031a8:	d0a7a1c3 	ldbu	r2,-24953(gp)
  8031ac:	10803fcc 	andi	r2,r2,255
  8031b0:	1080201c 	xori	r2,r2,128
  8031b4:	10bfe004 	addi	r2,r2,-128
  8031b8:	1000071e 	bne	r2,zero,8031d8 <tick+0x23ec>
  8031bc:	d0a79283 	ldbu	r2,-25014(gp)
  8031c0:	10803fcc 	andi	r2,r2,255
  8031c4:	1080201c 	xori	r2,r2,128
  8031c8:	10bfe004 	addi	r2,r2,-128
  8031cc:	1000021e 	bne	r2,zero,8031d8 <tick+0x23ec>
  8031d0:	00800044 	movi	r2,1
  8031d4:	00000106 	br	8031dc <tick+0x23f0>
  8031d8:	0005883a 	mov	r2,zero
  8031dc:	d0a77345 	stb	r2,-25139(gp)
      g126_e2 =(!(g125));
  8031e0:	d0a79c43 	ldbu	r2,-24975(gp)
  8031e4:	10803fcc 	andi	r2,r2,255
  8031e8:	1080201c 	xori	r2,r2,128
  8031ec:	10bfe004 	addi	r2,r2,-128
  8031f0:	1005003a 	cmpeq	r2,r2,zero
  8031f4:	d0a76bc5 	stb	r2,-25169(gp)
      g130_e3 =(!(g129));
  8031f8:	d0a78143 	ldbu	r2,-25083(gp)
  8031fc:	10803fcc 	andi	r2,r2,255
  803200:	1080201c 	xori	r2,r2,128
  803204:	10bfe004 	addi	r2,r2,-128
  803208:	1005003a 	cmpeq	r2,r2,zero
  80320c:	d0a768c5 	stb	r2,-25181(gp)
   }
   PRE_g3 = g3;
  803210:	d0a761c3 	ldbu	r2,-25209(gp)
  803214:	d0a76605 	stb	r2,-25192(gp)
   PRE_g6 = g6;
  803218:	d0a79443 	ldbu	r2,-25007(gp)
  80321c:	d0a78205 	stb	r2,-25080(gp)
   PRE_g12 = g12;
  803220:	d0a76cc3 	ldbu	r2,-25165(gp)
  803224:	d0a77745 	stb	r2,-25123(gp)
   PRE_g14 = g14;
  803228:	d0a77e83 	ldbu	r2,-25094(gp)
  80322c:	d0a78bc5 	stb	r2,-25041(gp)
   PRE_g20 = g20;
  803230:	d0a78843 	ldbu	r2,-25055(gp)
  803234:	d0a76a05 	stb	r2,-25176(gp)
   PRE_g23 = g23;
  803238:	d0a77cc3 	ldbu	r2,-25101(gp)
  80323c:	d0a75f85 	stb	r2,-25218(gp)
   PRE_g32 = g32;
  803240:	d0a79cc3 	ldbu	r2,-24973(gp)
  803244:	d0a76805 	stb	r2,-25184(gp)
   PRE_g34 = g34;
  803248:	d0a77803 	ldbu	r2,-25120(gp)
  80324c:	d0a76ec5 	stb	r2,-25157(gp)
   PRE_g40 = g40;
  803250:	d0a75d43 	ldbu	r2,-25227(gp)
  803254:	d0a77105 	stb	r2,-25148(gp)
   PRE_g43 = g43;
  803258:	d0a78a83 	ldbu	r2,-25046(gp)
  80325c:	d0a78ac5 	stb	r2,-25045(gp)
   PRE_g52 = g52;
  803260:	d0a76d43 	ldbu	r2,-25163(gp)
  803264:	d0a78105 	stb	r2,-25084(gp)
   PRE_g54 = g54;
  803268:	d0a77c43 	ldbu	r2,-25103(gp)
  80326c:	d0a78745 	stb	r2,-25059(gp)
   PRE_g56 = g56;
  803270:	d0a780c3 	ldbu	r2,-25085(gp)
  803274:	d0a767c5 	stb	r2,-25185(gp)
   PRE_g62 = g62;
  803278:	d0a76fc3 	ldbu	r2,-25153(gp)
  80327c:	d0a78c05 	stb	r2,-25040(gp)
   PRE_g65 = g65;
  803280:	d0a79a83 	ldbu	r2,-24982(gp)
  803284:	d0a769c5 	stb	r2,-25177(gp)
   PRE_g71 = g71;
  803288:	d0a76b83 	ldbu	r2,-25170(gp)
  80328c:	d0a77e45 	stb	r2,-25095(gp)
   PRE_g73 = g73;
  803290:	d0a79b83 	ldbu	r2,-24978(gp)
  803294:	d0a79fc5 	stb	r2,-24961(gp)
   PRE_g79 = g79;
  803298:	d0a777c3 	ldbu	r2,-25121(gp)
  80329c:	d0a77ec5 	stb	r2,-25093(gp)
   PRE_g82 = g82;
  8032a0:	d0a76c43 	ldbu	r2,-25167(gp)
  8032a4:	d0a79e05 	stb	r2,-24968(gp)
   PRE_g91 = g91;
  8032a8:	d0a75d83 	ldbu	r2,-25226(gp)
  8032ac:	d0a78785 	stb	r2,-25058(gp)
   PRE_g93 = g93;
  8032b0:	d0a78943 	ldbu	r2,-25051(gp)
  8032b4:	d0a79a05 	stb	r2,-24984(gp)
   PRE_g99 = g99;
  8032b8:	d0a77c03 	ldbu	r2,-25104(gp)
  8032bc:	d0a79685 	stb	r2,-24998(gp)
   PRE_g102 = g102;
  8032c0:	d0a76643 	ldbu	r2,-25191(gp)
  8032c4:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g108 = g108;
  8032c8:	d0a75e43 	ldbu	r2,-25223(gp)
  8032cc:	d0a7a205 	stb	r2,-24952(gp)
   PRE_g110 = g110;
  8032d0:	d0a77943 	ldbu	r2,-25115(gp)
  8032d4:	d0a79585 	stb	r2,-25002(gp)
   PRE_g115 = g115;
  8032d8:	d0a766c3 	ldbu	r2,-25189(gp)
  8032dc:	d0a79145 	stb	r2,-25019(gp)
   PRE_g119 = g119;
  8032e0:	d0a78983 	ldbu	r2,-25050(gp)
  8032e4:	d0a78305 	stb	r2,-25076(gp)
   PRE_g124 = g124;
  8032e8:	d0a795c3 	ldbu	r2,-25001(gp)
  8032ec:	d0a77205 	stb	r2,-25144(gp)
   PRE_g128 = g128;
  8032f0:	d0a77b43 	ldbu	r2,-25107(gp)
  8032f4:	d0a76185 	stb	r2,-25210(gp)
   _PRE_GO = _GO;
  8032f8:	d0a78643 	ldbu	r2,-25063(gp)
  8032fc:	10803fcc 	andi	r2,r2,255
  803300:	1080201c 	xori	r2,r2,128
  803304:	10bfe004 	addi	r2,r2,-128
  803308:	d0a76515 	stw	r2,-25196(gp)
   return;
  80330c:	0001883a 	nop
}
  803310:	e037883a 	mov	sp,fp
  803314:	df000017 	ldw	fp,0(sp)
  803318:	dec00104 	addi	sp,sp,4
  80331c:	f800283a 	ret

00803320 <_fopen_r>:
  803320:	defffa04 	addi	sp,sp,-24
  803324:	3005883a 	mov	r2,r6
  803328:	dcc00415 	stw	r19,16(sp)
  80332c:	d80d883a 	mov	r6,sp
  803330:	2827883a 	mov	r19,r5
  803334:	100b883a 	mov	r5,r2
  803338:	dc800315 	stw	r18,12(sp)
  80333c:	dfc00515 	stw	ra,20(sp)
  803340:	dc400215 	stw	r17,8(sp)
  803344:	dc000115 	stw	r16,4(sp)
  803348:	2025883a 	mov	r18,r4
  80334c:	0808d580 	call	808d58 <__sflags>
  803350:	10002726 	beq	r2,zero,8033f0 <_fopen_r+0xd0>
  803354:	9009883a 	mov	r4,r18
  803358:	1023883a 	mov	r17,r2
  80335c:	0808bd80 	call	808bd8 <__sfp>
  803360:	1021883a 	mov	r16,r2
  803364:	10002226 	beq	r2,zero,8033f0 <_fopen_r+0xd0>
  803368:	d9800017 	ldw	r6,0(sp)
  80336c:	01c06d84 	movi	r7,438
  803370:	980b883a 	mov	r5,r19
  803374:	9009883a 	mov	r4,r18
  803378:	08043f80 	call	8043f8 <_open_r>
  80337c:	10001916 	blt	r2,zero,8033e4 <_fopen_r+0xc4>
  803380:	8080038d 	sth	r2,14(r16)
  803384:	00802034 	movhi	r2,128
  803388:	1091f704 	addi	r2,r2,18396
  80338c:	80800815 	stw	r2,32(r16)
  803390:	00802034 	movhi	r2,128
  803394:	10920e04 	addi	r2,r2,18488
  803398:	80800915 	stw	r2,36(r16)
  80339c:	00802034 	movhi	r2,128
  8033a0:	10922d04 	addi	r2,r2,18612
  8033a4:	80800a15 	stw	r2,40(r16)
  8033a8:	00802034 	movhi	r2,128
  8033ac:	10924404 	addi	r2,r2,18704
  8033b0:	8440030d 	sth	r17,12(r16)
  8033b4:	84000715 	stw	r16,28(r16)
  8033b8:	80800b15 	stw	r2,44(r16)
  8033bc:	8c40400c 	andi	r17,r17,256
  8033c0:	88000d1e 	bne	r17,zero,8033f8 <_fopen_r+0xd8>
  8033c4:	8005883a 	mov	r2,r16
  8033c8:	dfc00517 	ldw	ra,20(sp)
  8033cc:	dcc00417 	ldw	r19,16(sp)
  8033d0:	dc800317 	ldw	r18,12(sp)
  8033d4:	dc400217 	ldw	r17,8(sp)
  8033d8:	dc000117 	ldw	r16,4(sp)
  8033dc:	dec00604 	addi	sp,sp,24
  8033e0:	f800283a 	ret
  8033e4:	0808d180 	call	808d18 <__sfp_lock_acquire>
  8033e8:	8000030d 	sth	zero,12(r16)
  8033ec:	0808d1c0 	call	808d1c <__sfp_lock_release>
  8033f0:	0005883a 	mov	r2,zero
  8033f4:	003ff406 	br	8033c8 <__alt_mem_onchip_mem+0xff7833c8>
  8033f8:	01c00084 	movi	r7,2
  8033fc:	000d883a 	mov	r6,zero
  803400:	800b883a 	mov	r5,r16
  803404:	9009883a 	mov	r4,r18
  803408:	080342c0 	call	80342c <_fseek_r>
  80340c:	8005883a 	mov	r2,r16
  803410:	003fed06 	br	8033c8 <__alt_mem_onchip_mem+0xff7833c8>

00803414 <fopen>:
  803414:	00802074 	movhi	r2,129
  803418:	109a6e04 	addi	r2,r2,27064
  80341c:	280d883a 	mov	r6,r5
  803420:	200b883a 	mov	r5,r4
  803424:	11000017 	ldw	r4,0(r2)
  803428:	08033201 	jmpi	803320 <_fopen_r>

0080342c <_fseek_r>:
  80342c:	080344c1 	jmpi	80344c <_fseeko_r>

00803430 <fseek>:
  803430:	00802074 	movhi	r2,129
  803434:	109a6e04 	addi	r2,r2,27064
  803438:	300f883a 	mov	r7,r6
  80343c:	280d883a 	mov	r6,r5
  803440:	200b883a 	mov	r5,r4
  803444:	11000017 	ldw	r4,0(r2)
  803448:	080344c1 	jmpi	80344c <_fseeko_r>

0080344c <_fseeko_r>:
  80344c:	deffe804 	addi	sp,sp,-96
  803450:	dd401415 	stw	r21,80(sp)
  803454:	dc801115 	stw	r18,68(sp)
  803458:	dc401015 	stw	r17,64(sp)
  80345c:	dc000f15 	stw	r16,60(sp)
  803460:	dfc01715 	stw	ra,92(sp)
  803464:	ddc01615 	stw	r23,88(sp)
  803468:	dd801515 	stw	r22,84(sp)
  80346c:	dd001315 	stw	r20,76(sp)
  803470:	dcc01215 	stw	r19,72(sp)
  803474:	2023883a 	mov	r17,r4
  803478:	2821883a 	mov	r16,r5
  80347c:	302b883a 	mov	r21,r6
  803480:	3825883a 	mov	r18,r7
  803484:	20000226 	beq	r4,zero,803490 <_fseeko_r+0x44>
  803488:	20800e17 	ldw	r2,56(r4)
  80348c:	10005a26 	beq	r2,zero,8035f8 <_fseeko_r+0x1ac>
  803490:	8080030b 	ldhu	r2,12(r16)
  803494:	00c04204 	movi	r3,264
  803498:	1080420c 	andi	r2,r2,264
  80349c:	10c05b26 	beq	r2,r3,80360c <_fseeko_r+0x1c0>
  8034a0:	85000a17 	ldw	r20,40(r16)
  8034a4:	a000f626 	beq	r20,zero,803880 <_fseeko_r+0x434>
  8034a8:	00800044 	movi	r2,1
  8034ac:	90803e26 	beq	r18,r2,8035a8 <_fseeko_r+0x15c>
  8034b0:	00800084 	movi	r2,2
  8034b4:	90801026 	beq	r18,r2,8034f8 <_fseeko_r+0xac>
  8034b8:	90000f26 	beq	r18,zero,8034f8 <_fseeko_r+0xac>
  8034bc:	00800584 	movi	r2,22
  8034c0:	88800015 	stw	r2,0(r17)
  8034c4:	04ffffc4 	movi	r19,-1
  8034c8:	9805883a 	mov	r2,r19
  8034cc:	dfc01717 	ldw	ra,92(sp)
  8034d0:	ddc01617 	ldw	r23,88(sp)
  8034d4:	dd801517 	ldw	r22,84(sp)
  8034d8:	dd401417 	ldw	r21,80(sp)
  8034dc:	dd001317 	ldw	r20,76(sp)
  8034e0:	dcc01217 	ldw	r19,72(sp)
  8034e4:	dc801117 	ldw	r18,68(sp)
  8034e8:	dc401017 	ldw	r17,64(sp)
  8034ec:	dc000f17 	ldw	r16,60(sp)
  8034f0:	dec01804 	addi	sp,sp,96
  8034f4:	f800283a 	ret
  8034f8:	80800417 	ldw	r2,16(r16)
  8034fc:	002f883a 	mov	r23,zero
  803500:	0027883a 	mov	r19,zero
  803504:	1000cb26 	beq	r2,zero,803834 <_fseeko_r+0x3e8>
  803508:	8080030b 	ldhu	r2,12(r16)
  80350c:	10c2068c 	andi	r3,r2,2074
  803510:	1800071e 	bne	r3,zero,803530 <_fseeko_r+0xe4>
  803514:	10c1000c 	andi	r3,r2,1024
  803518:	1800451e 	bne	r3,zero,803630 <_fseeko_r+0x1e4>
  80351c:	00c02034 	movhi	r3,128
  803520:	18d22d04 	addi	r3,r3,18612
  803524:	a0c0b726 	beq	r20,r3,803804 <_fseeko_r+0x3b8>
  803528:	10820014 	ori	r2,r2,2048
  80352c:	8080030d 	sth	r2,12(r16)
  803530:	800b883a 	mov	r5,r16
  803534:	8809883a 	mov	r4,r17
  803538:	080892c0 	call	80892c <_fflush_r>
  80353c:	1027883a 	mov	r19,r2
  803540:	103fe01e 	bne	r2,zero,8034c4 <__alt_mem_onchip_mem+0xff7834c4>
  803544:	81400717 	ldw	r5,28(r16)
  803548:	900f883a 	mov	r7,r18
  80354c:	a80d883a 	mov	r6,r21
  803550:	8809883a 	mov	r4,r17
  803554:	a03ee83a 	callr	r20
  803558:	00ffffc4 	movi	r3,-1
  80355c:	10ffd926 	beq	r2,r3,8034c4 <__alt_mem_onchip_mem+0xff7834c4>
  803560:	81400c17 	ldw	r5,48(r16)
  803564:	28000526 	beq	r5,zero,80357c <_fseeko_r+0x130>
  803568:	80801004 	addi	r2,r16,64
  80356c:	28800226 	beq	r5,r2,803578 <_fseeko_r+0x12c>
  803570:	8809883a 	mov	r4,r17
  803574:	0808f280 	call	808f28 <_free_r>
  803578:	80000c15 	stw	zero,48(r16)
  80357c:	8080030b 	ldhu	r2,12(r16)
  803580:	80c00417 	ldw	r3,16(r16)
  803584:	80000115 	stw	zero,4(r16)
  803588:	10bdf7cc 	andi	r2,r2,63455
  80358c:	80c00015 	stw	r3,0(r16)
  803590:	8080030d 	sth	r2,12(r16)
  803594:	01800204 	movi	r6,8
  803598:	000b883a 	mov	r5,zero
  80359c:	81001704 	addi	r4,r16,92
  8035a0:	08042d00 	call	8042d0 <memset>
  8035a4:	003fc806 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  8035a8:	800b883a 	mov	r5,r16
  8035ac:	8809883a 	mov	r4,r17
  8035b0:	080892c0 	call	80892c <_fflush_r>
  8035b4:	8080030b 	ldhu	r2,12(r16)
  8035b8:	10c4000c 	andi	r3,r2,4096
  8035bc:	18008726 	beq	r3,zero,8037dc <_fseeko_r+0x390>
  8035c0:	84c01417 	ldw	r19,80(r16)
  8035c4:	10c0010c 	andi	r3,r2,4
  8035c8:	1800431e 	bne	r3,zero,8036d8 <_fseeko_r+0x28c>
  8035cc:	1080020c 	andi	r2,r2,8
  8035d0:	10008026 	beq	r2,zero,8037d4 <_fseeko_r+0x388>
  8035d4:	80c00017 	ldw	r3,0(r16)
  8035d8:	80800417 	ldw	r2,16(r16)
  8035dc:	18000226 	beq	r3,zero,8035e8 <_fseeko_r+0x19c>
  8035e0:	1887c83a 	sub	r3,r3,r2
  8035e4:	98e7883a 	add	r19,r19,r3
  8035e8:	aceb883a 	add	r21,r21,r19
  8035ec:	05c00044 	movi	r23,1
  8035f0:	0025883a 	mov	r18,zero
  8035f4:	003fc306 	br	803504 <__alt_mem_onchip_mem+0xff783504>
  8035f8:	0808d080 	call	808d08 <__sinit>
  8035fc:	8080030b 	ldhu	r2,12(r16)
  803600:	00c04204 	movi	r3,264
  803604:	1080420c 	andi	r2,r2,264
  803608:	10ffa51e 	bne	r2,r3,8034a0 <__alt_mem_onchip_mem+0xff7834a0>
  80360c:	800b883a 	mov	r5,r16
  803610:	8809883a 	mov	r4,r17
  803614:	080892c0 	call	80892c <_fflush_r>
  803618:	003fa106 	br	8034a0 <__alt_mem_onchip_mem+0xff7834a0>
  80361c:	8080030b 	ldhu	r2,12(r16)
  803620:	00c10004 	movi	r3,1024
  803624:	80c01315 	stw	r3,76(r16)
  803628:	10c4b03a 	or	r2,r2,r3
  80362c:	8080030d 	sth	r2,12(r16)
  803630:	9000311e 	bne	r18,zero,8036f8 <_fseeko_r+0x2ac>
  803634:	a82d883a 	mov	r22,r21
  803638:	b800371e 	bne	r23,zero,803718 <_fseeko_r+0x2cc>
  80363c:	8080030b 	ldhu	r2,12(r16)
  803640:	1084000c 	andi	r2,r2,4096
  803644:	10007f26 	beq	r2,zero,803844 <_fseeko_r+0x3f8>
  803648:	80801417 	ldw	r2,80(r16)
  80364c:	81800117 	ldw	r6,4(r16)
  803650:	81400c17 	ldw	r5,48(r16)
  803654:	11a7c83a 	sub	r19,r2,r6
  803658:	28008226 	beq	r5,zero,803864 <_fseeko_r+0x418>
  80365c:	81c00f17 	ldw	r7,60(r16)
  803660:	99e7c83a 	sub	r19,r19,r7
  803664:	81000e17 	ldw	r4,56(r16)
  803668:	80800417 	ldw	r2,16(r16)
  80366c:	99a7883a 	add	r19,r19,r6
  803670:	2087c83a 	sub	r3,r4,r2
  803674:	98e7c83a 	sub	r19,r19,r3
  803678:	38c7883a 	add	r3,r7,r3
  80367c:	b4c02b16 	blt	r22,r19,80372c <_fseeko_r+0x2e0>
  803680:	98c9883a 	add	r4,r19,r3
  803684:	b100292e 	bgeu	r22,r4,80372c <_fseeko_r+0x2e0>
  803688:	b4e7c83a 	sub	r19,r22,r19
  80368c:	14c5883a 	add	r2,r2,r19
  803690:	1ce7c83a 	sub	r19,r3,r19
  803694:	80800015 	stw	r2,0(r16)
  803698:	84c00115 	stw	r19,4(r16)
  80369c:	28000526 	beq	r5,zero,8036b4 <_fseeko_r+0x268>
  8036a0:	80801004 	addi	r2,r16,64
  8036a4:	28800226 	beq	r5,r2,8036b0 <_fseeko_r+0x264>
  8036a8:	8809883a 	mov	r4,r17
  8036ac:	0808f280 	call	808f28 <_free_r>
  8036b0:	80000c15 	stw	zero,48(r16)
  8036b4:	8080030b 	ldhu	r2,12(r16)
  8036b8:	01800204 	movi	r6,8
  8036bc:	000b883a 	mov	r5,zero
  8036c0:	10bff7cc 	andi	r2,r2,65503
  8036c4:	8080030d 	sth	r2,12(r16)
  8036c8:	81001704 	addi	r4,r16,92
  8036cc:	08042d00 	call	8042d0 <memset>
  8036d0:	0027883a 	mov	r19,zero
  8036d4:	003f7c06 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  8036d8:	80c00117 	ldw	r3,4(r16)
  8036dc:	80800c17 	ldw	r2,48(r16)
  8036e0:	98e7c83a 	sub	r19,r19,r3
  8036e4:	10003b26 	beq	r2,zero,8037d4 <_fseeko_r+0x388>
  8036e8:	80c00f17 	ldw	r3,60(r16)
  8036ec:	80800417 	ldw	r2,16(r16)
  8036f0:	98e7c83a 	sub	r19,r19,r3
  8036f4:	003fbc06 	br	8035e8 <__alt_mem_onchip_mem+0xff7835e8>
  8036f8:	8140038f 	ldh	r5,14(r16)
  8036fc:	d80d883a 	mov	r6,sp
  803700:	8809883a 	mov	r4,r17
  803704:	08038ac0 	call	8038ac <_fstat_r>
  803708:	103f891e 	bne	r2,zero,803530 <__alt_mem_onchip_mem+0xff783530>
  80370c:	dd800417 	ldw	r22,16(sp)
  803710:	adad883a 	add	r22,r21,r22
  803714:	b83fc926 	beq	r23,zero,80363c <__alt_mem_onchip_mem+0xff78363c>
  803718:	81400c17 	ldw	r5,48(r16)
  80371c:	81800117 	ldw	r6,4(r16)
  803720:	28005026 	beq	r5,zero,803864 <_fseeko_r+0x418>
  803724:	81c00f17 	ldw	r7,60(r16)
  803728:	003fce06 	br	803664 <__alt_mem_onchip_mem+0xff783664>
  80372c:	84c01317 	ldw	r19,76(r16)
  803730:	81400717 	ldw	r5,28(r16)
  803734:	000f883a 	mov	r7,zero
  803738:	04e7c83a 	sub	r19,zero,r19
  80373c:	9da6703a 	and	r19,r19,r22
  803740:	980d883a 	mov	r6,r19
  803744:	8809883a 	mov	r4,r17
  803748:	a03ee83a 	callr	r20
  80374c:	00ffffc4 	movi	r3,-1
  803750:	10ff7726 	beq	r2,r3,803530 <__alt_mem_onchip_mem+0xff783530>
  803754:	80800417 	ldw	r2,16(r16)
  803758:	81400c17 	ldw	r5,48(r16)
  80375c:	80000115 	stw	zero,4(r16)
  803760:	80800015 	stw	r2,0(r16)
  803764:	28000526 	beq	r5,zero,80377c <_fseeko_r+0x330>
  803768:	80801004 	addi	r2,r16,64
  80376c:	28800226 	beq	r5,r2,803778 <_fseeko_r+0x32c>
  803770:	8809883a 	mov	r4,r17
  803774:	0808f280 	call	808f28 <_free_r>
  803778:	80000c15 	stw	zero,48(r16)
  80377c:	8080030b 	ldhu	r2,12(r16)
  803780:	b4e7c83a 	sub	r19,r22,r19
  803784:	10bff7cc 	andi	r2,r2,65503
  803788:	8080030d 	sth	r2,12(r16)
  80378c:	98000b26 	beq	r19,zero,8037bc <_fseeko_r+0x370>
  803790:	800b883a 	mov	r5,r16
  803794:	8809883a 	mov	r4,r17
  803798:	08045b40 	call	8045b4 <__srefill_r>
  80379c:	103f641e 	bne	r2,zero,803530 <__alt_mem_onchip_mem+0xff783530>
  8037a0:	80800117 	ldw	r2,4(r16)
  8037a4:	14ff6236 	bltu	r2,r19,803530 <__alt_mem_onchip_mem+0xff783530>
  8037a8:	80c00017 	ldw	r3,0(r16)
  8037ac:	14c5c83a 	sub	r2,r2,r19
  8037b0:	80800115 	stw	r2,4(r16)
  8037b4:	1ce7883a 	add	r19,r3,r19
  8037b8:	84c00015 	stw	r19,0(r16)
  8037bc:	01800204 	movi	r6,8
  8037c0:	000b883a 	mov	r5,zero
  8037c4:	81001704 	addi	r4,r16,92
  8037c8:	08042d00 	call	8042d0 <memset>
  8037cc:	0027883a 	mov	r19,zero
  8037d0:	003f3d06 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  8037d4:	80800417 	ldw	r2,16(r16)
  8037d8:	003f8306 	br	8035e8 <__alt_mem_onchip_mem+0xff7835e8>
  8037dc:	81400717 	ldw	r5,28(r16)
  8037e0:	900f883a 	mov	r7,r18
  8037e4:	000d883a 	mov	r6,zero
  8037e8:	8809883a 	mov	r4,r17
  8037ec:	a03ee83a 	callr	r20
  8037f0:	1027883a 	mov	r19,r2
  8037f4:	00bfffc4 	movi	r2,-1
  8037f8:	98bf3226 	beq	r19,r2,8034c4 <__alt_mem_onchip_mem+0xff7834c4>
  8037fc:	8080030b 	ldhu	r2,12(r16)
  803800:	003f7006 	br	8035c4 <__alt_mem_onchip_mem+0xff7835c4>
  803804:	8140038f 	ldh	r5,14(r16)
  803808:	283f4716 	blt	r5,zero,803528 <__alt_mem_onchip_mem+0xff783528>
  80380c:	d80d883a 	mov	r6,sp
  803810:	8809883a 	mov	r4,r17
  803814:	08038ac0 	call	8038ac <_fstat_r>
  803818:	1000041e 	bne	r2,zero,80382c <_fseeko_r+0x3e0>
  80381c:	d8800117 	ldw	r2,4(sp)
  803820:	00e00014 	movui	r3,32768
  803824:	10bc000c 	andi	r2,r2,61440
  803828:	10ff7c26 	beq	r2,r3,80361c <__alt_mem_onchip_mem+0xff78361c>
  80382c:	8080030b 	ldhu	r2,12(r16)
  803830:	003f3d06 	br	803528 <__alt_mem_onchip_mem+0xff783528>
  803834:	800b883a 	mov	r5,r16
  803838:	8809883a 	mov	r4,r17
  80383c:	08039080 	call	803908 <__smakebuf_r>
  803840:	003f3106 	br	803508 <__alt_mem_onchip_mem+0xff783508>
  803844:	81400717 	ldw	r5,28(r16)
  803848:	01c00044 	movi	r7,1
  80384c:	000d883a 	mov	r6,zero
  803850:	8809883a 	mov	r4,r17
  803854:	a03ee83a 	callr	r20
  803858:	00ffffc4 	movi	r3,-1
  80385c:	10ff7b1e 	bne	r2,r3,80364c <__alt_mem_onchip_mem+0xff78364c>
  803860:	003f3306 	br	803530 <__alt_mem_onchip_mem+0xff783530>
  803864:	80c00017 	ldw	r3,0(r16)
  803868:	80800417 	ldw	r2,16(r16)
  80386c:	000b883a 	mov	r5,zero
  803870:	1887c83a 	sub	r3,r3,r2
  803874:	98e7c83a 	sub	r19,r19,r3
  803878:	30c7883a 	add	r3,r6,r3
  80387c:	003f7f06 	br	80367c <__alt_mem_onchip_mem+0xff78367c>
  803880:	00800744 	movi	r2,29
  803884:	88800015 	stw	r2,0(r17)
  803888:	04ffffc4 	movi	r19,-1
  80388c:	003f0e06 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>

00803890 <fseeko>:
  803890:	00802074 	movhi	r2,129
  803894:	109a6e04 	addi	r2,r2,27064
  803898:	300f883a 	mov	r7,r6
  80389c:	280d883a 	mov	r6,r5
  8038a0:	200b883a 	mov	r5,r4
  8038a4:	11000017 	ldw	r4,0(r2)
  8038a8:	080344c1 	jmpi	80344c <_fseeko_r>

008038ac <_fstat_r>:
  8038ac:	defffd04 	addi	sp,sp,-12
  8038b0:	2805883a 	mov	r2,r5
  8038b4:	dc000015 	stw	r16,0(sp)
  8038b8:	040020b4 	movhi	r16,130
  8038bc:	dc400115 	stw	r17,4(sp)
  8038c0:	84221504 	addi	r16,r16,-30636
  8038c4:	2023883a 	mov	r17,r4
  8038c8:	300b883a 	mov	r5,r6
  8038cc:	1009883a 	mov	r4,r2
  8038d0:	dfc00215 	stw	ra,8(sp)
  8038d4:	80000015 	stw	zero,0(r16)
  8038d8:	08107680 	call	810768 <fstat>
  8038dc:	00ffffc4 	movi	r3,-1
  8038e0:	10c00526 	beq	r2,r3,8038f8 <_fstat_r+0x4c>
  8038e4:	dfc00217 	ldw	ra,8(sp)
  8038e8:	dc400117 	ldw	r17,4(sp)
  8038ec:	dc000017 	ldw	r16,0(sp)
  8038f0:	dec00304 	addi	sp,sp,12
  8038f4:	f800283a 	ret
  8038f8:	80c00017 	ldw	r3,0(r16)
  8038fc:	183ff926 	beq	r3,zero,8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  803900:	88c00015 	stw	r3,0(r17)
  803904:	003ff706 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>

00803908 <__smakebuf_r>:
  803908:	2880030b 	ldhu	r2,12(r5)
  80390c:	10c0008c 	andi	r3,r2,2
  803910:	1800411e 	bne	r3,zero,803a18 <__smakebuf_r+0x110>
  803914:	deffec04 	addi	sp,sp,-80
  803918:	dc000f15 	stw	r16,60(sp)
  80391c:	2821883a 	mov	r16,r5
  803920:	2940038f 	ldh	r5,14(r5)
  803924:	dc401015 	stw	r17,64(sp)
  803928:	dfc01315 	stw	ra,76(sp)
  80392c:	dcc01215 	stw	r19,72(sp)
  803930:	dc801115 	stw	r18,68(sp)
  803934:	2023883a 	mov	r17,r4
  803938:	28001c16 	blt	r5,zero,8039ac <__smakebuf_r+0xa4>
  80393c:	d80d883a 	mov	r6,sp
  803940:	08038ac0 	call	8038ac <_fstat_r>
  803944:	10001816 	blt	r2,zero,8039a8 <__smakebuf_r+0xa0>
  803948:	d8800117 	ldw	r2,4(sp)
  80394c:	00e00014 	movui	r3,32768
  803950:	10bc000c 	andi	r2,r2,61440
  803954:	14c80020 	cmpeqi	r19,r2,8192
  803958:	10c03726 	beq	r2,r3,803a38 <__smakebuf_r+0x130>
  80395c:	80c0030b 	ldhu	r3,12(r16)
  803960:	18c20014 	ori	r3,r3,2048
  803964:	80c0030d 	sth	r3,12(r16)
  803968:	00c80004 	movi	r3,8192
  80396c:	10c0521e 	bne	r2,r3,803ab8 <__smakebuf_r+0x1b0>
  803970:	8140038f 	ldh	r5,14(r16)
  803974:	8809883a 	mov	r4,r17
  803978:	080987c0 	call	80987c <_isatty_r>
  80397c:	10004c26 	beq	r2,zero,803ab0 <__smakebuf_r+0x1a8>
  803980:	8080030b 	ldhu	r2,12(r16)
  803984:	80c010c4 	addi	r3,r16,67
  803988:	80c00015 	stw	r3,0(r16)
  80398c:	10800054 	ori	r2,r2,1
  803990:	8080030d 	sth	r2,12(r16)
  803994:	00800044 	movi	r2,1
  803998:	80c00415 	stw	r3,16(r16)
  80399c:	80800515 	stw	r2,20(r16)
  8039a0:	04810004 	movi	r18,1024
  8039a4:	00000706 	br	8039c4 <__smakebuf_r+0xbc>
  8039a8:	8080030b 	ldhu	r2,12(r16)
  8039ac:	10c0200c 	andi	r3,r2,128
  8039b0:	18001f1e 	bne	r3,zero,803a30 <__smakebuf_r+0x128>
  8039b4:	04810004 	movi	r18,1024
  8039b8:	10820014 	ori	r2,r2,2048
  8039bc:	8080030d 	sth	r2,12(r16)
  8039c0:	0027883a 	mov	r19,zero
  8039c4:	900b883a 	mov	r5,r18
  8039c8:	8809883a 	mov	r4,r17
  8039cc:	0803ac40 	call	803ac4 <_malloc_r>
  8039d0:	10002c26 	beq	r2,zero,803a84 <__smakebuf_r+0x17c>
  8039d4:	80c0030b 	ldhu	r3,12(r16)
  8039d8:	01002074 	movhi	r4,129
  8039dc:	21227004 	addi	r4,r4,-30272
  8039e0:	89000f15 	stw	r4,60(r17)
  8039e4:	18c02014 	ori	r3,r3,128
  8039e8:	80c0030d 	sth	r3,12(r16)
  8039ec:	80800015 	stw	r2,0(r16)
  8039f0:	80800415 	stw	r2,16(r16)
  8039f4:	84800515 	stw	r18,20(r16)
  8039f8:	98001a1e 	bne	r19,zero,803a64 <__smakebuf_r+0x15c>
  8039fc:	dfc01317 	ldw	ra,76(sp)
  803a00:	dcc01217 	ldw	r19,72(sp)
  803a04:	dc801117 	ldw	r18,68(sp)
  803a08:	dc401017 	ldw	r17,64(sp)
  803a0c:	dc000f17 	ldw	r16,60(sp)
  803a10:	dec01404 	addi	sp,sp,80
  803a14:	f800283a 	ret
  803a18:	288010c4 	addi	r2,r5,67
  803a1c:	28800015 	stw	r2,0(r5)
  803a20:	28800415 	stw	r2,16(r5)
  803a24:	00800044 	movi	r2,1
  803a28:	28800515 	stw	r2,20(r5)
  803a2c:	f800283a 	ret
  803a30:	04801004 	movi	r18,64
  803a34:	003fe006 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>
  803a38:	81000a17 	ldw	r4,40(r16)
  803a3c:	00c02034 	movhi	r3,128
  803a40:	18d22d04 	addi	r3,r3,18612
  803a44:	20ffc51e 	bne	r4,r3,80395c <__alt_mem_onchip_mem+0xff78395c>
  803a48:	8080030b 	ldhu	r2,12(r16)
  803a4c:	04810004 	movi	r18,1024
  803a50:	84801315 	stw	r18,76(r16)
  803a54:	1484b03a 	or	r2,r2,r18
  803a58:	8080030d 	sth	r2,12(r16)
  803a5c:	0027883a 	mov	r19,zero
  803a60:	003fd806 	br	8039c4 <__alt_mem_onchip_mem+0xff7839c4>
  803a64:	8140038f 	ldh	r5,14(r16)
  803a68:	8809883a 	mov	r4,r17
  803a6c:	080987c0 	call	80987c <_isatty_r>
  803a70:	103fe226 	beq	r2,zero,8039fc <__alt_mem_onchip_mem+0xff7839fc>
  803a74:	8080030b 	ldhu	r2,12(r16)
  803a78:	10800054 	ori	r2,r2,1
  803a7c:	8080030d 	sth	r2,12(r16)
  803a80:	003fde06 	br	8039fc <__alt_mem_onchip_mem+0xff7839fc>
  803a84:	8080030b 	ldhu	r2,12(r16)
  803a88:	10c0800c 	andi	r3,r2,512
  803a8c:	183fdb1e 	bne	r3,zero,8039fc <__alt_mem_onchip_mem+0xff7839fc>
  803a90:	10800094 	ori	r2,r2,2
  803a94:	80c010c4 	addi	r3,r16,67
  803a98:	8080030d 	sth	r2,12(r16)
  803a9c:	00800044 	movi	r2,1
  803aa0:	80c00015 	stw	r3,0(r16)
  803aa4:	80c00415 	stw	r3,16(r16)
  803aa8:	80800515 	stw	r2,20(r16)
  803aac:	003fd306 	br	8039fc <__alt_mem_onchip_mem+0xff7839fc>
  803ab0:	04810004 	movi	r18,1024
  803ab4:	003fc306 	br	8039c4 <__alt_mem_onchip_mem+0xff7839c4>
  803ab8:	0027883a 	mov	r19,zero
  803abc:	04810004 	movi	r18,1024
  803ac0:	003fc006 	br	8039c4 <__alt_mem_onchip_mem+0xff7839c4>

00803ac4 <_malloc_r>:
  803ac4:	defff504 	addi	sp,sp,-44
  803ac8:	dc800315 	stw	r18,12(sp)
  803acc:	dfc00a15 	stw	ra,40(sp)
  803ad0:	df000915 	stw	fp,36(sp)
  803ad4:	ddc00815 	stw	r23,32(sp)
  803ad8:	dd800715 	stw	r22,28(sp)
  803adc:	dd400615 	stw	r21,24(sp)
  803ae0:	dd000515 	stw	r20,20(sp)
  803ae4:	dcc00415 	stw	r19,16(sp)
  803ae8:	dc400215 	stw	r17,8(sp)
  803aec:	dc000115 	stw	r16,4(sp)
  803af0:	288002c4 	addi	r2,r5,11
  803af4:	00c00584 	movi	r3,22
  803af8:	2025883a 	mov	r18,r4
  803afc:	18807f2e 	bgeu	r3,r2,803cfc <_malloc_r+0x238>
  803b00:	047ffe04 	movi	r17,-8
  803b04:	1462703a 	and	r17,r2,r17
  803b08:	8800a316 	blt	r17,zero,803d98 <_malloc_r+0x2d4>
  803b0c:	8940a236 	bltu	r17,r5,803d98 <_malloc_r+0x2d4>
  803b10:	0810b700 	call	810b70 <__malloc_lock>
  803b14:	00807dc4 	movi	r2,503
  803b18:	1441e92e 	bgeu	r2,r17,8042c0 <_malloc_r+0x7fc>
  803b1c:	8804d27a 	srli	r2,r17,9
  803b20:	1000a126 	beq	r2,zero,803da8 <_malloc_r+0x2e4>
  803b24:	00c00104 	movi	r3,4
  803b28:	18811e36 	bltu	r3,r2,803fa4 <_malloc_r+0x4e0>
  803b2c:	8804d1ba 	srli	r2,r17,6
  803b30:	12000e44 	addi	r8,r2,57
  803b34:	11c00e04 	addi	r7,r2,56
  803b38:	4209883a 	add	r4,r8,r8
  803b3c:	04c02074 	movhi	r19,129
  803b40:	2109883a 	add	r4,r4,r4
  803b44:	9cd45204 	addi	r19,r19,20808
  803b48:	2109883a 	add	r4,r4,r4
  803b4c:	9909883a 	add	r4,r19,r4
  803b50:	24000117 	ldw	r16,4(r4)
  803b54:	213ffe04 	addi	r4,r4,-8
  803b58:	24009726 	beq	r4,r16,803db8 <_malloc_r+0x2f4>
  803b5c:	80800117 	ldw	r2,4(r16)
  803b60:	01bfff04 	movi	r6,-4
  803b64:	014003c4 	movi	r5,15
  803b68:	1184703a 	and	r2,r2,r6
  803b6c:	1447c83a 	sub	r3,r2,r17
  803b70:	28c00716 	blt	r5,r3,803b90 <_malloc_r+0xcc>
  803b74:	1800920e 	bge	r3,zero,803dc0 <_malloc_r+0x2fc>
  803b78:	84000317 	ldw	r16,12(r16)
  803b7c:	24008e26 	beq	r4,r16,803db8 <_malloc_r+0x2f4>
  803b80:	80800117 	ldw	r2,4(r16)
  803b84:	1184703a 	and	r2,r2,r6
  803b88:	1447c83a 	sub	r3,r2,r17
  803b8c:	28fff90e 	bge	r5,r3,803b74 <__alt_mem_onchip_mem+0xff783b74>
  803b90:	3809883a 	mov	r4,r7
  803b94:	01802074 	movhi	r6,129
  803b98:	9c000417 	ldw	r16,16(r19)
  803b9c:	31945204 	addi	r6,r6,20808
  803ba0:	32000204 	addi	r8,r6,8
  803ba4:	82013426 	beq	r16,r8,804078 <_malloc_r+0x5b4>
  803ba8:	80c00117 	ldw	r3,4(r16)
  803bac:	00bfff04 	movi	r2,-4
  803bb0:	188e703a 	and	r7,r3,r2
  803bb4:	3c45c83a 	sub	r2,r7,r17
  803bb8:	00c003c4 	movi	r3,15
  803bbc:	18811f16 	blt	r3,r2,80403c <_malloc_r+0x578>
  803bc0:	32000515 	stw	r8,20(r6)
  803bc4:	32000415 	stw	r8,16(r6)
  803bc8:	10007f0e 	bge	r2,zero,803dc8 <_malloc_r+0x304>
  803bcc:	00807fc4 	movi	r2,511
  803bd0:	11c0fd36 	bltu	r2,r7,803fc8 <_malloc_r+0x504>
  803bd4:	3806d0fa 	srli	r3,r7,3
  803bd8:	01c00044 	movi	r7,1
  803bdc:	30800117 	ldw	r2,4(r6)
  803be0:	19400044 	addi	r5,r3,1
  803be4:	294b883a 	add	r5,r5,r5
  803be8:	1807d0ba 	srai	r3,r3,2
  803bec:	294b883a 	add	r5,r5,r5
  803bf0:	294b883a 	add	r5,r5,r5
  803bf4:	298b883a 	add	r5,r5,r6
  803bf8:	38c6983a 	sll	r3,r7,r3
  803bfc:	29c00017 	ldw	r7,0(r5)
  803c00:	2a7ffe04 	addi	r9,r5,-8
  803c04:	1886b03a 	or	r3,r3,r2
  803c08:	82400315 	stw	r9,12(r16)
  803c0c:	81c00215 	stw	r7,8(r16)
  803c10:	30c00115 	stw	r3,4(r6)
  803c14:	2c000015 	stw	r16,0(r5)
  803c18:	3c000315 	stw	r16,12(r7)
  803c1c:	2005d0ba 	srai	r2,r4,2
  803c20:	01400044 	movi	r5,1
  803c24:	288a983a 	sll	r5,r5,r2
  803c28:	19406f36 	bltu	r3,r5,803de8 <_malloc_r+0x324>
  803c2c:	28c4703a 	and	r2,r5,r3
  803c30:	10000a1e 	bne	r2,zero,803c5c <_malloc_r+0x198>
  803c34:	00bfff04 	movi	r2,-4
  803c38:	294b883a 	add	r5,r5,r5
  803c3c:	2088703a 	and	r4,r4,r2
  803c40:	28c4703a 	and	r2,r5,r3
  803c44:	21000104 	addi	r4,r4,4
  803c48:	1000041e 	bne	r2,zero,803c5c <_malloc_r+0x198>
  803c4c:	294b883a 	add	r5,r5,r5
  803c50:	28c4703a 	and	r2,r5,r3
  803c54:	21000104 	addi	r4,r4,4
  803c58:	103ffc26 	beq	r2,zero,803c4c <__alt_mem_onchip_mem+0xff783c4c>
  803c5c:	02bfff04 	movi	r10,-4
  803c60:	024003c4 	movi	r9,15
  803c64:	21800044 	addi	r6,r4,1
  803c68:	318d883a 	add	r6,r6,r6
  803c6c:	318d883a 	add	r6,r6,r6
  803c70:	318d883a 	add	r6,r6,r6
  803c74:	998d883a 	add	r6,r19,r6
  803c78:	333ffe04 	addi	r12,r6,-8
  803c7c:	2017883a 	mov	r11,r4
  803c80:	31800104 	addi	r6,r6,4
  803c84:	34000017 	ldw	r16,0(r6)
  803c88:	31fffd04 	addi	r7,r6,-12
  803c8c:	81c0041e 	bne	r16,r7,803ca0 <_malloc_r+0x1dc>
  803c90:	0000fb06 	br	804080 <_malloc_r+0x5bc>
  803c94:	1801030e 	bge	r3,zero,8040a4 <_malloc_r+0x5e0>
  803c98:	84000317 	ldw	r16,12(r16)
  803c9c:	81c0f826 	beq	r16,r7,804080 <_malloc_r+0x5bc>
  803ca0:	80800117 	ldw	r2,4(r16)
  803ca4:	1284703a 	and	r2,r2,r10
  803ca8:	1447c83a 	sub	r3,r2,r17
  803cac:	48fff90e 	bge	r9,r3,803c94 <__alt_mem_onchip_mem+0xff783c94>
  803cb0:	80800317 	ldw	r2,12(r16)
  803cb4:	81000217 	ldw	r4,8(r16)
  803cb8:	89400054 	ori	r5,r17,1
  803cbc:	81400115 	stw	r5,4(r16)
  803cc0:	20800315 	stw	r2,12(r4)
  803cc4:	11000215 	stw	r4,8(r2)
  803cc8:	8463883a 	add	r17,r16,r17
  803ccc:	9c400515 	stw	r17,20(r19)
  803cd0:	9c400415 	stw	r17,16(r19)
  803cd4:	18800054 	ori	r2,r3,1
  803cd8:	88800115 	stw	r2,4(r17)
  803cdc:	8a000315 	stw	r8,12(r17)
  803ce0:	8a000215 	stw	r8,8(r17)
  803ce4:	88e3883a 	add	r17,r17,r3
  803ce8:	88c00015 	stw	r3,0(r17)
  803cec:	9009883a 	mov	r4,r18
  803cf0:	0810b940 	call	810b94 <__malloc_unlock>
  803cf4:	80800204 	addi	r2,r16,8
  803cf8:	00001b06 	br	803d68 <_malloc_r+0x2a4>
  803cfc:	04400404 	movi	r17,16
  803d00:	89402536 	bltu	r17,r5,803d98 <_malloc_r+0x2d4>
  803d04:	0810b700 	call	810b70 <__malloc_lock>
  803d08:	00800184 	movi	r2,6
  803d0c:	01000084 	movi	r4,2
  803d10:	04c02074 	movhi	r19,129
  803d14:	1085883a 	add	r2,r2,r2
  803d18:	9cd45204 	addi	r19,r19,20808
  803d1c:	1085883a 	add	r2,r2,r2
  803d20:	9885883a 	add	r2,r19,r2
  803d24:	14000117 	ldw	r16,4(r2)
  803d28:	10fffe04 	addi	r3,r2,-8
  803d2c:	80c0d926 	beq	r16,r3,804094 <_malloc_r+0x5d0>
  803d30:	80c00117 	ldw	r3,4(r16)
  803d34:	81000317 	ldw	r4,12(r16)
  803d38:	00bfff04 	movi	r2,-4
  803d3c:	1884703a 	and	r2,r3,r2
  803d40:	81400217 	ldw	r5,8(r16)
  803d44:	8085883a 	add	r2,r16,r2
  803d48:	10c00117 	ldw	r3,4(r2)
  803d4c:	29000315 	stw	r4,12(r5)
  803d50:	21400215 	stw	r5,8(r4)
  803d54:	18c00054 	ori	r3,r3,1
  803d58:	10c00115 	stw	r3,4(r2)
  803d5c:	9009883a 	mov	r4,r18
  803d60:	0810b940 	call	810b94 <__malloc_unlock>
  803d64:	80800204 	addi	r2,r16,8
  803d68:	dfc00a17 	ldw	ra,40(sp)
  803d6c:	df000917 	ldw	fp,36(sp)
  803d70:	ddc00817 	ldw	r23,32(sp)
  803d74:	dd800717 	ldw	r22,28(sp)
  803d78:	dd400617 	ldw	r21,24(sp)
  803d7c:	dd000517 	ldw	r20,20(sp)
  803d80:	dcc00417 	ldw	r19,16(sp)
  803d84:	dc800317 	ldw	r18,12(sp)
  803d88:	dc400217 	ldw	r17,8(sp)
  803d8c:	dc000117 	ldw	r16,4(sp)
  803d90:	dec00b04 	addi	sp,sp,44
  803d94:	f800283a 	ret
  803d98:	00800304 	movi	r2,12
  803d9c:	90800015 	stw	r2,0(r18)
  803da0:	0005883a 	mov	r2,zero
  803da4:	003ff006 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  803da8:	01002004 	movi	r4,128
  803dac:	02001004 	movi	r8,64
  803db0:	01c00fc4 	movi	r7,63
  803db4:	003f6106 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  803db8:	4009883a 	mov	r4,r8
  803dbc:	003f7506 	br	803b94 <__alt_mem_onchip_mem+0xff783b94>
  803dc0:	81000317 	ldw	r4,12(r16)
  803dc4:	003fde06 	br	803d40 <__alt_mem_onchip_mem+0xff783d40>
  803dc8:	81c5883a 	add	r2,r16,r7
  803dcc:	11400117 	ldw	r5,4(r2)
  803dd0:	9009883a 	mov	r4,r18
  803dd4:	29400054 	ori	r5,r5,1
  803dd8:	11400115 	stw	r5,4(r2)
  803ddc:	0810b940 	call	810b94 <__malloc_unlock>
  803de0:	80800204 	addi	r2,r16,8
  803de4:	003fe006 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  803de8:	9c000217 	ldw	r16,8(r19)
  803dec:	00bfff04 	movi	r2,-4
  803df0:	85800117 	ldw	r22,4(r16)
  803df4:	b0ac703a 	and	r22,r22,r2
  803df8:	b4400336 	bltu	r22,r17,803e08 <_malloc_r+0x344>
  803dfc:	b445c83a 	sub	r2,r22,r17
  803e00:	00c003c4 	movi	r3,15
  803e04:	18805d16 	blt	r3,r2,803f7c <_malloc_r+0x4b8>
  803e08:	05c02074 	movhi	r23,129
  803e0c:	008020b4 	movhi	r2,130
  803e10:	10a21804 	addi	r2,r2,-30624
  803e14:	bdda6f04 	addi	r23,r23,27068
  803e18:	15400017 	ldw	r21,0(r2)
  803e1c:	b8c00017 	ldw	r3,0(r23)
  803e20:	00bfffc4 	movi	r2,-1
  803e24:	858d883a 	add	r6,r16,r22
  803e28:	8d6b883a 	add	r21,r17,r21
  803e2c:	1880ea26 	beq	r3,r2,8041d8 <_malloc_r+0x714>
  803e30:	ad4403c4 	addi	r21,r21,4111
  803e34:	00bc0004 	movi	r2,-4096
  803e38:	a8aa703a 	and	r21,r21,r2
  803e3c:	a80b883a 	mov	r5,r21
  803e40:	9009883a 	mov	r4,r18
  803e44:	d9800015 	stw	r6,0(sp)
  803e48:	08047880 	call	804788 <_sbrk_r>
  803e4c:	1029883a 	mov	r20,r2
  803e50:	00bfffc4 	movi	r2,-1
  803e54:	d9800017 	ldw	r6,0(sp)
  803e58:	a080e826 	beq	r20,r2,8041fc <_malloc_r+0x738>
  803e5c:	a180a636 	bltu	r20,r6,8040f8 <_malloc_r+0x634>
  803e60:	070020b4 	movhi	fp,130
  803e64:	e7222304 	addi	fp,fp,-30580
  803e68:	e0800017 	ldw	r2,0(fp)
  803e6c:	a887883a 	add	r3,r21,r2
  803e70:	e0c00015 	stw	r3,0(fp)
  803e74:	3500e626 	beq	r6,r20,804210 <_malloc_r+0x74c>
  803e78:	b9000017 	ldw	r4,0(r23)
  803e7c:	00bfffc4 	movi	r2,-1
  803e80:	2080ee26 	beq	r4,r2,80423c <_malloc_r+0x778>
  803e84:	a185c83a 	sub	r2,r20,r6
  803e88:	10c5883a 	add	r2,r2,r3
  803e8c:	e0800015 	stw	r2,0(fp)
  803e90:	a0c001cc 	andi	r3,r20,7
  803e94:	1800bc26 	beq	r3,zero,804188 <_malloc_r+0x6c4>
  803e98:	a0e9c83a 	sub	r20,r20,r3
  803e9c:	00840204 	movi	r2,4104
  803ea0:	a5000204 	addi	r20,r20,8
  803ea4:	10c7c83a 	sub	r3,r2,r3
  803ea8:	a545883a 	add	r2,r20,r21
  803eac:	1083ffcc 	andi	r2,r2,4095
  803eb0:	18abc83a 	sub	r21,r3,r2
  803eb4:	a80b883a 	mov	r5,r21
  803eb8:	9009883a 	mov	r4,r18
  803ebc:	08047880 	call	804788 <_sbrk_r>
  803ec0:	00ffffc4 	movi	r3,-1
  803ec4:	10c0e126 	beq	r2,r3,80424c <_malloc_r+0x788>
  803ec8:	1505c83a 	sub	r2,r2,r20
  803ecc:	1545883a 	add	r2,r2,r21
  803ed0:	10800054 	ori	r2,r2,1
  803ed4:	e0c00017 	ldw	r3,0(fp)
  803ed8:	9d000215 	stw	r20,8(r19)
  803edc:	a0800115 	stw	r2,4(r20)
  803ee0:	a8c7883a 	add	r3,r21,r3
  803ee4:	e0c00015 	stw	r3,0(fp)
  803ee8:	84c00e26 	beq	r16,r19,803f24 <_malloc_r+0x460>
  803eec:	018003c4 	movi	r6,15
  803ef0:	3580a72e 	bgeu	r6,r22,804190 <_malloc_r+0x6cc>
  803ef4:	81400117 	ldw	r5,4(r16)
  803ef8:	013ffe04 	movi	r4,-8
  803efc:	b0bffd04 	addi	r2,r22,-12
  803f00:	1104703a 	and	r2,r2,r4
  803f04:	2900004c 	andi	r4,r5,1
  803f08:	2088b03a 	or	r4,r4,r2
  803f0c:	81000115 	stw	r4,4(r16)
  803f10:	01400144 	movi	r5,5
  803f14:	8089883a 	add	r4,r16,r2
  803f18:	21400115 	stw	r5,4(r4)
  803f1c:	21400215 	stw	r5,8(r4)
  803f20:	3080cd36 	bltu	r6,r2,804258 <_malloc_r+0x794>
  803f24:	008020b4 	movhi	r2,130
  803f28:	10a21704 	addi	r2,r2,-30628
  803f2c:	11000017 	ldw	r4,0(r2)
  803f30:	20c0012e 	bgeu	r4,r3,803f38 <_malloc_r+0x474>
  803f34:	10c00015 	stw	r3,0(r2)
  803f38:	008020b4 	movhi	r2,130
  803f3c:	10a21604 	addi	r2,r2,-30632
  803f40:	11000017 	ldw	r4,0(r2)
  803f44:	9c000217 	ldw	r16,8(r19)
  803f48:	20c0012e 	bgeu	r4,r3,803f50 <_malloc_r+0x48c>
  803f4c:	10c00015 	stw	r3,0(r2)
  803f50:	80c00117 	ldw	r3,4(r16)
  803f54:	00bfff04 	movi	r2,-4
  803f58:	1886703a 	and	r3,r3,r2
  803f5c:	1c45c83a 	sub	r2,r3,r17
  803f60:	1c400236 	bltu	r3,r17,803f6c <_malloc_r+0x4a8>
  803f64:	00c003c4 	movi	r3,15
  803f68:	18800416 	blt	r3,r2,803f7c <_malloc_r+0x4b8>
  803f6c:	9009883a 	mov	r4,r18
  803f70:	0810b940 	call	810b94 <__malloc_unlock>
  803f74:	0005883a 	mov	r2,zero
  803f78:	003f7b06 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  803f7c:	88c00054 	ori	r3,r17,1
  803f80:	80c00115 	stw	r3,4(r16)
  803f84:	8463883a 	add	r17,r16,r17
  803f88:	10800054 	ori	r2,r2,1
  803f8c:	9c400215 	stw	r17,8(r19)
  803f90:	88800115 	stw	r2,4(r17)
  803f94:	9009883a 	mov	r4,r18
  803f98:	0810b940 	call	810b94 <__malloc_unlock>
  803f9c:	80800204 	addi	r2,r16,8
  803fa0:	003f7106 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  803fa4:	00c00504 	movi	r3,20
  803fa8:	18804a2e 	bgeu	r3,r2,8040d4 <_malloc_r+0x610>
  803fac:	00c01504 	movi	r3,84
  803fb0:	18806e36 	bltu	r3,r2,80416c <_malloc_r+0x6a8>
  803fb4:	8804d33a 	srli	r2,r17,12
  803fb8:	12001bc4 	addi	r8,r2,111
  803fbc:	11c01b84 	addi	r7,r2,110
  803fc0:	4209883a 	add	r4,r8,r8
  803fc4:	003edd06 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  803fc8:	3804d27a 	srli	r2,r7,9
  803fcc:	00c00104 	movi	r3,4
  803fd0:	1880442e 	bgeu	r3,r2,8040e4 <_malloc_r+0x620>
  803fd4:	00c00504 	movi	r3,20
  803fd8:	18808136 	bltu	r3,r2,8041e0 <_malloc_r+0x71c>
  803fdc:	11401704 	addi	r5,r2,92
  803fe0:	10c016c4 	addi	r3,r2,91
  803fe4:	294b883a 	add	r5,r5,r5
  803fe8:	294b883a 	add	r5,r5,r5
  803fec:	294b883a 	add	r5,r5,r5
  803ff0:	994b883a 	add	r5,r19,r5
  803ff4:	28800017 	ldw	r2,0(r5)
  803ff8:	01802074 	movhi	r6,129
  803ffc:	297ffe04 	addi	r5,r5,-8
  804000:	31945204 	addi	r6,r6,20808
  804004:	28806526 	beq	r5,r2,80419c <_malloc_r+0x6d8>
  804008:	01bfff04 	movi	r6,-4
  80400c:	10c00117 	ldw	r3,4(r2)
  804010:	1986703a 	and	r3,r3,r6
  804014:	38c0022e 	bgeu	r7,r3,804020 <_malloc_r+0x55c>
  804018:	10800217 	ldw	r2,8(r2)
  80401c:	28bffb1e 	bne	r5,r2,80400c <__alt_mem_onchip_mem+0xff78400c>
  804020:	11400317 	ldw	r5,12(r2)
  804024:	98c00117 	ldw	r3,4(r19)
  804028:	81400315 	stw	r5,12(r16)
  80402c:	80800215 	stw	r2,8(r16)
  804030:	2c000215 	stw	r16,8(r5)
  804034:	14000315 	stw	r16,12(r2)
  804038:	003ef806 	br	803c1c <__alt_mem_onchip_mem+0xff783c1c>
  80403c:	88c00054 	ori	r3,r17,1
  804040:	80c00115 	stw	r3,4(r16)
  804044:	8463883a 	add	r17,r16,r17
  804048:	34400515 	stw	r17,20(r6)
  80404c:	34400415 	stw	r17,16(r6)
  804050:	10c00054 	ori	r3,r2,1
  804054:	8a000315 	stw	r8,12(r17)
  804058:	8a000215 	stw	r8,8(r17)
  80405c:	88c00115 	stw	r3,4(r17)
  804060:	88a3883a 	add	r17,r17,r2
  804064:	88800015 	stw	r2,0(r17)
  804068:	9009883a 	mov	r4,r18
  80406c:	0810b940 	call	810b94 <__malloc_unlock>
  804070:	80800204 	addi	r2,r16,8
  804074:	003f3c06 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  804078:	30c00117 	ldw	r3,4(r6)
  80407c:	003ee706 	br	803c1c <__alt_mem_onchip_mem+0xff783c1c>
  804080:	5ac00044 	addi	r11,r11,1
  804084:	588000cc 	andi	r2,r11,3
  804088:	31800204 	addi	r6,r6,8
  80408c:	103efd1e 	bne	r2,zero,803c84 <__alt_mem_onchip_mem+0xff783c84>
  804090:	00002406 	br	804124 <_malloc_r+0x660>
  804094:	14000317 	ldw	r16,12(r2)
  804098:	143f251e 	bne	r2,r16,803d30 <__alt_mem_onchip_mem+0xff783d30>
  80409c:	21000084 	addi	r4,r4,2
  8040a0:	003ebc06 	br	803b94 <__alt_mem_onchip_mem+0xff783b94>
  8040a4:	8085883a 	add	r2,r16,r2
  8040a8:	10c00117 	ldw	r3,4(r2)
  8040ac:	81000317 	ldw	r4,12(r16)
  8040b0:	81400217 	ldw	r5,8(r16)
  8040b4:	18c00054 	ori	r3,r3,1
  8040b8:	10c00115 	stw	r3,4(r2)
  8040bc:	29000315 	stw	r4,12(r5)
  8040c0:	21400215 	stw	r5,8(r4)
  8040c4:	9009883a 	mov	r4,r18
  8040c8:	0810b940 	call	810b94 <__malloc_unlock>
  8040cc:	80800204 	addi	r2,r16,8
  8040d0:	003f2506 	br	803d68 <__alt_mem_onchip_mem+0xff783d68>
  8040d4:	12001704 	addi	r8,r2,92
  8040d8:	11c016c4 	addi	r7,r2,91
  8040dc:	4209883a 	add	r4,r8,r8
  8040e0:	003e9606 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  8040e4:	3804d1ba 	srli	r2,r7,6
  8040e8:	11400e44 	addi	r5,r2,57
  8040ec:	10c00e04 	addi	r3,r2,56
  8040f0:	294b883a 	add	r5,r5,r5
  8040f4:	003fbc06 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  8040f8:	84ff5926 	beq	r16,r19,803e60 <__alt_mem_onchip_mem+0xff783e60>
  8040fc:	00802074 	movhi	r2,129
  804100:	10945204 	addi	r2,r2,20808
  804104:	14000217 	ldw	r16,8(r2)
  804108:	00bfff04 	movi	r2,-4
  80410c:	80c00117 	ldw	r3,4(r16)
  804110:	1886703a 	and	r3,r3,r2
  804114:	003f9106 	br	803f5c <__alt_mem_onchip_mem+0xff783f5c>
  804118:	60800217 	ldw	r2,8(r12)
  80411c:	213fffc4 	addi	r4,r4,-1
  804120:	1300651e 	bne	r2,r12,8042b8 <_malloc_r+0x7f4>
  804124:	208000cc 	andi	r2,r4,3
  804128:	633ffe04 	addi	r12,r12,-8
  80412c:	103ffa1e 	bne	r2,zero,804118 <__alt_mem_onchip_mem+0xff784118>
  804130:	98800117 	ldw	r2,4(r19)
  804134:	0146303a 	nor	r3,zero,r5
  804138:	1884703a 	and	r2,r3,r2
  80413c:	98800115 	stw	r2,4(r19)
  804140:	294b883a 	add	r5,r5,r5
  804144:	117f2836 	bltu	r2,r5,803de8 <__alt_mem_onchip_mem+0xff783de8>
  804148:	283f2726 	beq	r5,zero,803de8 <__alt_mem_onchip_mem+0xff783de8>
  80414c:	2886703a 	and	r3,r5,r2
  804150:	5809883a 	mov	r4,r11
  804154:	183ec31e 	bne	r3,zero,803c64 <__alt_mem_onchip_mem+0xff783c64>
  804158:	294b883a 	add	r5,r5,r5
  80415c:	2886703a 	and	r3,r5,r2
  804160:	21000104 	addi	r4,r4,4
  804164:	183ffc26 	beq	r3,zero,804158 <__alt_mem_onchip_mem+0xff784158>
  804168:	003ebe06 	br	803c64 <__alt_mem_onchip_mem+0xff783c64>
  80416c:	00c05504 	movi	r3,340
  804170:	18801236 	bltu	r3,r2,8041bc <_malloc_r+0x6f8>
  804174:	8804d3fa 	srli	r2,r17,15
  804178:	12001e04 	addi	r8,r2,120
  80417c:	11c01dc4 	addi	r7,r2,119
  804180:	4209883a 	add	r4,r8,r8
  804184:	003e6d06 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  804188:	00c40004 	movi	r3,4096
  80418c:	003f4606 	br	803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  804190:	00800044 	movi	r2,1
  804194:	a0800115 	stw	r2,4(r20)
  804198:	003f7406 	br	803f6c <__alt_mem_onchip_mem+0xff783f6c>
  80419c:	1805d0ba 	srai	r2,r3,2
  8041a0:	01c00044 	movi	r7,1
  8041a4:	30c00117 	ldw	r3,4(r6)
  8041a8:	388e983a 	sll	r7,r7,r2
  8041ac:	2805883a 	mov	r2,r5
  8041b0:	38c6b03a 	or	r3,r7,r3
  8041b4:	30c00115 	stw	r3,4(r6)
  8041b8:	003f9b06 	br	804028 <__alt_mem_onchip_mem+0xff784028>
  8041bc:	00c15504 	movi	r3,1364
  8041c0:	18801a36 	bltu	r3,r2,80422c <_malloc_r+0x768>
  8041c4:	8804d4ba 	srli	r2,r17,18
  8041c8:	12001f44 	addi	r8,r2,125
  8041cc:	11c01f04 	addi	r7,r2,124
  8041d0:	4209883a 	add	r4,r8,r8
  8041d4:	003e5906 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  8041d8:	ad400404 	addi	r21,r21,16
  8041dc:	003f1706 	br	803e3c <__alt_mem_onchip_mem+0xff783e3c>
  8041e0:	00c01504 	movi	r3,84
  8041e4:	18802336 	bltu	r3,r2,804274 <_malloc_r+0x7b0>
  8041e8:	3804d33a 	srli	r2,r7,12
  8041ec:	11401bc4 	addi	r5,r2,111
  8041f0:	10c01b84 	addi	r3,r2,110
  8041f4:	294b883a 	add	r5,r5,r5
  8041f8:	003f7b06 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  8041fc:	9c000217 	ldw	r16,8(r19)
  804200:	00bfff04 	movi	r2,-4
  804204:	80c00117 	ldw	r3,4(r16)
  804208:	1886703a 	and	r3,r3,r2
  80420c:	003f5306 	br	803f5c <__alt_mem_onchip_mem+0xff783f5c>
  804210:	3083ffcc 	andi	r2,r6,4095
  804214:	103f181e 	bne	r2,zero,803e78 <__alt_mem_onchip_mem+0xff783e78>
  804218:	99000217 	ldw	r4,8(r19)
  80421c:	b545883a 	add	r2,r22,r21
  804220:	10800054 	ori	r2,r2,1
  804224:	20800115 	stw	r2,4(r4)
  804228:	003f3e06 	br	803f24 <__alt_mem_onchip_mem+0xff783f24>
  80422c:	01003f84 	movi	r4,254
  804230:	02001fc4 	movi	r8,127
  804234:	01c01f84 	movi	r7,126
  804238:	003e4006 	br	803b3c <__alt_mem_onchip_mem+0xff783b3c>
  80423c:	00802074 	movhi	r2,129
  804240:	109a6f04 	addi	r2,r2,27068
  804244:	15000015 	stw	r20,0(r2)
  804248:	003f1106 	br	803e90 <__alt_mem_onchip_mem+0xff783e90>
  80424c:	00800044 	movi	r2,1
  804250:	002b883a 	mov	r21,zero
  804254:	003f1f06 	br	803ed4 <__alt_mem_onchip_mem+0xff783ed4>
  804258:	81400204 	addi	r5,r16,8
  80425c:	9009883a 	mov	r4,r18
  804260:	0808f280 	call	808f28 <_free_r>
  804264:	008020b4 	movhi	r2,130
  804268:	10a22304 	addi	r2,r2,-30580
  80426c:	10c00017 	ldw	r3,0(r2)
  804270:	003f2c06 	br	803f24 <__alt_mem_onchip_mem+0xff783f24>
  804274:	00c05504 	movi	r3,340
  804278:	18800536 	bltu	r3,r2,804290 <_malloc_r+0x7cc>
  80427c:	3804d3fa 	srli	r2,r7,15
  804280:	11401e04 	addi	r5,r2,120
  804284:	10c01dc4 	addi	r3,r2,119
  804288:	294b883a 	add	r5,r5,r5
  80428c:	003f5606 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  804290:	00c15504 	movi	r3,1364
  804294:	18800536 	bltu	r3,r2,8042ac <_malloc_r+0x7e8>
  804298:	3804d4ba 	srli	r2,r7,18
  80429c:	11401f44 	addi	r5,r2,125
  8042a0:	10c01f04 	addi	r3,r2,124
  8042a4:	294b883a 	add	r5,r5,r5
  8042a8:	003f4f06 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  8042ac:	01403f84 	movi	r5,254
  8042b0:	00c01f84 	movi	r3,126
  8042b4:	003f4c06 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  8042b8:	98800117 	ldw	r2,4(r19)
  8042bc:	003fa006 	br	804140 <__alt_mem_onchip_mem+0xff784140>
  8042c0:	8808d0fa 	srli	r4,r17,3
  8042c4:	20800044 	addi	r2,r4,1
  8042c8:	1085883a 	add	r2,r2,r2
  8042cc:	003e9006 	br	803d10 <__alt_mem_onchip_mem+0xff783d10>

008042d0 <memset>:
  8042d0:	20c000cc 	andi	r3,r4,3
  8042d4:	2005883a 	mov	r2,r4
  8042d8:	18004426 	beq	r3,zero,8043ec <memset+0x11c>
  8042dc:	31ffffc4 	addi	r7,r6,-1
  8042e0:	30004026 	beq	r6,zero,8043e4 <memset+0x114>
  8042e4:	2813883a 	mov	r9,r5
  8042e8:	200d883a 	mov	r6,r4
  8042ec:	2007883a 	mov	r3,r4
  8042f0:	00000406 	br	804304 <memset+0x34>
  8042f4:	3a3fffc4 	addi	r8,r7,-1
  8042f8:	31800044 	addi	r6,r6,1
  8042fc:	38003926 	beq	r7,zero,8043e4 <memset+0x114>
  804300:	400f883a 	mov	r7,r8
  804304:	18c00044 	addi	r3,r3,1
  804308:	32400005 	stb	r9,0(r6)
  80430c:	1a0000cc 	andi	r8,r3,3
  804310:	403ff81e 	bne	r8,zero,8042f4 <__alt_mem_onchip_mem+0xff7842f4>
  804314:	010000c4 	movi	r4,3
  804318:	21c02d2e 	bgeu	r4,r7,8043d0 <memset+0x100>
  80431c:	29003fcc 	andi	r4,r5,255
  804320:	200c923a 	slli	r6,r4,8
  804324:	3108b03a 	or	r4,r6,r4
  804328:	200c943a 	slli	r6,r4,16
  80432c:	218cb03a 	or	r6,r4,r6
  804330:	010003c4 	movi	r4,15
  804334:	21c0182e 	bgeu	r4,r7,804398 <memset+0xc8>
  804338:	3b3ffc04 	addi	r12,r7,-16
  80433c:	6018d13a 	srli	r12,r12,4
  804340:	1a000104 	addi	r8,r3,4
  804344:	1ac00204 	addi	r11,r3,8
  804348:	6008913a 	slli	r4,r12,4
  80434c:	1a800304 	addi	r10,r3,12
  804350:	1813883a 	mov	r9,r3
  804354:	21000504 	addi	r4,r4,20
  804358:	1909883a 	add	r4,r3,r4
  80435c:	49800015 	stw	r6,0(r9)
  804360:	41800015 	stw	r6,0(r8)
  804364:	59800015 	stw	r6,0(r11)
  804368:	51800015 	stw	r6,0(r10)
  80436c:	42000404 	addi	r8,r8,16
  804370:	4a400404 	addi	r9,r9,16
  804374:	5ac00404 	addi	r11,r11,16
  804378:	52800404 	addi	r10,r10,16
  80437c:	413ff71e 	bne	r8,r4,80435c <__alt_mem_onchip_mem+0xff78435c>
  804380:	63000044 	addi	r12,r12,1
  804384:	6018913a 	slli	r12,r12,4
  804388:	39c003cc 	andi	r7,r7,15
  80438c:	010000c4 	movi	r4,3
  804390:	1b07883a 	add	r3,r3,r12
  804394:	21c00e2e 	bgeu	r4,r7,8043d0 <memset+0x100>
  804398:	1813883a 	mov	r9,r3
  80439c:	3811883a 	mov	r8,r7
  8043a0:	010000c4 	movi	r4,3
  8043a4:	49800015 	stw	r6,0(r9)
  8043a8:	423fff04 	addi	r8,r8,-4
  8043ac:	4a400104 	addi	r9,r9,4
  8043b0:	223ffc36 	bltu	r4,r8,8043a4 <__alt_mem_onchip_mem+0xff7843a4>
  8043b4:	393fff04 	addi	r4,r7,-4
  8043b8:	2008d0ba 	srli	r4,r4,2
  8043bc:	39c000cc 	andi	r7,r7,3
  8043c0:	21000044 	addi	r4,r4,1
  8043c4:	2109883a 	add	r4,r4,r4
  8043c8:	2109883a 	add	r4,r4,r4
  8043cc:	1907883a 	add	r3,r3,r4
  8043d0:	38000526 	beq	r7,zero,8043e8 <memset+0x118>
  8043d4:	19cf883a 	add	r7,r3,r7
  8043d8:	19400005 	stb	r5,0(r3)
  8043dc:	18c00044 	addi	r3,r3,1
  8043e0:	38fffd1e 	bne	r7,r3,8043d8 <__alt_mem_onchip_mem+0xff7843d8>
  8043e4:	f800283a 	ret
  8043e8:	f800283a 	ret
  8043ec:	2007883a 	mov	r3,r4
  8043f0:	300f883a 	mov	r7,r6
  8043f4:	003fc706 	br	804314 <__alt_mem_onchip_mem+0xff784314>

008043f8 <_open_r>:
  8043f8:	defffd04 	addi	sp,sp,-12
  8043fc:	2805883a 	mov	r2,r5
  804400:	dc000015 	stw	r16,0(sp)
  804404:	040020b4 	movhi	r16,130
  804408:	dc400115 	stw	r17,4(sp)
  80440c:	300b883a 	mov	r5,r6
  804410:	84221504 	addi	r16,r16,-30636
  804414:	2023883a 	mov	r17,r4
  804418:	380d883a 	mov	r6,r7
  80441c:	1009883a 	mov	r4,r2
  804420:	dfc00215 	stw	ra,8(sp)
  804424:	80000015 	stw	zero,0(r16)
  804428:	0810cb80 	call	810cb8 <open>
  80442c:	00ffffc4 	movi	r3,-1
  804430:	10c00526 	beq	r2,r3,804448 <_open_r+0x50>
  804434:	dfc00217 	ldw	ra,8(sp)
  804438:	dc400117 	ldw	r17,4(sp)
  80443c:	dc000017 	ldw	r16,0(sp)
  804440:	dec00304 	addi	sp,sp,12
  804444:	f800283a 	ret
  804448:	80c00017 	ldw	r3,0(r16)
  80444c:	183ff926 	beq	r3,zero,804434 <__alt_mem_onchip_mem+0xff784434>
  804450:	88c00015 	stw	r3,0(r17)
  804454:	003ff706 	br	804434 <__alt_mem_onchip_mem+0xff784434>

00804458 <_printf_r>:
  804458:	defffd04 	addi	sp,sp,-12
  80445c:	2805883a 	mov	r2,r5
  804460:	dfc00015 	stw	ra,0(sp)
  804464:	d9800115 	stw	r6,4(sp)
  804468:	d9c00215 	stw	r7,8(sp)
  80446c:	21400217 	ldw	r5,8(r4)
  804470:	d9c00104 	addi	r7,sp,4
  804474:	100d883a 	mov	r6,r2
  804478:	08049b00 	call	8049b0 <___vfprintf_internal_r>
  80447c:	dfc00017 	ldw	ra,0(sp)
  804480:	dec00304 	addi	sp,sp,12
  804484:	f800283a 	ret

00804488 <printf>:
  804488:	defffc04 	addi	sp,sp,-16
  80448c:	dfc00015 	stw	ra,0(sp)
  804490:	d9400115 	stw	r5,4(sp)
  804494:	d9800215 	stw	r6,8(sp)
  804498:	d9c00315 	stw	r7,12(sp)
  80449c:	00802074 	movhi	r2,129
  8044a0:	109a6e04 	addi	r2,r2,27064
  8044a4:	10800017 	ldw	r2,0(r2)
  8044a8:	200b883a 	mov	r5,r4
  8044ac:	d9800104 	addi	r6,sp,4
  8044b0:	11000217 	ldw	r4,8(r2)
  8044b4:	0806ba80 	call	806ba8 <__vfprintf_internal>
  8044b8:	dfc00017 	ldw	ra,0(sp)
  8044bc:	dec00404 	addi	sp,sp,16
  8044c0:	f800283a 	ret

008044c4 <_puts_r>:
  8044c4:	defff604 	addi	sp,sp,-40
  8044c8:	dc000715 	stw	r16,28(sp)
  8044cc:	2021883a 	mov	r16,r4
  8044d0:	2809883a 	mov	r4,r5
  8044d4:	dc400815 	stw	r17,32(sp)
  8044d8:	dfc00915 	stw	ra,36(sp)
  8044dc:	2823883a 	mov	r17,r5
  8044e0:	08049180 	call	804918 <strlen>
  8044e4:	10c00044 	addi	r3,r2,1
  8044e8:	d8800115 	stw	r2,4(sp)
  8044ec:	00802074 	movhi	r2,129
  8044f0:	1091e604 	addi	r2,r2,18328
  8044f4:	d8800215 	stw	r2,8(sp)
  8044f8:	00800044 	movi	r2,1
  8044fc:	d8800315 	stw	r2,12(sp)
  804500:	00800084 	movi	r2,2
  804504:	dc400015 	stw	r17,0(sp)
  804508:	d8c00615 	stw	r3,24(sp)
  80450c:	dec00415 	stw	sp,16(sp)
  804510:	d8800515 	stw	r2,20(sp)
  804514:	80000226 	beq	r16,zero,804520 <_puts_r+0x5c>
  804518:	80800e17 	ldw	r2,56(r16)
  80451c:	10001426 	beq	r2,zero,804570 <_puts_r+0xac>
  804520:	81400217 	ldw	r5,8(r16)
  804524:	2880030b 	ldhu	r2,12(r5)
  804528:	10c8000c 	andi	r3,r2,8192
  80452c:	1800061e 	bne	r3,zero,804548 <_puts_r+0x84>
  804530:	29001917 	ldw	r4,100(r5)
  804534:	00f7ffc4 	movi	r3,-8193
  804538:	10880014 	ori	r2,r2,8192
  80453c:	20c6703a 	and	r3,r4,r3
  804540:	2880030d 	sth	r2,12(r5)
  804544:	28c01915 	stw	r3,100(r5)
  804548:	d9800404 	addi	r6,sp,16
  80454c:	8009883a 	mov	r4,r16
  804550:	08092380 	call	809238 <__sfvwrite_r>
  804554:	1000091e 	bne	r2,zero,80457c <_puts_r+0xb8>
  804558:	00800284 	movi	r2,10
  80455c:	dfc00917 	ldw	ra,36(sp)
  804560:	dc400817 	ldw	r17,32(sp)
  804564:	dc000717 	ldw	r16,28(sp)
  804568:	dec00a04 	addi	sp,sp,40
  80456c:	f800283a 	ret
  804570:	8009883a 	mov	r4,r16
  804574:	0808d080 	call	808d08 <__sinit>
  804578:	003fe906 	br	804520 <__alt_mem_onchip_mem+0xff784520>
  80457c:	00bfffc4 	movi	r2,-1
  804580:	003ff606 	br	80455c <__alt_mem_onchip_mem+0xff78455c>

00804584 <puts>:
  804584:	00802074 	movhi	r2,129
  804588:	109a6e04 	addi	r2,r2,27064
  80458c:	200b883a 	mov	r5,r4
  804590:	11000017 	ldw	r4,0(r2)
  804594:	08044c41 	jmpi	8044c4 <_puts_r>

00804598 <lflush>:
  804598:	2080030b 	ldhu	r2,12(r4)
  80459c:	00c00244 	movi	r3,9
  8045a0:	1080024c 	andi	r2,r2,9
  8045a4:	10c00226 	beq	r2,r3,8045b0 <lflush+0x18>
  8045a8:	0005883a 	mov	r2,zero
  8045ac:	f800283a 	ret
  8045b0:	08089881 	jmpi	808988 <fflush>

008045b4 <__srefill_r>:
  8045b4:	defffc04 	addi	sp,sp,-16
  8045b8:	dc400115 	stw	r17,4(sp)
  8045bc:	dc000015 	stw	r16,0(sp)
  8045c0:	dfc00315 	stw	ra,12(sp)
  8045c4:	dc800215 	stw	r18,8(sp)
  8045c8:	2023883a 	mov	r17,r4
  8045cc:	2821883a 	mov	r16,r5
  8045d0:	20000226 	beq	r4,zero,8045dc <__srefill_r+0x28>
  8045d4:	20800e17 	ldw	r2,56(r4)
  8045d8:	10003c26 	beq	r2,zero,8046cc <__srefill_r+0x118>
  8045dc:	80c0030b 	ldhu	r3,12(r16)
  8045e0:	1908000c 	andi	r4,r3,8192
  8045e4:	1805883a 	mov	r2,r3
  8045e8:	2000071e 	bne	r4,zero,804608 <__srefill_r+0x54>
  8045ec:	81001917 	ldw	r4,100(r16)
  8045f0:	18880014 	ori	r2,r3,8192
  8045f4:	00f7ffc4 	movi	r3,-8193
  8045f8:	20c8703a 	and	r4,r4,r3
  8045fc:	8080030d 	sth	r2,12(r16)
  804600:	1007883a 	mov	r3,r2
  804604:	81001915 	stw	r4,100(r16)
  804608:	80000115 	stw	zero,4(r16)
  80460c:	1100080c 	andi	r4,r2,32
  804610:	2000571e 	bne	r4,zero,804770 <__srefill_r+0x1bc>
  804614:	1100010c 	andi	r4,r2,4
  804618:	20001f26 	beq	r4,zero,804698 <__srefill_r+0xe4>
  80461c:	81400c17 	ldw	r5,48(r16)
  804620:	28000826 	beq	r5,zero,804644 <__srefill_r+0x90>
  804624:	80801004 	addi	r2,r16,64
  804628:	28800226 	beq	r5,r2,804634 <__srefill_r+0x80>
  80462c:	8809883a 	mov	r4,r17
  804630:	0808f280 	call	808f28 <_free_r>
  804634:	80800f17 	ldw	r2,60(r16)
  804638:	80000c15 	stw	zero,48(r16)
  80463c:	80800115 	stw	r2,4(r16)
  804640:	1000391e 	bne	r2,zero,804728 <__srefill_r+0x174>
  804644:	80800417 	ldw	r2,16(r16)
  804648:	10004b26 	beq	r2,zero,804778 <__srefill_r+0x1c4>
  80464c:	8480030b 	ldhu	r18,12(r16)
  804650:	908000cc 	andi	r2,r18,3
  804654:	10001f1e 	bne	r2,zero,8046d4 <__srefill_r+0x120>
  804658:	81800417 	ldw	r6,16(r16)
  80465c:	80800817 	ldw	r2,32(r16)
  804660:	81c00517 	ldw	r7,20(r16)
  804664:	81400717 	ldw	r5,28(r16)
  804668:	81800015 	stw	r6,0(r16)
  80466c:	8809883a 	mov	r4,r17
  804670:	103ee83a 	callr	r2
  804674:	80800115 	stw	r2,4(r16)
  804678:	00800e0e 	bge	zero,r2,8046b4 <__srefill_r+0x100>
  80467c:	0005883a 	mov	r2,zero
  804680:	dfc00317 	ldw	ra,12(sp)
  804684:	dc800217 	ldw	r18,8(sp)
  804688:	dc400117 	ldw	r17,4(sp)
  80468c:	dc000017 	ldw	r16,0(sp)
  804690:	dec00404 	addi	sp,sp,16
  804694:	f800283a 	ret
  804698:	1100040c 	andi	r4,r2,16
  80469c:	20003026 	beq	r4,zero,804760 <__srefill_r+0x1ac>
  8046a0:	1080020c 	andi	r2,r2,8
  8046a4:	1000241e 	bne	r2,zero,804738 <__srefill_r+0x184>
  8046a8:	18c00114 	ori	r3,r3,4
  8046ac:	80c0030d 	sth	r3,12(r16)
  8046b0:	003fe406 	br	804644 <__alt_mem_onchip_mem+0xff784644>
  8046b4:	80c0030b 	ldhu	r3,12(r16)
  8046b8:	1000161e 	bne	r2,zero,804714 <__srefill_r+0x160>
  8046bc:	18c00814 	ori	r3,r3,32
  8046c0:	00bfffc4 	movi	r2,-1
  8046c4:	80c0030d 	sth	r3,12(r16)
  8046c8:	003fed06 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  8046cc:	0808d080 	call	808d08 <__sinit>
  8046d0:	003fc206 	br	8045dc <__alt_mem_onchip_mem+0xff7845dc>
  8046d4:	00802074 	movhi	r2,129
  8046d8:	109a6d04 	addi	r2,r2,27060
  8046dc:	11000017 	ldw	r4,0(r2)
  8046e0:	01402034 	movhi	r5,128
  8046e4:	00800044 	movi	r2,1
  8046e8:	29516604 	addi	r5,r5,17816
  8046ec:	8080030d 	sth	r2,12(r16)
  8046f0:	08096f40 	call	8096f4 <_fwalk>
  8046f4:	00800244 	movi	r2,9
  8046f8:	8480030d 	sth	r18,12(r16)
  8046fc:	9480024c 	andi	r18,r18,9
  804700:	90bfd51e 	bne	r18,r2,804658 <__alt_mem_onchip_mem+0xff784658>
  804704:	800b883a 	mov	r5,r16
  804708:	8809883a 	mov	r4,r17
  80470c:	08087100 	call	808710 <__sflush_r>
  804710:	003fd106 	br	804658 <__alt_mem_onchip_mem+0xff784658>
  804714:	18c01014 	ori	r3,r3,64
  804718:	80000115 	stw	zero,4(r16)
  80471c:	00bfffc4 	movi	r2,-1
  804720:	80c0030d 	sth	r3,12(r16)
  804724:	003fd606 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  804728:	80c00e17 	ldw	r3,56(r16)
  80472c:	0005883a 	mov	r2,zero
  804730:	80c00015 	stw	r3,0(r16)
  804734:	003fd206 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  804738:	800b883a 	mov	r5,r16
  80473c:	8809883a 	mov	r4,r17
  804740:	080892c0 	call	80892c <_fflush_r>
  804744:	10000a1e 	bne	r2,zero,804770 <__srefill_r+0x1bc>
  804748:	8080030b 	ldhu	r2,12(r16)
  80474c:	00fffdc4 	movi	r3,-9
  804750:	80000215 	stw	zero,8(r16)
  804754:	1886703a 	and	r3,r3,r2
  804758:	80000615 	stw	zero,24(r16)
  80475c:	003fd206 	br	8046a8 <__alt_mem_onchip_mem+0xff7846a8>
  804760:	00800244 	movi	r2,9
  804764:	88800015 	stw	r2,0(r17)
  804768:	18c01014 	ori	r3,r3,64
  80476c:	80c0030d 	sth	r3,12(r16)
  804770:	00bfffc4 	movi	r2,-1
  804774:	003fc206 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  804778:	800b883a 	mov	r5,r16
  80477c:	8809883a 	mov	r4,r17
  804780:	08039080 	call	803908 <__smakebuf_r>
  804784:	003fb106 	br	80464c <__alt_mem_onchip_mem+0xff78464c>

00804788 <_sbrk_r>:
  804788:	defffd04 	addi	sp,sp,-12
  80478c:	dc000015 	stw	r16,0(sp)
  804790:	040020b4 	movhi	r16,130
  804794:	dc400115 	stw	r17,4(sp)
  804798:	84221504 	addi	r16,r16,-30636
  80479c:	2023883a 	mov	r17,r4
  8047a0:	2809883a 	mov	r4,r5
  8047a4:	dfc00215 	stw	ra,8(sp)
  8047a8:	80000015 	stw	zero,0(r16)
  8047ac:	0810fa80 	call	810fa8 <sbrk>
  8047b0:	00ffffc4 	movi	r3,-1
  8047b4:	10c00526 	beq	r2,r3,8047cc <_sbrk_r+0x44>
  8047b8:	dfc00217 	ldw	ra,8(sp)
  8047bc:	dc400117 	ldw	r17,4(sp)
  8047c0:	dc000017 	ldw	r16,0(sp)
  8047c4:	dec00304 	addi	sp,sp,12
  8047c8:	f800283a 	ret
  8047cc:	80c00017 	ldw	r3,0(r16)
  8047d0:	183ff926 	beq	r3,zero,8047b8 <__alt_mem_onchip_mem+0xff7847b8>
  8047d4:	88c00015 	stw	r3,0(r17)
  8047d8:	003ff706 	br	8047b8 <__alt_mem_onchip_mem+0xff7847b8>

008047dc <__sread>:
  8047dc:	defffe04 	addi	sp,sp,-8
  8047e0:	dc000015 	stw	r16,0(sp)
  8047e4:	2821883a 	mov	r16,r5
  8047e8:	2940038f 	ldh	r5,14(r5)
  8047ec:	dfc00115 	stw	ra,4(sp)
  8047f0:	080ad900 	call	80ad90 <_read_r>
  8047f4:	10000716 	blt	r2,zero,804814 <__sread+0x38>
  8047f8:	80c01417 	ldw	r3,80(r16)
  8047fc:	1887883a 	add	r3,r3,r2
  804800:	80c01415 	stw	r3,80(r16)
  804804:	dfc00117 	ldw	ra,4(sp)
  804808:	dc000017 	ldw	r16,0(sp)
  80480c:	dec00204 	addi	sp,sp,8
  804810:	f800283a 	ret
  804814:	80c0030b 	ldhu	r3,12(r16)
  804818:	18fbffcc 	andi	r3,r3,61439
  80481c:	80c0030d 	sth	r3,12(r16)
  804820:	dfc00117 	ldw	ra,4(sp)
  804824:	dc000017 	ldw	r16,0(sp)
  804828:	dec00204 	addi	sp,sp,8
  80482c:	f800283a 	ret

00804830 <__seofread>:
  804830:	0005883a 	mov	r2,zero
  804834:	f800283a 	ret

00804838 <__swrite>:
  804838:	2880030b 	ldhu	r2,12(r5)
  80483c:	defffb04 	addi	sp,sp,-20
  804840:	dcc00315 	stw	r19,12(sp)
  804844:	dc800215 	stw	r18,8(sp)
  804848:	dc400115 	stw	r17,4(sp)
  80484c:	dc000015 	stw	r16,0(sp)
  804850:	dfc00415 	stw	ra,16(sp)
  804854:	10c0400c 	andi	r3,r2,256
  804858:	2821883a 	mov	r16,r5
  80485c:	2023883a 	mov	r17,r4
  804860:	3025883a 	mov	r18,r6
  804864:	3827883a 	mov	r19,r7
  804868:	18000526 	beq	r3,zero,804880 <__swrite+0x48>
  80486c:	2940038f 	ldh	r5,14(r5)
  804870:	01c00084 	movi	r7,2
  804874:	000d883a 	mov	r6,zero
  804878:	08099ac0 	call	8099ac <_lseek_r>
  80487c:	8080030b 	ldhu	r2,12(r16)
  804880:	8140038f 	ldh	r5,14(r16)
  804884:	10bbffcc 	andi	r2,r2,61439
  804888:	980f883a 	mov	r7,r19
  80488c:	900d883a 	mov	r6,r18
  804890:	8809883a 	mov	r4,r17
  804894:	8080030d 	sth	r2,12(r16)
  804898:	dfc00417 	ldw	ra,16(sp)
  80489c:	dcc00317 	ldw	r19,12(sp)
  8048a0:	dc800217 	ldw	r18,8(sp)
  8048a4:	dc400117 	ldw	r17,4(sp)
  8048a8:	dc000017 	ldw	r16,0(sp)
  8048ac:	dec00504 	addi	sp,sp,20
  8048b0:	0806c801 	jmpi	806c80 <_write_r>

008048b4 <__sseek>:
  8048b4:	defffe04 	addi	sp,sp,-8
  8048b8:	dc000015 	stw	r16,0(sp)
  8048bc:	2821883a 	mov	r16,r5
  8048c0:	2940038f 	ldh	r5,14(r5)
  8048c4:	dfc00115 	stw	ra,4(sp)
  8048c8:	08099ac0 	call	8099ac <_lseek_r>
  8048cc:	00ffffc4 	movi	r3,-1
  8048d0:	10c00826 	beq	r2,r3,8048f4 <__sseek+0x40>
  8048d4:	80c0030b 	ldhu	r3,12(r16)
  8048d8:	80801415 	stw	r2,80(r16)
  8048dc:	18c40014 	ori	r3,r3,4096
  8048e0:	80c0030d 	sth	r3,12(r16)
  8048e4:	dfc00117 	ldw	ra,4(sp)
  8048e8:	dc000017 	ldw	r16,0(sp)
  8048ec:	dec00204 	addi	sp,sp,8
  8048f0:	f800283a 	ret
  8048f4:	80c0030b 	ldhu	r3,12(r16)
  8048f8:	18fbffcc 	andi	r3,r3,61439
  8048fc:	80c0030d 	sth	r3,12(r16)
  804900:	dfc00117 	ldw	ra,4(sp)
  804904:	dc000017 	ldw	r16,0(sp)
  804908:	dec00204 	addi	sp,sp,8
  80490c:	f800283a 	ret

00804910 <__sclose>:
  804910:	2940038f 	ldh	r5,14(r5)
  804914:	0806e341 	jmpi	806e34 <_close_r>

00804918 <strlen>:
  804918:	208000cc 	andi	r2,r4,3
  80491c:	10002026 	beq	r2,zero,8049a0 <strlen+0x88>
  804920:	20800007 	ldb	r2,0(r4)
  804924:	10002026 	beq	r2,zero,8049a8 <strlen+0x90>
  804928:	2005883a 	mov	r2,r4
  80492c:	00000206 	br	804938 <strlen+0x20>
  804930:	10c00007 	ldb	r3,0(r2)
  804934:	18001826 	beq	r3,zero,804998 <strlen+0x80>
  804938:	10800044 	addi	r2,r2,1
  80493c:	10c000cc 	andi	r3,r2,3
  804940:	183ffb1e 	bne	r3,zero,804930 <__alt_mem_onchip_mem+0xff784930>
  804944:	10c00017 	ldw	r3,0(r2)
  804948:	01ffbff4 	movhi	r7,65279
  80494c:	39ffbfc4 	addi	r7,r7,-257
  804950:	00ca303a 	nor	r5,zero,r3
  804954:	01a02074 	movhi	r6,32897
  804958:	19c7883a 	add	r3,r3,r7
  80495c:	31a02004 	addi	r6,r6,-32640
  804960:	1946703a 	and	r3,r3,r5
  804964:	1986703a 	and	r3,r3,r6
  804968:	1800091e 	bne	r3,zero,804990 <strlen+0x78>
  80496c:	10800104 	addi	r2,r2,4
  804970:	10c00017 	ldw	r3,0(r2)
  804974:	19cb883a 	add	r5,r3,r7
  804978:	00c6303a 	nor	r3,zero,r3
  80497c:	28c6703a 	and	r3,r5,r3
  804980:	1986703a 	and	r3,r3,r6
  804984:	183ff926 	beq	r3,zero,80496c <__alt_mem_onchip_mem+0xff78496c>
  804988:	00000106 	br	804990 <strlen+0x78>
  80498c:	10800044 	addi	r2,r2,1
  804990:	10c00007 	ldb	r3,0(r2)
  804994:	183ffd1e 	bne	r3,zero,80498c <__alt_mem_onchip_mem+0xff78498c>
  804998:	1105c83a 	sub	r2,r2,r4
  80499c:	f800283a 	ret
  8049a0:	2005883a 	mov	r2,r4
  8049a4:	003fe706 	br	804944 <__alt_mem_onchip_mem+0xff784944>
  8049a8:	0005883a 	mov	r2,zero
  8049ac:	f800283a 	ret

008049b0 <___vfprintf_internal_r>:
  8049b0:	deffb804 	addi	sp,sp,-288
  8049b4:	dfc04715 	stw	ra,284(sp)
  8049b8:	ddc04515 	stw	r23,276(sp)
  8049bc:	dd404315 	stw	r21,268(sp)
  8049c0:	d9002c15 	stw	r4,176(sp)
  8049c4:	282f883a 	mov	r23,r5
  8049c8:	302b883a 	mov	r21,r6
  8049cc:	d9c02d15 	stw	r7,180(sp)
  8049d0:	df004615 	stw	fp,280(sp)
  8049d4:	dd804415 	stw	r22,272(sp)
  8049d8:	dd004215 	stw	r20,264(sp)
  8049dc:	dcc04115 	stw	r19,260(sp)
  8049e0:	dc804015 	stw	r18,256(sp)
  8049e4:	dc403f15 	stw	r17,252(sp)
  8049e8:	dc003e15 	stw	r16,248(sp)
  8049ec:	080997c0 	call	80997c <_localeconv_r>
  8049f0:	10800017 	ldw	r2,0(r2)
  8049f4:	1009883a 	mov	r4,r2
  8049f8:	d8803415 	stw	r2,208(sp)
  8049fc:	08049180 	call	804918 <strlen>
  804a00:	d8803715 	stw	r2,220(sp)
  804a04:	d8802c17 	ldw	r2,176(sp)
  804a08:	10000226 	beq	r2,zero,804a14 <___vfprintf_internal_r+0x64>
  804a0c:	10800e17 	ldw	r2,56(r2)
  804a10:	1000f926 	beq	r2,zero,804df8 <___vfprintf_internal_r+0x448>
  804a14:	b880030b 	ldhu	r2,12(r23)
  804a18:	10c8000c 	andi	r3,r2,8192
  804a1c:	1800061e 	bne	r3,zero,804a38 <___vfprintf_internal_r+0x88>
  804a20:	b9001917 	ldw	r4,100(r23)
  804a24:	00f7ffc4 	movi	r3,-8193
  804a28:	10880014 	ori	r2,r2,8192
  804a2c:	20c6703a 	and	r3,r4,r3
  804a30:	b880030d 	sth	r2,12(r23)
  804a34:	b8c01915 	stw	r3,100(r23)
  804a38:	10c0020c 	andi	r3,r2,8
  804a3c:	1800c126 	beq	r3,zero,804d44 <___vfprintf_internal_r+0x394>
  804a40:	b8c00417 	ldw	r3,16(r23)
  804a44:	1800bf26 	beq	r3,zero,804d44 <___vfprintf_internal_r+0x394>
  804a48:	1080068c 	andi	r2,r2,26
  804a4c:	00c00284 	movi	r3,10
  804a50:	10c0c426 	beq	r2,r3,804d64 <___vfprintf_internal_r+0x3b4>
  804a54:	d8c00404 	addi	r3,sp,16
  804a58:	05002074 	movhi	r20,129
  804a5c:	d9001e04 	addi	r4,sp,120
  804a60:	a511f784 	addi	r20,r20,18398
  804a64:	d8c01e15 	stw	r3,120(sp)
  804a68:	d8002015 	stw	zero,128(sp)
  804a6c:	d8001f15 	stw	zero,124(sp)
  804a70:	d8003315 	stw	zero,204(sp)
  804a74:	d8003615 	stw	zero,216(sp)
  804a78:	d8003815 	stw	zero,224(sp)
  804a7c:	1811883a 	mov	r8,r3
  804a80:	d8003915 	stw	zero,228(sp)
  804a84:	d8003a15 	stw	zero,232(sp)
  804a88:	d8002f15 	stw	zero,188(sp)
  804a8c:	d9002815 	stw	r4,160(sp)
  804a90:	a8800007 	ldb	r2,0(r21)
  804a94:	10027b26 	beq	r2,zero,805484 <___vfprintf_internal_r+0xad4>
  804a98:	00c00944 	movi	r3,37
  804a9c:	a821883a 	mov	r16,r21
  804aa0:	10c0021e 	bne	r2,r3,804aac <___vfprintf_internal_r+0xfc>
  804aa4:	00001406 	br	804af8 <___vfprintf_internal_r+0x148>
  804aa8:	10c00326 	beq	r2,r3,804ab8 <___vfprintf_internal_r+0x108>
  804aac:	84000044 	addi	r16,r16,1
  804ab0:	80800007 	ldb	r2,0(r16)
  804ab4:	103ffc1e 	bne	r2,zero,804aa8 <__alt_mem_onchip_mem+0xff784aa8>
  804ab8:	8563c83a 	sub	r17,r16,r21
  804abc:	88000e26 	beq	r17,zero,804af8 <___vfprintf_internal_r+0x148>
  804ac0:	d8c02017 	ldw	r3,128(sp)
  804ac4:	d8801f17 	ldw	r2,124(sp)
  804ac8:	45400015 	stw	r21,0(r8)
  804acc:	1c47883a 	add	r3,r3,r17
  804ad0:	10800044 	addi	r2,r2,1
  804ad4:	d8c02015 	stw	r3,128(sp)
  804ad8:	44400115 	stw	r17,4(r8)
  804adc:	d8801f15 	stw	r2,124(sp)
  804ae0:	00c001c4 	movi	r3,7
  804ae4:	1880a716 	blt	r3,r2,804d84 <___vfprintf_internal_r+0x3d4>
  804ae8:	42000204 	addi	r8,r8,8
  804aec:	d9402f17 	ldw	r5,188(sp)
  804af0:	2c4b883a 	add	r5,r5,r17
  804af4:	d9402f15 	stw	r5,188(sp)
  804af8:	80800007 	ldb	r2,0(r16)
  804afc:	1000a826 	beq	r2,zero,804da0 <___vfprintf_internal_r+0x3f0>
  804b00:	84400047 	ldb	r17,1(r16)
  804b04:	00bfffc4 	movi	r2,-1
  804b08:	85400044 	addi	r21,r16,1
  804b0c:	d8002785 	stb	zero,158(sp)
  804b10:	0007883a 	mov	r3,zero
  804b14:	000f883a 	mov	r7,zero
  804b18:	d8802915 	stw	r2,164(sp)
  804b1c:	d8003115 	stw	zero,196(sp)
  804b20:	0025883a 	mov	r18,zero
  804b24:	01401604 	movi	r5,88
  804b28:	01800244 	movi	r6,9
  804b2c:	02800a84 	movi	r10,42
  804b30:	02401b04 	movi	r9,108
  804b34:	ad400044 	addi	r21,r21,1
  804b38:	88bff804 	addi	r2,r17,-32
  804b3c:	28830436 	bltu	r5,r2,805750 <___vfprintf_internal_r+0xda0>
  804b40:	100490ba 	slli	r2,r2,2
  804b44:	01002034 	movhi	r4,128
  804b48:	2112d604 	addi	r4,r4,19288
  804b4c:	1105883a 	add	r2,r2,r4
  804b50:	10800017 	ldw	r2,0(r2)
  804b54:	1000683a 	jmp	r2
  804b58:	00805670 	cmpltui	r2,zero,345
  804b5c:	00805750 	cmplti	r2,zero,349
  804b60:	00805750 	cmplti	r2,zero,349
  804b64:	00805690 	cmplti	r2,zero,346
  804b68:	00805750 	cmplti	r2,zero,349
  804b6c:	00805750 	cmplti	r2,zero,349
  804b70:	00805750 	cmplti	r2,zero,349
  804b74:	00805750 	cmplti	r2,zero,349
  804b78:	00805750 	cmplti	r2,zero,349
  804b7c:	00805750 	cmplti	r2,zero,349
  804b80:	00804e04 	movi	r2,312
  804b84:	008055ac 	andhi	r2,zero,342
  804b88:	00805750 	cmplti	r2,zero,349
  804b8c:	00804ccc 	andi	r2,zero,307
  804b90:	00804e2c 	andhi	r2,zero,312
  804b94:	00805750 	cmplti	r2,zero,349
  804b98:	00804e6c 	andhi	r2,zero,313
  804b9c:	00804e78 	rdprs	r2,zero,313
  804ba0:	00804e78 	rdprs	r2,zero,313
  804ba4:	00804e78 	rdprs	r2,zero,313
  804ba8:	00804e78 	rdprs	r2,zero,313
  804bac:	00804e78 	rdprs	r2,zero,313
  804bb0:	00804e78 	rdprs	r2,zero,313
  804bb4:	00804e78 	rdprs	r2,zero,313
  804bb8:	00804e78 	rdprs	r2,zero,313
  804bbc:	00804e78 	rdprs	r2,zero,313
  804bc0:	00805750 	cmplti	r2,zero,349
  804bc4:	00805750 	cmplti	r2,zero,349
  804bc8:	00805750 	cmplti	r2,zero,349
  804bcc:	00805750 	cmplti	r2,zero,349
  804bd0:	00805750 	cmplti	r2,zero,349
  804bd4:	00805750 	cmplti	r2,zero,349
  804bd8:	00805750 	cmplti	r2,zero,349
  804bdc:	00805750 	cmplti	r2,zero,349
  804be0:	00805750 	cmplti	r2,zero,349
  804be4:	00805750 	cmplti	r2,zero,349
  804be8:	00804eac 	andhi	r2,zero,314
  804bec:	00804f68 	cmpgeui	r2,zero,317
  804bf0:	00805750 	cmplti	r2,zero,349
  804bf4:	00804f68 	cmpgeui	r2,zero,317
  804bf8:	00805750 	cmplti	r2,zero,349
  804bfc:	00805750 	cmplti	r2,zero,349
  804c00:	00805750 	cmplti	r2,zero,349
  804c04:	00805750 	cmplti	r2,zero,349
  804c08:	00805008 	cmpgei	r2,zero,320
  804c0c:	00805750 	cmplti	r2,zero,349
  804c10:	00805750 	cmplti	r2,zero,349
  804c14:	00805014 	movui	r2,320
  804c18:	00805750 	cmplti	r2,zero,349
  804c1c:	00805750 	cmplti	r2,zero,349
  804c20:	00805750 	cmplti	r2,zero,349
  804c24:	00805750 	cmplti	r2,zero,349
  804c28:	00805750 	cmplti	r2,zero,349
  804c2c:	0080548c 	andi	r2,zero,338
  804c30:	00805750 	cmplti	r2,zero,349
  804c34:	00805750 	cmplti	r2,zero,349
  804c38:	008054ec 	andhi	r2,zero,339
  804c3c:	00805750 	cmplti	r2,zero,349
  804c40:	00805750 	cmplti	r2,zero,349
  804c44:	00805750 	cmplti	r2,zero,349
  804c48:	00805750 	cmplti	r2,zero,349
  804c4c:	00805750 	cmplti	r2,zero,349
  804c50:	00805750 	cmplti	r2,zero,349
  804c54:	00805750 	cmplti	r2,zero,349
  804c58:	00805750 	cmplti	r2,zero,349
  804c5c:	00805750 	cmplti	r2,zero,349
  804c60:	00805750 	cmplti	r2,zero,349
  804c64:	008056fc 	xorhi	r2,zero,347
  804c68:	0080569c 	xori	r2,zero,346
  804c6c:	00804f68 	cmpgeui	r2,zero,317
  804c70:	00804f68 	cmpgeui	r2,zero,317
  804c74:	00804f68 	cmpgeui	r2,zero,317
  804c78:	008056ac 	andhi	r2,zero,346
  804c7c:	0080569c 	xori	r2,zero,346
  804c80:	00805750 	cmplti	r2,zero,349
  804c84:	00805750 	cmplti	r2,zero,349
  804c88:	008056b8 	rdprs	r2,zero,346
  804c8c:	00805750 	cmplti	r2,zero,349
  804c90:	008056c8 	cmpgei	r2,zero,347
  804c94:	0080559c 	xori	r2,zero,342
  804c98:	00804cd8 	cmpnei	r2,zero,307
  804c9c:	008055bc 	xorhi	r2,zero,342
  804ca0:	00805750 	cmplti	r2,zero,349
  804ca4:	008055c8 	cmpgei	r2,zero,343
  804ca8:	00805750 	cmplti	r2,zero,349
  804cac:	00805624 	muli	r2,zero,344
  804cb0:	00805750 	cmplti	r2,zero,349
  804cb4:	00805750 	cmplti	r2,zero,349
  804cb8:	00805634 	movhi	r2,344
  804cbc:	d9003117 	ldw	r4,196(sp)
  804cc0:	d8802d15 	stw	r2,180(sp)
  804cc4:	0109c83a 	sub	r4,zero,r4
  804cc8:	d9003115 	stw	r4,196(sp)
  804ccc:	94800114 	ori	r18,r18,4
  804cd0:	ac400007 	ldb	r17,0(r21)
  804cd4:	003f9706 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  804cd8:	00800c04 	movi	r2,48
  804cdc:	d9002d17 	ldw	r4,180(sp)
  804ce0:	d9402917 	ldw	r5,164(sp)
  804ce4:	d8802705 	stb	r2,156(sp)
  804ce8:	00801e04 	movi	r2,120
  804cec:	d8802745 	stb	r2,157(sp)
  804cf0:	d8002785 	stb	zero,158(sp)
  804cf4:	20c00104 	addi	r3,r4,4
  804cf8:	24c00017 	ldw	r19,0(r4)
  804cfc:	002d883a 	mov	r22,zero
  804d00:	90800094 	ori	r2,r18,2
  804d04:	28029a16 	blt	r5,zero,805770 <___vfprintf_internal_r+0xdc0>
  804d08:	00bfdfc4 	movi	r2,-129
  804d0c:	90a4703a 	and	r18,r18,r2
  804d10:	d8c02d15 	stw	r3,180(sp)
  804d14:	94800094 	ori	r18,r18,2
  804d18:	9802871e 	bne	r19,zero,805738 <___vfprintf_internal_r+0xd88>
  804d1c:	00802074 	movhi	r2,129
  804d20:	1091f004 	addi	r2,r2,18368
  804d24:	d8803915 	stw	r2,228(sp)
  804d28:	04401e04 	movi	r17,120
  804d2c:	d8802917 	ldw	r2,164(sp)
  804d30:	0039883a 	mov	fp,zero
  804d34:	1001e926 	beq	r2,zero,8054dc <___vfprintf_internal_r+0xb2c>
  804d38:	0027883a 	mov	r19,zero
  804d3c:	002d883a 	mov	r22,zero
  804d40:	00020506 	br	805558 <___vfprintf_internal_r+0xba8>
  804d44:	d9002c17 	ldw	r4,176(sp)
  804d48:	b80b883a 	mov	r5,r23
  804d4c:	0806ce00 	call	806ce0 <__swsetup_r>
  804d50:	1005ac1e 	bne	r2,zero,806404 <___vfprintf_internal_r+0x1a54>
  804d54:	b880030b 	ldhu	r2,12(r23)
  804d58:	00c00284 	movi	r3,10
  804d5c:	1080068c 	andi	r2,r2,26
  804d60:	10ff3c1e 	bne	r2,r3,804a54 <__alt_mem_onchip_mem+0xff784a54>
  804d64:	b880038f 	ldh	r2,14(r23)
  804d68:	103f3a16 	blt	r2,zero,804a54 <__alt_mem_onchip_mem+0xff784a54>
  804d6c:	d9c02d17 	ldw	r7,180(sp)
  804d70:	d9002c17 	ldw	r4,176(sp)
  804d74:	a80d883a 	mov	r6,r21
  804d78:	b80b883a 	mov	r5,r23
  804d7c:	0806bc40 	call	806bc4 <__sbprintf>
  804d80:	00001106 	br	804dc8 <___vfprintf_internal_r+0x418>
  804d84:	d9002c17 	ldw	r4,176(sp)
  804d88:	d9801e04 	addi	r6,sp,120
  804d8c:	b80b883a 	mov	r5,r23
  804d90:	080b5a00 	call	80b5a0 <__sprint_r>
  804d94:	1000081e 	bne	r2,zero,804db8 <___vfprintf_internal_r+0x408>
  804d98:	da000404 	addi	r8,sp,16
  804d9c:	003f5306 	br	804aec <__alt_mem_onchip_mem+0xff784aec>
  804da0:	d8802017 	ldw	r2,128(sp)
  804da4:	10000426 	beq	r2,zero,804db8 <___vfprintf_internal_r+0x408>
  804da8:	d9002c17 	ldw	r4,176(sp)
  804dac:	d9801e04 	addi	r6,sp,120
  804db0:	b80b883a 	mov	r5,r23
  804db4:	080b5a00 	call	80b5a0 <__sprint_r>
  804db8:	b880030b 	ldhu	r2,12(r23)
  804dbc:	1080100c 	andi	r2,r2,64
  804dc0:	1005901e 	bne	r2,zero,806404 <___vfprintf_internal_r+0x1a54>
  804dc4:	d8802f17 	ldw	r2,188(sp)
  804dc8:	dfc04717 	ldw	ra,284(sp)
  804dcc:	df004617 	ldw	fp,280(sp)
  804dd0:	ddc04517 	ldw	r23,276(sp)
  804dd4:	dd804417 	ldw	r22,272(sp)
  804dd8:	dd404317 	ldw	r21,268(sp)
  804ddc:	dd004217 	ldw	r20,264(sp)
  804de0:	dcc04117 	ldw	r19,260(sp)
  804de4:	dc804017 	ldw	r18,256(sp)
  804de8:	dc403f17 	ldw	r17,252(sp)
  804dec:	dc003e17 	ldw	r16,248(sp)
  804df0:	dec04804 	addi	sp,sp,288
  804df4:	f800283a 	ret
  804df8:	d9002c17 	ldw	r4,176(sp)
  804dfc:	0808d080 	call	808d08 <__sinit>
  804e00:	003f0406 	br	804a14 <__alt_mem_onchip_mem+0xff784a14>
  804e04:	d8802d17 	ldw	r2,180(sp)
  804e08:	d9002d17 	ldw	r4,180(sp)
  804e0c:	10800017 	ldw	r2,0(r2)
  804e10:	d8803115 	stw	r2,196(sp)
  804e14:	20800104 	addi	r2,r4,4
  804e18:	d9003117 	ldw	r4,196(sp)
  804e1c:	203fa716 	blt	r4,zero,804cbc <__alt_mem_onchip_mem+0xff784cbc>
  804e20:	d8802d15 	stw	r2,180(sp)
  804e24:	ac400007 	ldb	r17,0(r21)
  804e28:	003f4206 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  804e2c:	ac400007 	ldb	r17,0(r21)
  804e30:	aac00044 	addi	r11,r21,1
  804e34:	8a872826 	beq	r17,r10,806ad8 <___vfprintf_internal_r+0x2128>
  804e38:	88bff404 	addi	r2,r17,-48
  804e3c:	0009883a 	mov	r4,zero
  804e40:	30867d36 	bltu	r6,r2,806838 <___vfprintf_internal_r+0x1e88>
  804e44:	5c400007 	ldb	r17,0(r11)
  804e48:	210002a4 	muli	r4,r4,10
  804e4c:	5d400044 	addi	r21,r11,1
  804e50:	a817883a 	mov	r11,r21
  804e54:	2089883a 	add	r4,r4,r2
  804e58:	88bff404 	addi	r2,r17,-48
  804e5c:	30bff92e 	bgeu	r6,r2,804e44 <__alt_mem_onchip_mem+0xff784e44>
  804e60:	2005c916 	blt	r4,zero,806588 <___vfprintf_internal_r+0x1bd8>
  804e64:	d9002915 	stw	r4,164(sp)
  804e68:	003f3306 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  804e6c:	94802014 	ori	r18,r18,128
  804e70:	ac400007 	ldb	r17,0(r21)
  804e74:	003f2f06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  804e78:	a809883a 	mov	r4,r21
  804e7c:	d8003115 	stw	zero,196(sp)
  804e80:	88bff404 	addi	r2,r17,-48
  804e84:	0017883a 	mov	r11,zero
  804e88:	24400007 	ldb	r17,0(r4)
  804e8c:	5ac002a4 	muli	r11,r11,10
  804e90:	ad400044 	addi	r21,r21,1
  804e94:	a809883a 	mov	r4,r21
  804e98:	12d7883a 	add	r11,r2,r11
  804e9c:	88bff404 	addi	r2,r17,-48
  804ea0:	30bff92e 	bgeu	r6,r2,804e88 <__alt_mem_onchip_mem+0xff784e88>
  804ea4:	dac03115 	stw	r11,196(sp)
  804ea8:	003f2306 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  804eac:	18c03fcc 	andi	r3,r3,255
  804eb0:	18072b1e 	bne	r3,zero,806b60 <___vfprintf_internal_r+0x21b0>
  804eb4:	94800414 	ori	r18,r18,16
  804eb8:	9080080c 	andi	r2,r18,32
  804ebc:	10037b26 	beq	r2,zero,805cac <___vfprintf_internal_r+0x12fc>
  804ec0:	d9402d17 	ldw	r5,180(sp)
  804ec4:	28800117 	ldw	r2,4(r5)
  804ec8:	2cc00017 	ldw	r19,0(r5)
  804ecc:	29400204 	addi	r5,r5,8
  804ed0:	d9402d15 	stw	r5,180(sp)
  804ed4:	102d883a 	mov	r22,r2
  804ed8:	10044b16 	blt	r2,zero,806008 <___vfprintf_internal_r+0x1658>
  804edc:	d9402917 	ldw	r5,164(sp)
  804ee0:	df002783 	ldbu	fp,158(sp)
  804ee4:	2803bc16 	blt	r5,zero,805dd8 <___vfprintf_internal_r+0x1428>
  804ee8:	00ffdfc4 	movi	r3,-129
  804eec:	9d84b03a 	or	r2,r19,r22
  804ef0:	90e4703a 	and	r18,r18,r3
  804ef4:	10017726 	beq	r2,zero,8054d4 <___vfprintf_internal_r+0xb24>
  804ef8:	b0038326 	beq	r22,zero,805d08 <___vfprintf_internal_r+0x1358>
  804efc:	dc402a15 	stw	r17,168(sp)
  804f00:	dc001e04 	addi	r16,sp,120
  804f04:	b023883a 	mov	r17,r22
  804f08:	402d883a 	mov	r22,r8
  804f0c:	9809883a 	mov	r4,r19
  804f10:	880b883a 	mov	r5,r17
  804f14:	01800284 	movi	r6,10
  804f18:	000f883a 	mov	r7,zero
  804f1c:	080d7740 	call	80d774 <__umoddi3>
  804f20:	10800c04 	addi	r2,r2,48
  804f24:	843fffc4 	addi	r16,r16,-1
  804f28:	9809883a 	mov	r4,r19
  804f2c:	880b883a 	mov	r5,r17
  804f30:	80800005 	stb	r2,0(r16)
  804f34:	01800284 	movi	r6,10
  804f38:	000f883a 	mov	r7,zero
  804f3c:	080d1fc0 	call	80d1fc <__udivdi3>
  804f40:	1027883a 	mov	r19,r2
  804f44:	10c4b03a 	or	r2,r2,r3
  804f48:	1823883a 	mov	r17,r3
  804f4c:	103fef1e 	bne	r2,zero,804f0c <__alt_mem_onchip_mem+0xff784f0c>
  804f50:	d8c02817 	ldw	r3,160(sp)
  804f54:	dc402a17 	ldw	r17,168(sp)
  804f58:	b011883a 	mov	r8,r22
  804f5c:	1c07c83a 	sub	r3,r3,r16
  804f60:	d8c02e15 	stw	r3,184(sp)
  804f64:	00005906 	br	8050cc <___vfprintf_internal_r+0x71c>
  804f68:	18c03fcc 	andi	r3,r3,255
  804f6c:	1806fa1e 	bne	r3,zero,806b58 <___vfprintf_internal_r+0x21a8>
  804f70:	9080020c 	andi	r2,r18,8
  804f74:	10048a26 	beq	r2,zero,8061a0 <___vfprintf_internal_r+0x17f0>
  804f78:	d8c02d17 	ldw	r3,180(sp)
  804f7c:	d9002d17 	ldw	r4,180(sp)
  804f80:	d9402d17 	ldw	r5,180(sp)
  804f84:	18c00017 	ldw	r3,0(r3)
  804f88:	21000117 	ldw	r4,4(r4)
  804f8c:	29400204 	addi	r5,r5,8
  804f90:	d8c03615 	stw	r3,216(sp)
  804f94:	d9003815 	stw	r4,224(sp)
  804f98:	d9402d15 	stw	r5,180(sp)
  804f9c:	d9003617 	ldw	r4,216(sp)
  804fa0:	d9403817 	ldw	r5,224(sp)
  804fa4:	da003d15 	stw	r8,244(sp)
  804fa8:	04000044 	movi	r16,1
  804fac:	080b3540 	call	80b354 <__fpclassifyd>
  804fb0:	da003d17 	ldw	r8,244(sp)
  804fb4:	14041f1e 	bne	r2,r16,806034 <___vfprintf_internal_r+0x1684>
  804fb8:	d9003617 	ldw	r4,216(sp)
  804fbc:	d9403817 	ldw	r5,224(sp)
  804fc0:	000d883a 	mov	r6,zero
  804fc4:	000f883a 	mov	r7,zero
  804fc8:	080f1580 	call	80f158 <__ledf2>
  804fcc:	da003d17 	ldw	r8,244(sp)
  804fd0:	1005be16 	blt	r2,zero,8066cc <___vfprintf_internal_r+0x1d1c>
  804fd4:	df002783 	ldbu	fp,158(sp)
  804fd8:	008011c4 	movi	r2,71
  804fdc:	1445330e 	bge	r2,r17,8064ac <___vfprintf_internal_r+0x1afc>
  804fe0:	04002074 	movhi	r16,129
  804fe4:	8411e804 	addi	r16,r16,18336
  804fe8:	00c000c4 	movi	r3,3
  804fec:	00bfdfc4 	movi	r2,-129
  804ff0:	d8c02a15 	stw	r3,168(sp)
  804ff4:	90a4703a 	and	r18,r18,r2
  804ff8:	d8c02e15 	stw	r3,184(sp)
  804ffc:	d8002915 	stw	zero,164(sp)
  805000:	d8003215 	stw	zero,200(sp)
  805004:	00003706 	br	8050e4 <___vfprintf_internal_r+0x734>
  805008:	94800214 	ori	r18,r18,8
  80500c:	ac400007 	ldb	r17,0(r21)
  805010:	003ec806 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  805014:	18c03fcc 	andi	r3,r3,255
  805018:	1806db1e 	bne	r3,zero,806b88 <___vfprintf_internal_r+0x21d8>
  80501c:	94800414 	ori	r18,r18,16
  805020:	9080080c 	andi	r2,r18,32
  805024:	1002d826 	beq	r2,zero,805b88 <___vfprintf_internal_r+0x11d8>
  805028:	d9402d17 	ldw	r5,180(sp)
  80502c:	d8c02917 	ldw	r3,164(sp)
  805030:	d8002785 	stb	zero,158(sp)
  805034:	28800204 	addi	r2,r5,8
  805038:	2cc00017 	ldw	r19,0(r5)
  80503c:	2d800117 	ldw	r22,4(r5)
  805040:	18048f16 	blt	r3,zero,806280 <___vfprintf_internal_r+0x18d0>
  805044:	013fdfc4 	movi	r4,-129
  805048:	9d86b03a 	or	r3,r19,r22
  80504c:	d8802d15 	stw	r2,180(sp)
  805050:	9124703a 	and	r18,r18,r4
  805054:	1802d91e 	bne	r3,zero,805bbc <___vfprintf_internal_r+0x120c>
  805058:	d8c02917 	ldw	r3,164(sp)
  80505c:	0039883a 	mov	fp,zero
  805060:	1805c326 	beq	r3,zero,806770 <___vfprintf_internal_r+0x1dc0>
  805064:	0027883a 	mov	r19,zero
  805068:	002d883a 	mov	r22,zero
  80506c:	dc001e04 	addi	r16,sp,120
  805070:	9806d0fa 	srli	r3,r19,3
  805074:	b008977a 	slli	r4,r22,29
  805078:	b02cd0fa 	srli	r22,r22,3
  80507c:	9cc001cc 	andi	r19,r19,7
  805080:	98800c04 	addi	r2,r19,48
  805084:	843fffc4 	addi	r16,r16,-1
  805088:	20e6b03a 	or	r19,r4,r3
  80508c:	80800005 	stb	r2,0(r16)
  805090:	9d86b03a 	or	r3,r19,r22
  805094:	183ff61e 	bne	r3,zero,805070 <__alt_mem_onchip_mem+0xff785070>
  805098:	90c0004c 	andi	r3,r18,1
  80509c:	18013b26 	beq	r3,zero,80558c <___vfprintf_internal_r+0xbdc>
  8050a0:	10803fcc 	andi	r2,r2,255
  8050a4:	1080201c 	xori	r2,r2,128
  8050a8:	10bfe004 	addi	r2,r2,-128
  8050ac:	00c00c04 	movi	r3,48
  8050b0:	10c13626 	beq	r2,r3,80558c <___vfprintf_internal_r+0xbdc>
  8050b4:	80ffffc5 	stb	r3,-1(r16)
  8050b8:	d8c02817 	ldw	r3,160(sp)
  8050bc:	80bfffc4 	addi	r2,r16,-1
  8050c0:	1021883a 	mov	r16,r2
  8050c4:	1887c83a 	sub	r3,r3,r2
  8050c8:	d8c02e15 	stw	r3,184(sp)
  8050cc:	d8802e17 	ldw	r2,184(sp)
  8050d0:	d9002917 	ldw	r4,164(sp)
  8050d4:	1100010e 	bge	r2,r4,8050dc <___vfprintf_internal_r+0x72c>
  8050d8:	2005883a 	mov	r2,r4
  8050dc:	d8802a15 	stw	r2,168(sp)
  8050e0:	d8003215 	stw	zero,200(sp)
  8050e4:	e7003fcc 	andi	fp,fp,255
  8050e8:	e700201c 	xori	fp,fp,128
  8050ec:	e73fe004 	addi	fp,fp,-128
  8050f0:	e0000326 	beq	fp,zero,805100 <___vfprintf_internal_r+0x750>
  8050f4:	d8c02a17 	ldw	r3,168(sp)
  8050f8:	18c00044 	addi	r3,r3,1
  8050fc:	d8c02a15 	stw	r3,168(sp)
  805100:	90c0008c 	andi	r3,r18,2
  805104:	d8c02b15 	stw	r3,172(sp)
  805108:	18000326 	beq	r3,zero,805118 <___vfprintf_internal_r+0x768>
  80510c:	d8c02a17 	ldw	r3,168(sp)
  805110:	18c00084 	addi	r3,r3,2
  805114:	d8c02a15 	stw	r3,168(sp)
  805118:	90c0210c 	andi	r3,r18,132
  80511c:	d8c03015 	stw	r3,192(sp)
  805120:	1801a31e 	bne	r3,zero,8057b0 <___vfprintf_internal_r+0xe00>
  805124:	d9003117 	ldw	r4,196(sp)
  805128:	d8c02a17 	ldw	r3,168(sp)
  80512c:	20e7c83a 	sub	r19,r4,r3
  805130:	04c19f0e 	bge	zero,r19,8057b0 <___vfprintf_internal_r+0xe00>
  805134:	02400404 	movi	r9,16
  805138:	d8c02017 	ldw	r3,128(sp)
  80513c:	d8801f17 	ldw	r2,124(sp)
  805140:	4cc50d0e 	bge	r9,r19,806578 <___vfprintf_internal_r+0x1bc8>
  805144:	01402074 	movhi	r5,129
  805148:	2951fb84 	addi	r5,r5,18414
  80514c:	dc403b15 	stw	r17,236(sp)
  805150:	d9403515 	stw	r5,212(sp)
  805154:	9823883a 	mov	r17,r19
  805158:	482d883a 	mov	r22,r9
  80515c:	9027883a 	mov	r19,r18
  805160:	070001c4 	movi	fp,7
  805164:	8025883a 	mov	r18,r16
  805168:	dc002c17 	ldw	r16,176(sp)
  80516c:	00000306 	br	80517c <___vfprintf_internal_r+0x7cc>
  805170:	8c7ffc04 	addi	r17,r17,-16
  805174:	42000204 	addi	r8,r8,8
  805178:	b440130e 	bge	r22,r17,8051c8 <___vfprintf_internal_r+0x818>
  80517c:	01002074 	movhi	r4,129
  805180:	18c00404 	addi	r3,r3,16
  805184:	10800044 	addi	r2,r2,1
  805188:	2111fb84 	addi	r4,r4,18414
  80518c:	41000015 	stw	r4,0(r8)
  805190:	45800115 	stw	r22,4(r8)
  805194:	d8c02015 	stw	r3,128(sp)
  805198:	d8801f15 	stw	r2,124(sp)
  80519c:	e0bff40e 	bge	fp,r2,805170 <__alt_mem_onchip_mem+0xff785170>
  8051a0:	d9801e04 	addi	r6,sp,120
  8051a4:	b80b883a 	mov	r5,r23
  8051a8:	8009883a 	mov	r4,r16
  8051ac:	080b5a00 	call	80b5a0 <__sprint_r>
  8051b0:	103f011e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  8051b4:	8c7ffc04 	addi	r17,r17,-16
  8051b8:	d8c02017 	ldw	r3,128(sp)
  8051bc:	d8801f17 	ldw	r2,124(sp)
  8051c0:	da000404 	addi	r8,sp,16
  8051c4:	b47fed16 	blt	r22,r17,80517c <__alt_mem_onchip_mem+0xff78517c>
  8051c8:	9021883a 	mov	r16,r18
  8051cc:	9825883a 	mov	r18,r19
  8051d0:	8827883a 	mov	r19,r17
  8051d4:	dc403b17 	ldw	r17,236(sp)
  8051d8:	d9403517 	ldw	r5,212(sp)
  8051dc:	98c7883a 	add	r3,r19,r3
  8051e0:	10800044 	addi	r2,r2,1
  8051e4:	41400015 	stw	r5,0(r8)
  8051e8:	44c00115 	stw	r19,4(r8)
  8051ec:	d8c02015 	stw	r3,128(sp)
  8051f0:	d8801f15 	stw	r2,124(sp)
  8051f4:	010001c4 	movi	r4,7
  8051f8:	2082a316 	blt	r4,r2,805c88 <___vfprintf_internal_r+0x12d8>
  8051fc:	df002787 	ldb	fp,158(sp)
  805200:	42000204 	addi	r8,r8,8
  805204:	e0000c26 	beq	fp,zero,805238 <___vfprintf_internal_r+0x888>
  805208:	d8801f17 	ldw	r2,124(sp)
  80520c:	d9002784 	addi	r4,sp,158
  805210:	18c00044 	addi	r3,r3,1
  805214:	10800044 	addi	r2,r2,1
  805218:	41000015 	stw	r4,0(r8)
  80521c:	01000044 	movi	r4,1
  805220:	41000115 	stw	r4,4(r8)
  805224:	d8c02015 	stw	r3,128(sp)
  805228:	d8801f15 	stw	r2,124(sp)
  80522c:	010001c4 	movi	r4,7
  805230:	20823c16 	blt	r4,r2,805b24 <___vfprintf_internal_r+0x1174>
  805234:	42000204 	addi	r8,r8,8
  805238:	d8802b17 	ldw	r2,172(sp)
  80523c:	10000c26 	beq	r2,zero,805270 <___vfprintf_internal_r+0x8c0>
  805240:	d8801f17 	ldw	r2,124(sp)
  805244:	d9002704 	addi	r4,sp,156
  805248:	18c00084 	addi	r3,r3,2
  80524c:	10800044 	addi	r2,r2,1
  805250:	41000015 	stw	r4,0(r8)
  805254:	01000084 	movi	r4,2
  805258:	41000115 	stw	r4,4(r8)
  80525c:	d8c02015 	stw	r3,128(sp)
  805260:	d8801f15 	stw	r2,124(sp)
  805264:	010001c4 	movi	r4,7
  805268:	20823616 	blt	r4,r2,805b44 <___vfprintf_internal_r+0x1194>
  80526c:	42000204 	addi	r8,r8,8
  805270:	d9003017 	ldw	r4,192(sp)
  805274:	00802004 	movi	r2,128
  805278:	20819926 	beq	r4,r2,8058e0 <___vfprintf_internal_r+0xf30>
  80527c:	d9402917 	ldw	r5,164(sp)
  805280:	d8802e17 	ldw	r2,184(sp)
  805284:	28adc83a 	sub	r22,r5,r2
  805288:	0580310e 	bge	zero,r22,805350 <___vfprintf_internal_r+0x9a0>
  80528c:	07000404 	movi	fp,16
  805290:	d8801f17 	ldw	r2,124(sp)
  805294:	e584140e 	bge	fp,r22,8062e8 <___vfprintf_internal_r+0x1938>
  805298:	01402074 	movhi	r5,129
  80529c:	2951f784 	addi	r5,r5,18398
  8052a0:	dc402915 	stw	r17,164(sp)
  8052a4:	d9402b15 	stw	r5,172(sp)
  8052a8:	b023883a 	mov	r17,r22
  8052ac:	04c001c4 	movi	r19,7
  8052b0:	a82d883a 	mov	r22,r21
  8052b4:	902b883a 	mov	r21,r18
  8052b8:	8025883a 	mov	r18,r16
  8052bc:	dc002c17 	ldw	r16,176(sp)
  8052c0:	00000306 	br	8052d0 <___vfprintf_internal_r+0x920>
  8052c4:	8c7ffc04 	addi	r17,r17,-16
  8052c8:	42000204 	addi	r8,r8,8
  8052cc:	e440110e 	bge	fp,r17,805314 <___vfprintf_internal_r+0x964>
  8052d0:	18c00404 	addi	r3,r3,16
  8052d4:	10800044 	addi	r2,r2,1
  8052d8:	45000015 	stw	r20,0(r8)
  8052dc:	47000115 	stw	fp,4(r8)
  8052e0:	d8c02015 	stw	r3,128(sp)
  8052e4:	d8801f15 	stw	r2,124(sp)
  8052e8:	98bff60e 	bge	r19,r2,8052c4 <__alt_mem_onchip_mem+0xff7852c4>
  8052ec:	d9801e04 	addi	r6,sp,120
  8052f0:	b80b883a 	mov	r5,r23
  8052f4:	8009883a 	mov	r4,r16
  8052f8:	080b5a00 	call	80b5a0 <__sprint_r>
  8052fc:	103eae1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805300:	8c7ffc04 	addi	r17,r17,-16
  805304:	d8c02017 	ldw	r3,128(sp)
  805308:	d8801f17 	ldw	r2,124(sp)
  80530c:	da000404 	addi	r8,sp,16
  805310:	e47fef16 	blt	fp,r17,8052d0 <__alt_mem_onchip_mem+0xff7852d0>
  805314:	9021883a 	mov	r16,r18
  805318:	a825883a 	mov	r18,r21
  80531c:	b02b883a 	mov	r21,r22
  805320:	882d883a 	mov	r22,r17
  805324:	dc402917 	ldw	r17,164(sp)
  805328:	d9002b17 	ldw	r4,172(sp)
  80532c:	1d87883a 	add	r3,r3,r22
  805330:	10800044 	addi	r2,r2,1
  805334:	41000015 	stw	r4,0(r8)
  805338:	45800115 	stw	r22,4(r8)
  80533c:	d8c02015 	stw	r3,128(sp)
  805340:	d8801f15 	stw	r2,124(sp)
  805344:	010001c4 	movi	r4,7
  805348:	2081ee16 	blt	r4,r2,805b04 <___vfprintf_internal_r+0x1154>
  80534c:	42000204 	addi	r8,r8,8
  805350:	9080400c 	andi	r2,r18,256
  805354:	1001181e 	bne	r2,zero,8057b8 <___vfprintf_internal_r+0xe08>
  805358:	d9402e17 	ldw	r5,184(sp)
  80535c:	d8801f17 	ldw	r2,124(sp)
  805360:	44000015 	stw	r16,0(r8)
  805364:	1947883a 	add	r3,r3,r5
  805368:	10800044 	addi	r2,r2,1
  80536c:	41400115 	stw	r5,4(r8)
  805370:	d8c02015 	stw	r3,128(sp)
  805374:	d8801f15 	stw	r2,124(sp)
  805378:	010001c4 	movi	r4,7
  80537c:	2081d316 	blt	r4,r2,805acc <___vfprintf_internal_r+0x111c>
  805380:	42000204 	addi	r8,r8,8
  805384:	9480010c 	andi	r18,r18,4
  805388:	90003226 	beq	r18,zero,805454 <___vfprintf_internal_r+0xaa4>
  80538c:	d9403117 	ldw	r5,196(sp)
  805390:	d8802a17 	ldw	r2,168(sp)
  805394:	28a1c83a 	sub	r16,r5,r2
  805398:	04002e0e 	bge	zero,r16,805454 <___vfprintf_internal_r+0xaa4>
  80539c:	04400404 	movi	r17,16
  8053a0:	d8801f17 	ldw	r2,124(sp)
  8053a4:	8c04a20e 	bge	r17,r16,806630 <___vfprintf_internal_r+0x1c80>
  8053a8:	01402074 	movhi	r5,129
  8053ac:	2951fb84 	addi	r5,r5,18414
  8053b0:	d9403515 	stw	r5,212(sp)
  8053b4:	048001c4 	movi	r18,7
  8053b8:	dcc02c17 	ldw	r19,176(sp)
  8053bc:	00000306 	br	8053cc <___vfprintf_internal_r+0xa1c>
  8053c0:	843ffc04 	addi	r16,r16,-16
  8053c4:	42000204 	addi	r8,r8,8
  8053c8:	8c00130e 	bge	r17,r16,805418 <___vfprintf_internal_r+0xa68>
  8053cc:	01002074 	movhi	r4,129
  8053d0:	18c00404 	addi	r3,r3,16
  8053d4:	10800044 	addi	r2,r2,1
  8053d8:	2111fb84 	addi	r4,r4,18414
  8053dc:	41000015 	stw	r4,0(r8)
  8053e0:	44400115 	stw	r17,4(r8)
  8053e4:	d8c02015 	stw	r3,128(sp)
  8053e8:	d8801f15 	stw	r2,124(sp)
  8053ec:	90bff40e 	bge	r18,r2,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8053f0:	d9801e04 	addi	r6,sp,120
  8053f4:	b80b883a 	mov	r5,r23
  8053f8:	9809883a 	mov	r4,r19
  8053fc:	080b5a00 	call	80b5a0 <__sprint_r>
  805400:	103e6d1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805404:	843ffc04 	addi	r16,r16,-16
  805408:	d8c02017 	ldw	r3,128(sp)
  80540c:	d8801f17 	ldw	r2,124(sp)
  805410:	da000404 	addi	r8,sp,16
  805414:	8c3fed16 	blt	r17,r16,8053cc <__alt_mem_onchip_mem+0xff7853cc>
  805418:	d9403517 	ldw	r5,212(sp)
  80541c:	1c07883a 	add	r3,r3,r16
  805420:	10800044 	addi	r2,r2,1
  805424:	41400015 	stw	r5,0(r8)
  805428:	44000115 	stw	r16,4(r8)
  80542c:	d8c02015 	stw	r3,128(sp)
  805430:	d8801f15 	stw	r2,124(sp)
  805434:	010001c4 	movi	r4,7
  805438:	2080060e 	bge	r4,r2,805454 <___vfprintf_internal_r+0xaa4>
  80543c:	d9002c17 	ldw	r4,176(sp)
  805440:	d9801e04 	addi	r6,sp,120
  805444:	b80b883a 	mov	r5,r23
  805448:	080b5a00 	call	80b5a0 <__sprint_r>
  80544c:	103e5a1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805450:	d8c02017 	ldw	r3,128(sp)
  805454:	d8803117 	ldw	r2,196(sp)
  805458:	d9002a17 	ldw	r4,168(sp)
  80545c:	1100010e 	bge	r2,r4,805464 <___vfprintf_internal_r+0xab4>
  805460:	2005883a 	mov	r2,r4
  805464:	d9402f17 	ldw	r5,188(sp)
  805468:	288b883a 	add	r5,r5,r2
  80546c:	d9402f15 	stw	r5,188(sp)
  805470:	18019e1e 	bne	r3,zero,805aec <___vfprintf_internal_r+0x113c>
  805474:	a8800007 	ldb	r2,0(r21)
  805478:	d8001f15 	stw	zero,124(sp)
  80547c:	da000404 	addi	r8,sp,16
  805480:	103d851e 	bne	r2,zero,804a98 <__alt_mem_onchip_mem+0xff784a98>
  805484:	a821883a 	mov	r16,r21
  805488:	003d9b06 	br	804af8 <__alt_mem_onchip_mem+0xff784af8>
  80548c:	18c03fcc 	andi	r3,r3,255
  805490:	1805c11e 	bne	r3,zero,806b98 <___vfprintf_internal_r+0x21e8>
  805494:	94800414 	ori	r18,r18,16
  805498:	9080080c 	andi	r2,r18,32
  80549c:	10020c26 	beq	r2,zero,805cd0 <___vfprintf_internal_r+0x1320>
  8054a0:	d8802d17 	ldw	r2,180(sp)
  8054a4:	d9002917 	ldw	r4,164(sp)
  8054a8:	d8002785 	stb	zero,158(sp)
  8054ac:	10c00204 	addi	r3,r2,8
  8054b0:	14c00017 	ldw	r19,0(r2)
  8054b4:	15800117 	ldw	r22,4(r2)
  8054b8:	20040f16 	blt	r4,zero,8064f8 <___vfprintf_internal_r+0x1b48>
  8054bc:	013fdfc4 	movi	r4,-129
  8054c0:	9d84b03a 	or	r2,r19,r22
  8054c4:	d8c02d15 	stw	r3,180(sp)
  8054c8:	9124703a 	and	r18,r18,r4
  8054cc:	0039883a 	mov	fp,zero
  8054d0:	103e891e 	bne	r2,zero,804ef8 <__alt_mem_onchip_mem+0xff784ef8>
  8054d4:	d9002917 	ldw	r4,164(sp)
  8054d8:	2002c11e 	bne	r4,zero,805fe0 <___vfprintf_internal_r+0x1630>
  8054dc:	d8002915 	stw	zero,164(sp)
  8054e0:	d8002e15 	stw	zero,184(sp)
  8054e4:	dc001e04 	addi	r16,sp,120
  8054e8:	003ef806 	br	8050cc <__alt_mem_onchip_mem+0xff7850cc>
  8054ec:	18c03fcc 	andi	r3,r3,255
  8054f0:	18059d1e 	bne	r3,zero,806b68 <___vfprintf_internal_r+0x21b8>
  8054f4:	01402074 	movhi	r5,129
  8054f8:	2951eb04 	addi	r5,r5,18348
  8054fc:	d9403915 	stw	r5,228(sp)
  805500:	9080080c 	andi	r2,r18,32
  805504:	10005226 	beq	r2,zero,805650 <___vfprintf_internal_r+0xca0>
  805508:	d8802d17 	ldw	r2,180(sp)
  80550c:	14c00017 	ldw	r19,0(r2)
  805510:	15800117 	ldw	r22,4(r2)
  805514:	10800204 	addi	r2,r2,8
  805518:	d8802d15 	stw	r2,180(sp)
  80551c:	9080004c 	andi	r2,r18,1
  805520:	10019026 	beq	r2,zero,805b64 <___vfprintf_internal_r+0x11b4>
  805524:	9d84b03a 	or	r2,r19,r22
  805528:	10036926 	beq	r2,zero,8062d0 <___vfprintf_internal_r+0x1920>
  80552c:	d8c02917 	ldw	r3,164(sp)
  805530:	00800c04 	movi	r2,48
  805534:	d8802705 	stb	r2,156(sp)
  805538:	dc402745 	stb	r17,157(sp)
  80553c:	d8002785 	stb	zero,158(sp)
  805540:	90800094 	ori	r2,r18,2
  805544:	18045d16 	blt	r3,zero,8066bc <___vfprintf_internal_r+0x1d0c>
  805548:	00bfdfc4 	movi	r2,-129
  80554c:	90a4703a 	and	r18,r18,r2
  805550:	94800094 	ori	r18,r18,2
  805554:	0039883a 	mov	fp,zero
  805558:	d9003917 	ldw	r4,228(sp)
  80555c:	dc001e04 	addi	r16,sp,120
  805560:	988003cc 	andi	r2,r19,15
  805564:	b006973a 	slli	r3,r22,28
  805568:	2085883a 	add	r2,r4,r2
  80556c:	9826d13a 	srli	r19,r19,4
  805570:	10800003 	ldbu	r2,0(r2)
  805574:	b02cd13a 	srli	r22,r22,4
  805578:	843fffc4 	addi	r16,r16,-1
  80557c:	1ce6b03a 	or	r19,r3,r19
  805580:	80800005 	stb	r2,0(r16)
  805584:	9d84b03a 	or	r2,r19,r22
  805588:	103ff51e 	bne	r2,zero,805560 <__alt_mem_onchip_mem+0xff785560>
  80558c:	d8c02817 	ldw	r3,160(sp)
  805590:	1c07c83a 	sub	r3,r3,r16
  805594:	d8c02e15 	stw	r3,184(sp)
  805598:	003ecc06 	br	8050cc <__alt_mem_onchip_mem+0xff7850cc>
  80559c:	18c03fcc 	andi	r3,r3,255
  8055a0:	183e9f26 	beq	r3,zero,805020 <__alt_mem_onchip_mem+0xff785020>
  8055a4:	d9c02785 	stb	r7,158(sp)
  8055a8:	003e9d06 	br	805020 <__alt_mem_onchip_mem+0xff785020>
  8055ac:	00c00044 	movi	r3,1
  8055b0:	01c00ac4 	movi	r7,43
  8055b4:	ac400007 	ldb	r17,0(r21)
  8055b8:	003d5e06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8055bc:	94800814 	ori	r18,r18,32
  8055c0:	ac400007 	ldb	r17,0(r21)
  8055c4:	003d5b06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8055c8:	d8c02d17 	ldw	r3,180(sp)
  8055cc:	d8002785 	stb	zero,158(sp)
  8055d0:	1c000017 	ldw	r16,0(r3)
  8055d4:	1cc00104 	addi	r19,r3,4
  8055d8:	80041926 	beq	r16,zero,806640 <___vfprintf_internal_r+0x1c90>
  8055dc:	d9002917 	ldw	r4,164(sp)
  8055e0:	2003d016 	blt	r4,zero,806524 <___vfprintf_internal_r+0x1b74>
  8055e4:	200d883a 	mov	r6,r4
  8055e8:	000b883a 	mov	r5,zero
  8055ec:	8009883a 	mov	r4,r16
  8055f0:	da003d15 	stw	r8,244(sp)
  8055f4:	0809a0c0 	call	809a0c <memchr>
  8055f8:	da003d17 	ldw	r8,244(sp)
  8055fc:	10045426 	beq	r2,zero,806750 <___vfprintf_internal_r+0x1da0>
  805600:	1405c83a 	sub	r2,r2,r16
  805604:	d8802e15 	stw	r2,184(sp)
  805608:	1003cc16 	blt	r2,zero,80653c <___vfprintf_internal_r+0x1b8c>
  80560c:	df002783 	ldbu	fp,158(sp)
  805610:	d8802a15 	stw	r2,168(sp)
  805614:	dcc02d15 	stw	r19,180(sp)
  805618:	d8002915 	stw	zero,164(sp)
  80561c:	d8003215 	stw	zero,200(sp)
  805620:	003eb006 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  805624:	18c03fcc 	andi	r3,r3,255
  805628:	183f9b26 	beq	r3,zero,805498 <__alt_mem_onchip_mem+0xff785498>
  80562c:	d9c02785 	stb	r7,158(sp)
  805630:	003f9906 	br	805498 <__alt_mem_onchip_mem+0xff785498>
  805634:	18c03fcc 	andi	r3,r3,255
  805638:	1805551e 	bne	r3,zero,806b90 <___vfprintf_internal_r+0x21e0>
  80563c:	01402074 	movhi	r5,129
  805640:	2951f004 	addi	r5,r5,18368
  805644:	d9403915 	stw	r5,228(sp)
  805648:	9080080c 	andi	r2,r18,32
  80564c:	103fae1e 	bne	r2,zero,805508 <__alt_mem_onchip_mem+0xff785508>
  805650:	9080040c 	andi	r2,r18,16
  805654:	1002de26 	beq	r2,zero,8061d0 <___vfprintf_internal_r+0x1820>
  805658:	d8c02d17 	ldw	r3,180(sp)
  80565c:	002d883a 	mov	r22,zero
  805660:	1cc00017 	ldw	r19,0(r3)
  805664:	18c00104 	addi	r3,r3,4
  805668:	d8c02d15 	stw	r3,180(sp)
  80566c:	003fab06 	br	80551c <__alt_mem_onchip_mem+0xff78551c>
  805670:	38803fcc 	andi	r2,r7,255
  805674:	1080201c 	xori	r2,r2,128
  805678:	10bfe004 	addi	r2,r2,-128
  80567c:	1002d21e 	bne	r2,zero,8061c8 <___vfprintf_internal_r+0x1818>
  805680:	00c00044 	movi	r3,1
  805684:	01c00804 	movi	r7,32
  805688:	ac400007 	ldb	r17,0(r21)
  80568c:	003d2906 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  805690:	94800054 	ori	r18,r18,1
  805694:	ac400007 	ldb	r17,0(r21)
  805698:	003d2606 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  80569c:	18c03fcc 	andi	r3,r3,255
  8056a0:	183e0526 	beq	r3,zero,804eb8 <__alt_mem_onchip_mem+0xff784eb8>
  8056a4:	d9c02785 	stb	r7,158(sp)
  8056a8:	003e0306 	br	804eb8 <__alt_mem_onchip_mem+0xff784eb8>
  8056ac:	94801014 	ori	r18,r18,64
  8056b0:	ac400007 	ldb	r17,0(r21)
  8056b4:	003d1f06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8056b8:	ac400007 	ldb	r17,0(r21)
  8056bc:	8a438726 	beq	r17,r9,8064dc <___vfprintf_internal_r+0x1b2c>
  8056c0:	94800414 	ori	r18,r18,16
  8056c4:	003d1b06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8056c8:	18c03fcc 	andi	r3,r3,255
  8056cc:	1805341e 	bne	r3,zero,806ba0 <___vfprintf_internal_r+0x21f0>
  8056d0:	9080080c 	andi	r2,r18,32
  8056d4:	1002cd26 	beq	r2,zero,80620c <___vfprintf_internal_r+0x185c>
  8056d8:	d9402d17 	ldw	r5,180(sp)
  8056dc:	d9002f17 	ldw	r4,188(sp)
  8056e0:	28800017 	ldw	r2,0(r5)
  8056e4:	2007d7fa 	srai	r3,r4,31
  8056e8:	29400104 	addi	r5,r5,4
  8056ec:	d9402d15 	stw	r5,180(sp)
  8056f0:	11000015 	stw	r4,0(r2)
  8056f4:	10c00115 	stw	r3,4(r2)
  8056f8:	003ce506 	br	804a90 <__alt_mem_onchip_mem+0xff784a90>
  8056fc:	d8c02d17 	ldw	r3,180(sp)
  805700:	d9002d17 	ldw	r4,180(sp)
  805704:	d8002785 	stb	zero,158(sp)
  805708:	18800017 	ldw	r2,0(r3)
  80570c:	21000104 	addi	r4,r4,4
  805710:	00c00044 	movi	r3,1
  805714:	d8c02a15 	stw	r3,168(sp)
  805718:	d8801405 	stb	r2,80(sp)
  80571c:	d9002d15 	stw	r4,180(sp)
  805720:	d8c02e15 	stw	r3,184(sp)
  805724:	d8002915 	stw	zero,164(sp)
  805728:	d8003215 	stw	zero,200(sp)
  80572c:	dc001404 	addi	r16,sp,80
  805730:	0039883a 	mov	fp,zero
  805734:	003e7206 	br	805100 <__alt_mem_onchip_mem+0xff785100>
  805738:	01002074 	movhi	r4,129
  80573c:	2111f004 	addi	r4,r4,18368
  805740:	0039883a 	mov	fp,zero
  805744:	d9003915 	stw	r4,228(sp)
  805748:	04401e04 	movi	r17,120
  80574c:	003f8206 	br	805558 <__alt_mem_onchip_mem+0xff785558>
  805750:	18c03fcc 	andi	r3,r3,255
  805754:	1805061e 	bne	r3,zero,806b70 <___vfprintf_internal_r+0x21c0>
  805758:	883d9126 	beq	r17,zero,804da0 <__alt_mem_onchip_mem+0xff784da0>
  80575c:	00c00044 	movi	r3,1
  805760:	d8c02a15 	stw	r3,168(sp)
  805764:	dc401405 	stb	r17,80(sp)
  805768:	d8002785 	stb	zero,158(sp)
  80576c:	003fec06 	br	805720 <__alt_mem_onchip_mem+0xff785720>
  805770:	01402074 	movhi	r5,129
  805774:	2951f004 	addi	r5,r5,18368
  805778:	d9403915 	stw	r5,228(sp)
  80577c:	d8c02d15 	stw	r3,180(sp)
  805780:	1025883a 	mov	r18,r2
  805784:	04401e04 	movi	r17,120
  805788:	9d84b03a 	or	r2,r19,r22
  80578c:	1000fc1e 	bne	r2,zero,805b80 <___vfprintf_internal_r+0x11d0>
  805790:	0039883a 	mov	fp,zero
  805794:	00800084 	movi	r2,2
  805798:	10803fcc 	andi	r2,r2,255
  80579c:	00c00044 	movi	r3,1
  8057a0:	10c20f26 	beq	r2,r3,805fe0 <___vfprintf_internal_r+0x1630>
  8057a4:	00c00084 	movi	r3,2
  8057a8:	10fd6326 	beq	r2,r3,804d38 <__alt_mem_onchip_mem+0xff784d38>
  8057ac:	003e2d06 	br	805064 <__alt_mem_onchip_mem+0xff785064>
  8057b0:	d8c02017 	ldw	r3,128(sp)
  8057b4:	003e9306 	br	805204 <__alt_mem_onchip_mem+0xff785204>
  8057b8:	00801944 	movi	r2,101
  8057bc:	14407e0e 	bge	r2,r17,8059b8 <___vfprintf_internal_r+0x1008>
  8057c0:	d9003617 	ldw	r4,216(sp)
  8057c4:	d9403817 	ldw	r5,224(sp)
  8057c8:	000d883a 	mov	r6,zero
  8057cc:	000f883a 	mov	r7,zero
  8057d0:	d8c03c15 	stw	r3,240(sp)
  8057d4:	da003d15 	stw	r8,244(sp)
  8057d8:	080eff40 	call	80eff4 <__eqdf2>
  8057dc:	d8c03c17 	ldw	r3,240(sp)
  8057e0:	da003d17 	ldw	r8,244(sp)
  8057e4:	1000f71e 	bne	r2,zero,805bc4 <___vfprintf_internal_r+0x1214>
  8057e8:	d8801f17 	ldw	r2,124(sp)
  8057ec:	01002074 	movhi	r4,129
  8057f0:	2111f704 	addi	r4,r4,18396
  8057f4:	18c00044 	addi	r3,r3,1
  8057f8:	10800044 	addi	r2,r2,1
  8057fc:	41000015 	stw	r4,0(r8)
  805800:	01000044 	movi	r4,1
  805804:	41000115 	stw	r4,4(r8)
  805808:	d8c02015 	stw	r3,128(sp)
  80580c:	d8801f15 	stw	r2,124(sp)
  805810:	010001c4 	movi	r4,7
  805814:	2082b816 	blt	r4,r2,8062f8 <___vfprintf_internal_r+0x1948>
  805818:	42000204 	addi	r8,r8,8
  80581c:	d8802617 	ldw	r2,152(sp)
  805820:	d9403317 	ldw	r5,204(sp)
  805824:	11400216 	blt	r2,r5,805830 <___vfprintf_internal_r+0xe80>
  805828:	9080004c 	andi	r2,r18,1
  80582c:	103ed526 	beq	r2,zero,805384 <__alt_mem_onchip_mem+0xff785384>
  805830:	d8803717 	ldw	r2,220(sp)
  805834:	d9003417 	ldw	r4,208(sp)
  805838:	d9403717 	ldw	r5,220(sp)
  80583c:	1887883a 	add	r3,r3,r2
  805840:	d8801f17 	ldw	r2,124(sp)
  805844:	41000015 	stw	r4,0(r8)
  805848:	41400115 	stw	r5,4(r8)
  80584c:	10800044 	addi	r2,r2,1
  805850:	d8c02015 	stw	r3,128(sp)
  805854:	d8801f15 	stw	r2,124(sp)
  805858:	010001c4 	movi	r4,7
  80585c:	20832916 	blt	r4,r2,806504 <___vfprintf_internal_r+0x1b54>
  805860:	42000204 	addi	r8,r8,8
  805864:	d8803317 	ldw	r2,204(sp)
  805868:	143fffc4 	addi	r16,r2,-1
  80586c:	043ec50e 	bge	zero,r16,805384 <__alt_mem_onchip_mem+0xff785384>
  805870:	04400404 	movi	r17,16
  805874:	d8801f17 	ldw	r2,124(sp)
  805878:	8c00880e 	bge	r17,r16,805a9c <___vfprintf_internal_r+0x10ec>
  80587c:	01402074 	movhi	r5,129
  805880:	2951f784 	addi	r5,r5,18398
  805884:	d9402b15 	stw	r5,172(sp)
  805888:	058001c4 	movi	r22,7
  80588c:	dcc02c17 	ldw	r19,176(sp)
  805890:	00000306 	br	8058a0 <___vfprintf_internal_r+0xef0>
  805894:	42000204 	addi	r8,r8,8
  805898:	843ffc04 	addi	r16,r16,-16
  80589c:	8c00820e 	bge	r17,r16,805aa8 <___vfprintf_internal_r+0x10f8>
  8058a0:	18c00404 	addi	r3,r3,16
  8058a4:	10800044 	addi	r2,r2,1
  8058a8:	45000015 	stw	r20,0(r8)
  8058ac:	44400115 	stw	r17,4(r8)
  8058b0:	d8c02015 	stw	r3,128(sp)
  8058b4:	d8801f15 	stw	r2,124(sp)
  8058b8:	b0bff60e 	bge	r22,r2,805894 <__alt_mem_onchip_mem+0xff785894>
  8058bc:	d9801e04 	addi	r6,sp,120
  8058c0:	b80b883a 	mov	r5,r23
  8058c4:	9809883a 	mov	r4,r19
  8058c8:	080b5a00 	call	80b5a0 <__sprint_r>
  8058cc:	103d3a1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  8058d0:	d8c02017 	ldw	r3,128(sp)
  8058d4:	d8801f17 	ldw	r2,124(sp)
  8058d8:	da000404 	addi	r8,sp,16
  8058dc:	003fee06 	br	805898 <__alt_mem_onchip_mem+0xff785898>
  8058e0:	d9403117 	ldw	r5,196(sp)
  8058e4:	d8802a17 	ldw	r2,168(sp)
  8058e8:	28adc83a 	sub	r22,r5,r2
  8058ec:	05be630e 	bge	zero,r22,80527c <__alt_mem_onchip_mem+0xff78527c>
  8058f0:	07000404 	movi	fp,16
  8058f4:	d8801f17 	ldw	r2,124(sp)
  8058f8:	e5838f0e 	bge	fp,r22,806738 <___vfprintf_internal_r+0x1d88>
  8058fc:	01402074 	movhi	r5,129
  805900:	2951f784 	addi	r5,r5,18398
  805904:	dc403015 	stw	r17,192(sp)
  805908:	d9402b15 	stw	r5,172(sp)
  80590c:	b023883a 	mov	r17,r22
  805910:	04c001c4 	movi	r19,7
  805914:	a82d883a 	mov	r22,r21
  805918:	902b883a 	mov	r21,r18
  80591c:	8025883a 	mov	r18,r16
  805920:	dc002c17 	ldw	r16,176(sp)
  805924:	00000306 	br	805934 <___vfprintf_internal_r+0xf84>
  805928:	8c7ffc04 	addi	r17,r17,-16
  80592c:	42000204 	addi	r8,r8,8
  805930:	e440110e 	bge	fp,r17,805978 <___vfprintf_internal_r+0xfc8>
  805934:	18c00404 	addi	r3,r3,16
  805938:	10800044 	addi	r2,r2,1
  80593c:	45000015 	stw	r20,0(r8)
  805940:	47000115 	stw	fp,4(r8)
  805944:	d8c02015 	stw	r3,128(sp)
  805948:	d8801f15 	stw	r2,124(sp)
  80594c:	98bff60e 	bge	r19,r2,805928 <__alt_mem_onchip_mem+0xff785928>
  805950:	d9801e04 	addi	r6,sp,120
  805954:	b80b883a 	mov	r5,r23
  805958:	8009883a 	mov	r4,r16
  80595c:	080b5a00 	call	80b5a0 <__sprint_r>
  805960:	103d151e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805964:	8c7ffc04 	addi	r17,r17,-16
  805968:	d8c02017 	ldw	r3,128(sp)
  80596c:	d8801f17 	ldw	r2,124(sp)
  805970:	da000404 	addi	r8,sp,16
  805974:	e47fef16 	blt	fp,r17,805934 <__alt_mem_onchip_mem+0xff785934>
  805978:	9021883a 	mov	r16,r18
  80597c:	a825883a 	mov	r18,r21
  805980:	b02b883a 	mov	r21,r22
  805984:	882d883a 	mov	r22,r17
  805988:	dc403017 	ldw	r17,192(sp)
  80598c:	d9002b17 	ldw	r4,172(sp)
  805990:	1d87883a 	add	r3,r3,r22
  805994:	10800044 	addi	r2,r2,1
  805998:	41000015 	stw	r4,0(r8)
  80599c:	45800115 	stw	r22,4(r8)
  8059a0:	d8c02015 	stw	r3,128(sp)
  8059a4:	d8801f15 	stw	r2,124(sp)
  8059a8:	010001c4 	movi	r4,7
  8059ac:	20818e16 	blt	r4,r2,805fe8 <___vfprintf_internal_r+0x1638>
  8059b0:	42000204 	addi	r8,r8,8
  8059b4:	003e3106 	br	80527c <__alt_mem_onchip_mem+0xff78527c>
  8059b8:	d9403317 	ldw	r5,204(sp)
  8059bc:	00800044 	movi	r2,1
  8059c0:	18c00044 	addi	r3,r3,1
  8059c4:	1141530e 	bge	r2,r5,805f14 <___vfprintf_internal_r+0x1564>
  8059c8:	dc401f17 	ldw	r17,124(sp)
  8059cc:	00800044 	movi	r2,1
  8059d0:	40800115 	stw	r2,4(r8)
  8059d4:	8c400044 	addi	r17,r17,1
  8059d8:	44000015 	stw	r16,0(r8)
  8059dc:	d8c02015 	stw	r3,128(sp)
  8059e0:	dc401f15 	stw	r17,124(sp)
  8059e4:	008001c4 	movi	r2,7
  8059e8:	14416b16 	blt	r2,r17,805f98 <___vfprintf_internal_r+0x15e8>
  8059ec:	42000204 	addi	r8,r8,8
  8059f0:	d8803717 	ldw	r2,220(sp)
  8059f4:	d9003417 	ldw	r4,208(sp)
  8059f8:	8c400044 	addi	r17,r17,1
  8059fc:	10c7883a 	add	r3,r2,r3
  805a00:	40800115 	stw	r2,4(r8)
  805a04:	41000015 	stw	r4,0(r8)
  805a08:	d8c02015 	stw	r3,128(sp)
  805a0c:	dc401f15 	stw	r17,124(sp)
  805a10:	008001c4 	movi	r2,7
  805a14:	14416916 	blt	r2,r17,805fbc <___vfprintf_internal_r+0x160c>
  805a18:	45800204 	addi	r22,r8,8
  805a1c:	d9003617 	ldw	r4,216(sp)
  805a20:	d9403817 	ldw	r5,224(sp)
  805a24:	000d883a 	mov	r6,zero
  805a28:	000f883a 	mov	r7,zero
  805a2c:	d8c03c15 	stw	r3,240(sp)
  805a30:	080eff40 	call	80eff4 <__eqdf2>
  805a34:	d8c03c17 	ldw	r3,240(sp)
  805a38:	1000bc26 	beq	r2,zero,805d2c <___vfprintf_internal_r+0x137c>
  805a3c:	d9403317 	ldw	r5,204(sp)
  805a40:	84000044 	addi	r16,r16,1
  805a44:	8c400044 	addi	r17,r17,1
  805a48:	28bfffc4 	addi	r2,r5,-1
  805a4c:	1887883a 	add	r3,r3,r2
  805a50:	b0800115 	stw	r2,4(r22)
  805a54:	b4000015 	stw	r16,0(r22)
  805a58:	d8c02015 	stw	r3,128(sp)
  805a5c:	dc401f15 	stw	r17,124(sp)
  805a60:	008001c4 	movi	r2,7
  805a64:	14414316 	blt	r2,r17,805f74 <___vfprintf_internal_r+0x15c4>
  805a68:	b5800204 	addi	r22,r22,8
  805a6c:	d9003a17 	ldw	r4,232(sp)
  805a70:	df0022c4 	addi	fp,sp,139
  805a74:	8c400044 	addi	r17,r17,1
  805a78:	20c7883a 	add	r3,r4,r3
  805a7c:	b7000015 	stw	fp,0(r22)
  805a80:	b1000115 	stw	r4,4(r22)
  805a84:	d8c02015 	stw	r3,128(sp)
  805a88:	dc401f15 	stw	r17,124(sp)
  805a8c:	008001c4 	movi	r2,7
  805a90:	14400e16 	blt	r2,r17,805acc <___vfprintf_internal_r+0x111c>
  805a94:	b2000204 	addi	r8,r22,8
  805a98:	003e3a06 	br	805384 <__alt_mem_onchip_mem+0xff785384>
  805a9c:	01002074 	movhi	r4,129
  805aa0:	2111f784 	addi	r4,r4,18398
  805aa4:	d9002b15 	stw	r4,172(sp)
  805aa8:	d9002b17 	ldw	r4,172(sp)
  805aac:	1c07883a 	add	r3,r3,r16
  805ab0:	44000115 	stw	r16,4(r8)
  805ab4:	41000015 	stw	r4,0(r8)
  805ab8:	10800044 	addi	r2,r2,1
  805abc:	d8c02015 	stw	r3,128(sp)
  805ac0:	d8801f15 	stw	r2,124(sp)
  805ac4:	010001c4 	movi	r4,7
  805ac8:	20be2d0e 	bge	r4,r2,805380 <__alt_mem_onchip_mem+0xff785380>
  805acc:	d9002c17 	ldw	r4,176(sp)
  805ad0:	d9801e04 	addi	r6,sp,120
  805ad4:	b80b883a 	mov	r5,r23
  805ad8:	080b5a00 	call	80b5a0 <__sprint_r>
  805adc:	103cb61e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805ae0:	d8c02017 	ldw	r3,128(sp)
  805ae4:	da000404 	addi	r8,sp,16
  805ae8:	003e2606 	br	805384 <__alt_mem_onchip_mem+0xff785384>
  805aec:	d9002c17 	ldw	r4,176(sp)
  805af0:	d9801e04 	addi	r6,sp,120
  805af4:	b80b883a 	mov	r5,r23
  805af8:	080b5a00 	call	80b5a0 <__sprint_r>
  805afc:	103e5d26 	beq	r2,zero,805474 <__alt_mem_onchip_mem+0xff785474>
  805b00:	003cad06 	br	804db8 <__alt_mem_onchip_mem+0xff784db8>
  805b04:	d9002c17 	ldw	r4,176(sp)
  805b08:	d9801e04 	addi	r6,sp,120
  805b0c:	b80b883a 	mov	r5,r23
  805b10:	080b5a00 	call	80b5a0 <__sprint_r>
  805b14:	103ca81e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805b18:	d8c02017 	ldw	r3,128(sp)
  805b1c:	da000404 	addi	r8,sp,16
  805b20:	003e0b06 	br	805350 <__alt_mem_onchip_mem+0xff785350>
  805b24:	d9002c17 	ldw	r4,176(sp)
  805b28:	d9801e04 	addi	r6,sp,120
  805b2c:	b80b883a 	mov	r5,r23
  805b30:	080b5a00 	call	80b5a0 <__sprint_r>
  805b34:	103ca01e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805b38:	d8c02017 	ldw	r3,128(sp)
  805b3c:	da000404 	addi	r8,sp,16
  805b40:	003dbd06 	br	805238 <__alt_mem_onchip_mem+0xff785238>
  805b44:	d9002c17 	ldw	r4,176(sp)
  805b48:	d9801e04 	addi	r6,sp,120
  805b4c:	b80b883a 	mov	r5,r23
  805b50:	080b5a00 	call	80b5a0 <__sprint_r>
  805b54:	103c981e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805b58:	d8c02017 	ldw	r3,128(sp)
  805b5c:	da000404 	addi	r8,sp,16
  805b60:	003dc306 	br	805270 <__alt_mem_onchip_mem+0xff785270>
  805b64:	d8802917 	ldw	r2,164(sp)
  805b68:	d8002785 	stb	zero,158(sp)
  805b6c:	103f0616 	blt	r2,zero,805788 <__alt_mem_onchip_mem+0xff785788>
  805b70:	00ffdfc4 	movi	r3,-129
  805b74:	9d84b03a 	or	r2,r19,r22
  805b78:	90e4703a 	and	r18,r18,r3
  805b7c:	103c6b26 	beq	r2,zero,804d2c <__alt_mem_onchip_mem+0xff784d2c>
  805b80:	0039883a 	mov	fp,zero
  805b84:	003e7406 	br	805558 <__alt_mem_onchip_mem+0xff785558>
  805b88:	9080040c 	andi	r2,r18,16
  805b8c:	1001b326 	beq	r2,zero,80625c <___vfprintf_internal_r+0x18ac>
  805b90:	d9002d17 	ldw	r4,180(sp)
  805b94:	d9402917 	ldw	r5,164(sp)
  805b98:	d8002785 	stb	zero,158(sp)
  805b9c:	20800104 	addi	r2,r4,4
  805ba0:	24c00017 	ldw	r19,0(r4)
  805ba4:	002d883a 	mov	r22,zero
  805ba8:	2801b516 	blt	r5,zero,806280 <___vfprintf_internal_r+0x18d0>
  805bac:	00ffdfc4 	movi	r3,-129
  805bb0:	d8802d15 	stw	r2,180(sp)
  805bb4:	90e4703a 	and	r18,r18,r3
  805bb8:	983d2726 	beq	r19,zero,805058 <__alt_mem_onchip_mem+0xff785058>
  805bbc:	0039883a 	mov	fp,zero
  805bc0:	003d2a06 	br	80506c <__alt_mem_onchip_mem+0xff78506c>
  805bc4:	dc402617 	ldw	r17,152(sp)
  805bc8:	0441d30e 	bge	zero,r17,806318 <___vfprintf_internal_r+0x1968>
  805bcc:	dc403217 	ldw	r17,200(sp)
  805bd0:	d8803317 	ldw	r2,204(sp)
  805bd4:	1440010e 	bge	r2,r17,805bdc <___vfprintf_internal_r+0x122c>
  805bd8:	1023883a 	mov	r17,r2
  805bdc:	04400a0e 	bge	zero,r17,805c08 <___vfprintf_internal_r+0x1258>
  805be0:	d8801f17 	ldw	r2,124(sp)
  805be4:	1c47883a 	add	r3,r3,r17
  805be8:	44000015 	stw	r16,0(r8)
  805bec:	10800044 	addi	r2,r2,1
  805bf0:	44400115 	stw	r17,4(r8)
  805bf4:	d8c02015 	stw	r3,128(sp)
  805bf8:	d8801f15 	stw	r2,124(sp)
  805bfc:	010001c4 	movi	r4,7
  805c00:	20826516 	blt	r4,r2,806598 <___vfprintf_internal_r+0x1be8>
  805c04:	42000204 	addi	r8,r8,8
  805c08:	88026116 	blt	r17,zero,806590 <___vfprintf_internal_r+0x1be0>
  805c0c:	d9003217 	ldw	r4,200(sp)
  805c10:	2463c83a 	sub	r17,r4,r17
  805c14:	04407b0e 	bge	zero,r17,805e04 <___vfprintf_internal_r+0x1454>
  805c18:	05800404 	movi	r22,16
  805c1c:	d8801f17 	ldw	r2,124(sp)
  805c20:	b4419d0e 	bge	r22,r17,806298 <___vfprintf_internal_r+0x18e8>
  805c24:	01002074 	movhi	r4,129
  805c28:	2111f784 	addi	r4,r4,18398
  805c2c:	d9002b15 	stw	r4,172(sp)
  805c30:	070001c4 	movi	fp,7
  805c34:	dcc02c17 	ldw	r19,176(sp)
  805c38:	00000306 	br	805c48 <___vfprintf_internal_r+0x1298>
  805c3c:	42000204 	addi	r8,r8,8
  805c40:	8c7ffc04 	addi	r17,r17,-16
  805c44:	b441970e 	bge	r22,r17,8062a4 <___vfprintf_internal_r+0x18f4>
  805c48:	18c00404 	addi	r3,r3,16
  805c4c:	10800044 	addi	r2,r2,1
  805c50:	45000015 	stw	r20,0(r8)
  805c54:	45800115 	stw	r22,4(r8)
  805c58:	d8c02015 	stw	r3,128(sp)
  805c5c:	d8801f15 	stw	r2,124(sp)
  805c60:	e0bff60e 	bge	fp,r2,805c3c <__alt_mem_onchip_mem+0xff785c3c>
  805c64:	d9801e04 	addi	r6,sp,120
  805c68:	b80b883a 	mov	r5,r23
  805c6c:	9809883a 	mov	r4,r19
  805c70:	080b5a00 	call	80b5a0 <__sprint_r>
  805c74:	103c501e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805c78:	d8c02017 	ldw	r3,128(sp)
  805c7c:	d8801f17 	ldw	r2,124(sp)
  805c80:	da000404 	addi	r8,sp,16
  805c84:	003fee06 	br	805c40 <__alt_mem_onchip_mem+0xff785c40>
  805c88:	d9002c17 	ldw	r4,176(sp)
  805c8c:	d9801e04 	addi	r6,sp,120
  805c90:	b80b883a 	mov	r5,r23
  805c94:	080b5a00 	call	80b5a0 <__sprint_r>
  805c98:	103c471e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805c9c:	d8c02017 	ldw	r3,128(sp)
  805ca0:	df002787 	ldb	fp,158(sp)
  805ca4:	da000404 	addi	r8,sp,16
  805ca8:	003d5606 	br	805204 <__alt_mem_onchip_mem+0xff785204>
  805cac:	9080040c 	andi	r2,r18,16
  805cb0:	10016126 	beq	r2,zero,806238 <___vfprintf_internal_r+0x1888>
  805cb4:	d8802d17 	ldw	r2,180(sp)
  805cb8:	14c00017 	ldw	r19,0(r2)
  805cbc:	10800104 	addi	r2,r2,4
  805cc0:	d8802d15 	stw	r2,180(sp)
  805cc4:	982dd7fa 	srai	r22,r19,31
  805cc8:	b005883a 	mov	r2,r22
  805ccc:	003c8206 	br	804ed8 <__alt_mem_onchip_mem+0xff784ed8>
  805cd0:	9080040c 	andi	r2,r18,16
  805cd4:	10003526 	beq	r2,zero,805dac <___vfprintf_internal_r+0x13fc>
  805cd8:	d9402d17 	ldw	r5,180(sp)
  805cdc:	d8c02917 	ldw	r3,164(sp)
  805ce0:	d8002785 	stb	zero,158(sp)
  805ce4:	28800104 	addi	r2,r5,4
  805ce8:	2cc00017 	ldw	r19,0(r5)
  805cec:	002d883a 	mov	r22,zero
  805cf0:	18003716 	blt	r3,zero,805dd0 <___vfprintf_internal_r+0x1420>
  805cf4:	00ffdfc4 	movi	r3,-129
  805cf8:	d8802d15 	stw	r2,180(sp)
  805cfc:	90e4703a 	and	r18,r18,r3
  805d00:	0039883a 	mov	fp,zero
  805d04:	983df326 	beq	r19,zero,8054d4 <__alt_mem_onchip_mem+0xff7854d4>
  805d08:	00800244 	movi	r2,9
  805d0c:	14fc7b36 	bltu	r2,r19,804efc <__alt_mem_onchip_mem+0xff784efc>
  805d10:	d8c02817 	ldw	r3,160(sp)
  805d14:	dc001dc4 	addi	r16,sp,119
  805d18:	9cc00c04 	addi	r19,r19,48
  805d1c:	1c07c83a 	sub	r3,r3,r16
  805d20:	dcc01dc5 	stb	r19,119(sp)
  805d24:	d8c02e15 	stw	r3,184(sp)
  805d28:	003ce806 	br	8050cc <__alt_mem_onchip_mem+0xff7850cc>
  805d2c:	d8803317 	ldw	r2,204(sp)
  805d30:	143fffc4 	addi	r16,r2,-1
  805d34:	043f4d0e 	bge	zero,r16,805a6c <__alt_mem_onchip_mem+0xff785a6c>
  805d38:	07000404 	movi	fp,16
  805d3c:	e400810e 	bge	fp,r16,805f44 <___vfprintf_internal_r+0x1594>
  805d40:	01402074 	movhi	r5,129
  805d44:	2951f784 	addi	r5,r5,18398
  805d48:	d9402b15 	stw	r5,172(sp)
  805d4c:	01c001c4 	movi	r7,7
  805d50:	dcc02c17 	ldw	r19,176(sp)
  805d54:	00000306 	br	805d64 <___vfprintf_internal_r+0x13b4>
  805d58:	b5800204 	addi	r22,r22,8
  805d5c:	843ffc04 	addi	r16,r16,-16
  805d60:	e4007b0e 	bge	fp,r16,805f50 <___vfprintf_internal_r+0x15a0>
  805d64:	18c00404 	addi	r3,r3,16
  805d68:	8c400044 	addi	r17,r17,1
  805d6c:	b5000015 	stw	r20,0(r22)
  805d70:	b7000115 	stw	fp,4(r22)
  805d74:	d8c02015 	stw	r3,128(sp)
  805d78:	dc401f15 	stw	r17,124(sp)
  805d7c:	3c7ff60e 	bge	r7,r17,805d58 <__alt_mem_onchip_mem+0xff785d58>
  805d80:	d9801e04 	addi	r6,sp,120
  805d84:	b80b883a 	mov	r5,r23
  805d88:	9809883a 	mov	r4,r19
  805d8c:	d9c03c15 	stw	r7,240(sp)
  805d90:	080b5a00 	call	80b5a0 <__sprint_r>
  805d94:	d9c03c17 	ldw	r7,240(sp)
  805d98:	103c071e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805d9c:	d8c02017 	ldw	r3,128(sp)
  805da0:	dc401f17 	ldw	r17,124(sp)
  805da4:	dd800404 	addi	r22,sp,16
  805da8:	003fec06 	br	805d5c <__alt_mem_onchip_mem+0xff785d5c>
  805dac:	9080100c 	andi	r2,r18,64
  805db0:	d8002785 	stb	zero,158(sp)
  805db4:	10010e26 	beq	r2,zero,8061f0 <___vfprintf_internal_r+0x1840>
  805db8:	d9002d17 	ldw	r4,180(sp)
  805dbc:	d9402917 	ldw	r5,164(sp)
  805dc0:	002d883a 	mov	r22,zero
  805dc4:	20800104 	addi	r2,r4,4
  805dc8:	24c0000b 	ldhu	r19,0(r4)
  805dcc:	283fc90e 	bge	r5,zero,805cf4 <__alt_mem_onchip_mem+0xff785cf4>
  805dd0:	d8802d15 	stw	r2,180(sp)
  805dd4:	0039883a 	mov	fp,zero
  805dd8:	9d84b03a 	or	r2,r19,r22
  805ddc:	103c461e 	bne	r2,zero,804ef8 <__alt_mem_onchip_mem+0xff784ef8>
  805de0:	00800044 	movi	r2,1
  805de4:	003e6c06 	br	805798 <__alt_mem_onchip_mem+0xff785798>
  805de8:	d9002c17 	ldw	r4,176(sp)
  805dec:	d9801e04 	addi	r6,sp,120
  805df0:	b80b883a 	mov	r5,r23
  805df4:	080b5a00 	call	80b5a0 <__sprint_r>
  805df8:	103bef1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805dfc:	d8c02017 	ldw	r3,128(sp)
  805e00:	da000404 	addi	r8,sp,16
  805e04:	d9003217 	ldw	r4,200(sp)
  805e08:	d8802617 	ldw	r2,152(sp)
  805e0c:	d9403317 	ldw	r5,204(sp)
  805e10:	8123883a 	add	r17,r16,r4
  805e14:	11400216 	blt	r2,r5,805e20 <___vfprintf_internal_r+0x1470>
  805e18:	9100004c 	andi	r4,r18,1
  805e1c:	20000d26 	beq	r4,zero,805e54 <___vfprintf_internal_r+0x14a4>
  805e20:	d9003717 	ldw	r4,220(sp)
  805e24:	d9403417 	ldw	r5,208(sp)
  805e28:	1907883a 	add	r3,r3,r4
  805e2c:	d9001f17 	ldw	r4,124(sp)
  805e30:	41400015 	stw	r5,0(r8)
  805e34:	d9403717 	ldw	r5,220(sp)
  805e38:	21000044 	addi	r4,r4,1
  805e3c:	d8c02015 	stw	r3,128(sp)
  805e40:	41400115 	stw	r5,4(r8)
  805e44:	d9001f15 	stw	r4,124(sp)
  805e48:	014001c4 	movi	r5,7
  805e4c:	2901e816 	blt	r5,r4,8065f0 <___vfprintf_internal_r+0x1c40>
  805e50:	42000204 	addi	r8,r8,8
  805e54:	d9003317 	ldw	r4,204(sp)
  805e58:	8121883a 	add	r16,r16,r4
  805e5c:	2085c83a 	sub	r2,r4,r2
  805e60:	8461c83a 	sub	r16,r16,r17
  805e64:	1400010e 	bge	r2,r16,805e6c <___vfprintf_internal_r+0x14bc>
  805e68:	1021883a 	mov	r16,r2
  805e6c:	04000a0e 	bge	zero,r16,805e98 <___vfprintf_internal_r+0x14e8>
  805e70:	d9001f17 	ldw	r4,124(sp)
  805e74:	1c07883a 	add	r3,r3,r16
  805e78:	44400015 	stw	r17,0(r8)
  805e7c:	21000044 	addi	r4,r4,1
  805e80:	44000115 	stw	r16,4(r8)
  805e84:	d8c02015 	stw	r3,128(sp)
  805e88:	d9001f15 	stw	r4,124(sp)
  805e8c:	014001c4 	movi	r5,7
  805e90:	2901fb16 	blt	r5,r4,806680 <___vfprintf_internal_r+0x1cd0>
  805e94:	42000204 	addi	r8,r8,8
  805e98:	8001f716 	blt	r16,zero,806678 <___vfprintf_internal_r+0x1cc8>
  805e9c:	1421c83a 	sub	r16,r2,r16
  805ea0:	043d380e 	bge	zero,r16,805384 <__alt_mem_onchip_mem+0xff785384>
  805ea4:	04400404 	movi	r17,16
  805ea8:	d8801f17 	ldw	r2,124(sp)
  805eac:	8c3efb0e 	bge	r17,r16,805a9c <__alt_mem_onchip_mem+0xff785a9c>
  805eb0:	01402074 	movhi	r5,129
  805eb4:	2951f784 	addi	r5,r5,18398
  805eb8:	d9402b15 	stw	r5,172(sp)
  805ebc:	058001c4 	movi	r22,7
  805ec0:	dcc02c17 	ldw	r19,176(sp)
  805ec4:	00000306 	br	805ed4 <___vfprintf_internal_r+0x1524>
  805ec8:	42000204 	addi	r8,r8,8
  805ecc:	843ffc04 	addi	r16,r16,-16
  805ed0:	8c3ef50e 	bge	r17,r16,805aa8 <__alt_mem_onchip_mem+0xff785aa8>
  805ed4:	18c00404 	addi	r3,r3,16
  805ed8:	10800044 	addi	r2,r2,1
  805edc:	45000015 	stw	r20,0(r8)
  805ee0:	44400115 	stw	r17,4(r8)
  805ee4:	d8c02015 	stw	r3,128(sp)
  805ee8:	d8801f15 	stw	r2,124(sp)
  805eec:	b0bff60e 	bge	r22,r2,805ec8 <__alt_mem_onchip_mem+0xff785ec8>
  805ef0:	d9801e04 	addi	r6,sp,120
  805ef4:	b80b883a 	mov	r5,r23
  805ef8:	9809883a 	mov	r4,r19
  805efc:	080b5a00 	call	80b5a0 <__sprint_r>
  805f00:	103bad1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805f04:	d8c02017 	ldw	r3,128(sp)
  805f08:	d8801f17 	ldw	r2,124(sp)
  805f0c:	da000404 	addi	r8,sp,16
  805f10:	003fee06 	br	805ecc <__alt_mem_onchip_mem+0xff785ecc>
  805f14:	9088703a 	and	r4,r18,r2
  805f18:	203eab1e 	bne	r4,zero,8059c8 <__alt_mem_onchip_mem+0xff7859c8>
  805f1c:	dc401f17 	ldw	r17,124(sp)
  805f20:	40800115 	stw	r2,4(r8)
  805f24:	44000015 	stw	r16,0(r8)
  805f28:	8c400044 	addi	r17,r17,1
  805f2c:	d8c02015 	stw	r3,128(sp)
  805f30:	dc401f15 	stw	r17,124(sp)
  805f34:	008001c4 	movi	r2,7
  805f38:	14400e16 	blt	r2,r17,805f74 <___vfprintf_internal_r+0x15c4>
  805f3c:	45800204 	addi	r22,r8,8
  805f40:	003eca06 	br	805a6c <__alt_mem_onchip_mem+0xff785a6c>
  805f44:	01002074 	movhi	r4,129
  805f48:	2111f784 	addi	r4,r4,18398
  805f4c:	d9002b15 	stw	r4,172(sp)
  805f50:	d8802b17 	ldw	r2,172(sp)
  805f54:	1c07883a 	add	r3,r3,r16
  805f58:	8c400044 	addi	r17,r17,1
  805f5c:	b0800015 	stw	r2,0(r22)
  805f60:	b4000115 	stw	r16,4(r22)
  805f64:	d8c02015 	stw	r3,128(sp)
  805f68:	dc401f15 	stw	r17,124(sp)
  805f6c:	008001c4 	movi	r2,7
  805f70:	147ebd0e 	bge	r2,r17,805a68 <__alt_mem_onchip_mem+0xff785a68>
  805f74:	d9002c17 	ldw	r4,176(sp)
  805f78:	d9801e04 	addi	r6,sp,120
  805f7c:	b80b883a 	mov	r5,r23
  805f80:	080b5a00 	call	80b5a0 <__sprint_r>
  805f84:	103b8c1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805f88:	d8c02017 	ldw	r3,128(sp)
  805f8c:	dc401f17 	ldw	r17,124(sp)
  805f90:	dd800404 	addi	r22,sp,16
  805f94:	003eb506 	br	805a6c <__alt_mem_onchip_mem+0xff785a6c>
  805f98:	d9002c17 	ldw	r4,176(sp)
  805f9c:	d9801e04 	addi	r6,sp,120
  805fa0:	b80b883a 	mov	r5,r23
  805fa4:	080b5a00 	call	80b5a0 <__sprint_r>
  805fa8:	103b831e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805fac:	d8c02017 	ldw	r3,128(sp)
  805fb0:	dc401f17 	ldw	r17,124(sp)
  805fb4:	da000404 	addi	r8,sp,16
  805fb8:	003e8d06 	br	8059f0 <__alt_mem_onchip_mem+0xff7859f0>
  805fbc:	d9002c17 	ldw	r4,176(sp)
  805fc0:	d9801e04 	addi	r6,sp,120
  805fc4:	b80b883a 	mov	r5,r23
  805fc8:	080b5a00 	call	80b5a0 <__sprint_r>
  805fcc:	103b7a1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805fd0:	d8c02017 	ldw	r3,128(sp)
  805fd4:	dc401f17 	ldw	r17,124(sp)
  805fd8:	dd800404 	addi	r22,sp,16
  805fdc:	003e8f06 	br	805a1c <__alt_mem_onchip_mem+0xff785a1c>
  805fe0:	0027883a 	mov	r19,zero
  805fe4:	003f4a06 	br	805d10 <__alt_mem_onchip_mem+0xff785d10>
  805fe8:	d9002c17 	ldw	r4,176(sp)
  805fec:	d9801e04 	addi	r6,sp,120
  805ff0:	b80b883a 	mov	r5,r23
  805ff4:	080b5a00 	call	80b5a0 <__sprint_r>
  805ff8:	103b6f1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  805ffc:	d8c02017 	ldw	r3,128(sp)
  806000:	da000404 	addi	r8,sp,16
  806004:	003c9d06 	br	80527c <__alt_mem_onchip_mem+0xff78527c>
  806008:	04e7c83a 	sub	r19,zero,r19
  80600c:	9804c03a 	cmpne	r2,r19,zero
  806010:	05adc83a 	sub	r22,zero,r22
  806014:	b0adc83a 	sub	r22,r22,r2
  806018:	d8802917 	ldw	r2,164(sp)
  80601c:	07000b44 	movi	fp,45
  806020:	df002785 	stb	fp,158(sp)
  806024:	10017b16 	blt	r2,zero,806614 <___vfprintf_internal_r+0x1c64>
  806028:	00bfdfc4 	movi	r2,-129
  80602c:	90a4703a 	and	r18,r18,r2
  806030:	003bb106 	br	804ef8 <__alt_mem_onchip_mem+0xff784ef8>
  806034:	d9003617 	ldw	r4,216(sp)
  806038:	d9403817 	ldw	r5,224(sp)
  80603c:	da003d15 	stw	r8,244(sp)
  806040:	080b3540 	call	80b354 <__fpclassifyd>
  806044:	da003d17 	ldw	r8,244(sp)
  806048:	1000f026 	beq	r2,zero,80640c <___vfprintf_internal_r+0x1a5c>
  80604c:	d9002917 	ldw	r4,164(sp)
  806050:	05bff7c4 	movi	r22,-33
  806054:	00bfffc4 	movi	r2,-1
  806058:	8dac703a 	and	r22,r17,r22
  80605c:	20820026 	beq	r4,r2,806860 <___vfprintf_internal_r+0x1eb0>
  806060:	008011c4 	movi	r2,71
  806064:	b081f726 	beq	r22,r2,806844 <___vfprintf_internal_r+0x1e94>
  806068:	d9003817 	ldw	r4,224(sp)
  80606c:	90c04014 	ori	r3,r18,256
  806070:	d8c02b15 	stw	r3,172(sp)
  806074:	20021516 	blt	r4,zero,8068cc <___vfprintf_internal_r+0x1f1c>
  806078:	dcc03817 	ldw	r19,224(sp)
  80607c:	d8002a05 	stb	zero,168(sp)
  806080:	00801984 	movi	r2,102
  806084:	8881f926 	beq	r17,r2,80686c <___vfprintf_internal_r+0x1ebc>
  806088:	00801184 	movi	r2,70
  80608c:	88821c26 	beq	r17,r2,806900 <___vfprintf_internal_r+0x1f50>
  806090:	00801144 	movi	r2,69
  806094:	b081ef26 	beq	r22,r2,806854 <___vfprintf_internal_r+0x1ea4>
  806098:	d8c02917 	ldw	r3,164(sp)
  80609c:	d8802104 	addi	r2,sp,132
  8060a0:	d8800315 	stw	r2,12(sp)
  8060a4:	d9403617 	ldw	r5,216(sp)
  8060a8:	d8802504 	addi	r2,sp,148
  8060ac:	d9002c17 	ldw	r4,176(sp)
  8060b0:	d8800215 	stw	r2,8(sp)
  8060b4:	d8802604 	addi	r2,sp,152
  8060b8:	d8c00015 	stw	r3,0(sp)
  8060bc:	d8800115 	stw	r2,4(sp)
  8060c0:	01c00084 	movi	r7,2
  8060c4:	980d883a 	mov	r6,r19
  8060c8:	d8c03c15 	stw	r3,240(sp)
  8060cc:	da003d15 	stw	r8,244(sp)
  8060d0:	08070880 	call	807088 <_dtoa_r>
  8060d4:	1021883a 	mov	r16,r2
  8060d8:	008019c4 	movi	r2,103
  8060dc:	d8c03c17 	ldw	r3,240(sp)
  8060e0:	da003d17 	ldw	r8,244(sp)
  8060e4:	88817126 	beq	r17,r2,8066ac <___vfprintf_internal_r+0x1cfc>
  8060e8:	008011c4 	movi	r2,71
  8060ec:	88829226 	beq	r17,r2,806b38 <___vfprintf_internal_r+0x2188>
  8060f0:	80f9883a 	add	fp,r16,r3
  8060f4:	d9003617 	ldw	r4,216(sp)
  8060f8:	000d883a 	mov	r6,zero
  8060fc:	000f883a 	mov	r7,zero
  806100:	980b883a 	mov	r5,r19
  806104:	da003d15 	stw	r8,244(sp)
  806108:	080eff40 	call	80eff4 <__eqdf2>
  80610c:	da003d17 	ldw	r8,244(sp)
  806110:	10018d26 	beq	r2,zero,806748 <___vfprintf_internal_r+0x1d98>
  806114:	d8802117 	ldw	r2,132(sp)
  806118:	1700062e 	bgeu	r2,fp,806134 <___vfprintf_internal_r+0x1784>
  80611c:	01000c04 	movi	r4,48
  806120:	10c00044 	addi	r3,r2,1
  806124:	d8c02115 	stw	r3,132(sp)
  806128:	11000005 	stb	r4,0(r2)
  80612c:	d8802117 	ldw	r2,132(sp)
  806130:	173ffb36 	bltu	r2,fp,806120 <__alt_mem_onchip_mem+0xff786120>
  806134:	1405c83a 	sub	r2,r2,r16
  806138:	d8803315 	stw	r2,204(sp)
  80613c:	008011c4 	movi	r2,71
  806140:	b0817626 	beq	r22,r2,80671c <___vfprintf_internal_r+0x1d6c>
  806144:	00801944 	movi	r2,101
  806148:	1442810e 	bge	r2,r17,806b50 <___vfprintf_internal_r+0x21a0>
  80614c:	d8c02617 	ldw	r3,152(sp)
  806150:	00801984 	movi	r2,102
  806154:	d8c03215 	stw	r3,200(sp)
  806158:	8881fe26 	beq	r17,r2,806954 <___vfprintf_internal_r+0x1fa4>
  80615c:	d8c03217 	ldw	r3,200(sp)
  806160:	d9003317 	ldw	r4,204(sp)
  806164:	1901dd16 	blt	r3,r4,8068dc <___vfprintf_internal_r+0x1f2c>
  806168:	9480004c 	andi	r18,r18,1
  80616c:	90022b1e 	bne	r18,zero,806a1c <___vfprintf_internal_r+0x206c>
  806170:	1805883a 	mov	r2,r3
  806174:	18028016 	blt	r3,zero,806b78 <___vfprintf_internal_r+0x21c8>
  806178:	d8c03217 	ldw	r3,200(sp)
  80617c:	044019c4 	movi	r17,103
  806180:	d8c02e15 	stw	r3,184(sp)
  806184:	df002a07 	ldb	fp,168(sp)
  806188:	e001531e 	bne	fp,zero,8066d8 <___vfprintf_internal_r+0x1d28>
  80618c:	df002783 	ldbu	fp,158(sp)
  806190:	d8802a15 	stw	r2,168(sp)
  806194:	dc802b17 	ldw	r18,172(sp)
  806198:	d8002915 	stw	zero,164(sp)
  80619c:	003bd106 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  8061a0:	d8802d17 	ldw	r2,180(sp)
  8061a4:	d8c02d17 	ldw	r3,180(sp)
  8061a8:	d9002d17 	ldw	r4,180(sp)
  8061ac:	10800017 	ldw	r2,0(r2)
  8061b0:	18c00117 	ldw	r3,4(r3)
  8061b4:	21000204 	addi	r4,r4,8
  8061b8:	d8803615 	stw	r2,216(sp)
  8061bc:	d8c03815 	stw	r3,224(sp)
  8061c0:	d9002d15 	stw	r4,180(sp)
  8061c4:	003b7506 	br	804f9c <__alt_mem_onchip_mem+0xff784f9c>
  8061c8:	ac400007 	ldb	r17,0(r21)
  8061cc:	003a5906 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8061d0:	9080100c 	andi	r2,r18,64
  8061d4:	1000a826 	beq	r2,zero,806478 <___vfprintf_internal_r+0x1ac8>
  8061d8:	d9002d17 	ldw	r4,180(sp)
  8061dc:	002d883a 	mov	r22,zero
  8061e0:	24c0000b 	ldhu	r19,0(r4)
  8061e4:	21000104 	addi	r4,r4,4
  8061e8:	d9002d15 	stw	r4,180(sp)
  8061ec:	003ccb06 	br	80551c <__alt_mem_onchip_mem+0xff78551c>
  8061f0:	d8c02d17 	ldw	r3,180(sp)
  8061f4:	d9002917 	ldw	r4,164(sp)
  8061f8:	002d883a 	mov	r22,zero
  8061fc:	18800104 	addi	r2,r3,4
  806200:	1cc00017 	ldw	r19,0(r3)
  806204:	203ebb0e 	bge	r4,zero,805cf4 <__alt_mem_onchip_mem+0xff785cf4>
  806208:	003ef106 	br	805dd0 <__alt_mem_onchip_mem+0xff785dd0>
  80620c:	9080040c 	andi	r2,r18,16
  806210:	1000921e 	bne	r2,zero,80645c <___vfprintf_internal_r+0x1aac>
  806214:	9480100c 	andi	r18,r18,64
  806218:	90013926 	beq	r18,zero,806700 <___vfprintf_internal_r+0x1d50>
  80621c:	d9002d17 	ldw	r4,180(sp)
  806220:	d9402f17 	ldw	r5,188(sp)
  806224:	20800017 	ldw	r2,0(r4)
  806228:	21000104 	addi	r4,r4,4
  80622c:	d9002d15 	stw	r4,180(sp)
  806230:	1140000d 	sth	r5,0(r2)
  806234:	003a1606 	br	804a90 <__alt_mem_onchip_mem+0xff784a90>
  806238:	9080100c 	andi	r2,r18,64
  80623c:	10008026 	beq	r2,zero,806440 <___vfprintf_internal_r+0x1a90>
  806240:	d8c02d17 	ldw	r3,180(sp)
  806244:	1cc0000f 	ldh	r19,0(r3)
  806248:	18c00104 	addi	r3,r3,4
  80624c:	d8c02d15 	stw	r3,180(sp)
  806250:	982dd7fa 	srai	r22,r19,31
  806254:	b005883a 	mov	r2,r22
  806258:	003b1f06 	br	804ed8 <__alt_mem_onchip_mem+0xff784ed8>
  80625c:	9080100c 	andi	r2,r18,64
  806260:	d8002785 	stb	zero,158(sp)
  806264:	10008a1e 	bne	r2,zero,806490 <___vfprintf_internal_r+0x1ae0>
  806268:	d9402d17 	ldw	r5,180(sp)
  80626c:	d8c02917 	ldw	r3,164(sp)
  806270:	002d883a 	mov	r22,zero
  806274:	28800104 	addi	r2,r5,4
  806278:	2cc00017 	ldw	r19,0(r5)
  80627c:	183e4b0e 	bge	r3,zero,805bac <__alt_mem_onchip_mem+0xff785bac>
  806280:	9d86b03a 	or	r3,r19,r22
  806284:	d8802d15 	stw	r2,180(sp)
  806288:	183e4c1e 	bne	r3,zero,805bbc <__alt_mem_onchip_mem+0xff785bbc>
  80628c:	0039883a 	mov	fp,zero
  806290:	0005883a 	mov	r2,zero
  806294:	003d4006 	br	805798 <__alt_mem_onchip_mem+0xff785798>
  806298:	01402074 	movhi	r5,129
  80629c:	2951f784 	addi	r5,r5,18398
  8062a0:	d9402b15 	stw	r5,172(sp)
  8062a4:	d9402b17 	ldw	r5,172(sp)
  8062a8:	1c47883a 	add	r3,r3,r17
  8062ac:	10800044 	addi	r2,r2,1
  8062b0:	41400015 	stw	r5,0(r8)
  8062b4:	44400115 	stw	r17,4(r8)
  8062b8:	d8c02015 	stw	r3,128(sp)
  8062bc:	d8801f15 	stw	r2,124(sp)
  8062c0:	010001c4 	movi	r4,7
  8062c4:	20bec816 	blt	r4,r2,805de8 <__alt_mem_onchip_mem+0xff785de8>
  8062c8:	42000204 	addi	r8,r8,8
  8062cc:	003ecd06 	br	805e04 <__alt_mem_onchip_mem+0xff785e04>
  8062d0:	d9002917 	ldw	r4,164(sp)
  8062d4:	d8002785 	stb	zero,158(sp)
  8062d8:	203d2d16 	blt	r4,zero,805790 <__alt_mem_onchip_mem+0xff785790>
  8062dc:	00bfdfc4 	movi	r2,-129
  8062e0:	90a4703a 	and	r18,r18,r2
  8062e4:	003a9106 	br	804d2c <__alt_mem_onchip_mem+0xff784d2c>
  8062e8:	01002074 	movhi	r4,129
  8062ec:	2111f784 	addi	r4,r4,18398
  8062f0:	d9002b15 	stw	r4,172(sp)
  8062f4:	003c0c06 	br	805328 <__alt_mem_onchip_mem+0xff785328>
  8062f8:	d9002c17 	ldw	r4,176(sp)
  8062fc:	d9801e04 	addi	r6,sp,120
  806300:	b80b883a 	mov	r5,r23
  806304:	080b5a00 	call	80b5a0 <__sprint_r>
  806308:	103aab1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  80630c:	d8c02017 	ldw	r3,128(sp)
  806310:	da000404 	addi	r8,sp,16
  806314:	003d4106 	br	80581c <__alt_mem_onchip_mem+0xff78581c>
  806318:	d8801f17 	ldw	r2,124(sp)
  80631c:	01402074 	movhi	r5,129
  806320:	01000044 	movi	r4,1
  806324:	18c00044 	addi	r3,r3,1
  806328:	10800044 	addi	r2,r2,1
  80632c:	2951f704 	addi	r5,r5,18396
  806330:	41000115 	stw	r4,4(r8)
  806334:	41400015 	stw	r5,0(r8)
  806338:	d8c02015 	stw	r3,128(sp)
  80633c:	d8801f15 	stw	r2,124(sp)
  806340:	010001c4 	movi	r4,7
  806344:	20805c16 	blt	r4,r2,8064b8 <___vfprintf_internal_r+0x1b08>
  806348:	42000204 	addi	r8,r8,8
  80634c:	8800041e 	bne	r17,zero,806360 <___vfprintf_internal_r+0x19b0>
  806350:	d8803317 	ldw	r2,204(sp)
  806354:	1000021e 	bne	r2,zero,806360 <___vfprintf_internal_r+0x19b0>
  806358:	9080004c 	andi	r2,r18,1
  80635c:	103c0926 	beq	r2,zero,805384 <__alt_mem_onchip_mem+0xff785384>
  806360:	d9003717 	ldw	r4,220(sp)
  806364:	d8801f17 	ldw	r2,124(sp)
  806368:	d9403417 	ldw	r5,208(sp)
  80636c:	20c7883a 	add	r3,r4,r3
  806370:	10800044 	addi	r2,r2,1
  806374:	41000115 	stw	r4,4(r8)
  806378:	41400015 	stw	r5,0(r8)
  80637c:	d8c02015 	stw	r3,128(sp)
  806380:	d8801f15 	stw	r2,124(sp)
  806384:	010001c4 	movi	r4,7
  806388:	20812116 	blt	r4,r2,806810 <___vfprintf_internal_r+0x1e60>
  80638c:	42000204 	addi	r8,r8,8
  806390:	0463c83a 	sub	r17,zero,r17
  806394:	0440730e 	bge	zero,r17,806564 <___vfprintf_internal_r+0x1bb4>
  806398:	05800404 	movi	r22,16
  80639c:	b440860e 	bge	r22,r17,8065b8 <___vfprintf_internal_r+0x1c08>
  8063a0:	01402074 	movhi	r5,129
  8063a4:	2951f784 	addi	r5,r5,18398
  8063a8:	d9402b15 	stw	r5,172(sp)
  8063ac:	070001c4 	movi	fp,7
  8063b0:	dcc02c17 	ldw	r19,176(sp)
  8063b4:	00000306 	br	8063c4 <___vfprintf_internal_r+0x1a14>
  8063b8:	42000204 	addi	r8,r8,8
  8063bc:	8c7ffc04 	addi	r17,r17,-16
  8063c0:	b440800e 	bge	r22,r17,8065c4 <___vfprintf_internal_r+0x1c14>
  8063c4:	18c00404 	addi	r3,r3,16
  8063c8:	10800044 	addi	r2,r2,1
  8063cc:	45000015 	stw	r20,0(r8)
  8063d0:	45800115 	stw	r22,4(r8)
  8063d4:	d8c02015 	stw	r3,128(sp)
  8063d8:	d8801f15 	stw	r2,124(sp)
  8063dc:	e0bff60e 	bge	fp,r2,8063b8 <__alt_mem_onchip_mem+0xff7863b8>
  8063e0:	d9801e04 	addi	r6,sp,120
  8063e4:	b80b883a 	mov	r5,r23
  8063e8:	9809883a 	mov	r4,r19
  8063ec:	080b5a00 	call	80b5a0 <__sprint_r>
  8063f0:	103a711e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  8063f4:	d8c02017 	ldw	r3,128(sp)
  8063f8:	d8801f17 	ldw	r2,124(sp)
  8063fc:	da000404 	addi	r8,sp,16
  806400:	003fee06 	br	8063bc <__alt_mem_onchip_mem+0xff7863bc>
  806404:	00bfffc4 	movi	r2,-1
  806408:	003a6f06 	br	804dc8 <__alt_mem_onchip_mem+0xff784dc8>
  80640c:	008011c4 	movi	r2,71
  806410:	1440b816 	blt	r2,r17,8066f4 <___vfprintf_internal_r+0x1d44>
  806414:	04002074 	movhi	r16,129
  806418:	8411e904 	addi	r16,r16,18340
  80641c:	00c000c4 	movi	r3,3
  806420:	00bfdfc4 	movi	r2,-129
  806424:	d8c02a15 	stw	r3,168(sp)
  806428:	90a4703a 	and	r18,r18,r2
  80642c:	df002783 	ldbu	fp,158(sp)
  806430:	d8c02e15 	stw	r3,184(sp)
  806434:	d8002915 	stw	zero,164(sp)
  806438:	d8003215 	stw	zero,200(sp)
  80643c:	003b2906 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  806440:	d9002d17 	ldw	r4,180(sp)
  806444:	24c00017 	ldw	r19,0(r4)
  806448:	21000104 	addi	r4,r4,4
  80644c:	d9002d15 	stw	r4,180(sp)
  806450:	982dd7fa 	srai	r22,r19,31
  806454:	b005883a 	mov	r2,r22
  806458:	003a9f06 	br	804ed8 <__alt_mem_onchip_mem+0xff784ed8>
  80645c:	d9402d17 	ldw	r5,180(sp)
  806460:	d8c02f17 	ldw	r3,188(sp)
  806464:	28800017 	ldw	r2,0(r5)
  806468:	29400104 	addi	r5,r5,4
  80646c:	d9402d15 	stw	r5,180(sp)
  806470:	10c00015 	stw	r3,0(r2)
  806474:	00398606 	br	804a90 <__alt_mem_onchip_mem+0xff784a90>
  806478:	d9402d17 	ldw	r5,180(sp)
  80647c:	002d883a 	mov	r22,zero
  806480:	2cc00017 	ldw	r19,0(r5)
  806484:	29400104 	addi	r5,r5,4
  806488:	d9402d15 	stw	r5,180(sp)
  80648c:	003c2306 	br	80551c <__alt_mem_onchip_mem+0xff78551c>
  806490:	d8c02d17 	ldw	r3,180(sp)
  806494:	d9002917 	ldw	r4,164(sp)
  806498:	002d883a 	mov	r22,zero
  80649c:	18800104 	addi	r2,r3,4
  8064a0:	1cc0000b 	ldhu	r19,0(r3)
  8064a4:	203dc10e 	bge	r4,zero,805bac <__alt_mem_onchip_mem+0xff785bac>
  8064a8:	003f7506 	br	806280 <__alt_mem_onchip_mem+0xff786280>
  8064ac:	04002074 	movhi	r16,129
  8064b0:	8411e704 	addi	r16,r16,18332
  8064b4:	003acc06 	br	804fe8 <__alt_mem_onchip_mem+0xff784fe8>
  8064b8:	d9002c17 	ldw	r4,176(sp)
  8064bc:	d9801e04 	addi	r6,sp,120
  8064c0:	b80b883a 	mov	r5,r23
  8064c4:	080b5a00 	call	80b5a0 <__sprint_r>
  8064c8:	103a3b1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  8064cc:	dc402617 	ldw	r17,152(sp)
  8064d0:	d8c02017 	ldw	r3,128(sp)
  8064d4:	da000404 	addi	r8,sp,16
  8064d8:	003f9c06 	br	80634c <__alt_mem_onchip_mem+0xff78634c>
  8064dc:	ac400043 	ldbu	r17,1(r21)
  8064e0:	94800814 	ori	r18,r18,32
  8064e4:	ad400044 	addi	r21,r21,1
  8064e8:	8c403fcc 	andi	r17,r17,255
  8064ec:	8c40201c 	xori	r17,r17,128
  8064f0:	8c7fe004 	addi	r17,r17,-128
  8064f4:	00398f06 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  8064f8:	d8c02d15 	stw	r3,180(sp)
  8064fc:	0039883a 	mov	fp,zero
  806500:	003e3506 	br	805dd8 <__alt_mem_onchip_mem+0xff785dd8>
  806504:	d9002c17 	ldw	r4,176(sp)
  806508:	d9801e04 	addi	r6,sp,120
  80650c:	b80b883a 	mov	r5,r23
  806510:	080b5a00 	call	80b5a0 <__sprint_r>
  806514:	103a281e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  806518:	d8c02017 	ldw	r3,128(sp)
  80651c:	da000404 	addi	r8,sp,16
  806520:	003cd006 	br	805864 <__alt_mem_onchip_mem+0xff785864>
  806524:	8009883a 	mov	r4,r16
  806528:	da003d15 	stw	r8,244(sp)
  80652c:	08049180 	call	804918 <strlen>
  806530:	d8802e15 	stw	r2,184(sp)
  806534:	da003d17 	ldw	r8,244(sp)
  806538:	103c340e 	bge	r2,zero,80560c <__alt_mem_onchip_mem+0xff78560c>
  80653c:	0005883a 	mov	r2,zero
  806540:	003c3206 	br	80560c <__alt_mem_onchip_mem+0xff78560c>
  806544:	d9002c17 	ldw	r4,176(sp)
  806548:	d9801e04 	addi	r6,sp,120
  80654c:	b80b883a 	mov	r5,r23
  806550:	080b5a00 	call	80b5a0 <__sprint_r>
  806554:	103a181e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  806558:	d8c02017 	ldw	r3,128(sp)
  80655c:	d8801f17 	ldw	r2,124(sp)
  806560:	da000404 	addi	r8,sp,16
  806564:	d9403317 	ldw	r5,204(sp)
  806568:	10800044 	addi	r2,r2,1
  80656c:	44000015 	stw	r16,0(r8)
  806570:	28c7883a 	add	r3,r5,r3
  806574:	003b7d06 	br	80536c <__alt_mem_onchip_mem+0xff78536c>
  806578:	01002074 	movhi	r4,129
  80657c:	2111fb84 	addi	r4,r4,18414
  806580:	d9003515 	stw	r4,212(sp)
  806584:	003b1406 	br	8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  806588:	013fffc4 	movi	r4,-1
  80658c:	003a3506 	br	804e64 <__alt_mem_onchip_mem+0xff784e64>
  806590:	0023883a 	mov	r17,zero
  806594:	003d9d06 	br	805c0c <__alt_mem_onchip_mem+0xff785c0c>
  806598:	d9002c17 	ldw	r4,176(sp)
  80659c:	d9801e04 	addi	r6,sp,120
  8065a0:	b80b883a 	mov	r5,r23
  8065a4:	080b5a00 	call	80b5a0 <__sprint_r>
  8065a8:	103a031e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  8065ac:	d8c02017 	ldw	r3,128(sp)
  8065b0:	da000404 	addi	r8,sp,16
  8065b4:	003d9406 	br	805c08 <__alt_mem_onchip_mem+0xff785c08>
  8065b8:	01002074 	movhi	r4,129
  8065bc:	2111f784 	addi	r4,r4,18398
  8065c0:	d9002b15 	stw	r4,172(sp)
  8065c4:	d9002b17 	ldw	r4,172(sp)
  8065c8:	1c47883a 	add	r3,r3,r17
  8065cc:	10800044 	addi	r2,r2,1
  8065d0:	41000015 	stw	r4,0(r8)
  8065d4:	44400115 	stw	r17,4(r8)
  8065d8:	d8c02015 	stw	r3,128(sp)
  8065dc:	d8801f15 	stw	r2,124(sp)
  8065e0:	010001c4 	movi	r4,7
  8065e4:	20bfd716 	blt	r4,r2,806544 <__alt_mem_onchip_mem+0xff786544>
  8065e8:	42000204 	addi	r8,r8,8
  8065ec:	003fdd06 	br	806564 <__alt_mem_onchip_mem+0xff786564>
  8065f0:	d9002c17 	ldw	r4,176(sp)
  8065f4:	d9801e04 	addi	r6,sp,120
  8065f8:	b80b883a 	mov	r5,r23
  8065fc:	080b5a00 	call	80b5a0 <__sprint_r>
  806600:	1039ed1e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  806604:	d8802617 	ldw	r2,152(sp)
  806608:	d8c02017 	ldw	r3,128(sp)
  80660c:	da000404 	addi	r8,sp,16
  806610:	003e1006 	br	805e54 <__alt_mem_onchip_mem+0xff785e54>
  806614:	00800044 	movi	r2,1
  806618:	10803fcc 	andi	r2,r2,255
  80661c:	00c00044 	movi	r3,1
  806620:	10fa3526 	beq	r2,r3,804ef8 <__alt_mem_onchip_mem+0xff784ef8>
  806624:	00c00084 	movi	r3,2
  806628:	10fbcb26 	beq	r2,r3,805558 <__alt_mem_onchip_mem+0xff785558>
  80662c:	003a8f06 	br	80506c <__alt_mem_onchip_mem+0xff78506c>
  806630:	01002074 	movhi	r4,129
  806634:	2111fb84 	addi	r4,r4,18414
  806638:	d9003515 	stw	r4,212(sp)
  80663c:	003b7606 	br	805418 <__alt_mem_onchip_mem+0xff785418>
  806640:	d8802917 	ldw	r2,164(sp)
  806644:	00c00184 	movi	r3,6
  806648:	1880012e 	bgeu	r3,r2,806650 <___vfprintf_internal_r+0x1ca0>
  80664c:	1805883a 	mov	r2,r3
  806650:	d8802e15 	stw	r2,184(sp)
  806654:	1000ef16 	blt	r2,zero,806a14 <___vfprintf_internal_r+0x2064>
  806658:	04002074 	movhi	r16,129
  80665c:	d8802a15 	stw	r2,168(sp)
  806660:	dcc02d15 	stw	r19,180(sp)
  806664:	d8002915 	stw	zero,164(sp)
  806668:	d8003215 	stw	zero,200(sp)
  80666c:	8411f504 	addi	r16,r16,18388
  806670:	0039883a 	mov	fp,zero
  806674:	003aa206 	br	805100 <__alt_mem_onchip_mem+0xff785100>
  806678:	0021883a 	mov	r16,zero
  80667c:	003e0706 	br	805e9c <__alt_mem_onchip_mem+0xff785e9c>
  806680:	d9002c17 	ldw	r4,176(sp)
  806684:	d9801e04 	addi	r6,sp,120
  806688:	b80b883a 	mov	r5,r23
  80668c:	080b5a00 	call	80b5a0 <__sprint_r>
  806690:	1039c91e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  806694:	d8802617 	ldw	r2,152(sp)
  806698:	d9403317 	ldw	r5,204(sp)
  80669c:	d8c02017 	ldw	r3,128(sp)
  8066a0:	da000404 	addi	r8,sp,16
  8066a4:	2885c83a 	sub	r2,r5,r2
  8066a8:	003dfb06 	br	805e98 <__alt_mem_onchip_mem+0xff785e98>
  8066ac:	9080004c 	andi	r2,r18,1
  8066b0:	103e8f1e 	bne	r2,zero,8060f0 <__alt_mem_onchip_mem+0xff7860f0>
  8066b4:	d8802117 	ldw	r2,132(sp)
  8066b8:	003e9e06 	br	806134 <__alt_mem_onchip_mem+0xff786134>
  8066bc:	1025883a 	mov	r18,r2
  8066c0:	0039883a 	mov	fp,zero
  8066c4:	00800084 	movi	r2,2
  8066c8:	003fd306 	br	806618 <__alt_mem_onchip_mem+0xff786618>
  8066cc:	07000b44 	movi	fp,45
  8066d0:	df002785 	stb	fp,158(sp)
  8066d4:	003a4006 	br	804fd8 <__alt_mem_onchip_mem+0xff784fd8>
  8066d8:	00c00b44 	movi	r3,45
  8066dc:	d8c02785 	stb	r3,158(sp)
  8066e0:	d8802a15 	stw	r2,168(sp)
  8066e4:	dc802b17 	ldw	r18,172(sp)
  8066e8:	d8002915 	stw	zero,164(sp)
  8066ec:	07000b44 	movi	fp,45
  8066f0:	003a8006 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  8066f4:	04002074 	movhi	r16,129
  8066f8:	8411ea04 	addi	r16,r16,18344
  8066fc:	003f4706 	br	80641c <__alt_mem_onchip_mem+0xff78641c>
  806700:	d8c02d17 	ldw	r3,180(sp)
  806704:	d9002f17 	ldw	r4,188(sp)
  806708:	18800017 	ldw	r2,0(r3)
  80670c:	18c00104 	addi	r3,r3,4
  806710:	d8c02d15 	stw	r3,180(sp)
  806714:	11000015 	stw	r4,0(r2)
  806718:	0038dd06 	br	804a90 <__alt_mem_onchip_mem+0xff784a90>
  80671c:	dd802617 	ldw	r22,152(sp)
  806720:	00bfff44 	movi	r2,-3
  806724:	b0801c16 	blt	r22,r2,806798 <___vfprintf_internal_r+0x1de8>
  806728:	d9402917 	ldw	r5,164(sp)
  80672c:	2d801a16 	blt	r5,r22,806798 <___vfprintf_internal_r+0x1de8>
  806730:	dd803215 	stw	r22,200(sp)
  806734:	003e8906 	br	80615c <__alt_mem_onchip_mem+0xff78615c>
  806738:	01002074 	movhi	r4,129
  80673c:	2111f784 	addi	r4,r4,18398
  806740:	d9002b15 	stw	r4,172(sp)
  806744:	003c9106 	br	80598c <__alt_mem_onchip_mem+0xff78598c>
  806748:	e005883a 	mov	r2,fp
  80674c:	003e7906 	br	806134 <__alt_mem_onchip_mem+0xff786134>
  806750:	d9402917 	ldw	r5,164(sp)
  806754:	df002783 	ldbu	fp,158(sp)
  806758:	dcc02d15 	stw	r19,180(sp)
  80675c:	d9402a15 	stw	r5,168(sp)
  806760:	d9402e15 	stw	r5,184(sp)
  806764:	d8002915 	stw	zero,164(sp)
  806768:	d8003215 	stw	zero,200(sp)
  80676c:	003a5d06 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  806770:	9080004c 	andi	r2,r18,1
  806774:	0039883a 	mov	fp,zero
  806778:	10000426 	beq	r2,zero,80678c <___vfprintf_internal_r+0x1ddc>
  80677c:	00800c04 	movi	r2,48
  806780:	dc001dc4 	addi	r16,sp,119
  806784:	d8801dc5 	stb	r2,119(sp)
  806788:	003b8006 	br	80558c <__alt_mem_onchip_mem+0xff78558c>
  80678c:	d8002e15 	stw	zero,184(sp)
  806790:	dc001e04 	addi	r16,sp,120
  806794:	003a4d06 	br	8050cc <__alt_mem_onchip_mem+0xff7850cc>
  806798:	8c7fff84 	addi	r17,r17,-2
  80679c:	b5bfffc4 	addi	r22,r22,-1
  8067a0:	dd802615 	stw	r22,152(sp)
  8067a4:	dc4022c5 	stb	r17,139(sp)
  8067a8:	b000bf16 	blt	r22,zero,806aa8 <___vfprintf_internal_r+0x20f8>
  8067ac:	00800ac4 	movi	r2,43
  8067b0:	d8802305 	stb	r2,140(sp)
  8067b4:	00800244 	movi	r2,9
  8067b8:	15807016 	blt	r2,r22,80697c <___vfprintf_internal_r+0x1fcc>
  8067bc:	00800c04 	movi	r2,48
  8067c0:	b5800c04 	addi	r22,r22,48
  8067c4:	d8802345 	stb	r2,141(sp)
  8067c8:	dd802385 	stb	r22,142(sp)
  8067cc:	d88023c4 	addi	r2,sp,143
  8067d0:	df0022c4 	addi	fp,sp,139
  8067d4:	d8c03317 	ldw	r3,204(sp)
  8067d8:	1739c83a 	sub	fp,r2,fp
  8067dc:	d9003317 	ldw	r4,204(sp)
  8067e0:	e0c7883a 	add	r3,fp,r3
  8067e4:	df003a15 	stw	fp,232(sp)
  8067e8:	d8c02e15 	stw	r3,184(sp)
  8067ec:	00800044 	movi	r2,1
  8067f0:	1100b30e 	bge	r2,r4,806ac0 <___vfprintf_internal_r+0x2110>
  8067f4:	d8c02e17 	ldw	r3,184(sp)
  8067f8:	18c00044 	addi	r3,r3,1
  8067fc:	d8c02e15 	stw	r3,184(sp)
  806800:	1805883a 	mov	r2,r3
  806804:	1800ac16 	blt	r3,zero,806ab8 <___vfprintf_internal_r+0x2108>
  806808:	d8003215 	stw	zero,200(sp)
  80680c:	003e5d06 	br	806184 <__alt_mem_onchip_mem+0xff786184>
  806810:	d9002c17 	ldw	r4,176(sp)
  806814:	d9801e04 	addi	r6,sp,120
  806818:	b80b883a 	mov	r5,r23
  80681c:	080b5a00 	call	80b5a0 <__sprint_r>
  806820:	1039651e 	bne	r2,zero,804db8 <__alt_mem_onchip_mem+0xff784db8>
  806824:	dc402617 	ldw	r17,152(sp)
  806828:	d8c02017 	ldw	r3,128(sp)
  80682c:	d8801f17 	ldw	r2,124(sp)
  806830:	da000404 	addi	r8,sp,16
  806834:	003ed606 	br	806390 <__alt_mem_onchip_mem+0xff786390>
  806838:	582b883a 	mov	r21,r11
  80683c:	d8002915 	stw	zero,164(sp)
  806840:	0038bd06 	br	804b38 <__alt_mem_onchip_mem+0xff784b38>
  806844:	d8802917 	ldw	r2,164(sp)
  806848:	103e071e 	bne	r2,zero,806068 <__alt_mem_onchip_mem+0xff786068>
  80684c:	dc002915 	stw	r16,164(sp)
  806850:	003e0506 	br	806068 <__alt_mem_onchip_mem+0xff786068>
  806854:	d9002917 	ldw	r4,164(sp)
  806858:	20c00044 	addi	r3,r4,1
  80685c:	003e0f06 	br	80609c <__alt_mem_onchip_mem+0xff78609c>
  806860:	01400184 	movi	r5,6
  806864:	d9402915 	stw	r5,164(sp)
  806868:	003dff06 	br	806068 <__alt_mem_onchip_mem+0xff786068>
  80686c:	d8802104 	addi	r2,sp,132
  806870:	d8800315 	stw	r2,12(sp)
  806874:	d8802504 	addi	r2,sp,148
  806878:	d8800215 	stw	r2,8(sp)
  80687c:	d8802604 	addi	r2,sp,152
  806880:	d8800115 	stw	r2,4(sp)
  806884:	d8802917 	ldw	r2,164(sp)
  806888:	d9403617 	ldw	r5,216(sp)
  80688c:	d9002c17 	ldw	r4,176(sp)
  806890:	d8800015 	stw	r2,0(sp)
  806894:	01c000c4 	movi	r7,3
  806898:	980d883a 	mov	r6,r19
  80689c:	da003d15 	stw	r8,244(sp)
  8068a0:	08070880 	call	807088 <_dtoa_r>
  8068a4:	d8c02917 	ldw	r3,164(sp)
  8068a8:	da003d17 	ldw	r8,244(sp)
  8068ac:	1021883a 	mov	r16,r2
  8068b0:	10f9883a 	add	fp,r2,r3
  8068b4:	81000007 	ldb	r4,0(r16)
  8068b8:	00800c04 	movi	r2,48
  8068bc:	20805e26 	beq	r4,r2,806a38 <___vfprintf_internal_r+0x2088>
  8068c0:	d8c02617 	ldw	r3,152(sp)
  8068c4:	e0f9883a 	add	fp,fp,r3
  8068c8:	003e0a06 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  8068cc:	00c00b44 	movi	r3,45
  8068d0:	24e0003c 	xorhi	r19,r4,32768
  8068d4:	d8c02a05 	stb	r3,168(sp)
  8068d8:	003de906 	br	806080 <__alt_mem_onchip_mem+0xff786080>
  8068dc:	d8c03217 	ldw	r3,200(sp)
  8068e0:	00c07a0e 	bge	zero,r3,806acc <___vfprintf_internal_r+0x211c>
  8068e4:	00800044 	movi	r2,1
  8068e8:	d9003317 	ldw	r4,204(sp)
  8068ec:	1105883a 	add	r2,r2,r4
  8068f0:	d8802e15 	stw	r2,184(sp)
  8068f4:	10004e16 	blt	r2,zero,806a30 <___vfprintf_internal_r+0x2080>
  8068f8:	044019c4 	movi	r17,103
  8068fc:	003e2106 	br	806184 <__alt_mem_onchip_mem+0xff786184>
  806900:	d9002917 	ldw	r4,164(sp)
  806904:	d8802104 	addi	r2,sp,132
  806908:	d8800315 	stw	r2,12(sp)
  80690c:	d9000015 	stw	r4,0(sp)
  806910:	d8802504 	addi	r2,sp,148
  806914:	d9403617 	ldw	r5,216(sp)
  806918:	d9002c17 	ldw	r4,176(sp)
  80691c:	d8800215 	stw	r2,8(sp)
  806920:	d8802604 	addi	r2,sp,152
  806924:	d8800115 	stw	r2,4(sp)
  806928:	01c000c4 	movi	r7,3
  80692c:	980d883a 	mov	r6,r19
  806930:	da003d15 	stw	r8,244(sp)
  806934:	08070880 	call	807088 <_dtoa_r>
  806938:	d8c02917 	ldw	r3,164(sp)
  80693c:	da003d17 	ldw	r8,244(sp)
  806940:	1021883a 	mov	r16,r2
  806944:	00801184 	movi	r2,70
  806948:	80f9883a 	add	fp,r16,r3
  80694c:	88bfd926 	beq	r17,r2,8068b4 <__alt_mem_onchip_mem+0xff7868b4>
  806950:	003de806 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  806954:	d9002917 	ldw	r4,164(sp)
  806958:	00c04d0e 	bge	zero,r3,806a90 <___vfprintf_internal_r+0x20e0>
  80695c:	2000441e 	bne	r4,zero,806a70 <___vfprintf_internal_r+0x20c0>
  806960:	9480004c 	andi	r18,r18,1
  806964:	9000421e 	bne	r18,zero,806a70 <___vfprintf_internal_r+0x20c0>
  806968:	1805883a 	mov	r2,r3
  80696c:	18007016 	blt	r3,zero,806b30 <___vfprintf_internal_r+0x2180>
  806970:	d8c03217 	ldw	r3,200(sp)
  806974:	d8c02e15 	stw	r3,184(sp)
  806978:	003e0206 	br	806184 <__alt_mem_onchip_mem+0xff786184>
  80697c:	df0022c4 	addi	fp,sp,139
  806980:	dc002915 	stw	r16,164(sp)
  806984:	4027883a 	mov	r19,r8
  806988:	e021883a 	mov	r16,fp
  80698c:	b009883a 	mov	r4,r22
  806990:	01400284 	movi	r5,10
  806994:	080dd300 	call	80dd30 <__modsi3>
  806998:	10800c04 	addi	r2,r2,48
  80699c:	843fffc4 	addi	r16,r16,-1
  8069a0:	b009883a 	mov	r4,r22
  8069a4:	01400284 	movi	r5,10
  8069a8:	80800005 	stb	r2,0(r16)
  8069ac:	080dcac0 	call	80dcac <__divsi3>
  8069b0:	102d883a 	mov	r22,r2
  8069b4:	00800244 	movi	r2,9
  8069b8:	15bff416 	blt	r2,r22,80698c <__alt_mem_onchip_mem+0xff78698c>
  8069bc:	9811883a 	mov	r8,r19
  8069c0:	b0800c04 	addi	r2,r22,48
  8069c4:	8027883a 	mov	r19,r16
  8069c8:	997fffc4 	addi	r5,r19,-1
  8069cc:	98bfffc5 	stb	r2,-1(r19)
  8069d0:	dc002917 	ldw	r16,164(sp)
  8069d4:	2f006a2e 	bgeu	r5,fp,806b80 <___vfprintf_internal_r+0x21d0>
  8069d8:	d9c02384 	addi	r7,sp,142
  8069dc:	3ccfc83a 	sub	r7,r7,r19
  8069e0:	d9002344 	addi	r4,sp,141
  8069e4:	e1cf883a 	add	r7,fp,r7
  8069e8:	00000106 	br	8069f0 <___vfprintf_internal_r+0x2040>
  8069ec:	28800003 	ldbu	r2,0(r5)
  8069f0:	20800005 	stb	r2,0(r4)
  8069f4:	21000044 	addi	r4,r4,1
  8069f8:	29400044 	addi	r5,r5,1
  8069fc:	393ffb1e 	bne	r7,r4,8069ec <__alt_mem_onchip_mem+0xff7869ec>
  806a00:	d8802304 	addi	r2,sp,140
  806a04:	14c5c83a 	sub	r2,r2,r19
  806a08:	d8c02344 	addi	r3,sp,141
  806a0c:	1885883a 	add	r2,r3,r2
  806a10:	003f7006 	br	8067d4 <__alt_mem_onchip_mem+0xff7867d4>
  806a14:	0005883a 	mov	r2,zero
  806a18:	003f0f06 	br	806658 <__alt_mem_onchip_mem+0xff786658>
  806a1c:	d8c03217 	ldw	r3,200(sp)
  806a20:	18c00044 	addi	r3,r3,1
  806a24:	d8c02e15 	stw	r3,184(sp)
  806a28:	1805883a 	mov	r2,r3
  806a2c:	183fb20e 	bge	r3,zero,8068f8 <__alt_mem_onchip_mem+0xff7868f8>
  806a30:	0005883a 	mov	r2,zero
  806a34:	003fb006 	br	8068f8 <__alt_mem_onchip_mem+0xff7868f8>
  806a38:	d9003617 	ldw	r4,216(sp)
  806a3c:	000d883a 	mov	r6,zero
  806a40:	000f883a 	mov	r7,zero
  806a44:	980b883a 	mov	r5,r19
  806a48:	d8c03c15 	stw	r3,240(sp)
  806a4c:	da003d15 	stw	r8,244(sp)
  806a50:	080eff40 	call	80eff4 <__eqdf2>
  806a54:	d8c03c17 	ldw	r3,240(sp)
  806a58:	da003d17 	ldw	r8,244(sp)
  806a5c:	103f9826 	beq	r2,zero,8068c0 <__alt_mem_onchip_mem+0xff7868c0>
  806a60:	00800044 	movi	r2,1
  806a64:	10c7c83a 	sub	r3,r2,r3
  806a68:	d8c02615 	stw	r3,152(sp)
  806a6c:	003f9506 	br	8068c4 <__alt_mem_onchip_mem+0xff7868c4>
  806a70:	d9002917 	ldw	r4,164(sp)
  806a74:	d8c03217 	ldw	r3,200(sp)
  806a78:	20800044 	addi	r2,r4,1
  806a7c:	1885883a 	add	r2,r3,r2
  806a80:	d8802e15 	stw	r2,184(sp)
  806a84:	103dbf0e 	bge	r2,zero,806184 <__alt_mem_onchip_mem+0xff786184>
  806a88:	0005883a 	mov	r2,zero
  806a8c:	003dbd06 	br	806184 <__alt_mem_onchip_mem+0xff786184>
  806a90:	2000211e 	bne	r4,zero,806b18 <___vfprintf_internal_r+0x2168>
  806a94:	9480004c 	andi	r18,r18,1
  806a98:	90001f1e 	bne	r18,zero,806b18 <___vfprintf_internal_r+0x2168>
  806a9c:	00800044 	movi	r2,1
  806aa0:	d8802e15 	stw	r2,184(sp)
  806aa4:	003db706 	br	806184 <__alt_mem_onchip_mem+0xff786184>
  806aa8:	00800b44 	movi	r2,45
  806aac:	05adc83a 	sub	r22,zero,r22
  806ab0:	d8802305 	stb	r2,140(sp)
  806ab4:	003f3f06 	br	8067b4 <__alt_mem_onchip_mem+0xff7867b4>
  806ab8:	0005883a 	mov	r2,zero
  806abc:	003f5206 	br	806808 <__alt_mem_onchip_mem+0xff786808>
  806ac0:	90a4703a 	and	r18,r18,r2
  806ac4:	903f4e26 	beq	r18,zero,806800 <__alt_mem_onchip_mem+0xff786800>
  806ac8:	003f4a06 	br	8067f4 <__alt_mem_onchip_mem+0xff7867f4>
  806acc:	00800084 	movi	r2,2
  806ad0:	10c5c83a 	sub	r2,r2,r3
  806ad4:	003f8406 	br	8068e8 <__alt_mem_onchip_mem+0xff7868e8>
  806ad8:	d8802d17 	ldw	r2,180(sp)
  806adc:	d9002d17 	ldw	r4,180(sp)
  806ae0:	ac400043 	ldbu	r17,1(r21)
  806ae4:	10800017 	ldw	r2,0(r2)
  806ae8:	582b883a 	mov	r21,r11
  806aec:	d8802915 	stw	r2,164(sp)
  806af0:	20800104 	addi	r2,r4,4
  806af4:	d9002917 	ldw	r4,164(sp)
  806af8:	d8802d15 	stw	r2,180(sp)
  806afc:	203e7a0e 	bge	r4,zero,8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  806b00:	8c403fcc 	andi	r17,r17,255
  806b04:	00bfffc4 	movi	r2,-1
  806b08:	8c40201c 	xori	r17,r17,128
  806b0c:	d8802915 	stw	r2,164(sp)
  806b10:	8c7fe004 	addi	r17,r17,-128
  806b14:	00380706 	br	804b34 <__alt_mem_onchip_mem+0xff784b34>
  806b18:	d8c02917 	ldw	r3,164(sp)
  806b1c:	18c00084 	addi	r3,r3,2
  806b20:	d8c02e15 	stw	r3,184(sp)
  806b24:	1805883a 	mov	r2,r3
  806b28:	183d960e 	bge	r3,zero,806184 <__alt_mem_onchip_mem+0xff786184>
  806b2c:	003fd606 	br	806a88 <__alt_mem_onchip_mem+0xff786a88>
  806b30:	0005883a 	mov	r2,zero
  806b34:	003f8e06 	br	806970 <__alt_mem_onchip_mem+0xff786970>
  806b38:	9080004c 	andi	r2,r18,1
  806b3c:	103f811e 	bne	r2,zero,806944 <__alt_mem_onchip_mem+0xff786944>
  806b40:	d8802117 	ldw	r2,132(sp)
  806b44:	1405c83a 	sub	r2,r2,r16
  806b48:	d8803315 	stw	r2,204(sp)
  806b4c:	b47ef326 	beq	r22,r17,80671c <__alt_mem_onchip_mem+0xff78671c>
  806b50:	dd802617 	ldw	r22,152(sp)
  806b54:	003f1106 	br	80679c <__alt_mem_onchip_mem+0xff78679c>
  806b58:	d9c02785 	stb	r7,158(sp)
  806b5c:	00390406 	br	804f70 <__alt_mem_onchip_mem+0xff784f70>
  806b60:	d9c02785 	stb	r7,158(sp)
  806b64:	0038d306 	br	804eb4 <__alt_mem_onchip_mem+0xff784eb4>
  806b68:	d9c02785 	stb	r7,158(sp)
  806b6c:	003a6106 	br	8054f4 <__alt_mem_onchip_mem+0xff7854f4>
  806b70:	d9c02785 	stb	r7,158(sp)
  806b74:	003af806 	br	805758 <__alt_mem_onchip_mem+0xff785758>
  806b78:	0005883a 	mov	r2,zero
  806b7c:	003d7e06 	br	806178 <__alt_mem_onchip_mem+0xff786178>
  806b80:	d8802344 	addi	r2,sp,141
  806b84:	003f1306 	br	8067d4 <__alt_mem_onchip_mem+0xff7867d4>
  806b88:	d9c02785 	stb	r7,158(sp)
  806b8c:	00392306 	br	80501c <__alt_mem_onchip_mem+0xff78501c>
  806b90:	d9c02785 	stb	r7,158(sp)
  806b94:	003aa906 	br	80563c <__alt_mem_onchip_mem+0xff78563c>
  806b98:	d9c02785 	stb	r7,158(sp)
  806b9c:	003a3d06 	br	805494 <__alt_mem_onchip_mem+0xff785494>
  806ba0:	d9c02785 	stb	r7,158(sp)
  806ba4:	003aca06 	br	8056d0 <__alt_mem_onchip_mem+0xff7856d0>

00806ba8 <__vfprintf_internal>:
  806ba8:	00802074 	movhi	r2,129
  806bac:	109a6e04 	addi	r2,r2,27064
  806bb0:	300f883a 	mov	r7,r6
  806bb4:	280d883a 	mov	r6,r5
  806bb8:	200b883a 	mov	r5,r4
  806bbc:	11000017 	ldw	r4,0(r2)
  806bc0:	08049b01 	jmpi	8049b0 <___vfprintf_internal_r>

00806bc4 <__sbprintf>:
  806bc4:	2880030b 	ldhu	r2,12(r5)
  806bc8:	2ac01917 	ldw	r11,100(r5)
  806bcc:	2a80038b 	ldhu	r10,14(r5)
  806bd0:	2a400717 	ldw	r9,28(r5)
  806bd4:	2a000917 	ldw	r8,36(r5)
  806bd8:	defee204 	addi	sp,sp,-1144
  806bdc:	00c10004 	movi	r3,1024
  806be0:	dc011a15 	stw	r16,1128(sp)
  806be4:	10bfff4c 	andi	r2,r2,65533
  806be8:	2821883a 	mov	r16,r5
  806bec:	d8cb883a 	add	r5,sp,r3
  806bf0:	dc811c15 	stw	r18,1136(sp)
  806bf4:	dc411b15 	stw	r17,1132(sp)
  806bf8:	dfc11d15 	stw	ra,1140(sp)
  806bfc:	2025883a 	mov	r18,r4
  806c00:	d881030d 	sth	r2,1036(sp)
  806c04:	dac11915 	stw	r11,1124(sp)
  806c08:	da81038d 	sth	r10,1038(sp)
  806c0c:	da410715 	stw	r9,1052(sp)
  806c10:	da010915 	stw	r8,1060(sp)
  806c14:	dec10015 	stw	sp,1024(sp)
  806c18:	dec10415 	stw	sp,1040(sp)
  806c1c:	d8c10215 	stw	r3,1032(sp)
  806c20:	d8c10515 	stw	r3,1044(sp)
  806c24:	d8010615 	stw	zero,1048(sp)
  806c28:	08049b00 	call	8049b0 <___vfprintf_internal_r>
  806c2c:	1023883a 	mov	r17,r2
  806c30:	10000416 	blt	r2,zero,806c44 <__sbprintf+0x80>
  806c34:	d9410004 	addi	r5,sp,1024
  806c38:	9009883a 	mov	r4,r18
  806c3c:	080892c0 	call	80892c <_fflush_r>
  806c40:	10000d1e 	bne	r2,zero,806c78 <__sbprintf+0xb4>
  806c44:	d881030b 	ldhu	r2,1036(sp)
  806c48:	1080100c 	andi	r2,r2,64
  806c4c:	10000326 	beq	r2,zero,806c5c <__sbprintf+0x98>
  806c50:	8080030b 	ldhu	r2,12(r16)
  806c54:	10801014 	ori	r2,r2,64
  806c58:	8080030d 	sth	r2,12(r16)
  806c5c:	8805883a 	mov	r2,r17
  806c60:	dfc11d17 	ldw	ra,1140(sp)
  806c64:	dc811c17 	ldw	r18,1136(sp)
  806c68:	dc411b17 	ldw	r17,1132(sp)
  806c6c:	dc011a17 	ldw	r16,1128(sp)
  806c70:	dec11e04 	addi	sp,sp,1144
  806c74:	f800283a 	ret
  806c78:	047fffc4 	movi	r17,-1
  806c7c:	003ff106 	br	806c44 <__alt_mem_onchip_mem+0xff786c44>

00806c80 <_write_r>:
  806c80:	defffd04 	addi	sp,sp,-12
  806c84:	2805883a 	mov	r2,r5
  806c88:	dc000015 	stw	r16,0(sp)
  806c8c:	040020b4 	movhi	r16,130
  806c90:	dc400115 	stw	r17,4(sp)
  806c94:	300b883a 	mov	r5,r6
  806c98:	84221504 	addi	r16,r16,-30636
  806c9c:	2023883a 	mov	r17,r4
  806ca0:	380d883a 	mov	r6,r7
  806ca4:	1009883a 	mov	r4,r2
  806ca8:	dfc00215 	stw	ra,8(sp)
  806cac:	80000015 	stw	zero,0(r16)
  806cb0:	08112380 	call	811238 <write>
  806cb4:	00ffffc4 	movi	r3,-1
  806cb8:	10c00526 	beq	r2,r3,806cd0 <_write_r+0x50>
  806cbc:	dfc00217 	ldw	ra,8(sp)
  806cc0:	dc400117 	ldw	r17,4(sp)
  806cc4:	dc000017 	ldw	r16,0(sp)
  806cc8:	dec00304 	addi	sp,sp,12
  806ccc:	f800283a 	ret
  806cd0:	80c00017 	ldw	r3,0(r16)
  806cd4:	183ff926 	beq	r3,zero,806cbc <__alt_mem_onchip_mem+0xff786cbc>
  806cd8:	88c00015 	stw	r3,0(r17)
  806cdc:	003ff706 	br	806cbc <__alt_mem_onchip_mem+0xff786cbc>

00806ce0 <__swsetup_r>:
  806ce0:	00802074 	movhi	r2,129
  806ce4:	defffd04 	addi	sp,sp,-12
  806ce8:	109a6e04 	addi	r2,r2,27064
  806cec:	dc400115 	stw	r17,4(sp)
  806cf0:	2023883a 	mov	r17,r4
  806cf4:	11000017 	ldw	r4,0(r2)
  806cf8:	dc000015 	stw	r16,0(sp)
  806cfc:	dfc00215 	stw	ra,8(sp)
  806d00:	2821883a 	mov	r16,r5
  806d04:	20000226 	beq	r4,zero,806d10 <__swsetup_r+0x30>
  806d08:	20800e17 	ldw	r2,56(r4)
  806d0c:	10003126 	beq	r2,zero,806dd4 <__swsetup_r+0xf4>
  806d10:	8080030b 	ldhu	r2,12(r16)
  806d14:	10c0020c 	andi	r3,r2,8
  806d18:	1009883a 	mov	r4,r2
  806d1c:	18000f26 	beq	r3,zero,806d5c <__swsetup_r+0x7c>
  806d20:	80c00417 	ldw	r3,16(r16)
  806d24:	18001526 	beq	r3,zero,806d7c <__swsetup_r+0x9c>
  806d28:	1100004c 	andi	r4,r2,1
  806d2c:	20001c1e 	bne	r4,zero,806da0 <__swsetup_r+0xc0>
  806d30:	1080008c 	andi	r2,r2,2
  806d34:	1000291e 	bne	r2,zero,806ddc <__swsetup_r+0xfc>
  806d38:	80800517 	ldw	r2,20(r16)
  806d3c:	80800215 	stw	r2,8(r16)
  806d40:	18001c26 	beq	r3,zero,806db4 <__swsetup_r+0xd4>
  806d44:	0005883a 	mov	r2,zero
  806d48:	dfc00217 	ldw	ra,8(sp)
  806d4c:	dc400117 	ldw	r17,4(sp)
  806d50:	dc000017 	ldw	r16,0(sp)
  806d54:	dec00304 	addi	sp,sp,12
  806d58:	f800283a 	ret
  806d5c:	2080040c 	andi	r2,r4,16
  806d60:	10002e26 	beq	r2,zero,806e1c <__swsetup_r+0x13c>
  806d64:	2080010c 	andi	r2,r4,4
  806d68:	10001e1e 	bne	r2,zero,806de4 <__swsetup_r+0x104>
  806d6c:	80c00417 	ldw	r3,16(r16)
  806d70:	20800214 	ori	r2,r4,8
  806d74:	8080030d 	sth	r2,12(r16)
  806d78:	183feb1e 	bne	r3,zero,806d28 <__alt_mem_onchip_mem+0xff786d28>
  806d7c:	1100a00c 	andi	r4,r2,640
  806d80:	01408004 	movi	r5,512
  806d84:	217fe826 	beq	r4,r5,806d28 <__alt_mem_onchip_mem+0xff786d28>
  806d88:	800b883a 	mov	r5,r16
  806d8c:	8809883a 	mov	r4,r17
  806d90:	08039080 	call	803908 <__smakebuf_r>
  806d94:	8080030b 	ldhu	r2,12(r16)
  806d98:	80c00417 	ldw	r3,16(r16)
  806d9c:	003fe206 	br	806d28 <__alt_mem_onchip_mem+0xff786d28>
  806da0:	80800517 	ldw	r2,20(r16)
  806da4:	80000215 	stw	zero,8(r16)
  806da8:	0085c83a 	sub	r2,zero,r2
  806dac:	80800615 	stw	r2,24(r16)
  806db0:	183fe41e 	bne	r3,zero,806d44 <__alt_mem_onchip_mem+0xff786d44>
  806db4:	80c0030b 	ldhu	r3,12(r16)
  806db8:	0005883a 	mov	r2,zero
  806dbc:	1900200c 	andi	r4,r3,128
  806dc0:	203fe126 	beq	r4,zero,806d48 <__alt_mem_onchip_mem+0xff786d48>
  806dc4:	18c01014 	ori	r3,r3,64
  806dc8:	80c0030d 	sth	r3,12(r16)
  806dcc:	00bfffc4 	movi	r2,-1
  806dd0:	003fdd06 	br	806d48 <__alt_mem_onchip_mem+0xff786d48>
  806dd4:	0808d080 	call	808d08 <__sinit>
  806dd8:	003fcd06 	br	806d10 <__alt_mem_onchip_mem+0xff786d10>
  806ddc:	0005883a 	mov	r2,zero
  806de0:	003fd606 	br	806d3c <__alt_mem_onchip_mem+0xff786d3c>
  806de4:	81400c17 	ldw	r5,48(r16)
  806de8:	28000626 	beq	r5,zero,806e04 <__swsetup_r+0x124>
  806dec:	80801004 	addi	r2,r16,64
  806df0:	28800326 	beq	r5,r2,806e00 <__swsetup_r+0x120>
  806df4:	8809883a 	mov	r4,r17
  806df8:	0808f280 	call	808f28 <_free_r>
  806dfc:	8100030b 	ldhu	r4,12(r16)
  806e00:	80000c15 	stw	zero,48(r16)
  806e04:	80c00417 	ldw	r3,16(r16)
  806e08:	00bff6c4 	movi	r2,-37
  806e0c:	1108703a 	and	r4,r2,r4
  806e10:	80000115 	stw	zero,4(r16)
  806e14:	80c00015 	stw	r3,0(r16)
  806e18:	003fd506 	br	806d70 <__alt_mem_onchip_mem+0xff786d70>
  806e1c:	00800244 	movi	r2,9
  806e20:	88800015 	stw	r2,0(r17)
  806e24:	20801014 	ori	r2,r4,64
  806e28:	8080030d 	sth	r2,12(r16)
  806e2c:	00bfffc4 	movi	r2,-1
  806e30:	003fc506 	br	806d48 <__alt_mem_onchip_mem+0xff786d48>

00806e34 <_close_r>:
  806e34:	defffd04 	addi	sp,sp,-12
  806e38:	dc000015 	stw	r16,0(sp)
  806e3c:	040020b4 	movhi	r16,130
  806e40:	dc400115 	stw	r17,4(sp)
  806e44:	84221504 	addi	r16,r16,-30636
  806e48:	2023883a 	mov	r17,r4
  806e4c:	2809883a 	mov	r4,r5
  806e50:	dfc00215 	stw	ra,8(sp)
  806e54:	80000015 	stw	zero,0(r16)
  806e58:	08106300 	call	810630 <close>
  806e5c:	00ffffc4 	movi	r3,-1
  806e60:	10c00526 	beq	r2,r3,806e78 <_close_r+0x44>
  806e64:	dfc00217 	ldw	ra,8(sp)
  806e68:	dc400117 	ldw	r17,4(sp)
  806e6c:	dc000017 	ldw	r16,0(sp)
  806e70:	dec00304 	addi	sp,sp,12
  806e74:	f800283a 	ret
  806e78:	80c00017 	ldw	r3,0(r16)
  806e7c:	183ff926 	beq	r3,zero,806e64 <__alt_mem_onchip_mem+0xff786e64>
  806e80:	88c00015 	stw	r3,0(r17)
  806e84:	003ff706 	br	806e64 <__alt_mem_onchip_mem+0xff786e64>

00806e88 <quorem>:
  806e88:	defff704 	addi	sp,sp,-36
  806e8c:	dc800215 	stw	r18,8(sp)
  806e90:	20800417 	ldw	r2,16(r4)
  806e94:	2c800417 	ldw	r18,16(r5)
  806e98:	dfc00815 	stw	ra,32(sp)
  806e9c:	ddc00715 	stw	r23,28(sp)
  806ea0:	dd800615 	stw	r22,24(sp)
  806ea4:	dd400515 	stw	r21,20(sp)
  806ea8:	dd000415 	stw	r20,16(sp)
  806eac:	dcc00315 	stw	r19,12(sp)
  806eb0:	dc400115 	stw	r17,4(sp)
  806eb4:	dc000015 	stw	r16,0(sp)
  806eb8:	14807116 	blt	r2,r18,807080 <quorem+0x1f8>
  806ebc:	94bfffc4 	addi	r18,r18,-1
  806ec0:	94ad883a 	add	r22,r18,r18
  806ec4:	b5ad883a 	add	r22,r22,r22
  806ec8:	2c400504 	addi	r17,r5,20
  806ecc:	8da9883a 	add	r20,r17,r22
  806ed0:	25400504 	addi	r21,r4,20
  806ed4:	282f883a 	mov	r23,r5
  806ed8:	adad883a 	add	r22,r21,r22
  806edc:	a1400017 	ldw	r5,0(r20)
  806ee0:	2021883a 	mov	r16,r4
  806ee4:	b1000017 	ldw	r4,0(r22)
  806ee8:	29400044 	addi	r5,r5,1
  806eec:	080dda40 	call	80dda4 <__udivsi3>
  806ef0:	1027883a 	mov	r19,r2
  806ef4:	10002c26 	beq	r2,zero,806fa8 <quorem+0x120>
  806ef8:	a813883a 	mov	r9,r21
  806efc:	880b883a 	mov	r5,r17
  806f00:	0009883a 	mov	r4,zero
  806f04:	000d883a 	mov	r6,zero
  806f08:	2a000017 	ldw	r8,0(r5)
  806f0c:	49c00017 	ldw	r7,0(r9)
  806f10:	29400104 	addi	r5,r5,4
  806f14:	40bfffcc 	andi	r2,r8,65535
  806f18:	14c5383a 	mul	r2,r2,r19
  806f1c:	4010d43a 	srli	r8,r8,16
  806f20:	38ffffcc 	andi	r3,r7,65535
  806f24:	1105883a 	add	r2,r2,r4
  806f28:	1008d43a 	srli	r4,r2,16
  806f2c:	44d1383a 	mul	r8,r8,r19
  806f30:	198d883a 	add	r6,r3,r6
  806f34:	10ffffcc 	andi	r3,r2,65535
  806f38:	30c7c83a 	sub	r3,r6,r3
  806f3c:	380ed43a 	srli	r7,r7,16
  806f40:	4105883a 	add	r2,r8,r4
  806f44:	180dd43a 	srai	r6,r3,16
  806f48:	113fffcc 	andi	r4,r2,65535
  806f4c:	390fc83a 	sub	r7,r7,r4
  806f50:	398d883a 	add	r6,r7,r6
  806f54:	300e943a 	slli	r7,r6,16
  806f58:	18ffffcc 	andi	r3,r3,65535
  806f5c:	1008d43a 	srli	r4,r2,16
  806f60:	38ceb03a 	or	r7,r7,r3
  806f64:	49c00015 	stw	r7,0(r9)
  806f68:	300dd43a 	srai	r6,r6,16
  806f6c:	4a400104 	addi	r9,r9,4
  806f70:	a17fe52e 	bgeu	r20,r5,806f08 <__alt_mem_onchip_mem+0xff786f08>
  806f74:	b0800017 	ldw	r2,0(r22)
  806f78:	10000b1e 	bne	r2,zero,806fa8 <quorem+0x120>
  806f7c:	b0bfff04 	addi	r2,r22,-4
  806f80:	a880082e 	bgeu	r21,r2,806fa4 <quorem+0x11c>
  806f84:	b0ffff17 	ldw	r3,-4(r22)
  806f88:	18000326 	beq	r3,zero,806f98 <quorem+0x110>
  806f8c:	00000506 	br	806fa4 <quorem+0x11c>
  806f90:	10c00017 	ldw	r3,0(r2)
  806f94:	1800031e 	bne	r3,zero,806fa4 <quorem+0x11c>
  806f98:	10bfff04 	addi	r2,r2,-4
  806f9c:	94bfffc4 	addi	r18,r18,-1
  806fa0:	a8bffb36 	bltu	r21,r2,806f90 <__alt_mem_onchip_mem+0xff786f90>
  806fa4:	84800415 	stw	r18,16(r16)
  806fa8:	b80b883a 	mov	r5,r23
  806fac:	8009883a 	mov	r4,r16
  806fb0:	080a65c0 	call	80a65c <__mcmp>
  806fb4:	10002616 	blt	r2,zero,807050 <quorem+0x1c8>
  806fb8:	9cc00044 	addi	r19,r19,1
  806fbc:	a805883a 	mov	r2,r21
  806fc0:	000b883a 	mov	r5,zero
  806fc4:	11000017 	ldw	r4,0(r2)
  806fc8:	89800017 	ldw	r6,0(r17)
  806fcc:	10800104 	addi	r2,r2,4
  806fd0:	20ffffcc 	andi	r3,r4,65535
  806fd4:	194b883a 	add	r5,r3,r5
  806fd8:	30ffffcc 	andi	r3,r6,65535
  806fdc:	28c7c83a 	sub	r3,r5,r3
  806fe0:	300cd43a 	srli	r6,r6,16
  806fe4:	2008d43a 	srli	r4,r4,16
  806fe8:	180bd43a 	srai	r5,r3,16
  806fec:	18ffffcc 	andi	r3,r3,65535
  806ff0:	2189c83a 	sub	r4,r4,r6
  806ff4:	2149883a 	add	r4,r4,r5
  806ff8:	200c943a 	slli	r6,r4,16
  806ffc:	8c400104 	addi	r17,r17,4
  807000:	200bd43a 	srai	r5,r4,16
  807004:	30c6b03a 	or	r3,r6,r3
  807008:	10ffff15 	stw	r3,-4(r2)
  80700c:	a47fed2e 	bgeu	r20,r17,806fc4 <__alt_mem_onchip_mem+0xff786fc4>
  807010:	9485883a 	add	r2,r18,r18
  807014:	1085883a 	add	r2,r2,r2
  807018:	a887883a 	add	r3,r21,r2
  80701c:	18800017 	ldw	r2,0(r3)
  807020:	10000b1e 	bne	r2,zero,807050 <quorem+0x1c8>
  807024:	18bfff04 	addi	r2,r3,-4
  807028:	a880082e 	bgeu	r21,r2,80704c <quorem+0x1c4>
  80702c:	18ffff17 	ldw	r3,-4(r3)
  807030:	18000326 	beq	r3,zero,807040 <quorem+0x1b8>
  807034:	00000506 	br	80704c <quorem+0x1c4>
  807038:	10c00017 	ldw	r3,0(r2)
  80703c:	1800031e 	bne	r3,zero,80704c <quorem+0x1c4>
  807040:	10bfff04 	addi	r2,r2,-4
  807044:	94bfffc4 	addi	r18,r18,-1
  807048:	a8bffb36 	bltu	r21,r2,807038 <__alt_mem_onchip_mem+0xff787038>
  80704c:	84800415 	stw	r18,16(r16)
  807050:	9805883a 	mov	r2,r19
  807054:	dfc00817 	ldw	ra,32(sp)
  807058:	ddc00717 	ldw	r23,28(sp)
  80705c:	dd800617 	ldw	r22,24(sp)
  807060:	dd400517 	ldw	r21,20(sp)
  807064:	dd000417 	ldw	r20,16(sp)
  807068:	dcc00317 	ldw	r19,12(sp)
  80706c:	dc800217 	ldw	r18,8(sp)
  807070:	dc400117 	ldw	r17,4(sp)
  807074:	dc000017 	ldw	r16,0(sp)
  807078:	dec00904 	addi	sp,sp,36
  80707c:	f800283a 	ret
  807080:	0005883a 	mov	r2,zero
  807084:	003ff306 	br	807054 <__alt_mem_onchip_mem+0xff787054>

00807088 <_dtoa_r>:
  807088:	20801017 	ldw	r2,64(r4)
  80708c:	deffde04 	addi	sp,sp,-136
  807090:	df002015 	stw	fp,128(sp)
  807094:	dcc01b15 	stw	r19,108(sp)
  807098:	dc801a15 	stw	r18,104(sp)
  80709c:	dc401915 	stw	r17,100(sp)
  8070a0:	dc001815 	stw	r16,96(sp)
  8070a4:	dfc02115 	stw	ra,132(sp)
  8070a8:	ddc01f15 	stw	r23,124(sp)
  8070ac:	dd801e15 	stw	r22,120(sp)
  8070b0:	dd401d15 	stw	r21,116(sp)
  8070b4:	dd001c15 	stw	r20,112(sp)
  8070b8:	d9c00315 	stw	r7,12(sp)
  8070bc:	2039883a 	mov	fp,r4
  8070c0:	3023883a 	mov	r17,r6
  8070c4:	2825883a 	mov	r18,r5
  8070c8:	dc002417 	ldw	r16,144(sp)
  8070cc:	3027883a 	mov	r19,r6
  8070d0:	10000826 	beq	r2,zero,8070f4 <_dtoa_r+0x6c>
  8070d4:	21801117 	ldw	r6,68(r4)
  8070d8:	00c00044 	movi	r3,1
  8070dc:	100b883a 	mov	r5,r2
  8070e0:	1986983a 	sll	r3,r3,r6
  8070e4:	11800115 	stw	r6,4(r2)
  8070e8:	10c00215 	stw	r3,8(r2)
  8070ec:	0809e3c0 	call	809e3c <_Bfree>
  8070f0:	e0001015 	stw	zero,64(fp)
  8070f4:	88002e16 	blt	r17,zero,8071b0 <_dtoa_r+0x128>
  8070f8:	80000015 	stw	zero,0(r16)
  8070fc:	889ffc2c 	andhi	r2,r17,32752
  807100:	00dffc34 	movhi	r3,32752
  807104:	10c01c26 	beq	r2,r3,807178 <_dtoa_r+0xf0>
  807108:	000d883a 	mov	r6,zero
  80710c:	000f883a 	mov	r7,zero
  807110:	9009883a 	mov	r4,r18
  807114:	980b883a 	mov	r5,r19
  807118:	080eff40 	call	80eff4 <__eqdf2>
  80711c:	10002b1e 	bne	r2,zero,8071cc <_dtoa_r+0x144>
  807120:	d9c02317 	ldw	r7,140(sp)
  807124:	00800044 	movi	r2,1
  807128:	38800015 	stw	r2,0(r7)
  80712c:	d8802517 	ldw	r2,148(sp)
  807130:	10019e26 	beq	r2,zero,8077ac <_dtoa_r+0x724>
  807134:	d8c02517 	ldw	r3,148(sp)
  807138:	00802074 	movhi	r2,129
  80713c:	1091f744 	addi	r2,r2,18397
  807140:	18800015 	stw	r2,0(r3)
  807144:	10bfffc4 	addi	r2,r2,-1
  807148:	dfc02117 	ldw	ra,132(sp)
  80714c:	df002017 	ldw	fp,128(sp)
  807150:	ddc01f17 	ldw	r23,124(sp)
  807154:	dd801e17 	ldw	r22,120(sp)
  807158:	dd401d17 	ldw	r21,116(sp)
  80715c:	dd001c17 	ldw	r20,112(sp)
  807160:	dcc01b17 	ldw	r19,108(sp)
  807164:	dc801a17 	ldw	r18,104(sp)
  807168:	dc401917 	ldw	r17,100(sp)
  80716c:	dc001817 	ldw	r16,96(sp)
  807170:	dec02204 	addi	sp,sp,136
  807174:	f800283a 	ret
  807178:	d8c02317 	ldw	r3,140(sp)
  80717c:	0089c3c4 	movi	r2,9999
  807180:	18800015 	stw	r2,0(r3)
  807184:	90017726 	beq	r18,zero,807764 <_dtoa_r+0x6dc>
  807188:	00802074 	movhi	r2,129
  80718c:	10920304 	addi	r2,r2,18444
  807190:	d9002517 	ldw	r4,148(sp)
  807194:	203fec26 	beq	r4,zero,807148 <__alt_mem_onchip_mem+0xff787148>
  807198:	10c000c7 	ldb	r3,3(r2)
  80719c:	1801781e 	bne	r3,zero,807780 <_dtoa_r+0x6f8>
  8071a0:	10c000c4 	addi	r3,r2,3
  8071a4:	d9802517 	ldw	r6,148(sp)
  8071a8:	30c00015 	stw	r3,0(r6)
  8071ac:	003fe606 	br	807148 <__alt_mem_onchip_mem+0xff787148>
  8071b0:	04e00034 	movhi	r19,32768
  8071b4:	9cffffc4 	addi	r19,r19,-1
  8071b8:	00800044 	movi	r2,1
  8071bc:	8ce6703a 	and	r19,r17,r19
  8071c0:	80800015 	stw	r2,0(r16)
  8071c4:	9823883a 	mov	r17,r19
  8071c8:	003fcc06 	br	8070fc <__alt_mem_onchip_mem+0xff7870fc>
  8071cc:	d8800204 	addi	r2,sp,8
  8071d0:	d8800015 	stw	r2,0(sp)
  8071d4:	d9c00104 	addi	r7,sp,4
  8071d8:	900b883a 	mov	r5,r18
  8071dc:	980d883a 	mov	r6,r19
  8071e0:	e009883a 	mov	r4,fp
  8071e4:	8820d53a 	srli	r16,r17,20
  8071e8:	080aa280 	call	80aa28 <__d2b>
  8071ec:	d8800915 	stw	r2,36(sp)
  8071f0:	8001651e 	bne	r16,zero,807788 <_dtoa_r+0x700>
  8071f4:	dd800217 	ldw	r22,8(sp)
  8071f8:	dc000117 	ldw	r16,4(sp)
  8071fc:	00800804 	movi	r2,32
  807200:	b421883a 	add	r16,r22,r16
  807204:	80c10c84 	addi	r3,r16,1074
  807208:	10c2d10e 	bge	r2,r3,807d50 <_dtoa_r+0xcc8>
  80720c:	00801004 	movi	r2,64
  807210:	81010484 	addi	r4,r16,1042
  807214:	10c7c83a 	sub	r3,r2,r3
  807218:	9108d83a 	srl	r4,r18,r4
  80721c:	88e2983a 	sll	r17,r17,r3
  807220:	2448b03a 	or	r4,r4,r17
  807224:	08103bc0 	call	8103bc <__floatunsidf>
  807228:	017f8434 	movhi	r5,65040
  80722c:	01800044 	movi	r6,1
  807230:	1009883a 	mov	r4,r2
  807234:	194b883a 	add	r5,r3,r5
  807238:	843fffc4 	addi	r16,r16,-1
  80723c:	d9801115 	stw	r6,68(sp)
  807240:	000d883a 	mov	r6,zero
  807244:	01cffe34 	movhi	r7,16376
  807248:	080f9640 	call	80f964 <__subdf3>
  80724c:	0198dbf4 	movhi	r6,25455
  807250:	01cff4f4 	movhi	r7,16339
  807254:	3190d844 	addi	r6,r6,17249
  807258:	39e1e9c4 	addi	r7,r7,-30809
  80725c:	1009883a 	mov	r4,r2
  807260:	180b883a 	mov	r5,r3
  807264:	080f24c0 	call	80f24c <__muldf3>
  807268:	01a2d874 	movhi	r6,35681
  80726c:	01cff1f4 	movhi	r7,16327
  807270:	31b22cc4 	addi	r6,r6,-14157
  807274:	39e28a04 	addi	r7,r7,-30168
  807278:	180b883a 	mov	r5,r3
  80727c:	1009883a 	mov	r4,r2
  807280:	080de600 	call	80de60 <__adddf3>
  807284:	8009883a 	mov	r4,r16
  807288:	1029883a 	mov	r20,r2
  80728c:	1823883a 	mov	r17,r3
  807290:	08102e00 	call	8102e0 <__floatsidf>
  807294:	019427f4 	movhi	r6,20639
  807298:	01cff4f4 	movhi	r7,16339
  80729c:	319e7ec4 	addi	r6,r6,31227
  8072a0:	39d104c4 	addi	r7,r7,17427
  8072a4:	1009883a 	mov	r4,r2
  8072a8:	180b883a 	mov	r5,r3
  8072ac:	080f24c0 	call	80f24c <__muldf3>
  8072b0:	100d883a 	mov	r6,r2
  8072b4:	180f883a 	mov	r7,r3
  8072b8:	a009883a 	mov	r4,r20
  8072bc:	880b883a 	mov	r5,r17
  8072c0:	080de600 	call	80de60 <__adddf3>
  8072c4:	1009883a 	mov	r4,r2
  8072c8:	180b883a 	mov	r5,r3
  8072cc:	1029883a 	mov	r20,r2
  8072d0:	1823883a 	mov	r17,r3
  8072d4:	08102600 	call	810260 <__fixdfsi>
  8072d8:	000d883a 	mov	r6,zero
  8072dc:	000f883a 	mov	r7,zero
  8072e0:	a009883a 	mov	r4,r20
  8072e4:	880b883a 	mov	r5,r17
  8072e8:	d8800515 	stw	r2,20(sp)
  8072ec:	080f1580 	call	80f158 <__ledf2>
  8072f0:	10028716 	blt	r2,zero,807d10 <_dtoa_r+0xc88>
  8072f4:	d8c00517 	ldw	r3,20(sp)
  8072f8:	00800584 	movi	r2,22
  8072fc:	10c27536 	bltu	r2,r3,807cd4 <_dtoa_r+0xc4c>
  807300:	180490fa 	slli	r2,r3,3
  807304:	00c02074 	movhi	r3,129
  807308:	18d21e04 	addi	r3,r3,18552
  80730c:	1885883a 	add	r2,r3,r2
  807310:	11000017 	ldw	r4,0(r2)
  807314:	11400117 	ldw	r5,4(r2)
  807318:	900d883a 	mov	r6,r18
  80731c:	980f883a 	mov	r7,r19
  807320:	080f07c0 	call	80f07c <__gedf2>
  807324:	00828d0e 	bge	zero,r2,807d5c <_dtoa_r+0xcd4>
  807328:	d9000517 	ldw	r4,20(sp)
  80732c:	d8000e15 	stw	zero,56(sp)
  807330:	213fffc4 	addi	r4,r4,-1
  807334:	d9000515 	stw	r4,20(sp)
  807338:	b42dc83a 	sub	r22,r22,r16
  80733c:	b5bfffc4 	addi	r22,r22,-1
  807340:	b0026f16 	blt	r22,zero,807d00 <_dtoa_r+0xc78>
  807344:	d8000815 	stw	zero,32(sp)
  807348:	d9c00517 	ldw	r7,20(sp)
  80734c:	38026416 	blt	r7,zero,807ce0 <_dtoa_r+0xc58>
  807350:	b1ed883a 	add	r22,r22,r7
  807354:	d9c00d15 	stw	r7,52(sp)
  807358:	d8000a15 	stw	zero,40(sp)
  80735c:	d9800317 	ldw	r6,12(sp)
  807360:	00800244 	movi	r2,9
  807364:	11811436 	bltu	r2,r6,8077b8 <_dtoa_r+0x730>
  807368:	00800144 	movi	r2,5
  80736c:	1184e10e 	bge	r2,r6,8086f4 <_dtoa_r+0x166c>
  807370:	31bfff04 	addi	r6,r6,-4
  807374:	d9800315 	stw	r6,12(sp)
  807378:	0023883a 	mov	r17,zero
  80737c:	d9800317 	ldw	r6,12(sp)
  807380:	008000c4 	movi	r2,3
  807384:	30836726 	beq	r6,r2,808124 <_dtoa_r+0x109c>
  807388:	1183410e 	bge	r2,r6,808090 <_dtoa_r+0x1008>
  80738c:	d9c00317 	ldw	r7,12(sp)
  807390:	00800104 	movi	r2,4
  807394:	38827c26 	beq	r7,r2,807d88 <_dtoa_r+0xd00>
  807398:	00800144 	movi	r2,5
  80739c:	3884c41e 	bne	r7,r2,8086b0 <_dtoa_r+0x1628>
  8073a0:	00800044 	movi	r2,1
  8073a4:	d8800b15 	stw	r2,44(sp)
  8073a8:	d8c00517 	ldw	r3,20(sp)
  8073ac:	d9002217 	ldw	r4,136(sp)
  8073b0:	1907883a 	add	r3,r3,r4
  8073b4:	19800044 	addi	r6,r3,1
  8073b8:	d8c00c15 	stw	r3,48(sp)
  8073bc:	d9800615 	stw	r6,24(sp)
  8073c0:	0183a40e 	bge	zero,r6,808254 <_dtoa_r+0x11cc>
  8073c4:	d9800617 	ldw	r6,24(sp)
  8073c8:	3021883a 	mov	r16,r6
  8073cc:	e0001115 	stw	zero,68(fp)
  8073d0:	008005c4 	movi	r2,23
  8073d4:	1184c92e 	bgeu	r2,r6,8086fc <_dtoa_r+0x1674>
  8073d8:	00c00044 	movi	r3,1
  8073dc:	00800104 	movi	r2,4
  8073e0:	1085883a 	add	r2,r2,r2
  8073e4:	11000504 	addi	r4,r2,20
  8073e8:	180b883a 	mov	r5,r3
  8073ec:	18c00044 	addi	r3,r3,1
  8073f0:	313ffb2e 	bgeu	r6,r4,8073e0 <__alt_mem_onchip_mem+0xff7873e0>
  8073f4:	e1401115 	stw	r5,68(fp)
  8073f8:	e009883a 	mov	r4,fp
  8073fc:	0809d940 	call	809d94 <_Balloc>
  807400:	d8800715 	stw	r2,28(sp)
  807404:	e0801015 	stw	r2,64(fp)
  807408:	00800384 	movi	r2,14
  80740c:	1400f736 	bltu	r2,r16,8077ec <_dtoa_r+0x764>
  807410:	8800f626 	beq	r17,zero,8077ec <_dtoa_r+0x764>
  807414:	d9c00517 	ldw	r7,20(sp)
  807418:	01c39a0e 	bge	zero,r7,808284 <_dtoa_r+0x11fc>
  80741c:	388003cc 	andi	r2,r7,15
  807420:	100490fa 	slli	r2,r2,3
  807424:	382bd13a 	srai	r21,r7,4
  807428:	00c02074 	movhi	r3,129
  80742c:	18d21e04 	addi	r3,r3,18552
  807430:	1885883a 	add	r2,r3,r2
  807434:	a8c0040c 	andi	r3,r21,16
  807438:	12400017 	ldw	r9,0(r2)
  80743c:	12000117 	ldw	r8,4(r2)
  807440:	18037926 	beq	r3,zero,808228 <_dtoa_r+0x11a0>
  807444:	00802074 	movhi	r2,129
  807448:	10921404 	addi	r2,r2,18512
  80744c:	11800817 	ldw	r6,32(r2)
  807450:	11c00917 	ldw	r7,36(r2)
  807454:	9009883a 	mov	r4,r18
  807458:	980b883a 	mov	r5,r19
  80745c:	da001715 	stw	r8,92(sp)
  807460:	da401615 	stw	r9,88(sp)
  807464:	080e70c0 	call	80e70c <__divdf3>
  807468:	da001717 	ldw	r8,92(sp)
  80746c:	da401617 	ldw	r9,88(sp)
  807470:	ad4003cc 	andi	r21,r21,15
  807474:	040000c4 	movi	r16,3
  807478:	1023883a 	mov	r17,r2
  80747c:	1829883a 	mov	r20,r3
  807480:	a8001126 	beq	r21,zero,8074c8 <_dtoa_r+0x440>
  807484:	05c02074 	movhi	r23,129
  807488:	bdd21404 	addi	r23,r23,18512
  80748c:	4805883a 	mov	r2,r9
  807490:	4007883a 	mov	r3,r8
  807494:	a980004c 	andi	r6,r21,1
  807498:	1009883a 	mov	r4,r2
  80749c:	a82bd07a 	srai	r21,r21,1
  8074a0:	180b883a 	mov	r5,r3
  8074a4:	30000426 	beq	r6,zero,8074b8 <_dtoa_r+0x430>
  8074a8:	b9800017 	ldw	r6,0(r23)
  8074ac:	b9c00117 	ldw	r7,4(r23)
  8074b0:	84000044 	addi	r16,r16,1
  8074b4:	080f24c0 	call	80f24c <__muldf3>
  8074b8:	bdc00204 	addi	r23,r23,8
  8074bc:	a83ff51e 	bne	r21,zero,807494 <__alt_mem_onchip_mem+0xff787494>
  8074c0:	1013883a 	mov	r9,r2
  8074c4:	1811883a 	mov	r8,r3
  8074c8:	480d883a 	mov	r6,r9
  8074cc:	400f883a 	mov	r7,r8
  8074d0:	8809883a 	mov	r4,r17
  8074d4:	a00b883a 	mov	r5,r20
  8074d8:	080e70c0 	call	80e70c <__divdf3>
  8074dc:	d8800f15 	stw	r2,60(sp)
  8074e0:	d8c01015 	stw	r3,64(sp)
  8074e4:	d8c00e17 	ldw	r3,56(sp)
  8074e8:	18000626 	beq	r3,zero,807504 <_dtoa_r+0x47c>
  8074ec:	d9000f17 	ldw	r4,60(sp)
  8074f0:	d9401017 	ldw	r5,64(sp)
  8074f4:	000d883a 	mov	r6,zero
  8074f8:	01cffc34 	movhi	r7,16368
  8074fc:	080f1580 	call	80f158 <__ledf2>
  807500:	10040b16 	blt	r2,zero,808530 <_dtoa_r+0x14a8>
  807504:	8009883a 	mov	r4,r16
  807508:	08102e00 	call	8102e0 <__floatsidf>
  80750c:	d9800f17 	ldw	r6,60(sp)
  807510:	d9c01017 	ldw	r7,64(sp)
  807514:	1009883a 	mov	r4,r2
  807518:	180b883a 	mov	r5,r3
  80751c:	080f24c0 	call	80f24c <__muldf3>
  807520:	000d883a 	mov	r6,zero
  807524:	01d00734 	movhi	r7,16412
  807528:	1009883a 	mov	r4,r2
  80752c:	180b883a 	mov	r5,r3
  807530:	080de600 	call	80de60 <__adddf3>
  807534:	1021883a 	mov	r16,r2
  807538:	d8800617 	ldw	r2,24(sp)
  80753c:	047f3034 	movhi	r17,64704
  807540:	1c63883a 	add	r17,r3,r17
  807544:	10031826 	beq	r2,zero,8081a8 <_dtoa_r+0x1120>
  807548:	d8c00517 	ldw	r3,20(sp)
  80754c:	db000617 	ldw	r12,24(sp)
  807550:	d8c01315 	stw	r3,76(sp)
  807554:	d9000b17 	ldw	r4,44(sp)
  807558:	20038f26 	beq	r4,zero,808398 <_dtoa_r+0x1310>
  80755c:	60bfffc4 	addi	r2,r12,-1
  807560:	100490fa 	slli	r2,r2,3
  807564:	00c02074 	movhi	r3,129
  807568:	18d21e04 	addi	r3,r3,18552
  80756c:	1885883a 	add	r2,r3,r2
  807570:	11800017 	ldw	r6,0(r2)
  807574:	11c00117 	ldw	r7,4(r2)
  807578:	d8800717 	ldw	r2,28(sp)
  80757c:	0009883a 	mov	r4,zero
  807580:	014ff834 	movhi	r5,16352
  807584:	db001615 	stw	r12,88(sp)
  807588:	15c00044 	addi	r23,r2,1
  80758c:	080e70c0 	call	80e70c <__divdf3>
  807590:	800d883a 	mov	r6,r16
  807594:	880f883a 	mov	r7,r17
  807598:	1009883a 	mov	r4,r2
  80759c:	180b883a 	mov	r5,r3
  8075a0:	080f9640 	call	80f964 <__subdf3>
  8075a4:	d9401017 	ldw	r5,64(sp)
  8075a8:	d9000f17 	ldw	r4,60(sp)
  8075ac:	102b883a 	mov	r21,r2
  8075b0:	d8c01215 	stw	r3,72(sp)
  8075b4:	08102600 	call	810260 <__fixdfsi>
  8075b8:	1009883a 	mov	r4,r2
  8075bc:	1029883a 	mov	r20,r2
  8075c0:	08102e00 	call	8102e0 <__floatsidf>
  8075c4:	d9000f17 	ldw	r4,60(sp)
  8075c8:	d9401017 	ldw	r5,64(sp)
  8075cc:	100d883a 	mov	r6,r2
  8075d0:	180f883a 	mov	r7,r3
  8075d4:	080f9640 	call	80f964 <__subdf3>
  8075d8:	1823883a 	mov	r17,r3
  8075dc:	d8c00717 	ldw	r3,28(sp)
  8075e0:	d9401217 	ldw	r5,72(sp)
  8075e4:	a2000c04 	addi	r8,r20,48
  8075e8:	1021883a 	mov	r16,r2
  8075ec:	1a000005 	stb	r8,0(r3)
  8075f0:	800d883a 	mov	r6,r16
  8075f4:	880f883a 	mov	r7,r17
  8075f8:	a809883a 	mov	r4,r21
  8075fc:	4029883a 	mov	r20,r8
  807600:	080f07c0 	call	80f07c <__gedf2>
  807604:	00841d16 	blt	zero,r2,80867c <_dtoa_r+0x15f4>
  807608:	800d883a 	mov	r6,r16
  80760c:	880f883a 	mov	r7,r17
  807610:	0009883a 	mov	r4,zero
  807614:	014ffc34 	movhi	r5,16368
  807618:	080f9640 	call	80f964 <__subdf3>
  80761c:	d9401217 	ldw	r5,72(sp)
  807620:	100d883a 	mov	r6,r2
  807624:	180f883a 	mov	r7,r3
  807628:	a809883a 	mov	r4,r21
  80762c:	080f07c0 	call	80f07c <__gedf2>
  807630:	db001617 	ldw	r12,88(sp)
  807634:	00840e16 	blt	zero,r2,808670 <_dtoa_r+0x15e8>
  807638:	00800044 	movi	r2,1
  80763c:	13006b0e 	bge	r2,r12,8077ec <_dtoa_r+0x764>
  807640:	d9000717 	ldw	r4,28(sp)
  807644:	dd800f15 	stw	r22,60(sp)
  807648:	dcc01015 	stw	r19,64(sp)
  80764c:	2319883a 	add	r12,r4,r12
  807650:	dcc01217 	ldw	r19,72(sp)
  807654:	602d883a 	mov	r22,r12
  807658:	dc801215 	stw	r18,72(sp)
  80765c:	b825883a 	mov	r18,r23
  807660:	00000906 	br	807688 <_dtoa_r+0x600>
  807664:	080f9640 	call	80f964 <__subdf3>
  807668:	a80d883a 	mov	r6,r21
  80766c:	980f883a 	mov	r7,r19
  807670:	1009883a 	mov	r4,r2
  807674:	180b883a 	mov	r5,r3
  807678:	080f1580 	call	80f158 <__ledf2>
  80767c:	1003e816 	blt	r2,zero,808620 <_dtoa_r+0x1598>
  807680:	b825883a 	mov	r18,r23
  807684:	bd83e926 	beq	r23,r22,80862c <_dtoa_r+0x15a4>
  807688:	a809883a 	mov	r4,r21
  80768c:	980b883a 	mov	r5,r19
  807690:	000d883a 	mov	r6,zero
  807694:	01d00934 	movhi	r7,16420
  807698:	080f24c0 	call	80f24c <__muldf3>
  80769c:	000d883a 	mov	r6,zero
  8076a0:	01d00934 	movhi	r7,16420
  8076a4:	8009883a 	mov	r4,r16
  8076a8:	880b883a 	mov	r5,r17
  8076ac:	102b883a 	mov	r21,r2
  8076b0:	1827883a 	mov	r19,r3
  8076b4:	080f24c0 	call	80f24c <__muldf3>
  8076b8:	180b883a 	mov	r5,r3
  8076bc:	1009883a 	mov	r4,r2
  8076c0:	1821883a 	mov	r16,r3
  8076c4:	1023883a 	mov	r17,r2
  8076c8:	08102600 	call	810260 <__fixdfsi>
  8076cc:	1009883a 	mov	r4,r2
  8076d0:	1029883a 	mov	r20,r2
  8076d4:	08102e00 	call	8102e0 <__floatsidf>
  8076d8:	8809883a 	mov	r4,r17
  8076dc:	800b883a 	mov	r5,r16
  8076e0:	100d883a 	mov	r6,r2
  8076e4:	180f883a 	mov	r7,r3
  8076e8:	080f9640 	call	80f964 <__subdf3>
  8076ec:	a5000c04 	addi	r20,r20,48
  8076f0:	a80d883a 	mov	r6,r21
  8076f4:	980f883a 	mov	r7,r19
  8076f8:	1009883a 	mov	r4,r2
  8076fc:	180b883a 	mov	r5,r3
  807700:	95000005 	stb	r20,0(r18)
  807704:	1021883a 	mov	r16,r2
  807708:	1823883a 	mov	r17,r3
  80770c:	080f1580 	call	80f158 <__ledf2>
  807710:	bdc00044 	addi	r23,r23,1
  807714:	800d883a 	mov	r6,r16
  807718:	880f883a 	mov	r7,r17
  80771c:	0009883a 	mov	r4,zero
  807720:	014ffc34 	movhi	r5,16368
  807724:	103fcf0e 	bge	r2,zero,807664 <__alt_mem_onchip_mem+0xff787664>
  807728:	d8c01317 	ldw	r3,76(sp)
  80772c:	d8c00515 	stw	r3,20(sp)
  807730:	d9400917 	ldw	r5,36(sp)
  807734:	e009883a 	mov	r4,fp
  807738:	0809e3c0 	call	809e3c <_Bfree>
  80773c:	d9000517 	ldw	r4,20(sp)
  807740:	d9802317 	ldw	r6,140(sp)
  807744:	d9c02517 	ldw	r7,148(sp)
  807748:	b8000005 	stb	zero,0(r23)
  80774c:	20800044 	addi	r2,r4,1
  807750:	30800015 	stw	r2,0(r6)
  807754:	3802aa26 	beq	r7,zero,808200 <_dtoa_r+0x1178>
  807758:	3dc00015 	stw	r23,0(r7)
  80775c:	d8800717 	ldw	r2,28(sp)
  807760:	003e7906 	br	807148 <__alt_mem_onchip_mem+0xff787148>
  807764:	00800434 	movhi	r2,16
  807768:	10bfffc4 	addi	r2,r2,-1
  80776c:	88a2703a 	and	r17,r17,r2
  807770:	883e851e 	bne	r17,zero,807188 <__alt_mem_onchip_mem+0xff787188>
  807774:	00802074 	movhi	r2,129
  807778:	10920004 	addi	r2,r2,18432
  80777c:	003e8406 	br	807190 <__alt_mem_onchip_mem+0xff787190>
  807780:	10c00204 	addi	r3,r2,8
  807784:	003e8706 	br	8071a4 <__alt_mem_onchip_mem+0xff7871a4>
  807788:	01400434 	movhi	r5,16
  80778c:	297fffc4 	addi	r5,r5,-1
  807790:	994a703a 	and	r5,r19,r5
  807794:	9009883a 	mov	r4,r18
  807798:	843f0044 	addi	r16,r16,-1023
  80779c:	294ffc34 	orhi	r5,r5,16368
  8077a0:	dd800217 	ldw	r22,8(sp)
  8077a4:	d8001115 	stw	zero,68(sp)
  8077a8:	003ea506 	br	807240 <__alt_mem_onchip_mem+0xff787240>
  8077ac:	00802074 	movhi	r2,129
  8077b0:	1091f704 	addi	r2,r2,18396
  8077b4:	003e6406 	br	807148 <__alt_mem_onchip_mem+0xff787148>
  8077b8:	e0001115 	stw	zero,68(fp)
  8077bc:	000b883a 	mov	r5,zero
  8077c0:	e009883a 	mov	r4,fp
  8077c4:	0809d940 	call	809d94 <_Balloc>
  8077c8:	01bfffc4 	movi	r6,-1
  8077cc:	01c00044 	movi	r7,1
  8077d0:	d8800715 	stw	r2,28(sp)
  8077d4:	d9800c15 	stw	r6,48(sp)
  8077d8:	e0801015 	stw	r2,64(fp)
  8077dc:	d8000315 	stw	zero,12(sp)
  8077e0:	d9c00b15 	stw	r7,44(sp)
  8077e4:	d9800615 	stw	r6,24(sp)
  8077e8:	d8002215 	stw	zero,136(sp)
  8077ec:	d8800117 	ldw	r2,4(sp)
  8077f0:	10008916 	blt	r2,zero,807a18 <_dtoa_r+0x990>
  8077f4:	d9000517 	ldw	r4,20(sp)
  8077f8:	00c00384 	movi	r3,14
  8077fc:	19008616 	blt	r3,r4,807a18 <_dtoa_r+0x990>
  807800:	200490fa 	slli	r2,r4,3
  807804:	00c02074 	movhi	r3,129
  807808:	d9802217 	ldw	r6,136(sp)
  80780c:	18d21e04 	addi	r3,r3,18552
  807810:	1885883a 	add	r2,r3,r2
  807814:	14000017 	ldw	r16,0(r2)
  807818:	14400117 	ldw	r17,4(r2)
  80781c:	30016316 	blt	r6,zero,807dac <_dtoa_r+0xd24>
  807820:	800d883a 	mov	r6,r16
  807824:	880f883a 	mov	r7,r17
  807828:	9009883a 	mov	r4,r18
  80782c:	980b883a 	mov	r5,r19
  807830:	080e70c0 	call	80e70c <__divdf3>
  807834:	180b883a 	mov	r5,r3
  807838:	1009883a 	mov	r4,r2
  80783c:	08102600 	call	810260 <__fixdfsi>
  807840:	1009883a 	mov	r4,r2
  807844:	102b883a 	mov	r21,r2
  807848:	08102e00 	call	8102e0 <__floatsidf>
  80784c:	800d883a 	mov	r6,r16
  807850:	880f883a 	mov	r7,r17
  807854:	1009883a 	mov	r4,r2
  807858:	180b883a 	mov	r5,r3
  80785c:	080f24c0 	call	80f24c <__muldf3>
  807860:	100d883a 	mov	r6,r2
  807864:	180f883a 	mov	r7,r3
  807868:	9009883a 	mov	r4,r18
  80786c:	980b883a 	mov	r5,r19
  807870:	080f9640 	call	80f964 <__subdf3>
  807874:	d9c00717 	ldw	r7,28(sp)
  807878:	1009883a 	mov	r4,r2
  80787c:	a8800c04 	addi	r2,r21,48
  807880:	38800005 	stb	r2,0(r7)
  807884:	3dc00044 	addi	r23,r7,1
  807888:	d9c00617 	ldw	r7,24(sp)
  80788c:	01800044 	movi	r6,1
  807890:	180b883a 	mov	r5,r3
  807894:	2005883a 	mov	r2,r4
  807898:	39803826 	beq	r7,r6,80797c <_dtoa_r+0x8f4>
  80789c:	000d883a 	mov	r6,zero
  8078a0:	01d00934 	movhi	r7,16420
  8078a4:	080f24c0 	call	80f24c <__muldf3>
  8078a8:	000d883a 	mov	r6,zero
  8078ac:	000f883a 	mov	r7,zero
  8078b0:	1009883a 	mov	r4,r2
  8078b4:	180b883a 	mov	r5,r3
  8078b8:	1025883a 	mov	r18,r2
  8078bc:	1827883a 	mov	r19,r3
  8078c0:	080eff40 	call	80eff4 <__eqdf2>
  8078c4:	103f9a26 	beq	r2,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  8078c8:	d9c00617 	ldw	r7,24(sp)
  8078cc:	d8c00717 	ldw	r3,28(sp)
  8078d0:	b829883a 	mov	r20,r23
  8078d4:	38bfffc4 	addi	r2,r7,-1
  8078d8:	18ad883a 	add	r22,r3,r2
  8078dc:	00000a06 	br	807908 <_dtoa_r+0x880>
  8078e0:	080f24c0 	call	80f24c <__muldf3>
  8078e4:	000d883a 	mov	r6,zero
  8078e8:	000f883a 	mov	r7,zero
  8078ec:	1009883a 	mov	r4,r2
  8078f0:	180b883a 	mov	r5,r3
  8078f4:	1025883a 	mov	r18,r2
  8078f8:	1827883a 	mov	r19,r3
  8078fc:	b829883a 	mov	r20,r23
  807900:	080eff40 	call	80eff4 <__eqdf2>
  807904:	103f8a26 	beq	r2,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  807908:	800d883a 	mov	r6,r16
  80790c:	880f883a 	mov	r7,r17
  807910:	9009883a 	mov	r4,r18
  807914:	980b883a 	mov	r5,r19
  807918:	080e70c0 	call	80e70c <__divdf3>
  80791c:	180b883a 	mov	r5,r3
  807920:	1009883a 	mov	r4,r2
  807924:	08102600 	call	810260 <__fixdfsi>
  807928:	1009883a 	mov	r4,r2
  80792c:	102b883a 	mov	r21,r2
  807930:	08102e00 	call	8102e0 <__floatsidf>
  807934:	800d883a 	mov	r6,r16
  807938:	880f883a 	mov	r7,r17
  80793c:	1009883a 	mov	r4,r2
  807940:	180b883a 	mov	r5,r3
  807944:	080f24c0 	call	80f24c <__muldf3>
  807948:	100d883a 	mov	r6,r2
  80794c:	180f883a 	mov	r7,r3
  807950:	9009883a 	mov	r4,r18
  807954:	980b883a 	mov	r5,r19
  807958:	080f9640 	call	80f964 <__subdf3>
  80795c:	aa000c04 	addi	r8,r21,48
  807960:	a2000005 	stb	r8,0(r20)
  807964:	000d883a 	mov	r6,zero
  807968:	01d00934 	movhi	r7,16420
  80796c:	1009883a 	mov	r4,r2
  807970:	180b883a 	mov	r5,r3
  807974:	a5c00044 	addi	r23,r20,1
  807978:	b53fd91e 	bne	r22,r20,8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  80797c:	100d883a 	mov	r6,r2
  807980:	180f883a 	mov	r7,r3
  807984:	1009883a 	mov	r4,r2
  807988:	180b883a 	mov	r5,r3
  80798c:	080de600 	call	80de60 <__adddf3>
  807990:	100d883a 	mov	r6,r2
  807994:	180f883a 	mov	r7,r3
  807998:	8009883a 	mov	r4,r16
  80799c:	880b883a 	mov	r5,r17
  8079a0:	1027883a 	mov	r19,r2
  8079a4:	1825883a 	mov	r18,r3
  8079a8:	080f1580 	call	80f158 <__ledf2>
  8079ac:	10000816 	blt	r2,zero,8079d0 <_dtoa_r+0x948>
  8079b0:	980d883a 	mov	r6,r19
  8079b4:	900f883a 	mov	r7,r18
  8079b8:	8009883a 	mov	r4,r16
  8079bc:	880b883a 	mov	r5,r17
  8079c0:	080eff40 	call	80eff4 <__eqdf2>
  8079c4:	103f5a1e 	bne	r2,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  8079c8:	ad40004c 	andi	r21,r21,1
  8079cc:	a83f5826 	beq	r21,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  8079d0:	bd3fffc3 	ldbu	r20,-1(r23)
  8079d4:	b8bfffc4 	addi	r2,r23,-1
  8079d8:	1007883a 	mov	r3,r2
  8079dc:	01400e44 	movi	r5,57
  8079e0:	d9800717 	ldw	r6,28(sp)
  8079e4:	00000506 	br	8079fc <_dtoa_r+0x974>
  8079e8:	18ffffc4 	addi	r3,r3,-1
  8079ec:	11824726 	beq	r2,r6,80830c <_dtoa_r+0x1284>
  8079f0:	1d000003 	ldbu	r20,0(r3)
  8079f4:	102f883a 	mov	r23,r2
  8079f8:	10bfffc4 	addi	r2,r2,-1
  8079fc:	a1003fcc 	andi	r4,r20,255
  807a00:	2100201c 	xori	r4,r4,128
  807a04:	213fe004 	addi	r4,r4,-128
  807a08:	217ff726 	beq	r4,r5,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807a0c:	a2000044 	addi	r8,r20,1
  807a10:	12000005 	stb	r8,0(r2)
  807a14:	003f4606 	br	807730 <__alt_mem_onchip_mem+0xff787730>
  807a18:	d9000b17 	ldw	r4,44(sp)
  807a1c:	2000c826 	beq	r4,zero,807d40 <_dtoa_r+0xcb8>
  807a20:	d9800317 	ldw	r6,12(sp)
  807a24:	00c00044 	movi	r3,1
  807a28:	1980f90e 	bge	r3,r6,807e10 <_dtoa_r+0xd88>
  807a2c:	d8800617 	ldw	r2,24(sp)
  807a30:	d8c00a17 	ldw	r3,40(sp)
  807a34:	157fffc4 	addi	r21,r2,-1
  807a38:	1d41f316 	blt	r3,r21,808208 <_dtoa_r+0x1180>
  807a3c:	1d6bc83a 	sub	r21,r3,r21
  807a40:	d9c00617 	ldw	r7,24(sp)
  807a44:	3802aa16 	blt	r7,zero,8084f0 <_dtoa_r+0x1468>
  807a48:	dd000817 	ldw	r20,32(sp)
  807a4c:	d8800617 	ldw	r2,24(sp)
  807a50:	d8c00817 	ldw	r3,32(sp)
  807a54:	01400044 	movi	r5,1
  807a58:	e009883a 	mov	r4,fp
  807a5c:	1887883a 	add	r3,r3,r2
  807a60:	d8c00815 	stw	r3,32(sp)
  807a64:	b0ad883a 	add	r22,r22,r2
  807a68:	080a1a00 	call	80a1a0 <__i2b>
  807a6c:	1023883a 	mov	r17,r2
  807a70:	a0000826 	beq	r20,zero,807a94 <_dtoa_r+0xa0c>
  807a74:	0580070e 	bge	zero,r22,807a94 <_dtoa_r+0xa0c>
  807a78:	a005883a 	mov	r2,r20
  807a7c:	b500b916 	blt	r22,r20,807d64 <_dtoa_r+0xcdc>
  807a80:	d9000817 	ldw	r4,32(sp)
  807a84:	a0a9c83a 	sub	r20,r20,r2
  807a88:	b0adc83a 	sub	r22,r22,r2
  807a8c:	2089c83a 	sub	r4,r4,r2
  807a90:	d9000815 	stw	r4,32(sp)
  807a94:	d9800a17 	ldw	r6,40(sp)
  807a98:	0181810e 	bge	zero,r6,8080a0 <_dtoa_r+0x1018>
  807a9c:	d9c00b17 	ldw	r7,44(sp)
  807aa0:	3800b326 	beq	r7,zero,807d70 <_dtoa_r+0xce8>
  807aa4:	a800b226 	beq	r21,zero,807d70 <_dtoa_r+0xce8>
  807aa8:	880b883a 	mov	r5,r17
  807aac:	a80d883a 	mov	r6,r21
  807ab0:	e009883a 	mov	r4,fp
  807ab4:	080a3d40 	call	80a3d4 <__pow5mult>
  807ab8:	d9800917 	ldw	r6,36(sp)
  807abc:	100b883a 	mov	r5,r2
  807ac0:	e009883a 	mov	r4,fp
  807ac4:	1023883a 	mov	r17,r2
  807ac8:	080a1dc0 	call	80a1dc <__multiply>
  807acc:	1021883a 	mov	r16,r2
  807ad0:	d8800a17 	ldw	r2,40(sp)
  807ad4:	d9400917 	ldw	r5,36(sp)
  807ad8:	e009883a 	mov	r4,fp
  807adc:	1545c83a 	sub	r2,r2,r21
  807ae0:	d8800a15 	stw	r2,40(sp)
  807ae4:	0809e3c0 	call	809e3c <_Bfree>
  807ae8:	d8c00a17 	ldw	r3,40(sp)
  807aec:	18009f1e 	bne	r3,zero,807d6c <_dtoa_r+0xce4>
  807af0:	05c00044 	movi	r23,1
  807af4:	e009883a 	mov	r4,fp
  807af8:	b80b883a 	mov	r5,r23
  807afc:	080a1a00 	call	80a1a0 <__i2b>
  807b00:	d9000d17 	ldw	r4,52(sp)
  807b04:	102b883a 	mov	r21,r2
  807b08:	2000ce26 	beq	r4,zero,807e44 <_dtoa_r+0xdbc>
  807b0c:	200d883a 	mov	r6,r4
  807b10:	100b883a 	mov	r5,r2
  807b14:	e009883a 	mov	r4,fp
  807b18:	080a3d40 	call	80a3d4 <__pow5mult>
  807b1c:	d9800317 	ldw	r6,12(sp)
  807b20:	102b883a 	mov	r21,r2
  807b24:	b981810e 	bge	r23,r6,80812c <_dtoa_r+0x10a4>
  807b28:	0027883a 	mov	r19,zero
  807b2c:	a8800417 	ldw	r2,16(r21)
  807b30:	05c00804 	movi	r23,32
  807b34:	10800104 	addi	r2,r2,4
  807b38:	1085883a 	add	r2,r2,r2
  807b3c:	1085883a 	add	r2,r2,r2
  807b40:	a885883a 	add	r2,r21,r2
  807b44:	11000017 	ldw	r4,0(r2)
  807b48:	080a0880 	call	80a088 <__hi0bits>
  807b4c:	b885c83a 	sub	r2,r23,r2
  807b50:	1585883a 	add	r2,r2,r22
  807b54:	108007cc 	andi	r2,r2,31
  807b58:	1000b326 	beq	r2,zero,807e28 <_dtoa_r+0xda0>
  807b5c:	00c00804 	movi	r3,32
  807b60:	1887c83a 	sub	r3,r3,r2
  807b64:	01000104 	movi	r4,4
  807b68:	20c2cd0e 	bge	r4,r3,8086a0 <_dtoa_r+0x1618>
  807b6c:	00c00704 	movi	r3,28
  807b70:	1885c83a 	sub	r2,r3,r2
  807b74:	d8c00817 	ldw	r3,32(sp)
  807b78:	a0a9883a 	add	r20,r20,r2
  807b7c:	b0ad883a 	add	r22,r22,r2
  807b80:	1887883a 	add	r3,r3,r2
  807b84:	d8c00815 	stw	r3,32(sp)
  807b88:	d9800817 	ldw	r6,32(sp)
  807b8c:	0180040e 	bge	zero,r6,807ba0 <_dtoa_r+0xb18>
  807b90:	800b883a 	mov	r5,r16
  807b94:	e009883a 	mov	r4,fp
  807b98:	080a5140 	call	80a514 <__lshift>
  807b9c:	1021883a 	mov	r16,r2
  807ba0:	0580050e 	bge	zero,r22,807bb8 <_dtoa_r+0xb30>
  807ba4:	a80b883a 	mov	r5,r21
  807ba8:	b00d883a 	mov	r6,r22
  807bac:	e009883a 	mov	r4,fp
  807bb0:	080a5140 	call	80a514 <__lshift>
  807bb4:	102b883a 	mov	r21,r2
  807bb8:	d9c00e17 	ldw	r7,56(sp)
  807bbc:	3801211e 	bne	r7,zero,808044 <_dtoa_r+0xfbc>
  807bc0:	d9800617 	ldw	r6,24(sp)
  807bc4:	0181380e 	bge	zero,r6,8080a8 <_dtoa_r+0x1020>
  807bc8:	d8c00b17 	ldw	r3,44(sp)
  807bcc:	1800ab1e 	bne	r3,zero,807e7c <_dtoa_r+0xdf4>
  807bd0:	dc800717 	ldw	r18,28(sp)
  807bd4:	dcc00617 	ldw	r19,24(sp)
  807bd8:	9029883a 	mov	r20,r18
  807bdc:	00000206 	br	807be8 <_dtoa_r+0xb60>
  807be0:	0809e640 	call	809e64 <__multadd>
  807be4:	1021883a 	mov	r16,r2
  807be8:	a80b883a 	mov	r5,r21
  807bec:	8009883a 	mov	r4,r16
  807bf0:	0806e880 	call	806e88 <quorem>
  807bf4:	10800c04 	addi	r2,r2,48
  807bf8:	90800005 	stb	r2,0(r18)
  807bfc:	94800044 	addi	r18,r18,1
  807c00:	9507c83a 	sub	r3,r18,r20
  807c04:	000f883a 	mov	r7,zero
  807c08:	01800284 	movi	r6,10
  807c0c:	800b883a 	mov	r5,r16
  807c10:	e009883a 	mov	r4,fp
  807c14:	1cfff216 	blt	r3,r19,807be0 <__alt_mem_onchip_mem+0xff787be0>
  807c18:	1011883a 	mov	r8,r2
  807c1c:	d8800617 	ldw	r2,24(sp)
  807c20:	0082370e 	bge	zero,r2,808500 <_dtoa_r+0x1478>
  807c24:	d9000717 	ldw	r4,28(sp)
  807c28:	0025883a 	mov	r18,zero
  807c2c:	20af883a 	add	r23,r4,r2
  807c30:	01800044 	movi	r6,1
  807c34:	800b883a 	mov	r5,r16
  807c38:	e009883a 	mov	r4,fp
  807c3c:	da001715 	stw	r8,92(sp)
  807c40:	080a5140 	call	80a514 <__lshift>
  807c44:	a80b883a 	mov	r5,r21
  807c48:	1009883a 	mov	r4,r2
  807c4c:	d8800915 	stw	r2,36(sp)
  807c50:	080a65c0 	call	80a65c <__mcmp>
  807c54:	da001717 	ldw	r8,92(sp)
  807c58:	0081800e 	bge	zero,r2,80825c <_dtoa_r+0x11d4>
  807c5c:	b93fffc3 	ldbu	r4,-1(r23)
  807c60:	b8bfffc4 	addi	r2,r23,-1
  807c64:	1007883a 	mov	r3,r2
  807c68:	01800e44 	movi	r6,57
  807c6c:	d9c00717 	ldw	r7,28(sp)
  807c70:	00000506 	br	807c88 <_dtoa_r+0xc00>
  807c74:	18ffffc4 	addi	r3,r3,-1
  807c78:	11c12326 	beq	r2,r7,808108 <_dtoa_r+0x1080>
  807c7c:	19000003 	ldbu	r4,0(r3)
  807c80:	102f883a 	mov	r23,r2
  807c84:	10bfffc4 	addi	r2,r2,-1
  807c88:	21403fcc 	andi	r5,r4,255
  807c8c:	2940201c 	xori	r5,r5,128
  807c90:	297fe004 	addi	r5,r5,-128
  807c94:	29bff726 	beq	r5,r6,807c74 <__alt_mem_onchip_mem+0xff787c74>
  807c98:	21000044 	addi	r4,r4,1
  807c9c:	11000005 	stb	r4,0(r2)
  807ca0:	a80b883a 	mov	r5,r21
  807ca4:	e009883a 	mov	r4,fp
  807ca8:	0809e3c0 	call	809e3c <_Bfree>
  807cac:	883ea026 	beq	r17,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  807cb0:	90000426 	beq	r18,zero,807cc4 <_dtoa_r+0xc3c>
  807cb4:	94400326 	beq	r18,r17,807cc4 <_dtoa_r+0xc3c>
  807cb8:	900b883a 	mov	r5,r18
  807cbc:	e009883a 	mov	r4,fp
  807cc0:	0809e3c0 	call	809e3c <_Bfree>
  807cc4:	880b883a 	mov	r5,r17
  807cc8:	e009883a 	mov	r4,fp
  807ccc:	0809e3c0 	call	809e3c <_Bfree>
  807cd0:	003e9706 	br	807730 <__alt_mem_onchip_mem+0xff787730>
  807cd4:	01800044 	movi	r6,1
  807cd8:	d9800e15 	stw	r6,56(sp)
  807cdc:	003d9606 	br	807338 <__alt_mem_onchip_mem+0xff787338>
  807ce0:	d8800817 	ldw	r2,32(sp)
  807ce4:	d8c00517 	ldw	r3,20(sp)
  807ce8:	d8000d15 	stw	zero,52(sp)
  807cec:	10c5c83a 	sub	r2,r2,r3
  807cf0:	00c9c83a 	sub	r4,zero,r3
  807cf4:	d8800815 	stw	r2,32(sp)
  807cf8:	d9000a15 	stw	r4,40(sp)
  807cfc:	003d9706 	br	80735c <__alt_mem_onchip_mem+0xff78735c>
  807d00:	05adc83a 	sub	r22,zero,r22
  807d04:	dd800815 	stw	r22,32(sp)
  807d08:	002d883a 	mov	r22,zero
  807d0c:	003d8e06 	br	807348 <__alt_mem_onchip_mem+0xff787348>
  807d10:	d9000517 	ldw	r4,20(sp)
  807d14:	08102e00 	call	8102e0 <__floatsidf>
  807d18:	100d883a 	mov	r6,r2
  807d1c:	180f883a 	mov	r7,r3
  807d20:	a009883a 	mov	r4,r20
  807d24:	880b883a 	mov	r5,r17
  807d28:	080eff40 	call	80eff4 <__eqdf2>
  807d2c:	103d7126 	beq	r2,zero,8072f4 <__alt_mem_onchip_mem+0xff7872f4>
  807d30:	d9c00517 	ldw	r7,20(sp)
  807d34:	39ffffc4 	addi	r7,r7,-1
  807d38:	d9c00515 	stw	r7,20(sp)
  807d3c:	003d6d06 	br	8072f4 <__alt_mem_onchip_mem+0xff7872f4>
  807d40:	dd400a17 	ldw	r21,40(sp)
  807d44:	dd000817 	ldw	r20,32(sp)
  807d48:	0023883a 	mov	r17,zero
  807d4c:	003f4806 	br	807a70 <__alt_mem_onchip_mem+0xff787a70>
  807d50:	10e3c83a 	sub	r17,r2,r3
  807d54:	9448983a 	sll	r4,r18,r17
  807d58:	003d3206 	br	807224 <__alt_mem_onchip_mem+0xff787224>
  807d5c:	d8000e15 	stw	zero,56(sp)
  807d60:	003d7506 	br	807338 <__alt_mem_onchip_mem+0xff787338>
  807d64:	b005883a 	mov	r2,r22
  807d68:	003f4506 	br	807a80 <__alt_mem_onchip_mem+0xff787a80>
  807d6c:	dc000915 	stw	r16,36(sp)
  807d70:	d9800a17 	ldw	r6,40(sp)
  807d74:	d9400917 	ldw	r5,36(sp)
  807d78:	e009883a 	mov	r4,fp
  807d7c:	080a3d40 	call	80a3d4 <__pow5mult>
  807d80:	1021883a 	mov	r16,r2
  807d84:	003f5a06 	br	807af0 <__alt_mem_onchip_mem+0xff787af0>
  807d88:	01c00044 	movi	r7,1
  807d8c:	d9c00b15 	stw	r7,44(sp)
  807d90:	d8802217 	ldw	r2,136(sp)
  807d94:	0081280e 	bge	zero,r2,808238 <_dtoa_r+0x11b0>
  807d98:	100d883a 	mov	r6,r2
  807d9c:	1021883a 	mov	r16,r2
  807da0:	d8800c15 	stw	r2,48(sp)
  807da4:	d8800615 	stw	r2,24(sp)
  807da8:	003d8806 	br	8073cc <__alt_mem_onchip_mem+0xff7873cc>
  807dac:	d8800617 	ldw	r2,24(sp)
  807db0:	00be9b16 	blt	zero,r2,807820 <__alt_mem_onchip_mem+0xff787820>
  807db4:	10010f1e 	bne	r2,zero,8081f4 <_dtoa_r+0x116c>
  807db8:	880b883a 	mov	r5,r17
  807dbc:	000d883a 	mov	r6,zero
  807dc0:	01d00534 	movhi	r7,16404
  807dc4:	8009883a 	mov	r4,r16
  807dc8:	080f24c0 	call	80f24c <__muldf3>
  807dcc:	900d883a 	mov	r6,r18
  807dd0:	980f883a 	mov	r7,r19
  807dd4:	1009883a 	mov	r4,r2
  807dd8:	180b883a 	mov	r5,r3
  807ddc:	080f07c0 	call	80f07c <__gedf2>
  807de0:	002b883a 	mov	r21,zero
  807de4:	0023883a 	mov	r17,zero
  807de8:	1000bf16 	blt	r2,zero,8080e8 <_dtoa_r+0x1060>
  807dec:	d9802217 	ldw	r6,136(sp)
  807df0:	ddc00717 	ldw	r23,28(sp)
  807df4:	018c303a 	nor	r6,zero,r6
  807df8:	d9800515 	stw	r6,20(sp)
  807dfc:	a80b883a 	mov	r5,r21
  807e00:	e009883a 	mov	r4,fp
  807e04:	0809e3c0 	call	809e3c <_Bfree>
  807e08:	883e4926 	beq	r17,zero,807730 <__alt_mem_onchip_mem+0xff787730>
  807e0c:	003fad06 	br	807cc4 <__alt_mem_onchip_mem+0xff787cc4>
  807e10:	d9c01117 	ldw	r7,68(sp)
  807e14:	3801bc26 	beq	r7,zero,808508 <_dtoa_r+0x1480>
  807e18:	10810cc4 	addi	r2,r2,1075
  807e1c:	dd400a17 	ldw	r21,40(sp)
  807e20:	dd000817 	ldw	r20,32(sp)
  807e24:	003f0a06 	br	807a50 <__alt_mem_onchip_mem+0xff787a50>
  807e28:	00800704 	movi	r2,28
  807e2c:	d9000817 	ldw	r4,32(sp)
  807e30:	a0a9883a 	add	r20,r20,r2
  807e34:	b0ad883a 	add	r22,r22,r2
  807e38:	2089883a 	add	r4,r4,r2
  807e3c:	d9000815 	stw	r4,32(sp)
  807e40:	003f5106 	br	807b88 <__alt_mem_onchip_mem+0xff787b88>
  807e44:	d8c00317 	ldw	r3,12(sp)
  807e48:	b8c1fc0e 	bge	r23,r3,80863c <_dtoa_r+0x15b4>
  807e4c:	0027883a 	mov	r19,zero
  807e50:	b805883a 	mov	r2,r23
  807e54:	003f3e06 	br	807b50 <__alt_mem_onchip_mem+0xff787b50>
  807e58:	880b883a 	mov	r5,r17
  807e5c:	e009883a 	mov	r4,fp
  807e60:	000f883a 	mov	r7,zero
  807e64:	01800284 	movi	r6,10
  807e68:	0809e640 	call	809e64 <__multadd>
  807e6c:	d9000c17 	ldw	r4,48(sp)
  807e70:	1023883a 	mov	r17,r2
  807e74:	0102040e 	bge	zero,r4,808688 <_dtoa_r+0x1600>
  807e78:	d9000615 	stw	r4,24(sp)
  807e7c:	0500050e 	bge	zero,r20,807e94 <_dtoa_r+0xe0c>
  807e80:	880b883a 	mov	r5,r17
  807e84:	a00d883a 	mov	r6,r20
  807e88:	e009883a 	mov	r4,fp
  807e8c:	080a5140 	call	80a514 <__lshift>
  807e90:	1023883a 	mov	r17,r2
  807e94:	9801241e 	bne	r19,zero,808328 <_dtoa_r+0x12a0>
  807e98:	8829883a 	mov	r20,r17
  807e9c:	d9000617 	ldw	r4,24(sp)
  807ea0:	dcc00717 	ldw	r19,28(sp)
  807ea4:	9480004c 	andi	r18,r18,1
  807ea8:	20bfffc4 	addi	r2,r4,-1
  807eac:	9885883a 	add	r2,r19,r2
  807eb0:	d8800415 	stw	r2,16(sp)
  807eb4:	dc800615 	stw	r18,24(sp)
  807eb8:	a80b883a 	mov	r5,r21
  807ebc:	8009883a 	mov	r4,r16
  807ec0:	0806e880 	call	806e88 <quorem>
  807ec4:	880b883a 	mov	r5,r17
  807ec8:	8009883a 	mov	r4,r16
  807ecc:	102f883a 	mov	r23,r2
  807ed0:	080a65c0 	call	80a65c <__mcmp>
  807ed4:	a80b883a 	mov	r5,r21
  807ed8:	a00d883a 	mov	r6,r20
  807edc:	e009883a 	mov	r4,fp
  807ee0:	102d883a 	mov	r22,r2
  807ee4:	080a6bc0 	call	80a6bc <__mdiff>
  807ee8:	1007883a 	mov	r3,r2
  807eec:	10800317 	ldw	r2,12(r2)
  807ef0:	bc800c04 	addi	r18,r23,48
  807ef4:	180b883a 	mov	r5,r3
  807ef8:	10004e1e 	bne	r2,zero,808034 <_dtoa_r+0xfac>
  807efc:	8009883a 	mov	r4,r16
  807f00:	d8c01615 	stw	r3,88(sp)
  807f04:	080a65c0 	call	80a65c <__mcmp>
  807f08:	d8c01617 	ldw	r3,88(sp)
  807f0c:	e009883a 	mov	r4,fp
  807f10:	d8801615 	stw	r2,88(sp)
  807f14:	180b883a 	mov	r5,r3
  807f18:	0809e3c0 	call	809e3c <_Bfree>
  807f1c:	d8801617 	ldw	r2,88(sp)
  807f20:	1000041e 	bne	r2,zero,807f34 <_dtoa_r+0xeac>
  807f24:	d9800317 	ldw	r6,12(sp)
  807f28:	3000021e 	bne	r6,zero,807f34 <_dtoa_r+0xeac>
  807f2c:	d8c00617 	ldw	r3,24(sp)
  807f30:	18003726 	beq	r3,zero,808010 <_dtoa_r+0xf88>
  807f34:	b0002016 	blt	r22,zero,807fb8 <_dtoa_r+0xf30>
  807f38:	b000041e 	bne	r22,zero,807f4c <_dtoa_r+0xec4>
  807f3c:	d9000317 	ldw	r4,12(sp)
  807f40:	2000021e 	bne	r4,zero,807f4c <_dtoa_r+0xec4>
  807f44:	d8c00617 	ldw	r3,24(sp)
  807f48:	18001b26 	beq	r3,zero,807fb8 <_dtoa_r+0xf30>
  807f4c:	00810716 	blt	zero,r2,80836c <_dtoa_r+0x12e4>
  807f50:	d8c00417 	ldw	r3,16(sp)
  807f54:	9d800044 	addi	r22,r19,1
  807f58:	9c800005 	stb	r18,0(r19)
  807f5c:	b02f883a 	mov	r23,r22
  807f60:	98c10626 	beq	r19,r3,80837c <_dtoa_r+0x12f4>
  807f64:	800b883a 	mov	r5,r16
  807f68:	000f883a 	mov	r7,zero
  807f6c:	01800284 	movi	r6,10
  807f70:	e009883a 	mov	r4,fp
  807f74:	0809e640 	call	809e64 <__multadd>
  807f78:	1021883a 	mov	r16,r2
  807f7c:	000f883a 	mov	r7,zero
  807f80:	01800284 	movi	r6,10
  807f84:	880b883a 	mov	r5,r17
  807f88:	e009883a 	mov	r4,fp
  807f8c:	8d002526 	beq	r17,r20,808024 <_dtoa_r+0xf9c>
  807f90:	0809e640 	call	809e64 <__multadd>
  807f94:	a00b883a 	mov	r5,r20
  807f98:	000f883a 	mov	r7,zero
  807f9c:	01800284 	movi	r6,10
  807fa0:	e009883a 	mov	r4,fp
  807fa4:	1023883a 	mov	r17,r2
  807fa8:	0809e640 	call	809e64 <__multadd>
  807fac:	1029883a 	mov	r20,r2
  807fb0:	b027883a 	mov	r19,r22
  807fb4:	003fc006 	br	807eb8 <__alt_mem_onchip_mem+0xff787eb8>
  807fb8:	9011883a 	mov	r8,r18
  807fbc:	00800e0e 	bge	zero,r2,807ff8 <_dtoa_r+0xf70>
  807fc0:	800b883a 	mov	r5,r16
  807fc4:	01800044 	movi	r6,1
  807fc8:	e009883a 	mov	r4,fp
  807fcc:	da001715 	stw	r8,92(sp)
  807fd0:	080a5140 	call	80a514 <__lshift>
  807fd4:	a80b883a 	mov	r5,r21
  807fd8:	1009883a 	mov	r4,r2
  807fdc:	1021883a 	mov	r16,r2
  807fe0:	080a65c0 	call	80a65c <__mcmp>
  807fe4:	da001717 	ldw	r8,92(sp)
  807fe8:	0081960e 	bge	zero,r2,808644 <_dtoa_r+0x15bc>
  807fec:	00800e44 	movi	r2,57
  807ff0:	40817026 	beq	r8,r2,8085b4 <_dtoa_r+0x152c>
  807ff4:	ba000c44 	addi	r8,r23,49
  807ff8:	8825883a 	mov	r18,r17
  807ffc:	9dc00044 	addi	r23,r19,1
  808000:	9a000005 	stb	r8,0(r19)
  808004:	a023883a 	mov	r17,r20
  808008:	dc000915 	stw	r16,36(sp)
  80800c:	003f2406 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  808010:	00800e44 	movi	r2,57
  808014:	9011883a 	mov	r8,r18
  808018:	90816626 	beq	r18,r2,8085b4 <_dtoa_r+0x152c>
  80801c:	05bff516 	blt	zero,r22,807ff4 <__alt_mem_onchip_mem+0xff787ff4>
  808020:	003ff506 	br	807ff8 <__alt_mem_onchip_mem+0xff787ff8>
  808024:	0809e640 	call	809e64 <__multadd>
  808028:	1023883a 	mov	r17,r2
  80802c:	1029883a 	mov	r20,r2
  808030:	003fdf06 	br	807fb0 <__alt_mem_onchip_mem+0xff787fb0>
  808034:	e009883a 	mov	r4,fp
  808038:	0809e3c0 	call	809e3c <_Bfree>
  80803c:	00800044 	movi	r2,1
  808040:	003fbc06 	br	807f34 <__alt_mem_onchip_mem+0xff787f34>
  808044:	a80b883a 	mov	r5,r21
  808048:	8009883a 	mov	r4,r16
  80804c:	080a65c0 	call	80a65c <__mcmp>
  808050:	103edb0e 	bge	r2,zero,807bc0 <__alt_mem_onchip_mem+0xff787bc0>
  808054:	800b883a 	mov	r5,r16
  808058:	000f883a 	mov	r7,zero
  80805c:	01800284 	movi	r6,10
  808060:	e009883a 	mov	r4,fp
  808064:	0809e640 	call	809e64 <__multadd>
  808068:	1021883a 	mov	r16,r2
  80806c:	d8800517 	ldw	r2,20(sp)
  808070:	d8c00b17 	ldw	r3,44(sp)
  808074:	10bfffc4 	addi	r2,r2,-1
  808078:	d8800515 	stw	r2,20(sp)
  80807c:	183f761e 	bne	r3,zero,807e58 <__alt_mem_onchip_mem+0xff787e58>
  808080:	d9000c17 	ldw	r4,48(sp)
  808084:	0101730e 	bge	zero,r4,808654 <_dtoa_r+0x15cc>
  808088:	d9000615 	stw	r4,24(sp)
  80808c:	003ed006 	br	807bd0 <__alt_mem_onchip_mem+0xff787bd0>
  808090:	00800084 	movi	r2,2
  808094:	3081861e 	bne	r6,r2,8086b0 <_dtoa_r+0x1628>
  808098:	d8000b15 	stw	zero,44(sp)
  80809c:	003f3c06 	br	807d90 <__alt_mem_onchip_mem+0xff787d90>
  8080a0:	dc000917 	ldw	r16,36(sp)
  8080a4:	003e9206 	br	807af0 <__alt_mem_onchip_mem+0xff787af0>
  8080a8:	d9c00317 	ldw	r7,12(sp)
  8080ac:	00800084 	movi	r2,2
  8080b0:	11fec50e 	bge	r2,r7,807bc8 <__alt_mem_onchip_mem+0xff787bc8>
  8080b4:	d9000617 	ldw	r4,24(sp)
  8080b8:	20013c1e 	bne	r4,zero,8085ac <_dtoa_r+0x1524>
  8080bc:	a80b883a 	mov	r5,r21
  8080c0:	000f883a 	mov	r7,zero
  8080c4:	01800144 	movi	r6,5
  8080c8:	e009883a 	mov	r4,fp
  8080cc:	0809e640 	call	809e64 <__multadd>
  8080d0:	100b883a 	mov	r5,r2
  8080d4:	8009883a 	mov	r4,r16
  8080d8:	102b883a 	mov	r21,r2
  8080dc:	080a65c0 	call	80a65c <__mcmp>
  8080e0:	dc000915 	stw	r16,36(sp)
  8080e4:	00bf410e 	bge	zero,r2,807dec <__alt_mem_onchip_mem+0xff787dec>
  8080e8:	d9c00717 	ldw	r7,28(sp)
  8080ec:	00800c44 	movi	r2,49
  8080f0:	38800005 	stb	r2,0(r7)
  8080f4:	d8800517 	ldw	r2,20(sp)
  8080f8:	3dc00044 	addi	r23,r7,1
  8080fc:	10800044 	addi	r2,r2,1
  808100:	d8800515 	stw	r2,20(sp)
  808104:	003f3d06 	br	807dfc <__alt_mem_onchip_mem+0xff787dfc>
  808108:	d9800517 	ldw	r6,20(sp)
  80810c:	d9c00717 	ldw	r7,28(sp)
  808110:	00800c44 	movi	r2,49
  808114:	31800044 	addi	r6,r6,1
  808118:	d9800515 	stw	r6,20(sp)
  80811c:	38800005 	stb	r2,0(r7)
  808120:	003edf06 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  808124:	d8000b15 	stw	zero,44(sp)
  808128:	003c9f06 	br	8073a8 <__alt_mem_onchip_mem+0xff7873a8>
  80812c:	903e7e1e 	bne	r18,zero,807b28 <__alt_mem_onchip_mem+0xff787b28>
  808130:	00800434 	movhi	r2,16
  808134:	10bfffc4 	addi	r2,r2,-1
  808138:	9884703a 	and	r2,r19,r2
  80813c:	1000ea1e 	bne	r2,zero,8084e8 <_dtoa_r+0x1460>
  808140:	9cdffc2c 	andhi	r19,r19,32752
  808144:	9800e826 	beq	r19,zero,8084e8 <_dtoa_r+0x1460>
  808148:	d9c00817 	ldw	r7,32(sp)
  80814c:	b5800044 	addi	r22,r22,1
  808150:	04c00044 	movi	r19,1
  808154:	39c00044 	addi	r7,r7,1
  808158:	d9c00815 	stw	r7,32(sp)
  80815c:	d8800d17 	ldw	r2,52(sp)
  808160:	103e721e 	bne	r2,zero,807b2c <__alt_mem_onchip_mem+0xff787b2c>
  808164:	00800044 	movi	r2,1
  808168:	003e7906 	br	807b50 <__alt_mem_onchip_mem+0xff787b50>
  80816c:	8009883a 	mov	r4,r16
  808170:	08102e00 	call	8102e0 <__floatsidf>
  808174:	d9800f17 	ldw	r6,60(sp)
  808178:	d9c01017 	ldw	r7,64(sp)
  80817c:	1009883a 	mov	r4,r2
  808180:	180b883a 	mov	r5,r3
  808184:	080f24c0 	call	80f24c <__muldf3>
  808188:	000d883a 	mov	r6,zero
  80818c:	01d00734 	movhi	r7,16412
  808190:	1009883a 	mov	r4,r2
  808194:	180b883a 	mov	r5,r3
  808198:	080de600 	call	80de60 <__adddf3>
  80819c:	047f3034 	movhi	r17,64704
  8081a0:	1021883a 	mov	r16,r2
  8081a4:	1c63883a 	add	r17,r3,r17
  8081a8:	d9000f17 	ldw	r4,60(sp)
  8081ac:	d9401017 	ldw	r5,64(sp)
  8081b0:	000d883a 	mov	r6,zero
  8081b4:	01d00534 	movhi	r7,16404
  8081b8:	080f9640 	call	80f964 <__subdf3>
  8081bc:	800d883a 	mov	r6,r16
  8081c0:	880f883a 	mov	r7,r17
  8081c4:	1009883a 	mov	r4,r2
  8081c8:	180b883a 	mov	r5,r3
  8081cc:	102b883a 	mov	r21,r2
  8081d0:	1829883a 	mov	r20,r3
  8081d4:	080f07c0 	call	80f07c <__gedf2>
  8081d8:	00806c16 	blt	zero,r2,80838c <_dtoa_r+0x1304>
  8081dc:	89e0003c 	xorhi	r7,r17,32768
  8081e0:	800d883a 	mov	r6,r16
  8081e4:	a809883a 	mov	r4,r21
  8081e8:	a00b883a 	mov	r5,r20
  8081ec:	080f1580 	call	80f158 <__ledf2>
  8081f0:	103d7e0e 	bge	r2,zero,8077ec <__alt_mem_onchip_mem+0xff7877ec>
  8081f4:	002b883a 	mov	r21,zero
  8081f8:	0023883a 	mov	r17,zero
  8081fc:	003efb06 	br	807dec <__alt_mem_onchip_mem+0xff787dec>
  808200:	d8800717 	ldw	r2,28(sp)
  808204:	003bd006 	br	807148 <__alt_mem_onchip_mem+0xff787148>
  808208:	d9000a17 	ldw	r4,40(sp)
  80820c:	d9800d17 	ldw	r6,52(sp)
  808210:	dd400a15 	stw	r21,40(sp)
  808214:	a905c83a 	sub	r2,r21,r4
  808218:	308d883a 	add	r6,r6,r2
  80821c:	d9800d15 	stw	r6,52(sp)
  808220:	002b883a 	mov	r21,zero
  808224:	003e0606 	br	807a40 <__alt_mem_onchip_mem+0xff787a40>
  808228:	9023883a 	mov	r17,r18
  80822c:	9829883a 	mov	r20,r19
  808230:	04000084 	movi	r16,2
  808234:	003c9206 	br	807480 <__alt_mem_onchip_mem+0xff787480>
  808238:	04000044 	movi	r16,1
  80823c:	dc000c15 	stw	r16,48(sp)
  808240:	dc000615 	stw	r16,24(sp)
  808244:	dc002215 	stw	r16,136(sp)
  808248:	e0001115 	stw	zero,68(fp)
  80824c:	000b883a 	mov	r5,zero
  808250:	003c6906 	br	8073f8 <__alt_mem_onchip_mem+0xff7873f8>
  808254:	3021883a 	mov	r16,r6
  808258:	003ffb06 	br	808248 <__alt_mem_onchip_mem+0xff788248>
  80825c:	1000021e 	bne	r2,zero,808268 <_dtoa_r+0x11e0>
  808260:	4200004c 	andi	r8,r8,1
  808264:	403e7d1e 	bne	r8,zero,807c5c <__alt_mem_onchip_mem+0xff787c5c>
  808268:	01000c04 	movi	r4,48
  80826c:	00000106 	br	808274 <_dtoa_r+0x11ec>
  808270:	102f883a 	mov	r23,r2
  808274:	b8bfffc4 	addi	r2,r23,-1
  808278:	10c00007 	ldb	r3,0(r2)
  80827c:	193ffc26 	beq	r3,r4,808270 <__alt_mem_onchip_mem+0xff788270>
  808280:	003e8706 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  808284:	d8800517 	ldw	r2,20(sp)
  808288:	00a3c83a 	sub	r17,zero,r2
  80828c:	8800a426 	beq	r17,zero,808520 <_dtoa_r+0x1498>
  808290:	888003cc 	andi	r2,r17,15
  808294:	100490fa 	slli	r2,r2,3
  808298:	00c02074 	movhi	r3,129
  80829c:	18d21e04 	addi	r3,r3,18552
  8082a0:	1885883a 	add	r2,r3,r2
  8082a4:	11800017 	ldw	r6,0(r2)
  8082a8:	11c00117 	ldw	r7,4(r2)
  8082ac:	9009883a 	mov	r4,r18
  8082b0:	980b883a 	mov	r5,r19
  8082b4:	8823d13a 	srai	r17,r17,4
  8082b8:	080f24c0 	call	80f24c <__muldf3>
  8082bc:	d8800f15 	stw	r2,60(sp)
  8082c0:	d8c01015 	stw	r3,64(sp)
  8082c4:	8800e826 	beq	r17,zero,808668 <_dtoa_r+0x15e0>
  8082c8:	05002074 	movhi	r20,129
  8082cc:	a5121404 	addi	r20,r20,18512
  8082d0:	04000084 	movi	r16,2
  8082d4:	8980004c 	andi	r6,r17,1
  8082d8:	1009883a 	mov	r4,r2
  8082dc:	8823d07a 	srai	r17,r17,1
  8082e0:	180b883a 	mov	r5,r3
  8082e4:	30000426 	beq	r6,zero,8082f8 <_dtoa_r+0x1270>
  8082e8:	a1800017 	ldw	r6,0(r20)
  8082ec:	a1c00117 	ldw	r7,4(r20)
  8082f0:	84000044 	addi	r16,r16,1
  8082f4:	080f24c0 	call	80f24c <__muldf3>
  8082f8:	a5000204 	addi	r20,r20,8
  8082fc:	883ff51e 	bne	r17,zero,8082d4 <__alt_mem_onchip_mem+0xff7882d4>
  808300:	d8800f15 	stw	r2,60(sp)
  808304:	d8c01015 	stw	r3,64(sp)
  808308:	003c7606 	br	8074e4 <__alt_mem_onchip_mem+0xff7874e4>
  80830c:	00c00c04 	movi	r3,48
  808310:	10c00005 	stb	r3,0(r2)
  808314:	d8c00517 	ldw	r3,20(sp)
  808318:	bd3fffc3 	ldbu	r20,-1(r23)
  80831c:	18c00044 	addi	r3,r3,1
  808320:	d8c00515 	stw	r3,20(sp)
  808324:	003db906 	br	807a0c <__alt_mem_onchip_mem+0xff787a0c>
  808328:	89400117 	ldw	r5,4(r17)
  80832c:	e009883a 	mov	r4,fp
  808330:	0809d940 	call	809d94 <_Balloc>
  808334:	89800417 	ldw	r6,16(r17)
  808338:	89400304 	addi	r5,r17,12
  80833c:	11000304 	addi	r4,r2,12
  808340:	31800084 	addi	r6,r6,2
  808344:	318d883a 	add	r6,r6,r6
  808348:	318d883a 	add	r6,r6,r6
  80834c:	1027883a 	mov	r19,r2
  808350:	0809af00 	call	809af0 <memcpy>
  808354:	01800044 	movi	r6,1
  808358:	980b883a 	mov	r5,r19
  80835c:	e009883a 	mov	r4,fp
  808360:	080a5140 	call	80a514 <__lshift>
  808364:	1029883a 	mov	r20,r2
  808368:	003ecc06 	br	807e9c <__alt_mem_onchip_mem+0xff787e9c>
  80836c:	00800e44 	movi	r2,57
  808370:	90809026 	beq	r18,r2,8085b4 <_dtoa_r+0x152c>
  808374:	92000044 	addi	r8,r18,1
  808378:	003f1f06 	br	807ff8 <__alt_mem_onchip_mem+0xff787ff8>
  80837c:	9011883a 	mov	r8,r18
  808380:	8825883a 	mov	r18,r17
  808384:	a023883a 	mov	r17,r20
  808388:	003e2906 	br	807c30 <__alt_mem_onchip_mem+0xff787c30>
  80838c:	002b883a 	mov	r21,zero
  808390:	0023883a 	mov	r17,zero
  808394:	003f5406 	br	8080e8 <__alt_mem_onchip_mem+0xff7880e8>
  808398:	61bfffc4 	addi	r6,r12,-1
  80839c:	300490fa 	slli	r2,r6,3
  8083a0:	00c02074 	movhi	r3,129
  8083a4:	18d21e04 	addi	r3,r3,18552
  8083a8:	1885883a 	add	r2,r3,r2
  8083ac:	11000017 	ldw	r4,0(r2)
  8083b0:	11400117 	ldw	r5,4(r2)
  8083b4:	d8800717 	ldw	r2,28(sp)
  8083b8:	880f883a 	mov	r7,r17
  8083bc:	d9801215 	stw	r6,72(sp)
  8083c0:	800d883a 	mov	r6,r16
  8083c4:	db001615 	stw	r12,88(sp)
  8083c8:	15c00044 	addi	r23,r2,1
  8083cc:	080f24c0 	call	80f24c <__muldf3>
  8083d0:	d9401017 	ldw	r5,64(sp)
  8083d4:	d9000f17 	ldw	r4,60(sp)
  8083d8:	d8c01515 	stw	r3,84(sp)
  8083dc:	d8801415 	stw	r2,80(sp)
  8083e0:	08102600 	call	810260 <__fixdfsi>
  8083e4:	1009883a 	mov	r4,r2
  8083e8:	1021883a 	mov	r16,r2
  8083ec:	08102e00 	call	8102e0 <__floatsidf>
  8083f0:	d9000f17 	ldw	r4,60(sp)
  8083f4:	d9401017 	ldw	r5,64(sp)
  8083f8:	100d883a 	mov	r6,r2
  8083fc:	180f883a 	mov	r7,r3
  808400:	080f9640 	call	80f964 <__subdf3>
  808404:	1829883a 	mov	r20,r3
  808408:	d8c00717 	ldw	r3,28(sp)
  80840c:	84000c04 	addi	r16,r16,48
  808410:	1023883a 	mov	r17,r2
  808414:	1c000005 	stb	r16,0(r3)
  808418:	db001617 	ldw	r12,88(sp)
  80841c:	00800044 	movi	r2,1
  808420:	60802226 	beq	r12,r2,8084ac <_dtoa_r+0x1424>
  808424:	d9c00717 	ldw	r7,28(sp)
  808428:	8805883a 	mov	r2,r17
  80842c:	b82b883a 	mov	r21,r23
  808430:	3b19883a 	add	r12,r7,r12
  808434:	6023883a 	mov	r17,r12
  808438:	a007883a 	mov	r3,r20
  80843c:	dc800f15 	stw	r18,60(sp)
  808440:	000d883a 	mov	r6,zero
  808444:	01d00934 	movhi	r7,16420
  808448:	1009883a 	mov	r4,r2
  80844c:	180b883a 	mov	r5,r3
  808450:	080f24c0 	call	80f24c <__muldf3>
  808454:	180b883a 	mov	r5,r3
  808458:	1009883a 	mov	r4,r2
  80845c:	1829883a 	mov	r20,r3
  808460:	1025883a 	mov	r18,r2
  808464:	08102600 	call	810260 <__fixdfsi>
  808468:	1009883a 	mov	r4,r2
  80846c:	1021883a 	mov	r16,r2
  808470:	08102e00 	call	8102e0 <__floatsidf>
  808474:	100d883a 	mov	r6,r2
  808478:	180f883a 	mov	r7,r3
  80847c:	9009883a 	mov	r4,r18
  808480:	a00b883a 	mov	r5,r20
  808484:	84000c04 	addi	r16,r16,48
  808488:	080f9640 	call	80f964 <__subdf3>
  80848c:	ad400044 	addi	r21,r21,1
  808490:	ac3fffc5 	stb	r16,-1(r21)
  808494:	ac7fea1e 	bne	r21,r17,808440 <__alt_mem_onchip_mem+0xff788440>
  808498:	1023883a 	mov	r17,r2
  80849c:	d8801217 	ldw	r2,72(sp)
  8084a0:	dc800f17 	ldw	r18,60(sp)
  8084a4:	1829883a 	mov	r20,r3
  8084a8:	b8af883a 	add	r23,r23,r2
  8084ac:	d9001417 	ldw	r4,80(sp)
  8084b0:	d9401517 	ldw	r5,84(sp)
  8084b4:	000d883a 	mov	r6,zero
  8084b8:	01cff834 	movhi	r7,16352
  8084bc:	080de600 	call	80de60 <__adddf3>
  8084c0:	880d883a 	mov	r6,r17
  8084c4:	a00f883a 	mov	r7,r20
  8084c8:	1009883a 	mov	r4,r2
  8084cc:	180b883a 	mov	r5,r3
  8084d0:	080f1580 	call	80f158 <__ledf2>
  8084d4:	10003e0e 	bge	r2,zero,8085d0 <_dtoa_r+0x1548>
  8084d8:	d9001317 	ldw	r4,76(sp)
  8084dc:	bd3fffc3 	ldbu	r20,-1(r23)
  8084e0:	d9000515 	stw	r4,20(sp)
  8084e4:	003d3b06 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  8084e8:	0027883a 	mov	r19,zero
  8084ec:	003f1b06 	br	80815c <__alt_mem_onchip_mem+0xff78815c>
  8084f0:	d8800817 	ldw	r2,32(sp)
  8084f4:	11e9c83a 	sub	r20,r2,r7
  8084f8:	0005883a 	mov	r2,zero
  8084fc:	003d5406 	br	807a50 <__alt_mem_onchip_mem+0xff787a50>
  808500:	00800044 	movi	r2,1
  808504:	003dc706 	br	807c24 <__alt_mem_onchip_mem+0xff787c24>
  808508:	d8c00217 	ldw	r3,8(sp)
  80850c:	00800d84 	movi	r2,54
  808510:	dd400a17 	ldw	r21,40(sp)
  808514:	10c5c83a 	sub	r2,r2,r3
  808518:	dd000817 	ldw	r20,32(sp)
  80851c:	003d4c06 	br	807a50 <__alt_mem_onchip_mem+0xff787a50>
  808520:	dc800f15 	stw	r18,60(sp)
  808524:	dcc01015 	stw	r19,64(sp)
  808528:	04000084 	movi	r16,2
  80852c:	003bed06 	br	8074e4 <__alt_mem_onchip_mem+0xff7874e4>
  808530:	d9000617 	ldw	r4,24(sp)
  808534:	203f0d26 	beq	r4,zero,80816c <__alt_mem_onchip_mem+0xff78816c>
  808538:	d9800c17 	ldw	r6,48(sp)
  80853c:	01bcab0e 	bge	zero,r6,8077ec <__alt_mem_onchip_mem+0xff7877ec>
  808540:	d9401017 	ldw	r5,64(sp)
  808544:	d9000f17 	ldw	r4,60(sp)
  808548:	000d883a 	mov	r6,zero
  80854c:	01d00934 	movhi	r7,16420
  808550:	080f24c0 	call	80f24c <__muldf3>
  808554:	81000044 	addi	r4,r16,1
  808558:	d8800f15 	stw	r2,60(sp)
  80855c:	d8c01015 	stw	r3,64(sp)
  808560:	08102e00 	call	8102e0 <__floatsidf>
  808564:	d9800f17 	ldw	r6,60(sp)
  808568:	d9c01017 	ldw	r7,64(sp)
  80856c:	1009883a 	mov	r4,r2
  808570:	180b883a 	mov	r5,r3
  808574:	080f24c0 	call	80f24c <__muldf3>
  808578:	01d00734 	movhi	r7,16412
  80857c:	000d883a 	mov	r6,zero
  808580:	1009883a 	mov	r4,r2
  808584:	180b883a 	mov	r5,r3
  808588:	080de600 	call	80de60 <__adddf3>
  80858c:	d9c00517 	ldw	r7,20(sp)
  808590:	047f3034 	movhi	r17,64704
  808594:	1021883a 	mov	r16,r2
  808598:	39ffffc4 	addi	r7,r7,-1
  80859c:	d9c01315 	stw	r7,76(sp)
  8085a0:	1c63883a 	add	r17,r3,r17
  8085a4:	db000c17 	ldw	r12,48(sp)
  8085a8:	003bea06 	br	807554 <__alt_mem_onchip_mem+0xff787554>
  8085ac:	dc000915 	stw	r16,36(sp)
  8085b0:	003e0e06 	br	807dec <__alt_mem_onchip_mem+0xff787dec>
  8085b4:	01000e44 	movi	r4,57
  8085b8:	8825883a 	mov	r18,r17
  8085bc:	9dc00044 	addi	r23,r19,1
  8085c0:	99000005 	stb	r4,0(r19)
  8085c4:	a023883a 	mov	r17,r20
  8085c8:	dc000915 	stw	r16,36(sp)
  8085cc:	003da406 	br	807c60 <__alt_mem_onchip_mem+0xff787c60>
  8085d0:	d9801417 	ldw	r6,80(sp)
  8085d4:	d9c01517 	ldw	r7,84(sp)
  8085d8:	0009883a 	mov	r4,zero
  8085dc:	014ff834 	movhi	r5,16352
  8085e0:	080f9640 	call	80f964 <__subdf3>
  8085e4:	880d883a 	mov	r6,r17
  8085e8:	a00f883a 	mov	r7,r20
  8085ec:	1009883a 	mov	r4,r2
  8085f0:	180b883a 	mov	r5,r3
  8085f4:	080f07c0 	call	80f07c <__gedf2>
  8085f8:	00bc7c0e 	bge	zero,r2,8077ec <__alt_mem_onchip_mem+0xff7877ec>
  8085fc:	01000c04 	movi	r4,48
  808600:	00000106 	br	808608 <_dtoa_r+0x1580>
  808604:	102f883a 	mov	r23,r2
  808608:	b8bfffc4 	addi	r2,r23,-1
  80860c:	10c00007 	ldb	r3,0(r2)
  808610:	193ffc26 	beq	r3,r4,808604 <__alt_mem_onchip_mem+0xff788604>
  808614:	d9801317 	ldw	r6,76(sp)
  808618:	d9800515 	stw	r6,20(sp)
  80861c:	003c4406 	br	807730 <__alt_mem_onchip_mem+0xff787730>
  808620:	d9801317 	ldw	r6,76(sp)
  808624:	d9800515 	stw	r6,20(sp)
  808628:	003cea06 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  80862c:	dd800f17 	ldw	r22,60(sp)
  808630:	dcc01017 	ldw	r19,64(sp)
  808634:	dc801217 	ldw	r18,72(sp)
  808638:	003c6c06 	br	8077ec <__alt_mem_onchip_mem+0xff7877ec>
  80863c:	903e031e 	bne	r18,zero,807e4c <__alt_mem_onchip_mem+0xff787e4c>
  808640:	003ebb06 	br	808130 <__alt_mem_onchip_mem+0xff788130>
  808644:	103e6c1e 	bne	r2,zero,807ff8 <__alt_mem_onchip_mem+0xff787ff8>
  808648:	4080004c 	andi	r2,r8,1
  80864c:	103e6a26 	beq	r2,zero,807ff8 <__alt_mem_onchip_mem+0xff787ff8>
  808650:	003e6606 	br	807fec <__alt_mem_onchip_mem+0xff787fec>
  808654:	d8c00317 	ldw	r3,12(sp)
  808658:	00800084 	movi	r2,2
  80865c:	10c02916 	blt	r2,r3,808704 <_dtoa_r+0x167c>
  808660:	d9000c17 	ldw	r4,48(sp)
  808664:	003e8806 	br	808088 <__alt_mem_onchip_mem+0xff788088>
  808668:	04000084 	movi	r16,2
  80866c:	003b9d06 	br	8074e4 <__alt_mem_onchip_mem+0xff7874e4>
  808670:	d9001317 	ldw	r4,76(sp)
  808674:	d9000515 	stw	r4,20(sp)
  808678:	003cd606 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  80867c:	d8801317 	ldw	r2,76(sp)
  808680:	d8800515 	stw	r2,20(sp)
  808684:	003c2a06 	br	807730 <__alt_mem_onchip_mem+0xff787730>
  808688:	d9800317 	ldw	r6,12(sp)
  80868c:	00800084 	movi	r2,2
  808690:	11801516 	blt	r2,r6,8086e8 <_dtoa_r+0x1660>
  808694:	d9c00c17 	ldw	r7,48(sp)
  808698:	d9c00615 	stw	r7,24(sp)
  80869c:	003df706 	br	807e7c <__alt_mem_onchip_mem+0xff787e7c>
  8086a0:	193d3926 	beq	r3,r4,807b88 <__alt_mem_onchip_mem+0xff787b88>
  8086a4:	00c00f04 	movi	r3,60
  8086a8:	1885c83a 	sub	r2,r3,r2
  8086ac:	003ddf06 	br	807e2c <__alt_mem_onchip_mem+0xff787e2c>
  8086b0:	e009883a 	mov	r4,fp
  8086b4:	e0001115 	stw	zero,68(fp)
  8086b8:	000b883a 	mov	r5,zero
  8086bc:	0809d940 	call	809d94 <_Balloc>
  8086c0:	d8800715 	stw	r2,28(sp)
  8086c4:	d8c00717 	ldw	r3,28(sp)
  8086c8:	00bfffc4 	movi	r2,-1
  8086cc:	01000044 	movi	r4,1
  8086d0:	d8800c15 	stw	r2,48(sp)
  8086d4:	e0c01015 	stw	r3,64(fp)
  8086d8:	d9000b15 	stw	r4,44(sp)
  8086dc:	d8800615 	stw	r2,24(sp)
  8086e0:	d8002215 	stw	zero,136(sp)
  8086e4:	003c4106 	br	8077ec <__alt_mem_onchip_mem+0xff7877ec>
  8086e8:	d8c00c17 	ldw	r3,48(sp)
  8086ec:	d8c00615 	stw	r3,24(sp)
  8086f0:	003e7006 	br	8080b4 <__alt_mem_onchip_mem+0xff7880b4>
  8086f4:	04400044 	movi	r17,1
  8086f8:	003b2006 	br	80737c <__alt_mem_onchip_mem+0xff78737c>
  8086fc:	000b883a 	mov	r5,zero
  808700:	003b3d06 	br	8073f8 <__alt_mem_onchip_mem+0xff7873f8>
  808704:	d8800c17 	ldw	r2,48(sp)
  808708:	d8800615 	stw	r2,24(sp)
  80870c:	003e6906 	br	8080b4 <__alt_mem_onchip_mem+0xff7880b4>

00808710 <__sflush_r>:
  808710:	2880030b 	ldhu	r2,12(r5)
  808714:	defffb04 	addi	sp,sp,-20
  808718:	dcc00315 	stw	r19,12(sp)
  80871c:	dc400115 	stw	r17,4(sp)
  808720:	dfc00415 	stw	ra,16(sp)
  808724:	dc800215 	stw	r18,8(sp)
  808728:	dc000015 	stw	r16,0(sp)
  80872c:	10c0020c 	andi	r3,r2,8
  808730:	2823883a 	mov	r17,r5
  808734:	2027883a 	mov	r19,r4
  808738:	1800311e 	bne	r3,zero,808800 <__sflush_r+0xf0>
  80873c:	28c00117 	ldw	r3,4(r5)
  808740:	10820014 	ori	r2,r2,2048
  808744:	2880030d 	sth	r2,12(r5)
  808748:	00c04b0e 	bge	zero,r3,808878 <__sflush_r+0x168>
  80874c:	8a000a17 	ldw	r8,40(r17)
  808750:	40002326 	beq	r8,zero,8087e0 <__sflush_r+0xd0>
  808754:	9c000017 	ldw	r16,0(r19)
  808758:	10c4000c 	andi	r3,r2,4096
  80875c:	98000015 	stw	zero,0(r19)
  808760:	18004826 	beq	r3,zero,808884 <__sflush_r+0x174>
  808764:	89801417 	ldw	r6,80(r17)
  808768:	10c0010c 	andi	r3,r2,4
  80876c:	18000626 	beq	r3,zero,808788 <__sflush_r+0x78>
  808770:	88c00117 	ldw	r3,4(r17)
  808774:	88800c17 	ldw	r2,48(r17)
  808778:	30cdc83a 	sub	r6,r6,r3
  80877c:	10000226 	beq	r2,zero,808788 <__sflush_r+0x78>
  808780:	88800f17 	ldw	r2,60(r17)
  808784:	308dc83a 	sub	r6,r6,r2
  808788:	89400717 	ldw	r5,28(r17)
  80878c:	000f883a 	mov	r7,zero
  808790:	9809883a 	mov	r4,r19
  808794:	403ee83a 	callr	r8
  808798:	00ffffc4 	movi	r3,-1
  80879c:	10c04426 	beq	r2,r3,8088b0 <__sflush_r+0x1a0>
  8087a0:	88c0030b 	ldhu	r3,12(r17)
  8087a4:	89000417 	ldw	r4,16(r17)
  8087a8:	88000115 	stw	zero,4(r17)
  8087ac:	197dffcc 	andi	r5,r3,63487
  8087b0:	8940030d 	sth	r5,12(r17)
  8087b4:	89000015 	stw	r4,0(r17)
  8087b8:	18c4000c 	andi	r3,r3,4096
  8087bc:	18002c1e 	bne	r3,zero,808870 <__sflush_r+0x160>
  8087c0:	89400c17 	ldw	r5,48(r17)
  8087c4:	9c000015 	stw	r16,0(r19)
  8087c8:	28000526 	beq	r5,zero,8087e0 <__sflush_r+0xd0>
  8087cc:	88801004 	addi	r2,r17,64
  8087d0:	28800226 	beq	r5,r2,8087dc <__sflush_r+0xcc>
  8087d4:	9809883a 	mov	r4,r19
  8087d8:	0808f280 	call	808f28 <_free_r>
  8087dc:	88000c15 	stw	zero,48(r17)
  8087e0:	0005883a 	mov	r2,zero
  8087e4:	dfc00417 	ldw	ra,16(sp)
  8087e8:	dcc00317 	ldw	r19,12(sp)
  8087ec:	dc800217 	ldw	r18,8(sp)
  8087f0:	dc400117 	ldw	r17,4(sp)
  8087f4:	dc000017 	ldw	r16,0(sp)
  8087f8:	dec00504 	addi	sp,sp,20
  8087fc:	f800283a 	ret
  808800:	2c800417 	ldw	r18,16(r5)
  808804:	903ff626 	beq	r18,zero,8087e0 <__alt_mem_onchip_mem+0xff7887e0>
  808808:	2c000017 	ldw	r16,0(r5)
  80880c:	108000cc 	andi	r2,r2,3
  808810:	2c800015 	stw	r18,0(r5)
  808814:	84a1c83a 	sub	r16,r16,r18
  808818:	1000131e 	bne	r2,zero,808868 <__sflush_r+0x158>
  80881c:	28800517 	ldw	r2,20(r5)
  808820:	88800215 	stw	r2,8(r17)
  808824:	04000316 	blt	zero,r16,808834 <__sflush_r+0x124>
  808828:	003fed06 	br	8087e0 <__alt_mem_onchip_mem+0xff7887e0>
  80882c:	90a5883a 	add	r18,r18,r2
  808830:	043feb0e 	bge	zero,r16,8087e0 <__alt_mem_onchip_mem+0xff7887e0>
  808834:	88800917 	ldw	r2,36(r17)
  808838:	89400717 	ldw	r5,28(r17)
  80883c:	800f883a 	mov	r7,r16
  808840:	900d883a 	mov	r6,r18
  808844:	9809883a 	mov	r4,r19
  808848:	103ee83a 	callr	r2
  80884c:	80a1c83a 	sub	r16,r16,r2
  808850:	00bff616 	blt	zero,r2,80882c <__alt_mem_onchip_mem+0xff78882c>
  808854:	88c0030b 	ldhu	r3,12(r17)
  808858:	00bfffc4 	movi	r2,-1
  80885c:	18c01014 	ori	r3,r3,64
  808860:	88c0030d 	sth	r3,12(r17)
  808864:	003fdf06 	br	8087e4 <__alt_mem_onchip_mem+0xff7887e4>
  808868:	0005883a 	mov	r2,zero
  80886c:	003fec06 	br	808820 <__alt_mem_onchip_mem+0xff788820>
  808870:	88801415 	stw	r2,80(r17)
  808874:	003fd206 	br	8087c0 <__alt_mem_onchip_mem+0xff7887c0>
  808878:	28c00f17 	ldw	r3,60(r5)
  80887c:	00ffb316 	blt	zero,r3,80874c <__alt_mem_onchip_mem+0xff78874c>
  808880:	003fd706 	br	8087e0 <__alt_mem_onchip_mem+0xff7887e0>
  808884:	89400717 	ldw	r5,28(r17)
  808888:	000d883a 	mov	r6,zero
  80888c:	01c00044 	movi	r7,1
  808890:	9809883a 	mov	r4,r19
  808894:	403ee83a 	callr	r8
  808898:	100d883a 	mov	r6,r2
  80889c:	00bfffc4 	movi	r2,-1
  8088a0:	30801426 	beq	r6,r2,8088f4 <__sflush_r+0x1e4>
  8088a4:	8880030b 	ldhu	r2,12(r17)
  8088a8:	8a000a17 	ldw	r8,40(r17)
  8088ac:	003fae06 	br	808768 <__alt_mem_onchip_mem+0xff788768>
  8088b0:	98c00017 	ldw	r3,0(r19)
  8088b4:	183fba26 	beq	r3,zero,8087a0 <__alt_mem_onchip_mem+0xff7887a0>
  8088b8:	01000744 	movi	r4,29
  8088bc:	19000626 	beq	r3,r4,8088d8 <__sflush_r+0x1c8>
  8088c0:	01000584 	movi	r4,22
  8088c4:	19000426 	beq	r3,r4,8088d8 <__sflush_r+0x1c8>
  8088c8:	88c0030b 	ldhu	r3,12(r17)
  8088cc:	18c01014 	ori	r3,r3,64
  8088d0:	88c0030d 	sth	r3,12(r17)
  8088d4:	003fc306 	br	8087e4 <__alt_mem_onchip_mem+0xff7887e4>
  8088d8:	8880030b 	ldhu	r2,12(r17)
  8088dc:	88c00417 	ldw	r3,16(r17)
  8088e0:	88000115 	stw	zero,4(r17)
  8088e4:	10bdffcc 	andi	r2,r2,63487
  8088e8:	8880030d 	sth	r2,12(r17)
  8088ec:	88c00015 	stw	r3,0(r17)
  8088f0:	003fb306 	br	8087c0 <__alt_mem_onchip_mem+0xff7887c0>
  8088f4:	98800017 	ldw	r2,0(r19)
  8088f8:	103fea26 	beq	r2,zero,8088a4 <__alt_mem_onchip_mem+0xff7888a4>
  8088fc:	00c00744 	movi	r3,29
  808900:	10c00226 	beq	r2,r3,80890c <__sflush_r+0x1fc>
  808904:	00c00584 	movi	r3,22
  808908:	10c0031e 	bne	r2,r3,808918 <__sflush_r+0x208>
  80890c:	9c000015 	stw	r16,0(r19)
  808910:	0005883a 	mov	r2,zero
  808914:	003fb306 	br	8087e4 <__alt_mem_onchip_mem+0xff7887e4>
  808918:	88c0030b 	ldhu	r3,12(r17)
  80891c:	3005883a 	mov	r2,r6
  808920:	18c01014 	ori	r3,r3,64
  808924:	88c0030d 	sth	r3,12(r17)
  808928:	003fae06 	br	8087e4 <__alt_mem_onchip_mem+0xff7887e4>

0080892c <_fflush_r>:
  80892c:	defffd04 	addi	sp,sp,-12
  808930:	dc000115 	stw	r16,4(sp)
  808934:	dfc00215 	stw	ra,8(sp)
  808938:	2021883a 	mov	r16,r4
  80893c:	20000226 	beq	r4,zero,808948 <_fflush_r+0x1c>
  808940:	20800e17 	ldw	r2,56(r4)
  808944:	10000c26 	beq	r2,zero,808978 <_fflush_r+0x4c>
  808948:	2880030f 	ldh	r2,12(r5)
  80894c:	1000051e 	bne	r2,zero,808964 <_fflush_r+0x38>
  808950:	0005883a 	mov	r2,zero
  808954:	dfc00217 	ldw	ra,8(sp)
  808958:	dc000117 	ldw	r16,4(sp)
  80895c:	dec00304 	addi	sp,sp,12
  808960:	f800283a 	ret
  808964:	8009883a 	mov	r4,r16
  808968:	dfc00217 	ldw	ra,8(sp)
  80896c:	dc000117 	ldw	r16,4(sp)
  808970:	dec00304 	addi	sp,sp,12
  808974:	08087101 	jmpi	808710 <__sflush_r>
  808978:	d9400015 	stw	r5,0(sp)
  80897c:	0808d080 	call	808d08 <__sinit>
  808980:	d9400017 	ldw	r5,0(sp)
  808984:	003ff006 	br	808948 <__alt_mem_onchip_mem+0xff788948>

00808988 <fflush>:
  808988:	20000526 	beq	r4,zero,8089a0 <fflush+0x18>
  80898c:	00802074 	movhi	r2,129
  808990:	109a6e04 	addi	r2,r2,27064
  808994:	200b883a 	mov	r5,r4
  808998:	11000017 	ldw	r4,0(r2)
  80899c:	080892c1 	jmpi	80892c <_fflush_r>
  8089a0:	00802074 	movhi	r2,129
  8089a4:	109a6d04 	addi	r2,r2,27060
  8089a8:	11000017 	ldw	r4,0(r2)
  8089ac:	01402074 	movhi	r5,129
  8089b0:	29624b04 	addi	r5,r5,-30420
  8089b4:	08097b81 	jmpi	8097b8 <_fwalk_reent>

008089b8 <__fp_unlock>:
  8089b8:	0005883a 	mov	r2,zero
  8089bc:	f800283a 	ret

008089c0 <_cleanup_r>:
  8089c0:	01402074 	movhi	r5,129
  8089c4:	2972ec04 	addi	r5,r5,-13392
  8089c8:	08097b81 	jmpi	8097b8 <_fwalk_reent>

008089cc <__sinit.part.1>:
  8089cc:	defff704 	addi	sp,sp,-36
  8089d0:	00c02074 	movhi	r3,129
  8089d4:	dfc00815 	stw	ra,32(sp)
  8089d8:	ddc00715 	stw	r23,28(sp)
  8089dc:	dd800615 	stw	r22,24(sp)
  8089e0:	dd400515 	stw	r21,20(sp)
  8089e4:	dd000415 	stw	r20,16(sp)
  8089e8:	dcc00315 	stw	r19,12(sp)
  8089ec:	dc800215 	stw	r18,8(sp)
  8089f0:	dc400115 	stw	r17,4(sp)
  8089f4:	dc000015 	stw	r16,0(sp)
  8089f8:	18e27004 	addi	r3,r3,-30272
  8089fc:	24000117 	ldw	r16,4(r4)
  808a00:	20c00f15 	stw	r3,60(r4)
  808a04:	2080bb04 	addi	r2,r4,748
  808a08:	00c000c4 	movi	r3,3
  808a0c:	20c0b915 	stw	r3,740(r4)
  808a10:	2080ba15 	stw	r2,744(r4)
  808a14:	2000b815 	stw	zero,736(r4)
  808a18:	05c00204 	movi	r23,8
  808a1c:	00800104 	movi	r2,4
  808a20:	2025883a 	mov	r18,r4
  808a24:	b80d883a 	mov	r6,r23
  808a28:	81001704 	addi	r4,r16,92
  808a2c:	000b883a 	mov	r5,zero
  808a30:	80000015 	stw	zero,0(r16)
  808a34:	80000115 	stw	zero,4(r16)
  808a38:	80000215 	stw	zero,8(r16)
  808a3c:	8080030d 	sth	r2,12(r16)
  808a40:	80001915 	stw	zero,100(r16)
  808a44:	8000038d 	sth	zero,14(r16)
  808a48:	80000415 	stw	zero,16(r16)
  808a4c:	80000515 	stw	zero,20(r16)
  808a50:	80000615 	stw	zero,24(r16)
  808a54:	08042d00 	call	8042d0 <memset>
  808a58:	05802034 	movhi	r22,128
  808a5c:	94400217 	ldw	r17,8(r18)
  808a60:	05402034 	movhi	r21,128
  808a64:	05002034 	movhi	r20,128
  808a68:	04c02034 	movhi	r19,128
  808a6c:	b591f704 	addi	r22,r22,18396
  808a70:	ad520e04 	addi	r21,r21,18488
  808a74:	a5122d04 	addi	r20,r20,18612
  808a78:	9cd24404 	addi	r19,r19,18704
  808a7c:	85800815 	stw	r22,32(r16)
  808a80:	85400915 	stw	r21,36(r16)
  808a84:	85000a15 	stw	r20,40(r16)
  808a88:	84c00b15 	stw	r19,44(r16)
  808a8c:	84000715 	stw	r16,28(r16)
  808a90:	00800284 	movi	r2,10
  808a94:	8880030d 	sth	r2,12(r17)
  808a98:	00800044 	movi	r2,1
  808a9c:	b80d883a 	mov	r6,r23
  808aa0:	89001704 	addi	r4,r17,92
  808aa4:	000b883a 	mov	r5,zero
  808aa8:	88000015 	stw	zero,0(r17)
  808aac:	88000115 	stw	zero,4(r17)
  808ab0:	88000215 	stw	zero,8(r17)
  808ab4:	88001915 	stw	zero,100(r17)
  808ab8:	8880038d 	sth	r2,14(r17)
  808abc:	88000415 	stw	zero,16(r17)
  808ac0:	88000515 	stw	zero,20(r17)
  808ac4:	88000615 	stw	zero,24(r17)
  808ac8:	08042d00 	call	8042d0 <memset>
  808acc:	94000317 	ldw	r16,12(r18)
  808ad0:	00800484 	movi	r2,18
  808ad4:	8c400715 	stw	r17,28(r17)
  808ad8:	8d800815 	stw	r22,32(r17)
  808adc:	8d400915 	stw	r21,36(r17)
  808ae0:	8d000a15 	stw	r20,40(r17)
  808ae4:	8cc00b15 	stw	r19,44(r17)
  808ae8:	8080030d 	sth	r2,12(r16)
  808aec:	00800084 	movi	r2,2
  808af0:	80000015 	stw	zero,0(r16)
  808af4:	80000115 	stw	zero,4(r16)
  808af8:	80000215 	stw	zero,8(r16)
  808afc:	80001915 	stw	zero,100(r16)
  808b00:	8080038d 	sth	r2,14(r16)
  808b04:	80000415 	stw	zero,16(r16)
  808b08:	80000515 	stw	zero,20(r16)
  808b0c:	80000615 	stw	zero,24(r16)
  808b10:	b80d883a 	mov	r6,r23
  808b14:	000b883a 	mov	r5,zero
  808b18:	81001704 	addi	r4,r16,92
  808b1c:	08042d00 	call	8042d0 <memset>
  808b20:	00800044 	movi	r2,1
  808b24:	84000715 	stw	r16,28(r16)
  808b28:	85800815 	stw	r22,32(r16)
  808b2c:	85400915 	stw	r21,36(r16)
  808b30:	85000a15 	stw	r20,40(r16)
  808b34:	84c00b15 	stw	r19,44(r16)
  808b38:	90800e15 	stw	r2,56(r18)
  808b3c:	dfc00817 	ldw	ra,32(sp)
  808b40:	ddc00717 	ldw	r23,28(sp)
  808b44:	dd800617 	ldw	r22,24(sp)
  808b48:	dd400517 	ldw	r21,20(sp)
  808b4c:	dd000417 	ldw	r20,16(sp)
  808b50:	dcc00317 	ldw	r19,12(sp)
  808b54:	dc800217 	ldw	r18,8(sp)
  808b58:	dc400117 	ldw	r17,4(sp)
  808b5c:	dc000017 	ldw	r16,0(sp)
  808b60:	dec00904 	addi	sp,sp,36
  808b64:	f800283a 	ret

00808b68 <__fp_lock>:
  808b68:	0005883a 	mov	r2,zero
  808b6c:	f800283a 	ret

00808b70 <__sfmoreglue>:
  808b70:	defffc04 	addi	sp,sp,-16
  808b74:	dc400115 	stw	r17,4(sp)
  808b78:	2c7fffc4 	addi	r17,r5,-1
  808b7c:	8c401a24 	muli	r17,r17,104
  808b80:	dc800215 	stw	r18,8(sp)
  808b84:	2825883a 	mov	r18,r5
  808b88:	89401d04 	addi	r5,r17,116
  808b8c:	dc000015 	stw	r16,0(sp)
  808b90:	dfc00315 	stw	ra,12(sp)
  808b94:	0803ac40 	call	803ac4 <_malloc_r>
  808b98:	1021883a 	mov	r16,r2
  808b9c:	10000726 	beq	r2,zero,808bbc <__sfmoreglue+0x4c>
  808ba0:	11000304 	addi	r4,r2,12
  808ba4:	10000015 	stw	zero,0(r2)
  808ba8:	14800115 	stw	r18,4(r2)
  808bac:	11000215 	stw	r4,8(r2)
  808bb0:	89801a04 	addi	r6,r17,104
  808bb4:	000b883a 	mov	r5,zero
  808bb8:	08042d00 	call	8042d0 <memset>
  808bbc:	8005883a 	mov	r2,r16
  808bc0:	dfc00317 	ldw	ra,12(sp)
  808bc4:	dc800217 	ldw	r18,8(sp)
  808bc8:	dc400117 	ldw	r17,4(sp)
  808bcc:	dc000017 	ldw	r16,0(sp)
  808bd0:	dec00404 	addi	sp,sp,16
  808bd4:	f800283a 	ret

00808bd8 <__sfp>:
  808bd8:	defffb04 	addi	sp,sp,-20
  808bdc:	dc000015 	stw	r16,0(sp)
  808be0:	04002074 	movhi	r16,129
  808be4:	841a6d04 	addi	r16,r16,27060
  808be8:	dcc00315 	stw	r19,12(sp)
  808bec:	2027883a 	mov	r19,r4
  808bf0:	81000017 	ldw	r4,0(r16)
  808bf4:	dfc00415 	stw	ra,16(sp)
  808bf8:	dc800215 	stw	r18,8(sp)
  808bfc:	20800e17 	ldw	r2,56(r4)
  808c00:	dc400115 	stw	r17,4(sp)
  808c04:	1000021e 	bne	r2,zero,808c10 <__sfp+0x38>
  808c08:	08089cc0 	call	8089cc <__sinit.part.1>
  808c0c:	81000017 	ldw	r4,0(r16)
  808c10:	2480b804 	addi	r18,r4,736
  808c14:	047fffc4 	movi	r17,-1
  808c18:	91000117 	ldw	r4,4(r18)
  808c1c:	94000217 	ldw	r16,8(r18)
  808c20:	213fffc4 	addi	r4,r4,-1
  808c24:	20000a16 	blt	r4,zero,808c50 <__sfp+0x78>
  808c28:	8080030f 	ldh	r2,12(r16)
  808c2c:	10000c26 	beq	r2,zero,808c60 <__sfp+0x88>
  808c30:	80c01d04 	addi	r3,r16,116
  808c34:	00000206 	br	808c40 <__sfp+0x68>
  808c38:	18bfe60f 	ldh	r2,-104(r3)
  808c3c:	10000826 	beq	r2,zero,808c60 <__sfp+0x88>
  808c40:	213fffc4 	addi	r4,r4,-1
  808c44:	1c3ffd04 	addi	r16,r3,-12
  808c48:	18c01a04 	addi	r3,r3,104
  808c4c:	247ffa1e 	bne	r4,r17,808c38 <__alt_mem_onchip_mem+0xff788c38>
  808c50:	90800017 	ldw	r2,0(r18)
  808c54:	10001d26 	beq	r2,zero,808ccc <__sfp+0xf4>
  808c58:	1025883a 	mov	r18,r2
  808c5c:	003fee06 	br	808c18 <__alt_mem_onchip_mem+0xff788c18>
  808c60:	00bfffc4 	movi	r2,-1
  808c64:	8080038d 	sth	r2,14(r16)
  808c68:	00800044 	movi	r2,1
  808c6c:	8080030d 	sth	r2,12(r16)
  808c70:	80001915 	stw	zero,100(r16)
  808c74:	80000015 	stw	zero,0(r16)
  808c78:	80000215 	stw	zero,8(r16)
  808c7c:	80000115 	stw	zero,4(r16)
  808c80:	80000415 	stw	zero,16(r16)
  808c84:	80000515 	stw	zero,20(r16)
  808c88:	80000615 	stw	zero,24(r16)
  808c8c:	01800204 	movi	r6,8
  808c90:	000b883a 	mov	r5,zero
  808c94:	81001704 	addi	r4,r16,92
  808c98:	08042d00 	call	8042d0 <memset>
  808c9c:	8005883a 	mov	r2,r16
  808ca0:	80000c15 	stw	zero,48(r16)
  808ca4:	80000d15 	stw	zero,52(r16)
  808ca8:	80001115 	stw	zero,68(r16)
  808cac:	80001215 	stw	zero,72(r16)
  808cb0:	dfc00417 	ldw	ra,16(sp)
  808cb4:	dcc00317 	ldw	r19,12(sp)
  808cb8:	dc800217 	ldw	r18,8(sp)
  808cbc:	dc400117 	ldw	r17,4(sp)
  808cc0:	dc000017 	ldw	r16,0(sp)
  808cc4:	dec00504 	addi	sp,sp,20
  808cc8:	f800283a 	ret
  808ccc:	01400104 	movi	r5,4
  808cd0:	9809883a 	mov	r4,r19
  808cd4:	0808b700 	call	808b70 <__sfmoreglue>
  808cd8:	90800015 	stw	r2,0(r18)
  808cdc:	103fde1e 	bne	r2,zero,808c58 <__alt_mem_onchip_mem+0xff788c58>
  808ce0:	00800304 	movi	r2,12
  808ce4:	98800015 	stw	r2,0(r19)
  808ce8:	0005883a 	mov	r2,zero
  808cec:	003ff006 	br	808cb0 <__alt_mem_onchip_mem+0xff788cb0>

00808cf0 <_cleanup>:
  808cf0:	00802074 	movhi	r2,129
  808cf4:	109a6d04 	addi	r2,r2,27060
  808cf8:	11000017 	ldw	r4,0(r2)
  808cfc:	01402074 	movhi	r5,129
  808d00:	2972ec04 	addi	r5,r5,-13392
  808d04:	08097b81 	jmpi	8097b8 <_fwalk_reent>

00808d08 <__sinit>:
  808d08:	20800e17 	ldw	r2,56(r4)
  808d0c:	10000126 	beq	r2,zero,808d14 <__sinit+0xc>
  808d10:	f800283a 	ret
  808d14:	08089cc1 	jmpi	8089cc <__sinit.part.1>

00808d18 <__sfp_lock_acquire>:
  808d18:	f800283a 	ret

00808d1c <__sfp_lock_release>:
  808d1c:	f800283a 	ret

00808d20 <__sinit_lock_acquire>:
  808d20:	f800283a 	ret

00808d24 <__sinit_lock_release>:
  808d24:	f800283a 	ret

00808d28 <__fp_lock_all>:
  808d28:	00802074 	movhi	r2,129
  808d2c:	109a6e04 	addi	r2,r2,27064
  808d30:	11000017 	ldw	r4,0(r2)
  808d34:	01402074 	movhi	r5,129
  808d38:	2962da04 	addi	r5,r5,-29848
  808d3c:	08096f41 	jmpi	8096f4 <_fwalk>

00808d40 <__fp_unlock_all>:
  808d40:	00802074 	movhi	r2,129
  808d44:	109a6e04 	addi	r2,r2,27064
  808d48:	11000017 	ldw	r4,0(r2)
  808d4c:	01402074 	movhi	r5,129
  808d50:	29626e04 	addi	r5,r5,-30280
  808d54:	08096f41 	jmpi	8096f4 <_fwalk>

00808d58 <__sflags>:
  808d58:	28800007 	ldb	r2,0(r5)
  808d5c:	00c01c84 	movi	r3,114
  808d60:	10c02426 	beq	r2,r3,808df4 <__sflags+0x9c>
  808d64:	00c01dc4 	movi	r3,119
  808d68:	10c01e26 	beq	r2,r3,808de4 <__sflags+0x8c>
  808d6c:	00c01844 	movi	r3,97
  808d70:	10c00426 	beq	r2,r3,808d84 <__sflags+0x2c>
  808d74:	00800584 	movi	r2,22
  808d78:	20800015 	stw	r2,0(r4)
  808d7c:	0005883a 	mov	r2,zero
  808d80:	f800283a 	ret
  808d84:	02c08204 	movi	r11,520
  808d88:	01000044 	movi	r4,1
  808d8c:	00804204 	movi	r2,264
  808d90:	01c00ac4 	movi	r7,43
  808d94:	02bff8c4 	movi	r10,-29
  808d98:	027fff04 	movi	r9,-4
  808d9c:	02001e04 	movi	r8,120
  808da0:	29400044 	addi	r5,r5,1
  808da4:	28c00007 	ldb	r3,0(r5)
  808da8:	18000626 	beq	r3,zero,808dc4 <__sflags+0x6c>
  808dac:	19c00826 	beq	r3,r7,808dd0 <__sflags+0x78>
  808db0:	1a3ffb1e 	bne	r3,r8,808da0 <__alt_mem_onchip_mem+0xff788da0>
  808db4:	29400044 	addi	r5,r5,1
  808db8:	28c00007 	ldb	r3,0(r5)
  808dbc:	21020014 	ori	r4,r4,2048
  808dc0:	183ffa1e 	bne	r3,zero,808dac <__alt_mem_onchip_mem+0xff788dac>
  808dc4:	22c8b03a 	or	r4,r4,r11
  808dc8:	31000015 	stw	r4,0(r6)
  808dcc:	f800283a 	ret
  808dd0:	1284703a 	and	r2,r2,r10
  808dd4:	2248703a 	and	r4,r4,r9
  808dd8:	10800414 	ori	r2,r2,16
  808ddc:	21000094 	ori	r4,r4,2
  808de0:	003fef06 	br	808da0 <__alt_mem_onchip_mem+0xff788da0>
  808de4:	02c18004 	movi	r11,1536
  808de8:	01000044 	movi	r4,1
  808dec:	00800204 	movi	r2,8
  808df0:	003fe706 	br	808d90 <__alt_mem_onchip_mem+0xff788d90>
  808df4:	0017883a 	mov	r11,zero
  808df8:	0009883a 	mov	r4,zero
  808dfc:	00800104 	movi	r2,4
  808e00:	003fe306 	br	808d90 <__alt_mem_onchip_mem+0xff788d90>

00808e04 <_malloc_trim_r>:
  808e04:	defffb04 	addi	sp,sp,-20
  808e08:	dcc00315 	stw	r19,12(sp)
  808e0c:	04c02074 	movhi	r19,129
  808e10:	dc800215 	stw	r18,8(sp)
  808e14:	dc400115 	stw	r17,4(sp)
  808e18:	dc000015 	stw	r16,0(sp)
  808e1c:	dfc00415 	stw	ra,16(sp)
  808e20:	2821883a 	mov	r16,r5
  808e24:	9cd45204 	addi	r19,r19,20808
  808e28:	2025883a 	mov	r18,r4
  808e2c:	0810b700 	call	810b70 <__malloc_lock>
  808e30:	98800217 	ldw	r2,8(r19)
  808e34:	14400117 	ldw	r17,4(r2)
  808e38:	00bfff04 	movi	r2,-4
  808e3c:	88a2703a 	and	r17,r17,r2
  808e40:	8c21c83a 	sub	r16,r17,r16
  808e44:	8403fbc4 	addi	r16,r16,4079
  808e48:	8020d33a 	srli	r16,r16,12
  808e4c:	0083ffc4 	movi	r2,4095
  808e50:	843fffc4 	addi	r16,r16,-1
  808e54:	8020933a 	slli	r16,r16,12
  808e58:	1400060e 	bge	r2,r16,808e74 <_malloc_trim_r+0x70>
  808e5c:	000b883a 	mov	r5,zero
  808e60:	9009883a 	mov	r4,r18
  808e64:	08047880 	call	804788 <_sbrk_r>
  808e68:	98c00217 	ldw	r3,8(r19)
  808e6c:	1c47883a 	add	r3,r3,r17
  808e70:	10c00a26 	beq	r2,r3,808e9c <_malloc_trim_r+0x98>
  808e74:	9009883a 	mov	r4,r18
  808e78:	0810b940 	call	810b94 <__malloc_unlock>
  808e7c:	0005883a 	mov	r2,zero
  808e80:	dfc00417 	ldw	ra,16(sp)
  808e84:	dcc00317 	ldw	r19,12(sp)
  808e88:	dc800217 	ldw	r18,8(sp)
  808e8c:	dc400117 	ldw	r17,4(sp)
  808e90:	dc000017 	ldw	r16,0(sp)
  808e94:	dec00504 	addi	sp,sp,20
  808e98:	f800283a 	ret
  808e9c:	040bc83a 	sub	r5,zero,r16
  808ea0:	9009883a 	mov	r4,r18
  808ea4:	08047880 	call	804788 <_sbrk_r>
  808ea8:	00ffffc4 	movi	r3,-1
  808eac:	10c00d26 	beq	r2,r3,808ee4 <_malloc_trim_r+0xe0>
  808eb0:	00c020b4 	movhi	r3,130
  808eb4:	18e22304 	addi	r3,r3,-30580
  808eb8:	18800017 	ldw	r2,0(r3)
  808ebc:	99000217 	ldw	r4,8(r19)
  808ec0:	8c23c83a 	sub	r17,r17,r16
  808ec4:	8c400054 	ori	r17,r17,1
  808ec8:	1421c83a 	sub	r16,r2,r16
  808ecc:	24400115 	stw	r17,4(r4)
  808ed0:	9009883a 	mov	r4,r18
  808ed4:	1c000015 	stw	r16,0(r3)
  808ed8:	0810b940 	call	810b94 <__malloc_unlock>
  808edc:	00800044 	movi	r2,1
  808ee0:	003fe706 	br	808e80 <__alt_mem_onchip_mem+0xff788e80>
  808ee4:	000b883a 	mov	r5,zero
  808ee8:	9009883a 	mov	r4,r18
  808eec:	08047880 	call	804788 <_sbrk_r>
  808ef0:	99000217 	ldw	r4,8(r19)
  808ef4:	014003c4 	movi	r5,15
  808ef8:	1107c83a 	sub	r3,r2,r4
  808efc:	28ffdd0e 	bge	r5,r3,808e74 <__alt_mem_onchip_mem+0xff788e74>
  808f00:	01402074 	movhi	r5,129
  808f04:	295a6f04 	addi	r5,r5,27068
  808f08:	29400017 	ldw	r5,0(r5)
  808f0c:	18c00054 	ori	r3,r3,1
  808f10:	20c00115 	stw	r3,4(r4)
  808f14:	00c020b4 	movhi	r3,130
  808f18:	1145c83a 	sub	r2,r2,r5
  808f1c:	18e22304 	addi	r3,r3,-30580
  808f20:	18800015 	stw	r2,0(r3)
  808f24:	003fd306 	br	808e74 <__alt_mem_onchip_mem+0xff788e74>

00808f28 <_free_r>:
  808f28:	28004126 	beq	r5,zero,809030 <_free_r+0x108>
  808f2c:	defffd04 	addi	sp,sp,-12
  808f30:	dc400115 	stw	r17,4(sp)
  808f34:	dc000015 	stw	r16,0(sp)
  808f38:	2023883a 	mov	r17,r4
  808f3c:	2821883a 	mov	r16,r5
  808f40:	dfc00215 	stw	ra,8(sp)
  808f44:	0810b700 	call	810b70 <__malloc_lock>
  808f48:	81ffff17 	ldw	r7,-4(r16)
  808f4c:	00bfff84 	movi	r2,-2
  808f50:	01002074 	movhi	r4,129
  808f54:	81bffe04 	addi	r6,r16,-8
  808f58:	3884703a 	and	r2,r7,r2
  808f5c:	21145204 	addi	r4,r4,20808
  808f60:	308b883a 	add	r5,r6,r2
  808f64:	2a400117 	ldw	r9,4(r5)
  808f68:	22000217 	ldw	r8,8(r4)
  808f6c:	00ffff04 	movi	r3,-4
  808f70:	48c6703a 	and	r3,r9,r3
  808f74:	2a005726 	beq	r5,r8,8090d4 <_free_r+0x1ac>
  808f78:	28c00115 	stw	r3,4(r5)
  808f7c:	39c0004c 	andi	r7,r7,1
  808f80:	3800091e 	bne	r7,zero,808fa8 <_free_r+0x80>
  808f84:	823ffe17 	ldw	r8,-8(r16)
  808f88:	22400204 	addi	r9,r4,8
  808f8c:	320dc83a 	sub	r6,r6,r8
  808f90:	31c00217 	ldw	r7,8(r6)
  808f94:	1205883a 	add	r2,r2,r8
  808f98:	3a406526 	beq	r7,r9,809130 <_free_r+0x208>
  808f9c:	32000317 	ldw	r8,12(r6)
  808fa0:	3a000315 	stw	r8,12(r7)
  808fa4:	41c00215 	stw	r7,8(r8)
  808fa8:	28cf883a 	add	r7,r5,r3
  808fac:	39c00117 	ldw	r7,4(r7)
  808fb0:	39c0004c 	andi	r7,r7,1
  808fb4:	38003a26 	beq	r7,zero,8090a0 <_free_r+0x178>
  808fb8:	10c00054 	ori	r3,r2,1
  808fbc:	30c00115 	stw	r3,4(r6)
  808fc0:	3087883a 	add	r3,r6,r2
  808fc4:	18800015 	stw	r2,0(r3)
  808fc8:	00c07fc4 	movi	r3,511
  808fcc:	18801936 	bltu	r3,r2,809034 <_free_r+0x10c>
  808fd0:	1004d0fa 	srli	r2,r2,3
  808fd4:	01c00044 	movi	r7,1
  808fd8:	21400117 	ldw	r5,4(r4)
  808fdc:	10c00044 	addi	r3,r2,1
  808fe0:	18c7883a 	add	r3,r3,r3
  808fe4:	1005d0ba 	srai	r2,r2,2
  808fe8:	18c7883a 	add	r3,r3,r3
  808fec:	18c7883a 	add	r3,r3,r3
  808ff0:	1907883a 	add	r3,r3,r4
  808ff4:	3884983a 	sll	r2,r7,r2
  808ff8:	19c00017 	ldw	r7,0(r3)
  808ffc:	1a3ffe04 	addi	r8,r3,-8
  809000:	1144b03a 	or	r2,r2,r5
  809004:	32000315 	stw	r8,12(r6)
  809008:	31c00215 	stw	r7,8(r6)
  80900c:	20800115 	stw	r2,4(r4)
  809010:	19800015 	stw	r6,0(r3)
  809014:	39800315 	stw	r6,12(r7)
  809018:	8809883a 	mov	r4,r17
  80901c:	dfc00217 	ldw	ra,8(sp)
  809020:	dc400117 	ldw	r17,4(sp)
  809024:	dc000017 	ldw	r16,0(sp)
  809028:	dec00304 	addi	sp,sp,12
  80902c:	0810b941 	jmpi	810b94 <__malloc_unlock>
  809030:	f800283a 	ret
  809034:	100ad27a 	srli	r5,r2,9
  809038:	00c00104 	movi	r3,4
  80903c:	19404a36 	bltu	r3,r5,809168 <_free_r+0x240>
  809040:	100ad1ba 	srli	r5,r2,6
  809044:	28c00e44 	addi	r3,r5,57
  809048:	18c7883a 	add	r3,r3,r3
  80904c:	29400e04 	addi	r5,r5,56
  809050:	18c7883a 	add	r3,r3,r3
  809054:	18c7883a 	add	r3,r3,r3
  809058:	1909883a 	add	r4,r3,r4
  80905c:	20c00017 	ldw	r3,0(r4)
  809060:	01c02074 	movhi	r7,129
  809064:	213ffe04 	addi	r4,r4,-8
  809068:	39d45204 	addi	r7,r7,20808
  80906c:	20c04426 	beq	r4,r3,809180 <_free_r+0x258>
  809070:	01ffff04 	movi	r7,-4
  809074:	19400117 	ldw	r5,4(r3)
  809078:	29ca703a 	and	r5,r5,r7
  80907c:	1140022e 	bgeu	r2,r5,809088 <_free_r+0x160>
  809080:	18c00217 	ldw	r3,8(r3)
  809084:	20fffb1e 	bne	r4,r3,809074 <__alt_mem_onchip_mem+0xff789074>
  809088:	19000317 	ldw	r4,12(r3)
  80908c:	31000315 	stw	r4,12(r6)
  809090:	30c00215 	stw	r3,8(r6)
  809094:	21800215 	stw	r6,8(r4)
  809098:	19800315 	stw	r6,12(r3)
  80909c:	003fde06 	br	809018 <__alt_mem_onchip_mem+0xff789018>
  8090a0:	29c00217 	ldw	r7,8(r5)
  8090a4:	10c5883a 	add	r2,r2,r3
  8090a8:	00c02074 	movhi	r3,129
  8090ac:	18d45404 	addi	r3,r3,20816
  8090b0:	38c03b26 	beq	r7,r3,8091a0 <_free_r+0x278>
  8090b4:	2a000317 	ldw	r8,12(r5)
  8090b8:	11400054 	ori	r5,r2,1
  8090bc:	3087883a 	add	r3,r6,r2
  8090c0:	3a000315 	stw	r8,12(r7)
  8090c4:	41c00215 	stw	r7,8(r8)
  8090c8:	31400115 	stw	r5,4(r6)
  8090cc:	18800015 	stw	r2,0(r3)
  8090d0:	003fbd06 	br	808fc8 <__alt_mem_onchip_mem+0xff788fc8>
  8090d4:	39c0004c 	andi	r7,r7,1
  8090d8:	10c5883a 	add	r2,r2,r3
  8090dc:	3800071e 	bne	r7,zero,8090fc <_free_r+0x1d4>
  8090e0:	81fffe17 	ldw	r7,-8(r16)
  8090e4:	31cdc83a 	sub	r6,r6,r7
  8090e8:	30c00317 	ldw	r3,12(r6)
  8090ec:	31400217 	ldw	r5,8(r6)
  8090f0:	11c5883a 	add	r2,r2,r7
  8090f4:	28c00315 	stw	r3,12(r5)
  8090f8:	19400215 	stw	r5,8(r3)
  8090fc:	10c00054 	ori	r3,r2,1
  809100:	30c00115 	stw	r3,4(r6)
  809104:	00c02074 	movhi	r3,129
  809108:	18da7004 	addi	r3,r3,27072
  80910c:	18c00017 	ldw	r3,0(r3)
  809110:	21800215 	stw	r6,8(r4)
  809114:	10ffc036 	bltu	r2,r3,809018 <__alt_mem_onchip_mem+0xff789018>
  809118:	008020b4 	movhi	r2,130
  80911c:	10a21804 	addi	r2,r2,-30624
  809120:	11400017 	ldw	r5,0(r2)
  809124:	8809883a 	mov	r4,r17
  809128:	0808e040 	call	808e04 <_malloc_trim_r>
  80912c:	003fba06 	br	809018 <__alt_mem_onchip_mem+0xff789018>
  809130:	28c9883a 	add	r4,r5,r3
  809134:	21000117 	ldw	r4,4(r4)
  809138:	2100004c 	andi	r4,r4,1
  80913c:	2000391e 	bne	r4,zero,809224 <_free_r+0x2fc>
  809140:	29c00217 	ldw	r7,8(r5)
  809144:	29000317 	ldw	r4,12(r5)
  809148:	1885883a 	add	r2,r3,r2
  80914c:	10c00054 	ori	r3,r2,1
  809150:	39000315 	stw	r4,12(r7)
  809154:	21c00215 	stw	r7,8(r4)
  809158:	30c00115 	stw	r3,4(r6)
  80915c:	308d883a 	add	r6,r6,r2
  809160:	30800015 	stw	r2,0(r6)
  809164:	003fac06 	br	809018 <__alt_mem_onchip_mem+0xff789018>
  809168:	00c00504 	movi	r3,20
  80916c:	19401536 	bltu	r3,r5,8091c4 <_free_r+0x29c>
  809170:	28c01704 	addi	r3,r5,92
  809174:	18c7883a 	add	r3,r3,r3
  809178:	294016c4 	addi	r5,r5,91
  80917c:	003fb406 	br	809050 <__alt_mem_onchip_mem+0xff789050>
  809180:	280bd0ba 	srai	r5,r5,2
  809184:	00c00044 	movi	r3,1
  809188:	38800117 	ldw	r2,4(r7)
  80918c:	194a983a 	sll	r5,r3,r5
  809190:	2007883a 	mov	r3,r4
  809194:	2884b03a 	or	r2,r5,r2
  809198:	38800115 	stw	r2,4(r7)
  80919c:	003fbb06 	br	80908c <__alt_mem_onchip_mem+0xff78908c>
  8091a0:	21800515 	stw	r6,20(r4)
  8091a4:	21800415 	stw	r6,16(r4)
  8091a8:	10c00054 	ori	r3,r2,1
  8091ac:	31c00315 	stw	r7,12(r6)
  8091b0:	31c00215 	stw	r7,8(r6)
  8091b4:	30c00115 	stw	r3,4(r6)
  8091b8:	308d883a 	add	r6,r6,r2
  8091bc:	30800015 	stw	r2,0(r6)
  8091c0:	003f9506 	br	809018 <__alt_mem_onchip_mem+0xff789018>
  8091c4:	00c01504 	movi	r3,84
  8091c8:	19400536 	bltu	r3,r5,8091e0 <_free_r+0x2b8>
  8091cc:	100ad33a 	srli	r5,r2,12
  8091d0:	28c01bc4 	addi	r3,r5,111
  8091d4:	18c7883a 	add	r3,r3,r3
  8091d8:	29401b84 	addi	r5,r5,110
  8091dc:	003f9c06 	br	809050 <__alt_mem_onchip_mem+0xff789050>
  8091e0:	00c05504 	movi	r3,340
  8091e4:	19400536 	bltu	r3,r5,8091fc <_free_r+0x2d4>
  8091e8:	100ad3fa 	srli	r5,r2,15
  8091ec:	28c01e04 	addi	r3,r5,120
  8091f0:	18c7883a 	add	r3,r3,r3
  8091f4:	29401dc4 	addi	r5,r5,119
  8091f8:	003f9506 	br	809050 <__alt_mem_onchip_mem+0xff789050>
  8091fc:	00c15504 	movi	r3,1364
  809200:	19400536 	bltu	r3,r5,809218 <_free_r+0x2f0>
  809204:	100ad4ba 	srli	r5,r2,18
  809208:	28c01f44 	addi	r3,r5,125
  80920c:	18c7883a 	add	r3,r3,r3
  809210:	29401f04 	addi	r5,r5,124
  809214:	003f8e06 	br	809050 <__alt_mem_onchip_mem+0xff789050>
  809218:	00c03f84 	movi	r3,254
  80921c:	01401f84 	movi	r5,126
  809220:	003f8b06 	br	809050 <__alt_mem_onchip_mem+0xff789050>
  809224:	10c00054 	ori	r3,r2,1
  809228:	30c00115 	stw	r3,4(r6)
  80922c:	308d883a 	add	r6,r6,r2
  809230:	30800015 	stw	r2,0(r6)
  809234:	003f7806 	br	809018 <__alt_mem_onchip_mem+0xff789018>

00809238 <__sfvwrite_r>:
  809238:	30800217 	ldw	r2,8(r6)
  80923c:	10006726 	beq	r2,zero,8093dc <__sfvwrite_r+0x1a4>
  809240:	28c0030b 	ldhu	r3,12(r5)
  809244:	defff404 	addi	sp,sp,-48
  809248:	dd400715 	stw	r21,28(sp)
  80924c:	dd000615 	stw	r20,24(sp)
  809250:	dc000215 	stw	r16,8(sp)
  809254:	dfc00b15 	stw	ra,44(sp)
  809258:	df000a15 	stw	fp,40(sp)
  80925c:	ddc00915 	stw	r23,36(sp)
  809260:	dd800815 	stw	r22,32(sp)
  809264:	dcc00515 	stw	r19,20(sp)
  809268:	dc800415 	stw	r18,16(sp)
  80926c:	dc400315 	stw	r17,12(sp)
  809270:	1880020c 	andi	r2,r3,8
  809274:	2821883a 	mov	r16,r5
  809278:	202b883a 	mov	r21,r4
  80927c:	3029883a 	mov	r20,r6
  809280:	10002726 	beq	r2,zero,809320 <__sfvwrite_r+0xe8>
  809284:	28800417 	ldw	r2,16(r5)
  809288:	10002526 	beq	r2,zero,809320 <__sfvwrite_r+0xe8>
  80928c:	1880008c 	andi	r2,r3,2
  809290:	a4400017 	ldw	r17,0(r20)
  809294:	10002a26 	beq	r2,zero,809340 <__sfvwrite_r+0x108>
  809298:	05a00034 	movhi	r22,32768
  80929c:	0027883a 	mov	r19,zero
  8092a0:	0025883a 	mov	r18,zero
  8092a4:	b5bf0004 	addi	r22,r22,-1024
  8092a8:	980d883a 	mov	r6,r19
  8092ac:	a809883a 	mov	r4,r21
  8092b0:	90004626 	beq	r18,zero,8093cc <__sfvwrite_r+0x194>
  8092b4:	900f883a 	mov	r7,r18
  8092b8:	b480022e 	bgeu	r22,r18,8092c4 <__sfvwrite_r+0x8c>
  8092bc:	01e00034 	movhi	r7,32768
  8092c0:	39ff0004 	addi	r7,r7,-1024
  8092c4:	80800917 	ldw	r2,36(r16)
  8092c8:	81400717 	ldw	r5,28(r16)
  8092cc:	103ee83a 	callr	r2
  8092d0:	0080570e 	bge	zero,r2,809430 <__sfvwrite_r+0x1f8>
  8092d4:	a0c00217 	ldw	r3,8(r20)
  8092d8:	98a7883a 	add	r19,r19,r2
  8092dc:	90a5c83a 	sub	r18,r18,r2
  8092e0:	1885c83a 	sub	r2,r3,r2
  8092e4:	a0800215 	stw	r2,8(r20)
  8092e8:	103fef1e 	bne	r2,zero,8092a8 <__alt_mem_onchip_mem+0xff7892a8>
  8092ec:	0005883a 	mov	r2,zero
  8092f0:	dfc00b17 	ldw	ra,44(sp)
  8092f4:	df000a17 	ldw	fp,40(sp)
  8092f8:	ddc00917 	ldw	r23,36(sp)
  8092fc:	dd800817 	ldw	r22,32(sp)
  809300:	dd400717 	ldw	r21,28(sp)
  809304:	dd000617 	ldw	r20,24(sp)
  809308:	dcc00517 	ldw	r19,20(sp)
  80930c:	dc800417 	ldw	r18,16(sp)
  809310:	dc400317 	ldw	r17,12(sp)
  809314:	dc000217 	ldw	r16,8(sp)
  809318:	dec00c04 	addi	sp,sp,48
  80931c:	f800283a 	ret
  809320:	800b883a 	mov	r5,r16
  809324:	a809883a 	mov	r4,r21
  809328:	0806ce00 	call	806ce0 <__swsetup_r>
  80932c:	1000eb1e 	bne	r2,zero,8096dc <__sfvwrite_r+0x4a4>
  809330:	80c0030b 	ldhu	r3,12(r16)
  809334:	a4400017 	ldw	r17,0(r20)
  809338:	1880008c 	andi	r2,r3,2
  80933c:	103fd61e 	bne	r2,zero,809298 <__alt_mem_onchip_mem+0xff789298>
  809340:	1880004c 	andi	r2,r3,1
  809344:	10003f1e 	bne	r2,zero,809444 <__sfvwrite_r+0x20c>
  809348:	0039883a 	mov	fp,zero
  80934c:	0025883a 	mov	r18,zero
  809350:	90001a26 	beq	r18,zero,8093bc <__sfvwrite_r+0x184>
  809354:	1880800c 	andi	r2,r3,512
  809358:	84c00217 	ldw	r19,8(r16)
  80935c:	10002126 	beq	r2,zero,8093e4 <__sfvwrite_r+0x1ac>
  809360:	982f883a 	mov	r23,r19
  809364:	94c09336 	bltu	r18,r19,8095b4 <__sfvwrite_r+0x37c>
  809368:	1881200c 	andi	r2,r3,1152
  80936c:	10009e1e 	bne	r2,zero,8095e8 <__sfvwrite_r+0x3b0>
  809370:	81000017 	ldw	r4,0(r16)
  809374:	b80d883a 	mov	r6,r23
  809378:	e00b883a 	mov	r5,fp
  80937c:	0809c380 	call	809c38 <memmove>
  809380:	80c00217 	ldw	r3,8(r16)
  809384:	81000017 	ldw	r4,0(r16)
  809388:	9005883a 	mov	r2,r18
  80938c:	1ce7c83a 	sub	r19,r3,r19
  809390:	25cf883a 	add	r7,r4,r23
  809394:	84c00215 	stw	r19,8(r16)
  809398:	81c00015 	stw	r7,0(r16)
  80939c:	a0c00217 	ldw	r3,8(r20)
  8093a0:	e0b9883a 	add	fp,fp,r2
  8093a4:	90a5c83a 	sub	r18,r18,r2
  8093a8:	18a7c83a 	sub	r19,r3,r2
  8093ac:	a4c00215 	stw	r19,8(r20)
  8093b0:	983fce26 	beq	r19,zero,8092ec <__alt_mem_onchip_mem+0xff7892ec>
  8093b4:	80c0030b 	ldhu	r3,12(r16)
  8093b8:	903fe61e 	bne	r18,zero,809354 <__alt_mem_onchip_mem+0xff789354>
  8093bc:	8f000017 	ldw	fp,0(r17)
  8093c0:	8c800117 	ldw	r18,4(r17)
  8093c4:	8c400204 	addi	r17,r17,8
  8093c8:	003fe106 	br	809350 <__alt_mem_onchip_mem+0xff789350>
  8093cc:	8cc00017 	ldw	r19,0(r17)
  8093d0:	8c800117 	ldw	r18,4(r17)
  8093d4:	8c400204 	addi	r17,r17,8
  8093d8:	003fb306 	br	8092a8 <__alt_mem_onchip_mem+0xff7892a8>
  8093dc:	0005883a 	mov	r2,zero
  8093e0:	f800283a 	ret
  8093e4:	81000017 	ldw	r4,0(r16)
  8093e8:	80800417 	ldw	r2,16(r16)
  8093ec:	11005736 	bltu	r2,r4,80954c <__sfvwrite_r+0x314>
  8093f0:	85c00517 	ldw	r23,20(r16)
  8093f4:	95c05536 	bltu	r18,r23,80954c <__sfvwrite_r+0x314>
  8093f8:	00a00034 	movhi	r2,32768
  8093fc:	10bfffc4 	addi	r2,r2,-1
  809400:	9009883a 	mov	r4,r18
  809404:	1480012e 	bgeu	r2,r18,80940c <__sfvwrite_r+0x1d4>
  809408:	1009883a 	mov	r4,r2
  80940c:	b80b883a 	mov	r5,r23
  809410:	080dcac0 	call	80dcac <__divsi3>
  809414:	15cf383a 	mul	r7,r2,r23
  809418:	81400717 	ldw	r5,28(r16)
  80941c:	80800917 	ldw	r2,36(r16)
  809420:	e00d883a 	mov	r6,fp
  809424:	a809883a 	mov	r4,r21
  809428:	103ee83a 	callr	r2
  80942c:	00bfdb16 	blt	zero,r2,80939c <__alt_mem_onchip_mem+0xff78939c>
  809430:	8080030b 	ldhu	r2,12(r16)
  809434:	10801014 	ori	r2,r2,64
  809438:	8080030d 	sth	r2,12(r16)
  80943c:	00bfffc4 	movi	r2,-1
  809440:	003fab06 	br	8092f0 <__alt_mem_onchip_mem+0xff7892f0>
  809444:	0027883a 	mov	r19,zero
  809448:	0011883a 	mov	r8,zero
  80944c:	0039883a 	mov	fp,zero
  809450:	0025883a 	mov	r18,zero
  809454:	90001f26 	beq	r18,zero,8094d4 <__sfvwrite_r+0x29c>
  809458:	40005a26 	beq	r8,zero,8095c4 <__sfvwrite_r+0x38c>
  80945c:	982d883a 	mov	r22,r19
  809460:	94c0012e 	bgeu	r18,r19,809468 <__sfvwrite_r+0x230>
  809464:	902d883a 	mov	r22,r18
  809468:	81000017 	ldw	r4,0(r16)
  80946c:	80800417 	ldw	r2,16(r16)
  809470:	b02f883a 	mov	r23,r22
  809474:	81c00517 	ldw	r7,20(r16)
  809478:	1100032e 	bgeu	r2,r4,809488 <__sfvwrite_r+0x250>
  80947c:	80c00217 	ldw	r3,8(r16)
  809480:	38c7883a 	add	r3,r7,r3
  809484:	1d801816 	blt	r3,r22,8094e8 <__sfvwrite_r+0x2b0>
  809488:	b1c03e16 	blt	r22,r7,809584 <__sfvwrite_r+0x34c>
  80948c:	80800917 	ldw	r2,36(r16)
  809490:	81400717 	ldw	r5,28(r16)
  809494:	e00d883a 	mov	r6,fp
  809498:	da000115 	stw	r8,4(sp)
  80949c:	a809883a 	mov	r4,r21
  8094a0:	103ee83a 	callr	r2
  8094a4:	102f883a 	mov	r23,r2
  8094a8:	da000117 	ldw	r8,4(sp)
  8094ac:	00bfe00e 	bge	zero,r2,809430 <__alt_mem_onchip_mem+0xff789430>
  8094b0:	9de7c83a 	sub	r19,r19,r23
  8094b4:	98001f26 	beq	r19,zero,809534 <__sfvwrite_r+0x2fc>
  8094b8:	a0800217 	ldw	r2,8(r20)
  8094bc:	e5f9883a 	add	fp,fp,r23
  8094c0:	95e5c83a 	sub	r18,r18,r23
  8094c4:	15efc83a 	sub	r23,r2,r23
  8094c8:	a5c00215 	stw	r23,8(r20)
  8094cc:	b83f8726 	beq	r23,zero,8092ec <__alt_mem_onchip_mem+0xff7892ec>
  8094d0:	903fe11e 	bne	r18,zero,809458 <__alt_mem_onchip_mem+0xff789458>
  8094d4:	8f000017 	ldw	fp,0(r17)
  8094d8:	8c800117 	ldw	r18,4(r17)
  8094dc:	0011883a 	mov	r8,zero
  8094e0:	8c400204 	addi	r17,r17,8
  8094e4:	003fdb06 	br	809454 <__alt_mem_onchip_mem+0xff789454>
  8094e8:	180d883a 	mov	r6,r3
  8094ec:	e00b883a 	mov	r5,fp
  8094f0:	da000115 	stw	r8,4(sp)
  8094f4:	d8c00015 	stw	r3,0(sp)
  8094f8:	0809c380 	call	809c38 <memmove>
  8094fc:	d8c00017 	ldw	r3,0(sp)
  809500:	80800017 	ldw	r2,0(r16)
  809504:	800b883a 	mov	r5,r16
  809508:	a809883a 	mov	r4,r21
  80950c:	10c5883a 	add	r2,r2,r3
  809510:	80800015 	stw	r2,0(r16)
  809514:	d8c00015 	stw	r3,0(sp)
  809518:	080892c0 	call	80892c <_fflush_r>
  80951c:	d8c00017 	ldw	r3,0(sp)
  809520:	da000117 	ldw	r8,4(sp)
  809524:	103fc21e 	bne	r2,zero,809430 <__alt_mem_onchip_mem+0xff789430>
  809528:	182f883a 	mov	r23,r3
  80952c:	9de7c83a 	sub	r19,r19,r23
  809530:	983fe11e 	bne	r19,zero,8094b8 <__alt_mem_onchip_mem+0xff7894b8>
  809534:	800b883a 	mov	r5,r16
  809538:	a809883a 	mov	r4,r21
  80953c:	080892c0 	call	80892c <_fflush_r>
  809540:	103fbb1e 	bne	r2,zero,809430 <__alt_mem_onchip_mem+0xff789430>
  809544:	0011883a 	mov	r8,zero
  809548:	003fdb06 	br	8094b8 <__alt_mem_onchip_mem+0xff7894b8>
  80954c:	94c0012e 	bgeu	r18,r19,809554 <__sfvwrite_r+0x31c>
  809550:	9027883a 	mov	r19,r18
  809554:	980d883a 	mov	r6,r19
  809558:	e00b883a 	mov	r5,fp
  80955c:	0809c380 	call	809c38 <memmove>
  809560:	80800217 	ldw	r2,8(r16)
  809564:	80c00017 	ldw	r3,0(r16)
  809568:	14c5c83a 	sub	r2,r2,r19
  80956c:	1cc7883a 	add	r3,r3,r19
  809570:	80800215 	stw	r2,8(r16)
  809574:	80c00015 	stw	r3,0(r16)
  809578:	10004326 	beq	r2,zero,809688 <__sfvwrite_r+0x450>
  80957c:	9805883a 	mov	r2,r19
  809580:	003f8606 	br	80939c <__alt_mem_onchip_mem+0xff78939c>
  809584:	b00d883a 	mov	r6,r22
  809588:	e00b883a 	mov	r5,fp
  80958c:	da000115 	stw	r8,4(sp)
  809590:	0809c380 	call	809c38 <memmove>
  809594:	80800217 	ldw	r2,8(r16)
  809598:	80c00017 	ldw	r3,0(r16)
  80959c:	da000117 	ldw	r8,4(sp)
  8095a0:	1585c83a 	sub	r2,r2,r22
  8095a4:	1dad883a 	add	r22,r3,r22
  8095a8:	80800215 	stw	r2,8(r16)
  8095ac:	85800015 	stw	r22,0(r16)
  8095b0:	003fbf06 	br	8094b0 <__alt_mem_onchip_mem+0xff7894b0>
  8095b4:	81000017 	ldw	r4,0(r16)
  8095b8:	9027883a 	mov	r19,r18
  8095bc:	902f883a 	mov	r23,r18
  8095c0:	003f6c06 	br	809374 <__alt_mem_onchip_mem+0xff789374>
  8095c4:	900d883a 	mov	r6,r18
  8095c8:	01400284 	movi	r5,10
  8095cc:	e009883a 	mov	r4,fp
  8095d0:	0809a0c0 	call	809a0c <memchr>
  8095d4:	10003e26 	beq	r2,zero,8096d0 <__sfvwrite_r+0x498>
  8095d8:	10800044 	addi	r2,r2,1
  8095dc:	1727c83a 	sub	r19,r2,fp
  8095e0:	02000044 	movi	r8,1
  8095e4:	003f9d06 	br	80945c <__alt_mem_onchip_mem+0xff78945c>
  8095e8:	80800517 	ldw	r2,20(r16)
  8095ec:	81400417 	ldw	r5,16(r16)
  8095f0:	81c00017 	ldw	r7,0(r16)
  8095f4:	10a7883a 	add	r19,r2,r2
  8095f8:	9885883a 	add	r2,r19,r2
  8095fc:	1026d7fa 	srli	r19,r2,31
  809600:	396dc83a 	sub	r22,r7,r5
  809604:	b1000044 	addi	r4,r22,1
  809608:	9885883a 	add	r2,r19,r2
  80960c:	1027d07a 	srai	r19,r2,1
  809610:	2485883a 	add	r2,r4,r18
  809614:	980d883a 	mov	r6,r19
  809618:	9880022e 	bgeu	r19,r2,809624 <__sfvwrite_r+0x3ec>
  80961c:	1027883a 	mov	r19,r2
  809620:	100d883a 	mov	r6,r2
  809624:	18c1000c 	andi	r3,r3,1024
  809628:	18001c26 	beq	r3,zero,80969c <__sfvwrite_r+0x464>
  80962c:	300b883a 	mov	r5,r6
  809630:	a809883a 	mov	r4,r21
  809634:	0803ac40 	call	803ac4 <_malloc_r>
  809638:	102f883a 	mov	r23,r2
  80963c:	10002926 	beq	r2,zero,8096e4 <__sfvwrite_r+0x4ac>
  809640:	81400417 	ldw	r5,16(r16)
  809644:	b00d883a 	mov	r6,r22
  809648:	1009883a 	mov	r4,r2
  80964c:	0809af00 	call	809af0 <memcpy>
  809650:	8080030b 	ldhu	r2,12(r16)
  809654:	00fedfc4 	movi	r3,-1153
  809658:	10c4703a 	and	r2,r2,r3
  80965c:	10802014 	ori	r2,r2,128
  809660:	8080030d 	sth	r2,12(r16)
  809664:	bd89883a 	add	r4,r23,r22
  809668:	9d8fc83a 	sub	r7,r19,r22
  80966c:	85c00415 	stw	r23,16(r16)
  809670:	84c00515 	stw	r19,20(r16)
  809674:	81000015 	stw	r4,0(r16)
  809678:	9027883a 	mov	r19,r18
  80967c:	81c00215 	stw	r7,8(r16)
  809680:	902f883a 	mov	r23,r18
  809684:	003f3b06 	br	809374 <__alt_mem_onchip_mem+0xff789374>
  809688:	800b883a 	mov	r5,r16
  80968c:	a809883a 	mov	r4,r21
  809690:	080892c0 	call	80892c <_fflush_r>
  809694:	103fb926 	beq	r2,zero,80957c <__alt_mem_onchip_mem+0xff78957c>
  809698:	003f6506 	br	809430 <__alt_mem_onchip_mem+0xff789430>
  80969c:	a809883a 	mov	r4,r21
  8096a0:	080adf00 	call	80adf0 <_realloc_r>
  8096a4:	102f883a 	mov	r23,r2
  8096a8:	103fee1e 	bne	r2,zero,809664 <__alt_mem_onchip_mem+0xff789664>
  8096ac:	81400417 	ldw	r5,16(r16)
  8096b0:	a809883a 	mov	r4,r21
  8096b4:	0808f280 	call	808f28 <_free_r>
  8096b8:	8080030b 	ldhu	r2,12(r16)
  8096bc:	00ffdfc4 	movi	r3,-129
  8096c0:	1884703a 	and	r2,r3,r2
  8096c4:	00c00304 	movi	r3,12
  8096c8:	a8c00015 	stw	r3,0(r21)
  8096cc:	003f5906 	br	809434 <__alt_mem_onchip_mem+0xff789434>
  8096d0:	94c00044 	addi	r19,r18,1
  8096d4:	02000044 	movi	r8,1
  8096d8:	003f6006 	br	80945c <__alt_mem_onchip_mem+0xff78945c>
  8096dc:	00bfffc4 	movi	r2,-1
  8096e0:	003f0306 	br	8092f0 <__alt_mem_onchip_mem+0xff7892f0>
  8096e4:	00800304 	movi	r2,12
  8096e8:	a8800015 	stw	r2,0(r21)
  8096ec:	8080030b 	ldhu	r2,12(r16)
  8096f0:	003f5006 	br	809434 <__alt_mem_onchip_mem+0xff789434>

008096f4 <_fwalk>:
  8096f4:	defff704 	addi	sp,sp,-36
  8096f8:	dd000415 	stw	r20,16(sp)
  8096fc:	dfc00815 	stw	ra,32(sp)
  809700:	ddc00715 	stw	r23,28(sp)
  809704:	dd800615 	stw	r22,24(sp)
  809708:	dd400515 	stw	r21,20(sp)
  80970c:	dcc00315 	stw	r19,12(sp)
  809710:	dc800215 	stw	r18,8(sp)
  809714:	dc400115 	stw	r17,4(sp)
  809718:	dc000015 	stw	r16,0(sp)
  80971c:	2500b804 	addi	r20,r4,736
  809720:	a0002326 	beq	r20,zero,8097b0 <_fwalk+0xbc>
  809724:	282b883a 	mov	r21,r5
  809728:	002f883a 	mov	r23,zero
  80972c:	05800044 	movi	r22,1
  809730:	04ffffc4 	movi	r19,-1
  809734:	a4400117 	ldw	r17,4(r20)
  809738:	a4800217 	ldw	r18,8(r20)
  80973c:	8c7fffc4 	addi	r17,r17,-1
  809740:	88000d16 	blt	r17,zero,809778 <_fwalk+0x84>
  809744:	94000304 	addi	r16,r18,12
  809748:	94800384 	addi	r18,r18,14
  80974c:	8080000b 	ldhu	r2,0(r16)
  809750:	8c7fffc4 	addi	r17,r17,-1
  809754:	813ffd04 	addi	r4,r16,-12
  809758:	b080042e 	bgeu	r22,r2,80976c <_fwalk+0x78>
  80975c:	9080000f 	ldh	r2,0(r18)
  809760:	14c00226 	beq	r2,r19,80976c <_fwalk+0x78>
  809764:	a83ee83a 	callr	r21
  809768:	b8aeb03a 	or	r23,r23,r2
  80976c:	84001a04 	addi	r16,r16,104
  809770:	94801a04 	addi	r18,r18,104
  809774:	8cfff51e 	bne	r17,r19,80974c <__alt_mem_onchip_mem+0xff78974c>
  809778:	a5000017 	ldw	r20,0(r20)
  80977c:	a03fed1e 	bne	r20,zero,809734 <__alt_mem_onchip_mem+0xff789734>
  809780:	b805883a 	mov	r2,r23
  809784:	dfc00817 	ldw	ra,32(sp)
  809788:	ddc00717 	ldw	r23,28(sp)
  80978c:	dd800617 	ldw	r22,24(sp)
  809790:	dd400517 	ldw	r21,20(sp)
  809794:	dd000417 	ldw	r20,16(sp)
  809798:	dcc00317 	ldw	r19,12(sp)
  80979c:	dc800217 	ldw	r18,8(sp)
  8097a0:	dc400117 	ldw	r17,4(sp)
  8097a4:	dc000017 	ldw	r16,0(sp)
  8097a8:	dec00904 	addi	sp,sp,36
  8097ac:	f800283a 	ret
  8097b0:	002f883a 	mov	r23,zero
  8097b4:	003ff206 	br	809780 <__alt_mem_onchip_mem+0xff789780>

008097b8 <_fwalk_reent>:
  8097b8:	defff704 	addi	sp,sp,-36
  8097bc:	dd000415 	stw	r20,16(sp)
  8097c0:	dfc00815 	stw	ra,32(sp)
  8097c4:	ddc00715 	stw	r23,28(sp)
  8097c8:	dd800615 	stw	r22,24(sp)
  8097cc:	dd400515 	stw	r21,20(sp)
  8097d0:	dcc00315 	stw	r19,12(sp)
  8097d4:	dc800215 	stw	r18,8(sp)
  8097d8:	dc400115 	stw	r17,4(sp)
  8097dc:	dc000015 	stw	r16,0(sp)
  8097e0:	2500b804 	addi	r20,r4,736
  8097e4:	a0002326 	beq	r20,zero,809874 <_fwalk_reent+0xbc>
  8097e8:	282b883a 	mov	r21,r5
  8097ec:	2027883a 	mov	r19,r4
  8097f0:	002f883a 	mov	r23,zero
  8097f4:	05800044 	movi	r22,1
  8097f8:	04bfffc4 	movi	r18,-1
  8097fc:	a4400117 	ldw	r17,4(r20)
  809800:	a4000217 	ldw	r16,8(r20)
  809804:	8c7fffc4 	addi	r17,r17,-1
  809808:	88000c16 	blt	r17,zero,80983c <_fwalk_reent+0x84>
  80980c:	84000304 	addi	r16,r16,12
  809810:	8080000b 	ldhu	r2,0(r16)
  809814:	8c7fffc4 	addi	r17,r17,-1
  809818:	817ffd04 	addi	r5,r16,-12
  80981c:	b080052e 	bgeu	r22,r2,809834 <_fwalk_reent+0x7c>
  809820:	8080008f 	ldh	r2,2(r16)
  809824:	9809883a 	mov	r4,r19
  809828:	14800226 	beq	r2,r18,809834 <_fwalk_reent+0x7c>
  80982c:	a83ee83a 	callr	r21
  809830:	b8aeb03a 	or	r23,r23,r2
  809834:	84001a04 	addi	r16,r16,104
  809838:	8cbff51e 	bne	r17,r18,809810 <__alt_mem_onchip_mem+0xff789810>
  80983c:	a5000017 	ldw	r20,0(r20)
  809840:	a03fee1e 	bne	r20,zero,8097fc <__alt_mem_onchip_mem+0xff7897fc>
  809844:	b805883a 	mov	r2,r23
  809848:	dfc00817 	ldw	ra,32(sp)
  80984c:	ddc00717 	ldw	r23,28(sp)
  809850:	dd800617 	ldw	r22,24(sp)
  809854:	dd400517 	ldw	r21,20(sp)
  809858:	dd000417 	ldw	r20,16(sp)
  80985c:	dcc00317 	ldw	r19,12(sp)
  809860:	dc800217 	ldw	r18,8(sp)
  809864:	dc400117 	ldw	r17,4(sp)
  809868:	dc000017 	ldw	r16,0(sp)
  80986c:	dec00904 	addi	sp,sp,36
  809870:	f800283a 	ret
  809874:	002f883a 	mov	r23,zero
  809878:	003ff206 	br	809844 <__alt_mem_onchip_mem+0xff789844>

0080987c <_isatty_r>:
  80987c:	defffd04 	addi	sp,sp,-12
  809880:	dc000015 	stw	r16,0(sp)
  809884:	040020b4 	movhi	r16,130
  809888:	dc400115 	stw	r17,4(sp)
  80988c:	84221504 	addi	r16,r16,-30636
  809890:	2023883a 	mov	r17,r4
  809894:	2809883a 	mov	r4,r5
  809898:	dfc00215 	stw	ra,8(sp)
  80989c:	80000015 	stw	zero,0(r16)
  8098a0:	08108540 	call	810854 <isatty>
  8098a4:	00ffffc4 	movi	r3,-1
  8098a8:	10c00526 	beq	r2,r3,8098c0 <_isatty_r+0x44>
  8098ac:	dfc00217 	ldw	ra,8(sp)
  8098b0:	dc400117 	ldw	r17,4(sp)
  8098b4:	dc000017 	ldw	r16,0(sp)
  8098b8:	dec00304 	addi	sp,sp,12
  8098bc:	f800283a 	ret
  8098c0:	80c00017 	ldw	r3,0(r16)
  8098c4:	183ff926 	beq	r3,zero,8098ac <__alt_mem_onchip_mem+0xff7898ac>
  8098c8:	88c00015 	stw	r3,0(r17)
  8098cc:	003ff706 	br	8098ac <__alt_mem_onchip_mem+0xff7898ac>

008098d0 <_setlocale_r>:
  8098d0:	30001b26 	beq	r6,zero,809940 <_setlocale_r+0x70>
  8098d4:	01402074 	movhi	r5,129
  8098d8:	defffe04 	addi	sp,sp,-8
  8098dc:	29520404 	addi	r5,r5,18448
  8098e0:	3009883a 	mov	r4,r6
  8098e4:	dc000015 	stw	r16,0(sp)
  8098e8:	dfc00115 	stw	ra,4(sp)
  8098ec:	3021883a 	mov	r16,r6
  8098f0:	080b3c80 	call	80b3c8 <strcmp>
  8098f4:	1000061e 	bne	r2,zero,809910 <_setlocale_r+0x40>
  8098f8:	00802074 	movhi	r2,129
  8098fc:	1091e504 	addi	r2,r2,18324
  809900:	dfc00117 	ldw	ra,4(sp)
  809904:	dc000017 	ldw	r16,0(sp)
  809908:	dec00204 	addi	sp,sp,8
  80990c:	f800283a 	ret
  809910:	01402074 	movhi	r5,129
  809914:	2951e504 	addi	r5,r5,18324
  809918:	8009883a 	mov	r4,r16
  80991c:	080b3c80 	call	80b3c8 <strcmp>
  809920:	103ff526 	beq	r2,zero,8098f8 <__alt_mem_onchip_mem+0xff7898f8>
  809924:	01402074 	movhi	r5,129
  809928:	2951ef04 	addi	r5,r5,18364
  80992c:	8009883a 	mov	r4,r16
  809930:	080b3c80 	call	80b3c8 <strcmp>
  809934:	103ff026 	beq	r2,zero,8098f8 <__alt_mem_onchip_mem+0xff7898f8>
  809938:	0005883a 	mov	r2,zero
  80993c:	003ff006 	br	809900 <__alt_mem_onchip_mem+0xff789900>
  809940:	00802074 	movhi	r2,129
  809944:	1091e504 	addi	r2,r2,18324
  809948:	f800283a 	ret

0080994c <__locale_charset>:
  80994c:	00802074 	movhi	r2,129
  809950:	10955c04 	addi	r2,r2,21872
  809954:	f800283a 	ret

00809958 <__locale_mb_cur_max>:
  809958:	00802074 	movhi	r2,129
  80995c:	109a7104 	addi	r2,r2,27076
  809960:	10800017 	ldw	r2,0(r2)
  809964:	f800283a 	ret

00809968 <__locale_msgcharset>:
  809968:	00802074 	movhi	r2,129
  80996c:	10955404 	addi	r2,r2,21840
  809970:	f800283a 	ret

00809974 <__locale_cjk_lang>:
  809974:	0005883a 	mov	r2,zero
  809978:	f800283a 	ret

0080997c <_localeconv_r>:
  80997c:	00802074 	movhi	r2,129
  809980:	10956404 	addi	r2,r2,21904
  809984:	f800283a 	ret

00809988 <setlocale>:
  809988:	00802074 	movhi	r2,129
  80998c:	109a6e04 	addi	r2,r2,27064
  809990:	280d883a 	mov	r6,r5
  809994:	200b883a 	mov	r5,r4
  809998:	11000017 	ldw	r4,0(r2)
  80999c:	08098d01 	jmpi	8098d0 <_setlocale_r>

008099a0 <localeconv>:
  8099a0:	00802074 	movhi	r2,129
  8099a4:	10956404 	addi	r2,r2,21904
  8099a8:	f800283a 	ret

008099ac <_lseek_r>:
  8099ac:	defffd04 	addi	sp,sp,-12
  8099b0:	2805883a 	mov	r2,r5
  8099b4:	dc000015 	stw	r16,0(sp)
  8099b8:	040020b4 	movhi	r16,130
  8099bc:	dc400115 	stw	r17,4(sp)
  8099c0:	300b883a 	mov	r5,r6
  8099c4:	84221504 	addi	r16,r16,-30636
  8099c8:	2023883a 	mov	r17,r4
  8099cc:	380d883a 	mov	r6,r7
  8099d0:	1009883a 	mov	r4,r2
  8099d4:	dfc00215 	stw	ra,8(sp)
  8099d8:	80000015 	stw	zero,0(r16)
  8099dc:	0810a200 	call	810a20 <lseek>
  8099e0:	00ffffc4 	movi	r3,-1
  8099e4:	10c00526 	beq	r2,r3,8099fc <_lseek_r+0x50>
  8099e8:	dfc00217 	ldw	ra,8(sp)
  8099ec:	dc400117 	ldw	r17,4(sp)
  8099f0:	dc000017 	ldw	r16,0(sp)
  8099f4:	dec00304 	addi	sp,sp,12
  8099f8:	f800283a 	ret
  8099fc:	80c00017 	ldw	r3,0(r16)
  809a00:	183ff926 	beq	r3,zero,8099e8 <__alt_mem_onchip_mem+0xff7899e8>
  809a04:	88c00015 	stw	r3,0(r17)
  809a08:	003ff706 	br	8099e8 <__alt_mem_onchip_mem+0xff7899e8>

00809a0c <memchr>:
  809a0c:	208000cc 	andi	r2,r4,3
  809a10:	280f883a 	mov	r7,r5
  809a14:	10003426 	beq	r2,zero,809ae8 <memchr+0xdc>
  809a18:	30bfffc4 	addi	r2,r6,-1
  809a1c:	30001a26 	beq	r6,zero,809a88 <memchr+0x7c>
  809a20:	20c00003 	ldbu	r3,0(r4)
  809a24:	29803fcc 	andi	r6,r5,255
  809a28:	30c0051e 	bne	r6,r3,809a40 <memchr+0x34>
  809a2c:	00001806 	br	809a90 <memchr+0x84>
  809a30:	10001526 	beq	r2,zero,809a88 <memchr+0x7c>
  809a34:	20c00003 	ldbu	r3,0(r4)
  809a38:	10bfffc4 	addi	r2,r2,-1
  809a3c:	30c01426 	beq	r6,r3,809a90 <memchr+0x84>
  809a40:	21000044 	addi	r4,r4,1
  809a44:	20c000cc 	andi	r3,r4,3
  809a48:	183ff91e 	bne	r3,zero,809a30 <__alt_mem_onchip_mem+0xff789a30>
  809a4c:	020000c4 	movi	r8,3
  809a50:	40801136 	bltu	r8,r2,809a98 <memchr+0x8c>
  809a54:	10000c26 	beq	r2,zero,809a88 <memchr+0x7c>
  809a58:	20c00003 	ldbu	r3,0(r4)
  809a5c:	29403fcc 	andi	r5,r5,255
  809a60:	28c00b26 	beq	r5,r3,809a90 <memchr+0x84>
  809a64:	20c00044 	addi	r3,r4,1
  809a68:	39803fcc 	andi	r6,r7,255
  809a6c:	2089883a 	add	r4,r4,r2
  809a70:	00000306 	br	809a80 <memchr+0x74>
  809a74:	18c00044 	addi	r3,r3,1
  809a78:	197fffc3 	ldbu	r5,-1(r3)
  809a7c:	31400526 	beq	r6,r5,809a94 <memchr+0x88>
  809a80:	1805883a 	mov	r2,r3
  809a84:	20fffb1e 	bne	r4,r3,809a74 <__alt_mem_onchip_mem+0xff789a74>
  809a88:	0005883a 	mov	r2,zero
  809a8c:	f800283a 	ret
  809a90:	2005883a 	mov	r2,r4
  809a94:	f800283a 	ret
  809a98:	28c03fcc 	andi	r3,r5,255
  809a9c:	1812923a 	slli	r9,r3,8
  809aa0:	02ffbff4 	movhi	r11,65279
  809aa4:	02a02074 	movhi	r10,32897
  809aa8:	48d2b03a 	or	r9,r9,r3
  809aac:	4806943a 	slli	r3,r9,16
  809ab0:	5affbfc4 	addi	r11,r11,-257
  809ab4:	52a02004 	addi	r10,r10,-32640
  809ab8:	48d2b03a 	or	r9,r9,r3
  809abc:	20c00017 	ldw	r3,0(r4)
  809ac0:	48c6f03a 	xor	r3,r9,r3
  809ac4:	1acd883a 	add	r6,r3,r11
  809ac8:	00c6303a 	nor	r3,zero,r3
  809acc:	30c6703a 	and	r3,r6,r3
  809ad0:	1a86703a 	and	r3,r3,r10
  809ad4:	183fe01e 	bne	r3,zero,809a58 <__alt_mem_onchip_mem+0xff789a58>
  809ad8:	10bfff04 	addi	r2,r2,-4
  809adc:	21000104 	addi	r4,r4,4
  809ae0:	40bff636 	bltu	r8,r2,809abc <__alt_mem_onchip_mem+0xff789abc>
  809ae4:	003fdb06 	br	809a54 <__alt_mem_onchip_mem+0xff789a54>
  809ae8:	3005883a 	mov	r2,r6
  809aec:	003fd706 	br	809a4c <__alt_mem_onchip_mem+0xff789a4c>

00809af0 <memcpy>:
  809af0:	defffd04 	addi	sp,sp,-12
  809af4:	dfc00215 	stw	ra,8(sp)
  809af8:	dc400115 	stw	r17,4(sp)
  809afc:	dc000015 	stw	r16,0(sp)
  809b00:	00c003c4 	movi	r3,15
  809b04:	2005883a 	mov	r2,r4
  809b08:	1980452e 	bgeu	r3,r6,809c20 <memcpy+0x130>
  809b0c:	2906b03a 	or	r3,r5,r4
  809b10:	18c000cc 	andi	r3,r3,3
  809b14:	1800441e 	bne	r3,zero,809c28 <memcpy+0x138>
  809b18:	347ffc04 	addi	r17,r6,-16
  809b1c:	8822d13a 	srli	r17,r17,4
  809b20:	28c00104 	addi	r3,r5,4
  809b24:	23400104 	addi	r13,r4,4
  809b28:	8820913a 	slli	r16,r17,4
  809b2c:	2b000204 	addi	r12,r5,8
  809b30:	22c00204 	addi	r11,r4,8
  809b34:	84000504 	addi	r16,r16,20
  809b38:	2a800304 	addi	r10,r5,12
  809b3c:	22400304 	addi	r9,r4,12
  809b40:	2c21883a 	add	r16,r5,r16
  809b44:	2811883a 	mov	r8,r5
  809b48:	200f883a 	mov	r7,r4
  809b4c:	41000017 	ldw	r4,0(r8)
  809b50:	1fc00017 	ldw	ra,0(r3)
  809b54:	63c00017 	ldw	r15,0(r12)
  809b58:	39000015 	stw	r4,0(r7)
  809b5c:	53800017 	ldw	r14,0(r10)
  809b60:	6fc00015 	stw	ra,0(r13)
  809b64:	5bc00015 	stw	r15,0(r11)
  809b68:	4b800015 	stw	r14,0(r9)
  809b6c:	18c00404 	addi	r3,r3,16
  809b70:	39c00404 	addi	r7,r7,16
  809b74:	42000404 	addi	r8,r8,16
  809b78:	6b400404 	addi	r13,r13,16
  809b7c:	63000404 	addi	r12,r12,16
  809b80:	5ac00404 	addi	r11,r11,16
  809b84:	52800404 	addi	r10,r10,16
  809b88:	4a400404 	addi	r9,r9,16
  809b8c:	1c3fef1e 	bne	r3,r16,809b4c <__alt_mem_onchip_mem+0xff789b4c>
  809b90:	89c00044 	addi	r7,r17,1
  809b94:	380e913a 	slli	r7,r7,4
  809b98:	310003cc 	andi	r4,r6,15
  809b9c:	02c000c4 	movi	r11,3
  809ba0:	11c7883a 	add	r3,r2,r7
  809ba4:	29cb883a 	add	r5,r5,r7
  809ba8:	5900212e 	bgeu	r11,r4,809c30 <memcpy+0x140>
  809bac:	1813883a 	mov	r9,r3
  809bb0:	2811883a 	mov	r8,r5
  809bb4:	200f883a 	mov	r7,r4
  809bb8:	42800017 	ldw	r10,0(r8)
  809bbc:	4a400104 	addi	r9,r9,4
  809bc0:	39ffff04 	addi	r7,r7,-4
  809bc4:	4abfff15 	stw	r10,-4(r9)
  809bc8:	42000104 	addi	r8,r8,4
  809bcc:	59fffa36 	bltu	r11,r7,809bb8 <__alt_mem_onchip_mem+0xff789bb8>
  809bd0:	213fff04 	addi	r4,r4,-4
  809bd4:	2008d0ba 	srli	r4,r4,2
  809bd8:	318000cc 	andi	r6,r6,3
  809bdc:	21000044 	addi	r4,r4,1
  809be0:	2109883a 	add	r4,r4,r4
  809be4:	2109883a 	add	r4,r4,r4
  809be8:	1907883a 	add	r3,r3,r4
  809bec:	290b883a 	add	r5,r5,r4
  809bf0:	30000626 	beq	r6,zero,809c0c <memcpy+0x11c>
  809bf4:	198d883a 	add	r6,r3,r6
  809bf8:	29c00003 	ldbu	r7,0(r5)
  809bfc:	18c00044 	addi	r3,r3,1
  809c00:	29400044 	addi	r5,r5,1
  809c04:	19ffffc5 	stb	r7,-1(r3)
  809c08:	19bffb1e 	bne	r3,r6,809bf8 <__alt_mem_onchip_mem+0xff789bf8>
  809c0c:	dfc00217 	ldw	ra,8(sp)
  809c10:	dc400117 	ldw	r17,4(sp)
  809c14:	dc000017 	ldw	r16,0(sp)
  809c18:	dec00304 	addi	sp,sp,12
  809c1c:	f800283a 	ret
  809c20:	2007883a 	mov	r3,r4
  809c24:	003ff206 	br	809bf0 <__alt_mem_onchip_mem+0xff789bf0>
  809c28:	2007883a 	mov	r3,r4
  809c2c:	003ff106 	br	809bf4 <__alt_mem_onchip_mem+0xff789bf4>
  809c30:	200d883a 	mov	r6,r4
  809c34:	003fee06 	br	809bf0 <__alt_mem_onchip_mem+0xff789bf0>

00809c38 <memmove>:
  809c38:	2005883a 	mov	r2,r4
  809c3c:	29000b2e 	bgeu	r5,r4,809c6c <memmove+0x34>
  809c40:	298f883a 	add	r7,r5,r6
  809c44:	21c0092e 	bgeu	r4,r7,809c6c <memmove+0x34>
  809c48:	2187883a 	add	r3,r4,r6
  809c4c:	198bc83a 	sub	r5,r3,r6
  809c50:	30004826 	beq	r6,zero,809d74 <memmove+0x13c>
  809c54:	39ffffc4 	addi	r7,r7,-1
  809c58:	39000003 	ldbu	r4,0(r7)
  809c5c:	18ffffc4 	addi	r3,r3,-1
  809c60:	19000005 	stb	r4,0(r3)
  809c64:	28fffb1e 	bne	r5,r3,809c54 <__alt_mem_onchip_mem+0xff789c54>
  809c68:	f800283a 	ret
  809c6c:	00c003c4 	movi	r3,15
  809c70:	1980412e 	bgeu	r3,r6,809d78 <memmove+0x140>
  809c74:	2886b03a 	or	r3,r5,r2
  809c78:	18c000cc 	andi	r3,r3,3
  809c7c:	1800401e 	bne	r3,zero,809d80 <memmove+0x148>
  809c80:	33fffc04 	addi	r15,r6,-16
  809c84:	781ed13a 	srli	r15,r15,4
  809c88:	28c00104 	addi	r3,r5,4
  809c8c:	13400104 	addi	r13,r2,4
  809c90:	781c913a 	slli	r14,r15,4
  809c94:	2b000204 	addi	r12,r5,8
  809c98:	12c00204 	addi	r11,r2,8
  809c9c:	73800504 	addi	r14,r14,20
  809ca0:	2a800304 	addi	r10,r5,12
  809ca4:	12400304 	addi	r9,r2,12
  809ca8:	2b9d883a 	add	r14,r5,r14
  809cac:	2811883a 	mov	r8,r5
  809cb0:	100f883a 	mov	r7,r2
  809cb4:	41000017 	ldw	r4,0(r8)
  809cb8:	39c00404 	addi	r7,r7,16
  809cbc:	18c00404 	addi	r3,r3,16
  809cc0:	393ffc15 	stw	r4,-16(r7)
  809cc4:	193ffc17 	ldw	r4,-16(r3)
  809cc8:	6b400404 	addi	r13,r13,16
  809ccc:	5ac00404 	addi	r11,r11,16
  809cd0:	693ffc15 	stw	r4,-16(r13)
  809cd4:	61000017 	ldw	r4,0(r12)
  809cd8:	4a400404 	addi	r9,r9,16
  809cdc:	42000404 	addi	r8,r8,16
  809ce0:	593ffc15 	stw	r4,-16(r11)
  809ce4:	51000017 	ldw	r4,0(r10)
  809ce8:	63000404 	addi	r12,r12,16
  809cec:	52800404 	addi	r10,r10,16
  809cf0:	493ffc15 	stw	r4,-16(r9)
  809cf4:	1bbfef1e 	bne	r3,r14,809cb4 <__alt_mem_onchip_mem+0xff789cb4>
  809cf8:	79000044 	addi	r4,r15,1
  809cfc:	2008913a 	slli	r4,r4,4
  809d00:	328003cc 	andi	r10,r6,15
  809d04:	02c000c4 	movi	r11,3
  809d08:	1107883a 	add	r3,r2,r4
  809d0c:	290b883a 	add	r5,r5,r4
  809d10:	5a801e2e 	bgeu	r11,r10,809d8c <memmove+0x154>
  809d14:	1813883a 	mov	r9,r3
  809d18:	2811883a 	mov	r8,r5
  809d1c:	500f883a 	mov	r7,r10
  809d20:	41000017 	ldw	r4,0(r8)
  809d24:	4a400104 	addi	r9,r9,4
  809d28:	39ffff04 	addi	r7,r7,-4
  809d2c:	493fff15 	stw	r4,-4(r9)
  809d30:	42000104 	addi	r8,r8,4
  809d34:	59fffa36 	bltu	r11,r7,809d20 <__alt_mem_onchip_mem+0xff789d20>
  809d38:	513fff04 	addi	r4,r10,-4
  809d3c:	2008d0ba 	srli	r4,r4,2
  809d40:	318000cc 	andi	r6,r6,3
  809d44:	21000044 	addi	r4,r4,1
  809d48:	2109883a 	add	r4,r4,r4
  809d4c:	2109883a 	add	r4,r4,r4
  809d50:	1907883a 	add	r3,r3,r4
  809d54:	290b883a 	add	r5,r5,r4
  809d58:	30000b26 	beq	r6,zero,809d88 <memmove+0x150>
  809d5c:	198d883a 	add	r6,r3,r6
  809d60:	29c00003 	ldbu	r7,0(r5)
  809d64:	18c00044 	addi	r3,r3,1
  809d68:	29400044 	addi	r5,r5,1
  809d6c:	19ffffc5 	stb	r7,-1(r3)
  809d70:	19bffb1e 	bne	r3,r6,809d60 <__alt_mem_onchip_mem+0xff789d60>
  809d74:	f800283a 	ret
  809d78:	1007883a 	mov	r3,r2
  809d7c:	003ff606 	br	809d58 <__alt_mem_onchip_mem+0xff789d58>
  809d80:	1007883a 	mov	r3,r2
  809d84:	003ff506 	br	809d5c <__alt_mem_onchip_mem+0xff789d5c>
  809d88:	f800283a 	ret
  809d8c:	500d883a 	mov	r6,r10
  809d90:	003ff106 	br	809d58 <__alt_mem_onchip_mem+0xff789d58>

00809d94 <_Balloc>:
  809d94:	20801317 	ldw	r2,76(r4)
  809d98:	defffc04 	addi	sp,sp,-16
  809d9c:	dc400115 	stw	r17,4(sp)
  809da0:	dc000015 	stw	r16,0(sp)
  809da4:	dfc00315 	stw	ra,12(sp)
  809da8:	dc800215 	stw	r18,8(sp)
  809dac:	2023883a 	mov	r17,r4
  809db0:	2821883a 	mov	r16,r5
  809db4:	10000f26 	beq	r2,zero,809df4 <_Balloc+0x60>
  809db8:	8407883a 	add	r3,r16,r16
  809dbc:	18c7883a 	add	r3,r3,r3
  809dc0:	10c7883a 	add	r3,r2,r3
  809dc4:	18800017 	ldw	r2,0(r3)
  809dc8:	10001126 	beq	r2,zero,809e10 <_Balloc+0x7c>
  809dcc:	11000017 	ldw	r4,0(r2)
  809dd0:	19000015 	stw	r4,0(r3)
  809dd4:	10000415 	stw	zero,16(r2)
  809dd8:	10000315 	stw	zero,12(r2)
  809ddc:	dfc00317 	ldw	ra,12(sp)
  809de0:	dc800217 	ldw	r18,8(sp)
  809de4:	dc400117 	ldw	r17,4(sp)
  809de8:	dc000017 	ldw	r16,0(sp)
  809dec:	dec00404 	addi	sp,sp,16
  809df0:	f800283a 	ret
  809df4:	01800844 	movi	r6,33
  809df8:	01400104 	movi	r5,4
  809dfc:	080caec0 	call	80caec <_calloc_r>
  809e00:	88801315 	stw	r2,76(r17)
  809e04:	103fec1e 	bne	r2,zero,809db8 <__alt_mem_onchip_mem+0xff789db8>
  809e08:	0005883a 	mov	r2,zero
  809e0c:	003ff306 	br	809ddc <__alt_mem_onchip_mem+0xff789ddc>
  809e10:	01400044 	movi	r5,1
  809e14:	2c24983a 	sll	r18,r5,r16
  809e18:	8809883a 	mov	r4,r17
  809e1c:	91800144 	addi	r6,r18,5
  809e20:	318d883a 	add	r6,r6,r6
  809e24:	318d883a 	add	r6,r6,r6
  809e28:	080caec0 	call	80caec <_calloc_r>
  809e2c:	103ff626 	beq	r2,zero,809e08 <__alt_mem_onchip_mem+0xff789e08>
  809e30:	14000115 	stw	r16,4(r2)
  809e34:	14800215 	stw	r18,8(r2)
  809e38:	003fe606 	br	809dd4 <__alt_mem_onchip_mem+0xff789dd4>

00809e3c <_Bfree>:
  809e3c:	28000826 	beq	r5,zero,809e60 <_Bfree+0x24>
  809e40:	28c00117 	ldw	r3,4(r5)
  809e44:	20801317 	ldw	r2,76(r4)
  809e48:	18c7883a 	add	r3,r3,r3
  809e4c:	18c7883a 	add	r3,r3,r3
  809e50:	10c5883a 	add	r2,r2,r3
  809e54:	10c00017 	ldw	r3,0(r2)
  809e58:	28c00015 	stw	r3,0(r5)
  809e5c:	11400015 	stw	r5,0(r2)
  809e60:	f800283a 	ret

00809e64 <__multadd>:
  809e64:	defffa04 	addi	sp,sp,-24
  809e68:	dc800315 	stw	r18,12(sp)
  809e6c:	dc400215 	stw	r17,8(sp)
  809e70:	dc000115 	stw	r16,4(sp)
  809e74:	2823883a 	mov	r17,r5
  809e78:	2c000417 	ldw	r16,16(r5)
  809e7c:	dfc00515 	stw	ra,20(sp)
  809e80:	dcc00415 	stw	r19,16(sp)
  809e84:	2025883a 	mov	r18,r4
  809e88:	29400504 	addi	r5,r5,20
  809e8c:	0011883a 	mov	r8,zero
  809e90:	28c00017 	ldw	r3,0(r5)
  809e94:	29400104 	addi	r5,r5,4
  809e98:	42000044 	addi	r8,r8,1
  809e9c:	18bfffcc 	andi	r2,r3,65535
  809ea0:	1185383a 	mul	r2,r2,r6
  809ea4:	1806d43a 	srli	r3,r3,16
  809ea8:	11cf883a 	add	r7,r2,r7
  809eac:	3808d43a 	srli	r4,r7,16
  809eb0:	1987383a 	mul	r3,r3,r6
  809eb4:	38bfffcc 	andi	r2,r7,65535
  809eb8:	1907883a 	add	r3,r3,r4
  809ebc:	1808943a 	slli	r4,r3,16
  809ec0:	180ed43a 	srli	r7,r3,16
  809ec4:	2085883a 	add	r2,r4,r2
  809ec8:	28bfff15 	stw	r2,-4(r5)
  809ecc:	443ff016 	blt	r8,r16,809e90 <__alt_mem_onchip_mem+0xff789e90>
  809ed0:	38000926 	beq	r7,zero,809ef8 <__multadd+0x94>
  809ed4:	88800217 	ldw	r2,8(r17)
  809ed8:	80800f0e 	bge	r16,r2,809f18 <__multadd+0xb4>
  809edc:	80800144 	addi	r2,r16,5
  809ee0:	1085883a 	add	r2,r2,r2
  809ee4:	1085883a 	add	r2,r2,r2
  809ee8:	8885883a 	add	r2,r17,r2
  809eec:	11c00015 	stw	r7,0(r2)
  809ef0:	84000044 	addi	r16,r16,1
  809ef4:	8c000415 	stw	r16,16(r17)
  809ef8:	8805883a 	mov	r2,r17
  809efc:	dfc00517 	ldw	ra,20(sp)
  809f00:	dcc00417 	ldw	r19,16(sp)
  809f04:	dc800317 	ldw	r18,12(sp)
  809f08:	dc400217 	ldw	r17,8(sp)
  809f0c:	dc000117 	ldw	r16,4(sp)
  809f10:	dec00604 	addi	sp,sp,24
  809f14:	f800283a 	ret
  809f18:	89400117 	ldw	r5,4(r17)
  809f1c:	9009883a 	mov	r4,r18
  809f20:	d9c00015 	stw	r7,0(sp)
  809f24:	29400044 	addi	r5,r5,1
  809f28:	0809d940 	call	809d94 <_Balloc>
  809f2c:	89800417 	ldw	r6,16(r17)
  809f30:	89400304 	addi	r5,r17,12
  809f34:	11000304 	addi	r4,r2,12
  809f38:	31800084 	addi	r6,r6,2
  809f3c:	318d883a 	add	r6,r6,r6
  809f40:	318d883a 	add	r6,r6,r6
  809f44:	1027883a 	mov	r19,r2
  809f48:	0809af00 	call	809af0 <memcpy>
  809f4c:	d9c00017 	ldw	r7,0(sp)
  809f50:	88000a26 	beq	r17,zero,809f7c <__multadd+0x118>
  809f54:	88c00117 	ldw	r3,4(r17)
  809f58:	90801317 	ldw	r2,76(r18)
  809f5c:	18c7883a 	add	r3,r3,r3
  809f60:	18c7883a 	add	r3,r3,r3
  809f64:	10c5883a 	add	r2,r2,r3
  809f68:	10c00017 	ldw	r3,0(r2)
  809f6c:	88c00015 	stw	r3,0(r17)
  809f70:	14400015 	stw	r17,0(r2)
  809f74:	9823883a 	mov	r17,r19
  809f78:	003fd806 	br	809edc <__alt_mem_onchip_mem+0xff789edc>
  809f7c:	9823883a 	mov	r17,r19
  809f80:	003fd606 	br	809edc <__alt_mem_onchip_mem+0xff789edc>

00809f84 <__s2b>:
  809f84:	defff904 	addi	sp,sp,-28
  809f88:	dc400115 	stw	r17,4(sp)
  809f8c:	dc000015 	stw	r16,0(sp)
  809f90:	2023883a 	mov	r17,r4
  809f94:	2821883a 	mov	r16,r5
  809f98:	39000204 	addi	r4,r7,8
  809f9c:	01400244 	movi	r5,9
  809fa0:	dcc00315 	stw	r19,12(sp)
  809fa4:	dc800215 	stw	r18,8(sp)
  809fa8:	dfc00615 	stw	ra,24(sp)
  809fac:	dd400515 	stw	r21,20(sp)
  809fb0:	dd000415 	stw	r20,16(sp)
  809fb4:	3825883a 	mov	r18,r7
  809fb8:	3027883a 	mov	r19,r6
  809fbc:	080dcac0 	call	80dcac <__divsi3>
  809fc0:	00c00044 	movi	r3,1
  809fc4:	000b883a 	mov	r5,zero
  809fc8:	1880030e 	bge	r3,r2,809fd8 <__s2b+0x54>
  809fcc:	18c7883a 	add	r3,r3,r3
  809fd0:	29400044 	addi	r5,r5,1
  809fd4:	18bffd16 	blt	r3,r2,809fcc <__alt_mem_onchip_mem+0xff789fcc>
  809fd8:	8809883a 	mov	r4,r17
  809fdc:	0809d940 	call	809d94 <_Balloc>
  809fe0:	d8c00717 	ldw	r3,28(sp)
  809fe4:	10c00515 	stw	r3,20(r2)
  809fe8:	00c00044 	movi	r3,1
  809fec:	10c00415 	stw	r3,16(r2)
  809ff0:	00c00244 	movi	r3,9
  809ff4:	1cc0210e 	bge	r3,r19,80a07c <__s2b+0xf8>
  809ff8:	80eb883a 	add	r21,r16,r3
  809ffc:	a829883a 	mov	r20,r21
  80a000:	84e1883a 	add	r16,r16,r19
  80a004:	a1c00007 	ldb	r7,0(r20)
  80a008:	01800284 	movi	r6,10
  80a00c:	a5000044 	addi	r20,r20,1
  80a010:	100b883a 	mov	r5,r2
  80a014:	39fff404 	addi	r7,r7,-48
  80a018:	8809883a 	mov	r4,r17
  80a01c:	0809e640 	call	809e64 <__multadd>
  80a020:	a43ff81e 	bne	r20,r16,80a004 <__alt_mem_onchip_mem+0xff78a004>
  80a024:	ace1883a 	add	r16,r21,r19
  80a028:	843ffe04 	addi	r16,r16,-8
  80a02c:	9c800a0e 	bge	r19,r18,80a058 <__s2b+0xd4>
  80a030:	94e5c83a 	sub	r18,r18,r19
  80a034:	84a5883a 	add	r18,r16,r18
  80a038:	81c00007 	ldb	r7,0(r16)
  80a03c:	01800284 	movi	r6,10
  80a040:	84000044 	addi	r16,r16,1
  80a044:	100b883a 	mov	r5,r2
  80a048:	39fff404 	addi	r7,r7,-48
  80a04c:	8809883a 	mov	r4,r17
  80a050:	0809e640 	call	809e64 <__multadd>
  80a054:	84bff81e 	bne	r16,r18,80a038 <__alt_mem_onchip_mem+0xff78a038>
  80a058:	dfc00617 	ldw	ra,24(sp)
  80a05c:	dd400517 	ldw	r21,20(sp)
  80a060:	dd000417 	ldw	r20,16(sp)
  80a064:	dcc00317 	ldw	r19,12(sp)
  80a068:	dc800217 	ldw	r18,8(sp)
  80a06c:	dc400117 	ldw	r17,4(sp)
  80a070:	dc000017 	ldw	r16,0(sp)
  80a074:	dec00704 	addi	sp,sp,28
  80a078:	f800283a 	ret
  80a07c:	84000284 	addi	r16,r16,10
  80a080:	1827883a 	mov	r19,r3
  80a084:	003fe906 	br	80a02c <__alt_mem_onchip_mem+0xff78a02c>

0080a088 <__hi0bits>:
  80a088:	20bfffec 	andhi	r2,r4,65535
  80a08c:	1000141e 	bne	r2,zero,80a0e0 <__hi0bits+0x58>
  80a090:	2008943a 	slli	r4,r4,16
  80a094:	00800404 	movi	r2,16
  80a098:	20ffc02c 	andhi	r3,r4,65280
  80a09c:	1800021e 	bne	r3,zero,80a0a8 <__hi0bits+0x20>
  80a0a0:	2008923a 	slli	r4,r4,8
  80a0a4:	10800204 	addi	r2,r2,8
  80a0a8:	20fc002c 	andhi	r3,r4,61440
  80a0ac:	1800021e 	bne	r3,zero,80a0b8 <__hi0bits+0x30>
  80a0b0:	2008913a 	slli	r4,r4,4
  80a0b4:	10800104 	addi	r2,r2,4
  80a0b8:	20f0002c 	andhi	r3,r4,49152
  80a0bc:	1800031e 	bne	r3,zero,80a0cc <__hi0bits+0x44>
  80a0c0:	2109883a 	add	r4,r4,r4
  80a0c4:	10800084 	addi	r2,r2,2
  80a0c8:	2109883a 	add	r4,r4,r4
  80a0cc:	20000316 	blt	r4,zero,80a0dc <__hi0bits+0x54>
  80a0d0:	2110002c 	andhi	r4,r4,16384
  80a0d4:	2000041e 	bne	r4,zero,80a0e8 <__hi0bits+0x60>
  80a0d8:	00800804 	movi	r2,32
  80a0dc:	f800283a 	ret
  80a0e0:	0005883a 	mov	r2,zero
  80a0e4:	003fec06 	br	80a098 <__alt_mem_onchip_mem+0xff78a098>
  80a0e8:	10800044 	addi	r2,r2,1
  80a0ec:	f800283a 	ret

0080a0f0 <__lo0bits>:
  80a0f0:	20c00017 	ldw	r3,0(r4)
  80a0f4:	188001cc 	andi	r2,r3,7
  80a0f8:	10000826 	beq	r2,zero,80a11c <__lo0bits+0x2c>
  80a0fc:	1880004c 	andi	r2,r3,1
  80a100:	1000211e 	bne	r2,zero,80a188 <__lo0bits+0x98>
  80a104:	1880008c 	andi	r2,r3,2
  80a108:	1000211e 	bne	r2,zero,80a190 <__lo0bits+0xa0>
  80a10c:	1806d0ba 	srli	r3,r3,2
  80a110:	00800084 	movi	r2,2
  80a114:	20c00015 	stw	r3,0(r4)
  80a118:	f800283a 	ret
  80a11c:	18bfffcc 	andi	r2,r3,65535
  80a120:	10001326 	beq	r2,zero,80a170 <__lo0bits+0x80>
  80a124:	0005883a 	mov	r2,zero
  80a128:	19403fcc 	andi	r5,r3,255
  80a12c:	2800021e 	bne	r5,zero,80a138 <__lo0bits+0x48>
  80a130:	1806d23a 	srli	r3,r3,8
  80a134:	10800204 	addi	r2,r2,8
  80a138:	194003cc 	andi	r5,r3,15
  80a13c:	2800021e 	bne	r5,zero,80a148 <__lo0bits+0x58>
  80a140:	1806d13a 	srli	r3,r3,4
  80a144:	10800104 	addi	r2,r2,4
  80a148:	194000cc 	andi	r5,r3,3
  80a14c:	2800021e 	bne	r5,zero,80a158 <__lo0bits+0x68>
  80a150:	1806d0ba 	srli	r3,r3,2
  80a154:	10800084 	addi	r2,r2,2
  80a158:	1940004c 	andi	r5,r3,1
  80a15c:	2800081e 	bne	r5,zero,80a180 <__lo0bits+0x90>
  80a160:	1806d07a 	srli	r3,r3,1
  80a164:	1800051e 	bne	r3,zero,80a17c <__lo0bits+0x8c>
  80a168:	00800804 	movi	r2,32
  80a16c:	f800283a 	ret
  80a170:	1806d43a 	srli	r3,r3,16
  80a174:	00800404 	movi	r2,16
  80a178:	003feb06 	br	80a128 <__alt_mem_onchip_mem+0xff78a128>
  80a17c:	10800044 	addi	r2,r2,1
  80a180:	20c00015 	stw	r3,0(r4)
  80a184:	f800283a 	ret
  80a188:	0005883a 	mov	r2,zero
  80a18c:	f800283a 	ret
  80a190:	1806d07a 	srli	r3,r3,1
  80a194:	00800044 	movi	r2,1
  80a198:	20c00015 	stw	r3,0(r4)
  80a19c:	f800283a 	ret

0080a1a0 <__i2b>:
  80a1a0:	defffd04 	addi	sp,sp,-12
  80a1a4:	dc000015 	stw	r16,0(sp)
  80a1a8:	04000044 	movi	r16,1
  80a1ac:	dc400115 	stw	r17,4(sp)
  80a1b0:	2823883a 	mov	r17,r5
  80a1b4:	800b883a 	mov	r5,r16
  80a1b8:	dfc00215 	stw	ra,8(sp)
  80a1bc:	0809d940 	call	809d94 <_Balloc>
  80a1c0:	14400515 	stw	r17,20(r2)
  80a1c4:	14000415 	stw	r16,16(r2)
  80a1c8:	dfc00217 	ldw	ra,8(sp)
  80a1cc:	dc400117 	ldw	r17,4(sp)
  80a1d0:	dc000017 	ldw	r16,0(sp)
  80a1d4:	dec00304 	addi	sp,sp,12
  80a1d8:	f800283a 	ret

0080a1dc <__multiply>:
  80a1dc:	defffa04 	addi	sp,sp,-24
  80a1e0:	dcc00315 	stw	r19,12(sp)
  80a1e4:	dc800215 	stw	r18,8(sp)
  80a1e8:	34c00417 	ldw	r19,16(r6)
  80a1ec:	2c800417 	ldw	r18,16(r5)
  80a1f0:	dd000415 	stw	r20,16(sp)
  80a1f4:	dc400115 	stw	r17,4(sp)
  80a1f8:	dfc00515 	stw	ra,20(sp)
  80a1fc:	dc000015 	stw	r16,0(sp)
  80a200:	2829883a 	mov	r20,r5
  80a204:	3023883a 	mov	r17,r6
  80a208:	94c0050e 	bge	r18,r19,80a220 <__multiply+0x44>
  80a20c:	9007883a 	mov	r3,r18
  80a210:	3029883a 	mov	r20,r6
  80a214:	9825883a 	mov	r18,r19
  80a218:	2823883a 	mov	r17,r5
  80a21c:	1827883a 	mov	r19,r3
  80a220:	a0800217 	ldw	r2,8(r20)
  80a224:	94e1883a 	add	r16,r18,r19
  80a228:	a1400117 	ldw	r5,4(r20)
  80a22c:	1400010e 	bge	r2,r16,80a234 <__multiply+0x58>
  80a230:	29400044 	addi	r5,r5,1
  80a234:	0809d940 	call	809d94 <_Balloc>
  80a238:	8415883a 	add	r10,r16,r16
  80a23c:	12c00504 	addi	r11,r2,20
  80a240:	5295883a 	add	r10,r10,r10
  80a244:	5a95883a 	add	r10,r11,r10
  80a248:	5807883a 	mov	r3,r11
  80a24c:	5a80032e 	bgeu	r11,r10,80a25c <__multiply+0x80>
  80a250:	18000015 	stw	zero,0(r3)
  80a254:	18c00104 	addi	r3,r3,4
  80a258:	1abffd36 	bltu	r3,r10,80a250 <__alt_mem_onchip_mem+0xff78a250>
  80a25c:	9ce7883a 	add	r19,r19,r19
  80a260:	94a5883a 	add	r18,r18,r18
  80a264:	89800504 	addi	r6,r17,20
  80a268:	9ce7883a 	add	r19,r19,r19
  80a26c:	a3400504 	addi	r13,r20,20
  80a270:	94a5883a 	add	r18,r18,r18
  80a274:	34d9883a 	add	r12,r6,r19
  80a278:	6c93883a 	add	r9,r13,r18
  80a27c:	3300422e 	bgeu	r6,r12,80a388 <__multiply+0x1ac>
  80a280:	37c00017 	ldw	ra,0(r6)
  80a284:	fbffffcc 	andi	r15,ra,65535
  80a288:	78001b26 	beq	r15,zero,80a2f8 <__multiply+0x11c>
  80a28c:	5811883a 	mov	r8,r11
  80a290:	681d883a 	mov	r14,r13
  80a294:	000f883a 	mov	r7,zero
  80a298:	71000017 	ldw	r4,0(r14)
  80a29c:	40c00017 	ldw	r3,0(r8)
  80a2a0:	73800104 	addi	r14,r14,4
  80a2a4:	217fffcc 	andi	r5,r4,65535
  80a2a8:	2bcb383a 	mul	r5,r5,r15
  80a2ac:	2008d43a 	srli	r4,r4,16
  80a2b0:	1c7fffcc 	andi	r17,r3,65535
  80a2b4:	2c4b883a 	add	r5,r5,r17
  80a2b8:	29cb883a 	add	r5,r5,r7
  80a2bc:	23c9383a 	mul	r4,r4,r15
  80a2c0:	1806d43a 	srli	r3,r3,16
  80a2c4:	280ed43a 	srli	r7,r5,16
  80a2c8:	297fffcc 	andi	r5,r5,65535
  80a2cc:	20c7883a 	add	r3,r4,r3
  80a2d0:	19c7883a 	add	r3,r3,r7
  80a2d4:	1808943a 	slli	r4,r3,16
  80a2d8:	4023883a 	mov	r17,r8
  80a2dc:	180ed43a 	srli	r7,r3,16
  80a2e0:	214ab03a 	or	r5,r4,r5
  80a2e4:	41400015 	stw	r5,0(r8)
  80a2e8:	42000104 	addi	r8,r8,4
  80a2ec:	727fea36 	bltu	r14,r9,80a298 <__alt_mem_onchip_mem+0xff78a298>
  80a2f0:	89c00115 	stw	r7,4(r17)
  80a2f4:	37c00017 	ldw	ra,0(r6)
  80a2f8:	f83ed43a 	srli	ra,ra,16
  80a2fc:	f8001f26 	beq	ra,zero,80a37c <__multiply+0x1a0>
  80a300:	58c00017 	ldw	r3,0(r11)
  80a304:	681d883a 	mov	r14,r13
  80a308:	581f883a 	mov	r15,r11
  80a30c:	1811883a 	mov	r8,r3
  80a310:	5825883a 	mov	r18,r11
  80a314:	000f883a 	mov	r7,zero
  80a318:	00000106 	br	80a320 <__multiply+0x144>
  80a31c:	8825883a 	mov	r18,r17
  80a320:	7140000b 	ldhu	r5,0(r14)
  80a324:	4010d43a 	srli	r8,r8,16
  80a328:	193fffcc 	andi	r4,r3,65535
  80a32c:	2fcb383a 	mul	r5,r5,ra
  80a330:	7bc00104 	addi	r15,r15,4
  80a334:	73800104 	addi	r14,r14,4
  80a338:	2a0b883a 	add	r5,r5,r8
  80a33c:	29cb883a 	add	r5,r5,r7
  80a340:	2806943a 	slli	r3,r5,16
  80a344:	94400104 	addi	r17,r18,4
  80a348:	280ad43a 	srli	r5,r5,16
  80a34c:	1908b03a 	or	r4,r3,r4
  80a350:	793fff15 	stw	r4,-4(r15)
  80a354:	70ffff17 	ldw	r3,-4(r14)
  80a358:	8a000017 	ldw	r8,0(r17)
  80a35c:	1806d43a 	srli	r3,r3,16
  80a360:	413fffcc 	andi	r4,r8,65535
  80a364:	1fc7383a 	mul	r3,r3,ra
  80a368:	1907883a 	add	r3,r3,r4
  80a36c:	1947883a 	add	r3,r3,r5
  80a370:	180ed43a 	srli	r7,r3,16
  80a374:	727fe936 	bltu	r14,r9,80a31c <__alt_mem_onchip_mem+0xff78a31c>
  80a378:	90c00115 	stw	r3,4(r18)
  80a37c:	31800104 	addi	r6,r6,4
  80a380:	5ac00104 	addi	r11,r11,4
  80a384:	333fbe36 	bltu	r6,r12,80a280 <__alt_mem_onchip_mem+0xff78a280>
  80a388:	0400090e 	bge	zero,r16,80a3b0 <__multiply+0x1d4>
  80a38c:	50ffff17 	ldw	r3,-4(r10)
  80a390:	52bfff04 	addi	r10,r10,-4
  80a394:	18000326 	beq	r3,zero,80a3a4 <__multiply+0x1c8>
  80a398:	00000506 	br	80a3b0 <__multiply+0x1d4>
  80a39c:	50c00017 	ldw	r3,0(r10)
  80a3a0:	1800031e 	bne	r3,zero,80a3b0 <__multiply+0x1d4>
  80a3a4:	843fffc4 	addi	r16,r16,-1
  80a3a8:	52bfff04 	addi	r10,r10,-4
  80a3ac:	803ffb1e 	bne	r16,zero,80a39c <__alt_mem_onchip_mem+0xff78a39c>
  80a3b0:	14000415 	stw	r16,16(r2)
  80a3b4:	dfc00517 	ldw	ra,20(sp)
  80a3b8:	dd000417 	ldw	r20,16(sp)
  80a3bc:	dcc00317 	ldw	r19,12(sp)
  80a3c0:	dc800217 	ldw	r18,8(sp)
  80a3c4:	dc400117 	ldw	r17,4(sp)
  80a3c8:	dc000017 	ldw	r16,0(sp)
  80a3cc:	dec00604 	addi	sp,sp,24
  80a3d0:	f800283a 	ret

0080a3d4 <__pow5mult>:
  80a3d4:	defffa04 	addi	sp,sp,-24
  80a3d8:	dcc00315 	stw	r19,12(sp)
  80a3dc:	dc000015 	stw	r16,0(sp)
  80a3e0:	dfc00515 	stw	ra,20(sp)
  80a3e4:	dd000415 	stw	r20,16(sp)
  80a3e8:	dc800215 	stw	r18,8(sp)
  80a3ec:	dc400115 	stw	r17,4(sp)
  80a3f0:	308000cc 	andi	r2,r6,3
  80a3f4:	3021883a 	mov	r16,r6
  80a3f8:	2027883a 	mov	r19,r4
  80a3fc:	10002f1e 	bne	r2,zero,80a4bc <__pow5mult+0xe8>
  80a400:	2825883a 	mov	r18,r5
  80a404:	8021d0ba 	srai	r16,r16,2
  80a408:	80001a26 	beq	r16,zero,80a474 <__pow5mult+0xa0>
  80a40c:	9c401217 	ldw	r17,72(r19)
  80a410:	8800061e 	bne	r17,zero,80a42c <__pow5mult+0x58>
  80a414:	00003406 	br	80a4e8 <__pow5mult+0x114>
  80a418:	8021d07a 	srai	r16,r16,1
  80a41c:	80001526 	beq	r16,zero,80a474 <__pow5mult+0xa0>
  80a420:	88800017 	ldw	r2,0(r17)
  80a424:	10001c26 	beq	r2,zero,80a498 <__pow5mult+0xc4>
  80a428:	1023883a 	mov	r17,r2
  80a42c:	8080004c 	andi	r2,r16,1
  80a430:	103ff926 	beq	r2,zero,80a418 <__alt_mem_onchip_mem+0xff78a418>
  80a434:	880d883a 	mov	r6,r17
  80a438:	900b883a 	mov	r5,r18
  80a43c:	9809883a 	mov	r4,r19
  80a440:	080a1dc0 	call	80a1dc <__multiply>
  80a444:	90001b26 	beq	r18,zero,80a4b4 <__pow5mult+0xe0>
  80a448:	91000117 	ldw	r4,4(r18)
  80a44c:	98c01317 	ldw	r3,76(r19)
  80a450:	8021d07a 	srai	r16,r16,1
  80a454:	2109883a 	add	r4,r4,r4
  80a458:	2109883a 	add	r4,r4,r4
  80a45c:	1907883a 	add	r3,r3,r4
  80a460:	19000017 	ldw	r4,0(r3)
  80a464:	91000015 	stw	r4,0(r18)
  80a468:	1c800015 	stw	r18,0(r3)
  80a46c:	1025883a 	mov	r18,r2
  80a470:	803feb1e 	bne	r16,zero,80a420 <__alt_mem_onchip_mem+0xff78a420>
  80a474:	9005883a 	mov	r2,r18
  80a478:	dfc00517 	ldw	ra,20(sp)
  80a47c:	dd000417 	ldw	r20,16(sp)
  80a480:	dcc00317 	ldw	r19,12(sp)
  80a484:	dc800217 	ldw	r18,8(sp)
  80a488:	dc400117 	ldw	r17,4(sp)
  80a48c:	dc000017 	ldw	r16,0(sp)
  80a490:	dec00604 	addi	sp,sp,24
  80a494:	f800283a 	ret
  80a498:	880d883a 	mov	r6,r17
  80a49c:	880b883a 	mov	r5,r17
  80a4a0:	9809883a 	mov	r4,r19
  80a4a4:	080a1dc0 	call	80a1dc <__multiply>
  80a4a8:	88800015 	stw	r2,0(r17)
  80a4ac:	10000015 	stw	zero,0(r2)
  80a4b0:	003fdd06 	br	80a428 <__alt_mem_onchip_mem+0xff78a428>
  80a4b4:	1025883a 	mov	r18,r2
  80a4b8:	003fd706 	br	80a418 <__alt_mem_onchip_mem+0xff78a418>
  80a4bc:	10bfffc4 	addi	r2,r2,-1
  80a4c0:	1085883a 	add	r2,r2,r2
  80a4c4:	00c02074 	movhi	r3,129
  80a4c8:	18d20704 	addi	r3,r3,18460
  80a4cc:	1085883a 	add	r2,r2,r2
  80a4d0:	1885883a 	add	r2,r3,r2
  80a4d4:	11800017 	ldw	r6,0(r2)
  80a4d8:	000f883a 	mov	r7,zero
  80a4dc:	0809e640 	call	809e64 <__multadd>
  80a4e0:	1025883a 	mov	r18,r2
  80a4e4:	003fc706 	br	80a404 <__alt_mem_onchip_mem+0xff78a404>
  80a4e8:	05000044 	movi	r20,1
  80a4ec:	a00b883a 	mov	r5,r20
  80a4f0:	9809883a 	mov	r4,r19
  80a4f4:	0809d940 	call	809d94 <_Balloc>
  80a4f8:	1023883a 	mov	r17,r2
  80a4fc:	00809c44 	movi	r2,625
  80a500:	88800515 	stw	r2,20(r17)
  80a504:	8d000415 	stw	r20,16(r17)
  80a508:	9c401215 	stw	r17,72(r19)
  80a50c:	88000015 	stw	zero,0(r17)
  80a510:	003fc606 	br	80a42c <__alt_mem_onchip_mem+0xff78a42c>

0080a514 <__lshift>:
  80a514:	defff904 	addi	sp,sp,-28
  80a518:	dd400515 	stw	r21,20(sp)
  80a51c:	dcc00315 	stw	r19,12(sp)
  80a520:	302bd17a 	srai	r21,r6,5
  80a524:	2cc00417 	ldw	r19,16(r5)
  80a528:	28800217 	ldw	r2,8(r5)
  80a52c:	dd000415 	stw	r20,16(sp)
  80a530:	ace7883a 	add	r19,r21,r19
  80a534:	dc800215 	stw	r18,8(sp)
  80a538:	dc400115 	stw	r17,4(sp)
  80a53c:	dc000015 	stw	r16,0(sp)
  80a540:	dfc00615 	stw	ra,24(sp)
  80a544:	9c000044 	addi	r16,r19,1
  80a548:	2823883a 	mov	r17,r5
  80a54c:	3029883a 	mov	r20,r6
  80a550:	2025883a 	mov	r18,r4
  80a554:	29400117 	ldw	r5,4(r5)
  80a558:	1400030e 	bge	r2,r16,80a568 <__lshift+0x54>
  80a55c:	1085883a 	add	r2,r2,r2
  80a560:	29400044 	addi	r5,r5,1
  80a564:	143ffd16 	blt	r2,r16,80a55c <__alt_mem_onchip_mem+0xff78a55c>
  80a568:	9009883a 	mov	r4,r18
  80a56c:	0809d940 	call	809d94 <_Balloc>
  80a570:	10c00504 	addi	r3,r2,20
  80a574:	0540070e 	bge	zero,r21,80a594 <__lshift+0x80>
  80a578:	ad6b883a 	add	r21,r21,r21
  80a57c:	ad6b883a 	add	r21,r21,r21
  80a580:	1809883a 	mov	r4,r3
  80a584:	1d47883a 	add	r3,r3,r21
  80a588:	20000015 	stw	zero,0(r4)
  80a58c:	21000104 	addi	r4,r4,4
  80a590:	193ffd1e 	bne	r3,r4,80a588 <__alt_mem_onchip_mem+0xff78a588>
  80a594:	8a000417 	ldw	r8,16(r17)
  80a598:	89000504 	addi	r4,r17,20
  80a59c:	a18007cc 	andi	r6,r20,31
  80a5a0:	4211883a 	add	r8,r8,r8
  80a5a4:	4211883a 	add	r8,r8,r8
  80a5a8:	2211883a 	add	r8,r4,r8
  80a5ac:	30002326 	beq	r6,zero,80a63c <__lshift+0x128>
  80a5b0:	02400804 	movi	r9,32
  80a5b4:	4993c83a 	sub	r9,r9,r6
  80a5b8:	000b883a 	mov	r5,zero
  80a5bc:	21c00017 	ldw	r7,0(r4)
  80a5c0:	1815883a 	mov	r10,r3
  80a5c4:	18c00104 	addi	r3,r3,4
  80a5c8:	398e983a 	sll	r7,r7,r6
  80a5cc:	21000104 	addi	r4,r4,4
  80a5d0:	394ab03a 	or	r5,r7,r5
  80a5d4:	197fff15 	stw	r5,-4(r3)
  80a5d8:	217fff17 	ldw	r5,-4(r4)
  80a5dc:	2a4ad83a 	srl	r5,r5,r9
  80a5e0:	223ff636 	bltu	r4,r8,80a5bc <__alt_mem_onchip_mem+0xff78a5bc>
  80a5e4:	51400115 	stw	r5,4(r10)
  80a5e8:	28001a1e 	bne	r5,zero,80a654 <__lshift+0x140>
  80a5ec:	843fffc4 	addi	r16,r16,-1
  80a5f0:	14000415 	stw	r16,16(r2)
  80a5f4:	88000826 	beq	r17,zero,80a618 <__lshift+0x104>
  80a5f8:	89000117 	ldw	r4,4(r17)
  80a5fc:	90c01317 	ldw	r3,76(r18)
  80a600:	2109883a 	add	r4,r4,r4
  80a604:	2109883a 	add	r4,r4,r4
  80a608:	1907883a 	add	r3,r3,r4
  80a60c:	19000017 	ldw	r4,0(r3)
  80a610:	89000015 	stw	r4,0(r17)
  80a614:	1c400015 	stw	r17,0(r3)
  80a618:	dfc00617 	ldw	ra,24(sp)
  80a61c:	dd400517 	ldw	r21,20(sp)
  80a620:	dd000417 	ldw	r20,16(sp)
  80a624:	dcc00317 	ldw	r19,12(sp)
  80a628:	dc800217 	ldw	r18,8(sp)
  80a62c:	dc400117 	ldw	r17,4(sp)
  80a630:	dc000017 	ldw	r16,0(sp)
  80a634:	dec00704 	addi	sp,sp,28
  80a638:	f800283a 	ret
  80a63c:	21400017 	ldw	r5,0(r4)
  80a640:	18c00104 	addi	r3,r3,4
  80a644:	21000104 	addi	r4,r4,4
  80a648:	197fff15 	stw	r5,-4(r3)
  80a64c:	223ffb36 	bltu	r4,r8,80a63c <__alt_mem_onchip_mem+0xff78a63c>
  80a650:	003fe606 	br	80a5ec <__alt_mem_onchip_mem+0xff78a5ec>
  80a654:	9c000084 	addi	r16,r19,2
  80a658:	003fe406 	br	80a5ec <__alt_mem_onchip_mem+0xff78a5ec>

0080a65c <__mcmp>:
  80a65c:	20800417 	ldw	r2,16(r4)
  80a660:	28c00417 	ldw	r3,16(r5)
  80a664:	10c5c83a 	sub	r2,r2,r3
  80a668:	1000111e 	bne	r2,zero,80a6b0 <__mcmp+0x54>
  80a66c:	18c7883a 	add	r3,r3,r3
  80a670:	18c7883a 	add	r3,r3,r3
  80a674:	21000504 	addi	r4,r4,20
  80a678:	29400504 	addi	r5,r5,20
  80a67c:	20c5883a 	add	r2,r4,r3
  80a680:	28cb883a 	add	r5,r5,r3
  80a684:	00000106 	br	80a68c <__mcmp+0x30>
  80a688:	20800a2e 	bgeu	r4,r2,80a6b4 <__mcmp+0x58>
  80a68c:	10bfff04 	addi	r2,r2,-4
  80a690:	297fff04 	addi	r5,r5,-4
  80a694:	11800017 	ldw	r6,0(r2)
  80a698:	28c00017 	ldw	r3,0(r5)
  80a69c:	30fffa26 	beq	r6,r3,80a688 <__alt_mem_onchip_mem+0xff78a688>
  80a6a0:	30c00236 	bltu	r6,r3,80a6ac <__mcmp+0x50>
  80a6a4:	00800044 	movi	r2,1
  80a6a8:	f800283a 	ret
  80a6ac:	00bfffc4 	movi	r2,-1
  80a6b0:	f800283a 	ret
  80a6b4:	0005883a 	mov	r2,zero
  80a6b8:	f800283a 	ret

0080a6bc <__mdiff>:
  80a6bc:	28c00417 	ldw	r3,16(r5)
  80a6c0:	30800417 	ldw	r2,16(r6)
  80a6c4:	defffa04 	addi	sp,sp,-24
  80a6c8:	dcc00315 	stw	r19,12(sp)
  80a6cc:	dc800215 	stw	r18,8(sp)
  80a6d0:	dfc00515 	stw	ra,20(sp)
  80a6d4:	dd000415 	stw	r20,16(sp)
  80a6d8:	dc400115 	stw	r17,4(sp)
  80a6dc:	dc000015 	stw	r16,0(sp)
  80a6e0:	1887c83a 	sub	r3,r3,r2
  80a6e4:	2825883a 	mov	r18,r5
  80a6e8:	3027883a 	mov	r19,r6
  80a6ec:	1800141e 	bne	r3,zero,80a740 <__mdiff+0x84>
  80a6f0:	1085883a 	add	r2,r2,r2
  80a6f4:	1085883a 	add	r2,r2,r2
  80a6f8:	2a000504 	addi	r8,r5,20
  80a6fc:	34000504 	addi	r16,r6,20
  80a700:	4087883a 	add	r3,r8,r2
  80a704:	8085883a 	add	r2,r16,r2
  80a708:	00000106 	br	80a710 <__mdiff+0x54>
  80a70c:	40c0592e 	bgeu	r8,r3,80a874 <__mdiff+0x1b8>
  80a710:	18ffff04 	addi	r3,r3,-4
  80a714:	10bfff04 	addi	r2,r2,-4
  80a718:	19c00017 	ldw	r7,0(r3)
  80a71c:	11400017 	ldw	r5,0(r2)
  80a720:	397ffa26 	beq	r7,r5,80a70c <__alt_mem_onchip_mem+0xff78a70c>
  80a724:	3940592e 	bgeu	r7,r5,80a88c <__mdiff+0x1d0>
  80a728:	9005883a 	mov	r2,r18
  80a72c:	4023883a 	mov	r17,r8
  80a730:	9825883a 	mov	r18,r19
  80a734:	05000044 	movi	r20,1
  80a738:	1027883a 	mov	r19,r2
  80a73c:	00000406 	br	80a750 <__mdiff+0x94>
  80a740:	18005616 	blt	r3,zero,80a89c <__mdiff+0x1e0>
  80a744:	34400504 	addi	r17,r6,20
  80a748:	2c000504 	addi	r16,r5,20
  80a74c:	0029883a 	mov	r20,zero
  80a750:	91400117 	ldw	r5,4(r18)
  80a754:	0809d940 	call	809d94 <_Balloc>
  80a758:	92400417 	ldw	r9,16(r18)
  80a75c:	9b000417 	ldw	r12,16(r19)
  80a760:	12c00504 	addi	r11,r2,20
  80a764:	4a51883a 	add	r8,r9,r9
  80a768:	6319883a 	add	r12,r12,r12
  80a76c:	4211883a 	add	r8,r8,r8
  80a770:	6319883a 	add	r12,r12,r12
  80a774:	15000315 	stw	r20,12(r2)
  80a778:	8211883a 	add	r8,r16,r8
  80a77c:	8b19883a 	add	r12,r17,r12
  80a780:	0007883a 	mov	r3,zero
  80a784:	81400017 	ldw	r5,0(r16)
  80a788:	89c00017 	ldw	r7,0(r17)
  80a78c:	59800104 	addi	r6,r11,4
  80a790:	293fffcc 	andi	r4,r5,65535
  80a794:	20c7883a 	add	r3,r4,r3
  80a798:	393fffcc 	andi	r4,r7,65535
  80a79c:	1909c83a 	sub	r4,r3,r4
  80a7a0:	280ad43a 	srli	r5,r5,16
  80a7a4:	380ed43a 	srli	r7,r7,16
  80a7a8:	2007d43a 	srai	r3,r4,16
  80a7ac:	213fffcc 	andi	r4,r4,65535
  80a7b0:	29cbc83a 	sub	r5,r5,r7
  80a7b4:	28c7883a 	add	r3,r5,r3
  80a7b8:	180a943a 	slli	r5,r3,16
  80a7bc:	8c400104 	addi	r17,r17,4
  80a7c0:	84000104 	addi	r16,r16,4
  80a7c4:	2908b03a 	or	r4,r5,r4
  80a7c8:	59000015 	stw	r4,0(r11)
  80a7cc:	1807d43a 	srai	r3,r3,16
  80a7d0:	3015883a 	mov	r10,r6
  80a7d4:	3017883a 	mov	r11,r6
  80a7d8:	8b3fea36 	bltu	r17,r12,80a784 <__alt_mem_onchip_mem+0xff78a784>
  80a7dc:	8200162e 	bgeu	r16,r8,80a838 <__mdiff+0x17c>
  80a7e0:	8017883a 	mov	r11,r16
  80a7e4:	59400017 	ldw	r5,0(r11)
  80a7e8:	31800104 	addi	r6,r6,4
  80a7ec:	5ac00104 	addi	r11,r11,4
  80a7f0:	293fffcc 	andi	r4,r5,65535
  80a7f4:	20c7883a 	add	r3,r4,r3
  80a7f8:	280ed43a 	srli	r7,r5,16
  80a7fc:	180bd43a 	srai	r5,r3,16
  80a800:	193fffcc 	andi	r4,r3,65535
  80a804:	3947883a 	add	r3,r7,r5
  80a808:	180a943a 	slli	r5,r3,16
  80a80c:	1807d43a 	srai	r3,r3,16
  80a810:	2908b03a 	or	r4,r5,r4
  80a814:	313fff15 	stw	r4,-4(r6)
  80a818:	5a3ff236 	bltu	r11,r8,80a7e4 <__alt_mem_onchip_mem+0xff78a7e4>
  80a81c:	0406303a 	nor	r3,zero,r16
  80a820:	1a07883a 	add	r3,r3,r8
  80a824:	1806d0ba 	srli	r3,r3,2
  80a828:	18c00044 	addi	r3,r3,1
  80a82c:	18c7883a 	add	r3,r3,r3
  80a830:	18c7883a 	add	r3,r3,r3
  80a834:	50d5883a 	add	r10,r10,r3
  80a838:	50ffff04 	addi	r3,r10,-4
  80a83c:	2000041e 	bne	r4,zero,80a850 <__mdiff+0x194>
  80a840:	18ffff04 	addi	r3,r3,-4
  80a844:	19000017 	ldw	r4,0(r3)
  80a848:	4a7fffc4 	addi	r9,r9,-1
  80a84c:	203ffc26 	beq	r4,zero,80a840 <__alt_mem_onchip_mem+0xff78a840>
  80a850:	12400415 	stw	r9,16(r2)
  80a854:	dfc00517 	ldw	ra,20(sp)
  80a858:	dd000417 	ldw	r20,16(sp)
  80a85c:	dcc00317 	ldw	r19,12(sp)
  80a860:	dc800217 	ldw	r18,8(sp)
  80a864:	dc400117 	ldw	r17,4(sp)
  80a868:	dc000017 	ldw	r16,0(sp)
  80a86c:	dec00604 	addi	sp,sp,24
  80a870:	f800283a 	ret
  80a874:	000b883a 	mov	r5,zero
  80a878:	0809d940 	call	809d94 <_Balloc>
  80a87c:	00c00044 	movi	r3,1
  80a880:	10c00415 	stw	r3,16(r2)
  80a884:	10000515 	stw	zero,20(r2)
  80a888:	003ff206 	br	80a854 <__alt_mem_onchip_mem+0xff78a854>
  80a88c:	8023883a 	mov	r17,r16
  80a890:	0029883a 	mov	r20,zero
  80a894:	4021883a 	mov	r16,r8
  80a898:	003fad06 	br	80a750 <__alt_mem_onchip_mem+0xff78a750>
  80a89c:	9005883a 	mov	r2,r18
  80a8a0:	94400504 	addi	r17,r18,20
  80a8a4:	9c000504 	addi	r16,r19,20
  80a8a8:	9825883a 	mov	r18,r19
  80a8ac:	05000044 	movi	r20,1
  80a8b0:	1027883a 	mov	r19,r2
  80a8b4:	003fa606 	br	80a750 <__alt_mem_onchip_mem+0xff78a750>

0080a8b8 <__ulp>:
  80a8b8:	295ffc2c 	andhi	r5,r5,32752
  80a8bc:	00bf3034 	movhi	r2,64704
  80a8c0:	2887883a 	add	r3,r5,r2
  80a8c4:	00c0020e 	bge	zero,r3,80a8d0 <__ulp+0x18>
  80a8c8:	0005883a 	mov	r2,zero
  80a8cc:	f800283a 	ret
  80a8d0:	00c7c83a 	sub	r3,zero,r3
  80a8d4:	1807d53a 	srai	r3,r3,20
  80a8d8:	008004c4 	movi	r2,19
  80a8dc:	10c00b0e 	bge	r2,r3,80a90c <__ulp+0x54>
  80a8e0:	18bffb04 	addi	r2,r3,-20
  80a8e4:	01000784 	movi	r4,30
  80a8e8:	0007883a 	mov	r3,zero
  80a8ec:	20800516 	blt	r4,r2,80a904 <__ulp+0x4c>
  80a8f0:	010007c4 	movi	r4,31
  80a8f4:	2089c83a 	sub	r4,r4,r2
  80a8f8:	00800044 	movi	r2,1
  80a8fc:	1104983a 	sll	r2,r2,r4
  80a900:	f800283a 	ret
  80a904:	00800044 	movi	r2,1
  80a908:	f800283a 	ret
  80a90c:	01400234 	movhi	r5,8
  80a910:	28c7d83a 	sra	r3,r5,r3
  80a914:	0005883a 	mov	r2,zero
  80a918:	f800283a 	ret

0080a91c <__b2d>:
  80a91c:	defffa04 	addi	sp,sp,-24
  80a920:	dc000015 	stw	r16,0(sp)
  80a924:	24000417 	ldw	r16,16(r4)
  80a928:	dc400115 	stw	r17,4(sp)
  80a92c:	24400504 	addi	r17,r4,20
  80a930:	8421883a 	add	r16,r16,r16
  80a934:	8421883a 	add	r16,r16,r16
  80a938:	8c21883a 	add	r16,r17,r16
  80a93c:	dc800215 	stw	r18,8(sp)
  80a940:	84bfff17 	ldw	r18,-4(r16)
  80a944:	dd000415 	stw	r20,16(sp)
  80a948:	dcc00315 	stw	r19,12(sp)
  80a94c:	9009883a 	mov	r4,r18
  80a950:	2829883a 	mov	r20,r5
  80a954:	dfc00515 	stw	ra,20(sp)
  80a958:	080a0880 	call	80a088 <__hi0bits>
  80a95c:	00c00804 	movi	r3,32
  80a960:	1889c83a 	sub	r4,r3,r2
  80a964:	a1000015 	stw	r4,0(r20)
  80a968:	01000284 	movi	r4,10
  80a96c:	84ffff04 	addi	r19,r16,-4
  80a970:	20801216 	blt	r4,r2,80a9bc <__b2d+0xa0>
  80a974:	018002c4 	movi	r6,11
  80a978:	308dc83a 	sub	r6,r6,r2
  80a97c:	9186d83a 	srl	r3,r18,r6
  80a980:	18cffc34 	orhi	r3,r3,16368
  80a984:	8cc0212e 	bgeu	r17,r19,80aa0c <__b2d+0xf0>
  80a988:	813ffe17 	ldw	r4,-8(r16)
  80a98c:	218cd83a 	srl	r6,r4,r6
  80a990:	10800544 	addi	r2,r2,21
  80a994:	9084983a 	sll	r2,r18,r2
  80a998:	1184b03a 	or	r2,r2,r6
  80a99c:	dfc00517 	ldw	ra,20(sp)
  80a9a0:	dd000417 	ldw	r20,16(sp)
  80a9a4:	dcc00317 	ldw	r19,12(sp)
  80a9a8:	dc800217 	ldw	r18,8(sp)
  80a9ac:	dc400117 	ldw	r17,4(sp)
  80a9b0:	dc000017 	ldw	r16,0(sp)
  80a9b4:	dec00604 	addi	sp,sp,24
  80a9b8:	f800283a 	ret
  80a9bc:	8cc00f2e 	bgeu	r17,r19,80a9fc <__b2d+0xe0>
  80a9c0:	117ffd44 	addi	r5,r2,-11
  80a9c4:	80bffe17 	ldw	r2,-8(r16)
  80a9c8:	28000e26 	beq	r5,zero,80aa04 <__b2d+0xe8>
  80a9cc:	1949c83a 	sub	r4,r3,r5
  80a9d0:	9164983a 	sll	r18,r18,r5
  80a9d4:	1106d83a 	srl	r3,r2,r4
  80a9d8:	81bffe04 	addi	r6,r16,-8
  80a9dc:	948ffc34 	orhi	r18,r18,16368
  80a9e0:	90c6b03a 	or	r3,r18,r3
  80a9e4:	89800e2e 	bgeu	r17,r6,80aa20 <__b2d+0x104>
  80a9e8:	81bffd17 	ldw	r6,-12(r16)
  80a9ec:	1144983a 	sll	r2,r2,r5
  80a9f0:	310ad83a 	srl	r5,r6,r4
  80a9f4:	2884b03a 	or	r2,r5,r2
  80a9f8:	003fe806 	br	80a99c <__alt_mem_onchip_mem+0xff78a99c>
  80a9fc:	10bffd44 	addi	r2,r2,-11
  80aa00:	1000041e 	bne	r2,zero,80aa14 <__b2d+0xf8>
  80aa04:	90cffc34 	orhi	r3,r18,16368
  80aa08:	003fe406 	br	80a99c <__alt_mem_onchip_mem+0xff78a99c>
  80aa0c:	000d883a 	mov	r6,zero
  80aa10:	003fdf06 	br	80a990 <__alt_mem_onchip_mem+0xff78a990>
  80aa14:	90a4983a 	sll	r18,r18,r2
  80aa18:	0005883a 	mov	r2,zero
  80aa1c:	003ff906 	br	80aa04 <__alt_mem_onchip_mem+0xff78aa04>
  80aa20:	1144983a 	sll	r2,r2,r5
  80aa24:	003fdd06 	br	80a99c <__alt_mem_onchip_mem+0xff78a99c>

0080aa28 <__d2b>:
  80aa28:	defff804 	addi	sp,sp,-32
  80aa2c:	dc000215 	stw	r16,8(sp)
  80aa30:	3021883a 	mov	r16,r6
  80aa34:	dc400315 	stw	r17,12(sp)
  80aa38:	8022907a 	slli	r17,r16,1
  80aa3c:	dd000615 	stw	r20,24(sp)
  80aa40:	2829883a 	mov	r20,r5
  80aa44:	01400044 	movi	r5,1
  80aa48:	dcc00515 	stw	r19,20(sp)
  80aa4c:	dc800415 	stw	r18,16(sp)
  80aa50:	dfc00715 	stw	ra,28(sp)
  80aa54:	3825883a 	mov	r18,r7
  80aa58:	8822d57a 	srli	r17,r17,21
  80aa5c:	0809d940 	call	809d94 <_Balloc>
  80aa60:	1027883a 	mov	r19,r2
  80aa64:	00800434 	movhi	r2,16
  80aa68:	10bfffc4 	addi	r2,r2,-1
  80aa6c:	808c703a 	and	r6,r16,r2
  80aa70:	88000126 	beq	r17,zero,80aa78 <__d2b+0x50>
  80aa74:	31800434 	orhi	r6,r6,16
  80aa78:	d9800015 	stw	r6,0(sp)
  80aa7c:	a0002426 	beq	r20,zero,80ab10 <__d2b+0xe8>
  80aa80:	d9000104 	addi	r4,sp,4
  80aa84:	dd000115 	stw	r20,4(sp)
  80aa88:	080a0f00 	call	80a0f0 <__lo0bits>
  80aa8c:	d8c00017 	ldw	r3,0(sp)
  80aa90:	10002f1e 	bne	r2,zero,80ab50 <__d2b+0x128>
  80aa94:	d9000117 	ldw	r4,4(sp)
  80aa98:	99000515 	stw	r4,20(r19)
  80aa9c:	1821003a 	cmpeq	r16,r3,zero
  80aaa0:	01000084 	movi	r4,2
  80aaa4:	2421c83a 	sub	r16,r4,r16
  80aaa8:	98c00615 	stw	r3,24(r19)
  80aaac:	9c000415 	stw	r16,16(r19)
  80aab0:	88001f1e 	bne	r17,zero,80ab30 <__d2b+0x108>
  80aab4:	10bef384 	addi	r2,r2,-1074
  80aab8:	90800015 	stw	r2,0(r18)
  80aabc:	00900034 	movhi	r2,16384
  80aac0:	10bfffc4 	addi	r2,r2,-1
  80aac4:	8085883a 	add	r2,r16,r2
  80aac8:	1085883a 	add	r2,r2,r2
  80aacc:	1085883a 	add	r2,r2,r2
  80aad0:	9885883a 	add	r2,r19,r2
  80aad4:	11000517 	ldw	r4,20(r2)
  80aad8:	8020917a 	slli	r16,r16,5
  80aadc:	080a0880 	call	80a088 <__hi0bits>
  80aae0:	d8c00817 	ldw	r3,32(sp)
  80aae4:	8085c83a 	sub	r2,r16,r2
  80aae8:	18800015 	stw	r2,0(r3)
  80aaec:	9805883a 	mov	r2,r19
  80aaf0:	dfc00717 	ldw	ra,28(sp)
  80aaf4:	dd000617 	ldw	r20,24(sp)
  80aaf8:	dcc00517 	ldw	r19,20(sp)
  80aafc:	dc800417 	ldw	r18,16(sp)
  80ab00:	dc400317 	ldw	r17,12(sp)
  80ab04:	dc000217 	ldw	r16,8(sp)
  80ab08:	dec00804 	addi	sp,sp,32
  80ab0c:	f800283a 	ret
  80ab10:	d809883a 	mov	r4,sp
  80ab14:	080a0f00 	call	80a0f0 <__lo0bits>
  80ab18:	d8c00017 	ldw	r3,0(sp)
  80ab1c:	04000044 	movi	r16,1
  80ab20:	9c000415 	stw	r16,16(r19)
  80ab24:	98c00515 	stw	r3,20(r19)
  80ab28:	10800804 	addi	r2,r2,32
  80ab2c:	883fe126 	beq	r17,zero,80aab4 <__alt_mem_onchip_mem+0xff78aab4>
  80ab30:	00c00d44 	movi	r3,53
  80ab34:	8c7ef344 	addi	r17,r17,-1075
  80ab38:	88a3883a 	add	r17,r17,r2
  80ab3c:	1885c83a 	sub	r2,r3,r2
  80ab40:	d8c00817 	ldw	r3,32(sp)
  80ab44:	94400015 	stw	r17,0(r18)
  80ab48:	18800015 	stw	r2,0(r3)
  80ab4c:	003fe706 	br	80aaec <__alt_mem_onchip_mem+0xff78aaec>
  80ab50:	01000804 	movi	r4,32
  80ab54:	2089c83a 	sub	r4,r4,r2
  80ab58:	1908983a 	sll	r4,r3,r4
  80ab5c:	d9400117 	ldw	r5,4(sp)
  80ab60:	1886d83a 	srl	r3,r3,r2
  80ab64:	2148b03a 	or	r4,r4,r5
  80ab68:	99000515 	stw	r4,20(r19)
  80ab6c:	d8c00015 	stw	r3,0(sp)
  80ab70:	003fca06 	br	80aa9c <__alt_mem_onchip_mem+0xff78aa9c>

0080ab74 <__ratio>:
  80ab74:	defff904 	addi	sp,sp,-28
  80ab78:	dc400315 	stw	r17,12(sp)
  80ab7c:	2823883a 	mov	r17,r5
  80ab80:	d9400104 	addi	r5,sp,4
  80ab84:	dfc00615 	stw	ra,24(sp)
  80ab88:	dcc00515 	stw	r19,20(sp)
  80ab8c:	dc800415 	stw	r18,16(sp)
  80ab90:	2027883a 	mov	r19,r4
  80ab94:	dc000215 	stw	r16,8(sp)
  80ab98:	080a91c0 	call	80a91c <__b2d>
  80ab9c:	d80b883a 	mov	r5,sp
  80aba0:	8809883a 	mov	r4,r17
  80aba4:	1025883a 	mov	r18,r2
  80aba8:	1821883a 	mov	r16,r3
  80abac:	080a91c0 	call	80a91c <__b2d>
  80abb0:	8a000417 	ldw	r8,16(r17)
  80abb4:	99000417 	ldw	r4,16(r19)
  80abb8:	d9400117 	ldw	r5,4(sp)
  80abbc:	2209c83a 	sub	r4,r4,r8
  80abc0:	2010917a 	slli	r8,r4,5
  80abc4:	d9000017 	ldw	r4,0(sp)
  80abc8:	2909c83a 	sub	r4,r5,r4
  80abcc:	4109883a 	add	r4,r8,r4
  80abd0:	01000e0e 	bge	zero,r4,80ac0c <__ratio+0x98>
  80abd4:	2008953a 	slli	r4,r4,20
  80abd8:	2421883a 	add	r16,r4,r16
  80abdc:	100d883a 	mov	r6,r2
  80abe0:	180f883a 	mov	r7,r3
  80abe4:	9009883a 	mov	r4,r18
  80abe8:	800b883a 	mov	r5,r16
  80abec:	080e70c0 	call	80e70c <__divdf3>
  80abf0:	dfc00617 	ldw	ra,24(sp)
  80abf4:	dcc00517 	ldw	r19,20(sp)
  80abf8:	dc800417 	ldw	r18,16(sp)
  80abfc:	dc400317 	ldw	r17,12(sp)
  80ac00:	dc000217 	ldw	r16,8(sp)
  80ac04:	dec00704 	addi	sp,sp,28
  80ac08:	f800283a 	ret
  80ac0c:	2008953a 	slli	r4,r4,20
  80ac10:	1907c83a 	sub	r3,r3,r4
  80ac14:	003ff106 	br	80abdc <__alt_mem_onchip_mem+0xff78abdc>

0080ac18 <_mprec_log10>:
  80ac18:	defffe04 	addi	sp,sp,-8
  80ac1c:	dc000015 	stw	r16,0(sp)
  80ac20:	dfc00115 	stw	ra,4(sp)
  80ac24:	008005c4 	movi	r2,23
  80ac28:	2021883a 	mov	r16,r4
  80ac2c:	11000d0e 	bge	r2,r4,80ac64 <_mprec_log10+0x4c>
  80ac30:	0005883a 	mov	r2,zero
  80ac34:	00cffc34 	movhi	r3,16368
  80ac38:	843fffc4 	addi	r16,r16,-1
  80ac3c:	000d883a 	mov	r6,zero
  80ac40:	01d00934 	movhi	r7,16420
  80ac44:	1009883a 	mov	r4,r2
  80ac48:	180b883a 	mov	r5,r3
  80ac4c:	080f24c0 	call	80f24c <__muldf3>
  80ac50:	803ff91e 	bne	r16,zero,80ac38 <__alt_mem_onchip_mem+0xff78ac38>
  80ac54:	dfc00117 	ldw	ra,4(sp)
  80ac58:	dc000017 	ldw	r16,0(sp)
  80ac5c:	dec00204 	addi	sp,sp,8
  80ac60:	f800283a 	ret
  80ac64:	202090fa 	slli	r16,r4,3
  80ac68:	00802074 	movhi	r2,129
  80ac6c:	10921e04 	addi	r2,r2,18552
  80ac70:	1421883a 	add	r16,r2,r16
  80ac74:	80800017 	ldw	r2,0(r16)
  80ac78:	80c00117 	ldw	r3,4(r16)
  80ac7c:	dfc00117 	ldw	ra,4(sp)
  80ac80:	dc000017 	ldw	r16,0(sp)
  80ac84:	dec00204 	addi	sp,sp,8
  80ac88:	f800283a 	ret

0080ac8c <__copybits>:
  80ac8c:	297fffc4 	addi	r5,r5,-1
  80ac90:	280fd17a 	srai	r7,r5,5
  80ac94:	30c00417 	ldw	r3,16(r6)
  80ac98:	30800504 	addi	r2,r6,20
  80ac9c:	39c00044 	addi	r7,r7,1
  80aca0:	18c7883a 	add	r3,r3,r3
  80aca4:	39cf883a 	add	r7,r7,r7
  80aca8:	18c7883a 	add	r3,r3,r3
  80acac:	39cf883a 	add	r7,r7,r7
  80acb0:	10c7883a 	add	r3,r2,r3
  80acb4:	21cf883a 	add	r7,r4,r7
  80acb8:	10c00d2e 	bgeu	r2,r3,80acf0 <__copybits+0x64>
  80acbc:	200b883a 	mov	r5,r4
  80acc0:	12000017 	ldw	r8,0(r2)
  80acc4:	29400104 	addi	r5,r5,4
  80acc8:	10800104 	addi	r2,r2,4
  80accc:	2a3fff15 	stw	r8,-4(r5)
  80acd0:	10fffb36 	bltu	r2,r3,80acc0 <__alt_mem_onchip_mem+0xff78acc0>
  80acd4:	1985c83a 	sub	r2,r3,r6
  80acd8:	10bffac4 	addi	r2,r2,-21
  80acdc:	1004d0ba 	srli	r2,r2,2
  80ace0:	10800044 	addi	r2,r2,1
  80ace4:	1085883a 	add	r2,r2,r2
  80ace8:	1085883a 	add	r2,r2,r2
  80acec:	2089883a 	add	r4,r4,r2
  80acf0:	21c0032e 	bgeu	r4,r7,80ad00 <__copybits+0x74>
  80acf4:	20000015 	stw	zero,0(r4)
  80acf8:	21000104 	addi	r4,r4,4
  80acfc:	21fffd36 	bltu	r4,r7,80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80ad00:	f800283a 	ret

0080ad04 <__any_on>:
  80ad04:	20c00417 	ldw	r3,16(r4)
  80ad08:	2805d17a 	srai	r2,r5,5
  80ad0c:	21000504 	addi	r4,r4,20
  80ad10:	18800d0e 	bge	r3,r2,80ad48 <__any_on+0x44>
  80ad14:	18c7883a 	add	r3,r3,r3
  80ad18:	18c7883a 	add	r3,r3,r3
  80ad1c:	20c7883a 	add	r3,r4,r3
  80ad20:	20c0192e 	bgeu	r4,r3,80ad88 <__any_on+0x84>
  80ad24:	18bfff17 	ldw	r2,-4(r3)
  80ad28:	18ffff04 	addi	r3,r3,-4
  80ad2c:	1000041e 	bne	r2,zero,80ad40 <__any_on+0x3c>
  80ad30:	20c0142e 	bgeu	r4,r3,80ad84 <__any_on+0x80>
  80ad34:	18ffff04 	addi	r3,r3,-4
  80ad38:	19400017 	ldw	r5,0(r3)
  80ad3c:	283ffc26 	beq	r5,zero,80ad30 <__alt_mem_onchip_mem+0xff78ad30>
  80ad40:	00800044 	movi	r2,1
  80ad44:	f800283a 	ret
  80ad48:	10c00a0e 	bge	r2,r3,80ad74 <__any_on+0x70>
  80ad4c:	1085883a 	add	r2,r2,r2
  80ad50:	1085883a 	add	r2,r2,r2
  80ad54:	294007cc 	andi	r5,r5,31
  80ad58:	2087883a 	add	r3,r4,r2
  80ad5c:	283ff026 	beq	r5,zero,80ad20 <__alt_mem_onchip_mem+0xff78ad20>
  80ad60:	19800017 	ldw	r6,0(r3)
  80ad64:	3144d83a 	srl	r2,r6,r5
  80ad68:	114a983a 	sll	r5,r2,r5
  80ad6c:	317ff41e 	bne	r6,r5,80ad40 <__alt_mem_onchip_mem+0xff78ad40>
  80ad70:	003feb06 	br	80ad20 <__alt_mem_onchip_mem+0xff78ad20>
  80ad74:	1085883a 	add	r2,r2,r2
  80ad78:	1085883a 	add	r2,r2,r2
  80ad7c:	2087883a 	add	r3,r4,r2
  80ad80:	003fe706 	br	80ad20 <__alt_mem_onchip_mem+0xff78ad20>
  80ad84:	f800283a 	ret
  80ad88:	0005883a 	mov	r2,zero
  80ad8c:	f800283a 	ret

0080ad90 <_read_r>:
  80ad90:	defffd04 	addi	sp,sp,-12
  80ad94:	2805883a 	mov	r2,r5
  80ad98:	dc000015 	stw	r16,0(sp)
  80ad9c:	040020b4 	movhi	r16,130
  80ada0:	dc400115 	stw	r17,4(sp)
  80ada4:	300b883a 	mov	r5,r6
  80ada8:	84221504 	addi	r16,r16,-30636
  80adac:	2023883a 	mov	r17,r4
  80adb0:	380d883a 	mov	r6,r7
  80adb4:	1009883a 	mov	r4,r2
  80adb8:	dfc00215 	stw	ra,8(sp)
  80adbc:	80000015 	stw	zero,0(r16)
  80adc0:	0810e480 	call	810e48 <read>
  80adc4:	00ffffc4 	movi	r3,-1
  80adc8:	10c00526 	beq	r2,r3,80ade0 <_read_r+0x50>
  80adcc:	dfc00217 	ldw	ra,8(sp)
  80add0:	dc400117 	ldw	r17,4(sp)
  80add4:	dc000017 	ldw	r16,0(sp)
  80add8:	dec00304 	addi	sp,sp,12
  80addc:	f800283a 	ret
  80ade0:	80c00017 	ldw	r3,0(r16)
  80ade4:	183ff926 	beq	r3,zero,80adcc <__alt_mem_onchip_mem+0xff78adcc>
  80ade8:	88c00015 	stw	r3,0(r17)
  80adec:	003ff706 	br	80adcc <__alt_mem_onchip_mem+0xff78adcc>

0080adf0 <_realloc_r>:
  80adf0:	defff604 	addi	sp,sp,-40
  80adf4:	dc800215 	stw	r18,8(sp)
  80adf8:	dfc00915 	stw	ra,36(sp)
  80adfc:	df000815 	stw	fp,32(sp)
  80ae00:	ddc00715 	stw	r23,28(sp)
  80ae04:	dd800615 	stw	r22,24(sp)
  80ae08:	dd400515 	stw	r21,20(sp)
  80ae0c:	dd000415 	stw	r20,16(sp)
  80ae10:	dcc00315 	stw	r19,12(sp)
  80ae14:	dc400115 	stw	r17,4(sp)
  80ae18:	dc000015 	stw	r16,0(sp)
  80ae1c:	3025883a 	mov	r18,r6
  80ae20:	2800b726 	beq	r5,zero,80b100 <_realloc_r+0x310>
  80ae24:	282b883a 	mov	r21,r5
  80ae28:	2029883a 	mov	r20,r4
  80ae2c:	0810b700 	call	810b70 <__malloc_lock>
  80ae30:	a8bfff17 	ldw	r2,-4(r21)
  80ae34:	043fff04 	movi	r16,-4
  80ae38:	90c002c4 	addi	r3,r18,11
  80ae3c:	01000584 	movi	r4,22
  80ae40:	acfffe04 	addi	r19,r21,-8
  80ae44:	1420703a 	and	r16,r2,r16
  80ae48:	20c0332e 	bgeu	r4,r3,80af18 <_realloc_r+0x128>
  80ae4c:	047ffe04 	movi	r17,-8
  80ae50:	1c62703a 	and	r17,r3,r17
  80ae54:	8807883a 	mov	r3,r17
  80ae58:	88005816 	blt	r17,zero,80afbc <_realloc_r+0x1cc>
  80ae5c:	8c805736 	bltu	r17,r18,80afbc <_realloc_r+0x1cc>
  80ae60:	80c0300e 	bge	r16,r3,80af24 <_realloc_r+0x134>
  80ae64:	07002074 	movhi	fp,129
  80ae68:	e7145204 	addi	fp,fp,20808
  80ae6c:	e1c00217 	ldw	r7,8(fp)
  80ae70:	9c09883a 	add	r4,r19,r16
  80ae74:	22000117 	ldw	r8,4(r4)
  80ae78:	21c06326 	beq	r4,r7,80b008 <_realloc_r+0x218>
  80ae7c:	017fff84 	movi	r5,-2
  80ae80:	414a703a 	and	r5,r8,r5
  80ae84:	214b883a 	add	r5,r4,r5
  80ae88:	29800117 	ldw	r6,4(r5)
  80ae8c:	3180004c 	andi	r6,r6,1
  80ae90:	30003f26 	beq	r6,zero,80af90 <_realloc_r+0x1a0>
  80ae94:	1080004c 	andi	r2,r2,1
  80ae98:	10008326 	beq	r2,zero,80b0a8 <_realloc_r+0x2b8>
  80ae9c:	900b883a 	mov	r5,r18
  80aea0:	a009883a 	mov	r4,r20
  80aea4:	0803ac40 	call	803ac4 <_malloc_r>
  80aea8:	1025883a 	mov	r18,r2
  80aeac:	10011e26 	beq	r2,zero,80b328 <_realloc_r+0x538>
  80aeb0:	a93fff17 	ldw	r4,-4(r21)
  80aeb4:	10fffe04 	addi	r3,r2,-8
  80aeb8:	00bfff84 	movi	r2,-2
  80aebc:	2084703a 	and	r2,r4,r2
  80aec0:	9885883a 	add	r2,r19,r2
  80aec4:	1880ee26 	beq	r3,r2,80b280 <_realloc_r+0x490>
  80aec8:	81bfff04 	addi	r6,r16,-4
  80aecc:	00800904 	movi	r2,36
  80aed0:	1180b836 	bltu	r2,r6,80b1b4 <_realloc_r+0x3c4>
  80aed4:	00c004c4 	movi	r3,19
  80aed8:	19809636 	bltu	r3,r6,80b134 <_realloc_r+0x344>
  80aedc:	9005883a 	mov	r2,r18
  80aee0:	a807883a 	mov	r3,r21
  80aee4:	19000017 	ldw	r4,0(r3)
  80aee8:	11000015 	stw	r4,0(r2)
  80aeec:	19000117 	ldw	r4,4(r3)
  80aef0:	11000115 	stw	r4,4(r2)
  80aef4:	18c00217 	ldw	r3,8(r3)
  80aef8:	10c00215 	stw	r3,8(r2)
  80aefc:	a80b883a 	mov	r5,r21
  80af00:	a009883a 	mov	r4,r20
  80af04:	0808f280 	call	808f28 <_free_r>
  80af08:	a009883a 	mov	r4,r20
  80af0c:	0810b940 	call	810b94 <__malloc_unlock>
  80af10:	9005883a 	mov	r2,r18
  80af14:	00001206 	br	80af60 <_realloc_r+0x170>
  80af18:	00c00404 	movi	r3,16
  80af1c:	1823883a 	mov	r17,r3
  80af20:	003fce06 	br	80ae5c <__alt_mem_onchip_mem+0xff78ae5c>
  80af24:	a825883a 	mov	r18,r21
  80af28:	8445c83a 	sub	r2,r16,r17
  80af2c:	00c003c4 	movi	r3,15
  80af30:	18802636 	bltu	r3,r2,80afcc <_realloc_r+0x1dc>
  80af34:	99800117 	ldw	r6,4(r19)
  80af38:	9c07883a 	add	r3,r19,r16
  80af3c:	3180004c 	andi	r6,r6,1
  80af40:	3420b03a 	or	r16,r6,r16
  80af44:	9c000115 	stw	r16,4(r19)
  80af48:	18800117 	ldw	r2,4(r3)
  80af4c:	10800054 	ori	r2,r2,1
  80af50:	18800115 	stw	r2,4(r3)
  80af54:	a009883a 	mov	r4,r20
  80af58:	0810b940 	call	810b94 <__malloc_unlock>
  80af5c:	9005883a 	mov	r2,r18
  80af60:	dfc00917 	ldw	ra,36(sp)
  80af64:	df000817 	ldw	fp,32(sp)
  80af68:	ddc00717 	ldw	r23,28(sp)
  80af6c:	dd800617 	ldw	r22,24(sp)
  80af70:	dd400517 	ldw	r21,20(sp)
  80af74:	dd000417 	ldw	r20,16(sp)
  80af78:	dcc00317 	ldw	r19,12(sp)
  80af7c:	dc800217 	ldw	r18,8(sp)
  80af80:	dc400117 	ldw	r17,4(sp)
  80af84:	dc000017 	ldw	r16,0(sp)
  80af88:	dec00a04 	addi	sp,sp,40
  80af8c:	f800283a 	ret
  80af90:	017fff04 	movi	r5,-4
  80af94:	414a703a 	and	r5,r8,r5
  80af98:	814d883a 	add	r6,r16,r5
  80af9c:	30c01f16 	blt	r6,r3,80b01c <_realloc_r+0x22c>
  80afa0:	20800317 	ldw	r2,12(r4)
  80afa4:	20c00217 	ldw	r3,8(r4)
  80afa8:	a825883a 	mov	r18,r21
  80afac:	3021883a 	mov	r16,r6
  80afb0:	18800315 	stw	r2,12(r3)
  80afb4:	10c00215 	stw	r3,8(r2)
  80afb8:	003fdb06 	br	80af28 <__alt_mem_onchip_mem+0xff78af28>
  80afbc:	00800304 	movi	r2,12
  80afc0:	a0800015 	stw	r2,0(r20)
  80afc4:	0005883a 	mov	r2,zero
  80afc8:	003fe506 	br	80af60 <__alt_mem_onchip_mem+0xff78af60>
  80afcc:	98c00117 	ldw	r3,4(r19)
  80afd0:	9c4b883a 	add	r5,r19,r17
  80afd4:	11000054 	ori	r4,r2,1
  80afd8:	18c0004c 	andi	r3,r3,1
  80afdc:	1c62b03a 	or	r17,r3,r17
  80afe0:	9c400115 	stw	r17,4(r19)
  80afe4:	29000115 	stw	r4,4(r5)
  80afe8:	2885883a 	add	r2,r5,r2
  80afec:	10c00117 	ldw	r3,4(r2)
  80aff0:	29400204 	addi	r5,r5,8
  80aff4:	a009883a 	mov	r4,r20
  80aff8:	18c00054 	ori	r3,r3,1
  80affc:	10c00115 	stw	r3,4(r2)
  80b000:	0808f280 	call	808f28 <_free_r>
  80b004:	003fd306 	br	80af54 <__alt_mem_onchip_mem+0xff78af54>
  80b008:	017fff04 	movi	r5,-4
  80b00c:	414a703a 	and	r5,r8,r5
  80b010:	89800404 	addi	r6,r17,16
  80b014:	8151883a 	add	r8,r16,r5
  80b018:	4180590e 	bge	r8,r6,80b180 <_realloc_r+0x390>
  80b01c:	1080004c 	andi	r2,r2,1
  80b020:	103f9e1e 	bne	r2,zero,80ae9c <__alt_mem_onchip_mem+0xff78ae9c>
  80b024:	adbffe17 	ldw	r22,-8(r21)
  80b028:	00bfff04 	movi	r2,-4
  80b02c:	9dadc83a 	sub	r22,r19,r22
  80b030:	b1800117 	ldw	r6,4(r22)
  80b034:	3084703a 	and	r2,r6,r2
  80b038:	20002026 	beq	r4,zero,80b0bc <_realloc_r+0x2cc>
  80b03c:	80af883a 	add	r23,r16,r2
  80b040:	b96f883a 	add	r23,r23,r5
  80b044:	21c05f26 	beq	r4,r7,80b1c4 <_realloc_r+0x3d4>
  80b048:	b8c01c16 	blt	r23,r3,80b0bc <_realloc_r+0x2cc>
  80b04c:	20800317 	ldw	r2,12(r4)
  80b050:	20c00217 	ldw	r3,8(r4)
  80b054:	81bfff04 	addi	r6,r16,-4
  80b058:	01000904 	movi	r4,36
  80b05c:	18800315 	stw	r2,12(r3)
  80b060:	10c00215 	stw	r3,8(r2)
  80b064:	b0c00217 	ldw	r3,8(r22)
  80b068:	b0800317 	ldw	r2,12(r22)
  80b06c:	b4800204 	addi	r18,r22,8
  80b070:	18800315 	stw	r2,12(r3)
  80b074:	10c00215 	stw	r3,8(r2)
  80b078:	21801b36 	bltu	r4,r6,80b0e8 <_realloc_r+0x2f8>
  80b07c:	008004c4 	movi	r2,19
  80b080:	1180352e 	bgeu	r2,r6,80b158 <_realloc_r+0x368>
  80b084:	a8800017 	ldw	r2,0(r21)
  80b088:	b0800215 	stw	r2,8(r22)
  80b08c:	a8800117 	ldw	r2,4(r21)
  80b090:	b0800315 	stw	r2,12(r22)
  80b094:	008006c4 	movi	r2,27
  80b098:	11807f36 	bltu	r2,r6,80b298 <_realloc_r+0x4a8>
  80b09c:	b0800404 	addi	r2,r22,16
  80b0a0:	ad400204 	addi	r21,r21,8
  80b0a4:	00002d06 	br	80b15c <_realloc_r+0x36c>
  80b0a8:	adbffe17 	ldw	r22,-8(r21)
  80b0ac:	00bfff04 	movi	r2,-4
  80b0b0:	9dadc83a 	sub	r22,r19,r22
  80b0b4:	b1000117 	ldw	r4,4(r22)
  80b0b8:	2084703a 	and	r2,r4,r2
  80b0bc:	b03f7726 	beq	r22,zero,80ae9c <__alt_mem_onchip_mem+0xff78ae9c>
  80b0c0:	80af883a 	add	r23,r16,r2
  80b0c4:	b8ff7516 	blt	r23,r3,80ae9c <__alt_mem_onchip_mem+0xff78ae9c>
  80b0c8:	b0800317 	ldw	r2,12(r22)
  80b0cc:	b0c00217 	ldw	r3,8(r22)
  80b0d0:	81bfff04 	addi	r6,r16,-4
  80b0d4:	01000904 	movi	r4,36
  80b0d8:	18800315 	stw	r2,12(r3)
  80b0dc:	10c00215 	stw	r3,8(r2)
  80b0e0:	b4800204 	addi	r18,r22,8
  80b0e4:	21bfe52e 	bgeu	r4,r6,80b07c <__alt_mem_onchip_mem+0xff78b07c>
  80b0e8:	a80b883a 	mov	r5,r21
  80b0ec:	9009883a 	mov	r4,r18
  80b0f0:	0809c380 	call	809c38 <memmove>
  80b0f4:	b821883a 	mov	r16,r23
  80b0f8:	b027883a 	mov	r19,r22
  80b0fc:	003f8a06 	br	80af28 <__alt_mem_onchip_mem+0xff78af28>
  80b100:	300b883a 	mov	r5,r6
  80b104:	dfc00917 	ldw	ra,36(sp)
  80b108:	df000817 	ldw	fp,32(sp)
  80b10c:	ddc00717 	ldw	r23,28(sp)
  80b110:	dd800617 	ldw	r22,24(sp)
  80b114:	dd400517 	ldw	r21,20(sp)
  80b118:	dd000417 	ldw	r20,16(sp)
  80b11c:	dcc00317 	ldw	r19,12(sp)
  80b120:	dc800217 	ldw	r18,8(sp)
  80b124:	dc400117 	ldw	r17,4(sp)
  80b128:	dc000017 	ldw	r16,0(sp)
  80b12c:	dec00a04 	addi	sp,sp,40
  80b130:	0803ac41 	jmpi	803ac4 <_malloc_r>
  80b134:	a8c00017 	ldw	r3,0(r21)
  80b138:	90c00015 	stw	r3,0(r18)
  80b13c:	a8c00117 	ldw	r3,4(r21)
  80b140:	90c00115 	stw	r3,4(r18)
  80b144:	00c006c4 	movi	r3,27
  80b148:	19804536 	bltu	r3,r6,80b260 <_realloc_r+0x470>
  80b14c:	90800204 	addi	r2,r18,8
  80b150:	a8c00204 	addi	r3,r21,8
  80b154:	003f6306 	br	80aee4 <__alt_mem_onchip_mem+0xff78aee4>
  80b158:	9005883a 	mov	r2,r18
  80b15c:	a8c00017 	ldw	r3,0(r21)
  80b160:	b821883a 	mov	r16,r23
  80b164:	b027883a 	mov	r19,r22
  80b168:	10c00015 	stw	r3,0(r2)
  80b16c:	a8c00117 	ldw	r3,4(r21)
  80b170:	10c00115 	stw	r3,4(r2)
  80b174:	a8c00217 	ldw	r3,8(r21)
  80b178:	10c00215 	stw	r3,8(r2)
  80b17c:	003f6a06 	br	80af28 <__alt_mem_onchip_mem+0xff78af28>
  80b180:	9c67883a 	add	r19,r19,r17
  80b184:	4445c83a 	sub	r2,r8,r17
  80b188:	e4c00215 	stw	r19,8(fp)
  80b18c:	10800054 	ori	r2,r2,1
  80b190:	98800115 	stw	r2,4(r19)
  80b194:	a8bfff17 	ldw	r2,-4(r21)
  80b198:	a009883a 	mov	r4,r20
  80b19c:	1080004c 	andi	r2,r2,1
  80b1a0:	1462b03a 	or	r17,r2,r17
  80b1a4:	ac7fff15 	stw	r17,-4(r21)
  80b1a8:	0810b940 	call	810b94 <__malloc_unlock>
  80b1ac:	a805883a 	mov	r2,r21
  80b1b0:	003f6b06 	br	80af60 <__alt_mem_onchip_mem+0xff78af60>
  80b1b4:	a80b883a 	mov	r5,r21
  80b1b8:	9009883a 	mov	r4,r18
  80b1bc:	0809c380 	call	809c38 <memmove>
  80b1c0:	003f4e06 	br	80aefc <__alt_mem_onchip_mem+0xff78aefc>
  80b1c4:	89000404 	addi	r4,r17,16
  80b1c8:	b93fbc16 	blt	r23,r4,80b0bc <__alt_mem_onchip_mem+0xff78b0bc>
  80b1cc:	b0800317 	ldw	r2,12(r22)
  80b1d0:	b0c00217 	ldw	r3,8(r22)
  80b1d4:	81bfff04 	addi	r6,r16,-4
  80b1d8:	01000904 	movi	r4,36
  80b1dc:	18800315 	stw	r2,12(r3)
  80b1e0:	10c00215 	stw	r3,8(r2)
  80b1e4:	b4800204 	addi	r18,r22,8
  80b1e8:	21804336 	bltu	r4,r6,80b2f8 <_realloc_r+0x508>
  80b1ec:	008004c4 	movi	r2,19
  80b1f0:	11803f2e 	bgeu	r2,r6,80b2f0 <_realloc_r+0x500>
  80b1f4:	a8800017 	ldw	r2,0(r21)
  80b1f8:	b0800215 	stw	r2,8(r22)
  80b1fc:	a8800117 	ldw	r2,4(r21)
  80b200:	b0800315 	stw	r2,12(r22)
  80b204:	008006c4 	movi	r2,27
  80b208:	11803f36 	bltu	r2,r6,80b308 <_realloc_r+0x518>
  80b20c:	b0800404 	addi	r2,r22,16
  80b210:	ad400204 	addi	r21,r21,8
  80b214:	a8c00017 	ldw	r3,0(r21)
  80b218:	10c00015 	stw	r3,0(r2)
  80b21c:	a8c00117 	ldw	r3,4(r21)
  80b220:	10c00115 	stw	r3,4(r2)
  80b224:	a8c00217 	ldw	r3,8(r21)
  80b228:	10c00215 	stw	r3,8(r2)
  80b22c:	b447883a 	add	r3,r22,r17
  80b230:	bc45c83a 	sub	r2,r23,r17
  80b234:	e0c00215 	stw	r3,8(fp)
  80b238:	10800054 	ori	r2,r2,1
  80b23c:	18800115 	stw	r2,4(r3)
  80b240:	b0800117 	ldw	r2,4(r22)
  80b244:	a009883a 	mov	r4,r20
  80b248:	1080004c 	andi	r2,r2,1
  80b24c:	1462b03a 	or	r17,r2,r17
  80b250:	b4400115 	stw	r17,4(r22)
  80b254:	0810b940 	call	810b94 <__malloc_unlock>
  80b258:	9005883a 	mov	r2,r18
  80b25c:	003f4006 	br	80af60 <__alt_mem_onchip_mem+0xff78af60>
  80b260:	a8c00217 	ldw	r3,8(r21)
  80b264:	90c00215 	stw	r3,8(r18)
  80b268:	a8c00317 	ldw	r3,12(r21)
  80b26c:	90c00315 	stw	r3,12(r18)
  80b270:	30801126 	beq	r6,r2,80b2b8 <_realloc_r+0x4c8>
  80b274:	90800404 	addi	r2,r18,16
  80b278:	a8c00404 	addi	r3,r21,16
  80b27c:	003f1906 	br	80aee4 <__alt_mem_onchip_mem+0xff78aee4>
  80b280:	90ffff17 	ldw	r3,-4(r18)
  80b284:	00bfff04 	movi	r2,-4
  80b288:	a825883a 	mov	r18,r21
  80b28c:	1884703a 	and	r2,r3,r2
  80b290:	80a1883a 	add	r16,r16,r2
  80b294:	003f2406 	br	80af28 <__alt_mem_onchip_mem+0xff78af28>
  80b298:	a8800217 	ldw	r2,8(r21)
  80b29c:	b0800415 	stw	r2,16(r22)
  80b2a0:	a8800317 	ldw	r2,12(r21)
  80b2a4:	b0800515 	stw	r2,20(r22)
  80b2a8:	31000a26 	beq	r6,r4,80b2d4 <_realloc_r+0x4e4>
  80b2ac:	b0800604 	addi	r2,r22,24
  80b2b0:	ad400404 	addi	r21,r21,16
  80b2b4:	003fa906 	br	80b15c <__alt_mem_onchip_mem+0xff78b15c>
  80b2b8:	a9000417 	ldw	r4,16(r21)
  80b2bc:	90800604 	addi	r2,r18,24
  80b2c0:	a8c00604 	addi	r3,r21,24
  80b2c4:	91000415 	stw	r4,16(r18)
  80b2c8:	a9000517 	ldw	r4,20(r21)
  80b2cc:	91000515 	stw	r4,20(r18)
  80b2d0:	003f0406 	br	80aee4 <__alt_mem_onchip_mem+0xff78aee4>
  80b2d4:	a8c00417 	ldw	r3,16(r21)
  80b2d8:	ad400604 	addi	r21,r21,24
  80b2dc:	b0800804 	addi	r2,r22,32
  80b2e0:	b0c00615 	stw	r3,24(r22)
  80b2e4:	a8ffff17 	ldw	r3,-4(r21)
  80b2e8:	b0c00715 	stw	r3,28(r22)
  80b2ec:	003f9b06 	br	80b15c <__alt_mem_onchip_mem+0xff78b15c>
  80b2f0:	9005883a 	mov	r2,r18
  80b2f4:	003fc706 	br	80b214 <__alt_mem_onchip_mem+0xff78b214>
  80b2f8:	a80b883a 	mov	r5,r21
  80b2fc:	9009883a 	mov	r4,r18
  80b300:	0809c380 	call	809c38 <memmove>
  80b304:	003fc906 	br	80b22c <__alt_mem_onchip_mem+0xff78b22c>
  80b308:	a8800217 	ldw	r2,8(r21)
  80b30c:	b0800415 	stw	r2,16(r22)
  80b310:	a8800317 	ldw	r2,12(r21)
  80b314:	b0800515 	stw	r2,20(r22)
  80b318:	31000726 	beq	r6,r4,80b338 <_realloc_r+0x548>
  80b31c:	b0800604 	addi	r2,r22,24
  80b320:	ad400404 	addi	r21,r21,16
  80b324:	003fbb06 	br	80b214 <__alt_mem_onchip_mem+0xff78b214>
  80b328:	a009883a 	mov	r4,r20
  80b32c:	0810b940 	call	810b94 <__malloc_unlock>
  80b330:	0005883a 	mov	r2,zero
  80b334:	003f0a06 	br	80af60 <__alt_mem_onchip_mem+0xff78af60>
  80b338:	a8c00417 	ldw	r3,16(r21)
  80b33c:	ad400604 	addi	r21,r21,24
  80b340:	b0800804 	addi	r2,r22,32
  80b344:	b0c00615 	stw	r3,24(r22)
  80b348:	a8ffff17 	ldw	r3,-4(r21)
  80b34c:	b0c00715 	stw	r3,28(r22)
  80b350:	003fb006 	br	80b214 <__alt_mem_onchip_mem+0xff78b214>

0080b354 <__fpclassifyd>:
  80b354:	00a00034 	movhi	r2,32768
  80b358:	10bfffc4 	addi	r2,r2,-1
  80b35c:	2884703a 	and	r2,r5,r2
  80b360:	10000726 	beq	r2,zero,80b380 <__fpclassifyd+0x2c>
  80b364:	00fffc34 	movhi	r3,65520
  80b368:	019ff834 	movhi	r6,32736
  80b36c:	28c7883a 	add	r3,r5,r3
  80b370:	31bfffc4 	addi	r6,r6,-1
  80b374:	30c00536 	bltu	r6,r3,80b38c <__fpclassifyd+0x38>
  80b378:	00800104 	movi	r2,4
  80b37c:	f800283a 	ret
  80b380:	2000021e 	bne	r4,zero,80b38c <__fpclassifyd+0x38>
  80b384:	00800084 	movi	r2,2
  80b388:	f800283a 	ret
  80b38c:	00dffc34 	movhi	r3,32752
  80b390:	019ff834 	movhi	r6,32736
  80b394:	28cb883a 	add	r5,r5,r3
  80b398:	31bfffc4 	addi	r6,r6,-1
  80b39c:	317ff62e 	bgeu	r6,r5,80b378 <__alt_mem_onchip_mem+0xff78b378>
  80b3a0:	01400434 	movhi	r5,16
  80b3a4:	297fffc4 	addi	r5,r5,-1
  80b3a8:	28800236 	bltu	r5,r2,80b3b4 <__fpclassifyd+0x60>
  80b3ac:	008000c4 	movi	r2,3
  80b3b0:	f800283a 	ret
  80b3b4:	10c00226 	beq	r2,r3,80b3c0 <__fpclassifyd+0x6c>
  80b3b8:	0005883a 	mov	r2,zero
  80b3bc:	f800283a 	ret
  80b3c0:	2005003a 	cmpeq	r2,r4,zero
  80b3c4:	f800283a 	ret

0080b3c8 <strcmp>:
  80b3c8:	2144b03a 	or	r2,r4,r5
  80b3cc:	108000cc 	andi	r2,r2,3
  80b3d0:	1000171e 	bne	r2,zero,80b430 <strcmp+0x68>
  80b3d4:	20800017 	ldw	r2,0(r4)
  80b3d8:	28c00017 	ldw	r3,0(r5)
  80b3dc:	10c0141e 	bne	r2,r3,80b430 <strcmp+0x68>
  80b3e0:	027fbff4 	movhi	r9,65279
  80b3e4:	4a7fbfc4 	addi	r9,r9,-257
  80b3e8:	0086303a 	nor	r3,zero,r2
  80b3ec:	02202074 	movhi	r8,32897
  80b3f0:	1245883a 	add	r2,r2,r9
  80b3f4:	42202004 	addi	r8,r8,-32640
  80b3f8:	10c4703a 	and	r2,r2,r3
  80b3fc:	1204703a 	and	r2,r2,r8
  80b400:	10000226 	beq	r2,zero,80b40c <strcmp+0x44>
  80b404:	00002306 	br	80b494 <strcmp+0xcc>
  80b408:	1000221e 	bne	r2,zero,80b494 <strcmp+0xcc>
  80b40c:	21000104 	addi	r4,r4,4
  80b410:	20c00017 	ldw	r3,0(r4)
  80b414:	29400104 	addi	r5,r5,4
  80b418:	29800017 	ldw	r6,0(r5)
  80b41c:	1a4f883a 	add	r7,r3,r9
  80b420:	00c4303a 	nor	r2,zero,r3
  80b424:	3884703a 	and	r2,r7,r2
  80b428:	1204703a 	and	r2,r2,r8
  80b42c:	19bff626 	beq	r3,r6,80b408 <__alt_mem_onchip_mem+0xff78b408>
  80b430:	20800003 	ldbu	r2,0(r4)
  80b434:	10c03fcc 	andi	r3,r2,255
  80b438:	18c0201c 	xori	r3,r3,128
  80b43c:	18ffe004 	addi	r3,r3,-128
  80b440:	18000c26 	beq	r3,zero,80b474 <strcmp+0xac>
  80b444:	29800007 	ldb	r6,0(r5)
  80b448:	19800326 	beq	r3,r6,80b458 <strcmp+0x90>
  80b44c:	00001306 	br	80b49c <strcmp+0xd4>
  80b450:	29800007 	ldb	r6,0(r5)
  80b454:	11800b1e 	bne	r2,r6,80b484 <strcmp+0xbc>
  80b458:	21000044 	addi	r4,r4,1
  80b45c:	20c00003 	ldbu	r3,0(r4)
  80b460:	29400044 	addi	r5,r5,1
  80b464:	18803fcc 	andi	r2,r3,255
  80b468:	1080201c 	xori	r2,r2,128
  80b46c:	10bfe004 	addi	r2,r2,-128
  80b470:	103ff71e 	bne	r2,zero,80b450 <__alt_mem_onchip_mem+0xff78b450>
  80b474:	0007883a 	mov	r3,zero
  80b478:	28800003 	ldbu	r2,0(r5)
  80b47c:	1885c83a 	sub	r2,r3,r2
  80b480:	f800283a 	ret
  80b484:	28800003 	ldbu	r2,0(r5)
  80b488:	18c03fcc 	andi	r3,r3,255
  80b48c:	1885c83a 	sub	r2,r3,r2
  80b490:	f800283a 	ret
  80b494:	0005883a 	mov	r2,zero
  80b498:	f800283a 	ret
  80b49c:	10c03fcc 	andi	r3,r2,255
  80b4a0:	003ff506 	br	80b478 <__alt_mem_onchip_mem+0xff78b478>

0080b4a4 <__sprint_r.part.0>:
  80b4a4:	28801917 	ldw	r2,100(r5)
  80b4a8:	defff604 	addi	sp,sp,-40
  80b4ac:	dd400515 	stw	r21,20(sp)
  80b4b0:	dfc00915 	stw	ra,36(sp)
  80b4b4:	df000815 	stw	fp,32(sp)
  80b4b8:	ddc00715 	stw	r23,28(sp)
  80b4bc:	dd800615 	stw	r22,24(sp)
  80b4c0:	dd000415 	stw	r20,16(sp)
  80b4c4:	dcc00315 	stw	r19,12(sp)
  80b4c8:	dc800215 	stw	r18,8(sp)
  80b4cc:	dc400115 	stw	r17,4(sp)
  80b4d0:	dc000015 	stw	r16,0(sp)
  80b4d4:	1088000c 	andi	r2,r2,8192
  80b4d8:	302b883a 	mov	r21,r6
  80b4dc:	10002e26 	beq	r2,zero,80b598 <__sprint_r.part.0+0xf4>
  80b4e0:	30800217 	ldw	r2,8(r6)
  80b4e4:	35800017 	ldw	r22,0(r6)
  80b4e8:	10002926 	beq	r2,zero,80b590 <__sprint_r.part.0+0xec>
  80b4ec:	2827883a 	mov	r19,r5
  80b4f0:	2029883a 	mov	r20,r4
  80b4f4:	b5c00104 	addi	r23,r22,4
  80b4f8:	04bfffc4 	movi	r18,-1
  80b4fc:	bc400017 	ldw	r17,0(r23)
  80b500:	b4000017 	ldw	r16,0(r22)
  80b504:	0039883a 	mov	fp,zero
  80b508:	8822d0ba 	srli	r17,r17,2
  80b50c:	8800031e 	bne	r17,zero,80b51c <__sprint_r.part.0+0x78>
  80b510:	00001806 	br	80b574 <__sprint_r.part.0+0xd0>
  80b514:	84000104 	addi	r16,r16,4
  80b518:	8f001526 	beq	r17,fp,80b570 <__sprint_r.part.0+0xcc>
  80b51c:	81400017 	ldw	r5,0(r16)
  80b520:	980d883a 	mov	r6,r19
  80b524:	a009883a 	mov	r4,r20
  80b528:	080ce180 	call	80ce18 <_fputwc_r>
  80b52c:	e7000044 	addi	fp,fp,1
  80b530:	14bff81e 	bne	r2,r18,80b514 <__alt_mem_onchip_mem+0xff78b514>
  80b534:	9005883a 	mov	r2,r18
  80b538:	a8000215 	stw	zero,8(r21)
  80b53c:	a8000115 	stw	zero,4(r21)
  80b540:	dfc00917 	ldw	ra,36(sp)
  80b544:	df000817 	ldw	fp,32(sp)
  80b548:	ddc00717 	ldw	r23,28(sp)
  80b54c:	dd800617 	ldw	r22,24(sp)
  80b550:	dd400517 	ldw	r21,20(sp)
  80b554:	dd000417 	ldw	r20,16(sp)
  80b558:	dcc00317 	ldw	r19,12(sp)
  80b55c:	dc800217 	ldw	r18,8(sp)
  80b560:	dc400117 	ldw	r17,4(sp)
  80b564:	dc000017 	ldw	r16,0(sp)
  80b568:	dec00a04 	addi	sp,sp,40
  80b56c:	f800283a 	ret
  80b570:	a8800217 	ldw	r2,8(r21)
  80b574:	8c63883a 	add	r17,r17,r17
  80b578:	8c63883a 	add	r17,r17,r17
  80b57c:	1445c83a 	sub	r2,r2,r17
  80b580:	a8800215 	stw	r2,8(r21)
  80b584:	b5800204 	addi	r22,r22,8
  80b588:	bdc00204 	addi	r23,r23,8
  80b58c:	103fdb1e 	bne	r2,zero,80b4fc <__alt_mem_onchip_mem+0xff78b4fc>
  80b590:	0005883a 	mov	r2,zero
  80b594:	003fe806 	br	80b538 <__alt_mem_onchip_mem+0xff78b538>
  80b598:	08092380 	call	809238 <__sfvwrite_r>
  80b59c:	003fe606 	br	80b538 <__alt_mem_onchip_mem+0xff78b538>

0080b5a0 <__sprint_r>:
  80b5a0:	30c00217 	ldw	r3,8(r6)
  80b5a4:	18000126 	beq	r3,zero,80b5ac <__sprint_r+0xc>
  80b5a8:	080b4a41 	jmpi	80b4a4 <__sprint_r.part.0>
  80b5ac:	30000115 	stw	zero,4(r6)
  80b5b0:	0005883a 	mov	r2,zero
  80b5b4:	f800283a 	ret

0080b5b8 <___vfiprintf_internal_r>:
  80b5b8:	deffc904 	addi	sp,sp,-220
  80b5bc:	df003515 	stw	fp,212(sp)
  80b5c0:	dd003115 	stw	r20,196(sp)
  80b5c4:	dfc03615 	stw	ra,216(sp)
  80b5c8:	ddc03415 	stw	r23,208(sp)
  80b5cc:	dd803315 	stw	r22,204(sp)
  80b5d0:	dd403215 	stw	r21,200(sp)
  80b5d4:	dcc03015 	stw	r19,192(sp)
  80b5d8:	dc802f15 	stw	r18,188(sp)
  80b5dc:	dc402e15 	stw	r17,184(sp)
  80b5e0:	dc002d15 	stw	r16,180(sp)
  80b5e4:	d9002015 	stw	r4,128(sp)
  80b5e8:	d9c02215 	stw	r7,136(sp)
  80b5ec:	2829883a 	mov	r20,r5
  80b5f0:	3039883a 	mov	fp,r6
  80b5f4:	20000226 	beq	r4,zero,80b600 <___vfiprintf_internal_r+0x48>
  80b5f8:	20800e17 	ldw	r2,56(r4)
  80b5fc:	1000cf26 	beq	r2,zero,80b93c <___vfiprintf_internal_r+0x384>
  80b600:	a080030b 	ldhu	r2,12(r20)
  80b604:	10c8000c 	andi	r3,r2,8192
  80b608:	1800061e 	bne	r3,zero,80b624 <___vfiprintf_internal_r+0x6c>
  80b60c:	a1001917 	ldw	r4,100(r20)
  80b610:	00f7ffc4 	movi	r3,-8193
  80b614:	10880014 	ori	r2,r2,8192
  80b618:	20c6703a 	and	r3,r4,r3
  80b61c:	a080030d 	sth	r2,12(r20)
  80b620:	a0c01915 	stw	r3,100(r20)
  80b624:	10c0020c 	andi	r3,r2,8
  80b628:	1800a926 	beq	r3,zero,80b8d0 <___vfiprintf_internal_r+0x318>
  80b62c:	a0c00417 	ldw	r3,16(r20)
  80b630:	1800a726 	beq	r3,zero,80b8d0 <___vfiprintf_internal_r+0x318>
  80b634:	1080068c 	andi	r2,r2,26
  80b638:	00c00284 	movi	r3,10
  80b63c:	10c0ac26 	beq	r2,r3,80b8f0 <___vfiprintf_internal_r+0x338>
  80b640:	da801a04 	addi	r10,sp,104
  80b644:	da801e15 	stw	r10,120(sp)
  80b648:	d8801e17 	ldw	r2,120(sp)
  80b64c:	da8019c4 	addi	r10,sp,103
  80b650:	05802074 	movhi	r22,129
  80b654:	05c02074 	movhi	r23,129
  80b658:	da801f15 	stw	r10,124(sp)
  80b65c:	1295c83a 	sub	r10,r2,r10
  80b660:	b5925404 	addi	r22,r22,18768
  80b664:	bdd25004 	addi	r23,r23,18752
  80b668:	dec01a15 	stw	sp,104(sp)
  80b66c:	d8001c15 	stw	zero,112(sp)
  80b670:	d8001b15 	stw	zero,108(sp)
  80b674:	d8002615 	stw	zero,152(sp)
  80b678:	d8002315 	stw	zero,140(sp)
  80b67c:	da802715 	stw	r10,156(sp)
  80b680:	d811883a 	mov	r8,sp
  80b684:	dd002115 	stw	r20,132(sp)
  80b688:	e021883a 	mov	r16,fp
  80b68c:	80800007 	ldb	r2,0(r16)
  80b690:	1003ea26 	beq	r2,zero,80c63c <___vfiprintf_internal_r+0x1084>
  80b694:	00c00944 	movi	r3,37
  80b698:	8025883a 	mov	r18,r16
  80b69c:	10c0021e 	bne	r2,r3,80b6a8 <___vfiprintf_internal_r+0xf0>
  80b6a0:	00001606 	br	80b6fc <___vfiprintf_internal_r+0x144>
  80b6a4:	10c00326 	beq	r2,r3,80b6b4 <___vfiprintf_internal_r+0xfc>
  80b6a8:	94800044 	addi	r18,r18,1
  80b6ac:	90800007 	ldb	r2,0(r18)
  80b6b0:	103ffc1e 	bne	r2,zero,80b6a4 <__alt_mem_onchip_mem+0xff78b6a4>
  80b6b4:	9423c83a 	sub	r17,r18,r16
  80b6b8:	88001026 	beq	r17,zero,80b6fc <___vfiprintf_internal_r+0x144>
  80b6bc:	d8c01c17 	ldw	r3,112(sp)
  80b6c0:	d8801b17 	ldw	r2,108(sp)
  80b6c4:	44000015 	stw	r16,0(r8)
  80b6c8:	88c7883a 	add	r3,r17,r3
  80b6cc:	10800044 	addi	r2,r2,1
  80b6d0:	44400115 	stw	r17,4(r8)
  80b6d4:	d8c01c15 	stw	r3,112(sp)
  80b6d8:	d8801b15 	stw	r2,108(sp)
  80b6dc:	010001c4 	movi	r4,7
  80b6e0:	2080760e 	bge	r4,r2,80b8bc <___vfiprintf_internal_r+0x304>
  80b6e4:	1803821e 	bne	r3,zero,80c4f0 <___vfiprintf_internal_r+0xf38>
  80b6e8:	da802317 	ldw	r10,140(sp)
  80b6ec:	d8001b15 	stw	zero,108(sp)
  80b6f0:	d811883a 	mov	r8,sp
  80b6f4:	5455883a 	add	r10,r10,r17
  80b6f8:	da802315 	stw	r10,140(sp)
  80b6fc:	90800007 	ldb	r2,0(r18)
  80b700:	10044626 	beq	r2,zero,80c81c <___vfiprintf_internal_r+0x1264>
  80b704:	90c00047 	ldb	r3,1(r18)
  80b708:	94000044 	addi	r16,r18,1
  80b70c:	d8001d85 	stb	zero,118(sp)
  80b710:	0009883a 	mov	r4,zero
  80b714:	000f883a 	mov	r7,zero
  80b718:	027fffc4 	movi	r9,-1
  80b71c:	0023883a 	mov	r17,zero
  80b720:	0029883a 	mov	r20,zero
  80b724:	01401604 	movi	r5,88
  80b728:	01800244 	movi	r6,9
  80b72c:	03400a84 	movi	r13,42
  80b730:	03001b04 	movi	r12,108
  80b734:	84000044 	addi	r16,r16,1
  80b738:	18bff804 	addi	r2,r3,-32
  80b73c:	28827336 	bltu	r5,r2,80c10c <___vfiprintf_internal_r+0xb54>
  80b740:	100490ba 	slli	r2,r2,2
  80b744:	02802074 	movhi	r10,129
  80b748:	52add604 	addi	r10,r10,-18600
  80b74c:	1285883a 	add	r2,r2,r10
  80b750:	10800017 	ldw	r2,0(r2)
  80b754:	1000683a 	jmp	r2
  80b758:	0080be40 	call	80be4 <__alt_mem_sdram-0x77f41c>
  80b75c:	0080c10c 	andi	r2,zero,772
  80b760:	0080c10c 	andi	r2,zero,772
  80b764:	0080be60 	cmpeqi	r2,zero,761
  80b768:	0080c10c 	andi	r2,zero,772
  80b76c:	0080c10c 	andi	r2,zero,772
  80b770:	0080c10c 	andi	r2,zero,772
  80b774:	0080c10c 	andi	r2,zero,772
  80b778:	0080c10c 	andi	r2,zero,772
  80b77c:	0080c10c 	andi	r2,zero,772
  80b780:	0080c048 	cmpgei	r2,zero,769
  80b784:	0080c064 	muli	r2,zero,769
  80b788:	0080c10c 	andi	r2,zero,772
  80b78c:	0080b94c 	andi	r2,zero,741
  80b790:	0080c074 	movhi	r2,769
  80b794:	0080c10c 	andi	r2,zero,772
  80b798:	0080be6c 	andhi	r2,zero,761
  80b79c:	0080be78 	rdprs	r2,zero,761
  80b7a0:	0080be78 	rdprs	r2,zero,761
  80b7a4:	0080be78 	rdprs	r2,zero,761
  80b7a8:	0080be78 	rdprs	r2,zero,761
  80b7ac:	0080be78 	rdprs	r2,zero,761
  80b7b0:	0080be78 	rdprs	r2,zero,761
  80b7b4:	0080be78 	rdprs	r2,zero,761
  80b7b8:	0080be78 	rdprs	r2,zero,761
  80b7bc:	0080be78 	rdprs	r2,zero,761
  80b7c0:	0080c10c 	andi	r2,zero,772
  80b7c4:	0080c10c 	andi	r2,zero,772
  80b7c8:	0080c10c 	andi	r2,zero,772
  80b7cc:	0080c10c 	andi	r2,zero,772
  80b7d0:	0080c10c 	andi	r2,zero,772
  80b7d4:	0080c10c 	andi	r2,zero,772
  80b7d8:	0080c10c 	andi	r2,zero,772
  80b7dc:	0080c10c 	andi	r2,zero,772
  80b7e0:	0080c10c 	andi	r2,zero,772
  80b7e4:	0080c10c 	andi	r2,zero,772
  80b7e8:	0080bea4 	muli	r2,zero,762
  80b7ec:	0080c10c 	andi	r2,zero,772
  80b7f0:	0080c10c 	andi	r2,zero,772
  80b7f4:	0080c10c 	andi	r2,zero,772
  80b7f8:	0080c10c 	andi	r2,zero,772
  80b7fc:	0080c10c 	andi	r2,zero,772
  80b800:	0080c10c 	andi	r2,zero,772
  80b804:	0080c10c 	andi	r2,zero,772
  80b808:	0080c10c 	andi	r2,zero,772
  80b80c:	0080c10c 	andi	r2,zero,772
  80b810:	0080c10c 	andi	r2,zero,772
  80b814:	0080bedc 	xori	r2,zero,763
  80b818:	0080c10c 	andi	r2,zero,772
  80b81c:	0080c10c 	andi	r2,zero,772
  80b820:	0080c10c 	andi	r2,zero,772
  80b824:	0080c10c 	andi	r2,zero,772
  80b828:	0080c10c 	andi	r2,zero,772
  80b82c:	0080bf34 	movhi	r2,764
  80b830:	0080c10c 	andi	r2,zero,772
  80b834:	0080c10c 	andi	r2,zero,772
  80b838:	0080bfa4 	muli	r2,zero,766
  80b83c:	0080c10c 	andi	r2,zero,772
  80b840:	0080c10c 	andi	r2,zero,772
  80b844:	0080c10c 	andi	r2,zero,772
  80b848:	0080c10c 	andi	r2,zero,772
  80b84c:	0080c10c 	andi	r2,zero,772
  80b850:	0080c10c 	andi	r2,zero,772
  80b854:	0080c10c 	andi	r2,zero,772
  80b858:	0080c10c 	andi	r2,zero,772
  80b85c:	0080c10c 	andi	r2,zero,772
  80b860:	0080c10c 	andi	r2,zero,772
  80b864:	0080bd50 	cmplti	r2,zero,757
  80b868:	0080bd7c 	xorhi	r2,zero,757
  80b86c:	0080c10c 	andi	r2,zero,772
  80b870:	0080c10c 	andi	r2,zero,772
  80b874:	0080c10c 	andi	r2,zero,772
  80b878:	0080c0b4 	movhi	r2,770
  80b87c:	0080bd7c 	xorhi	r2,zero,757
  80b880:	0080c10c 	andi	r2,zero,772
  80b884:	0080c10c 	andi	r2,zero,772
  80b888:	0080bc10 	cmplti	r2,zero,752
  80b88c:	0080c10c 	andi	r2,zero,772
  80b890:	0080bc20 	cmpeqi	r2,zero,752
  80b894:	0080bc5c 	xori	r2,zero,753
  80b898:	0080b958 	cmpnei	r2,zero,741
  80b89c:	0080bc04 	movi	r2,752
  80b8a0:	0080c10c 	andi	r2,zero,772
  80b8a4:	0080bfe0 	cmpeqi	r2,zero,767
  80b8a8:	0080c10c 	andi	r2,zero,772
  80b8ac:	0080c038 	rdprs	r2,zero,768
  80b8b0:	0080c10c 	andi	r2,zero,772
  80b8b4:	0080c10c 	andi	r2,zero,772
  80b8b8:	0080bcfc 	xorhi	r2,zero,755
  80b8bc:	42000204 	addi	r8,r8,8
  80b8c0:	da802317 	ldw	r10,140(sp)
  80b8c4:	5455883a 	add	r10,r10,r17
  80b8c8:	da802315 	stw	r10,140(sp)
  80b8cc:	003f8b06 	br	80b6fc <__alt_mem_onchip_mem+0xff78b6fc>
  80b8d0:	d9002017 	ldw	r4,128(sp)
  80b8d4:	a00b883a 	mov	r5,r20
  80b8d8:	0806ce00 	call	806ce0 <__swsetup_r>
  80b8dc:	1003b11e 	bne	r2,zero,80c7a4 <___vfiprintf_internal_r+0x11ec>
  80b8e0:	a080030b 	ldhu	r2,12(r20)
  80b8e4:	00c00284 	movi	r3,10
  80b8e8:	1080068c 	andi	r2,r2,26
  80b8ec:	10ff541e 	bne	r2,r3,80b640 <__alt_mem_onchip_mem+0xff78b640>
  80b8f0:	a080038f 	ldh	r2,14(r20)
  80b8f4:	103f5216 	blt	r2,zero,80b640 <__alt_mem_onchip_mem+0xff78b640>
  80b8f8:	d9c02217 	ldw	r7,136(sp)
  80b8fc:	d9002017 	ldw	r4,128(sp)
  80b900:	e00d883a 	mov	r6,fp
  80b904:	a00b883a 	mov	r5,r20
  80b908:	080ca300 	call	80ca30 <__sbprintf>
  80b90c:	dfc03617 	ldw	ra,216(sp)
  80b910:	df003517 	ldw	fp,212(sp)
  80b914:	ddc03417 	ldw	r23,208(sp)
  80b918:	dd803317 	ldw	r22,204(sp)
  80b91c:	dd403217 	ldw	r21,200(sp)
  80b920:	dd003117 	ldw	r20,196(sp)
  80b924:	dcc03017 	ldw	r19,192(sp)
  80b928:	dc802f17 	ldw	r18,188(sp)
  80b92c:	dc402e17 	ldw	r17,184(sp)
  80b930:	dc002d17 	ldw	r16,180(sp)
  80b934:	dec03704 	addi	sp,sp,220
  80b938:	f800283a 	ret
  80b93c:	0808d080 	call	808d08 <__sinit>
  80b940:	003f2f06 	br	80b600 <__alt_mem_onchip_mem+0xff78b600>
  80b944:	0463c83a 	sub	r17,zero,r17
  80b948:	d8802215 	stw	r2,136(sp)
  80b94c:	a5000114 	ori	r20,r20,4
  80b950:	80c00007 	ldb	r3,0(r16)
  80b954:	003f7706 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80b958:	00800c04 	movi	r2,48
  80b95c:	da802217 	ldw	r10,136(sp)
  80b960:	d8801d05 	stb	r2,116(sp)
  80b964:	00801e04 	movi	r2,120
  80b968:	d8801d45 	stb	r2,117(sp)
  80b96c:	d8001d85 	stb	zero,118(sp)
  80b970:	50c00104 	addi	r3,r10,4
  80b974:	54800017 	ldw	r18,0(r10)
  80b978:	0027883a 	mov	r19,zero
  80b97c:	a0800094 	ori	r2,r20,2
  80b980:	48030b16 	blt	r9,zero,80c5b0 <___vfiprintf_internal_r+0xff8>
  80b984:	00bfdfc4 	movi	r2,-129
  80b988:	a096703a 	and	r11,r20,r2
  80b98c:	d8c02215 	stw	r3,136(sp)
  80b990:	5d000094 	ori	r20,r11,2
  80b994:	90032b1e 	bne	r18,zero,80c644 <___vfiprintf_internal_r+0x108c>
  80b998:	00802074 	movhi	r2,129
  80b99c:	1091f004 	addi	r2,r2,18368
  80b9a0:	d8802615 	stw	r2,152(sp)
  80b9a4:	0039883a 	mov	fp,zero
  80b9a8:	48017b1e 	bne	r9,zero,80bf98 <___vfiprintf_internal_r+0x9e0>
  80b9ac:	0013883a 	mov	r9,zero
  80b9b0:	0027883a 	mov	r19,zero
  80b9b4:	dd401a04 	addi	r21,sp,104
  80b9b8:	4825883a 	mov	r18,r9
  80b9bc:	4cc0010e 	bge	r9,r19,80b9c4 <___vfiprintf_internal_r+0x40c>
  80b9c0:	9825883a 	mov	r18,r19
  80b9c4:	e7003fcc 	andi	fp,fp,255
  80b9c8:	e700201c 	xori	fp,fp,128
  80b9cc:	e73fe004 	addi	fp,fp,-128
  80b9d0:	e0000126 	beq	fp,zero,80b9d8 <___vfiprintf_internal_r+0x420>
  80b9d4:	94800044 	addi	r18,r18,1
  80b9d8:	a380008c 	andi	r14,r20,2
  80b9dc:	70000126 	beq	r14,zero,80b9e4 <___vfiprintf_internal_r+0x42c>
  80b9e0:	94800084 	addi	r18,r18,2
  80b9e4:	a700210c 	andi	fp,r20,132
  80b9e8:	e001df1e 	bne	fp,zero,80c168 <___vfiprintf_internal_r+0xbb0>
  80b9ec:	8c87c83a 	sub	r3,r17,r18
  80b9f0:	00c1dd0e 	bge	zero,r3,80c168 <___vfiprintf_internal_r+0xbb0>
  80b9f4:	01c00404 	movi	r7,16
  80b9f8:	d8801c17 	ldw	r2,112(sp)
  80b9fc:	38c3ad0e 	bge	r7,r3,80c8b4 <___vfiprintf_internal_r+0x12fc>
  80ba00:	02802074 	movhi	r10,129
  80ba04:	52925404 	addi	r10,r10,18768
  80ba08:	dc002915 	stw	r16,164(sp)
  80ba0c:	d9801b17 	ldw	r6,108(sp)
  80ba10:	da802415 	stw	r10,144(sp)
  80ba14:	03c001c4 	movi	r15,7
  80ba18:	da402515 	stw	r9,148(sp)
  80ba1c:	db802815 	stw	r14,160(sp)
  80ba20:	1821883a 	mov	r16,r3
  80ba24:	00000506 	br	80ba3c <___vfiprintf_internal_r+0x484>
  80ba28:	31400084 	addi	r5,r6,2
  80ba2c:	42000204 	addi	r8,r8,8
  80ba30:	200d883a 	mov	r6,r4
  80ba34:	843ffc04 	addi	r16,r16,-16
  80ba38:	3c000d0e 	bge	r7,r16,80ba70 <___vfiprintf_internal_r+0x4b8>
  80ba3c:	10800404 	addi	r2,r2,16
  80ba40:	31000044 	addi	r4,r6,1
  80ba44:	45800015 	stw	r22,0(r8)
  80ba48:	41c00115 	stw	r7,4(r8)
  80ba4c:	d8801c15 	stw	r2,112(sp)
  80ba50:	d9001b15 	stw	r4,108(sp)
  80ba54:	793ff40e 	bge	r15,r4,80ba28 <__alt_mem_onchip_mem+0xff78ba28>
  80ba58:	1001b51e 	bne	r2,zero,80c130 <___vfiprintf_internal_r+0xb78>
  80ba5c:	843ffc04 	addi	r16,r16,-16
  80ba60:	000d883a 	mov	r6,zero
  80ba64:	01400044 	movi	r5,1
  80ba68:	d811883a 	mov	r8,sp
  80ba6c:	3c3ff316 	blt	r7,r16,80ba3c <__alt_mem_onchip_mem+0xff78ba3c>
  80ba70:	8007883a 	mov	r3,r16
  80ba74:	da402517 	ldw	r9,148(sp)
  80ba78:	db802817 	ldw	r14,160(sp)
  80ba7c:	dc002917 	ldw	r16,164(sp)
  80ba80:	da802417 	ldw	r10,144(sp)
  80ba84:	1885883a 	add	r2,r3,r2
  80ba88:	40c00115 	stw	r3,4(r8)
  80ba8c:	42800015 	stw	r10,0(r8)
  80ba90:	d8801c15 	stw	r2,112(sp)
  80ba94:	d9401b15 	stw	r5,108(sp)
  80ba98:	00c001c4 	movi	r3,7
  80ba9c:	19426016 	blt	r3,r5,80c420 <___vfiprintf_internal_r+0xe68>
  80baa0:	d8c01d87 	ldb	r3,118(sp)
  80baa4:	42000204 	addi	r8,r8,8
  80baa8:	29000044 	addi	r4,r5,1
  80baac:	1801b31e 	bne	r3,zero,80c17c <___vfiprintf_internal_r+0xbc4>
  80bab0:	7001c026 	beq	r14,zero,80c1b4 <___vfiprintf_internal_r+0xbfc>
  80bab4:	d8c01d04 	addi	r3,sp,116
  80bab8:	10800084 	addi	r2,r2,2
  80babc:	40c00015 	stw	r3,0(r8)
  80bac0:	00c00084 	movi	r3,2
  80bac4:	40c00115 	stw	r3,4(r8)
  80bac8:	d8801c15 	stw	r2,112(sp)
  80bacc:	d9001b15 	stw	r4,108(sp)
  80bad0:	00c001c4 	movi	r3,7
  80bad4:	1902650e 	bge	r3,r4,80c46c <___vfiprintf_internal_r+0xeb4>
  80bad8:	10029a1e 	bne	r2,zero,80c544 <___vfiprintf_internal_r+0xf8c>
  80badc:	00c02004 	movi	r3,128
  80bae0:	01000044 	movi	r4,1
  80bae4:	000b883a 	mov	r5,zero
  80bae8:	d811883a 	mov	r8,sp
  80baec:	e0c1b31e 	bne	fp,r3,80c1bc <___vfiprintf_internal_r+0xc04>
  80baf0:	8cb9c83a 	sub	fp,r17,r18
  80baf4:	0701b10e 	bge	zero,fp,80c1bc <___vfiprintf_internal_r+0xc04>
  80baf8:	01c00404 	movi	r7,16
  80bafc:	3f03890e 	bge	r7,fp,80c924 <___vfiprintf_internal_r+0x136c>
  80bb00:	00c02074 	movhi	r3,129
  80bb04:	18d25004 	addi	r3,r3,18752
  80bb08:	d8c02415 	stw	r3,144(sp)
  80bb0c:	8007883a 	mov	r3,r16
  80bb10:	034001c4 	movi	r13,7
  80bb14:	e021883a 	mov	r16,fp
  80bb18:	da402515 	stw	r9,148(sp)
  80bb1c:	1839883a 	mov	fp,r3
  80bb20:	00000506 	br	80bb38 <___vfiprintf_internal_r+0x580>
  80bb24:	29800084 	addi	r6,r5,2
  80bb28:	42000204 	addi	r8,r8,8
  80bb2c:	180b883a 	mov	r5,r3
  80bb30:	843ffc04 	addi	r16,r16,-16
  80bb34:	3c000d0e 	bge	r7,r16,80bb6c <___vfiprintf_internal_r+0x5b4>
  80bb38:	10800404 	addi	r2,r2,16
  80bb3c:	28c00044 	addi	r3,r5,1
  80bb40:	45c00015 	stw	r23,0(r8)
  80bb44:	41c00115 	stw	r7,4(r8)
  80bb48:	d8801c15 	stw	r2,112(sp)
  80bb4c:	d8c01b15 	stw	r3,108(sp)
  80bb50:	68fff40e 	bge	r13,r3,80bb24 <__alt_mem_onchip_mem+0xff78bb24>
  80bb54:	1002241e 	bne	r2,zero,80c3e8 <___vfiprintf_internal_r+0xe30>
  80bb58:	843ffc04 	addi	r16,r16,-16
  80bb5c:	01800044 	movi	r6,1
  80bb60:	000b883a 	mov	r5,zero
  80bb64:	d811883a 	mov	r8,sp
  80bb68:	3c3ff316 	blt	r7,r16,80bb38 <__alt_mem_onchip_mem+0xff78bb38>
  80bb6c:	da402517 	ldw	r9,148(sp)
  80bb70:	e007883a 	mov	r3,fp
  80bb74:	8039883a 	mov	fp,r16
  80bb78:	1821883a 	mov	r16,r3
  80bb7c:	d8c02417 	ldw	r3,144(sp)
  80bb80:	1705883a 	add	r2,r2,fp
  80bb84:	47000115 	stw	fp,4(r8)
  80bb88:	40c00015 	stw	r3,0(r8)
  80bb8c:	d8801c15 	stw	r2,112(sp)
  80bb90:	d9801b15 	stw	r6,108(sp)
  80bb94:	00c001c4 	movi	r3,7
  80bb98:	19827616 	blt	r3,r6,80c574 <___vfiprintf_internal_r+0xfbc>
  80bb9c:	4cf9c83a 	sub	fp,r9,r19
  80bba0:	42000204 	addi	r8,r8,8
  80bba4:	31000044 	addi	r4,r6,1
  80bba8:	300b883a 	mov	r5,r6
  80bbac:	07018516 	blt	zero,fp,80c1c4 <___vfiprintf_internal_r+0xc0c>
  80bbb0:	9885883a 	add	r2,r19,r2
  80bbb4:	45400015 	stw	r21,0(r8)
  80bbb8:	44c00115 	stw	r19,4(r8)
  80bbbc:	d8801c15 	stw	r2,112(sp)
  80bbc0:	d9001b15 	stw	r4,108(sp)
  80bbc4:	00c001c4 	movi	r3,7
  80bbc8:	1901dd0e 	bge	r3,r4,80c340 <___vfiprintf_internal_r+0xd88>
  80bbcc:	1002401e 	bne	r2,zero,80c4d0 <___vfiprintf_internal_r+0xf18>
  80bbd0:	d8001b15 	stw	zero,108(sp)
  80bbd4:	a2c0010c 	andi	r11,r20,4
  80bbd8:	58000226 	beq	r11,zero,80bbe4 <___vfiprintf_internal_r+0x62c>
  80bbdc:	8ca7c83a 	sub	r19,r17,r18
  80bbe0:	04c2f216 	blt	zero,r19,80c7ac <___vfiprintf_internal_r+0x11f4>
  80bbe4:	8c80010e 	bge	r17,r18,80bbec <___vfiprintf_internal_r+0x634>
  80bbe8:	9023883a 	mov	r17,r18
  80bbec:	da802317 	ldw	r10,140(sp)
  80bbf0:	5455883a 	add	r10,r10,r17
  80bbf4:	da802315 	stw	r10,140(sp)
  80bbf8:	d8001b15 	stw	zero,108(sp)
  80bbfc:	d811883a 	mov	r8,sp
  80bc00:	003ea206 	br	80b68c <__alt_mem_onchip_mem+0xff78b68c>
  80bc04:	a5000814 	ori	r20,r20,32
  80bc08:	80c00007 	ldb	r3,0(r16)
  80bc0c:	003ec906 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80bc10:	80c00007 	ldb	r3,0(r16)
  80bc14:	1b030926 	beq	r3,r12,80c83c <___vfiprintf_internal_r+0x1284>
  80bc18:	a5000414 	ori	r20,r20,16
  80bc1c:	003ec506 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80bc20:	21003fcc 	andi	r4,r4,255
  80bc24:	20035e1e 	bne	r4,zero,80c9a0 <___vfiprintf_internal_r+0x13e8>
  80bc28:	a080080c 	andi	r2,r20,32
  80bc2c:	1002a526 	beq	r2,zero,80c6c4 <___vfiprintf_internal_r+0x110c>
  80bc30:	da802217 	ldw	r10,136(sp)
  80bc34:	50800017 	ldw	r2,0(r10)
  80bc38:	da802317 	ldw	r10,140(sp)
  80bc3c:	5007d7fa 	srai	r3,r10,31
  80bc40:	da802217 	ldw	r10,136(sp)
  80bc44:	10c00115 	stw	r3,4(r2)
  80bc48:	52800104 	addi	r10,r10,4
  80bc4c:	da802215 	stw	r10,136(sp)
  80bc50:	da802317 	ldw	r10,140(sp)
  80bc54:	12800015 	stw	r10,0(r2)
  80bc58:	003e8c06 	br	80b68c <__alt_mem_onchip_mem+0xff78b68c>
  80bc5c:	21003fcc 	andi	r4,r4,255
  80bc60:	2003511e 	bne	r4,zero,80c9a8 <___vfiprintf_internal_r+0x13f0>
  80bc64:	a080080c 	andi	r2,r20,32
  80bc68:	1000a126 	beq	r2,zero,80bef0 <___vfiprintf_internal_r+0x938>
  80bc6c:	da802217 	ldw	r10,136(sp)
  80bc70:	d8001d85 	stb	zero,118(sp)
  80bc74:	50800204 	addi	r2,r10,8
  80bc78:	54800017 	ldw	r18,0(r10)
  80bc7c:	54c00117 	ldw	r19,4(r10)
  80bc80:	4802b416 	blt	r9,zero,80c754 <___vfiprintf_internal_r+0x119c>
  80bc84:	013fdfc4 	movi	r4,-129
  80bc88:	94c6b03a 	or	r3,r18,r19
  80bc8c:	d8802215 	stw	r2,136(sp)
  80bc90:	a128703a 	and	r20,r20,r4
  80bc94:	1800a226 	beq	r3,zero,80bf20 <___vfiprintf_internal_r+0x968>
  80bc98:	0039883a 	mov	fp,zero
  80bc9c:	dd401a04 	addi	r21,sp,104
  80bca0:	9006d0fa 	srli	r3,r18,3
  80bca4:	9808977a 	slli	r4,r19,29
  80bca8:	9826d0fa 	srli	r19,r19,3
  80bcac:	948001cc 	andi	r18,r18,7
  80bcb0:	90800c04 	addi	r2,r18,48
  80bcb4:	ad7fffc4 	addi	r21,r21,-1
  80bcb8:	20e4b03a 	or	r18,r4,r3
  80bcbc:	a8800005 	stb	r2,0(r21)
  80bcc0:	94c6b03a 	or	r3,r18,r19
  80bcc4:	183ff61e 	bne	r3,zero,80bca0 <__alt_mem_onchip_mem+0xff78bca0>
  80bcc8:	a0c0004c 	andi	r3,r20,1
  80bccc:	18005926 	beq	r3,zero,80be34 <___vfiprintf_internal_r+0x87c>
  80bcd0:	10803fcc 	andi	r2,r2,255
  80bcd4:	1080201c 	xori	r2,r2,128
  80bcd8:	10bfe004 	addi	r2,r2,-128
  80bcdc:	00c00c04 	movi	r3,48
  80bce0:	10c05426 	beq	r2,r3,80be34 <___vfiprintf_internal_r+0x87c>
  80bce4:	da801e17 	ldw	r10,120(sp)
  80bce8:	a8bfffc4 	addi	r2,r21,-1
  80bcec:	a8ffffc5 	stb	r3,-1(r21)
  80bcf0:	50a7c83a 	sub	r19,r10,r2
  80bcf4:	102b883a 	mov	r21,r2
  80bcf8:	003f2f06 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80bcfc:	21003fcc 	andi	r4,r4,255
  80bd00:	2003421e 	bne	r4,zero,80ca0c <___vfiprintf_internal_r+0x1454>
  80bd04:	00802074 	movhi	r2,129
  80bd08:	1091f004 	addi	r2,r2,18368
  80bd0c:	d8802615 	stw	r2,152(sp)
  80bd10:	a080080c 	andi	r2,r20,32
  80bd14:	1000aa26 	beq	r2,zero,80bfc0 <___vfiprintf_internal_r+0xa08>
  80bd18:	da802217 	ldw	r10,136(sp)
  80bd1c:	54800017 	ldw	r18,0(r10)
  80bd20:	54c00117 	ldw	r19,4(r10)
  80bd24:	52800204 	addi	r10,r10,8
  80bd28:	da802215 	stw	r10,136(sp)
  80bd2c:	a080004c 	andi	r2,r20,1
  80bd30:	1001d226 	beq	r2,zero,80c47c <___vfiprintf_internal_r+0xec4>
  80bd34:	94c4b03a 	or	r2,r18,r19
  80bd38:	1002351e 	bne	r2,zero,80c610 <___vfiprintf_internal_r+0x1058>
  80bd3c:	d8001d85 	stb	zero,118(sp)
  80bd40:	48022216 	blt	r9,zero,80c5cc <___vfiprintf_internal_r+0x1014>
  80bd44:	00bfdfc4 	movi	r2,-129
  80bd48:	a0a8703a 	and	r20,r20,r2
  80bd4c:	003f1506 	br	80b9a4 <__alt_mem_onchip_mem+0xff78b9a4>
  80bd50:	da802217 	ldw	r10,136(sp)
  80bd54:	04800044 	movi	r18,1
  80bd58:	d8001d85 	stb	zero,118(sp)
  80bd5c:	50800017 	ldw	r2,0(r10)
  80bd60:	52800104 	addi	r10,r10,4
  80bd64:	da802215 	stw	r10,136(sp)
  80bd68:	d8801005 	stb	r2,64(sp)
  80bd6c:	9027883a 	mov	r19,r18
  80bd70:	dd401004 	addi	r21,sp,64
  80bd74:	0013883a 	mov	r9,zero
  80bd78:	003f1706 	br	80b9d8 <__alt_mem_onchip_mem+0xff78b9d8>
  80bd7c:	21003fcc 	andi	r4,r4,255
  80bd80:	2003201e 	bne	r4,zero,80ca04 <___vfiprintf_internal_r+0x144c>
  80bd84:	a080080c 	andi	r2,r20,32
  80bd88:	10004b26 	beq	r2,zero,80beb8 <___vfiprintf_internal_r+0x900>
  80bd8c:	da802217 	ldw	r10,136(sp)
  80bd90:	50800117 	ldw	r2,4(r10)
  80bd94:	54800017 	ldw	r18,0(r10)
  80bd98:	52800204 	addi	r10,r10,8
  80bd9c:	da802215 	stw	r10,136(sp)
  80bda0:	1027883a 	mov	r19,r2
  80bda4:	10022c16 	blt	r2,zero,80c658 <___vfiprintf_internal_r+0x10a0>
  80bda8:	df001d83 	ldbu	fp,118(sp)
  80bdac:	48007216 	blt	r9,zero,80bf78 <___vfiprintf_internal_r+0x9c0>
  80bdb0:	00ffdfc4 	movi	r3,-129
  80bdb4:	94c4b03a 	or	r2,r18,r19
  80bdb8:	a0e8703a 	and	r20,r20,r3
  80bdbc:	1000cc26 	beq	r2,zero,80c0f0 <___vfiprintf_internal_r+0xb38>
  80bdc0:	98021026 	beq	r19,zero,80c604 <___vfiprintf_internal_r+0x104c>
  80bdc4:	dc402415 	stw	r17,144(sp)
  80bdc8:	dc002515 	stw	r16,148(sp)
  80bdcc:	9823883a 	mov	r17,r19
  80bdd0:	9021883a 	mov	r16,r18
  80bdd4:	dd401a04 	addi	r21,sp,104
  80bdd8:	4825883a 	mov	r18,r9
  80bddc:	4027883a 	mov	r19,r8
  80bde0:	8009883a 	mov	r4,r16
  80bde4:	880b883a 	mov	r5,r17
  80bde8:	01800284 	movi	r6,10
  80bdec:	000f883a 	mov	r7,zero
  80bdf0:	080d7740 	call	80d774 <__umoddi3>
  80bdf4:	10800c04 	addi	r2,r2,48
  80bdf8:	ad7fffc4 	addi	r21,r21,-1
  80bdfc:	8009883a 	mov	r4,r16
  80be00:	880b883a 	mov	r5,r17
  80be04:	a8800005 	stb	r2,0(r21)
  80be08:	01800284 	movi	r6,10
  80be0c:	000f883a 	mov	r7,zero
  80be10:	080d1fc0 	call	80d1fc <__udivdi3>
  80be14:	1021883a 	mov	r16,r2
  80be18:	10c4b03a 	or	r2,r2,r3
  80be1c:	1823883a 	mov	r17,r3
  80be20:	103fef1e 	bne	r2,zero,80bde0 <__alt_mem_onchip_mem+0xff78bde0>
  80be24:	dc402417 	ldw	r17,144(sp)
  80be28:	dc002517 	ldw	r16,148(sp)
  80be2c:	9013883a 	mov	r9,r18
  80be30:	9811883a 	mov	r8,r19
  80be34:	da801e17 	ldw	r10,120(sp)
  80be38:	5567c83a 	sub	r19,r10,r21
  80be3c:	003ede06 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80be40:	38803fcc 	andi	r2,r7,255
  80be44:	1080201c 	xori	r2,r2,128
  80be48:	10bfe004 	addi	r2,r2,-128
  80be4c:	1002371e 	bne	r2,zero,80c72c <___vfiprintf_internal_r+0x1174>
  80be50:	01000044 	movi	r4,1
  80be54:	01c00804 	movi	r7,32
  80be58:	80c00007 	ldb	r3,0(r16)
  80be5c:	003e3506 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80be60:	a5000054 	ori	r20,r20,1
  80be64:	80c00007 	ldb	r3,0(r16)
  80be68:	003e3206 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80be6c:	a5002014 	ori	r20,r20,128
  80be70:	80c00007 	ldb	r3,0(r16)
  80be74:	003e2f06 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80be78:	8015883a 	mov	r10,r16
  80be7c:	0023883a 	mov	r17,zero
  80be80:	18bff404 	addi	r2,r3,-48
  80be84:	50c00007 	ldb	r3,0(r10)
  80be88:	8c4002a4 	muli	r17,r17,10
  80be8c:	84000044 	addi	r16,r16,1
  80be90:	8015883a 	mov	r10,r16
  80be94:	1463883a 	add	r17,r2,r17
  80be98:	18bff404 	addi	r2,r3,-48
  80be9c:	30bff92e 	bgeu	r6,r2,80be84 <__alt_mem_onchip_mem+0xff78be84>
  80bea0:	003e2506 	br	80b738 <__alt_mem_onchip_mem+0xff78b738>
  80bea4:	21003fcc 	andi	r4,r4,255
  80bea8:	2002d41e 	bne	r4,zero,80c9fc <___vfiprintf_internal_r+0x1444>
  80beac:	a5000414 	ori	r20,r20,16
  80beb0:	a080080c 	andi	r2,r20,32
  80beb4:	103fb51e 	bne	r2,zero,80bd8c <__alt_mem_onchip_mem+0xff78bd8c>
  80beb8:	a080040c 	andi	r2,r20,16
  80bebc:	1001f826 	beq	r2,zero,80c6a0 <___vfiprintf_internal_r+0x10e8>
  80bec0:	da802217 	ldw	r10,136(sp)
  80bec4:	54800017 	ldw	r18,0(r10)
  80bec8:	52800104 	addi	r10,r10,4
  80becc:	da802215 	stw	r10,136(sp)
  80bed0:	9027d7fa 	srai	r19,r18,31
  80bed4:	9805883a 	mov	r2,r19
  80bed8:	003fb206 	br	80bda4 <__alt_mem_onchip_mem+0xff78bda4>
  80bedc:	21003fcc 	andi	r4,r4,255
  80bee0:	2002c41e 	bne	r4,zero,80c9f4 <___vfiprintf_internal_r+0x143c>
  80bee4:	a5000414 	ori	r20,r20,16
  80bee8:	a080080c 	andi	r2,r20,32
  80beec:	103f5f1e 	bne	r2,zero,80bc6c <__alt_mem_onchip_mem+0xff78bc6c>
  80bef0:	a080040c 	andi	r2,r20,16
  80bef4:	10020f26 	beq	r2,zero,80c734 <___vfiprintf_internal_r+0x117c>
  80bef8:	da802217 	ldw	r10,136(sp)
  80befc:	d8001d85 	stb	zero,118(sp)
  80bf00:	0027883a 	mov	r19,zero
  80bf04:	50800104 	addi	r2,r10,4
  80bf08:	54800017 	ldw	r18,0(r10)
  80bf0c:	48021116 	blt	r9,zero,80c754 <___vfiprintf_internal_r+0x119c>
  80bf10:	00ffdfc4 	movi	r3,-129
  80bf14:	d8802215 	stw	r2,136(sp)
  80bf18:	a0e8703a 	and	r20,r20,r3
  80bf1c:	903f5e1e 	bne	r18,zero,80bc98 <__alt_mem_onchip_mem+0xff78bc98>
  80bf20:	0039883a 	mov	fp,zero
  80bf24:	4802a626 	beq	r9,zero,80c9c0 <___vfiprintf_internal_r+0x1408>
  80bf28:	0025883a 	mov	r18,zero
  80bf2c:	0027883a 	mov	r19,zero
  80bf30:	003f5a06 	br	80bc9c <__alt_mem_onchip_mem+0xff78bc9c>
  80bf34:	21003fcc 	andi	r4,r4,255
  80bf38:	20029f1e 	bne	r4,zero,80c9b8 <___vfiprintf_internal_r+0x1400>
  80bf3c:	a5000414 	ori	r20,r20,16
  80bf40:	a080080c 	andi	r2,r20,32
  80bf44:	10005e1e 	bne	r2,zero,80c0c0 <___vfiprintf_internal_r+0xb08>
  80bf48:	a080040c 	andi	r2,r20,16
  80bf4c:	1001a21e 	bne	r2,zero,80c5d8 <___vfiprintf_internal_r+0x1020>
  80bf50:	a080100c 	andi	r2,r20,64
  80bf54:	d8001d85 	stb	zero,118(sp)
  80bf58:	da802217 	ldw	r10,136(sp)
  80bf5c:	1002231e 	bne	r2,zero,80c7ec <___vfiprintf_internal_r+0x1234>
  80bf60:	50800104 	addi	r2,r10,4
  80bf64:	54800017 	ldw	r18,0(r10)
  80bf68:	0027883a 	mov	r19,zero
  80bf6c:	4801a00e 	bge	r9,zero,80c5f0 <___vfiprintf_internal_r+0x1038>
  80bf70:	d8802215 	stw	r2,136(sp)
  80bf74:	0039883a 	mov	fp,zero
  80bf78:	94c4b03a 	or	r2,r18,r19
  80bf7c:	103f901e 	bne	r2,zero,80bdc0 <__alt_mem_onchip_mem+0xff78bdc0>
  80bf80:	00800044 	movi	r2,1
  80bf84:	10803fcc 	andi	r2,r2,255
  80bf88:	00c00044 	movi	r3,1
  80bf8c:	10c05926 	beq	r2,r3,80c0f4 <___vfiprintf_internal_r+0xb3c>
  80bf90:	00c00084 	movi	r3,2
  80bf94:	10ffe41e 	bne	r2,r3,80bf28 <__alt_mem_onchip_mem+0xff78bf28>
  80bf98:	0025883a 	mov	r18,zero
  80bf9c:	0027883a 	mov	r19,zero
  80bfa0:	00013d06 	br	80c498 <___vfiprintf_internal_r+0xee0>
  80bfa4:	21003fcc 	andi	r4,r4,255
  80bfa8:	2002811e 	bne	r4,zero,80c9b0 <___vfiprintf_internal_r+0x13f8>
  80bfac:	00802074 	movhi	r2,129
  80bfb0:	1091eb04 	addi	r2,r2,18348
  80bfb4:	d8802615 	stw	r2,152(sp)
  80bfb8:	a080080c 	andi	r2,r20,32
  80bfbc:	103f561e 	bne	r2,zero,80bd18 <__alt_mem_onchip_mem+0xff78bd18>
  80bfc0:	a080040c 	andi	r2,r20,16
  80bfc4:	1001d126 	beq	r2,zero,80c70c <___vfiprintf_internal_r+0x1154>
  80bfc8:	da802217 	ldw	r10,136(sp)
  80bfcc:	0027883a 	mov	r19,zero
  80bfd0:	54800017 	ldw	r18,0(r10)
  80bfd4:	52800104 	addi	r10,r10,4
  80bfd8:	da802215 	stw	r10,136(sp)
  80bfdc:	003f5306 	br	80bd2c <__alt_mem_onchip_mem+0xff78bd2c>
  80bfe0:	da802217 	ldw	r10,136(sp)
  80bfe4:	d8001d85 	stb	zero,118(sp)
  80bfe8:	55400017 	ldw	r21,0(r10)
  80bfec:	50c00104 	addi	r3,r10,4
  80bff0:	a8024226 	beq	r21,zero,80c8fc <___vfiprintf_internal_r+0x1344>
  80bff4:	48021816 	blt	r9,zero,80c858 <___vfiprintf_internal_r+0x12a0>
  80bff8:	480d883a 	mov	r6,r9
  80bffc:	000b883a 	mov	r5,zero
  80c000:	a809883a 	mov	r4,r21
  80c004:	d8c02a15 	stw	r3,168(sp)
  80c008:	da002b15 	stw	r8,172(sp)
  80c00c:	da402c15 	stw	r9,176(sp)
  80c010:	0809a0c0 	call	809a0c <memchr>
  80c014:	d8c02a17 	ldw	r3,168(sp)
  80c018:	da002b17 	ldw	r8,172(sp)
  80c01c:	da402c17 	ldw	r9,176(sp)
  80c020:	10024826 	beq	r2,zero,80c944 <___vfiprintf_internal_r+0x138c>
  80c024:	1567c83a 	sub	r19,r2,r21
  80c028:	df001d83 	ldbu	fp,118(sp)
  80c02c:	d8c02215 	stw	r3,136(sp)
  80c030:	0013883a 	mov	r9,zero
  80c034:	003e6006 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c038:	21003fcc 	andi	r4,r4,255
  80c03c:	203fc026 	beq	r4,zero,80bf40 <__alt_mem_onchip_mem+0xff78bf40>
  80c040:	d9c01d85 	stb	r7,118(sp)
  80c044:	003fbe06 	br	80bf40 <__alt_mem_onchip_mem+0xff78bf40>
  80c048:	da802217 	ldw	r10,136(sp)
  80c04c:	54400017 	ldw	r17,0(r10)
  80c050:	50800104 	addi	r2,r10,4
  80c054:	883e3b16 	blt	r17,zero,80b944 <__alt_mem_onchip_mem+0xff78b944>
  80c058:	d8802215 	stw	r2,136(sp)
  80c05c:	80c00007 	ldb	r3,0(r16)
  80c060:	003db406 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c064:	01000044 	movi	r4,1
  80c068:	01c00ac4 	movi	r7,43
  80c06c:	80c00007 	ldb	r3,0(r16)
  80c070:	003db006 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c074:	80c00007 	ldb	r3,0(r16)
  80c078:	82800044 	addi	r10,r16,1
  80c07c:	1b423c26 	beq	r3,r13,80c970 <___vfiprintf_internal_r+0x13b8>
  80c080:	18bff404 	addi	r2,r3,-48
  80c084:	0013883a 	mov	r9,zero
  80c088:	30822b36 	bltu	r6,r2,80c938 <___vfiprintf_internal_r+0x1380>
  80c08c:	50c00007 	ldb	r3,0(r10)
  80c090:	4a4002a4 	muli	r9,r9,10
  80c094:	54000044 	addi	r16,r10,1
  80c098:	8015883a 	mov	r10,r16
  80c09c:	4893883a 	add	r9,r9,r2
  80c0a0:	18bff404 	addi	r2,r3,-48
  80c0a4:	30bff92e 	bgeu	r6,r2,80c08c <__alt_mem_onchip_mem+0xff78c08c>
  80c0a8:	483da30e 	bge	r9,zero,80b738 <__alt_mem_onchip_mem+0xff78b738>
  80c0ac:	027fffc4 	movi	r9,-1
  80c0b0:	003da106 	br	80b738 <__alt_mem_onchip_mem+0xff78b738>
  80c0b4:	a5001014 	ori	r20,r20,64
  80c0b8:	80c00007 	ldb	r3,0(r16)
  80c0bc:	003d9d06 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c0c0:	da802217 	ldw	r10,136(sp)
  80c0c4:	d8001d85 	stb	zero,118(sp)
  80c0c8:	50c00204 	addi	r3,r10,8
  80c0cc:	54800017 	ldw	r18,0(r10)
  80c0d0:	54c00117 	ldw	r19,4(r10)
  80c0d4:	4801ca16 	blt	r9,zero,80c800 <___vfiprintf_internal_r+0x1248>
  80c0d8:	013fdfc4 	movi	r4,-129
  80c0dc:	94c4b03a 	or	r2,r18,r19
  80c0e0:	d8c02215 	stw	r3,136(sp)
  80c0e4:	a128703a 	and	r20,r20,r4
  80c0e8:	0039883a 	mov	fp,zero
  80c0ec:	103f341e 	bne	r2,zero,80bdc0 <__alt_mem_onchip_mem+0xff78bdc0>
  80c0f0:	483e2e26 	beq	r9,zero,80b9ac <__alt_mem_onchip_mem+0xff78b9ac>
  80c0f4:	0025883a 	mov	r18,zero
  80c0f8:	94800c04 	addi	r18,r18,48
  80c0fc:	dc8019c5 	stb	r18,103(sp)
  80c100:	dcc02717 	ldw	r19,156(sp)
  80c104:	dd4019c4 	addi	r21,sp,103
  80c108:	003e2b06 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c10c:	21003fcc 	andi	r4,r4,255
  80c110:	2002361e 	bne	r4,zero,80c9ec <___vfiprintf_internal_r+0x1434>
  80c114:	1801c126 	beq	r3,zero,80c81c <___vfiprintf_internal_r+0x1264>
  80c118:	04800044 	movi	r18,1
  80c11c:	d8c01005 	stb	r3,64(sp)
  80c120:	d8001d85 	stb	zero,118(sp)
  80c124:	9027883a 	mov	r19,r18
  80c128:	dd401004 	addi	r21,sp,64
  80c12c:	003f1106 	br	80bd74 <__alt_mem_onchip_mem+0xff78bd74>
  80c130:	d9402117 	ldw	r5,132(sp)
  80c134:	d9002017 	ldw	r4,128(sp)
  80c138:	d9801a04 	addi	r6,sp,104
  80c13c:	d9c02b15 	stw	r7,172(sp)
  80c140:	dbc02a15 	stw	r15,168(sp)
  80c144:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c148:	d9c02b17 	ldw	r7,172(sp)
  80c14c:	dbc02a17 	ldw	r15,168(sp)
  80c150:	10006d1e 	bne	r2,zero,80c308 <___vfiprintf_internal_r+0xd50>
  80c154:	d9801b17 	ldw	r6,108(sp)
  80c158:	d8801c17 	ldw	r2,112(sp)
  80c15c:	d811883a 	mov	r8,sp
  80c160:	31400044 	addi	r5,r6,1
  80c164:	003e3306 	br	80ba34 <__alt_mem_onchip_mem+0xff78ba34>
  80c168:	d9401b17 	ldw	r5,108(sp)
  80c16c:	d8801c17 	ldw	r2,112(sp)
  80c170:	29000044 	addi	r4,r5,1
  80c174:	d8c01d87 	ldb	r3,118(sp)
  80c178:	183e4d26 	beq	r3,zero,80bab0 <__alt_mem_onchip_mem+0xff78bab0>
  80c17c:	00c00044 	movi	r3,1
  80c180:	d9401d84 	addi	r5,sp,118
  80c184:	10c5883a 	add	r2,r2,r3
  80c188:	41400015 	stw	r5,0(r8)
  80c18c:	40c00115 	stw	r3,4(r8)
  80c190:	d8801c15 	stw	r2,112(sp)
  80c194:	d9001b15 	stw	r4,108(sp)
  80c198:	014001c4 	movi	r5,7
  80c19c:	2900a90e 	bge	r5,r4,80c444 <___vfiprintf_internal_r+0xe8c>
  80c1a0:	1000da1e 	bne	r2,zero,80c50c <___vfiprintf_internal_r+0xf54>
  80c1a4:	7000ab1e 	bne	r14,zero,80c454 <___vfiprintf_internal_r+0xe9c>
  80c1a8:	000b883a 	mov	r5,zero
  80c1ac:	1809883a 	mov	r4,r3
  80c1b0:	d811883a 	mov	r8,sp
  80c1b4:	00c02004 	movi	r3,128
  80c1b8:	e0fe4d26 	beq	fp,r3,80baf0 <__alt_mem_onchip_mem+0xff78baf0>
  80c1bc:	4cf9c83a 	sub	fp,r9,r19
  80c1c0:	073e7b0e 	bge	zero,fp,80bbb0 <__alt_mem_onchip_mem+0xff78bbb0>
  80c1c4:	01c00404 	movi	r7,16
  80c1c8:	3f01900e 	bge	r7,fp,80c80c <___vfiprintf_internal_r+0x1254>
  80c1cc:	00c02074 	movhi	r3,129
  80c1d0:	18d25004 	addi	r3,r3,18752
  80c1d4:	d8c02415 	stw	r3,144(sp)
  80c1d8:	034001c4 	movi	r13,7
  80c1dc:	00000506 	br	80c1f4 <___vfiprintf_internal_r+0xc3c>
  80c1e0:	29000084 	addi	r4,r5,2
  80c1e4:	42000204 	addi	r8,r8,8
  80c1e8:	180b883a 	mov	r5,r3
  80c1ec:	e73ffc04 	addi	fp,fp,-16
  80c1f0:	3f000d0e 	bge	r7,fp,80c228 <___vfiprintf_internal_r+0xc70>
  80c1f4:	10800404 	addi	r2,r2,16
  80c1f8:	28c00044 	addi	r3,r5,1
  80c1fc:	45c00015 	stw	r23,0(r8)
  80c200:	41c00115 	stw	r7,4(r8)
  80c204:	d8801c15 	stw	r2,112(sp)
  80c208:	d8c01b15 	stw	r3,108(sp)
  80c20c:	68fff40e 	bge	r13,r3,80c1e0 <__alt_mem_onchip_mem+0xff78c1e0>
  80c210:	1000101e 	bne	r2,zero,80c254 <___vfiprintf_internal_r+0xc9c>
  80c214:	e73ffc04 	addi	fp,fp,-16
  80c218:	01000044 	movi	r4,1
  80c21c:	000b883a 	mov	r5,zero
  80c220:	d811883a 	mov	r8,sp
  80c224:	3f3ff316 	blt	r7,fp,80c1f4 <__alt_mem_onchip_mem+0xff78c1f4>
  80c228:	da802417 	ldw	r10,144(sp)
  80c22c:	1705883a 	add	r2,r2,fp
  80c230:	47000115 	stw	fp,4(r8)
  80c234:	42800015 	stw	r10,0(r8)
  80c238:	d8801c15 	stw	r2,112(sp)
  80c23c:	d9001b15 	stw	r4,108(sp)
  80c240:	00c001c4 	movi	r3,7
  80c244:	19003616 	blt	r3,r4,80c320 <___vfiprintf_internal_r+0xd68>
  80c248:	42000204 	addi	r8,r8,8
  80c24c:	21000044 	addi	r4,r4,1
  80c250:	003e5706 	br	80bbb0 <__alt_mem_onchip_mem+0xff78bbb0>
  80c254:	d9402117 	ldw	r5,132(sp)
  80c258:	d9002017 	ldw	r4,128(sp)
  80c25c:	d9801a04 	addi	r6,sp,104
  80c260:	d9c02b15 	stw	r7,172(sp)
  80c264:	db402a15 	stw	r13,168(sp)
  80c268:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c26c:	d9c02b17 	ldw	r7,172(sp)
  80c270:	db402a17 	ldw	r13,168(sp)
  80c274:	1000241e 	bne	r2,zero,80c308 <___vfiprintf_internal_r+0xd50>
  80c278:	d9401b17 	ldw	r5,108(sp)
  80c27c:	d8801c17 	ldw	r2,112(sp)
  80c280:	d811883a 	mov	r8,sp
  80c284:	29000044 	addi	r4,r5,1
  80c288:	003fd806 	br	80c1ec <__alt_mem_onchip_mem+0xff78c1ec>
  80c28c:	d9401b17 	ldw	r5,108(sp)
  80c290:	00c02074 	movhi	r3,129
  80c294:	18d25404 	addi	r3,r3,18768
  80c298:	d8c02415 	stw	r3,144(sp)
  80c29c:	29400044 	addi	r5,r5,1
  80c2a0:	d8c02417 	ldw	r3,144(sp)
  80c2a4:	14c5883a 	add	r2,r2,r19
  80c2a8:	44c00115 	stw	r19,4(r8)
  80c2ac:	40c00015 	stw	r3,0(r8)
  80c2b0:	d8801c15 	stw	r2,112(sp)
  80c2b4:	d9401b15 	stw	r5,108(sp)
  80c2b8:	00c001c4 	movi	r3,7
  80c2bc:	1940070e 	bge	r3,r5,80c2dc <___vfiprintf_internal_r+0xd24>
  80c2c0:	103e4826 	beq	r2,zero,80bbe4 <__alt_mem_onchip_mem+0xff78bbe4>
  80c2c4:	d9402117 	ldw	r5,132(sp)
  80c2c8:	d9002017 	ldw	r4,128(sp)
  80c2cc:	d9801a04 	addi	r6,sp,104
  80c2d0:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c2d4:	10000c1e 	bne	r2,zero,80c308 <___vfiprintf_internal_r+0xd50>
  80c2d8:	d8801c17 	ldw	r2,112(sp)
  80c2dc:	8c80010e 	bge	r17,r18,80c2e4 <___vfiprintf_internal_r+0xd2c>
  80c2e0:	9023883a 	mov	r17,r18
  80c2e4:	da802317 	ldw	r10,140(sp)
  80c2e8:	5455883a 	add	r10,r10,r17
  80c2ec:	da802315 	stw	r10,140(sp)
  80c2f0:	103e4126 	beq	r2,zero,80bbf8 <__alt_mem_onchip_mem+0xff78bbf8>
  80c2f4:	d9402117 	ldw	r5,132(sp)
  80c2f8:	d9002017 	ldw	r4,128(sp)
  80c2fc:	d9801a04 	addi	r6,sp,104
  80c300:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c304:	103e3c26 	beq	r2,zero,80bbf8 <__alt_mem_onchip_mem+0xff78bbf8>
  80c308:	dd002117 	ldw	r20,132(sp)
  80c30c:	a080030b 	ldhu	r2,12(r20)
  80c310:	1080100c 	andi	r2,r2,64
  80c314:	1001231e 	bne	r2,zero,80c7a4 <___vfiprintf_internal_r+0x11ec>
  80c318:	d8802317 	ldw	r2,140(sp)
  80c31c:	003d7b06 	br	80b90c <__alt_mem_onchip_mem+0xff78b90c>
  80c320:	1000991e 	bne	r2,zero,80c588 <___vfiprintf_internal_r+0xfd0>
  80c324:	00c00044 	movi	r3,1
  80c328:	9805883a 	mov	r2,r19
  80c32c:	dd400015 	stw	r21,0(sp)
  80c330:	dcc00115 	stw	r19,4(sp)
  80c334:	dcc01c15 	stw	r19,112(sp)
  80c338:	d8c01b15 	stw	r3,108(sp)
  80c33c:	d811883a 	mov	r8,sp
  80c340:	42000204 	addi	r8,r8,8
  80c344:	a2c0010c 	andi	r11,r20,4
  80c348:	583fe426 	beq	r11,zero,80c2dc <__alt_mem_onchip_mem+0xff78c2dc>
  80c34c:	8ca7c83a 	sub	r19,r17,r18
  80c350:	04ffe20e 	bge	zero,r19,80c2dc <__alt_mem_onchip_mem+0xff78c2dc>
  80c354:	01c00404 	movi	r7,16
  80c358:	3cffcc0e 	bge	r7,r19,80c28c <__alt_mem_onchip_mem+0xff78c28c>
  80c35c:	02802074 	movhi	r10,129
  80c360:	52925404 	addi	r10,r10,18768
  80c364:	d9001b17 	ldw	r4,108(sp)
  80c368:	da802415 	stw	r10,144(sp)
  80c36c:	382b883a 	mov	r21,r7
  80c370:	050001c4 	movi	r20,7
  80c374:	df002017 	ldw	fp,128(sp)
  80c378:	00000506 	br	80c390 <___vfiprintf_internal_r+0xdd8>
  80c37c:	21400084 	addi	r5,r4,2
  80c380:	42000204 	addi	r8,r8,8
  80c384:	1809883a 	mov	r4,r3
  80c388:	9cfffc04 	addi	r19,r19,-16
  80c38c:	acffc40e 	bge	r21,r19,80c2a0 <__alt_mem_onchip_mem+0xff78c2a0>
  80c390:	10800404 	addi	r2,r2,16
  80c394:	20c00044 	addi	r3,r4,1
  80c398:	45800015 	stw	r22,0(r8)
  80c39c:	45400115 	stw	r21,4(r8)
  80c3a0:	d8801c15 	stw	r2,112(sp)
  80c3a4:	d8c01b15 	stw	r3,108(sp)
  80c3a8:	a0fff40e 	bge	r20,r3,80c37c <__alt_mem_onchip_mem+0xff78c37c>
  80c3ac:	1000041e 	bne	r2,zero,80c3c0 <___vfiprintf_internal_r+0xe08>
  80c3b0:	01400044 	movi	r5,1
  80c3b4:	0009883a 	mov	r4,zero
  80c3b8:	d811883a 	mov	r8,sp
  80c3bc:	003ff206 	br	80c388 <__alt_mem_onchip_mem+0xff78c388>
  80c3c0:	d9402117 	ldw	r5,132(sp)
  80c3c4:	d9801a04 	addi	r6,sp,104
  80c3c8:	e009883a 	mov	r4,fp
  80c3cc:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c3d0:	103fcd1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c3d4:	d9001b17 	ldw	r4,108(sp)
  80c3d8:	d8801c17 	ldw	r2,112(sp)
  80c3dc:	d811883a 	mov	r8,sp
  80c3e0:	21400044 	addi	r5,r4,1
  80c3e4:	003fe806 	br	80c388 <__alt_mem_onchip_mem+0xff78c388>
  80c3e8:	d9402117 	ldw	r5,132(sp)
  80c3ec:	d9002017 	ldw	r4,128(sp)
  80c3f0:	d9801a04 	addi	r6,sp,104
  80c3f4:	d9c02b15 	stw	r7,172(sp)
  80c3f8:	db402a15 	stw	r13,168(sp)
  80c3fc:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c400:	d9c02b17 	ldw	r7,172(sp)
  80c404:	db402a17 	ldw	r13,168(sp)
  80c408:	103fbf1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c40c:	d9401b17 	ldw	r5,108(sp)
  80c410:	d8801c17 	ldw	r2,112(sp)
  80c414:	d811883a 	mov	r8,sp
  80c418:	29800044 	addi	r6,r5,1
  80c41c:	003dc406 	br	80bb30 <__alt_mem_onchip_mem+0xff78bb30>
  80c420:	1000d21e 	bne	r2,zero,80c76c <___vfiprintf_internal_r+0x11b4>
  80c424:	d8c01d87 	ldb	r3,118(sp)
  80c428:	18009526 	beq	r3,zero,80c680 <___vfiprintf_internal_r+0x10c8>
  80c42c:	00800044 	movi	r2,1
  80c430:	d8c01d84 	addi	r3,sp,118
  80c434:	1009883a 	mov	r4,r2
  80c438:	d8c00015 	stw	r3,0(sp)
  80c43c:	d8800115 	stw	r2,4(sp)
  80c440:	d811883a 	mov	r8,sp
  80c444:	200b883a 	mov	r5,r4
  80c448:	42000204 	addi	r8,r8,8
  80c44c:	21000044 	addi	r4,r4,1
  80c450:	003d9706 	br	80bab0 <__alt_mem_onchip_mem+0xff78bab0>
  80c454:	d9001d04 	addi	r4,sp,116
  80c458:	00800084 	movi	r2,2
  80c45c:	d9000015 	stw	r4,0(sp)
  80c460:	d8800115 	stw	r2,4(sp)
  80c464:	1809883a 	mov	r4,r3
  80c468:	d811883a 	mov	r8,sp
  80c46c:	200b883a 	mov	r5,r4
  80c470:	42000204 	addi	r8,r8,8
  80c474:	21000044 	addi	r4,r4,1
  80c478:	003f4e06 	br	80c1b4 <__alt_mem_onchip_mem+0xff78c1b4>
  80c47c:	d8001d85 	stb	zero,118(sp)
  80c480:	48005016 	blt	r9,zero,80c5c4 <___vfiprintf_internal_r+0x100c>
  80c484:	00ffdfc4 	movi	r3,-129
  80c488:	94c4b03a 	or	r2,r18,r19
  80c48c:	a0e8703a 	and	r20,r20,r3
  80c490:	103d4426 	beq	r2,zero,80b9a4 <__alt_mem_onchip_mem+0xff78b9a4>
  80c494:	0039883a 	mov	fp,zero
  80c498:	d9002617 	ldw	r4,152(sp)
  80c49c:	dd401a04 	addi	r21,sp,104
  80c4a0:	908003cc 	andi	r2,r18,15
  80c4a4:	9806973a 	slli	r3,r19,28
  80c4a8:	2085883a 	add	r2,r4,r2
  80c4ac:	9024d13a 	srli	r18,r18,4
  80c4b0:	10800003 	ldbu	r2,0(r2)
  80c4b4:	9826d13a 	srli	r19,r19,4
  80c4b8:	ad7fffc4 	addi	r21,r21,-1
  80c4bc:	1ca4b03a 	or	r18,r3,r18
  80c4c0:	a8800005 	stb	r2,0(r21)
  80c4c4:	94c4b03a 	or	r2,r18,r19
  80c4c8:	103ff51e 	bne	r2,zero,80c4a0 <__alt_mem_onchip_mem+0xff78c4a0>
  80c4cc:	003e5906 	br	80be34 <__alt_mem_onchip_mem+0xff78be34>
  80c4d0:	d9402117 	ldw	r5,132(sp)
  80c4d4:	d9002017 	ldw	r4,128(sp)
  80c4d8:	d9801a04 	addi	r6,sp,104
  80c4dc:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c4e0:	103f891e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c4e4:	d8801c17 	ldw	r2,112(sp)
  80c4e8:	d811883a 	mov	r8,sp
  80c4ec:	003f9506 	br	80c344 <__alt_mem_onchip_mem+0xff78c344>
  80c4f0:	d9402117 	ldw	r5,132(sp)
  80c4f4:	d9002017 	ldw	r4,128(sp)
  80c4f8:	d9801a04 	addi	r6,sp,104
  80c4fc:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c500:	103f811e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c504:	d811883a 	mov	r8,sp
  80c508:	003ced06 	br	80b8c0 <__alt_mem_onchip_mem+0xff78b8c0>
  80c50c:	d9402117 	ldw	r5,132(sp)
  80c510:	d9002017 	ldw	r4,128(sp)
  80c514:	d9801a04 	addi	r6,sp,104
  80c518:	da402c15 	stw	r9,176(sp)
  80c51c:	db802a15 	stw	r14,168(sp)
  80c520:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c524:	da402c17 	ldw	r9,176(sp)
  80c528:	db802a17 	ldw	r14,168(sp)
  80c52c:	103f761e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c530:	d9401b17 	ldw	r5,108(sp)
  80c534:	d8801c17 	ldw	r2,112(sp)
  80c538:	d811883a 	mov	r8,sp
  80c53c:	29000044 	addi	r4,r5,1
  80c540:	003d5b06 	br	80bab0 <__alt_mem_onchip_mem+0xff78bab0>
  80c544:	d9402117 	ldw	r5,132(sp)
  80c548:	d9002017 	ldw	r4,128(sp)
  80c54c:	d9801a04 	addi	r6,sp,104
  80c550:	da402c15 	stw	r9,176(sp)
  80c554:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c558:	da402c17 	ldw	r9,176(sp)
  80c55c:	103f6a1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c560:	d9401b17 	ldw	r5,108(sp)
  80c564:	d8801c17 	ldw	r2,112(sp)
  80c568:	d811883a 	mov	r8,sp
  80c56c:	29000044 	addi	r4,r5,1
  80c570:	003f1006 	br	80c1b4 <__alt_mem_onchip_mem+0xff78c1b4>
  80c574:	1000c31e 	bne	r2,zero,80c884 <___vfiprintf_internal_r+0x12cc>
  80c578:	01000044 	movi	r4,1
  80c57c:	000b883a 	mov	r5,zero
  80c580:	d811883a 	mov	r8,sp
  80c584:	003f0d06 	br	80c1bc <__alt_mem_onchip_mem+0xff78c1bc>
  80c588:	d9402117 	ldw	r5,132(sp)
  80c58c:	d9002017 	ldw	r4,128(sp)
  80c590:	d9801a04 	addi	r6,sp,104
  80c594:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c598:	103f5b1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c59c:	d9001b17 	ldw	r4,108(sp)
  80c5a0:	d8801c17 	ldw	r2,112(sp)
  80c5a4:	d811883a 	mov	r8,sp
  80c5a8:	21000044 	addi	r4,r4,1
  80c5ac:	003d8006 	br	80bbb0 <__alt_mem_onchip_mem+0xff78bbb0>
  80c5b0:	01002074 	movhi	r4,129
  80c5b4:	2111f004 	addi	r4,r4,18368
  80c5b8:	d9002615 	stw	r4,152(sp)
  80c5bc:	d8c02215 	stw	r3,136(sp)
  80c5c0:	1029883a 	mov	r20,r2
  80c5c4:	94c4b03a 	or	r2,r18,r19
  80c5c8:	103fb21e 	bne	r2,zero,80c494 <__alt_mem_onchip_mem+0xff78c494>
  80c5cc:	0039883a 	mov	fp,zero
  80c5d0:	00800084 	movi	r2,2
  80c5d4:	003e6b06 	br	80bf84 <__alt_mem_onchip_mem+0xff78bf84>
  80c5d8:	da802217 	ldw	r10,136(sp)
  80c5dc:	d8001d85 	stb	zero,118(sp)
  80c5e0:	0027883a 	mov	r19,zero
  80c5e4:	50800104 	addi	r2,r10,4
  80c5e8:	54800017 	ldw	r18,0(r10)
  80c5ec:	483e6016 	blt	r9,zero,80bf70 <__alt_mem_onchip_mem+0xff78bf70>
  80c5f0:	00ffdfc4 	movi	r3,-129
  80c5f4:	d8802215 	stw	r2,136(sp)
  80c5f8:	a0e8703a 	and	r20,r20,r3
  80c5fc:	0039883a 	mov	fp,zero
  80c600:	903ebb26 	beq	r18,zero,80c0f0 <__alt_mem_onchip_mem+0xff78c0f0>
  80c604:	00800244 	movi	r2,9
  80c608:	14bdee36 	bltu	r2,r18,80bdc4 <__alt_mem_onchip_mem+0xff78bdc4>
  80c60c:	003eba06 	br	80c0f8 <__alt_mem_onchip_mem+0xff78c0f8>
  80c610:	00800c04 	movi	r2,48
  80c614:	d8c01d45 	stb	r3,117(sp)
  80c618:	d8801d05 	stb	r2,116(sp)
  80c61c:	d8001d85 	stb	zero,118(sp)
  80c620:	a0c00094 	ori	r3,r20,2
  80c624:	4800a916 	blt	r9,zero,80c8cc <___vfiprintf_internal_r+0x1314>
  80c628:	00bfdfc4 	movi	r2,-129
  80c62c:	a096703a 	and	r11,r20,r2
  80c630:	5d000094 	ori	r20,r11,2
  80c634:	0039883a 	mov	fp,zero
  80c638:	003f9706 	br	80c498 <__alt_mem_onchip_mem+0xff78c498>
  80c63c:	8025883a 	mov	r18,r16
  80c640:	003c2e06 	br	80b6fc <__alt_mem_onchip_mem+0xff78b6fc>
  80c644:	00802074 	movhi	r2,129
  80c648:	1091f004 	addi	r2,r2,18368
  80c64c:	0039883a 	mov	fp,zero
  80c650:	d8802615 	stw	r2,152(sp)
  80c654:	003f9006 	br	80c498 <__alt_mem_onchip_mem+0xff78c498>
  80c658:	04a5c83a 	sub	r18,zero,r18
  80c65c:	07000b44 	movi	fp,45
  80c660:	9004c03a 	cmpne	r2,r18,zero
  80c664:	04e7c83a 	sub	r19,zero,r19
  80c668:	df001d85 	stb	fp,118(sp)
  80c66c:	98a7c83a 	sub	r19,r19,r2
  80c670:	48009f16 	blt	r9,zero,80c8f0 <___vfiprintf_internal_r+0x1338>
  80c674:	00bfdfc4 	movi	r2,-129
  80c678:	a0a8703a 	and	r20,r20,r2
  80c67c:	003dd006 	br	80bdc0 <__alt_mem_onchip_mem+0xff78bdc0>
  80c680:	70004c26 	beq	r14,zero,80c7b4 <___vfiprintf_internal_r+0x11fc>
  80c684:	00800084 	movi	r2,2
  80c688:	d8c01d04 	addi	r3,sp,116
  80c68c:	d8c00015 	stw	r3,0(sp)
  80c690:	d8800115 	stw	r2,4(sp)
  80c694:	01000044 	movi	r4,1
  80c698:	d811883a 	mov	r8,sp
  80c69c:	003f7306 	br	80c46c <__alt_mem_onchip_mem+0xff78c46c>
  80c6a0:	a080100c 	andi	r2,r20,64
  80c6a4:	da802217 	ldw	r10,136(sp)
  80c6a8:	103e0626 	beq	r2,zero,80bec4 <__alt_mem_onchip_mem+0xff78bec4>
  80c6ac:	5480000f 	ldh	r18,0(r10)
  80c6b0:	52800104 	addi	r10,r10,4
  80c6b4:	da802215 	stw	r10,136(sp)
  80c6b8:	9027d7fa 	srai	r19,r18,31
  80c6bc:	9805883a 	mov	r2,r19
  80c6c0:	003db806 	br	80bda4 <__alt_mem_onchip_mem+0xff78bda4>
  80c6c4:	a080040c 	andi	r2,r20,16
  80c6c8:	1000091e 	bne	r2,zero,80c6f0 <___vfiprintf_internal_r+0x1138>
  80c6cc:	a2c0100c 	andi	r11,r20,64
  80c6d0:	58000726 	beq	r11,zero,80c6f0 <___vfiprintf_internal_r+0x1138>
  80c6d4:	da802217 	ldw	r10,136(sp)
  80c6d8:	50800017 	ldw	r2,0(r10)
  80c6dc:	52800104 	addi	r10,r10,4
  80c6e0:	da802215 	stw	r10,136(sp)
  80c6e4:	da802317 	ldw	r10,140(sp)
  80c6e8:	1280000d 	sth	r10,0(r2)
  80c6ec:	003be706 	br	80b68c <__alt_mem_onchip_mem+0xff78b68c>
  80c6f0:	da802217 	ldw	r10,136(sp)
  80c6f4:	50800017 	ldw	r2,0(r10)
  80c6f8:	52800104 	addi	r10,r10,4
  80c6fc:	da802215 	stw	r10,136(sp)
  80c700:	da802317 	ldw	r10,140(sp)
  80c704:	12800015 	stw	r10,0(r2)
  80c708:	003be006 	br	80b68c <__alt_mem_onchip_mem+0xff78b68c>
  80c70c:	a080100c 	andi	r2,r20,64
  80c710:	da802217 	ldw	r10,136(sp)
  80c714:	10003026 	beq	r2,zero,80c7d8 <___vfiprintf_internal_r+0x1220>
  80c718:	5480000b 	ldhu	r18,0(r10)
  80c71c:	52800104 	addi	r10,r10,4
  80c720:	0027883a 	mov	r19,zero
  80c724:	da802215 	stw	r10,136(sp)
  80c728:	003d8006 	br	80bd2c <__alt_mem_onchip_mem+0xff78bd2c>
  80c72c:	80c00007 	ldb	r3,0(r16)
  80c730:	003c0006 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c734:	a080100c 	andi	r2,r20,64
  80c738:	d8001d85 	stb	zero,118(sp)
  80c73c:	da802217 	ldw	r10,136(sp)
  80c740:	1000201e 	bne	r2,zero,80c7c4 <___vfiprintf_internal_r+0x120c>
  80c744:	50800104 	addi	r2,r10,4
  80c748:	54800017 	ldw	r18,0(r10)
  80c74c:	0027883a 	mov	r19,zero
  80c750:	483def0e 	bge	r9,zero,80bf10 <__alt_mem_onchip_mem+0xff78bf10>
  80c754:	94c6b03a 	or	r3,r18,r19
  80c758:	d8802215 	stw	r2,136(sp)
  80c75c:	183d4e1e 	bne	r3,zero,80bc98 <__alt_mem_onchip_mem+0xff78bc98>
  80c760:	0039883a 	mov	fp,zero
  80c764:	0005883a 	mov	r2,zero
  80c768:	003e0606 	br	80bf84 <__alt_mem_onchip_mem+0xff78bf84>
  80c76c:	d9402117 	ldw	r5,132(sp)
  80c770:	d9002017 	ldw	r4,128(sp)
  80c774:	d9801a04 	addi	r6,sp,104
  80c778:	da402c15 	stw	r9,176(sp)
  80c77c:	db802a15 	stw	r14,168(sp)
  80c780:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c784:	da402c17 	ldw	r9,176(sp)
  80c788:	db802a17 	ldw	r14,168(sp)
  80c78c:	103ede1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c790:	d9401b17 	ldw	r5,108(sp)
  80c794:	d8801c17 	ldw	r2,112(sp)
  80c798:	d811883a 	mov	r8,sp
  80c79c:	29000044 	addi	r4,r5,1
  80c7a0:	003e7406 	br	80c174 <__alt_mem_onchip_mem+0xff78c174>
  80c7a4:	00bfffc4 	movi	r2,-1
  80c7a8:	003c5806 	br	80b90c <__alt_mem_onchip_mem+0xff78b90c>
  80c7ac:	d811883a 	mov	r8,sp
  80c7b0:	003ee806 	br	80c354 <__alt_mem_onchip_mem+0xff78c354>
  80c7b4:	000b883a 	mov	r5,zero
  80c7b8:	01000044 	movi	r4,1
  80c7bc:	d811883a 	mov	r8,sp
  80c7c0:	003e7c06 	br	80c1b4 <__alt_mem_onchip_mem+0xff78c1b4>
  80c7c4:	50800104 	addi	r2,r10,4
  80c7c8:	5480000b 	ldhu	r18,0(r10)
  80c7cc:	0027883a 	mov	r19,zero
  80c7d0:	483dcf0e 	bge	r9,zero,80bf10 <__alt_mem_onchip_mem+0xff78bf10>
  80c7d4:	003fdf06 	br	80c754 <__alt_mem_onchip_mem+0xff78c754>
  80c7d8:	54800017 	ldw	r18,0(r10)
  80c7dc:	52800104 	addi	r10,r10,4
  80c7e0:	0027883a 	mov	r19,zero
  80c7e4:	da802215 	stw	r10,136(sp)
  80c7e8:	003d5006 	br	80bd2c <__alt_mem_onchip_mem+0xff78bd2c>
  80c7ec:	50800104 	addi	r2,r10,4
  80c7f0:	5480000b 	ldhu	r18,0(r10)
  80c7f4:	0027883a 	mov	r19,zero
  80c7f8:	483f7d0e 	bge	r9,zero,80c5f0 <__alt_mem_onchip_mem+0xff78c5f0>
  80c7fc:	003ddc06 	br	80bf70 <__alt_mem_onchip_mem+0xff78bf70>
  80c800:	d8c02215 	stw	r3,136(sp)
  80c804:	0039883a 	mov	fp,zero
  80c808:	003ddb06 	br	80bf78 <__alt_mem_onchip_mem+0xff78bf78>
  80c80c:	02802074 	movhi	r10,129
  80c810:	52925004 	addi	r10,r10,18752
  80c814:	da802415 	stw	r10,144(sp)
  80c818:	003e8306 	br	80c228 <__alt_mem_onchip_mem+0xff78c228>
  80c81c:	d8801c17 	ldw	r2,112(sp)
  80c820:	dd002117 	ldw	r20,132(sp)
  80c824:	103eb926 	beq	r2,zero,80c30c <__alt_mem_onchip_mem+0xff78c30c>
  80c828:	d9002017 	ldw	r4,128(sp)
  80c82c:	d9801a04 	addi	r6,sp,104
  80c830:	a00b883a 	mov	r5,r20
  80c834:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c838:	003eb406 	br	80c30c <__alt_mem_onchip_mem+0xff78c30c>
  80c83c:	80c00043 	ldbu	r3,1(r16)
  80c840:	a5000814 	ori	r20,r20,32
  80c844:	84000044 	addi	r16,r16,1
  80c848:	18c03fcc 	andi	r3,r3,255
  80c84c:	18c0201c 	xori	r3,r3,128
  80c850:	18ffe004 	addi	r3,r3,-128
  80c854:	003bb706 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c858:	a809883a 	mov	r4,r21
  80c85c:	d8c02a15 	stw	r3,168(sp)
  80c860:	da002b15 	stw	r8,172(sp)
  80c864:	08049180 	call	804918 <strlen>
  80c868:	d8c02a17 	ldw	r3,168(sp)
  80c86c:	1027883a 	mov	r19,r2
  80c870:	df001d83 	ldbu	fp,118(sp)
  80c874:	d8c02215 	stw	r3,136(sp)
  80c878:	0013883a 	mov	r9,zero
  80c87c:	da002b17 	ldw	r8,172(sp)
  80c880:	003c4d06 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c884:	d9402117 	ldw	r5,132(sp)
  80c888:	d9002017 	ldw	r4,128(sp)
  80c88c:	d9801a04 	addi	r6,sp,104
  80c890:	da402c15 	stw	r9,176(sp)
  80c894:	080b4a40 	call	80b4a4 <__sprint_r.part.0>
  80c898:	da402c17 	ldw	r9,176(sp)
  80c89c:	103e9a1e 	bne	r2,zero,80c308 <__alt_mem_onchip_mem+0xff78c308>
  80c8a0:	d9401b17 	ldw	r5,108(sp)
  80c8a4:	d8801c17 	ldw	r2,112(sp)
  80c8a8:	d811883a 	mov	r8,sp
  80c8ac:	29000044 	addi	r4,r5,1
  80c8b0:	003e4206 	br	80c1bc <__alt_mem_onchip_mem+0xff78c1bc>
  80c8b4:	d9401b17 	ldw	r5,108(sp)
  80c8b8:	01002074 	movhi	r4,129
  80c8bc:	21125404 	addi	r4,r4,18768
  80c8c0:	d9002415 	stw	r4,144(sp)
  80c8c4:	29400044 	addi	r5,r5,1
  80c8c8:	003c6d06 	br	80ba80 <__alt_mem_onchip_mem+0xff78ba80>
  80c8cc:	0039883a 	mov	fp,zero
  80c8d0:	00800084 	movi	r2,2
  80c8d4:	10803fcc 	andi	r2,r2,255
  80c8d8:	01000044 	movi	r4,1
  80c8dc:	11001e26 	beq	r2,r4,80c958 <___vfiprintf_internal_r+0x13a0>
  80c8e0:	01000084 	movi	r4,2
  80c8e4:	11001e1e 	bne	r2,r4,80c960 <___vfiprintf_internal_r+0x13a8>
  80c8e8:	1829883a 	mov	r20,r3
  80c8ec:	003eea06 	br	80c498 <__alt_mem_onchip_mem+0xff78c498>
  80c8f0:	a007883a 	mov	r3,r20
  80c8f4:	00800044 	movi	r2,1
  80c8f8:	003ff606 	br	80c8d4 <__alt_mem_onchip_mem+0xff78c8d4>
  80c8fc:	00800184 	movi	r2,6
  80c900:	1240012e 	bgeu	r2,r9,80c908 <___vfiprintf_internal_r+0x1350>
  80c904:	1013883a 	mov	r9,r2
  80c908:	4827883a 	mov	r19,r9
  80c90c:	4825883a 	mov	r18,r9
  80c910:	48001516 	blt	r9,zero,80c968 <___vfiprintf_internal_r+0x13b0>
  80c914:	05402074 	movhi	r21,129
  80c918:	d8c02215 	stw	r3,136(sp)
  80c91c:	ad51f504 	addi	r21,r21,18388
  80c920:	003d1406 	br	80bd74 <__alt_mem_onchip_mem+0xff78bd74>
  80c924:	02802074 	movhi	r10,129
  80c928:	52925004 	addi	r10,r10,18752
  80c92c:	da802415 	stw	r10,144(sp)
  80c930:	200d883a 	mov	r6,r4
  80c934:	003c9106 	br	80bb7c <__alt_mem_onchip_mem+0xff78bb7c>
  80c938:	5021883a 	mov	r16,r10
  80c93c:	0013883a 	mov	r9,zero
  80c940:	003b7d06 	br	80b738 <__alt_mem_onchip_mem+0xff78b738>
  80c944:	4827883a 	mov	r19,r9
  80c948:	df001d83 	ldbu	fp,118(sp)
  80c94c:	d8c02215 	stw	r3,136(sp)
  80c950:	0013883a 	mov	r9,zero
  80c954:	003c1806 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c958:	1829883a 	mov	r20,r3
  80c95c:	003d1806 	br	80bdc0 <__alt_mem_onchip_mem+0xff78bdc0>
  80c960:	1829883a 	mov	r20,r3
  80c964:	003ccd06 	br	80bc9c <__alt_mem_onchip_mem+0xff78bc9c>
  80c968:	0025883a 	mov	r18,zero
  80c96c:	003fe906 	br	80c914 <__alt_mem_onchip_mem+0xff78c914>
  80c970:	d8802217 	ldw	r2,136(sp)
  80c974:	80c00043 	ldbu	r3,1(r16)
  80c978:	5021883a 	mov	r16,r10
  80c97c:	12400017 	ldw	r9,0(r2)
  80c980:	10800104 	addi	r2,r2,4
  80c984:	d8802215 	stw	r2,136(sp)
  80c988:	483faf0e 	bge	r9,zero,80c848 <__alt_mem_onchip_mem+0xff78c848>
  80c98c:	18c03fcc 	andi	r3,r3,255
  80c990:	18c0201c 	xori	r3,r3,128
  80c994:	027fffc4 	movi	r9,-1
  80c998:	18ffe004 	addi	r3,r3,-128
  80c99c:	003b6506 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80c9a0:	d9c01d85 	stb	r7,118(sp)
  80c9a4:	003ca006 	br	80bc28 <__alt_mem_onchip_mem+0xff78bc28>
  80c9a8:	d9c01d85 	stb	r7,118(sp)
  80c9ac:	003cad06 	br	80bc64 <__alt_mem_onchip_mem+0xff78bc64>
  80c9b0:	d9c01d85 	stb	r7,118(sp)
  80c9b4:	003d7d06 	br	80bfac <__alt_mem_onchip_mem+0xff78bfac>
  80c9b8:	d9c01d85 	stb	r7,118(sp)
  80c9bc:	003d5f06 	br	80bf3c <__alt_mem_onchip_mem+0xff78bf3c>
  80c9c0:	a080004c 	andi	r2,r20,1
  80c9c4:	0039883a 	mov	fp,zero
  80c9c8:	10000526 	beq	r2,zero,80c9e0 <___vfiprintf_internal_r+0x1428>
  80c9cc:	00800c04 	movi	r2,48
  80c9d0:	d88019c5 	stb	r2,103(sp)
  80c9d4:	dcc02717 	ldw	r19,156(sp)
  80c9d8:	dd4019c4 	addi	r21,sp,103
  80c9dc:	003bf606 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c9e0:	0027883a 	mov	r19,zero
  80c9e4:	dd401a04 	addi	r21,sp,104
  80c9e8:	003bf306 	br	80b9b8 <__alt_mem_onchip_mem+0xff78b9b8>
  80c9ec:	d9c01d85 	stb	r7,118(sp)
  80c9f0:	003dc806 	br	80c114 <__alt_mem_onchip_mem+0xff78c114>
  80c9f4:	d9c01d85 	stb	r7,118(sp)
  80c9f8:	003d3a06 	br	80bee4 <__alt_mem_onchip_mem+0xff78bee4>
  80c9fc:	d9c01d85 	stb	r7,118(sp)
  80ca00:	003d2a06 	br	80beac <__alt_mem_onchip_mem+0xff78beac>
  80ca04:	d9c01d85 	stb	r7,118(sp)
  80ca08:	003cde06 	br	80bd84 <__alt_mem_onchip_mem+0xff78bd84>
  80ca0c:	d9c01d85 	stb	r7,118(sp)
  80ca10:	003cbc06 	br	80bd04 <__alt_mem_onchip_mem+0xff78bd04>

0080ca14 <__vfiprintf_internal>:
  80ca14:	00802074 	movhi	r2,129
  80ca18:	109a6e04 	addi	r2,r2,27064
  80ca1c:	300f883a 	mov	r7,r6
  80ca20:	280d883a 	mov	r6,r5
  80ca24:	200b883a 	mov	r5,r4
  80ca28:	11000017 	ldw	r4,0(r2)
  80ca2c:	080b5b81 	jmpi	80b5b8 <___vfiprintf_internal_r>

0080ca30 <__sbprintf>:
  80ca30:	2880030b 	ldhu	r2,12(r5)
  80ca34:	2ac01917 	ldw	r11,100(r5)
  80ca38:	2a80038b 	ldhu	r10,14(r5)
  80ca3c:	2a400717 	ldw	r9,28(r5)
  80ca40:	2a000917 	ldw	r8,36(r5)
  80ca44:	defee204 	addi	sp,sp,-1144
  80ca48:	00c10004 	movi	r3,1024
  80ca4c:	dc011a15 	stw	r16,1128(sp)
  80ca50:	10bfff4c 	andi	r2,r2,65533
  80ca54:	2821883a 	mov	r16,r5
  80ca58:	d8cb883a 	add	r5,sp,r3
  80ca5c:	dc811c15 	stw	r18,1136(sp)
  80ca60:	dc411b15 	stw	r17,1132(sp)
  80ca64:	dfc11d15 	stw	ra,1140(sp)
  80ca68:	2025883a 	mov	r18,r4
  80ca6c:	d881030d 	sth	r2,1036(sp)
  80ca70:	dac11915 	stw	r11,1124(sp)
  80ca74:	da81038d 	sth	r10,1038(sp)
  80ca78:	da410715 	stw	r9,1052(sp)
  80ca7c:	da010915 	stw	r8,1060(sp)
  80ca80:	dec10015 	stw	sp,1024(sp)
  80ca84:	dec10415 	stw	sp,1040(sp)
  80ca88:	d8c10215 	stw	r3,1032(sp)
  80ca8c:	d8c10515 	stw	r3,1044(sp)
  80ca90:	d8010615 	stw	zero,1048(sp)
  80ca94:	080b5b80 	call	80b5b8 <___vfiprintf_internal_r>
  80ca98:	1023883a 	mov	r17,r2
  80ca9c:	10000416 	blt	r2,zero,80cab0 <__sbprintf+0x80>
  80caa0:	d9410004 	addi	r5,sp,1024
  80caa4:	9009883a 	mov	r4,r18
  80caa8:	080892c0 	call	80892c <_fflush_r>
  80caac:	10000d1e 	bne	r2,zero,80cae4 <__sbprintf+0xb4>
  80cab0:	d881030b 	ldhu	r2,1036(sp)
  80cab4:	1080100c 	andi	r2,r2,64
  80cab8:	10000326 	beq	r2,zero,80cac8 <__sbprintf+0x98>
  80cabc:	8080030b 	ldhu	r2,12(r16)
  80cac0:	10801014 	ori	r2,r2,64
  80cac4:	8080030d 	sth	r2,12(r16)
  80cac8:	8805883a 	mov	r2,r17
  80cacc:	dfc11d17 	ldw	ra,1140(sp)
  80cad0:	dc811c17 	ldw	r18,1136(sp)
  80cad4:	dc411b17 	ldw	r17,1132(sp)
  80cad8:	dc011a17 	ldw	r16,1128(sp)
  80cadc:	dec11e04 	addi	sp,sp,1144
  80cae0:	f800283a 	ret
  80cae4:	047fffc4 	movi	r17,-1
  80cae8:	003ff106 	br	80cab0 <__alt_mem_onchip_mem+0xff78cab0>

0080caec <_calloc_r>:
  80caec:	298b383a 	mul	r5,r5,r6
  80caf0:	defffe04 	addi	sp,sp,-8
  80caf4:	dfc00115 	stw	ra,4(sp)
  80caf8:	dc000015 	stw	r16,0(sp)
  80cafc:	0803ac40 	call	803ac4 <_malloc_r>
  80cb00:	10002926 	beq	r2,zero,80cba8 <_calloc_r+0xbc>
  80cb04:	11bfff17 	ldw	r6,-4(r2)
  80cb08:	1021883a 	mov	r16,r2
  80cb0c:	00bfff04 	movi	r2,-4
  80cb10:	308c703a 	and	r6,r6,r2
  80cb14:	00c00904 	movi	r3,36
  80cb18:	308d883a 	add	r6,r6,r2
  80cb1c:	19801636 	bltu	r3,r6,80cb78 <_calloc_r+0x8c>
  80cb20:	008004c4 	movi	r2,19
  80cb24:	11800b2e 	bgeu	r2,r6,80cb54 <_calloc_r+0x68>
  80cb28:	80000015 	stw	zero,0(r16)
  80cb2c:	80000115 	stw	zero,4(r16)
  80cb30:	008006c4 	movi	r2,27
  80cb34:	11801a2e 	bgeu	r2,r6,80cba0 <_calloc_r+0xb4>
  80cb38:	80000215 	stw	zero,8(r16)
  80cb3c:	80000315 	stw	zero,12(r16)
  80cb40:	30c0151e 	bne	r6,r3,80cb98 <_calloc_r+0xac>
  80cb44:	80000415 	stw	zero,16(r16)
  80cb48:	80800604 	addi	r2,r16,24
  80cb4c:	80000515 	stw	zero,20(r16)
  80cb50:	00000106 	br	80cb58 <_calloc_r+0x6c>
  80cb54:	8005883a 	mov	r2,r16
  80cb58:	10000015 	stw	zero,0(r2)
  80cb5c:	10000115 	stw	zero,4(r2)
  80cb60:	10000215 	stw	zero,8(r2)
  80cb64:	8005883a 	mov	r2,r16
  80cb68:	dfc00117 	ldw	ra,4(sp)
  80cb6c:	dc000017 	ldw	r16,0(sp)
  80cb70:	dec00204 	addi	sp,sp,8
  80cb74:	f800283a 	ret
  80cb78:	000b883a 	mov	r5,zero
  80cb7c:	8009883a 	mov	r4,r16
  80cb80:	08042d00 	call	8042d0 <memset>
  80cb84:	8005883a 	mov	r2,r16
  80cb88:	dfc00117 	ldw	ra,4(sp)
  80cb8c:	dc000017 	ldw	r16,0(sp)
  80cb90:	dec00204 	addi	sp,sp,8
  80cb94:	f800283a 	ret
  80cb98:	80800404 	addi	r2,r16,16
  80cb9c:	003fee06 	br	80cb58 <__alt_mem_onchip_mem+0xff78cb58>
  80cba0:	80800204 	addi	r2,r16,8
  80cba4:	003fec06 	br	80cb58 <__alt_mem_onchip_mem+0xff78cb58>
  80cba8:	0005883a 	mov	r2,zero
  80cbac:	003fee06 	br	80cb68 <__alt_mem_onchip_mem+0xff78cb68>

0080cbb0 <_fclose_r>:
  80cbb0:	28003926 	beq	r5,zero,80cc98 <_fclose_r+0xe8>
  80cbb4:	defffc04 	addi	sp,sp,-16
  80cbb8:	dc400115 	stw	r17,4(sp)
  80cbbc:	dc000015 	stw	r16,0(sp)
  80cbc0:	dfc00315 	stw	ra,12(sp)
  80cbc4:	dc800215 	stw	r18,8(sp)
  80cbc8:	2023883a 	mov	r17,r4
  80cbcc:	2821883a 	mov	r16,r5
  80cbd0:	20000226 	beq	r4,zero,80cbdc <_fclose_r+0x2c>
  80cbd4:	20800e17 	ldw	r2,56(r4)
  80cbd8:	10002726 	beq	r2,zero,80cc78 <_fclose_r+0xc8>
  80cbdc:	8080030f 	ldh	r2,12(r16)
  80cbe0:	1000071e 	bne	r2,zero,80cc00 <_fclose_r+0x50>
  80cbe4:	0005883a 	mov	r2,zero
  80cbe8:	dfc00317 	ldw	ra,12(sp)
  80cbec:	dc800217 	ldw	r18,8(sp)
  80cbf0:	dc400117 	ldw	r17,4(sp)
  80cbf4:	dc000017 	ldw	r16,0(sp)
  80cbf8:	dec00404 	addi	sp,sp,16
  80cbfc:	f800283a 	ret
  80cc00:	800b883a 	mov	r5,r16
  80cc04:	8809883a 	mov	r4,r17
  80cc08:	08087100 	call	808710 <__sflush_r>
  80cc0c:	1025883a 	mov	r18,r2
  80cc10:	80800b17 	ldw	r2,44(r16)
  80cc14:	10000426 	beq	r2,zero,80cc28 <_fclose_r+0x78>
  80cc18:	81400717 	ldw	r5,28(r16)
  80cc1c:	8809883a 	mov	r4,r17
  80cc20:	103ee83a 	callr	r2
  80cc24:	10001616 	blt	r2,zero,80cc80 <_fclose_r+0xd0>
  80cc28:	8080030b 	ldhu	r2,12(r16)
  80cc2c:	1080200c 	andi	r2,r2,128
  80cc30:	1000151e 	bne	r2,zero,80cc88 <_fclose_r+0xd8>
  80cc34:	81400c17 	ldw	r5,48(r16)
  80cc38:	28000526 	beq	r5,zero,80cc50 <_fclose_r+0xa0>
  80cc3c:	80801004 	addi	r2,r16,64
  80cc40:	28800226 	beq	r5,r2,80cc4c <_fclose_r+0x9c>
  80cc44:	8809883a 	mov	r4,r17
  80cc48:	0808f280 	call	808f28 <_free_r>
  80cc4c:	80000c15 	stw	zero,48(r16)
  80cc50:	81401117 	ldw	r5,68(r16)
  80cc54:	28000326 	beq	r5,zero,80cc64 <_fclose_r+0xb4>
  80cc58:	8809883a 	mov	r4,r17
  80cc5c:	0808f280 	call	808f28 <_free_r>
  80cc60:	80001115 	stw	zero,68(r16)
  80cc64:	0808d180 	call	808d18 <__sfp_lock_acquire>
  80cc68:	8000030d 	sth	zero,12(r16)
  80cc6c:	0808d1c0 	call	808d1c <__sfp_lock_release>
  80cc70:	9005883a 	mov	r2,r18
  80cc74:	003fdc06 	br	80cbe8 <__alt_mem_onchip_mem+0xff78cbe8>
  80cc78:	0808d080 	call	808d08 <__sinit>
  80cc7c:	003fd706 	br	80cbdc <__alt_mem_onchip_mem+0xff78cbdc>
  80cc80:	04bfffc4 	movi	r18,-1
  80cc84:	003fe806 	br	80cc28 <__alt_mem_onchip_mem+0xff78cc28>
  80cc88:	81400417 	ldw	r5,16(r16)
  80cc8c:	8809883a 	mov	r4,r17
  80cc90:	0808f280 	call	808f28 <_free_r>
  80cc94:	003fe706 	br	80cc34 <__alt_mem_onchip_mem+0xff78cc34>
  80cc98:	0005883a 	mov	r2,zero
  80cc9c:	f800283a 	ret

0080cca0 <fclose>:
  80cca0:	00802074 	movhi	r2,129
  80cca4:	109a6e04 	addi	r2,r2,27064
  80cca8:	200b883a 	mov	r5,r4
  80ccac:	11000017 	ldw	r4,0(r2)
  80ccb0:	080cbb01 	jmpi	80cbb0 <_fclose_r>

0080ccb4 <__fputwc>:
  80ccb4:	defff804 	addi	sp,sp,-32
  80ccb8:	dcc00415 	stw	r19,16(sp)
  80ccbc:	dc800315 	stw	r18,12(sp)
  80ccc0:	dc000115 	stw	r16,4(sp)
  80ccc4:	dfc00715 	stw	ra,28(sp)
  80ccc8:	dd400615 	stw	r21,24(sp)
  80cccc:	dd000515 	stw	r20,20(sp)
  80ccd0:	dc400215 	stw	r17,8(sp)
  80ccd4:	2027883a 	mov	r19,r4
  80ccd8:	2825883a 	mov	r18,r5
  80ccdc:	3021883a 	mov	r16,r6
  80cce0:	08099580 	call	809958 <__locale_mb_cur_max>
  80cce4:	00c00044 	movi	r3,1
  80cce8:	10c03e26 	beq	r2,r3,80cde4 <__fputwc+0x130>
  80ccec:	81c01704 	addi	r7,r16,92
  80ccf0:	900d883a 	mov	r6,r18
  80ccf4:	d80b883a 	mov	r5,sp
  80ccf8:	9809883a 	mov	r4,r19
  80ccfc:	080d0140 	call	80d014 <_wcrtomb_r>
  80cd00:	1029883a 	mov	r20,r2
  80cd04:	00bfffc4 	movi	r2,-1
  80cd08:	a0802026 	beq	r20,r2,80cd8c <__fputwc+0xd8>
  80cd0c:	d9400003 	ldbu	r5,0(sp)
  80cd10:	a0001c26 	beq	r20,zero,80cd84 <__fputwc+0xd0>
  80cd14:	0023883a 	mov	r17,zero
  80cd18:	05400284 	movi	r21,10
  80cd1c:	00000906 	br	80cd44 <__fputwc+0x90>
  80cd20:	80800017 	ldw	r2,0(r16)
  80cd24:	11400005 	stb	r5,0(r2)
  80cd28:	80c00017 	ldw	r3,0(r16)
  80cd2c:	18c00044 	addi	r3,r3,1
  80cd30:	80c00015 	stw	r3,0(r16)
  80cd34:	8c400044 	addi	r17,r17,1
  80cd38:	dc45883a 	add	r2,sp,r17
  80cd3c:	8d00112e 	bgeu	r17,r20,80cd84 <__fputwc+0xd0>
  80cd40:	11400003 	ldbu	r5,0(r2)
  80cd44:	80c00217 	ldw	r3,8(r16)
  80cd48:	18ffffc4 	addi	r3,r3,-1
  80cd4c:	80c00215 	stw	r3,8(r16)
  80cd50:	183ff30e 	bge	r3,zero,80cd20 <__alt_mem_onchip_mem+0xff78cd20>
  80cd54:	80800617 	ldw	r2,24(r16)
  80cd58:	18801916 	blt	r3,r2,80cdc0 <__fputwc+0x10c>
  80cd5c:	80800017 	ldw	r2,0(r16)
  80cd60:	11400005 	stb	r5,0(r2)
  80cd64:	80800017 	ldw	r2,0(r16)
  80cd68:	10c00003 	ldbu	r3,0(r2)
  80cd6c:	10800044 	addi	r2,r2,1
  80cd70:	1d402326 	beq	r3,r21,80ce00 <__fputwc+0x14c>
  80cd74:	80800015 	stw	r2,0(r16)
  80cd78:	8c400044 	addi	r17,r17,1
  80cd7c:	dc45883a 	add	r2,sp,r17
  80cd80:	8d3fef36 	bltu	r17,r20,80cd40 <__alt_mem_onchip_mem+0xff78cd40>
  80cd84:	9005883a 	mov	r2,r18
  80cd88:	00000406 	br	80cd9c <__fputwc+0xe8>
  80cd8c:	80c0030b 	ldhu	r3,12(r16)
  80cd90:	a005883a 	mov	r2,r20
  80cd94:	18c01014 	ori	r3,r3,64
  80cd98:	80c0030d 	sth	r3,12(r16)
  80cd9c:	dfc00717 	ldw	ra,28(sp)
  80cda0:	dd400617 	ldw	r21,24(sp)
  80cda4:	dd000517 	ldw	r20,20(sp)
  80cda8:	dcc00417 	ldw	r19,16(sp)
  80cdac:	dc800317 	ldw	r18,12(sp)
  80cdb0:	dc400217 	ldw	r17,8(sp)
  80cdb4:	dc000117 	ldw	r16,4(sp)
  80cdb8:	dec00804 	addi	sp,sp,32
  80cdbc:	f800283a 	ret
  80cdc0:	800d883a 	mov	r6,r16
  80cdc4:	29403fcc 	andi	r5,r5,255
  80cdc8:	9809883a 	mov	r4,r19
  80cdcc:	080cebc0 	call	80cebc <__swbuf_r>
  80cdd0:	10bfffe0 	cmpeqi	r2,r2,-1
  80cdd4:	10803fcc 	andi	r2,r2,255
  80cdd8:	103fd626 	beq	r2,zero,80cd34 <__alt_mem_onchip_mem+0xff78cd34>
  80cddc:	00bfffc4 	movi	r2,-1
  80cde0:	003fee06 	br	80cd9c <__alt_mem_onchip_mem+0xff78cd9c>
  80cde4:	90ffffc4 	addi	r3,r18,-1
  80cde8:	01003f84 	movi	r4,254
  80cdec:	20ffbf36 	bltu	r4,r3,80ccec <__alt_mem_onchip_mem+0xff78ccec>
  80cdf0:	900b883a 	mov	r5,r18
  80cdf4:	dc800005 	stb	r18,0(sp)
  80cdf8:	1029883a 	mov	r20,r2
  80cdfc:	003fc506 	br	80cd14 <__alt_mem_onchip_mem+0xff78cd14>
  80ce00:	800d883a 	mov	r6,r16
  80ce04:	a80b883a 	mov	r5,r21
  80ce08:	9809883a 	mov	r4,r19
  80ce0c:	080cebc0 	call	80cebc <__swbuf_r>
  80ce10:	10bfffe0 	cmpeqi	r2,r2,-1
  80ce14:	003fef06 	br	80cdd4 <__alt_mem_onchip_mem+0xff78cdd4>

0080ce18 <_fputwc_r>:
  80ce18:	3080030b 	ldhu	r2,12(r6)
  80ce1c:	10c8000c 	andi	r3,r2,8192
  80ce20:	1800051e 	bne	r3,zero,80ce38 <_fputwc_r+0x20>
  80ce24:	30c01917 	ldw	r3,100(r6)
  80ce28:	10880014 	ori	r2,r2,8192
  80ce2c:	3080030d 	sth	r2,12(r6)
  80ce30:	18880014 	ori	r2,r3,8192
  80ce34:	30801915 	stw	r2,100(r6)
  80ce38:	080ccb41 	jmpi	80ccb4 <__fputwc>

0080ce3c <fputwc>:
  80ce3c:	00802074 	movhi	r2,129
  80ce40:	defffc04 	addi	sp,sp,-16
  80ce44:	109a6e04 	addi	r2,r2,27064
  80ce48:	dc000115 	stw	r16,4(sp)
  80ce4c:	14000017 	ldw	r16,0(r2)
  80ce50:	dc400215 	stw	r17,8(sp)
  80ce54:	dfc00315 	stw	ra,12(sp)
  80ce58:	2023883a 	mov	r17,r4
  80ce5c:	80000226 	beq	r16,zero,80ce68 <fputwc+0x2c>
  80ce60:	80800e17 	ldw	r2,56(r16)
  80ce64:	10001026 	beq	r2,zero,80cea8 <fputwc+0x6c>
  80ce68:	2880030b 	ldhu	r2,12(r5)
  80ce6c:	10c8000c 	andi	r3,r2,8192
  80ce70:	1800051e 	bne	r3,zero,80ce88 <fputwc+0x4c>
  80ce74:	28c01917 	ldw	r3,100(r5)
  80ce78:	10880014 	ori	r2,r2,8192
  80ce7c:	2880030d 	sth	r2,12(r5)
  80ce80:	18880014 	ori	r2,r3,8192
  80ce84:	28801915 	stw	r2,100(r5)
  80ce88:	280d883a 	mov	r6,r5
  80ce8c:	8009883a 	mov	r4,r16
  80ce90:	880b883a 	mov	r5,r17
  80ce94:	dfc00317 	ldw	ra,12(sp)
  80ce98:	dc400217 	ldw	r17,8(sp)
  80ce9c:	dc000117 	ldw	r16,4(sp)
  80cea0:	dec00404 	addi	sp,sp,16
  80cea4:	080ccb41 	jmpi	80ccb4 <__fputwc>
  80cea8:	8009883a 	mov	r4,r16
  80ceac:	d9400015 	stw	r5,0(sp)
  80ceb0:	0808d080 	call	808d08 <__sinit>
  80ceb4:	d9400017 	ldw	r5,0(sp)
  80ceb8:	003feb06 	br	80ce68 <__alt_mem_onchip_mem+0xff78ce68>

0080cebc <__swbuf_r>:
  80cebc:	defffb04 	addi	sp,sp,-20
  80cec0:	dcc00315 	stw	r19,12(sp)
  80cec4:	dc800215 	stw	r18,8(sp)
  80cec8:	dc000015 	stw	r16,0(sp)
  80cecc:	dfc00415 	stw	ra,16(sp)
  80ced0:	dc400115 	stw	r17,4(sp)
  80ced4:	2025883a 	mov	r18,r4
  80ced8:	2827883a 	mov	r19,r5
  80cedc:	3021883a 	mov	r16,r6
  80cee0:	20000226 	beq	r4,zero,80ceec <__swbuf_r+0x30>
  80cee4:	20800e17 	ldw	r2,56(r4)
  80cee8:	10004226 	beq	r2,zero,80cff4 <__swbuf_r+0x138>
  80ceec:	80800617 	ldw	r2,24(r16)
  80cef0:	8100030b 	ldhu	r4,12(r16)
  80cef4:	80800215 	stw	r2,8(r16)
  80cef8:	2080020c 	andi	r2,r4,8
  80cefc:	10003626 	beq	r2,zero,80cfd8 <__swbuf_r+0x11c>
  80cf00:	80c00417 	ldw	r3,16(r16)
  80cf04:	18003426 	beq	r3,zero,80cfd8 <__swbuf_r+0x11c>
  80cf08:	2088000c 	andi	r2,r4,8192
  80cf0c:	9c403fcc 	andi	r17,r19,255
  80cf10:	10001a26 	beq	r2,zero,80cf7c <__swbuf_r+0xc0>
  80cf14:	80800017 	ldw	r2,0(r16)
  80cf18:	81000517 	ldw	r4,20(r16)
  80cf1c:	10c7c83a 	sub	r3,r2,r3
  80cf20:	1900200e 	bge	r3,r4,80cfa4 <__swbuf_r+0xe8>
  80cf24:	18c00044 	addi	r3,r3,1
  80cf28:	81000217 	ldw	r4,8(r16)
  80cf2c:	11400044 	addi	r5,r2,1
  80cf30:	81400015 	stw	r5,0(r16)
  80cf34:	213fffc4 	addi	r4,r4,-1
  80cf38:	81000215 	stw	r4,8(r16)
  80cf3c:	14c00005 	stb	r19,0(r2)
  80cf40:	80800517 	ldw	r2,20(r16)
  80cf44:	10c01e26 	beq	r2,r3,80cfc0 <__swbuf_r+0x104>
  80cf48:	8080030b 	ldhu	r2,12(r16)
  80cf4c:	1080004c 	andi	r2,r2,1
  80cf50:	10000226 	beq	r2,zero,80cf5c <__swbuf_r+0xa0>
  80cf54:	00800284 	movi	r2,10
  80cf58:	88801926 	beq	r17,r2,80cfc0 <__swbuf_r+0x104>
  80cf5c:	8805883a 	mov	r2,r17
  80cf60:	dfc00417 	ldw	ra,16(sp)
  80cf64:	dcc00317 	ldw	r19,12(sp)
  80cf68:	dc800217 	ldw	r18,8(sp)
  80cf6c:	dc400117 	ldw	r17,4(sp)
  80cf70:	dc000017 	ldw	r16,0(sp)
  80cf74:	dec00504 	addi	sp,sp,20
  80cf78:	f800283a 	ret
  80cf7c:	81401917 	ldw	r5,100(r16)
  80cf80:	00b7ffc4 	movi	r2,-8193
  80cf84:	21080014 	ori	r4,r4,8192
  80cf88:	2884703a 	and	r2,r5,r2
  80cf8c:	80801915 	stw	r2,100(r16)
  80cf90:	80800017 	ldw	r2,0(r16)
  80cf94:	8100030d 	sth	r4,12(r16)
  80cf98:	81000517 	ldw	r4,20(r16)
  80cf9c:	10c7c83a 	sub	r3,r2,r3
  80cfa0:	193fe016 	blt	r3,r4,80cf24 <__alt_mem_onchip_mem+0xff78cf24>
  80cfa4:	800b883a 	mov	r5,r16
  80cfa8:	9009883a 	mov	r4,r18
  80cfac:	080892c0 	call	80892c <_fflush_r>
  80cfb0:	1000071e 	bne	r2,zero,80cfd0 <__swbuf_r+0x114>
  80cfb4:	80800017 	ldw	r2,0(r16)
  80cfb8:	00c00044 	movi	r3,1
  80cfbc:	003fda06 	br	80cf28 <__alt_mem_onchip_mem+0xff78cf28>
  80cfc0:	800b883a 	mov	r5,r16
  80cfc4:	9009883a 	mov	r4,r18
  80cfc8:	080892c0 	call	80892c <_fflush_r>
  80cfcc:	103fe326 	beq	r2,zero,80cf5c <__alt_mem_onchip_mem+0xff78cf5c>
  80cfd0:	00bfffc4 	movi	r2,-1
  80cfd4:	003fe206 	br	80cf60 <__alt_mem_onchip_mem+0xff78cf60>
  80cfd8:	800b883a 	mov	r5,r16
  80cfdc:	9009883a 	mov	r4,r18
  80cfe0:	0806ce00 	call	806ce0 <__swsetup_r>
  80cfe4:	103ffa1e 	bne	r2,zero,80cfd0 <__alt_mem_onchip_mem+0xff78cfd0>
  80cfe8:	8100030b 	ldhu	r4,12(r16)
  80cfec:	80c00417 	ldw	r3,16(r16)
  80cff0:	003fc506 	br	80cf08 <__alt_mem_onchip_mem+0xff78cf08>
  80cff4:	0808d080 	call	808d08 <__sinit>
  80cff8:	003fbc06 	br	80ceec <__alt_mem_onchip_mem+0xff78ceec>

0080cffc <__swbuf>:
  80cffc:	00802074 	movhi	r2,129
  80d000:	109a6e04 	addi	r2,r2,27064
  80d004:	280d883a 	mov	r6,r5
  80d008:	200b883a 	mov	r5,r4
  80d00c:	11000017 	ldw	r4,0(r2)
  80d010:	080cebc1 	jmpi	80cebc <__swbuf_r>

0080d014 <_wcrtomb_r>:
  80d014:	defff604 	addi	sp,sp,-40
  80d018:	00802074 	movhi	r2,129
  80d01c:	dc800815 	stw	r18,32(sp)
  80d020:	dc400715 	stw	r17,28(sp)
  80d024:	dc000615 	stw	r16,24(sp)
  80d028:	109a7204 	addi	r2,r2,27080
  80d02c:	dfc00915 	stw	ra,36(sp)
  80d030:	2021883a 	mov	r16,r4
  80d034:	3823883a 	mov	r17,r7
  80d038:	14800017 	ldw	r18,0(r2)
  80d03c:	28001426 	beq	r5,zero,80d090 <_wcrtomb_r+0x7c>
  80d040:	d9400415 	stw	r5,16(sp)
  80d044:	d9800515 	stw	r6,20(sp)
  80d048:	080994c0 	call	80994c <__locale_charset>
  80d04c:	d9800517 	ldw	r6,20(sp)
  80d050:	d9400417 	ldw	r5,16(sp)
  80d054:	100f883a 	mov	r7,r2
  80d058:	dc400015 	stw	r17,0(sp)
  80d05c:	8009883a 	mov	r4,r16
  80d060:	903ee83a 	callr	r18
  80d064:	00ffffc4 	movi	r3,-1
  80d068:	10c0031e 	bne	r2,r3,80d078 <_wcrtomb_r+0x64>
  80d06c:	88000015 	stw	zero,0(r17)
  80d070:	00c02284 	movi	r3,138
  80d074:	80c00015 	stw	r3,0(r16)
  80d078:	dfc00917 	ldw	ra,36(sp)
  80d07c:	dc800817 	ldw	r18,32(sp)
  80d080:	dc400717 	ldw	r17,28(sp)
  80d084:	dc000617 	ldw	r16,24(sp)
  80d088:	dec00a04 	addi	sp,sp,40
  80d08c:	f800283a 	ret
  80d090:	080994c0 	call	80994c <__locale_charset>
  80d094:	100f883a 	mov	r7,r2
  80d098:	dc400015 	stw	r17,0(sp)
  80d09c:	000d883a 	mov	r6,zero
  80d0a0:	d9400104 	addi	r5,sp,4
  80d0a4:	8009883a 	mov	r4,r16
  80d0a8:	903ee83a 	callr	r18
  80d0ac:	003fed06 	br	80d064 <__alt_mem_onchip_mem+0xff78d064>

0080d0b0 <wcrtomb>:
  80d0b0:	defff604 	addi	sp,sp,-40
  80d0b4:	00802074 	movhi	r2,129
  80d0b8:	dc800615 	stw	r18,24(sp)
  80d0bc:	dc400515 	stw	r17,20(sp)
  80d0c0:	109a6e04 	addi	r2,r2,27064
  80d0c4:	dfc00915 	stw	ra,36(sp)
  80d0c8:	dd000815 	stw	r20,32(sp)
  80d0cc:	dcc00715 	stw	r19,28(sp)
  80d0d0:	dc000415 	stw	r16,16(sp)
  80d0d4:	3025883a 	mov	r18,r6
  80d0d8:	14400017 	ldw	r17,0(r2)
  80d0dc:	20001926 	beq	r4,zero,80d144 <wcrtomb+0x94>
  80d0e0:	00802074 	movhi	r2,129
  80d0e4:	109a7204 	addi	r2,r2,27080
  80d0e8:	15000017 	ldw	r20,0(r2)
  80d0ec:	2021883a 	mov	r16,r4
  80d0f0:	2827883a 	mov	r19,r5
  80d0f4:	080994c0 	call	80994c <__locale_charset>
  80d0f8:	100f883a 	mov	r7,r2
  80d0fc:	dc800015 	stw	r18,0(sp)
  80d100:	980d883a 	mov	r6,r19
  80d104:	800b883a 	mov	r5,r16
  80d108:	8809883a 	mov	r4,r17
  80d10c:	a03ee83a 	callr	r20
  80d110:	00ffffc4 	movi	r3,-1
  80d114:	10c0031e 	bne	r2,r3,80d124 <wcrtomb+0x74>
  80d118:	90000015 	stw	zero,0(r18)
  80d11c:	00c02284 	movi	r3,138
  80d120:	88c00015 	stw	r3,0(r17)
  80d124:	dfc00917 	ldw	ra,36(sp)
  80d128:	dd000817 	ldw	r20,32(sp)
  80d12c:	dcc00717 	ldw	r19,28(sp)
  80d130:	dc800617 	ldw	r18,24(sp)
  80d134:	dc400517 	ldw	r17,20(sp)
  80d138:	dc000417 	ldw	r16,16(sp)
  80d13c:	dec00a04 	addi	sp,sp,40
  80d140:	f800283a 	ret
  80d144:	00802074 	movhi	r2,129
  80d148:	109a7204 	addi	r2,r2,27080
  80d14c:	14000017 	ldw	r16,0(r2)
  80d150:	080994c0 	call	80994c <__locale_charset>
  80d154:	100f883a 	mov	r7,r2
  80d158:	dc800015 	stw	r18,0(sp)
  80d15c:	000d883a 	mov	r6,zero
  80d160:	d9400104 	addi	r5,sp,4
  80d164:	8809883a 	mov	r4,r17
  80d168:	803ee83a 	callr	r16
  80d16c:	003fe806 	br	80d110 <__alt_mem_onchip_mem+0xff78d110>

0080d170 <__ascii_wctomb>:
  80d170:	28000526 	beq	r5,zero,80d188 <__ascii_wctomb+0x18>
  80d174:	00803fc4 	movi	r2,255
  80d178:	11800536 	bltu	r2,r6,80d190 <__ascii_wctomb+0x20>
  80d17c:	29800005 	stb	r6,0(r5)
  80d180:	00800044 	movi	r2,1
  80d184:	f800283a 	ret
  80d188:	0005883a 	mov	r2,zero
  80d18c:	f800283a 	ret
  80d190:	00802284 	movi	r2,138
  80d194:	20800015 	stw	r2,0(r4)
  80d198:	00bfffc4 	movi	r2,-1
  80d19c:	f800283a 	ret

0080d1a0 <_wctomb_r>:
  80d1a0:	00802074 	movhi	r2,129
  80d1a4:	defff904 	addi	sp,sp,-28
  80d1a8:	109a7204 	addi	r2,r2,27080
  80d1ac:	dfc00615 	stw	ra,24(sp)
  80d1b0:	dc400515 	stw	r17,20(sp)
  80d1b4:	dc000415 	stw	r16,16(sp)
  80d1b8:	3823883a 	mov	r17,r7
  80d1bc:	14000017 	ldw	r16,0(r2)
  80d1c0:	d9000115 	stw	r4,4(sp)
  80d1c4:	d9400215 	stw	r5,8(sp)
  80d1c8:	d9800315 	stw	r6,12(sp)
  80d1cc:	080994c0 	call	80994c <__locale_charset>
  80d1d0:	d9800317 	ldw	r6,12(sp)
  80d1d4:	d9400217 	ldw	r5,8(sp)
  80d1d8:	d9000117 	ldw	r4,4(sp)
  80d1dc:	100f883a 	mov	r7,r2
  80d1e0:	dc400015 	stw	r17,0(sp)
  80d1e4:	803ee83a 	callr	r16
  80d1e8:	dfc00617 	ldw	ra,24(sp)
  80d1ec:	dc400517 	ldw	r17,20(sp)
  80d1f0:	dc000417 	ldw	r16,16(sp)
  80d1f4:	dec00704 	addi	sp,sp,28
  80d1f8:	f800283a 	ret

0080d1fc <__udivdi3>:
  80d1fc:	defff504 	addi	sp,sp,-44
  80d200:	dcc00415 	stw	r19,16(sp)
  80d204:	dc000115 	stw	r16,4(sp)
  80d208:	dfc00a15 	stw	ra,40(sp)
  80d20c:	df000915 	stw	fp,36(sp)
  80d210:	ddc00815 	stw	r23,32(sp)
  80d214:	dd800715 	stw	r22,28(sp)
  80d218:	dd400615 	stw	r21,24(sp)
  80d21c:	dd000515 	stw	r20,20(sp)
  80d220:	dc800315 	stw	r18,12(sp)
  80d224:	dc400215 	stw	r17,8(sp)
  80d228:	2027883a 	mov	r19,r4
  80d22c:	2821883a 	mov	r16,r5
  80d230:	3800411e 	bne	r7,zero,80d338 <__udivdi3+0x13c>
  80d234:	3023883a 	mov	r17,r6
  80d238:	2025883a 	mov	r18,r4
  80d23c:	2980522e 	bgeu	r5,r6,80d388 <__udivdi3+0x18c>
  80d240:	00bfffd4 	movui	r2,65535
  80d244:	282d883a 	mov	r22,r5
  80d248:	1180a836 	bltu	r2,r6,80d4ec <__udivdi3+0x2f0>
  80d24c:	00803fc4 	movi	r2,255
  80d250:	1185803a 	cmpltu	r2,r2,r6
  80d254:	100490fa 	slli	r2,r2,3
  80d258:	3086d83a 	srl	r3,r6,r2
  80d25c:	01002074 	movhi	r4,129
  80d260:	21125804 	addi	r4,r4,18784
  80d264:	20c7883a 	add	r3,r4,r3
  80d268:	18c00003 	ldbu	r3,0(r3)
  80d26c:	1885883a 	add	r2,r3,r2
  80d270:	00c00804 	movi	r3,32
  80d274:	1887c83a 	sub	r3,r3,r2
  80d278:	18000526 	beq	r3,zero,80d290 <__udivdi3+0x94>
  80d27c:	80e0983a 	sll	r16,r16,r3
  80d280:	9884d83a 	srl	r2,r19,r2
  80d284:	30e2983a 	sll	r17,r6,r3
  80d288:	98e4983a 	sll	r18,r19,r3
  80d28c:	142cb03a 	or	r22,r2,r16
  80d290:	882ad43a 	srli	r21,r17,16
  80d294:	b009883a 	mov	r4,r22
  80d298:	8d3fffcc 	andi	r20,r17,65535
  80d29c:	a80b883a 	mov	r5,r21
  80d2a0:	080de080 	call	80de08 <__umodsi3>
  80d2a4:	b009883a 	mov	r4,r22
  80d2a8:	a80b883a 	mov	r5,r21
  80d2ac:	1027883a 	mov	r19,r2
  80d2b0:	080dda40 	call	80dda4 <__udivsi3>
  80d2b4:	102d883a 	mov	r22,r2
  80d2b8:	9826943a 	slli	r19,r19,16
  80d2bc:	9004d43a 	srli	r2,r18,16
  80d2c0:	a5a1383a 	mul	r16,r20,r22
  80d2c4:	14c4b03a 	or	r2,r2,r19
  80d2c8:	1400052e 	bgeu	r2,r16,80d2e0 <__udivdi3+0xe4>
  80d2cc:	1445883a 	add	r2,r2,r17
  80d2d0:	b0ffffc4 	addi	r3,r22,-1
  80d2d4:	14400136 	bltu	r2,r17,80d2dc <__udivdi3+0xe0>
  80d2d8:	14012336 	bltu	r2,r16,80d768 <__udivdi3+0x56c>
  80d2dc:	182d883a 	mov	r22,r3
  80d2e0:	1421c83a 	sub	r16,r2,r16
  80d2e4:	a80b883a 	mov	r5,r21
  80d2e8:	8009883a 	mov	r4,r16
  80d2ec:	080de080 	call	80de08 <__umodsi3>
  80d2f0:	1027883a 	mov	r19,r2
  80d2f4:	a80b883a 	mov	r5,r21
  80d2f8:	8009883a 	mov	r4,r16
  80d2fc:	080dda40 	call	80dda4 <__udivsi3>
  80d300:	9826943a 	slli	r19,r19,16
  80d304:	a0a9383a 	mul	r20,r20,r2
  80d308:	94bfffcc 	andi	r18,r18,65535
  80d30c:	94e4b03a 	or	r18,r18,r19
  80d310:	9500052e 	bgeu	r18,r20,80d328 <__udivdi3+0x12c>
  80d314:	8ca5883a 	add	r18,r17,r18
  80d318:	10ffffc4 	addi	r3,r2,-1
  80d31c:	9440f136 	bltu	r18,r17,80d6e4 <__udivdi3+0x4e8>
  80d320:	9500f02e 	bgeu	r18,r20,80d6e4 <__udivdi3+0x4e8>
  80d324:	10bfff84 	addi	r2,r2,-2
  80d328:	b00c943a 	slli	r6,r22,16
  80d32c:	0007883a 	mov	r3,zero
  80d330:	3084b03a 	or	r2,r6,r2
  80d334:	00005906 	br	80d49c <__udivdi3+0x2a0>
  80d338:	29c05636 	bltu	r5,r7,80d494 <__udivdi3+0x298>
  80d33c:	00bfffd4 	movui	r2,65535
  80d340:	11c0622e 	bgeu	r2,r7,80d4cc <__udivdi3+0x2d0>
  80d344:	00804034 	movhi	r2,256
  80d348:	10bfffc4 	addi	r2,r2,-1
  80d34c:	11c0ee36 	bltu	r2,r7,80d708 <__udivdi3+0x50c>
  80d350:	00800404 	movi	r2,16
  80d354:	3886d83a 	srl	r3,r7,r2
  80d358:	01002074 	movhi	r4,129
  80d35c:	21125804 	addi	r4,r4,18784
  80d360:	20c7883a 	add	r3,r4,r3
  80d364:	18c00003 	ldbu	r3,0(r3)
  80d368:	05400804 	movi	r21,32
  80d36c:	1885883a 	add	r2,r3,r2
  80d370:	a8abc83a 	sub	r21,r21,r2
  80d374:	a800621e 	bne	r21,zero,80d500 <__udivdi3+0x304>
  80d378:	3c00e936 	bltu	r7,r16,80d720 <__udivdi3+0x524>
  80d37c:	9985403a 	cmpgeu	r2,r19,r6
  80d380:	0007883a 	mov	r3,zero
  80d384:	00004506 	br	80d49c <__udivdi3+0x2a0>
  80d388:	3000041e 	bne	r6,zero,80d39c <__udivdi3+0x1a0>
  80d38c:	000b883a 	mov	r5,zero
  80d390:	01000044 	movi	r4,1
  80d394:	080dda40 	call	80dda4 <__udivsi3>
  80d398:	1023883a 	mov	r17,r2
  80d39c:	00bfffd4 	movui	r2,65535
  80d3a0:	14404e2e 	bgeu	r2,r17,80d4dc <__udivdi3+0x2e0>
  80d3a4:	00804034 	movhi	r2,256
  80d3a8:	10bfffc4 	addi	r2,r2,-1
  80d3ac:	1440d836 	bltu	r2,r17,80d710 <__udivdi3+0x514>
  80d3b0:	00800404 	movi	r2,16
  80d3b4:	8886d83a 	srl	r3,r17,r2
  80d3b8:	01002074 	movhi	r4,129
  80d3bc:	21125804 	addi	r4,r4,18784
  80d3c0:	20c7883a 	add	r3,r4,r3
  80d3c4:	18c00003 	ldbu	r3,0(r3)
  80d3c8:	1885883a 	add	r2,r3,r2
  80d3cc:	00c00804 	movi	r3,32
  80d3d0:	1887c83a 	sub	r3,r3,r2
  80d3d4:	18008f1e 	bne	r3,zero,80d614 <__udivdi3+0x418>
  80d3d8:	882ad43a 	srli	r21,r17,16
  80d3dc:	8461c83a 	sub	r16,r16,r17
  80d3e0:	8d3fffcc 	andi	r20,r17,65535
  80d3e4:	00c00044 	movi	r3,1
  80d3e8:	8009883a 	mov	r4,r16
  80d3ec:	a80b883a 	mov	r5,r21
  80d3f0:	d8c00015 	stw	r3,0(sp)
  80d3f4:	080de080 	call	80de08 <__umodsi3>
  80d3f8:	8009883a 	mov	r4,r16
  80d3fc:	a80b883a 	mov	r5,r21
  80d400:	1027883a 	mov	r19,r2
  80d404:	080dda40 	call	80dda4 <__udivsi3>
  80d408:	9826943a 	slli	r19,r19,16
  80d40c:	9008d43a 	srli	r4,r18,16
  80d410:	1521383a 	mul	r16,r2,r20
  80d414:	102d883a 	mov	r22,r2
  80d418:	24c8b03a 	or	r4,r4,r19
  80d41c:	d8c00017 	ldw	r3,0(sp)
  80d420:	2400052e 	bgeu	r4,r16,80d438 <__udivdi3+0x23c>
  80d424:	2449883a 	add	r4,r4,r17
  80d428:	b0bfffc4 	addi	r2,r22,-1
  80d42c:	24400136 	bltu	r4,r17,80d434 <__udivdi3+0x238>
  80d430:	2400ca36 	bltu	r4,r16,80d75c <__udivdi3+0x560>
  80d434:	102d883a 	mov	r22,r2
  80d438:	2421c83a 	sub	r16,r4,r16
  80d43c:	a80b883a 	mov	r5,r21
  80d440:	8009883a 	mov	r4,r16
  80d444:	d8c00015 	stw	r3,0(sp)
  80d448:	080de080 	call	80de08 <__umodsi3>
  80d44c:	1027883a 	mov	r19,r2
  80d450:	a80b883a 	mov	r5,r21
  80d454:	8009883a 	mov	r4,r16
  80d458:	080dda40 	call	80dda4 <__udivsi3>
  80d45c:	9826943a 	slli	r19,r19,16
  80d460:	1529383a 	mul	r20,r2,r20
  80d464:	94bfffcc 	andi	r18,r18,65535
  80d468:	94e4b03a 	or	r18,r18,r19
  80d46c:	d8c00017 	ldw	r3,0(sp)
  80d470:	9500052e 	bgeu	r18,r20,80d488 <__udivdi3+0x28c>
  80d474:	8ca5883a 	add	r18,r17,r18
  80d478:	113fffc4 	addi	r4,r2,-1
  80d47c:	94409736 	bltu	r18,r17,80d6dc <__udivdi3+0x4e0>
  80d480:	9500962e 	bgeu	r18,r20,80d6dc <__udivdi3+0x4e0>
  80d484:	10bfff84 	addi	r2,r2,-2
  80d488:	b00c943a 	slli	r6,r22,16
  80d48c:	3084b03a 	or	r2,r6,r2
  80d490:	00000206 	br	80d49c <__udivdi3+0x2a0>
  80d494:	0007883a 	mov	r3,zero
  80d498:	0005883a 	mov	r2,zero
  80d49c:	dfc00a17 	ldw	ra,40(sp)
  80d4a0:	df000917 	ldw	fp,36(sp)
  80d4a4:	ddc00817 	ldw	r23,32(sp)
  80d4a8:	dd800717 	ldw	r22,28(sp)
  80d4ac:	dd400617 	ldw	r21,24(sp)
  80d4b0:	dd000517 	ldw	r20,20(sp)
  80d4b4:	dcc00417 	ldw	r19,16(sp)
  80d4b8:	dc800317 	ldw	r18,12(sp)
  80d4bc:	dc400217 	ldw	r17,8(sp)
  80d4c0:	dc000117 	ldw	r16,4(sp)
  80d4c4:	dec00b04 	addi	sp,sp,44
  80d4c8:	f800283a 	ret
  80d4cc:	00803fc4 	movi	r2,255
  80d4d0:	11c5803a 	cmpltu	r2,r2,r7
  80d4d4:	100490fa 	slli	r2,r2,3
  80d4d8:	003f9e06 	br	80d354 <__alt_mem_onchip_mem+0xff78d354>
  80d4dc:	00803fc4 	movi	r2,255
  80d4e0:	1445803a 	cmpltu	r2,r2,r17
  80d4e4:	100490fa 	slli	r2,r2,3
  80d4e8:	003fb206 	br	80d3b4 <__alt_mem_onchip_mem+0xff78d3b4>
  80d4ec:	00804034 	movhi	r2,256
  80d4f0:	10bfffc4 	addi	r2,r2,-1
  80d4f4:	11808836 	bltu	r2,r6,80d718 <__udivdi3+0x51c>
  80d4f8:	00800404 	movi	r2,16
  80d4fc:	003f5606 	br	80d258 <__alt_mem_onchip_mem+0xff78d258>
  80d500:	30aed83a 	srl	r23,r6,r2
  80d504:	3d4e983a 	sll	r7,r7,r21
  80d508:	80acd83a 	srl	r22,r16,r2
  80d50c:	9884d83a 	srl	r2,r19,r2
  80d510:	3deeb03a 	or	r23,r7,r23
  80d514:	b824d43a 	srli	r18,r23,16
  80d518:	8560983a 	sll	r16,r16,r21
  80d51c:	b009883a 	mov	r4,r22
  80d520:	900b883a 	mov	r5,r18
  80d524:	3568983a 	sll	r20,r6,r21
  80d528:	1420b03a 	or	r16,r2,r16
  80d52c:	080de080 	call	80de08 <__umodsi3>
  80d530:	b009883a 	mov	r4,r22
  80d534:	900b883a 	mov	r5,r18
  80d538:	1023883a 	mov	r17,r2
  80d53c:	080dda40 	call	80dda4 <__udivsi3>
  80d540:	8808943a 	slli	r4,r17,16
  80d544:	bf3fffcc 	andi	fp,r23,65535
  80d548:	8006d43a 	srli	r3,r16,16
  80d54c:	e0a3383a 	mul	r17,fp,r2
  80d550:	100d883a 	mov	r6,r2
  80d554:	1906b03a 	or	r3,r3,r4
  80d558:	1c40042e 	bgeu	r3,r17,80d56c <__udivdi3+0x370>
  80d55c:	1dc7883a 	add	r3,r3,r23
  80d560:	10bfffc4 	addi	r2,r2,-1
  80d564:	1dc0752e 	bgeu	r3,r23,80d73c <__udivdi3+0x540>
  80d568:	100d883a 	mov	r6,r2
  80d56c:	1c63c83a 	sub	r17,r3,r17
  80d570:	900b883a 	mov	r5,r18
  80d574:	8809883a 	mov	r4,r17
  80d578:	d9800015 	stw	r6,0(sp)
  80d57c:	080de080 	call	80de08 <__umodsi3>
  80d580:	102d883a 	mov	r22,r2
  80d584:	8809883a 	mov	r4,r17
  80d588:	900b883a 	mov	r5,r18
  80d58c:	080dda40 	call	80dda4 <__udivsi3>
  80d590:	b02c943a 	slli	r22,r22,16
  80d594:	e089383a 	mul	r4,fp,r2
  80d598:	843fffcc 	andi	r16,r16,65535
  80d59c:	85a0b03a 	or	r16,r16,r22
  80d5a0:	d9800017 	ldw	r6,0(sp)
  80d5a4:	8100042e 	bgeu	r16,r4,80d5b8 <__udivdi3+0x3bc>
  80d5a8:	85e1883a 	add	r16,r16,r23
  80d5ac:	10ffffc4 	addi	r3,r2,-1
  80d5b0:	85c05e2e 	bgeu	r16,r23,80d72c <__udivdi3+0x530>
  80d5b4:	1805883a 	mov	r2,r3
  80d5b8:	300c943a 	slli	r6,r6,16
  80d5bc:	a17fffcc 	andi	r5,r20,65535
  80d5c0:	a028d43a 	srli	r20,r20,16
  80d5c4:	3084b03a 	or	r2,r6,r2
  80d5c8:	10ffffcc 	andi	r3,r2,65535
  80d5cc:	100cd43a 	srli	r6,r2,16
  80d5d0:	194f383a 	mul	r7,r3,r5
  80d5d4:	1d07383a 	mul	r3,r3,r20
  80d5d8:	314b383a 	mul	r5,r6,r5
  80d5dc:	3810d43a 	srli	r8,r7,16
  80d5e0:	8121c83a 	sub	r16,r16,r4
  80d5e4:	1947883a 	add	r3,r3,r5
  80d5e8:	40c7883a 	add	r3,r8,r3
  80d5ec:	350d383a 	mul	r6,r6,r20
  80d5f0:	1940022e 	bgeu	r3,r5,80d5fc <__udivdi3+0x400>
  80d5f4:	01000074 	movhi	r4,1
  80d5f8:	310d883a 	add	r6,r6,r4
  80d5fc:	1828d43a 	srli	r20,r3,16
  80d600:	a18d883a 	add	r6,r20,r6
  80d604:	81803e36 	bltu	r16,r6,80d700 <__udivdi3+0x504>
  80d608:	81803826 	beq	r16,r6,80d6ec <__udivdi3+0x4f0>
  80d60c:	0007883a 	mov	r3,zero
  80d610:	003fa206 	br	80d49c <__alt_mem_onchip_mem+0xff78d49c>
  80d614:	88e2983a 	sll	r17,r17,r3
  80d618:	80a8d83a 	srl	r20,r16,r2
  80d61c:	80e0983a 	sll	r16,r16,r3
  80d620:	882ad43a 	srli	r21,r17,16
  80d624:	9884d83a 	srl	r2,r19,r2
  80d628:	a009883a 	mov	r4,r20
  80d62c:	a80b883a 	mov	r5,r21
  80d630:	142eb03a 	or	r23,r2,r16
  80d634:	98e4983a 	sll	r18,r19,r3
  80d638:	080de080 	call	80de08 <__umodsi3>
  80d63c:	a009883a 	mov	r4,r20
  80d640:	a80b883a 	mov	r5,r21
  80d644:	1021883a 	mov	r16,r2
  80d648:	080dda40 	call	80dda4 <__udivsi3>
  80d64c:	1039883a 	mov	fp,r2
  80d650:	8d3fffcc 	andi	r20,r17,65535
  80d654:	8020943a 	slli	r16,r16,16
  80d658:	b804d43a 	srli	r2,r23,16
  80d65c:	a72d383a 	mul	r22,r20,fp
  80d660:	1404b03a 	or	r2,r2,r16
  80d664:	1580062e 	bgeu	r2,r22,80d680 <__udivdi3+0x484>
  80d668:	1445883a 	add	r2,r2,r17
  80d66c:	e0ffffc4 	addi	r3,fp,-1
  80d670:	14403836 	bltu	r2,r17,80d754 <__udivdi3+0x558>
  80d674:	1580372e 	bgeu	r2,r22,80d754 <__udivdi3+0x558>
  80d678:	e73fff84 	addi	fp,fp,-2
  80d67c:	1445883a 	add	r2,r2,r17
  80d680:	15adc83a 	sub	r22,r2,r22
  80d684:	a80b883a 	mov	r5,r21
  80d688:	b009883a 	mov	r4,r22
  80d68c:	080de080 	call	80de08 <__umodsi3>
  80d690:	1027883a 	mov	r19,r2
  80d694:	b009883a 	mov	r4,r22
  80d698:	a80b883a 	mov	r5,r21
  80d69c:	080dda40 	call	80dda4 <__udivsi3>
  80d6a0:	9826943a 	slli	r19,r19,16
  80d6a4:	a0a1383a 	mul	r16,r20,r2
  80d6a8:	b93fffcc 	andi	r4,r23,65535
  80d6ac:	24c8b03a 	or	r4,r4,r19
  80d6b0:	2400062e 	bgeu	r4,r16,80d6cc <__udivdi3+0x4d0>
  80d6b4:	2449883a 	add	r4,r4,r17
  80d6b8:	10ffffc4 	addi	r3,r2,-1
  80d6bc:	24402336 	bltu	r4,r17,80d74c <__udivdi3+0x550>
  80d6c0:	2400222e 	bgeu	r4,r16,80d74c <__udivdi3+0x550>
  80d6c4:	10bfff84 	addi	r2,r2,-2
  80d6c8:	2449883a 	add	r4,r4,r17
  80d6cc:	e038943a 	slli	fp,fp,16
  80d6d0:	2421c83a 	sub	r16,r4,r16
  80d6d4:	e086b03a 	or	r3,fp,r2
  80d6d8:	003f4306 	br	80d3e8 <__alt_mem_onchip_mem+0xff78d3e8>
  80d6dc:	2005883a 	mov	r2,r4
  80d6e0:	003f6906 	br	80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d6e4:	1805883a 	mov	r2,r3
  80d6e8:	003f0f06 	br	80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d6ec:	1806943a 	slli	r3,r3,16
  80d6f0:	9d66983a 	sll	r19,r19,r21
  80d6f4:	39ffffcc 	andi	r7,r7,65535
  80d6f8:	19c7883a 	add	r3,r3,r7
  80d6fc:	98ffc32e 	bgeu	r19,r3,80d60c <__alt_mem_onchip_mem+0xff78d60c>
  80d700:	10bfffc4 	addi	r2,r2,-1
  80d704:	003fc106 	br	80d60c <__alt_mem_onchip_mem+0xff78d60c>
  80d708:	00800604 	movi	r2,24
  80d70c:	003f1106 	br	80d354 <__alt_mem_onchip_mem+0xff78d354>
  80d710:	00800604 	movi	r2,24
  80d714:	003f2706 	br	80d3b4 <__alt_mem_onchip_mem+0xff78d3b4>
  80d718:	00800604 	movi	r2,24
  80d71c:	003ece06 	br	80d258 <__alt_mem_onchip_mem+0xff78d258>
  80d720:	0007883a 	mov	r3,zero
  80d724:	00800044 	movi	r2,1
  80d728:	003f5c06 	br	80d49c <__alt_mem_onchip_mem+0xff78d49c>
  80d72c:	813fa12e 	bgeu	r16,r4,80d5b4 <__alt_mem_onchip_mem+0xff78d5b4>
  80d730:	10bfff84 	addi	r2,r2,-2
  80d734:	85e1883a 	add	r16,r16,r23
  80d738:	003f9f06 	br	80d5b8 <__alt_mem_onchip_mem+0xff78d5b8>
  80d73c:	1c7f8a2e 	bgeu	r3,r17,80d568 <__alt_mem_onchip_mem+0xff78d568>
  80d740:	31bfff84 	addi	r6,r6,-2
  80d744:	1dc7883a 	add	r3,r3,r23
  80d748:	003f8806 	br	80d56c <__alt_mem_onchip_mem+0xff78d56c>
  80d74c:	1805883a 	mov	r2,r3
  80d750:	003fde06 	br	80d6cc <__alt_mem_onchip_mem+0xff78d6cc>
  80d754:	1839883a 	mov	fp,r3
  80d758:	003fc906 	br	80d680 <__alt_mem_onchip_mem+0xff78d680>
  80d75c:	b5bfff84 	addi	r22,r22,-2
  80d760:	2449883a 	add	r4,r4,r17
  80d764:	003f3406 	br	80d438 <__alt_mem_onchip_mem+0xff78d438>
  80d768:	b5bfff84 	addi	r22,r22,-2
  80d76c:	1445883a 	add	r2,r2,r17
  80d770:	003edb06 	br	80d2e0 <__alt_mem_onchip_mem+0xff78d2e0>

0080d774 <__umoddi3>:
  80d774:	defff404 	addi	sp,sp,-48
  80d778:	df000a15 	stw	fp,40(sp)
  80d77c:	dc400315 	stw	r17,12(sp)
  80d780:	dc000215 	stw	r16,8(sp)
  80d784:	dfc00b15 	stw	ra,44(sp)
  80d788:	ddc00915 	stw	r23,36(sp)
  80d78c:	dd800815 	stw	r22,32(sp)
  80d790:	dd400715 	stw	r21,28(sp)
  80d794:	dd000615 	stw	r20,24(sp)
  80d798:	dcc00515 	stw	r19,20(sp)
  80d79c:	dc800415 	stw	r18,16(sp)
  80d7a0:	2021883a 	mov	r16,r4
  80d7a4:	2823883a 	mov	r17,r5
  80d7a8:	2839883a 	mov	fp,r5
  80d7ac:	38003c1e 	bne	r7,zero,80d8a0 <__umoddi3+0x12c>
  80d7b0:	3027883a 	mov	r19,r6
  80d7b4:	2029883a 	mov	r20,r4
  80d7b8:	2980512e 	bgeu	r5,r6,80d900 <__umoddi3+0x18c>
  80d7bc:	00bfffd4 	movui	r2,65535
  80d7c0:	11809a36 	bltu	r2,r6,80da2c <__umoddi3+0x2b8>
  80d7c4:	01003fc4 	movi	r4,255
  80d7c8:	2189803a 	cmpltu	r4,r4,r6
  80d7cc:	200890fa 	slli	r4,r4,3
  80d7d0:	3104d83a 	srl	r2,r6,r4
  80d7d4:	00c02074 	movhi	r3,129
  80d7d8:	18d25804 	addi	r3,r3,18784
  80d7dc:	1885883a 	add	r2,r3,r2
  80d7e0:	10c00003 	ldbu	r3,0(r2)
  80d7e4:	00800804 	movi	r2,32
  80d7e8:	1909883a 	add	r4,r3,r4
  80d7ec:	1125c83a 	sub	r18,r2,r4
  80d7f0:	90000526 	beq	r18,zero,80d808 <__umoddi3+0x94>
  80d7f4:	8ca2983a 	sll	r17,r17,r18
  80d7f8:	8108d83a 	srl	r4,r16,r4
  80d7fc:	34a6983a 	sll	r19,r6,r18
  80d800:	84a8983a 	sll	r20,r16,r18
  80d804:	2478b03a 	or	fp,r4,r17
  80d808:	982ed43a 	srli	r23,r19,16
  80d80c:	e009883a 	mov	r4,fp
  80d810:	9dbfffcc 	andi	r22,r19,65535
  80d814:	b80b883a 	mov	r5,r23
  80d818:	080de080 	call	80de08 <__umodsi3>
  80d81c:	e009883a 	mov	r4,fp
  80d820:	b80b883a 	mov	r5,r23
  80d824:	102b883a 	mov	r21,r2
  80d828:	080dda40 	call	80dda4 <__udivsi3>
  80d82c:	a806943a 	slli	r3,r21,16
  80d830:	a008d43a 	srli	r4,r20,16
  80d834:	b085383a 	mul	r2,r22,r2
  80d838:	20c8b03a 	or	r4,r4,r3
  80d83c:	2080032e 	bgeu	r4,r2,80d84c <__umoddi3+0xd8>
  80d840:	24c9883a 	add	r4,r4,r19
  80d844:	24c00136 	bltu	r4,r19,80d84c <__umoddi3+0xd8>
  80d848:	20811036 	bltu	r4,r2,80dc8c <__umoddi3+0x518>
  80d84c:	20abc83a 	sub	r21,r4,r2
  80d850:	b80b883a 	mov	r5,r23
  80d854:	a809883a 	mov	r4,r21
  80d858:	080de080 	call	80de08 <__umodsi3>
  80d85c:	1023883a 	mov	r17,r2
  80d860:	b80b883a 	mov	r5,r23
  80d864:	a809883a 	mov	r4,r21
  80d868:	080dda40 	call	80dda4 <__udivsi3>
  80d86c:	8822943a 	slli	r17,r17,16
  80d870:	b085383a 	mul	r2,r22,r2
  80d874:	a0ffffcc 	andi	r3,r20,65535
  80d878:	1c46b03a 	or	r3,r3,r17
  80d87c:	1880042e 	bgeu	r3,r2,80d890 <__umoddi3+0x11c>
  80d880:	1cc7883a 	add	r3,r3,r19
  80d884:	1cc00236 	bltu	r3,r19,80d890 <__umoddi3+0x11c>
  80d888:	1880012e 	bgeu	r3,r2,80d890 <__umoddi3+0x11c>
  80d88c:	1cc7883a 	add	r3,r3,r19
  80d890:	1885c83a 	sub	r2,r3,r2
  80d894:	1484d83a 	srl	r2,r2,r18
  80d898:	0007883a 	mov	r3,zero
  80d89c:	00004f06 	br	80d9dc <__umoddi3+0x268>
  80d8a0:	29c04c36 	bltu	r5,r7,80d9d4 <__umoddi3+0x260>
  80d8a4:	00bfffd4 	movui	r2,65535
  80d8a8:	11c0582e 	bgeu	r2,r7,80da0c <__umoddi3+0x298>
  80d8ac:	00804034 	movhi	r2,256
  80d8b0:	10bfffc4 	addi	r2,r2,-1
  80d8b4:	11c0e736 	bltu	r2,r7,80dc54 <__umoddi3+0x4e0>
  80d8b8:	01000404 	movi	r4,16
  80d8bc:	3904d83a 	srl	r2,r7,r4
  80d8c0:	00c02074 	movhi	r3,129
  80d8c4:	18d25804 	addi	r3,r3,18784
  80d8c8:	1885883a 	add	r2,r3,r2
  80d8cc:	14c00003 	ldbu	r19,0(r2)
  80d8d0:	00c00804 	movi	r3,32
  80d8d4:	9927883a 	add	r19,r19,r4
  80d8d8:	1ce9c83a 	sub	r20,r3,r19
  80d8dc:	a000581e 	bne	r20,zero,80da40 <__umoddi3+0x2cc>
  80d8e0:	3c400136 	bltu	r7,r17,80d8e8 <__umoddi3+0x174>
  80d8e4:	8180eb36 	bltu	r16,r6,80dc94 <__umoddi3+0x520>
  80d8e8:	8185c83a 	sub	r2,r16,r6
  80d8ec:	89e3c83a 	sub	r17,r17,r7
  80d8f0:	8089803a 	cmpltu	r4,r16,r2
  80d8f4:	8939c83a 	sub	fp,r17,r4
  80d8f8:	e007883a 	mov	r3,fp
  80d8fc:	00003706 	br	80d9dc <__umoddi3+0x268>
  80d900:	3000041e 	bne	r6,zero,80d914 <__umoddi3+0x1a0>
  80d904:	000b883a 	mov	r5,zero
  80d908:	01000044 	movi	r4,1
  80d90c:	080dda40 	call	80dda4 <__udivsi3>
  80d910:	1027883a 	mov	r19,r2
  80d914:	00bfffd4 	movui	r2,65535
  80d918:	14c0402e 	bgeu	r2,r19,80da1c <__umoddi3+0x2a8>
  80d91c:	00804034 	movhi	r2,256
  80d920:	10bfffc4 	addi	r2,r2,-1
  80d924:	14c0cd36 	bltu	r2,r19,80dc5c <__umoddi3+0x4e8>
  80d928:	00800404 	movi	r2,16
  80d92c:	9886d83a 	srl	r3,r19,r2
  80d930:	01002074 	movhi	r4,129
  80d934:	21125804 	addi	r4,r4,18784
  80d938:	20c7883a 	add	r3,r4,r3
  80d93c:	18c00003 	ldbu	r3,0(r3)
  80d940:	1887883a 	add	r3,r3,r2
  80d944:	00800804 	movi	r2,32
  80d948:	10e5c83a 	sub	r18,r2,r3
  80d94c:	9000901e 	bne	r18,zero,80db90 <__umoddi3+0x41c>
  80d950:	982cd43a 	srli	r22,r19,16
  80d954:	8ce3c83a 	sub	r17,r17,r19
  80d958:	9d7fffcc 	andi	r21,r19,65535
  80d95c:	b00b883a 	mov	r5,r22
  80d960:	8809883a 	mov	r4,r17
  80d964:	080de080 	call	80de08 <__umodsi3>
  80d968:	8809883a 	mov	r4,r17
  80d96c:	b00b883a 	mov	r5,r22
  80d970:	1021883a 	mov	r16,r2
  80d974:	080dda40 	call	80dda4 <__udivsi3>
  80d978:	8006943a 	slli	r3,r16,16
  80d97c:	a008d43a 	srli	r4,r20,16
  80d980:	1545383a 	mul	r2,r2,r21
  80d984:	20c8b03a 	or	r4,r4,r3
  80d988:	2080042e 	bgeu	r4,r2,80d99c <__umoddi3+0x228>
  80d98c:	24c9883a 	add	r4,r4,r19
  80d990:	24c00236 	bltu	r4,r19,80d99c <__umoddi3+0x228>
  80d994:	2080012e 	bgeu	r4,r2,80d99c <__umoddi3+0x228>
  80d998:	24c9883a 	add	r4,r4,r19
  80d99c:	20a1c83a 	sub	r16,r4,r2
  80d9a0:	b00b883a 	mov	r5,r22
  80d9a4:	8009883a 	mov	r4,r16
  80d9a8:	080de080 	call	80de08 <__umodsi3>
  80d9ac:	1023883a 	mov	r17,r2
  80d9b0:	b00b883a 	mov	r5,r22
  80d9b4:	8009883a 	mov	r4,r16
  80d9b8:	080dda40 	call	80dda4 <__udivsi3>
  80d9bc:	8822943a 	slli	r17,r17,16
  80d9c0:	1545383a 	mul	r2,r2,r21
  80d9c4:	a53fffcc 	andi	r20,r20,65535
  80d9c8:	a446b03a 	or	r3,r20,r17
  80d9cc:	18bfb02e 	bgeu	r3,r2,80d890 <__alt_mem_onchip_mem+0xff78d890>
  80d9d0:	003fab06 	br	80d880 <__alt_mem_onchip_mem+0xff78d880>
  80d9d4:	2005883a 	mov	r2,r4
  80d9d8:	2807883a 	mov	r3,r5
  80d9dc:	dfc00b17 	ldw	ra,44(sp)
  80d9e0:	df000a17 	ldw	fp,40(sp)
  80d9e4:	ddc00917 	ldw	r23,36(sp)
  80d9e8:	dd800817 	ldw	r22,32(sp)
  80d9ec:	dd400717 	ldw	r21,28(sp)
  80d9f0:	dd000617 	ldw	r20,24(sp)
  80d9f4:	dcc00517 	ldw	r19,20(sp)
  80d9f8:	dc800417 	ldw	r18,16(sp)
  80d9fc:	dc400317 	ldw	r17,12(sp)
  80da00:	dc000217 	ldw	r16,8(sp)
  80da04:	dec00c04 	addi	sp,sp,48
  80da08:	f800283a 	ret
  80da0c:	04c03fc4 	movi	r19,255
  80da10:	99c9803a 	cmpltu	r4,r19,r7
  80da14:	200890fa 	slli	r4,r4,3
  80da18:	003fa806 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80da1c:	00803fc4 	movi	r2,255
  80da20:	14c5803a 	cmpltu	r2,r2,r19
  80da24:	100490fa 	slli	r2,r2,3
  80da28:	003fc006 	br	80d92c <__alt_mem_onchip_mem+0xff78d92c>
  80da2c:	00804034 	movhi	r2,256
  80da30:	10bfffc4 	addi	r2,r2,-1
  80da34:	11808b36 	bltu	r2,r6,80dc64 <__umoddi3+0x4f0>
  80da38:	01000404 	movi	r4,16
  80da3c:	003f6406 	br	80d7d0 <__alt_mem_onchip_mem+0xff78d7d0>
  80da40:	34c4d83a 	srl	r2,r6,r19
  80da44:	3d0e983a 	sll	r7,r7,r20
  80da48:	8cf8d83a 	srl	fp,r17,r19
  80da4c:	8d10983a 	sll	r8,r17,r20
  80da50:	38aab03a 	or	r21,r7,r2
  80da54:	a82cd43a 	srli	r22,r21,16
  80da58:	84e2d83a 	srl	r17,r16,r19
  80da5c:	e009883a 	mov	r4,fp
  80da60:	b00b883a 	mov	r5,r22
  80da64:	8a22b03a 	or	r17,r17,r8
  80da68:	3524983a 	sll	r18,r6,r20
  80da6c:	080de080 	call	80de08 <__umodsi3>
  80da70:	e009883a 	mov	r4,fp
  80da74:	b00b883a 	mov	r5,r22
  80da78:	102f883a 	mov	r23,r2
  80da7c:	080dda40 	call	80dda4 <__udivsi3>
  80da80:	100d883a 	mov	r6,r2
  80da84:	b808943a 	slli	r4,r23,16
  80da88:	aa3fffcc 	andi	r8,r21,65535
  80da8c:	8804d43a 	srli	r2,r17,16
  80da90:	41af383a 	mul	r23,r8,r6
  80da94:	8520983a 	sll	r16,r16,r20
  80da98:	1104b03a 	or	r2,r2,r4
  80da9c:	15c0042e 	bgeu	r2,r23,80dab0 <__umoddi3+0x33c>
  80daa0:	1545883a 	add	r2,r2,r21
  80daa4:	30ffffc4 	addi	r3,r6,-1
  80daa8:	1540742e 	bgeu	r2,r21,80dc7c <__umoddi3+0x508>
  80daac:	180d883a 	mov	r6,r3
  80dab0:	15efc83a 	sub	r23,r2,r23
  80dab4:	b00b883a 	mov	r5,r22
  80dab8:	b809883a 	mov	r4,r23
  80dabc:	d9800115 	stw	r6,4(sp)
  80dac0:	da000015 	stw	r8,0(sp)
  80dac4:	080de080 	call	80de08 <__umodsi3>
  80dac8:	b00b883a 	mov	r5,r22
  80dacc:	b809883a 	mov	r4,r23
  80dad0:	1039883a 	mov	fp,r2
  80dad4:	080dda40 	call	80dda4 <__udivsi3>
  80dad8:	da000017 	ldw	r8,0(sp)
  80dadc:	e038943a 	slli	fp,fp,16
  80dae0:	100b883a 	mov	r5,r2
  80dae4:	4089383a 	mul	r4,r8,r2
  80dae8:	8a3fffcc 	andi	r8,r17,65535
  80daec:	4710b03a 	or	r8,r8,fp
  80daf0:	d9800117 	ldw	r6,4(sp)
  80daf4:	4100042e 	bgeu	r8,r4,80db08 <__umoddi3+0x394>
  80daf8:	4551883a 	add	r8,r8,r21
  80dafc:	10bfffc4 	addi	r2,r2,-1
  80db00:	45405a2e 	bgeu	r8,r21,80dc6c <__umoddi3+0x4f8>
  80db04:	100b883a 	mov	r5,r2
  80db08:	300c943a 	slli	r6,r6,16
  80db0c:	91ffffcc 	andi	r7,r18,65535
  80db10:	9004d43a 	srli	r2,r18,16
  80db14:	314cb03a 	or	r6,r6,r5
  80db18:	317fffcc 	andi	r5,r6,65535
  80db1c:	300cd43a 	srli	r6,r6,16
  80db20:	29d3383a 	mul	r9,r5,r7
  80db24:	288b383a 	mul	r5,r5,r2
  80db28:	31cf383a 	mul	r7,r6,r7
  80db2c:	4806d43a 	srli	r3,r9,16
  80db30:	4111c83a 	sub	r8,r8,r4
  80db34:	29cb883a 	add	r5,r5,r7
  80db38:	194b883a 	add	r5,r3,r5
  80db3c:	3085383a 	mul	r2,r6,r2
  80db40:	29c0022e 	bgeu	r5,r7,80db4c <__umoddi3+0x3d8>
  80db44:	00c00074 	movhi	r3,1
  80db48:	10c5883a 	add	r2,r2,r3
  80db4c:	2808d43a 	srli	r4,r5,16
  80db50:	280a943a 	slli	r5,r5,16
  80db54:	4a7fffcc 	andi	r9,r9,65535
  80db58:	2085883a 	add	r2,r4,r2
  80db5c:	2a4b883a 	add	r5,r5,r9
  80db60:	40803636 	bltu	r8,r2,80dc3c <__umoddi3+0x4c8>
  80db64:	40804d26 	beq	r8,r2,80dc9c <__umoddi3+0x528>
  80db68:	4089c83a 	sub	r4,r8,r2
  80db6c:	280f883a 	mov	r7,r5
  80db70:	81cfc83a 	sub	r7,r16,r7
  80db74:	81c7803a 	cmpltu	r3,r16,r7
  80db78:	20c7c83a 	sub	r3,r4,r3
  80db7c:	1cc4983a 	sll	r2,r3,r19
  80db80:	3d0ed83a 	srl	r7,r7,r20
  80db84:	1d06d83a 	srl	r3,r3,r20
  80db88:	11c4b03a 	or	r2,r2,r7
  80db8c:	003f9306 	br	80d9dc <__alt_mem_onchip_mem+0xff78d9dc>
  80db90:	9ca6983a 	sll	r19,r19,r18
  80db94:	88e8d83a 	srl	r20,r17,r3
  80db98:	80c4d83a 	srl	r2,r16,r3
  80db9c:	982cd43a 	srli	r22,r19,16
  80dba0:	8ca2983a 	sll	r17,r17,r18
  80dba4:	a009883a 	mov	r4,r20
  80dba8:	b00b883a 	mov	r5,r22
  80dbac:	1478b03a 	or	fp,r2,r17
  80dbb0:	080de080 	call	80de08 <__umodsi3>
  80dbb4:	a009883a 	mov	r4,r20
  80dbb8:	b00b883a 	mov	r5,r22
  80dbbc:	1023883a 	mov	r17,r2
  80dbc0:	080dda40 	call	80dda4 <__udivsi3>
  80dbc4:	9d7fffcc 	andi	r21,r19,65535
  80dbc8:	880a943a 	slli	r5,r17,16
  80dbcc:	e008d43a 	srli	r4,fp,16
  80dbd0:	a885383a 	mul	r2,r21,r2
  80dbd4:	84a8983a 	sll	r20,r16,r18
  80dbd8:	2148b03a 	or	r4,r4,r5
  80dbdc:	2080042e 	bgeu	r4,r2,80dbf0 <__umoddi3+0x47c>
  80dbe0:	24c9883a 	add	r4,r4,r19
  80dbe4:	24c00236 	bltu	r4,r19,80dbf0 <__umoddi3+0x47c>
  80dbe8:	2080012e 	bgeu	r4,r2,80dbf0 <__umoddi3+0x47c>
  80dbec:	24c9883a 	add	r4,r4,r19
  80dbf0:	20a3c83a 	sub	r17,r4,r2
  80dbf4:	b00b883a 	mov	r5,r22
  80dbf8:	8809883a 	mov	r4,r17
  80dbfc:	080de080 	call	80de08 <__umodsi3>
  80dc00:	102f883a 	mov	r23,r2
  80dc04:	8809883a 	mov	r4,r17
  80dc08:	b00b883a 	mov	r5,r22
  80dc0c:	080dda40 	call	80dda4 <__udivsi3>
  80dc10:	b82e943a 	slli	r23,r23,16
  80dc14:	a885383a 	mul	r2,r21,r2
  80dc18:	e13fffcc 	andi	r4,fp,65535
  80dc1c:	25c8b03a 	or	r4,r4,r23
  80dc20:	2080042e 	bgeu	r4,r2,80dc34 <__umoddi3+0x4c0>
  80dc24:	24c9883a 	add	r4,r4,r19
  80dc28:	24c00236 	bltu	r4,r19,80dc34 <__umoddi3+0x4c0>
  80dc2c:	2080012e 	bgeu	r4,r2,80dc34 <__umoddi3+0x4c0>
  80dc30:	24c9883a 	add	r4,r4,r19
  80dc34:	20a3c83a 	sub	r17,r4,r2
  80dc38:	003f4806 	br	80d95c <__alt_mem_onchip_mem+0xff78d95c>
  80dc3c:	2c8fc83a 	sub	r7,r5,r18
  80dc40:	1545c83a 	sub	r2,r2,r21
  80dc44:	29cb803a 	cmpltu	r5,r5,r7
  80dc48:	1145c83a 	sub	r2,r2,r5
  80dc4c:	4089c83a 	sub	r4,r8,r2
  80dc50:	003fc706 	br	80db70 <__alt_mem_onchip_mem+0xff78db70>
  80dc54:	01000604 	movi	r4,24
  80dc58:	003f1806 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dc5c:	00800604 	movi	r2,24
  80dc60:	003f3206 	br	80d92c <__alt_mem_onchip_mem+0xff78d92c>
  80dc64:	01000604 	movi	r4,24
  80dc68:	003ed906 	br	80d7d0 <__alt_mem_onchip_mem+0xff78d7d0>
  80dc6c:	413fa52e 	bgeu	r8,r4,80db04 <__alt_mem_onchip_mem+0xff78db04>
  80dc70:	297fff84 	addi	r5,r5,-2
  80dc74:	4551883a 	add	r8,r8,r21
  80dc78:	003fa306 	br	80db08 <__alt_mem_onchip_mem+0xff78db08>
  80dc7c:	15ff8b2e 	bgeu	r2,r23,80daac <__alt_mem_onchip_mem+0xff78daac>
  80dc80:	31bfff84 	addi	r6,r6,-2
  80dc84:	1545883a 	add	r2,r2,r21
  80dc88:	003f8906 	br	80dab0 <__alt_mem_onchip_mem+0xff78dab0>
  80dc8c:	24c9883a 	add	r4,r4,r19
  80dc90:	003eee06 	br	80d84c <__alt_mem_onchip_mem+0xff78d84c>
  80dc94:	8005883a 	mov	r2,r16
  80dc98:	003f1706 	br	80d8f8 <__alt_mem_onchip_mem+0xff78d8f8>
  80dc9c:	817fe736 	bltu	r16,r5,80dc3c <__alt_mem_onchip_mem+0xff78dc3c>
  80dca0:	280f883a 	mov	r7,r5
  80dca4:	0009883a 	mov	r4,zero
  80dca8:	003fb106 	br	80db70 <__alt_mem_onchip_mem+0xff78db70>

0080dcac <__divsi3>:
  80dcac:	20001b16 	blt	r4,zero,80dd1c <__divsi3+0x70>
  80dcb0:	000f883a 	mov	r7,zero
  80dcb4:	28001616 	blt	r5,zero,80dd10 <__divsi3+0x64>
  80dcb8:	200d883a 	mov	r6,r4
  80dcbc:	29001a2e 	bgeu	r5,r4,80dd28 <__divsi3+0x7c>
  80dcc0:	00800804 	movi	r2,32
  80dcc4:	00c00044 	movi	r3,1
  80dcc8:	00000106 	br	80dcd0 <__divsi3+0x24>
  80dccc:	10000d26 	beq	r2,zero,80dd04 <__divsi3+0x58>
  80dcd0:	294b883a 	add	r5,r5,r5
  80dcd4:	10bfffc4 	addi	r2,r2,-1
  80dcd8:	18c7883a 	add	r3,r3,r3
  80dcdc:	293ffb36 	bltu	r5,r4,80dccc <__alt_mem_onchip_mem+0xff78dccc>
  80dce0:	0005883a 	mov	r2,zero
  80dce4:	18000726 	beq	r3,zero,80dd04 <__divsi3+0x58>
  80dce8:	0005883a 	mov	r2,zero
  80dcec:	31400236 	bltu	r6,r5,80dcf8 <__divsi3+0x4c>
  80dcf0:	314dc83a 	sub	r6,r6,r5
  80dcf4:	10c4b03a 	or	r2,r2,r3
  80dcf8:	1806d07a 	srli	r3,r3,1
  80dcfc:	280ad07a 	srli	r5,r5,1
  80dd00:	183ffa1e 	bne	r3,zero,80dcec <__alt_mem_onchip_mem+0xff78dcec>
  80dd04:	38000126 	beq	r7,zero,80dd0c <__divsi3+0x60>
  80dd08:	0085c83a 	sub	r2,zero,r2
  80dd0c:	f800283a 	ret
  80dd10:	014bc83a 	sub	r5,zero,r5
  80dd14:	39c0005c 	xori	r7,r7,1
  80dd18:	003fe706 	br	80dcb8 <__alt_mem_onchip_mem+0xff78dcb8>
  80dd1c:	0109c83a 	sub	r4,zero,r4
  80dd20:	01c00044 	movi	r7,1
  80dd24:	003fe306 	br	80dcb4 <__alt_mem_onchip_mem+0xff78dcb4>
  80dd28:	00c00044 	movi	r3,1
  80dd2c:	003fee06 	br	80dce8 <__alt_mem_onchip_mem+0xff78dce8>

0080dd30 <__modsi3>:
  80dd30:	20001716 	blt	r4,zero,80dd90 <__modsi3+0x60>
  80dd34:	000f883a 	mov	r7,zero
  80dd38:	2005883a 	mov	r2,r4
  80dd3c:	28001216 	blt	r5,zero,80dd88 <__modsi3+0x58>
  80dd40:	2900162e 	bgeu	r5,r4,80dd9c <__modsi3+0x6c>
  80dd44:	01800804 	movi	r6,32
  80dd48:	00c00044 	movi	r3,1
  80dd4c:	00000106 	br	80dd54 <__modsi3+0x24>
  80dd50:	30000a26 	beq	r6,zero,80dd7c <__modsi3+0x4c>
  80dd54:	294b883a 	add	r5,r5,r5
  80dd58:	31bfffc4 	addi	r6,r6,-1
  80dd5c:	18c7883a 	add	r3,r3,r3
  80dd60:	293ffb36 	bltu	r5,r4,80dd50 <__alt_mem_onchip_mem+0xff78dd50>
  80dd64:	18000526 	beq	r3,zero,80dd7c <__modsi3+0x4c>
  80dd68:	1806d07a 	srli	r3,r3,1
  80dd6c:	11400136 	bltu	r2,r5,80dd74 <__modsi3+0x44>
  80dd70:	1145c83a 	sub	r2,r2,r5
  80dd74:	280ad07a 	srli	r5,r5,1
  80dd78:	183ffb1e 	bne	r3,zero,80dd68 <__alt_mem_onchip_mem+0xff78dd68>
  80dd7c:	38000126 	beq	r7,zero,80dd84 <__modsi3+0x54>
  80dd80:	0085c83a 	sub	r2,zero,r2
  80dd84:	f800283a 	ret
  80dd88:	014bc83a 	sub	r5,zero,r5
  80dd8c:	003fec06 	br	80dd40 <__alt_mem_onchip_mem+0xff78dd40>
  80dd90:	0109c83a 	sub	r4,zero,r4
  80dd94:	01c00044 	movi	r7,1
  80dd98:	003fe706 	br	80dd38 <__alt_mem_onchip_mem+0xff78dd38>
  80dd9c:	00c00044 	movi	r3,1
  80dda0:	003ff106 	br	80dd68 <__alt_mem_onchip_mem+0xff78dd68>

0080dda4 <__udivsi3>:
  80dda4:	200d883a 	mov	r6,r4
  80dda8:	2900152e 	bgeu	r5,r4,80de00 <__udivsi3+0x5c>
  80ddac:	28001416 	blt	r5,zero,80de00 <__udivsi3+0x5c>
  80ddb0:	00800804 	movi	r2,32
  80ddb4:	00c00044 	movi	r3,1
  80ddb8:	00000206 	br	80ddc4 <__udivsi3+0x20>
  80ddbc:	10000e26 	beq	r2,zero,80ddf8 <__udivsi3+0x54>
  80ddc0:	28000516 	blt	r5,zero,80ddd8 <__udivsi3+0x34>
  80ddc4:	294b883a 	add	r5,r5,r5
  80ddc8:	10bfffc4 	addi	r2,r2,-1
  80ddcc:	18c7883a 	add	r3,r3,r3
  80ddd0:	293ffa36 	bltu	r5,r4,80ddbc <__alt_mem_onchip_mem+0xff78ddbc>
  80ddd4:	18000826 	beq	r3,zero,80ddf8 <__udivsi3+0x54>
  80ddd8:	0005883a 	mov	r2,zero
  80dddc:	31400236 	bltu	r6,r5,80dde8 <__udivsi3+0x44>
  80dde0:	314dc83a 	sub	r6,r6,r5
  80dde4:	10c4b03a 	or	r2,r2,r3
  80dde8:	1806d07a 	srli	r3,r3,1
  80ddec:	280ad07a 	srli	r5,r5,1
  80ddf0:	183ffa1e 	bne	r3,zero,80dddc <__alt_mem_onchip_mem+0xff78dddc>
  80ddf4:	f800283a 	ret
  80ddf8:	0005883a 	mov	r2,zero
  80ddfc:	f800283a 	ret
  80de00:	00c00044 	movi	r3,1
  80de04:	003ff406 	br	80ddd8 <__alt_mem_onchip_mem+0xff78ddd8>

0080de08 <__umodsi3>:
  80de08:	2005883a 	mov	r2,r4
  80de0c:	2900122e 	bgeu	r5,r4,80de58 <__umodsi3+0x50>
  80de10:	28001116 	blt	r5,zero,80de58 <__umodsi3+0x50>
  80de14:	01800804 	movi	r6,32
  80de18:	00c00044 	movi	r3,1
  80de1c:	00000206 	br	80de28 <__umodsi3+0x20>
  80de20:	30000c26 	beq	r6,zero,80de54 <__umodsi3+0x4c>
  80de24:	28000516 	blt	r5,zero,80de3c <__umodsi3+0x34>
  80de28:	294b883a 	add	r5,r5,r5
  80de2c:	31bfffc4 	addi	r6,r6,-1
  80de30:	18c7883a 	add	r3,r3,r3
  80de34:	293ffa36 	bltu	r5,r4,80de20 <__alt_mem_onchip_mem+0xff78de20>
  80de38:	18000626 	beq	r3,zero,80de54 <__umodsi3+0x4c>
  80de3c:	1806d07a 	srli	r3,r3,1
  80de40:	11400136 	bltu	r2,r5,80de48 <__umodsi3+0x40>
  80de44:	1145c83a 	sub	r2,r2,r5
  80de48:	280ad07a 	srli	r5,r5,1
  80de4c:	183ffb1e 	bne	r3,zero,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de50:	f800283a 	ret
  80de54:	f800283a 	ret
  80de58:	00c00044 	movi	r3,1
  80de5c:	003ff706 	br	80de3c <__alt_mem_onchip_mem+0xff78de3c>

0080de60 <__adddf3>:
  80de60:	02c00434 	movhi	r11,16
  80de64:	5affffc4 	addi	r11,r11,-1
  80de68:	2806d7fa 	srli	r3,r5,31
  80de6c:	2ad4703a 	and	r10,r5,r11
  80de70:	3ad2703a 	and	r9,r7,r11
  80de74:	3804d53a 	srli	r2,r7,20
  80de78:	3018d77a 	srli	r12,r6,29
  80de7c:	280ad53a 	srli	r5,r5,20
  80de80:	501490fa 	slli	r10,r10,3
  80de84:	2010d77a 	srli	r8,r4,29
  80de88:	481290fa 	slli	r9,r9,3
  80de8c:	380ed7fa 	srli	r7,r7,31
  80de90:	defffb04 	addi	sp,sp,-20
  80de94:	dc800215 	stw	r18,8(sp)
  80de98:	dc400115 	stw	r17,4(sp)
  80de9c:	dc000015 	stw	r16,0(sp)
  80dea0:	dfc00415 	stw	ra,16(sp)
  80dea4:	dcc00315 	stw	r19,12(sp)
  80dea8:	1c803fcc 	andi	r18,r3,255
  80deac:	2c01ffcc 	andi	r16,r5,2047
  80deb0:	5210b03a 	or	r8,r10,r8
  80deb4:	202290fa 	slli	r17,r4,3
  80deb8:	1081ffcc 	andi	r2,r2,2047
  80debc:	4b12b03a 	or	r9,r9,r12
  80dec0:	300c90fa 	slli	r6,r6,3
  80dec4:	91c07526 	beq	r18,r7,80e09c <__adddf3+0x23c>
  80dec8:	8087c83a 	sub	r3,r16,r2
  80decc:	00c0ab0e 	bge	zero,r3,80e17c <__adddf3+0x31c>
  80ded0:	10002a1e 	bne	r2,zero,80df7c <__adddf3+0x11c>
  80ded4:	4984b03a 	or	r2,r9,r6
  80ded8:	1000961e 	bne	r2,zero,80e134 <__adddf3+0x2d4>
  80dedc:	888001cc 	andi	r2,r17,7
  80dee0:	10000726 	beq	r2,zero,80df00 <__adddf3+0xa0>
  80dee4:	888003cc 	andi	r2,r17,15
  80dee8:	00c00104 	movi	r3,4
  80deec:	10c00426 	beq	r2,r3,80df00 <__adddf3+0xa0>
  80def0:	88c7883a 	add	r3,r17,r3
  80def4:	1c63803a 	cmpltu	r17,r3,r17
  80def8:	4451883a 	add	r8,r8,r17
  80defc:	1823883a 	mov	r17,r3
  80df00:	4080202c 	andhi	r2,r8,128
  80df04:	10005926 	beq	r2,zero,80e06c <__adddf3+0x20c>
  80df08:	84000044 	addi	r16,r16,1
  80df0c:	0081ffc4 	movi	r2,2047
  80df10:	8080ba26 	beq	r16,r2,80e1fc <__adddf3+0x39c>
  80df14:	00bfe034 	movhi	r2,65408
  80df18:	10bfffc4 	addi	r2,r2,-1
  80df1c:	4090703a 	and	r8,r8,r2
  80df20:	4004977a 	slli	r2,r8,29
  80df24:	4010927a 	slli	r8,r8,9
  80df28:	8822d0fa 	srli	r17,r17,3
  80df2c:	8401ffcc 	andi	r16,r16,2047
  80df30:	4010d33a 	srli	r8,r8,12
  80df34:	9007883a 	mov	r3,r18
  80df38:	1444b03a 	or	r2,r2,r17
  80df3c:	8401ffcc 	andi	r16,r16,2047
  80df40:	8020953a 	slli	r16,r16,20
  80df44:	18c03fcc 	andi	r3,r3,255
  80df48:	01000434 	movhi	r4,16
  80df4c:	213fffc4 	addi	r4,r4,-1
  80df50:	180697fa 	slli	r3,r3,31
  80df54:	4110703a 	and	r8,r8,r4
  80df58:	4410b03a 	or	r8,r8,r16
  80df5c:	40c6b03a 	or	r3,r8,r3
  80df60:	dfc00417 	ldw	ra,16(sp)
  80df64:	dcc00317 	ldw	r19,12(sp)
  80df68:	dc800217 	ldw	r18,8(sp)
  80df6c:	dc400117 	ldw	r17,4(sp)
  80df70:	dc000017 	ldw	r16,0(sp)
  80df74:	dec00504 	addi	sp,sp,20
  80df78:	f800283a 	ret
  80df7c:	0081ffc4 	movi	r2,2047
  80df80:	80bfd626 	beq	r16,r2,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80df84:	4a402034 	orhi	r9,r9,128
  80df88:	00800e04 	movi	r2,56
  80df8c:	10c09f16 	blt	r2,r3,80e20c <__adddf3+0x3ac>
  80df90:	008007c4 	movi	r2,31
  80df94:	10c0c216 	blt	r2,r3,80e2a0 <__adddf3+0x440>
  80df98:	00800804 	movi	r2,32
  80df9c:	10c5c83a 	sub	r2,r2,r3
  80dfa0:	488a983a 	sll	r5,r9,r2
  80dfa4:	30c8d83a 	srl	r4,r6,r3
  80dfa8:	3084983a 	sll	r2,r6,r2
  80dfac:	48c6d83a 	srl	r3,r9,r3
  80dfb0:	290cb03a 	or	r6,r5,r4
  80dfb4:	1004c03a 	cmpne	r2,r2,zero
  80dfb8:	308cb03a 	or	r6,r6,r2
  80dfbc:	898dc83a 	sub	r6,r17,r6
  80dfc0:	89a3803a 	cmpltu	r17,r17,r6
  80dfc4:	40d1c83a 	sub	r8,r8,r3
  80dfc8:	4451c83a 	sub	r8,r8,r17
  80dfcc:	3023883a 	mov	r17,r6
  80dfd0:	4080202c 	andhi	r2,r8,128
  80dfd4:	10002326 	beq	r2,zero,80e064 <__adddf3+0x204>
  80dfd8:	04c02034 	movhi	r19,128
  80dfdc:	9cffffc4 	addi	r19,r19,-1
  80dfe0:	44e6703a 	and	r19,r8,r19
  80dfe4:	98007626 	beq	r19,zero,80e1c0 <__adddf3+0x360>
  80dfe8:	9809883a 	mov	r4,r19
  80dfec:	08104640 	call	810464 <__clzsi2>
  80dff0:	10fffe04 	addi	r3,r2,-8
  80dff4:	010007c4 	movi	r4,31
  80dff8:	20c07716 	blt	r4,r3,80e1d8 <__adddf3+0x378>
  80dffc:	00800804 	movi	r2,32
  80e000:	10c5c83a 	sub	r2,r2,r3
  80e004:	8884d83a 	srl	r2,r17,r2
  80e008:	98d0983a 	sll	r8,r19,r3
  80e00c:	88e2983a 	sll	r17,r17,r3
  80e010:	1204b03a 	or	r2,r2,r8
  80e014:	1c007416 	blt	r3,r16,80e1e8 <__adddf3+0x388>
  80e018:	1c21c83a 	sub	r16,r3,r16
  80e01c:	82000044 	addi	r8,r16,1
  80e020:	00c007c4 	movi	r3,31
  80e024:	1a009116 	blt	r3,r8,80e26c <__adddf3+0x40c>
  80e028:	00c00804 	movi	r3,32
  80e02c:	1a07c83a 	sub	r3,r3,r8
  80e030:	8a08d83a 	srl	r4,r17,r8
  80e034:	88e2983a 	sll	r17,r17,r3
  80e038:	10c6983a 	sll	r3,r2,r3
  80e03c:	1210d83a 	srl	r8,r2,r8
  80e040:	8804c03a 	cmpne	r2,r17,zero
  80e044:	1906b03a 	or	r3,r3,r4
  80e048:	18a2b03a 	or	r17,r3,r2
  80e04c:	0021883a 	mov	r16,zero
  80e050:	003fa206 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e054:	1890b03a 	or	r8,r3,r2
  80e058:	40017d26 	beq	r8,zero,80e650 <__adddf3+0x7f0>
  80e05c:	1011883a 	mov	r8,r2
  80e060:	1823883a 	mov	r17,r3
  80e064:	888001cc 	andi	r2,r17,7
  80e068:	103f9e1e 	bne	r2,zero,80dee4 <__alt_mem_onchip_mem+0xff78dee4>
  80e06c:	4004977a 	slli	r2,r8,29
  80e070:	8822d0fa 	srli	r17,r17,3
  80e074:	4010d0fa 	srli	r8,r8,3
  80e078:	9007883a 	mov	r3,r18
  80e07c:	1444b03a 	or	r2,r2,r17
  80e080:	0101ffc4 	movi	r4,2047
  80e084:	81002426 	beq	r16,r4,80e118 <__adddf3+0x2b8>
  80e088:	8120703a 	and	r16,r16,r4
  80e08c:	01000434 	movhi	r4,16
  80e090:	213fffc4 	addi	r4,r4,-1
  80e094:	4110703a 	and	r8,r8,r4
  80e098:	003fa806 	br	80df3c <__alt_mem_onchip_mem+0xff78df3c>
  80e09c:	8089c83a 	sub	r4,r16,r2
  80e0a0:	01005e0e 	bge	zero,r4,80e21c <__adddf3+0x3bc>
  80e0a4:	10002b26 	beq	r2,zero,80e154 <__adddf3+0x2f4>
  80e0a8:	0081ffc4 	movi	r2,2047
  80e0ac:	80bf8b26 	beq	r16,r2,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e0b0:	4a402034 	orhi	r9,r9,128
  80e0b4:	00800e04 	movi	r2,56
  80e0b8:	1100a40e 	bge	r2,r4,80e34c <__adddf3+0x4ec>
  80e0bc:	498cb03a 	or	r6,r9,r6
  80e0c0:	300ac03a 	cmpne	r5,r6,zero
  80e0c4:	0013883a 	mov	r9,zero
  80e0c8:	2c4b883a 	add	r5,r5,r17
  80e0cc:	2c63803a 	cmpltu	r17,r5,r17
  80e0d0:	4a11883a 	add	r8,r9,r8
  80e0d4:	8a11883a 	add	r8,r17,r8
  80e0d8:	2823883a 	mov	r17,r5
  80e0dc:	4080202c 	andhi	r2,r8,128
  80e0e0:	103fe026 	beq	r2,zero,80e064 <__alt_mem_onchip_mem+0xff78e064>
  80e0e4:	84000044 	addi	r16,r16,1
  80e0e8:	0081ffc4 	movi	r2,2047
  80e0ec:	8080d226 	beq	r16,r2,80e438 <__adddf3+0x5d8>
  80e0f0:	00bfe034 	movhi	r2,65408
  80e0f4:	10bfffc4 	addi	r2,r2,-1
  80e0f8:	4090703a 	and	r8,r8,r2
  80e0fc:	880ad07a 	srli	r5,r17,1
  80e100:	400897fa 	slli	r4,r8,31
  80e104:	88c0004c 	andi	r3,r17,1
  80e108:	28e2b03a 	or	r17,r5,r3
  80e10c:	4010d07a 	srli	r8,r8,1
  80e110:	2462b03a 	or	r17,r4,r17
  80e114:	003f7106 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e118:	4088b03a 	or	r4,r8,r2
  80e11c:	20014526 	beq	r4,zero,80e634 <__adddf3+0x7d4>
  80e120:	01000434 	movhi	r4,16
  80e124:	42000234 	orhi	r8,r8,8
  80e128:	213fffc4 	addi	r4,r4,-1
  80e12c:	4110703a 	and	r8,r8,r4
  80e130:	003f8206 	br	80df3c <__alt_mem_onchip_mem+0xff78df3c>
  80e134:	18ffffc4 	addi	r3,r3,-1
  80e138:	1800491e 	bne	r3,zero,80e260 <__adddf3+0x400>
  80e13c:	898bc83a 	sub	r5,r17,r6
  80e140:	8963803a 	cmpltu	r17,r17,r5
  80e144:	4251c83a 	sub	r8,r8,r9
  80e148:	4451c83a 	sub	r8,r8,r17
  80e14c:	2823883a 	mov	r17,r5
  80e150:	003f9f06 	br	80dfd0 <__alt_mem_onchip_mem+0xff78dfd0>
  80e154:	4984b03a 	or	r2,r9,r6
  80e158:	103f6026 	beq	r2,zero,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e15c:	213fffc4 	addi	r4,r4,-1
  80e160:	2000931e 	bne	r4,zero,80e3b0 <__adddf3+0x550>
  80e164:	898d883a 	add	r6,r17,r6
  80e168:	3463803a 	cmpltu	r17,r6,r17
  80e16c:	4251883a 	add	r8,r8,r9
  80e170:	8a11883a 	add	r8,r17,r8
  80e174:	3023883a 	mov	r17,r6
  80e178:	003fd806 	br	80e0dc <__alt_mem_onchip_mem+0xff78e0dc>
  80e17c:	1800541e 	bne	r3,zero,80e2d0 <__adddf3+0x470>
  80e180:	80800044 	addi	r2,r16,1
  80e184:	1081ffcc 	andi	r2,r2,2047
  80e188:	00c00044 	movi	r3,1
  80e18c:	1880a00e 	bge	r3,r2,80e410 <__adddf3+0x5b0>
  80e190:	8989c83a 	sub	r4,r17,r6
  80e194:	8905803a 	cmpltu	r2,r17,r4
  80e198:	4267c83a 	sub	r19,r8,r9
  80e19c:	98a7c83a 	sub	r19,r19,r2
  80e1a0:	9880202c 	andhi	r2,r19,128
  80e1a4:	10006326 	beq	r2,zero,80e334 <__adddf3+0x4d4>
  80e1a8:	3463c83a 	sub	r17,r6,r17
  80e1ac:	4a07c83a 	sub	r3,r9,r8
  80e1b0:	344d803a 	cmpltu	r6,r6,r17
  80e1b4:	19a7c83a 	sub	r19,r3,r6
  80e1b8:	3825883a 	mov	r18,r7
  80e1bc:	983f8a1e 	bne	r19,zero,80dfe8 <__alt_mem_onchip_mem+0xff78dfe8>
  80e1c0:	8809883a 	mov	r4,r17
  80e1c4:	08104640 	call	810464 <__clzsi2>
  80e1c8:	10800804 	addi	r2,r2,32
  80e1cc:	10fffe04 	addi	r3,r2,-8
  80e1d0:	010007c4 	movi	r4,31
  80e1d4:	20ff890e 	bge	r4,r3,80dffc <__alt_mem_onchip_mem+0xff78dffc>
  80e1d8:	10bff604 	addi	r2,r2,-40
  80e1dc:	8884983a 	sll	r2,r17,r2
  80e1e0:	0023883a 	mov	r17,zero
  80e1e4:	1c3f8c0e 	bge	r3,r16,80e018 <__alt_mem_onchip_mem+0xff78e018>
  80e1e8:	023fe034 	movhi	r8,65408
  80e1ec:	423fffc4 	addi	r8,r8,-1
  80e1f0:	80e1c83a 	sub	r16,r16,r3
  80e1f4:	1210703a 	and	r8,r2,r8
  80e1f8:	003f3806 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e1fc:	9007883a 	mov	r3,r18
  80e200:	0011883a 	mov	r8,zero
  80e204:	0005883a 	mov	r2,zero
  80e208:	003f4c06 	br	80df3c <__alt_mem_onchip_mem+0xff78df3c>
  80e20c:	498cb03a 	or	r6,r9,r6
  80e210:	300cc03a 	cmpne	r6,r6,zero
  80e214:	0007883a 	mov	r3,zero
  80e218:	003f6806 	br	80dfbc <__alt_mem_onchip_mem+0xff78dfbc>
  80e21c:	20009c1e 	bne	r4,zero,80e490 <__adddf3+0x630>
  80e220:	80800044 	addi	r2,r16,1
  80e224:	1141ffcc 	andi	r5,r2,2047
  80e228:	01000044 	movi	r4,1
  80e22c:	2140670e 	bge	r4,r5,80e3cc <__adddf3+0x56c>
  80e230:	0101ffc4 	movi	r4,2047
  80e234:	11007f26 	beq	r2,r4,80e434 <__adddf3+0x5d4>
  80e238:	898d883a 	add	r6,r17,r6
  80e23c:	4247883a 	add	r3,r8,r9
  80e240:	3451803a 	cmpltu	r8,r6,r17
  80e244:	40d1883a 	add	r8,r8,r3
  80e248:	402297fa 	slli	r17,r8,31
  80e24c:	300cd07a 	srli	r6,r6,1
  80e250:	4010d07a 	srli	r8,r8,1
  80e254:	1021883a 	mov	r16,r2
  80e258:	89a2b03a 	or	r17,r17,r6
  80e25c:	003f1f06 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e260:	0081ffc4 	movi	r2,2047
  80e264:	80bf481e 	bne	r16,r2,80df88 <__alt_mem_onchip_mem+0xff78df88>
  80e268:	003f1c06 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e26c:	843ff844 	addi	r16,r16,-31
  80e270:	01000804 	movi	r4,32
  80e274:	1406d83a 	srl	r3,r2,r16
  80e278:	41005026 	beq	r8,r4,80e3bc <__adddf3+0x55c>
  80e27c:	01001004 	movi	r4,64
  80e280:	2211c83a 	sub	r8,r4,r8
  80e284:	1204983a 	sll	r2,r2,r8
  80e288:	88a2b03a 	or	r17,r17,r2
  80e28c:	8822c03a 	cmpne	r17,r17,zero
  80e290:	1c62b03a 	or	r17,r3,r17
  80e294:	0011883a 	mov	r8,zero
  80e298:	0021883a 	mov	r16,zero
  80e29c:	003f7106 	br	80e064 <__alt_mem_onchip_mem+0xff78e064>
  80e2a0:	193ff804 	addi	r4,r3,-32
  80e2a4:	00800804 	movi	r2,32
  80e2a8:	4908d83a 	srl	r4,r9,r4
  80e2ac:	18804526 	beq	r3,r2,80e3c4 <__adddf3+0x564>
  80e2b0:	00801004 	movi	r2,64
  80e2b4:	10c5c83a 	sub	r2,r2,r3
  80e2b8:	4886983a 	sll	r3,r9,r2
  80e2bc:	198cb03a 	or	r6,r3,r6
  80e2c0:	300cc03a 	cmpne	r6,r6,zero
  80e2c4:	218cb03a 	or	r6,r4,r6
  80e2c8:	0007883a 	mov	r3,zero
  80e2cc:	003f3b06 	br	80dfbc <__alt_mem_onchip_mem+0xff78dfbc>
  80e2d0:	80002a26 	beq	r16,zero,80e37c <__adddf3+0x51c>
  80e2d4:	0101ffc4 	movi	r4,2047
  80e2d8:	11006826 	beq	r2,r4,80e47c <__adddf3+0x61c>
  80e2dc:	00c7c83a 	sub	r3,zero,r3
  80e2e0:	42002034 	orhi	r8,r8,128
  80e2e4:	01000e04 	movi	r4,56
  80e2e8:	20c07c16 	blt	r4,r3,80e4dc <__adddf3+0x67c>
  80e2ec:	010007c4 	movi	r4,31
  80e2f0:	20c0da16 	blt	r4,r3,80e65c <__adddf3+0x7fc>
  80e2f4:	01000804 	movi	r4,32
  80e2f8:	20c9c83a 	sub	r4,r4,r3
  80e2fc:	4114983a 	sll	r10,r8,r4
  80e300:	88cad83a 	srl	r5,r17,r3
  80e304:	8908983a 	sll	r4,r17,r4
  80e308:	40c6d83a 	srl	r3,r8,r3
  80e30c:	5162b03a 	or	r17,r10,r5
  80e310:	2008c03a 	cmpne	r4,r4,zero
  80e314:	8922b03a 	or	r17,r17,r4
  80e318:	3463c83a 	sub	r17,r6,r17
  80e31c:	48c7c83a 	sub	r3,r9,r3
  80e320:	344d803a 	cmpltu	r6,r6,r17
  80e324:	1991c83a 	sub	r8,r3,r6
  80e328:	1021883a 	mov	r16,r2
  80e32c:	3825883a 	mov	r18,r7
  80e330:	003f2706 	br	80dfd0 <__alt_mem_onchip_mem+0xff78dfd0>
  80e334:	24d0b03a 	or	r8,r4,r19
  80e338:	40001b1e 	bne	r8,zero,80e3a8 <__adddf3+0x548>
  80e33c:	0005883a 	mov	r2,zero
  80e340:	0007883a 	mov	r3,zero
  80e344:	0021883a 	mov	r16,zero
  80e348:	003f4d06 	br	80e080 <__alt_mem_onchip_mem+0xff78e080>
  80e34c:	008007c4 	movi	r2,31
  80e350:	11003c16 	blt	r2,r4,80e444 <__adddf3+0x5e4>
  80e354:	00800804 	movi	r2,32
  80e358:	1105c83a 	sub	r2,r2,r4
  80e35c:	488e983a 	sll	r7,r9,r2
  80e360:	310ad83a 	srl	r5,r6,r4
  80e364:	3084983a 	sll	r2,r6,r2
  80e368:	4912d83a 	srl	r9,r9,r4
  80e36c:	394ab03a 	or	r5,r7,r5
  80e370:	1004c03a 	cmpne	r2,r2,zero
  80e374:	288ab03a 	or	r5,r5,r2
  80e378:	003f5306 	br	80e0c8 <__alt_mem_onchip_mem+0xff78e0c8>
  80e37c:	4448b03a 	or	r4,r8,r17
  80e380:	20003e26 	beq	r4,zero,80e47c <__adddf3+0x61c>
  80e384:	00c6303a 	nor	r3,zero,r3
  80e388:	18003a1e 	bne	r3,zero,80e474 <__adddf3+0x614>
  80e38c:	3463c83a 	sub	r17,r6,r17
  80e390:	4a07c83a 	sub	r3,r9,r8
  80e394:	344d803a 	cmpltu	r6,r6,r17
  80e398:	1991c83a 	sub	r8,r3,r6
  80e39c:	1021883a 	mov	r16,r2
  80e3a0:	3825883a 	mov	r18,r7
  80e3a4:	003f0a06 	br	80dfd0 <__alt_mem_onchip_mem+0xff78dfd0>
  80e3a8:	2023883a 	mov	r17,r4
  80e3ac:	003f0d06 	br	80dfe4 <__alt_mem_onchip_mem+0xff78dfe4>
  80e3b0:	0081ffc4 	movi	r2,2047
  80e3b4:	80bf3f1e 	bne	r16,r2,80e0b4 <__alt_mem_onchip_mem+0xff78e0b4>
  80e3b8:	003ec806 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e3bc:	0005883a 	mov	r2,zero
  80e3c0:	003fb106 	br	80e288 <__alt_mem_onchip_mem+0xff78e288>
  80e3c4:	0007883a 	mov	r3,zero
  80e3c8:	003fbc06 	br	80e2bc <__alt_mem_onchip_mem+0xff78e2bc>
  80e3cc:	4444b03a 	or	r2,r8,r17
  80e3d0:	8000871e 	bne	r16,zero,80e5f0 <__adddf3+0x790>
  80e3d4:	1000ba26 	beq	r2,zero,80e6c0 <__adddf3+0x860>
  80e3d8:	4984b03a 	or	r2,r9,r6
  80e3dc:	103ebf26 	beq	r2,zero,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e3e0:	8985883a 	add	r2,r17,r6
  80e3e4:	4247883a 	add	r3,r8,r9
  80e3e8:	1451803a 	cmpltu	r8,r2,r17
  80e3ec:	40d1883a 	add	r8,r8,r3
  80e3f0:	40c0202c 	andhi	r3,r8,128
  80e3f4:	1023883a 	mov	r17,r2
  80e3f8:	183f1a26 	beq	r3,zero,80e064 <__alt_mem_onchip_mem+0xff78e064>
  80e3fc:	00bfe034 	movhi	r2,65408
  80e400:	10bfffc4 	addi	r2,r2,-1
  80e404:	2021883a 	mov	r16,r4
  80e408:	4090703a 	and	r8,r8,r2
  80e40c:	003eb306 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e410:	4444b03a 	or	r2,r8,r17
  80e414:	8000291e 	bne	r16,zero,80e4bc <__adddf3+0x65c>
  80e418:	10004b1e 	bne	r2,zero,80e548 <__adddf3+0x6e8>
  80e41c:	4990b03a 	or	r8,r9,r6
  80e420:	40008b26 	beq	r8,zero,80e650 <__adddf3+0x7f0>
  80e424:	4811883a 	mov	r8,r9
  80e428:	3023883a 	mov	r17,r6
  80e42c:	3825883a 	mov	r18,r7
  80e430:	003eaa06 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e434:	1021883a 	mov	r16,r2
  80e438:	0011883a 	mov	r8,zero
  80e43c:	0005883a 	mov	r2,zero
  80e440:	003f0f06 	br	80e080 <__alt_mem_onchip_mem+0xff78e080>
  80e444:	217ff804 	addi	r5,r4,-32
  80e448:	00800804 	movi	r2,32
  80e44c:	494ad83a 	srl	r5,r9,r5
  80e450:	20807d26 	beq	r4,r2,80e648 <__adddf3+0x7e8>
  80e454:	00801004 	movi	r2,64
  80e458:	1109c83a 	sub	r4,r2,r4
  80e45c:	4912983a 	sll	r9,r9,r4
  80e460:	498cb03a 	or	r6,r9,r6
  80e464:	300cc03a 	cmpne	r6,r6,zero
  80e468:	298ab03a 	or	r5,r5,r6
  80e46c:	0013883a 	mov	r9,zero
  80e470:	003f1506 	br	80e0c8 <__alt_mem_onchip_mem+0xff78e0c8>
  80e474:	0101ffc4 	movi	r4,2047
  80e478:	113f9a1e 	bne	r2,r4,80e2e4 <__alt_mem_onchip_mem+0xff78e2e4>
  80e47c:	4811883a 	mov	r8,r9
  80e480:	3023883a 	mov	r17,r6
  80e484:	1021883a 	mov	r16,r2
  80e488:	3825883a 	mov	r18,r7
  80e48c:	003e9306 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e490:	8000161e 	bne	r16,zero,80e4ec <__adddf3+0x68c>
  80e494:	444ab03a 	or	r5,r8,r17
  80e498:	28005126 	beq	r5,zero,80e5e0 <__adddf3+0x780>
  80e49c:	0108303a 	nor	r4,zero,r4
  80e4a0:	20004d1e 	bne	r4,zero,80e5d8 <__adddf3+0x778>
  80e4a4:	89a3883a 	add	r17,r17,r6
  80e4a8:	4253883a 	add	r9,r8,r9
  80e4ac:	898d803a 	cmpltu	r6,r17,r6
  80e4b0:	3251883a 	add	r8,r6,r9
  80e4b4:	1021883a 	mov	r16,r2
  80e4b8:	003f0806 	br	80e0dc <__alt_mem_onchip_mem+0xff78e0dc>
  80e4bc:	1000301e 	bne	r2,zero,80e580 <__adddf3+0x720>
  80e4c0:	4984b03a 	or	r2,r9,r6
  80e4c4:	10007126 	beq	r2,zero,80e68c <__adddf3+0x82c>
  80e4c8:	4811883a 	mov	r8,r9
  80e4cc:	3023883a 	mov	r17,r6
  80e4d0:	3825883a 	mov	r18,r7
  80e4d4:	0401ffc4 	movi	r16,2047
  80e4d8:	003e8006 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e4dc:	4462b03a 	or	r17,r8,r17
  80e4e0:	8822c03a 	cmpne	r17,r17,zero
  80e4e4:	0007883a 	mov	r3,zero
  80e4e8:	003f8b06 	br	80e318 <__alt_mem_onchip_mem+0xff78e318>
  80e4ec:	0141ffc4 	movi	r5,2047
  80e4f0:	11403b26 	beq	r2,r5,80e5e0 <__adddf3+0x780>
  80e4f4:	0109c83a 	sub	r4,zero,r4
  80e4f8:	42002034 	orhi	r8,r8,128
  80e4fc:	01400e04 	movi	r5,56
  80e500:	29006716 	blt	r5,r4,80e6a0 <__adddf3+0x840>
  80e504:	014007c4 	movi	r5,31
  80e508:	29007016 	blt	r5,r4,80e6cc <__adddf3+0x86c>
  80e50c:	01400804 	movi	r5,32
  80e510:	290bc83a 	sub	r5,r5,r4
  80e514:	4154983a 	sll	r10,r8,r5
  80e518:	890ed83a 	srl	r7,r17,r4
  80e51c:	894a983a 	sll	r5,r17,r5
  80e520:	4108d83a 	srl	r4,r8,r4
  80e524:	51e2b03a 	or	r17,r10,r7
  80e528:	280ac03a 	cmpne	r5,r5,zero
  80e52c:	8962b03a 	or	r17,r17,r5
  80e530:	89a3883a 	add	r17,r17,r6
  80e534:	2253883a 	add	r9,r4,r9
  80e538:	898d803a 	cmpltu	r6,r17,r6
  80e53c:	3251883a 	add	r8,r6,r9
  80e540:	1021883a 	mov	r16,r2
  80e544:	003ee506 	br	80e0dc <__alt_mem_onchip_mem+0xff78e0dc>
  80e548:	4984b03a 	or	r2,r9,r6
  80e54c:	103e6326 	beq	r2,zero,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e550:	8987c83a 	sub	r3,r17,r6
  80e554:	88c9803a 	cmpltu	r4,r17,r3
  80e558:	4245c83a 	sub	r2,r8,r9
  80e55c:	1105c83a 	sub	r2,r2,r4
  80e560:	1100202c 	andhi	r4,r2,128
  80e564:	203ebb26 	beq	r4,zero,80e054 <__alt_mem_onchip_mem+0xff78e054>
  80e568:	3463c83a 	sub	r17,r6,r17
  80e56c:	4a07c83a 	sub	r3,r9,r8
  80e570:	344d803a 	cmpltu	r6,r6,r17
  80e574:	1991c83a 	sub	r8,r3,r6
  80e578:	3825883a 	mov	r18,r7
  80e57c:	003e5706 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e580:	4984b03a 	or	r2,r9,r6
  80e584:	10002e26 	beq	r2,zero,80e640 <__adddf3+0x7e0>
  80e588:	4004d0fa 	srli	r2,r8,3
  80e58c:	8822d0fa 	srli	r17,r17,3
  80e590:	4010977a 	slli	r8,r8,29
  80e594:	10c0022c 	andhi	r3,r2,8
  80e598:	4462b03a 	or	r17,r8,r17
  80e59c:	18000826 	beq	r3,zero,80e5c0 <__adddf3+0x760>
  80e5a0:	4808d0fa 	srli	r4,r9,3
  80e5a4:	20c0022c 	andhi	r3,r4,8
  80e5a8:	1800051e 	bne	r3,zero,80e5c0 <__adddf3+0x760>
  80e5ac:	300cd0fa 	srli	r6,r6,3
  80e5b0:	4806977a 	slli	r3,r9,29
  80e5b4:	2005883a 	mov	r2,r4
  80e5b8:	3825883a 	mov	r18,r7
  80e5bc:	19a2b03a 	or	r17,r3,r6
  80e5c0:	8810d77a 	srli	r8,r17,29
  80e5c4:	100490fa 	slli	r2,r2,3
  80e5c8:	882290fa 	slli	r17,r17,3
  80e5cc:	0401ffc4 	movi	r16,2047
  80e5d0:	4090b03a 	or	r8,r8,r2
  80e5d4:	003e4106 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e5d8:	0141ffc4 	movi	r5,2047
  80e5dc:	117fc71e 	bne	r2,r5,80e4fc <__alt_mem_onchip_mem+0xff78e4fc>
  80e5e0:	4811883a 	mov	r8,r9
  80e5e4:	3023883a 	mov	r17,r6
  80e5e8:	1021883a 	mov	r16,r2
  80e5ec:	003e3b06 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e5f0:	10002f26 	beq	r2,zero,80e6b0 <__adddf3+0x850>
  80e5f4:	4984b03a 	or	r2,r9,r6
  80e5f8:	10001126 	beq	r2,zero,80e640 <__adddf3+0x7e0>
  80e5fc:	4004d0fa 	srli	r2,r8,3
  80e600:	8822d0fa 	srli	r17,r17,3
  80e604:	4010977a 	slli	r8,r8,29
  80e608:	10c0022c 	andhi	r3,r2,8
  80e60c:	4462b03a 	or	r17,r8,r17
  80e610:	183feb26 	beq	r3,zero,80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>
  80e614:	4808d0fa 	srli	r4,r9,3
  80e618:	20c0022c 	andhi	r3,r4,8
  80e61c:	183fe81e 	bne	r3,zero,80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>
  80e620:	300cd0fa 	srli	r6,r6,3
  80e624:	4806977a 	slli	r3,r9,29
  80e628:	2005883a 	mov	r2,r4
  80e62c:	19a2b03a 	or	r17,r3,r6
  80e630:	003fe306 	br	80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>
  80e634:	0011883a 	mov	r8,zero
  80e638:	0005883a 	mov	r2,zero
  80e63c:	003e3f06 	br	80df3c <__alt_mem_onchip_mem+0xff78df3c>
  80e640:	0401ffc4 	movi	r16,2047
  80e644:	003e2506 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e648:	0013883a 	mov	r9,zero
  80e64c:	003f8406 	br	80e460 <__alt_mem_onchip_mem+0xff78e460>
  80e650:	0005883a 	mov	r2,zero
  80e654:	0007883a 	mov	r3,zero
  80e658:	003e8906 	br	80e080 <__alt_mem_onchip_mem+0xff78e080>
  80e65c:	197ff804 	addi	r5,r3,-32
  80e660:	01000804 	movi	r4,32
  80e664:	414ad83a 	srl	r5,r8,r5
  80e668:	19002426 	beq	r3,r4,80e6fc <__adddf3+0x89c>
  80e66c:	01001004 	movi	r4,64
  80e670:	20c7c83a 	sub	r3,r4,r3
  80e674:	40c6983a 	sll	r3,r8,r3
  80e678:	1c46b03a 	or	r3,r3,r17
  80e67c:	1806c03a 	cmpne	r3,r3,zero
  80e680:	28e2b03a 	or	r17,r5,r3
  80e684:	0007883a 	mov	r3,zero
  80e688:	003f2306 	br	80e318 <__alt_mem_onchip_mem+0xff78e318>
  80e68c:	0007883a 	mov	r3,zero
  80e690:	5811883a 	mov	r8,r11
  80e694:	00bfffc4 	movi	r2,-1
  80e698:	0401ffc4 	movi	r16,2047
  80e69c:	003e7806 	br	80e080 <__alt_mem_onchip_mem+0xff78e080>
  80e6a0:	4462b03a 	or	r17,r8,r17
  80e6a4:	8822c03a 	cmpne	r17,r17,zero
  80e6a8:	0009883a 	mov	r4,zero
  80e6ac:	003fa006 	br	80e530 <__alt_mem_onchip_mem+0xff78e530>
  80e6b0:	4811883a 	mov	r8,r9
  80e6b4:	3023883a 	mov	r17,r6
  80e6b8:	0401ffc4 	movi	r16,2047
  80e6bc:	003e0706 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e6c0:	4811883a 	mov	r8,r9
  80e6c4:	3023883a 	mov	r17,r6
  80e6c8:	003e0406 	br	80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80e6cc:	21fff804 	addi	r7,r4,-32
  80e6d0:	01400804 	movi	r5,32
  80e6d4:	41ced83a 	srl	r7,r8,r7
  80e6d8:	21400a26 	beq	r4,r5,80e704 <__adddf3+0x8a4>
  80e6dc:	01401004 	movi	r5,64
  80e6e0:	2909c83a 	sub	r4,r5,r4
  80e6e4:	4108983a 	sll	r4,r8,r4
  80e6e8:	2448b03a 	or	r4,r4,r17
  80e6ec:	2008c03a 	cmpne	r4,r4,zero
  80e6f0:	3922b03a 	or	r17,r7,r4
  80e6f4:	0009883a 	mov	r4,zero
  80e6f8:	003f8d06 	br	80e530 <__alt_mem_onchip_mem+0xff78e530>
  80e6fc:	0007883a 	mov	r3,zero
  80e700:	003fdd06 	br	80e678 <__alt_mem_onchip_mem+0xff78e678>
  80e704:	0009883a 	mov	r4,zero
  80e708:	003ff706 	br	80e6e8 <__alt_mem_onchip_mem+0xff78e6e8>

0080e70c <__divdf3>:
  80e70c:	defff204 	addi	sp,sp,-56
  80e710:	dd400915 	stw	r21,36(sp)
  80e714:	282ad53a 	srli	r21,r5,20
  80e718:	dd000815 	stw	r20,32(sp)
  80e71c:	2828d7fa 	srli	r20,r5,31
  80e720:	dc000415 	stw	r16,16(sp)
  80e724:	04000434 	movhi	r16,16
  80e728:	df000c15 	stw	fp,48(sp)
  80e72c:	843fffc4 	addi	r16,r16,-1
  80e730:	dfc00d15 	stw	ra,52(sp)
  80e734:	ddc00b15 	stw	r23,44(sp)
  80e738:	dd800a15 	stw	r22,40(sp)
  80e73c:	dcc00715 	stw	r19,28(sp)
  80e740:	dc800615 	stw	r18,24(sp)
  80e744:	dc400515 	stw	r17,20(sp)
  80e748:	ad41ffcc 	andi	r21,r21,2047
  80e74c:	2c20703a 	and	r16,r5,r16
  80e750:	a7003fcc 	andi	fp,r20,255
  80e754:	a8006126 	beq	r21,zero,80e8dc <__divdf3+0x1d0>
  80e758:	0081ffc4 	movi	r2,2047
  80e75c:	2025883a 	mov	r18,r4
  80e760:	a8803726 	beq	r21,r2,80e840 <__divdf3+0x134>
  80e764:	80800434 	orhi	r2,r16,16
  80e768:	100490fa 	slli	r2,r2,3
  80e76c:	2020d77a 	srli	r16,r4,29
  80e770:	202490fa 	slli	r18,r4,3
  80e774:	ad7f0044 	addi	r21,r21,-1023
  80e778:	80a0b03a 	or	r16,r16,r2
  80e77c:	0027883a 	mov	r19,zero
  80e780:	0013883a 	mov	r9,zero
  80e784:	3804d53a 	srli	r2,r7,20
  80e788:	382cd7fa 	srli	r22,r7,31
  80e78c:	04400434 	movhi	r17,16
  80e790:	8c7fffc4 	addi	r17,r17,-1
  80e794:	1081ffcc 	andi	r2,r2,2047
  80e798:	3011883a 	mov	r8,r6
  80e79c:	3c62703a 	and	r17,r7,r17
  80e7a0:	b5c03fcc 	andi	r23,r22,255
  80e7a4:	10006c26 	beq	r2,zero,80e958 <__divdf3+0x24c>
  80e7a8:	00c1ffc4 	movi	r3,2047
  80e7ac:	10c06426 	beq	r2,r3,80e940 <__divdf3+0x234>
  80e7b0:	88c00434 	orhi	r3,r17,16
  80e7b4:	180690fa 	slli	r3,r3,3
  80e7b8:	3022d77a 	srli	r17,r6,29
  80e7bc:	301090fa 	slli	r8,r6,3
  80e7c0:	10bf0044 	addi	r2,r2,-1023
  80e7c4:	88e2b03a 	or	r17,r17,r3
  80e7c8:	000f883a 	mov	r7,zero
  80e7cc:	a58cf03a 	xor	r6,r20,r22
  80e7d0:	3cc8b03a 	or	r4,r7,r19
  80e7d4:	a8abc83a 	sub	r21,r21,r2
  80e7d8:	008003c4 	movi	r2,15
  80e7dc:	3007883a 	mov	r3,r6
  80e7e0:	34c03fcc 	andi	r19,r6,255
  80e7e4:	11009036 	bltu	r2,r4,80ea28 <__divdf3+0x31c>
  80e7e8:	200890ba 	slli	r4,r4,2
  80e7ec:	00802074 	movhi	r2,129
  80e7f0:	10ba0004 	addi	r2,r2,-6144
  80e7f4:	2089883a 	add	r4,r4,r2
  80e7f8:	20800017 	ldw	r2,0(r4)
  80e7fc:	1000683a 	jmp	r2
  80e800:	0080ea28 	cmpgeui	r2,zero,936
  80e804:	0080e878 	rdprs	r2,zero,929
  80e808:	0080ea18 	cmpnei	r2,zero,936
  80e80c:	0080e86c 	andhi	r2,zero,929
  80e810:	0080ea18 	cmpnei	r2,zero,936
  80e814:	0080e9ec 	andhi	r2,zero,935
  80e818:	0080ea18 	cmpnei	r2,zero,936
  80e81c:	0080e86c 	andhi	r2,zero,929
  80e820:	0080e878 	rdprs	r2,zero,929
  80e824:	0080e878 	rdprs	r2,zero,929
  80e828:	0080e9ec 	andhi	r2,zero,935
  80e82c:	0080e86c 	andhi	r2,zero,929
  80e830:	0080e85c 	xori	r2,zero,929
  80e834:	0080e85c 	xori	r2,zero,929
  80e838:	0080e85c 	xori	r2,zero,929
  80e83c:	0080ed0c 	andi	r2,zero,948
  80e840:	2404b03a 	or	r2,r4,r16
  80e844:	1000661e 	bne	r2,zero,80e9e0 <__divdf3+0x2d4>
  80e848:	04c00204 	movi	r19,8
  80e84c:	0021883a 	mov	r16,zero
  80e850:	0025883a 	mov	r18,zero
  80e854:	02400084 	movi	r9,2
  80e858:	003fca06 	br	80e784 <__alt_mem_onchip_mem+0xff78e784>
  80e85c:	8023883a 	mov	r17,r16
  80e860:	9011883a 	mov	r8,r18
  80e864:	e02f883a 	mov	r23,fp
  80e868:	480f883a 	mov	r7,r9
  80e86c:	00800084 	movi	r2,2
  80e870:	3881311e 	bne	r7,r2,80ed38 <__divdf3+0x62c>
  80e874:	b827883a 	mov	r19,r23
  80e878:	98c0004c 	andi	r3,r19,1
  80e87c:	0081ffc4 	movi	r2,2047
  80e880:	000b883a 	mov	r5,zero
  80e884:	0025883a 	mov	r18,zero
  80e888:	1004953a 	slli	r2,r2,20
  80e88c:	18c03fcc 	andi	r3,r3,255
  80e890:	04400434 	movhi	r17,16
  80e894:	8c7fffc4 	addi	r17,r17,-1
  80e898:	180697fa 	slli	r3,r3,31
  80e89c:	2c4a703a 	and	r5,r5,r17
  80e8a0:	288ab03a 	or	r5,r5,r2
  80e8a4:	28c6b03a 	or	r3,r5,r3
  80e8a8:	9005883a 	mov	r2,r18
  80e8ac:	dfc00d17 	ldw	ra,52(sp)
  80e8b0:	df000c17 	ldw	fp,48(sp)
  80e8b4:	ddc00b17 	ldw	r23,44(sp)
  80e8b8:	dd800a17 	ldw	r22,40(sp)
  80e8bc:	dd400917 	ldw	r21,36(sp)
  80e8c0:	dd000817 	ldw	r20,32(sp)
  80e8c4:	dcc00717 	ldw	r19,28(sp)
  80e8c8:	dc800617 	ldw	r18,24(sp)
  80e8cc:	dc400517 	ldw	r17,20(sp)
  80e8d0:	dc000417 	ldw	r16,16(sp)
  80e8d4:	dec00e04 	addi	sp,sp,56
  80e8d8:	f800283a 	ret
  80e8dc:	2404b03a 	or	r2,r4,r16
  80e8e0:	2027883a 	mov	r19,r4
  80e8e4:	10003926 	beq	r2,zero,80e9cc <__divdf3+0x2c0>
  80e8e8:	80012e26 	beq	r16,zero,80eda4 <__divdf3+0x698>
  80e8ec:	8009883a 	mov	r4,r16
  80e8f0:	d9800315 	stw	r6,12(sp)
  80e8f4:	d9c00215 	stw	r7,8(sp)
  80e8f8:	08104640 	call	810464 <__clzsi2>
  80e8fc:	d9800317 	ldw	r6,12(sp)
  80e900:	d9c00217 	ldw	r7,8(sp)
  80e904:	113ffd44 	addi	r4,r2,-11
  80e908:	00c00704 	movi	r3,28
  80e90c:	19012116 	blt	r3,r4,80ed94 <__divdf3+0x688>
  80e910:	00c00744 	movi	r3,29
  80e914:	147ffe04 	addi	r17,r2,-8
  80e918:	1907c83a 	sub	r3,r3,r4
  80e91c:	8460983a 	sll	r16,r16,r17
  80e920:	98c6d83a 	srl	r3,r19,r3
  80e924:	9c64983a 	sll	r18,r19,r17
  80e928:	1c20b03a 	or	r16,r3,r16
  80e92c:	1080fcc4 	addi	r2,r2,1011
  80e930:	00abc83a 	sub	r21,zero,r2
  80e934:	0027883a 	mov	r19,zero
  80e938:	0013883a 	mov	r9,zero
  80e93c:	003f9106 	br	80e784 <__alt_mem_onchip_mem+0xff78e784>
  80e940:	3446b03a 	or	r3,r6,r17
  80e944:	18001f1e 	bne	r3,zero,80e9c4 <__divdf3+0x2b8>
  80e948:	0023883a 	mov	r17,zero
  80e94c:	0011883a 	mov	r8,zero
  80e950:	01c00084 	movi	r7,2
  80e954:	003f9d06 	br	80e7cc <__alt_mem_onchip_mem+0xff78e7cc>
  80e958:	3446b03a 	or	r3,r6,r17
  80e95c:	18001526 	beq	r3,zero,80e9b4 <__divdf3+0x2a8>
  80e960:	88011b26 	beq	r17,zero,80edd0 <__divdf3+0x6c4>
  80e964:	8809883a 	mov	r4,r17
  80e968:	d9800315 	stw	r6,12(sp)
  80e96c:	da400115 	stw	r9,4(sp)
  80e970:	08104640 	call	810464 <__clzsi2>
  80e974:	d9800317 	ldw	r6,12(sp)
  80e978:	da400117 	ldw	r9,4(sp)
  80e97c:	113ffd44 	addi	r4,r2,-11
  80e980:	00c00704 	movi	r3,28
  80e984:	19010e16 	blt	r3,r4,80edc0 <__divdf3+0x6b4>
  80e988:	00c00744 	movi	r3,29
  80e98c:	123ffe04 	addi	r8,r2,-8
  80e990:	1907c83a 	sub	r3,r3,r4
  80e994:	8a22983a 	sll	r17,r17,r8
  80e998:	30c6d83a 	srl	r3,r6,r3
  80e99c:	3210983a 	sll	r8,r6,r8
  80e9a0:	1c62b03a 	or	r17,r3,r17
  80e9a4:	1080fcc4 	addi	r2,r2,1011
  80e9a8:	0085c83a 	sub	r2,zero,r2
  80e9ac:	000f883a 	mov	r7,zero
  80e9b0:	003f8606 	br	80e7cc <__alt_mem_onchip_mem+0xff78e7cc>
  80e9b4:	0023883a 	mov	r17,zero
  80e9b8:	0011883a 	mov	r8,zero
  80e9bc:	01c00044 	movi	r7,1
  80e9c0:	003f8206 	br	80e7cc <__alt_mem_onchip_mem+0xff78e7cc>
  80e9c4:	01c000c4 	movi	r7,3
  80e9c8:	003f8006 	br	80e7cc <__alt_mem_onchip_mem+0xff78e7cc>
  80e9cc:	04c00104 	movi	r19,4
  80e9d0:	0021883a 	mov	r16,zero
  80e9d4:	0025883a 	mov	r18,zero
  80e9d8:	02400044 	movi	r9,1
  80e9dc:	003f6906 	br	80e784 <__alt_mem_onchip_mem+0xff78e784>
  80e9e0:	04c00304 	movi	r19,12
  80e9e4:	024000c4 	movi	r9,3
  80e9e8:	003f6606 	br	80e784 <__alt_mem_onchip_mem+0xff78e784>
  80e9ec:	01400434 	movhi	r5,16
  80e9f0:	0007883a 	mov	r3,zero
  80e9f4:	297fffc4 	addi	r5,r5,-1
  80e9f8:	04bfffc4 	movi	r18,-1
  80e9fc:	0081ffc4 	movi	r2,2047
  80ea00:	003fa106 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ea04:	00c00044 	movi	r3,1
  80ea08:	1887c83a 	sub	r3,r3,r2
  80ea0c:	01000e04 	movi	r4,56
  80ea10:	20c1210e 	bge	r4,r3,80ee98 <__divdf3+0x78c>
  80ea14:	98c0004c 	andi	r3,r19,1
  80ea18:	0005883a 	mov	r2,zero
  80ea1c:	000b883a 	mov	r5,zero
  80ea20:	0025883a 	mov	r18,zero
  80ea24:	003f9806 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ea28:	8c00fd36 	bltu	r17,r16,80ee20 <__divdf3+0x714>
  80ea2c:	8440fb26 	beq	r16,r17,80ee1c <__divdf3+0x710>
  80ea30:	8007883a 	mov	r3,r16
  80ea34:	ad7fffc4 	addi	r21,r21,-1
  80ea38:	0021883a 	mov	r16,zero
  80ea3c:	4004d63a 	srli	r2,r8,24
  80ea40:	8822923a 	slli	r17,r17,8
  80ea44:	1809883a 	mov	r4,r3
  80ea48:	402c923a 	slli	r22,r8,8
  80ea4c:	88b8b03a 	or	fp,r17,r2
  80ea50:	e028d43a 	srli	r20,fp,16
  80ea54:	d8c00015 	stw	r3,0(sp)
  80ea58:	e5ffffcc 	andi	r23,fp,65535
  80ea5c:	a00b883a 	mov	r5,r20
  80ea60:	080dda40 	call	80dda4 <__udivsi3>
  80ea64:	d8c00017 	ldw	r3,0(sp)
  80ea68:	a00b883a 	mov	r5,r20
  80ea6c:	d8800315 	stw	r2,12(sp)
  80ea70:	1809883a 	mov	r4,r3
  80ea74:	080de080 	call	80de08 <__umodsi3>
  80ea78:	d9800317 	ldw	r6,12(sp)
  80ea7c:	1006943a 	slli	r3,r2,16
  80ea80:	9004d43a 	srli	r2,r18,16
  80ea84:	b9a3383a 	mul	r17,r23,r6
  80ea88:	10c4b03a 	or	r2,r2,r3
  80ea8c:	1440062e 	bgeu	r2,r17,80eaa8 <__divdf3+0x39c>
  80ea90:	1705883a 	add	r2,r2,fp
  80ea94:	30ffffc4 	addi	r3,r6,-1
  80ea98:	1700ee36 	bltu	r2,fp,80ee54 <__divdf3+0x748>
  80ea9c:	1440ed2e 	bgeu	r2,r17,80ee54 <__divdf3+0x748>
  80eaa0:	31bfff84 	addi	r6,r6,-2
  80eaa4:	1705883a 	add	r2,r2,fp
  80eaa8:	1463c83a 	sub	r17,r2,r17
  80eaac:	a00b883a 	mov	r5,r20
  80eab0:	8809883a 	mov	r4,r17
  80eab4:	d9800315 	stw	r6,12(sp)
  80eab8:	080dda40 	call	80dda4 <__udivsi3>
  80eabc:	a00b883a 	mov	r5,r20
  80eac0:	8809883a 	mov	r4,r17
  80eac4:	d8800215 	stw	r2,8(sp)
  80eac8:	080de080 	call	80de08 <__umodsi3>
  80eacc:	d9c00217 	ldw	r7,8(sp)
  80ead0:	1004943a 	slli	r2,r2,16
  80ead4:	94bfffcc 	andi	r18,r18,65535
  80ead8:	b9d1383a 	mul	r8,r23,r7
  80eadc:	90a4b03a 	or	r18,r18,r2
  80eae0:	d9800317 	ldw	r6,12(sp)
  80eae4:	9200062e 	bgeu	r18,r8,80eb00 <__divdf3+0x3f4>
  80eae8:	9725883a 	add	r18,r18,fp
  80eaec:	38bfffc4 	addi	r2,r7,-1
  80eaf0:	9700d636 	bltu	r18,fp,80ee4c <__divdf3+0x740>
  80eaf4:	9200d52e 	bgeu	r18,r8,80ee4c <__divdf3+0x740>
  80eaf8:	39ffff84 	addi	r7,r7,-2
  80eafc:	9725883a 	add	r18,r18,fp
  80eb00:	3004943a 	slli	r2,r6,16
  80eb04:	b012d43a 	srli	r9,r22,16
  80eb08:	b1bfffcc 	andi	r6,r22,65535
  80eb0c:	11e2b03a 	or	r17,r2,r7
  80eb10:	8806d43a 	srli	r3,r17,16
  80eb14:	893fffcc 	andi	r4,r17,65535
  80eb18:	218b383a 	mul	r5,r4,r6
  80eb1c:	30c5383a 	mul	r2,r6,r3
  80eb20:	2249383a 	mul	r4,r4,r9
  80eb24:	280ed43a 	srli	r7,r5,16
  80eb28:	9225c83a 	sub	r18,r18,r8
  80eb2c:	2089883a 	add	r4,r4,r2
  80eb30:	3909883a 	add	r4,r7,r4
  80eb34:	1a47383a 	mul	r3,r3,r9
  80eb38:	2080022e 	bgeu	r4,r2,80eb44 <__divdf3+0x438>
  80eb3c:	00800074 	movhi	r2,1
  80eb40:	1887883a 	add	r3,r3,r2
  80eb44:	2004d43a 	srli	r2,r4,16
  80eb48:	2008943a 	slli	r4,r4,16
  80eb4c:	297fffcc 	andi	r5,r5,65535
  80eb50:	10c7883a 	add	r3,r2,r3
  80eb54:	2149883a 	add	r4,r4,r5
  80eb58:	90c0a536 	bltu	r18,r3,80edf0 <__divdf3+0x6e4>
  80eb5c:	90c0bf26 	beq	r18,r3,80ee5c <__divdf3+0x750>
  80eb60:	90c7c83a 	sub	r3,r18,r3
  80eb64:	810fc83a 	sub	r7,r16,r4
  80eb68:	81e5803a 	cmpltu	r18,r16,r7
  80eb6c:	1ca5c83a 	sub	r18,r3,r18
  80eb70:	e480c126 	beq	fp,r18,80ee78 <__divdf3+0x76c>
  80eb74:	a00b883a 	mov	r5,r20
  80eb78:	9009883a 	mov	r4,r18
  80eb7c:	d9800315 	stw	r6,12(sp)
  80eb80:	d9c00215 	stw	r7,8(sp)
  80eb84:	da400115 	stw	r9,4(sp)
  80eb88:	080dda40 	call	80dda4 <__udivsi3>
  80eb8c:	a00b883a 	mov	r5,r20
  80eb90:	9009883a 	mov	r4,r18
  80eb94:	d8800015 	stw	r2,0(sp)
  80eb98:	080de080 	call	80de08 <__umodsi3>
  80eb9c:	d9c00217 	ldw	r7,8(sp)
  80eba0:	da000017 	ldw	r8,0(sp)
  80eba4:	1006943a 	slli	r3,r2,16
  80eba8:	3804d43a 	srli	r2,r7,16
  80ebac:	ba21383a 	mul	r16,r23,r8
  80ebb0:	d9800317 	ldw	r6,12(sp)
  80ebb4:	10c4b03a 	or	r2,r2,r3
  80ebb8:	da400117 	ldw	r9,4(sp)
  80ebbc:	1400062e 	bgeu	r2,r16,80ebd8 <__divdf3+0x4cc>
  80ebc0:	1705883a 	add	r2,r2,fp
  80ebc4:	40ffffc4 	addi	r3,r8,-1
  80ebc8:	1700ad36 	bltu	r2,fp,80ee80 <__divdf3+0x774>
  80ebcc:	1400ac2e 	bgeu	r2,r16,80ee80 <__divdf3+0x774>
  80ebd0:	423fff84 	addi	r8,r8,-2
  80ebd4:	1705883a 	add	r2,r2,fp
  80ebd8:	1421c83a 	sub	r16,r2,r16
  80ebdc:	a00b883a 	mov	r5,r20
  80ebe0:	8009883a 	mov	r4,r16
  80ebe4:	d9800315 	stw	r6,12(sp)
  80ebe8:	d9c00215 	stw	r7,8(sp)
  80ebec:	da000015 	stw	r8,0(sp)
  80ebf0:	da400115 	stw	r9,4(sp)
  80ebf4:	080dda40 	call	80dda4 <__udivsi3>
  80ebf8:	8009883a 	mov	r4,r16
  80ebfc:	a00b883a 	mov	r5,r20
  80ec00:	1025883a 	mov	r18,r2
  80ec04:	080de080 	call	80de08 <__umodsi3>
  80ec08:	d9c00217 	ldw	r7,8(sp)
  80ec0c:	1004943a 	slli	r2,r2,16
  80ec10:	bcaf383a 	mul	r23,r23,r18
  80ec14:	393fffcc 	andi	r4,r7,65535
  80ec18:	2088b03a 	or	r4,r4,r2
  80ec1c:	d9800317 	ldw	r6,12(sp)
  80ec20:	da000017 	ldw	r8,0(sp)
  80ec24:	da400117 	ldw	r9,4(sp)
  80ec28:	25c0062e 	bgeu	r4,r23,80ec44 <__divdf3+0x538>
  80ec2c:	2709883a 	add	r4,r4,fp
  80ec30:	90bfffc4 	addi	r2,r18,-1
  80ec34:	27009436 	bltu	r4,fp,80ee88 <__divdf3+0x77c>
  80ec38:	25c0932e 	bgeu	r4,r23,80ee88 <__divdf3+0x77c>
  80ec3c:	94bfff84 	addi	r18,r18,-2
  80ec40:	2709883a 	add	r4,r4,fp
  80ec44:	4004943a 	slli	r2,r8,16
  80ec48:	25efc83a 	sub	r23,r4,r23
  80ec4c:	1490b03a 	or	r8,r2,r18
  80ec50:	4008d43a 	srli	r4,r8,16
  80ec54:	40ffffcc 	andi	r3,r8,65535
  80ec58:	30c5383a 	mul	r2,r6,r3
  80ec5c:	1a47383a 	mul	r3,r3,r9
  80ec60:	310d383a 	mul	r6,r6,r4
  80ec64:	100ad43a 	srli	r5,r2,16
  80ec68:	4913383a 	mul	r9,r9,r4
  80ec6c:	1987883a 	add	r3,r3,r6
  80ec70:	28c7883a 	add	r3,r5,r3
  80ec74:	1980022e 	bgeu	r3,r6,80ec80 <__divdf3+0x574>
  80ec78:	01000074 	movhi	r4,1
  80ec7c:	4913883a 	add	r9,r9,r4
  80ec80:	1808d43a 	srli	r4,r3,16
  80ec84:	1806943a 	slli	r3,r3,16
  80ec88:	10bfffcc 	andi	r2,r2,65535
  80ec8c:	2253883a 	add	r9,r4,r9
  80ec90:	1887883a 	add	r3,r3,r2
  80ec94:	ba403836 	bltu	r23,r9,80ed78 <__divdf3+0x66c>
  80ec98:	ba403626 	beq	r23,r9,80ed74 <__divdf3+0x668>
  80ec9c:	42000054 	ori	r8,r8,1
  80eca0:	a880ffc4 	addi	r2,r21,1023
  80eca4:	00bf570e 	bge	zero,r2,80ea04 <__alt_mem_onchip_mem+0xff78ea04>
  80eca8:	40c001cc 	andi	r3,r8,7
  80ecac:	18000726 	beq	r3,zero,80eccc <__divdf3+0x5c0>
  80ecb0:	40c003cc 	andi	r3,r8,15
  80ecb4:	01000104 	movi	r4,4
  80ecb8:	19000426 	beq	r3,r4,80eccc <__divdf3+0x5c0>
  80ecbc:	4107883a 	add	r3,r8,r4
  80ecc0:	1a11803a 	cmpltu	r8,r3,r8
  80ecc4:	8a23883a 	add	r17,r17,r8
  80ecc8:	1811883a 	mov	r8,r3
  80eccc:	88c0402c 	andhi	r3,r17,256
  80ecd0:	18000426 	beq	r3,zero,80ece4 <__divdf3+0x5d8>
  80ecd4:	00ffc034 	movhi	r3,65280
  80ecd8:	18ffffc4 	addi	r3,r3,-1
  80ecdc:	a8810004 	addi	r2,r21,1024
  80ece0:	88e2703a 	and	r17,r17,r3
  80ece4:	00c1ff84 	movi	r3,2046
  80ece8:	18bee316 	blt	r3,r2,80e878 <__alt_mem_onchip_mem+0xff78e878>
  80ecec:	8824977a 	slli	r18,r17,29
  80ecf0:	4010d0fa 	srli	r8,r8,3
  80ecf4:	8822927a 	slli	r17,r17,9
  80ecf8:	1081ffcc 	andi	r2,r2,2047
  80ecfc:	9224b03a 	or	r18,r18,r8
  80ed00:	880ad33a 	srli	r5,r17,12
  80ed04:	98c0004c 	andi	r3,r19,1
  80ed08:	003edf06 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ed0c:	8080022c 	andhi	r2,r16,8
  80ed10:	10001226 	beq	r2,zero,80ed5c <__divdf3+0x650>
  80ed14:	8880022c 	andhi	r2,r17,8
  80ed18:	1000101e 	bne	r2,zero,80ed5c <__divdf3+0x650>
  80ed1c:	00800434 	movhi	r2,16
  80ed20:	89400234 	orhi	r5,r17,8
  80ed24:	10bfffc4 	addi	r2,r2,-1
  80ed28:	b007883a 	mov	r3,r22
  80ed2c:	288a703a 	and	r5,r5,r2
  80ed30:	4025883a 	mov	r18,r8
  80ed34:	003f3106 	br	80e9fc <__alt_mem_onchip_mem+0xff78e9fc>
  80ed38:	008000c4 	movi	r2,3
  80ed3c:	3880a626 	beq	r7,r2,80efd8 <__divdf3+0x8cc>
  80ed40:	00800044 	movi	r2,1
  80ed44:	3880521e 	bne	r7,r2,80ee90 <__divdf3+0x784>
  80ed48:	b807883a 	mov	r3,r23
  80ed4c:	0005883a 	mov	r2,zero
  80ed50:	000b883a 	mov	r5,zero
  80ed54:	0025883a 	mov	r18,zero
  80ed58:	003ecb06 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ed5c:	00800434 	movhi	r2,16
  80ed60:	81400234 	orhi	r5,r16,8
  80ed64:	10bfffc4 	addi	r2,r2,-1
  80ed68:	a007883a 	mov	r3,r20
  80ed6c:	288a703a 	and	r5,r5,r2
  80ed70:	003f2206 	br	80e9fc <__alt_mem_onchip_mem+0xff78e9fc>
  80ed74:	183fca26 	beq	r3,zero,80eca0 <__alt_mem_onchip_mem+0xff78eca0>
  80ed78:	e5ef883a 	add	r23,fp,r23
  80ed7c:	40bfffc4 	addi	r2,r8,-1
  80ed80:	bf00392e 	bgeu	r23,fp,80ee68 <__divdf3+0x75c>
  80ed84:	1011883a 	mov	r8,r2
  80ed88:	ba7fc41e 	bne	r23,r9,80ec9c <__alt_mem_onchip_mem+0xff78ec9c>
  80ed8c:	b0ffc31e 	bne	r22,r3,80ec9c <__alt_mem_onchip_mem+0xff78ec9c>
  80ed90:	003fc306 	br	80eca0 <__alt_mem_onchip_mem+0xff78eca0>
  80ed94:	143ff604 	addi	r16,r2,-40
  80ed98:	9c20983a 	sll	r16,r19,r16
  80ed9c:	0025883a 	mov	r18,zero
  80eda0:	003ee206 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80eda4:	d9800315 	stw	r6,12(sp)
  80eda8:	d9c00215 	stw	r7,8(sp)
  80edac:	08104640 	call	810464 <__clzsi2>
  80edb0:	10800804 	addi	r2,r2,32
  80edb4:	d9c00217 	ldw	r7,8(sp)
  80edb8:	d9800317 	ldw	r6,12(sp)
  80edbc:	003ed106 	br	80e904 <__alt_mem_onchip_mem+0xff78e904>
  80edc0:	147ff604 	addi	r17,r2,-40
  80edc4:	3462983a 	sll	r17,r6,r17
  80edc8:	0011883a 	mov	r8,zero
  80edcc:	003ef506 	br	80e9a4 <__alt_mem_onchip_mem+0xff78e9a4>
  80edd0:	3009883a 	mov	r4,r6
  80edd4:	d9800315 	stw	r6,12(sp)
  80edd8:	da400115 	stw	r9,4(sp)
  80eddc:	08104640 	call	810464 <__clzsi2>
  80ede0:	10800804 	addi	r2,r2,32
  80ede4:	da400117 	ldw	r9,4(sp)
  80ede8:	d9800317 	ldw	r6,12(sp)
  80edec:	003ee306 	br	80e97c <__alt_mem_onchip_mem+0xff78e97c>
  80edf0:	85a1883a 	add	r16,r16,r22
  80edf4:	8585803a 	cmpltu	r2,r16,r22
  80edf8:	1705883a 	add	r2,r2,fp
  80edfc:	14a5883a 	add	r18,r2,r18
  80ee00:	88bfffc4 	addi	r2,r17,-1
  80ee04:	e4800c2e 	bgeu	fp,r18,80ee38 <__divdf3+0x72c>
  80ee08:	90c03e36 	bltu	r18,r3,80ef04 <__divdf3+0x7f8>
  80ee0c:	1c806926 	beq	r3,r18,80efb4 <__divdf3+0x8a8>
  80ee10:	90c7c83a 	sub	r3,r18,r3
  80ee14:	1023883a 	mov	r17,r2
  80ee18:	003f5206 	br	80eb64 <__alt_mem_onchip_mem+0xff78eb64>
  80ee1c:	923f0436 	bltu	r18,r8,80ea30 <__alt_mem_onchip_mem+0xff78ea30>
  80ee20:	800897fa 	slli	r4,r16,31
  80ee24:	9004d07a 	srli	r2,r18,1
  80ee28:	8006d07a 	srli	r3,r16,1
  80ee2c:	902097fa 	slli	r16,r18,31
  80ee30:	20a4b03a 	or	r18,r4,r2
  80ee34:	003f0106 	br	80ea3c <__alt_mem_onchip_mem+0xff78ea3c>
  80ee38:	e4bff51e 	bne	fp,r18,80ee10 <__alt_mem_onchip_mem+0xff78ee10>
  80ee3c:	85bff22e 	bgeu	r16,r22,80ee08 <__alt_mem_onchip_mem+0xff78ee08>
  80ee40:	e0c7c83a 	sub	r3,fp,r3
  80ee44:	1023883a 	mov	r17,r2
  80ee48:	003f4606 	br	80eb64 <__alt_mem_onchip_mem+0xff78eb64>
  80ee4c:	100f883a 	mov	r7,r2
  80ee50:	003f2b06 	br	80eb00 <__alt_mem_onchip_mem+0xff78eb00>
  80ee54:	180d883a 	mov	r6,r3
  80ee58:	003f1306 	br	80eaa8 <__alt_mem_onchip_mem+0xff78eaa8>
  80ee5c:	813fe436 	bltu	r16,r4,80edf0 <__alt_mem_onchip_mem+0xff78edf0>
  80ee60:	0007883a 	mov	r3,zero
  80ee64:	003f3f06 	br	80eb64 <__alt_mem_onchip_mem+0xff78eb64>
  80ee68:	ba402c36 	bltu	r23,r9,80ef1c <__divdf3+0x810>
  80ee6c:	4dc05426 	beq	r9,r23,80efc0 <__divdf3+0x8b4>
  80ee70:	1011883a 	mov	r8,r2
  80ee74:	003f8906 	br	80ec9c <__alt_mem_onchip_mem+0xff78ec9c>
  80ee78:	023fffc4 	movi	r8,-1
  80ee7c:	003f8806 	br	80eca0 <__alt_mem_onchip_mem+0xff78eca0>
  80ee80:	1811883a 	mov	r8,r3
  80ee84:	003f5406 	br	80ebd8 <__alt_mem_onchip_mem+0xff78ebd8>
  80ee88:	1025883a 	mov	r18,r2
  80ee8c:	003f6d06 	br	80ec44 <__alt_mem_onchip_mem+0xff78ec44>
  80ee90:	b827883a 	mov	r19,r23
  80ee94:	003f8206 	br	80eca0 <__alt_mem_onchip_mem+0xff78eca0>
  80ee98:	010007c4 	movi	r4,31
  80ee9c:	20c02616 	blt	r4,r3,80ef38 <__divdf3+0x82c>
  80eea0:	00800804 	movi	r2,32
  80eea4:	10c5c83a 	sub	r2,r2,r3
  80eea8:	888a983a 	sll	r5,r17,r2
  80eeac:	40c8d83a 	srl	r4,r8,r3
  80eeb0:	4084983a 	sll	r2,r8,r2
  80eeb4:	88e2d83a 	srl	r17,r17,r3
  80eeb8:	2906b03a 	or	r3,r5,r4
  80eebc:	1004c03a 	cmpne	r2,r2,zero
  80eec0:	1886b03a 	or	r3,r3,r2
  80eec4:	188001cc 	andi	r2,r3,7
  80eec8:	10000726 	beq	r2,zero,80eee8 <__divdf3+0x7dc>
  80eecc:	188003cc 	andi	r2,r3,15
  80eed0:	01000104 	movi	r4,4
  80eed4:	11000426 	beq	r2,r4,80eee8 <__divdf3+0x7dc>
  80eed8:	1805883a 	mov	r2,r3
  80eedc:	10c00104 	addi	r3,r2,4
  80eee0:	1885803a 	cmpltu	r2,r3,r2
  80eee4:	88a3883a 	add	r17,r17,r2
  80eee8:	8880202c 	andhi	r2,r17,128
  80eeec:	10002726 	beq	r2,zero,80ef8c <__divdf3+0x880>
  80eef0:	98c0004c 	andi	r3,r19,1
  80eef4:	00800044 	movi	r2,1
  80eef8:	000b883a 	mov	r5,zero
  80eefc:	0025883a 	mov	r18,zero
  80ef00:	003e6106 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ef04:	85a1883a 	add	r16,r16,r22
  80ef08:	8585803a 	cmpltu	r2,r16,r22
  80ef0c:	1705883a 	add	r2,r2,fp
  80ef10:	14a5883a 	add	r18,r2,r18
  80ef14:	8c7fff84 	addi	r17,r17,-2
  80ef18:	003f1106 	br	80eb60 <__alt_mem_onchip_mem+0xff78eb60>
  80ef1c:	b589883a 	add	r4,r22,r22
  80ef20:	25ad803a 	cmpltu	r22,r4,r22
  80ef24:	b739883a 	add	fp,r22,fp
  80ef28:	40bfff84 	addi	r2,r8,-2
  80ef2c:	bf2f883a 	add	r23,r23,fp
  80ef30:	202d883a 	mov	r22,r4
  80ef34:	003f9306 	br	80ed84 <__alt_mem_onchip_mem+0xff78ed84>
  80ef38:	013ff844 	movi	r4,-31
  80ef3c:	2085c83a 	sub	r2,r4,r2
  80ef40:	8888d83a 	srl	r4,r17,r2
  80ef44:	00800804 	movi	r2,32
  80ef48:	18802126 	beq	r3,r2,80efd0 <__divdf3+0x8c4>
  80ef4c:	00801004 	movi	r2,64
  80ef50:	10c5c83a 	sub	r2,r2,r3
  80ef54:	8884983a 	sll	r2,r17,r2
  80ef58:	1204b03a 	or	r2,r2,r8
  80ef5c:	1004c03a 	cmpne	r2,r2,zero
  80ef60:	2084b03a 	or	r2,r4,r2
  80ef64:	144001cc 	andi	r17,r2,7
  80ef68:	88000d1e 	bne	r17,zero,80efa0 <__divdf3+0x894>
  80ef6c:	000b883a 	mov	r5,zero
  80ef70:	1024d0fa 	srli	r18,r2,3
  80ef74:	98c0004c 	andi	r3,r19,1
  80ef78:	0005883a 	mov	r2,zero
  80ef7c:	9464b03a 	or	r18,r18,r17
  80ef80:	003e4106 	br	80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ef84:	1007883a 	mov	r3,r2
  80ef88:	0023883a 	mov	r17,zero
  80ef8c:	880a927a 	slli	r5,r17,9
  80ef90:	1805883a 	mov	r2,r3
  80ef94:	8822977a 	slli	r17,r17,29
  80ef98:	280ad33a 	srli	r5,r5,12
  80ef9c:	003ff406 	br	80ef70 <__alt_mem_onchip_mem+0xff78ef70>
  80efa0:	10c003cc 	andi	r3,r2,15
  80efa4:	01000104 	movi	r4,4
  80efa8:	193ff626 	beq	r3,r4,80ef84 <__alt_mem_onchip_mem+0xff78ef84>
  80efac:	0023883a 	mov	r17,zero
  80efb0:	003fca06 	br	80eedc <__alt_mem_onchip_mem+0xff78eedc>
  80efb4:	813fd336 	bltu	r16,r4,80ef04 <__alt_mem_onchip_mem+0xff78ef04>
  80efb8:	1023883a 	mov	r17,r2
  80efbc:	003fa806 	br	80ee60 <__alt_mem_onchip_mem+0xff78ee60>
  80efc0:	b0ffd636 	bltu	r22,r3,80ef1c <__alt_mem_onchip_mem+0xff78ef1c>
  80efc4:	1011883a 	mov	r8,r2
  80efc8:	b0ff341e 	bne	r22,r3,80ec9c <__alt_mem_onchip_mem+0xff78ec9c>
  80efcc:	003f3406 	br	80eca0 <__alt_mem_onchip_mem+0xff78eca0>
  80efd0:	0005883a 	mov	r2,zero
  80efd4:	003fe006 	br	80ef58 <__alt_mem_onchip_mem+0xff78ef58>
  80efd8:	00800434 	movhi	r2,16
  80efdc:	89400234 	orhi	r5,r17,8
  80efe0:	10bfffc4 	addi	r2,r2,-1
  80efe4:	b807883a 	mov	r3,r23
  80efe8:	288a703a 	and	r5,r5,r2
  80efec:	4025883a 	mov	r18,r8
  80eff0:	003e8206 	br	80e9fc <__alt_mem_onchip_mem+0xff78e9fc>

0080eff4 <__eqdf2>:
  80eff4:	2804d53a 	srli	r2,r5,20
  80eff8:	3806d53a 	srli	r3,r7,20
  80effc:	02000434 	movhi	r8,16
  80f000:	423fffc4 	addi	r8,r8,-1
  80f004:	1081ffcc 	andi	r2,r2,2047
  80f008:	0281ffc4 	movi	r10,2047
  80f00c:	2a12703a 	and	r9,r5,r8
  80f010:	18c1ffcc 	andi	r3,r3,2047
  80f014:	3a10703a 	and	r8,r7,r8
  80f018:	280ad7fa 	srli	r5,r5,31
  80f01c:	380ed7fa 	srli	r7,r7,31
  80f020:	12801026 	beq	r2,r10,80f064 <__eqdf2+0x70>
  80f024:	0281ffc4 	movi	r10,2047
  80f028:	1a800a26 	beq	r3,r10,80f054 <__eqdf2+0x60>
  80f02c:	10c00226 	beq	r2,r3,80f038 <__eqdf2+0x44>
  80f030:	00800044 	movi	r2,1
  80f034:	f800283a 	ret
  80f038:	4a3ffd1e 	bne	r9,r8,80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f03c:	21bffc1e 	bne	r4,r6,80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f040:	29c00c26 	beq	r5,r7,80f074 <__eqdf2+0x80>
  80f044:	103ffa1e 	bne	r2,zero,80f030 <__alt_mem_onchip_mem+0xff78f030>
  80f048:	2244b03a 	or	r2,r4,r9
  80f04c:	1004c03a 	cmpne	r2,r2,zero
  80f050:	f800283a 	ret
  80f054:	3214b03a 	or	r10,r6,r8
  80f058:	503ff426 	beq	r10,zero,80f02c <__alt_mem_onchip_mem+0xff78f02c>
  80f05c:	00800044 	movi	r2,1
  80f060:	f800283a 	ret
  80f064:	2254b03a 	or	r10,r4,r9
  80f068:	503fee26 	beq	r10,zero,80f024 <__alt_mem_onchip_mem+0xff78f024>
  80f06c:	00800044 	movi	r2,1
  80f070:	f800283a 	ret
  80f074:	0005883a 	mov	r2,zero
  80f078:	f800283a 	ret

0080f07c <__gedf2>:
  80f07c:	2804d53a 	srli	r2,r5,20
  80f080:	3806d53a 	srli	r3,r7,20
  80f084:	02000434 	movhi	r8,16
  80f088:	423fffc4 	addi	r8,r8,-1
  80f08c:	1081ffcc 	andi	r2,r2,2047
  80f090:	0241ffc4 	movi	r9,2047
  80f094:	2a14703a 	and	r10,r5,r8
  80f098:	18c1ffcc 	andi	r3,r3,2047
  80f09c:	3a10703a 	and	r8,r7,r8
  80f0a0:	280ad7fa 	srli	r5,r5,31
  80f0a4:	380ed7fa 	srli	r7,r7,31
  80f0a8:	12401d26 	beq	r2,r9,80f120 <__gedf2+0xa4>
  80f0ac:	0241ffc4 	movi	r9,2047
  80f0b0:	1a401226 	beq	r3,r9,80f0fc <__gedf2+0x80>
  80f0b4:	1000081e 	bne	r2,zero,80f0d8 <__gedf2+0x5c>
  80f0b8:	2296b03a 	or	r11,r4,r10
  80f0bc:	5813003a 	cmpeq	r9,r11,zero
  80f0c0:	1800091e 	bne	r3,zero,80f0e8 <__gedf2+0x6c>
  80f0c4:	3218b03a 	or	r12,r6,r8
  80f0c8:	6000071e 	bne	r12,zero,80f0e8 <__gedf2+0x6c>
  80f0cc:	0005883a 	mov	r2,zero
  80f0d0:	5800101e 	bne	r11,zero,80f114 <__gedf2+0x98>
  80f0d4:	f800283a 	ret
  80f0d8:	18000c1e 	bne	r3,zero,80f10c <__gedf2+0x90>
  80f0dc:	3212b03a 	or	r9,r6,r8
  80f0e0:	48000c26 	beq	r9,zero,80f114 <__gedf2+0x98>
  80f0e4:	0013883a 	mov	r9,zero
  80f0e8:	39c03fcc 	andi	r7,r7,255
  80f0ec:	48000826 	beq	r9,zero,80f110 <__gedf2+0x94>
  80f0f0:	38000926 	beq	r7,zero,80f118 <__gedf2+0x9c>
  80f0f4:	00800044 	movi	r2,1
  80f0f8:	f800283a 	ret
  80f0fc:	3212b03a 	or	r9,r6,r8
  80f100:	483fec26 	beq	r9,zero,80f0b4 <__alt_mem_onchip_mem+0xff78f0b4>
  80f104:	00bfff84 	movi	r2,-2
  80f108:	f800283a 	ret
  80f10c:	39c03fcc 	andi	r7,r7,255
  80f110:	29c00626 	beq	r5,r7,80f12c <__gedf2+0xb0>
  80f114:	283ff726 	beq	r5,zero,80f0f4 <__alt_mem_onchip_mem+0xff78f0f4>
  80f118:	00bfffc4 	movi	r2,-1
  80f11c:	f800283a 	ret
  80f120:	2292b03a 	or	r9,r4,r10
  80f124:	483fe126 	beq	r9,zero,80f0ac <__alt_mem_onchip_mem+0xff78f0ac>
  80f128:	003ff606 	br	80f104 <__alt_mem_onchip_mem+0xff78f104>
  80f12c:	18bff916 	blt	r3,r2,80f114 <__alt_mem_onchip_mem+0xff78f114>
  80f130:	10c00316 	blt	r2,r3,80f140 <__gedf2+0xc4>
  80f134:	42bff736 	bltu	r8,r10,80f114 <__alt_mem_onchip_mem+0xff78f114>
  80f138:	52000326 	beq	r10,r8,80f148 <__gedf2+0xcc>
  80f13c:	5200042e 	bgeu	r10,r8,80f150 <__gedf2+0xd4>
  80f140:	283fec1e 	bne	r5,zero,80f0f4 <__alt_mem_onchip_mem+0xff78f0f4>
  80f144:	003ff406 	br	80f118 <__alt_mem_onchip_mem+0xff78f118>
  80f148:	313ff236 	bltu	r6,r4,80f114 <__alt_mem_onchip_mem+0xff78f114>
  80f14c:	21bffc36 	bltu	r4,r6,80f140 <__alt_mem_onchip_mem+0xff78f140>
  80f150:	0005883a 	mov	r2,zero
  80f154:	f800283a 	ret

0080f158 <__ledf2>:
  80f158:	2804d53a 	srli	r2,r5,20
  80f15c:	3810d53a 	srli	r8,r7,20
  80f160:	00c00434 	movhi	r3,16
  80f164:	18ffffc4 	addi	r3,r3,-1
  80f168:	1081ffcc 	andi	r2,r2,2047
  80f16c:	0241ffc4 	movi	r9,2047
  80f170:	28d4703a 	and	r10,r5,r3
  80f174:	4201ffcc 	andi	r8,r8,2047
  80f178:	38c6703a 	and	r3,r7,r3
  80f17c:	280ad7fa 	srli	r5,r5,31
  80f180:	380ed7fa 	srli	r7,r7,31
  80f184:	12401f26 	beq	r2,r9,80f204 <__ledf2+0xac>
  80f188:	0241ffc4 	movi	r9,2047
  80f18c:	42401426 	beq	r8,r9,80f1e0 <__ledf2+0x88>
  80f190:	1000091e 	bne	r2,zero,80f1b8 <__ledf2+0x60>
  80f194:	2296b03a 	or	r11,r4,r10
  80f198:	5813003a 	cmpeq	r9,r11,zero
  80f19c:	29403fcc 	andi	r5,r5,255
  80f1a0:	40000a1e 	bne	r8,zero,80f1cc <__ledf2+0x74>
  80f1a4:	30d8b03a 	or	r12,r6,r3
  80f1a8:	6000081e 	bne	r12,zero,80f1cc <__ledf2+0x74>
  80f1ac:	0005883a 	mov	r2,zero
  80f1b0:	5800111e 	bne	r11,zero,80f1f8 <__ledf2+0xa0>
  80f1b4:	f800283a 	ret
  80f1b8:	29403fcc 	andi	r5,r5,255
  80f1bc:	40000c1e 	bne	r8,zero,80f1f0 <__ledf2+0x98>
  80f1c0:	30d2b03a 	or	r9,r6,r3
  80f1c4:	48000c26 	beq	r9,zero,80f1f8 <__ledf2+0xa0>
  80f1c8:	0013883a 	mov	r9,zero
  80f1cc:	39c03fcc 	andi	r7,r7,255
  80f1d0:	48000826 	beq	r9,zero,80f1f4 <__ledf2+0x9c>
  80f1d4:	38001126 	beq	r7,zero,80f21c <__ledf2+0xc4>
  80f1d8:	00800044 	movi	r2,1
  80f1dc:	f800283a 	ret
  80f1e0:	30d2b03a 	or	r9,r6,r3
  80f1e4:	483fea26 	beq	r9,zero,80f190 <__alt_mem_onchip_mem+0xff78f190>
  80f1e8:	00800084 	movi	r2,2
  80f1ec:	f800283a 	ret
  80f1f0:	39c03fcc 	andi	r7,r7,255
  80f1f4:	39400726 	beq	r7,r5,80f214 <__ledf2+0xbc>
  80f1f8:	2800081e 	bne	r5,zero,80f21c <__ledf2+0xc4>
  80f1fc:	00800044 	movi	r2,1
  80f200:	f800283a 	ret
  80f204:	2292b03a 	or	r9,r4,r10
  80f208:	483fdf26 	beq	r9,zero,80f188 <__alt_mem_onchip_mem+0xff78f188>
  80f20c:	00800084 	movi	r2,2
  80f210:	f800283a 	ret
  80f214:	4080030e 	bge	r8,r2,80f224 <__ledf2+0xcc>
  80f218:	383fef26 	beq	r7,zero,80f1d8 <__alt_mem_onchip_mem+0xff78f1d8>
  80f21c:	00bfffc4 	movi	r2,-1
  80f220:	f800283a 	ret
  80f224:	123feb16 	blt	r2,r8,80f1d4 <__alt_mem_onchip_mem+0xff78f1d4>
  80f228:	1abff336 	bltu	r3,r10,80f1f8 <__alt_mem_onchip_mem+0xff78f1f8>
  80f22c:	50c00326 	beq	r10,r3,80f23c <__ledf2+0xe4>
  80f230:	50c0042e 	bgeu	r10,r3,80f244 <__ledf2+0xec>
  80f234:	283fe81e 	bne	r5,zero,80f1d8 <__alt_mem_onchip_mem+0xff78f1d8>
  80f238:	003ff806 	br	80f21c <__alt_mem_onchip_mem+0xff78f21c>
  80f23c:	313fee36 	bltu	r6,r4,80f1f8 <__alt_mem_onchip_mem+0xff78f1f8>
  80f240:	21bffc36 	bltu	r4,r6,80f234 <__alt_mem_onchip_mem+0xff78f234>
  80f244:	0005883a 	mov	r2,zero
  80f248:	f800283a 	ret

0080f24c <__muldf3>:
  80f24c:	defff304 	addi	sp,sp,-52
  80f250:	2804d53a 	srli	r2,r5,20
  80f254:	dd800915 	stw	r22,36(sp)
  80f258:	282cd7fa 	srli	r22,r5,31
  80f25c:	dc000315 	stw	r16,12(sp)
  80f260:	04000434 	movhi	r16,16
  80f264:	dd400815 	stw	r21,32(sp)
  80f268:	dc800515 	stw	r18,20(sp)
  80f26c:	843fffc4 	addi	r16,r16,-1
  80f270:	dfc00c15 	stw	ra,48(sp)
  80f274:	df000b15 	stw	fp,44(sp)
  80f278:	ddc00a15 	stw	r23,40(sp)
  80f27c:	dd000715 	stw	r20,28(sp)
  80f280:	dcc00615 	stw	r19,24(sp)
  80f284:	dc400415 	stw	r17,16(sp)
  80f288:	1481ffcc 	andi	r18,r2,2047
  80f28c:	2c20703a 	and	r16,r5,r16
  80f290:	b02b883a 	mov	r21,r22
  80f294:	b2403fcc 	andi	r9,r22,255
  80f298:	90006026 	beq	r18,zero,80f41c <__muldf3+0x1d0>
  80f29c:	0081ffc4 	movi	r2,2047
  80f2a0:	2029883a 	mov	r20,r4
  80f2a4:	90803626 	beq	r18,r2,80f380 <__muldf3+0x134>
  80f2a8:	80800434 	orhi	r2,r16,16
  80f2ac:	100490fa 	slli	r2,r2,3
  80f2b0:	2020d77a 	srli	r16,r4,29
  80f2b4:	202890fa 	slli	r20,r4,3
  80f2b8:	94bf0044 	addi	r18,r18,-1023
  80f2bc:	80a0b03a 	or	r16,r16,r2
  80f2c0:	0027883a 	mov	r19,zero
  80f2c4:	0039883a 	mov	fp,zero
  80f2c8:	3804d53a 	srli	r2,r7,20
  80f2cc:	382ed7fa 	srli	r23,r7,31
  80f2d0:	04400434 	movhi	r17,16
  80f2d4:	8c7fffc4 	addi	r17,r17,-1
  80f2d8:	1081ffcc 	andi	r2,r2,2047
  80f2dc:	3011883a 	mov	r8,r6
  80f2e0:	3c62703a 	and	r17,r7,r17
  80f2e4:	ba803fcc 	andi	r10,r23,255
  80f2e8:	10006d26 	beq	r2,zero,80f4a0 <__muldf3+0x254>
  80f2ec:	00c1ffc4 	movi	r3,2047
  80f2f0:	10c06526 	beq	r2,r3,80f488 <__muldf3+0x23c>
  80f2f4:	88c00434 	orhi	r3,r17,16
  80f2f8:	180690fa 	slli	r3,r3,3
  80f2fc:	3022d77a 	srli	r17,r6,29
  80f300:	301090fa 	slli	r8,r6,3
  80f304:	10bf0044 	addi	r2,r2,-1023
  80f308:	88e2b03a 	or	r17,r17,r3
  80f30c:	000b883a 	mov	r5,zero
  80f310:	9085883a 	add	r2,r18,r2
  80f314:	2cc8b03a 	or	r4,r5,r19
  80f318:	00c003c4 	movi	r3,15
  80f31c:	bdacf03a 	xor	r22,r23,r22
  80f320:	12c00044 	addi	r11,r2,1
  80f324:	19009936 	bltu	r3,r4,80f58c <__muldf3+0x340>
  80f328:	200890ba 	slli	r4,r4,2
  80f32c:	00c02074 	movhi	r3,129
  80f330:	18fcd004 	addi	r3,r3,-3264
  80f334:	20c9883a 	add	r4,r4,r3
  80f338:	20c00017 	ldw	r3,0(r4)
  80f33c:	1800683a 	jmp	r3
  80f340:	0080f58c 	andi	r2,zero,982
  80f344:	0080f3a0 	cmpeqi	r2,zero,974
  80f348:	0080f3a0 	cmpeqi	r2,zero,974
  80f34c:	0080f39c 	xori	r2,zero,974
  80f350:	0080f568 	cmpgeui	r2,zero,981
  80f354:	0080f568 	cmpgeui	r2,zero,981
  80f358:	0080f550 	cmplti	r2,zero,981
  80f35c:	0080f39c 	xori	r2,zero,974
  80f360:	0080f568 	cmpgeui	r2,zero,981
  80f364:	0080f550 	cmplti	r2,zero,981
  80f368:	0080f568 	cmpgeui	r2,zero,981
  80f36c:	0080f39c 	xori	r2,zero,974
  80f370:	0080f578 	rdprs	r2,zero,981
  80f374:	0080f578 	rdprs	r2,zero,981
  80f378:	0080f578 	rdprs	r2,zero,981
  80f37c:	0080f794 	movui	r2,990
  80f380:	2404b03a 	or	r2,r4,r16
  80f384:	10006f1e 	bne	r2,zero,80f544 <__muldf3+0x2f8>
  80f388:	04c00204 	movi	r19,8
  80f38c:	0021883a 	mov	r16,zero
  80f390:	0029883a 	mov	r20,zero
  80f394:	07000084 	movi	fp,2
  80f398:	003fcb06 	br	80f2c8 <__alt_mem_onchip_mem+0xff78f2c8>
  80f39c:	502d883a 	mov	r22,r10
  80f3a0:	00800084 	movi	r2,2
  80f3a4:	28805726 	beq	r5,r2,80f504 <__muldf3+0x2b8>
  80f3a8:	008000c4 	movi	r2,3
  80f3ac:	28816626 	beq	r5,r2,80f948 <__muldf3+0x6fc>
  80f3b0:	00800044 	movi	r2,1
  80f3b4:	2881411e 	bne	r5,r2,80f8bc <__muldf3+0x670>
  80f3b8:	b02b883a 	mov	r21,r22
  80f3bc:	0005883a 	mov	r2,zero
  80f3c0:	000b883a 	mov	r5,zero
  80f3c4:	0029883a 	mov	r20,zero
  80f3c8:	1004953a 	slli	r2,r2,20
  80f3cc:	a8c03fcc 	andi	r3,r21,255
  80f3d0:	04400434 	movhi	r17,16
  80f3d4:	8c7fffc4 	addi	r17,r17,-1
  80f3d8:	180697fa 	slli	r3,r3,31
  80f3dc:	2c4a703a 	and	r5,r5,r17
  80f3e0:	288ab03a 	or	r5,r5,r2
  80f3e4:	28c6b03a 	or	r3,r5,r3
  80f3e8:	a005883a 	mov	r2,r20
  80f3ec:	dfc00c17 	ldw	ra,48(sp)
  80f3f0:	df000b17 	ldw	fp,44(sp)
  80f3f4:	ddc00a17 	ldw	r23,40(sp)
  80f3f8:	dd800917 	ldw	r22,36(sp)
  80f3fc:	dd400817 	ldw	r21,32(sp)
  80f400:	dd000717 	ldw	r20,28(sp)
  80f404:	dcc00617 	ldw	r19,24(sp)
  80f408:	dc800517 	ldw	r18,20(sp)
  80f40c:	dc400417 	ldw	r17,16(sp)
  80f410:	dc000317 	ldw	r16,12(sp)
  80f414:	dec00d04 	addi	sp,sp,52
  80f418:	f800283a 	ret
  80f41c:	2404b03a 	or	r2,r4,r16
  80f420:	2027883a 	mov	r19,r4
  80f424:	10004226 	beq	r2,zero,80f530 <__muldf3+0x2e4>
  80f428:	8000fc26 	beq	r16,zero,80f81c <__muldf3+0x5d0>
  80f42c:	8009883a 	mov	r4,r16
  80f430:	d9800215 	stw	r6,8(sp)
  80f434:	d9c00015 	stw	r7,0(sp)
  80f438:	da400115 	stw	r9,4(sp)
  80f43c:	08104640 	call	810464 <__clzsi2>
  80f440:	d9800217 	ldw	r6,8(sp)
  80f444:	d9c00017 	ldw	r7,0(sp)
  80f448:	da400117 	ldw	r9,4(sp)
  80f44c:	113ffd44 	addi	r4,r2,-11
  80f450:	00c00704 	movi	r3,28
  80f454:	1900ed16 	blt	r3,r4,80f80c <__muldf3+0x5c0>
  80f458:	00c00744 	movi	r3,29
  80f45c:	147ffe04 	addi	r17,r2,-8
  80f460:	1907c83a 	sub	r3,r3,r4
  80f464:	8460983a 	sll	r16,r16,r17
  80f468:	98c6d83a 	srl	r3,r19,r3
  80f46c:	9c68983a 	sll	r20,r19,r17
  80f470:	1c20b03a 	or	r16,r3,r16
  80f474:	1080fcc4 	addi	r2,r2,1011
  80f478:	00a5c83a 	sub	r18,zero,r2
  80f47c:	0027883a 	mov	r19,zero
  80f480:	0039883a 	mov	fp,zero
  80f484:	003f9006 	br	80f2c8 <__alt_mem_onchip_mem+0xff78f2c8>
  80f488:	3446b03a 	or	r3,r6,r17
  80f48c:	1800261e 	bne	r3,zero,80f528 <__muldf3+0x2dc>
  80f490:	0023883a 	mov	r17,zero
  80f494:	0011883a 	mov	r8,zero
  80f498:	01400084 	movi	r5,2
  80f49c:	003f9c06 	br	80f310 <__alt_mem_onchip_mem+0xff78f310>
  80f4a0:	3446b03a 	or	r3,r6,r17
  80f4a4:	18001c26 	beq	r3,zero,80f518 <__muldf3+0x2cc>
  80f4a8:	8800ce26 	beq	r17,zero,80f7e4 <__muldf3+0x598>
  80f4ac:	8809883a 	mov	r4,r17
  80f4b0:	d9800215 	stw	r6,8(sp)
  80f4b4:	da400115 	stw	r9,4(sp)
  80f4b8:	da800015 	stw	r10,0(sp)
  80f4bc:	08104640 	call	810464 <__clzsi2>
  80f4c0:	d9800217 	ldw	r6,8(sp)
  80f4c4:	da400117 	ldw	r9,4(sp)
  80f4c8:	da800017 	ldw	r10,0(sp)
  80f4cc:	113ffd44 	addi	r4,r2,-11
  80f4d0:	00c00704 	movi	r3,28
  80f4d4:	1900bf16 	blt	r3,r4,80f7d4 <__muldf3+0x588>
  80f4d8:	00c00744 	movi	r3,29
  80f4dc:	123ffe04 	addi	r8,r2,-8
  80f4e0:	1907c83a 	sub	r3,r3,r4
  80f4e4:	8a22983a 	sll	r17,r17,r8
  80f4e8:	30c6d83a 	srl	r3,r6,r3
  80f4ec:	3210983a 	sll	r8,r6,r8
  80f4f0:	1c62b03a 	or	r17,r3,r17
  80f4f4:	1080fcc4 	addi	r2,r2,1011
  80f4f8:	0085c83a 	sub	r2,zero,r2
  80f4fc:	000b883a 	mov	r5,zero
  80f500:	003f8306 	br	80f310 <__alt_mem_onchip_mem+0xff78f310>
  80f504:	b02b883a 	mov	r21,r22
  80f508:	0081ffc4 	movi	r2,2047
  80f50c:	000b883a 	mov	r5,zero
  80f510:	0029883a 	mov	r20,zero
  80f514:	003fac06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f518:	0023883a 	mov	r17,zero
  80f51c:	0011883a 	mov	r8,zero
  80f520:	01400044 	movi	r5,1
  80f524:	003f7a06 	br	80f310 <__alt_mem_onchip_mem+0xff78f310>
  80f528:	014000c4 	movi	r5,3
  80f52c:	003f7806 	br	80f310 <__alt_mem_onchip_mem+0xff78f310>
  80f530:	04c00104 	movi	r19,4
  80f534:	0021883a 	mov	r16,zero
  80f538:	0029883a 	mov	r20,zero
  80f53c:	07000044 	movi	fp,1
  80f540:	003f6106 	br	80f2c8 <__alt_mem_onchip_mem+0xff78f2c8>
  80f544:	04c00304 	movi	r19,12
  80f548:	070000c4 	movi	fp,3
  80f54c:	003f5e06 	br	80f2c8 <__alt_mem_onchip_mem+0xff78f2c8>
  80f550:	01400434 	movhi	r5,16
  80f554:	002b883a 	mov	r21,zero
  80f558:	297fffc4 	addi	r5,r5,-1
  80f55c:	053fffc4 	movi	r20,-1
  80f560:	0081ffc4 	movi	r2,2047
  80f564:	003f9806 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f568:	8023883a 	mov	r17,r16
  80f56c:	a011883a 	mov	r8,r20
  80f570:	e00b883a 	mov	r5,fp
  80f574:	003f8a06 	br	80f3a0 <__alt_mem_onchip_mem+0xff78f3a0>
  80f578:	8023883a 	mov	r17,r16
  80f57c:	a011883a 	mov	r8,r20
  80f580:	482d883a 	mov	r22,r9
  80f584:	e00b883a 	mov	r5,fp
  80f588:	003f8506 	br	80f3a0 <__alt_mem_onchip_mem+0xff78f3a0>
  80f58c:	a00ad43a 	srli	r5,r20,16
  80f590:	401ad43a 	srli	r13,r8,16
  80f594:	a53fffcc 	andi	r20,r20,65535
  80f598:	423fffcc 	andi	r8,r8,65535
  80f59c:	4519383a 	mul	r12,r8,r20
  80f5a0:	4147383a 	mul	r3,r8,r5
  80f5a4:	6d09383a 	mul	r4,r13,r20
  80f5a8:	600cd43a 	srli	r6,r12,16
  80f5ac:	2b5d383a 	mul	r14,r5,r13
  80f5b0:	20c9883a 	add	r4,r4,r3
  80f5b4:	310d883a 	add	r6,r6,r4
  80f5b8:	30c0022e 	bgeu	r6,r3,80f5c4 <__muldf3+0x378>
  80f5bc:	00c00074 	movhi	r3,1
  80f5c0:	70dd883a 	add	r14,r14,r3
  80f5c4:	8826d43a 	srli	r19,r17,16
  80f5c8:	8bffffcc 	andi	r15,r17,65535
  80f5cc:	7d23383a 	mul	r17,r15,r20
  80f5d0:	7949383a 	mul	r4,r15,r5
  80f5d4:	9d29383a 	mul	r20,r19,r20
  80f5d8:	8814d43a 	srli	r10,r17,16
  80f5dc:	3012943a 	slli	r9,r6,16
  80f5e0:	a129883a 	add	r20,r20,r4
  80f5e4:	633fffcc 	andi	r12,r12,65535
  80f5e8:	5515883a 	add	r10,r10,r20
  80f5ec:	3006d43a 	srli	r3,r6,16
  80f5f0:	4b13883a 	add	r9,r9,r12
  80f5f4:	2ccb383a 	mul	r5,r5,r19
  80f5f8:	5100022e 	bgeu	r10,r4,80f604 <__muldf3+0x3b8>
  80f5fc:	01000074 	movhi	r4,1
  80f600:	290b883a 	add	r5,r5,r4
  80f604:	802ad43a 	srli	r21,r16,16
  80f608:	843fffcc 	andi	r16,r16,65535
  80f60c:	440d383a 	mul	r6,r8,r16
  80f610:	4565383a 	mul	r18,r8,r21
  80f614:	8349383a 	mul	r4,r16,r13
  80f618:	500e943a 	slli	r7,r10,16
  80f61c:	3010d43a 	srli	r8,r6,16
  80f620:	5028d43a 	srli	r20,r10,16
  80f624:	2489883a 	add	r4,r4,r18
  80f628:	8abfffcc 	andi	r10,r17,65535
  80f62c:	3a95883a 	add	r10,r7,r10
  80f630:	4119883a 	add	r12,r8,r4
  80f634:	a169883a 	add	r20,r20,r5
  80f638:	1a87883a 	add	r3,r3,r10
  80f63c:	6d5b383a 	mul	r13,r13,r21
  80f640:	6480022e 	bgeu	r12,r18,80f64c <__muldf3+0x400>
  80f644:	01000074 	movhi	r4,1
  80f648:	691b883a 	add	r13,r13,r4
  80f64c:	7c25383a 	mul	r18,r15,r16
  80f650:	7d4b383a 	mul	r5,r15,r21
  80f654:	84cf383a 	mul	r7,r16,r19
  80f658:	901ed43a 	srli	r15,r18,16
  80f65c:	6008d43a 	srli	r4,r12,16
  80f660:	6010943a 	slli	r8,r12,16
  80f664:	394f883a 	add	r7,r7,r5
  80f668:	333fffcc 	andi	r12,r6,65535
  80f66c:	79df883a 	add	r15,r15,r7
  80f670:	235b883a 	add	r13,r4,r13
  80f674:	9d63383a 	mul	r17,r19,r21
  80f678:	4309883a 	add	r4,r8,r12
  80f67c:	7940022e 	bgeu	r15,r5,80f688 <__muldf3+0x43c>
  80f680:	01400074 	movhi	r5,1
  80f684:	8963883a 	add	r17,r17,r5
  80f688:	780a943a 	slli	r5,r15,16
  80f68c:	91bfffcc 	andi	r6,r18,65535
  80f690:	70c7883a 	add	r3,r14,r3
  80f694:	298d883a 	add	r6,r5,r6
  80f698:	1a8f803a 	cmpltu	r7,r3,r10
  80f69c:	350b883a 	add	r5,r6,r20
  80f6a0:	20c7883a 	add	r3,r4,r3
  80f6a4:	3955883a 	add	r10,r7,r5
  80f6a8:	1909803a 	cmpltu	r4,r3,r4
  80f6ac:	6a91883a 	add	r8,r13,r10
  80f6b0:	780cd43a 	srli	r6,r15,16
  80f6b4:	2219883a 	add	r12,r4,r8
  80f6b8:	2d0b803a 	cmpltu	r5,r5,r20
  80f6bc:	51cf803a 	cmpltu	r7,r10,r7
  80f6c0:	29ceb03a 	or	r7,r5,r7
  80f6c4:	4351803a 	cmpltu	r8,r8,r13
  80f6c8:	610b803a 	cmpltu	r5,r12,r4
  80f6cc:	4148b03a 	or	r4,r8,r5
  80f6d0:	398f883a 	add	r7,r7,r6
  80f6d4:	3909883a 	add	r4,r7,r4
  80f6d8:	1810927a 	slli	r8,r3,9
  80f6dc:	2449883a 	add	r4,r4,r17
  80f6e0:	2008927a 	slli	r4,r4,9
  80f6e4:	6022d5fa 	srli	r17,r12,23
  80f6e8:	1806d5fa 	srli	r3,r3,23
  80f6ec:	4252b03a 	or	r9,r8,r9
  80f6f0:	600a927a 	slli	r5,r12,9
  80f6f4:	4810c03a 	cmpne	r8,r9,zero
  80f6f8:	2462b03a 	or	r17,r4,r17
  80f6fc:	40c6b03a 	or	r3,r8,r3
  80f700:	8900402c 	andhi	r4,r17,256
  80f704:	1950b03a 	or	r8,r3,r5
  80f708:	20000726 	beq	r4,zero,80f728 <__muldf3+0x4dc>
  80f70c:	4006d07a 	srli	r3,r8,1
  80f710:	880497fa 	slli	r2,r17,31
  80f714:	4200004c 	andi	r8,r8,1
  80f718:	8822d07a 	srli	r17,r17,1
  80f71c:	1a10b03a 	or	r8,r3,r8
  80f720:	1210b03a 	or	r8,r2,r8
  80f724:	5805883a 	mov	r2,r11
  80f728:	1140ffc4 	addi	r5,r2,1023
  80f72c:	0140440e 	bge	zero,r5,80f840 <__muldf3+0x5f4>
  80f730:	40c001cc 	andi	r3,r8,7
  80f734:	18000726 	beq	r3,zero,80f754 <__muldf3+0x508>
  80f738:	40c003cc 	andi	r3,r8,15
  80f73c:	01000104 	movi	r4,4
  80f740:	19000426 	beq	r3,r4,80f754 <__muldf3+0x508>
  80f744:	4107883a 	add	r3,r8,r4
  80f748:	1a11803a 	cmpltu	r8,r3,r8
  80f74c:	8a23883a 	add	r17,r17,r8
  80f750:	1811883a 	mov	r8,r3
  80f754:	88c0402c 	andhi	r3,r17,256
  80f758:	18000426 	beq	r3,zero,80f76c <__muldf3+0x520>
  80f75c:	11410004 	addi	r5,r2,1024
  80f760:	00bfc034 	movhi	r2,65280
  80f764:	10bfffc4 	addi	r2,r2,-1
  80f768:	88a2703a 	and	r17,r17,r2
  80f76c:	0081ff84 	movi	r2,2046
  80f770:	117f6416 	blt	r2,r5,80f504 <__alt_mem_onchip_mem+0xff78f504>
  80f774:	8828977a 	slli	r20,r17,29
  80f778:	4010d0fa 	srli	r8,r8,3
  80f77c:	8822927a 	slli	r17,r17,9
  80f780:	2881ffcc 	andi	r2,r5,2047
  80f784:	a228b03a 	or	r20,r20,r8
  80f788:	880ad33a 	srli	r5,r17,12
  80f78c:	b02b883a 	mov	r21,r22
  80f790:	003f0d06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f794:	8080022c 	andhi	r2,r16,8
  80f798:	10000926 	beq	r2,zero,80f7c0 <__muldf3+0x574>
  80f79c:	8880022c 	andhi	r2,r17,8
  80f7a0:	1000071e 	bne	r2,zero,80f7c0 <__muldf3+0x574>
  80f7a4:	00800434 	movhi	r2,16
  80f7a8:	89400234 	orhi	r5,r17,8
  80f7ac:	10bfffc4 	addi	r2,r2,-1
  80f7b0:	b82b883a 	mov	r21,r23
  80f7b4:	288a703a 	and	r5,r5,r2
  80f7b8:	4029883a 	mov	r20,r8
  80f7bc:	003f6806 	br	80f560 <__alt_mem_onchip_mem+0xff78f560>
  80f7c0:	00800434 	movhi	r2,16
  80f7c4:	81400234 	orhi	r5,r16,8
  80f7c8:	10bfffc4 	addi	r2,r2,-1
  80f7cc:	288a703a 	and	r5,r5,r2
  80f7d0:	003f6306 	br	80f560 <__alt_mem_onchip_mem+0xff78f560>
  80f7d4:	147ff604 	addi	r17,r2,-40
  80f7d8:	3462983a 	sll	r17,r6,r17
  80f7dc:	0011883a 	mov	r8,zero
  80f7e0:	003f4406 	br	80f4f4 <__alt_mem_onchip_mem+0xff78f4f4>
  80f7e4:	3009883a 	mov	r4,r6
  80f7e8:	d9800215 	stw	r6,8(sp)
  80f7ec:	da400115 	stw	r9,4(sp)
  80f7f0:	da800015 	stw	r10,0(sp)
  80f7f4:	08104640 	call	810464 <__clzsi2>
  80f7f8:	10800804 	addi	r2,r2,32
  80f7fc:	da800017 	ldw	r10,0(sp)
  80f800:	da400117 	ldw	r9,4(sp)
  80f804:	d9800217 	ldw	r6,8(sp)
  80f808:	003f3006 	br	80f4cc <__alt_mem_onchip_mem+0xff78f4cc>
  80f80c:	143ff604 	addi	r16,r2,-40
  80f810:	9c20983a 	sll	r16,r19,r16
  80f814:	0029883a 	mov	r20,zero
  80f818:	003f1606 	br	80f474 <__alt_mem_onchip_mem+0xff78f474>
  80f81c:	d9800215 	stw	r6,8(sp)
  80f820:	d9c00015 	stw	r7,0(sp)
  80f824:	da400115 	stw	r9,4(sp)
  80f828:	08104640 	call	810464 <__clzsi2>
  80f82c:	10800804 	addi	r2,r2,32
  80f830:	da400117 	ldw	r9,4(sp)
  80f834:	d9c00017 	ldw	r7,0(sp)
  80f838:	d9800217 	ldw	r6,8(sp)
  80f83c:	003f0306 	br	80f44c <__alt_mem_onchip_mem+0xff78f44c>
  80f840:	00c00044 	movi	r3,1
  80f844:	1947c83a 	sub	r3,r3,r5
  80f848:	00800e04 	movi	r2,56
  80f84c:	10feda16 	blt	r2,r3,80f3b8 <__alt_mem_onchip_mem+0xff78f3b8>
  80f850:	008007c4 	movi	r2,31
  80f854:	10c01b16 	blt	r2,r3,80f8c4 <__muldf3+0x678>
  80f858:	00800804 	movi	r2,32
  80f85c:	10c5c83a 	sub	r2,r2,r3
  80f860:	888a983a 	sll	r5,r17,r2
  80f864:	40c8d83a 	srl	r4,r8,r3
  80f868:	4084983a 	sll	r2,r8,r2
  80f86c:	88e2d83a 	srl	r17,r17,r3
  80f870:	2906b03a 	or	r3,r5,r4
  80f874:	1004c03a 	cmpne	r2,r2,zero
  80f878:	1886b03a 	or	r3,r3,r2
  80f87c:	188001cc 	andi	r2,r3,7
  80f880:	10000726 	beq	r2,zero,80f8a0 <__muldf3+0x654>
  80f884:	188003cc 	andi	r2,r3,15
  80f888:	01000104 	movi	r4,4
  80f88c:	11000426 	beq	r2,r4,80f8a0 <__muldf3+0x654>
  80f890:	1805883a 	mov	r2,r3
  80f894:	10c00104 	addi	r3,r2,4
  80f898:	1885803a 	cmpltu	r2,r3,r2
  80f89c:	88a3883a 	add	r17,r17,r2
  80f8a0:	8880202c 	andhi	r2,r17,128
  80f8a4:	10001c26 	beq	r2,zero,80f918 <__muldf3+0x6cc>
  80f8a8:	b02b883a 	mov	r21,r22
  80f8ac:	00800044 	movi	r2,1
  80f8b0:	000b883a 	mov	r5,zero
  80f8b4:	0029883a 	mov	r20,zero
  80f8b8:	003ec306 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f8bc:	5805883a 	mov	r2,r11
  80f8c0:	003f9906 	br	80f728 <__alt_mem_onchip_mem+0xff78f728>
  80f8c4:	00bff844 	movi	r2,-31
  80f8c8:	1145c83a 	sub	r2,r2,r5
  80f8cc:	8888d83a 	srl	r4,r17,r2
  80f8d0:	00800804 	movi	r2,32
  80f8d4:	18801a26 	beq	r3,r2,80f940 <__muldf3+0x6f4>
  80f8d8:	00801004 	movi	r2,64
  80f8dc:	10c5c83a 	sub	r2,r2,r3
  80f8e0:	8884983a 	sll	r2,r17,r2
  80f8e4:	1204b03a 	or	r2,r2,r8
  80f8e8:	1004c03a 	cmpne	r2,r2,zero
  80f8ec:	2084b03a 	or	r2,r4,r2
  80f8f0:	144001cc 	andi	r17,r2,7
  80f8f4:	88000d1e 	bne	r17,zero,80f92c <__muldf3+0x6e0>
  80f8f8:	000b883a 	mov	r5,zero
  80f8fc:	1028d0fa 	srli	r20,r2,3
  80f900:	b02b883a 	mov	r21,r22
  80f904:	0005883a 	mov	r2,zero
  80f908:	a468b03a 	or	r20,r20,r17
  80f90c:	003eae06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f910:	1007883a 	mov	r3,r2
  80f914:	0023883a 	mov	r17,zero
  80f918:	880a927a 	slli	r5,r17,9
  80f91c:	1805883a 	mov	r2,r3
  80f920:	8822977a 	slli	r17,r17,29
  80f924:	280ad33a 	srli	r5,r5,12
  80f928:	003ff406 	br	80f8fc <__alt_mem_onchip_mem+0xff78f8fc>
  80f92c:	10c003cc 	andi	r3,r2,15
  80f930:	01000104 	movi	r4,4
  80f934:	193ff626 	beq	r3,r4,80f910 <__alt_mem_onchip_mem+0xff78f910>
  80f938:	0023883a 	mov	r17,zero
  80f93c:	003fd506 	br	80f894 <__alt_mem_onchip_mem+0xff78f894>
  80f940:	0005883a 	mov	r2,zero
  80f944:	003fe706 	br	80f8e4 <__alt_mem_onchip_mem+0xff78f8e4>
  80f948:	00800434 	movhi	r2,16
  80f94c:	89400234 	orhi	r5,r17,8
  80f950:	10bfffc4 	addi	r2,r2,-1
  80f954:	b02b883a 	mov	r21,r22
  80f958:	288a703a 	and	r5,r5,r2
  80f95c:	4029883a 	mov	r20,r8
  80f960:	003eff06 	br	80f560 <__alt_mem_onchip_mem+0xff78f560>

0080f964 <__subdf3>:
  80f964:	02000434 	movhi	r8,16
  80f968:	423fffc4 	addi	r8,r8,-1
  80f96c:	defffb04 	addi	sp,sp,-20
  80f970:	2a14703a 	and	r10,r5,r8
  80f974:	3812d53a 	srli	r9,r7,20
  80f978:	3a10703a 	and	r8,r7,r8
  80f97c:	2006d77a 	srli	r3,r4,29
  80f980:	3004d77a 	srli	r2,r6,29
  80f984:	dc000015 	stw	r16,0(sp)
  80f988:	501490fa 	slli	r10,r10,3
  80f98c:	2820d53a 	srli	r16,r5,20
  80f990:	401090fa 	slli	r8,r8,3
  80f994:	dc800215 	stw	r18,8(sp)
  80f998:	dc400115 	stw	r17,4(sp)
  80f99c:	dfc00415 	stw	ra,16(sp)
  80f9a0:	202290fa 	slli	r17,r4,3
  80f9a4:	dcc00315 	stw	r19,12(sp)
  80f9a8:	4a41ffcc 	andi	r9,r9,2047
  80f9ac:	0101ffc4 	movi	r4,2047
  80f9b0:	2824d7fa 	srli	r18,r5,31
  80f9b4:	8401ffcc 	andi	r16,r16,2047
  80f9b8:	50c6b03a 	or	r3,r10,r3
  80f9bc:	380ed7fa 	srli	r7,r7,31
  80f9c0:	408ab03a 	or	r5,r8,r2
  80f9c4:	300c90fa 	slli	r6,r6,3
  80f9c8:	49009626 	beq	r9,r4,80fc24 <__subdf3+0x2c0>
  80f9cc:	39c0005c 	xori	r7,r7,1
  80f9d0:	8245c83a 	sub	r2,r16,r9
  80f9d4:	3c807426 	beq	r7,r18,80fba8 <__subdf3+0x244>
  80f9d8:	0080af0e 	bge	zero,r2,80fc98 <__subdf3+0x334>
  80f9dc:	48002a1e 	bne	r9,zero,80fa88 <__subdf3+0x124>
  80f9e0:	2988b03a 	or	r4,r5,r6
  80f9e4:	20009a1e 	bne	r4,zero,80fc50 <__subdf3+0x2ec>
  80f9e8:	888001cc 	andi	r2,r17,7
  80f9ec:	10000726 	beq	r2,zero,80fa0c <__subdf3+0xa8>
  80f9f0:	888003cc 	andi	r2,r17,15
  80f9f4:	01000104 	movi	r4,4
  80f9f8:	11000426 	beq	r2,r4,80fa0c <__subdf3+0xa8>
  80f9fc:	890b883a 	add	r5,r17,r4
  80fa00:	2c63803a 	cmpltu	r17,r5,r17
  80fa04:	1c47883a 	add	r3,r3,r17
  80fa08:	2823883a 	mov	r17,r5
  80fa0c:	1880202c 	andhi	r2,r3,128
  80fa10:	10005926 	beq	r2,zero,80fb78 <__subdf3+0x214>
  80fa14:	84000044 	addi	r16,r16,1
  80fa18:	0081ffc4 	movi	r2,2047
  80fa1c:	8080be26 	beq	r16,r2,80fd18 <__subdf3+0x3b4>
  80fa20:	017fe034 	movhi	r5,65408
  80fa24:	297fffc4 	addi	r5,r5,-1
  80fa28:	1946703a 	and	r3,r3,r5
  80fa2c:	1804977a 	slli	r2,r3,29
  80fa30:	1806927a 	slli	r3,r3,9
  80fa34:	8822d0fa 	srli	r17,r17,3
  80fa38:	8401ffcc 	andi	r16,r16,2047
  80fa3c:	180ad33a 	srli	r5,r3,12
  80fa40:	9100004c 	andi	r4,r18,1
  80fa44:	1444b03a 	or	r2,r2,r17
  80fa48:	80c1ffcc 	andi	r3,r16,2047
  80fa4c:	1820953a 	slli	r16,r3,20
  80fa50:	20c03fcc 	andi	r3,r4,255
  80fa54:	180897fa 	slli	r4,r3,31
  80fa58:	00c00434 	movhi	r3,16
  80fa5c:	18ffffc4 	addi	r3,r3,-1
  80fa60:	28c6703a 	and	r3,r5,r3
  80fa64:	1c06b03a 	or	r3,r3,r16
  80fa68:	1906b03a 	or	r3,r3,r4
  80fa6c:	dfc00417 	ldw	ra,16(sp)
  80fa70:	dcc00317 	ldw	r19,12(sp)
  80fa74:	dc800217 	ldw	r18,8(sp)
  80fa78:	dc400117 	ldw	r17,4(sp)
  80fa7c:	dc000017 	ldw	r16,0(sp)
  80fa80:	dec00504 	addi	sp,sp,20
  80fa84:	f800283a 	ret
  80fa88:	0101ffc4 	movi	r4,2047
  80fa8c:	813fd626 	beq	r16,r4,80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fa90:	29402034 	orhi	r5,r5,128
  80fa94:	01000e04 	movi	r4,56
  80fa98:	2080a316 	blt	r4,r2,80fd28 <__subdf3+0x3c4>
  80fa9c:	010007c4 	movi	r4,31
  80faa0:	2080c616 	blt	r4,r2,80fdbc <__subdf3+0x458>
  80faa4:	01000804 	movi	r4,32
  80faa8:	2089c83a 	sub	r4,r4,r2
  80faac:	2910983a 	sll	r8,r5,r4
  80fab0:	308ed83a 	srl	r7,r6,r2
  80fab4:	3108983a 	sll	r4,r6,r4
  80fab8:	2884d83a 	srl	r2,r5,r2
  80fabc:	41ccb03a 	or	r6,r8,r7
  80fac0:	2008c03a 	cmpne	r4,r4,zero
  80fac4:	310cb03a 	or	r6,r6,r4
  80fac8:	898dc83a 	sub	r6,r17,r6
  80facc:	89a3803a 	cmpltu	r17,r17,r6
  80fad0:	1887c83a 	sub	r3,r3,r2
  80fad4:	1c47c83a 	sub	r3,r3,r17
  80fad8:	3023883a 	mov	r17,r6
  80fadc:	1880202c 	andhi	r2,r3,128
  80fae0:	10002326 	beq	r2,zero,80fb70 <__subdf3+0x20c>
  80fae4:	04c02034 	movhi	r19,128
  80fae8:	9cffffc4 	addi	r19,r19,-1
  80faec:	1ce6703a 	and	r19,r3,r19
  80faf0:	98007a26 	beq	r19,zero,80fcdc <__subdf3+0x378>
  80faf4:	9809883a 	mov	r4,r19
  80faf8:	08104640 	call	810464 <__clzsi2>
  80fafc:	113ffe04 	addi	r4,r2,-8
  80fb00:	00c007c4 	movi	r3,31
  80fb04:	19007b16 	blt	r3,r4,80fcf4 <__subdf3+0x390>
  80fb08:	00800804 	movi	r2,32
  80fb0c:	1105c83a 	sub	r2,r2,r4
  80fb10:	8884d83a 	srl	r2,r17,r2
  80fb14:	9906983a 	sll	r3,r19,r4
  80fb18:	8922983a 	sll	r17,r17,r4
  80fb1c:	10c4b03a 	or	r2,r2,r3
  80fb20:	24007816 	blt	r4,r16,80fd04 <__subdf3+0x3a0>
  80fb24:	2421c83a 	sub	r16,r4,r16
  80fb28:	80c00044 	addi	r3,r16,1
  80fb2c:	010007c4 	movi	r4,31
  80fb30:	20c09516 	blt	r4,r3,80fd88 <__subdf3+0x424>
  80fb34:	01400804 	movi	r5,32
  80fb38:	28cbc83a 	sub	r5,r5,r3
  80fb3c:	88c8d83a 	srl	r4,r17,r3
  80fb40:	8962983a 	sll	r17,r17,r5
  80fb44:	114a983a 	sll	r5,r2,r5
  80fb48:	10c6d83a 	srl	r3,r2,r3
  80fb4c:	8804c03a 	cmpne	r2,r17,zero
  80fb50:	290ab03a 	or	r5,r5,r4
  80fb54:	28a2b03a 	or	r17,r5,r2
  80fb58:	0021883a 	mov	r16,zero
  80fb5c:	003fa206 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fb60:	2090b03a 	or	r8,r4,r2
  80fb64:	40018e26 	beq	r8,zero,8101a0 <__subdf3+0x83c>
  80fb68:	1007883a 	mov	r3,r2
  80fb6c:	2023883a 	mov	r17,r4
  80fb70:	888001cc 	andi	r2,r17,7
  80fb74:	103f9e1e 	bne	r2,zero,80f9f0 <__alt_mem_onchip_mem+0xff78f9f0>
  80fb78:	1804977a 	slli	r2,r3,29
  80fb7c:	8822d0fa 	srli	r17,r17,3
  80fb80:	1810d0fa 	srli	r8,r3,3
  80fb84:	9100004c 	andi	r4,r18,1
  80fb88:	1444b03a 	or	r2,r2,r17
  80fb8c:	00c1ffc4 	movi	r3,2047
  80fb90:	80c02826 	beq	r16,r3,80fc34 <__subdf3+0x2d0>
  80fb94:	01400434 	movhi	r5,16
  80fb98:	297fffc4 	addi	r5,r5,-1
  80fb9c:	80e0703a 	and	r16,r16,r3
  80fba0:	414a703a 	and	r5,r8,r5
  80fba4:	003fa806 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  80fba8:	0080630e 	bge	zero,r2,80fd38 <__subdf3+0x3d4>
  80fbac:	48003026 	beq	r9,zero,80fc70 <__subdf3+0x30c>
  80fbb0:	0101ffc4 	movi	r4,2047
  80fbb4:	813f8c26 	beq	r16,r4,80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fbb8:	29402034 	orhi	r5,r5,128
  80fbbc:	01000e04 	movi	r4,56
  80fbc0:	2080a90e 	bge	r4,r2,80fe68 <__subdf3+0x504>
  80fbc4:	298cb03a 	or	r6,r5,r6
  80fbc8:	3012c03a 	cmpne	r9,r6,zero
  80fbcc:	0005883a 	mov	r2,zero
  80fbd0:	4c53883a 	add	r9,r9,r17
  80fbd4:	4c63803a 	cmpltu	r17,r9,r17
  80fbd8:	10c7883a 	add	r3,r2,r3
  80fbdc:	88c7883a 	add	r3,r17,r3
  80fbe0:	4823883a 	mov	r17,r9
  80fbe4:	1880202c 	andhi	r2,r3,128
  80fbe8:	1000d026 	beq	r2,zero,80ff2c <__subdf3+0x5c8>
  80fbec:	84000044 	addi	r16,r16,1
  80fbf0:	0081ffc4 	movi	r2,2047
  80fbf4:	8080fe26 	beq	r16,r2,80fff0 <__subdf3+0x68c>
  80fbf8:	00bfe034 	movhi	r2,65408
  80fbfc:	10bfffc4 	addi	r2,r2,-1
  80fc00:	1886703a 	and	r3,r3,r2
  80fc04:	880ad07a 	srli	r5,r17,1
  80fc08:	180497fa 	slli	r2,r3,31
  80fc0c:	8900004c 	andi	r4,r17,1
  80fc10:	2922b03a 	or	r17,r5,r4
  80fc14:	1806d07a 	srli	r3,r3,1
  80fc18:	1462b03a 	or	r17,r2,r17
  80fc1c:	3825883a 	mov	r18,r7
  80fc20:	003f7106 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fc24:	2984b03a 	or	r2,r5,r6
  80fc28:	103f6826 	beq	r2,zero,80f9cc <__alt_mem_onchip_mem+0xff78f9cc>
  80fc2c:	39c03fcc 	andi	r7,r7,255
  80fc30:	003f6706 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80fc34:	4086b03a 	or	r3,r8,r2
  80fc38:	18015226 	beq	r3,zero,810184 <__subdf3+0x820>
  80fc3c:	00c00434 	movhi	r3,16
  80fc40:	41400234 	orhi	r5,r8,8
  80fc44:	18ffffc4 	addi	r3,r3,-1
  80fc48:	28ca703a 	and	r5,r5,r3
  80fc4c:	003f7e06 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  80fc50:	10bfffc4 	addi	r2,r2,-1
  80fc54:	1000491e 	bne	r2,zero,80fd7c <__subdf3+0x418>
  80fc58:	898fc83a 	sub	r7,r17,r6
  80fc5c:	89e3803a 	cmpltu	r17,r17,r7
  80fc60:	1947c83a 	sub	r3,r3,r5
  80fc64:	1c47c83a 	sub	r3,r3,r17
  80fc68:	3823883a 	mov	r17,r7
  80fc6c:	003f9b06 	br	80fadc <__alt_mem_onchip_mem+0xff78fadc>
  80fc70:	2988b03a 	or	r4,r5,r6
  80fc74:	203f5c26 	beq	r4,zero,80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fc78:	10bfffc4 	addi	r2,r2,-1
  80fc7c:	1000931e 	bne	r2,zero,80fecc <__subdf3+0x568>
  80fc80:	898d883a 	add	r6,r17,r6
  80fc84:	3463803a 	cmpltu	r17,r6,r17
  80fc88:	1947883a 	add	r3,r3,r5
  80fc8c:	88c7883a 	add	r3,r17,r3
  80fc90:	3023883a 	mov	r17,r6
  80fc94:	003fd306 	br	80fbe4 <__alt_mem_onchip_mem+0xff78fbe4>
  80fc98:	1000541e 	bne	r2,zero,80fdec <__subdf3+0x488>
  80fc9c:	80800044 	addi	r2,r16,1
  80fca0:	1081ffcc 	andi	r2,r2,2047
  80fca4:	01000044 	movi	r4,1
  80fca8:	2080a20e 	bge	r4,r2,80ff34 <__subdf3+0x5d0>
  80fcac:	8989c83a 	sub	r4,r17,r6
  80fcb0:	8905803a 	cmpltu	r2,r17,r4
  80fcb4:	1967c83a 	sub	r19,r3,r5
  80fcb8:	98a7c83a 	sub	r19,r19,r2
  80fcbc:	9880202c 	andhi	r2,r19,128
  80fcc0:	10006326 	beq	r2,zero,80fe50 <__subdf3+0x4ec>
  80fcc4:	3463c83a 	sub	r17,r6,r17
  80fcc8:	28c7c83a 	sub	r3,r5,r3
  80fccc:	344d803a 	cmpltu	r6,r6,r17
  80fcd0:	19a7c83a 	sub	r19,r3,r6
  80fcd4:	3825883a 	mov	r18,r7
  80fcd8:	983f861e 	bne	r19,zero,80faf4 <__alt_mem_onchip_mem+0xff78faf4>
  80fcdc:	8809883a 	mov	r4,r17
  80fce0:	08104640 	call	810464 <__clzsi2>
  80fce4:	10800804 	addi	r2,r2,32
  80fce8:	113ffe04 	addi	r4,r2,-8
  80fcec:	00c007c4 	movi	r3,31
  80fcf0:	193f850e 	bge	r3,r4,80fb08 <__alt_mem_onchip_mem+0xff78fb08>
  80fcf4:	10bff604 	addi	r2,r2,-40
  80fcf8:	8884983a 	sll	r2,r17,r2
  80fcfc:	0023883a 	mov	r17,zero
  80fd00:	243f880e 	bge	r4,r16,80fb24 <__alt_mem_onchip_mem+0xff78fb24>
  80fd04:	00ffe034 	movhi	r3,65408
  80fd08:	18ffffc4 	addi	r3,r3,-1
  80fd0c:	8121c83a 	sub	r16,r16,r4
  80fd10:	10c6703a 	and	r3,r2,r3
  80fd14:	003f3406 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fd18:	9100004c 	andi	r4,r18,1
  80fd1c:	000b883a 	mov	r5,zero
  80fd20:	0005883a 	mov	r2,zero
  80fd24:	003f4806 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  80fd28:	298cb03a 	or	r6,r5,r6
  80fd2c:	300cc03a 	cmpne	r6,r6,zero
  80fd30:	0005883a 	mov	r2,zero
  80fd34:	003f6406 	br	80fac8 <__alt_mem_onchip_mem+0xff78fac8>
  80fd38:	10009a1e 	bne	r2,zero,80ffa4 <__subdf3+0x640>
  80fd3c:	82400044 	addi	r9,r16,1
  80fd40:	4881ffcc 	andi	r2,r9,2047
  80fd44:	02800044 	movi	r10,1
  80fd48:	5080670e 	bge	r10,r2,80fee8 <__subdf3+0x584>
  80fd4c:	0081ffc4 	movi	r2,2047
  80fd50:	4880af26 	beq	r9,r2,810010 <__subdf3+0x6ac>
  80fd54:	898d883a 	add	r6,r17,r6
  80fd58:	1945883a 	add	r2,r3,r5
  80fd5c:	3447803a 	cmpltu	r3,r6,r17
  80fd60:	1887883a 	add	r3,r3,r2
  80fd64:	182297fa 	slli	r17,r3,31
  80fd68:	300cd07a 	srli	r6,r6,1
  80fd6c:	1806d07a 	srli	r3,r3,1
  80fd70:	4821883a 	mov	r16,r9
  80fd74:	89a2b03a 	or	r17,r17,r6
  80fd78:	003f1b06 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fd7c:	0101ffc4 	movi	r4,2047
  80fd80:	813f441e 	bne	r16,r4,80fa94 <__alt_mem_onchip_mem+0xff78fa94>
  80fd84:	003f1806 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fd88:	843ff844 	addi	r16,r16,-31
  80fd8c:	01400804 	movi	r5,32
  80fd90:	1408d83a 	srl	r4,r2,r16
  80fd94:	19405026 	beq	r3,r5,80fed8 <__subdf3+0x574>
  80fd98:	01401004 	movi	r5,64
  80fd9c:	28c7c83a 	sub	r3,r5,r3
  80fda0:	10c4983a 	sll	r2,r2,r3
  80fda4:	88a2b03a 	or	r17,r17,r2
  80fda8:	8822c03a 	cmpne	r17,r17,zero
  80fdac:	2462b03a 	or	r17,r4,r17
  80fdb0:	0007883a 	mov	r3,zero
  80fdb4:	0021883a 	mov	r16,zero
  80fdb8:	003f6d06 	br	80fb70 <__alt_mem_onchip_mem+0xff78fb70>
  80fdbc:	11fff804 	addi	r7,r2,-32
  80fdc0:	01000804 	movi	r4,32
  80fdc4:	29ced83a 	srl	r7,r5,r7
  80fdc8:	11004526 	beq	r2,r4,80fee0 <__subdf3+0x57c>
  80fdcc:	01001004 	movi	r4,64
  80fdd0:	2089c83a 	sub	r4,r4,r2
  80fdd4:	2904983a 	sll	r2,r5,r4
  80fdd8:	118cb03a 	or	r6,r2,r6
  80fddc:	300cc03a 	cmpne	r6,r6,zero
  80fde0:	398cb03a 	or	r6,r7,r6
  80fde4:	0005883a 	mov	r2,zero
  80fde8:	003f3706 	br	80fac8 <__alt_mem_onchip_mem+0xff78fac8>
  80fdec:	80002a26 	beq	r16,zero,80fe98 <__subdf3+0x534>
  80fdf0:	0101ffc4 	movi	r4,2047
  80fdf4:	49006626 	beq	r9,r4,80ff90 <__subdf3+0x62c>
  80fdf8:	0085c83a 	sub	r2,zero,r2
  80fdfc:	18c02034 	orhi	r3,r3,128
  80fe00:	01000e04 	movi	r4,56
  80fe04:	20807e16 	blt	r4,r2,810000 <__subdf3+0x69c>
  80fe08:	010007c4 	movi	r4,31
  80fe0c:	2080e716 	blt	r4,r2,8101ac <__subdf3+0x848>
  80fe10:	01000804 	movi	r4,32
  80fe14:	2089c83a 	sub	r4,r4,r2
  80fe18:	1914983a 	sll	r10,r3,r4
  80fe1c:	8890d83a 	srl	r8,r17,r2
  80fe20:	8908983a 	sll	r4,r17,r4
  80fe24:	1884d83a 	srl	r2,r3,r2
  80fe28:	5222b03a 	or	r17,r10,r8
  80fe2c:	2006c03a 	cmpne	r3,r4,zero
  80fe30:	88e2b03a 	or	r17,r17,r3
  80fe34:	3463c83a 	sub	r17,r6,r17
  80fe38:	2885c83a 	sub	r2,r5,r2
  80fe3c:	344d803a 	cmpltu	r6,r6,r17
  80fe40:	1187c83a 	sub	r3,r2,r6
  80fe44:	4821883a 	mov	r16,r9
  80fe48:	3825883a 	mov	r18,r7
  80fe4c:	003f2306 	br	80fadc <__alt_mem_onchip_mem+0xff78fadc>
  80fe50:	24d0b03a 	or	r8,r4,r19
  80fe54:	40001b1e 	bne	r8,zero,80fec4 <__subdf3+0x560>
  80fe58:	0005883a 	mov	r2,zero
  80fe5c:	0009883a 	mov	r4,zero
  80fe60:	0021883a 	mov	r16,zero
  80fe64:	003f4906 	br	80fb8c <__alt_mem_onchip_mem+0xff78fb8c>
  80fe68:	010007c4 	movi	r4,31
  80fe6c:	20803a16 	blt	r4,r2,80ff58 <__subdf3+0x5f4>
  80fe70:	01000804 	movi	r4,32
  80fe74:	2089c83a 	sub	r4,r4,r2
  80fe78:	2912983a 	sll	r9,r5,r4
  80fe7c:	3090d83a 	srl	r8,r6,r2
  80fe80:	3108983a 	sll	r4,r6,r4
  80fe84:	2884d83a 	srl	r2,r5,r2
  80fe88:	4a12b03a 	or	r9,r9,r8
  80fe8c:	2008c03a 	cmpne	r4,r4,zero
  80fe90:	4912b03a 	or	r9,r9,r4
  80fe94:	003f4e06 	br	80fbd0 <__alt_mem_onchip_mem+0xff78fbd0>
  80fe98:	1c48b03a 	or	r4,r3,r17
  80fe9c:	20003c26 	beq	r4,zero,80ff90 <__subdf3+0x62c>
  80fea0:	0084303a 	nor	r2,zero,r2
  80fea4:	1000381e 	bne	r2,zero,80ff88 <__subdf3+0x624>
  80fea8:	3463c83a 	sub	r17,r6,r17
  80feac:	28c5c83a 	sub	r2,r5,r3
  80feb0:	344d803a 	cmpltu	r6,r6,r17
  80feb4:	1187c83a 	sub	r3,r2,r6
  80feb8:	4821883a 	mov	r16,r9
  80febc:	3825883a 	mov	r18,r7
  80fec0:	003f0606 	br	80fadc <__alt_mem_onchip_mem+0xff78fadc>
  80fec4:	2023883a 	mov	r17,r4
  80fec8:	003f0906 	br	80faf0 <__alt_mem_onchip_mem+0xff78faf0>
  80fecc:	0101ffc4 	movi	r4,2047
  80fed0:	813f3a1e 	bne	r16,r4,80fbbc <__alt_mem_onchip_mem+0xff78fbbc>
  80fed4:	003ec406 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fed8:	0005883a 	mov	r2,zero
  80fedc:	003fb106 	br	80fda4 <__alt_mem_onchip_mem+0xff78fda4>
  80fee0:	0005883a 	mov	r2,zero
  80fee4:	003fbc06 	br	80fdd8 <__alt_mem_onchip_mem+0xff78fdd8>
  80fee8:	1c44b03a 	or	r2,r3,r17
  80feec:	80008e1e 	bne	r16,zero,810128 <__subdf3+0x7c4>
  80fef0:	1000c826 	beq	r2,zero,810214 <__subdf3+0x8b0>
  80fef4:	2984b03a 	or	r2,r5,r6
  80fef8:	103ebb26 	beq	r2,zero,80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fefc:	8989883a 	add	r4,r17,r6
  80ff00:	1945883a 	add	r2,r3,r5
  80ff04:	2447803a 	cmpltu	r3,r4,r17
  80ff08:	1887883a 	add	r3,r3,r2
  80ff0c:	1880202c 	andhi	r2,r3,128
  80ff10:	2023883a 	mov	r17,r4
  80ff14:	103f1626 	beq	r2,zero,80fb70 <__alt_mem_onchip_mem+0xff78fb70>
  80ff18:	00bfe034 	movhi	r2,65408
  80ff1c:	10bfffc4 	addi	r2,r2,-1
  80ff20:	5021883a 	mov	r16,r10
  80ff24:	1886703a 	and	r3,r3,r2
  80ff28:	003eaf06 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80ff2c:	3825883a 	mov	r18,r7
  80ff30:	003f0f06 	br	80fb70 <__alt_mem_onchip_mem+0xff78fb70>
  80ff34:	1c44b03a 	or	r2,r3,r17
  80ff38:	8000251e 	bne	r16,zero,80ffd0 <__subdf3+0x66c>
  80ff3c:	1000661e 	bne	r2,zero,8100d8 <__subdf3+0x774>
  80ff40:	2990b03a 	or	r8,r5,r6
  80ff44:	40009626 	beq	r8,zero,8101a0 <__subdf3+0x83c>
  80ff48:	2807883a 	mov	r3,r5
  80ff4c:	3023883a 	mov	r17,r6
  80ff50:	3825883a 	mov	r18,r7
  80ff54:	003ea406 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80ff58:	127ff804 	addi	r9,r2,-32
  80ff5c:	01000804 	movi	r4,32
  80ff60:	2a52d83a 	srl	r9,r5,r9
  80ff64:	11008c26 	beq	r2,r4,810198 <__subdf3+0x834>
  80ff68:	01001004 	movi	r4,64
  80ff6c:	2085c83a 	sub	r2,r4,r2
  80ff70:	2884983a 	sll	r2,r5,r2
  80ff74:	118cb03a 	or	r6,r2,r6
  80ff78:	300cc03a 	cmpne	r6,r6,zero
  80ff7c:	4992b03a 	or	r9,r9,r6
  80ff80:	0005883a 	mov	r2,zero
  80ff84:	003f1206 	br	80fbd0 <__alt_mem_onchip_mem+0xff78fbd0>
  80ff88:	0101ffc4 	movi	r4,2047
  80ff8c:	493f9c1e 	bne	r9,r4,80fe00 <__alt_mem_onchip_mem+0xff78fe00>
  80ff90:	2807883a 	mov	r3,r5
  80ff94:	3023883a 	mov	r17,r6
  80ff98:	4821883a 	mov	r16,r9
  80ff9c:	3825883a 	mov	r18,r7
  80ffa0:	003e9106 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80ffa4:	80001f1e 	bne	r16,zero,810024 <__subdf3+0x6c0>
  80ffa8:	1c48b03a 	or	r4,r3,r17
  80ffac:	20005a26 	beq	r4,zero,810118 <__subdf3+0x7b4>
  80ffb0:	0084303a 	nor	r2,zero,r2
  80ffb4:	1000561e 	bne	r2,zero,810110 <__subdf3+0x7ac>
  80ffb8:	89a3883a 	add	r17,r17,r6
  80ffbc:	1945883a 	add	r2,r3,r5
  80ffc0:	898d803a 	cmpltu	r6,r17,r6
  80ffc4:	3087883a 	add	r3,r6,r2
  80ffc8:	4821883a 	mov	r16,r9
  80ffcc:	003f0506 	br	80fbe4 <__alt_mem_onchip_mem+0xff78fbe4>
  80ffd0:	10002b1e 	bne	r2,zero,810080 <__subdf3+0x71c>
  80ffd4:	2984b03a 	or	r2,r5,r6
  80ffd8:	10008026 	beq	r2,zero,8101dc <__subdf3+0x878>
  80ffdc:	2807883a 	mov	r3,r5
  80ffe0:	3023883a 	mov	r17,r6
  80ffe4:	3825883a 	mov	r18,r7
  80ffe8:	0401ffc4 	movi	r16,2047
  80ffec:	003e7e06 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  80fff0:	3809883a 	mov	r4,r7
  80fff4:	0011883a 	mov	r8,zero
  80fff8:	0005883a 	mov	r2,zero
  80fffc:	003ee306 	br	80fb8c <__alt_mem_onchip_mem+0xff78fb8c>
  810000:	1c62b03a 	or	r17,r3,r17
  810004:	8822c03a 	cmpne	r17,r17,zero
  810008:	0005883a 	mov	r2,zero
  81000c:	003f8906 	br	80fe34 <__alt_mem_onchip_mem+0xff78fe34>
  810010:	3809883a 	mov	r4,r7
  810014:	4821883a 	mov	r16,r9
  810018:	0011883a 	mov	r8,zero
  81001c:	0005883a 	mov	r2,zero
  810020:	003eda06 	br	80fb8c <__alt_mem_onchip_mem+0xff78fb8c>
  810024:	0101ffc4 	movi	r4,2047
  810028:	49003b26 	beq	r9,r4,810118 <__subdf3+0x7b4>
  81002c:	0085c83a 	sub	r2,zero,r2
  810030:	18c02034 	orhi	r3,r3,128
  810034:	01000e04 	movi	r4,56
  810038:	20806e16 	blt	r4,r2,8101f4 <__subdf3+0x890>
  81003c:	010007c4 	movi	r4,31
  810040:	20807716 	blt	r4,r2,810220 <__subdf3+0x8bc>
  810044:	01000804 	movi	r4,32
  810048:	2089c83a 	sub	r4,r4,r2
  81004c:	1914983a 	sll	r10,r3,r4
  810050:	8890d83a 	srl	r8,r17,r2
  810054:	8908983a 	sll	r4,r17,r4
  810058:	1884d83a 	srl	r2,r3,r2
  81005c:	5222b03a 	or	r17,r10,r8
  810060:	2006c03a 	cmpne	r3,r4,zero
  810064:	88e2b03a 	or	r17,r17,r3
  810068:	89a3883a 	add	r17,r17,r6
  81006c:	1145883a 	add	r2,r2,r5
  810070:	898d803a 	cmpltu	r6,r17,r6
  810074:	3087883a 	add	r3,r6,r2
  810078:	4821883a 	mov	r16,r9
  81007c:	003ed906 	br	80fbe4 <__alt_mem_onchip_mem+0xff78fbe4>
  810080:	2984b03a 	or	r2,r5,r6
  810084:	10004226 	beq	r2,zero,810190 <__subdf3+0x82c>
  810088:	1808d0fa 	srli	r4,r3,3
  81008c:	8822d0fa 	srli	r17,r17,3
  810090:	1806977a 	slli	r3,r3,29
  810094:	2080022c 	andhi	r2,r4,8
  810098:	1c62b03a 	or	r17,r3,r17
  81009c:	10000826 	beq	r2,zero,8100c0 <__subdf3+0x75c>
  8100a0:	2812d0fa 	srli	r9,r5,3
  8100a4:	4880022c 	andhi	r2,r9,8
  8100a8:	1000051e 	bne	r2,zero,8100c0 <__subdf3+0x75c>
  8100ac:	300cd0fa 	srli	r6,r6,3
  8100b0:	2804977a 	slli	r2,r5,29
  8100b4:	4809883a 	mov	r4,r9
  8100b8:	3825883a 	mov	r18,r7
  8100bc:	11a2b03a 	or	r17,r2,r6
  8100c0:	8806d77a 	srli	r3,r17,29
  8100c4:	200890fa 	slli	r4,r4,3
  8100c8:	882290fa 	slli	r17,r17,3
  8100cc:	0401ffc4 	movi	r16,2047
  8100d0:	1906b03a 	or	r3,r3,r4
  8100d4:	003e4406 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  8100d8:	2984b03a 	or	r2,r5,r6
  8100dc:	103e4226 	beq	r2,zero,80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  8100e0:	8989c83a 	sub	r4,r17,r6
  8100e4:	8911803a 	cmpltu	r8,r17,r4
  8100e8:	1945c83a 	sub	r2,r3,r5
  8100ec:	1205c83a 	sub	r2,r2,r8
  8100f0:	1200202c 	andhi	r8,r2,128
  8100f4:	403e9a26 	beq	r8,zero,80fb60 <__alt_mem_onchip_mem+0xff78fb60>
  8100f8:	3463c83a 	sub	r17,r6,r17
  8100fc:	28c5c83a 	sub	r2,r5,r3
  810100:	344d803a 	cmpltu	r6,r6,r17
  810104:	1187c83a 	sub	r3,r2,r6
  810108:	3825883a 	mov	r18,r7
  81010c:	003e3606 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810110:	0101ffc4 	movi	r4,2047
  810114:	493fc71e 	bne	r9,r4,810034 <__alt_mem_onchip_mem+0xff790034>
  810118:	2807883a 	mov	r3,r5
  81011c:	3023883a 	mov	r17,r6
  810120:	4821883a 	mov	r16,r9
  810124:	003e3006 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810128:	10003626 	beq	r2,zero,810204 <__subdf3+0x8a0>
  81012c:	2984b03a 	or	r2,r5,r6
  810130:	10001726 	beq	r2,zero,810190 <__subdf3+0x82c>
  810134:	1808d0fa 	srli	r4,r3,3
  810138:	8822d0fa 	srli	r17,r17,3
  81013c:	1806977a 	slli	r3,r3,29
  810140:	2080022c 	andhi	r2,r4,8
  810144:	1c62b03a 	or	r17,r3,r17
  810148:	10000726 	beq	r2,zero,810168 <__subdf3+0x804>
  81014c:	2812d0fa 	srli	r9,r5,3
  810150:	4880022c 	andhi	r2,r9,8
  810154:	1000041e 	bne	r2,zero,810168 <__subdf3+0x804>
  810158:	300cd0fa 	srli	r6,r6,3
  81015c:	2804977a 	slli	r2,r5,29
  810160:	4809883a 	mov	r4,r9
  810164:	11a2b03a 	or	r17,r2,r6
  810168:	8806d77a 	srli	r3,r17,29
  81016c:	200890fa 	slli	r4,r4,3
  810170:	882290fa 	slli	r17,r17,3
  810174:	3825883a 	mov	r18,r7
  810178:	1906b03a 	or	r3,r3,r4
  81017c:	0401ffc4 	movi	r16,2047
  810180:	003e1906 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810184:	000b883a 	mov	r5,zero
  810188:	0005883a 	mov	r2,zero
  81018c:	003e2e06 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  810190:	0401ffc4 	movi	r16,2047
  810194:	003e1406 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810198:	0005883a 	mov	r2,zero
  81019c:	003f7506 	br	80ff74 <__alt_mem_onchip_mem+0xff78ff74>
  8101a0:	0005883a 	mov	r2,zero
  8101a4:	0009883a 	mov	r4,zero
  8101a8:	003e7806 	br	80fb8c <__alt_mem_onchip_mem+0xff78fb8c>
  8101ac:	123ff804 	addi	r8,r2,-32
  8101b0:	01000804 	movi	r4,32
  8101b4:	1a10d83a 	srl	r8,r3,r8
  8101b8:	11002526 	beq	r2,r4,810250 <__subdf3+0x8ec>
  8101bc:	01001004 	movi	r4,64
  8101c0:	2085c83a 	sub	r2,r4,r2
  8101c4:	1884983a 	sll	r2,r3,r2
  8101c8:	1444b03a 	or	r2,r2,r17
  8101cc:	1004c03a 	cmpne	r2,r2,zero
  8101d0:	40a2b03a 	or	r17,r8,r2
  8101d4:	0005883a 	mov	r2,zero
  8101d8:	003f1606 	br	80fe34 <__alt_mem_onchip_mem+0xff78fe34>
  8101dc:	02000434 	movhi	r8,16
  8101e0:	0009883a 	mov	r4,zero
  8101e4:	423fffc4 	addi	r8,r8,-1
  8101e8:	00bfffc4 	movi	r2,-1
  8101ec:	0401ffc4 	movi	r16,2047
  8101f0:	003e6606 	br	80fb8c <__alt_mem_onchip_mem+0xff78fb8c>
  8101f4:	1c62b03a 	or	r17,r3,r17
  8101f8:	8822c03a 	cmpne	r17,r17,zero
  8101fc:	0005883a 	mov	r2,zero
  810200:	003f9906 	br	810068 <__alt_mem_onchip_mem+0xff790068>
  810204:	2807883a 	mov	r3,r5
  810208:	3023883a 	mov	r17,r6
  81020c:	0401ffc4 	movi	r16,2047
  810210:	003df506 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810214:	2807883a 	mov	r3,r5
  810218:	3023883a 	mov	r17,r6
  81021c:	003df206 	br	80f9e8 <__alt_mem_onchip_mem+0xff78f9e8>
  810220:	123ff804 	addi	r8,r2,-32
  810224:	01000804 	movi	r4,32
  810228:	1a10d83a 	srl	r8,r3,r8
  81022c:	11000a26 	beq	r2,r4,810258 <__subdf3+0x8f4>
  810230:	01001004 	movi	r4,64
  810234:	2085c83a 	sub	r2,r4,r2
  810238:	1884983a 	sll	r2,r3,r2
  81023c:	1444b03a 	or	r2,r2,r17
  810240:	1004c03a 	cmpne	r2,r2,zero
  810244:	40a2b03a 	or	r17,r8,r2
  810248:	0005883a 	mov	r2,zero
  81024c:	003f8606 	br	810068 <__alt_mem_onchip_mem+0xff790068>
  810250:	0005883a 	mov	r2,zero
  810254:	003fdc06 	br	8101c8 <__alt_mem_onchip_mem+0xff7901c8>
  810258:	0005883a 	mov	r2,zero
  81025c:	003ff706 	br	81023c <__alt_mem_onchip_mem+0xff79023c>

00810260 <__fixdfsi>:
  810260:	280cd53a 	srli	r6,r5,20
  810264:	00c00434 	movhi	r3,16
  810268:	18ffffc4 	addi	r3,r3,-1
  81026c:	3181ffcc 	andi	r6,r6,2047
  810270:	01c0ff84 	movi	r7,1022
  810274:	28c6703a 	and	r3,r5,r3
  810278:	280ad7fa 	srli	r5,r5,31
  81027c:	3980120e 	bge	r7,r6,8102c8 <__fixdfsi+0x68>
  810280:	00810744 	movi	r2,1053
  810284:	11800c16 	blt	r2,r6,8102b8 <__fixdfsi+0x58>
  810288:	00810cc4 	movi	r2,1075
  81028c:	1185c83a 	sub	r2,r2,r6
  810290:	01c007c4 	movi	r7,31
  810294:	18c00434 	orhi	r3,r3,16
  810298:	38800d16 	blt	r7,r2,8102d0 <__fixdfsi+0x70>
  81029c:	31befb44 	addi	r6,r6,-1043
  8102a0:	2084d83a 	srl	r2,r4,r2
  8102a4:	1986983a 	sll	r3,r3,r6
  8102a8:	1884b03a 	or	r2,r3,r2
  8102ac:	28000726 	beq	r5,zero,8102cc <__fixdfsi+0x6c>
  8102b0:	0085c83a 	sub	r2,zero,r2
  8102b4:	f800283a 	ret
  8102b8:	00a00034 	movhi	r2,32768
  8102bc:	10bfffc4 	addi	r2,r2,-1
  8102c0:	2885883a 	add	r2,r5,r2
  8102c4:	f800283a 	ret
  8102c8:	0005883a 	mov	r2,zero
  8102cc:	f800283a 	ret
  8102d0:	008104c4 	movi	r2,1043
  8102d4:	1185c83a 	sub	r2,r2,r6
  8102d8:	1884d83a 	srl	r2,r3,r2
  8102dc:	003ff306 	br	8102ac <__alt_mem_onchip_mem+0xff7902ac>

008102e0 <__floatsidf>:
  8102e0:	defffd04 	addi	sp,sp,-12
  8102e4:	dfc00215 	stw	ra,8(sp)
  8102e8:	dc400115 	stw	r17,4(sp)
  8102ec:	dc000015 	stw	r16,0(sp)
  8102f0:	20002b26 	beq	r4,zero,8103a0 <__floatsidf+0xc0>
  8102f4:	2023883a 	mov	r17,r4
  8102f8:	2020d7fa 	srli	r16,r4,31
  8102fc:	20002d16 	blt	r4,zero,8103b4 <__floatsidf+0xd4>
  810300:	8809883a 	mov	r4,r17
  810304:	08104640 	call	810464 <__clzsi2>
  810308:	01410784 	movi	r5,1054
  81030c:	288bc83a 	sub	r5,r5,r2
  810310:	01010cc4 	movi	r4,1075
  810314:	2149c83a 	sub	r4,r4,r5
  810318:	00c007c4 	movi	r3,31
  81031c:	1900160e 	bge	r3,r4,810378 <__floatsidf+0x98>
  810320:	00c104c4 	movi	r3,1043
  810324:	1947c83a 	sub	r3,r3,r5
  810328:	88c6983a 	sll	r3,r17,r3
  81032c:	00800434 	movhi	r2,16
  810330:	10bfffc4 	addi	r2,r2,-1
  810334:	1886703a 	and	r3,r3,r2
  810338:	2941ffcc 	andi	r5,r5,2047
  81033c:	800d883a 	mov	r6,r16
  810340:	0005883a 	mov	r2,zero
  810344:	280a953a 	slli	r5,r5,20
  810348:	31803fcc 	andi	r6,r6,255
  81034c:	01000434 	movhi	r4,16
  810350:	300c97fa 	slli	r6,r6,31
  810354:	213fffc4 	addi	r4,r4,-1
  810358:	1906703a 	and	r3,r3,r4
  81035c:	1946b03a 	or	r3,r3,r5
  810360:	1986b03a 	or	r3,r3,r6
  810364:	dfc00217 	ldw	ra,8(sp)
  810368:	dc400117 	ldw	r17,4(sp)
  81036c:	dc000017 	ldw	r16,0(sp)
  810370:	dec00304 	addi	sp,sp,12
  810374:	f800283a 	ret
  810378:	00c002c4 	movi	r3,11
  81037c:	1887c83a 	sub	r3,r3,r2
  810380:	88c6d83a 	srl	r3,r17,r3
  810384:	8904983a 	sll	r2,r17,r4
  810388:	01000434 	movhi	r4,16
  81038c:	213fffc4 	addi	r4,r4,-1
  810390:	2941ffcc 	andi	r5,r5,2047
  810394:	1906703a 	and	r3,r3,r4
  810398:	800d883a 	mov	r6,r16
  81039c:	003fe906 	br	810344 <__alt_mem_onchip_mem+0xff790344>
  8103a0:	000d883a 	mov	r6,zero
  8103a4:	000b883a 	mov	r5,zero
  8103a8:	0007883a 	mov	r3,zero
  8103ac:	0005883a 	mov	r2,zero
  8103b0:	003fe406 	br	810344 <__alt_mem_onchip_mem+0xff790344>
  8103b4:	0123c83a 	sub	r17,zero,r4
  8103b8:	003fd106 	br	810300 <__alt_mem_onchip_mem+0xff790300>

008103bc <__floatunsidf>:
  8103bc:	defffe04 	addi	sp,sp,-8
  8103c0:	dc000015 	stw	r16,0(sp)
  8103c4:	dfc00115 	stw	ra,4(sp)
  8103c8:	2021883a 	mov	r16,r4
  8103cc:	20002226 	beq	r4,zero,810458 <__floatunsidf+0x9c>
  8103d0:	08104640 	call	810464 <__clzsi2>
  8103d4:	01010784 	movi	r4,1054
  8103d8:	2089c83a 	sub	r4,r4,r2
  8103dc:	01810cc4 	movi	r6,1075
  8103e0:	310dc83a 	sub	r6,r6,r4
  8103e4:	00c007c4 	movi	r3,31
  8103e8:	1980120e 	bge	r3,r6,810434 <__floatunsidf+0x78>
  8103ec:	00c104c4 	movi	r3,1043
  8103f0:	1907c83a 	sub	r3,r3,r4
  8103f4:	80ca983a 	sll	r5,r16,r3
  8103f8:	00800434 	movhi	r2,16
  8103fc:	10bfffc4 	addi	r2,r2,-1
  810400:	2101ffcc 	andi	r4,r4,2047
  810404:	0021883a 	mov	r16,zero
  810408:	288a703a 	and	r5,r5,r2
  81040c:	2008953a 	slli	r4,r4,20
  810410:	00c00434 	movhi	r3,16
  810414:	18ffffc4 	addi	r3,r3,-1
  810418:	28c6703a 	and	r3,r5,r3
  81041c:	8005883a 	mov	r2,r16
  810420:	1906b03a 	or	r3,r3,r4
  810424:	dfc00117 	ldw	ra,4(sp)
  810428:	dc000017 	ldw	r16,0(sp)
  81042c:	dec00204 	addi	sp,sp,8
  810430:	f800283a 	ret
  810434:	00c002c4 	movi	r3,11
  810438:	188bc83a 	sub	r5,r3,r2
  81043c:	814ad83a 	srl	r5,r16,r5
  810440:	00c00434 	movhi	r3,16
  810444:	18ffffc4 	addi	r3,r3,-1
  810448:	81a0983a 	sll	r16,r16,r6
  81044c:	2101ffcc 	andi	r4,r4,2047
  810450:	28ca703a 	and	r5,r5,r3
  810454:	003fed06 	br	81040c <__alt_mem_onchip_mem+0xff79040c>
  810458:	0009883a 	mov	r4,zero
  81045c:	000b883a 	mov	r5,zero
  810460:	003fea06 	br	81040c <__alt_mem_onchip_mem+0xff79040c>

00810464 <__clzsi2>:
  810464:	00bfffd4 	movui	r2,65535
  810468:	11000536 	bltu	r2,r4,810480 <__clzsi2+0x1c>
  81046c:	00803fc4 	movi	r2,255
  810470:	11000f36 	bltu	r2,r4,8104b0 <__clzsi2+0x4c>
  810474:	00800804 	movi	r2,32
  810478:	0007883a 	mov	r3,zero
  81047c:	00000506 	br	810494 <__clzsi2+0x30>
  810480:	00804034 	movhi	r2,256
  810484:	10bfffc4 	addi	r2,r2,-1
  810488:	11000c2e 	bgeu	r2,r4,8104bc <__clzsi2+0x58>
  81048c:	00800204 	movi	r2,8
  810490:	00c00604 	movi	r3,24
  810494:	20c8d83a 	srl	r4,r4,r3
  810498:	00c02074 	movhi	r3,129
  81049c:	18d25804 	addi	r3,r3,18784
  8104a0:	1909883a 	add	r4,r3,r4
  8104a4:	20c00003 	ldbu	r3,0(r4)
  8104a8:	10c5c83a 	sub	r2,r2,r3
  8104ac:	f800283a 	ret
  8104b0:	00800604 	movi	r2,24
  8104b4:	00c00204 	movi	r3,8
  8104b8:	003ff606 	br	810494 <__alt_mem_onchip_mem+0xff790494>
  8104bc:	00800404 	movi	r2,16
  8104c0:	1007883a 	mov	r3,r2
  8104c4:	003ff306 	br	810494 <__alt_mem_onchip_mem+0xff790494>

008104c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8104c8:	defff504 	addi	sp,sp,-44
  8104cc:	df000a15 	stw	fp,40(sp)
  8104d0:	df000a04 	addi	fp,sp,40
  8104d4:	e13ffc15 	stw	r4,-16(fp)
  8104d8:	e17ffd15 	stw	r5,-12(fp)
  8104dc:	e1bffe15 	stw	r6,-8(fp)
  8104e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8104e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8104e8:	d0a7b217 	ldw	r2,-24888(gp)
  
  if (alt_ticks_per_second ())
  8104ec:	10003c26 	beq	r2,zero,8105e0 <alt_alarm_start+0x118>
  {
    if (alarm)
  8104f0:	e0bffc17 	ldw	r2,-16(fp)
  8104f4:	10003826 	beq	r2,zero,8105d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  8104f8:	e0bffc17 	ldw	r2,-16(fp)
  8104fc:	e0fffe17 	ldw	r3,-8(fp)
  810500:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  810504:	e0bffc17 	ldw	r2,-16(fp)
  810508:	e0ffff17 	ldw	r3,-4(fp)
  81050c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810510:	0005303a 	rdctl	r2,status
  810514:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810518:	e0fff917 	ldw	r3,-28(fp)
  81051c:	00bfff84 	movi	r2,-2
  810520:	1884703a 	and	r2,r3,r2
  810524:	1001703a 	wrctl	status,r2
  
  return context;
  810528:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  81052c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  810530:	d0a7b317 	ldw	r2,-24884(gp)
      
      current_nticks = alt_nticks();
  810534:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  810538:	e0fffd17 	ldw	r3,-12(fp)
  81053c:	e0bff617 	ldw	r2,-40(fp)
  810540:	1885883a 	add	r2,r3,r2
  810544:	10c00044 	addi	r3,r2,1
  810548:	e0bffc17 	ldw	r2,-16(fp)
  81054c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  810550:	e0bffc17 	ldw	r2,-16(fp)
  810554:	10c00217 	ldw	r3,8(r2)
  810558:	e0bff617 	ldw	r2,-40(fp)
  81055c:	1880042e 	bgeu	r3,r2,810570 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  810560:	e0bffc17 	ldw	r2,-16(fp)
  810564:	00c00044 	movi	r3,1
  810568:	10c00405 	stb	r3,16(r2)
  81056c:	00000206 	br	810578 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  810570:	e0bffc17 	ldw	r2,-16(fp)
  810574:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  810578:	e0bffc17 	ldw	r2,-16(fp)
  81057c:	d0e00d04 	addi	r3,gp,-32716
  810580:	e0fffa15 	stw	r3,-24(fp)
  810584:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  810588:	e0bffb17 	ldw	r2,-20(fp)
  81058c:	e0fffa17 	ldw	r3,-24(fp)
  810590:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  810594:	e0bffa17 	ldw	r2,-24(fp)
  810598:	10c00017 	ldw	r3,0(r2)
  81059c:	e0bffb17 	ldw	r2,-20(fp)
  8105a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8105a4:	e0bffa17 	ldw	r2,-24(fp)
  8105a8:	10800017 	ldw	r2,0(r2)
  8105ac:	e0fffb17 	ldw	r3,-20(fp)
  8105b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8105b4:	e0bffa17 	ldw	r2,-24(fp)
  8105b8:	e0fffb17 	ldw	r3,-20(fp)
  8105bc:	10c00015 	stw	r3,0(r2)
  8105c0:	e0bff817 	ldw	r2,-32(fp)
  8105c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105c8:	e0bff717 	ldw	r2,-36(fp)
  8105cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8105d0:	0005883a 	mov	r2,zero
  8105d4:	00000306 	br	8105e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8105d8:	00bffa84 	movi	r2,-22
  8105dc:	00000106 	br	8105e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8105e0:	00bfde84 	movi	r2,-134
  }
}
  8105e4:	e037883a 	mov	sp,fp
  8105e8:	df000017 	ldw	fp,0(sp)
  8105ec:	dec00104 	addi	sp,sp,4
  8105f0:	f800283a 	ret

008105f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8105f4:	defffe04 	addi	sp,sp,-8
  8105f8:	dfc00115 	stw	ra,4(sp)
  8105fc:	df000015 	stw	fp,0(sp)
  810600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810604:	d0a00b17 	ldw	r2,-32724(gp)
  810608:	10000326 	beq	r2,zero,810618 <alt_get_errno+0x24>
  81060c:	d0a00b17 	ldw	r2,-32724(gp)
  810610:	103ee83a 	callr	r2
  810614:	00000106 	br	81061c <alt_get_errno+0x28>
  810618:	d0a7a804 	addi	r2,gp,-24928
}
  81061c:	e037883a 	mov	sp,fp
  810620:	dfc00117 	ldw	ra,4(sp)
  810624:	df000017 	ldw	fp,0(sp)
  810628:	dec00204 	addi	sp,sp,8
  81062c:	f800283a 	ret

00810630 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810630:	defffb04 	addi	sp,sp,-20
  810634:	dfc00415 	stw	ra,16(sp)
  810638:	df000315 	stw	fp,12(sp)
  81063c:	df000304 	addi	fp,sp,12
  810640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810644:	e0bfff17 	ldw	r2,-4(fp)
  810648:	10000616 	blt	r2,zero,810664 <close+0x34>
  81064c:	e0bfff17 	ldw	r2,-4(fp)
  810650:	10c00324 	muli	r3,r2,12
  810654:	00802074 	movhi	r2,129
  810658:	10957c04 	addi	r2,r2,22000
  81065c:	1885883a 	add	r2,r3,r2
  810660:	00000106 	br	810668 <close+0x38>
  810664:	0005883a 	mov	r2,zero
  810668:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  81066c:	e0bffd17 	ldw	r2,-12(fp)
  810670:	10001926 	beq	r2,zero,8106d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810674:	e0bffd17 	ldw	r2,-12(fp)
  810678:	10800017 	ldw	r2,0(r2)
  81067c:	10800417 	ldw	r2,16(r2)
  810680:	10000626 	beq	r2,zero,81069c <close+0x6c>
  810684:	e0bffd17 	ldw	r2,-12(fp)
  810688:	10800017 	ldw	r2,0(r2)
  81068c:	10800417 	ldw	r2,16(r2)
  810690:	e13ffd17 	ldw	r4,-12(fp)
  810694:	103ee83a 	callr	r2
  810698:	00000106 	br	8106a0 <close+0x70>
  81069c:	0005883a 	mov	r2,zero
  8106a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8106a4:	e13fff17 	ldw	r4,-4(fp)
  8106a8:	0810f440 	call	810f44 <alt_release_fd>
    if (rval < 0)
  8106ac:	e0bffe17 	ldw	r2,-8(fp)
  8106b0:	1000070e 	bge	r2,zero,8106d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8106b4:	08105f40 	call	8105f4 <alt_get_errno>
  8106b8:	1007883a 	mov	r3,r2
  8106bc:	e0bffe17 	ldw	r2,-8(fp)
  8106c0:	0085c83a 	sub	r2,zero,r2
  8106c4:	18800015 	stw	r2,0(r3)
      return -1;
  8106c8:	00bfffc4 	movi	r2,-1
  8106cc:	00000706 	br	8106ec <close+0xbc>
    }
    return 0;
  8106d0:	0005883a 	mov	r2,zero
  8106d4:	00000506 	br	8106ec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8106d8:	08105f40 	call	8105f4 <alt_get_errno>
  8106dc:	1007883a 	mov	r3,r2
  8106e0:	00801444 	movi	r2,81
  8106e4:	18800015 	stw	r2,0(r3)
    return -1;
  8106e8:	00bfffc4 	movi	r2,-1
  }
}
  8106ec:	e037883a 	mov	sp,fp
  8106f0:	dfc00117 	ldw	ra,4(sp)
  8106f4:	df000017 	ldw	fp,0(sp)
  8106f8:	dec00204 	addi	sp,sp,8
  8106fc:	f800283a 	ret

00810700 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810700:	defffc04 	addi	sp,sp,-16
  810704:	df000315 	stw	fp,12(sp)
  810708:	df000304 	addi	fp,sp,12
  81070c:	e13ffd15 	stw	r4,-12(fp)
  810710:	e17ffe15 	stw	r5,-8(fp)
  810714:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810718:	e0bfff17 	ldw	r2,-4(fp)
}
  81071c:	e037883a 	mov	sp,fp
  810720:	df000017 	ldw	fp,0(sp)
  810724:	dec00104 	addi	sp,sp,4
  810728:	f800283a 	ret

0081072c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81072c:	defffe04 	addi	sp,sp,-8
  810730:	dfc00115 	stw	ra,4(sp)
  810734:	df000015 	stw	fp,0(sp)
  810738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81073c:	d0a00b17 	ldw	r2,-32724(gp)
  810740:	10000326 	beq	r2,zero,810750 <alt_get_errno+0x24>
  810744:	d0a00b17 	ldw	r2,-32724(gp)
  810748:	103ee83a 	callr	r2
  81074c:	00000106 	br	810754 <alt_get_errno+0x28>
  810750:	d0a7a804 	addi	r2,gp,-24928
}
  810754:	e037883a 	mov	sp,fp
  810758:	dfc00117 	ldw	ra,4(sp)
  81075c:	df000017 	ldw	fp,0(sp)
  810760:	dec00204 	addi	sp,sp,8
  810764:	f800283a 	ret

00810768 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810768:	defffb04 	addi	sp,sp,-20
  81076c:	dfc00415 	stw	ra,16(sp)
  810770:	df000315 	stw	fp,12(sp)
  810774:	df000304 	addi	fp,sp,12
  810778:	e13ffe15 	stw	r4,-8(fp)
  81077c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810780:	e0bffe17 	ldw	r2,-8(fp)
  810784:	10000616 	blt	r2,zero,8107a0 <fstat+0x38>
  810788:	e0bffe17 	ldw	r2,-8(fp)
  81078c:	10c00324 	muli	r3,r2,12
  810790:	00802074 	movhi	r2,129
  810794:	10957c04 	addi	r2,r2,22000
  810798:	1885883a 	add	r2,r3,r2
  81079c:	00000106 	br	8107a4 <fstat+0x3c>
  8107a0:	0005883a 	mov	r2,zero
  8107a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8107a8:	e0bffd17 	ldw	r2,-12(fp)
  8107ac:	10001026 	beq	r2,zero,8107f0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8107b0:	e0bffd17 	ldw	r2,-12(fp)
  8107b4:	10800017 	ldw	r2,0(r2)
  8107b8:	10800817 	ldw	r2,32(r2)
  8107bc:	10000726 	beq	r2,zero,8107dc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8107c0:	e0bffd17 	ldw	r2,-12(fp)
  8107c4:	10800017 	ldw	r2,0(r2)
  8107c8:	10800817 	ldw	r2,32(r2)
  8107cc:	e17fff17 	ldw	r5,-4(fp)
  8107d0:	e13ffd17 	ldw	r4,-12(fp)
  8107d4:	103ee83a 	callr	r2
  8107d8:	00000a06 	br	810804 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8107dc:	e0bfff17 	ldw	r2,-4(fp)
  8107e0:	00c80004 	movi	r3,8192
  8107e4:	10c00115 	stw	r3,4(r2)
      return 0;
  8107e8:	0005883a 	mov	r2,zero
  8107ec:	00000506 	br	810804 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8107f0:	081072c0 	call	81072c <alt_get_errno>
  8107f4:	1007883a 	mov	r3,r2
  8107f8:	00801444 	movi	r2,81
  8107fc:	18800015 	stw	r2,0(r3)
    return -1;
  810800:	00bfffc4 	movi	r2,-1
  }
}
  810804:	e037883a 	mov	sp,fp
  810808:	dfc00117 	ldw	ra,4(sp)
  81080c:	df000017 	ldw	fp,0(sp)
  810810:	dec00204 	addi	sp,sp,8
  810814:	f800283a 	ret

00810818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810818:	defffe04 	addi	sp,sp,-8
  81081c:	dfc00115 	stw	ra,4(sp)
  810820:	df000015 	stw	fp,0(sp)
  810824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810828:	d0a00b17 	ldw	r2,-32724(gp)
  81082c:	10000326 	beq	r2,zero,81083c <alt_get_errno+0x24>
  810830:	d0a00b17 	ldw	r2,-32724(gp)
  810834:	103ee83a 	callr	r2
  810838:	00000106 	br	810840 <alt_get_errno+0x28>
  81083c:	d0a7a804 	addi	r2,gp,-24928
}
  810840:	e037883a 	mov	sp,fp
  810844:	dfc00117 	ldw	ra,4(sp)
  810848:	df000017 	ldw	fp,0(sp)
  81084c:	dec00204 	addi	sp,sp,8
  810850:	f800283a 	ret

00810854 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810854:	deffed04 	addi	sp,sp,-76
  810858:	dfc01215 	stw	ra,72(sp)
  81085c:	df001115 	stw	fp,68(sp)
  810860:	df001104 	addi	fp,sp,68
  810864:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810868:	e0bfff17 	ldw	r2,-4(fp)
  81086c:	10000616 	blt	r2,zero,810888 <isatty+0x34>
  810870:	e0bfff17 	ldw	r2,-4(fp)
  810874:	10c00324 	muli	r3,r2,12
  810878:	00802074 	movhi	r2,129
  81087c:	10957c04 	addi	r2,r2,22000
  810880:	1885883a 	add	r2,r3,r2
  810884:	00000106 	br	81088c <isatty+0x38>
  810888:	0005883a 	mov	r2,zero
  81088c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  810890:	e0bfef17 	ldw	r2,-68(fp)
  810894:	10000e26 	beq	r2,zero,8108d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810898:	e0bfef17 	ldw	r2,-68(fp)
  81089c:	10800017 	ldw	r2,0(r2)
  8108a0:	10800817 	ldw	r2,32(r2)
  8108a4:	1000021e 	bne	r2,zero,8108b0 <isatty+0x5c>
    {
      return 1;
  8108a8:	00800044 	movi	r2,1
  8108ac:	00000d06 	br	8108e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8108b0:	e0bff004 	addi	r2,fp,-64
  8108b4:	100b883a 	mov	r5,r2
  8108b8:	e13fff17 	ldw	r4,-4(fp)
  8108bc:	08107680 	call	810768 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8108c0:	e0bff117 	ldw	r2,-60(fp)
  8108c4:	10880020 	cmpeqi	r2,r2,8192
  8108c8:	10803fcc 	andi	r2,r2,255
  8108cc:	00000506 	br	8108e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8108d0:	08108180 	call	810818 <alt_get_errno>
  8108d4:	1007883a 	mov	r3,r2
  8108d8:	00801444 	movi	r2,81
  8108dc:	18800015 	stw	r2,0(r3)
    return 0;
  8108e0:	0005883a 	mov	r2,zero
  }
}
  8108e4:	e037883a 	mov	sp,fp
  8108e8:	dfc00117 	ldw	ra,4(sp)
  8108ec:	df000017 	ldw	fp,0(sp)
  8108f0:	dec00204 	addi	sp,sp,8
  8108f4:	f800283a 	ret

008108f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8108f8:	defffc04 	addi	sp,sp,-16
  8108fc:	df000315 	stw	fp,12(sp)
  810900:	df000304 	addi	fp,sp,12
  810904:	e13ffd15 	stw	r4,-12(fp)
  810908:	e17ffe15 	stw	r5,-8(fp)
  81090c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810910:	e0fffe17 	ldw	r3,-8(fp)
  810914:	e0bffd17 	ldw	r2,-12(fp)
  810918:	18800c26 	beq	r3,r2,81094c <alt_load_section+0x54>
  {
    while( to != end )
  81091c:	00000806 	br	810940 <alt_load_section+0x48>
    {
      *to++ = *from++;
  810920:	e0bffe17 	ldw	r2,-8(fp)
  810924:	10c00104 	addi	r3,r2,4
  810928:	e0fffe15 	stw	r3,-8(fp)
  81092c:	e0fffd17 	ldw	r3,-12(fp)
  810930:	19000104 	addi	r4,r3,4
  810934:	e13ffd15 	stw	r4,-12(fp)
  810938:	18c00017 	ldw	r3,0(r3)
  81093c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810940:	e0fffe17 	ldw	r3,-8(fp)
  810944:	e0bfff17 	ldw	r2,-4(fp)
  810948:	18bff51e 	bne	r3,r2,810920 <__alt_mem_onchip_mem+0xff790920>
    {
      *to++ = *from++;
    }
  }
}
  81094c:	0001883a 	nop
  810950:	e037883a 	mov	sp,fp
  810954:	df000017 	ldw	fp,0(sp)
  810958:	dec00104 	addi	sp,sp,4
  81095c:	f800283a 	ret

00810960 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810960:	defffe04 	addi	sp,sp,-8
  810964:	dfc00115 	stw	ra,4(sp)
  810968:	df000015 	stw	fp,0(sp)
  81096c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810970:	01802074 	movhi	r6,129
  810974:	319a7f04 	addi	r6,r6,27132
  810978:	01402074 	movhi	r5,129
  81097c:	29534904 	addi	r5,r5,19748
  810980:	01002074 	movhi	r4,129
  810984:	211a7f04 	addi	r4,r4,27132
  810988:	08108f80 	call	8108f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  81098c:	01802034 	movhi	r6,128
  810990:	31809104 	addi	r6,r6,580
  810994:	01402034 	movhi	r5,128
  810998:	29400804 	addi	r5,r5,32
  81099c:	01002034 	movhi	r4,128
  8109a0:	21000804 	addi	r4,r4,32
  8109a4:	08108f80 	call	8108f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8109a8:	01802074 	movhi	r6,129
  8109ac:	31934904 	addi	r6,r6,19748
  8109b0:	01402074 	movhi	r5,129
  8109b4:	29517b04 	addi	r5,r5,17900
  8109b8:	01002074 	movhi	r4,129
  8109bc:	21117b04 	addi	r4,r4,17900
  8109c0:	08108f80 	call	8108f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8109c4:	08137480 	call	813748 <alt_dcache_flush_all>
  alt_icache_flush_all();
  8109c8:	0813b6c0 	call	813b6c <alt_icache_flush_all>
}
  8109cc:	0001883a 	nop
  8109d0:	e037883a 	mov	sp,fp
  8109d4:	dfc00117 	ldw	ra,4(sp)
  8109d8:	df000017 	ldw	fp,0(sp)
  8109dc:	dec00204 	addi	sp,sp,8
  8109e0:	f800283a 	ret

008109e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8109e4:	defffe04 	addi	sp,sp,-8
  8109e8:	dfc00115 	stw	ra,4(sp)
  8109ec:	df000015 	stw	fp,0(sp)
  8109f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8109f4:	d0a00b17 	ldw	r2,-32724(gp)
  8109f8:	10000326 	beq	r2,zero,810a08 <alt_get_errno+0x24>
  8109fc:	d0a00b17 	ldw	r2,-32724(gp)
  810a00:	103ee83a 	callr	r2
  810a04:	00000106 	br	810a0c <alt_get_errno+0x28>
  810a08:	d0a7a804 	addi	r2,gp,-24928
}
  810a0c:	e037883a 	mov	sp,fp
  810a10:	dfc00117 	ldw	ra,4(sp)
  810a14:	df000017 	ldw	fp,0(sp)
  810a18:	dec00204 	addi	sp,sp,8
  810a1c:	f800283a 	ret

00810a20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810a20:	defff904 	addi	sp,sp,-28
  810a24:	dfc00615 	stw	ra,24(sp)
  810a28:	df000515 	stw	fp,20(sp)
  810a2c:	df000504 	addi	fp,sp,20
  810a30:	e13ffd15 	stw	r4,-12(fp)
  810a34:	e17ffe15 	stw	r5,-8(fp)
  810a38:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810a3c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810a40:	e0bffd17 	ldw	r2,-12(fp)
  810a44:	10000616 	blt	r2,zero,810a60 <lseek+0x40>
  810a48:	e0bffd17 	ldw	r2,-12(fp)
  810a4c:	10c00324 	muli	r3,r2,12
  810a50:	00802074 	movhi	r2,129
  810a54:	10957c04 	addi	r2,r2,22000
  810a58:	1885883a 	add	r2,r3,r2
  810a5c:	00000106 	br	810a64 <lseek+0x44>
  810a60:	0005883a 	mov	r2,zero
  810a64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  810a68:	e0bffc17 	ldw	r2,-16(fp)
  810a6c:	10001026 	beq	r2,zero,810ab0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810a70:	e0bffc17 	ldw	r2,-16(fp)
  810a74:	10800017 	ldw	r2,0(r2)
  810a78:	10800717 	ldw	r2,28(r2)
  810a7c:	10000926 	beq	r2,zero,810aa4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810a80:	e0bffc17 	ldw	r2,-16(fp)
  810a84:	10800017 	ldw	r2,0(r2)
  810a88:	10800717 	ldw	r2,28(r2)
  810a8c:	e1bfff17 	ldw	r6,-4(fp)
  810a90:	e17ffe17 	ldw	r5,-8(fp)
  810a94:	e13ffc17 	ldw	r4,-16(fp)
  810a98:	103ee83a 	callr	r2
  810a9c:	e0bffb15 	stw	r2,-20(fp)
  810aa0:	00000506 	br	810ab8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810aa4:	00bfde84 	movi	r2,-134
  810aa8:	e0bffb15 	stw	r2,-20(fp)
  810aac:	00000206 	br	810ab8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  810ab0:	00bfebc4 	movi	r2,-81
  810ab4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  810ab8:	e0bffb17 	ldw	r2,-20(fp)
  810abc:	1000070e 	bge	r2,zero,810adc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  810ac0:	08109e40 	call	8109e4 <alt_get_errno>
  810ac4:	1007883a 	mov	r3,r2
  810ac8:	e0bffb17 	ldw	r2,-20(fp)
  810acc:	0085c83a 	sub	r2,zero,r2
  810ad0:	18800015 	stw	r2,0(r3)
    rc = -1;
  810ad4:	00bfffc4 	movi	r2,-1
  810ad8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  810adc:	e0bffb17 	ldw	r2,-20(fp)
}
  810ae0:	e037883a 	mov	sp,fp
  810ae4:	dfc00117 	ldw	ra,4(sp)
  810ae8:	df000017 	ldw	fp,0(sp)
  810aec:	dec00204 	addi	sp,sp,8
  810af0:	f800283a 	ret

00810af4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810af4:	defffd04 	addi	sp,sp,-12
  810af8:	dfc00215 	stw	ra,8(sp)
  810afc:	df000115 	stw	fp,4(sp)
  810b00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810b04:	0009883a 	mov	r4,zero
  810b08:	08113640 	call	811364 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  810b0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810b10:	081139c0 	call	81139c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810b14:	01802074 	movhi	r6,129
  810b18:	31929b04 	addi	r6,r6,19052
  810b1c:	01402074 	movhi	r5,129
  810b20:	29529b04 	addi	r5,r5,19052
  810b24:	01002074 	movhi	r4,129
  810b28:	21129b04 	addi	r4,r4,19052
  810b2c:	0813f040 	call	813f04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810b30:	08138700 	call	813870 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810b34:	01002074 	movhi	r4,129
  810b38:	210e3404 	addi	r4,r4,14544
  810b3c:	08142580 	call	814258 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810b40:	d0a7af17 	ldw	r2,-24900(gp)
  810b44:	d0e7b017 	ldw	r3,-24896(gp)
  810b48:	d127b117 	ldw	r4,-24892(gp)
  810b4c:	200d883a 	mov	r6,r4
  810b50:	180b883a 	mov	r5,r3
  810b54:	1009883a 	mov	r4,r2
  810b58:	0800d100 	call	800d10 <main>
  810b5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810b60:	01000044 	movi	r4,1
  810b64:	08106300 	call	810630 <close>
  exit (result);
  810b68:	e13fff17 	ldw	r4,-4(fp)
  810b6c:	081426c0 	call	81426c <exit>

00810b70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810b70:	defffe04 	addi	sp,sp,-8
  810b74:	df000115 	stw	fp,4(sp)
  810b78:	df000104 	addi	fp,sp,4
  810b7c:	e13fff15 	stw	r4,-4(fp)
}
  810b80:	0001883a 	nop
  810b84:	e037883a 	mov	sp,fp
  810b88:	df000017 	ldw	fp,0(sp)
  810b8c:	dec00104 	addi	sp,sp,4
  810b90:	f800283a 	ret

00810b94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810b94:	defffe04 	addi	sp,sp,-8
  810b98:	df000115 	stw	fp,4(sp)
  810b9c:	df000104 	addi	fp,sp,4
  810ba0:	e13fff15 	stw	r4,-4(fp)
}
  810ba4:	0001883a 	nop
  810ba8:	e037883a 	mov	sp,fp
  810bac:	df000017 	ldw	fp,0(sp)
  810bb0:	dec00104 	addi	sp,sp,4
  810bb4:	f800283a 	ret

00810bb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810bb8:	defffe04 	addi	sp,sp,-8
  810bbc:	dfc00115 	stw	ra,4(sp)
  810bc0:	df000015 	stw	fp,0(sp)
  810bc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810bc8:	d0a00b17 	ldw	r2,-32724(gp)
  810bcc:	10000326 	beq	r2,zero,810bdc <alt_get_errno+0x24>
  810bd0:	d0a00b17 	ldw	r2,-32724(gp)
  810bd4:	103ee83a 	callr	r2
  810bd8:	00000106 	br	810be0 <alt_get_errno+0x28>
  810bdc:	d0a7a804 	addi	r2,gp,-24928
}
  810be0:	e037883a 	mov	sp,fp
  810be4:	dfc00117 	ldw	ra,4(sp)
  810be8:	df000017 	ldw	fp,0(sp)
  810bec:	dec00204 	addi	sp,sp,8
  810bf0:	f800283a 	ret

00810bf4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810bf4:	defffd04 	addi	sp,sp,-12
  810bf8:	df000215 	stw	fp,8(sp)
  810bfc:	df000204 	addi	fp,sp,8
  810c00:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810c04:	e0bfff17 	ldw	r2,-4(fp)
  810c08:	10800217 	ldw	r2,8(r2)
  810c0c:	10d00034 	orhi	r3,r2,16384
  810c10:	e0bfff17 	ldw	r2,-4(fp)
  810c14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810c18:	e03ffe15 	stw	zero,-8(fp)
  810c1c:	00001d06 	br	810c94 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810c20:	00802074 	movhi	r2,129
  810c24:	10957c04 	addi	r2,r2,22000
  810c28:	e0fffe17 	ldw	r3,-8(fp)
  810c2c:	18c00324 	muli	r3,r3,12
  810c30:	10c5883a 	add	r2,r2,r3
  810c34:	10c00017 	ldw	r3,0(r2)
  810c38:	e0bfff17 	ldw	r2,-4(fp)
  810c3c:	10800017 	ldw	r2,0(r2)
  810c40:	1880111e 	bne	r3,r2,810c88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810c44:	00802074 	movhi	r2,129
  810c48:	10957c04 	addi	r2,r2,22000
  810c4c:	e0fffe17 	ldw	r3,-8(fp)
  810c50:	18c00324 	muli	r3,r3,12
  810c54:	10c5883a 	add	r2,r2,r3
  810c58:	10800204 	addi	r2,r2,8
  810c5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810c60:	1000090e 	bge	r2,zero,810c88 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  810c64:	e0bffe17 	ldw	r2,-8(fp)
  810c68:	10c00324 	muli	r3,r2,12
  810c6c:	00802074 	movhi	r2,129
  810c70:	10957c04 	addi	r2,r2,22000
  810c74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810c78:	e0bfff17 	ldw	r2,-4(fp)
  810c7c:	18800226 	beq	r3,r2,810c88 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810c80:	00bffcc4 	movi	r2,-13
  810c84:	00000806 	br	810ca8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	10800044 	addi	r2,r2,1
  810c90:	e0bffe15 	stw	r2,-8(fp)
  810c94:	d0a00a17 	ldw	r2,-32728(gp)
  810c98:	1007883a 	mov	r3,r2
  810c9c:	e0bffe17 	ldw	r2,-8(fp)
  810ca0:	18bfdf2e 	bgeu	r3,r2,810c20 <__alt_mem_onchip_mem+0xff790c20>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810ca4:	0005883a 	mov	r2,zero
}
  810ca8:	e037883a 	mov	sp,fp
  810cac:	df000017 	ldw	fp,0(sp)
  810cb0:	dec00104 	addi	sp,sp,4
  810cb4:	f800283a 	ret

00810cb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810cb8:	defff604 	addi	sp,sp,-40
  810cbc:	dfc00915 	stw	ra,36(sp)
  810cc0:	df000815 	stw	fp,32(sp)
  810cc4:	df000804 	addi	fp,sp,32
  810cc8:	e13ffd15 	stw	r4,-12(fp)
  810ccc:	e17ffe15 	stw	r5,-8(fp)
  810cd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810cd4:	00bfffc4 	movi	r2,-1
  810cd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  810cdc:	00bffb44 	movi	r2,-19
  810ce0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  810ce4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810ce8:	d1600804 	addi	r5,gp,-32736
  810cec:	e13ffd17 	ldw	r4,-12(fp)
  810cf0:	08139300 	call	813930 <alt_find_dev>
  810cf4:	e0bff815 	stw	r2,-32(fp)
  810cf8:	e0bff817 	ldw	r2,-32(fp)
  810cfc:	1000051e 	bne	r2,zero,810d14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810d00:	e13ffd17 	ldw	r4,-12(fp)
  810d04:	08139c00 	call	8139c0 <alt_find_file>
  810d08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  810d0c:	00800044 	movi	r2,1
  810d10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810d14:	e0bff817 	ldw	r2,-32(fp)
  810d18:	10002926 	beq	r2,zero,810dc0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810d1c:	e13ff817 	ldw	r4,-32(fp)
  810d20:	0813ac80 	call	813ac8 <alt_get_fd>
  810d24:	e0bff915 	stw	r2,-28(fp)
  810d28:	e0bff917 	ldw	r2,-28(fp)
  810d2c:	1000030e 	bge	r2,zero,810d3c <open+0x84>
    {
      status = index;
  810d30:	e0bff917 	ldw	r2,-28(fp)
  810d34:	e0bffa15 	stw	r2,-24(fp)
  810d38:	00002306 	br	810dc8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  810d3c:	e0bff917 	ldw	r2,-28(fp)
  810d40:	10c00324 	muli	r3,r2,12
  810d44:	00802074 	movhi	r2,129
  810d48:	10957c04 	addi	r2,r2,22000
  810d4c:	1885883a 	add	r2,r3,r2
  810d50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810d54:	e0fffe17 	ldw	r3,-8(fp)
  810d58:	00900034 	movhi	r2,16384
  810d5c:	10bfffc4 	addi	r2,r2,-1
  810d60:	1886703a 	and	r3,r3,r2
  810d64:	e0bffc17 	ldw	r2,-16(fp)
  810d68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810d6c:	e0bffb17 	ldw	r2,-20(fp)
  810d70:	1000051e 	bne	r2,zero,810d88 <open+0xd0>
  810d74:	e13ffc17 	ldw	r4,-16(fp)
  810d78:	0810bf40 	call	810bf4 <alt_file_locked>
  810d7c:	e0bffa15 	stw	r2,-24(fp)
  810d80:	e0bffa17 	ldw	r2,-24(fp)
  810d84:	10001016 	blt	r2,zero,810dc8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810d88:	e0bff817 	ldw	r2,-32(fp)
  810d8c:	10800317 	ldw	r2,12(r2)
  810d90:	10000826 	beq	r2,zero,810db4 <open+0xfc>
  810d94:	e0bff817 	ldw	r2,-32(fp)
  810d98:	10800317 	ldw	r2,12(r2)
  810d9c:	e1ffff17 	ldw	r7,-4(fp)
  810da0:	e1bffe17 	ldw	r6,-8(fp)
  810da4:	e17ffd17 	ldw	r5,-12(fp)
  810da8:	e13ffc17 	ldw	r4,-16(fp)
  810dac:	103ee83a 	callr	r2
  810db0:	00000106 	br	810db8 <open+0x100>
  810db4:	0005883a 	mov	r2,zero
  810db8:	e0bffa15 	stw	r2,-24(fp)
  810dbc:	00000206 	br	810dc8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810dc0:	00bffb44 	movi	r2,-19
  810dc4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810dc8:	e0bffa17 	ldw	r2,-24(fp)
  810dcc:	1000090e 	bge	r2,zero,810df4 <open+0x13c>
  {
    alt_release_fd (index);  
  810dd0:	e13ff917 	ldw	r4,-28(fp)
  810dd4:	0810f440 	call	810f44 <alt_release_fd>
    ALT_ERRNO = -status;
  810dd8:	0810bb80 	call	810bb8 <alt_get_errno>
  810ddc:	1007883a 	mov	r3,r2
  810de0:	e0bffa17 	ldw	r2,-24(fp)
  810de4:	0085c83a 	sub	r2,zero,r2
  810de8:	18800015 	stw	r2,0(r3)
    return -1;
  810dec:	00bfffc4 	movi	r2,-1
  810df0:	00000106 	br	810df8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  810df4:	e0bff917 	ldw	r2,-28(fp)
}
  810df8:	e037883a 	mov	sp,fp
  810dfc:	dfc00117 	ldw	ra,4(sp)
  810e00:	df000017 	ldw	fp,0(sp)
  810e04:	dec00204 	addi	sp,sp,8
  810e08:	f800283a 	ret

00810e0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810e0c:	defffe04 	addi	sp,sp,-8
  810e10:	dfc00115 	stw	ra,4(sp)
  810e14:	df000015 	stw	fp,0(sp)
  810e18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810e1c:	d0a00b17 	ldw	r2,-32724(gp)
  810e20:	10000326 	beq	r2,zero,810e30 <alt_get_errno+0x24>
  810e24:	d0a00b17 	ldw	r2,-32724(gp)
  810e28:	103ee83a 	callr	r2
  810e2c:	00000106 	br	810e34 <alt_get_errno+0x28>
  810e30:	d0a7a804 	addi	r2,gp,-24928
}
  810e34:	e037883a 	mov	sp,fp
  810e38:	dfc00117 	ldw	ra,4(sp)
  810e3c:	df000017 	ldw	fp,0(sp)
  810e40:	dec00204 	addi	sp,sp,8
  810e44:	f800283a 	ret

00810e48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810e48:	defff904 	addi	sp,sp,-28
  810e4c:	dfc00615 	stw	ra,24(sp)
  810e50:	df000515 	stw	fp,20(sp)
  810e54:	df000504 	addi	fp,sp,20
  810e58:	e13ffd15 	stw	r4,-12(fp)
  810e5c:	e17ffe15 	stw	r5,-8(fp)
  810e60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810e64:	e0bffd17 	ldw	r2,-12(fp)
  810e68:	10000616 	blt	r2,zero,810e84 <read+0x3c>
  810e6c:	e0bffd17 	ldw	r2,-12(fp)
  810e70:	10c00324 	muli	r3,r2,12
  810e74:	00802074 	movhi	r2,129
  810e78:	10957c04 	addi	r2,r2,22000
  810e7c:	1885883a 	add	r2,r3,r2
  810e80:	00000106 	br	810e88 <read+0x40>
  810e84:	0005883a 	mov	r2,zero
  810e88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810e8c:	e0bffb17 	ldw	r2,-20(fp)
  810e90:	10002226 	beq	r2,zero,810f1c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810e94:	e0bffb17 	ldw	r2,-20(fp)
  810e98:	10800217 	ldw	r2,8(r2)
  810e9c:	108000cc 	andi	r2,r2,3
  810ea0:	10800060 	cmpeqi	r2,r2,1
  810ea4:	1000181e 	bne	r2,zero,810f08 <read+0xc0>
        (fd->dev->read))
  810ea8:	e0bffb17 	ldw	r2,-20(fp)
  810eac:	10800017 	ldw	r2,0(r2)
  810eb0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810eb4:	10001426 	beq	r2,zero,810f08 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810eb8:	e0bffb17 	ldw	r2,-20(fp)
  810ebc:	10800017 	ldw	r2,0(r2)
  810ec0:	10800517 	ldw	r2,20(r2)
  810ec4:	e0ffff17 	ldw	r3,-4(fp)
  810ec8:	180d883a 	mov	r6,r3
  810ecc:	e17ffe17 	ldw	r5,-8(fp)
  810ed0:	e13ffb17 	ldw	r4,-20(fp)
  810ed4:	103ee83a 	callr	r2
  810ed8:	e0bffc15 	stw	r2,-16(fp)
  810edc:	e0bffc17 	ldw	r2,-16(fp)
  810ee0:	1000070e 	bge	r2,zero,810f00 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  810ee4:	0810e0c0 	call	810e0c <alt_get_errno>
  810ee8:	1007883a 	mov	r3,r2
  810eec:	e0bffc17 	ldw	r2,-16(fp)
  810ef0:	0085c83a 	sub	r2,zero,r2
  810ef4:	18800015 	stw	r2,0(r3)
          return -1;
  810ef8:	00bfffc4 	movi	r2,-1
  810efc:	00000c06 	br	810f30 <read+0xe8>
        }
        return rval;
  810f00:	e0bffc17 	ldw	r2,-16(fp)
  810f04:	00000a06 	br	810f30 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810f08:	0810e0c0 	call	810e0c <alt_get_errno>
  810f0c:	1007883a 	mov	r3,r2
  810f10:	00800344 	movi	r2,13
  810f14:	18800015 	stw	r2,0(r3)
  810f18:	00000406 	br	810f2c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  810f1c:	0810e0c0 	call	810e0c <alt_get_errno>
  810f20:	1007883a 	mov	r3,r2
  810f24:	00801444 	movi	r2,81
  810f28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810f2c:	00bfffc4 	movi	r2,-1
}
  810f30:	e037883a 	mov	sp,fp
  810f34:	dfc00117 	ldw	ra,4(sp)
  810f38:	df000017 	ldw	fp,0(sp)
  810f3c:	dec00204 	addi	sp,sp,8
  810f40:	f800283a 	ret

00810f44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  810f44:	defffe04 	addi	sp,sp,-8
  810f48:	df000115 	stw	fp,4(sp)
  810f4c:	df000104 	addi	fp,sp,4
  810f50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  810f54:	e0bfff17 	ldw	r2,-4(fp)
  810f58:	108000d0 	cmplti	r2,r2,3
  810f5c:	10000d1e 	bne	r2,zero,810f94 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  810f60:	00802074 	movhi	r2,129
  810f64:	10957c04 	addi	r2,r2,22000
  810f68:	e0ffff17 	ldw	r3,-4(fp)
  810f6c:	18c00324 	muli	r3,r3,12
  810f70:	10c5883a 	add	r2,r2,r3
  810f74:	10800204 	addi	r2,r2,8
  810f78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  810f7c:	00802074 	movhi	r2,129
  810f80:	10957c04 	addi	r2,r2,22000
  810f84:	e0ffff17 	ldw	r3,-4(fp)
  810f88:	18c00324 	muli	r3,r3,12
  810f8c:	10c5883a 	add	r2,r2,r3
  810f90:	10000015 	stw	zero,0(r2)
  }
}
  810f94:	0001883a 	nop
  810f98:	e037883a 	mov	sp,fp
  810f9c:	df000017 	ldw	fp,0(sp)
  810fa0:	dec00104 	addi	sp,sp,4
  810fa4:	f800283a 	ret

00810fa8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810fa8:	defff904 	addi	sp,sp,-28
  810fac:	df000615 	stw	fp,24(sp)
  810fb0:	df000604 	addi	fp,sp,24
  810fb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810fb8:	0005303a 	rdctl	r2,status
  810fbc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810fc0:	e0fffe17 	ldw	r3,-8(fp)
  810fc4:	00bfff84 	movi	r2,-2
  810fc8:	1884703a 	and	r2,r3,r2
  810fcc:	1001703a 	wrctl	status,r2
  
  return context;
  810fd0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810fd4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810fd8:	d0a00c17 	ldw	r2,-32720(gp)
  810fdc:	10c000c4 	addi	r3,r2,3
  810fe0:	00bfff04 	movi	r2,-4
  810fe4:	1884703a 	and	r2,r3,r2
  810fe8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  810fec:	d0e00c17 	ldw	r3,-32720(gp)
  810ff0:	e0bfff17 	ldw	r2,-4(fp)
  810ff4:	1887883a 	add	r3,r3,r2
  810ff8:	00804034 	movhi	r2,256
  810ffc:	10800004 	addi	r2,r2,0
  811000:	10c0062e 	bgeu	r2,r3,81101c <sbrk+0x74>
  811004:	e0bffb17 	ldw	r2,-20(fp)
  811008:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81100c:	e0bffa17 	ldw	r2,-24(fp)
  811010:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811014:	00bfffc4 	movi	r2,-1
  811018:	00000b06 	br	811048 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81101c:	d0a00c17 	ldw	r2,-32720(gp)
  811020:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  811024:	d0e00c17 	ldw	r3,-32720(gp)
  811028:	e0bfff17 	ldw	r2,-4(fp)
  81102c:	1885883a 	add	r2,r3,r2
  811030:	d0a00c15 	stw	r2,-32720(gp)
  811034:	e0bffb17 	ldw	r2,-20(fp)
  811038:	e0bffc15 	stw	r2,-16(fp)
  81103c:	e0bffc17 	ldw	r2,-16(fp)
  811040:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  811044:	e0bffd17 	ldw	r2,-12(fp)
} 
  811048:	e037883a 	mov	sp,fp
  81104c:	df000017 	ldw	fp,0(sp)
  811050:	dec00104 	addi	sp,sp,4
  811054:	f800283a 	ret

00811058 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  811058:	defffa04 	addi	sp,sp,-24
  81105c:	df000515 	stw	fp,20(sp)
  811060:	df000504 	addi	fp,sp,20
  811064:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811068:	0005303a 	rdctl	r2,status
  81106c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811070:	e0fffc17 	ldw	r3,-16(fp)
  811074:	00bfff84 	movi	r2,-2
  811078:	1884703a 	and	r2,r3,r2
  81107c:	1001703a 	wrctl	status,r2
  
  return context;
  811080:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811084:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  811088:	e0bfff17 	ldw	r2,-4(fp)
  81108c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811090:	e0bffd17 	ldw	r2,-12(fp)
  811094:	10800017 	ldw	r2,0(r2)
  811098:	e0fffd17 	ldw	r3,-12(fp)
  81109c:	18c00117 	ldw	r3,4(r3)
  8110a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8110a4:	e0bffd17 	ldw	r2,-12(fp)
  8110a8:	10800117 	ldw	r2,4(r2)
  8110ac:	e0fffd17 	ldw	r3,-12(fp)
  8110b0:	18c00017 	ldw	r3,0(r3)
  8110b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8110b8:	e0bffd17 	ldw	r2,-12(fp)
  8110bc:	e0fffd17 	ldw	r3,-12(fp)
  8110c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8110c4:	e0bffd17 	ldw	r2,-12(fp)
  8110c8:	e0fffd17 	ldw	r3,-12(fp)
  8110cc:	10c00015 	stw	r3,0(r2)
  8110d0:	e0bffb17 	ldw	r2,-20(fp)
  8110d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110d8:	e0bffe17 	ldw	r2,-8(fp)
  8110dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8110e0:	0001883a 	nop
  8110e4:	e037883a 	mov	sp,fp
  8110e8:	df000017 	ldw	fp,0(sp)
  8110ec:	dec00104 	addi	sp,sp,4
  8110f0:	f800283a 	ret

008110f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8110f4:	defffb04 	addi	sp,sp,-20
  8110f8:	dfc00415 	stw	ra,16(sp)
  8110fc:	df000315 	stw	fp,12(sp)
  811100:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811104:	d0a00d17 	ldw	r2,-32716(gp)
  811108:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81110c:	d0a7b317 	ldw	r2,-24884(gp)
  811110:	10800044 	addi	r2,r2,1
  811114:	d0a7b315 	stw	r2,-24884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811118:	00002e06 	br	8111d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81111c:	e0bffd17 	ldw	r2,-12(fp)
  811120:	10800017 	ldw	r2,0(r2)
  811124:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811128:	e0bffd17 	ldw	r2,-12(fp)
  81112c:	10800403 	ldbu	r2,16(r2)
  811130:	10803fcc 	andi	r2,r2,255
  811134:	10000426 	beq	r2,zero,811148 <alt_tick+0x54>
  811138:	d0a7b317 	ldw	r2,-24884(gp)
  81113c:	1000021e 	bne	r2,zero,811148 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  811140:	e0bffd17 	ldw	r2,-12(fp)
  811144:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  811148:	e0bffd17 	ldw	r2,-12(fp)
  81114c:	10800217 	ldw	r2,8(r2)
  811150:	d0e7b317 	ldw	r3,-24884(gp)
  811154:	18801d36 	bltu	r3,r2,8111cc <alt_tick+0xd8>
  811158:	e0bffd17 	ldw	r2,-12(fp)
  81115c:	10800403 	ldbu	r2,16(r2)
  811160:	10803fcc 	andi	r2,r2,255
  811164:	1000191e 	bne	r2,zero,8111cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  811168:	e0bffd17 	ldw	r2,-12(fp)
  81116c:	10800317 	ldw	r2,12(r2)
  811170:	e0fffd17 	ldw	r3,-12(fp)
  811174:	18c00517 	ldw	r3,20(r3)
  811178:	1809883a 	mov	r4,r3
  81117c:	103ee83a 	callr	r2
  811180:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811184:	e0bfff17 	ldw	r2,-4(fp)
  811188:	1000031e 	bne	r2,zero,811198 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  81118c:	e13ffd17 	ldw	r4,-12(fp)
  811190:	08110580 	call	811058 <alt_alarm_stop>
  811194:	00000d06 	br	8111cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  811198:	e0bffd17 	ldw	r2,-12(fp)
  81119c:	10c00217 	ldw	r3,8(r2)
  8111a0:	e0bfff17 	ldw	r2,-4(fp)
  8111a4:	1887883a 	add	r3,r3,r2
  8111a8:	e0bffd17 	ldw	r2,-12(fp)
  8111ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8111b0:	e0bffd17 	ldw	r2,-12(fp)
  8111b4:	10c00217 	ldw	r3,8(r2)
  8111b8:	d0a7b317 	ldw	r2,-24884(gp)
  8111bc:	1880032e 	bgeu	r3,r2,8111cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8111c0:	e0bffd17 	ldw	r2,-12(fp)
  8111c4:	00c00044 	movi	r3,1
  8111c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8111cc:	e0bffe17 	ldw	r2,-8(fp)
  8111d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8111d4:	e0fffd17 	ldw	r3,-12(fp)
  8111d8:	d0a00d04 	addi	r2,gp,-32716
  8111dc:	18bfcf1e 	bne	r3,r2,81111c <__alt_mem_onchip_mem+0xff79111c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8111e0:	0001883a 	nop
}
  8111e4:	0001883a 	nop
  8111e8:	e037883a 	mov	sp,fp
  8111ec:	dfc00117 	ldw	ra,4(sp)
  8111f0:	df000017 	ldw	fp,0(sp)
  8111f4:	dec00204 	addi	sp,sp,8
  8111f8:	f800283a 	ret

008111fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8111fc:	defffe04 	addi	sp,sp,-8
  811200:	dfc00115 	stw	ra,4(sp)
  811204:	df000015 	stw	fp,0(sp)
  811208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81120c:	d0a00b17 	ldw	r2,-32724(gp)
  811210:	10000326 	beq	r2,zero,811220 <alt_get_errno+0x24>
  811214:	d0a00b17 	ldw	r2,-32724(gp)
  811218:	103ee83a 	callr	r2
  81121c:	00000106 	br	811224 <alt_get_errno+0x28>
  811220:	d0a7a804 	addi	r2,gp,-24928
}
  811224:	e037883a 	mov	sp,fp
  811228:	dfc00117 	ldw	ra,4(sp)
  81122c:	df000017 	ldw	fp,0(sp)
  811230:	dec00204 	addi	sp,sp,8
  811234:	f800283a 	ret

00811238 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811238:	defff904 	addi	sp,sp,-28
  81123c:	dfc00615 	stw	ra,24(sp)
  811240:	df000515 	stw	fp,20(sp)
  811244:	df000504 	addi	fp,sp,20
  811248:	e13ffd15 	stw	r4,-12(fp)
  81124c:	e17ffe15 	stw	r5,-8(fp)
  811250:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811254:	e0bffd17 	ldw	r2,-12(fp)
  811258:	10000616 	blt	r2,zero,811274 <write+0x3c>
  81125c:	e0bffd17 	ldw	r2,-12(fp)
  811260:	10c00324 	muli	r3,r2,12
  811264:	00802074 	movhi	r2,129
  811268:	10957c04 	addi	r2,r2,22000
  81126c:	1885883a 	add	r2,r3,r2
  811270:	00000106 	br	811278 <write+0x40>
  811274:	0005883a 	mov	r2,zero
  811278:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81127c:	e0bffb17 	ldw	r2,-20(fp)
  811280:	10002126 	beq	r2,zero,811308 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811284:	e0bffb17 	ldw	r2,-20(fp)
  811288:	10800217 	ldw	r2,8(r2)
  81128c:	108000cc 	andi	r2,r2,3
  811290:	10001826 	beq	r2,zero,8112f4 <write+0xbc>
  811294:	e0bffb17 	ldw	r2,-20(fp)
  811298:	10800017 	ldw	r2,0(r2)
  81129c:	10800617 	ldw	r2,24(r2)
  8112a0:	10001426 	beq	r2,zero,8112f4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8112a4:	e0bffb17 	ldw	r2,-20(fp)
  8112a8:	10800017 	ldw	r2,0(r2)
  8112ac:	10800617 	ldw	r2,24(r2)
  8112b0:	e0ffff17 	ldw	r3,-4(fp)
  8112b4:	180d883a 	mov	r6,r3
  8112b8:	e17ffe17 	ldw	r5,-8(fp)
  8112bc:	e13ffb17 	ldw	r4,-20(fp)
  8112c0:	103ee83a 	callr	r2
  8112c4:	e0bffc15 	stw	r2,-16(fp)
  8112c8:	e0bffc17 	ldw	r2,-16(fp)
  8112cc:	1000070e 	bge	r2,zero,8112ec <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8112d0:	08111fc0 	call	8111fc <alt_get_errno>
  8112d4:	1007883a 	mov	r3,r2
  8112d8:	e0bffc17 	ldw	r2,-16(fp)
  8112dc:	0085c83a 	sub	r2,zero,r2
  8112e0:	18800015 	stw	r2,0(r3)
        return -1;
  8112e4:	00bfffc4 	movi	r2,-1
  8112e8:	00000c06 	br	81131c <write+0xe4>
      }
      return rval;
  8112ec:	e0bffc17 	ldw	r2,-16(fp)
  8112f0:	00000a06 	br	81131c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8112f4:	08111fc0 	call	8111fc <alt_get_errno>
  8112f8:	1007883a 	mov	r3,r2
  8112fc:	00800344 	movi	r2,13
  811300:	18800015 	stw	r2,0(r3)
  811304:	00000406 	br	811318 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811308:	08111fc0 	call	8111fc <alt_get_errno>
  81130c:	1007883a 	mov	r3,r2
  811310:	00801444 	movi	r2,81
  811314:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811318:	00bfffc4 	movi	r2,-1
}
  81131c:	e037883a 	mov	sp,fp
  811320:	dfc00117 	ldw	ra,4(sp)
  811324:	df000017 	ldw	fp,0(sp)
  811328:	dec00204 	addi	sp,sp,8
  81132c:	f800283a 	ret

00811330 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  811330:	defffd04 	addi	sp,sp,-12
  811334:	dfc00215 	stw	ra,8(sp)
  811338:	df000115 	stw	fp,4(sp)
  81133c:	df000104 	addi	fp,sp,4
  811340:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  811344:	d1600804 	addi	r5,gp,-32736
  811348:	e13fff17 	ldw	r4,-4(fp)
  81134c:	08137cc0 	call	8137cc <alt_dev_llist_insert>
}
  811350:	e037883a 	mov	sp,fp
  811354:	dfc00117 	ldw	ra,4(sp)
  811358:	df000017 	ldw	fp,0(sp)
  81135c:	dec00204 	addi	sp,sp,8
  811360:	f800283a 	ret

00811364 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811364:	defffd04 	addi	sp,sp,-12
  811368:	dfc00215 	stw	ra,8(sp)
  81136c:	df000115 	stw	fp,4(sp)
  811370:	df000104 	addi	fp,sp,4
  811374:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  811378:	0813fb00 	call	813fb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81137c:	00800044 	movi	r2,1
  811380:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811384:	0001883a 	nop
  811388:	e037883a 	mov	sp,fp
  81138c:	dfc00117 	ldw	ra,4(sp)
  811390:	df000017 	ldw	fp,0(sp)
  811394:	dec00204 	addi	sp,sp,8
  811398:	f800283a 	ret

0081139c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81139c:	defffe04 	addi	sp,sp,-8
  8113a0:	dfc00115 	stw	ra,4(sp)
  8113a4:	df000015 	stw	fp,0(sp)
  8113a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  8113ac:	01c0fa04 	movi	r7,1000
  8113b0:	01800084 	movi	r6,2
  8113b4:	000b883a 	mov	r5,zero
  8113b8:	01004434 	movhi	r4,272
  8113bc:	21040804 	addi	r4,r4,4128
  8113c0:	0812df40 	call	812df4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8113c4:	01800044 	movi	r6,1
  8113c8:	000b883a 	mov	r5,zero
  8113cc:	01002074 	movhi	r4,129
  8113d0:	2115e604 	addi	r4,r4,22424
  8113d4:	081159c0 	call	81159c <altera_avalon_jtag_uart_init>
  8113d8:	01002074 	movhi	r4,129
  8113dc:	2115dc04 	addi	r4,r4,22384
  8113e0:	08113300 	call	811330 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8113e4:	01002074 	movhi	r4,129
  8113e8:	2119fe04 	addi	r4,r4,26616
  8113ec:	0812be80 	call	812be8 <altera_avalon_lcd_16207_init>
  8113f0:	01002074 	movhi	r4,129
  8113f4:	2119f404 	addi	r4,r4,26576
  8113f8:	08113300 	call	811330 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  8113fc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811400:	000d883a 	mov	r6,zero
  811404:	000b883a 	mov	r5,zero
  811408:	01002074 	movhi	r4,129
  81140c:	211a4604 	addi	r4,r4,26904
  811410:	0812f800 	call	812f80 <altera_avalon_uart_init>
  811414:	01002074 	movhi	r4,129
  811418:	211a3c04 	addi	r4,r4,26864
  81141c:	08113300 	call	811330 <alt_dev_reg>
}
  811420:	0001883a 	nop
  811424:	e037883a 	mov	sp,fp
  811428:	dfc00117 	ldw	ra,4(sp)
  81142c:	df000017 	ldw	fp,0(sp)
  811430:	dec00204 	addi	sp,sp,8
  811434:	f800283a 	ret

00811438 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811438:	defffa04 	addi	sp,sp,-24
  81143c:	dfc00515 	stw	ra,20(sp)
  811440:	df000415 	stw	fp,16(sp)
  811444:	df000404 	addi	fp,sp,16
  811448:	e13ffd15 	stw	r4,-12(fp)
  81144c:	e17ffe15 	stw	r5,-8(fp)
  811450:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811454:	e0bffd17 	ldw	r2,-12(fp)
  811458:	10800017 	ldw	r2,0(r2)
  81145c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811460:	e0bffc17 	ldw	r2,-16(fp)
  811464:	10c00a04 	addi	r3,r2,40
  811468:	e0bffd17 	ldw	r2,-12(fp)
  81146c:	10800217 	ldw	r2,8(r2)
  811470:	100f883a 	mov	r7,r2
  811474:	e1bfff17 	ldw	r6,-4(fp)
  811478:	e17ffe17 	ldw	r5,-8(fp)
  81147c:	1809883a 	mov	r4,r3
  811480:	0811a600 	call	811a60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811484:	e037883a 	mov	sp,fp
  811488:	dfc00117 	ldw	ra,4(sp)
  81148c:	df000017 	ldw	fp,0(sp)
  811490:	dec00204 	addi	sp,sp,8
  811494:	f800283a 	ret

00811498 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811498:	defffa04 	addi	sp,sp,-24
  81149c:	dfc00515 	stw	ra,20(sp)
  8114a0:	df000415 	stw	fp,16(sp)
  8114a4:	df000404 	addi	fp,sp,16
  8114a8:	e13ffd15 	stw	r4,-12(fp)
  8114ac:	e17ffe15 	stw	r5,-8(fp)
  8114b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8114b4:	e0bffd17 	ldw	r2,-12(fp)
  8114b8:	10800017 	ldw	r2,0(r2)
  8114bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8114c0:	e0bffc17 	ldw	r2,-16(fp)
  8114c4:	10c00a04 	addi	r3,r2,40
  8114c8:	e0bffd17 	ldw	r2,-12(fp)
  8114cc:	10800217 	ldw	r2,8(r2)
  8114d0:	100f883a 	mov	r7,r2
  8114d4:	e1bfff17 	ldw	r6,-4(fp)
  8114d8:	e17ffe17 	ldw	r5,-8(fp)
  8114dc:	1809883a 	mov	r4,r3
  8114e0:	0811c7c0 	call	811c7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8114e4:	e037883a 	mov	sp,fp
  8114e8:	dfc00117 	ldw	ra,4(sp)
  8114ec:	df000017 	ldw	fp,0(sp)
  8114f0:	dec00204 	addi	sp,sp,8
  8114f4:	f800283a 	ret

008114f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8114f8:	defffc04 	addi	sp,sp,-16
  8114fc:	dfc00315 	stw	ra,12(sp)
  811500:	df000215 	stw	fp,8(sp)
  811504:	df000204 	addi	fp,sp,8
  811508:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81150c:	e0bfff17 	ldw	r2,-4(fp)
  811510:	10800017 	ldw	r2,0(r2)
  811514:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811518:	e0bffe17 	ldw	r2,-8(fp)
  81151c:	10c00a04 	addi	r3,r2,40
  811520:	e0bfff17 	ldw	r2,-4(fp)
  811524:	10800217 	ldw	r2,8(r2)
  811528:	100b883a 	mov	r5,r2
  81152c:	1809883a 	mov	r4,r3
  811530:	08119080 	call	811908 <altera_avalon_jtag_uart_close>
}
  811534:	e037883a 	mov	sp,fp
  811538:	dfc00117 	ldw	ra,4(sp)
  81153c:	df000017 	ldw	fp,0(sp)
  811540:	dec00204 	addi	sp,sp,8
  811544:	f800283a 	ret

00811548 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811548:	defffa04 	addi	sp,sp,-24
  81154c:	dfc00515 	stw	ra,20(sp)
  811550:	df000415 	stw	fp,16(sp)
  811554:	df000404 	addi	fp,sp,16
  811558:	e13ffd15 	stw	r4,-12(fp)
  81155c:	e17ffe15 	stw	r5,-8(fp)
  811560:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811564:	e0bffd17 	ldw	r2,-12(fp)
  811568:	10800017 	ldw	r2,0(r2)
  81156c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811570:	e0bffc17 	ldw	r2,-16(fp)
  811574:	10800a04 	addi	r2,r2,40
  811578:	e1bfff17 	ldw	r6,-4(fp)
  81157c:	e17ffe17 	ldw	r5,-8(fp)
  811580:	1009883a 	mov	r4,r2
  811584:	08119700 	call	811970 <altera_avalon_jtag_uart_ioctl>
}
  811588:	e037883a 	mov	sp,fp
  81158c:	dfc00117 	ldw	ra,4(sp)
  811590:	df000017 	ldw	fp,0(sp)
  811594:	dec00204 	addi	sp,sp,8
  811598:	f800283a 	ret

0081159c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81159c:	defffa04 	addi	sp,sp,-24
  8115a0:	dfc00515 	stw	ra,20(sp)
  8115a4:	df000415 	stw	fp,16(sp)
  8115a8:	df000404 	addi	fp,sp,16
  8115ac:	e13ffd15 	stw	r4,-12(fp)
  8115b0:	e17ffe15 	stw	r5,-8(fp)
  8115b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8115b8:	e0bffd17 	ldw	r2,-12(fp)
  8115bc:	00c00044 	movi	r3,1
  8115c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8115c4:	e0bffd17 	ldw	r2,-12(fp)
  8115c8:	10800017 	ldw	r2,0(r2)
  8115cc:	10800104 	addi	r2,r2,4
  8115d0:	1007883a 	mov	r3,r2
  8115d4:	e0bffd17 	ldw	r2,-12(fp)
  8115d8:	10800817 	ldw	r2,32(r2)
  8115dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8115e0:	e0bffe17 	ldw	r2,-8(fp)
  8115e4:	e0ffff17 	ldw	r3,-4(fp)
  8115e8:	d8000015 	stw	zero,0(sp)
  8115ec:	e1fffd17 	ldw	r7,-12(fp)
  8115f0:	01802074 	movhi	r6,129
  8115f4:	31859704 	addi	r6,r6,5724
  8115f8:	180b883a 	mov	r5,r3
  8115fc:	1009883a 	mov	r4,r2
  811600:	0813ba00 	call	813ba0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811604:	e0bffd17 	ldw	r2,-12(fp)
  811608:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81160c:	e0bffd17 	ldw	r2,-12(fp)
  811610:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811614:	d0e7b217 	ldw	r3,-24888(gp)
  811618:	e1fffd17 	ldw	r7,-12(fp)
  81161c:	01802074 	movhi	r6,129
  811620:	31861a04 	addi	r6,r6,6248
  811624:	180b883a 	mov	r5,r3
  811628:	1009883a 	mov	r4,r2
  81162c:	08104c80 	call	8104c8 <alt_alarm_start>
  811630:	1000040e 	bge	r2,zero,811644 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811634:	e0fffd17 	ldw	r3,-12(fp)
  811638:	00a00034 	movhi	r2,32768
  81163c:	10bfffc4 	addi	r2,r2,-1
  811640:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811644:	0001883a 	nop
  811648:	e037883a 	mov	sp,fp
  81164c:	dfc00117 	ldw	ra,4(sp)
  811650:	df000017 	ldw	fp,0(sp)
  811654:	dec00204 	addi	sp,sp,8
  811658:	f800283a 	ret

0081165c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81165c:	defff804 	addi	sp,sp,-32
  811660:	df000715 	stw	fp,28(sp)
  811664:	df000704 	addi	fp,sp,28
  811668:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81166c:	e0bfff17 	ldw	r2,-4(fp)
  811670:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  811674:	e0bffb17 	ldw	r2,-20(fp)
  811678:	10800017 	ldw	r2,0(r2)
  81167c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811680:	e0bffc17 	ldw	r2,-16(fp)
  811684:	10800104 	addi	r2,r2,4
  811688:	10800037 	ldwio	r2,0(r2)
  81168c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811690:	e0bffd17 	ldw	r2,-12(fp)
  811694:	1080c00c 	andi	r2,r2,768
  811698:	10006d26 	beq	r2,zero,811850 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81169c:	e0bffd17 	ldw	r2,-12(fp)
  8116a0:	1080400c 	andi	r2,r2,256
  8116a4:	10003526 	beq	r2,zero,81177c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8116a8:	00800074 	movhi	r2,1
  8116ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8116b0:	e0bffb17 	ldw	r2,-20(fp)
  8116b4:	10800a17 	ldw	r2,40(r2)
  8116b8:	10800044 	addi	r2,r2,1
  8116bc:	1081ffcc 	andi	r2,r2,2047
  8116c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  8116c4:	e0bffb17 	ldw	r2,-20(fp)
  8116c8:	10c00b17 	ldw	r3,44(r2)
  8116cc:	e0bffe17 	ldw	r2,-8(fp)
  8116d0:	18801526 	beq	r3,r2,811728 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8116d4:	e0bffc17 	ldw	r2,-16(fp)
  8116d8:	10800037 	ldwio	r2,0(r2)
  8116dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8116e0:	e0bff917 	ldw	r2,-28(fp)
  8116e4:	10a0000c 	andi	r2,r2,32768
  8116e8:	10001126 	beq	r2,zero,811730 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8116ec:	e0bffb17 	ldw	r2,-20(fp)
  8116f0:	10800a17 	ldw	r2,40(r2)
  8116f4:	e0fff917 	ldw	r3,-28(fp)
  8116f8:	1809883a 	mov	r4,r3
  8116fc:	e0fffb17 	ldw	r3,-20(fp)
  811700:	1885883a 	add	r2,r3,r2
  811704:	10800e04 	addi	r2,r2,56
  811708:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81170c:	e0bffb17 	ldw	r2,-20(fp)
  811710:	10800a17 	ldw	r2,40(r2)
  811714:	10800044 	addi	r2,r2,1
  811718:	10c1ffcc 	andi	r3,r2,2047
  81171c:	e0bffb17 	ldw	r2,-20(fp)
  811720:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811724:	003fe206 	br	8116b0 <__alt_mem_onchip_mem+0xff7916b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  811728:	0001883a 	nop
  81172c:	00000106 	br	811734 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  811730:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811734:	e0bff917 	ldw	r2,-28(fp)
  811738:	10bfffec 	andhi	r2,r2,65535
  81173c:	10000f26 	beq	r2,zero,81177c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811740:	e0bffb17 	ldw	r2,-20(fp)
  811744:	10c00817 	ldw	r3,32(r2)
  811748:	00bfff84 	movi	r2,-2
  81174c:	1886703a 	and	r3,r3,r2
  811750:	e0bffb17 	ldw	r2,-20(fp)
  811754:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811758:	e0bffc17 	ldw	r2,-16(fp)
  81175c:	10800104 	addi	r2,r2,4
  811760:	1007883a 	mov	r3,r2
  811764:	e0bffb17 	ldw	r2,-20(fp)
  811768:	10800817 	ldw	r2,32(r2)
  81176c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811770:	e0bffc17 	ldw	r2,-16(fp)
  811774:	10800104 	addi	r2,r2,4
  811778:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81177c:	e0bffd17 	ldw	r2,-12(fp)
  811780:	1080800c 	andi	r2,r2,512
  811784:	103fbe26 	beq	r2,zero,811680 <__alt_mem_onchip_mem+0xff791680>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811788:	e0bffd17 	ldw	r2,-12(fp)
  81178c:	1004d43a 	srli	r2,r2,16
  811790:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811794:	00001406 	br	8117e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811798:	e0bffc17 	ldw	r2,-16(fp)
  81179c:	e0fffb17 	ldw	r3,-20(fp)
  8117a0:	18c00d17 	ldw	r3,52(r3)
  8117a4:	e13ffb17 	ldw	r4,-20(fp)
  8117a8:	20c7883a 	add	r3,r4,r3
  8117ac:	18c20e04 	addi	r3,r3,2104
  8117b0:	18c00003 	ldbu	r3,0(r3)
  8117b4:	18c03fcc 	andi	r3,r3,255
  8117b8:	18c0201c 	xori	r3,r3,128
  8117bc:	18ffe004 	addi	r3,r3,-128
  8117c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8117c4:	e0bffb17 	ldw	r2,-20(fp)
  8117c8:	10800d17 	ldw	r2,52(r2)
  8117cc:	10800044 	addi	r2,r2,1
  8117d0:	10c1ffcc 	andi	r3,r2,2047
  8117d4:	e0bffb17 	ldw	r2,-20(fp)
  8117d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8117dc:	e0bffa17 	ldw	r2,-24(fp)
  8117e0:	10bfffc4 	addi	r2,r2,-1
  8117e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8117e8:	e0bffa17 	ldw	r2,-24(fp)
  8117ec:	10000526 	beq	r2,zero,811804 <altera_avalon_jtag_uart_irq+0x1a8>
  8117f0:	e0bffb17 	ldw	r2,-20(fp)
  8117f4:	10c00d17 	ldw	r3,52(r2)
  8117f8:	e0bffb17 	ldw	r2,-20(fp)
  8117fc:	10800c17 	ldw	r2,48(r2)
  811800:	18bfe51e 	bne	r3,r2,811798 <__alt_mem_onchip_mem+0xff791798>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811804:	e0bffa17 	ldw	r2,-24(fp)
  811808:	103f9d26 	beq	r2,zero,811680 <__alt_mem_onchip_mem+0xff791680>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81180c:	e0bffb17 	ldw	r2,-20(fp)
  811810:	10c00817 	ldw	r3,32(r2)
  811814:	00bfff44 	movi	r2,-3
  811818:	1886703a 	and	r3,r3,r2
  81181c:	e0bffb17 	ldw	r2,-20(fp)
  811820:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811824:	e0bffb17 	ldw	r2,-20(fp)
  811828:	10800017 	ldw	r2,0(r2)
  81182c:	10800104 	addi	r2,r2,4
  811830:	1007883a 	mov	r3,r2
  811834:	e0bffb17 	ldw	r2,-20(fp)
  811838:	10800817 	ldw	r2,32(r2)
  81183c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811840:	e0bffc17 	ldw	r2,-16(fp)
  811844:	10800104 	addi	r2,r2,4
  811848:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81184c:	003f8c06 	br	811680 <__alt_mem_onchip_mem+0xff791680>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  811850:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  811854:	0001883a 	nop
  811858:	e037883a 	mov	sp,fp
  81185c:	df000017 	ldw	fp,0(sp)
  811860:	dec00104 	addi	sp,sp,4
  811864:	f800283a 	ret

00811868 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811868:	defff804 	addi	sp,sp,-32
  81186c:	df000715 	stw	fp,28(sp)
  811870:	df000704 	addi	fp,sp,28
  811874:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811878:	e0bffb17 	ldw	r2,-20(fp)
  81187c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811880:	e0bff917 	ldw	r2,-28(fp)
  811884:	10800017 	ldw	r2,0(r2)
  811888:	10800104 	addi	r2,r2,4
  81188c:	10800037 	ldwio	r2,0(r2)
  811890:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811894:	e0bffa17 	ldw	r2,-24(fp)
  811898:	1081000c 	andi	r2,r2,1024
  81189c:	10000b26 	beq	r2,zero,8118cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8118a0:	e0bff917 	ldw	r2,-28(fp)
  8118a4:	10800017 	ldw	r2,0(r2)
  8118a8:	10800104 	addi	r2,r2,4
  8118ac:	1007883a 	mov	r3,r2
  8118b0:	e0bff917 	ldw	r2,-28(fp)
  8118b4:	10800817 	ldw	r2,32(r2)
  8118b8:	10810014 	ori	r2,r2,1024
  8118bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8118c0:	e0bff917 	ldw	r2,-28(fp)
  8118c4:	10000915 	stw	zero,36(r2)
  8118c8:	00000a06 	br	8118f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8118cc:	e0bff917 	ldw	r2,-28(fp)
  8118d0:	10c00917 	ldw	r3,36(r2)
  8118d4:	00a00034 	movhi	r2,32768
  8118d8:	10bfff04 	addi	r2,r2,-4
  8118dc:	10c00536 	bltu	r2,r3,8118f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8118e0:	e0bff917 	ldw	r2,-28(fp)
  8118e4:	10800917 	ldw	r2,36(r2)
  8118e8:	10c00044 	addi	r3,r2,1
  8118ec:	e0bff917 	ldw	r2,-28(fp)
  8118f0:	10c00915 	stw	r3,36(r2)
  8118f4:	d0a7b217 	ldw	r2,-24888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8118f8:	e037883a 	mov	sp,fp
  8118fc:	df000017 	ldw	fp,0(sp)
  811900:	dec00104 	addi	sp,sp,4
  811904:	f800283a 	ret

00811908 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811908:	defffd04 	addi	sp,sp,-12
  81190c:	df000215 	stw	fp,8(sp)
  811910:	df000204 	addi	fp,sp,8
  811914:	e13ffe15 	stw	r4,-8(fp)
  811918:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81191c:	00000506 	br	811934 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811920:	e0bfff17 	ldw	r2,-4(fp)
  811924:	1090000c 	andi	r2,r2,16384
  811928:	10000226 	beq	r2,zero,811934 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  81192c:	00bffd44 	movi	r2,-11
  811930:	00000b06 	br	811960 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811934:	e0bffe17 	ldw	r2,-8(fp)
  811938:	10c00d17 	ldw	r3,52(r2)
  81193c:	e0bffe17 	ldw	r2,-8(fp)
  811940:	10800c17 	ldw	r2,48(r2)
  811944:	18800526 	beq	r3,r2,81195c <altera_avalon_jtag_uart_close+0x54>
  811948:	e0bffe17 	ldw	r2,-8(fp)
  81194c:	10c00917 	ldw	r3,36(r2)
  811950:	e0bffe17 	ldw	r2,-8(fp)
  811954:	10800117 	ldw	r2,4(r2)
  811958:	18bff136 	bltu	r3,r2,811920 <__alt_mem_onchip_mem+0xff791920>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81195c:	0005883a 	mov	r2,zero
}
  811960:	e037883a 	mov	sp,fp
  811964:	df000017 	ldw	fp,0(sp)
  811968:	dec00104 	addi	sp,sp,4
  81196c:	f800283a 	ret

00811970 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811970:	defffa04 	addi	sp,sp,-24
  811974:	df000515 	stw	fp,20(sp)
  811978:	df000504 	addi	fp,sp,20
  81197c:	e13ffd15 	stw	r4,-12(fp)
  811980:	e17ffe15 	stw	r5,-8(fp)
  811984:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  811988:	00bff9c4 	movi	r2,-25
  81198c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  811990:	e0bffe17 	ldw	r2,-8(fp)
  811994:	10da8060 	cmpeqi	r3,r2,27137
  811998:	1800031e 	bne	r3,zero,8119a8 <altera_avalon_jtag_uart_ioctl+0x38>
  81199c:	109a80a0 	cmpeqi	r2,r2,27138
  8119a0:	1000181e 	bne	r2,zero,811a04 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8119a4:	00002906 	br	811a4c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8119a8:	e0bffd17 	ldw	r2,-12(fp)
  8119ac:	10c00117 	ldw	r3,4(r2)
  8119b0:	00a00034 	movhi	r2,32768
  8119b4:	10bfffc4 	addi	r2,r2,-1
  8119b8:	18802126 	beq	r3,r2,811a40 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8119bc:	e0bfff17 	ldw	r2,-4(fp)
  8119c0:	10800017 	ldw	r2,0(r2)
  8119c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8119c8:	e0bffc17 	ldw	r2,-16(fp)
  8119cc:	10800090 	cmplti	r2,r2,2
  8119d0:	1000061e 	bne	r2,zero,8119ec <altera_avalon_jtag_uart_ioctl+0x7c>
  8119d4:	e0fffc17 	ldw	r3,-16(fp)
  8119d8:	00a00034 	movhi	r2,32768
  8119dc:	10bfffc4 	addi	r2,r2,-1
  8119e0:	18800226 	beq	r3,r2,8119ec <altera_avalon_jtag_uart_ioctl+0x7c>
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	00000206 	br	8119f4 <altera_avalon_jtag_uart_ioctl+0x84>
  8119ec:	00a00034 	movhi	r2,32768
  8119f0:	10bfff84 	addi	r2,r2,-2
  8119f4:	e0fffd17 	ldw	r3,-12(fp)
  8119f8:	18800115 	stw	r2,4(r3)
      rc = 0;
  8119fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811a00:	00000f06 	br	811a40 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811a04:	e0bffd17 	ldw	r2,-12(fp)
  811a08:	10c00117 	ldw	r3,4(r2)
  811a0c:	00a00034 	movhi	r2,32768
  811a10:	10bfffc4 	addi	r2,r2,-1
  811a14:	18800c26 	beq	r3,r2,811a48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811a18:	e0bffd17 	ldw	r2,-12(fp)
  811a1c:	10c00917 	ldw	r3,36(r2)
  811a20:	e0bffd17 	ldw	r2,-12(fp)
  811a24:	10800117 	ldw	r2,4(r2)
  811a28:	1885803a 	cmpltu	r2,r3,r2
  811a2c:	10c03fcc 	andi	r3,r2,255
  811a30:	e0bfff17 	ldw	r2,-4(fp)
  811a34:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811a38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811a3c:	00000206 	br	811a48 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  811a40:	0001883a 	nop
  811a44:	00000106 	br	811a4c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  811a48:	0001883a 	nop

  default:
    break;
  }

  return rc;
  811a4c:	e0bffb17 	ldw	r2,-20(fp)
}
  811a50:	e037883a 	mov	sp,fp
  811a54:	df000017 	ldw	fp,0(sp)
  811a58:	dec00104 	addi	sp,sp,4
  811a5c:	f800283a 	ret

00811a60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811a60:	defff304 	addi	sp,sp,-52
  811a64:	dfc00c15 	stw	ra,48(sp)
  811a68:	df000b15 	stw	fp,44(sp)
  811a6c:	df000b04 	addi	fp,sp,44
  811a70:	e13ffc15 	stw	r4,-16(fp)
  811a74:	e17ffd15 	stw	r5,-12(fp)
  811a78:	e1bffe15 	stw	r6,-8(fp)
  811a7c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  811a80:	e0bffd17 	ldw	r2,-12(fp)
  811a84:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811a88:	00004706 	br	811ba8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811a8c:	e0bffc17 	ldw	r2,-16(fp)
  811a90:	10800a17 	ldw	r2,40(r2)
  811a94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811a98:	e0bffc17 	ldw	r2,-16(fp)
  811a9c:	10800b17 	ldw	r2,44(r2)
  811aa0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  811aa4:	e0fff717 	ldw	r3,-36(fp)
  811aa8:	e0bff817 	ldw	r2,-32(fp)
  811aac:	18800536 	bltu	r3,r2,811ac4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811ab0:	e0fff717 	ldw	r3,-36(fp)
  811ab4:	e0bff817 	ldw	r2,-32(fp)
  811ab8:	1885c83a 	sub	r2,r3,r2
  811abc:	e0bff615 	stw	r2,-40(fp)
  811ac0:	00000406 	br	811ad4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811ac4:	00c20004 	movi	r3,2048
  811ac8:	e0bff817 	ldw	r2,-32(fp)
  811acc:	1885c83a 	sub	r2,r3,r2
  811ad0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  811ad4:	e0bff617 	ldw	r2,-40(fp)
  811ad8:	10001e26 	beq	r2,zero,811b54 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  811adc:	e0fffe17 	ldw	r3,-8(fp)
  811ae0:	e0bff617 	ldw	r2,-40(fp)
  811ae4:	1880022e 	bgeu	r3,r2,811af0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  811ae8:	e0bffe17 	ldw	r2,-8(fp)
  811aec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811af0:	e0bffc17 	ldw	r2,-16(fp)
  811af4:	10c00e04 	addi	r3,r2,56
  811af8:	e0bff817 	ldw	r2,-32(fp)
  811afc:	1885883a 	add	r2,r3,r2
  811b00:	e1bff617 	ldw	r6,-40(fp)
  811b04:	100b883a 	mov	r5,r2
  811b08:	e13ff517 	ldw	r4,-44(fp)
  811b0c:	0809af00 	call	809af0 <memcpy>
      ptr   += n;
  811b10:	e0fff517 	ldw	r3,-44(fp)
  811b14:	e0bff617 	ldw	r2,-40(fp)
  811b18:	1885883a 	add	r2,r3,r2
  811b1c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  811b20:	e0fffe17 	ldw	r3,-8(fp)
  811b24:	e0bff617 	ldw	r2,-40(fp)
  811b28:	1885c83a 	sub	r2,r3,r2
  811b2c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811b30:	e0fff817 	ldw	r3,-32(fp)
  811b34:	e0bff617 	ldw	r2,-40(fp)
  811b38:	1885883a 	add	r2,r3,r2
  811b3c:	10c1ffcc 	andi	r3,r2,2047
  811b40:	e0bffc17 	ldw	r2,-16(fp)
  811b44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811b48:	e0bffe17 	ldw	r2,-8(fp)
  811b4c:	00bfcf16 	blt	zero,r2,811a8c <__alt_mem_onchip_mem+0xff791a8c>
  811b50:	00000106 	br	811b58 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  811b54:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  811b58:	e0fff517 	ldw	r3,-44(fp)
  811b5c:	e0bffd17 	ldw	r2,-12(fp)
  811b60:	1880141e 	bne	r3,r2,811bb4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811b64:	e0bfff17 	ldw	r2,-4(fp)
  811b68:	1090000c 	andi	r2,r2,16384
  811b6c:	1000131e 	bne	r2,zero,811bbc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811b70:	0001883a 	nop
  811b74:	e0bffc17 	ldw	r2,-16(fp)
  811b78:	10c00a17 	ldw	r3,40(r2)
  811b7c:	e0bff717 	ldw	r2,-36(fp)
  811b80:	1880051e 	bne	r3,r2,811b98 <altera_avalon_jtag_uart_read+0x138>
  811b84:	e0bffc17 	ldw	r2,-16(fp)
  811b88:	10c00917 	ldw	r3,36(r2)
  811b8c:	e0bffc17 	ldw	r2,-16(fp)
  811b90:	10800117 	ldw	r2,4(r2)
  811b94:	18bff736 	bltu	r3,r2,811b74 <__alt_mem_onchip_mem+0xff791b74>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811b98:	e0bffc17 	ldw	r2,-16(fp)
  811b9c:	10c00a17 	ldw	r3,40(r2)
  811ba0:	e0bff717 	ldw	r2,-36(fp)
  811ba4:	18800726 	beq	r3,r2,811bc4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811ba8:	e0bffe17 	ldw	r2,-8(fp)
  811bac:	00bfb716 	blt	zero,r2,811a8c <__alt_mem_onchip_mem+0xff791a8c>
  811bb0:	00000506 	br	811bc8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  811bb4:	0001883a 	nop
  811bb8:	00000306 	br	811bc8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  811bbc:	0001883a 	nop
  811bc0:	00000106 	br	811bc8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  811bc4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811bc8:	e0fff517 	ldw	r3,-44(fp)
  811bcc:	e0bffd17 	ldw	r2,-12(fp)
  811bd0:	18801826 	beq	r3,r2,811c34 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811bd4:	0005303a 	rdctl	r2,status
  811bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811bdc:	e0fffb17 	ldw	r3,-20(fp)
  811be0:	00bfff84 	movi	r2,-2
  811be4:	1884703a 	and	r2,r3,r2
  811be8:	1001703a 	wrctl	status,r2
  
  return context;
  811bec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811bf0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811bf4:	e0bffc17 	ldw	r2,-16(fp)
  811bf8:	10800817 	ldw	r2,32(r2)
  811bfc:	10c00054 	ori	r3,r2,1
  811c00:	e0bffc17 	ldw	r2,-16(fp)
  811c04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811c08:	e0bffc17 	ldw	r2,-16(fp)
  811c0c:	10800017 	ldw	r2,0(r2)
  811c10:	10800104 	addi	r2,r2,4
  811c14:	1007883a 	mov	r3,r2
  811c18:	e0bffc17 	ldw	r2,-16(fp)
  811c1c:	10800817 	ldw	r2,32(r2)
  811c20:	18800035 	stwio	r2,0(r3)
  811c24:	e0bffa17 	ldw	r2,-24(fp)
  811c28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811c2c:	e0bff917 	ldw	r2,-28(fp)
  811c30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811c34:	e0fff517 	ldw	r3,-44(fp)
  811c38:	e0bffd17 	ldw	r2,-12(fp)
  811c3c:	18800426 	beq	r3,r2,811c50 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  811c40:	e0fff517 	ldw	r3,-44(fp)
  811c44:	e0bffd17 	ldw	r2,-12(fp)
  811c48:	1885c83a 	sub	r2,r3,r2
  811c4c:	00000606 	br	811c68 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  811c50:	e0bfff17 	ldw	r2,-4(fp)
  811c54:	1090000c 	andi	r2,r2,16384
  811c58:	10000226 	beq	r2,zero,811c64 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811c5c:	00bffd44 	movi	r2,-11
  811c60:	00000106 	br	811c68 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  811c64:	00bffec4 	movi	r2,-5
}
  811c68:	e037883a 	mov	sp,fp
  811c6c:	dfc00117 	ldw	ra,4(sp)
  811c70:	df000017 	ldw	fp,0(sp)
  811c74:	dec00204 	addi	sp,sp,8
  811c78:	f800283a 	ret

00811c7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811c7c:	defff304 	addi	sp,sp,-52
  811c80:	dfc00c15 	stw	ra,48(sp)
  811c84:	df000b15 	stw	fp,44(sp)
  811c88:	df000b04 	addi	fp,sp,44
  811c8c:	e13ffc15 	stw	r4,-16(fp)
  811c90:	e17ffd15 	stw	r5,-12(fp)
  811c94:	e1bffe15 	stw	r6,-8(fp)
  811c98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  811c9c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  811ca0:	e0bffd17 	ldw	r2,-12(fp)
  811ca4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811ca8:	00003706 	br	811d88 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811cac:	e0bffc17 	ldw	r2,-16(fp)
  811cb0:	10800c17 	ldw	r2,48(r2)
  811cb4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  811cb8:	e0bffc17 	ldw	r2,-16(fp)
  811cbc:	10800d17 	ldw	r2,52(r2)
  811cc0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  811cc4:	e0fff917 	ldw	r3,-28(fp)
  811cc8:	e0bff517 	ldw	r2,-44(fp)
  811ccc:	1880062e 	bgeu	r3,r2,811ce8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  811cd0:	e0fff517 	ldw	r3,-44(fp)
  811cd4:	e0bff917 	ldw	r2,-28(fp)
  811cd8:	1885c83a 	sub	r2,r3,r2
  811cdc:	10bfffc4 	addi	r2,r2,-1
  811ce0:	e0bff615 	stw	r2,-40(fp)
  811ce4:	00000b06 	br	811d14 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  811ce8:	e0bff517 	ldw	r2,-44(fp)
  811cec:	10000526 	beq	r2,zero,811d04 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  811cf0:	00c20004 	movi	r3,2048
  811cf4:	e0bff917 	ldw	r2,-28(fp)
  811cf8:	1885c83a 	sub	r2,r3,r2
  811cfc:	e0bff615 	stw	r2,-40(fp)
  811d00:	00000406 	br	811d14 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811d04:	00c1ffc4 	movi	r3,2047
  811d08:	e0bff917 	ldw	r2,-28(fp)
  811d0c:	1885c83a 	sub	r2,r3,r2
  811d10:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  811d14:	e0bff617 	ldw	r2,-40(fp)
  811d18:	10001e26 	beq	r2,zero,811d94 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811d1c:	e0fffe17 	ldw	r3,-8(fp)
  811d20:	e0bff617 	ldw	r2,-40(fp)
  811d24:	1880022e 	bgeu	r3,r2,811d30 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811d28:	e0bffe17 	ldw	r2,-8(fp)
  811d2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  811d30:	e0bffc17 	ldw	r2,-16(fp)
  811d34:	10c20e04 	addi	r3,r2,2104
  811d38:	e0bff917 	ldw	r2,-28(fp)
  811d3c:	1885883a 	add	r2,r3,r2
  811d40:	e1bff617 	ldw	r6,-40(fp)
  811d44:	e17ffd17 	ldw	r5,-12(fp)
  811d48:	1009883a 	mov	r4,r2
  811d4c:	0809af00 	call	809af0 <memcpy>
      ptr   += n;
  811d50:	e0fffd17 	ldw	r3,-12(fp)
  811d54:	e0bff617 	ldw	r2,-40(fp)
  811d58:	1885883a 	add	r2,r3,r2
  811d5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  811d60:	e0fffe17 	ldw	r3,-8(fp)
  811d64:	e0bff617 	ldw	r2,-40(fp)
  811d68:	1885c83a 	sub	r2,r3,r2
  811d6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811d70:	e0fff917 	ldw	r3,-28(fp)
  811d74:	e0bff617 	ldw	r2,-40(fp)
  811d78:	1885883a 	add	r2,r3,r2
  811d7c:	10c1ffcc 	andi	r3,r2,2047
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811d88:	e0bffe17 	ldw	r2,-8(fp)
  811d8c:	00bfc716 	blt	zero,r2,811cac <__alt_mem_onchip_mem+0xff791cac>
  811d90:	00000106 	br	811d98 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  811d94:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d98:	0005303a 	rdctl	r2,status
  811d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811da0:	e0fffb17 	ldw	r3,-20(fp)
  811da4:	00bfff84 	movi	r2,-2
  811da8:	1884703a 	and	r2,r3,r2
  811dac:	1001703a 	wrctl	status,r2
  
  return context;
  811db0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811db4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811db8:	e0bffc17 	ldw	r2,-16(fp)
  811dbc:	10800817 	ldw	r2,32(r2)
  811dc0:	10c00094 	ori	r3,r2,2
  811dc4:	e0bffc17 	ldw	r2,-16(fp)
  811dc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811dcc:	e0bffc17 	ldw	r2,-16(fp)
  811dd0:	10800017 	ldw	r2,0(r2)
  811dd4:	10800104 	addi	r2,r2,4
  811dd8:	1007883a 	mov	r3,r2
  811ddc:	e0bffc17 	ldw	r2,-16(fp)
  811de0:	10800817 	ldw	r2,32(r2)
  811de4:	18800035 	stwio	r2,0(r3)
  811de8:	e0bffa17 	ldw	r2,-24(fp)
  811dec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811df0:	e0bff817 	ldw	r2,-32(fp)
  811df4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811df8:	e0bffe17 	ldw	r2,-8(fp)
  811dfc:	0080100e 	bge	zero,r2,811e40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  811e00:	e0bfff17 	ldw	r2,-4(fp)
  811e04:	1090000c 	andi	r2,r2,16384
  811e08:	1000101e 	bne	r2,zero,811e4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811e0c:	0001883a 	nop
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	10c00d17 	ldw	r3,52(r2)
  811e18:	e0bff517 	ldw	r2,-44(fp)
  811e1c:	1880051e 	bne	r3,r2,811e34 <altera_avalon_jtag_uart_write+0x1b8>
  811e20:	e0bffc17 	ldw	r2,-16(fp)
  811e24:	10c00917 	ldw	r3,36(r2)
  811e28:	e0bffc17 	ldw	r2,-16(fp)
  811e2c:	10800117 	ldw	r2,4(r2)
  811e30:	18bff736 	bltu	r3,r2,811e10 <__alt_mem_onchip_mem+0xff791e10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811e34:	e0bffc17 	ldw	r2,-16(fp)
  811e38:	10800917 	ldw	r2,36(r2)
  811e3c:	1000051e 	bne	r2,zero,811e54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  811e40:	e0bffe17 	ldw	r2,-8(fp)
  811e44:	00bfd016 	blt	zero,r2,811d88 <__alt_mem_onchip_mem+0xff791d88>
  811e48:	00000306 	br	811e58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  811e4c:	0001883a 	nop
  811e50:	00000106 	br	811e58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  811e54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  811e58:	e0fffd17 	ldw	r3,-12(fp)
  811e5c:	e0bff717 	ldw	r2,-36(fp)
  811e60:	18800426 	beq	r3,r2,811e74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  811e64:	e0fffd17 	ldw	r3,-12(fp)
  811e68:	e0bff717 	ldw	r2,-36(fp)
  811e6c:	1885c83a 	sub	r2,r3,r2
  811e70:	00000606 	br	811e8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  811e74:	e0bfff17 	ldw	r2,-4(fp)
  811e78:	1090000c 	andi	r2,r2,16384
  811e7c:	10000226 	beq	r2,zero,811e88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  811e80:	00bffd44 	movi	r2,-11
  811e84:	00000106 	br	811e8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  811e88:	00bffec4 	movi	r2,-5
}
  811e8c:	e037883a 	mov	sp,fp
  811e90:	dfc00117 	ldw	ra,4(sp)
  811e94:	df000017 	ldw	fp,0(sp)
  811e98:	dec00204 	addi	sp,sp,8
  811e9c:	f800283a 	ret

00811ea0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  811ea0:	defffa04 	addi	sp,sp,-24
  811ea4:	dfc00515 	stw	ra,20(sp)
  811ea8:	df000415 	stw	fp,16(sp)
  811eac:	df000404 	addi	fp,sp,16
  811eb0:	e13ffe15 	stw	r4,-8(fp)
  811eb4:	2805883a 	mov	r2,r5
  811eb8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  811ebc:	e0bffe17 	ldw	r2,-8(fp)
  811ec0:	10800017 	ldw	r2,0(r2)
  811ec4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811ec8:	008003f4 	movhi	r2,15
  811ecc:	10909004 	addi	r2,r2,16960
  811ed0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  811ed4:	e0bffe17 	ldw	r2,-8(fp)
  811ed8:	10800803 	ldbu	r2,32(r2)
  811edc:	10803fcc 	andi	r2,r2,255
  811ee0:	1080201c 	xori	r2,r2,128
  811ee4:	10bfe004 	addi	r2,r2,-128
  811ee8:	1000151e 	bne	r2,zero,811f40 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811eec:	00000906 	br	811f14 <lcd_write_command+0x74>
    if (--i == 0)
  811ef0:	e0bffc17 	ldw	r2,-16(fp)
  811ef4:	10bfffc4 	addi	r2,r2,-1
  811ef8:	e0bffc15 	stw	r2,-16(fp)
  811efc:	e0bffc17 	ldw	r2,-16(fp)
  811f00:	1000041e 	bne	r2,zero,811f14 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  811f04:	e0bffe17 	ldw	r2,-8(fp)
  811f08:	00c00044 	movi	r3,1
  811f0c:	10c00805 	stb	r3,32(r2)
      return;
  811f10:	00000c06 	br	811f44 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811f14:	e0bffd17 	ldw	r2,-12(fp)
  811f18:	10800104 	addi	r2,r2,4
  811f1c:	10800037 	ldwio	r2,0(r2)
  811f20:	1080200c 	andi	r2,r2,128
  811f24:	103ff21e 	bne	r2,zero,811ef0 <__alt_mem_onchip_mem+0xff791ef0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811f28:	01001904 	movi	r4,100
  811f2c:	0813f800 	call	813f80 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  811f30:	e0bffd17 	ldw	r2,-12(fp)
  811f34:	e0ffff03 	ldbu	r3,-4(fp)
  811f38:	10c00035 	stwio	r3,0(r2)
  811f3c:	00000106 	br	811f44 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  811f40:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  811f44:	e037883a 	mov	sp,fp
  811f48:	dfc00117 	ldw	ra,4(sp)
  811f4c:	df000017 	ldw	fp,0(sp)
  811f50:	dec00204 	addi	sp,sp,8
  811f54:	f800283a 	ret

00811f58 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  811f58:	defffa04 	addi	sp,sp,-24
  811f5c:	dfc00515 	stw	ra,20(sp)
  811f60:	df000415 	stw	fp,16(sp)
  811f64:	df000404 	addi	fp,sp,16
  811f68:	e13ffe15 	stw	r4,-8(fp)
  811f6c:	2805883a 	mov	r2,r5
  811f70:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  811f74:	e0bffe17 	ldw	r2,-8(fp)
  811f78:	10800017 	ldw	r2,0(r2)
  811f7c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811f80:	008003f4 	movhi	r2,15
  811f84:	10909004 	addi	r2,r2,16960
  811f88:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  811f8c:	e0bffe17 	ldw	r2,-8(fp)
  811f90:	10800803 	ldbu	r2,32(r2)
  811f94:	10803fcc 	andi	r2,r2,255
  811f98:	1080201c 	xori	r2,r2,128
  811f9c:	10bfe004 	addi	r2,r2,-128
  811fa0:	10001d1e 	bne	r2,zero,812018 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811fa4:	00000906 	br	811fcc <lcd_write_data+0x74>
    if (--i == 0)
  811fa8:	e0bffc17 	ldw	r2,-16(fp)
  811fac:	10bfffc4 	addi	r2,r2,-1
  811fb0:	e0bffc15 	stw	r2,-16(fp)
  811fb4:	e0bffc17 	ldw	r2,-16(fp)
  811fb8:	1000041e 	bne	r2,zero,811fcc <lcd_write_data+0x74>
    {
      sp->broken = 1;
  811fbc:	e0bffe17 	ldw	r2,-8(fp)
  811fc0:	00c00044 	movi	r3,1
  811fc4:	10c00805 	stb	r3,32(r2)
      return;
  811fc8:	00001406 	br	81201c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811fcc:	e0bffd17 	ldw	r2,-12(fp)
  811fd0:	10800104 	addi	r2,r2,4
  811fd4:	10800037 	ldwio	r2,0(r2)
  811fd8:	1080200c 	andi	r2,r2,128
  811fdc:	103ff21e 	bne	r2,zero,811fa8 <__alt_mem_onchip_mem+0xff791fa8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811fe0:	01001904 	movi	r4,100
  811fe4:	0813f800 	call	813f80 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  811fe8:	e0bffd17 	ldw	r2,-12(fp)
  811fec:	10800204 	addi	r2,r2,8
  811ff0:	1007883a 	mov	r3,r2
  811ff4:	e0bfff03 	ldbu	r2,-4(fp)
  811ff8:	18800035 	stwio	r2,0(r3)

  sp->address++;
  811ffc:	e0bffe17 	ldw	r2,-8(fp)
  812000:	108008c3 	ldbu	r2,35(r2)
  812004:	10800044 	addi	r2,r2,1
  812008:	1007883a 	mov	r3,r2
  81200c:	e0bffe17 	ldw	r2,-8(fp)
  812010:	10c008c5 	stb	r3,35(r2)
  812014:	00000106 	br	81201c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  812018:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  81201c:	e037883a 	mov	sp,fp
  812020:	dfc00117 	ldw	ra,4(sp)
  812024:	df000017 	ldw	fp,0(sp)
  812028:	dec00204 	addi	sp,sp,8
  81202c:	f800283a 	ret

00812030 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  812030:	defffc04 	addi	sp,sp,-16
  812034:	dfc00315 	stw	ra,12(sp)
  812038:	df000215 	stw	fp,8(sp)
  81203c:	df000204 	addi	fp,sp,8
  812040:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  812044:	01400044 	movi	r5,1
  812048:	e13fff17 	ldw	r4,-4(fp)
  81204c:	0811ea00 	call	811ea0 <lcd_write_command>

  sp->x = 0;
  812050:	e0bfff17 	ldw	r2,-4(fp)
  812054:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  812058:	e0bfff17 	ldw	r2,-4(fp)
  81205c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812060:	e0bfff17 	ldw	r2,-4(fp)
  812064:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812068:	e03ffe15 	stw	zero,-8(fp)
  81206c:	00001b06 	br	8120dc <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  812070:	e0bffe17 	ldw	r2,-8(fp)
  812074:	108018e4 	muli	r2,r2,99
  812078:	10801004 	addi	r2,r2,64
  81207c:	e0ffff17 	ldw	r3,-4(fp)
  812080:	1885883a 	add	r2,r3,r2
  812084:	01801444 	movi	r6,81
  812088:	01400804 	movi	r5,32
  81208c:	1009883a 	mov	r4,r2
  812090:	08042d00 	call	8042d0 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  812094:	e0bffe17 	ldw	r2,-8(fp)
  812098:	108018e4 	muli	r2,r2,99
  81209c:	10800c04 	addi	r2,r2,48
  8120a0:	e0ffff17 	ldw	r3,-4(fp)
  8120a4:	1885883a 	add	r2,r3,r2
  8120a8:	01800404 	movi	r6,16
  8120ac:	01400804 	movi	r5,32
  8120b0:	1009883a 	mov	r4,r2
  8120b4:	08042d00 	call	8042d0 <memset>
    sp->line[y].width = 0;
  8120b8:	e0ffff17 	ldw	r3,-4(fp)
  8120bc:	e0bffe17 	ldw	r2,-8(fp)
  8120c0:	108018e4 	muli	r2,r2,99
  8120c4:	1885883a 	add	r2,r3,r2
  8120c8:	10802444 	addi	r2,r2,145
  8120cc:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8120d0:	e0bffe17 	ldw	r2,-8(fp)
  8120d4:	10800044 	addi	r2,r2,1
  8120d8:	e0bffe15 	stw	r2,-8(fp)
  8120dc:	e0bffe17 	ldw	r2,-8(fp)
  8120e0:	10800090 	cmplti	r2,r2,2
  8120e4:	103fe21e 	bne	r2,zero,812070 <__alt_mem_onchip_mem+0xff792070>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8120e8:	0001883a 	nop
  8120ec:	e037883a 	mov	sp,fp
  8120f0:	dfc00117 	ldw	ra,4(sp)
  8120f4:	df000017 	ldw	fp,0(sp)
  8120f8:	dec00204 	addi	sp,sp,8
  8120fc:	f800283a 	ret

00812100 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  812100:	defff704 	addi	sp,sp,-36
  812104:	dfc00815 	stw	ra,32(sp)
  812108:	df000715 	stw	fp,28(sp)
  81210c:	df000704 	addi	fp,sp,28
  812110:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812114:	e0bfff17 	ldw	r2,-4(fp)
  812118:	10800943 	ldbu	r2,37(r2)
  81211c:	10803fcc 	andi	r2,r2,255
  812120:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812124:	e03ff915 	stw	zero,-28(fp)
  812128:	00006706 	br	8122c8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  81212c:	e0ffff17 	ldw	r3,-4(fp)
  812130:	e0bff917 	ldw	r2,-28(fp)
  812134:	108018e4 	muli	r2,r2,99
  812138:	1885883a 	add	r2,r3,r2
  81213c:	10802444 	addi	r2,r2,145
  812140:	10800003 	ldbu	r2,0(r2)
  812144:	10803fcc 	andi	r2,r2,255
  812148:	1080201c 	xori	r2,r2,128
  81214c:	10bfe004 	addi	r2,r2,-128
  812150:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812154:	e0ffff17 	ldw	r3,-4(fp)
  812158:	e0bff917 	ldw	r2,-28(fp)
  81215c:	108018e4 	muli	r2,r2,99
  812160:	1885883a 	add	r2,r3,r2
  812164:	10802484 	addi	r2,r2,146
  812168:	10800003 	ldbu	r2,0(r2)
  81216c:	10c03fcc 	andi	r3,r2,255
  812170:	e0bffc17 	ldw	r2,-16(fp)
  812174:	1885383a 	mul	r2,r3,r2
  812178:	1005d23a 	srai	r2,r2,8
  81217c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  812180:	e0fffb17 	ldw	r3,-20(fp)
  812184:	e0bffd17 	ldw	r2,-12(fp)
  812188:	18800116 	blt	r3,r2,812190 <lcd_repaint_screen+0x90>
      offset = 0;
  81218c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812190:	e03ffa15 	stw	zero,-24(fp)
  812194:	00004606 	br	8122b0 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  812198:	e0fffa17 	ldw	r3,-24(fp)
  81219c:	e0bffb17 	ldw	r2,-20(fp)
  8121a0:	1885883a 	add	r2,r3,r2
  8121a4:	e17ffd17 	ldw	r5,-12(fp)
  8121a8:	1009883a 	mov	r4,r2
  8121ac:	080dd300 	call	80dd30 <__modsi3>
  8121b0:	1009883a 	mov	r4,r2
  8121b4:	e0ffff17 	ldw	r3,-4(fp)
  8121b8:	e0bff917 	ldw	r2,-28(fp)
  8121bc:	108018e4 	muli	r2,r2,99
  8121c0:	1885883a 	add	r2,r3,r2
  8121c4:	1105883a 	add	r2,r2,r4
  8121c8:	10801004 	addi	r2,r2,64
  8121cc:	10800003 	ldbu	r2,0(r2)
  8121d0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8121d4:	e0ffff17 	ldw	r3,-4(fp)
  8121d8:	e0bff917 	ldw	r2,-28(fp)
  8121dc:	108018e4 	muli	r2,r2,99
  8121e0:	1887883a 	add	r3,r3,r2
  8121e4:	e0bffa17 	ldw	r2,-24(fp)
  8121e8:	1885883a 	add	r2,r3,r2
  8121ec:	10800c04 	addi	r2,r2,48
  8121f0:	10800003 	ldbu	r2,0(r2)
  8121f4:	10c03fcc 	andi	r3,r2,255
  8121f8:	18c0201c 	xori	r3,r3,128
  8121fc:	18ffe004 	addi	r3,r3,-128
  812200:	e0bffe07 	ldb	r2,-8(fp)
  812204:	18802726 	beq	r3,r2,8122a4 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812208:	e0fff917 	ldw	r3,-28(fp)
  81220c:	d0a00f04 	addi	r2,gp,-32708
  812210:	1885883a 	add	r2,r3,r2
  812214:	10800003 	ldbu	r2,0(r2)
  812218:	1007883a 	mov	r3,r2
  81221c:	e0bffa17 	ldw	r2,-24(fp)
  812220:	1885883a 	add	r2,r3,r2
  812224:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  812228:	e0fffe43 	ldbu	r3,-7(fp)
  81222c:	e0bfff17 	ldw	r2,-4(fp)
  812230:	108008c3 	ldbu	r2,35(r2)
  812234:	10803fcc 	andi	r2,r2,255
  812238:	1080201c 	xori	r2,r2,128
  81223c:	10bfe004 	addi	r2,r2,-128
  812240:	18800a26 	beq	r3,r2,81226c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  812244:	e0fffe43 	ldbu	r3,-7(fp)
  812248:	00bfe004 	movi	r2,-128
  81224c:	1884b03a 	or	r2,r3,r2
  812250:	10803fcc 	andi	r2,r2,255
  812254:	100b883a 	mov	r5,r2
  812258:	e13fff17 	ldw	r4,-4(fp)
  81225c:	0811ea00 	call	811ea0 <lcd_write_command>
          sp->address = address;
  812260:	e0fffe43 	ldbu	r3,-7(fp)
  812264:	e0bfff17 	ldw	r2,-4(fp)
  812268:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  81226c:	e0bffe03 	ldbu	r2,-8(fp)
  812270:	10803fcc 	andi	r2,r2,255
  812274:	100b883a 	mov	r5,r2
  812278:	e13fff17 	ldw	r4,-4(fp)
  81227c:	0811f580 	call	811f58 <lcd_write_data>
        sp->line[y].visible[x] = c;
  812280:	e0ffff17 	ldw	r3,-4(fp)
  812284:	e0bff917 	ldw	r2,-28(fp)
  812288:	108018e4 	muli	r2,r2,99
  81228c:	1887883a 	add	r3,r3,r2
  812290:	e0bffa17 	ldw	r2,-24(fp)
  812294:	1885883a 	add	r2,r3,r2
  812298:	10800c04 	addi	r2,r2,48
  81229c:	e0fffe03 	ldbu	r3,-8(fp)
  8122a0:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8122a4:	e0bffa17 	ldw	r2,-24(fp)
  8122a8:	10800044 	addi	r2,r2,1
  8122ac:	e0bffa15 	stw	r2,-24(fp)
  8122b0:	e0bffa17 	ldw	r2,-24(fp)
  8122b4:	10800410 	cmplti	r2,r2,16
  8122b8:	103fb71e 	bne	r2,zero,812198 <__alt_mem_onchip_mem+0xff792198>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8122bc:	e0bff917 	ldw	r2,-28(fp)
  8122c0:	10800044 	addi	r2,r2,1
  8122c4:	e0bff915 	stw	r2,-28(fp)
  8122c8:	e0bff917 	ldw	r2,-28(fp)
  8122cc:	10800090 	cmplti	r2,r2,2
  8122d0:	103f961e 	bne	r2,zero,81212c <__alt_mem_onchip_mem+0xff79212c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8122d4:	0001883a 	nop
  8122d8:	e037883a 	mov	sp,fp
  8122dc:	dfc00117 	ldw	ra,4(sp)
  8122e0:	df000017 	ldw	fp,0(sp)
  8122e4:	dec00204 	addi	sp,sp,8
  8122e8:	f800283a 	ret

008122ec <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8122ec:	defffc04 	addi	sp,sp,-16
  8122f0:	dfc00315 	stw	ra,12(sp)
  8122f4:	df000215 	stw	fp,8(sp)
  8122f8:	df000204 	addi	fp,sp,8
  8122fc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812300:	e03ffe15 	stw	zero,-8(fp)
  812304:	00001d06 	br	81237c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812308:	e0bffe17 	ldw	r2,-8(fp)
  81230c:	00800f16 	blt	zero,r2,81234c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  812310:	e0bffe17 	ldw	r2,-8(fp)
  812314:	108018e4 	muli	r2,r2,99
  812318:	10801004 	addi	r2,r2,64
  81231c:	e0ffff17 	ldw	r3,-4(fp)
  812320:	1889883a 	add	r4,r3,r2
  812324:	e0bffe17 	ldw	r2,-8(fp)
  812328:	10800044 	addi	r2,r2,1
  81232c:	108018e4 	muli	r2,r2,99
  812330:	10801004 	addi	r2,r2,64
  812334:	e0ffff17 	ldw	r3,-4(fp)
  812338:	1885883a 	add	r2,r3,r2
  81233c:	01801404 	movi	r6,80
  812340:	100b883a 	mov	r5,r2
  812344:	0809af00 	call	809af0 <memcpy>
  812348:	00000906 	br	812370 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  81234c:	e0bffe17 	ldw	r2,-8(fp)
  812350:	108018e4 	muli	r2,r2,99
  812354:	10801004 	addi	r2,r2,64
  812358:	e0ffff17 	ldw	r3,-4(fp)
  81235c:	1885883a 	add	r2,r3,r2
  812360:	01801404 	movi	r6,80
  812364:	01400804 	movi	r5,32
  812368:	1009883a 	mov	r4,r2
  81236c:	08042d00 	call	8042d0 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812370:	e0bffe17 	ldw	r2,-8(fp)
  812374:	10800044 	addi	r2,r2,1
  812378:	e0bffe15 	stw	r2,-8(fp)
  81237c:	e0bffe17 	ldw	r2,-8(fp)
  812380:	10800090 	cmplti	r2,r2,2
  812384:	103fe01e 	bne	r2,zero,812308 <__alt_mem_onchip_mem+0xff792308>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  812388:	e0bfff17 	ldw	r2,-4(fp)
  81238c:	10800883 	ldbu	r2,34(r2)
  812390:	10bfffc4 	addi	r2,r2,-1
  812394:	1007883a 	mov	r3,r2
  812398:	e0bfff17 	ldw	r2,-4(fp)
  81239c:	10c00885 	stb	r3,34(r2)
}
  8123a0:	0001883a 	nop
  8123a4:	e037883a 	mov	sp,fp
  8123a8:	dfc00117 	ldw	ra,4(sp)
  8123ac:	df000017 	ldw	fp,0(sp)
  8123b0:	dec00204 	addi	sp,sp,8
  8123b4:	f800283a 	ret

008123b8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8123b8:	defff904 	addi	sp,sp,-28
  8123bc:	dfc00615 	stw	ra,24(sp)
  8123c0:	df000515 	stw	fp,20(sp)
  8123c4:	df000504 	addi	fp,sp,20
  8123c8:	e13ffe15 	stw	r4,-8(fp)
  8123cc:	2805883a 	mov	r2,r5
  8123d0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8123d4:	e03ffb15 	stw	zero,-20(fp)
  8123d8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8123dc:	e0bffe17 	ldw	r2,-8(fp)
  8123e0:	10800a03 	ldbu	r2,40(r2)
  8123e4:	10803fcc 	andi	r2,r2,255
  8123e8:	1080201c 	xori	r2,r2,128
  8123ec:	10bfe004 	addi	r2,r2,-128
  8123f0:	108016d8 	cmpnei	r2,r2,91
  8123f4:	1000411e 	bne	r2,zero,8124fc <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8123f8:	e0bffe17 	ldw	r2,-8(fp)
  8123fc:	10800a04 	addi	r2,r2,40
  812400:	10800044 	addi	r2,r2,1
  812404:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  812408:	00000c06 	br	81243c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81240c:	e0bffb17 	ldw	r2,-20(fp)
  812410:	10c002a4 	muli	r3,r2,10
  812414:	e0bffd17 	ldw	r2,-12(fp)
  812418:	11000044 	addi	r4,r2,1
  81241c:	e13ffd15 	stw	r4,-12(fp)
  812420:	10800003 	ldbu	r2,0(r2)
  812424:	10803fcc 	andi	r2,r2,255
  812428:	1080201c 	xori	r2,r2,128
  81242c:	10bfe004 	addi	r2,r2,-128
  812430:	10bff404 	addi	r2,r2,-48
  812434:	1885883a 	add	r2,r3,r2
  812438:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  81243c:	d0e01117 	ldw	r3,-32700(gp)
  812440:	e0bffd17 	ldw	r2,-12(fp)
  812444:	10800003 	ldbu	r2,0(r2)
  812448:	10803fcc 	andi	r2,r2,255
  81244c:	1080201c 	xori	r2,r2,128
  812450:	10bfe004 	addi	r2,r2,-128
  812454:	10800044 	addi	r2,r2,1
  812458:	1885883a 	add	r2,r3,r2
  81245c:	10800003 	ldbu	r2,0(r2)
  812460:	10803fcc 	andi	r2,r2,255
  812464:	1080010c 	andi	r2,r2,4
  812468:	103fe81e 	bne	r2,zero,81240c <__alt_mem_onchip_mem+0xff79240c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  81246c:	e0bffd17 	ldw	r2,-12(fp)
  812470:	10800003 	ldbu	r2,0(r2)
  812474:	10803fcc 	andi	r2,r2,255
  812478:	1080201c 	xori	r2,r2,128
  81247c:	10bfe004 	addi	r2,r2,-128
  812480:	10800ed8 	cmpnei	r2,r2,59
  812484:	10001f1e 	bne	r2,zero,812504 <lcd_handle_escape+0x14c>
    {
      ptr++;
  812488:	e0bffd17 	ldw	r2,-12(fp)
  81248c:	10800044 	addi	r2,r2,1
  812490:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  812494:	00000c06 	br	8124c8 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812498:	e0bffc17 	ldw	r2,-16(fp)
  81249c:	10c002a4 	muli	r3,r2,10
  8124a0:	e0bffd17 	ldw	r2,-12(fp)
  8124a4:	11000044 	addi	r4,r2,1
  8124a8:	e13ffd15 	stw	r4,-12(fp)
  8124ac:	10800003 	ldbu	r2,0(r2)
  8124b0:	10803fcc 	andi	r2,r2,255
  8124b4:	1080201c 	xori	r2,r2,128
  8124b8:	10bfe004 	addi	r2,r2,-128
  8124bc:	10bff404 	addi	r2,r2,-48
  8124c0:	1885883a 	add	r2,r3,r2
  8124c4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8124c8:	d0e01117 	ldw	r3,-32700(gp)
  8124cc:	e0bffd17 	ldw	r2,-12(fp)
  8124d0:	10800003 	ldbu	r2,0(r2)
  8124d4:	10803fcc 	andi	r2,r2,255
  8124d8:	1080201c 	xori	r2,r2,128
  8124dc:	10bfe004 	addi	r2,r2,-128
  8124e0:	10800044 	addi	r2,r2,1
  8124e4:	1885883a 	add	r2,r3,r2
  8124e8:	10800003 	ldbu	r2,0(r2)
  8124ec:	10803fcc 	andi	r2,r2,255
  8124f0:	1080010c 	andi	r2,r2,4
  8124f4:	103fe81e 	bne	r2,zero,812498 <__alt_mem_onchip_mem+0xff792498>
  8124f8:	00000206 	br	812504 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8124fc:	00bfffc4 	movi	r2,-1
  812500:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  812504:	e0bfff07 	ldb	r2,-4(fp)
  812508:	10c012a0 	cmpeqi	r3,r2,74
  81250c:	1800291e 	bne	r3,zero,8125b4 <lcd_handle_escape+0x1fc>
  812510:	10c012c8 	cmpgei	r3,r2,75
  812514:	1800031e 	bne	r3,zero,812524 <lcd_handle_escape+0x16c>
  812518:	10801220 	cmpeqi	r2,r2,72
  81251c:	1000061e 	bne	r2,zero,812538 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812520:	00004a06 	br	81264c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  812524:	10c012e0 	cmpeqi	r3,r2,75
  812528:	1800281e 	bne	r3,zero,8125cc <lcd_handle_escape+0x214>
  81252c:	108019a0 	cmpeqi	r2,r2,102
  812530:	1000011e 	bne	r2,zero,812538 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812534:	00004506 	br	81264c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812538:	e0bffc17 	ldw	r2,-16(fp)
  81253c:	0080050e 	bge	zero,r2,812554 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  812540:	e0bffc17 	ldw	r2,-16(fp)
  812544:	10bfffc4 	addi	r2,r2,-1
  812548:	1007883a 	mov	r3,r2
  81254c:	e0bffe17 	ldw	r2,-8(fp)
  812550:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812554:	e0bffb17 	ldw	r2,-20(fp)
  812558:	0080370e 	bge	zero,r2,812638 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  81255c:	e0bffb17 	ldw	r2,-20(fp)
  812560:	10bfffc4 	addi	r2,r2,-1
  812564:	1007883a 	mov	r3,r2
  812568:	e0bffe17 	ldw	r2,-8(fp)
  81256c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812570:	e0bffe17 	ldw	r2,-8(fp)
  812574:	10800883 	ldbu	r2,34(r2)
  812578:	10803fcc 	andi	r2,r2,255
  81257c:	10800170 	cmpltui	r2,r2,5
  812580:	1000061e 	bne	r2,zero,81259c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  812584:	e0bffe17 	ldw	r2,-8(fp)
  812588:	00c00104 	movi	r3,4
  81258c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  812590:	00000206 	br	81259c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  812594:	e13ffe17 	ldw	r4,-8(fp)
  812598:	08122ec0 	call	8122ec <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  81259c:	e0bffe17 	ldw	r2,-8(fp)
  8125a0:	10800883 	ldbu	r2,34(r2)
  8125a4:	10803fcc 	andi	r2,r2,255
  8125a8:	108000e8 	cmpgeui	r2,r2,3
  8125ac:	103ff91e 	bne	r2,zero,812594 <__alt_mem_onchip_mem+0xff792594>
        lcd_scroll_up(sp);
    }
    break;
  8125b0:	00002106 	br	812638 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8125b4:	e0bffb17 	ldw	r2,-20(fp)
  8125b8:	10800098 	cmpnei	r2,r2,2
  8125bc:	1000201e 	bne	r2,zero,812640 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  8125c0:	e13ffe17 	ldw	r4,-8(fp)
  8125c4:	08120300 	call	812030 <lcd_clear_screen>
    break;
  8125c8:	00001d06 	br	812640 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8125cc:	e0bffb17 	ldw	r2,-20(fp)
  8125d0:	00801d16 	blt	zero,r2,812648 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8125d4:	e0bffe17 	ldw	r2,-8(fp)
  8125d8:	10800843 	ldbu	r2,33(r2)
  8125dc:	10803fcc 	andi	r2,r2,255
  8125e0:	10801428 	cmpgeui	r2,r2,80
  8125e4:	1000181e 	bne	r2,zero,812648 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8125e8:	e0bffe17 	ldw	r2,-8(fp)
  8125ec:	10800883 	ldbu	r2,34(r2)
  8125f0:	10803fcc 	andi	r2,r2,255
  8125f4:	108018e4 	muli	r2,r2,99
  8125f8:	10801004 	addi	r2,r2,64
  8125fc:	e0fffe17 	ldw	r3,-8(fp)
  812600:	1887883a 	add	r3,r3,r2
  812604:	e0bffe17 	ldw	r2,-8(fp)
  812608:	10800843 	ldbu	r2,33(r2)
  81260c:	10803fcc 	andi	r2,r2,255
  812610:	1889883a 	add	r4,r3,r2
  812614:	e0bffe17 	ldw	r2,-8(fp)
  812618:	10800843 	ldbu	r2,33(r2)
  81261c:	10803fcc 	andi	r2,r2,255
  812620:	00c01404 	movi	r3,80
  812624:	1885c83a 	sub	r2,r3,r2
  812628:	100d883a 	mov	r6,r2
  81262c:	01400804 	movi	r5,32
  812630:	08042d00 	call	8042d0 <memset>
    }
    break;
  812634:	00000406 	br	812648 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  812638:	0001883a 	nop
  81263c:	00000306 	br	81264c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  812640:	0001883a 	nop
  812644:	00000106 	br	81264c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  812648:	0001883a 	nop
  }
}
  81264c:	0001883a 	nop
  812650:	e037883a 	mov	sp,fp
  812654:	dfc00117 	ldw	ra,4(sp)
  812658:	df000017 	ldw	fp,0(sp)
  81265c:	dec00204 	addi	sp,sp,8
  812660:	f800283a 	ret

00812664 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812664:	defff304 	addi	sp,sp,-52
  812668:	dfc00c15 	stw	ra,48(sp)
  81266c:	df000b15 	stw	fp,44(sp)
  812670:	df000b04 	addi	fp,sp,44
  812674:	e13ffc15 	stw	r4,-16(fp)
  812678:	e17ffd15 	stw	r5,-12(fp)
  81267c:	e1bffe15 	stw	r6,-8(fp)
  812680:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812684:	e0bffe17 	ldw	r2,-8(fp)
  812688:	e0fffd17 	ldw	r3,-12(fp)
  81268c:	1885883a 	add	r2,r3,r2
  812690:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812694:	e0bffc17 	ldw	r2,-16(fp)
  812698:	00c00044 	movi	r3,1
  81269c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  8126a0:	00009906 	br	812908 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  8126a4:	e0bffd17 	ldw	r2,-12(fp)
  8126a8:	10800003 	ldbu	r2,0(r2)
  8126ac:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  8126b0:	e0bffc17 	ldw	r2,-16(fp)
  8126b4:	10800903 	ldbu	r2,36(r2)
  8126b8:	10803fcc 	andi	r2,r2,255
  8126bc:	1080201c 	xori	r2,r2,128
  8126c0:	10bfe004 	addi	r2,r2,-128
  8126c4:	10003716 	blt	r2,zero,8127a4 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  8126c8:	e0bffc17 	ldw	r2,-16(fp)
  8126cc:	10800903 	ldbu	r2,36(r2)
  8126d0:	10803fcc 	andi	r2,r2,255
  8126d4:	1080201c 	xori	r2,r2,128
  8126d8:	10bfe004 	addi	r2,r2,-128
  8126dc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8126e0:	e0bffa17 	ldw	r2,-24(fp)
  8126e4:	1000031e 	bne	r2,zero,8126f4 <altera_avalon_lcd_16207_write+0x90>
  8126e8:	e0bff907 	ldb	r2,-28(fp)
  8126ec:	108016d8 	cmpnei	r2,r2,91
  8126f0:	10000d1e 	bne	r2,zero,812728 <altera_avalon_lcd_16207_write+0xc4>
  8126f4:	e0bffa17 	ldw	r2,-24(fp)
  8126f8:	10001826 	beq	r2,zero,81275c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8126fc:	d0e01117 	ldw	r3,-32700(gp)
  812700:	e0bff907 	ldb	r2,-28(fp)
  812704:	10800044 	addi	r2,r2,1
  812708:	1885883a 	add	r2,r3,r2
  81270c:	10800003 	ldbu	r2,0(r2)
  812710:	10803fcc 	andi	r2,r2,255
  812714:	1080010c 	andi	r2,r2,4
  812718:	1000101e 	bne	r2,zero,81275c <altera_avalon_lcd_16207_write+0xf8>
  81271c:	e0bff907 	ldb	r2,-28(fp)
  812720:	10800ee0 	cmpeqi	r2,r2,59
  812724:	10000d1e 	bne	r2,zero,81275c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  812728:	e0fffc17 	ldw	r3,-16(fp)
  81272c:	e0bffa17 	ldw	r2,-24(fp)
  812730:	1885883a 	add	r2,r3,r2
  812734:	10800a04 	addi	r2,r2,40
  812738:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81273c:	e0bff907 	ldb	r2,-28(fp)
  812740:	100b883a 	mov	r5,r2
  812744:	e13ffc17 	ldw	r4,-16(fp)
  812748:	08123b80 	call	8123b8 <lcd_handle_escape>

        sp->esccount = -1;
  81274c:	e0bffc17 	ldw	r2,-16(fp)
  812750:	00ffffc4 	movi	r3,-1
  812754:	10c00905 	stb	r3,36(r2)
  812758:	00006806 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  81275c:	e0bffc17 	ldw	r2,-16(fp)
  812760:	10800903 	ldbu	r2,36(r2)
  812764:	10803fcc 	andi	r2,r2,255
  812768:	108001e8 	cmpgeui	r2,r2,7
  81276c:	1000631e 	bne	r2,zero,8128fc <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  812770:	e0fffc17 	ldw	r3,-16(fp)
  812774:	e0bffa17 	ldw	r2,-24(fp)
  812778:	1885883a 	add	r2,r3,r2
  81277c:	10800a04 	addi	r2,r2,40
  812780:	e0fff903 	ldbu	r3,-28(fp)
  812784:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  812788:	e0bffc17 	ldw	r2,-16(fp)
  81278c:	10800903 	ldbu	r2,36(r2)
  812790:	10800044 	addi	r2,r2,1
  812794:	1007883a 	mov	r3,r2
  812798:	e0bffc17 	ldw	r2,-16(fp)
  81279c:	10c00905 	stb	r3,36(r2)
  8127a0:	00005606 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  8127a4:	e0bff907 	ldb	r2,-28(fp)
  8127a8:	108006d8 	cmpnei	r2,r2,27
  8127ac:	1000031e 	bne	r2,zero,8127bc <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  8127b0:	e0bffc17 	ldw	r2,-16(fp)
  8127b4:	10000905 	stb	zero,36(r2)
  8127b8:	00005006 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  8127bc:	e0bff907 	ldb	r2,-28(fp)
  8127c0:	10800358 	cmpnei	r2,r2,13
  8127c4:	1000031e 	bne	r2,zero,8127d4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  8127c8:	e0bffc17 	ldw	r2,-16(fp)
  8127cc:	10000845 	stb	zero,33(r2)
  8127d0:	00004a06 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8127d4:	e0bff907 	ldb	r2,-28(fp)
  8127d8:	10800298 	cmpnei	r2,r2,10
  8127dc:	1000101e 	bne	r2,zero,812820 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8127e0:	e0bffc17 	ldw	r2,-16(fp)
  8127e4:	10000845 	stb	zero,33(r2)
      sp->y++;
  8127e8:	e0bffc17 	ldw	r2,-16(fp)
  8127ec:	10800883 	ldbu	r2,34(r2)
  8127f0:	10800044 	addi	r2,r2,1
  8127f4:	1007883a 	mov	r3,r2
  8127f8:	e0bffc17 	ldw	r2,-16(fp)
  8127fc:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812800:	e0bffc17 	ldw	r2,-16(fp)
  812804:	10800883 	ldbu	r2,34(r2)
  812808:	10803fcc 	andi	r2,r2,255
  81280c:	108000f0 	cmpltui	r2,r2,3
  812810:	10003a1e 	bne	r2,zero,8128fc <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  812814:	e13ffc17 	ldw	r4,-16(fp)
  812818:	08122ec0 	call	8122ec <lcd_scroll_up>
  81281c:	00003706 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  812820:	e0bff907 	ldb	r2,-28(fp)
  812824:	10800218 	cmpnei	r2,r2,8
  812828:	10000b1e 	bne	r2,zero,812858 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  81282c:	e0bffc17 	ldw	r2,-16(fp)
  812830:	10800843 	ldbu	r2,33(r2)
  812834:	10803fcc 	andi	r2,r2,255
  812838:	10003026 	beq	r2,zero,8128fc <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  81283c:	e0bffc17 	ldw	r2,-16(fp)
  812840:	10800843 	ldbu	r2,33(r2)
  812844:	10bfffc4 	addi	r2,r2,-1
  812848:	1007883a 	mov	r3,r2
  81284c:	e0bffc17 	ldw	r2,-16(fp)
  812850:	10c00845 	stb	r3,33(r2)
  812854:	00002906 	br	8128fc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  812858:	d0e01117 	ldw	r3,-32700(gp)
  81285c:	e0bff907 	ldb	r2,-28(fp)
  812860:	10800044 	addi	r2,r2,1
  812864:	1885883a 	add	r2,r3,r2
  812868:	10800003 	ldbu	r2,0(r2)
  81286c:	10803fcc 	andi	r2,r2,255
  812870:	1080201c 	xori	r2,r2,128
  812874:	10bfe004 	addi	r2,r2,-128
  812878:	108025cc 	andi	r2,r2,151
  81287c:	10001f26 	beq	r2,zero,8128fc <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812880:	e0bffc17 	ldw	r2,-16(fp)
  812884:	10800883 	ldbu	r2,34(r2)
  812888:	10803fcc 	andi	r2,r2,255
  81288c:	108000b0 	cmpltui	r2,r2,2
  812890:	1000021e 	bne	r2,zero,81289c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  812894:	e13ffc17 	ldw	r4,-16(fp)
  812898:	08122ec0 	call	8122ec <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81289c:	e0bffc17 	ldw	r2,-16(fp)
  8128a0:	10800843 	ldbu	r2,33(r2)
  8128a4:	10803fcc 	andi	r2,r2,255
  8128a8:	10801428 	cmpgeui	r2,r2,80
  8128ac:	10000d1e 	bne	r2,zero,8128e4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  8128b0:	e0bffc17 	ldw	r2,-16(fp)
  8128b4:	10800883 	ldbu	r2,34(r2)
  8128b8:	10c03fcc 	andi	r3,r2,255
  8128bc:	e0bffc17 	ldw	r2,-16(fp)
  8128c0:	10800843 	ldbu	r2,33(r2)
  8128c4:	10803fcc 	andi	r2,r2,255
  8128c8:	e13ffc17 	ldw	r4,-16(fp)
  8128cc:	18c018e4 	muli	r3,r3,99
  8128d0:	20c7883a 	add	r3,r4,r3
  8128d4:	1885883a 	add	r2,r3,r2
  8128d8:	10801004 	addi	r2,r2,64
  8128dc:	e0fff903 	ldbu	r3,-28(fp)
  8128e0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8128e4:	e0bffc17 	ldw	r2,-16(fp)
  8128e8:	10800843 	ldbu	r2,33(r2)
  8128ec:	10800044 	addi	r2,r2,1
  8128f0:	1007883a 	mov	r3,r2
  8128f4:	e0bffc17 	ldw	r2,-16(fp)
  8128f8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8128fc:	e0bffd17 	ldw	r2,-12(fp)
  812900:	10800044 	addi	r2,r2,1
  812904:	e0bffd15 	stw	r2,-12(fp)
  812908:	e0fffd17 	ldw	r3,-12(fp)
  81290c:	e0bff817 	ldw	r2,-32(fp)
  812910:	18bf6436 	bltu	r3,r2,8126a4 <__alt_mem_onchip_mem+0xff7926a4>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812914:	00800404 	movi	r2,16
  812918:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81291c:	e03ff515 	stw	zero,-44(fp)
  812920:	00003706 	br	812a00 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812924:	00801404 	movi	r2,80
  812928:	e0bff715 	stw	r2,-36(fp)
  81292c:	00001106 	br	812974 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  812930:	e0bff717 	ldw	r2,-36(fp)
  812934:	10bfffc4 	addi	r2,r2,-1
  812938:	e13ffc17 	ldw	r4,-16(fp)
  81293c:	e0fff517 	ldw	r3,-44(fp)
  812940:	18c018e4 	muli	r3,r3,99
  812944:	20c7883a 	add	r3,r4,r3
  812948:	1885883a 	add	r2,r3,r2
  81294c:	10801004 	addi	r2,r2,64
  812950:	10800003 	ldbu	r2,0(r2)
  812954:	10803fcc 	andi	r2,r2,255
  812958:	1080201c 	xori	r2,r2,128
  81295c:	10bfe004 	addi	r2,r2,-128
  812960:	10800820 	cmpeqi	r2,r2,32
  812964:	10000626 	beq	r2,zero,812980 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812968:	e0bff717 	ldw	r2,-36(fp)
  81296c:	10bfffc4 	addi	r2,r2,-1
  812970:	e0bff715 	stw	r2,-36(fp)
  812974:	e0bff717 	ldw	r2,-36(fp)
  812978:	00bfed16 	blt	zero,r2,812930 <__alt_mem_onchip_mem+0xff792930>
  81297c:	00000106 	br	812984 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  812980:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812984:	e0bff717 	ldw	r2,-36(fp)
  812988:	10800448 	cmpgei	r2,r2,17
  81298c:	1000031e 	bne	r2,zero,81299c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  812990:	00800404 	movi	r2,16
  812994:	e0bff715 	stw	r2,-36(fp)
  812998:	00000306 	br	8129a8 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  81299c:	e0bff717 	ldw	r2,-36(fp)
  8129a0:	10800044 	addi	r2,r2,1
  8129a4:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8129a8:	e0bff717 	ldw	r2,-36(fp)
  8129ac:	1009883a 	mov	r4,r2
  8129b0:	e0fffc17 	ldw	r3,-16(fp)
  8129b4:	e0bff517 	ldw	r2,-44(fp)
  8129b8:	108018e4 	muli	r2,r2,99
  8129bc:	1885883a 	add	r2,r3,r2
  8129c0:	10802444 	addi	r2,r2,145
  8129c4:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8129c8:	e0fff617 	ldw	r3,-40(fp)
  8129cc:	e0bff717 	ldw	r2,-36(fp)
  8129d0:	1880020e 	bge	r3,r2,8129dc <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8129d4:	e0bff717 	ldw	r2,-36(fp)
  8129d8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8129dc:	e0fffc17 	ldw	r3,-16(fp)
  8129e0:	e0bff517 	ldw	r2,-44(fp)
  8129e4:	108018e4 	muli	r2,r2,99
  8129e8:	1885883a 	add	r2,r3,r2
  8129ec:	10802484 	addi	r2,r2,146
  8129f0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8129f4:	e0bff517 	ldw	r2,-44(fp)
  8129f8:	10800044 	addi	r2,r2,1
  8129fc:	e0bff515 	stw	r2,-44(fp)
  812a00:	e0bff517 	ldw	r2,-44(fp)
  812a04:	10800090 	cmplti	r2,r2,2
  812a08:	103fc61e 	bne	r2,zero,812924 <__alt_mem_onchip_mem+0xff792924>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812a0c:	e0bff617 	ldw	r2,-40(fp)
  812a10:	10800448 	cmpgei	r2,r2,17
  812a14:	1000031e 	bne	r2,zero,812a24 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  812a18:	e0bffc17 	ldw	r2,-16(fp)
  812a1c:	10000985 	stb	zero,38(r2)
  812a20:	00002e06 	br	812adc <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  812a24:	e0bff617 	ldw	r2,-40(fp)
  812a28:	1085883a 	add	r2,r2,r2
  812a2c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  812a30:	e0bff617 	ldw	r2,-40(fp)
  812a34:	1007883a 	mov	r3,r2
  812a38:	e0bffc17 	ldw	r2,-16(fp)
  812a3c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812a40:	e03ff515 	stw	zero,-44(fp)
  812a44:	00002206 	br	812ad0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812a48:	e0fffc17 	ldw	r3,-16(fp)
  812a4c:	e0bff517 	ldw	r2,-44(fp)
  812a50:	108018e4 	muli	r2,r2,99
  812a54:	1885883a 	add	r2,r3,r2
  812a58:	10802444 	addi	r2,r2,145
  812a5c:	10800003 	ldbu	r2,0(r2)
  812a60:	10803fcc 	andi	r2,r2,255
  812a64:	1080201c 	xori	r2,r2,128
  812a68:	10bfe004 	addi	r2,r2,-128
  812a6c:	10800450 	cmplti	r2,r2,17
  812a70:	1000141e 	bne	r2,zero,812ac4 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812a74:	e0fffc17 	ldw	r3,-16(fp)
  812a78:	e0bff517 	ldw	r2,-44(fp)
  812a7c:	108018e4 	muli	r2,r2,99
  812a80:	1885883a 	add	r2,r3,r2
  812a84:	10802444 	addi	r2,r2,145
  812a88:	10800003 	ldbu	r2,0(r2)
  812a8c:	10803fcc 	andi	r2,r2,255
  812a90:	1080201c 	xori	r2,r2,128
  812a94:	10bfe004 	addi	r2,r2,-128
  812a98:	1004923a 	slli	r2,r2,8
  812a9c:	e17ff617 	ldw	r5,-40(fp)
  812aa0:	1009883a 	mov	r4,r2
  812aa4:	080dcac0 	call	80dcac <__divsi3>
  812aa8:	1009883a 	mov	r4,r2
  812aac:	e0fffc17 	ldw	r3,-16(fp)
  812ab0:	e0bff517 	ldw	r2,-44(fp)
  812ab4:	108018e4 	muli	r2,r2,99
  812ab8:	1885883a 	add	r2,r3,r2
  812abc:	10802484 	addi	r2,r2,146
  812ac0:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ac4:	e0bff517 	ldw	r2,-44(fp)
  812ac8:	10800044 	addi	r2,r2,1
  812acc:	e0bff515 	stw	r2,-44(fp)
  812ad0:	e0bff517 	ldw	r2,-44(fp)
  812ad4:	10800090 	cmplti	r2,r2,2
  812ad8:	103fdb1e 	bne	r2,zero,812a48 <__alt_mem_onchip_mem+0xff792a48>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812adc:	e0bffc17 	ldw	r2,-16(fp)
  812ae0:	10800943 	ldbu	r2,37(r2)
  812ae4:	10803fcc 	andi	r2,r2,255
  812ae8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  812aec:	e13ffc17 	ldw	r4,-16(fp)
  812af0:	08121000 	call	812100 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812af4:	e0bffc17 	ldw	r2,-16(fp)
  812af8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812afc:	e0bffc17 	ldw	r2,-16(fp)
  812b00:	10800943 	ldbu	r2,37(r2)
  812b04:	10c03fcc 	andi	r3,r2,255
  812b08:	e0bffb17 	ldw	r2,-20(fp)
  812b0c:	18800426 	beq	r3,r2,812b20 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812b10:	e0bffc17 	ldw	r2,-16(fp)
  812b14:	00c00044 	movi	r3,1
  812b18:	10c009c5 	stb	r3,39(r2)
  }
  812b1c:	003fef06 	br	812adc <__alt_mem_onchip_mem+0xff792adc>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  812b20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812b24:	e0bffe17 	ldw	r2,-8(fp)
}
  812b28:	e037883a 	mov	sp,fp
  812b2c:	dfc00117 	ldw	ra,4(sp)
  812b30:	df000017 	ldw	fp,0(sp)
  812b34:	dec00204 	addi	sp,sp,8
  812b38:	f800283a 	ret

00812b3c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812b3c:	defffc04 	addi	sp,sp,-16
  812b40:	dfc00315 	stw	ra,12(sp)
  812b44:	df000215 	stw	fp,8(sp)
  812b48:	df000204 	addi	fp,sp,8
  812b4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812b50:	e0bfff17 	ldw	r2,-4(fp)
  812b54:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812b58:	e0bffe17 	ldw	r2,-8(fp)
  812b5c:	10800943 	ldbu	r2,37(r2)
  812b60:	10803fcc 	andi	r2,r2,255
  812b64:	10c00044 	addi	r3,r2,1
  812b68:	e0bffe17 	ldw	r2,-8(fp)
  812b6c:	10800983 	ldbu	r2,38(r2)
  812b70:	10803fcc 	andi	r2,r2,255
  812b74:	18800316 	blt	r3,r2,812b84 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  812b78:	e0bffe17 	ldw	r2,-8(fp)
  812b7c:	10000945 	stb	zero,37(r2)
  812b80:	00000606 	br	812b9c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812b84:	e0bffe17 	ldw	r2,-8(fp)
  812b88:	10800943 	ldbu	r2,37(r2)
  812b8c:	10800044 	addi	r2,r2,1
  812b90:	1007883a 	mov	r3,r2
  812b94:	e0bffe17 	ldw	r2,-8(fp)
  812b98:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  812b9c:	e0bffe17 	ldw	r2,-8(fp)
  812ba0:	10800983 	ldbu	r2,38(r2)
  812ba4:	10803fcc 	andi	r2,r2,255
  812ba8:	10000826 	beq	r2,zero,812bcc <alt_lcd_16207_timeout+0x90>
  812bac:	e0bffe17 	ldw	r2,-8(fp)
  812bb0:	108009c3 	ldbu	r2,39(r2)
  812bb4:	10803fcc 	andi	r2,r2,255
  812bb8:	1080201c 	xori	r2,r2,128
  812bbc:	10bfe004 	addi	r2,r2,-128
  812bc0:	1000021e 	bne	r2,zero,812bcc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  812bc4:	e13ffe17 	ldw	r4,-8(fp)
  812bc8:	08121000 	call	812100 <lcd_repaint_screen>

  return sp->period;
  812bcc:	e0bffe17 	ldw	r2,-8(fp)
  812bd0:	10800717 	ldw	r2,28(r2)
}
  812bd4:	e037883a 	mov	sp,fp
  812bd8:	dfc00117 	ldw	ra,4(sp)
  812bdc:	df000017 	ldw	fp,0(sp)
  812be0:	dec00204 	addi	sp,sp,8
  812be4:	f800283a 	ret

00812be8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  812be8:	defffc04 	addi	sp,sp,-16
  812bec:	dfc00315 	stw	ra,12(sp)
  812bf0:	df000215 	stw	fp,8(sp)
  812bf4:	df000204 	addi	fp,sp,8
  812bf8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  812bfc:	e0bfff17 	ldw	r2,-4(fp)
  812c00:	10800017 	ldw	r2,0(r2)
  812c04:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  812c08:	e0bfff17 	ldw	r2,-4(fp)
  812c0c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  812c10:	010ea604 	movi	r4,15000
  812c14:	0813f800 	call	813f80 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812c18:	e0bffe17 	ldw	r2,-8(fp)
  812c1c:	00c00c04 	movi	r3,48
  812c20:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  812c24:	01040104 	movi	r4,4100
  812c28:	0813f800 	call	813f80 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812c2c:	e0bffe17 	ldw	r2,-8(fp)
  812c30:	00c00c04 	movi	r3,48
  812c34:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  812c38:	0100fa04 	movi	r4,1000
  812c3c:	0813f800 	call	813f80 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812c40:	e0bffe17 	ldw	r2,-8(fp)
  812c44:	00c00c04 	movi	r3,48
  812c48:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  812c4c:	01400e04 	movi	r5,56
  812c50:	e13fff17 	ldw	r4,-4(fp)
  812c54:	0811ea00 	call	811ea0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  812c58:	01400204 	movi	r5,8
  812c5c:	e13fff17 	ldw	r4,-4(fp)
  812c60:	0811ea00 	call	811ea0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  812c64:	e13fff17 	ldw	r4,-4(fp)
  812c68:	08120300 	call	812030 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  812c6c:	01400184 	movi	r5,6
  812c70:	e13fff17 	ldw	r4,-4(fp)
  812c74:	0811ea00 	call	811ea0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  812c78:	01400304 	movi	r5,12
  812c7c:	e13fff17 	ldw	r4,-4(fp)
  812c80:	0811ea00 	call	811ea0 <lcd_write_command>

  sp->esccount = -1;
  812c84:	e0bfff17 	ldw	r2,-4(fp)
  812c88:	00ffffc4 	movi	r3,-1
  812c8c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  812c90:	e0bfff17 	ldw	r2,-4(fp)
  812c94:	10800a04 	addi	r2,r2,40
  812c98:	01800204 	movi	r6,8
  812c9c:	000b883a 	mov	r5,zero
  812ca0:	1009883a 	mov	r4,r2
  812ca4:	08042d00 	call	8042d0 <memset>

  sp->scrollpos = 0;
  812ca8:	e0bfff17 	ldw	r2,-4(fp)
  812cac:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  812cb0:	e0bfff17 	ldw	r2,-4(fp)
  812cb4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  812cb8:	e0bfff17 	ldw	r2,-4(fp)
  812cbc:	100009c5 	stb	zero,39(r2)
  812cc0:	d0a7b217 	ldw	r2,-24888(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  812cc4:	01400284 	movi	r5,10
  812cc8:	1009883a 	mov	r4,r2
  812ccc:	080dda40 	call	80dda4 <__udivsi3>
  812cd0:	1007883a 	mov	r3,r2
  812cd4:	e0bfff17 	ldw	r2,-4(fp)
  812cd8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  812cdc:	e0bfff17 	ldw	r2,-4(fp)
  812ce0:	10c00104 	addi	r3,r2,4
  812ce4:	e0bfff17 	ldw	r2,-4(fp)
  812ce8:	10800717 	ldw	r2,28(r2)
  812cec:	e1ffff17 	ldw	r7,-4(fp)
  812cf0:	01802074 	movhi	r6,129
  812cf4:	318acf04 	addi	r6,r6,11068
  812cf8:	100b883a 	mov	r5,r2
  812cfc:	1809883a 	mov	r4,r3
  812d00:	08104c80 	call	8104c8 <alt_alarm_start>
}
  812d04:	0001883a 	nop
  812d08:	e037883a 	mov	sp,fp
  812d0c:	dfc00117 	ldw	ra,4(sp)
  812d10:	df000017 	ldw	fp,0(sp)
  812d14:	dec00204 	addi	sp,sp,8
  812d18:	f800283a 	ret

00812d1c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812d1c:	defffa04 	addi	sp,sp,-24
  812d20:	dfc00515 	stw	ra,20(sp)
  812d24:	df000415 	stw	fp,16(sp)
  812d28:	df000404 	addi	fp,sp,16
  812d2c:	e13ffd15 	stw	r4,-12(fp)
  812d30:	e17ffe15 	stw	r5,-8(fp)
  812d34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  812d38:	e0bffd17 	ldw	r2,-12(fp)
  812d3c:	10800017 	ldw	r2,0(r2)
  812d40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  812d44:	e0bffc17 	ldw	r2,-16(fp)
  812d48:	10c00a04 	addi	r3,r2,40
  812d4c:	e0bffd17 	ldw	r2,-12(fp)
  812d50:	10800217 	ldw	r2,8(r2)
  812d54:	100f883a 	mov	r7,r2
  812d58:	e1bfff17 	ldw	r6,-4(fp)
  812d5c:	e17ffe17 	ldw	r5,-8(fp)
  812d60:	1809883a 	mov	r4,r3
  812d64:	08126640 	call	812664 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  812d68:	e037883a 	mov	sp,fp
  812d6c:	dfc00117 	ldw	ra,4(sp)
  812d70:	df000017 	ldw	fp,0(sp)
  812d74:	dec00204 	addi	sp,sp,8
  812d78:	f800283a 	ret

00812d7c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812d7c:	defffa04 	addi	sp,sp,-24
  812d80:	dfc00515 	stw	ra,20(sp)
  812d84:	df000415 	stw	fp,16(sp)
  812d88:	df000404 	addi	fp,sp,16
  812d8c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  812d90:	0007883a 	mov	r3,zero
  812d94:	e0bfff17 	ldw	r2,-4(fp)
  812d98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  812d9c:	e0bfff17 	ldw	r2,-4(fp)
  812da0:	10800104 	addi	r2,r2,4
  812da4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812da8:	0005303a 	rdctl	r2,status
  812dac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812db0:	e0fffd17 	ldw	r3,-12(fp)
  812db4:	00bfff84 	movi	r2,-2
  812db8:	1884703a 	and	r2,r3,r2
  812dbc:	1001703a 	wrctl	status,r2
  
  return context;
  812dc0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  812dc4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  812dc8:	08110f40 	call	8110f4 <alt_tick>
  812dcc:	e0bffc17 	ldw	r2,-16(fp)
  812dd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812dd4:	e0bffe17 	ldw	r2,-8(fp)
  812dd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  812ddc:	0001883a 	nop
  812de0:	e037883a 	mov	sp,fp
  812de4:	dfc00117 	ldw	ra,4(sp)
  812de8:	df000017 	ldw	fp,0(sp)
  812dec:	dec00204 	addi	sp,sp,8
  812df0:	f800283a 	ret

00812df4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  812df4:	defff804 	addi	sp,sp,-32
  812df8:	dfc00715 	stw	ra,28(sp)
  812dfc:	df000615 	stw	fp,24(sp)
  812e00:	df000604 	addi	fp,sp,24
  812e04:	e13ffc15 	stw	r4,-16(fp)
  812e08:	e17ffd15 	stw	r5,-12(fp)
  812e0c:	e1bffe15 	stw	r6,-8(fp)
  812e10:	e1ffff15 	stw	r7,-4(fp)
  812e14:	e0bfff17 	ldw	r2,-4(fp)
  812e18:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  812e1c:	d0a7b217 	ldw	r2,-24888(gp)
  812e20:	1000021e 	bne	r2,zero,812e2c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  812e24:	e0bffb17 	ldw	r2,-20(fp)
  812e28:	d0a7b215 	stw	r2,-24888(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  812e2c:	e0bffc17 	ldw	r2,-16(fp)
  812e30:	10800104 	addi	r2,r2,4
  812e34:	00c001c4 	movi	r3,7
  812e38:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  812e3c:	d8000015 	stw	zero,0(sp)
  812e40:	e1fffc17 	ldw	r7,-16(fp)
  812e44:	01802074 	movhi	r6,129
  812e48:	318b5f04 	addi	r6,r6,11644
  812e4c:	e17ffe17 	ldw	r5,-8(fp)
  812e50:	e13ffd17 	ldw	r4,-12(fp)
  812e54:	0813ba00 	call	813ba0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  812e58:	0001883a 	nop
  812e5c:	e037883a 	mov	sp,fp
  812e60:	dfc00117 	ldw	ra,4(sp)
  812e64:	df000017 	ldw	fp,0(sp)
  812e68:	dec00204 	addi	sp,sp,8
  812e6c:	f800283a 	ret

00812e70 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812e70:	defffa04 	addi	sp,sp,-24
  812e74:	dfc00515 	stw	ra,20(sp)
  812e78:	df000415 	stw	fp,16(sp)
  812e7c:	df000404 	addi	fp,sp,16
  812e80:	e13ffd15 	stw	r4,-12(fp)
  812e84:	e17ffe15 	stw	r5,-8(fp)
  812e88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812e8c:	e0bffd17 	ldw	r2,-12(fp)
  812e90:	10800017 	ldw	r2,0(r2)
  812e94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	10c00a04 	addi	r3,r2,40
  812ea0:	e0bffd17 	ldw	r2,-12(fp)
  812ea4:	10800217 	ldw	r2,8(r2)
  812ea8:	100f883a 	mov	r7,r2
  812eac:	e1bfff17 	ldw	r6,-4(fp)
  812eb0:	e17ffe17 	ldw	r5,-8(fp)
  812eb4:	1809883a 	mov	r4,r3
  812eb8:	08133840 	call	813384 <altera_avalon_uart_read>
      fd->fd_flags);
}
  812ebc:	e037883a 	mov	sp,fp
  812ec0:	dfc00117 	ldw	ra,4(sp)
  812ec4:	df000017 	ldw	fp,0(sp)
  812ec8:	dec00204 	addi	sp,sp,8
  812ecc:	f800283a 	ret

00812ed0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812ed0:	defffa04 	addi	sp,sp,-24
  812ed4:	dfc00515 	stw	ra,20(sp)
  812ed8:	df000415 	stw	fp,16(sp)
  812edc:	df000404 	addi	fp,sp,16
  812ee0:	e13ffd15 	stw	r4,-12(fp)
  812ee4:	e17ffe15 	stw	r5,-8(fp)
  812ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812eec:	e0bffd17 	ldw	r2,-12(fp)
  812ef0:	10800017 	ldw	r2,0(r2)
  812ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  812ef8:	e0bffc17 	ldw	r2,-16(fp)
  812efc:	10c00a04 	addi	r3,r2,40
  812f00:	e0bffd17 	ldw	r2,-12(fp)
  812f04:	10800217 	ldw	r2,8(r2)
  812f08:	100f883a 	mov	r7,r2
  812f0c:	e1bfff17 	ldw	r6,-4(fp)
  812f10:	e17ffe17 	ldw	r5,-8(fp)
  812f14:	1809883a 	mov	r4,r3
  812f18:	081359c0 	call	81359c <altera_avalon_uart_write>
      fd->fd_flags);
}
  812f1c:	e037883a 	mov	sp,fp
  812f20:	dfc00117 	ldw	ra,4(sp)
  812f24:	df000017 	ldw	fp,0(sp)
  812f28:	dec00204 	addi	sp,sp,8
  812f2c:	f800283a 	ret

00812f30 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  812f30:	defffc04 	addi	sp,sp,-16
  812f34:	dfc00315 	stw	ra,12(sp)
  812f38:	df000215 	stw	fp,8(sp)
  812f3c:	df000204 	addi	fp,sp,8
  812f40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812f44:	e0bfff17 	ldw	r2,-4(fp)
  812f48:	10800017 	ldw	r2,0(r2)
  812f4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  812f50:	e0bffe17 	ldw	r2,-8(fp)
  812f54:	10c00a04 	addi	r3,r2,40
  812f58:	e0bfff17 	ldw	r2,-4(fp)
  812f5c:	10800217 	ldw	r2,8(r2)
  812f60:	100b883a 	mov	r5,r2
  812f64:	1809883a 	mov	r4,r3
  812f68:	08132f40 	call	8132f4 <altera_avalon_uart_close>
}
  812f6c:	e037883a 	mov	sp,fp
  812f70:	dfc00117 	ldw	ra,4(sp)
  812f74:	df000017 	ldw	fp,0(sp)
  812f78:	dec00204 	addi	sp,sp,8
  812f7c:	f800283a 	ret

00812f80 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  812f80:	defff804 	addi	sp,sp,-32
  812f84:	dfc00715 	stw	ra,28(sp)
  812f88:	df000615 	stw	fp,24(sp)
  812f8c:	df000604 	addi	fp,sp,24
  812f90:	e13ffd15 	stw	r4,-12(fp)
  812f94:	e17ffe15 	stw	r5,-8(fp)
  812f98:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  812f9c:	e0bffd17 	ldw	r2,-12(fp)
  812fa0:	10800017 	ldw	r2,0(r2)
  812fa4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  812fa8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  812fac:	1000041e 	bne	r2,zero,812fc0 <altera_avalon_uart_init+0x40>
  812fb0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812fb4:	1000021e 	bne	r2,zero,812fc0 <altera_avalon_uart_init+0x40>
  812fb8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  812fbc:	10000226 	beq	r2,zero,812fc8 <altera_avalon_uart_init+0x48>
  812fc0:	00800044 	movi	r2,1
  812fc4:	00000106 	br	812fcc <altera_avalon_uart_init+0x4c>
  812fc8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812fcc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  812fd0:	e0bffc17 	ldw	r2,-16(fp)
  812fd4:	10000f1e 	bne	r2,zero,813014 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  812fd8:	e0bffd17 	ldw	r2,-12(fp)
  812fdc:	00c32004 	movi	r3,3200
  812fe0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  812fe4:	e0bffb17 	ldw	r2,-20(fp)
  812fe8:	10800304 	addi	r2,r2,12
  812fec:	e0fffd17 	ldw	r3,-12(fp)
  812ff0:	18c00117 	ldw	r3,4(r3)
  812ff4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  812ff8:	d8000015 	stw	zero,0(sp)
  812ffc:	e1fffd17 	ldw	r7,-12(fp)
  813000:	01802074 	movhi	r6,129
  813004:	318c0b04 	addi	r6,r6,12332
  813008:	e17fff17 	ldw	r5,-4(fp)
  81300c:	e13ffe17 	ldw	r4,-8(fp)
  813010:	0813ba00 	call	813ba0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  813014:	0001883a 	nop
  813018:	e037883a 	mov	sp,fp
  81301c:	dfc00117 	ldw	ra,4(sp)
  813020:	df000017 	ldw	fp,0(sp)
  813024:	dec00204 	addi	sp,sp,8
  813028:	f800283a 	ret

0081302c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81302c:	defffa04 	addi	sp,sp,-24
  813030:	dfc00515 	stw	ra,20(sp)
  813034:	df000415 	stw	fp,16(sp)
  813038:	df000404 	addi	fp,sp,16
  81303c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  813040:	e0bfff17 	ldw	r2,-4(fp)
  813044:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  813048:	e0bffc17 	ldw	r2,-16(fp)
  81304c:	10800017 	ldw	r2,0(r2)
  813050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  813054:	e0bffd17 	ldw	r2,-12(fp)
  813058:	10800204 	addi	r2,r2,8
  81305c:	10800037 	ldwio	r2,0(r2)
  813060:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  813064:	e0bffd17 	ldw	r2,-12(fp)
  813068:	10800204 	addi	r2,r2,8
  81306c:	0007883a 	mov	r3,zero
  813070:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  813074:	e0bffd17 	ldw	r2,-12(fp)
  813078:	10800204 	addi	r2,r2,8
  81307c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  813080:	e0bffe17 	ldw	r2,-8(fp)
  813084:	1080200c 	andi	r2,r2,128
  813088:	10000326 	beq	r2,zero,813098 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  81308c:	e17ffe17 	ldw	r5,-8(fp)
  813090:	e13ffc17 	ldw	r4,-16(fp)
  813094:	08130c80 	call	8130c8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  813098:	e0bffe17 	ldw	r2,-8(fp)
  81309c:	1081100c 	andi	r2,r2,1088
  8130a0:	10000326 	beq	r2,zero,8130b0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8130a4:	e17ffe17 	ldw	r5,-8(fp)
  8130a8:	e13ffc17 	ldw	r4,-16(fp)
  8130ac:	08131ac0 	call	8131ac <altera_avalon_uart_txirq>
  }
  

}
  8130b0:	0001883a 	nop
  8130b4:	e037883a 	mov	sp,fp
  8130b8:	dfc00117 	ldw	ra,4(sp)
  8130bc:	df000017 	ldw	fp,0(sp)
  8130c0:	dec00204 	addi	sp,sp,8
  8130c4:	f800283a 	ret

008130c8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8130c8:	defffc04 	addi	sp,sp,-16
  8130cc:	df000315 	stw	fp,12(sp)
  8130d0:	df000304 	addi	fp,sp,12
  8130d4:	e13ffe15 	stw	r4,-8(fp)
  8130d8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8130dc:	e0bfff17 	ldw	r2,-4(fp)
  8130e0:	108000cc 	andi	r2,r2,3
  8130e4:	10002c1e 	bne	r2,zero,813198 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8130e8:	e0bffe17 	ldw	r2,-8(fp)
  8130ec:	10800317 	ldw	r2,12(r2)
  8130f0:	e0bffe17 	ldw	r2,-8(fp)
  8130f4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	10800317 	ldw	r2,12(r2)
  813100:	10800044 	addi	r2,r2,1
  813104:	10800fcc 	andi	r2,r2,63
  813108:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81310c:	e0bffe17 	ldw	r2,-8(fp)
  813110:	10800317 	ldw	r2,12(r2)
  813114:	e0fffe17 	ldw	r3,-8(fp)
  813118:	18c00017 	ldw	r3,0(r3)
  81311c:	18c00037 	ldwio	r3,0(r3)
  813120:	1809883a 	mov	r4,r3
  813124:	e0fffe17 	ldw	r3,-8(fp)
  813128:	1885883a 	add	r2,r3,r2
  81312c:	10800704 	addi	r2,r2,28
  813130:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  813134:	e0bffe17 	ldw	r2,-8(fp)
  813138:	e0fffd17 	ldw	r3,-12(fp)
  81313c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813140:	e0bffe17 	ldw	r2,-8(fp)
  813144:	10800317 	ldw	r2,12(r2)
  813148:	10800044 	addi	r2,r2,1
  81314c:	10800fcc 	andi	r2,r2,63
  813150:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  813154:	e0bffe17 	ldw	r2,-8(fp)
  813158:	10c00217 	ldw	r3,8(r2)
  81315c:	e0bffd17 	ldw	r2,-12(fp)
  813160:	18800e1e 	bne	r3,r2,81319c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813164:	e0bffe17 	ldw	r2,-8(fp)
  813168:	10c00117 	ldw	r3,4(r2)
  81316c:	00bfdfc4 	movi	r2,-129
  813170:	1886703a 	and	r3,r3,r2
  813174:	e0bffe17 	ldw	r2,-8(fp)
  813178:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  81317c:	e0bffe17 	ldw	r2,-8(fp)
  813180:	10800017 	ldw	r2,0(r2)
  813184:	10800304 	addi	r2,r2,12
  813188:	e0fffe17 	ldw	r3,-8(fp)
  81318c:	18c00117 	ldw	r3,4(r3)
  813190:	10c00035 	stwio	r3,0(r2)
  813194:	00000106 	br	81319c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  813198:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  81319c:	e037883a 	mov	sp,fp
  8131a0:	df000017 	ldw	fp,0(sp)
  8131a4:	dec00104 	addi	sp,sp,4
  8131a8:	f800283a 	ret

008131ac <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8131ac:	defffb04 	addi	sp,sp,-20
  8131b0:	df000415 	stw	fp,16(sp)
  8131b4:	df000404 	addi	fp,sp,16
  8131b8:	e13ffc15 	stw	r4,-16(fp)
  8131bc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8131c0:	e0bffc17 	ldw	r2,-16(fp)
  8131c4:	10c00417 	ldw	r3,16(r2)
  8131c8:	e0bffc17 	ldw	r2,-16(fp)
  8131cc:	10800517 	ldw	r2,20(r2)
  8131d0:	18803226 	beq	r3,r2,81329c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8131d4:	e0bffc17 	ldw	r2,-16(fp)
  8131d8:	10800617 	ldw	r2,24(r2)
  8131dc:	1080008c 	andi	r2,r2,2
  8131e0:	10000326 	beq	r2,zero,8131f0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8131e4:	e0bffd17 	ldw	r2,-12(fp)
  8131e8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8131ec:	10001d26 	beq	r2,zero,813264 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8131f0:	e0bffc17 	ldw	r2,-16(fp)
  8131f4:	10800417 	ldw	r2,16(r2)
  8131f8:	e0bffc17 	ldw	r2,-16(fp)
  8131fc:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  813200:	e0bffc17 	ldw	r2,-16(fp)
  813204:	10800017 	ldw	r2,0(r2)
  813208:	10800104 	addi	r2,r2,4
  81320c:	e0fffc17 	ldw	r3,-16(fp)
  813210:	18c00417 	ldw	r3,16(r3)
  813214:	e13ffc17 	ldw	r4,-16(fp)
  813218:	20c7883a 	add	r3,r4,r3
  81321c:	18c01704 	addi	r3,r3,92
  813220:	18c00003 	ldbu	r3,0(r3)
  813224:	18c03fcc 	andi	r3,r3,255
  813228:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81322c:	e0bffc17 	ldw	r2,-16(fp)
  813230:	10800417 	ldw	r2,16(r2)
  813234:	10800044 	addi	r2,r2,1
  813238:	e0fffc17 	ldw	r3,-16(fp)
  81323c:	18800415 	stw	r2,16(r3)
  813240:	10c00fcc 	andi	r3,r2,63
  813244:	e0bffc17 	ldw	r2,-16(fp)
  813248:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81324c:	e0bffc17 	ldw	r2,-16(fp)
  813250:	10800117 	ldw	r2,4(r2)
  813254:	10c01014 	ori	r3,r2,64
  813258:	e0bffc17 	ldw	r2,-16(fp)
  81325c:	10c00115 	stw	r3,4(r2)
  813260:	00000e06 	br	81329c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  813264:	e0bffc17 	ldw	r2,-16(fp)
  813268:	10800017 	ldw	r2,0(r2)
  81326c:	10800204 	addi	r2,r2,8
  813270:	10800037 	ldwio	r2,0(r2)
  813274:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813278:	e0bffd17 	ldw	r2,-12(fp)
  81327c:	1082000c 	andi	r2,r2,2048
  813280:	1000061e 	bne	r2,zero,81329c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813284:	e0bffc17 	ldw	r2,-16(fp)
  813288:	10c00117 	ldw	r3,4(r2)
  81328c:	00bfefc4 	movi	r2,-65
  813290:	1886703a 	and	r3,r3,r2
  813294:	e0bffc17 	ldw	r2,-16(fp)
  813298:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81329c:	e0bffc17 	ldw	r2,-16(fp)
  8132a0:	10c00417 	ldw	r3,16(r2)
  8132a4:	e0bffc17 	ldw	r2,-16(fp)
  8132a8:	10800517 	ldw	r2,20(r2)
  8132ac:	1880061e 	bne	r3,r2,8132c8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8132b0:	e0bffc17 	ldw	r2,-16(fp)
  8132b4:	10c00117 	ldw	r3,4(r2)
  8132b8:	00beefc4 	movi	r2,-1089
  8132bc:	1886703a 	and	r3,r3,r2
  8132c0:	e0bffc17 	ldw	r2,-16(fp)
  8132c4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8132c8:	e0bffc17 	ldw	r2,-16(fp)
  8132cc:	10800017 	ldw	r2,0(r2)
  8132d0:	10800304 	addi	r2,r2,12
  8132d4:	e0fffc17 	ldw	r3,-16(fp)
  8132d8:	18c00117 	ldw	r3,4(r3)
  8132dc:	10c00035 	stwio	r3,0(r2)
}
  8132e0:	0001883a 	nop
  8132e4:	e037883a 	mov	sp,fp
  8132e8:	df000017 	ldw	fp,0(sp)
  8132ec:	dec00104 	addi	sp,sp,4
  8132f0:	f800283a 	ret

008132f4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8132f4:	defffd04 	addi	sp,sp,-12
  8132f8:	df000215 	stw	fp,8(sp)
  8132fc:	df000204 	addi	fp,sp,8
  813300:	e13ffe15 	stw	r4,-8(fp)
  813304:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813308:	00000506 	br	813320 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81330c:	e0bfff17 	ldw	r2,-4(fp)
  813310:	1090000c 	andi	r2,r2,16384
  813314:	10000226 	beq	r2,zero,813320 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  813318:	00bffd44 	movi	r2,-11
  81331c:	00000606 	br	813338 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813320:	e0bffe17 	ldw	r2,-8(fp)
  813324:	10c00417 	ldw	r3,16(r2)
  813328:	e0bffe17 	ldw	r2,-8(fp)
  81332c:	10800517 	ldw	r2,20(r2)
  813330:	18bff61e 	bne	r3,r2,81330c <__alt_mem_onchip_mem+0xff79330c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813334:	0005883a 	mov	r2,zero
}
  813338:	e037883a 	mov	sp,fp
  81333c:	df000017 	ldw	fp,0(sp)
  813340:	dec00104 	addi	sp,sp,4
  813344:	f800283a 	ret

00813348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813348:	defffe04 	addi	sp,sp,-8
  81334c:	dfc00115 	stw	ra,4(sp)
  813350:	df000015 	stw	fp,0(sp)
  813354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813358:	d0a00b17 	ldw	r2,-32724(gp)
  81335c:	10000326 	beq	r2,zero,81336c <alt_get_errno+0x24>
  813360:	d0a00b17 	ldw	r2,-32724(gp)
  813364:	103ee83a 	callr	r2
  813368:	00000106 	br	813370 <alt_get_errno+0x28>
  81336c:	d0a7a804 	addi	r2,gp,-24928
}
  813370:	e037883a 	mov	sp,fp
  813374:	dfc00117 	ldw	ra,4(sp)
  813378:	df000017 	ldw	fp,0(sp)
  81337c:	dec00204 	addi	sp,sp,8
  813380:	f800283a 	ret

00813384 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813384:	defff204 	addi	sp,sp,-56
  813388:	dfc00d15 	stw	ra,52(sp)
  81338c:	df000c15 	stw	fp,48(sp)
  813390:	df000c04 	addi	fp,sp,48
  813394:	e13ffc15 	stw	r4,-16(fp)
  813398:	e17ffd15 	stw	r5,-12(fp)
  81339c:	e1bffe15 	stw	r6,-8(fp)
  8133a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8133a4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8133a8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8133ac:	e0bfff17 	ldw	r2,-4(fp)
  8133b0:	1090000c 	andi	r2,r2,16384
  8133b4:	1005003a 	cmpeq	r2,r2,zero
  8133b8:	10803fcc 	andi	r2,r2,255
  8133bc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8133c0:	00001306 	br	813410 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8133c4:	e0bff517 	ldw	r2,-44(fp)
  8133c8:	10800044 	addi	r2,r2,1
  8133cc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8133d0:	e0bffd17 	ldw	r2,-12(fp)
  8133d4:	10c00044 	addi	r3,r2,1
  8133d8:	e0fffd15 	stw	r3,-12(fp)
  8133dc:	e0fffc17 	ldw	r3,-16(fp)
  8133e0:	18c00217 	ldw	r3,8(r3)
  8133e4:	e13ffc17 	ldw	r4,-16(fp)
  8133e8:	20c7883a 	add	r3,r4,r3
  8133ec:	18c00704 	addi	r3,r3,28
  8133f0:	18c00003 	ldbu	r3,0(r3)
  8133f4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8133f8:	e0bffc17 	ldw	r2,-16(fp)
  8133fc:	10800217 	ldw	r2,8(r2)
  813400:	10800044 	addi	r2,r2,1
  813404:	10c00fcc 	andi	r3,r2,63
  813408:	e0bffc17 	ldw	r2,-16(fp)
  81340c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813410:	e0fff517 	ldw	r3,-44(fp)
  813414:	e0bffe17 	ldw	r2,-8(fp)
  813418:	1880050e 	bge	r3,r2,813430 <altera_avalon_uart_read+0xac>
  81341c:	e0bffc17 	ldw	r2,-16(fp)
  813420:	10c00217 	ldw	r3,8(r2)
  813424:	e0bffc17 	ldw	r2,-16(fp)
  813428:	10800317 	ldw	r2,12(r2)
  81342c:	18bfe51e 	bne	r3,r2,8133c4 <__alt_mem_onchip_mem+0xff7933c4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813430:	e0bff517 	ldw	r2,-44(fp)
  813434:	1000251e 	bne	r2,zero,8134cc <altera_avalon_uart_read+0x148>
  813438:	e0bffc17 	ldw	r2,-16(fp)
  81343c:	10c00217 	ldw	r3,8(r2)
  813440:	e0bffc17 	ldw	r2,-16(fp)
  813444:	10800317 	ldw	r2,12(r2)
  813448:	1880201e 	bne	r3,r2,8134cc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  81344c:	e0bff617 	ldw	r2,-40(fp)
  813450:	1000071e 	bne	r2,zero,813470 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813454:	08133480 	call	813348 <alt_get_errno>
  813458:	1007883a 	mov	r3,r2
  81345c:	008002c4 	movi	r2,11
  813460:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  813464:	00800044 	movi	r2,1
  813468:	e0bff405 	stb	r2,-48(fp)
        break;
  81346c:	00001b06 	br	8134dc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813470:	0005303a 	rdctl	r2,status
  813474:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813478:	e0fff917 	ldw	r3,-28(fp)
  81347c:	00bfff84 	movi	r2,-2
  813480:	1884703a 	and	r2,r3,r2
  813484:	1001703a 	wrctl	status,r2
  
  return context;
  813488:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  81348c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813490:	e0bffc17 	ldw	r2,-16(fp)
  813494:	10800117 	ldw	r2,4(r2)
  813498:	10c02014 	ori	r3,r2,128
  81349c:	e0bffc17 	ldw	r2,-16(fp)
  8134a0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8134a4:	e0bffc17 	ldw	r2,-16(fp)
  8134a8:	10800017 	ldw	r2,0(r2)
  8134ac:	10800304 	addi	r2,r2,12
  8134b0:	e0fffc17 	ldw	r3,-16(fp)
  8134b4:	18c00117 	ldw	r3,4(r3)
  8134b8:	10c00035 	stwio	r3,0(r2)
  8134bc:	e0bff817 	ldw	r2,-32(fp)
  8134c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8134c4:	e0bffa17 	ldw	r2,-24(fp)
  8134c8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8134cc:	e0bff517 	ldw	r2,-44(fp)
  8134d0:	1000021e 	bne	r2,zero,8134dc <altera_avalon_uart_read+0x158>
  8134d4:	e0bffe17 	ldw	r2,-8(fp)
  8134d8:	103fcd1e 	bne	r2,zero,813410 <__alt_mem_onchip_mem+0xff793410>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8134dc:	0005303a 	rdctl	r2,status
  8134e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8134e4:	e0fffb17 	ldw	r3,-20(fp)
  8134e8:	00bfff84 	movi	r2,-2
  8134ec:	1884703a 	and	r2,r3,r2
  8134f0:	1001703a 	wrctl	status,r2
  
  return context;
  8134f4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8134f8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8134fc:	e0bffc17 	ldw	r2,-16(fp)
  813500:	10800117 	ldw	r2,4(r2)
  813504:	10c02014 	ori	r3,r2,128
  813508:	e0bffc17 	ldw	r2,-16(fp)
  81350c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813510:	e0bffc17 	ldw	r2,-16(fp)
  813514:	10800017 	ldw	r2,0(r2)
  813518:	10800304 	addi	r2,r2,12
  81351c:	e0fffc17 	ldw	r3,-16(fp)
  813520:	18c00117 	ldw	r3,4(r3)
  813524:	10c00035 	stwio	r3,0(r2)
  813528:	e0bff817 	ldw	r2,-32(fp)
  81352c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813530:	e0bff717 	ldw	r2,-36(fp)
  813534:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813538:	e0bff403 	ldbu	r2,-48(fp)
  81353c:	10000226 	beq	r2,zero,813548 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  813540:	00bffd44 	movi	r2,-11
  813544:	00000106 	br	81354c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  813548:	e0bff517 	ldw	r2,-44(fp)
  }
}
  81354c:	e037883a 	mov	sp,fp
  813550:	dfc00117 	ldw	ra,4(sp)
  813554:	df000017 	ldw	fp,0(sp)
  813558:	dec00204 	addi	sp,sp,8
  81355c:	f800283a 	ret

00813560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813560:	defffe04 	addi	sp,sp,-8
  813564:	dfc00115 	stw	ra,4(sp)
  813568:	df000015 	stw	fp,0(sp)
  81356c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813570:	d0a00b17 	ldw	r2,-32724(gp)
  813574:	10000326 	beq	r2,zero,813584 <alt_get_errno+0x24>
  813578:	d0a00b17 	ldw	r2,-32724(gp)
  81357c:	103ee83a 	callr	r2
  813580:	00000106 	br	813588 <alt_get_errno+0x28>
  813584:	d0a7a804 	addi	r2,gp,-24928
}
  813588:	e037883a 	mov	sp,fp
  81358c:	dfc00117 	ldw	ra,4(sp)
  813590:	df000017 	ldw	fp,0(sp)
  813594:	dec00204 	addi	sp,sp,8
  813598:	f800283a 	ret

0081359c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  81359c:	defff204 	addi	sp,sp,-56
  8135a0:	dfc00d15 	stw	ra,52(sp)
  8135a4:	df000c15 	stw	fp,48(sp)
  8135a8:	df000c04 	addi	fp,sp,48
  8135ac:	e13ffc15 	stw	r4,-16(fp)
  8135b0:	e17ffd15 	stw	r5,-12(fp)
  8135b4:	e1bffe15 	stw	r6,-8(fp)
  8135b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8135bc:	e0bffe17 	ldw	r2,-8(fp)
  8135c0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8135c4:	e0bfff17 	ldw	r2,-4(fp)
  8135c8:	1090000c 	andi	r2,r2,16384
  8135cc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8135d0:	00003c06 	br	8136c4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8135d4:	e0bffc17 	ldw	r2,-16(fp)
  8135d8:	10800517 	ldw	r2,20(r2)
  8135dc:	10800044 	addi	r2,r2,1
  8135e0:	10800fcc 	andi	r2,r2,63
  8135e4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8135e8:	e0bffc17 	ldw	r2,-16(fp)
  8135ec:	10c00417 	ldw	r3,16(r2)
  8135f0:	e0bff717 	ldw	r2,-36(fp)
  8135f4:	1880221e 	bne	r3,r2,813680 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8135f8:	e0bff517 	ldw	r2,-44(fp)
  8135fc:	10000526 	beq	r2,zero,813614 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813600:	08135600 	call	813560 <alt_get_errno>
  813604:	1007883a 	mov	r3,r2
  813608:	008002c4 	movi	r2,11
  81360c:	18800015 	stw	r2,0(r3)
        break;
  813610:	00002e06 	br	8136cc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813614:	0005303a 	rdctl	r2,status
  813618:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81361c:	e0fff917 	ldw	r3,-28(fp)
  813620:	00bfff84 	movi	r2,-2
  813624:	1884703a 	and	r2,r3,r2
  813628:	1001703a 	wrctl	status,r2
  
  return context;
  81362c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813630:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813634:	e0bffc17 	ldw	r2,-16(fp)
  813638:	10800117 	ldw	r2,4(r2)
  81363c:	10c11014 	ori	r3,r2,1088
  813640:	e0bffc17 	ldw	r2,-16(fp)
  813644:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813648:	e0bffc17 	ldw	r2,-16(fp)
  81364c:	10800017 	ldw	r2,0(r2)
  813650:	10800304 	addi	r2,r2,12
  813654:	e0fffc17 	ldw	r3,-16(fp)
  813658:	18c00117 	ldw	r3,4(r3)
  81365c:	10c00035 	stwio	r3,0(r2)
  813660:	e0bff817 	ldw	r2,-32(fp)
  813664:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813668:	e0bff617 	ldw	r2,-40(fp)
  81366c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813670:	e0bffc17 	ldw	r2,-16(fp)
  813674:	10c00417 	ldw	r3,16(r2)
  813678:	e0bff717 	ldw	r2,-36(fp)
  81367c:	18bffc26 	beq	r3,r2,813670 <__alt_mem_onchip_mem+0xff793670>
      }
    }

    count--;
  813680:	e0bff417 	ldw	r2,-48(fp)
  813684:	10bfffc4 	addi	r2,r2,-1
  813688:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81368c:	e0bffc17 	ldw	r2,-16(fp)
  813690:	10c00517 	ldw	r3,20(r2)
  813694:	e0bffd17 	ldw	r2,-12(fp)
  813698:	11000044 	addi	r4,r2,1
  81369c:	e13ffd15 	stw	r4,-12(fp)
  8136a0:	10800003 	ldbu	r2,0(r2)
  8136a4:	1009883a 	mov	r4,r2
  8136a8:	e0bffc17 	ldw	r2,-16(fp)
  8136ac:	10c5883a 	add	r2,r2,r3
  8136b0:	10801704 	addi	r2,r2,92
  8136b4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8136b8:	e0bffc17 	ldw	r2,-16(fp)
  8136bc:	e0fff717 	ldw	r3,-36(fp)
  8136c0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8136c4:	e0bff417 	ldw	r2,-48(fp)
  8136c8:	103fc21e 	bne	r2,zero,8135d4 <__alt_mem_onchip_mem+0xff7935d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8136cc:	0005303a 	rdctl	r2,status
  8136d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8136d4:	e0fffb17 	ldw	r3,-20(fp)
  8136d8:	00bfff84 	movi	r2,-2
  8136dc:	1884703a 	and	r2,r3,r2
  8136e0:	1001703a 	wrctl	status,r2
  
  return context;
  8136e4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8136e8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8136ec:	e0bffc17 	ldw	r2,-16(fp)
  8136f0:	10800117 	ldw	r2,4(r2)
  8136f4:	10c11014 	ori	r3,r2,1088
  8136f8:	e0bffc17 	ldw	r2,-16(fp)
  8136fc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813700:	e0bffc17 	ldw	r2,-16(fp)
  813704:	10800017 	ldw	r2,0(r2)
  813708:	10800304 	addi	r2,r2,12
  81370c:	e0fffc17 	ldw	r3,-16(fp)
  813710:	18c00117 	ldw	r3,4(r3)
  813714:	10c00035 	stwio	r3,0(r2)
  813718:	e0bff817 	ldw	r2,-32(fp)
  81371c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813720:	e0bffa17 	ldw	r2,-24(fp)
  813724:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813728:	e0fffe17 	ldw	r3,-8(fp)
  81372c:	e0bff417 	ldw	r2,-48(fp)
  813730:	1885c83a 	sub	r2,r3,r2
}
  813734:	e037883a 	mov	sp,fp
  813738:	dfc00117 	ldw	ra,4(sp)
  81373c:	df000017 	ldw	fp,0(sp)
  813740:	dec00204 	addi	sp,sp,8
  813744:	f800283a 	ret

00813748 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813748:	defffe04 	addi	sp,sp,-8
  81374c:	df000115 	stw	fp,4(sp)
  813750:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813754:	e03fff15 	stw	zero,-4(fp)
  813758:	00000506 	br	813770 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81375c:	e0bfff17 	ldw	r2,-4(fp)
  813760:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813764:	e0bfff17 	ldw	r2,-4(fp)
  813768:	10800804 	addi	r2,r2,32
  81376c:	e0bfff15 	stw	r2,-4(fp)
  813770:	e0bfff17 	ldw	r2,-4(fp)
  813774:	10820030 	cmpltui	r2,r2,2048
  813778:	103ff81e 	bne	r2,zero,81375c <__alt_mem_onchip_mem+0xff79375c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81377c:	0001883a 	nop
  813780:	e037883a 	mov	sp,fp
  813784:	df000017 	ldw	fp,0(sp)
  813788:	dec00104 	addi	sp,sp,4
  81378c:	f800283a 	ret

00813790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813790:	defffe04 	addi	sp,sp,-8
  813794:	dfc00115 	stw	ra,4(sp)
  813798:	df000015 	stw	fp,0(sp)
  81379c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8137a0:	d0a00b17 	ldw	r2,-32724(gp)
  8137a4:	10000326 	beq	r2,zero,8137b4 <alt_get_errno+0x24>
  8137a8:	d0a00b17 	ldw	r2,-32724(gp)
  8137ac:	103ee83a 	callr	r2
  8137b0:	00000106 	br	8137b8 <alt_get_errno+0x28>
  8137b4:	d0a7a804 	addi	r2,gp,-24928
}
  8137b8:	e037883a 	mov	sp,fp
  8137bc:	dfc00117 	ldw	ra,4(sp)
  8137c0:	df000017 	ldw	fp,0(sp)
  8137c4:	dec00204 	addi	sp,sp,8
  8137c8:	f800283a 	ret

008137cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8137cc:	defffa04 	addi	sp,sp,-24
  8137d0:	dfc00515 	stw	ra,20(sp)
  8137d4:	df000415 	stw	fp,16(sp)
  8137d8:	df000404 	addi	fp,sp,16
  8137dc:	e13ffe15 	stw	r4,-8(fp)
  8137e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8137e4:	e0bffe17 	ldw	r2,-8(fp)
  8137e8:	10000326 	beq	r2,zero,8137f8 <alt_dev_llist_insert+0x2c>
  8137ec:	e0bffe17 	ldw	r2,-8(fp)
  8137f0:	10800217 	ldw	r2,8(r2)
  8137f4:	1000061e 	bne	r2,zero,813810 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8137f8:	08137900 	call	813790 <alt_get_errno>
  8137fc:	1007883a 	mov	r3,r2
  813800:	00800584 	movi	r2,22
  813804:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813808:	00bffa84 	movi	r2,-22
  81380c:	00001306 	br	81385c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813810:	e0bffe17 	ldw	r2,-8(fp)
  813814:	e0ffff17 	ldw	r3,-4(fp)
  813818:	e0fffc15 	stw	r3,-16(fp)
  81381c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813820:	e0bffd17 	ldw	r2,-12(fp)
  813824:	e0fffc17 	ldw	r3,-16(fp)
  813828:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81382c:	e0bffc17 	ldw	r2,-16(fp)
  813830:	10c00017 	ldw	r3,0(r2)
  813834:	e0bffd17 	ldw	r2,-12(fp)
  813838:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81383c:	e0bffc17 	ldw	r2,-16(fp)
  813840:	10800017 	ldw	r2,0(r2)
  813844:	e0fffd17 	ldw	r3,-12(fp)
  813848:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81384c:	e0bffc17 	ldw	r2,-16(fp)
  813850:	e0fffd17 	ldw	r3,-12(fp)
  813854:	10c00015 	stw	r3,0(r2)

  return 0;  
  813858:	0005883a 	mov	r2,zero
}
  81385c:	e037883a 	mov	sp,fp
  813860:	dfc00117 	ldw	ra,4(sp)
  813864:	df000017 	ldw	fp,0(sp)
  813868:	dec00204 	addi	sp,sp,8
  81386c:	f800283a 	ret

00813870 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813870:	defffd04 	addi	sp,sp,-12
  813874:	dfc00215 	stw	ra,8(sp)
  813878:	df000115 	stw	fp,4(sp)
  81387c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813880:	00802074 	movhi	r2,129
  813884:	10917a04 	addi	r2,r2,17896
  813888:	e0bfff15 	stw	r2,-4(fp)
  81388c:	00000606 	br	8138a8 <_do_ctors+0x38>
        (*ctor) (); 
  813890:	e0bfff17 	ldw	r2,-4(fp)
  813894:	10800017 	ldw	r2,0(r2)
  813898:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  81389c:	e0bfff17 	ldw	r2,-4(fp)
  8138a0:	10bfff04 	addi	r2,r2,-4
  8138a4:	e0bfff15 	stw	r2,-4(fp)
  8138a8:	e0ffff17 	ldw	r3,-4(fp)
  8138ac:	00802074 	movhi	r2,129
  8138b0:	10917b04 	addi	r2,r2,17900
  8138b4:	18bff62e 	bgeu	r3,r2,813890 <__alt_mem_onchip_mem+0xff793890>
        (*ctor) (); 
}
  8138b8:	0001883a 	nop
  8138bc:	e037883a 	mov	sp,fp
  8138c0:	dfc00117 	ldw	ra,4(sp)
  8138c4:	df000017 	ldw	fp,0(sp)
  8138c8:	dec00204 	addi	sp,sp,8
  8138cc:	f800283a 	ret

008138d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8138d0:	defffd04 	addi	sp,sp,-12
  8138d4:	dfc00215 	stw	ra,8(sp)
  8138d8:	df000115 	stw	fp,4(sp)
  8138dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8138e0:	00802074 	movhi	r2,129
  8138e4:	10917a04 	addi	r2,r2,17896
  8138e8:	e0bfff15 	stw	r2,-4(fp)
  8138ec:	00000606 	br	813908 <_do_dtors+0x38>
        (*dtor) (); 
  8138f0:	e0bfff17 	ldw	r2,-4(fp)
  8138f4:	10800017 	ldw	r2,0(r2)
  8138f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8138fc:	e0bfff17 	ldw	r2,-4(fp)
  813900:	10bfff04 	addi	r2,r2,-4
  813904:	e0bfff15 	stw	r2,-4(fp)
  813908:	e0ffff17 	ldw	r3,-4(fp)
  81390c:	00802074 	movhi	r2,129
  813910:	10917b04 	addi	r2,r2,17900
  813914:	18bff62e 	bgeu	r3,r2,8138f0 <__alt_mem_onchip_mem+0xff7938f0>
        (*dtor) (); 
}
  813918:	0001883a 	nop
  81391c:	e037883a 	mov	sp,fp
  813920:	dfc00117 	ldw	ra,4(sp)
  813924:	df000017 	ldw	fp,0(sp)
  813928:	dec00204 	addi	sp,sp,8
  81392c:	f800283a 	ret

00813930 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813930:	defffa04 	addi	sp,sp,-24
  813934:	dfc00515 	stw	ra,20(sp)
  813938:	df000415 	stw	fp,16(sp)
  81393c:	df000404 	addi	fp,sp,16
  813940:	e13ffe15 	stw	r4,-8(fp)
  813944:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813948:	e0bfff17 	ldw	r2,-4(fp)
  81394c:	10800017 	ldw	r2,0(r2)
  813950:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813954:	e13ffe17 	ldw	r4,-8(fp)
  813958:	08049180 	call	804918 <strlen>
  81395c:	10800044 	addi	r2,r2,1
  813960:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813964:	00000d06 	br	81399c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813968:	e0bffc17 	ldw	r2,-16(fp)
  81396c:	10800217 	ldw	r2,8(r2)
  813970:	e0fffd17 	ldw	r3,-12(fp)
  813974:	180d883a 	mov	r6,r3
  813978:	e17ffe17 	ldw	r5,-8(fp)
  81397c:	1009883a 	mov	r4,r2
  813980:	08142a40 	call	8142a4 <memcmp>
  813984:	1000021e 	bne	r2,zero,813990 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813988:	e0bffc17 	ldw	r2,-16(fp)
  81398c:	00000706 	br	8139ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813990:	e0bffc17 	ldw	r2,-16(fp)
  813994:	10800017 	ldw	r2,0(r2)
  813998:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81399c:	e0fffc17 	ldw	r3,-16(fp)
  8139a0:	e0bfff17 	ldw	r2,-4(fp)
  8139a4:	18bff01e 	bne	r3,r2,813968 <__alt_mem_onchip_mem+0xff793968>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8139a8:	0005883a 	mov	r2,zero
}
  8139ac:	e037883a 	mov	sp,fp
  8139b0:	dfc00117 	ldw	ra,4(sp)
  8139b4:	df000017 	ldw	fp,0(sp)
  8139b8:	dec00204 	addi	sp,sp,8
  8139bc:	f800283a 	ret

008139c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8139c0:	defffb04 	addi	sp,sp,-20
  8139c4:	dfc00415 	stw	ra,16(sp)
  8139c8:	df000315 	stw	fp,12(sp)
  8139cc:	df000304 	addi	fp,sp,12
  8139d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8139d4:	d0a00617 	ldw	r2,-32744(gp)
  8139d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8139dc:	00003106 	br	813aa4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  8139e0:	e0bffd17 	ldw	r2,-12(fp)
  8139e4:	10800217 	ldw	r2,8(r2)
  8139e8:	1009883a 	mov	r4,r2
  8139ec:	08049180 	call	804918 <strlen>
  8139f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8139f4:	e0bffd17 	ldw	r2,-12(fp)
  8139f8:	10c00217 	ldw	r3,8(r2)
  8139fc:	e0bffe17 	ldw	r2,-8(fp)
  813a00:	10bfffc4 	addi	r2,r2,-1
  813a04:	1885883a 	add	r2,r3,r2
  813a08:	10800003 	ldbu	r2,0(r2)
  813a0c:	10803fcc 	andi	r2,r2,255
  813a10:	1080201c 	xori	r2,r2,128
  813a14:	10bfe004 	addi	r2,r2,-128
  813a18:	10800bd8 	cmpnei	r2,r2,47
  813a1c:	1000031e 	bne	r2,zero,813a2c <alt_find_file+0x6c>
    {
      len -= 1;
  813a20:	e0bffe17 	ldw	r2,-8(fp)
  813a24:	10bfffc4 	addi	r2,r2,-1
  813a28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813a2c:	e0bffe17 	ldw	r2,-8(fp)
  813a30:	e0ffff17 	ldw	r3,-4(fp)
  813a34:	1885883a 	add	r2,r3,r2
  813a38:	10800003 	ldbu	r2,0(r2)
  813a3c:	10803fcc 	andi	r2,r2,255
  813a40:	1080201c 	xori	r2,r2,128
  813a44:	10bfe004 	addi	r2,r2,-128
  813a48:	10800be0 	cmpeqi	r2,r2,47
  813a4c:	1000081e 	bne	r2,zero,813a70 <alt_find_file+0xb0>
  813a50:	e0bffe17 	ldw	r2,-8(fp)
  813a54:	e0ffff17 	ldw	r3,-4(fp)
  813a58:	1885883a 	add	r2,r3,r2
  813a5c:	10800003 	ldbu	r2,0(r2)
  813a60:	10803fcc 	andi	r2,r2,255
  813a64:	1080201c 	xori	r2,r2,128
  813a68:	10bfe004 	addi	r2,r2,-128
  813a6c:	10000a1e 	bne	r2,zero,813a98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  813a70:	e0bffd17 	ldw	r2,-12(fp)
  813a74:	10800217 	ldw	r2,8(r2)
  813a78:	e0fffe17 	ldw	r3,-8(fp)
  813a7c:	180d883a 	mov	r6,r3
  813a80:	e17fff17 	ldw	r5,-4(fp)
  813a84:	1009883a 	mov	r4,r2
  813a88:	08142a40 	call	8142a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813a8c:	1000021e 	bne	r2,zero,813a98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813a90:	e0bffd17 	ldw	r2,-12(fp)
  813a94:	00000706 	br	813ab4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  813a98:	e0bffd17 	ldw	r2,-12(fp)
  813a9c:	10800017 	ldw	r2,0(r2)
  813aa0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813aa4:	e0fffd17 	ldw	r3,-12(fp)
  813aa8:	d0a00604 	addi	r2,gp,-32744
  813aac:	18bfcc1e 	bne	r3,r2,8139e0 <__alt_mem_onchip_mem+0xff7939e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813ab0:	0005883a 	mov	r2,zero
}
  813ab4:	e037883a 	mov	sp,fp
  813ab8:	dfc00117 	ldw	ra,4(sp)
  813abc:	df000017 	ldw	fp,0(sp)
  813ac0:	dec00204 	addi	sp,sp,8
  813ac4:	f800283a 	ret

00813ac8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813ac8:	defffc04 	addi	sp,sp,-16
  813acc:	df000315 	stw	fp,12(sp)
  813ad0:	df000304 	addi	fp,sp,12
  813ad4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813ad8:	00bffa04 	movi	r2,-24
  813adc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813ae0:	e03ffd15 	stw	zero,-12(fp)
  813ae4:	00001906 	br	813b4c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  813ae8:	00802074 	movhi	r2,129
  813aec:	10957c04 	addi	r2,r2,22000
  813af0:	e0fffd17 	ldw	r3,-12(fp)
  813af4:	18c00324 	muli	r3,r3,12
  813af8:	10c5883a 	add	r2,r2,r3
  813afc:	10800017 	ldw	r2,0(r2)
  813b00:	10000f1e 	bne	r2,zero,813b40 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  813b04:	00802074 	movhi	r2,129
  813b08:	10957c04 	addi	r2,r2,22000
  813b0c:	e0fffd17 	ldw	r3,-12(fp)
  813b10:	18c00324 	muli	r3,r3,12
  813b14:	10c5883a 	add	r2,r2,r3
  813b18:	e0ffff17 	ldw	r3,-4(fp)
  813b1c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813b20:	d0e00a17 	ldw	r3,-32728(gp)
  813b24:	e0bffd17 	ldw	r2,-12(fp)
  813b28:	1880020e 	bge	r3,r2,813b34 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  813b2c:	e0bffd17 	ldw	r2,-12(fp)
  813b30:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  813b34:	e0bffd17 	ldw	r2,-12(fp)
  813b38:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813b3c:	00000606 	br	813b58 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813b40:	e0bffd17 	ldw	r2,-12(fp)
  813b44:	10800044 	addi	r2,r2,1
  813b48:	e0bffd15 	stw	r2,-12(fp)
  813b4c:	e0bffd17 	ldw	r2,-12(fp)
  813b50:	10800810 	cmplti	r2,r2,32
  813b54:	103fe41e 	bne	r2,zero,813ae8 <__alt_mem_onchip_mem+0xff793ae8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813b58:	e0bffe17 	ldw	r2,-8(fp)
}
  813b5c:	e037883a 	mov	sp,fp
  813b60:	df000017 	ldw	fp,0(sp)
  813b64:	dec00104 	addi	sp,sp,4
  813b68:	f800283a 	ret

00813b6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813b6c:	defffe04 	addi	sp,sp,-8
  813b70:	dfc00115 	stw	ra,4(sp)
  813b74:	df000015 	stw	fp,0(sp)
  813b78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813b7c:	01440004 	movi	r5,4096
  813b80:	0009883a 	mov	r4,zero
  813b84:	081412c0 	call	81412c <alt_icache_flush>
#endif
}
  813b88:	0001883a 	nop
  813b8c:	e037883a 	mov	sp,fp
  813b90:	dfc00117 	ldw	ra,4(sp)
  813b94:	df000017 	ldw	fp,0(sp)
  813b98:	dec00204 	addi	sp,sp,8
  813b9c:	f800283a 	ret

00813ba0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813ba0:	defff904 	addi	sp,sp,-28
  813ba4:	dfc00615 	stw	ra,24(sp)
  813ba8:	df000515 	stw	fp,20(sp)
  813bac:	df000504 	addi	fp,sp,20
  813bb0:	e13ffc15 	stw	r4,-16(fp)
  813bb4:	e17ffd15 	stw	r5,-12(fp)
  813bb8:	e1bffe15 	stw	r6,-8(fp)
  813bbc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  813bc0:	e0800217 	ldw	r2,8(fp)
  813bc4:	d8800015 	stw	r2,0(sp)
  813bc8:	e1ffff17 	ldw	r7,-4(fp)
  813bcc:	e1bffe17 	ldw	r6,-8(fp)
  813bd0:	e17ffd17 	ldw	r5,-12(fp)
  813bd4:	e13ffc17 	ldw	r4,-16(fp)
  813bd8:	0813d500 	call	813d50 <alt_iic_isr_register>
}  
  813bdc:	e037883a 	mov	sp,fp
  813be0:	dfc00117 	ldw	ra,4(sp)
  813be4:	df000017 	ldw	fp,0(sp)
  813be8:	dec00204 	addi	sp,sp,8
  813bec:	f800283a 	ret

00813bf0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  813bf0:	defff904 	addi	sp,sp,-28
  813bf4:	df000615 	stw	fp,24(sp)
  813bf8:	df000604 	addi	fp,sp,24
  813bfc:	e13ffe15 	stw	r4,-8(fp)
  813c00:	e17fff15 	stw	r5,-4(fp)
  813c04:	e0bfff17 	ldw	r2,-4(fp)
  813c08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c0c:	0005303a 	rdctl	r2,status
  813c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c14:	e0fffb17 	ldw	r3,-20(fp)
  813c18:	00bfff84 	movi	r2,-2
  813c1c:	1884703a 	and	r2,r3,r2
  813c20:	1001703a 	wrctl	status,r2
  
  return context;
  813c24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813c28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  813c2c:	00c00044 	movi	r3,1
  813c30:	e0bffa17 	ldw	r2,-24(fp)
  813c34:	1884983a 	sll	r2,r3,r2
  813c38:	1007883a 	mov	r3,r2
  813c3c:	d0a7b417 	ldw	r2,-24880(gp)
  813c40:	1884b03a 	or	r2,r3,r2
  813c44:	d0a7b415 	stw	r2,-24880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813c48:	d0a7b417 	ldw	r2,-24880(gp)
  813c4c:	100170fa 	wrctl	ienable,r2
  813c50:	e0bffc17 	ldw	r2,-16(fp)
  813c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c58:	e0bffd17 	ldw	r2,-12(fp)
  813c5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813c60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  813c64:	0001883a 	nop
}
  813c68:	e037883a 	mov	sp,fp
  813c6c:	df000017 	ldw	fp,0(sp)
  813c70:	dec00104 	addi	sp,sp,4
  813c74:	f800283a 	ret

00813c78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  813c78:	defff904 	addi	sp,sp,-28
  813c7c:	df000615 	stw	fp,24(sp)
  813c80:	df000604 	addi	fp,sp,24
  813c84:	e13ffe15 	stw	r4,-8(fp)
  813c88:	e17fff15 	stw	r5,-4(fp)
  813c8c:	e0bfff17 	ldw	r2,-4(fp)
  813c90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c94:	0005303a 	rdctl	r2,status
  813c98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c9c:	e0fffb17 	ldw	r3,-20(fp)
  813ca0:	00bfff84 	movi	r2,-2
  813ca4:	1884703a 	and	r2,r3,r2
  813ca8:	1001703a 	wrctl	status,r2
  
  return context;
  813cac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813cb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  813cb4:	00c00044 	movi	r3,1
  813cb8:	e0bffa17 	ldw	r2,-24(fp)
  813cbc:	1884983a 	sll	r2,r3,r2
  813cc0:	0084303a 	nor	r2,zero,r2
  813cc4:	1007883a 	mov	r3,r2
  813cc8:	d0a7b417 	ldw	r2,-24880(gp)
  813ccc:	1884703a 	and	r2,r3,r2
  813cd0:	d0a7b415 	stw	r2,-24880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813cd4:	d0a7b417 	ldw	r2,-24880(gp)
  813cd8:	100170fa 	wrctl	ienable,r2
  813cdc:	e0bffc17 	ldw	r2,-16(fp)
  813ce0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ce4:	e0bffd17 	ldw	r2,-12(fp)
  813ce8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813cec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  813cf0:	0001883a 	nop
}
  813cf4:	e037883a 	mov	sp,fp
  813cf8:	df000017 	ldw	fp,0(sp)
  813cfc:	dec00104 	addi	sp,sp,4
  813d00:	f800283a 	ret

00813d04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  813d04:	defffc04 	addi	sp,sp,-16
  813d08:	df000315 	stw	fp,12(sp)
  813d0c:	df000304 	addi	fp,sp,12
  813d10:	e13ffe15 	stw	r4,-8(fp)
  813d14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  813d18:	000530fa 	rdctl	r2,ienable
  813d1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  813d20:	00c00044 	movi	r3,1
  813d24:	e0bfff17 	ldw	r2,-4(fp)
  813d28:	1884983a 	sll	r2,r3,r2
  813d2c:	1007883a 	mov	r3,r2
  813d30:	e0bffd17 	ldw	r2,-12(fp)
  813d34:	1884703a 	and	r2,r3,r2
  813d38:	1004c03a 	cmpne	r2,r2,zero
  813d3c:	10803fcc 	andi	r2,r2,255
}
  813d40:	e037883a 	mov	sp,fp
  813d44:	df000017 	ldw	fp,0(sp)
  813d48:	dec00104 	addi	sp,sp,4
  813d4c:	f800283a 	ret

00813d50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813d50:	defff504 	addi	sp,sp,-44
  813d54:	dfc00a15 	stw	ra,40(sp)
  813d58:	df000915 	stw	fp,36(sp)
  813d5c:	df000904 	addi	fp,sp,36
  813d60:	e13ffc15 	stw	r4,-16(fp)
  813d64:	e17ffd15 	stw	r5,-12(fp)
  813d68:	e1bffe15 	stw	r6,-8(fp)
  813d6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  813d70:	00bffa84 	movi	r2,-22
  813d74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  813d78:	e0bffd17 	ldw	r2,-12(fp)
  813d7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  813d80:	e0bff817 	ldw	r2,-32(fp)
  813d84:	10800808 	cmpgei	r2,r2,32
  813d88:	1000271e 	bne	r2,zero,813e28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d8c:	0005303a 	rdctl	r2,status
  813d90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d94:	e0fffb17 	ldw	r3,-20(fp)
  813d98:	00bfff84 	movi	r2,-2
  813d9c:	1884703a 	and	r2,r3,r2
  813da0:	1001703a 	wrctl	status,r2
  
  return context;
  813da4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  813da8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  813dac:	008020b4 	movhi	r2,130
  813db0:	10a26904 	addi	r2,r2,-30300
  813db4:	e0fff817 	ldw	r3,-32(fp)
  813db8:	180690fa 	slli	r3,r3,3
  813dbc:	10c5883a 	add	r2,r2,r3
  813dc0:	e0fffe17 	ldw	r3,-8(fp)
  813dc4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  813dc8:	008020b4 	movhi	r2,130
  813dcc:	10a26904 	addi	r2,r2,-30300
  813dd0:	e0fff817 	ldw	r3,-32(fp)
  813dd4:	180690fa 	slli	r3,r3,3
  813dd8:	10c5883a 	add	r2,r2,r3
  813ddc:	10800104 	addi	r2,r2,4
  813de0:	e0ffff17 	ldw	r3,-4(fp)
  813de4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  813de8:	e0bffe17 	ldw	r2,-8(fp)
  813dec:	10000526 	beq	r2,zero,813e04 <alt_iic_isr_register+0xb4>
  813df0:	e0bff817 	ldw	r2,-32(fp)
  813df4:	100b883a 	mov	r5,r2
  813df8:	e13ffc17 	ldw	r4,-16(fp)
  813dfc:	0813bf00 	call	813bf0 <alt_ic_irq_enable>
  813e00:	00000406 	br	813e14 <alt_iic_isr_register+0xc4>
  813e04:	e0bff817 	ldw	r2,-32(fp)
  813e08:	100b883a 	mov	r5,r2
  813e0c:	e13ffc17 	ldw	r4,-16(fp)
  813e10:	0813c780 	call	813c78 <alt_ic_irq_disable>
  813e14:	e0bff715 	stw	r2,-36(fp)
  813e18:	e0bffa17 	ldw	r2,-24(fp)
  813e1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813e20:	e0bff917 	ldw	r2,-28(fp)
  813e24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  813e28:	e0bff717 	ldw	r2,-36(fp)
}
  813e2c:	e037883a 	mov	sp,fp
  813e30:	dfc00117 	ldw	ra,4(sp)
  813e34:	df000017 	ldw	fp,0(sp)
  813e38:	dec00204 	addi	sp,sp,8
  813e3c:	f800283a 	ret

00813e40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813e40:	defff904 	addi	sp,sp,-28
  813e44:	dfc00615 	stw	ra,24(sp)
  813e48:	df000515 	stw	fp,20(sp)
  813e4c:	df000504 	addi	fp,sp,20
  813e50:	e13ffc15 	stw	r4,-16(fp)
  813e54:	e17ffd15 	stw	r5,-12(fp)
  813e58:	e1bffe15 	stw	r6,-8(fp)
  813e5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813e60:	e1bfff17 	ldw	r6,-4(fp)
  813e64:	e17ffe17 	ldw	r5,-8(fp)
  813e68:	e13ffd17 	ldw	r4,-12(fp)
  813e6c:	0810cb80 	call	810cb8 <open>
  813e70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  813e74:	e0bffb17 	ldw	r2,-20(fp)
  813e78:	10001c16 	blt	r2,zero,813eec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  813e7c:	00802074 	movhi	r2,129
  813e80:	10957c04 	addi	r2,r2,22000
  813e84:	e0fffb17 	ldw	r3,-20(fp)
  813e88:	18c00324 	muli	r3,r3,12
  813e8c:	10c5883a 	add	r2,r2,r3
  813e90:	10c00017 	ldw	r3,0(r2)
  813e94:	e0bffc17 	ldw	r2,-16(fp)
  813e98:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  813e9c:	00802074 	movhi	r2,129
  813ea0:	10957c04 	addi	r2,r2,22000
  813ea4:	e0fffb17 	ldw	r3,-20(fp)
  813ea8:	18c00324 	muli	r3,r3,12
  813eac:	10c5883a 	add	r2,r2,r3
  813eb0:	10800104 	addi	r2,r2,4
  813eb4:	10c00017 	ldw	r3,0(r2)
  813eb8:	e0bffc17 	ldw	r2,-16(fp)
  813ebc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  813ec0:	00802074 	movhi	r2,129
  813ec4:	10957c04 	addi	r2,r2,22000
  813ec8:	e0fffb17 	ldw	r3,-20(fp)
  813ecc:	18c00324 	muli	r3,r3,12
  813ed0:	10c5883a 	add	r2,r2,r3
  813ed4:	10800204 	addi	r2,r2,8
  813ed8:	10c00017 	ldw	r3,0(r2)
  813edc:	e0bffc17 	ldw	r2,-16(fp)
  813ee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  813ee4:	e13ffb17 	ldw	r4,-20(fp)
  813ee8:	0810f440 	call	810f44 <alt_release_fd>
  }
} 
  813eec:	0001883a 	nop
  813ef0:	e037883a 	mov	sp,fp
  813ef4:	dfc00117 	ldw	ra,4(sp)
  813ef8:	df000017 	ldw	fp,0(sp)
  813efc:	dec00204 	addi	sp,sp,8
  813f00:	f800283a 	ret

00813f04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813f04:	defffb04 	addi	sp,sp,-20
  813f08:	dfc00415 	stw	ra,16(sp)
  813f0c:	df000315 	stw	fp,12(sp)
  813f10:	df000304 	addi	fp,sp,12
  813f14:	e13ffd15 	stw	r4,-12(fp)
  813f18:	e17ffe15 	stw	r5,-8(fp)
  813f1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813f20:	01c07fc4 	movi	r7,511
  813f24:	01800044 	movi	r6,1
  813f28:	e17ffd17 	ldw	r5,-12(fp)
  813f2c:	01002074 	movhi	r4,129
  813f30:	21157f04 	addi	r4,r4,22012
  813f34:	0813e400 	call	813e40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  813f38:	01c07fc4 	movi	r7,511
  813f3c:	000d883a 	mov	r6,zero
  813f40:	e17ffe17 	ldw	r5,-8(fp)
  813f44:	01002074 	movhi	r4,129
  813f48:	21157c04 	addi	r4,r4,22000
  813f4c:	0813e400 	call	813e40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813f50:	01c07fc4 	movi	r7,511
  813f54:	01800044 	movi	r6,1
  813f58:	e17fff17 	ldw	r5,-4(fp)
  813f5c:	01002074 	movhi	r4,129
  813f60:	21158204 	addi	r4,r4,22024
  813f64:	0813e400 	call	813e40 <alt_open_fd>
}  
  813f68:	0001883a 	nop
  813f6c:	e037883a 	mov	sp,fp
  813f70:	dfc00117 	ldw	ra,4(sp)
  813f74:	df000017 	ldw	fp,0(sp)
  813f78:	dec00204 	addi	sp,sp,8
  813f7c:	f800283a 	ret

00813f80 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  813f80:	defffd04 	addi	sp,sp,-12
  813f84:	dfc00215 	stw	ra,8(sp)
  813f88:	df000115 	stw	fp,4(sp)
  813f8c:	df000104 	addi	fp,sp,4
  813f90:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  813f94:	e13fff17 	ldw	r4,-4(fp)
  813f98:	0813fd40 	call	813fd4 <alt_busy_sleep>
}
  813f9c:	e037883a 	mov	sp,fp
  813fa0:	dfc00117 	ldw	ra,4(sp)
  813fa4:	df000017 	ldw	fp,0(sp)
  813fa8:	dec00204 	addi	sp,sp,8
  813fac:	f800283a 	ret

00813fb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  813fb0:	deffff04 	addi	sp,sp,-4
  813fb4:	df000015 	stw	fp,0(sp)
  813fb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813fbc:	000170fa 	wrctl	ienable,zero
}
  813fc0:	0001883a 	nop
  813fc4:	e037883a 	mov	sp,fp
  813fc8:	df000017 	ldw	fp,0(sp)
  813fcc:	dec00104 	addi	sp,sp,4
  813fd0:	f800283a 	ret

00813fd4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  813fd4:	defffa04 	addi	sp,sp,-24
  813fd8:	dfc00515 	stw	ra,20(sp)
  813fdc:	df000415 	stw	fp,16(sp)
  813fe0:	df000404 	addi	fp,sp,16
  813fe4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813fe8:	008000c4 	movi	r2,3
  813fec:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  813ff0:	e0fffd17 	ldw	r3,-12(fp)
  813ff4:	008003f4 	movhi	r2,15
  813ff8:	10909004 	addi	r2,r2,16960
  813ffc:	1885383a 	mul	r2,r3,r2
  814000:	100b883a 	mov	r5,r2
  814004:	0100bef4 	movhi	r4,763
  814008:	213c2004 	addi	r4,r4,-3968
  81400c:	080dda40 	call	80dda4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  814010:	100b883a 	mov	r5,r2
  814014:	01200034 	movhi	r4,32768
  814018:	213fffc4 	addi	r4,r4,-1
  81401c:	080dda40 	call	80dda4 <__udivsi3>
  814020:	100b883a 	mov	r5,r2
  814024:	e13fff17 	ldw	r4,-4(fp)
  814028:	080dda40 	call	80dda4 <__udivsi3>
  81402c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  814030:	e0bffe17 	ldw	r2,-8(fp)
  814034:	10002a26 	beq	r2,zero,8140e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  814038:	e03ffc15 	stw	zero,-16(fp)
  81403c:	00001706 	br	81409c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  814040:	00a00034 	movhi	r2,32768
  814044:	10bfffc4 	addi	r2,r2,-1
  814048:	10bfffc4 	addi	r2,r2,-1
  81404c:	103ffe1e 	bne	r2,zero,814048 <__alt_mem_onchip_mem+0xff794048>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  814050:	e0fffd17 	ldw	r3,-12(fp)
  814054:	008003f4 	movhi	r2,15
  814058:	10909004 	addi	r2,r2,16960
  81405c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814060:	100b883a 	mov	r5,r2
  814064:	0100bef4 	movhi	r4,763
  814068:	213c2004 	addi	r4,r4,-3968
  81406c:	080dda40 	call	80dda4 <__udivsi3>
  814070:	100b883a 	mov	r5,r2
  814074:	01200034 	movhi	r4,32768
  814078:	213fffc4 	addi	r4,r4,-1
  81407c:	080dda40 	call	80dda4 <__udivsi3>
  814080:	1007883a 	mov	r3,r2
  814084:	e0bfff17 	ldw	r2,-4(fp)
  814088:	10c5c83a 	sub	r2,r2,r3
  81408c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814090:	e0bffc17 	ldw	r2,-16(fp)
  814094:	10800044 	addi	r2,r2,1
  814098:	e0bffc15 	stw	r2,-16(fp)
  81409c:	e0fffc17 	ldw	r3,-16(fp)
  8140a0:	e0bffe17 	ldw	r2,-8(fp)
  8140a4:	18bfe616 	blt	r3,r2,814040 <__alt_mem_onchip_mem+0xff794040>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8140a8:	e0fffd17 	ldw	r3,-12(fp)
  8140ac:	008003f4 	movhi	r2,15
  8140b0:	10909004 	addi	r2,r2,16960
  8140b4:	1885383a 	mul	r2,r3,r2
  8140b8:	100b883a 	mov	r5,r2
  8140bc:	0100bef4 	movhi	r4,763
  8140c0:	213c2004 	addi	r4,r4,-3968
  8140c4:	080dda40 	call	80dda4 <__udivsi3>
  8140c8:	1007883a 	mov	r3,r2
  8140cc:	e0bfff17 	ldw	r2,-4(fp)
  8140d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8140d4:	10bfffc4 	addi	r2,r2,-1
  8140d8:	103ffe1e 	bne	r2,zero,8140d4 <__alt_mem_onchip_mem+0xff7940d4>
  8140dc:	00000d06 	br	814114 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8140e0:	e0fffd17 	ldw	r3,-12(fp)
  8140e4:	008003f4 	movhi	r2,15
  8140e8:	10909004 	addi	r2,r2,16960
  8140ec:	1885383a 	mul	r2,r3,r2
  8140f0:	100b883a 	mov	r5,r2
  8140f4:	0100bef4 	movhi	r4,763
  8140f8:	213c2004 	addi	r4,r4,-3968
  8140fc:	080dda40 	call	80dda4 <__udivsi3>
  814100:	1007883a 	mov	r3,r2
  814104:	e0bfff17 	ldw	r2,-4(fp)
  814108:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81410c:	10bfffc4 	addi	r2,r2,-1
  814110:	00bffe16 	blt	zero,r2,81410c <__alt_mem_onchip_mem+0xff79410c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  814114:	0005883a 	mov	r2,zero
}
  814118:	e037883a 	mov	sp,fp
  81411c:	dfc00117 	ldw	ra,4(sp)
  814120:	df000017 	ldw	fp,0(sp)
  814124:	dec00204 	addi	sp,sp,8
  814128:	f800283a 	ret

0081412c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81412c:	defffb04 	addi	sp,sp,-20
  814130:	df000415 	stw	fp,16(sp)
  814134:	df000404 	addi	fp,sp,16
  814138:	e13ffe15 	stw	r4,-8(fp)
  81413c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814140:	e0bfff17 	ldw	r2,-4(fp)
  814144:	10840070 	cmpltui	r2,r2,4097
  814148:	1000021e 	bne	r2,zero,814154 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81414c:	00840004 	movi	r2,4096
  814150:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814154:	e0fffe17 	ldw	r3,-8(fp)
  814158:	e0bfff17 	ldw	r2,-4(fp)
  81415c:	1885883a 	add	r2,r3,r2
  814160:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814164:	e0bffe17 	ldw	r2,-8(fp)
  814168:	e0bffc15 	stw	r2,-16(fp)
  81416c:	00000506 	br	814184 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814170:	e0bffc17 	ldw	r2,-16(fp)
  814174:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814178:	e0bffc17 	ldw	r2,-16(fp)
  81417c:	10800804 	addi	r2,r2,32
  814180:	e0bffc15 	stw	r2,-16(fp)
  814184:	e0fffc17 	ldw	r3,-16(fp)
  814188:	e0bffd17 	ldw	r2,-12(fp)
  81418c:	18bff836 	bltu	r3,r2,814170 <__alt_mem_onchip_mem+0xff794170>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814190:	e0bffe17 	ldw	r2,-8(fp)
  814194:	108007cc 	andi	r2,r2,31
  814198:	10000226 	beq	r2,zero,8141a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81419c:	e0bffc17 	ldw	r2,-16(fp)
  8141a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8141a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8141a8:	0001883a 	nop
  8141ac:	e037883a 	mov	sp,fp
  8141b0:	df000017 	ldw	fp,0(sp)
  8141b4:	dec00104 	addi	sp,sp,4
  8141b8:	f800283a 	ret

008141bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8141bc:	defffe04 	addi	sp,sp,-8
  8141c0:	df000115 	stw	fp,4(sp)
  8141c4:	df000104 	addi	fp,sp,4
  8141c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8141cc:	e0bfff17 	ldw	r2,-4(fp)
  8141d0:	10bffe84 	addi	r2,r2,-6
  8141d4:	10c00428 	cmpgeui	r3,r2,16
  8141d8:	18001a1e 	bne	r3,zero,814244 <alt_exception_cause_generated_bad_addr+0x88>
  8141dc:	100690ba 	slli	r3,r2,2
  8141e0:	00802074 	movhi	r2,129
  8141e4:	10907d04 	addi	r2,r2,16884
  8141e8:	1885883a 	add	r2,r3,r2
  8141ec:	10800017 	ldw	r2,0(r2)
  8141f0:	1000683a 	jmp	r2
  8141f4:	00814234 	movhi	r2,1288
  8141f8:	00814234 	movhi	r2,1288
  8141fc:	00814244 	movi	r2,1289
  814200:	00814244 	movi	r2,1289
  814204:	00814244 	movi	r2,1289
  814208:	00814234 	movhi	r2,1288
  81420c:	0081423c 	xorhi	r2,zero,1288
  814210:	00814244 	movi	r2,1289
  814214:	00814234 	movhi	r2,1288
  814218:	00814234 	movhi	r2,1288
  81421c:	00814244 	movi	r2,1289
  814220:	00814234 	movhi	r2,1288
  814224:	0081423c 	xorhi	r2,zero,1288
  814228:	00814244 	movi	r2,1289
  81422c:	00814244 	movi	r2,1289
  814230:	00814234 	movhi	r2,1288
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  814234:	00800044 	movi	r2,1
  814238:	00000306 	br	814248 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81423c:	0005883a 	mov	r2,zero
  814240:	00000106 	br	814248 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  814244:	0005883a 	mov	r2,zero
  }
}
  814248:	e037883a 	mov	sp,fp
  81424c:	df000017 	ldw	fp,0(sp)
  814250:	dec00104 	addi	sp,sp,4
  814254:	f800283a 	ret

00814258 <atexit>:
  814258:	200b883a 	mov	r5,r4
  81425c:	000f883a 	mov	r7,zero
  814260:	000d883a 	mov	r6,zero
  814264:	0009883a 	mov	r4,zero
  814268:	08143201 	jmpi	814320 <__register_exitproc>

0081426c <exit>:
  81426c:	defffe04 	addi	sp,sp,-8
  814270:	000b883a 	mov	r5,zero
  814274:	dc000015 	stw	r16,0(sp)
  814278:	dfc00115 	stw	ra,4(sp)
  81427c:	2021883a 	mov	r16,r4
  814280:	08144380 	call	814438 <__call_exitprocs>
  814284:	00802074 	movhi	r2,129
  814288:	109a6d04 	addi	r2,r2,27060
  81428c:	11000017 	ldw	r4,0(r2)
  814290:	20800f17 	ldw	r2,60(r4)
  814294:	10000126 	beq	r2,zero,81429c <exit+0x30>
  814298:	103ee83a 	callr	r2
  81429c:	8009883a 	mov	r4,r16
  8142a0:	08145b80 	call	8145b8 <_exit>

008142a4 <memcmp>:
  8142a4:	01c000c4 	movi	r7,3
  8142a8:	3980192e 	bgeu	r7,r6,814310 <memcmp+0x6c>
  8142ac:	2144b03a 	or	r2,r4,r5
  8142b0:	11c4703a 	and	r2,r2,r7
  8142b4:	10000f26 	beq	r2,zero,8142f4 <memcmp+0x50>
  8142b8:	20800003 	ldbu	r2,0(r4)
  8142bc:	28c00003 	ldbu	r3,0(r5)
  8142c0:	10c0151e 	bne	r2,r3,814318 <memcmp+0x74>
  8142c4:	31bfff84 	addi	r6,r6,-2
  8142c8:	01ffffc4 	movi	r7,-1
  8142cc:	00000406 	br	8142e0 <memcmp+0x3c>
  8142d0:	20800003 	ldbu	r2,0(r4)
  8142d4:	28c00003 	ldbu	r3,0(r5)
  8142d8:	31bfffc4 	addi	r6,r6,-1
  8142dc:	10c00e1e 	bne	r2,r3,814318 <memcmp+0x74>
  8142e0:	21000044 	addi	r4,r4,1
  8142e4:	29400044 	addi	r5,r5,1
  8142e8:	31fff91e 	bne	r6,r7,8142d0 <__alt_mem_onchip_mem+0xff7942d0>
  8142ec:	0005883a 	mov	r2,zero
  8142f0:	f800283a 	ret
  8142f4:	20c00017 	ldw	r3,0(r4)
  8142f8:	28800017 	ldw	r2,0(r5)
  8142fc:	18bfee1e 	bne	r3,r2,8142b8 <__alt_mem_onchip_mem+0xff7942b8>
  814300:	31bfff04 	addi	r6,r6,-4
  814304:	21000104 	addi	r4,r4,4
  814308:	29400104 	addi	r5,r5,4
  81430c:	39bff936 	bltu	r7,r6,8142f4 <__alt_mem_onchip_mem+0xff7942f4>
  814310:	303fe91e 	bne	r6,zero,8142b8 <__alt_mem_onchip_mem+0xff7942b8>
  814314:	003ff506 	br	8142ec <__alt_mem_onchip_mem+0xff7942ec>
  814318:	10c5c83a 	sub	r2,r2,r3
  81431c:	f800283a 	ret

00814320 <__register_exitproc>:
  814320:	defffa04 	addi	sp,sp,-24
  814324:	dc000315 	stw	r16,12(sp)
  814328:	04002074 	movhi	r16,129
  81432c:	841a6d04 	addi	r16,r16,27060
  814330:	80c00017 	ldw	r3,0(r16)
  814334:	dc400415 	stw	r17,16(sp)
  814338:	dfc00515 	stw	ra,20(sp)
  81433c:	18805217 	ldw	r2,328(r3)
  814340:	2023883a 	mov	r17,r4
  814344:	10003726 	beq	r2,zero,814424 <__register_exitproc+0x104>
  814348:	10c00117 	ldw	r3,4(r2)
  81434c:	010007c4 	movi	r4,31
  814350:	20c00e16 	blt	r4,r3,81438c <__register_exitproc+0x6c>
  814354:	1a000044 	addi	r8,r3,1
  814358:	8800221e 	bne	r17,zero,8143e4 <__register_exitproc+0xc4>
  81435c:	18c00084 	addi	r3,r3,2
  814360:	18c7883a 	add	r3,r3,r3
  814364:	18c7883a 	add	r3,r3,r3
  814368:	12000115 	stw	r8,4(r2)
  81436c:	10c7883a 	add	r3,r2,r3
  814370:	19400015 	stw	r5,0(r3)
  814374:	0005883a 	mov	r2,zero
  814378:	dfc00517 	ldw	ra,20(sp)
  81437c:	dc400417 	ldw	r17,16(sp)
  814380:	dc000317 	ldw	r16,12(sp)
  814384:	dec00604 	addi	sp,sp,24
  814388:	f800283a 	ret
  81438c:	00800034 	movhi	r2,0
  814390:	10800004 	addi	r2,r2,0
  814394:	10002626 	beq	r2,zero,814430 <__register_exitproc+0x110>
  814398:	01006404 	movi	r4,400
  81439c:	d9400015 	stw	r5,0(sp)
  8143a0:	d9800115 	stw	r6,4(sp)
  8143a4:	d9c00215 	stw	r7,8(sp)
  8143a8:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8143ac:	d9400017 	ldw	r5,0(sp)
  8143b0:	d9800117 	ldw	r6,4(sp)
  8143b4:	d9c00217 	ldw	r7,8(sp)
  8143b8:	10001d26 	beq	r2,zero,814430 <__register_exitproc+0x110>
  8143bc:	81000017 	ldw	r4,0(r16)
  8143c0:	10000115 	stw	zero,4(r2)
  8143c4:	02000044 	movi	r8,1
  8143c8:	22405217 	ldw	r9,328(r4)
  8143cc:	0007883a 	mov	r3,zero
  8143d0:	12400015 	stw	r9,0(r2)
  8143d4:	20805215 	stw	r2,328(r4)
  8143d8:	10006215 	stw	zero,392(r2)
  8143dc:	10006315 	stw	zero,396(r2)
  8143e0:	883fde26 	beq	r17,zero,81435c <__alt_mem_onchip_mem+0xff79435c>
  8143e4:	18c9883a 	add	r4,r3,r3
  8143e8:	2109883a 	add	r4,r4,r4
  8143ec:	1109883a 	add	r4,r2,r4
  8143f0:	21802215 	stw	r6,136(r4)
  8143f4:	01800044 	movi	r6,1
  8143f8:	12406217 	ldw	r9,392(r2)
  8143fc:	30cc983a 	sll	r6,r6,r3
  814400:	4992b03a 	or	r9,r9,r6
  814404:	12406215 	stw	r9,392(r2)
  814408:	21c04215 	stw	r7,264(r4)
  81440c:	01000084 	movi	r4,2
  814410:	893fd21e 	bne	r17,r4,81435c <__alt_mem_onchip_mem+0xff79435c>
  814414:	11006317 	ldw	r4,396(r2)
  814418:	218cb03a 	or	r6,r4,r6
  81441c:	11806315 	stw	r6,396(r2)
  814420:	003fce06 	br	81435c <__alt_mem_onchip_mem+0xff79435c>
  814424:	18805304 	addi	r2,r3,332
  814428:	18805215 	stw	r2,328(r3)
  81442c:	003fc606 	br	814348 <__alt_mem_onchip_mem+0xff794348>
  814430:	00bfffc4 	movi	r2,-1
  814434:	003fd006 	br	814378 <__alt_mem_onchip_mem+0xff794378>

00814438 <__call_exitprocs>:
  814438:	defff504 	addi	sp,sp,-44
  81443c:	df000915 	stw	fp,36(sp)
  814440:	dd400615 	stw	r21,24(sp)
  814444:	dc800315 	stw	r18,12(sp)
  814448:	dfc00a15 	stw	ra,40(sp)
  81444c:	ddc00815 	stw	r23,32(sp)
  814450:	dd800715 	stw	r22,28(sp)
  814454:	dd000515 	stw	r20,20(sp)
  814458:	dcc00415 	stw	r19,16(sp)
  81445c:	dc400215 	stw	r17,8(sp)
  814460:	dc000115 	stw	r16,4(sp)
  814464:	d9000015 	stw	r4,0(sp)
  814468:	2839883a 	mov	fp,r5
  81446c:	04800044 	movi	r18,1
  814470:	057fffc4 	movi	r21,-1
  814474:	00802074 	movhi	r2,129
  814478:	109a6d04 	addi	r2,r2,27060
  81447c:	12000017 	ldw	r8,0(r2)
  814480:	45005217 	ldw	r20,328(r8)
  814484:	44c05204 	addi	r19,r8,328
  814488:	a0001c26 	beq	r20,zero,8144fc <__call_exitprocs+0xc4>
  81448c:	a0800117 	ldw	r2,4(r20)
  814490:	15ffffc4 	addi	r23,r2,-1
  814494:	b8000d16 	blt	r23,zero,8144cc <__call_exitprocs+0x94>
  814498:	14000044 	addi	r16,r2,1
  81449c:	8421883a 	add	r16,r16,r16
  8144a0:	8421883a 	add	r16,r16,r16
  8144a4:	84402004 	addi	r17,r16,128
  8144a8:	a463883a 	add	r17,r20,r17
  8144ac:	a421883a 	add	r16,r20,r16
  8144b0:	e0001e26 	beq	fp,zero,81452c <__call_exitprocs+0xf4>
  8144b4:	80804017 	ldw	r2,256(r16)
  8144b8:	e0801c26 	beq	fp,r2,81452c <__call_exitprocs+0xf4>
  8144bc:	bdffffc4 	addi	r23,r23,-1
  8144c0:	843fff04 	addi	r16,r16,-4
  8144c4:	8c7fff04 	addi	r17,r17,-4
  8144c8:	bd7ff91e 	bne	r23,r21,8144b0 <__alt_mem_onchip_mem+0xff7944b0>
  8144cc:	00800034 	movhi	r2,0
  8144d0:	10800004 	addi	r2,r2,0
  8144d4:	10000926 	beq	r2,zero,8144fc <__call_exitprocs+0xc4>
  8144d8:	a0800117 	ldw	r2,4(r20)
  8144dc:	1000301e 	bne	r2,zero,8145a0 <__call_exitprocs+0x168>
  8144e0:	a0800017 	ldw	r2,0(r20)
  8144e4:	10003226 	beq	r2,zero,8145b0 <__call_exitprocs+0x178>
  8144e8:	a009883a 	mov	r4,r20
  8144ec:	98800015 	stw	r2,0(r19)
  8144f0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8144f4:	9d000017 	ldw	r20,0(r19)
  8144f8:	a03fe41e 	bne	r20,zero,81448c <__alt_mem_onchip_mem+0xff79448c>
  8144fc:	dfc00a17 	ldw	ra,40(sp)
  814500:	df000917 	ldw	fp,36(sp)
  814504:	ddc00817 	ldw	r23,32(sp)
  814508:	dd800717 	ldw	r22,28(sp)
  81450c:	dd400617 	ldw	r21,24(sp)
  814510:	dd000517 	ldw	r20,20(sp)
  814514:	dcc00417 	ldw	r19,16(sp)
  814518:	dc800317 	ldw	r18,12(sp)
  81451c:	dc400217 	ldw	r17,8(sp)
  814520:	dc000117 	ldw	r16,4(sp)
  814524:	dec00b04 	addi	sp,sp,44
  814528:	f800283a 	ret
  81452c:	a0800117 	ldw	r2,4(r20)
  814530:	80c00017 	ldw	r3,0(r16)
  814534:	10bfffc4 	addi	r2,r2,-1
  814538:	15c01426 	beq	r2,r23,81458c <__call_exitprocs+0x154>
  81453c:	80000015 	stw	zero,0(r16)
  814540:	183fde26 	beq	r3,zero,8144bc <__alt_mem_onchip_mem+0xff7944bc>
  814544:	95c8983a 	sll	r4,r18,r23
  814548:	a0806217 	ldw	r2,392(r20)
  81454c:	a5800117 	ldw	r22,4(r20)
  814550:	2084703a 	and	r2,r4,r2
  814554:	10000b26 	beq	r2,zero,814584 <__call_exitprocs+0x14c>
  814558:	a0806317 	ldw	r2,396(r20)
  81455c:	2088703a 	and	r4,r4,r2
  814560:	20000c1e 	bne	r4,zero,814594 <__call_exitprocs+0x15c>
  814564:	89400017 	ldw	r5,0(r17)
  814568:	d9000017 	ldw	r4,0(sp)
  81456c:	183ee83a 	callr	r3
  814570:	a0800117 	ldw	r2,4(r20)
  814574:	15bfbf1e 	bne	r2,r22,814474 <__alt_mem_onchip_mem+0xff794474>
  814578:	98800017 	ldw	r2,0(r19)
  81457c:	153fcf26 	beq	r2,r20,8144bc <__alt_mem_onchip_mem+0xff7944bc>
  814580:	003fbc06 	br	814474 <__alt_mem_onchip_mem+0xff794474>
  814584:	183ee83a 	callr	r3
  814588:	003ff906 	br	814570 <__alt_mem_onchip_mem+0xff794570>
  81458c:	a5c00115 	stw	r23,4(r20)
  814590:	003feb06 	br	814540 <__alt_mem_onchip_mem+0xff794540>
  814594:	89000017 	ldw	r4,0(r17)
  814598:	183ee83a 	callr	r3
  81459c:	003ff406 	br	814570 <__alt_mem_onchip_mem+0xff794570>
  8145a0:	a0800017 	ldw	r2,0(r20)
  8145a4:	a027883a 	mov	r19,r20
  8145a8:	1029883a 	mov	r20,r2
  8145ac:	003fb606 	br	814488 <__alt_mem_onchip_mem+0xff794488>
  8145b0:	0005883a 	mov	r2,zero
  8145b4:	003ffb06 	br	8145a4 <__alt_mem_onchip_mem+0xff7945a4>

008145b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8145b8:	defffd04 	addi	sp,sp,-12
  8145bc:	df000215 	stw	fp,8(sp)
  8145c0:	df000204 	addi	fp,sp,8
  8145c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8145c8:	0001883a 	nop
  8145cc:	e0bfff17 	ldw	r2,-4(fp)
  8145d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8145d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8145d8:	10000226 	beq	r2,zero,8145e4 <_exit+0x2c>
    ALT_SIM_FAIL();
  8145dc:	002af070 	cmpltui	zero,zero,43969
  8145e0:	00000106 	br	8145e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8145e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8145e8:	003fff06 	br	8145e8 <__alt_mem_onchip_mem+0xff7945e8>
