
heart_beets.elf:     file format elf32-littlenios2
heart_beets.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00014180 memsz 0x00014180 flags r-x
    LOAD off    0x000151a0 vaddr 0x008141a0 paddr 0x00815e78 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x00017b50 vaddr 0x00817b50 paddr 0x00817b50 align 2**12
         filesz 0x00000000 memsz 0x00000384 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001385c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000700  00813aa0  00813aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  008141a0  00815e78  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000384  00817b50  00817b50  00017b50  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00817ed4  00817ed4  00016e78  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  00016e78  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016e78  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ff0  00000000  00000000  00016ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026bdc  00000000  00000000  00017e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b4a  00000000  00000000  0003ea6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d0b5  00000000  00000000  000485b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026c8  00000000  00000000  0005566c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004600  00000000  00000000  00057d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  0005c334  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00073b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d8  00000000  00000000  00073c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007a861  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007a864  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007a867  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007a868  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007a869  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007a86d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007a871  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007a875  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007a87e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007a887  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0007a890  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  0007a89c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  0007a8ca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813aa0 l    d  .rodata	00000000 .rodata
008141a0 l    d  .rwdata	00000000 .rwdata
00817b50 l    d  .bss	00000000 .bss
00817ed4 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../heart_beets_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00813c56 l     O .rodata	00000010 zeroes.4404
008055fc l     F .text	000000bc __sbprintf
00813c66 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080580c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080733c l     F .text	00000008 __fp_unlock
00807350 l     F .text	0000019c __sinit.part.1
008074ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008141a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
008145e4 l     O .rwdata	00000020 lc_ctype_charset
008145c4 l     O .rwdata	00000020 lc_message_charset
00814604 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00813c98 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a8e8 l     F .text	000000fc __sprint_r.part.0
00813dcc l     O .rodata	00000010 blanks.4348
00813dbc l     O .rodata	00000010 zeroes.4349
0080be74 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080faa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080fbb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080fbe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080fccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080fdac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080fe98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0081006c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00815e60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0081045c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810590 l     F .text	00000034 alt_dev_reg
00814bec l     O .rwdata	00001060 jtag_uart
00815c4c l     O .rwdata	00000120 lcd
00815d6c l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008108bc l     F .text	0000020c altera_avalon_jtag_uart_irq
00810ac8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00815e6c l     O .rwdata	00000004 colstart
00811100 l     F .text	000000b8 lcd_write_command
008111b8 l     F .text	000000d8 lcd_write_data
00811290 l     F .text	000000d0 lcd_clear_screen
00811360 l     F .text	000001ec lcd_repaint_screen
0081154c l     F .text	000000cc lcd_scroll_up
00811618 l     F .text	000002ac lcd_handle_escape
00811d9c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811fdc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0081228c l     F .text	0000009c altera_avalon_uart_irq
00812328 l     F .text	000000e4 altera_avalon_uart_rxirq
0081240c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008125a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008127c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008129f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812e64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00812fa4 l     F .text	0000003c alt_get_errno
00812fe0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081401f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00817ce8 g     O .bss	00000004 alt_instruction_exception_handler
00817b88 g     O .bss	00000001 g83
00817b89 g     O .bss	00000001 g40
00809f2c g     F .text	00000074 _mprec_log10
0080a018 g     F .text	0000008c __any_on
0080c410 g     F .text	00000054 _isatty_r
00813ca4 g     O .rodata	00000028 __mprec_tinytens
00817b8a g     O .bss	00000001 g91
00817b7c g     O .bss	00000004 maskedButton1
0080ffa8 g     F .text	0000007c alt_main
0080327c g     F .text	000000c0 _puts_r
00817b8b g     O .bss	00000001 APace
00817dd4 g     O .bss	00000100 alt_irq
0080c464 g     F .text	00000060 _lseek_r
00817b8c g     O .bss	00000001 g4
00815e78 g       *ABS*	00000000 __flash_rwdata_start
00817b8d g     O .bss	00000001 g108
00817b8e g     O .bss	00000001 g19
00817b8f g     O .bss	00000001 g111
0080e4a8 g     F .text	00000088 .hidden __eqdf2
00817b90 g     O .bss	00000001 PRE_g102
00817ed4 g       *ABS*	00000000 __alt_heap_start
00817b91 g     O .bss	00000001 g80b
00803240 g     F .text	0000003c printf
00817b92 g     O .bss	00000001 PRE_g23
0080c67c g     F .text	0000009c _wcrtomb_r
00817b93 g     O .bss	00000001 g122_fix0
008003a0 g     F .text	00000040 AEI_timer_ISR
0080a7a8 g     F .text	0000005c __sseek
0080768c g     F .text	00000010 __sinit
0080c524 g     F .text	00000140 __swbuf_r
00817b94 g     O .bss	00000001 g55
00817b95 g     O .bss	00000001 _cg59
00817b96 g     O .bss	00000001 g27
00817b97 g     O .bss	00000001 _Pacemaker1_local__reg_AEI_ex14
00808154 g     F .text	0000007c _setlocale_r
008074f4 g     F .text	00000068 __sfmoreglue
00810048 g     F .text	00000024 __malloc_unlock
00817b98 g     O .bss	00000001 g112
00817b99 g     O .bss	00000001 g33b
00817b9a g     O .bss	00000001 PRE_g128
00817b9b g     O .bss	00000001 g3
00817d14 g     O .bss	00000018 Ventricular_timer
00808e24 g     F .text	0000015c memmove
00817b9c g     O .bss	00000001 g103
00817b9d g     O .bss	00000001 g55b
00817b9e g     O .bss	00000001 g47
00817b9f g     O .bss	00000001 g85
00817ba0 g     O .bss	00000001 g42
00807674 g     F .text	00000018 _cleanup
00817ba1 g     O .bss	00000001 _reg_VRP_start18
008090a8 g     F .text	000000a8 _Balloc
00817ba2 g     O .bss	00000001 g9
00817ba3 g     O .bss	00000001 g127
00817ba4 g     O .bss	00000001 g94b
00817ba5 g     O .bss	00000001 LRITO
00817ba6 g     O .bss	00000001 _cg7
00817ba8 g     O .bss	00000004 _PRE_GO
00817bac g     O .bss	00000001 PRE_g3
00817bad g     O .bss	00000001 g102
0080e530 g     F .text	000000dc .hidden __gtdf2
00813228 g     F .text	00000024 altera_nios2_gen2_irq_init
00817bae g     O .bss	00000001 g122_e1_fix_fix
00817baf g     O .bss	00000001 g115
00817bb0 g     O .bss	00000001 AVI_start
00800000 g     F .entry	0000001c __reset
00817bb1 g     O .bss	00000001 _cg15
00817b54 g     O .bss	00000004 PVARPTOFlag
00817bb2 g     O .bss	00000001 _pre_VRP_start18
00817bb3 g     O .bss	00000001 PRE_g56
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c3b4 g     F .text	0000005c _fstat_r
008002b8 g     F .text	00000028 Ventricular_timer_ISR
00817ccc g     O .bss	00000004 errno
00817bb4 g     O .bss	00000001 PRE_g32
00817bb5 g     O .bss	00000001 g87
00817bb6 g     O .bss	00000001 g44
0080a724 g     F .text	00000008 __seofread
00817bb7 g     O .bss	00000001 g130_e3
00817bb8 g     O .bss	00000001 g123
00817bb9 g     O .bss	00000001 _cg75
00817cd4 g     O .bss	00000004 alt_argv
00817bba g     O .bss	00000001 g121_e14
0081de30 g       *ABS*	00000000 _gp
008131f8 g     F .text	00000030 usleep
00800a88 g     F .text	000000a0 reset
00817bbb g     O .bss	00000001 PRE_g65
00817bbc g     O .bss	00000001 PRE_g20
00817bbd g     O .bss	00000001 AVI_stop
00817bbe g     O .bss	00000001 g92
00817bbf g     O .bss	00000001 g1
00817bc0 g     O .bss	00000001 g61
00817bc1 g     O .bss	00000001 g89_e9
00814a6c g     O .rwdata	00000180 alt_fd_list
00817bc2 g     O .bss	00000001 g71
00817bc3 g     O .bss	00000001 g126_e2
008133a4 g     F .text	00000090 alt_find_dev
00808cdc g     F .text	00000148 memcpy
00817bc4 g     O .bss	00000001 g126
00807344 g     F .text	0000000c _cleanup_r
0080f794 g     F .text	000000dc .hidden __floatsidf
00817bc5 g     O .bss	00000001 g82
00812f28 g     F .text	0000007c alt_io_redirect
0080e60c g     F .text	000000f4 .hidden __ltdf2
00817bc6 g     O .bss	00000001 _cg33
00813aa0 g       *ABS*	00000000 __DTOR_END__
00817bc7 g     O .bss	00000001 g12
0080333c g     F .text	00000014 puts
00813670 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00817bc8 g     O .bss	00000001 g97
00817bc9 g     O .bss	00000001 g52
0080a608 g     F .text	00000074 __fpclassifyd
00809e88 g     F .text	000000a4 __ratio
0080be58 g     F .text	0000001c __vfiprintf_internal
00817bca g     O .bss	00000001 _cg85
00817bcb g     O .bss	00000001 _cg46
00810cc0 g     F .text	0000021c altera_avalon_jtag_uart_read
00817bcc g     O .bss	00000001 _cg35
00803210 g     F .text	00000030 _printf_r
00817bcd g     O .bss	00000001 _cg74
00803154 g     F .text	00000064 .hidden __udivsi3
0080fd08 g     F .text	000000a4 isatty
00817bce g     O .bss	00000001 g17
00817bcf g     O .bss	00000001 PRE_g34
00813cf4 g     O .rodata	000000c8 __mprec_tens
008081d0 g     F .text	0000000c __locale_charset
00817bd0 g     O .bss	00000001 g76
00817bd1 g     O .bss	00000001 g31
008135e0 g     F .text	00000090 alt_icache_flush
00817bd2 g     O .bss	00000001 g37
008004e8 g     F .text	00000150 heartLEDs
00817cc8 g     O .bss	00000004 __malloc_top_pad
00815e38 g     O .rwdata	00000004 __mb_cur_max
00808200 g     F .text	0000000c _localeconv_r
00817bd3 g     O .bss	00000001 g62
008094b4 g     F .text	0000003c __i2b
00807b10 g     F .text	000004bc __sfvwrite_r
00817d2c g     O .bss	00000018 PVARP_timer
0080a67c g     F .text	00000054 _sbrk_r
00817bd4 g     O .bss	00000001 g84
00817bd5 g     O .bss	00000001 g41
00817bd6 g     O .bss	00000001 _cg26
00817bd7 g     O .bss	00000001 g118
00817bd8 g     O .bss	00000001 PRE_g40
0080c4c4 g     F .text	00000060 _read_r
00817bd9 g     O .bss	00000001 _Pacemaker1_local_URI_idle
00815e58 g     O .rwdata	00000004 alt_max_fd
00800420 g     F .text	00000040 URI_timer_ISR
00817bda g     O .bss	00000001 LRI_stop
0080c0a8 g     F .text	000000f0 _fclose_r
0080730c g     F .text	00000030 fflush
008002e0 g     F .text	00000040 AVI_timer_ISR
00817cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
00817bdb g     O .bss	00000001 g18
00817bdc g     O .bss	00000001 PRE_g124
00817bdd g     O .bss	00000001 ASense
00817d44 g     O .bss	00000018 VRP_timer
0080d314 g     F .text	000008ac .hidden __adddf3
00817bde g     O .bss	00000001 g15b
00809c30 g     F .text	0000010c __b2d
0080cddc g     F .text	00000538 .hidden __umoddi3
0080fed4 g     F .text	000000d4 lseek
00815e30 g     O .rwdata	00000004 _global_impure_ptr
00817bdf g     O .bss	00000001 g48
0080a0a4 g     F .text	00000564 _realloc_r
00817ed4 g       *ABS*	00000000 __bss_end
00817b70 g     O .bss	00000004 LED1
00812d74 g     F .text	000000f0 alt_iic_isr_register
00817be0 g     O .bss	00000001 _Pacemaker1_local_VRP_ex
00817be1 g     O .bss	00000001 g122_e1
00810354 g     F .text	00000108 alt_tick
00817b84 g     O .bss	00000004 button1_pressed
00817be2 g     O .bss	00000001 _cg95
0080c864 g     F .text	00000578 .hidden __udivdi3
0080c310 g     F .text	00000024 _fputwc_r
00813ccc g     O .rodata	00000028 __mprec_bigtens
00809298 g     F .text	00000104 __s2b
00817be3 g     O .bss	00000001 _cg111
00817be4 g     O .bss	00000001 g24b
0080f870 g     F .text	000000a8 .hidden __floatunsidf
00817be5 g     O .bss	00000001 g38
00817be6 g     O .bss	00000001 g105
00809970 g     F .text	00000060 __mcmp
008121e0 g     F .text	000000ac altera_avalon_uart_init
008076ac g     F .text	00000018 __fp_lock_all
00812d28 g     F .text	0000004c alt_ic_irq_enabled
00817be7 g     O .bss	00000001 _cg21
00817d5c g     O .bss	00000018 Atrial_timer
008102b8 g     F .text	0000009c alt_alarm_stop
00817be8 g     O .bss	00000001 g124b
00817ce4 g     O .bss	00000004 alt_irq_active
00817be9 g     O .bss	00000001 g38_e4
00817bea g     O .bss	00000001 g117
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814a44 g     O .rwdata	00000028 alt_dev_null
00817beb g     O .bss	00000001 _pre_LRI_stop
008129a8 g     F .text	00000048 alt_dcache_flush_all
0080939c g     F .text	00000068 __hi0bits
00817bec g     O .bss	00000001 _reg_LRI_stop
00817bed g     O .bss	00000001 _cg63
0080f714 g     F .text	00000080 .hidden __fixdfsi
00817bee g     O .bss	00000001 g64
00817bef g     O .bss	00000001 g21
00817bf0 g     O .bss	00000001 g74b
00817bf1 g     O .bss	00000001 PRE_g12
00817b80 g     O .bss	00000004 button0_pressed
00817bf2 g     O .bss	00000001 _cg68
00817bf3 g     O .bss	00000001 g79
00817bf4 g     O .bss	00000001 g34
00815e78 g       *ABS*	00000000 __ram_rwdata_end
00817bf5 g     O .bss	00000001 g30_e3
00817bf6 g     O .bss	00000001 g5
00815e50 g     O .rwdata	00000008 alt_dev_list
00817bf7 g     O .bss	00000001 g94
00817bf8 g     O .bss	00000001 g83b
00817bf9 g     O .bss	00000001 g110
00817bfa g     O .bss	00000001 g49
00810498 g     F .text	000000f8 write
00817bfb g     O .bss	00000001 _Pacemaker1_local_PVARP_ex
00817bfc g     O .bss	00000001 g2
00817b50 g     O .bss	00000004 AVITOFlag
00817bfd g     O .bss	00000001 g7
00817bfe g     O .bss	00000001 _cg53
00817bff g     O .bss	00000001 _cg16
008141a0 g       *ABS*	00000000 __ram_rodata_end
0080fc1c g     F .text	000000b0 fstat
0080e60c g     F .text	000000f4 .hidden __ledf2
00817c00 g     O .bss	00000001 g80
00817b74 g     O .bss	00000004 uiButton
008096e8 g     F .text	00000140 __pow5mult
0080a9fc g     F .text	0000145c ___vfiprintf_internal_r
00817cbc g     O .bss	00000004 __nlocale_changed
008031b8 g     F .text	00000058 .hidden __umodsi3
00817c01 g     O .bss	00000001 g128
00817ed4 g       *ABS*	00000000 end
00817c02 g     O .bss	00000001 g100
008118c4 g     F .text	000004d8 altera_avalon_lcd_16207_write
00817c03 g     O .bss	00000001 g59
00817c04 g     O .bss	00000001 g99
00817c05 g     O .bss	00000001 g54
008127fc g     F .text	000001ac altera_avalon_uart_write
00817c06 g     O .bss	00000001 g66
00817c07 g     O .bss	00000001 g23
00817c08 g     O .bss	00000001 g111b
008107fc g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00817b64 g     O .bss	00000004 URITOFlag
00817c09 g     O .bss	00000001 _cg83
00817c0a g     O .bss	00000001 _cg44
00813aa0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00817c0b g     O .bss	00000001 _cg48
00812054 g     F .text	0000007c alt_avalon_timer_sc_init
00812130 g     F .text	00000060 altera_avalon_uart_write_fd
0080f918 g     F .text	00000064 .hidden __clzsi2
00812190 g     F .text	00000050 altera_avalon_uart_close_fd
00817c0c g     O .bss	00000001 _Pacemaker1_local__reg_LRI_ex10
00810edc g     F .text	00000224 altera_avalon_jtag_uart_write
00817c0d g     O .bss	00000001 PRE_g71
0080769c g     F .text	00000004 __sfp_lock_acquire
00808bf8 g     F .text	000000e4 memchr
00817c0e g     O .bss	00000001 g14
008033e8 g     F .text	000021f8 ___vfprintf_internal_r
00817c0f g     O .bss	00000001 PRE_g79
00807800 g     F .text	00000310 _free_r
00800638 g     F .text	00000130 setFlags
008081dc g     F .text	00000010 __locale_mb_cur_max
008138ec g     F .text	00000180 __call_exitprocs
00817c10 g     O .bss	00000001 g101
00817c11 g     O .bss	00000001 _Pacemaker1_local_AEI_ex
00817cb8 g     O .bss	00000004 __mlocale_changed
00817c12 g     O .bss	00000001 g97_e10
00817c13 g     O .bss	00000001 _Pacemaker1_local_FilteredVSense
00817c14 g     O .bss	00000001 g122_fix2
00815e3c g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00817c15 g     O .bss	00000001 _cg100
00817c16 g     O .bss	00000001 g114
00817cdc g     O .bss	00000004 _alt_tick_rate
00817c17 g     O .bss	00000001 g56
00817c18 g     O .bss	00000001 PRE_g52
00817c19 g     O .bss	00000001 g129
00817c1a g     O .bss	00000001 g131
00809828 g     F .text	00000148 __lshift
00817c1b g     O .bss	00000001 VSense
00817ce0 g     O .bss	00000004 _alt_nticks
00817c1c g     O .bss	00000001 PRE_g6
008100a8 g     F .text	000000fc read
008105fc g     F .text	0000009c alt_sys_init
00817c1d g     O .bss	00000001 g78
00817c1e g     O .bss	00000001 g33
00817c1f g     O .bss	00000001 _Pacemaker1_local__reg_URI_idle15
008137d4 g     F .text	00000118 __register_exitproc
00817c20 g     O .bss	00000001 PRE_g119
00817b78 g     O .bss	00000004 maskedButton0
00817c21 g     O .bss	00000001 g92b
00817c22 g     O .bss	00000001 VRP_start
00817c23 g     O .bss	00000001 g109b
00817c24 g     O .bss	00000001 g122
00800360 g     F .text	00000040 VRP_timer_ISR
00817c25 g     O .bss	00000001 g35b
008094f0 g     F .text	000001f8 __multiply
00810b68 g     F .text	00000068 altera_avalon_jtag_uart_close
00817c26 g     O .bss	00000001 _Pacemaker1_local_LRI_ex
008141a0 g       *ABS*	00000000 __ram_rwdata_start
00813aa0 g       *ABS*	00000000 __ram_rodata_start
00817cec g     O .bss	00000028 __malloc_current_mallinfo
00817c27 g     O .bss	00000001 _Pacemaker1_local_FilteredASense
00809d3c g     F .text	0000014c __d2b
00817b60 g     O .bss	00000004 LRITOFlag
00817c28 g     O .bss	00000001 g50_e5
00817c29 g     O .bss	00000001 _cg29
00817d74 g     O .bss	00000018 AVI_timer
00817d8c g     O .bss	00000018 LRI_timer
00810698 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00817c2a g     O .bss	00000001 g35
0081353c g     F .text	000000a4 alt_get_fd
0081324c g     F .text	00000158 alt_busy_sleep
00817c2b g     O .bss	00000001 g15
0080bf90 g     F .text	00000054 _close_r
00817c2c g     O .bss	00000001 g90
00817c2d g     O .bss	00000001 _GO
00817c2e g     O .bss	00000001 LRI_start
00813758 g     F .text	0000007c memcmp
00817c2f g     O .bss	00000001 URITO
00810758 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817c30 g     O .bss	00000001 VRPTO
00817c31 g     O .bss	00000001 PRE_g54
00817ed4 g       *ABS*	00000000 __alt_stack_base
008107a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00817c32 g     O .bss	00000001 PRE_g91
00817c33 g     O .bss	00000001 g122_fix3
008056b8 g     F .text	00000154 __swsetup_r
00800b28 g     F .text	00002534 tick
0080dbc0 g     F .text	000008e8 .hidden __divdf3
0080755c g     F .text	00000118 __sfp
00817c34 g     O .bss	00000001 g63
00817c35 g     O .bss	00000001 g20
00809fa0 g     F .text	00000078 __copybits
00817b5c g     O .bss	00000004 AEITOFlag
00817c36 g     O .bss	00000001 AVITO
00817c37 g     O .bss	00000001 g60
0081463c g     O .rwdata	00000408 __malloc_av_
008076a8 g     F .text	00000004 __sinit_lock_release
0080e700 g     F .text	00000718 .hidden __muldf3
0080a6d0 g     F .text	00000054 __sread
00817da4 g     O .bss	00000018 AEI_timer
00813434 g     F .text	00000108 alt_find_file
00817c38 g     O .bss	00000001 g60_e6
00817c39 g     O .bss	00000001 g93
00812a2c g     F .text	000000a4 alt_dev_llist_insert
00810024 g     F .text	00000024 __malloc_lock
00810208 g     F .text	000000b0 sbrk
00817c3a g     O .bss	00000001 g119
008072b0 g     F .text	0000005c _fflush_r
0080bfe4 g     F .text	000000c4 _calloc_r
00817c3b g     O .bss	00000001 g21b
00817c3c g     O .bss	00000001 g41b
00817b50 g       *ABS*	00000000 __bss_start
00817c3d g     O .bss	00000001 g86
00817c3e g     O .bss	00000001 g43
00808f80 g     F .text	00000128 memset
00800a3c g     F .text	0000004c main
00817cd8 g     O .bss	00000004 alt_envp
00817cc0 g     O .bss	00000004 __malloc_max_total_mem
00817c3f g     O .bss	00000001 PRE_g43
00817c40 g     O .bss	00000001 _Pacemaker1_local_AVI_ex
008106f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00817c41 g     O .bss	00000001 g53b
00817c42 g     O .bss	00000001 PVARPTO
0080c664 g     F .text	00000018 __swbuf
00817c43 g     O .bss	00000001 PRE_g14
00817c44 g     O .bss	00000001 PRE_g62
00817c45 g     O .bss	00000001 g36
00811e48 g     F .text	00000134 altera_avalon_lcd_16207_init
00817dbc g     O .bss	00000018 URI_timer
00817c46 g     O .bss	00000001 g89
00817c47 g     O .bss	00000001 g46
0080a804 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c198 g     F .text	00000014 fclose
00817c48 g     O .bss	00000001 PVARP_start
00805a0c g     F .text	00001688 _dtoa_r
008083ec g     F .text	0000080c _malloc_r
0080c7d8 g     F .text	00000030 __ascii_wctomb
00817c49 g     O .bss	00000001 g57b
00815e5c g     O .rwdata	00000004 alt_errno
00807fcc g     F .text	000000c4 _fwalk
00817c4a g     O .bss	00000001 g95
00817c4b g     O .bss	00000001 g50
00817c4c g     O .bss	00000001 _pre_AEI_stop15
008003e0 g     F .text	00000040 LRI_timer_ISR
00817c4d g     O .bss	00000001 g96
00817c4e g     O .bss	00000001 g51
0080305c g     F .text	00000084 .hidden __divsi3
008076dc g     F .text	00000124 _malloc_trim_r
00813aa0 g       *ABS*	00000000 __CTOR_END__
0080a80c g     F .text	000000dc strcmp
00817c4f g     O .bss	00000001 g107
00817c50 g     O .bss	00000001 g115c
00813aa0 g       *ABS*	00000000 __flash_rodata_start
00817c51 g     O .bss	00000001 g113
00813aa0 g       *ABS*	00000000 __DTOR_LIST__
00800320 g     F .text	00000040 PVARP_timer_ISR
00817c52 g     O .bss	00000001 g18_e2
0080e4a8 g     F .text	00000088 .hidden __nedf2
00817c53 g     O .bss	00000001 _cg80
00817c54 g     O .bss	00000001 _cg41
008105c4 g     F .text	00000038 alt_irq_init
008101a4 g     F .text	00000064 alt_release_fd
00817c55 g     O .bss	00000001 g104
00817c56 g     O .bss	00000001 g122_fix1
00817c57 g     O .bss	00000001 g13
00813ddc g     O .rodata	00000100 .hidden __clz_tab
00817c58 g     O .bss	00000001 _Pacemaker1_local__pre_AEI_ex14
00817cb4 g     O .bss	00000004 _PathLocale
00817c59 g     O .bss	00000001 PRE_g115
00817c5a g     O .bss	00000001 g98
00817c5b g     O .bss	00000001 g53
00817c5c g     O .bss	00000001 g8
00817c5d g     O .bss	00000001 g57
00817c5e g     O .bss	00000001 g122_e1_fix
0081370c g     F .text	00000014 atexit
00817c5f g     O .bss	00000001 AEI_start
0080bf30 g     F .text	00000060 _write_r
00817c60 g     O .bss	00000001 g70
00817c61 g     O .bss	00000001 _cg66
00817c62 g     O .bss	00000001 _cg86
0080820c g     F .text	00000018 setlocale
00817c63 g     O .bss	00000001 g10_e1
00817c64 g     O .bss	00000001 g116
00815e34 g     O .rwdata	00000004 _impure_ptr
00817cd0 g     O .bss	00000004 alt_argc
00817c65 g     O .bss	00000001 g6
00807094 g     F .text	0000021c __sflush_r
00812b30 g     F .text	00000060 _do_dtors
008081f8 g     F .text	00000008 __locale_cjk_lang
00817c66 g     O .bss	00000001 _Pacemaker1_local_URI_ex
00817c67 g     O .bss	00000001 g72
00817c68 g     O .bss	00000001 g81
00800020 g       .exceptions	00000000 alt_irq_entry
00817c69 g     O .bss	00000001 g122_fix4
00817c6a g     O .bss	00000001 PRE_g110
00809bcc g     F .text	00000064 __ulp
008076c4 g     F .text	00000018 __fp_unlock_all
00817c6b g     O .bss	00000001 g124
00811f7c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00817c6c g     O .bss	00000001 _cg13
00817c6d g     O .bss	00000001 _cg9
00817c6e g     O .bss	00000001 PRE_g99
00815e48 g     O .rwdata	00000008 alt_fs_list
00817b58 g     O .bss	00000004 VRPTOFlag
00817c6f g     O .bss	00000001 g0
00800460 g     F .text	00000088 pollButtons
00817b68 g     O .bss	00000004 LEDbits
00817c70 g     O .bss	00000001 g75
00817c71 g     O .bss	00000001 g30
00817c72 g     O .bss	00000001 g72b
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808224 g     F .text	0000000c localeconv
00817c73 g     O .bss	00000001 _Pacemaker1_local__pre_LRI_ex10
00817c74 g     O .bss	00000001 _reg_AEI_stop15
00817c75 g     O .bss	00000001 g16
00817c76 g     O .bss	00000001 _cg24
00812bc4 g     F .text	00000050 alt_ic_isr_register
00817c77 g     O .bss	00000001 g58
00817c78 g     O .bss	00000001 _cg94
00817c79 g     O .bss	00000001 _cg57
00817c7a g     O .bss	00000001 g68
00817c7b g     O .bss	00000001 g25
00815e78 g       *ABS*	00000000 _edata
008120d0 g     F .text	00000060 altera_avalon_uart_read_fd
00817c7c g     O .bss	00000001 PRE_g93
00817ed4 g       *ABS*	00000000 _end
00817c7d g     O .bss	00000001 g11
0080c1ac g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00810bd0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00817c7e g     O .bss	00000001 g65
00817c7f g     O .bss	00000001 g22
00817c80 g     O .bss	00000001 g69_e7
00817c81 g     O .bss	00000001 g28
00817c82 g     O .bss	00000001 g73
00812c9c g     F .text	0000008c alt_ic_irq_disable
00817c83 g     O .bss	00000001 g115b
0080a72c g     F .text	0000007c __swrite
00815e40 g     O .rwdata	00000004 __malloc_trim_threshold
008081ec g     F .text	0000000c __locale_msgcharset
00817c84 g     O .bss	00000001 g113_e12
00813720 g     F .text	00000038 exit
00817c85 g     O .bss	00000001 g125
00808090 g     F .text	000000c4 _fwalk_reent
008099d0 g     F .text	000001fc __mdiff
00817c86 g     O .bss	00000001 g77
00817c87 g     O .bss	00000001 g32
008030e0 g     F .text	00000074 .hidden __modsi3
00817c88 g     O .bss	00000001 g124c
00815e74 g     O .rwdata	00000004 __ctype_ptr__
00817c89 g     O .bss	00000001 g63b
00817c8a g     O .bss	00000001 g88
00817c8b g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008076a0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00817c8c g     O .bss	00000001 PRE_g82
00817c8d g     O .bss	00000001 _cg103
00817c8e g     O .bss	00000001 _cg92
00817c8f g     O .bss	00000001 _cg55
00817c90 g     O .bss	00000001 g130
00813f1e g     O .rodata	00000101 _ctype_
00817c91 g     O .bss	00000001 g106_e11
00817c92 g     O .bss	00000001 g77_e8
00812554 g     F .text	00000054 altera_avalon_uart_close
00817c93 g     O .bss	00000001 PRE_g73
00813a6c g     F .text	00000034 _exit
0080f97c g     F .text	0000012c alt_alarm_start
00817c94 g     O .bss	00000001 g121
00800768 g     F .text	000002d4 startTimers
00817c95 g     O .bss	00000001 g100b
00817c96 g     O .bss	00000001 _cg109
00808230 g     F .text	000001bc __smakebuf_r
00817c97 g     O .bss	00000001 VPace
00803350 g     F .text	00000098 strlen
00817c98 g     O .bss	00000001 g39
008130a4 g     F .text	00000154 open
0080e530 g     F .text	000000dc .hidden __gedf2
00817c99 g     O .bss	00000001 _cg88
00817c9a g     O .bss	00000001 _cg49
00817c9b g     O .bss	00000001 g120
00817c9c g     O .bss	00000001 PRE_g108
00815e44 g     O .rwdata	00000004 __wctomb
0080a9e4 g     F .text	00000018 __sprint_r
00812b90 g     F .text	00000034 alt_icache_flush_all
00817c9d g     O .bss	00000001 g29
00817c9e g     O .bss	00000001 _cg4
00817c9f g     O .bss	00000001 g67
00817ca0 g     O .bss	00000001 g24
00817ca1 g     O .bss	00000001 AEI_stop
00817ca2 g     O .bss	00000001 g117_e13
00815e70 g     O .rwdata	00000004 alt_priority_mask
00817ca3 g     O .bss	00000001 g109
00800290 g     F .text	00000028 Atrial_timer_ISR
00812c14 g     F .text	00000088 alt_ic_irq_enable
008055e0 g     F .text	0000001c __vfprintf_internal
00817b6c g     O .bss	00000004 LED0
008125e4 g     F .text	000001dc altera_avalon_uart_read
0080c808 g     F .text	0000005c _wctomb_r
00817ca4 g     O .bss	00000001 URI_start
00817ca5 g     O .bss	00000001 g4b
0080ee18 g     F .text	000008fc .hidden __subdf3
00817ca6 g     O .bss	00000001 g106
00817ca7 g     O .bss	00000001 _cg36
00809404 g     F .text	000000b0 __lo0bits
00817ca8 g     O .bss	00000001 g10
00815e64 g     O .rwdata	00000008 alt_alarm_list
00817ca9 g     O .bss	00000001 _cg27
00812ad0 g     F .text	00000060 _do_ctors
0080c718 g     F .text	000000c0 wcrtomb
00817caa g     O .bss	00000001 AEITO
00817cab g     O .bss	00000001 g69
00817cac g     O .bss	00000001 g26
0080fae4 g     F .text	000000d0 close
00817cad g     O .bss	00000001 g13b
0080fe14 g     F .text	00000084 alt_load
00817cae g     O .bss	00000001 _cg72
00817caf g     O .bss	00000001 _Pacemaker1_local__pre_URI_idle15
0080c334 g     F .text	00000080 fputwc
008076a4 g     F .text	00000004 __sinit_lock_acquire
00817cb0 g     O .bss	00000001 _cg105
00809178 g     F .text	00000120 __multadd
00809150 g     F .text	00000028 _Bfree
00817cb1 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109f7504 	addi	r2,r2,32212
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109f7504 	addi	r2,r2,32212
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7ae17 	ldw	r2,-24904(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7ae17 	ldw	r2,-24904(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b78c14 	ori	gp,gp,56880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109ed414 	ori	r2,r2,31568

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dfb514 	ori	r3,r3,32468

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080fe140 	call	80fe14 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080ffa80 	call	80ffa8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <Atrial_timer_ISR>:


//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 Atrial_timer_ISR(void* context)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	LED0 = 0; //Turn atrial LED off
  8002a0:	d0274f15 	stw	zero,-25284(gp)
	return 0; //Don't restart timer
  8002a4:	0005883a 	mov	r2,zero
}
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <Ventricular_timer_ISR>:

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 Ventricular_timer_ISR(void* context)
{
  8002b8:	defffe04 	addi	sp,sp,-8
  8002bc:	df000115 	stw	fp,4(sp)
  8002c0:	df000104 	addi	fp,sp,4
  8002c4:	e13fff15 	stw	r4,-4(fp)
	LED1 = 0; //Turn ventricular LED off
  8002c8:	d0275015 	stw	zero,-25280(gp)
	return 0; //Don't restart timer
  8002cc:	0005883a 	mov	r2,zero
}
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <AVI_timer_ISR>:

//ISR called when AVI timer ends. Used to set AVI timeout flag high
alt_u32 AVI_timer_ISR(void* context)
{
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	dfc00215 	stw	ra,8(sp)
  8002e8:	df000115 	stw	fp,4(sp)
  8002ec:	df000104 	addi	fp,sp,4
  8002f0:	e13fff15 	stw	r4,-4(fp)
	AVITOFlag = 1; //Set AVI timeout flag
  8002f4:	00800044 	movi	r2,1
  8002f8:	d0a74815 	stw	r2,-25312(gp)
	printf("AVI timed out\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	210ea804 	addi	r4,r4,15008
  800304:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&AVI_timer);
	return 0; //Don't restart timer
  800308:	0005883a 	mov	r2,zero
}
  80030c:	e037883a 	mov	sp,fp
  800310:	dfc00117 	ldw	ra,4(sp)
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00204 	addi	sp,sp,8
  80031c:	f800283a 	ret

00800320 <PVARP_timer_ISR>:

//ISR called when PVARP timer ends. Used to set PVARP timeout flag high
alt_u32 PVARP_timer_ISR(void* context)
{
  800320:	defffd04 	addi	sp,sp,-12
  800324:	dfc00215 	stw	ra,8(sp)
  800328:	df000115 	stw	fp,4(sp)
  80032c:	df000104 	addi	fp,sp,4
  800330:	e13fff15 	stw	r4,-4(fp)
	PVARPTOFlag = 1; //Set PVARP timeout flag
  800334:	00800044 	movi	r2,1
  800338:	d0a74915 	stw	r2,-25308(gp)
	printf("PVARP timed out\n");
  80033c:	01002074 	movhi	r4,129
  800340:	210eac04 	addi	r4,r4,15024
  800344:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&PVARP_timer);
	return 0; //Don't restart timer
  800348:	0005883a 	mov	r2,zero
}
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <VRP_timer_ISR>:

//ISR called when VRP timer ends. Used to set VRP timeout flag high
alt_u32 VRP_timer_ISR(void* context)
{
  800360:	defffd04 	addi	sp,sp,-12
  800364:	dfc00215 	stw	ra,8(sp)
  800368:	df000115 	stw	fp,4(sp)
  80036c:	df000104 	addi	fp,sp,4
  800370:	e13fff15 	stw	r4,-4(fp)
	VRPTOFlag = 1; //Set VRP timeout flag
  800374:	00800044 	movi	r2,1
  800378:	d0a74a15 	stw	r2,-25304(gp)
	printf("VRP timed out\n");
  80037c:	01002074 	movhi	r4,129
  800380:	210eb004 	addi	r4,r4,15040
  800384:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&VRP_timer);
	return 0; //Don't restart timer
  800388:	0005883a 	mov	r2,zero
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <AEI_timer_ISR>:

//ISR called when AEI timer ends. Used to set AEI timeout flag high
alt_u32 AEI_timer_ISR(void* context)
{
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
	AEITOFlag = 1; //Set AEI timeout flag
  8003b4:	00800044 	movi	r2,1
  8003b8:	d0a74b15 	stw	r2,-25300(gp)
	printf("AEI timed out\n");
  8003bc:	01002074 	movhi	r4,129
  8003c0:	210eb404 	addi	r4,r4,15056
  8003c4:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&AEI_timer);
	return 0; //Don't restart timer
  8003c8:	0005883a 	mov	r2,zero
}
  8003cc:	e037883a 	mov	sp,fp
  8003d0:	dfc00117 	ldw	ra,4(sp)
  8003d4:	df000017 	ldw	fp,0(sp)
  8003d8:	dec00204 	addi	sp,sp,8
  8003dc:	f800283a 	ret

008003e0 <LRI_timer_ISR>:

//ISR called when LRI timer ends. Used to set LRI timeout flag high
alt_u32 LRI_timer_ISR(void* context)
{
  8003e0:	defffd04 	addi	sp,sp,-12
  8003e4:	dfc00215 	stw	ra,8(sp)
  8003e8:	df000115 	stw	fp,4(sp)
  8003ec:	df000104 	addi	fp,sp,4
  8003f0:	e13fff15 	stw	r4,-4(fp)
	LRITOFlag = 1; //Set LRI timeout flag
  8003f4:	00800044 	movi	r2,1
  8003f8:	d0a74c15 	stw	r2,-25296(gp)
	printf("LRI timed out\n");
  8003fc:	01002074 	movhi	r4,129
  800400:	210eb804 	addi	r4,r4,15072
  800404:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&LRI_timer);
	return 0; //Don't restart timer
  800408:	0005883a 	mov	r2,zero
}
  80040c:	e037883a 	mov	sp,fp
  800410:	dfc00117 	ldw	ra,4(sp)
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00204 	addi	sp,sp,8
  80041c:	f800283a 	ret

00800420 <URI_timer_ISR>:

//ISR called when URI timer ends. Used to set URI timeout flag high
alt_u32 URI_timer_ISR(void* context)
{
  800420:	defffd04 	addi	sp,sp,-12
  800424:	dfc00215 	stw	ra,8(sp)
  800428:	df000115 	stw	fp,4(sp)
  80042c:	df000104 	addi	fp,sp,4
  800430:	e13fff15 	stw	r4,-4(fp)
	URITOFlag = 1; //Set URI timeout flag
  800434:	00800044 	movi	r2,1
  800438:	d0a74d15 	stw	r2,-25292(gp)
	printf("URI timed out\n");
  80043c:	01002074 	movhi	r4,129
  800440:	210ebc04 	addi	r4,r4,15088
  800444:	080333c0 	call	80333c <puts>
//	alt_alarm_stop(&URI_timer);
	return 0; //Don't restart timer
  800448:	0005883a 	mov	r2,zero
}
  80044c:	e037883a 	mov	sp,fp
  800450:	dfc00117 	ldw	ra,4(sp)
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00204 	addi	sp,sp,8
  80045c:	f800283a 	ret

00800460 <pollButtons>:

//This function checks if a button is pushed and sets the appropriate flag
void pollButtons()
{
  800460:	defffd04 	addi	sp,sp,-12
  800464:	df000215 	stw	fp,8(sp)
  800468:	df000204 	addi	fp,sp,8
	// Poll buttons
	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); //Read the buttons register
  80046c:	00804434 	movhi	r2,272
  800470:	10842804 	addi	r2,r2,4256
  800474:	10800037 	ldwio	r2,0(r2)
  800478:	d0a75115 	stw	r2,-25276(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// Clear the edge capture register
  80047c:	0007883a 	mov	r3,zero
  800480:	00804434 	movhi	r2,272
  800484:	10842b04 	addi	r2,r2,4268
  800488:	10c00035 	stwio	r3,0(r2)
	int maskedButton0 = uiButton & (1 << 0); //Mask out the bit for button 0 (atrial event button)
  80048c:	d0a75117 	ldw	r2,-25276(gp)
  800490:	1080004c 	andi	r2,r2,1
  800494:	e0bffe15 	stw	r2,-8(fp)
	int maskedButton1 = uiButton & (1 << 1); //Mask out the bit for button 1 (ventricular event button)
  800498:	d0a75117 	ldw	r2,-25276(gp)
  80049c:	1080008c 	andi	r2,r2,2
  8004a0:	e0bfff15 	stw	r2,-4(fp)

	if (maskedButton0 > 0){ //Check if button 0 is not pushed
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	0080020e 	bge	zero,r2,8004b4 <pollButtons+0x54>
		ASense = 0; //Reset atrial sense flag
  8004ac:	d0276b45 	stb	zero,-25171(gp)
  8004b0:	00000206 	br	8004bc <pollButtons+0x5c>
	} else {
		ASense = 1; //Set atrial sense flag
  8004b4:	00800044 	movi	r2,1
  8004b8:	d0a76b45 	stb	r2,-25171(gp)
//		printf("--- ASense! ---\n");
	}
	if (maskedButton1 > 0){ //Check if button 1 is not pushed
  8004bc:	e0bfff17 	ldw	r2,-4(fp)
  8004c0:	0080020e 	bge	zero,r2,8004cc <pollButtons+0x6c>
		VSense = 0; //Reset ventricular sense flag
  8004c4:	d0277ac5 	stb	zero,-25109(gp)

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004c8:	00000206 	br	8004d4 <pollButtons+0x74>
//		printf("--- ASense! ---\n");
	}
	if (maskedButton1 > 0){ //Check if button 1 is not pushed
		VSense = 0; //Reset ventricular sense flag
	} else {
		VSense = 1; //Set ventricular sense flag
  8004cc:	00800044 	movi	r2,1
  8004d0:	d0a77ac5 	stb	r2,-25109(gp)

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004d4:	0001883a 	nop
  8004d8:	e037883a 	mov	sp,fp
  8004dc:	df000017 	ldw	fp,0(sp)
  8004e0:	dec00104 	addi	sp,sp,4
  8004e4:	f800283a 	ret

008004e8 <heartLEDs>:

//This function is used to blink the LEDs to show sensing
//and pacing of the heart.
void heartLEDs()
{
  8004e8:	defffc04 	addi	sp,sp,-16
  8004ec:	dfc00315 	stw	ra,12(sp)
  8004f0:	df000215 	stw	fp,8(sp)
  8004f4:	df000204 	addi	fp,sp,8

	unsigned int A_LED = ASense || APace; //Set atrial LED if A sensed or paced
  8004f8:	d0a76b43 	ldbu	r2,-25171(gp)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	1080201c 	xori	r2,r2,128
  800504:	10bfe004 	addi	r2,r2,-128
  800508:	1000051e 	bne	r2,zero,800520 <heartLEDs+0x38>
  80050c:	d0a756c3 	ldbu	r2,-25253(gp)
  800510:	10803fcc 	andi	r2,r2,255
  800514:	1080201c 	xori	r2,r2,128
  800518:	10bfe004 	addi	r2,r2,-128
  80051c:	10000226 	beq	r2,zero,800528 <heartLEDs+0x40>
  800520:	00800044 	movi	r2,1
  800524:	00000106 	br	80052c <heartLEDs+0x44>
  800528:	0005883a 	mov	r2,zero
  80052c:	e0bffe15 	stw	r2,-8(fp)
	unsigned int V_LED = VSense || VPace; //Set ventricular LED if V sensed or paced
  800530:	d0a77ac3 	ldbu	r2,-25109(gp)
  800534:	10803fcc 	andi	r2,r2,255
  800538:	1080201c 	xori	r2,r2,128
  80053c:	10bfe004 	addi	r2,r2,-128
  800540:	1000051e 	bne	r2,zero,800558 <heartLEDs+0x70>
  800544:	d0a799c3 	ldbu	r2,-24985(gp)
  800548:	10803fcc 	andi	r2,r2,255
  80054c:	1080201c 	xori	r2,r2,128
  800550:	10bfe004 	addi	r2,r2,-128
  800554:	10000226 	beq	r2,zero,800560 <heartLEDs+0x78>
  800558:	00800044 	movi	r2,1
  80055c:	00000106 	br	800564 <heartLEDs+0x7c>
  800560:	0005883a 	mov	r2,zero
  800564:	e0bfff15 	stw	r2,-4(fp)

	if (A_LED == 1) //Check if A was sensed or paced
  800568:	e0bffe17 	ldw	r2,-8(fp)
  80056c:	10800058 	cmpnei	r2,r2,1
  800570:	10000c1e 	bne	r2,zero,8005a4 <heartLEDs+0xbc>
	{
		LED0 = 1; //Set atrial LED on
  800574:	00800044 	movi	r2,1
  800578:	d0a74f15 	stw	r2,-25284(gp)
		alt_alarm_stop(&Atrial_timer); //Check timer is stopped before starting
  80057c:	01002074 	movhi	r4,129
  800580:	211f5704 	addi	r4,r4,32092
  800584:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL); // Start timer
  800588:	000f883a 	mov	r7,zero
  80058c:	01802034 	movhi	r6,128
  800590:	3180a404 	addi	r6,r6,656
  800594:	01401904 	movi	r5,100
  800598:	01002074 	movhi	r4,129
  80059c:	211f5704 	addi	r4,r4,32092
  8005a0:	080f97c0 	call	80f97c <alt_alarm_start>
	}

	if (V_LED == 1)
  8005a4:	e0bfff17 	ldw	r2,-4(fp)
  8005a8:	10800058 	cmpnei	r2,r2,1
  8005ac:	10000c1e 	bne	r2,zero,8005e0 <heartLEDs+0xf8>
	{
		LED1 = 1; //Set ventricular LED on
  8005b0:	00800044 	movi	r2,1
  8005b4:	d0a75015 	stw	r2,-25280(gp)
		alt_alarm_stop(&Ventricular_timer); //Check timer is stopped before starting
  8005b8:	01002074 	movhi	r4,129
  8005bc:	211f4504 	addi	r4,r4,32020
  8005c0:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL); // Start timer
  8005c4:	000f883a 	mov	r7,zero
  8005c8:	01802034 	movhi	r6,128
  8005cc:	3180ae04 	addi	r6,r6,696
  8005d0:	01401904 	movi	r5,100
  8005d4:	01002074 	movhi	r4,129
  8005d8:	211f4504 	addi	r4,r4,32020
  8005dc:	080f97c0 	call	80f97c <alt_alarm_start>
	}

	LEDbits = 0; //Set all LEDs off
  8005e0:	d0274e15 	stw	zero,-25288(gp)
	//Set atrial and ventricular LEDs to their current state
	LEDbits = (LEDbits | (LED0 << 0));
  8005e4:	d0e74e17 	ldw	r3,-25288(gp)
  8005e8:	d0a74f17 	ldw	r2,-25284(gp)
  8005ec:	1884b03a 	or	r2,r3,r2
  8005f0:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = (LEDbits | (LED1 << 1));
  8005f4:	d0a75017 	ldw	r2,-25280(gp)
  8005f8:	1085883a 	add	r2,r2,r2
  8005fc:	1007883a 	mov	r3,r2
  800600:	d0a74e17 	ldw	r2,-25288(gp)
  800604:	1884b03a 	or	r2,r3,r2
  800608:	d0a74e15 	stw	r2,-25288(gp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits); //Write LED values
  80060c:	d0a74e17 	ldw	r2,-25288(gp)
  800610:	1007883a 	mov	r3,r2
  800614:	00804434 	movhi	r2,272
  800618:	10841c04 	addi	r2,r2,4208
  80061c:	10c00035 	stwio	r3,0(r2)
}
  800620:	0001883a 	nop
  800624:	e037883a 	mov	sp,fp
  800628:	dfc00117 	ldw	ra,4(sp)
  80062c:	df000017 	ldw	fp,0(sp)
  800630:	dec00204 	addi	sp,sp,8
  800634:	f800283a 	ret

00800638 <setFlags>:

void setFlags()
{
  800638:	defffe04 	addi	sp,sp,-8
  80063c:	dfc00115 	stw	ra,4(sp)
  800640:	df000015 	stw	fp,0(sp)
  800644:	d839883a 	mov	fp,sp
	if (AVITOFlag == 1) {
  800648:	d0a74817 	ldw	r2,-25312(gp)
  80064c:	10800058 	cmpnei	r2,r2,1
  800650:	1000071e 	bne	r2,zero,800670 <setFlags+0x38>
		AVITO = 1;
  800654:	00800044 	movi	r2,1
  800658:	d0a78185 	stb	r2,-25082(gp)
		AVITOFlag = 0;
  80065c:	d0274815 	stw	zero,-25312(gp)
		printf("----AVI timed out----\n");
  800660:	01002074 	movhi	r4,129
  800664:	210ec004 	addi	r4,r4,15104
  800668:	080333c0 	call	80333c <puts>
  80066c:	00000106 	br	800674 <setFlags+0x3c>
	} else {
		AVITO = 0;
  800670:	d0278185 	stb	zero,-25082(gp)
	}

	if (PVARPTOFlag == 1) {
  800674:	d0a74917 	ldw	r2,-25308(gp)
  800678:	10800058 	cmpnei	r2,r2,1
  80067c:	1000071e 	bne	r2,zero,80069c <setFlags+0x64>
		PVARPTO = 1;
  800680:	00800044 	movi	r2,1
  800684:	d0a78485 	stb	r2,-25070(gp)
		PVARPTOFlag = 0;
  800688:	d0274915 	stw	zero,-25308(gp)
			printf("----PVARP timed out----\n");
  80068c:	01002074 	movhi	r4,129
  800690:	210ec604 	addi	r4,r4,15128
  800694:	080333c0 	call	80333c <puts>
  800698:	00000106 	br	8006a0 <setFlags+0x68>
	} else {
		PVARPTO = 0;
  80069c:	d0278485 	stb	zero,-25070(gp)
	}

	if (VRPTOFlag == 1) {
  8006a0:	d0a74a17 	ldw	r2,-25304(gp)
  8006a4:	10800058 	cmpnei	r2,r2,1
  8006a8:	1000071e 	bne	r2,zero,8006c8 <setFlags+0x90>
		VRPTO= 1;
  8006ac:	00800044 	movi	r2,1
  8006b0:	d0a78005 	stb	r2,-25088(gp)
		VRPTOFlag = 0;
  8006b4:	d0274a15 	stw	zero,-25304(gp)
			printf("----VRP timed out----\n");
  8006b8:	01002074 	movhi	r4,129
  8006bc:	210ecc04 	addi	r4,r4,15152
  8006c0:	080333c0 	call	80333c <puts>
  8006c4:	00000106 	br	8006cc <setFlags+0x94>
	} else {
		VRPTO = 0;
  8006c8:	d0278005 	stb	zero,-25088(gp)
	}

	if (AEITOFlag == 1) {
  8006cc:	d0a74b17 	ldw	r2,-25300(gp)
  8006d0:	10800058 	cmpnei	r2,r2,1
  8006d4:	1000071e 	bne	r2,zero,8006f4 <setFlags+0xbc>
		AEITO = 1;
  8006d8:	00800044 	movi	r2,1
  8006dc:	d0a79e85 	stb	r2,-24966(gp)
		AEITOFlag = 0;
  8006e0:	d0274b15 	stw	zero,-25300(gp)
			printf("----AEI timed out----\n");
  8006e4:	01002074 	movhi	r4,129
  8006e8:	210ed204 	addi	r4,r4,15176
  8006ec:	080333c0 	call	80333c <puts>
  8006f0:	00000106 	br	8006f8 <setFlags+0xc0>
	} else {
		AEITO = 0;
  8006f4:	d0279e85 	stb	zero,-24966(gp)
	}

	if (LRITOFlag == 1) {
  8006f8:	d0a74c17 	ldw	r2,-25296(gp)
  8006fc:	10800058 	cmpnei	r2,r2,1
  800700:	1000071e 	bne	r2,zero,800720 <setFlags+0xe8>
		LRITO= 1;
  800704:	00800044 	movi	r2,1
  800708:	d0a75d45 	stb	r2,-25227(gp)
		LRITOFlag = 0;
  80070c:	d0274c15 	stw	zero,-25296(gp)
			printf("----LRI timed out----\n");
  800710:	01002074 	movhi	r4,129
  800714:	210ed804 	addi	r4,r4,15200
  800718:	080333c0 	call	80333c <puts>
  80071c:	00000106 	br	800724 <setFlags+0xec>
	} else {
		LRITO = 0;
  800720:	d0275d45 	stb	zero,-25227(gp)
	}

	if (URITOFlag == 1) {
  800724:	d0a74d17 	ldw	r2,-25292(gp)
  800728:	10800058 	cmpnei	r2,r2,1
  80072c:	1000071e 	bne	r2,zero,80074c <setFlags+0x114>
		URITO = 1;
  800730:	00800044 	movi	r2,1
  800734:	d0a77fc5 	stb	r2,-25089(gp)
		URITOFlag = 0;
  800738:	d0274d15 	stw	zero,-25292(gp)
			printf("----URI timed out----\n");
  80073c:	01002074 	movhi	r4,129
  800740:	210ede04 	addi	r4,r4,15224
  800744:	080333c0 	call	80333c <puts>
	} else {
		URITO = 0;
	}
}
  800748:	00000106 	br	800750 <setFlags+0x118>
	if (URITOFlag == 1) {
		URITO = 1;
		URITOFlag = 0;
			printf("----URI timed out----\n");
	} else {
		URITO = 0;
  80074c:	d0277fc5 	stb	zero,-25089(gp)
	}
}
  800750:	0001883a 	nop
  800754:	e037883a 	mov	sp,fp
  800758:	dfc00117 	ldw	ra,4(sp)
  80075c:	df000017 	ldw	fp,0(sp)
  800760:	dec00204 	addi	sp,sp,8
  800764:	f800283a 	ret

00800768 <startTimers>:

//This function is used to start all timers at the time they need starting.
void startTimers()
{
  800768:	defffe04 	addi	sp,sp,-8
  80076c:	dfc00115 	stw	ra,4(sp)
  800770:	df000015 	stw	fp,0(sp)
  800774:	d839883a 	mov	fp,sp
//		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//	}
	if (AVI_start == 1)
  800778:	d0a76003 	ldbu	r2,-25216(gp)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	10800058 	cmpnei	r2,r2,1
  80078c:	10000e1e 	bne	r2,zero,8007c8 <startTimers+0x60>
	{

		alt_alarm_stop(&AVI_timer);
  800790:	01002074 	movhi	r4,129
  800794:	211f5d04 	addi	r4,r4,32116
  800798:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  80079c:	000f883a 	mov	r7,zero
  8007a0:	01802034 	movhi	r6,128
  8007a4:	3180b804 	addi	r6,r6,736
  8007a8:	01404b04 	movi	r5,300
  8007ac:	01002074 	movhi	r4,129
  8007b0:	211f5d04 	addi	r4,r4,32116
  8007b4:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("avi start \n");
  8007b8:	01002074 	movhi	r4,129
  8007bc:	210ee404 	addi	r4,r4,15248
  8007c0:	080333c0 	call	80333c <puts>
  8007c4:	00000c06 	br	8007f8 <startTimers+0x90>
	}
	else if (AVI_stop == 1)
  8007c8:	d0a76343 	ldbu	r2,-25203(gp)
  8007cc:	10803fcc 	andi	r2,r2,255
  8007d0:	1080201c 	xori	r2,r2,128
  8007d4:	10bfe004 	addi	r2,r2,-128
  8007d8:	10800058 	cmpnei	r2,r2,1
  8007dc:	1000061e 	bne	r2,zero,8007f8 <startTimers+0x90>
	{
		alt_alarm_stop(&AVI_timer);
  8007e0:	01002074 	movhi	r4,129
  8007e4:	211f5d04 	addi	r4,r4,32116
  8007e8:	08102b80 	call	8102b8 <alt_alarm_stop>
		printf("avi stop\n");
  8007ec:	01002074 	movhi	r4,129
  8007f0:	210ee704 	addi	r4,r4,15260
  8007f4:	080333c0 	call	80333c <puts>
	}


	if (PVARP_start == 1)
  8007f8:	d0a78603 	ldbu	r2,-25064(gp)
  8007fc:	10803fcc 	andi	r2,r2,255
  800800:	1080201c 	xori	r2,r2,128
  800804:	10bfe004 	addi	r2,r2,-128
  800808:	10800058 	cmpnei	r2,r2,1
  80080c:	10000d1e 	bne	r2,zero,800844 <startTimers+0xdc>
	{
		alt_alarm_stop(&PVARP_timer);
  800810:	01002074 	movhi	r4,129
  800814:	211f4b04 	addi	r4,r4,32044
  800818:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
  80081c:	000f883a 	mov	r7,zero
  800820:	01802034 	movhi	r6,128
  800824:	3180c804 	addi	r6,r6,800
  800828:	01400c84 	movi	r5,50
  80082c:	01002074 	movhi	r4,129
  800830:	211f4b04 	addi	r4,r4,32044
  800834:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("pvarp start\n");
  800838:	01002074 	movhi	r4,129
  80083c:	210eea04 	addi	r4,r4,15272
  800840:	080333c0 	call	80333c <puts>
//	{
//		alt_alarm_stop(&PVARP_timer);
//	}


	if(VRP_start==1)
  800844:	d0a77c83 	ldbu	r2,-25102(gp)
  800848:	10803fcc 	andi	r2,r2,255
  80084c:	1080201c 	xori	r2,r2,128
  800850:	10bfe004 	addi	r2,r2,-128
  800854:	10800058 	cmpnei	r2,r2,1
  800858:	10000d1e 	bne	r2,zero,800890 <startTimers+0x128>
	{
		alt_alarm_stop(&VRP_timer);
  80085c:	01002074 	movhi	r4,129
  800860:	211f5104 	addi	r4,r4,32068
  800864:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
  800868:	000f883a 	mov	r7,zero
  80086c:	01802034 	movhi	r6,128
  800870:	3180d804 	addi	r6,r6,864
  800874:	01402584 	movi	r5,150
  800878:	01002074 	movhi	r4,129
  80087c:	211f5104 	addi	r4,r4,32068
  800880:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("vrp start\n");
  800884:	01002074 	movhi	r4,129
  800888:	210eed04 	addi	r4,r4,15284
  80088c:	080333c0 	call	80333c <puts>
//	{
//		alt_alarm_stop(&VRP_timer);
//	}


	if(AEI_start==1)
  800890:	d0a78bc3 	ldbu	r2,-25041(gp)
  800894:	10803fcc 	andi	r2,r2,255
  800898:	1080201c 	xori	r2,r2,128
  80089c:	10bfe004 	addi	r2,r2,-128
  8008a0:	10800058 	cmpnei	r2,r2,1
  8008a4:	10000e1e 	bne	r2,zero,8008e0 <startTimers+0x178>
	{
		alt_alarm_stop(&AEI_timer);
  8008a8:	01002074 	movhi	r4,129
  8008ac:	211f6904 	addi	r4,r4,32164
  8008b0:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
  8008b4:	000f883a 	mov	r7,zero
  8008b8:	01802034 	movhi	r6,128
  8008bc:	3180e804 	addi	r6,r6,928
  8008c0:	0140c804 	movi	r5,800
  8008c4:	01002074 	movhi	r4,129
  8008c8:	211f6904 	addi	r4,r4,32164
  8008cc:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("aei start\n");
  8008d0:	01002074 	movhi	r4,129
  8008d4:	210ef004 	addi	r4,r4,15296
  8008d8:	080333c0 	call	80333c <puts>
  8008dc:	00000c06 	br	800910 <startTimers+0x1a8>
	}
	else if (AEI_stop == 1)
  8008e0:	d0a79c43 	ldbu	r2,-24975(gp)
  8008e4:	10803fcc 	andi	r2,r2,255
  8008e8:	1080201c 	xori	r2,r2,128
  8008ec:	10bfe004 	addi	r2,r2,-128
  8008f0:	10800058 	cmpnei	r2,r2,1
  8008f4:	1000061e 	bne	r2,zero,800910 <startTimers+0x1a8>
	{
		alt_alarm_stop(&AEI_timer);
  8008f8:	01002074 	movhi	r4,129
  8008fc:	211f6904 	addi	r4,r4,32164
  800900:	08102b80 	call	8102b8 <alt_alarm_stop>
		printf("aei stop \n");
  800904:	01002074 	movhi	r4,129
  800908:	210ef304 	addi	r4,r4,15308
  80090c:	080333c0 	call	80333c <puts>
	}


	if (URI_start == 1)
  800910:	d0a79d03 	ldbu	r2,-24972(gp)
  800914:	10803fcc 	andi	r2,r2,255
  800918:	1080201c 	xori	r2,r2,128
  80091c:	10bfe004 	addi	r2,r2,-128
  800920:	10800058 	cmpnei	r2,r2,1
  800924:	10000d1e 	bne	r2,zero,80095c <startTimers+0x1f4>
	{
		alt_alarm_stop(&URI_timer);
  800928:	01002074 	movhi	r4,129
  80092c:	211f6f04 	addi	r4,r4,32188
  800930:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
  800934:	000f883a 	mov	r7,zero
  800938:	01802034 	movhi	r6,128
  80093c:	31810804 	addi	r6,r6,1056
  800940:	0140e104 	movi	r5,900
  800944:	01002074 	movhi	r4,129
  800948:	211f6f04 	addi	r4,r4,32188
  80094c:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("uri start\n");
  800950:	01002074 	movhi	r4,129
  800954:	210ef604 	addi	r4,r4,15320
  800958:	080333c0 	call	80333c <puts>
//	{
//		alt_alarm_stop(&URI_timer);
//	}


	if (LRI_start == 1)
  80095c:	d0a77f83 	ldbu	r2,-25090(gp)
  800960:	10803fcc 	andi	r2,r2,255
  800964:	1080201c 	xori	r2,r2,128
  800968:	10bfe004 	addi	r2,r2,-128
  80096c:	10800058 	cmpnei	r2,r2,1
  800970:	10000e1e 	bne	r2,zero,8009ac <startTimers+0x244>
	{
		alt_alarm_stop(&LRI_timer);
  800974:	01002074 	movhi	r4,129
  800978:	211f6304 	addi	r4,r4,32140
  80097c:	08102b80 	call	8102b8 <alt_alarm_stop>
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
  800980:	000f883a 	mov	r7,zero
  800984:	01802034 	movhi	r6,128
  800988:	3180f804 	addi	r6,r6,992
  80098c:	0140ed84 	movi	r5,950
  800990:	01002074 	movhi	r4,129
  800994:	211f6304 	addi	r4,r4,32140
  800998:	080f97c0 	call	80f97c <alt_alarm_start>
		printf("lri start\n");
  80099c:	01002074 	movhi	r4,129
  8009a0:	210ef904 	addi	r4,r4,15332
  8009a4:	080333c0 	call	80333c <puts>
  8009a8:	00000c06 	br	8009dc <startTimers+0x274>
	}
	else if (LRI_stop == 1)
  8009ac:	d0a76a83 	ldbu	r2,-25174(gp)
  8009b0:	10803fcc 	andi	r2,r2,255
  8009b4:	1080201c 	xori	r2,r2,128
  8009b8:	10bfe004 	addi	r2,r2,-128
  8009bc:	10800058 	cmpnei	r2,r2,1
  8009c0:	1000061e 	bne	r2,zero,8009dc <startTimers+0x274>
	{
		alt_alarm_stop(&LRI_timer);
  8009c4:	01002074 	movhi	r4,129
  8009c8:	211f6304 	addi	r4,r4,32140
  8009cc:	08102b80 	call	8102b8 <alt_alarm_stop>
		printf("lri stop\n");
  8009d0:	01002074 	movhi	r4,129
  8009d4:	210efc04 	addi	r4,r4,15344
  8009d8:	080333c0 	call	80333c <puts>
	}


	if (VPace == 1)
  8009dc:	d0a799c3 	ldbu	r2,-24985(gp)
  8009e0:	10803fcc 	andi	r2,r2,255
  8009e4:	1080201c 	xori	r2,r2,128
  8009e8:	10bfe004 	addi	r2,r2,-128
  8009ec:	10800058 	cmpnei	r2,r2,1
  8009f0:	1000031e 	bne	r2,zero,800a00 <startTimers+0x298>
	{
		printf("**********V paced**");
  8009f4:	01002074 	movhi	r4,129
  8009f8:	210eff04 	addi	r4,r4,15356
  8009fc:	08032400 	call	803240 <printf>
//	VRPTOFlag = 0;
//	AEITOFlag = 0;
//	LRITOFlag = 0;
//	URITOFlag = 0;

	AVI_start = 0;
  800a00:	d0276005 	stb	zero,-25216(gp)
	PVARP_start = 0;
  800a04:	d0278605 	stb	zero,-25064(gp)
	VRP_start = 0;
  800a08:	d0277c85 	stb	zero,-25102(gp)
	AEI_start = 0;
  800a0c:	d0278bc5 	stb	zero,-25041(gp)
	LRI_start = 0;
  800a10:	d0277f85 	stb	zero,-25090(gp)
	URI_start = 0;
  800a14:	d0279d05 	stb	zero,-24972(gp)

	AVI_stop = 0;
  800a18:	d0276345 	stb	zero,-25203(gp)
//	PVARP_stop = 0;
//	VRP_stop = 0;
	AEI_stop = 0;
  800a1c:	d0279c45 	stb	zero,-24975(gp)
	LRI_stop = 0;
  800a20:	d0276a85 	stb	zero,-25174(gp)
//	URI_stop = 0;
}
  800a24:	0001883a 	nop
  800a28:	e037883a 	mov	sp,fp
  800a2c:	dfc00117 	ldw	ra,4(sp)
  800a30:	df000017 	ldw	fp,0(sp)
  800a34:	dec00204 	addi	sp,sp,8
  800a38:	f800283a 	ret

00800a3c <main>:

int main()
{
  800a3c:	defffd04 	addi	sp,sp,-12
  800a40:	dfc00215 	stw	ra,8(sp)
  800a44:	df000115 	stw	fp,4(sp)
  800a48:	df000104 	addi	fp,sp,4
	// Reset the scc
	reset();
  800a4c:	0800a880 	call	800a88 <reset>
//	startTimers();

//	APace = 1;
//	heartLEDs();

	int count = 0;
  800a50:	e03fff15 	stw	zero,-4(fp)

	while(1) // Main loop
	{
		pollButtons();
  800a54:	08004600 	call	800460 <pollButtons>
		setFlags();
  800a58:	08006380 	call	800638 <setFlags>
		tick();
  800a5c:	0800b280 	call	800b28 <tick>
		startTimers();
  800a60:	08007680 	call	800768 <startTimers>
		heartLEDs();
  800a64:	08004e80 	call	8004e8 <heartLEDs>


//		printf("URI_start is: %i \n", URI_start);
//		printf("AEI_start is: %i \n", AEI_start);

		count = count + 1;
  800a68:	e0bfff17 	ldw	r2,-4(fp)
  800a6c:	10800044 	addi	r2,r2,1
  800a70:	e0bfff15 	stw	r2,-4(fp)
		if (count % 2000 == 0){
  800a74:	e0bfff17 	ldw	r2,-4(fp)
  800a78:	0141f404 	movi	r5,2000
  800a7c:	1009883a 	mov	r4,r2
  800a80:	08030e00 	call	8030e0 <__modsi3>
			//printf("URI_start is: %i \n", URI_start);
//			printf("URI_start is: %i \n", URI_start);
		}
//		printf("LRI_start: %c", LRI_start);
//		printf("AVI_start = %i \r\n", AVI_start);
	}
  800a84:	003ff306 	br	800a54 <__alt_mem_onchip_mem+0xff780a54>

00800a88 <reset>:
char g122_e1_fix;
char g122_e1;
char g126_e2;
char g130_e3;
int _PRE_GO;
void reset(){
  800a88:	deffff04 	addi	sp,sp,-4
  800a8c:	df000015 	stw	fp,0(sp)
  800a90:	d839883a 	mov	fp,sp
   _GO = 1;
  800a94:	00800044 	movi	r2,1
  800a98:	d0a77f45 	stb	r2,-25091(gp)
   _PRE_GO = 0;
  800a9c:	d0275e15 	stw	zero,-25224(gp)
   PRE_g3 = 0;
  800aa0:	d0275f05 	stb	zero,-25220(gp)
   PRE_g6 = 0;
  800aa4:	d0277b05 	stb	zero,-25108(gp)
   PRE_g12 = 0;
  800aa8:	d0277045 	stb	zero,-25151(gp)
   PRE_g14 = 0;
  800aac:	d02784c5 	stb	zero,-25069(gp)
   PRE_g20 = 0;
  800ab0:	d0276305 	stb	zero,-25204(gp)
   PRE_g23 = 0;
  800ab4:	d0275885 	stb	zero,-25246(gp)
   PRE_g32 = 0;
  800ab8:	d0276105 	stb	zero,-25212(gp)
   PRE_g34 = 0;
  800abc:	d02767c5 	stb	zero,-25185(gp)
   PRE_g40 = 0;
  800ac0:	d0276a05 	stb	zero,-25176(gp)
   PRE_g43 = 0;
  800ac4:	d02783c5 	stb	zero,-25073(gp)
   PRE_g52 = 0;
  800ac8:	d0277a05 	stb	zero,-25112(gp)
   PRE_g54 = 0;
  800acc:	d0278045 	stb	zero,-25087(gp)
   PRE_g56 = 0;
  800ad0:	d02760c5 	stb	zero,-25213(gp)
   PRE_g62 = 0;
  800ad4:	d0278505 	stb	zero,-25068(gp)
   PRE_g65 = 0;
  800ad8:	d02762c5 	stb	zero,-25205(gp)
   PRE_g71 = 0;
  800adc:	d0277745 	stb	zero,-25123(gp)
   PRE_g73 = 0;
  800ae0:	d02798c5 	stb	zero,-24989(gp)
   PRE_g79 = 0;
  800ae4:	d02777c5 	stb	zero,-25121(gp)
   PRE_g82 = 0;
  800ae8:	d0279705 	stb	zero,-24996(gp)
   PRE_g91 = 0;
  800aec:	d0278085 	stb	zero,-25086(gp)
   PRE_g93 = 0;
  800af0:	d0279305 	stb	zero,-25012(gp)
   PRE_g99 = 0;
  800af4:	d0278f85 	stb	zero,-25026(gp)
   PRE_g102 = 0;
  800af8:	d0275805 	stb	zero,-25248(gp)
   PRE_g108 = 0;
  800afc:	d0279b05 	stb	zero,-24980(gp)
   PRE_g110 = 0;
  800b00:	d0278e85 	stb	zero,-25030(gp)
   PRE_g115 = 0;
  800b04:	d0278a45 	stb	zero,-25047(gp)
   PRE_g119 = 0;
  800b08:	d0277c05 	stb	zero,-25104(gp)
   PRE_g124 = 0;
  800b0c:	d0276b05 	stb	zero,-25172(gp)
   PRE_g128 = 0;
  800b10:	d0275a85 	stb	zero,-25238(gp)
   return;
  800b14:	0001883a 	nop
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	df000017 	ldw	fp,0(sp)
  800b20:	dec00104 	addi	sp,sp,4
  800b24:	f800283a 	ret

00800b28 <tick>:
void tick(){
  800b28:	deffff04 	addi	sp,sp,-4
  800b2c:	df000015 	stw	fp,0(sp)
  800b30:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800b34:	d0a75e17 	ldw	r2,-25224(gp)
  800b38:	10800058 	cmpnei	r2,r2,1
  800b3c:	1000011e 	bne	r2,zero,800b44 <tick+0x1c>
      _GO = 0;
  800b40:	d0277f45 	stb	zero,-25091(gp)
   }
   {
      g0 = _GO;
  800b44:	d0a77f43 	ldbu	r2,-25091(gp)
  800b48:	d0a78fc5 	stb	r2,-25025(gp)
      g1 = g0;
  800b4c:	d0a78fc3 	ldbu	r2,-25025(gp)
  800b50:	d0a763c5 	stb	r2,-25201(gp)
      g2 = g1;
  800b54:	d0a763c3 	ldbu	r2,-25201(gp)
  800b58:	d0a77305 	stb	r2,-25140(gp)
      g127 = g0;
  800b5c:	d0a78fc3 	ldbu	r2,-25025(gp)
  800b60:	d0a75cc5 	stb	r2,-25229(gp)
      g129 =(PRE_g128);
  800b64:	d0a75a83 	ldbu	r2,-25238(gp)
  800b68:	d0a77a45 	stb	r2,-25111(gp)
      g128 =(g127||g129);
  800b6c:	d0a75cc3 	ldbu	r2,-25229(gp)
  800b70:	10803fcc 	andi	r2,r2,255
  800b74:	1080201c 	xori	r2,r2,128
  800b78:	10bfe004 	addi	r2,r2,-128
  800b7c:	1000051e 	bne	r2,zero,800b94 <tick+0x6c>
  800b80:	d0a77a43 	ldbu	r2,-25111(gp)
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1080201c 	xori	r2,r2,128
  800b8c:	10bfe004 	addi	r2,r2,-128
  800b90:	10000226 	beq	r2,zero,800b9c <tick+0x74>
  800b94:	00800044 	movi	r2,1
  800b98:	00000106 	br	800ba0 <tick+0x78>
  800b9c:	0005883a 	mov	r2,zero
  800ba0:	d0a77445 	stb	r2,-25135(gp)
      if(g128){
  800ba4:	d0a77443 	ldbu	r2,-25135(gp)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	10000b26 	beq	r2,zero,800be4 <tick+0xbc>
         VPace = 0;
  800bb8:	d02799c5 	stb	zero,-24985(gp)
         APace = 0;
  800bbc:	d02756c5 	stb	zero,-25253(gp)
         AVI_start = 0;
  800bc0:	d0276005 	stb	zero,-25216(gp)
         LRI_start = 0;
  800bc4:	d0277f85 	stb	zero,-25090(gp)
         VRP_start = 0;
  800bc8:	d0277c85 	stb	zero,-25102(gp)
         AEI_start = 0;
  800bcc:	d0278bc5 	stb	zero,-25041(gp)
         PVARP_start = 0;
  800bd0:	d0278605 	stb	zero,-25064(gp)
         URI_start = 0;
  800bd4:	d0279d05 	stb	zero,-24972(gp)
         AVI_stop = 0;
  800bd8:	d0276345 	stb	zero,-25203(gp)
         LRI_stop = 0;
  800bdc:	d0276a85 	stb	zero,-25174(gp)
         AEI_stop = 0;
  800be0:	d0279c45 	stb	zero,-24975(gp)
      }
      g116 =(PRE_g115);
  800be4:	d0a78a43 	ldbu	r2,-25047(gp)
  800be8:	d0a78d05 	stb	r2,-25036(gp)
      if(g116){
  800bec:	d0a78d03 	ldbu	r2,-25036(gp)
  800bf0:	10803fcc 	andi	r2,r2,255
  800bf4:	1080201c 	xori	r2,r2,128
  800bf8:	10bfe004 	addi	r2,r2,-128
  800bfc:	10000626 	beq	r2,zero,800c18 <tick+0xf0>
         _Pacemaker1_local__pre_LRI_ex10 = _Pacemaker1_local__reg_LRI_ex10;
  800c00:	d0a77703 	ldbu	r2,-25124(gp)
  800c04:	d0a790c5 	stb	r2,-25021(gp)
         _Pacemaker1_local__pre_AEI_ex14 = _Pacemaker1_local__reg_AEI_ex14;
  800c08:	d0a759c3 	ldbu	r2,-25241(gp)
  800c0c:	d0a78a05 	stb	r2,-25048(gp)
         _Pacemaker1_local__pre_URI_idle15 = _Pacemaker1_local__reg_URI_idle15;
  800c10:	d0a77bc3 	ldbu	r2,-25105(gp)
  800c14:	d0a79fc5 	stb	r2,-24961(gp)
      }
      g125 =(PRE_g124);
  800c18:	d0a76b03 	ldbu	r2,-25172(gp)
  800c1c:	d0a79545 	stb	r2,-25003(gp)
      if(g125){
  800c20:	d0a79543 	ldbu	r2,-25003(gp)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	10000626 	beq	r2,zero,800c4c <tick+0x124>
         _pre_AEI_stop15 = _reg_AEI_stop15;
  800c34:	d0a79103 	ldbu	r2,-25020(gp)
  800c38:	d0a78705 	stb	r2,-25060(gp)
         _pre_VRP_start18 = _reg_VRP_start18;
  800c3c:	d0a75c43 	ldbu	r2,-25231(gp)
  800c40:	d0a76085 	stb	r2,-25214(gp)
         _pre_LRI_stop = _reg_LRI_stop;
  800c44:	d0a76f03 	ldbu	r2,-25156(gp)
  800c48:	d0a76ec5 	stb	r2,-25157(gp)
      }
      g35 =(PRE_g34);
  800c4c:	d0a767c3 	ldbu	r2,-25185(gp)
  800c50:	d0a77e85 	stb	r2,-25094(gp)
      g35b = g35;
  800c54:	d0a77e83 	ldbu	r2,-25094(gp)
  800c58:	d0a77d45 	stb	r2,-25099(gp)
      _cg35 = _pre_LRI_stop;
  800c5c:	d0a76ec3 	ldbu	r2,-25157(gp)
  800c60:	d0a76705 	stb	r2,-25188(gp)
      g36 =(g35b&&(!(_cg35)));
  800c64:	d0a77d43 	ldbu	r2,-25099(gp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	1080201c 	xori	r2,r2,128
  800c70:	10bfe004 	addi	r2,r2,-128
  800c74:	10000726 	beq	r2,zero,800c94 <tick+0x16c>
  800c78:	d0a76703 	ldbu	r2,-25188(gp)
  800c7c:	10803fcc 	andi	r2,r2,255
  800c80:	1080201c 	xori	r2,r2,128
  800c84:	10bfe004 	addi	r2,r2,-128
  800c88:	1000021e 	bne	r2,zero,800c94 <tick+0x16c>
  800c8c:	00800044 	movi	r2,1
  800c90:	00000106 	br	800c98 <tick+0x170>
  800c94:	0005883a 	mov	r2,zero
  800c98:	d0a78545 	stb	r2,-25067(gp)
      _cg36 = _Pacemaker1_local__pre_LRI_ex10;
  800c9c:	d0a790c3 	ldbu	r2,-25021(gp)
  800ca0:	d0a79dc5 	stb	r2,-24969(gp)
      g37 =(g36&&_cg36);
  800ca4:	d0a78543 	ldbu	r2,-25067(gp)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000726 	beq	r2,zero,800cd4 <tick+0x1ac>
  800cb8:	d0a79dc3 	ldbu	r2,-24969(gp)
  800cbc:	10803fcc 	andi	r2,r2,255
  800cc0:	1080201c 	xori	r2,r2,128
  800cc4:	10bfe004 	addi	r2,r2,-128
  800cc8:	10000226 	beq	r2,zero,800cd4 <tick+0x1ac>
  800ccc:	00800044 	movi	r2,1
  800cd0:	00000106 	br	800cd8 <tick+0x1b0>
  800cd4:	0005883a 	mov	r2,zero
  800cd8:	d0a76885 	stb	r2,-25182(gp)
      if(g37){
  800cdc:	d0a76883 	ldbu	r2,-25182(gp)
  800ce0:	10803fcc 	andi	r2,r2,255
  800ce4:	1080201c 	xori	r2,r2,128
  800ce8:	10bfe004 	addi	r2,r2,-128
  800cec:	10000226 	beq	r2,zero,800cf8 <tick+0x1d0>
         VPace =(VPace||1);
  800cf0:	00800044 	movi	r2,1
  800cf4:	d0a799c5 	stb	r2,-24985(gp)
      }
      g57 =(PRE_g56);
  800cf8:	d0a760c3 	ldbu	r2,-25213(gp)
  800cfc:	d0a78b45 	stb	r2,-25043(gp)
      g57b = g57;
  800d00:	d0a78b43 	ldbu	r2,-25043(gp)
  800d04:	d0a78645 	stb	r2,-25063(gp)
      _cg57 = _Pacemaker1_local__pre_URI_idle15;
  800d08:	d0a79fc3 	ldbu	r2,-24961(gp)
  800d0c:	d0a79245 	stb	r2,-25015(gp)
      g58 =(g57b&&_cg57);
  800d10:	d0a78643 	ldbu	r2,-25063(gp)
  800d14:	10803fcc 	andi	r2,r2,255
  800d18:	1080201c 	xori	r2,r2,128
  800d1c:	10bfe004 	addi	r2,r2,-128
  800d20:	10000726 	beq	r2,zero,800d40 <tick+0x218>
  800d24:	d0a79243 	ldbu	r2,-25015(gp)
  800d28:	10803fcc 	andi	r2,r2,255
  800d2c:	1080201c 	xori	r2,r2,128
  800d30:	10bfe004 	addi	r2,r2,-128
  800d34:	10000226 	beq	r2,zero,800d40 <tick+0x218>
  800d38:	00800044 	movi	r2,1
  800d3c:	00000106 	br	800d44 <tick+0x21c>
  800d40:	0005883a 	mov	r2,zero
  800d44:	d0a791c5 	stb	r2,-25017(gp)
      if(g58){
  800d48:	d0a791c3 	ldbu	r2,-25017(gp)
  800d4c:	10803fcc 	andi	r2,r2,255
  800d50:	1080201c 	xori	r2,r2,128
  800d54:	10bfe004 	addi	r2,r2,-128
  800d58:	10000226 	beq	r2,zero,800d64 <tick+0x23c>
         VPace =(VPace||1);
  800d5c:	00800044 	movi	r2,1
  800d60:	d0a799c5 	stb	r2,-24985(gp)
      }
      g120 =(PRE_g119);
  800d64:	d0a77c03 	ldbu	r2,-25104(gp)
  800d68:	d0a79ac5 	stb	r2,-24981(gp)
      g118 = g1;
  800d6c:	d0a763c3 	ldbu	r2,-25201(gp)
  800d70:	d0a769c5 	stb	r2,-25177(gp)
      g119 =(g120||g118);
  800d74:	d0a79ac3 	ldbu	r2,-24981(gp)
  800d78:	10803fcc 	andi	r2,r2,255
  800d7c:	1080201c 	xori	r2,r2,128
  800d80:	10bfe004 	addi	r2,r2,-128
  800d84:	1000051e 	bne	r2,zero,800d9c <tick+0x274>
  800d88:	d0a769c3 	ldbu	r2,-25177(gp)
  800d8c:	10803fcc 	andi	r2,r2,255
  800d90:	1080201c 	xori	r2,r2,128
  800d94:	10bfe004 	addi	r2,r2,-128
  800d98:	10000226 	beq	r2,zero,800da4 <tick+0x27c>
  800d9c:	00800044 	movi	r2,1
  800da0:	00000106 	br	800da8 <tick+0x280>
  800da4:	0005883a 	mov	r2,zero
  800da8:	d0a78285 	stb	r2,-25078(gp)
      if(g119){
  800dac:	d0a78283 	ldbu	r2,-25078(gp)
  800db0:	10803fcc 	andi	r2,r2,255
  800db4:	1080201c 	xori	r2,r2,128
  800db8:	10bfe004 	addi	r2,r2,-128
  800dbc:	10000926 	beq	r2,zero,800de4 <tick+0x2bc>
         _Pacemaker1_local_LRI_ex = 0;
  800dc0:	d0277d85 	stb	zero,-25098(gp)
         _Pacemaker1_local_VRP_ex = 0;
  800dc4:	d0276c05 	stb	zero,-25168(gp)
         _Pacemaker1_local_AVI_ex = 0;
  800dc8:	d0278405 	stb	zero,-25072(gp)
         _Pacemaker1_local_URI_ex = 0;
  800dcc:	d0278d85 	stb	zero,-25034(gp)
         _Pacemaker1_local_PVARP_ex = 0;
  800dd0:	d02772c5 	stb	zero,-25141(gp)
         _Pacemaker1_local_AEI_ex = 0;
  800dd4:	d0277845 	stb	zero,-25119(gp)
         _Pacemaker1_local_FilteredASense = 0;
  800dd8:	d0277dc5 	stb	zero,-25097(gp)
         _Pacemaker1_local_FilteredVSense = 0;
  800ddc:	d02778c5 	stb	zero,-25117(gp)
         _Pacemaker1_local_URI_idle = 0;
  800de0:	d0276a45 	stb	zero,-25175(gp)
      }
      g13 =(PRE_g12);
  800de4:	d0a77043 	ldbu	r2,-25151(gp)
  800de8:	d0a789c5 	stb	r2,-25049(gp)
      g13b = g13;
  800dec:	d0a789c3 	ldbu	r2,-25049(gp)
  800df0:	d0a79f45 	stb	r2,-24963(gp)
      _cg13 = _pre_VRP_start18;
  800df4:	d0a76083 	ldbu	r2,-25214(gp)
  800df8:	d0a78f05 	stb	r2,-25028(gp)
      g16 =(g13b&&(!(_cg13)));
  800dfc:	d0a79f43 	ldbu	r2,-24963(gp)
  800e00:	10803fcc 	andi	r2,r2,255
  800e04:	1080201c 	xori	r2,r2,128
  800e08:	10bfe004 	addi	r2,r2,-128
  800e0c:	10000726 	beq	r2,zero,800e2c <tick+0x304>
  800e10:	d0a78f03 	ldbu	r2,-25028(gp)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1080201c 	xori	r2,r2,128
  800e1c:	10bfe004 	addi	r2,r2,-128
  800e20:	1000021e 	bne	r2,zero,800e2c <tick+0x304>
  800e24:	00800044 	movi	r2,1
  800e28:	00000106 	br	800e30 <tick+0x308>
  800e2c:	0005883a 	mov	r2,zero
  800e30:	d0a79145 	stb	r2,-25019(gp)
      _cg16 = VSense;
  800e34:	d0a77ac3 	ldbu	r2,-25109(gp)
  800e38:	d0a773c5 	stb	r2,-25137(gp)
      g17 =(g16&&_cg16);
  800e3c:	d0a79143 	ldbu	r2,-25019(gp)
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	1080201c 	xori	r2,r2,128
  800e48:	10bfe004 	addi	r2,r2,-128
  800e4c:	10000726 	beq	r2,zero,800e6c <tick+0x344>
  800e50:	d0a773c3 	ldbu	r2,-25137(gp)
  800e54:	10803fcc 	andi	r2,r2,255
  800e58:	1080201c 	xori	r2,r2,128
  800e5c:	10bfe004 	addi	r2,r2,-128
  800e60:	10000226 	beq	r2,zero,800e6c <tick+0x344>
  800e64:	00800044 	movi	r2,1
  800e68:	00000106 	br	800e70 <tick+0x348>
  800e6c:	0005883a 	mov	r2,zero
  800e70:	d0a76785 	stb	r2,-25186(gp)
      if(g17){
  800e74:	d0a76783 	ldbu	r2,-25186(gp)
  800e78:	10803fcc 	andi	r2,r2,255
  800e7c:	1080201c 	xori	r2,r2,128
  800e80:	10bfe004 	addi	r2,r2,-128
  800e84:	10000226 	beq	r2,zero,800e90 <tick+0x368>
         _Pacemaker1_local_FilteredVSense =(_Pacemaker1_local_FilteredVSense||1);
  800e88:	00800044 	movi	r2,1
  800e8c:	d0a778c5 	stb	r2,-25117(gp)
      }
      g4 =(PRE_g3);
  800e90:	d0a75f03 	ldbu	r2,-25220(gp)
  800e94:	d0a75705 	stb	r2,-25252(gp)
      g4b = g4;
  800e98:	d0a75703 	ldbu	r2,-25252(gp)
  800e9c:	d0a79d45 	stb	r2,-24971(gp)
      _cg4 = _Pacemaker1_local_FilteredVSense;
  800ea0:	d0a778c3 	ldbu	r2,-25117(gp)
  800ea4:	d0a79b85 	stb	r2,-24978(gp)
      g9 =(g4b&&(!(_cg4)));
  800ea8:	d0a79d43 	ldbu	r2,-24971(gp)
  800eac:	10803fcc 	andi	r2,r2,255
  800eb0:	1080201c 	xori	r2,r2,128
  800eb4:	10bfe004 	addi	r2,r2,-128
  800eb8:	10000726 	beq	r2,zero,800ed8 <tick+0x3b0>
  800ebc:	d0a79b83 	ldbu	r2,-24978(gp)
  800ec0:	10803fcc 	andi	r2,r2,255
  800ec4:	1080201c 	xori	r2,r2,128
  800ec8:	10bfe004 	addi	r2,r2,-128
  800ecc:	1000021e 	bne	r2,zero,800ed8 <tick+0x3b0>
  800ed0:	00800044 	movi	r2,1
  800ed4:	00000106 	br	800edc <tick+0x3b4>
  800ed8:	0005883a 	mov	r2,zero
  800edc:	d0a75c85 	stb	r2,-25230(gp)
      _cg9 = VPace;
  800ee0:	d0a799c3 	ldbu	r2,-24985(gp)
  800ee4:	d0a78f45 	stb	r2,-25027(gp)
      g7 =(PRE_g6);
  800ee8:	d0a77b03 	ldbu	r2,-25108(gp)
  800eec:	d0a77345 	stb	r2,-25139(gp)
      _cg7 = VRPTO;
  800ef0:	d0a78003 	ldbu	r2,-25088(gp)
  800ef4:	d0a75d85 	stb	r2,-25226(gp)
      g8 =(g7&&_cg7);
  800ef8:	d0a77343 	ldbu	r2,-25139(gp)
  800efc:	10803fcc 	andi	r2,r2,255
  800f00:	1080201c 	xori	r2,r2,128
  800f04:	10bfe004 	addi	r2,r2,-128
  800f08:	10000726 	beq	r2,zero,800f28 <tick+0x400>
  800f0c:	d0a75d83 	ldbu	r2,-25226(gp)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	10000226 	beq	r2,zero,800f28 <tick+0x400>
  800f20:	00800044 	movi	r2,1
  800f24:	00000106 	br	800f2c <tick+0x404>
  800f28:	0005883a 	mov	r2,zero
  800f2c:	d0a78b05 	stb	r2,-25044(gp)
      if(g8){
  800f30:	d0a78b03 	ldbu	r2,-25044(gp)
  800f34:	10803fcc 	andi	r2,r2,255
  800f38:	1080201c 	xori	r2,r2,128
  800f3c:	10bfe004 	addi	r2,r2,-128
  800f40:	10000226 	beq	r2,zero,800f4c <tick+0x424>
         _Pacemaker1_local_VRP_ex =(_Pacemaker1_local_VRP_ex||1);
  800f44:	00800044 	movi	r2,1
  800f48:	d0a76c05 	stb	r2,-25168(gp)
      }
      g3 =((g9&&(!(_cg9)))||g8||g2);
  800f4c:	d0a75c83 	ldbu	r2,-25230(gp)
  800f50:	10803fcc 	andi	r2,r2,255
  800f54:	1080201c 	xori	r2,r2,128
  800f58:	10bfe004 	addi	r2,r2,-128
  800f5c:	10000526 	beq	r2,zero,800f74 <tick+0x44c>
  800f60:	d0a78f43 	ldbu	r2,-25027(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000a26 	beq	r2,zero,800f9c <tick+0x474>
  800f74:	d0a78b03 	ldbu	r2,-25044(gp)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	1000051e 	bne	r2,zero,800f9c <tick+0x474>
  800f88:	d0a77303 	ldbu	r2,-25140(gp)
  800f8c:	10803fcc 	andi	r2,r2,255
  800f90:	1080201c 	xori	r2,r2,128
  800f94:	10bfe004 	addi	r2,r2,-128
  800f98:	10000226 	beq	r2,zero,800fa4 <tick+0x47c>
  800f9c:	00800044 	movi	r2,1
  800fa0:	00000106 	br	800fa8 <tick+0x480>
  800fa4:	0005883a 	mov	r2,zero
  800fa8:	d0a75ac5 	stb	r2,-25237(gp)
      g5 =((g4b&&_cg4)||(g9&&_cg9));
  800fac:	d0a79d43 	ldbu	r2,-24971(gp)
  800fb0:	10803fcc 	andi	r2,r2,255
  800fb4:	1080201c 	xori	r2,r2,128
  800fb8:	10bfe004 	addi	r2,r2,-128
  800fbc:	10000526 	beq	r2,zero,800fd4 <tick+0x4ac>
  800fc0:	d0a79b83 	ldbu	r2,-24978(gp)
  800fc4:	10803fcc 	andi	r2,r2,255
  800fc8:	1080201c 	xori	r2,r2,128
  800fcc:	10bfe004 	addi	r2,r2,-128
  800fd0:	10000a1e 	bne	r2,zero,800ffc <tick+0x4d4>
  800fd4:	d0a75c83 	ldbu	r2,-25230(gp)
  800fd8:	10803fcc 	andi	r2,r2,255
  800fdc:	1080201c 	xori	r2,r2,128
  800fe0:	10bfe004 	addi	r2,r2,-128
  800fe4:	10000726 	beq	r2,zero,801004 <tick+0x4dc>
  800fe8:	d0a78f43 	ldbu	r2,-25027(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	10000226 	beq	r2,zero,801004 <tick+0x4dc>
  800ffc:	00800044 	movi	r2,1
  801000:	00000106 	br	801008 <tick+0x4e0>
  801004:	0005883a 	mov	r2,zero
  801008:	d0a77185 	stb	r2,-25146(gp)
      if(g5){
  80100c:	d0a77183 	ldbu	r2,-25146(gp)
  801010:	10803fcc 	andi	r2,r2,255
  801014:	1080201c 	xori	r2,r2,128
  801018:	10bfe004 	addi	r2,r2,-128
  80101c:	10000226 	beq	r2,zero,801028 <tick+0x500>
         VRP_start =(VRP_start||1);
  801020:	00800044 	movi	r2,1
  801024:	d0a77c85 	stb	r2,-25102(gp)
      }
      g6 =(g5||(g7&&(!(_cg7))));
  801028:	d0a77183 	ldbu	r2,-25146(gp)
  80102c:	10803fcc 	andi	r2,r2,255
  801030:	1080201c 	xori	r2,r2,128
  801034:	10bfe004 	addi	r2,r2,-128
  801038:	10000a1e 	bne	r2,zero,801064 <tick+0x53c>
  80103c:	d0a77343 	ldbu	r2,-25139(gp)
  801040:	10803fcc 	andi	r2,r2,255
  801044:	1080201c 	xori	r2,r2,128
  801048:	10bfe004 	addi	r2,r2,-128
  80104c:	10000726 	beq	r2,zero,80106c <tick+0x544>
  801050:	d0a75d83 	ldbu	r2,-25226(gp)
  801054:	10803fcc 	andi	r2,r2,255
  801058:	1080201c 	xori	r2,r2,128
  80105c:	10bfe004 	addi	r2,r2,-128
  801060:	1000021e 	bne	r2,zero,80106c <tick+0x544>
  801064:	00800044 	movi	r2,1
  801068:	00000106 	br	801070 <tick+0x548>
  80106c:	0005883a 	mov	r2,zero
  801070:	d0a78d45 	stb	r2,-25035(gp)
      g11 = g1;
  801074:	d0a763c3 	ldbu	r2,-25201(gp)
  801078:	d0a79345 	stb	r2,-25011(gp)
      g15 =(PRE_g14);
  80107c:	d0a784c3 	ldbu	r2,-25069(gp)
  801080:	d0a77ec5 	stb	r2,-25093(gp)
      g15b = g15;
  801084:	d0a77ec3 	ldbu	r2,-25093(gp)
  801088:	d0a76b85 	stb	r2,-25170(gp)
      _cg15 = _Pacemaker1_local_VRP_ex;
  80108c:	d0a76c03 	ldbu	r2,-25168(gp)
  801090:	d0a76045 	stb	r2,-25215(gp)
      g12 =(g17||(g16&&(!(_cg16)))||g11||(g15b&&_cg15));
  801094:	d0a76783 	ldbu	r2,-25186(gp)
  801098:	10803fcc 	andi	r2,r2,255
  80109c:	1080201c 	xori	r2,r2,128
  8010a0:	10bfe004 	addi	r2,r2,-128
  8010a4:	1000191e 	bne	r2,zero,80110c <tick+0x5e4>
  8010a8:	d0a79143 	ldbu	r2,-25019(gp)
  8010ac:	10803fcc 	andi	r2,r2,255
  8010b0:	1080201c 	xori	r2,r2,128
  8010b4:	10bfe004 	addi	r2,r2,-128
  8010b8:	10000526 	beq	r2,zero,8010d0 <tick+0x5a8>
  8010bc:	d0a773c3 	ldbu	r2,-25137(gp)
  8010c0:	10803fcc 	andi	r2,r2,255
  8010c4:	1080201c 	xori	r2,r2,128
  8010c8:	10bfe004 	addi	r2,r2,-128
  8010cc:	10000f26 	beq	r2,zero,80110c <tick+0x5e4>
  8010d0:	d0a79343 	ldbu	r2,-25011(gp)
  8010d4:	10803fcc 	andi	r2,r2,255
  8010d8:	1080201c 	xori	r2,r2,128
  8010dc:	10bfe004 	addi	r2,r2,-128
  8010e0:	10000a1e 	bne	r2,zero,80110c <tick+0x5e4>
  8010e4:	d0a76b83 	ldbu	r2,-25170(gp)
  8010e8:	10803fcc 	andi	r2,r2,255
  8010ec:	1080201c 	xori	r2,r2,128
  8010f0:	10bfe004 	addi	r2,r2,-128
  8010f4:	10000726 	beq	r2,zero,801114 <tick+0x5ec>
  8010f8:	d0a76043 	ldbu	r2,-25215(gp)
  8010fc:	10803fcc 	andi	r2,r2,255
  801100:	1080201c 	xori	r2,r2,128
  801104:	10bfe004 	addi	r2,r2,-128
  801108:	10000226 	beq	r2,zero,801114 <tick+0x5ec>
  80110c:	00800044 	movi	r2,1
  801110:	00000106 	br	801118 <tick+0x5f0>
  801114:	0005883a 	mov	r2,zero
  801118:	d0a765c5 	stb	r2,-25193(gp)
      g14 =((g15b&&(!(_cg15)))||(g13b&&_cg13));
  80111c:	d0a76b83 	ldbu	r2,-25170(gp)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	10000526 	beq	r2,zero,801144 <tick+0x61c>
  801130:	d0a76043 	ldbu	r2,-25215(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10000a26 	beq	r2,zero,80116c <tick+0x644>
  801144:	d0a79f43 	ldbu	r2,-24963(gp)
  801148:	10803fcc 	andi	r2,r2,255
  80114c:	1080201c 	xori	r2,r2,128
  801150:	10bfe004 	addi	r2,r2,-128
  801154:	10000726 	beq	r2,zero,801174 <tick+0x64c>
  801158:	d0a78f03 	ldbu	r2,-25028(gp)
  80115c:	10803fcc 	andi	r2,r2,255
  801160:	1080201c 	xori	r2,r2,128
  801164:	10bfe004 	addi	r2,r2,-128
  801168:	10000226 	beq	r2,zero,801174 <tick+0x64c>
  80116c:	00800044 	movi	r2,1
  801170:	00000106 	br	801178 <tick+0x650>
  801174:	0005883a 	mov	r2,zero
  801178:	d0a77785 	stb	r2,-25122(gp)
      g19 = g1;
  80117c:	d0a763c3 	ldbu	r2,-25201(gp)
  801180:	d0a75785 	stb	r2,-25250(gp)
      g24 =(PRE_g23);
  801184:	d0a75883 	ldbu	r2,-25246(gp)
  801188:	d0a79c05 	stb	r2,-24976(gp)
      g24b = g24;
  80118c:	d0a79c03 	ldbu	r2,-24976(gp)
  801190:	d0a76d05 	stb	r2,-25164(gp)
      _cg24 = _Pacemaker1_local_FilteredVSense;
  801194:	d0a778c3 	ldbu	r2,-25117(gp)
  801198:	d0a79185 	stb	r2,-25018(gp)
      g26 =(g24b&&(!(_cg24)));
  80119c:	d0a76d03 	ldbu	r2,-25164(gp)
  8011a0:	10803fcc 	andi	r2,r2,255
  8011a4:	1080201c 	xori	r2,r2,128
  8011a8:	10bfe004 	addi	r2,r2,-128
  8011ac:	10000726 	beq	r2,zero,8011cc <tick+0x6a4>
  8011b0:	d0a79183 	ldbu	r2,-25018(gp)
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	1080201c 	xori	r2,r2,128
  8011bc:	10bfe004 	addi	r2,r2,-128
  8011c0:	1000021e 	bne	r2,zero,8011cc <tick+0x6a4>
  8011c4:	00800044 	movi	r2,1
  8011c8:	00000106 	br	8011d0 <tick+0x6a8>
  8011cc:	0005883a 	mov	r2,zero
  8011d0:	d0a79f05 	stb	r2,-24964(gp)
      _cg26 = VPace;
  8011d4:	d0a799c3 	ldbu	r2,-24985(gp)
  8011d8:	d0a76985 	stb	r2,-25178(gp)
      g25 =((g24b&&_cg24)||(g26&&_cg26));
  8011dc:	d0a76d03 	ldbu	r2,-25164(gp)
  8011e0:	10803fcc 	andi	r2,r2,255
  8011e4:	1080201c 	xori	r2,r2,128
  8011e8:	10bfe004 	addi	r2,r2,-128
  8011ec:	10000526 	beq	r2,zero,801204 <tick+0x6dc>
  8011f0:	d0a79183 	ldbu	r2,-25018(gp)
  8011f4:	10803fcc 	andi	r2,r2,255
  8011f8:	1080201c 	xori	r2,r2,128
  8011fc:	10bfe004 	addi	r2,r2,-128
  801200:	10000a1e 	bne	r2,zero,80122c <tick+0x704>
  801204:	d0a79f03 	ldbu	r2,-24964(gp)
  801208:	10803fcc 	andi	r2,r2,255
  80120c:	1080201c 	xori	r2,r2,128
  801210:	10bfe004 	addi	r2,r2,-128
  801214:	10000726 	beq	r2,zero,801234 <tick+0x70c>
  801218:	d0a76983 	ldbu	r2,-25178(gp)
  80121c:	10803fcc 	andi	r2,r2,255
  801220:	1080201c 	xori	r2,r2,128
  801224:	10bfe004 	addi	r2,r2,-128
  801228:	10000226 	beq	r2,zero,801234 <tick+0x70c>
  80122c:	00800044 	movi	r2,1
  801230:	00000106 	br	801238 <tick+0x710>
  801234:	0005883a 	mov	r2,zero
  801238:	d0a792c5 	stb	r2,-25013(gp)
      if(g25){
  80123c:	d0a792c3 	ldbu	r2,-25013(gp)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1080201c 	xori	r2,r2,128
  801248:	10bfe004 	addi	r2,r2,-128
  80124c:	10000226 	beq	r2,zero,801258 <tick+0x730>
         LRI_stop =(LRI_stop||1);
  801250:	00800044 	movi	r2,1
  801254:	d0a76a85 	stb	r2,-25174(gp)
      }
      g21 =(PRE_g20);
  801258:	d0a76303 	ldbu	r2,-25204(gp)
  80125c:	d0a76fc5 	stb	r2,-25153(gp)
      g21b = g21;
  801260:	d0a76fc3 	ldbu	r2,-25153(gp)
  801264:	d0a782c5 	stb	r2,-25077(gp)
      _cg21 = _Pacemaker1_local_FilteredVSense;
  801268:	d0a778c3 	ldbu	r2,-25117(gp)
  80126c:	d0a76dc5 	stb	r2,-25161(gp)
      g29 =(g21b&&(!(_cg21)));
  801270:	d0a782c3 	ldbu	r2,-25077(gp)
  801274:	10803fcc 	andi	r2,r2,255
  801278:	1080201c 	xori	r2,r2,128
  80127c:	10bfe004 	addi	r2,r2,-128
  801280:	10000726 	beq	r2,zero,8012a0 <tick+0x778>
  801284:	d0a76dc3 	ldbu	r2,-25161(gp)
  801288:	10803fcc 	andi	r2,r2,255
  80128c:	1080201c 	xori	r2,r2,128
  801290:	10bfe004 	addi	r2,r2,-128
  801294:	1000021e 	bne	r2,zero,8012a0 <tick+0x778>
  801298:	00800044 	movi	r2,1
  80129c:	00000106 	br	8012a4 <tick+0x77c>
  8012a0:	0005883a 	mov	r2,zero
  8012a4:	d0a79b45 	stb	r2,-24979(gp)
      _cg29 = VPace;
  8012a8:	d0a799c3 	ldbu	r2,-24985(gp)
  8012ac:	d0a77e45 	stb	r2,-25095(gp)
      g27 =(g26&&(!(_cg26)));
  8012b0:	d0a79f03 	ldbu	r2,-24964(gp)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	10000726 	beq	r2,zero,8012e0 <tick+0x7b8>
  8012c4:	d0a76983 	ldbu	r2,-25178(gp)
  8012c8:	10803fcc 	andi	r2,r2,255
  8012cc:	1080201c 	xori	r2,r2,128
  8012d0:	10bfe004 	addi	r2,r2,-128
  8012d4:	1000021e 	bne	r2,zero,8012e0 <tick+0x7b8>
  8012d8:	00800044 	movi	r2,1
  8012dc:	00000106 	br	8012e4 <tick+0x7bc>
  8012e0:	0005883a 	mov	r2,zero
  8012e4:	d0a75985 	stb	r2,-25242(gp)
      _cg27 = LRITO;
  8012e8:	d0a75d43 	ldbu	r2,-25227(gp)
  8012ec:	d0a79e45 	stb	r2,-24967(gp)
      g28 =(g27&&_cg27);
  8012f0:	d0a75983 	ldbu	r2,-25242(gp)
  8012f4:	10803fcc 	andi	r2,r2,255
  8012f8:	1080201c 	xori	r2,r2,128
  8012fc:	10bfe004 	addi	r2,r2,-128
  801300:	10000726 	beq	r2,zero,801320 <tick+0x7f8>
  801304:	d0a79e43 	ldbu	r2,-24967(gp)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1080201c 	xori	r2,r2,128
  801310:	10bfe004 	addi	r2,r2,-128
  801314:	10000226 	beq	r2,zero,801320 <tick+0x7f8>
  801318:	00800044 	movi	r2,1
  80131c:	00000106 	br	801324 <tick+0x7fc>
  801320:	0005883a 	mov	r2,zero
  801324:	d0a79445 	stb	r2,-25007(gp)
      if(g28){
  801328:	d0a79443 	ldbu	r2,-25007(gp)
  80132c:	10803fcc 	andi	r2,r2,255
  801330:	1080201c 	xori	r2,r2,128
  801334:	10bfe004 	addi	r2,r2,-128
  801338:	10000226 	beq	r2,zero,801344 <tick+0x81c>
         _Pacemaker1_local_LRI_ex =(_Pacemaker1_local_LRI_ex||1);
  80133c:	00800044 	movi	r2,1
  801340:	d0a77d85 	stb	r2,-25098(gp)
      }
      g20 =(g25||(g29&&(!(_cg29)))||g28||g19);
  801344:	d0a792c3 	ldbu	r2,-25013(gp)
  801348:	10803fcc 	andi	r2,r2,255
  80134c:	1080201c 	xori	r2,r2,128
  801350:	10bfe004 	addi	r2,r2,-128
  801354:	1000141e 	bne	r2,zero,8013a8 <tick+0x880>
  801358:	d0a79b43 	ldbu	r2,-24979(gp)
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	1080201c 	xori	r2,r2,128
  801364:	10bfe004 	addi	r2,r2,-128
  801368:	10000526 	beq	r2,zero,801380 <tick+0x858>
  80136c:	d0a77e43 	ldbu	r2,-25095(gp)
  801370:	10803fcc 	andi	r2,r2,255
  801374:	1080201c 	xori	r2,r2,128
  801378:	10bfe004 	addi	r2,r2,-128
  80137c:	10000a26 	beq	r2,zero,8013a8 <tick+0x880>
  801380:	d0a79443 	ldbu	r2,-25007(gp)
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1080201c 	xori	r2,r2,128
  80138c:	10bfe004 	addi	r2,r2,-128
  801390:	1000051e 	bne	r2,zero,8013a8 <tick+0x880>
  801394:	d0a75783 	ldbu	r2,-25250(gp)
  801398:	10803fcc 	andi	r2,r2,255
  80139c:	1080201c 	xori	r2,r2,128
  8013a0:	10bfe004 	addi	r2,r2,-128
  8013a4:	10000226 	beq	r2,zero,8013b0 <tick+0x888>
  8013a8:	00800044 	movi	r2,1
  8013ac:	00000106 	br	8013b4 <tick+0x88c>
  8013b0:	0005883a 	mov	r2,zero
  8013b4:	d0a78145 	stb	r2,-25083(gp)
      g22 =((g29&&_cg29)||(g21b&&_cg21));
  8013b8:	d0a79b43 	ldbu	r2,-24979(gp)
  8013bc:	10803fcc 	andi	r2,r2,255
  8013c0:	1080201c 	xori	r2,r2,128
  8013c4:	10bfe004 	addi	r2,r2,-128
  8013c8:	10000526 	beq	r2,zero,8013e0 <tick+0x8b8>
  8013cc:	d0a77e43 	ldbu	r2,-25095(gp)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	10000a1e 	bne	r2,zero,801408 <tick+0x8e0>
  8013e0:	d0a782c3 	ldbu	r2,-25077(gp)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1080201c 	xori	r2,r2,128
  8013ec:	10bfe004 	addi	r2,r2,-128
  8013f0:	10000726 	beq	r2,zero,801410 <tick+0x8e8>
  8013f4:	d0a76dc3 	ldbu	r2,-25161(gp)
  8013f8:	10803fcc 	andi	r2,r2,255
  8013fc:	1080201c 	xori	r2,r2,128
  801400:	10bfe004 	addi	r2,r2,-128
  801404:	10000226 	beq	r2,zero,801410 <tick+0x8e8>
  801408:	00800044 	movi	r2,1
  80140c:	00000106 	br	801414 <tick+0x8ec>
  801410:	0005883a 	mov	r2,zero
  801414:	d0a793c5 	stb	r2,-25009(gp)
      if(g22){
  801418:	d0a793c3 	ldbu	r2,-25009(gp)
  80141c:	10803fcc 	andi	r2,r2,255
  801420:	1080201c 	xori	r2,r2,128
  801424:	10bfe004 	addi	r2,r2,-128
  801428:	10000226 	beq	r2,zero,801434 <tick+0x90c>
         LRI_start =(LRI_start||1);
  80142c:	00800044 	movi	r2,1
  801430:	d0a77f85 	stb	r2,-25090(gp)
      }
      g23 =(g22||(g27&&(!(_cg27))));
  801434:	d0a793c3 	ldbu	r2,-25009(gp)
  801438:	10803fcc 	andi	r2,r2,255
  80143c:	1080201c 	xori	r2,r2,128
  801440:	10bfe004 	addi	r2,r2,-128
  801444:	10000a1e 	bne	r2,zero,801470 <tick+0x948>
  801448:	d0a75983 	ldbu	r2,-25242(gp)
  80144c:	10803fcc 	andi	r2,r2,255
  801450:	1080201c 	xori	r2,r2,128
  801454:	10bfe004 	addi	r2,r2,-128
  801458:	10000726 	beq	r2,zero,801478 <tick+0x950>
  80145c:	d0a79e43 	ldbu	r2,-24967(gp)
  801460:	10803fcc 	andi	r2,r2,255
  801464:	1080201c 	xori	r2,r2,128
  801468:	10bfe004 	addi	r2,r2,-128
  80146c:	1000021e 	bne	r2,zero,801478 <tick+0x950>
  801470:	00800044 	movi	r2,1
  801474:	00000106 	br	80147c <tick+0x954>
  801478:	0005883a 	mov	r2,zero
  80147c:	d0a775c5 	stb	r2,-25129(gp)
      g31 = g1;
  801480:	d0a763c3 	ldbu	r2,-25201(gp)
  801484:	d0a76845 	stb	r2,-25183(gp)
      g33 =(PRE_g32);
  801488:	d0a76103 	ldbu	r2,-25212(gp)
  80148c:	d0a77b85 	stb	r2,-25106(gp)
      g33b = g33;
  801490:	d0a77b83 	ldbu	r2,-25106(gp)
  801494:	d0a75a45 	stb	r2,-25239(gp)
      _cg33 = LRI_start;
  801498:	d0a77f83 	ldbu	r2,-25090(gp)
  80149c:	d0a76585 	stb	r2,-25194(gp)
      g32 =(g31||(g33b&&(!(_cg33)))||g37||(g35b&&_cg35));
  8014a0:	d0a76843 	ldbu	r2,-25183(gp)
  8014a4:	10803fcc 	andi	r2,r2,255
  8014a8:	1080201c 	xori	r2,r2,128
  8014ac:	10bfe004 	addi	r2,r2,-128
  8014b0:	1000191e 	bne	r2,zero,801518 <tick+0x9f0>
  8014b4:	d0a75a43 	ldbu	r2,-25239(gp)
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1080201c 	xori	r2,r2,128
  8014c0:	10bfe004 	addi	r2,r2,-128
  8014c4:	10000526 	beq	r2,zero,8014dc <tick+0x9b4>
  8014c8:	d0a76583 	ldbu	r2,-25194(gp)
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1080201c 	xori	r2,r2,128
  8014d4:	10bfe004 	addi	r2,r2,-128
  8014d8:	10000f26 	beq	r2,zero,801518 <tick+0x9f0>
  8014dc:	d0a76883 	ldbu	r2,-25182(gp)
  8014e0:	10803fcc 	andi	r2,r2,255
  8014e4:	1080201c 	xori	r2,r2,128
  8014e8:	10bfe004 	addi	r2,r2,-128
  8014ec:	10000a1e 	bne	r2,zero,801518 <tick+0x9f0>
  8014f0:	d0a77d43 	ldbu	r2,-25099(gp)
  8014f4:	10803fcc 	andi	r2,r2,255
  8014f8:	1080201c 	xori	r2,r2,128
  8014fc:	10bfe004 	addi	r2,r2,-128
  801500:	10000726 	beq	r2,zero,801520 <tick+0x9f8>
  801504:	d0a76703 	ldbu	r2,-25188(gp)
  801508:	10803fcc 	andi	r2,r2,255
  80150c:	1080201c 	xori	r2,r2,128
  801510:	10bfe004 	addi	r2,r2,-128
  801514:	10000226 	beq	r2,zero,801520 <tick+0x9f8>
  801518:	00800044 	movi	r2,1
  80151c:	00000106 	br	801524 <tick+0x9fc>
  801520:	0005883a 	mov	r2,zero
  801524:	d0a795c5 	stb	r2,-25001(gp)
      g34 =((g33b&&_cg33)||(g36&&(!(_cg36))));
  801528:	d0a75a43 	ldbu	r2,-25239(gp)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	10000526 	beq	r2,zero,801550 <tick+0xa28>
  80153c:	d0a76583 	ldbu	r2,-25194(gp)
  801540:	10803fcc 	andi	r2,r2,255
  801544:	1080201c 	xori	r2,r2,128
  801548:	10bfe004 	addi	r2,r2,-128
  80154c:	10000a1e 	bne	r2,zero,801578 <tick+0xa50>
  801550:	d0a78543 	ldbu	r2,-25067(gp)
  801554:	10803fcc 	andi	r2,r2,255
  801558:	1080201c 	xori	r2,r2,128
  80155c:	10bfe004 	addi	r2,r2,-128
  801560:	10000726 	beq	r2,zero,801580 <tick+0xa58>
  801564:	d0a79dc3 	ldbu	r2,-24969(gp)
  801568:	10803fcc 	andi	r2,r2,255
  80156c:	1080201c 	xori	r2,r2,128
  801570:	10bfe004 	addi	r2,r2,-128
  801574:	1000021e 	bne	r2,zero,801580 <tick+0xa58>
  801578:	00800044 	movi	r2,1
  80157c:	00000106 	br	801584 <tick+0xa5c>
  801580:	0005883a 	mov	r2,zero
  801584:	d0a77105 	stb	r2,-25148(gp)
      g39 = g1;
  801588:	d0a763c3 	ldbu	r2,-25201(gp)
  80158c:	d0a79a05 	stb	r2,-24984(gp)
      g44 =(PRE_g43);
  801590:	d0a783c3 	ldbu	r2,-25073(gp)
  801594:	d0a76185 	stb	r2,-25210(gp)
      _cg44 = AVITO;
  801598:	d0a78183 	ldbu	r2,-25082(gp)
  80159c:	d0a77685 	stb	r2,-25126(gp)
      g46 =(g44&&(!(_cg44)));
  8015a0:	d0a76183 	ldbu	r2,-25210(gp)
  8015a4:	10803fcc 	andi	r2,r2,255
  8015a8:	1080201c 	xori	r2,r2,128
  8015ac:	10bfe004 	addi	r2,r2,-128
  8015b0:	10000726 	beq	r2,zero,8015d0 <tick+0xaa8>
  8015b4:	d0a77683 	ldbu	r2,-25126(gp)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	1000021e 	bne	r2,zero,8015d0 <tick+0xaa8>
  8015c8:	00800044 	movi	r2,1
  8015cc:	00000106 	br	8015d4 <tick+0xaac>
  8015d0:	0005883a 	mov	r2,zero
  8015d4:	d0a785c5 	stb	r2,-25065(gp)
      _cg46 = _Pacemaker1_local_FilteredVSense;
  8015d8:	d0a778c3 	ldbu	r2,-25117(gp)
  8015dc:	d0a766c5 	stb	r2,-25189(gp)
      g48 =(g46&&(!(_cg46)));
  8015e0:	d0a785c3 	ldbu	r2,-25065(gp)
  8015e4:	10803fcc 	andi	r2,r2,255
  8015e8:	1080201c 	xori	r2,r2,128
  8015ec:	10bfe004 	addi	r2,r2,-128
  8015f0:	10000726 	beq	r2,zero,801610 <tick+0xae8>
  8015f4:	d0a766c3 	ldbu	r2,-25189(gp)
  8015f8:	10803fcc 	andi	r2,r2,255
  8015fc:	1080201c 	xori	r2,r2,128
  801600:	10bfe004 	addi	r2,r2,-128
  801604:	1000021e 	bne	r2,zero,801610 <tick+0xae8>
  801608:	00800044 	movi	r2,1
  80160c:	00000106 	br	801614 <tick+0xaec>
  801610:	0005883a 	mov	r2,zero
  801614:	d0a76bc5 	stb	r2,-25169(gp)
      _cg48 = VPace;
  801618:	d0a799c3 	ldbu	r2,-24985(gp)
  80161c:	d0a776c5 	stb	r2,-25125(gp)
      g47 =((g46&&_cg46)||(g48&&_cg48));
  801620:	d0a785c3 	ldbu	r2,-25065(gp)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	10000526 	beq	r2,zero,801648 <tick+0xb20>
  801634:	d0a766c3 	ldbu	r2,-25189(gp)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000a1e 	bne	r2,zero,801670 <tick+0xb48>
  801648:	d0a76bc3 	ldbu	r2,-25169(gp)
  80164c:	10803fcc 	andi	r2,r2,255
  801650:	1080201c 	xori	r2,r2,128
  801654:	10bfe004 	addi	r2,r2,-128
  801658:	10000726 	beq	r2,zero,801678 <tick+0xb50>
  80165c:	d0a776c3 	ldbu	r2,-25125(gp)
  801660:	10803fcc 	andi	r2,r2,255
  801664:	1080201c 	xori	r2,r2,128
  801668:	10bfe004 	addi	r2,r2,-128
  80166c:	10000226 	beq	r2,zero,801678 <tick+0xb50>
  801670:	00800044 	movi	r2,1
  801674:	00000106 	br	80167c <tick+0xb54>
  801678:	0005883a 	mov	r2,zero
  80167c:	d0a75b85 	stb	r2,-25234(gp)
      if(g47){
  801680:	d0a75b83 	ldbu	r2,-25234(gp)
  801684:	10803fcc 	andi	r2,r2,255
  801688:	1080201c 	xori	r2,r2,128
  80168c:	10bfe004 	addi	r2,r2,-128
  801690:	10000226 	beq	r2,zero,80169c <tick+0xb74>
         AVI_stop =(AVI_stop||1);
  801694:	00800044 	movi	r2,1
  801698:	d0a76345 	stb	r2,-25203(gp)
      }
      g45 =(g44&&_cg44);
  80169c:	d0a76183 	ldbu	r2,-25210(gp)
  8016a0:	10803fcc 	andi	r2,r2,255
  8016a4:	1080201c 	xori	r2,r2,128
  8016a8:	10bfe004 	addi	r2,r2,-128
  8016ac:	10000726 	beq	r2,zero,8016cc <tick+0xba4>
  8016b0:	d0a77683 	ldbu	r2,-25126(gp)
  8016b4:	10803fcc 	andi	r2,r2,255
  8016b8:	1080201c 	xori	r2,r2,128
  8016bc:	10bfe004 	addi	r2,r2,-128
  8016c0:	10000226 	beq	r2,zero,8016cc <tick+0xba4>
  8016c4:	00800044 	movi	r2,1
  8016c8:	00000106 	br	8016d0 <tick+0xba8>
  8016cc:	0005883a 	mov	r2,zero
  8016d0:	d0a796c5 	stb	r2,-24997(gp)
      if(g45){
  8016d4:	d0a796c3 	ldbu	r2,-24997(gp)
  8016d8:	10803fcc 	andi	r2,r2,255
  8016dc:	1080201c 	xori	r2,r2,128
  8016e0:	10bfe004 	addi	r2,r2,-128
  8016e4:	10000226 	beq	r2,zero,8016f0 <tick+0xbc8>
         _Pacemaker1_local_AVI_ex =(_Pacemaker1_local_AVI_ex||1);
  8016e8:	00800044 	movi	r2,1
  8016ec:	d0a78405 	stb	r2,-25072(gp)
      }
      g94 =(PRE_g93);
  8016f0:	d0a79303 	ldbu	r2,-25012(gp)
  8016f4:	d0a771c5 	stb	r2,-25145(gp)
      g94b = g94;
  8016f8:	d0a771c3 	ldbu	r2,-25145(gp)
  8016fc:	d0a75d05 	stb	r2,-25228(gp)
      _cg94 = _pre_AEI_stop15;
  801700:	d0a78703 	ldbu	r2,-25060(gp)
  801704:	d0a79205 	stb	r2,-25016(gp)
      g95 =(g94b&&(!(_cg94)));
  801708:	d0a75d03 	ldbu	r2,-25228(gp)
  80170c:	10803fcc 	andi	r2,r2,255
  801710:	1080201c 	xori	r2,r2,128
  801714:	10bfe004 	addi	r2,r2,-128
  801718:	10000726 	beq	r2,zero,801738 <tick+0xc10>
  80171c:	d0a79203 	ldbu	r2,-25016(gp)
  801720:	10803fcc 	andi	r2,r2,255
  801724:	1080201c 	xori	r2,r2,128
  801728:	10bfe004 	addi	r2,r2,-128
  80172c:	1000021e 	bne	r2,zero,801738 <tick+0xc10>
  801730:	00800044 	movi	r2,1
  801734:	00000106 	br	80173c <tick+0xc14>
  801738:	0005883a 	mov	r2,zero
  80173c:	d0a78685 	stb	r2,-25062(gp)
      _cg95 = _Pacemaker1_local__pre_AEI_ex14;
  801740:	d0a78a03 	ldbu	r2,-25048(gp)
  801744:	d0a76c85 	stb	r2,-25166(gp)
      g96 =(g95&&_cg95);
  801748:	d0a78683 	ldbu	r2,-25062(gp)
  80174c:	10803fcc 	andi	r2,r2,255
  801750:	1080201c 	xori	r2,r2,128
  801754:	10bfe004 	addi	r2,r2,-128
  801758:	10000726 	beq	r2,zero,801778 <tick+0xc50>
  80175c:	d0a76c83 	ldbu	r2,-25166(gp)
  801760:	10803fcc 	andi	r2,r2,255
  801764:	1080201c 	xori	r2,r2,128
  801768:	10bfe004 	addi	r2,r2,-128
  80176c:	10000226 	beq	r2,zero,801778 <tick+0xc50>
  801770:	00800044 	movi	r2,1
  801774:	00000106 	br	80177c <tick+0xc54>
  801778:	0005883a 	mov	r2,zero
  80177c:	d0a78745 	stb	r2,-25059(gp)
      if(g96){
  801780:	d0a78743 	ldbu	r2,-25059(gp)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1080201c 	xori	r2,r2,128
  80178c:	10bfe004 	addi	r2,r2,-128
  801790:	10000226 	beq	r2,zero,80179c <tick+0xc74>
         APace =(APace||1);
  801794:	00800044 	movi	r2,1
  801798:	d0a756c5 	stb	r2,-25253(gp)
      }
      g63 =(PRE_g62);
  80179c:	d0a78503 	ldbu	r2,-25068(gp)
  8017a0:	d0a78105 	stb	r2,-25084(gp)
      g63b = g63;
  8017a4:	d0a78103 	ldbu	r2,-25084(gp)
  8017a8:	d0a79645 	stb	r2,-24999(gp)
      _cg63 = _Pacemaker1_local_FilteredVSense;
  8017ac:	d0a778c3 	ldbu	r2,-25117(gp)
  8017b0:	d0a76f45 	stb	r2,-25155(gp)
      g68 =(g63b&&(!(_cg63)));
  8017b4:	d0a79643 	ldbu	r2,-24999(gp)
  8017b8:	10803fcc 	andi	r2,r2,255
  8017bc:	1080201c 	xori	r2,r2,128
  8017c0:	10bfe004 	addi	r2,r2,-128
  8017c4:	10000726 	beq	r2,zero,8017e4 <tick+0xcbc>
  8017c8:	d0a76f43 	ldbu	r2,-25155(gp)
  8017cc:	10803fcc 	andi	r2,r2,255
  8017d0:	1080201c 	xori	r2,r2,128
  8017d4:	10bfe004 	addi	r2,r2,-128
  8017d8:	1000021e 	bne	r2,zero,8017e4 <tick+0xcbc>
  8017dc:	00800044 	movi	r2,1
  8017e0:	00000106 	br	8017e8 <tick+0xcc0>
  8017e4:	0005883a 	mov	r2,zero
  8017e8:	d0a79285 	stb	r2,-25014(gp)
      _cg68 = VPace;
  8017ec:	d0a799c3 	ldbu	r2,-24985(gp)
  8017f0:	d0a77085 	stb	r2,-25150(gp)
      g64 =((g63b&&_cg63)||(g68&&_cg68));
  8017f4:	d0a79643 	ldbu	r2,-24999(gp)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080201c 	xori	r2,r2,128
  801800:	10bfe004 	addi	r2,r2,-128
  801804:	10000526 	beq	r2,zero,80181c <tick+0xcf4>
  801808:	d0a76f43 	ldbu	r2,-25155(gp)
  80180c:	10803fcc 	andi	r2,r2,255
  801810:	1080201c 	xori	r2,r2,128
  801814:	10bfe004 	addi	r2,r2,-128
  801818:	10000a1e 	bne	r2,zero,801844 <tick+0xd1c>
  80181c:	d0a79283 	ldbu	r2,-25014(gp)
  801820:	10803fcc 	andi	r2,r2,255
  801824:	1080201c 	xori	r2,r2,128
  801828:	10bfe004 	addi	r2,r2,-128
  80182c:	10000726 	beq	r2,zero,80184c <tick+0xd24>
  801830:	d0a77083 	ldbu	r2,-25150(gp)
  801834:	10803fcc 	andi	r2,r2,255
  801838:	1080201c 	xori	r2,r2,128
  80183c:	10bfe004 	addi	r2,r2,-128
  801840:	10000226 	beq	r2,zero,80184c <tick+0xd24>
  801844:	00800044 	movi	r2,1
  801848:	00000106 	br	801850 <tick+0xd28>
  80184c:	0005883a 	mov	r2,zero
  801850:	d0a76f85 	stb	r2,-25154(gp)
      if(g64){
  801854:	d0a76f83 	ldbu	r2,-25154(gp)
  801858:	10803fcc 	andi	r2,r2,255
  80185c:	1080201c 	xori	r2,r2,128
  801860:	10bfe004 	addi	r2,r2,-128
  801864:	10000226 	beq	r2,zero,801870 <tick+0xd48>
         PVARP_start =(PVARP_start||1);
  801868:	00800044 	movi	r2,1
  80186c:	d0a78605 	stb	r2,-25064(gp)
      }
      g72 =(PRE_g71);
  801870:	d0a77743 	ldbu	r2,-25123(gp)
  801874:	d0a78dc5 	stb	r2,-25033(gp)
      g72b = g72;
  801878:	d0a78dc3 	ldbu	r2,-25033(gp)
  80187c:	d0a79085 	stb	r2,-25022(gp)
      _cg72 = PVARP_start;
  801880:	d0a78603 	ldbu	r2,-25064(gp)
  801884:	d0a79f85 	stb	r2,-24962(gp)
      g75 =(g72b&&(!(_cg72)));
  801888:	d0a79083 	ldbu	r2,-25022(gp)
  80188c:	10803fcc 	andi	r2,r2,255
  801890:	1080201c 	xori	r2,r2,128
  801894:	10bfe004 	addi	r2,r2,-128
  801898:	10000726 	beq	r2,zero,8018b8 <tick+0xd90>
  80189c:	d0a79f83 	ldbu	r2,-24962(gp)
  8018a0:	10803fcc 	andi	r2,r2,255
  8018a4:	1080201c 	xori	r2,r2,128
  8018a8:	10bfe004 	addi	r2,r2,-128
  8018ac:	1000021e 	bne	r2,zero,8018b8 <tick+0xd90>
  8018b0:	00800044 	movi	r2,1
  8018b4:	00000106 	br	8018bc <tick+0xd94>
  8018b8:	0005883a 	mov	r2,zero
  8018bc:	d0a79005 	stb	r2,-25024(gp)
      _cg75 = ASense;
  8018c0:	d0a76b43 	ldbu	r2,-25171(gp)
  8018c4:	d0a76245 	stb	r2,-25207(gp)
      g76 =(g75&&_cg75);
  8018c8:	d0a79003 	ldbu	r2,-25024(gp)
  8018cc:	10803fcc 	andi	r2,r2,255
  8018d0:	1080201c 	xori	r2,r2,128
  8018d4:	10bfe004 	addi	r2,r2,-128
  8018d8:	10000726 	beq	r2,zero,8018f8 <tick+0xdd0>
  8018dc:	d0a76243 	ldbu	r2,-25207(gp)
  8018e0:	10803fcc 	andi	r2,r2,255
  8018e4:	1080201c 	xori	r2,r2,128
  8018e8:	10bfe004 	addi	r2,r2,-128
  8018ec:	10000226 	beq	r2,zero,8018f8 <tick+0xdd0>
  8018f0:	00800044 	movi	r2,1
  8018f4:	00000106 	br	8018fc <tick+0xdd4>
  8018f8:	0005883a 	mov	r2,zero
  8018fc:	d0a76805 	stb	r2,-25184(gp)
      if(g76){
  801900:	d0a76803 	ldbu	r2,-25184(gp)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	10000226 	beq	r2,zero,80191c <tick+0xdf4>
         _Pacemaker1_local_FilteredASense =(_Pacemaker1_local_FilteredASense||1);
  801914:	00800044 	movi	r2,1
  801918:	d0a77dc5 	stb	r2,-25097(gp)
      }
      g41 =(PRE_g40);
  80191c:	d0a76a03 	ldbu	r2,-25176(gp)
  801920:	d0a76945 	stb	r2,-25179(gp)
      g41b = g41;
  801924:	d0a76943 	ldbu	r2,-25179(gp)
  801928:	d0a78305 	stb	r2,-25076(gp)
      _cg41 = _Pacemaker1_local_FilteredASense;
  80192c:	d0a77dc3 	ldbu	r2,-25097(gp)
  801930:	d0a78905 	stb	r2,-25052(gp)
      g49 =(g41b&&(!(_cg41)));
  801934:	d0a78303 	ldbu	r2,-25076(gp)
  801938:	10803fcc 	andi	r2,r2,255
  80193c:	1080201c 	xori	r2,r2,128
  801940:	10bfe004 	addi	r2,r2,-128
  801944:	10000726 	beq	r2,zero,801964 <tick+0xe3c>
  801948:	d0a78903 	ldbu	r2,-25052(gp)
  80194c:	10803fcc 	andi	r2,r2,255
  801950:	1080201c 	xori	r2,r2,128
  801954:	10bfe004 	addi	r2,r2,-128
  801958:	1000021e 	bne	r2,zero,801964 <tick+0xe3c>
  80195c:	00800044 	movi	r2,1
  801960:	00000106 	br	801968 <tick+0xe40>
  801964:	0005883a 	mov	r2,zero
  801968:	d0a77285 	stb	r2,-25142(gp)
      _cg49 = APace;
  80196c:	d0a756c3 	ldbu	r2,-25253(gp)
  801970:	d0a79a85 	stb	r2,-24982(gp)
      g40 =(g47||g39||g45||(g49&&(!(_cg49))));
  801974:	d0a75b83 	ldbu	r2,-25234(gp)
  801978:	10803fcc 	andi	r2,r2,255
  80197c:	1080201c 	xori	r2,r2,128
  801980:	10bfe004 	addi	r2,r2,-128
  801984:	1000141e 	bne	r2,zero,8019d8 <tick+0xeb0>
  801988:	d0a79a03 	ldbu	r2,-24984(gp)
  80198c:	10803fcc 	andi	r2,r2,255
  801990:	1080201c 	xori	r2,r2,128
  801994:	10bfe004 	addi	r2,r2,-128
  801998:	10000f1e 	bne	r2,zero,8019d8 <tick+0xeb0>
  80199c:	d0a796c3 	ldbu	r2,-24997(gp)
  8019a0:	10803fcc 	andi	r2,r2,255
  8019a4:	1080201c 	xori	r2,r2,128
  8019a8:	10bfe004 	addi	r2,r2,-128
  8019ac:	10000a1e 	bne	r2,zero,8019d8 <tick+0xeb0>
  8019b0:	d0a77283 	ldbu	r2,-25142(gp)
  8019b4:	10803fcc 	andi	r2,r2,255
  8019b8:	1080201c 	xori	r2,r2,128
  8019bc:	10bfe004 	addi	r2,r2,-128
  8019c0:	10000726 	beq	r2,zero,8019e0 <tick+0xeb8>
  8019c4:	d0a79a83 	ldbu	r2,-24982(gp)
  8019c8:	10803fcc 	andi	r2,r2,255
  8019cc:	1080201c 	xori	r2,r2,128
  8019d0:	10bfe004 	addi	r2,r2,-128
  8019d4:	1000021e 	bne	r2,zero,8019e0 <tick+0xeb8>
  8019d8:	00800044 	movi	r2,1
  8019dc:	00000106 	br	8019e4 <tick+0xebc>
  8019e0:	0005883a 	mov	r2,zero
  8019e4:	d0a75645 	stb	r2,-25255(gp)
      g42 =((g41b&&_cg41)||(g49&&_cg49));
  8019e8:	d0a78303 	ldbu	r2,-25076(gp)
  8019ec:	10803fcc 	andi	r2,r2,255
  8019f0:	1080201c 	xori	r2,r2,128
  8019f4:	10bfe004 	addi	r2,r2,-128
  8019f8:	10000526 	beq	r2,zero,801a10 <tick+0xee8>
  8019fc:	d0a78903 	ldbu	r2,-25052(gp)
  801a00:	10803fcc 	andi	r2,r2,255
  801a04:	1080201c 	xori	r2,r2,128
  801a08:	10bfe004 	addi	r2,r2,-128
  801a0c:	10000a1e 	bne	r2,zero,801a38 <tick+0xf10>
  801a10:	d0a77283 	ldbu	r2,-25142(gp)
  801a14:	10803fcc 	andi	r2,r2,255
  801a18:	1080201c 	xori	r2,r2,128
  801a1c:	10bfe004 	addi	r2,r2,-128
  801a20:	10000726 	beq	r2,zero,801a40 <tick+0xf18>
  801a24:	d0a79a83 	ldbu	r2,-24982(gp)
  801a28:	10803fcc 	andi	r2,r2,255
  801a2c:	1080201c 	xori	r2,r2,128
  801a30:	10bfe004 	addi	r2,r2,-128
  801a34:	10000226 	beq	r2,zero,801a40 <tick+0xf18>
  801a38:	00800044 	movi	r2,1
  801a3c:	00000106 	br	801a44 <tick+0xf1c>
  801a40:	0005883a 	mov	r2,zero
  801a44:	d0a75c05 	stb	r2,-25232(gp)
      if(g42){
  801a48:	d0a75c03 	ldbu	r2,-25232(gp)
  801a4c:	10803fcc 	andi	r2,r2,255
  801a50:	1080201c 	xori	r2,r2,128
  801a54:	10bfe004 	addi	r2,r2,-128
  801a58:	10000226 	beq	r2,zero,801a64 <tick+0xf3c>
         AVI_start =(AVI_start||1);
  801a5c:	00800044 	movi	r2,1
  801a60:	d0a76005 	stb	r2,-25216(gp)
      }
      g43 =(g42||(g48&&(!(_cg48))));
  801a64:	d0a75c03 	ldbu	r2,-25232(gp)
  801a68:	10803fcc 	andi	r2,r2,255
  801a6c:	1080201c 	xori	r2,r2,128
  801a70:	10bfe004 	addi	r2,r2,-128
  801a74:	10000a1e 	bne	r2,zero,801aa0 <tick+0xf78>
  801a78:	d0a76bc3 	ldbu	r2,-25169(gp)
  801a7c:	10803fcc 	andi	r2,r2,255
  801a80:	1080201c 	xori	r2,r2,128
  801a84:	10bfe004 	addi	r2,r2,-128
  801a88:	10000726 	beq	r2,zero,801aa8 <tick+0xf80>
  801a8c:	d0a776c3 	ldbu	r2,-25125(gp)
  801a90:	10803fcc 	andi	r2,r2,255
  801a94:	1080201c 	xori	r2,r2,128
  801a98:	10bfe004 	addi	r2,r2,-128
  801a9c:	1000021e 	bne	r2,zero,801aa8 <tick+0xf80>
  801aa0:	00800044 	movi	r2,1
  801aa4:	00000106 	br	801aac <tick+0xf84>
  801aa8:	0005883a 	mov	r2,zero
  801aac:	d0a78385 	stb	r2,-25074(gp)
      g51 = g1;
  801ab0:	d0a763c3 	ldbu	r2,-25201(gp)
  801ab4:	d0a78785 	stb	r2,-25058(gp)
      g53 =(PRE_g52);
  801ab8:	d0a77a03 	ldbu	r2,-25112(gp)
  801abc:	d0a78ac5 	stb	r2,-25045(gp)
      g53b = g53;
  801ac0:	d0a78ac3 	ldbu	r2,-25045(gp)
  801ac4:	d0a78445 	stb	r2,-25071(gp)
      _cg53 = AVI_start;
  801ac8:	d0a76003 	ldbu	r2,-25216(gp)
  801acc:	d0a77385 	stb	r2,-25138(gp)
      g55 =(PRE_g54);
  801ad0:	d0a78043 	ldbu	r2,-25087(gp)
  801ad4:	d0a75905 	stb	r2,-25244(gp)
      g55b = g55;
  801ad8:	d0a75903 	ldbu	r2,-25244(gp)
  801adc:	d0a75b45 	stb	r2,-25235(gp)
      _cg55 = _Pacemaker1_local_AVI_ex;
  801ae0:	d0a78403 	ldbu	r2,-25072(gp)
  801ae4:	d0a797c5 	stb	r2,-24993(gp)
      g59 =(g55b&&(!(_cg55)));
  801ae8:	d0a75b43 	ldbu	r2,-25235(gp)
  801aec:	10803fcc 	andi	r2,r2,255
  801af0:	1080201c 	xori	r2,r2,128
  801af4:	10bfe004 	addi	r2,r2,-128
  801af8:	10000726 	beq	r2,zero,801b18 <tick+0xff0>
  801afc:	d0a797c3 	ldbu	r2,-24993(gp)
  801b00:	10803fcc 	andi	r2,r2,255
  801b04:	1080201c 	xori	r2,r2,128
  801b08:	10bfe004 	addi	r2,r2,-128
  801b0c:	1000021e 	bne	r2,zero,801b18 <tick+0xff0>
  801b10:	00800044 	movi	r2,1
  801b14:	00000106 	br	801b1c <tick+0xff4>
  801b18:	0005883a 	mov	r2,zero
  801b1c:	d0a774c5 	stb	r2,-25133(gp)
      _cg59 = AVI_stop;
  801b20:	d0a76343 	ldbu	r2,-25203(gp)
  801b24:	d0a75945 	stb	r2,-25243(gp)
      g52 =(g51||g58||(g53b&&(!(_cg53)))||(g59&&_cg59));
  801b28:	d0a78783 	ldbu	r2,-25058(gp)
  801b2c:	10803fcc 	andi	r2,r2,255
  801b30:	1080201c 	xori	r2,r2,128
  801b34:	10bfe004 	addi	r2,r2,-128
  801b38:	1000191e 	bne	r2,zero,801ba0 <tick+0x1078>
  801b3c:	d0a791c3 	ldbu	r2,-25017(gp)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	1000141e 	bne	r2,zero,801ba0 <tick+0x1078>
  801b50:	d0a78443 	ldbu	r2,-25071(gp)
  801b54:	10803fcc 	andi	r2,r2,255
  801b58:	1080201c 	xori	r2,r2,128
  801b5c:	10bfe004 	addi	r2,r2,-128
  801b60:	10000526 	beq	r2,zero,801b78 <tick+0x1050>
  801b64:	d0a77383 	ldbu	r2,-25138(gp)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	10000a26 	beq	r2,zero,801ba0 <tick+0x1078>
  801b78:	d0a774c3 	ldbu	r2,-25133(gp)
  801b7c:	10803fcc 	andi	r2,r2,255
  801b80:	1080201c 	xori	r2,r2,128
  801b84:	10bfe004 	addi	r2,r2,-128
  801b88:	10000726 	beq	r2,zero,801ba8 <tick+0x1080>
  801b8c:	d0a75943 	ldbu	r2,-25243(gp)
  801b90:	10803fcc 	andi	r2,r2,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	10000226 	beq	r2,zero,801ba8 <tick+0x1080>
  801ba0:	00800044 	movi	r2,1
  801ba4:	00000106 	br	801bac <tick+0x1084>
  801ba8:	0005883a 	mov	r2,zero
  801bac:	d0a76645 	stb	r2,-25191(gp)
      g54 =((g59&&(!(_cg59)))||(g53b&&_cg53));
  801bb0:	d0a774c3 	ldbu	r2,-25133(gp)
  801bb4:	10803fcc 	andi	r2,r2,255
  801bb8:	1080201c 	xori	r2,r2,128
  801bbc:	10bfe004 	addi	r2,r2,-128
  801bc0:	10000526 	beq	r2,zero,801bd8 <tick+0x10b0>
  801bc4:	d0a75943 	ldbu	r2,-25243(gp)
  801bc8:	10803fcc 	andi	r2,r2,255
  801bcc:	1080201c 	xori	r2,r2,128
  801bd0:	10bfe004 	addi	r2,r2,-128
  801bd4:	10000a26 	beq	r2,zero,801c00 <tick+0x10d8>
  801bd8:	d0a78443 	ldbu	r2,-25071(gp)
  801bdc:	10803fcc 	andi	r2,r2,255
  801be0:	1080201c 	xori	r2,r2,128
  801be4:	10bfe004 	addi	r2,r2,-128
  801be8:	10000726 	beq	r2,zero,801c08 <tick+0x10e0>
  801bec:	d0a77383 	ldbu	r2,-25138(gp)
  801bf0:	10803fcc 	andi	r2,r2,255
  801bf4:	1080201c 	xori	r2,r2,128
  801bf8:	10bfe004 	addi	r2,r2,-128
  801bfc:	10000226 	beq	r2,zero,801c08 <tick+0x10e0>
  801c00:	00800044 	movi	r2,1
  801c04:	00000106 	br	801c0c <tick+0x10e4>
  801c08:	0005883a 	mov	r2,zero
  801c0c:	d0a77545 	stb	r2,-25131(gp)
      g56 =((g55b&&_cg55)||(g57b&&(!(_cg57))));
  801c10:	d0a75b43 	ldbu	r2,-25235(gp)
  801c14:	10803fcc 	andi	r2,r2,255
  801c18:	1080201c 	xori	r2,r2,128
  801c1c:	10bfe004 	addi	r2,r2,-128
  801c20:	10000526 	beq	r2,zero,801c38 <tick+0x1110>
  801c24:	d0a797c3 	ldbu	r2,-24993(gp)
  801c28:	10803fcc 	andi	r2,r2,255
  801c2c:	1080201c 	xori	r2,r2,128
  801c30:	10bfe004 	addi	r2,r2,-128
  801c34:	10000a1e 	bne	r2,zero,801c60 <tick+0x1138>
  801c38:	d0a78643 	ldbu	r2,-25063(gp)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	1080201c 	xori	r2,r2,128
  801c44:	10bfe004 	addi	r2,r2,-128
  801c48:	10000726 	beq	r2,zero,801c68 <tick+0x1140>
  801c4c:	d0a79243 	ldbu	r2,-25015(gp)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	1000021e 	bne	r2,zero,801c68 <tick+0x1140>
  801c60:	00800044 	movi	r2,1
  801c64:	00000106 	br	801c6c <tick+0x1144>
  801c68:	0005883a 	mov	r2,zero
  801c6c:	d0a779c5 	stb	r2,-25113(gp)
      g61 = g1;
  801c70:	d0a763c3 	ldbu	r2,-25201(gp)
  801c74:	d0a76405 	stb	r2,-25200(gp)
      g66 =(PRE_g65);
  801c78:	d0a762c3 	ldbu	r2,-25205(gp)
  801c7c:	d0a77585 	stb	r2,-25130(gp)
      _cg66 = PVARPTO;
  801c80:	d0a78483 	ldbu	r2,-25070(gp)
  801c84:	d0a78c45 	stb	r2,-25039(gp)
      g67 =(g66&&_cg66);
  801c88:	d0a77583 	ldbu	r2,-25130(gp)
  801c8c:	10803fcc 	andi	r2,r2,255
  801c90:	1080201c 	xori	r2,r2,128
  801c94:	10bfe004 	addi	r2,r2,-128
  801c98:	10000726 	beq	r2,zero,801cb8 <tick+0x1190>
  801c9c:	d0a78c43 	ldbu	r2,-25039(gp)
  801ca0:	10803fcc 	andi	r2,r2,255
  801ca4:	1080201c 	xori	r2,r2,128
  801ca8:	10bfe004 	addi	r2,r2,-128
  801cac:	10000226 	beq	r2,zero,801cb8 <tick+0x1190>
  801cb0:	00800044 	movi	r2,1
  801cb4:	00000106 	br	801cbc <tick+0x1194>
  801cb8:	0005883a 	mov	r2,zero
  801cbc:	d0a79bc5 	stb	r2,-24977(gp)
      if(g67){
  801cc0:	d0a79bc3 	ldbu	r2,-24977(gp)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	10000226 	beq	r2,zero,801cdc <tick+0x11b4>
         _Pacemaker1_local_PVARP_ex =(_Pacemaker1_local_PVARP_ex||1);
  801cd4:	00800044 	movi	r2,1
  801cd8:	d0a772c5 	stb	r2,-25141(gp)
      }
      g62 =((g68&&(!(_cg68)))||g61||g67);
  801cdc:	d0a79283 	ldbu	r2,-25014(gp)
  801ce0:	10803fcc 	andi	r2,r2,255
  801ce4:	1080201c 	xori	r2,r2,128
  801ce8:	10bfe004 	addi	r2,r2,-128
  801cec:	10000526 	beq	r2,zero,801d04 <tick+0x11dc>
  801cf0:	d0a77083 	ldbu	r2,-25150(gp)
  801cf4:	10803fcc 	andi	r2,r2,255
  801cf8:	1080201c 	xori	r2,r2,128
  801cfc:	10bfe004 	addi	r2,r2,-128
  801d00:	10000a26 	beq	r2,zero,801d2c <tick+0x1204>
  801d04:	d0a76403 	ldbu	r2,-25200(gp)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	1000051e 	bne	r2,zero,801d2c <tick+0x1204>
  801d18:	d0a79bc3 	ldbu	r2,-24977(gp)
  801d1c:	10803fcc 	andi	r2,r2,255
  801d20:	1080201c 	xori	r2,r2,128
  801d24:	10bfe004 	addi	r2,r2,-128
  801d28:	10000226 	beq	r2,zero,801d34 <tick+0x120c>
  801d2c:	00800044 	movi	r2,1
  801d30:	00000106 	br	801d38 <tick+0x1210>
  801d34:	0005883a 	mov	r2,zero
  801d38:	d0a768c5 	stb	r2,-25181(gp)
      g65 =(g64||(g66&&(!(_cg66))));
  801d3c:	d0a76f83 	ldbu	r2,-25154(gp)
  801d40:	10803fcc 	andi	r2,r2,255
  801d44:	1080201c 	xori	r2,r2,128
  801d48:	10bfe004 	addi	r2,r2,-128
  801d4c:	10000a1e 	bne	r2,zero,801d78 <tick+0x1250>
  801d50:	d0a77583 	ldbu	r2,-25130(gp)
  801d54:	10803fcc 	andi	r2,r2,255
  801d58:	1080201c 	xori	r2,r2,128
  801d5c:	10bfe004 	addi	r2,r2,-128
  801d60:	10000726 	beq	r2,zero,801d80 <tick+0x1258>
  801d64:	d0a78c43 	ldbu	r2,-25039(gp)
  801d68:	10803fcc 	andi	r2,r2,255
  801d6c:	1080201c 	xori	r2,r2,128
  801d70:	10bfe004 	addi	r2,r2,-128
  801d74:	1000021e 	bne	r2,zero,801d80 <tick+0x1258>
  801d78:	00800044 	movi	r2,1
  801d7c:	00000106 	br	801d84 <tick+0x125c>
  801d80:	0005883a 	mov	r2,zero
  801d84:	d0a79385 	stb	r2,-25010(gp)
      g70 = g1;
  801d88:	d0a763c3 	ldbu	r2,-25201(gp)
  801d8c:	d0a78c05 	stb	r2,-25040(gp)
      g74 =(PRE_g73);
  801d90:	d0a798c3 	ldbu	r2,-24989(gp)
  801d94:	d0a7a045 	stb	r2,-24959(gp)
      g74b = g74;
  801d98:	d0a7a043 	ldbu	r2,-24959(gp)
  801d9c:	d0a77005 	stb	r2,-25152(gp)
      _cg74 = _Pacemaker1_local_PVARP_ex;
  801da0:	d0a772c3 	ldbu	r2,-25141(gp)
  801da4:	d0a76745 	stb	r2,-25187(gp)
      g71 =((g75&&(!(_cg75)))||g76||g70||(g74b&&_cg74));
  801da8:	d0a79003 	ldbu	r2,-25024(gp)
  801dac:	10803fcc 	andi	r2,r2,255
  801db0:	1080201c 	xori	r2,r2,128
  801db4:	10bfe004 	addi	r2,r2,-128
  801db8:	10000526 	beq	r2,zero,801dd0 <tick+0x12a8>
  801dbc:	d0a76243 	ldbu	r2,-25207(gp)
  801dc0:	10803fcc 	andi	r2,r2,255
  801dc4:	1080201c 	xori	r2,r2,128
  801dc8:	10bfe004 	addi	r2,r2,-128
  801dcc:	10001426 	beq	r2,zero,801e20 <tick+0x12f8>
  801dd0:	d0a76803 	ldbu	r2,-25184(gp)
  801dd4:	10803fcc 	andi	r2,r2,255
  801dd8:	1080201c 	xori	r2,r2,128
  801ddc:	10bfe004 	addi	r2,r2,-128
  801de0:	10000f1e 	bne	r2,zero,801e20 <tick+0x12f8>
  801de4:	d0a78c03 	ldbu	r2,-25040(gp)
  801de8:	10803fcc 	andi	r2,r2,255
  801dec:	1080201c 	xori	r2,r2,128
  801df0:	10bfe004 	addi	r2,r2,-128
  801df4:	10000a1e 	bne	r2,zero,801e20 <tick+0x12f8>
  801df8:	d0a77003 	ldbu	r2,-25152(gp)
  801dfc:	10803fcc 	andi	r2,r2,255
  801e00:	1080201c 	xori	r2,r2,128
  801e04:	10bfe004 	addi	r2,r2,-128
  801e08:	10000726 	beq	r2,zero,801e28 <tick+0x1300>
  801e0c:	d0a76743 	ldbu	r2,-25187(gp)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	10000226 	beq	r2,zero,801e28 <tick+0x1300>
  801e20:	00800044 	movi	r2,1
  801e24:	00000106 	br	801e2c <tick+0x1304>
  801e28:	0005883a 	mov	r2,zero
  801e2c:	d0a76485 	stb	r2,-25198(gp)
      g73 =((g72b&&_cg72)||(g74b&&(!(_cg74))));
  801e30:	d0a79083 	ldbu	r2,-25022(gp)
  801e34:	10803fcc 	andi	r2,r2,255
  801e38:	1080201c 	xori	r2,r2,128
  801e3c:	10bfe004 	addi	r2,r2,-128
  801e40:	10000526 	beq	r2,zero,801e58 <tick+0x1330>
  801e44:	d0a79f83 	ldbu	r2,-24962(gp)
  801e48:	10803fcc 	andi	r2,r2,255
  801e4c:	1080201c 	xori	r2,r2,128
  801e50:	10bfe004 	addi	r2,r2,-128
  801e54:	10000a1e 	bne	r2,zero,801e80 <tick+0x1358>
  801e58:	d0a77003 	ldbu	r2,-25152(gp)
  801e5c:	10803fcc 	andi	r2,r2,255
  801e60:	1080201c 	xori	r2,r2,128
  801e64:	10bfe004 	addi	r2,r2,-128
  801e68:	10000726 	beq	r2,zero,801e88 <tick+0x1360>
  801e6c:	d0a76743 	ldbu	r2,-25187(gp)
  801e70:	10803fcc 	andi	r2,r2,255
  801e74:	1080201c 	xori	r2,r2,128
  801e78:	10bfe004 	addi	r2,r2,-128
  801e7c:	1000021e 	bne	r2,zero,801e88 <tick+0x1360>
  801e80:	00800044 	movi	r2,1
  801e84:	00000106 	br	801e8c <tick+0x1364>
  801e88:	0005883a 	mov	r2,zero
  801e8c:	d0a79485 	stb	r2,-25006(gp)
      g78 = g1;
  801e90:	d0a763c3 	ldbu	r2,-25201(gp)
  801e94:	d0a77b45 	stb	r2,-25107(gp)
      g83 =(PRE_g82);
  801e98:	d0a79703 	ldbu	r2,-24996(gp)
  801e9c:	d0a75605 	stb	r2,-25256(gp)
      g83b = g83;
  801ea0:	d0a75603 	ldbu	r2,-25256(gp)
  801ea4:	d0a77205 	stb	r2,-25144(gp)
      _cg83 = _Pacemaker1_local_FilteredASense;
  801ea8:	d0a77dc3 	ldbu	r2,-25097(gp)
  801eac:	d0a77645 	stb	r2,-25127(gp)
      g85 =(g83b&&(!(_cg83)));
  801eb0:	d0a77203 	ldbu	r2,-25144(gp)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000726 	beq	r2,zero,801ee0 <tick+0x13b8>
  801ec4:	d0a77643 	ldbu	r2,-25127(gp)
  801ec8:	10803fcc 	andi	r2,r2,255
  801ecc:	1080201c 	xori	r2,r2,128
  801ed0:	10bfe004 	addi	r2,r2,-128
  801ed4:	1000021e 	bne	r2,zero,801ee0 <tick+0x13b8>
  801ed8:	00800044 	movi	r2,1
  801edc:	00000106 	br	801ee4 <tick+0x13bc>
  801ee0:	0005883a 	mov	r2,zero
  801ee4:	d0a75bc5 	stb	r2,-25233(gp)
      _cg85 = APace;
  801ee8:	d0a756c3 	ldbu	r2,-25253(gp)
  801eec:	d0a76685 	stb	r2,-25190(gp)
      g84 =((g83b&&_cg83)||(g85&&_cg85));
  801ef0:	d0a77203 	ldbu	r2,-25144(gp)
  801ef4:	10803fcc 	andi	r2,r2,255
  801ef8:	1080201c 	xori	r2,r2,128
  801efc:	10bfe004 	addi	r2,r2,-128
  801f00:	10000526 	beq	r2,zero,801f18 <tick+0x13f0>
  801f04:	d0a77643 	ldbu	r2,-25127(gp)
  801f08:	10803fcc 	andi	r2,r2,255
  801f0c:	1080201c 	xori	r2,r2,128
  801f10:	10bfe004 	addi	r2,r2,-128
  801f14:	10000a1e 	bne	r2,zero,801f40 <tick+0x1418>
  801f18:	d0a75bc3 	ldbu	r2,-25233(gp)
  801f1c:	10803fcc 	andi	r2,r2,255
  801f20:	1080201c 	xori	r2,r2,128
  801f24:	10bfe004 	addi	r2,r2,-128
  801f28:	10000726 	beq	r2,zero,801f48 <tick+0x1420>
  801f2c:	d0a76683 	ldbu	r2,-25190(gp)
  801f30:	10803fcc 	andi	r2,r2,255
  801f34:	1080201c 	xori	r2,r2,128
  801f38:	10bfe004 	addi	r2,r2,-128
  801f3c:	10000226 	beq	r2,zero,801f48 <tick+0x1420>
  801f40:	00800044 	movi	r2,1
  801f44:	00000106 	br	801f4c <tick+0x1424>
  801f48:	0005883a 	mov	r2,zero
  801f4c:	d0a76905 	stb	r2,-25180(gp)
      if(g84){
  801f50:	d0a76903 	ldbu	r2,-25180(gp)
  801f54:	10803fcc 	andi	r2,r2,255
  801f58:	1080201c 	xori	r2,r2,128
  801f5c:	10bfe004 	addi	r2,r2,-128
  801f60:	10000226 	beq	r2,zero,801f6c <tick+0x1444>
         AEI_stop =(AEI_stop||1);
  801f64:	00800044 	movi	r2,1
  801f68:	d0a79c45 	stb	r2,-24975(gp)
      }
      g86 =(g85&&(!(_cg85)));
  801f6c:	d0a75bc3 	ldbu	r2,-25233(gp)
  801f70:	10803fcc 	andi	r2,r2,255
  801f74:	1080201c 	xori	r2,r2,128
  801f78:	10bfe004 	addi	r2,r2,-128
  801f7c:	10000726 	beq	r2,zero,801f9c <tick+0x1474>
  801f80:	d0a76683 	ldbu	r2,-25190(gp)
  801f84:	10803fcc 	andi	r2,r2,255
  801f88:	1080201c 	xori	r2,r2,128
  801f8c:	10bfe004 	addi	r2,r2,-128
  801f90:	1000021e 	bne	r2,zero,801f9c <tick+0x1474>
  801f94:	00800044 	movi	r2,1
  801f98:	00000106 	br	801fa0 <tick+0x1478>
  801f9c:	0005883a 	mov	r2,zero
  801fa0:	d0a78345 	stb	r2,-25075(gp)
      _cg86 = AEITO;
  801fa4:	d0a79e83 	ldbu	r2,-24966(gp)
  801fa8:	d0a78c85 	stb	r2,-25038(gp)
      g87 =(g86&&_cg86);
  801fac:	d0a78343 	ldbu	r2,-25075(gp)
  801fb0:	10803fcc 	andi	r2,r2,255
  801fb4:	1080201c 	xori	r2,r2,128
  801fb8:	10bfe004 	addi	r2,r2,-128
  801fbc:	10000726 	beq	r2,zero,801fdc <tick+0x14b4>
  801fc0:	d0a78c83 	ldbu	r2,-25038(gp)
  801fc4:	10803fcc 	andi	r2,r2,255
  801fc8:	1080201c 	xori	r2,r2,128
  801fcc:	10bfe004 	addi	r2,r2,-128
  801fd0:	10000226 	beq	r2,zero,801fdc <tick+0x14b4>
  801fd4:	00800044 	movi	r2,1
  801fd8:	00000106 	br	801fe0 <tick+0x14b8>
  801fdc:	0005883a 	mov	r2,zero
  801fe0:	d0a76145 	stb	r2,-25211(gp)
      if(g87){
  801fe4:	d0a76143 	ldbu	r2,-25211(gp)
  801fe8:	10803fcc 	andi	r2,r2,255
  801fec:	1080201c 	xori	r2,r2,128
  801ff0:	10bfe004 	addi	r2,r2,-128
  801ff4:	10000226 	beq	r2,zero,802000 <tick+0x14d8>
         _Pacemaker1_local_AEI_ex =(_Pacemaker1_local_AEI_ex||1);
  801ff8:	00800044 	movi	r2,1
  801ffc:	d0a77845 	stb	r2,-25119(gp)
      }
      g80 =(PRE_g79);
  802000:	d0a777c3 	ldbu	r2,-25121(gp)
  802004:	d0a77405 	stb	r2,-25136(gp)
      g80b = g80;
  802008:	d0a77403 	ldbu	r2,-25136(gp)
  80200c:	d0a75845 	stb	r2,-25247(gp)
      _cg80 = _Pacemaker1_local_FilteredVSense;
  802010:	d0a778c3 	ldbu	r2,-25117(gp)
  802014:	d0a788c5 	stb	r2,-25053(gp)
      g88 =(g80b&&(!(_cg80)));
  802018:	d0a75843 	ldbu	r2,-25247(gp)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	10000726 	beq	r2,zero,802048 <tick+0x1520>
  80202c:	d0a788c3 	ldbu	r2,-25053(gp)
  802030:	10803fcc 	andi	r2,r2,255
  802034:	1080201c 	xori	r2,r2,128
  802038:	10bfe004 	addi	r2,r2,-128
  80203c:	1000021e 	bne	r2,zero,802048 <tick+0x1520>
  802040:	00800044 	movi	r2,1
  802044:	00000106 	br	80204c <tick+0x1524>
  802048:	0005883a 	mov	r2,zero
  80204c:	d0a79685 	stb	r2,-24998(gp)
      _cg88 = VPace;
  802050:	d0a799c3 	ldbu	r2,-24985(gp)
  802054:	d0a79a45 	stb	r2,-24983(gp)
      g79 =(g78||g84||g87||(g88&&(!(_cg88))));
  802058:	d0a77b43 	ldbu	r2,-25107(gp)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	1080201c 	xori	r2,r2,128
  802064:	10bfe004 	addi	r2,r2,-128
  802068:	1000141e 	bne	r2,zero,8020bc <tick+0x1594>
  80206c:	d0a76903 	ldbu	r2,-25180(gp)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000f1e 	bne	r2,zero,8020bc <tick+0x1594>
  802080:	d0a76143 	ldbu	r2,-25211(gp)
  802084:	10803fcc 	andi	r2,r2,255
  802088:	1080201c 	xori	r2,r2,128
  80208c:	10bfe004 	addi	r2,r2,-128
  802090:	10000a1e 	bne	r2,zero,8020bc <tick+0x1594>
  802094:	d0a79683 	ldbu	r2,-24998(gp)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10000726 	beq	r2,zero,8020c4 <tick+0x159c>
  8020a8:	d0a79a43 	ldbu	r2,-24983(gp)
  8020ac:	10803fcc 	andi	r2,r2,255
  8020b0:	1080201c 	xori	r2,r2,128
  8020b4:	10bfe004 	addi	r2,r2,-128
  8020b8:	1000021e 	bne	r2,zero,8020c4 <tick+0x159c>
  8020bc:	00800044 	movi	r2,1
  8020c0:	00000106 	br	8020c8 <tick+0x15a0>
  8020c4:	0005883a 	mov	r2,zero
  8020c8:	d0a770c5 	stb	r2,-25149(gp)
      g81 =((g80b&&_cg80)||(g88&&_cg88));
  8020cc:	d0a75843 	ldbu	r2,-25247(gp)
  8020d0:	10803fcc 	andi	r2,r2,255
  8020d4:	1080201c 	xori	r2,r2,128
  8020d8:	10bfe004 	addi	r2,r2,-128
  8020dc:	10000526 	beq	r2,zero,8020f4 <tick+0x15cc>
  8020e0:	d0a788c3 	ldbu	r2,-25053(gp)
  8020e4:	10803fcc 	andi	r2,r2,255
  8020e8:	1080201c 	xori	r2,r2,128
  8020ec:	10bfe004 	addi	r2,r2,-128
  8020f0:	10000a1e 	bne	r2,zero,80211c <tick+0x15f4>
  8020f4:	d0a79683 	ldbu	r2,-24998(gp)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	10000726 	beq	r2,zero,802124 <tick+0x15fc>
  802108:	d0a79a43 	ldbu	r2,-24983(gp)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	10000226 	beq	r2,zero,802124 <tick+0x15fc>
  80211c:	00800044 	movi	r2,1
  802120:	00000106 	br	802128 <tick+0x1600>
  802124:	0005883a 	mov	r2,zero
  802128:	d0a78e05 	stb	r2,-25032(gp)
      if(g81){
  80212c:	d0a78e03 	ldbu	r2,-25032(gp)
  802130:	10803fcc 	andi	r2,r2,255
  802134:	1080201c 	xori	r2,r2,128
  802138:	10bfe004 	addi	r2,r2,-128
  80213c:	10000226 	beq	r2,zero,802148 <tick+0x1620>
         AEI_start =(AEI_start||1);
  802140:	00800044 	movi	r2,1
  802144:	d0a78bc5 	stb	r2,-25041(gp)
      }
      g82 =(g81||(g86&&(!(_cg86))));
  802148:	d0a78e03 	ldbu	r2,-25032(gp)
  80214c:	10803fcc 	andi	r2,r2,255
  802150:	1080201c 	xori	r2,r2,128
  802154:	10bfe004 	addi	r2,r2,-128
  802158:	10000a1e 	bne	r2,zero,802184 <tick+0x165c>
  80215c:	d0a78343 	ldbu	r2,-25075(gp)
  802160:	10803fcc 	andi	r2,r2,255
  802164:	1080201c 	xori	r2,r2,128
  802168:	10bfe004 	addi	r2,r2,-128
  80216c:	10000726 	beq	r2,zero,80218c <tick+0x1664>
  802170:	d0a78c83 	ldbu	r2,-25038(gp)
  802174:	10803fcc 	andi	r2,r2,255
  802178:	1080201c 	xori	r2,r2,128
  80217c:	10bfe004 	addi	r2,r2,-128
  802180:	1000021e 	bne	r2,zero,80218c <tick+0x1664>
  802184:	00800044 	movi	r2,1
  802188:	00000106 	br	802190 <tick+0x1668>
  80218c:	0005883a 	mov	r2,zero
  802190:	d0a76545 	stb	r2,-25195(gp)
      g90 = g1;
  802194:	d0a763c3 	ldbu	r2,-25201(gp)
  802198:	d0a77f05 	stb	r2,-25092(gp)
      g92 =(PRE_g91);
  80219c:	d0a78083 	ldbu	r2,-25086(gp)
  8021a0:	d0a76385 	stb	r2,-25202(gp)
      g92b = g92;
  8021a4:	d0a76383 	ldbu	r2,-25202(gp)
  8021a8:	d0a77c45 	stb	r2,-25103(gp)
      _cg92 = AEI_start;
  8021ac:	d0a78bc3 	ldbu	r2,-25041(gp)
  8021b0:	d0a79785 	stb	r2,-24994(gp)
      g91 =((g94b&&_cg94)||g90||g96||(g92b&&(!(_cg92))));
  8021b4:	d0a75d03 	ldbu	r2,-25228(gp)
  8021b8:	10803fcc 	andi	r2,r2,255
  8021bc:	1080201c 	xori	r2,r2,128
  8021c0:	10bfe004 	addi	r2,r2,-128
  8021c4:	10000526 	beq	r2,zero,8021dc <tick+0x16b4>
  8021c8:	d0a79203 	ldbu	r2,-25016(gp)
  8021cc:	10803fcc 	andi	r2,r2,255
  8021d0:	1080201c 	xori	r2,r2,128
  8021d4:	10bfe004 	addi	r2,r2,-128
  8021d8:	1000141e 	bne	r2,zero,80222c <tick+0x1704>
  8021dc:	d0a77f03 	ldbu	r2,-25092(gp)
  8021e0:	10803fcc 	andi	r2,r2,255
  8021e4:	1080201c 	xori	r2,r2,128
  8021e8:	10bfe004 	addi	r2,r2,-128
  8021ec:	10000f1e 	bne	r2,zero,80222c <tick+0x1704>
  8021f0:	d0a78743 	ldbu	r2,-25059(gp)
  8021f4:	10803fcc 	andi	r2,r2,255
  8021f8:	1080201c 	xori	r2,r2,128
  8021fc:	10bfe004 	addi	r2,r2,-128
  802200:	10000a1e 	bne	r2,zero,80222c <tick+0x1704>
  802204:	d0a77c43 	ldbu	r2,-25103(gp)
  802208:	10803fcc 	andi	r2,r2,255
  80220c:	1080201c 	xori	r2,r2,128
  802210:	10bfe004 	addi	r2,r2,-128
  802214:	10000726 	beq	r2,zero,802234 <tick+0x170c>
  802218:	d0a79783 	ldbu	r2,-24994(gp)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	1000021e 	bne	r2,zero,802234 <tick+0x170c>
  80222c:	00800044 	movi	r2,1
  802230:	00000106 	br	802238 <tick+0x1710>
  802234:	0005883a 	mov	r2,zero
  802238:	d0a75685 	stb	r2,-25254(gp)
      g93 =((g92b&&_cg92)||(g95&&(!(_cg95))));
  80223c:	d0a77c43 	ldbu	r2,-25103(gp)
  802240:	10803fcc 	andi	r2,r2,255
  802244:	1080201c 	xori	r2,r2,128
  802248:	10bfe004 	addi	r2,r2,-128
  80224c:	10000526 	beq	r2,zero,802264 <tick+0x173c>
  802250:	d0a79783 	ldbu	r2,-24994(gp)
  802254:	10803fcc 	andi	r2,r2,255
  802258:	1080201c 	xori	r2,r2,128
  80225c:	10bfe004 	addi	r2,r2,-128
  802260:	10000a1e 	bne	r2,zero,80228c <tick+0x1764>
  802264:	d0a78683 	ldbu	r2,-25062(gp)
  802268:	10803fcc 	andi	r2,r2,255
  80226c:	1080201c 	xori	r2,r2,128
  802270:	10bfe004 	addi	r2,r2,-128
  802274:	10000726 	beq	r2,zero,802294 <tick+0x176c>
  802278:	d0a76c83 	ldbu	r2,-25166(gp)
  80227c:	10803fcc 	andi	r2,r2,255
  802280:	1080201c 	xori	r2,r2,128
  802284:	10bfe004 	addi	r2,r2,-128
  802288:	1000021e 	bne	r2,zero,802294 <tick+0x176c>
  80228c:	00800044 	movi	r2,1
  802290:	00000106 	br	802298 <tick+0x1770>
  802294:	0005883a 	mov	r2,zero
  802298:	d0a78245 	stb	r2,-25079(gp)
      g98 = g1;
  80229c:	d0a763c3 	ldbu	r2,-25201(gp)
  8022a0:	d0a78a85 	stb	r2,-25046(gp)
      g103 =(PRE_g102);
  8022a4:	d0a75803 	ldbu	r2,-25248(gp)
  8022a8:	d0a75b05 	stb	r2,-25236(gp)
      _cg103 = URITO;
  8022ac:	d0a77fc3 	ldbu	r2,-25089(gp)
  8022b0:	d0a79745 	stb	r2,-24995(gp)
      g104 =(g103&&_cg103);
  8022b4:	d0a75b03 	ldbu	r2,-25236(gp)
  8022b8:	10803fcc 	andi	r2,r2,255
  8022bc:	1080201c 	xori	r2,r2,128
  8022c0:	10bfe004 	addi	r2,r2,-128
  8022c4:	10000726 	beq	r2,zero,8022e4 <tick+0x17bc>
  8022c8:	d0a79743 	ldbu	r2,-24995(gp)
  8022cc:	10803fcc 	andi	r2,r2,255
  8022d0:	1080201c 	xori	r2,r2,128
  8022d4:	10bfe004 	addi	r2,r2,-128
  8022d8:	10000226 	beq	r2,zero,8022e4 <tick+0x17bc>
  8022dc:	00800044 	movi	r2,1
  8022e0:	00000106 	br	8022e8 <tick+0x17c0>
  8022e4:	0005883a 	mov	r2,zero
  8022e8:	d0a78945 	stb	r2,-25051(gp)
      if(g104){
  8022ec:	d0a78943 	ldbu	r2,-25051(gp)
  8022f0:	10803fcc 	andi	r2,r2,255
  8022f4:	1080201c 	xori	r2,r2,128
  8022f8:	10bfe004 	addi	r2,r2,-128
  8022fc:	10000226 	beq	r2,zero,802308 <tick+0x17e0>
         _Pacemaker1_local_URI_ex =(_Pacemaker1_local_URI_ex||1);
  802300:	00800044 	movi	r2,1
  802304:	d0a78d85 	stb	r2,-25034(gp)
      }
      g100 =(PRE_g99);
  802308:	d0a78f83 	ldbu	r2,-25026(gp)
  80230c:	d0a77485 	stb	r2,-25134(gp)
      g100b = g100;
  802310:	d0a77483 	ldbu	r2,-25134(gp)
  802314:	d0a79945 	stb	r2,-24987(gp)
      _cg100 = _Pacemaker1_local_FilteredVSense;
  802318:	d0a778c3 	ldbu	r2,-25117(gp)
  80231c:	d0a77945 	stb	r2,-25115(gp)
      g105 =(g100b&&(!(_cg100)));
  802320:	d0a79943 	ldbu	r2,-24987(gp)
  802324:	10803fcc 	andi	r2,r2,255
  802328:	1080201c 	xori	r2,r2,128
  80232c:	10bfe004 	addi	r2,r2,-128
  802330:	10000726 	beq	r2,zero,802350 <tick+0x1828>
  802334:	d0a77943 	ldbu	r2,-25115(gp)
  802338:	10803fcc 	andi	r2,r2,255
  80233c:	1080201c 	xori	r2,r2,128
  802340:	10bfe004 	addi	r2,r2,-128
  802344:	1000021e 	bne	r2,zero,802350 <tick+0x1828>
  802348:	00800044 	movi	r2,1
  80234c:	00000106 	br	802354 <tick+0x182c>
  802350:	0005883a 	mov	r2,zero
  802354:	d0a76d85 	stb	r2,-25162(gp)
      _cg105 = VPace;
  802358:	d0a799c3 	ldbu	r2,-24985(gp)
  80235c:	d0a7a005 	stb	r2,-24960(gp)
      g99 =(g104||(g105&&(!(_cg105)))||g98);
  802360:	d0a78943 	ldbu	r2,-25051(gp)
  802364:	10803fcc 	andi	r2,r2,255
  802368:	1080201c 	xori	r2,r2,128
  80236c:	10bfe004 	addi	r2,r2,-128
  802370:	10000f1e 	bne	r2,zero,8023b0 <tick+0x1888>
  802374:	d0a76d83 	ldbu	r2,-25162(gp)
  802378:	10803fcc 	andi	r2,r2,255
  80237c:	1080201c 	xori	r2,r2,128
  802380:	10bfe004 	addi	r2,r2,-128
  802384:	10000526 	beq	r2,zero,80239c <tick+0x1874>
  802388:	d0a7a003 	ldbu	r2,-24960(gp)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	10000526 	beq	r2,zero,8023b0 <tick+0x1888>
  80239c:	d0a78a83 	ldbu	r2,-25046(gp)
  8023a0:	10803fcc 	andi	r2,r2,255
  8023a4:	1080201c 	xori	r2,r2,128
  8023a8:	10bfe004 	addi	r2,r2,-128
  8023ac:	10000226 	beq	r2,zero,8023b8 <tick+0x1890>
  8023b0:	00800044 	movi	r2,1
  8023b4:	00000106 	br	8023bc <tick+0x1894>
  8023b8:	0005883a 	mov	r2,zero
  8023bc:	d0a77505 	stb	r2,-25132(gp)
      g101 =((g100b&&_cg100)||(g105&&_cg105));
  8023c0:	d0a79943 	ldbu	r2,-24987(gp)
  8023c4:	10803fcc 	andi	r2,r2,255
  8023c8:	1080201c 	xori	r2,r2,128
  8023cc:	10bfe004 	addi	r2,r2,-128
  8023d0:	10000526 	beq	r2,zero,8023e8 <tick+0x18c0>
  8023d4:	d0a77943 	ldbu	r2,-25115(gp)
  8023d8:	10803fcc 	andi	r2,r2,255
  8023dc:	1080201c 	xori	r2,r2,128
  8023e0:	10bfe004 	addi	r2,r2,-128
  8023e4:	10000a1e 	bne	r2,zero,802410 <tick+0x18e8>
  8023e8:	d0a76d83 	ldbu	r2,-25162(gp)
  8023ec:	10803fcc 	andi	r2,r2,255
  8023f0:	1080201c 	xori	r2,r2,128
  8023f4:	10bfe004 	addi	r2,r2,-128
  8023f8:	10000726 	beq	r2,zero,802418 <tick+0x18f0>
  8023fc:	d0a7a003 	ldbu	r2,-24960(gp)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	10000226 	beq	r2,zero,802418 <tick+0x18f0>
  802410:	00800044 	movi	r2,1
  802414:	00000106 	br	80241c <tick+0x18f4>
  802418:	0005883a 	mov	r2,zero
  80241c:	d0a77805 	stb	r2,-25120(gp)
      if(g101){
  802420:	d0a77803 	ldbu	r2,-25120(gp)
  802424:	10803fcc 	andi	r2,r2,255
  802428:	1080201c 	xori	r2,r2,128
  80242c:	10bfe004 	addi	r2,r2,-128
  802430:	10000226 	beq	r2,zero,80243c <tick+0x1914>
         URI_start =(URI_start||1);
  802434:	00800044 	movi	r2,1
  802438:	d0a79d05 	stb	r2,-24972(gp)
      }
      g102 =(g101||(g103&&(!(_cg103))));
  80243c:	d0a77803 	ldbu	r2,-25120(gp)
  802440:	10803fcc 	andi	r2,r2,255
  802444:	1080201c 	xori	r2,r2,128
  802448:	10bfe004 	addi	r2,r2,-128
  80244c:	10000a1e 	bne	r2,zero,802478 <tick+0x1950>
  802450:	d0a75b03 	ldbu	r2,-25236(gp)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	10000726 	beq	r2,zero,802480 <tick+0x1958>
  802464:	d0a79743 	ldbu	r2,-24995(gp)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	1000021e 	bne	r2,zero,802480 <tick+0x1958>
  802478:	00800044 	movi	r2,1
  80247c:	00000106 	br	802484 <tick+0x195c>
  802480:	0005883a 	mov	r2,zero
  802484:	d0a75f45 	stb	r2,-25219(gp)
      g107 = g1;
  802488:	d0a763c3 	ldbu	r2,-25201(gp)
  80248c:	d0a787c5 	stb	r2,-25057(gp)
      g111 =(PRE_g110);
  802490:	d0a78e83 	ldbu	r2,-25030(gp)
  802494:	d0a757c5 	stb	r2,-25249(gp)
      g111b = g111;
  802498:	d0a757c3 	ldbu	r2,-25249(gp)
  80249c:	d0a77605 	stb	r2,-25128(gp)
      _cg111 = _Pacemaker1_local_URI_ex;
  8024a0:	d0a78d83 	ldbu	r2,-25034(gp)
  8024a4:	d0a76cc5 	stb	r2,-25165(gp)
      g109 =(PRE_g108);
  8024a8:	d0a79b03 	ldbu	r2,-24980(gp)
  8024ac:	d0a79cc5 	stb	r2,-24973(gp)
      g109b = g109;
  8024b0:	d0a79cc3 	ldbu	r2,-24973(gp)
  8024b4:	d0a77cc5 	stb	r2,-25101(gp)
      _cg109 = URI_start;
  8024b8:	d0a79d03 	ldbu	r2,-24972(gp)
  8024bc:	d0a79985 	stb	r2,-24986(gp)
      g112 =(g109b&&(!(_cg109)));
  8024c0:	d0a77cc3 	ldbu	r2,-25101(gp)
  8024c4:	10803fcc 	andi	r2,r2,255
  8024c8:	1080201c 	xori	r2,r2,128
  8024cc:	10bfe004 	addi	r2,r2,-128
  8024d0:	10000726 	beq	r2,zero,8024f0 <tick+0x19c8>
  8024d4:	d0a79983 	ldbu	r2,-24986(gp)
  8024d8:	10803fcc 	andi	r2,r2,255
  8024dc:	1080201c 	xori	r2,r2,128
  8024e0:	10bfe004 	addi	r2,r2,-128
  8024e4:	1000021e 	bne	r2,zero,8024f0 <tick+0x19c8>
  8024e8:	00800044 	movi	r2,1
  8024ec:	00000106 	br	8024f4 <tick+0x19cc>
  8024f0:	0005883a 	mov	r2,zero
  8024f4:	d0a75a05 	stb	r2,-25240(gp)
      if(g112){
  8024f8:	d0a75a03 	ldbu	r2,-25240(gp)
  8024fc:	10803fcc 	andi	r2,r2,255
  802500:	1080201c 	xori	r2,r2,128
  802504:	10bfe004 	addi	r2,r2,-128
  802508:	10000226 	beq	r2,zero,802514 <tick+0x19ec>
         _Pacemaker1_local_URI_idle =(_Pacemaker1_local_URI_idle||1);
  80250c:	00800044 	movi	r2,1
  802510:	d0a76a45 	stb	r2,-25175(gp)
      }
      g108 =(g107||(g111b&&_cg111)||g112);
  802514:	d0a787c3 	ldbu	r2,-25057(gp)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	10000f1e 	bne	r2,zero,802564 <tick+0x1a3c>
  802528:	d0a77603 	ldbu	r2,-25128(gp)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	10000526 	beq	r2,zero,802550 <tick+0x1a28>
  80253c:	d0a76cc3 	ldbu	r2,-25165(gp)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	1000051e 	bne	r2,zero,802564 <tick+0x1a3c>
  802550:	d0a75a03 	ldbu	r2,-25240(gp)
  802554:	10803fcc 	andi	r2,r2,255
  802558:	1080201c 	xori	r2,r2,128
  80255c:	10bfe004 	addi	r2,r2,-128
  802560:	10000226 	beq	r2,zero,80256c <tick+0x1a44>
  802564:	00800044 	movi	r2,1
  802568:	00000106 	br	802570 <tick+0x1a48>
  80256c:	0005883a 	mov	r2,zero
  802570:	d0a75745 	stb	r2,-25251(gp)
      g110 =((g109b&&_cg109)||(g111b&&(!(_cg111))));
  802574:	d0a77cc3 	ldbu	r2,-25101(gp)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	10000526 	beq	r2,zero,80259c <tick+0x1a74>
  802588:	d0a79983 	ldbu	r2,-24986(gp)
  80258c:	10803fcc 	andi	r2,r2,255
  802590:	1080201c 	xori	r2,r2,128
  802594:	10bfe004 	addi	r2,r2,-128
  802598:	10000a1e 	bne	r2,zero,8025c4 <tick+0x1a9c>
  80259c:	d0a77603 	ldbu	r2,-25128(gp)
  8025a0:	10803fcc 	andi	r2,r2,255
  8025a4:	1080201c 	xori	r2,r2,128
  8025a8:	10bfe004 	addi	r2,r2,-128
  8025ac:	10000726 	beq	r2,zero,8025cc <tick+0x1aa4>
  8025b0:	d0a76cc3 	ldbu	r2,-25165(gp)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	1000021e 	bne	r2,zero,8025cc <tick+0x1aa4>
  8025c4:	00800044 	movi	r2,1
  8025c8:	00000106 	br	8025d0 <tick+0x1aa8>
  8025cc:	0005883a 	mov	r2,zero
  8025d0:	d0a77245 	stb	r2,-25143(gp)
      g114 = g1;
  8025d4:	d0a763c3 	ldbu	r2,-25201(gp)
  8025d8:	d0a77985 	stb	r2,-25114(gp)
      g115 =(g116||g114);
  8025dc:	d0a78d03 	ldbu	r2,-25036(gp)
  8025e0:	10803fcc 	andi	r2,r2,255
  8025e4:	1080201c 	xori	r2,r2,128
  8025e8:	10bfe004 	addi	r2,r2,-128
  8025ec:	1000051e 	bne	r2,zero,802604 <tick+0x1adc>
  8025f0:	d0a77983 	ldbu	r2,-25114(gp)
  8025f4:	10803fcc 	andi	r2,r2,255
  8025f8:	1080201c 	xori	r2,r2,128
  8025fc:	10bfe004 	addi	r2,r2,-128
  802600:	10000226 	beq	r2,zero,80260c <tick+0x1ae4>
  802604:	00800044 	movi	r2,1
  802608:	00000106 	br	802610 <tick+0x1ae8>
  80260c:	0005883a 	mov	r2,zero
  802610:	d0a75fc5 	stb	r2,-25217(gp)
      if(g115){
  802614:	d0a75fc3 	ldbu	r2,-25217(gp)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	1080201c 	xori	r2,r2,128
  802620:	10bfe004 	addi	r2,r2,-128
  802624:	10000226 	beq	r2,zero,802630 <tick+0x1b08>
         _Pacemaker1_local__reg_LRI_ex10 = _Pacemaker1_local_LRI_ex;
  802628:	d0a77d83 	ldbu	r2,-25098(gp)
  80262c:	d0a77705 	stb	r2,-25124(gp)
      }
      g115b = g115;
  802630:	d0a75fc3 	ldbu	r2,-25217(gp)
  802634:	d0a794c5 	stb	r2,-25005(gp)
      if(g115b){
  802638:	d0a794c3 	ldbu	r2,-25005(gp)
  80263c:	10803fcc 	andi	r2,r2,255
  802640:	1080201c 	xori	r2,r2,128
  802644:	10bfe004 	addi	r2,r2,-128
  802648:	10000226 	beq	r2,zero,802654 <tick+0x1b2c>
         _Pacemaker1_local__reg_AEI_ex14 = _Pacemaker1_local_AEI_ex;
  80264c:	d0a77843 	ldbu	r2,-25119(gp)
  802650:	d0a759c5 	stb	r2,-25241(gp)
      }
      g115c = g115;
  802654:	d0a75fc3 	ldbu	r2,-25217(gp)
  802658:	d0a78805 	stb	r2,-25056(gp)
      if(g115c){
  80265c:	d0a78803 	ldbu	r2,-25056(gp)
  802660:	10803fcc 	andi	r2,r2,255
  802664:	1080201c 	xori	r2,r2,128
  802668:	10bfe004 	addi	r2,r2,-128
  80266c:	10000226 	beq	r2,zero,802678 <tick+0x1b50>
         _Pacemaker1_local__reg_URI_idle15 = _Pacemaker1_local_URI_idle;
  802670:	d0a76a43 	ldbu	r2,-25175(gp)
  802674:	d0a77bc5 	stb	r2,-25105(gp)
      }
      g123 = g0;
  802678:	d0a78fc3 	ldbu	r2,-25025(gp)
  80267c:	d0a76205 	stb	r2,-25208(gp)
      g124 =(g123||g125);
  802680:	d0a76203 	ldbu	r2,-25208(gp)
  802684:	10803fcc 	andi	r2,r2,255
  802688:	1080201c 	xori	r2,r2,128
  80268c:	10bfe004 	addi	r2,r2,-128
  802690:	1000051e 	bne	r2,zero,8026a8 <tick+0x1b80>
  802694:	d0a79543 	ldbu	r2,-25003(gp)
  802698:	10803fcc 	andi	r2,r2,255
  80269c:	1080201c 	xori	r2,r2,128
  8026a0:	10bfe004 	addi	r2,r2,-128
  8026a4:	10000226 	beq	r2,zero,8026b0 <tick+0x1b88>
  8026a8:	00800044 	movi	r2,1
  8026ac:	00000106 	br	8026b4 <tick+0x1b8c>
  8026b0:	0005883a 	mov	r2,zero
  8026b4:	d0a78ec5 	stb	r2,-25029(gp)
      if(g124){
  8026b8:	d0a78ec3 	ldbu	r2,-25029(gp)
  8026bc:	10803fcc 	andi	r2,r2,255
  8026c0:	1080201c 	xori	r2,r2,128
  8026c4:	10bfe004 	addi	r2,r2,-128
  8026c8:	10000226 	beq	r2,zero,8026d4 <tick+0x1bac>
         _reg_AEI_stop15 = AEI_stop;
  8026cc:	d0a79c43 	ldbu	r2,-24975(gp)
  8026d0:	d0a79105 	stb	r2,-25020(gp)
      }
      g124b = g124;
  8026d4:	d0a78ec3 	ldbu	r2,-25029(gp)
  8026d8:	d0a76e05 	stb	r2,-25160(gp)
      if(g124b){
  8026dc:	d0a76e03 	ldbu	r2,-25160(gp)
  8026e0:	10803fcc 	andi	r2,r2,255
  8026e4:	1080201c 	xori	r2,r2,128
  8026e8:	10bfe004 	addi	r2,r2,-128
  8026ec:	10000226 	beq	r2,zero,8026f8 <tick+0x1bd0>
         _reg_VRP_start18 = VRP_start;
  8026f0:	d0a77c83 	ldbu	r2,-25102(gp)
  8026f4:	d0a75c45 	stb	r2,-25231(gp)
      }
      g124c = g124;
  8026f8:	d0a78ec3 	ldbu	r2,-25029(gp)
  8026fc:	d0a79605 	stb	r2,-25000(gp)
      if(g124c){
  802700:	d0a79603 	ldbu	r2,-25000(gp)
  802704:	10803fcc 	andi	r2,r2,255
  802708:	1080201c 	xori	r2,r2,128
  80270c:	10bfe004 	addi	r2,r2,-128
  802710:	10000226 	beq	r2,zero,80271c <tick+0x1bf4>
         _reg_LRI_stop = LRI_stop;
  802714:	d0a76a83 	ldbu	r2,-25174(gp)
  802718:	d0a76f05 	stb	r2,-25156(gp)
      }
      g10_e1 =(!((g4||g7)));
  80271c:	d0a75703 	ldbu	r2,-25252(gp)
  802720:	10803fcc 	andi	r2,r2,255
  802724:	1080201c 	xori	r2,r2,128
  802728:	10bfe004 	addi	r2,r2,-128
  80272c:	1000071e 	bne	r2,zero,80274c <tick+0x1c24>
  802730:	d0a77343 	ldbu	r2,-25139(gp)
  802734:	10803fcc 	andi	r2,r2,255
  802738:	1080201c 	xori	r2,r2,128
  80273c:	10bfe004 	addi	r2,r2,-128
  802740:	1000021e 	bne	r2,zero,80274c <tick+0x1c24>
  802744:	00800044 	movi	r2,1
  802748:	00000106 	br	802750 <tick+0x1c28>
  80274c:	0005883a 	mov	r2,zero
  802750:	d0a78cc5 	stb	r2,-25037(gp)
      g18_e2 =(!((g13||g15)));
  802754:	d0a789c3 	ldbu	r2,-25049(gp)
  802758:	10803fcc 	andi	r2,r2,255
  80275c:	1080201c 	xori	r2,r2,128
  802760:	10bfe004 	addi	r2,r2,-128
  802764:	1000071e 	bne	r2,zero,802784 <tick+0x1c5c>
  802768:	d0a77ec3 	ldbu	r2,-25093(gp)
  80276c:	10803fcc 	andi	r2,r2,255
  802770:	1080201c 	xori	r2,r2,128
  802774:	10bfe004 	addi	r2,r2,-128
  802778:	1000021e 	bne	r2,zero,802784 <tick+0x1c5c>
  80277c:	00800044 	movi	r2,1
  802780:	00000106 	br	802788 <tick+0x1c60>
  802784:	0005883a 	mov	r2,zero
  802788:	d0a78885 	stb	r2,-25054(gp)
      g30_e3 =(!((g21||g24)));
  80278c:	d0a76fc3 	ldbu	r2,-25153(gp)
  802790:	10803fcc 	andi	r2,r2,255
  802794:	1080201c 	xori	r2,r2,128
  802798:	10bfe004 	addi	r2,r2,-128
  80279c:	1000071e 	bne	r2,zero,8027bc <tick+0x1c94>
  8027a0:	d0a79c03 	ldbu	r2,-24976(gp)
  8027a4:	10803fcc 	andi	r2,r2,255
  8027a8:	1080201c 	xori	r2,r2,128
  8027ac:	10bfe004 	addi	r2,r2,-128
  8027b0:	1000021e 	bne	r2,zero,8027bc <tick+0x1c94>
  8027b4:	00800044 	movi	r2,1
  8027b8:	00000106 	br	8027c0 <tick+0x1c98>
  8027bc:	0005883a 	mov	r2,zero
  8027c0:	d0a77145 	stb	r2,-25147(gp)
      g38_e4 =(!((g33||g35)));
  8027c4:	d0a77b83 	ldbu	r2,-25106(gp)
  8027c8:	10803fcc 	andi	r2,r2,255
  8027cc:	1080201c 	xori	r2,r2,128
  8027d0:	10bfe004 	addi	r2,r2,-128
  8027d4:	1000071e 	bne	r2,zero,8027f4 <tick+0x1ccc>
  8027d8:	d0a77e83 	ldbu	r2,-25094(gp)
  8027dc:	10803fcc 	andi	r2,r2,255
  8027e0:	1080201c 	xori	r2,r2,128
  8027e4:	10bfe004 	addi	r2,r2,-128
  8027e8:	1000021e 	bne	r2,zero,8027f4 <tick+0x1ccc>
  8027ec:	00800044 	movi	r2,1
  8027f0:	00000106 	br	8027f8 <tick+0x1cd0>
  8027f4:	0005883a 	mov	r2,zero
  8027f8:	d0a76e45 	stb	r2,-25159(gp)
      g50_e5 =(!((g41||g44)));
  8027fc:	d0a76943 	ldbu	r2,-25179(gp)
  802800:	10803fcc 	andi	r2,r2,255
  802804:	1080201c 	xori	r2,r2,128
  802808:	10bfe004 	addi	r2,r2,-128
  80280c:	1000071e 	bne	r2,zero,80282c <tick+0x1d04>
  802810:	d0a76183 	ldbu	r2,-25210(gp)
  802814:	10803fcc 	andi	r2,r2,255
  802818:	1080201c 	xori	r2,r2,128
  80281c:	10bfe004 	addi	r2,r2,-128
  802820:	1000021e 	bne	r2,zero,80282c <tick+0x1d04>
  802824:	00800044 	movi	r2,1
  802828:	00000106 	br	802830 <tick+0x1d08>
  80282c:	0005883a 	mov	r2,zero
  802830:	d0a77e05 	stb	r2,-25096(gp)
      g60_e6 =(!((g53||g55||g57)));
  802834:	d0a78ac3 	ldbu	r2,-25045(gp)
  802838:	10803fcc 	andi	r2,r2,255
  80283c:	1080201c 	xori	r2,r2,128
  802840:	10bfe004 	addi	r2,r2,-128
  802844:	10000c1e 	bne	r2,zero,802878 <tick+0x1d50>
  802848:	d0a75903 	ldbu	r2,-25244(gp)
  80284c:	10803fcc 	andi	r2,r2,255
  802850:	1080201c 	xori	r2,r2,128
  802854:	10bfe004 	addi	r2,r2,-128
  802858:	1000071e 	bne	r2,zero,802878 <tick+0x1d50>
  80285c:	d0a78b43 	ldbu	r2,-25043(gp)
  802860:	10803fcc 	andi	r2,r2,255
  802864:	1080201c 	xori	r2,r2,128
  802868:	10bfe004 	addi	r2,r2,-128
  80286c:	1000021e 	bne	r2,zero,802878 <tick+0x1d50>
  802870:	00800044 	movi	r2,1
  802874:	00000106 	br	80287c <tick+0x1d54>
  802878:	0005883a 	mov	r2,zero
  80287c:	d0a78205 	stb	r2,-25080(gp)
      g69_e7 =(!((g63||g66)));
  802880:	d0a78103 	ldbu	r2,-25084(gp)
  802884:	10803fcc 	andi	r2,r2,255
  802888:	1080201c 	xori	r2,r2,128
  80288c:	10bfe004 	addi	r2,r2,-128
  802890:	1000071e 	bne	r2,zero,8028b0 <tick+0x1d88>
  802894:	d0a77583 	ldbu	r2,-25130(gp)
  802898:	10803fcc 	andi	r2,r2,255
  80289c:	1080201c 	xori	r2,r2,128
  8028a0:	10bfe004 	addi	r2,r2,-128
  8028a4:	1000021e 	bne	r2,zero,8028b0 <tick+0x1d88>
  8028a8:	00800044 	movi	r2,1
  8028ac:	00000106 	br	8028b4 <tick+0x1d8c>
  8028b0:	0005883a 	mov	r2,zero
  8028b4:	d0a79405 	stb	r2,-25008(gp)
      g77_e8 =(!((g72||g74)));
  8028b8:	d0a78dc3 	ldbu	r2,-25033(gp)
  8028bc:	10803fcc 	andi	r2,r2,255
  8028c0:	1080201c 	xori	r2,r2,128
  8028c4:	10bfe004 	addi	r2,r2,-128
  8028c8:	1000071e 	bne	r2,zero,8028e8 <tick+0x1dc0>
  8028cc:	d0a7a043 	ldbu	r2,-24959(gp)
  8028d0:	10803fcc 	andi	r2,r2,255
  8028d4:	1080201c 	xori	r2,r2,128
  8028d8:	10bfe004 	addi	r2,r2,-128
  8028dc:	1000021e 	bne	r2,zero,8028e8 <tick+0x1dc0>
  8028e0:	00800044 	movi	r2,1
  8028e4:	00000106 	br	8028ec <tick+0x1dc4>
  8028e8:	0005883a 	mov	r2,zero
  8028ec:	d0a79885 	stb	r2,-24990(gp)
      g89_e9 =(!((g80||g83)));
  8028f0:	d0a77403 	ldbu	r2,-25136(gp)
  8028f4:	10803fcc 	andi	r2,r2,255
  8028f8:	1080201c 	xori	r2,r2,128
  8028fc:	10bfe004 	addi	r2,r2,-128
  802900:	1000071e 	bne	r2,zero,802920 <tick+0x1df8>
  802904:	d0a75603 	ldbu	r2,-25256(gp)
  802908:	10803fcc 	andi	r2,r2,255
  80290c:	1080201c 	xori	r2,r2,128
  802910:	10bfe004 	addi	r2,r2,-128
  802914:	1000021e 	bne	r2,zero,802920 <tick+0x1df8>
  802918:	00800044 	movi	r2,1
  80291c:	00000106 	br	802924 <tick+0x1dfc>
  802920:	0005883a 	mov	r2,zero
  802924:	d0a76445 	stb	r2,-25199(gp)
      g97_e10 =(!((g92||g94)));
  802928:	d0a76383 	ldbu	r2,-25202(gp)
  80292c:	10803fcc 	andi	r2,r2,255
  802930:	1080201c 	xori	r2,r2,128
  802934:	10bfe004 	addi	r2,r2,-128
  802938:	1000071e 	bne	r2,zero,802958 <tick+0x1e30>
  80293c:	d0a771c3 	ldbu	r2,-25145(gp)
  802940:	10803fcc 	andi	r2,r2,255
  802944:	1080201c 	xori	r2,r2,128
  802948:	10bfe004 	addi	r2,r2,-128
  80294c:	1000021e 	bne	r2,zero,802958 <tick+0x1e30>
  802950:	00800044 	movi	r2,1
  802954:	00000106 	br	80295c <tick+0x1e34>
  802958:	0005883a 	mov	r2,zero
  80295c:	d0a77885 	stb	r2,-25118(gp)
      g106_e11 =(!((g100||g103)));
  802960:	d0a77483 	ldbu	r2,-25134(gp)
  802964:	10803fcc 	andi	r2,r2,255
  802968:	1080201c 	xori	r2,r2,128
  80296c:	10bfe004 	addi	r2,r2,-128
  802970:	1000071e 	bne	r2,zero,802990 <tick+0x1e68>
  802974:	d0a75b03 	ldbu	r2,-25236(gp)
  802978:	10803fcc 	andi	r2,r2,255
  80297c:	1080201c 	xori	r2,r2,128
  802980:	10bfe004 	addi	r2,r2,-128
  802984:	1000021e 	bne	r2,zero,802990 <tick+0x1e68>
  802988:	00800044 	movi	r2,1
  80298c:	00000106 	br	802994 <tick+0x1e6c>
  802990:	0005883a 	mov	r2,zero
  802994:	d0a79845 	stb	r2,-24991(gp)
      g113_e12 =(!((g109||g111)));
  802998:	d0a79cc3 	ldbu	r2,-24973(gp)
  80299c:	10803fcc 	andi	r2,r2,255
  8029a0:	1080201c 	xori	r2,r2,128
  8029a4:	10bfe004 	addi	r2,r2,-128
  8029a8:	1000071e 	bne	r2,zero,8029c8 <tick+0x1ea0>
  8029ac:	d0a757c3 	ldbu	r2,-25249(gp)
  8029b0:	10803fcc 	andi	r2,r2,255
  8029b4:	1080201c 	xori	r2,r2,128
  8029b8:	10bfe004 	addi	r2,r2,-128
  8029bc:	1000021e 	bne	r2,zero,8029c8 <tick+0x1ea0>
  8029c0:	00800044 	movi	r2,1
  8029c4:	00000106 	br	8029cc <tick+0x1ea4>
  8029c8:	0005883a 	mov	r2,zero
  8029cc:	d0a79505 	stb	r2,-25004(gp)
      g117_e13 =(!(g116));
  8029d0:	d0a78d03 	ldbu	r2,-25036(gp)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	1005003a 	cmpeq	r2,r2,zero
  8029e4:	d0a79c85 	stb	r2,-24974(gp)
      g121_e14 =(!(g120));
  8029e8:	d0a79ac3 	ldbu	r2,-24981(gp)
  8029ec:	10803fcc 	andi	r2,r2,255
  8029f0:	1080201c 	xori	r2,r2,128
  8029f4:	10bfe004 	addi	r2,r2,-128
  8029f8:	1005003a 	cmpeq	r2,r2,zero
  8029fc:	d0a76285 	stb	r2,-25206(gp)
      g122_fix0 =((g10_e1||g10)&&(g18_e2||g18)&&(g30_e3||g30)&&(g38_e4||g38));
  802a00:	d0a78cc3 	ldbu	r2,-25037(gp)
  802a04:	10803fcc 	andi	r2,r2,255
  802a08:	1080201c 	xori	r2,r2,128
  802a0c:	10bfe004 	addi	r2,r2,-128
  802a10:	1000051e 	bne	r2,zero,802a28 <tick+0x1f00>
  802a14:	d0a79e03 	ldbu	r2,-24968(gp)
  802a18:	10803fcc 	andi	r2,r2,255
  802a1c:	1080201c 	xori	r2,r2,128
  802a20:	10bfe004 	addi	r2,r2,-128
  802a24:	10002026 	beq	r2,zero,802aa8 <tick+0x1f80>
  802a28:	d0a78883 	ldbu	r2,-25054(gp)
  802a2c:	10803fcc 	andi	r2,r2,255
  802a30:	1080201c 	xori	r2,r2,128
  802a34:	10bfe004 	addi	r2,r2,-128
  802a38:	1000051e 	bne	r2,zero,802a50 <tick+0x1f28>
  802a3c:	d0a76ac3 	ldbu	r2,-25173(gp)
  802a40:	10803fcc 	andi	r2,r2,255
  802a44:	1080201c 	xori	r2,r2,128
  802a48:	10bfe004 	addi	r2,r2,-128
  802a4c:	10001626 	beq	r2,zero,802aa8 <tick+0x1f80>
  802a50:	d0a77143 	ldbu	r2,-25147(gp)
  802a54:	10803fcc 	andi	r2,r2,255
  802a58:	1080201c 	xori	r2,r2,128
  802a5c:	10bfe004 	addi	r2,r2,-128
  802a60:	1000051e 	bne	r2,zero,802a78 <tick+0x1f50>
  802a64:	d0a79043 	ldbu	r2,-25023(gp)
  802a68:	10803fcc 	andi	r2,r2,255
  802a6c:	1080201c 	xori	r2,r2,128
  802a70:	10bfe004 	addi	r2,r2,-128
  802a74:	10000c26 	beq	r2,zero,802aa8 <tick+0x1f80>
  802a78:	d0a76e43 	ldbu	r2,-25159(gp)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	1000051e 	bne	r2,zero,802aa0 <tick+0x1f78>
  802a8c:	d0a76d43 	ldbu	r2,-25163(gp)
  802a90:	10803fcc 	andi	r2,r2,255
  802a94:	1080201c 	xori	r2,r2,128
  802a98:	10bfe004 	addi	r2,r2,-128
  802a9c:	10000226 	beq	r2,zero,802aa8 <tick+0x1f80>
  802aa0:	00800044 	movi	r2,1
  802aa4:	00000106 	br	802aac <tick+0x1f84>
  802aa8:	0005883a 	mov	r2,zero
  802aac:	d0a758c5 	stb	r2,-25245(gp)
      g122_fix1 =(g122_fix0&&(g50_e5||g50)&&(g60_e6||g60)&&(g69_e7||g69));
  802ab0:	d0a758c3 	ldbu	r2,-25245(gp)
  802ab4:	10803fcc 	andi	r2,r2,255
  802ab8:	1080201c 	xori	r2,r2,128
  802abc:	10bfe004 	addi	r2,r2,-128
  802ac0:	10002026 	beq	r2,zero,802b44 <tick+0x201c>
  802ac4:	d0a77e03 	ldbu	r2,-25096(gp)
  802ac8:	10803fcc 	andi	r2,r2,255
  802acc:	1080201c 	xori	r2,r2,128
  802ad0:	10bfe004 	addi	r2,r2,-128
  802ad4:	1000051e 	bne	r2,zero,802aec <tick+0x1fc4>
  802ad8:	d0a786c3 	ldbu	r2,-25061(gp)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	10001626 	beq	r2,zero,802b44 <tick+0x201c>
  802aec:	d0a78203 	ldbu	r2,-25080(gp)
  802af0:	10803fcc 	andi	r2,r2,255
  802af4:	1080201c 	xori	r2,r2,128
  802af8:	10bfe004 	addi	r2,r2,-128
  802afc:	1000051e 	bne	r2,zero,802b14 <tick+0x1fec>
  802b00:	d0a781c3 	ldbu	r2,-25081(gp)
  802b04:	10803fcc 	andi	r2,r2,255
  802b08:	1080201c 	xori	r2,r2,128
  802b0c:	10bfe004 	addi	r2,r2,-128
  802b10:	10000c26 	beq	r2,zero,802b44 <tick+0x201c>
  802b14:	d0a79403 	ldbu	r2,-25008(gp)
  802b18:	10803fcc 	andi	r2,r2,255
  802b1c:	1080201c 	xori	r2,r2,128
  802b20:	10bfe004 	addi	r2,r2,-128
  802b24:	1000051e 	bne	r2,zero,802b3c <tick+0x2014>
  802b28:	d0a79ec3 	ldbu	r2,-24965(gp)
  802b2c:	10803fcc 	andi	r2,r2,255
  802b30:	1080201c 	xori	r2,r2,128
  802b34:	10bfe004 	addi	r2,r2,-128
  802b38:	10000226 	beq	r2,zero,802b44 <tick+0x201c>
  802b3c:	00800044 	movi	r2,1
  802b40:	00000106 	br	802b48 <tick+0x2020>
  802b44:	0005883a 	mov	r2,zero
  802b48:	d0a78985 	stb	r2,-25050(gp)
      g122_fix2 =(g122_fix1&&(g77_e8||g77)&&(g89_e9||g89)&&(g97_e10||g97));
  802b4c:	d0a78983 	ldbu	r2,-25050(gp)
  802b50:	10803fcc 	andi	r2,r2,255
  802b54:	1080201c 	xori	r2,r2,128
  802b58:	10bfe004 	addi	r2,r2,-128
  802b5c:	10002026 	beq	r2,zero,802be0 <tick+0x20b8>
  802b60:	d0a79883 	ldbu	r2,-24990(gp)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	1000051e 	bne	r2,zero,802b88 <tick+0x2060>
  802b74:	d0a79583 	ldbu	r2,-25002(gp)
  802b78:	10803fcc 	andi	r2,r2,255
  802b7c:	1080201c 	xori	r2,r2,128
  802b80:	10bfe004 	addi	r2,r2,-128
  802b84:	10001626 	beq	r2,zero,802be0 <tick+0x20b8>
  802b88:	d0a76443 	ldbu	r2,-25199(gp)
  802b8c:	10803fcc 	andi	r2,r2,255
  802b90:	1080201c 	xori	r2,r2,128
  802b94:	10bfe004 	addi	r2,r2,-128
  802b98:	1000051e 	bne	r2,zero,802bb0 <tick+0x2088>
  802b9c:	d0a78583 	ldbu	r2,-25066(gp)
  802ba0:	10803fcc 	andi	r2,r2,255
  802ba4:	1080201c 	xori	r2,r2,128
  802ba8:	10bfe004 	addi	r2,r2,-128
  802bac:	10000c26 	beq	r2,zero,802be0 <tick+0x20b8>
  802bb0:	d0a77883 	ldbu	r2,-25118(gp)
  802bb4:	10803fcc 	andi	r2,r2,255
  802bb8:	1080201c 	xori	r2,r2,128
  802bbc:	10bfe004 	addi	r2,r2,-128
  802bc0:	1000051e 	bne	r2,zero,802bd8 <tick+0x20b0>
  802bc4:	d0a76603 	ldbu	r2,-25192(gp)
  802bc8:	10803fcc 	andi	r2,r2,255
  802bcc:	1080201c 	xori	r2,r2,128
  802bd0:	10bfe004 	addi	r2,r2,-128
  802bd4:	10000226 	beq	r2,zero,802be0 <tick+0x20b8>
  802bd8:	00800044 	movi	r2,1
  802bdc:	00000106 	br	802be4 <tick+0x20bc>
  802be0:	0005883a 	mov	r2,zero
  802be4:	d0a77905 	stb	r2,-25116(gp)
      g122_fix3 =(g10||g18||g30||g38);
  802be8:	d0a79e03 	ldbu	r2,-24968(gp)
  802bec:	10803fcc 	andi	r2,r2,255
  802bf0:	1080201c 	xori	r2,r2,128
  802bf4:	10bfe004 	addi	r2,r2,-128
  802bf8:	10000f1e 	bne	r2,zero,802c38 <tick+0x2110>
  802bfc:	d0a76ac3 	ldbu	r2,-25173(gp)
  802c00:	10803fcc 	andi	r2,r2,255
  802c04:	1080201c 	xori	r2,r2,128
  802c08:	10bfe004 	addi	r2,r2,-128
  802c0c:	10000a1e 	bne	r2,zero,802c38 <tick+0x2110>
  802c10:	d0a79043 	ldbu	r2,-25023(gp)
  802c14:	10803fcc 	andi	r2,r2,255
  802c18:	1080201c 	xori	r2,r2,128
  802c1c:	10bfe004 	addi	r2,r2,-128
  802c20:	1000051e 	bne	r2,zero,802c38 <tick+0x2110>
  802c24:	d0a76d43 	ldbu	r2,-25163(gp)
  802c28:	10803fcc 	andi	r2,r2,255
  802c2c:	1080201c 	xori	r2,r2,128
  802c30:	10bfe004 	addi	r2,r2,-128
  802c34:	10000226 	beq	r2,zero,802c40 <tick+0x2118>
  802c38:	00800044 	movi	r2,1
  802c3c:	00000106 	br	802c44 <tick+0x211c>
  802c40:	0005883a 	mov	r2,zero
  802c44:	d0a780c5 	stb	r2,-25085(gp)
      g122_fix4 =(g122_fix3||g50||g60||g69);
  802c48:	d0a780c3 	ldbu	r2,-25085(gp)
  802c4c:	10803fcc 	andi	r2,r2,255
  802c50:	1080201c 	xori	r2,r2,128
  802c54:	10bfe004 	addi	r2,r2,-128
  802c58:	10000f1e 	bne	r2,zero,802c98 <tick+0x2170>
  802c5c:	d0a786c3 	ldbu	r2,-25061(gp)
  802c60:	10803fcc 	andi	r2,r2,255
  802c64:	1080201c 	xori	r2,r2,128
  802c68:	10bfe004 	addi	r2,r2,-128
  802c6c:	10000a1e 	bne	r2,zero,802c98 <tick+0x2170>
  802c70:	d0a781c3 	ldbu	r2,-25081(gp)
  802c74:	10803fcc 	andi	r2,r2,255
  802c78:	1080201c 	xori	r2,r2,128
  802c7c:	10bfe004 	addi	r2,r2,-128
  802c80:	1000051e 	bne	r2,zero,802c98 <tick+0x2170>
  802c84:	d0a79ec3 	ldbu	r2,-24965(gp)
  802c88:	10803fcc 	andi	r2,r2,255
  802c8c:	1080201c 	xori	r2,r2,128
  802c90:	10bfe004 	addi	r2,r2,-128
  802c94:	10000226 	beq	r2,zero,802ca0 <tick+0x2178>
  802c98:	00800044 	movi	r2,1
  802c9c:	00000106 	br	802ca4 <tick+0x217c>
  802ca0:	0005883a 	mov	r2,zero
  802ca4:	d0a78e45 	stb	r2,-25031(gp)
      g122_e1_fix_fix =(g94||g111||g7||g24||g44||g66||g83||g103||g116);
  802ca8:	d0a771c3 	ldbu	r2,-25145(gp)
  802cac:	10803fcc 	andi	r2,r2,255
  802cb0:	1080201c 	xori	r2,r2,128
  802cb4:	10bfe004 	addi	r2,r2,-128
  802cb8:	1000281e 	bne	r2,zero,802d5c <tick+0x2234>
  802cbc:	d0a757c3 	ldbu	r2,-25249(gp)
  802cc0:	10803fcc 	andi	r2,r2,255
  802cc4:	1080201c 	xori	r2,r2,128
  802cc8:	10bfe004 	addi	r2,r2,-128
  802ccc:	1000231e 	bne	r2,zero,802d5c <tick+0x2234>
  802cd0:	d0a77343 	ldbu	r2,-25139(gp)
  802cd4:	10803fcc 	andi	r2,r2,255
  802cd8:	1080201c 	xori	r2,r2,128
  802cdc:	10bfe004 	addi	r2,r2,-128
  802ce0:	10001e1e 	bne	r2,zero,802d5c <tick+0x2234>
  802ce4:	d0a79c03 	ldbu	r2,-24976(gp)
  802ce8:	10803fcc 	andi	r2,r2,255
  802cec:	1080201c 	xori	r2,r2,128
  802cf0:	10bfe004 	addi	r2,r2,-128
  802cf4:	1000191e 	bne	r2,zero,802d5c <tick+0x2234>
  802cf8:	d0a76183 	ldbu	r2,-25210(gp)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	1000141e 	bne	r2,zero,802d5c <tick+0x2234>
  802d0c:	d0a77583 	ldbu	r2,-25130(gp)
  802d10:	10803fcc 	andi	r2,r2,255
  802d14:	1080201c 	xori	r2,r2,128
  802d18:	10bfe004 	addi	r2,r2,-128
  802d1c:	10000f1e 	bne	r2,zero,802d5c <tick+0x2234>
  802d20:	d0a75603 	ldbu	r2,-25256(gp)
  802d24:	10803fcc 	andi	r2,r2,255
  802d28:	1080201c 	xori	r2,r2,128
  802d2c:	10bfe004 	addi	r2,r2,-128
  802d30:	10000a1e 	bne	r2,zero,802d5c <tick+0x2234>
  802d34:	d0a75b03 	ldbu	r2,-25236(gp)
  802d38:	10803fcc 	andi	r2,r2,255
  802d3c:	1080201c 	xori	r2,r2,128
  802d40:	10bfe004 	addi	r2,r2,-128
  802d44:	1000051e 	bne	r2,zero,802d5c <tick+0x2234>
  802d48:	d0a78d03 	ldbu	r2,-25036(gp)
  802d4c:	10803fcc 	andi	r2,r2,255
  802d50:	1080201c 	xori	r2,r2,128
  802d54:	10bfe004 	addi	r2,r2,-128
  802d58:	10000226 	beq	r2,zero,802d64 <tick+0x223c>
  802d5c:	00800044 	movi	r2,1
  802d60:	00000106 	br	802d68 <tick+0x2240>
  802d64:	0005883a 	mov	r2,zero
  802d68:	d0a75f85 	stb	r2,-25218(gp)
      g122_e1_fix =(g80||g92||g100||g109||g15||g35||g55||g74||g57||g122_e1_fix_fix);
  802d6c:	d0a77403 	ldbu	r2,-25136(gp)
  802d70:	10803fcc 	andi	r2,r2,255
  802d74:	1080201c 	xori	r2,r2,128
  802d78:	10bfe004 	addi	r2,r2,-128
  802d7c:	10002d1e 	bne	r2,zero,802e34 <tick+0x230c>
  802d80:	d0a76383 	ldbu	r2,-25202(gp)
  802d84:	10803fcc 	andi	r2,r2,255
  802d88:	1080201c 	xori	r2,r2,128
  802d8c:	10bfe004 	addi	r2,r2,-128
  802d90:	1000281e 	bne	r2,zero,802e34 <tick+0x230c>
  802d94:	d0a77483 	ldbu	r2,-25134(gp)
  802d98:	10803fcc 	andi	r2,r2,255
  802d9c:	1080201c 	xori	r2,r2,128
  802da0:	10bfe004 	addi	r2,r2,-128
  802da4:	1000231e 	bne	r2,zero,802e34 <tick+0x230c>
  802da8:	d0a79cc3 	ldbu	r2,-24973(gp)
  802dac:	10803fcc 	andi	r2,r2,255
  802db0:	1080201c 	xori	r2,r2,128
  802db4:	10bfe004 	addi	r2,r2,-128
  802db8:	10001e1e 	bne	r2,zero,802e34 <tick+0x230c>
  802dbc:	d0a77ec3 	ldbu	r2,-25093(gp)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	1000191e 	bne	r2,zero,802e34 <tick+0x230c>
  802dd0:	d0a77e83 	ldbu	r2,-25094(gp)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	1000141e 	bne	r2,zero,802e34 <tick+0x230c>
  802de4:	d0a75903 	ldbu	r2,-25244(gp)
  802de8:	10803fcc 	andi	r2,r2,255
  802dec:	1080201c 	xori	r2,r2,128
  802df0:	10bfe004 	addi	r2,r2,-128
  802df4:	10000f1e 	bne	r2,zero,802e34 <tick+0x230c>
  802df8:	d0a7a043 	ldbu	r2,-24959(gp)
  802dfc:	10803fcc 	andi	r2,r2,255
  802e00:	1080201c 	xori	r2,r2,128
  802e04:	10bfe004 	addi	r2,r2,-128
  802e08:	10000a1e 	bne	r2,zero,802e34 <tick+0x230c>
  802e0c:	d0a78b43 	ldbu	r2,-25043(gp)
  802e10:	10803fcc 	andi	r2,r2,255
  802e14:	1080201c 	xori	r2,r2,128
  802e18:	10bfe004 	addi	r2,r2,-128
  802e1c:	1000051e 	bne	r2,zero,802e34 <tick+0x230c>
  802e20:	d0a75f83 	ldbu	r2,-25218(gp)
  802e24:	10803fcc 	andi	r2,r2,255
  802e28:	1080201c 	xori	r2,r2,128
  802e2c:	10bfe004 	addi	r2,r2,-128
  802e30:	10000226 	beq	r2,zero,802e3c <tick+0x2314>
  802e34:	00800044 	movi	r2,1
  802e38:	00000106 	br	802e40 <tick+0x2318>
  802e3c:	0005883a 	mov	r2,zero
  802e40:	d0a78b85 	stb	r2,-25042(gp)
      g122_e1 =(!((g4||g13||g21||g33||g41||g53||g63||g72||g120||g122_e1_fix)));
  802e44:	d0a75703 	ldbu	r2,-25252(gp)
  802e48:	10803fcc 	andi	r2,r2,255
  802e4c:	1080201c 	xori	r2,r2,128
  802e50:	10bfe004 	addi	r2,r2,-128
  802e54:	10002f1e 	bne	r2,zero,802f14 <tick+0x23ec>
  802e58:	d0a789c3 	ldbu	r2,-25049(gp)
  802e5c:	10803fcc 	andi	r2,r2,255
  802e60:	1080201c 	xori	r2,r2,128
  802e64:	10bfe004 	addi	r2,r2,-128
  802e68:	10002a1e 	bne	r2,zero,802f14 <tick+0x23ec>
  802e6c:	d0a76fc3 	ldbu	r2,-25153(gp)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	1000251e 	bne	r2,zero,802f14 <tick+0x23ec>
  802e80:	d0a77b83 	ldbu	r2,-25106(gp)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	1000201e 	bne	r2,zero,802f14 <tick+0x23ec>
  802e94:	d0a76943 	ldbu	r2,-25179(gp)
  802e98:	10803fcc 	andi	r2,r2,255
  802e9c:	1080201c 	xori	r2,r2,128
  802ea0:	10bfe004 	addi	r2,r2,-128
  802ea4:	10001b1e 	bne	r2,zero,802f14 <tick+0x23ec>
  802ea8:	d0a78ac3 	ldbu	r2,-25045(gp)
  802eac:	10803fcc 	andi	r2,r2,255
  802eb0:	1080201c 	xori	r2,r2,128
  802eb4:	10bfe004 	addi	r2,r2,-128
  802eb8:	1000161e 	bne	r2,zero,802f14 <tick+0x23ec>
  802ebc:	d0a78103 	ldbu	r2,-25084(gp)
  802ec0:	10803fcc 	andi	r2,r2,255
  802ec4:	1080201c 	xori	r2,r2,128
  802ec8:	10bfe004 	addi	r2,r2,-128
  802ecc:	1000111e 	bne	r2,zero,802f14 <tick+0x23ec>
  802ed0:	d0a78dc3 	ldbu	r2,-25033(gp)
  802ed4:	10803fcc 	andi	r2,r2,255
  802ed8:	1080201c 	xori	r2,r2,128
  802edc:	10bfe004 	addi	r2,r2,-128
  802ee0:	10000c1e 	bne	r2,zero,802f14 <tick+0x23ec>
  802ee4:	d0a79ac3 	ldbu	r2,-24981(gp)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000071e 	bne	r2,zero,802f14 <tick+0x23ec>
  802ef8:	d0a78b83 	ldbu	r2,-25042(gp)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	1000021e 	bne	r2,zero,802f14 <tick+0x23ec>
  802f0c:	00800044 	movi	r2,1
  802f10:	00000106 	br	802f18 <tick+0x23f0>
  802f14:	0005883a 	mov	r2,zero
  802f18:	d0a76c45 	stb	r2,-25167(gp)
      g126_e2 =(!(g125));
  802f1c:	d0a79543 	ldbu	r2,-25003(gp)
  802f20:	10803fcc 	andi	r2,r2,255
  802f24:	1080201c 	xori	r2,r2,128
  802f28:	10bfe004 	addi	r2,r2,-128
  802f2c:	1005003a 	cmpeq	r2,r2,zero
  802f30:	d0a764c5 	stb	r2,-25197(gp)
      g130_e3 =(!(g129));
  802f34:	d0a77a43 	ldbu	r2,-25111(gp)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	1080201c 	xori	r2,r2,128
  802f40:	10bfe004 	addi	r2,r2,-128
  802f44:	1005003a 	cmpeq	r2,r2,zero
  802f48:	d0a761c5 	stb	r2,-25209(gp)
   }
   PRE_g3 = g3;
  802f4c:	d0a75ac3 	ldbu	r2,-25237(gp)
  802f50:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g6 = g6;
  802f54:	d0a78d43 	ldbu	r2,-25035(gp)
  802f58:	d0a77b05 	stb	r2,-25108(gp)
   PRE_g12 = g12;
  802f5c:	d0a765c3 	ldbu	r2,-25193(gp)
  802f60:	d0a77045 	stb	r2,-25151(gp)
   PRE_g14 = g14;
  802f64:	d0a77783 	ldbu	r2,-25122(gp)
  802f68:	d0a784c5 	stb	r2,-25069(gp)
   PRE_g20 = g20;
  802f6c:	d0a78143 	ldbu	r2,-25083(gp)
  802f70:	d0a76305 	stb	r2,-25204(gp)
   PRE_g23 = g23;
  802f74:	d0a775c3 	ldbu	r2,-25129(gp)
  802f78:	d0a75885 	stb	r2,-25246(gp)
   PRE_g32 = g32;
  802f7c:	d0a795c3 	ldbu	r2,-25001(gp)
  802f80:	d0a76105 	stb	r2,-25212(gp)
   PRE_g34 = g34;
  802f84:	d0a77103 	ldbu	r2,-25148(gp)
  802f88:	d0a767c5 	stb	r2,-25185(gp)
   PRE_g40 = g40;
  802f8c:	d0a75643 	ldbu	r2,-25255(gp)
  802f90:	d0a76a05 	stb	r2,-25176(gp)
   PRE_g43 = g43;
  802f94:	d0a78383 	ldbu	r2,-25074(gp)
  802f98:	d0a783c5 	stb	r2,-25073(gp)
   PRE_g52 = g52;
  802f9c:	d0a76643 	ldbu	r2,-25191(gp)
  802fa0:	d0a77a05 	stb	r2,-25112(gp)
   PRE_g54 = g54;
  802fa4:	d0a77543 	ldbu	r2,-25131(gp)
  802fa8:	d0a78045 	stb	r2,-25087(gp)
   PRE_g56 = g56;
  802fac:	d0a779c3 	ldbu	r2,-25113(gp)
  802fb0:	d0a760c5 	stb	r2,-25213(gp)
   PRE_g62 = g62;
  802fb4:	d0a768c3 	ldbu	r2,-25181(gp)
  802fb8:	d0a78505 	stb	r2,-25068(gp)
   PRE_g65 = g65;
  802fbc:	d0a79383 	ldbu	r2,-25010(gp)
  802fc0:	d0a762c5 	stb	r2,-25205(gp)
   PRE_g71 = g71;
  802fc4:	d0a76483 	ldbu	r2,-25198(gp)
  802fc8:	d0a77745 	stb	r2,-25123(gp)
   PRE_g73 = g73;
  802fcc:	d0a79483 	ldbu	r2,-25006(gp)
  802fd0:	d0a798c5 	stb	r2,-24989(gp)
   PRE_g79 = g79;
  802fd4:	d0a770c3 	ldbu	r2,-25149(gp)
  802fd8:	d0a777c5 	stb	r2,-25121(gp)
   PRE_g82 = g82;
  802fdc:	d0a76543 	ldbu	r2,-25195(gp)
  802fe0:	d0a79705 	stb	r2,-24996(gp)
   PRE_g91 = g91;
  802fe4:	d0a75683 	ldbu	r2,-25254(gp)
  802fe8:	d0a78085 	stb	r2,-25086(gp)
   PRE_g93 = g93;
  802fec:	d0a78243 	ldbu	r2,-25079(gp)
  802ff0:	d0a79305 	stb	r2,-25012(gp)
   PRE_g99 = g99;
  802ff4:	d0a77503 	ldbu	r2,-25132(gp)
  802ff8:	d0a78f85 	stb	r2,-25026(gp)
   PRE_g102 = g102;
  802ffc:	d0a75f43 	ldbu	r2,-25219(gp)
  803000:	d0a75805 	stb	r2,-25248(gp)
   PRE_g108 = g108;
  803004:	d0a75743 	ldbu	r2,-25251(gp)
  803008:	d0a79b05 	stb	r2,-24980(gp)
   PRE_g110 = g110;
  80300c:	d0a77243 	ldbu	r2,-25143(gp)
  803010:	d0a78e85 	stb	r2,-25030(gp)
   PRE_g115 = g115;
  803014:	d0a75fc3 	ldbu	r2,-25217(gp)
  803018:	d0a78a45 	stb	r2,-25047(gp)
   PRE_g119 = g119;
  80301c:	d0a78283 	ldbu	r2,-25078(gp)
  803020:	d0a77c05 	stb	r2,-25104(gp)
   PRE_g124 = g124;
  803024:	d0a78ec3 	ldbu	r2,-25029(gp)
  803028:	d0a76b05 	stb	r2,-25172(gp)
   PRE_g128 = g128;
  80302c:	d0a77443 	ldbu	r2,-25135(gp)
  803030:	d0a75a85 	stb	r2,-25238(gp)
   _PRE_GO = _GO;
  803034:	d0a77f43 	ldbu	r2,-25091(gp)
  803038:	10803fcc 	andi	r2,r2,255
  80303c:	1080201c 	xori	r2,r2,128
  803040:	10bfe004 	addi	r2,r2,-128
  803044:	d0a75e15 	stw	r2,-25224(gp)
   return;
  803048:	0001883a 	nop
}
  80304c:	e037883a 	mov	sp,fp
  803050:	df000017 	ldw	fp,0(sp)
  803054:	dec00104 	addi	sp,sp,4
  803058:	f800283a 	ret

0080305c <__divsi3>:
  80305c:	20001b16 	blt	r4,zero,8030cc <__divsi3+0x70>
  803060:	000f883a 	mov	r7,zero
  803064:	28001616 	blt	r5,zero,8030c0 <__divsi3+0x64>
  803068:	200d883a 	mov	r6,r4
  80306c:	29001a2e 	bgeu	r5,r4,8030d8 <__divsi3+0x7c>
  803070:	00800804 	movi	r2,32
  803074:	00c00044 	movi	r3,1
  803078:	00000106 	br	803080 <__divsi3+0x24>
  80307c:	10000d26 	beq	r2,zero,8030b4 <__divsi3+0x58>
  803080:	294b883a 	add	r5,r5,r5
  803084:	10bfffc4 	addi	r2,r2,-1
  803088:	18c7883a 	add	r3,r3,r3
  80308c:	293ffb36 	bltu	r5,r4,80307c <__alt_mem_onchip_mem+0xff78307c>
  803090:	0005883a 	mov	r2,zero
  803094:	18000726 	beq	r3,zero,8030b4 <__divsi3+0x58>
  803098:	0005883a 	mov	r2,zero
  80309c:	31400236 	bltu	r6,r5,8030a8 <__divsi3+0x4c>
  8030a0:	314dc83a 	sub	r6,r6,r5
  8030a4:	10c4b03a 	or	r2,r2,r3
  8030a8:	1806d07a 	srli	r3,r3,1
  8030ac:	280ad07a 	srli	r5,r5,1
  8030b0:	183ffa1e 	bne	r3,zero,80309c <__alt_mem_onchip_mem+0xff78309c>
  8030b4:	38000126 	beq	r7,zero,8030bc <__divsi3+0x60>
  8030b8:	0085c83a 	sub	r2,zero,r2
  8030bc:	f800283a 	ret
  8030c0:	014bc83a 	sub	r5,zero,r5
  8030c4:	39c0005c 	xori	r7,r7,1
  8030c8:	003fe706 	br	803068 <__alt_mem_onchip_mem+0xff783068>
  8030cc:	0109c83a 	sub	r4,zero,r4
  8030d0:	01c00044 	movi	r7,1
  8030d4:	003fe306 	br	803064 <__alt_mem_onchip_mem+0xff783064>
  8030d8:	00c00044 	movi	r3,1
  8030dc:	003fee06 	br	803098 <__alt_mem_onchip_mem+0xff783098>

008030e0 <__modsi3>:
  8030e0:	20001716 	blt	r4,zero,803140 <__modsi3+0x60>
  8030e4:	000f883a 	mov	r7,zero
  8030e8:	2005883a 	mov	r2,r4
  8030ec:	28001216 	blt	r5,zero,803138 <__modsi3+0x58>
  8030f0:	2900162e 	bgeu	r5,r4,80314c <__modsi3+0x6c>
  8030f4:	01800804 	movi	r6,32
  8030f8:	00c00044 	movi	r3,1
  8030fc:	00000106 	br	803104 <__modsi3+0x24>
  803100:	30000a26 	beq	r6,zero,80312c <__modsi3+0x4c>
  803104:	294b883a 	add	r5,r5,r5
  803108:	31bfffc4 	addi	r6,r6,-1
  80310c:	18c7883a 	add	r3,r3,r3
  803110:	293ffb36 	bltu	r5,r4,803100 <__alt_mem_onchip_mem+0xff783100>
  803114:	18000526 	beq	r3,zero,80312c <__modsi3+0x4c>
  803118:	1806d07a 	srli	r3,r3,1
  80311c:	11400136 	bltu	r2,r5,803124 <__modsi3+0x44>
  803120:	1145c83a 	sub	r2,r2,r5
  803124:	280ad07a 	srli	r5,r5,1
  803128:	183ffb1e 	bne	r3,zero,803118 <__alt_mem_onchip_mem+0xff783118>
  80312c:	38000126 	beq	r7,zero,803134 <__modsi3+0x54>
  803130:	0085c83a 	sub	r2,zero,r2
  803134:	f800283a 	ret
  803138:	014bc83a 	sub	r5,zero,r5
  80313c:	003fec06 	br	8030f0 <__alt_mem_onchip_mem+0xff7830f0>
  803140:	0109c83a 	sub	r4,zero,r4
  803144:	01c00044 	movi	r7,1
  803148:	003fe706 	br	8030e8 <__alt_mem_onchip_mem+0xff7830e8>
  80314c:	00c00044 	movi	r3,1
  803150:	003ff106 	br	803118 <__alt_mem_onchip_mem+0xff783118>

00803154 <__udivsi3>:
  803154:	200d883a 	mov	r6,r4
  803158:	2900152e 	bgeu	r5,r4,8031b0 <__udivsi3+0x5c>
  80315c:	28001416 	blt	r5,zero,8031b0 <__udivsi3+0x5c>
  803160:	00800804 	movi	r2,32
  803164:	00c00044 	movi	r3,1
  803168:	00000206 	br	803174 <__udivsi3+0x20>
  80316c:	10000e26 	beq	r2,zero,8031a8 <__udivsi3+0x54>
  803170:	28000516 	blt	r5,zero,803188 <__udivsi3+0x34>
  803174:	294b883a 	add	r5,r5,r5
  803178:	10bfffc4 	addi	r2,r2,-1
  80317c:	18c7883a 	add	r3,r3,r3
  803180:	293ffa36 	bltu	r5,r4,80316c <__alt_mem_onchip_mem+0xff78316c>
  803184:	18000826 	beq	r3,zero,8031a8 <__udivsi3+0x54>
  803188:	0005883a 	mov	r2,zero
  80318c:	31400236 	bltu	r6,r5,803198 <__udivsi3+0x44>
  803190:	314dc83a 	sub	r6,r6,r5
  803194:	10c4b03a 	or	r2,r2,r3
  803198:	1806d07a 	srli	r3,r3,1
  80319c:	280ad07a 	srli	r5,r5,1
  8031a0:	183ffa1e 	bne	r3,zero,80318c <__alt_mem_onchip_mem+0xff78318c>
  8031a4:	f800283a 	ret
  8031a8:	0005883a 	mov	r2,zero
  8031ac:	f800283a 	ret
  8031b0:	00c00044 	movi	r3,1
  8031b4:	003ff406 	br	803188 <__alt_mem_onchip_mem+0xff783188>

008031b8 <__umodsi3>:
  8031b8:	2005883a 	mov	r2,r4
  8031bc:	2900122e 	bgeu	r5,r4,803208 <__umodsi3+0x50>
  8031c0:	28001116 	blt	r5,zero,803208 <__umodsi3+0x50>
  8031c4:	01800804 	movi	r6,32
  8031c8:	00c00044 	movi	r3,1
  8031cc:	00000206 	br	8031d8 <__umodsi3+0x20>
  8031d0:	30000c26 	beq	r6,zero,803204 <__umodsi3+0x4c>
  8031d4:	28000516 	blt	r5,zero,8031ec <__umodsi3+0x34>
  8031d8:	294b883a 	add	r5,r5,r5
  8031dc:	31bfffc4 	addi	r6,r6,-1
  8031e0:	18c7883a 	add	r3,r3,r3
  8031e4:	293ffa36 	bltu	r5,r4,8031d0 <__alt_mem_onchip_mem+0xff7831d0>
  8031e8:	18000626 	beq	r3,zero,803204 <__umodsi3+0x4c>
  8031ec:	1806d07a 	srli	r3,r3,1
  8031f0:	11400136 	bltu	r2,r5,8031f8 <__umodsi3+0x40>
  8031f4:	1145c83a 	sub	r2,r2,r5
  8031f8:	280ad07a 	srli	r5,r5,1
  8031fc:	183ffb1e 	bne	r3,zero,8031ec <__alt_mem_onchip_mem+0xff7831ec>
  803200:	f800283a 	ret
  803204:	f800283a 	ret
  803208:	00c00044 	movi	r3,1
  80320c:	003ff706 	br	8031ec <__alt_mem_onchip_mem+0xff7831ec>

00803210 <_printf_r>:
  803210:	defffd04 	addi	sp,sp,-12
  803214:	2805883a 	mov	r2,r5
  803218:	dfc00015 	stw	ra,0(sp)
  80321c:	d9800115 	stw	r6,4(sp)
  803220:	d9c00215 	stw	r7,8(sp)
  803224:	21400217 	ldw	r5,8(r4)
  803228:	d9c00104 	addi	r7,sp,4
  80322c:	100d883a 	mov	r6,r2
  803230:	08033e80 	call	8033e8 <___vfprintf_internal_r>
  803234:	dfc00017 	ldw	ra,0(sp)
  803238:	dec00304 	addi	sp,sp,12
  80323c:	f800283a 	ret

00803240 <printf>:
  803240:	defffc04 	addi	sp,sp,-16
  803244:	dfc00015 	stw	ra,0(sp)
  803248:	d9400115 	stw	r5,4(sp)
  80324c:	d9800215 	stw	r6,8(sp)
  803250:	d9c00315 	stw	r7,12(sp)
  803254:	00802074 	movhi	r2,129
  803258:	10978d04 	addi	r2,r2,24116
  80325c:	10800017 	ldw	r2,0(r2)
  803260:	200b883a 	mov	r5,r4
  803264:	d9800104 	addi	r6,sp,4
  803268:	11000217 	ldw	r4,8(r2)
  80326c:	08055e00 	call	8055e0 <__vfprintf_internal>
  803270:	dfc00017 	ldw	ra,0(sp)
  803274:	dec00404 	addi	sp,sp,16
  803278:	f800283a 	ret

0080327c <_puts_r>:
  80327c:	defff604 	addi	sp,sp,-40
  803280:	dc000715 	stw	r16,28(sp)
  803284:	2021883a 	mov	r16,r4
  803288:	2809883a 	mov	r4,r5
  80328c:	dc400815 	stw	r17,32(sp)
  803290:	dfc00915 	stw	ra,36(sp)
  803294:	2823883a 	mov	r17,r5
  803298:	08033500 	call	803350 <strlen>
  80329c:	10c00044 	addi	r3,r2,1
  8032a0:	d8800115 	stw	r2,4(sp)
  8032a4:	00802074 	movhi	r2,129
  8032a8:	108f0404 	addi	r2,r2,15376
  8032ac:	d8800215 	stw	r2,8(sp)
  8032b0:	00800044 	movi	r2,1
  8032b4:	d8800315 	stw	r2,12(sp)
  8032b8:	00800084 	movi	r2,2
  8032bc:	dc400015 	stw	r17,0(sp)
  8032c0:	d8c00615 	stw	r3,24(sp)
  8032c4:	dec00415 	stw	sp,16(sp)
  8032c8:	d8800515 	stw	r2,20(sp)
  8032cc:	80000226 	beq	r16,zero,8032d8 <_puts_r+0x5c>
  8032d0:	80800e17 	ldw	r2,56(r16)
  8032d4:	10001426 	beq	r2,zero,803328 <_puts_r+0xac>
  8032d8:	81400217 	ldw	r5,8(r16)
  8032dc:	2880030b 	ldhu	r2,12(r5)
  8032e0:	10c8000c 	andi	r3,r2,8192
  8032e4:	1800061e 	bne	r3,zero,803300 <_puts_r+0x84>
  8032e8:	29001917 	ldw	r4,100(r5)
  8032ec:	00f7ffc4 	movi	r3,-8193
  8032f0:	10880014 	ori	r2,r2,8192
  8032f4:	20c6703a 	and	r3,r4,r3
  8032f8:	2880030d 	sth	r2,12(r5)
  8032fc:	28c01915 	stw	r3,100(r5)
  803300:	d9800404 	addi	r6,sp,16
  803304:	8009883a 	mov	r4,r16
  803308:	0807b100 	call	807b10 <__sfvwrite_r>
  80330c:	1000091e 	bne	r2,zero,803334 <_puts_r+0xb8>
  803310:	00800284 	movi	r2,10
  803314:	dfc00917 	ldw	ra,36(sp)
  803318:	dc400817 	ldw	r17,32(sp)
  80331c:	dc000717 	ldw	r16,28(sp)
  803320:	dec00a04 	addi	sp,sp,40
  803324:	f800283a 	ret
  803328:	8009883a 	mov	r4,r16
  80332c:	080768c0 	call	80768c <__sinit>
  803330:	003fe906 	br	8032d8 <__alt_mem_onchip_mem+0xff7832d8>
  803334:	00bfffc4 	movi	r2,-1
  803338:	003ff606 	br	803314 <__alt_mem_onchip_mem+0xff783314>

0080333c <puts>:
  80333c:	00802074 	movhi	r2,129
  803340:	10978d04 	addi	r2,r2,24116
  803344:	200b883a 	mov	r5,r4
  803348:	11000017 	ldw	r4,0(r2)
  80334c:	080327c1 	jmpi	80327c <_puts_r>

00803350 <strlen>:
  803350:	208000cc 	andi	r2,r4,3
  803354:	10002026 	beq	r2,zero,8033d8 <strlen+0x88>
  803358:	20800007 	ldb	r2,0(r4)
  80335c:	10002026 	beq	r2,zero,8033e0 <strlen+0x90>
  803360:	2005883a 	mov	r2,r4
  803364:	00000206 	br	803370 <strlen+0x20>
  803368:	10c00007 	ldb	r3,0(r2)
  80336c:	18001826 	beq	r3,zero,8033d0 <strlen+0x80>
  803370:	10800044 	addi	r2,r2,1
  803374:	10c000cc 	andi	r3,r2,3
  803378:	183ffb1e 	bne	r3,zero,803368 <__alt_mem_onchip_mem+0xff783368>
  80337c:	10c00017 	ldw	r3,0(r2)
  803380:	01ffbff4 	movhi	r7,65279
  803384:	39ffbfc4 	addi	r7,r7,-257
  803388:	00ca303a 	nor	r5,zero,r3
  80338c:	01a02074 	movhi	r6,32897
  803390:	19c7883a 	add	r3,r3,r7
  803394:	31a02004 	addi	r6,r6,-32640
  803398:	1946703a 	and	r3,r3,r5
  80339c:	1986703a 	and	r3,r3,r6
  8033a0:	1800091e 	bne	r3,zero,8033c8 <strlen+0x78>
  8033a4:	10800104 	addi	r2,r2,4
  8033a8:	10c00017 	ldw	r3,0(r2)
  8033ac:	19cb883a 	add	r5,r3,r7
  8033b0:	00c6303a 	nor	r3,zero,r3
  8033b4:	28c6703a 	and	r3,r5,r3
  8033b8:	1986703a 	and	r3,r3,r6
  8033bc:	183ff926 	beq	r3,zero,8033a4 <__alt_mem_onchip_mem+0xff7833a4>
  8033c0:	00000106 	br	8033c8 <strlen+0x78>
  8033c4:	10800044 	addi	r2,r2,1
  8033c8:	10c00007 	ldb	r3,0(r2)
  8033cc:	183ffd1e 	bne	r3,zero,8033c4 <__alt_mem_onchip_mem+0xff7833c4>
  8033d0:	1105c83a 	sub	r2,r2,r4
  8033d4:	f800283a 	ret
  8033d8:	2005883a 	mov	r2,r4
  8033dc:	003fe706 	br	80337c <__alt_mem_onchip_mem+0xff78337c>
  8033e0:	0005883a 	mov	r2,zero
  8033e4:	f800283a 	ret

008033e8 <___vfprintf_internal_r>:
  8033e8:	deffb804 	addi	sp,sp,-288
  8033ec:	dfc04715 	stw	ra,284(sp)
  8033f0:	ddc04515 	stw	r23,276(sp)
  8033f4:	dd404315 	stw	r21,268(sp)
  8033f8:	d9002c15 	stw	r4,176(sp)
  8033fc:	282f883a 	mov	r23,r5
  803400:	302b883a 	mov	r21,r6
  803404:	d9c02d15 	stw	r7,180(sp)
  803408:	df004615 	stw	fp,280(sp)
  80340c:	dd804415 	stw	r22,272(sp)
  803410:	dd004215 	stw	r20,264(sp)
  803414:	dcc04115 	stw	r19,260(sp)
  803418:	dc804015 	stw	r18,256(sp)
  80341c:	dc403f15 	stw	r17,252(sp)
  803420:	dc003e15 	stw	r16,248(sp)
  803424:	08082000 	call	808200 <_localeconv_r>
  803428:	10800017 	ldw	r2,0(r2)
  80342c:	1009883a 	mov	r4,r2
  803430:	d8803415 	stw	r2,208(sp)
  803434:	08033500 	call	803350 <strlen>
  803438:	d8803715 	stw	r2,220(sp)
  80343c:	d8802c17 	ldw	r2,176(sp)
  803440:	10000226 	beq	r2,zero,80344c <___vfprintf_internal_r+0x64>
  803444:	10800e17 	ldw	r2,56(r2)
  803448:	1000f926 	beq	r2,zero,803830 <___vfprintf_internal_r+0x448>
  80344c:	b880030b 	ldhu	r2,12(r23)
  803450:	10c8000c 	andi	r3,r2,8192
  803454:	1800061e 	bne	r3,zero,803470 <___vfprintf_internal_r+0x88>
  803458:	b9001917 	ldw	r4,100(r23)
  80345c:	00f7ffc4 	movi	r3,-8193
  803460:	10880014 	ori	r2,r2,8192
  803464:	20c6703a 	and	r3,r4,r3
  803468:	b880030d 	sth	r2,12(r23)
  80346c:	b8c01915 	stw	r3,100(r23)
  803470:	10c0020c 	andi	r3,r2,8
  803474:	1800c126 	beq	r3,zero,80377c <___vfprintf_internal_r+0x394>
  803478:	b8c00417 	ldw	r3,16(r23)
  80347c:	1800bf26 	beq	r3,zero,80377c <___vfprintf_internal_r+0x394>
  803480:	1080068c 	andi	r2,r2,26
  803484:	00c00284 	movi	r3,10
  803488:	10c0c426 	beq	r2,r3,80379c <___vfprintf_internal_r+0x3b4>
  80348c:	d8c00404 	addi	r3,sp,16
  803490:	05002074 	movhi	r20,129
  803494:	d9001e04 	addi	r4,sp,120
  803498:	a50f1584 	addi	r20,r20,15446
  80349c:	d8c01e15 	stw	r3,120(sp)
  8034a0:	d8002015 	stw	zero,128(sp)
  8034a4:	d8001f15 	stw	zero,124(sp)
  8034a8:	d8003315 	stw	zero,204(sp)
  8034ac:	d8003615 	stw	zero,216(sp)
  8034b0:	d8003815 	stw	zero,224(sp)
  8034b4:	1811883a 	mov	r8,r3
  8034b8:	d8003915 	stw	zero,228(sp)
  8034bc:	d8003a15 	stw	zero,232(sp)
  8034c0:	d8002f15 	stw	zero,188(sp)
  8034c4:	d9002815 	stw	r4,160(sp)
  8034c8:	a8800007 	ldb	r2,0(r21)
  8034cc:	10027b26 	beq	r2,zero,803ebc <___vfprintf_internal_r+0xad4>
  8034d0:	00c00944 	movi	r3,37
  8034d4:	a821883a 	mov	r16,r21
  8034d8:	10c0021e 	bne	r2,r3,8034e4 <___vfprintf_internal_r+0xfc>
  8034dc:	00001406 	br	803530 <___vfprintf_internal_r+0x148>
  8034e0:	10c00326 	beq	r2,r3,8034f0 <___vfprintf_internal_r+0x108>
  8034e4:	84000044 	addi	r16,r16,1
  8034e8:	80800007 	ldb	r2,0(r16)
  8034ec:	103ffc1e 	bne	r2,zero,8034e0 <__alt_mem_onchip_mem+0xff7834e0>
  8034f0:	8563c83a 	sub	r17,r16,r21
  8034f4:	88000e26 	beq	r17,zero,803530 <___vfprintf_internal_r+0x148>
  8034f8:	d8c02017 	ldw	r3,128(sp)
  8034fc:	d8801f17 	ldw	r2,124(sp)
  803500:	45400015 	stw	r21,0(r8)
  803504:	1c47883a 	add	r3,r3,r17
  803508:	10800044 	addi	r2,r2,1
  80350c:	d8c02015 	stw	r3,128(sp)
  803510:	44400115 	stw	r17,4(r8)
  803514:	d8801f15 	stw	r2,124(sp)
  803518:	00c001c4 	movi	r3,7
  80351c:	1880a716 	blt	r3,r2,8037bc <___vfprintf_internal_r+0x3d4>
  803520:	42000204 	addi	r8,r8,8
  803524:	d9402f17 	ldw	r5,188(sp)
  803528:	2c4b883a 	add	r5,r5,r17
  80352c:	d9402f15 	stw	r5,188(sp)
  803530:	80800007 	ldb	r2,0(r16)
  803534:	1000a826 	beq	r2,zero,8037d8 <___vfprintf_internal_r+0x3f0>
  803538:	84400047 	ldb	r17,1(r16)
  80353c:	00bfffc4 	movi	r2,-1
  803540:	85400044 	addi	r21,r16,1
  803544:	d8002785 	stb	zero,158(sp)
  803548:	0007883a 	mov	r3,zero
  80354c:	000f883a 	mov	r7,zero
  803550:	d8802915 	stw	r2,164(sp)
  803554:	d8003115 	stw	zero,196(sp)
  803558:	0025883a 	mov	r18,zero
  80355c:	01401604 	movi	r5,88
  803560:	01800244 	movi	r6,9
  803564:	02800a84 	movi	r10,42
  803568:	02401b04 	movi	r9,108
  80356c:	ad400044 	addi	r21,r21,1
  803570:	88bff804 	addi	r2,r17,-32
  803574:	28830436 	bltu	r5,r2,804188 <___vfprintf_internal_r+0xda0>
  803578:	100490ba 	slli	r2,r2,2
  80357c:	01002034 	movhi	r4,128
  803580:	210d6404 	addi	r4,r4,13712
  803584:	1105883a 	add	r2,r2,r4
  803588:	10800017 	ldw	r2,0(r2)
  80358c:	1000683a 	jmp	r2
  803590:	008040a8 	cmpgeui	r2,zero,258
  803594:	00804188 	cmpgei	r2,zero,262
  803598:	00804188 	cmpgei	r2,zero,262
  80359c:	008040c8 	cmpgei	r2,zero,259
  8035a0:	00804188 	cmpgei	r2,zero,262
  8035a4:	00804188 	cmpgei	r2,zero,262
  8035a8:	00804188 	cmpgei	r2,zero,262
  8035ac:	00804188 	cmpgei	r2,zero,262
  8035b0:	00804188 	cmpgei	r2,zero,262
  8035b4:	00804188 	cmpgei	r2,zero,262
  8035b8:	0080383c 	xorhi	r2,zero,224
  8035bc:	00803fe4 	muli	r2,zero,255
  8035c0:	00804188 	cmpgei	r2,zero,262
  8035c4:	00803704 	movi	r2,220
  8035c8:	00803864 	muli	r2,zero,225
  8035cc:	00804188 	cmpgei	r2,zero,262
  8035d0:	008038a4 	muli	r2,zero,226
  8035d4:	008038b0 	cmpltui	r2,zero,226
  8035d8:	008038b0 	cmpltui	r2,zero,226
  8035dc:	008038b0 	cmpltui	r2,zero,226
  8035e0:	008038b0 	cmpltui	r2,zero,226
  8035e4:	008038b0 	cmpltui	r2,zero,226
  8035e8:	008038b0 	cmpltui	r2,zero,226
  8035ec:	008038b0 	cmpltui	r2,zero,226
  8035f0:	008038b0 	cmpltui	r2,zero,226
  8035f4:	008038b0 	cmpltui	r2,zero,226
  8035f8:	00804188 	cmpgei	r2,zero,262
  8035fc:	00804188 	cmpgei	r2,zero,262
  803600:	00804188 	cmpgei	r2,zero,262
  803604:	00804188 	cmpgei	r2,zero,262
  803608:	00804188 	cmpgei	r2,zero,262
  80360c:	00804188 	cmpgei	r2,zero,262
  803610:	00804188 	cmpgei	r2,zero,262
  803614:	00804188 	cmpgei	r2,zero,262
  803618:	00804188 	cmpgei	r2,zero,262
  80361c:	00804188 	cmpgei	r2,zero,262
  803620:	008038e4 	muli	r2,zero,227
  803624:	008039a0 	cmpeqi	r2,zero,230
  803628:	00804188 	cmpgei	r2,zero,262
  80362c:	008039a0 	cmpeqi	r2,zero,230
  803630:	00804188 	cmpgei	r2,zero,262
  803634:	00804188 	cmpgei	r2,zero,262
  803638:	00804188 	cmpgei	r2,zero,262
  80363c:	00804188 	cmpgei	r2,zero,262
  803640:	00803a40 	call	803a4 <__alt_mem_sdram-0x77fc5c>
  803644:	00804188 	cmpgei	r2,zero,262
  803648:	00804188 	cmpgei	r2,zero,262
  80364c:	00803a4c 	andi	r2,zero,233
  803650:	00804188 	cmpgei	r2,zero,262
  803654:	00804188 	cmpgei	r2,zero,262
  803658:	00804188 	cmpgei	r2,zero,262
  80365c:	00804188 	cmpgei	r2,zero,262
  803660:	00804188 	cmpgei	r2,zero,262
  803664:	00803ec4 	movi	r2,251
  803668:	00804188 	cmpgei	r2,zero,262
  80366c:	00804188 	cmpgei	r2,zero,262
  803670:	00803f24 	muli	r2,zero,252
  803674:	00804188 	cmpgei	r2,zero,262
  803678:	00804188 	cmpgei	r2,zero,262
  80367c:	00804188 	cmpgei	r2,zero,262
  803680:	00804188 	cmpgei	r2,zero,262
  803684:	00804188 	cmpgei	r2,zero,262
  803688:	00804188 	cmpgei	r2,zero,262
  80368c:	00804188 	cmpgei	r2,zero,262
  803690:	00804188 	cmpgei	r2,zero,262
  803694:	00804188 	cmpgei	r2,zero,262
  803698:	00804188 	cmpgei	r2,zero,262
  80369c:	00804134 	movhi	r2,260
  8036a0:	008040d4 	movui	r2,259
  8036a4:	008039a0 	cmpeqi	r2,zero,230
  8036a8:	008039a0 	cmpeqi	r2,zero,230
  8036ac:	008039a0 	cmpeqi	r2,zero,230
  8036b0:	008040e4 	muli	r2,zero,259
  8036b4:	008040d4 	movui	r2,259
  8036b8:	00804188 	cmpgei	r2,zero,262
  8036bc:	00804188 	cmpgei	r2,zero,262
  8036c0:	008040f0 	cmpltui	r2,zero,259
  8036c4:	00804188 	cmpgei	r2,zero,262
  8036c8:	00804100 	call	80410 <__alt_mem_sdram-0x77fbf0>
  8036cc:	00803fd4 	movui	r2,255
  8036d0:	00803710 	cmplti	r2,zero,220
  8036d4:	00803ff4 	movhi	r2,255
  8036d8:	00804188 	cmpgei	r2,zero,262
  8036dc:	00804000 	call	80400 <__alt_mem_sdram-0x77fc00>
  8036e0:	00804188 	cmpgei	r2,zero,262
  8036e4:	0080405c 	xori	r2,zero,257
  8036e8:	00804188 	cmpgei	r2,zero,262
  8036ec:	00804188 	cmpgei	r2,zero,262
  8036f0:	0080406c 	andhi	r2,zero,257
  8036f4:	d9003117 	ldw	r4,196(sp)
  8036f8:	d8802d15 	stw	r2,180(sp)
  8036fc:	0109c83a 	sub	r4,zero,r4
  803700:	d9003115 	stw	r4,196(sp)
  803704:	94800114 	ori	r18,r18,4
  803708:	ac400007 	ldb	r17,0(r21)
  80370c:	003f9706 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  803710:	00800c04 	movi	r2,48
  803714:	d9002d17 	ldw	r4,180(sp)
  803718:	d9402917 	ldw	r5,164(sp)
  80371c:	d8802705 	stb	r2,156(sp)
  803720:	00801e04 	movi	r2,120
  803724:	d8802745 	stb	r2,157(sp)
  803728:	d8002785 	stb	zero,158(sp)
  80372c:	20c00104 	addi	r3,r4,4
  803730:	24c00017 	ldw	r19,0(r4)
  803734:	002d883a 	mov	r22,zero
  803738:	90800094 	ori	r2,r18,2
  80373c:	28029a16 	blt	r5,zero,8041a8 <___vfprintf_internal_r+0xdc0>
  803740:	00bfdfc4 	movi	r2,-129
  803744:	90a4703a 	and	r18,r18,r2
  803748:	d8c02d15 	stw	r3,180(sp)
  80374c:	94800094 	ori	r18,r18,2
  803750:	9802871e 	bne	r19,zero,804170 <___vfprintf_internal_r+0xd88>
  803754:	00802074 	movhi	r2,129
  803758:	108f0e04 	addi	r2,r2,15416
  80375c:	d8803915 	stw	r2,228(sp)
  803760:	04401e04 	movi	r17,120
  803764:	d8802917 	ldw	r2,164(sp)
  803768:	0039883a 	mov	fp,zero
  80376c:	1001e926 	beq	r2,zero,803f14 <___vfprintf_internal_r+0xb2c>
  803770:	0027883a 	mov	r19,zero
  803774:	002d883a 	mov	r22,zero
  803778:	00020506 	br	803f90 <___vfprintf_internal_r+0xba8>
  80377c:	d9002c17 	ldw	r4,176(sp)
  803780:	b80b883a 	mov	r5,r23
  803784:	08056b80 	call	8056b8 <__swsetup_r>
  803788:	1005ac1e 	bne	r2,zero,804e3c <___vfprintf_internal_r+0x1a54>
  80378c:	b880030b 	ldhu	r2,12(r23)
  803790:	00c00284 	movi	r3,10
  803794:	1080068c 	andi	r2,r2,26
  803798:	10ff3c1e 	bne	r2,r3,80348c <__alt_mem_onchip_mem+0xff78348c>
  80379c:	b880038f 	ldh	r2,14(r23)
  8037a0:	103f3a16 	blt	r2,zero,80348c <__alt_mem_onchip_mem+0xff78348c>
  8037a4:	d9c02d17 	ldw	r7,180(sp)
  8037a8:	d9002c17 	ldw	r4,176(sp)
  8037ac:	a80d883a 	mov	r6,r21
  8037b0:	b80b883a 	mov	r5,r23
  8037b4:	08055fc0 	call	8055fc <__sbprintf>
  8037b8:	00001106 	br	803800 <___vfprintf_internal_r+0x418>
  8037bc:	d9002c17 	ldw	r4,176(sp)
  8037c0:	d9801e04 	addi	r6,sp,120
  8037c4:	b80b883a 	mov	r5,r23
  8037c8:	080a9e40 	call	80a9e4 <__sprint_r>
  8037cc:	1000081e 	bne	r2,zero,8037f0 <___vfprintf_internal_r+0x408>
  8037d0:	da000404 	addi	r8,sp,16
  8037d4:	003f5306 	br	803524 <__alt_mem_onchip_mem+0xff783524>
  8037d8:	d8802017 	ldw	r2,128(sp)
  8037dc:	10000426 	beq	r2,zero,8037f0 <___vfprintf_internal_r+0x408>
  8037e0:	d9002c17 	ldw	r4,176(sp)
  8037e4:	d9801e04 	addi	r6,sp,120
  8037e8:	b80b883a 	mov	r5,r23
  8037ec:	080a9e40 	call	80a9e4 <__sprint_r>
  8037f0:	b880030b 	ldhu	r2,12(r23)
  8037f4:	1080100c 	andi	r2,r2,64
  8037f8:	1005901e 	bne	r2,zero,804e3c <___vfprintf_internal_r+0x1a54>
  8037fc:	d8802f17 	ldw	r2,188(sp)
  803800:	dfc04717 	ldw	ra,284(sp)
  803804:	df004617 	ldw	fp,280(sp)
  803808:	ddc04517 	ldw	r23,276(sp)
  80380c:	dd804417 	ldw	r22,272(sp)
  803810:	dd404317 	ldw	r21,268(sp)
  803814:	dd004217 	ldw	r20,264(sp)
  803818:	dcc04117 	ldw	r19,260(sp)
  80381c:	dc804017 	ldw	r18,256(sp)
  803820:	dc403f17 	ldw	r17,252(sp)
  803824:	dc003e17 	ldw	r16,248(sp)
  803828:	dec04804 	addi	sp,sp,288
  80382c:	f800283a 	ret
  803830:	d9002c17 	ldw	r4,176(sp)
  803834:	080768c0 	call	80768c <__sinit>
  803838:	003f0406 	br	80344c <__alt_mem_onchip_mem+0xff78344c>
  80383c:	d8802d17 	ldw	r2,180(sp)
  803840:	d9002d17 	ldw	r4,180(sp)
  803844:	10800017 	ldw	r2,0(r2)
  803848:	d8803115 	stw	r2,196(sp)
  80384c:	20800104 	addi	r2,r4,4
  803850:	d9003117 	ldw	r4,196(sp)
  803854:	203fa716 	blt	r4,zero,8036f4 <__alt_mem_onchip_mem+0xff7836f4>
  803858:	d8802d15 	stw	r2,180(sp)
  80385c:	ac400007 	ldb	r17,0(r21)
  803860:	003f4206 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  803864:	ac400007 	ldb	r17,0(r21)
  803868:	aac00044 	addi	r11,r21,1
  80386c:	8a872826 	beq	r17,r10,805510 <___vfprintf_internal_r+0x2128>
  803870:	88bff404 	addi	r2,r17,-48
  803874:	0009883a 	mov	r4,zero
  803878:	30867d36 	bltu	r6,r2,805270 <___vfprintf_internal_r+0x1e88>
  80387c:	5c400007 	ldb	r17,0(r11)
  803880:	210002a4 	muli	r4,r4,10
  803884:	5d400044 	addi	r21,r11,1
  803888:	a817883a 	mov	r11,r21
  80388c:	2089883a 	add	r4,r4,r2
  803890:	88bff404 	addi	r2,r17,-48
  803894:	30bff92e 	bgeu	r6,r2,80387c <__alt_mem_onchip_mem+0xff78387c>
  803898:	2005c916 	blt	r4,zero,804fc0 <___vfprintf_internal_r+0x1bd8>
  80389c:	d9002915 	stw	r4,164(sp)
  8038a0:	003f3306 	br	803570 <__alt_mem_onchip_mem+0xff783570>
  8038a4:	94802014 	ori	r18,r18,128
  8038a8:	ac400007 	ldb	r17,0(r21)
  8038ac:	003f2f06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  8038b0:	a809883a 	mov	r4,r21
  8038b4:	d8003115 	stw	zero,196(sp)
  8038b8:	88bff404 	addi	r2,r17,-48
  8038bc:	0017883a 	mov	r11,zero
  8038c0:	24400007 	ldb	r17,0(r4)
  8038c4:	5ac002a4 	muli	r11,r11,10
  8038c8:	ad400044 	addi	r21,r21,1
  8038cc:	a809883a 	mov	r4,r21
  8038d0:	12d7883a 	add	r11,r2,r11
  8038d4:	88bff404 	addi	r2,r17,-48
  8038d8:	30bff92e 	bgeu	r6,r2,8038c0 <__alt_mem_onchip_mem+0xff7838c0>
  8038dc:	dac03115 	stw	r11,196(sp)
  8038e0:	003f2306 	br	803570 <__alt_mem_onchip_mem+0xff783570>
  8038e4:	18c03fcc 	andi	r3,r3,255
  8038e8:	18072b1e 	bne	r3,zero,805598 <___vfprintf_internal_r+0x21b0>
  8038ec:	94800414 	ori	r18,r18,16
  8038f0:	9080080c 	andi	r2,r18,32
  8038f4:	10037b26 	beq	r2,zero,8046e4 <___vfprintf_internal_r+0x12fc>
  8038f8:	d9402d17 	ldw	r5,180(sp)
  8038fc:	28800117 	ldw	r2,4(r5)
  803900:	2cc00017 	ldw	r19,0(r5)
  803904:	29400204 	addi	r5,r5,8
  803908:	d9402d15 	stw	r5,180(sp)
  80390c:	102d883a 	mov	r22,r2
  803910:	10044b16 	blt	r2,zero,804a40 <___vfprintf_internal_r+0x1658>
  803914:	d9402917 	ldw	r5,164(sp)
  803918:	df002783 	ldbu	fp,158(sp)
  80391c:	2803bc16 	blt	r5,zero,804810 <___vfprintf_internal_r+0x1428>
  803920:	00ffdfc4 	movi	r3,-129
  803924:	9d84b03a 	or	r2,r19,r22
  803928:	90e4703a 	and	r18,r18,r3
  80392c:	10017726 	beq	r2,zero,803f0c <___vfprintf_internal_r+0xb24>
  803930:	b0038326 	beq	r22,zero,804740 <___vfprintf_internal_r+0x1358>
  803934:	dc402a15 	stw	r17,168(sp)
  803938:	dc001e04 	addi	r16,sp,120
  80393c:	b023883a 	mov	r17,r22
  803940:	402d883a 	mov	r22,r8
  803944:	9809883a 	mov	r4,r19
  803948:	880b883a 	mov	r5,r17
  80394c:	01800284 	movi	r6,10
  803950:	000f883a 	mov	r7,zero
  803954:	080cddc0 	call	80cddc <__umoddi3>
  803958:	10800c04 	addi	r2,r2,48
  80395c:	843fffc4 	addi	r16,r16,-1
  803960:	9809883a 	mov	r4,r19
  803964:	880b883a 	mov	r5,r17
  803968:	80800005 	stb	r2,0(r16)
  80396c:	01800284 	movi	r6,10
  803970:	000f883a 	mov	r7,zero
  803974:	080c8640 	call	80c864 <__udivdi3>
  803978:	1027883a 	mov	r19,r2
  80397c:	10c4b03a 	or	r2,r2,r3
  803980:	1823883a 	mov	r17,r3
  803984:	103fef1e 	bne	r2,zero,803944 <__alt_mem_onchip_mem+0xff783944>
  803988:	d8c02817 	ldw	r3,160(sp)
  80398c:	dc402a17 	ldw	r17,168(sp)
  803990:	b011883a 	mov	r8,r22
  803994:	1c07c83a 	sub	r3,r3,r16
  803998:	d8c02e15 	stw	r3,184(sp)
  80399c:	00005906 	br	803b04 <___vfprintf_internal_r+0x71c>
  8039a0:	18c03fcc 	andi	r3,r3,255
  8039a4:	1806fa1e 	bne	r3,zero,805590 <___vfprintf_internal_r+0x21a8>
  8039a8:	9080020c 	andi	r2,r18,8
  8039ac:	10048a26 	beq	r2,zero,804bd8 <___vfprintf_internal_r+0x17f0>
  8039b0:	d8c02d17 	ldw	r3,180(sp)
  8039b4:	d9002d17 	ldw	r4,180(sp)
  8039b8:	d9402d17 	ldw	r5,180(sp)
  8039bc:	18c00017 	ldw	r3,0(r3)
  8039c0:	21000117 	ldw	r4,4(r4)
  8039c4:	29400204 	addi	r5,r5,8
  8039c8:	d8c03615 	stw	r3,216(sp)
  8039cc:	d9003815 	stw	r4,224(sp)
  8039d0:	d9402d15 	stw	r5,180(sp)
  8039d4:	d9003617 	ldw	r4,216(sp)
  8039d8:	d9403817 	ldw	r5,224(sp)
  8039dc:	da003d15 	stw	r8,244(sp)
  8039e0:	04000044 	movi	r16,1
  8039e4:	080a6080 	call	80a608 <__fpclassifyd>
  8039e8:	da003d17 	ldw	r8,244(sp)
  8039ec:	14041f1e 	bne	r2,r16,804a6c <___vfprintf_internal_r+0x1684>
  8039f0:	d9003617 	ldw	r4,216(sp)
  8039f4:	d9403817 	ldw	r5,224(sp)
  8039f8:	000d883a 	mov	r6,zero
  8039fc:	000f883a 	mov	r7,zero
  803a00:	080e60c0 	call	80e60c <__ledf2>
  803a04:	da003d17 	ldw	r8,244(sp)
  803a08:	1005be16 	blt	r2,zero,805104 <___vfprintf_internal_r+0x1d1c>
  803a0c:	df002783 	ldbu	fp,158(sp)
  803a10:	008011c4 	movi	r2,71
  803a14:	1445330e 	bge	r2,r17,804ee4 <___vfprintf_internal_r+0x1afc>
  803a18:	04002074 	movhi	r16,129
  803a1c:	840f0604 	addi	r16,r16,15384
  803a20:	00c000c4 	movi	r3,3
  803a24:	00bfdfc4 	movi	r2,-129
  803a28:	d8c02a15 	stw	r3,168(sp)
  803a2c:	90a4703a 	and	r18,r18,r2
  803a30:	d8c02e15 	stw	r3,184(sp)
  803a34:	d8002915 	stw	zero,164(sp)
  803a38:	d8003215 	stw	zero,200(sp)
  803a3c:	00003706 	br	803b1c <___vfprintf_internal_r+0x734>
  803a40:	94800214 	ori	r18,r18,8
  803a44:	ac400007 	ldb	r17,0(r21)
  803a48:	003ec806 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  803a4c:	18c03fcc 	andi	r3,r3,255
  803a50:	1806db1e 	bne	r3,zero,8055c0 <___vfprintf_internal_r+0x21d8>
  803a54:	94800414 	ori	r18,r18,16
  803a58:	9080080c 	andi	r2,r18,32
  803a5c:	1002d826 	beq	r2,zero,8045c0 <___vfprintf_internal_r+0x11d8>
  803a60:	d9402d17 	ldw	r5,180(sp)
  803a64:	d8c02917 	ldw	r3,164(sp)
  803a68:	d8002785 	stb	zero,158(sp)
  803a6c:	28800204 	addi	r2,r5,8
  803a70:	2cc00017 	ldw	r19,0(r5)
  803a74:	2d800117 	ldw	r22,4(r5)
  803a78:	18048f16 	blt	r3,zero,804cb8 <___vfprintf_internal_r+0x18d0>
  803a7c:	013fdfc4 	movi	r4,-129
  803a80:	9d86b03a 	or	r3,r19,r22
  803a84:	d8802d15 	stw	r2,180(sp)
  803a88:	9124703a 	and	r18,r18,r4
  803a8c:	1802d91e 	bne	r3,zero,8045f4 <___vfprintf_internal_r+0x120c>
  803a90:	d8c02917 	ldw	r3,164(sp)
  803a94:	0039883a 	mov	fp,zero
  803a98:	1805c326 	beq	r3,zero,8051a8 <___vfprintf_internal_r+0x1dc0>
  803a9c:	0027883a 	mov	r19,zero
  803aa0:	002d883a 	mov	r22,zero
  803aa4:	dc001e04 	addi	r16,sp,120
  803aa8:	9806d0fa 	srli	r3,r19,3
  803aac:	b008977a 	slli	r4,r22,29
  803ab0:	b02cd0fa 	srli	r22,r22,3
  803ab4:	9cc001cc 	andi	r19,r19,7
  803ab8:	98800c04 	addi	r2,r19,48
  803abc:	843fffc4 	addi	r16,r16,-1
  803ac0:	20e6b03a 	or	r19,r4,r3
  803ac4:	80800005 	stb	r2,0(r16)
  803ac8:	9d86b03a 	or	r3,r19,r22
  803acc:	183ff61e 	bne	r3,zero,803aa8 <__alt_mem_onchip_mem+0xff783aa8>
  803ad0:	90c0004c 	andi	r3,r18,1
  803ad4:	18013b26 	beq	r3,zero,803fc4 <___vfprintf_internal_r+0xbdc>
  803ad8:	10803fcc 	andi	r2,r2,255
  803adc:	1080201c 	xori	r2,r2,128
  803ae0:	10bfe004 	addi	r2,r2,-128
  803ae4:	00c00c04 	movi	r3,48
  803ae8:	10c13626 	beq	r2,r3,803fc4 <___vfprintf_internal_r+0xbdc>
  803aec:	80ffffc5 	stb	r3,-1(r16)
  803af0:	d8c02817 	ldw	r3,160(sp)
  803af4:	80bfffc4 	addi	r2,r16,-1
  803af8:	1021883a 	mov	r16,r2
  803afc:	1887c83a 	sub	r3,r3,r2
  803b00:	d8c02e15 	stw	r3,184(sp)
  803b04:	d8802e17 	ldw	r2,184(sp)
  803b08:	d9002917 	ldw	r4,164(sp)
  803b0c:	1100010e 	bge	r2,r4,803b14 <___vfprintf_internal_r+0x72c>
  803b10:	2005883a 	mov	r2,r4
  803b14:	d8802a15 	stw	r2,168(sp)
  803b18:	d8003215 	stw	zero,200(sp)
  803b1c:	e7003fcc 	andi	fp,fp,255
  803b20:	e700201c 	xori	fp,fp,128
  803b24:	e73fe004 	addi	fp,fp,-128
  803b28:	e0000326 	beq	fp,zero,803b38 <___vfprintf_internal_r+0x750>
  803b2c:	d8c02a17 	ldw	r3,168(sp)
  803b30:	18c00044 	addi	r3,r3,1
  803b34:	d8c02a15 	stw	r3,168(sp)
  803b38:	90c0008c 	andi	r3,r18,2
  803b3c:	d8c02b15 	stw	r3,172(sp)
  803b40:	18000326 	beq	r3,zero,803b50 <___vfprintf_internal_r+0x768>
  803b44:	d8c02a17 	ldw	r3,168(sp)
  803b48:	18c00084 	addi	r3,r3,2
  803b4c:	d8c02a15 	stw	r3,168(sp)
  803b50:	90c0210c 	andi	r3,r18,132
  803b54:	d8c03015 	stw	r3,192(sp)
  803b58:	1801a31e 	bne	r3,zero,8041e8 <___vfprintf_internal_r+0xe00>
  803b5c:	d9003117 	ldw	r4,196(sp)
  803b60:	d8c02a17 	ldw	r3,168(sp)
  803b64:	20e7c83a 	sub	r19,r4,r3
  803b68:	04c19f0e 	bge	zero,r19,8041e8 <___vfprintf_internal_r+0xe00>
  803b6c:	02400404 	movi	r9,16
  803b70:	d8c02017 	ldw	r3,128(sp)
  803b74:	d8801f17 	ldw	r2,124(sp)
  803b78:	4cc50d0e 	bge	r9,r19,804fb0 <___vfprintf_internal_r+0x1bc8>
  803b7c:	01402074 	movhi	r5,129
  803b80:	294f1984 	addi	r5,r5,15462
  803b84:	dc403b15 	stw	r17,236(sp)
  803b88:	d9403515 	stw	r5,212(sp)
  803b8c:	9823883a 	mov	r17,r19
  803b90:	482d883a 	mov	r22,r9
  803b94:	9027883a 	mov	r19,r18
  803b98:	070001c4 	movi	fp,7
  803b9c:	8025883a 	mov	r18,r16
  803ba0:	dc002c17 	ldw	r16,176(sp)
  803ba4:	00000306 	br	803bb4 <___vfprintf_internal_r+0x7cc>
  803ba8:	8c7ffc04 	addi	r17,r17,-16
  803bac:	42000204 	addi	r8,r8,8
  803bb0:	b440130e 	bge	r22,r17,803c00 <___vfprintf_internal_r+0x818>
  803bb4:	01002074 	movhi	r4,129
  803bb8:	18c00404 	addi	r3,r3,16
  803bbc:	10800044 	addi	r2,r2,1
  803bc0:	210f1984 	addi	r4,r4,15462
  803bc4:	41000015 	stw	r4,0(r8)
  803bc8:	45800115 	stw	r22,4(r8)
  803bcc:	d8c02015 	stw	r3,128(sp)
  803bd0:	d8801f15 	stw	r2,124(sp)
  803bd4:	e0bff40e 	bge	fp,r2,803ba8 <__alt_mem_onchip_mem+0xff783ba8>
  803bd8:	d9801e04 	addi	r6,sp,120
  803bdc:	b80b883a 	mov	r5,r23
  803be0:	8009883a 	mov	r4,r16
  803be4:	080a9e40 	call	80a9e4 <__sprint_r>
  803be8:	103f011e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  803bec:	8c7ffc04 	addi	r17,r17,-16
  803bf0:	d8c02017 	ldw	r3,128(sp)
  803bf4:	d8801f17 	ldw	r2,124(sp)
  803bf8:	da000404 	addi	r8,sp,16
  803bfc:	b47fed16 	blt	r22,r17,803bb4 <__alt_mem_onchip_mem+0xff783bb4>
  803c00:	9021883a 	mov	r16,r18
  803c04:	9825883a 	mov	r18,r19
  803c08:	8827883a 	mov	r19,r17
  803c0c:	dc403b17 	ldw	r17,236(sp)
  803c10:	d9403517 	ldw	r5,212(sp)
  803c14:	98c7883a 	add	r3,r19,r3
  803c18:	10800044 	addi	r2,r2,1
  803c1c:	41400015 	stw	r5,0(r8)
  803c20:	44c00115 	stw	r19,4(r8)
  803c24:	d8c02015 	stw	r3,128(sp)
  803c28:	d8801f15 	stw	r2,124(sp)
  803c2c:	010001c4 	movi	r4,7
  803c30:	2082a316 	blt	r4,r2,8046c0 <___vfprintf_internal_r+0x12d8>
  803c34:	df002787 	ldb	fp,158(sp)
  803c38:	42000204 	addi	r8,r8,8
  803c3c:	e0000c26 	beq	fp,zero,803c70 <___vfprintf_internal_r+0x888>
  803c40:	d8801f17 	ldw	r2,124(sp)
  803c44:	d9002784 	addi	r4,sp,158
  803c48:	18c00044 	addi	r3,r3,1
  803c4c:	10800044 	addi	r2,r2,1
  803c50:	41000015 	stw	r4,0(r8)
  803c54:	01000044 	movi	r4,1
  803c58:	41000115 	stw	r4,4(r8)
  803c5c:	d8c02015 	stw	r3,128(sp)
  803c60:	d8801f15 	stw	r2,124(sp)
  803c64:	010001c4 	movi	r4,7
  803c68:	20823c16 	blt	r4,r2,80455c <___vfprintf_internal_r+0x1174>
  803c6c:	42000204 	addi	r8,r8,8
  803c70:	d8802b17 	ldw	r2,172(sp)
  803c74:	10000c26 	beq	r2,zero,803ca8 <___vfprintf_internal_r+0x8c0>
  803c78:	d8801f17 	ldw	r2,124(sp)
  803c7c:	d9002704 	addi	r4,sp,156
  803c80:	18c00084 	addi	r3,r3,2
  803c84:	10800044 	addi	r2,r2,1
  803c88:	41000015 	stw	r4,0(r8)
  803c8c:	01000084 	movi	r4,2
  803c90:	41000115 	stw	r4,4(r8)
  803c94:	d8c02015 	stw	r3,128(sp)
  803c98:	d8801f15 	stw	r2,124(sp)
  803c9c:	010001c4 	movi	r4,7
  803ca0:	20823616 	blt	r4,r2,80457c <___vfprintf_internal_r+0x1194>
  803ca4:	42000204 	addi	r8,r8,8
  803ca8:	d9003017 	ldw	r4,192(sp)
  803cac:	00802004 	movi	r2,128
  803cb0:	20819926 	beq	r4,r2,804318 <___vfprintf_internal_r+0xf30>
  803cb4:	d9402917 	ldw	r5,164(sp)
  803cb8:	d8802e17 	ldw	r2,184(sp)
  803cbc:	28adc83a 	sub	r22,r5,r2
  803cc0:	0580310e 	bge	zero,r22,803d88 <___vfprintf_internal_r+0x9a0>
  803cc4:	07000404 	movi	fp,16
  803cc8:	d8801f17 	ldw	r2,124(sp)
  803ccc:	e584140e 	bge	fp,r22,804d20 <___vfprintf_internal_r+0x1938>
  803cd0:	01402074 	movhi	r5,129
  803cd4:	294f1584 	addi	r5,r5,15446
  803cd8:	dc402915 	stw	r17,164(sp)
  803cdc:	d9402b15 	stw	r5,172(sp)
  803ce0:	b023883a 	mov	r17,r22
  803ce4:	04c001c4 	movi	r19,7
  803ce8:	a82d883a 	mov	r22,r21
  803cec:	902b883a 	mov	r21,r18
  803cf0:	8025883a 	mov	r18,r16
  803cf4:	dc002c17 	ldw	r16,176(sp)
  803cf8:	00000306 	br	803d08 <___vfprintf_internal_r+0x920>
  803cfc:	8c7ffc04 	addi	r17,r17,-16
  803d00:	42000204 	addi	r8,r8,8
  803d04:	e440110e 	bge	fp,r17,803d4c <___vfprintf_internal_r+0x964>
  803d08:	18c00404 	addi	r3,r3,16
  803d0c:	10800044 	addi	r2,r2,1
  803d10:	45000015 	stw	r20,0(r8)
  803d14:	47000115 	stw	fp,4(r8)
  803d18:	d8c02015 	stw	r3,128(sp)
  803d1c:	d8801f15 	stw	r2,124(sp)
  803d20:	98bff60e 	bge	r19,r2,803cfc <__alt_mem_onchip_mem+0xff783cfc>
  803d24:	d9801e04 	addi	r6,sp,120
  803d28:	b80b883a 	mov	r5,r23
  803d2c:	8009883a 	mov	r4,r16
  803d30:	080a9e40 	call	80a9e4 <__sprint_r>
  803d34:	103eae1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  803d38:	8c7ffc04 	addi	r17,r17,-16
  803d3c:	d8c02017 	ldw	r3,128(sp)
  803d40:	d8801f17 	ldw	r2,124(sp)
  803d44:	da000404 	addi	r8,sp,16
  803d48:	e47fef16 	blt	fp,r17,803d08 <__alt_mem_onchip_mem+0xff783d08>
  803d4c:	9021883a 	mov	r16,r18
  803d50:	a825883a 	mov	r18,r21
  803d54:	b02b883a 	mov	r21,r22
  803d58:	882d883a 	mov	r22,r17
  803d5c:	dc402917 	ldw	r17,164(sp)
  803d60:	d9002b17 	ldw	r4,172(sp)
  803d64:	1d87883a 	add	r3,r3,r22
  803d68:	10800044 	addi	r2,r2,1
  803d6c:	41000015 	stw	r4,0(r8)
  803d70:	45800115 	stw	r22,4(r8)
  803d74:	d8c02015 	stw	r3,128(sp)
  803d78:	d8801f15 	stw	r2,124(sp)
  803d7c:	010001c4 	movi	r4,7
  803d80:	2081ee16 	blt	r4,r2,80453c <___vfprintf_internal_r+0x1154>
  803d84:	42000204 	addi	r8,r8,8
  803d88:	9080400c 	andi	r2,r18,256
  803d8c:	1001181e 	bne	r2,zero,8041f0 <___vfprintf_internal_r+0xe08>
  803d90:	d9402e17 	ldw	r5,184(sp)
  803d94:	d8801f17 	ldw	r2,124(sp)
  803d98:	44000015 	stw	r16,0(r8)
  803d9c:	1947883a 	add	r3,r3,r5
  803da0:	10800044 	addi	r2,r2,1
  803da4:	41400115 	stw	r5,4(r8)
  803da8:	d8c02015 	stw	r3,128(sp)
  803dac:	d8801f15 	stw	r2,124(sp)
  803db0:	010001c4 	movi	r4,7
  803db4:	2081d316 	blt	r4,r2,804504 <___vfprintf_internal_r+0x111c>
  803db8:	42000204 	addi	r8,r8,8
  803dbc:	9480010c 	andi	r18,r18,4
  803dc0:	90003226 	beq	r18,zero,803e8c <___vfprintf_internal_r+0xaa4>
  803dc4:	d9403117 	ldw	r5,196(sp)
  803dc8:	d8802a17 	ldw	r2,168(sp)
  803dcc:	28a1c83a 	sub	r16,r5,r2
  803dd0:	04002e0e 	bge	zero,r16,803e8c <___vfprintf_internal_r+0xaa4>
  803dd4:	04400404 	movi	r17,16
  803dd8:	d8801f17 	ldw	r2,124(sp)
  803ddc:	8c04a20e 	bge	r17,r16,805068 <___vfprintf_internal_r+0x1c80>
  803de0:	01402074 	movhi	r5,129
  803de4:	294f1984 	addi	r5,r5,15462
  803de8:	d9403515 	stw	r5,212(sp)
  803dec:	048001c4 	movi	r18,7
  803df0:	dcc02c17 	ldw	r19,176(sp)
  803df4:	00000306 	br	803e04 <___vfprintf_internal_r+0xa1c>
  803df8:	843ffc04 	addi	r16,r16,-16
  803dfc:	42000204 	addi	r8,r8,8
  803e00:	8c00130e 	bge	r17,r16,803e50 <___vfprintf_internal_r+0xa68>
  803e04:	01002074 	movhi	r4,129
  803e08:	18c00404 	addi	r3,r3,16
  803e0c:	10800044 	addi	r2,r2,1
  803e10:	210f1984 	addi	r4,r4,15462
  803e14:	41000015 	stw	r4,0(r8)
  803e18:	44400115 	stw	r17,4(r8)
  803e1c:	d8c02015 	stw	r3,128(sp)
  803e20:	d8801f15 	stw	r2,124(sp)
  803e24:	90bff40e 	bge	r18,r2,803df8 <__alt_mem_onchip_mem+0xff783df8>
  803e28:	d9801e04 	addi	r6,sp,120
  803e2c:	b80b883a 	mov	r5,r23
  803e30:	9809883a 	mov	r4,r19
  803e34:	080a9e40 	call	80a9e4 <__sprint_r>
  803e38:	103e6d1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  803e3c:	843ffc04 	addi	r16,r16,-16
  803e40:	d8c02017 	ldw	r3,128(sp)
  803e44:	d8801f17 	ldw	r2,124(sp)
  803e48:	da000404 	addi	r8,sp,16
  803e4c:	8c3fed16 	blt	r17,r16,803e04 <__alt_mem_onchip_mem+0xff783e04>
  803e50:	d9403517 	ldw	r5,212(sp)
  803e54:	1c07883a 	add	r3,r3,r16
  803e58:	10800044 	addi	r2,r2,1
  803e5c:	41400015 	stw	r5,0(r8)
  803e60:	44000115 	stw	r16,4(r8)
  803e64:	d8c02015 	stw	r3,128(sp)
  803e68:	d8801f15 	stw	r2,124(sp)
  803e6c:	010001c4 	movi	r4,7
  803e70:	2080060e 	bge	r4,r2,803e8c <___vfprintf_internal_r+0xaa4>
  803e74:	d9002c17 	ldw	r4,176(sp)
  803e78:	d9801e04 	addi	r6,sp,120
  803e7c:	b80b883a 	mov	r5,r23
  803e80:	080a9e40 	call	80a9e4 <__sprint_r>
  803e84:	103e5a1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  803e88:	d8c02017 	ldw	r3,128(sp)
  803e8c:	d8803117 	ldw	r2,196(sp)
  803e90:	d9002a17 	ldw	r4,168(sp)
  803e94:	1100010e 	bge	r2,r4,803e9c <___vfprintf_internal_r+0xab4>
  803e98:	2005883a 	mov	r2,r4
  803e9c:	d9402f17 	ldw	r5,188(sp)
  803ea0:	288b883a 	add	r5,r5,r2
  803ea4:	d9402f15 	stw	r5,188(sp)
  803ea8:	18019e1e 	bne	r3,zero,804524 <___vfprintf_internal_r+0x113c>
  803eac:	a8800007 	ldb	r2,0(r21)
  803eb0:	d8001f15 	stw	zero,124(sp)
  803eb4:	da000404 	addi	r8,sp,16
  803eb8:	103d851e 	bne	r2,zero,8034d0 <__alt_mem_onchip_mem+0xff7834d0>
  803ebc:	a821883a 	mov	r16,r21
  803ec0:	003d9b06 	br	803530 <__alt_mem_onchip_mem+0xff783530>
  803ec4:	18c03fcc 	andi	r3,r3,255
  803ec8:	1805c11e 	bne	r3,zero,8055d0 <___vfprintf_internal_r+0x21e8>
  803ecc:	94800414 	ori	r18,r18,16
  803ed0:	9080080c 	andi	r2,r18,32
  803ed4:	10020c26 	beq	r2,zero,804708 <___vfprintf_internal_r+0x1320>
  803ed8:	d8802d17 	ldw	r2,180(sp)
  803edc:	d9002917 	ldw	r4,164(sp)
  803ee0:	d8002785 	stb	zero,158(sp)
  803ee4:	10c00204 	addi	r3,r2,8
  803ee8:	14c00017 	ldw	r19,0(r2)
  803eec:	15800117 	ldw	r22,4(r2)
  803ef0:	20040f16 	blt	r4,zero,804f30 <___vfprintf_internal_r+0x1b48>
  803ef4:	013fdfc4 	movi	r4,-129
  803ef8:	9d84b03a 	or	r2,r19,r22
  803efc:	d8c02d15 	stw	r3,180(sp)
  803f00:	9124703a 	and	r18,r18,r4
  803f04:	0039883a 	mov	fp,zero
  803f08:	103e891e 	bne	r2,zero,803930 <__alt_mem_onchip_mem+0xff783930>
  803f0c:	d9002917 	ldw	r4,164(sp)
  803f10:	2002c11e 	bne	r4,zero,804a18 <___vfprintf_internal_r+0x1630>
  803f14:	d8002915 	stw	zero,164(sp)
  803f18:	d8002e15 	stw	zero,184(sp)
  803f1c:	dc001e04 	addi	r16,sp,120
  803f20:	003ef806 	br	803b04 <__alt_mem_onchip_mem+0xff783b04>
  803f24:	18c03fcc 	andi	r3,r3,255
  803f28:	18059d1e 	bne	r3,zero,8055a0 <___vfprintf_internal_r+0x21b8>
  803f2c:	01402074 	movhi	r5,129
  803f30:	294f0904 	addi	r5,r5,15396
  803f34:	d9403915 	stw	r5,228(sp)
  803f38:	9080080c 	andi	r2,r18,32
  803f3c:	10005226 	beq	r2,zero,804088 <___vfprintf_internal_r+0xca0>
  803f40:	d8802d17 	ldw	r2,180(sp)
  803f44:	14c00017 	ldw	r19,0(r2)
  803f48:	15800117 	ldw	r22,4(r2)
  803f4c:	10800204 	addi	r2,r2,8
  803f50:	d8802d15 	stw	r2,180(sp)
  803f54:	9080004c 	andi	r2,r18,1
  803f58:	10019026 	beq	r2,zero,80459c <___vfprintf_internal_r+0x11b4>
  803f5c:	9d84b03a 	or	r2,r19,r22
  803f60:	10036926 	beq	r2,zero,804d08 <___vfprintf_internal_r+0x1920>
  803f64:	d8c02917 	ldw	r3,164(sp)
  803f68:	00800c04 	movi	r2,48
  803f6c:	d8802705 	stb	r2,156(sp)
  803f70:	dc402745 	stb	r17,157(sp)
  803f74:	d8002785 	stb	zero,158(sp)
  803f78:	90800094 	ori	r2,r18,2
  803f7c:	18045d16 	blt	r3,zero,8050f4 <___vfprintf_internal_r+0x1d0c>
  803f80:	00bfdfc4 	movi	r2,-129
  803f84:	90a4703a 	and	r18,r18,r2
  803f88:	94800094 	ori	r18,r18,2
  803f8c:	0039883a 	mov	fp,zero
  803f90:	d9003917 	ldw	r4,228(sp)
  803f94:	dc001e04 	addi	r16,sp,120
  803f98:	988003cc 	andi	r2,r19,15
  803f9c:	b006973a 	slli	r3,r22,28
  803fa0:	2085883a 	add	r2,r4,r2
  803fa4:	9826d13a 	srli	r19,r19,4
  803fa8:	10800003 	ldbu	r2,0(r2)
  803fac:	b02cd13a 	srli	r22,r22,4
  803fb0:	843fffc4 	addi	r16,r16,-1
  803fb4:	1ce6b03a 	or	r19,r3,r19
  803fb8:	80800005 	stb	r2,0(r16)
  803fbc:	9d84b03a 	or	r2,r19,r22
  803fc0:	103ff51e 	bne	r2,zero,803f98 <__alt_mem_onchip_mem+0xff783f98>
  803fc4:	d8c02817 	ldw	r3,160(sp)
  803fc8:	1c07c83a 	sub	r3,r3,r16
  803fcc:	d8c02e15 	stw	r3,184(sp)
  803fd0:	003ecc06 	br	803b04 <__alt_mem_onchip_mem+0xff783b04>
  803fd4:	18c03fcc 	andi	r3,r3,255
  803fd8:	183e9f26 	beq	r3,zero,803a58 <__alt_mem_onchip_mem+0xff783a58>
  803fdc:	d9c02785 	stb	r7,158(sp)
  803fe0:	003e9d06 	br	803a58 <__alt_mem_onchip_mem+0xff783a58>
  803fe4:	00c00044 	movi	r3,1
  803fe8:	01c00ac4 	movi	r7,43
  803fec:	ac400007 	ldb	r17,0(r21)
  803ff0:	003d5e06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  803ff4:	94800814 	ori	r18,r18,32
  803ff8:	ac400007 	ldb	r17,0(r21)
  803ffc:	003d5b06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  804000:	d8c02d17 	ldw	r3,180(sp)
  804004:	d8002785 	stb	zero,158(sp)
  804008:	1c000017 	ldw	r16,0(r3)
  80400c:	1cc00104 	addi	r19,r3,4
  804010:	80041926 	beq	r16,zero,805078 <___vfprintf_internal_r+0x1c90>
  804014:	d9002917 	ldw	r4,164(sp)
  804018:	2003d016 	blt	r4,zero,804f5c <___vfprintf_internal_r+0x1b74>
  80401c:	200d883a 	mov	r6,r4
  804020:	000b883a 	mov	r5,zero
  804024:	8009883a 	mov	r4,r16
  804028:	da003d15 	stw	r8,244(sp)
  80402c:	0808bf80 	call	808bf8 <memchr>
  804030:	da003d17 	ldw	r8,244(sp)
  804034:	10045426 	beq	r2,zero,805188 <___vfprintf_internal_r+0x1da0>
  804038:	1405c83a 	sub	r2,r2,r16
  80403c:	d8802e15 	stw	r2,184(sp)
  804040:	1003cc16 	blt	r2,zero,804f74 <___vfprintf_internal_r+0x1b8c>
  804044:	df002783 	ldbu	fp,158(sp)
  804048:	d8802a15 	stw	r2,168(sp)
  80404c:	dcc02d15 	stw	r19,180(sp)
  804050:	d8002915 	stw	zero,164(sp)
  804054:	d8003215 	stw	zero,200(sp)
  804058:	003eb006 	br	803b1c <__alt_mem_onchip_mem+0xff783b1c>
  80405c:	18c03fcc 	andi	r3,r3,255
  804060:	183f9b26 	beq	r3,zero,803ed0 <__alt_mem_onchip_mem+0xff783ed0>
  804064:	d9c02785 	stb	r7,158(sp)
  804068:	003f9906 	br	803ed0 <__alt_mem_onchip_mem+0xff783ed0>
  80406c:	18c03fcc 	andi	r3,r3,255
  804070:	1805551e 	bne	r3,zero,8055c8 <___vfprintf_internal_r+0x21e0>
  804074:	01402074 	movhi	r5,129
  804078:	294f0e04 	addi	r5,r5,15416
  80407c:	d9403915 	stw	r5,228(sp)
  804080:	9080080c 	andi	r2,r18,32
  804084:	103fae1e 	bne	r2,zero,803f40 <__alt_mem_onchip_mem+0xff783f40>
  804088:	9080040c 	andi	r2,r18,16
  80408c:	1002de26 	beq	r2,zero,804c08 <___vfprintf_internal_r+0x1820>
  804090:	d8c02d17 	ldw	r3,180(sp)
  804094:	002d883a 	mov	r22,zero
  804098:	1cc00017 	ldw	r19,0(r3)
  80409c:	18c00104 	addi	r3,r3,4
  8040a0:	d8c02d15 	stw	r3,180(sp)
  8040a4:	003fab06 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  8040a8:	38803fcc 	andi	r2,r7,255
  8040ac:	1080201c 	xori	r2,r2,128
  8040b0:	10bfe004 	addi	r2,r2,-128
  8040b4:	1002d21e 	bne	r2,zero,804c00 <___vfprintf_internal_r+0x1818>
  8040b8:	00c00044 	movi	r3,1
  8040bc:	01c00804 	movi	r7,32
  8040c0:	ac400007 	ldb	r17,0(r21)
  8040c4:	003d2906 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  8040c8:	94800054 	ori	r18,r18,1
  8040cc:	ac400007 	ldb	r17,0(r21)
  8040d0:	003d2606 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  8040d4:	18c03fcc 	andi	r3,r3,255
  8040d8:	183e0526 	beq	r3,zero,8038f0 <__alt_mem_onchip_mem+0xff7838f0>
  8040dc:	d9c02785 	stb	r7,158(sp)
  8040e0:	003e0306 	br	8038f0 <__alt_mem_onchip_mem+0xff7838f0>
  8040e4:	94801014 	ori	r18,r18,64
  8040e8:	ac400007 	ldb	r17,0(r21)
  8040ec:	003d1f06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  8040f0:	ac400007 	ldb	r17,0(r21)
  8040f4:	8a438726 	beq	r17,r9,804f14 <___vfprintf_internal_r+0x1b2c>
  8040f8:	94800414 	ori	r18,r18,16
  8040fc:	003d1b06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  804100:	18c03fcc 	andi	r3,r3,255
  804104:	1805341e 	bne	r3,zero,8055d8 <___vfprintf_internal_r+0x21f0>
  804108:	9080080c 	andi	r2,r18,32
  80410c:	1002cd26 	beq	r2,zero,804c44 <___vfprintf_internal_r+0x185c>
  804110:	d9402d17 	ldw	r5,180(sp)
  804114:	d9002f17 	ldw	r4,188(sp)
  804118:	28800017 	ldw	r2,0(r5)
  80411c:	2007d7fa 	srai	r3,r4,31
  804120:	29400104 	addi	r5,r5,4
  804124:	d9402d15 	stw	r5,180(sp)
  804128:	11000015 	stw	r4,0(r2)
  80412c:	10c00115 	stw	r3,4(r2)
  804130:	003ce506 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  804134:	d8c02d17 	ldw	r3,180(sp)
  804138:	d9002d17 	ldw	r4,180(sp)
  80413c:	d8002785 	stb	zero,158(sp)
  804140:	18800017 	ldw	r2,0(r3)
  804144:	21000104 	addi	r4,r4,4
  804148:	00c00044 	movi	r3,1
  80414c:	d8c02a15 	stw	r3,168(sp)
  804150:	d8801405 	stb	r2,80(sp)
  804154:	d9002d15 	stw	r4,180(sp)
  804158:	d8c02e15 	stw	r3,184(sp)
  80415c:	d8002915 	stw	zero,164(sp)
  804160:	d8003215 	stw	zero,200(sp)
  804164:	dc001404 	addi	r16,sp,80
  804168:	0039883a 	mov	fp,zero
  80416c:	003e7206 	br	803b38 <__alt_mem_onchip_mem+0xff783b38>
  804170:	01002074 	movhi	r4,129
  804174:	210f0e04 	addi	r4,r4,15416
  804178:	0039883a 	mov	fp,zero
  80417c:	d9003915 	stw	r4,228(sp)
  804180:	04401e04 	movi	r17,120
  804184:	003f8206 	br	803f90 <__alt_mem_onchip_mem+0xff783f90>
  804188:	18c03fcc 	andi	r3,r3,255
  80418c:	1805061e 	bne	r3,zero,8055a8 <___vfprintf_internal_r+0x21c0>
  804190:	883d9126 	beq	r17,zero,8037d8 <__alt_mem_onchip_mem+0xff7837d8>
  804194:	00c00044 	movi	r3,1
  804198:	d8c02a15 	stw	r3,168(sp)
  80419c:	dc401405 	stb	r17,80(sp)
  8041a0:	d8002785 	stb	zero,158(sp)
  8041a4:	003fec06 	br	804158 <__alt_mem_onchip_mem+0xff784158>
  8041a8:	01402074 	movhi	r5,129
  8041ac:	294f0e04 	addi	r5,r5,15416
  8041b0:	d9403915 	stw	r5,228(sp)
  8041b4:	d8c02d15 	stw	r3,180(sp)
  8041b8:	1025883a 	mov	r18,r2
  8041bc:	04401e04 	movi	r17,120
  8041c0:	9d84b03a 	or	r2,r19,r22
  8041c4:	1000fc1e 	bne	r2,zero,8045b8 <___vfprintf_internal_r+0x11d0>
  8041c8:	0039883a 	mov	fp,zero
  8041cc:	00800084 	movi	r2,2
  8041d0:	10803fcc 	andi	r2,r2,255
  8041d4:	00c00044 	movi	r3,1
  8041d8:	10c20f26 	beq	r2,r3,804a18 <___vfprintf_internal_r+0x1630>
  8041dc:	00c00084 	movi	r3,2
  8041e0:	10fd6326 	beq	r2,r3,803770 <__alt_mem_onchip_mem+0xff783770>
  8041e4:	003e2d06 	br	803a9c <__alt_mem_onchip_mem+0xff783a9c>
  8041e8:	d8c02017 	ldw	r3,128(sp)
  8041ec:	003e9306 	br	803c3c <__alt_mem_onchip_mem+0xff783c3c>
  8041f0:	00801944 	movi	r2,101
  8041f4:	14407e0e 	bge	r2,r17,8043f0 <___vfprintf_internal_r+0x1008>
  8041f8:	d9003617 	ldw	r4,216(sp)
  8041fc:	d9403817 	ldw	r5,224(sp)
  804200:	000d883a 	mov	r6,zero
  804204:	000f883a 	mov	r7,zero
  804208:	d8c03c15 	stw	r3,240(sp)
  80420c:	da003d15 	stw	r8,244(sp)
  804210:	080e4a80 	call	80e4a8 <__eqdf2>
  804214:	d8c03c17 	ldw	r3,240(sp)
  804218:	da003d17 	ldw	r8,244(sp)
  80421c:	1000f71e 	bne	r2,zero,8045fc <___vfprintf_internal_r+0x1214>
  804220:	d8801f17 	ldw	r2,124(sp)
  804224:	01002074 	movhi	r4,129
  804228:	210f1504 	addi	r4,r4,15444
  80422c:	18c00044 	addi	r3,r3,1
  804230:	10800044 	addi	r2,r2,1
  804234:	41000015 	stw	r4,0(r8)
  804238:	01000044 	movi	r4,1
  80423c:	41000115 	stw	r4,4(r8)
  804240:	d8c02015 	stw	r3,128(sp)
  804244:	d8801f15 	stw	r2,124(sp)
  804248:	010001c4 	movi	r4,7
  80424c:	2082b816 	blt	r4,r2,804d30 <___vfprintf_internal_r+0x1948>
  804250:	42000204 	addi	r8,r8,8
  804254:	d8802617 	ldw	r2,152(sp)
  804258:	d9403317 	ldw	r5,204(sp)
  80425c:	11400216 	blt	r2,r5,804268 <___vfprintf_internal_r+0xe80>
  804260:	9080004c 	andi	r2,r18,1
  804264:	103ed526 	beq	r2,zero,803dbc <__alt_mem_onchip_mem+0xff783dbc>
  804268:	d8803717 	ldw	r2,220(sp)
  80426c:	d9003417 	ldw	r4,208(sp)
  804270:	d9403717 	ldw	r5,220(sp)
  804274:	1887883a 	add	r3,r3,r2
  804278:	d8801f17 	ldw	r2,124(sp)
  80427c:	41000015 	stw	r4,0(r8)
  804280:	41400115 	stw	r5,4(r8)
  804284:	10800044 	addi	r2,r2,1
  804288:	d8c02015 	stw	r3,128(sp)
  80428c:	d8801f15 	stw	r2,124(sp)
  804290:	010001c4 	movi	r4,7
  804294:	20832916 	blt	r4,r2,804f3c <___vfprintf_internal_r+0x1b54>
  804298:	42000204 	addi	r8,r8,8
  80429c:	d8803317 	ldw	r2,204(sp)
  8042a0:	143fffc4 	addi	r16,r2,-1
  8042a4:	043ec50e 	bge	zero,r16,803dbc <__alt_mem_onchip_mem+0xff783dbc>
  8042a8:	04400404 	movi	r17,16
  8042ac:	d8801f17 	ldw	r2,124(sp)
  8042b0:	8c00880e 	bge	r17,r16,8044d4 <___vfprintf_internal_r+0x10ec>
  8042b4:	01402074 	movhi	r5,129
  8042b8:	294f1584 	addi	r5,r5,15446
  8042bc:	d9402b15 	stw	r5,172(sp)
  8042c0:	058001c4 	movi	r22,7
  8042c4:	dcc02c17 	ldw	r19,176(sp)
  8042c8:	00000306 	br	8042d8 <___vfprintf_internal_r+0xef0>
  8042cc:	42000204 	addi	r8,r8,8
  8042d0:	843ffc04 	addi	r16,r16,-16
  8042d4:	8c00820e 	bge	r17,r16,8044e0 <___vfprintf_internal_r+0x10f8>
  8042d8:	18c00404 	addi	r3,r3,16
  8042dc:	10800044 	addi	r2,r2,1
  8042e0:	45000015 	stw	r20,0(r8)
  8042e4:	44400115 	stw	r17,4(r8)
  8042e8:	d8c02015 	stw	r3,128(sp)
  8042ec:	d8801f15 	stw	r2,124(sp)
  8042f0:	b0bff60e 	bge	r22,r2,8042cc <__alt_mem_onchip_mem+0xff7842cc>
  8042f4:	d9801e04 	addi	r6,sp,120
  8042f8:	b80b883a 	mov	r5,r23
  8042fc:	9809883a 	mov	r4,r19
  804300:	080a9e40 	call	80a9e4 <__sprint_r>
  804304:	103d3a1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804308:	d8c02017 	ldw	r3,128(sp)
  80430c:	d8801f17 	ldw	r2,124(sp)
  804310:	da000404 	addi	r8,sp,16
  804314:	003fee06 	br	8042d0 <__alt_mem_onchip_mem+0xff7842d0>
  804318:	d9403117 	ldw	r5,196(sp)
  80431c:	d8802a17 	ldw	r2,168(sp)
  804320:	28adc83a 	sub	r22,r5,r2
  804324:	05be630e 	bge	zero,r22,803cb4 <__alt_mem_onchip_mem+0xff783cb4>
  804328:	07000404 	movi	fp,16
  80432c:	d8801f17 	ldw	r2,124(sp)
  804330:	e5838f0e 	bge	fp,r22,805170 <___vfprintf_internal_r+0x1d88>
  804334:	01402074 	movhi	r5,129
  804338:	294f1584 	addi	r5,r5,15446
  80433c:	dc403015 	stw	r17,192(sp)
  804340:	d9402b15 	stw	r5,172(sp)
  804344:	b023883a 	mov	r17,r22
  804348:	04c001c4 	movi	r19,7
  80434c:	a82d883a 	mov	r22,r21
  804350:	902b883a 	mov	r21,r18
  804354:	8025883a 	mov	r18,r16
  804358:	dc002c17 	ldw	r16,176(sp)
  80435c:	00000306 	br	80436c <___vfprintf_internal_r+0xf84>
  804360:	8c7ffc04 	addi	r17,r17,-16
  804364:	42000204 	addi	r8,r8,8
  804368:	e440110e 	bge	fp,r17,8043b0 <___vfprintf_internal_r+0xfc8>
  80436c:	18c00404 	addi	r3,r3,16
  804370:	10800044 	addi	r2,r2,1
  804374:	45000015 	stw	r20,0(r8)
  804378:	47000115 	stw	fp,4(r8)
  80437c:	d8c02015 	stw	r3,128(sp)
  804380:	d8801f15 	stw	r2,124(sp)
  804384:	98bff60e 	bge	r19,r2,804360 <__alt_mem_onchip_mem+0xff784360>
  804388:	d9801e04 	addi	r6,sp,120
  80438c:	b80b883a 	mov	r5,r23
  804390:	8009883a 	mov	r4,r16
  804394:	080a9e40 	call	80a9e4 <__sprint_r>
  804398:	103d151e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80439c:	8c7ffc04 	addi	r17,r17,-16
  8043a0:	d8c02017 	ldw	r3,128(sp)
  8043a4:	d8801f17 	ldw	r2,124(sp)
  8043a8:	da000404 	addi	r8,sp,16
  8043ac:	e47fef16 	blt	fp,r17,80436c <__alt_mem_onchip_mem+0xff78436c>
  8043b0:	9021883a 	mov	r16,r18
  8043b4:	a825883a 	mov	r18,r21
  8043b8:	b02b883a 	mov	r21,r22
  8043bc:	882d883a 	mov	r22,r17
  8043c0:	dc403017 	ldw	r17,192(sp)
  8043c4:	d9002b17 	ldw	r4,172(sp)
  8043c8:	1d87883a 	add	r3,r3,r22
  8043cc:	10800044 	addi	r2,r2,1
  8043d0:	41000015 	stw	r4,0(r8)
  8043d4:	45800115 	stw	r22,4(r8)
  8043d8:	d8c02015 	stw	r3,128(sp)
  8043dc:	d8801f15 	stw	r2,124(sp)
  8043e0:	010001c4 	movi	r4,7
  8043e4:	20818e16 	blt	r4,r2,804a20 <___vfprintf_internal_r+0x1638>
  8043e8:	42000204 	addi	r8,r8,8
  8043ec:	003e3106 	br	803cb4 <__alt_mem_onchip_mem+0xff783cb4>
  8043f0:	d9403317 	ldw	r5,204(sp)
  8043f4:	00800044 	movi	r2,1
  8043f8:	18c00044 	addi	r3,r3,1
  8043fc:	1141530e 	bge	r2,r5,80494c <___vfprintf_internal_r+0x1564>
  804400:	dc401f17 	ldw	r17,124(sp)
  804404:	00800044 	movi	r2,1
  804408:	40800115 	stw	r2,4(r8)
  80440c:	8c400044 	addi	r17,r17,1
  804410:	44000015 	stw	r16,0(r8)
  804414:	d8c02015 	stw	r3,128(sp)
  804418:	dc401f15 	stw	r17,124(sp)
  80441c:	008001c4 	movi	r2,7
  804420:	14416b16 	blt	r2,r17,8049d0 <___vfprintf_internal_r+0x15e8>
  804424:	42000204 	addi	r8,r8,8
  804428:	d8803717 	ldw	r2,220(sp)
  80442c:	d9003417 	ldw	r4,208(sp)
  804430:	8c400044 	addi	r17,r17,1
  804434:	10c7883a 	add	r3,r2,r3
  804438:	40800115 	stw	r2,4(r8)
  80443c:	41000015 	stw	r4,0(r8)
  804440:	d8c02015 	stw	r3,128(sp)
  804444:	dc401f15 	stw	r17,124(sp)
  804448:	008001c4 	movi	r2,7
  80444c:	14416916 	blt	r2,r17,8049f4 <___vfprintf_internal_r+0x160c>
  804450:	45800204 	addi	r22,r8,8
  804454:	d9003617 	ldw	r4,216(sp)
  804458:	d9403817 	ldw	r5,224(sp)
  80445c:	000d883a 	mov	r6,zero
  804460:	000f883a 	mov	r7,zero
  804464:	d8c03c15 	stw	r3,240(sp)
  804468:	080e4a80 	call	80e4a8 <__eqdf2>
  80446c:	d8c03c17 	ldw	r3,240(sp)
  804470:	1000bc26 	beq	r2,zero,804764 <___vfprintf_internal_r+0x137c>
  804474:	d9403317 	ldw	r5,204(sp)
  804478:	84000044 	addi	r16,r16,1
  80447c:	8c400044 	addi	r17,r17,1
  804480:	28bfffc4 	addi	r2,r5,-1
  804484:	1887883a 	add	r3,r3,r2
  804488:	b0800115 	stw	r2,4(r22)
  80448c:	b4000015 	stw	r16,0(r22)
  804490:	d8c02015 	stw	r3,128(sp)
  804494:	dc401f15 	stw	r17,124(sp)
  804498:	008001c4 	movi	r2,7
  80449c:	14414316 	blt	r2,r17,8049ac <___vfprintf_internal_r+0x15c4>
  8044a0:	b5800204 	addi	r22,r22,8
  8044a4:	d9003a17 	ldw	r4,232(sp)
  8044a8:	df0022c4 	addi	fp,sp,139
  8044ac:	8c400044 	addi	r17,r17,1
  8044b0:	20c7883a 	add	r3,r4,r3
  8044b4:	b7000015 	stw	fp,0(r22)
  8044b8:	b1000115 	stw	r4,4(r22)
  8044bc:	d8c02015 	stw	r3,128(sp)
  8044c0:	dc401f15 	stw	r17,124(sp)
  8044c4:	008001c4 	movi	r2,7
  8044c8:	14400e16 	blt	r2,r17,804504 <___vfprintf_internal_r+0x111c>
  8044cc:	b2000204 	addi	r8,r22,8
  8044d0:	003e3a06 	br	803dbc <__alt_mem_onchip_mem+0xff783dbc>
  8044d4:	01002074 	movhi	r4,129
  8044d8:	210f1584 	addi	r4,r4,15446
  8044dc:	d9002b15 	stw	r4,172(sp)
  8044e0:	d9002b17 	ldw	r4,172(sp)
  8044e4:	1c07883a 	add	r3,r3,r16
  8044e8:	44000115 	stw	r16,4(r8)
  8044ec:	41000015 	stw	r4,0(r8)
  8044f0:	10800044 	addi	r2,r2,1
  8044f4:	d8c02015 	stw	r3,128(sp)
  8044f8:	d8801f15 	stw	r2,124(sp)
  8044fc:	010001c4 	movi	r4,7
  804500:	20be2d0e 	bge	r4,r2,803db8 <__alt_mem_onchip_mem+0xff783db8>
  804504:	d9002c17 	ldw	r4,176(sp)
  804508:	d9801e04 	addi	r6,sp,120
  80450c:	b80b883a 	mov	r5,r23
  804510:	080a9e40 	call	80a9e4 <__sprint_r>
  804514:	103cb61e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804518:	d8c02017 	ldw	r3,128(sp)
  80451c:	da000404 	addi	r8,sp,16
  804520:	003e2606 	br	803dbc <__alt_mem_onchip_mem+0xff783dbc>
  804524:	d9002c17 	ldw	r4,176(sp)
  804528:	d9801e04 	addi	r6,sp,120
  80452c:	b80b883a 	mov	r5,r23
  804530:	080a9e40 	call	80a9e4 <__sprint_r>
  804534:	103e5d26 	beq	r2,zero,803eac <__alt_mem_onchip_mem+0xff783eac>
  804538:	003cad06 	br	8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80453c:	d9002c17 	ldw	r4,176(sp)
  804540:	d9801e04 	addi	r6,sp,120
  804544:	b80b883a 	mov	r5,r23
  804548:	080a9e40 	call	80a9e4 <__sprint_r>
  80454c:	103ca81e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804550:	d8c02017 	ldw	r3,128(sp)
  804554:	da000404 	addi	r8,sp,16
  804558:	003e0b06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  80455c:	d9002c17 	ldw	r4,176(sp)
  804560:	d9801e04 	addi	r6,sp,120
  804564:	b80b883a 	mov	r5,r23
  804568:	080a9e40 	call	80a9e4 <__sprint_r>
  80456c:	103ca01e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804570:	d8c02017 	ldw	r3,128(sp)
  804574:	da000404 	addi	r8,sp,16
  804578:	003dbd06 	br	803c70 <__alt_mem_onchip_mem+0xff783c70>
  80457c:	d9002c17 	ldw	r4,176(sp)
  804580:	d9801e04 	addi	r6,sp,120
  804584:	b80b883a 	mov	r5,r23
  804588:	080a9e40 	call	80a9e4 <__sprint_r>
  80458c:	103c981e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804590:	d8c02017 	ldw	r3,128(sp)
  804594:	da000404 	addi	r8,sp,16
  804598:	003dc306 	br	803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  80459c:	d8802917 	ldw	r2,164(sp)
  8045a0:	d8002785 	stb	zero,158(sp)
  8045a4:	103f0616 	blt	r2,zero,8041c0 <__alt_mem_onchip_mem+0xff7841c0>
  8045a8:	00ffdfc4 	movi	r3,-129
  8045ac:	9d84b03a 	or	r2,r19,r22
  8045b0:	90e4703a 	and	r18,r18,r3
  8045b4:	103c6b26 	beq	r2,zero,803764 <__alt_mem_onchip_mem+0xff783764>
  8045b8:	0039883a 	mov	fp,zero
  8045bc:	003e7406 	br	803f90 <__alt_mem_onchip_mem+0xff783f90>
  8045c0:	9080040c 	andi	r2,r18,16
  8045c4:	1001b326 	beq	r2,zero,804c94 <___vfprintf_internal_r+0x18ac>
  8045c8:	d9002d17 	ldw	r4,180(sp)
  8045cc:	d9402917 	ldw	r5,164(sp)
  8045d0:	d8002785 	stb	zero,158(sp)
  8045d4:	20800104 	addi	r2,r4,4
  8045d8:	24c00017 	ldw	r19,0(r4)
  8045dc:	002d883a 	mov	r22,zero
  8045e0:	2801b516 	blt	r5,zero,804cb8 <___vfprintf_internal_r+0x18d0>
  8045e4:	00ffdfc4 	movi	r3,-129
  8045e8:	d8802d15 	stw	r2,180(sp)
  8045ec:	90e4703a 	and	r18,r18,r3
  8045f0:	983d2726 	beq	r19,zero,803a90 <__alt_mem_onchip_mem+0xff783a90>
  8045f4:	0039883a 	mov	fp,zero
  8045f8:	003d2a06 	br	803aa4 <__alt_mem_onchip_mem+0xff783aa4>
  8045fc:	dc402617 	ldw	r17,152(sp)
  804600:	0441d30e 	bge	zero,r17,804d50 <___vfprintf_internal_r+0x1968>
  804604:	dc403217 	ldw	r17,200(sp)
  804608:	d8803317 	ldw	r2,204(sp)
  80460c:	1440010e 	bge	r2,r17,804614 <___vfprintf_internal_r+0x122c>
  804610:	1023883a 	mov	r17,r2
  804614:	04400a0e 	bge	zero,r17,804640 <___vfprintf_internal_r+0x1258>
  804618:	d8801f17 	ldw	r2,124(sp)
  80461c:	1c47883a 	add	r3,r3,r17
  804620:	44000015 	stw	r16,0(r8)
  804624:	10800044 	addi	r2,r2,1
  804628:	44400115 	stw	r17,4(r8)
  80462c:	d8c02015 	stw	r3,128(sp)
  804630:	d8801f15 	stw	r2,124(sp)
  804634:	010001c4 	movi	r4,7
  804638:	20826516 	blt	r4,r2,804fd0 <___vfprintf_internal_r+0x1be8>
  80463c:	42000204 	addi	r8,r8,8
  804640:	88026116 	blt	r17,zero,804fc8 <___vfprintf_internal_r+0x1be0>
  804644:	d9003217 	ldw	r4,200(sp)
  804648:	2463c83a 	sub	r17,r4,r17
  80464c:	04407b0e 	bge	zero,r17,80483c <___vfprintf_internal_r+0x1454>
  804650:	05800404 	movi	r22,16
  804654:	d8801f17 	ldw	r2,124(sp)
  804658:	b4419d0e 	bge	r22,r17,804cd0 <___vfprintf_internal_r+0x18e8>
  80465c:	01002074 	movhi	r4,129
  804660:	210f1584 	addi	r4,r4,15446
  804664:	d9002b15 	stw	r4,172(sp)
  804668:	070001c4 	movi	fp,7
  80466c:	dcc02c17 	ldw	r19,176(sp)
  804670:	00000306 	br	804680 <___vfprintf_internal_r+0x1298>
  804674:	42000204 	addi	r8,r8,8
  804678:	8c7ffc04 	addi	r17,r17,-16
  80467c:	b441970e 	bge	r22,r17,804cdc <___vfprintf_internal_r+0x18f4>
  804680:	18c00404 	addi	r3,r3,16
  804684:	10800044 	addi	r2,r2,1
  804688:	45000015 	stw	r20,0(r8)
  80468c:	45800115 	stw	r22,4(r8)
  804690:	d8c02015 	stw	r3,128(sp)
  804694:	d8801f15 	stw	r2,124(sp)
  804698:	e0bff60e 	bge	fp,r2,804674 <__alt_mem_onchip_mem+0xff784674>
  80469c:	d9801e04 	addi	r6,sp,120
  8046a0:	b80b883a 	mov	r5,r23
  8046a4:	9809883a 	mov	r4,r19
  8046a8:	080a9e40 	call	80a9e4 <__sprint_r>
  8046ac:	103c501e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8046b0:	d8c02017 	ldw	r3,128(sp)
  8046b4:	d8801f17 	ldw	r2,124(sp)
  8046b8:	da000404 	addi	r8,sp,16
  8046bc:	003fee06 	br	804678 <__alt_mem_onchip_mem+0xff784678>
  8046c0:	d9002c17 	ldw	r4,176(sp)
  8046c4:	d9801e04 	addi	r6,sp,120
  8046c8:	b80b883a 	mov	r5,r23
  8046cc:	080a9e40 	call	80a9e4 <__sprint_r>
  8046d0:	103c471e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8046d4:	d8c02017 	ldw	r3,128(sp)
  8046d8:	df002787 	ldb	fp,158(sp)
  8046dc:	da000404 	addi	r8,sp,16
  8046e0:	003d5606 	br	803c3c <__alt_mem_onchip_mem+0xff783c3c>
  8046e4:	9080040c 	andi	r2,r18,16
  8046e8:	10016126 	beq	r2,zero,804c70 <___vfprintf_internal_r+0x1888>
  8046ec:	d8802d17 	ldw	r2,180(sp)
  8046f0:	14c00017 	ldw	r19,0(r2)
  8046f4:	10800104 	addi	r2,r2,4
  8046f8:	d8802d15 	stw	r2,180(sp)
  8046fc:	982dd7fa 	srai	r22,r19,31
  804700:	b005883a 	mov	r2,r22
  804704:	003c8206 	br	803910 <__alt_mem_onchip_mem+0xff783910>
  804708:	9080040c 	andi	r2,r18,16
  80470c:	10003526 	beq	r2,zero,8047e4 <___vfprintf_internal_r+0x13fc>
  804710:	d9402d17 	ldw	r5,180(sp)
  804714:	d8c02917 	ldw	r3,164(sp)
  804718:	d8002785 	stb	zero,158(sp)
  80471c:	28800104 	addi	r2,r5,4
  804720:	2cc00017 	ldw	r19,0(r5)
  804724:	002d883a 	mov	r22,zero
  804728:	18003716 	blt	r3,zero,804808 <___vfprintf_internal_r+0x1420>
  80472c:	00ffdfc4 	movi	r3,-129
  804730:	d8802d15 	stw	r2,180(sp)
  804734:	90e4703a 	and	r18,r18,r3
  804738:	0039883a 	mov	fp,zero
  80473c:	983df326 	beq	r19,zero,803f0c <__alt_mem_onchip_mem+0xff783f0c>
  804740:	00800244 	movi	r2,9
  804744:	14fc7b36 	bltu	r2,r19,803934 <__alt_mem_onchip_mem+0xff783934>
  804748:	d8c02817 	ldw	r3,160(sp)
  80474c:	dc001dc4 	addi	r16,sp,119
  804750:	9cc00c04 	addi	r19,r19,48
  804754:	1c07c83a 	sub	r3,r3,r16
  804758:	dcc01dc5 	stb	r19,119(sp)
  80475c:	d8c02e15 	stw	r3,184(sp)
  804760:	003ce806 	br	803b04 <__alt_mem_onchip_mem+0xff783b04>
  804764:	d8803317 	ldw	r2,204(sp)
  804768:	143fffc4 	addi	r16,r2,-1
  80476c:	043f4d0e 	bge	zero,r16,8044a4 <__alt_mem_onchip_mem+0xff7844a4>
  804770:	07000404 	movi	fp,16
  804774:	e400810e 	bge	fp,r16,80497c <___vfprintf_internal_r+0x1594>
  804778:	01402074 	movhi	r5,129
  80477c:	294f1584 	addi	r5,r5,15446
  804780:	d9402b15 	stw	r5,172(sp)
  804784:	01c001c4 	movi	r7,7
  804788:	dcc02c17 	ldw	r19,176(sp)
  80478c:	00000306 	br	80479c <___vfprintf_internal_r+0x13b4>
  804790:	b5800204 	addi	r22,r22,8
  804794:	843ffc04 	addi	r16,r16,-16
  804798:	e4007b0e 	bge	fp,r16,804988 <___vfprintf_internal_r+0x15a0>
  80479c:	18c00404 	addi	r3,r3,16
  8047a0:	8c400044 	addi	r17,r17,1
  8047a4:	b5000015 	stw	r20,0(r22)
  8047a8:	b7000115 	stw	fp,4(r22)
  8047ac:	d8c02015 	stw	r3,128(sp)
  8047b0:	dc401f15 	stw	r17,124(sp)
  8047b4:	3c7ff60e 	bge	r7,r17,804790 <__alt_mem_onchip_mem+0xff784790>
  8047b8:	d9801e04 	addi	r6,sp,120
  8047bc:	b80b883a 	mov	r5,r23
  8047c0:	9809883a 	mov	r4,r19
  8047c4:	d9c03c15 	stw	r7,240(sp)
  8047c8:	080a9e40 	call	80a9e4 <__sprint_r>
  8047cc:	d9c03c17 	ldw	r7,240(sp)
  8047d0:	103c071e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8047d4:	d8c02017 	ldw	r3,128(sp)
  8047d8:	dc401f17 	ldw	r17,124(sp)
  8047dc:	dd800404 	addi	r22,sp,16
  8047e0:	003fec06 	br	804794 <__alt_mem_onchip_mem+0xff784794>
  8047e4:	9080100c 	andi	r2,r18,64
  8047e8:	d8002785 	stb	zero,158(sp)
  8047ec:	10010e26 	beq	r2,zero,804c28 <___vfprintf_internal_r+0x1840>
  8047f0:	d9002d17 	ldw	r4,180(sp)
  8047f4:	d9402917 	ldw	r5,164(sp)
  8047f8:	002d883a 	mov	r22,zero
  8047fc:	20800104 	addi	r2,r4,4
  804800:	24c0000b 	ldhu	r19,0(r4)
  804804:	283fc90e 	bge	r5,zero,80472c <__alt_mem_onchip_mem+0xff78472c>
  804808:	d8802d15 	stw	r2,180(sp)
  80480c:	0039883a 	mov	fp,zero
  804810:	9d84b03a 	or	r2,r19,r22
  804814:	103c461e 	bne	r2,zero,803930 <__alt_mem_onchip_mem+0xff783930>
  804818:	00800044 	movi	r2,1
  80481c:	003e6c06 	br	8041d0 <__alt_mem_onchip_mem+0xff7841d0>
  804820:	d9002c17 	ldw	r4,176(sp)
  804824:	d9801e04 	addi	r6,sp,120
  804828:	b80b883a 	mov	r5,r23
  80482c:	080a9e40 	call	80a9e4 <__sprint_r>
  804830:	103bef1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804834:	d8c02017 	ldw	r3,128(sp)
  804838:	da000404 	addi	r8,sp,16
  80483c:	d9003217 	ldw	r4,200(sp)
  804840:	d8802617 	ldw	r2,152(sp)
  804844:	d9403317 	ldw	r5,204(sp)
  804848:	8123883a 	add	r17,r16,r4
  80484c:	11400216 	blt	r2,r5,804858 <___vfprintf_internal_r+0x1470>
  804850:	9100004c 	andi	r4,r18,1
  804854:	20000d26 	beq	r4,zero,80488c <___vfprintf_internal_r+0x14a4>
  804858:	d9003717 	ldw	r4,220(sp)
  80485c:	d9403417 	ldw	r5,208(sp)
  804860:	1907883a 	add	r3,r3,r4
  804864:	d9001f17 	ldw	r4,124(sp)
  804868:	41400015 	stw	r5,0(r8)
  80486c:	d9403717 	ldw	r5,220(sp)
  804870:	21000044 	addi	r4,r4,1
  804874:	d8c02015 	stw	r3,128(sp)
  804878:	41400115 	stw	r5,4(r8)
  80487c:	d9001f15 	stw	r4,124(sp)
  804880:	014001c4 	movi	r5,7
  804884:	2901e816 	blt	r5,r4,805028 <___vfprintf_internal_r+0x1c40>
  804888:	42000204 	addi	r8,r8,8
  80488c:	d9003317 	ldw	r4,204(sp)
  804890:	8121883a 	add	r16,r16,r4
  804894:	2085c83a 	sub	r2,r4,r2
  804898:	8461c83a 	sub	r16,r16,r17
  80489c:	1400010e 	bge	r2,r16,8048a4 <___vfprintf_internal_r+0x14bc>
  8048a0:	1021883a 	mov	r16,r2
  8048a4:	04000a0e 	bge	zero,r16,8048d0 <___vfprintf_internal_r+0x14e8>
  8048a8:	d9001f17 	ldw	r4,124(sp)
  8048ac:	1c07883a 	add	r3,r3,r16
  8048b0:	44400015 	stw	r17,0(r8)
  8048b4:	21000044 	addi	r4,r4,1
  8048b8:	44000115 	stw	r16,4(r8)
  8048bc:	d8c02015 	stw	r3,128(sp)
  8048c0:	d9001f15 	stw	r4,124(sp)
  8048c4:	014001c4 	movi	r5,7
  8048c8:	2901fb16 	blt	r5,r4,8050b8 <___vfprintf_internal_r+0x1cd0>
  8048cc:	42000204 	addi	r8,r8,8
  8048d0:	8001f716 	blt	r16,zero,8050b0 <___vfprintf_internal_r+0x1cc8>
  8048d4:	1421c83a 	sub	r16,r2,r16
  8048d8:	043d380e 	bge	zero,r16,803dbc <__alt_mem_onchip_mem+0xff783dbc>
  8048dc:	04400404 	movi	r17,16
  8048e0:	d8801f17 	ldw	r2,124(sp)
  8048e4:	8c3efb0e 	bge	r17,r16,8044d4 <__alt_mem_onchip_mem+0xff7844d4>
  8048e8:	01402074 	movhi	r5,129
  8048ec:	294f1584 	addi	r5,r5,15446
  8048f0:	d9402b15 	stw	r5,172(sp)
  8048f4:	058001c4 	movi	r22,7
  8048f8:	dcc02c17 	ldw	r19,176(sp)
  8048fc:	00000306 	br	80490c <___vfprintf_internal_r+0x1524>
  804900:	42000204 	addi	r8,r8,8
  804904:	843ffc04 	addi	r16,r16,-16
  804908:	8c3ef50e 	bge	r17,r16,8044e0 <__alt_mem_onchip_mem+0xff7844e0>
  80490c:	18c00404 	addi	r3,r3,16
  804910:	10800044 	addi	r2,r2,1
  804914:	45000015 	stw	r20,0(r8)
  804918:	44400115 	stw	r17,4(r8)
  80491c:	d8c02015 	stw	r3,128(sp)
  804920:	d8801f15 	stw	r2,124(sp)
  804924:	b0bff60e 	bge	r22,r2,804900 <__alt_mem_onchip_mem+0xff784900>
  804928:	d9801e04 	addi	r6,sp,120
  80492c:	b80b883a 	mov	r5,r23
  804930:	9809883a 	mov	r4,r19
  804934:	080a9e40 	call	80a9e4 <__sprint_r>
  804938:	103bad1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80493c:	d8c02017 	ldw	r3,128(sp)
  804940:	d8801f17 	ldw	r2,124(sp)
  804944:	da000404 	addi	r8,sp,16
  804948:	003fee06 	br	804904 <__alt_mem_onchip_mem+0xff784904>
  80494c:	9088703a 	and	r4,r18,r2
  804950:	203eab1e 	bne	r4,zero,804400 <__alt_mem_onchip_mem+0xff784400>
  804954:	dc401f17 	ldw	r17,124(sp)
  804958:	40800115 	stw	r2,4(r8)
  80495c:	44000015 	stw	r16,0(r8)
  804960:	8c400044 	addi	r17,r17,1
  804964:	d8c02015 	stw	r3,128(sp)
  804968:	dc401f15 	stw	r17,124(sp)
  80496c:	008001c4 	movi	r2,7
  804970:	14400e16 	blt	r2,r17,8049ac <___vfprintf_internal_r+0x15c4>
  804974:	45800204 	addi	r22,r8,8
  804978:	003eca06 	br	8044a4 <__alt_mem_onchip_mem+0xff7844a4>
  80497c:	01002074 	movhi	r4,129
  804980:	210f1584 	addi	r4,r4,15446
  804984:	d9002b15 	stw	r4,172(sp)
  804988:	d8802b17 	ldw	r2,172(sp)
  80498c:	1c07883a 	add	r3,r3,r16
  804990:	8c400044 	addi	r17,r17,1
  804994:	b0800015 	stw	r2,0(r22)
  804998:	b4000115 	stw	r16,4(r22)
  80499c:	d8c02015 	stw	r3,128(sp)
  8049a0:	dc401f15 	stw	r17,124(sp)
  8049a4:	008001c4 	movi	r2,7
  8049a8:	147ebd0e 	bge	r2,r17,8044a0 <__alt_mem_onchip_mem+0xff7844a0>
  8049ac:	d9002c17 	ldw	r4,176(sp)
  8049b0:	d9801e04 	addi	r6,sp,120
  8049b4:	b80b883a 	mov	r5,r23
  8049b8:	080a9e40 	call	80a9e4 <__sprint_r>
  8049bc:	103b8c1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8049c0:	d8c02017 	ldw	r3,128(sp)
  8049c4:	dc401f17 	ldw	r17,124(sp)
  8049c8:	dd800404 	addi	r22,sp,16
  8049cc:	003eb506 	br	8044a4 <__alt_mem_onchip_mem+0xff7844a4>
  8049d0:	d9002c17 	ldw	r4,176(sp)
  8049d4:	d9801e04 	addi	r6,sp,120
  8049d8:	b80b883a 	mov	r5,r23
  8049dc:	080a9e40 	call	80a9e4 <__sprint_r>
  8049e0:	103b831e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8049e4:	d8c02017 	ldw	r3,128(sp)
  8049e8:	dc401f17 	ldw	r17,124(sp)
  8049ec:	da000404 	addi	r8,sp,16
  8049f0:	003e8d06 	br	804428 <__alt_mem_onchip_mem+0xff784428>
  8049f4:	d9002c17 	ldw	r4,176(sp)
  8049f8:	d9801e04 	addi	r6,sp,120
  8049fc:	b80b883a 	mov	r5,r23
  804a00:	080a9e40 	call	80a9e4 <__sprint_r>
  804a04:	103b7a1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804a08:	d8c02017 	ldw	r3,128(sp)
  804a0c:	dc401f17 	ldw	r17,124(sp)
  804a10:	dd800404 	addi	r22,sp,16
  804a14:	003e8f06 	br	804454 <__alt_mem_onchip_mem+0xff784454>
  804a18:	0027883a 	mov	r19,zero
  804a1c:	003f4a06 	br	804748 <__alt_mem_onchip_mem+0xff784748>
  804a20:	d9002c17 	ldw	r4,176(sp)
  804a24:	d9801e04 	addi	r6,sp,120
  804a28:	b80b883a 	mov	r5,r23
  804a2c:	080a9e40 	call	80a9e4 <__sprint_r>
  804a30:	103b6f1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804a34:	d8c02017 	ldw	r3,128(sp)
  804a38:	da000404 	addi	r8,sp,16
  804a3c:	003c9d06 	br	803cb4 <__alt_mem_onchip_mem+0xff783cb4>
  804a40:	04e7c83a 	sub	r19,zero,r19
  804a44:	9804c03a 	cmpne	r2,r19,zero
  804a48:	05adc83a 	sub	r22,zero,r22
  804a4c:	b0adc83a 	sub	r22,r22,r2
  804a50:	d8802917 	ldw	r2,164(sp)
  804a54:	07000b44 	movi	fp,45
  804a58:	df002785 	stb	fp,158(sp)
  804a5c:	10017b16 	blt	r2,zero,80504c <___vfprintf_internal_r+0x1c64>
  804a60:	00bfdfc4 	movi	r2,-129
  804a64:	90a4703a 	and	r18,r18,r2
  804a68:	003bb106 	br	803930 <__alt_mem_onchip_mem+0xff783930>
  804a6c:	d9003617 	ldw	r4,216(sp)
  804a70:	d9403817 	ldw	r5,224(sp)
  804a74:	da003d15 	stw	r8,244(sp)
  804a78:	080a6080 	call	80a608 <__fpclassifyd>
  804a7c:	da003d17 	ldw	r8,244(sp)
  804a80:	1000f026 	beq	r2,zero,804e44 <___vfprintf_internal_r+0x1a5c>
  804a84:	d9002917 	ldw	r4,164(sp)
  804a88:	05bff7c4 	movi	r22,-33
  804a8c:	00bfffc4 	movi	r2,-1
  804a90:	8dac703a 	and	r22,r17,r22
  804a94:	20820026 	beq	r4,r2,805298 <___vfprintf_internal_r+0x1eb0>
  804a98:	008011c4 	movi	r2,71
  804a9c:	b081f726 	beq	r22,r2,80527c <___vfprintf_internal_r+0x1e94>
  804aa0:	d9003817 	ldw	r4,224(sp)
  804aa4:	90c04014 	ori	r3,r18,256
  804aa8:	d8c02b15 	stw	r3,172(sp)
  804aac:	20021516 	blt	r4,zero,805304 <___vfprintf_internal_r+0x1f1c>
  804ab0:	dcc03817 	ldw	r19,224(sp)
  804ab4:	d8002a05 	stb	zero,168(sp)
  804ab8:	00801984 	movi	r2,102
  804abc:	8881f926 	beq	r17,r2,8052a4 <___vfprintf_internal_r+0x1ebc>
  804ac0:	00801184 	movi	r2,70
  804ac4:	88821c26 	beq	r17,r2,805338 <___vfprintf_internal_r+0x1f50>
  804ac8:	00801144 	movi	r2,69
  804acc:	b081ef26 	beq	r22,r2,80528c <___vfprintf_internal_r+0x1ea4>
  804ad0:	d8c02917 	ldw	r3,164(sp)
  804ad4:	d8802104 	addi	r2,sp,132
  804ad8:	d8800315 	stw	r2,12(sp)
  804adc:	d9403617 	ldw	r5,216(sp)
  804ae0:	d8802504 	addi	r2,sp,148
  804ae4:	d9002c17 	ldw	r4,176(sp)
  804ae8:	d8800215 	stw	r2,8(sp)
  804aec:	d8802604 	addi	r2,sp,152
  804af0:	d8c00015 	stw	r3,0(sp)
  804af4:	d8800115 	stw	r2,4(sp)
  804af8:	01c00084 	movi	r7,2
  804afc:	980d883a 	mov	r6,r19
  804b00:	d8c03c15 	stw	r3,240(sp)
  804b04:	da003d15 	stw	r8,244(sp)
  804b08:	0805a0c0 	call	805a0c <_dtoa_r>
  804b0c:	1021883a 	mov	r16,r2
  804b10:	008019c4 	movi	r2,103
  804b14:	d8c03c17 	ldw	r3,240(sp)
  804b18:	da003d17 	ldw	r8,244(sp)
  804b1c:	88817126 	beq	r17,r2,8050e4 <___vfprintf_internal_r+0x1cfc>
  804b20:	008011c4 	movi	r2,71
  804b24:	88829226 	beq	r17,r2,805570 <___vfprintf_internal_r+0x2188>
  804b28:	80f9883a 	add	fp,r16,r3
  804b2c:	d9003617 	ldw	r4,216(sp)
  804b30:	000d883a 	mov	r6,zero
  804b34:	000f883a 	mov	r7,zero
  804b38:	980b883a 	mov	r5,r19
  804b3c:	da003d15 	stw	r8,244(sp)
  804b40:	080e4a80 	call	80e4a8 <__eqdf2>
  804b44:	da003d17 	ldw	r8,244(sp)
  804b48:	10018d26 	beq	r2,zero,805180 <___vfprintf_internal_r+0x1d98>
  804b4c:	d8802117 	ldw	r2,132(sp)
  804b50:	1700062e 	bgeu	r2,fp,804b6c <___vfprintf_internal_r+0x1784>
  804b54:	01000c04 	movi	r4,48
  804b58:	10c00044 	addi	r3,r2,1
  804b5c:	d8c02115 	stw	r3,132(sp)
  804b60:	11000005 	stb	r4,0(r2)
  804b64:	d8802117 	ldw	r2,132(sp)
  804b68:	173ffb36 	bltu	r2,fp,804b58 <__alt_mem_onchip_mem+0xff784b58>
  804b6c:	1405c83a 	sub	r2,r2,r16
  804b70:	d8803315 	stw	r2,204(sp)
  804b74:	008011c4 	movi	r2,71
  804b78:	b0817626 	beq	r22,r2,805154 <___vfprintf_internal_r+0x1d6c>
  804b7c:	00801944 	movi	r2,101
  804b80:	1442810e 	bge	r2,r17,805588 <___vfprintf_internal_r+0x21a0>
  804b84:	d8c02617 	ldw	r3,152(sp)
  804b88:	00801984 	movi	r2,102
  804b8c:	d8c03215 	stw	r3,200(sp)
  804b90:	8881fe26 	beq	r17,r2,80538c <___vfprintf_internal_r+0x1fa4>
  804b94:	d8c03217 	ldw	r3,200(sp)
  804b98:	d9003317 	ldw	r4,204(sp)
  804b9c:	1901dd16 	blt	r3,r4,805314 <___vfprintf_internal_r+0x1f2c>
  804ba0:	9480004c 	andi	r18,r18,1
  804ba4:	90022b1e 	bne	r18,zero,805454 <___vfprintf_internal_r+0x206c>
  804ba8:	1805883a 	mov	r2,r3
  804bac:	18028016 	blt	r3,zero,8055b0 <___vfprintf_internal_r+0x21c8>
  804bb0:	d8c03217 	ldw	r3,200(sp)
  804bb4:	044019c4 	movi	r17,103
  804bb8:	d8c02e15 	stw	r3,184(sp)
  804bbc:	df002a07 	ldb	fp,168(sp)
  804bc0:	e001531e 	bne	fp,zero,805110 <___vfprintf_internal_r+0x1d28>
  804bc4:	df002783 	ldbu	fp,158(sp)
  804bc8:	d8802a15 	stw	r2,168(sp)
  804bcc:	dc802b17 	ldw	r18,172(sp)
  804bd0:	d8002915 	stw	zero,164(sp)
  804bd4:	003bd106 	br	803b1c <__alt_mem_onchip_mem+0xff783b1c>
  804bd8:	d8802d17 	ldw	r2,180(sp)
  804bdc:	d8c02d17 	ldw	r3,180(sp)
  804be0:	d9002d17 	ldw	r4,180(sp)
  804be4:	10800017 	ldw	r2,0(r2)
  804be8:	18c00117 	ldw	r3,4(r3)
  804bec:	21000204 	addi	r4,r4,8
  804bf0:	d8803615 	stw	r2,216(sp)
  804bf4:	d8c03815 	stw	r3,224(sp)
  804bf8:	d9002d15 	stw	r4,180(sp)
  804bfc:	003b7506 	br	8039d4 <__alt_mem_onchip_mem+0xff7839d4>
  804c00:	ac400007 	ldb	r17,0(r21)
  804c04:	003a5906 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  804c08:	9080100c 	andi	r2,r18,64
  804c0c:	1000a826 	beq	r2,zero,804eb0 <___vfprintf_internal_r+0x1ac8>
  804c10:	d9002d17 	ldw	r4,180(sp)
  804c14:	002d883a 	mov	r22,zero
  804c18:	24c0000b 	ldhu	r19,0(r4)
  804c1c:	21000104 	addi	r4,r4,4
  804c20:	d9002d15 	stw	r4,180(sp)
  804c24:	003ccb06 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  804c28:	d8c02d17 	ldw	r3,180(sp)
  804c2c:	d9002917 	ldw	r4,164(sp)
  804c30:	002d883a 	mov	r22,zero
  804c34:	18800104 	addi	r2,r3,4
  804c38:	1cc00017 	ldw	r19,0(r3)
  804c3c:	203ebb0e 	bge	r4,zero,80472c <__alt_mem_onchip_mem+0xff78472c>
  804c40:	003ef106 	br	804808 <__alt_mem_onchip_mem+0xff784808>
  804c44:	9080040c 	andi	r2,r18,16
  804c48:	1000921e 	bne	r2,zero,804e94 <___vfprintf_internal_r+0x1aac>
  804c4c:	9480100c 	andi	r18,r18,64
  804c50:	90013926 	beq	r18,zero,805138 <___vfprintf_internal_r+0x1d50>
  804c54:	d9002d17 	ldw	r4,180(sp)
  804c58:	d9402f17 	ldw	r5,188(sp)
  804c5c:	20800017 	ldw	r2,0(r4)
  804c60:	21000104 	addi	r4,r4,4
  804c64:	d9002d15 	stw	r4,180(sp)
  804c68:	1140000d 	sth	r5,0(r2)
  804c6c:	003a1606 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  804c70:	9080100c 	andi	r2,r18,64
  804c74:	10008026 	beq	r2,zero,804e78 <___vfprintf_internal_r+0x1a90>
  804c78:	d8c02d17 	ldw	r3,180(sp)
  804c7c:	1cc0000f 	ldh	r19,0(r3)
  804c80:	18c00104 	addi	r3,r3,4
  804c84:	d8c02d15 	stw	r3,180(sp)
  804c88:	982dd7fa 	srai	r22,r19,31
  804c8c:	b005883a 	mov	r2,r22
  804c90:	003b1f06 	br	803910 <__alt_mem_onchip_mem+0xff783910>
  804c94:	9080100c 	andi	r2,r18,64
  804c98:	d8002785 	stb	zero,158(sp)
  804c9c:	10008a1e 	bne	r2,zero,804ec8 <___vfprintf_internal_r+0x1ae0>
  804ca0:	d9402d17 	ldw	r5,180(sp)
  804ca4:	d8c02917 	ldw	r3,164(sp)
  804ca8:	002d883a 	mov	r22,zero
  804cac:	28800104 	addi	r2,r5,4
  804cb0:	2cc00017 	ldw	r19,0(r5)
  804cb4:	183e4b0e 	bge	r3,zero,8045e4 <__alt_mem_onchip_mem+0xff7845e4>
  804cb8:	9d86b03a 	or	r3,r19,r22
  804cbc:	d8802d15 	stw	r2,180(sp)
  804cc0:	183e4c1e 	bne	r3,zero,8045f4 <__alt_mem_onchip_mem+0xff7845f4>
  804cc4:	0039883a 	mov	fp,zero
  804cc8:	0005883a 	mov	r2,zero
  804ccc:	003d4006 	br	8041d0 <__alt_mem_onchip_mem+0xff7841d0>
  804cd0:	01402074 	movhi	r5,129
  804cd4:	294f1584 	addi	r5,r5,15446
  804cd8:	d9402b15 	stw	r5,172(sp)
  804cdc:	d9402b17 	ldw	r5,172(sp)
  804ce0:	1c47883a 	add	r3,r3,r17
  804ce4:	10800044 	addi	r2,r2,1
  804ce8:	41400015 	stw	r5,0(r8)
  804cec:	44400115 	stw	r17,4(r8)
  804cf0:	d8c02015 	stw	r3,128(sp)
  804cf4:	d8801f15 	stw	r2,124(sp)
  804cf8:	010001c4 	movi	r4,7
  804cfc:	20bec816 	blt	r4,r2,804820 <__alt_mem_onchip_mem+0xff784820>
  804d00:	42000204 	addi	r8,r8,8
  804d04:	003ecd06 	br	80483c <__alt_mem_onchip_mem+0xff78483c>
  804d08:	d9002917 	ldw	r4,164(sp)
  804d0c:	d8002785 	stb	zero,158(sp)
  804d10:	203d2d16 	blt	r4,zero,8041c8 <__alt_mem_onchip_mem+0xff7841c8>
  804d14:	00bfdfc4 	movi	r2,-129
  804d18:	90a4703a 	and	r18,r18,r2
  804d1c:	003a9106 	br	803764 <__alt_mem_onchip_mem+0xff783764>
  804d20:	01002074 	movhi	r4,129
  804d24:	210f1584 	addi	r4,r4,15446
  804d28:	d9002b15 	stw	r4,172(sp)
  804d2c:	003c0c06 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  804d30:	d9002c17 	ldw	r4,176(sp)
  804d34:	d9801e04 	addi	r6,sp,120
  804d38:	b80b883a 	mov	r5,r23
  804d3c:	080a9e40 	call	80a9e4 <__sprint_r>
  804d40:	103aab1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804d44:	d8c02017 	ldw	r3,128(sp)
  804d48:	da000404 	addi	r8,sp,16
  804d4c:	003d4106 	br	804254 <__alt_mem_onchip_mem+0xff784254>
  804d50:	d8801f17 	ldw	r2,124(sp)
  804d54:	01402074 	movhi	r5,129
  804d58:	01000044 	movi	r4,1
  804d5c:	18c00044 	addi	r3,r3,1
  804d60:	10800044 	addi	r2,r2,1
  804d64:	294f1504 	addi	r5,r5,15444
  804d68:	41000115 	stw	r4,4(r8)
  804d6c:	41400015 	stw	r5,0(r8)
  804d70:	d8c02015 	stw	r3,128(sp)
  804d74:	d8801f15 	stw	r2,124(sp)
  804d78:	010001c4 	movi	r4,7
  804d7c:	20805c16 	blt	r4,r2,804ef0 <___vfprintf_internal_r+0x1b08>
  804d80:	42000204 	addi	r8,r8,8
  804d84:	8800041e 	bne	r17,zero,804d98 <___vfprintf_internal_r+0x19b0>
  804d88:	d8803317 	ldw	r2,204(sp)
  804d8c:	1000021e 	bne	r2,zero,804d98 <___vfprintf_internal_r+0x19b0>
  804d90:	9080004c 	andi	r2,r18,1
  804d94:	103c0926 	beq	r2,zero,803dbc <__alt_mem_onchip_mem+0xff783dbc>
  804d98:	d9003717 	ldw	r4,220(sp)
  804d9c:	d8801f17 	ldw	r2,124(sp)
  804da0:	d9403417 	ldw	r5,208(sp)
  804da4:	20c7883a 	add	r3,r4,r3
  804da8:	10800044 	addi	r2,r2,1
  804dac:	41000115 	stw	r4,4(r8)
  804db0:	41400015 	stw	r5,0(r8)
  804db4:	d8c02015 	stw	r3,128(sp)
  804db8:	d8801f15 	stw	r2,124(sp)
  804dbc:	010001c4 	movi	r4,7
  804dc0:	20812116 	blt	r4,r2,805248 <___vfprintf_internal_r+0x1e60>
  804dc4:	42000204 	addi	r8,r8,8
  804dc8:	0463c83a 	sub	r17,zero,r17
  804dcc:	0440730e 	bge	zero,r17,804f9c <___vfprintf_internal_r+0x1bb4>
  804dd0:	05800404 	movi	r22,16
  804dd4:	b440860e 	bge	r22,r17,804ff0 <___vfprintf_internal_r+0x1c08>
  804dd8:	01402074 	movhi	r5,129
  804ddc:	294f1584 	addi	r5,r5,15446
  804de0:	d9402b15 	stw	r5,172(sp)
  804de4:	070001c4 	movi	fp,7
  804de8:	dcc02c17 	ldw	r19,176(sp)
  804dec:	00000306 	br	804dfc <___vfprintf_internal_r+0x1a14>
  804df0:	42000204 	addi	r8,r8,8
  804df4:	8c7ffc04 	addi	r17,r17,-16
  804df8:	b440800e 	bge	r22,r17,804ffc <___vfprintf_internal_r+0x1c14>
  804dfc:	18c00404 	addi	r3,r3,16
  804e00:	10800044 	addi	r2,r2,1
  804e04:	45000015 	stw	r20,0(r8)
  804e08:	45800115 	stw	r22,4(r8)
  804e0c:	d8c02015 	stw	r3,128(sp)
  804e10:	d8801f15 	stw	r2,124(sp)
  804e14:	e0bff60e 	bge	fp,r2,804df0 <__alt_mem_onchip_mem+0xff784df0>
  804e18:	d9801e04 	addi	r6,sp,120
  804e1c:	b80b883a 	mov	r5,r23
  804e20:	9809883a 	mov	r4,r19
  804e24:	080a9e40 	call	80a9e4 <__sprint_r>
  804e28:	103a711e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804e2c:	d8c02017 	ldw	r3,128(sp)
  804e30:	d8801f17 	ldw	r2,124(sp)
  804e34:	da000404 	addi	r8,sp,16
  804e38:	003fee06 	br	804df4 <__alt_mem_onchip_mem+0xff784df4>
  804e3c:	00bfffc4 	movi	r2,-1
  804e40:	003a6f06 	br	803800 <__alt_mem_onchip_mem+0xff783800>
  804e44:	008011c4 	movi	r2,71
  804e48:	1440b816 	blt	r2,r17,80512c <___vfprintf_internal_r+0x1d44>
  804e4c:	04002074 	movhi	r16,129
  804e50:	840f0704 	addi	r16,r16,15388
  804e54:	00c000c4 	movi	r3,3
  804e58:	00bfdfc4 	movi	r2,-129
  804e5c:	d8c02a15 	stw	r3,168(sp)
  804e60:	90a4703a 	and	r18,r18,r2
  804e64:	df002783 	ldbu	fp,158(sp)
  804e68:	d8c02e15 	stw	r3,184(sp)
  804e6c:	d8002915 	stw	zero,164(sp)
  804e70:	d8003215 	stw	zero,200(sp)
  804e74:	003b2906 	br	803b1c <__alt_mem_onchip_mem+0xff783b1c>
  804e78:	d9002d17 	ldw	r4,180(sp)
  804e7c:	24c00017 	ldw	r19,0(r4)
  804e80:	21000104 	addi	r4,r4,4
  804e84:	d9002d15 	stw	r4,180(sp)
  804e88:	982dd7fa 	srai	r22,r19,31
  804e8c:	b005883a 	mov	r2,r22
  804e90:	003a9f06 	br	803910 <__alt_mem_onchip_mem+0xff783910>
  804e94:	d9402d17 	ldw	r5,180(sp)
  804e98:	d8c02f17 	ldw	r3,188(sp)
  804e9c:	28800017 	ldw	r2,0(r5)
  804ea0:	29400104 	addi	r5,r5,4
  804ea4:	d9402d15 	stw	r5,180(sp)
  804ea8:	10c00015 	stw	r3,0(r2)
  804eac:	00398606 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  804eb0:	d9402d17 	ldw	r5,180(sp)
  804eb4:	002d883a 	mov	r22,zero
  804eb8:	2cc00017 	ldw	r19,0(r5)
  804ebc:	29400104 	addi	r5,r5,4
  804ec0:	d9402d15 	stw	r5,180(sp)
  804ec4:	003c2306 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  804ec8:	d8c02d17 	ldw	r3,180(sp)
  804ecc:	d9002917 	ldw	r4,164(sp)
  804ed0:	002d883a 	mov	r22,zero
  804ed4:	18800104 	addi	r2,r3,4
  804ed8:	1cc0000b 	ldhu	r19,0(r3)
  804edc:	203dc10e 	bge	r4,zero,8045e4 <__alt_mem_onchip_mem+0xff7845e4>
  804ee0:	003f7506 	br	804cb8 <__alt_mem_onchip_mem+0xff784cb8>
  804ee4:	04002074 	movhi	r16,129
  804ee8:	840f0504 	addi	r16,r16,15380
  804eec:	003acc06 	br	803a20 <__alt_mem_onchip_mem+0xff783a20>
  804ef0:	d9002c17 	ldw	r4,176(sp)
  804ef4:	d9801e04 	addi	r6,sp,120
  804ef8:	b80b883a 	mov	r5,r23
  804efc:	080a9e40 	call	80a9e4 <__sprint_r>
  804f00:	103a3b1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804f04:	dc402617 	ldw	r17,152(sp)
  804f08:	d8c02017 	ldw	r3,128(sp)
  804f0c:	da000404 	addi	r8,sp,16
  804f10:	003f9c06 	br	804d84 <__alt_mem_onchip_mem+0xff784d84>
  804f14:	ac400043 	ldbu	r17,1(r21)
  804f18:	94800814 	ori	r18,r18,32
  804f1c:	ad400044 	addi	r21,r21,1
  804f20:	8c403fcc 	andi	r17,r17,255
  804f24:	8c40201c 	xori	r17,r17,128
  804f28:	8c7fe004 	addi	r17,r17,-128
  804f2c:	00398f06 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  804f30:	d8c02d15 	stw	r3,180(sp)
  804f34:	0039883a 	mov	fp,zero
  804f38:	003e3506 	br	804810 <__alt_mem_onchip_mem+0xff784810>
  804f3c:	d9002c17 	ldw	r4,176(sp)
  804f40:	d9801e04 	addi	r6,sp,120
  804f44:	b80b883a 	mov	r5,r23
  804f48:	080a9e40 	call	80a9e4 <__sprint_r>
  804f4c:	103a281e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804f50:	d8c02017 	ldw	r3,128(sp)
  804f54:	da000404 	addi	r8,sp,16
  804f58:	003cd006 	br	80429c <__alt_mem_onchip_mem+0xff78429c>
  804f5c:	8009883a 	mov	r4,r16
  804f60:	da003d15 	stw	r8,244(sp)
  804f64:	08033500 	call	803350 <strlen>
  804f68:	d8802e15 	stw	r2,184(sp)
  804f6c:	da003d17 	ldw	r8,244(sp)
  804f70:	103c340e 	bge	r2,zero,804044 <__alt_mem_onchip_mem+0xff784044>
  804f74:	0005883a 	mov	r2,zero
  804f78:	003c3206 	br	804044 <__alt_mem_onchip_mem+0xff784044>
  804f7c:	d9002c17 	ldw	r4,176(sp)
  804f80:	d9801e04 	addi	r6,sp,120
  804f84:	b80b883a 	mov	r5,r23
  804f88:	080a9e40 	call	80a9e4 <__sprint_r>
  804f8c:	103a181e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804f90:	d8c02017 	ldw	r3,128(sp)
  804f94:	d8801f17 	ldw	r2,124(sp)
  804f98:	da000404 	addi	r8,sp,16
  804f9c:	d9403317 	ldw	r5,204(sp)
  804fa0:	10800044 	addi	r2,r2,1
  804fa4:	44000015 	stw	r16,0(r8)
  804fa8:	28c7883a 	add	r3,r5,r3
  804fac:	003b7d06 	br	803da4 <__alt_mem_onchip_mem+0xff783da4>
  804fb0:	01002074 	movhi	r4,129
  804fb4:	210f1984 	addi	r4,r4,15462
  804fb8:	d9003515 	stw	r4,212(sp)
  804fbc:	003b1406 	br	803c10 <__alt_mem_onchip_mem+0xff783c10>
  804fc0:	013fffc4 	movi	r4,-1
  804fc4:	003a3506 	br	80389c <__alt_mem_onchip_mem+0xff78389c>
  804fc8:	0023883a 	mov	r17,zero
  804fcc:	003d9d06 	br	804644 <__alt_mem_onchip_mem+0xff784644>
  804fd0:	d9002c17 	ldw	r4,176(sp)
  804fd4:	d9801e04 	addi	r6,sp,120
  804fd8:	b80b883a 	mov	r5,r23
  804fdc:	080a9e40 	call	80a9e4 <__sprint_r>
  804fe0:	103a031e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  804fe4:	d8c02017 	ldw	r3,128(sp)
  804fe8:	da000404 	addi	r8,sp,16
  804fec:	003d9406 	br	804640 <__alt_mem_onchip_mem+0xff784640>
  804ff0:	01002074 	movhi	r4,129
  804ff4:	210f1584 	addi	r4,r4,15446
  804ff8:	d9002b15 	stw	r4,172(sp)
  804ffc:	d9002b17 	ldw	r4,172(sp)
  805000:	1c47883a 	add	r3,r3,r17
  805004:	10800044 	addi	r2,r2,1
  805008:	41000015 	stw	r4,0(r8)
  80500c:	44400115 	stw	r17,4(r8)
  805010:	d8c02015 	stw	r3,128(sp)
  805014:	d8801f15 	stw	r2,124(sp)
  805018:	010001c4 	movi	r4,7
  80501c:	20bfd716 	blt	r4,r2,804f7c <__alt_mem_onchip_mem+0xff784f7c>
  805020:	42000204 	addi	r8,r8,8
  805024:	003fdd06 	br	804f9c <__alt_mem_onchip_mem+0xff784f9c>
  805028:	d9002c17 	ldw	r4,176(sp)
  80502c:	d9801e04 	addi	r6,sp,120
  805030:	b80b883a 	mov	r5,r23
  805034:	080a9e40 	call	80a9e4 <__sprint_r>
  805038:	1039ed1e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80503c:	d8802617 	ldw	r2,152(sp)
  805040:	d8c02017 	ldw	r3,128(sp)
  805044:	da000404 	addi	r8,sp,16
  805048:	003e1006 	br	80488c <__alt_mem_onchip_mem+0xff78488c>
  80504c:	00800044 	movi	r2,1
  805050:	10803fcc 	andi	r2,r2,255
  805054:	00c00044 	movi	r3,1
  805058:	10fa3526 	beq	r2,r3,803930 <__alt_mem_onchip_mem+0xff783930>
  80505c:	00c00084 	movi	r3,2
  805060:	10fbcb26 	beq	r2,r3,803f90 <__alt_mem_onchip_mem+0xff783f90>
  805064:	003a8f06 	br	803aa4 <__alt_mem_onchip_mem+0xff783aa4>
  805068:	01002074 	movhi	r4,129
  80506c:	210f1984 	addi	r4,r4,15462
  805070:	d9003515 	stw	r4,212(sp)
  805074:	003b7606 	br	803e50 <__alt_mem_onchip_mem+0xff783e50>
  805078:	d8802917 	ldw	r2,164(sp)
  80507c:	00c00184 	movi	r3,6
  805080:	1880012e 	bgeu	r3,r2,805088 <___vfprintf_internal_r+0x1ca0>
  805084:	1805883a 	mov	r2,r3
  805088:	d8802e15 	stw	r2,184(sp)
  80508c:	1000ef16 	blt	r2,zero,80544c <___vfprintf_internal_r+0x2064>
  805090:	04002074 	movhi	r16,129
  805094:	d8802a15 	stw	r2,168(sp)
  805098:	dcc02d15 	stw	r19,180(sp)
  80509c:	d8002915 	stw	zero,164(sp)
  8050a0:	d8003215 	stw	zero,200(sp)
  8050a4:	840f1304 	addi	r16,r16,15436
  8050a8:	0039883a 	mov	fp,zero
  8050ac:	003aa206 	br	803b38 <__alt_mem_onchip_mem+0xff783b38>
  8050b0:	0021883a 	mov	r16,zero
  8050b4:	003e0706 	br	8048d4 <__alt_mem_onchip_mem+0xff7848d4>
  8050b8:	d9002c17 	ldw	r4,176(sp)
  8050bc:	d9801e04 	addi	r6,sp,120
  8050c0:	b80b883a 	mov	r5,r23
  8050c4:	080a9e40 	call	80a9e4 <__sprint_r>
  8050c8:	1039c91e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  8050cc:	d8802617 	ldw	r2,152(sp)
  8050d0:	d9403317 	ldw	r5,204(sp)
  8050d4:	d8c02017 	ldw	r3,128(sp)
  8050d8:	da000404 	addi	r8,sp,16
  8050dc:	2885c83a 	sub	r2,r5,r2
  8050e0:	003dfb06 	br	8048d0 <__alt_mem_onchip_mem+0xff7848d0>
  8050e4:	9080004c 	andi	r2,r18,1
  8050e8:	103e8f1e 	bne	r2,zero,804b28 <__alt_mem_onchip_mem+0xff784b28>
  8050ec:	d8802117 	ldw	r2,132(sp)
  8050f0:	003e9e06 	br	804b6c <__alt_mem_onchip_mem+0xff784b6c>
  8050f4:	1025883a 	mov	r18,r2
  8050f8:	0039883a 	mov	fp,zero
  8050fc:	00800084 	movi	r2,2
  805100:	003fd306 	br	805050 <__alt_mem_onchip_mem+0xff785050>
  805104:	07000b44 	movi	fp,45
  805108:	df002785 	stb	fp,158(sp)
  80510c:	003a4006 	br	803a10 <__alt_mem_onchip_mem+0xff783a10>
  805110:	00c00b44 	movi	r3,45
  805114:	d8c02785 	stb	r3,158(sp)
  805118:	d8802a15 	stw	r2,168(sp)
  80511c:	dc802b17 	ldw	r18,172(sp)
  805120:	d8002915 	stw	zero,164(sp)
  805124:	07000b44 	movi	fp,45
  805128:	003a8006 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  80512c:	04002074 	movhi	r16,129
  805130:	840f0804 	addi	r16,r16,15392
  805134:	003f4706 	br	804e54 <__alt_mem_onchip_mem+0xff784e54>
  805138:	d8c02d17 	ldw	r3,180(sp)
  80513c:	d9002f17 	ldw	r4,188(sp)
  805140:	18800017 	ldw	r2,0(r3)
  805144:	18c00104 	addi	r3,r3,4
  805148:	d8c02d15 	stw	r3,180(sp)
  80514c:	11000015 	stw	r4,0(r2)
  805150:	0038dd06 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  805154:	dd802617 	ldw	r22,152(sp)
  805158:	00bfff44 	movi	r2,-3
  80515c:	b0801c16 	blt	r22,r2,8051d0 <___vfprintf_internal_r+0x1de8>
  805160:	d9402917 	ldw	r5,164(sp)
  805164:	2d801a16 	blt	r5,r22,8051d0 <___vfprintf_internal_r+0x1de8>
  805168:	dd803215 	stw	r22,200(sp)
  80516c:	003e8906 	br	804b94 <__alt_mem_onchip_mem+0xff784b94>
  805170:	01002074 	movhi	r4,129
  805174:	210f1584 	addi	r4,r4,15446
  805178:	d9002b15 	stw	r4,172(sp)
  80517c:	003c9106 	br	8043c4 <__alt_mem_onchip_mem+0xff7843c4>
  805180:	e005883a 	mov	r2,fp
  805184:	003e7906 	br	804b6c <__alt_mem_onchip_mem+0xff784b6c>
  805188:	d9402917 	ldw	r5,164(sp)
  80518c:	df002783 	ldbu	fp,158(sp)
  805190:	dcc02d15 	stw	r19,180(sp)
  805194:	d9402a15 	stw	r5,168(sp)
  805198:	d9402e15 	stw	r5,184(sp)
  80519c:	d8002915 	stw	zero,164(sp)
  8051a0:	d8003215 	stw	zero,200(sp)
  8051a4:	003a5d06 	br	803b1c <__alt_mem_onchip_mem+0xff783b1c>
  8051a8:	9080004c 	andi	r2,r18,1
  8051ac:	0039883a 	mov	fp,zero
  8051b0:	10000426 	beq	r2,zero,8051c4 <___vfprintf_internal_r+0x1ddc>
  8051b4:	00800c04 	movi	r2,48
  8051b8:	dc001dc4 	addi	r16,sp,119
  8051bc:	d8801dc5 	stb	r2,119(sp)
  8051c0:	003b8006 	br	803fc4 <__alt_mem_onchip_mem+0xff783fc4>
  8051c4:	d8002e15 	stw	zero,184(sp)
  8051c8:	dc001e04 	addi	r16,sp,120
  8051cc:	003a4d06 	br	803b04 <__alt_mem_onchip_mem+0xff783b04>
  8051d0:	8c7fff84 	addi	r17,r17,-2
  8051d4:	b5bfffc4 	addi	r22,r22,-1
  8051d8:	dd802615 	stw	r22,152(sp)
  8051dc:	dc4022c5 	stb	r17,139(sp)
  8051e0:	b000bf16 	blt	r22,zero,8054e0 <___vfprintf_internal_r+0x20f8>
  8051e4:	00800ac4 	movi	r2,43
  8051e8:	d8802305 	stb	r2,140(sp)
  8051ec:	00800244 	movi	r2,9
  8051f0:	15807016 	blt	r2,r22,8053b4 <___vfprintf_internal_r+0x1fcc>
  8051f4:	00800c04 	movi	r2,48
  8051f8:	b5800c04 	addi	r22,r22,48
  8051fc:	d8802345 	stb	r2,141(sp)
  805200:	dd802385 	stb	r22,142(sp)
  805204:	d88023c4 	addi	r2,sp,143
  805208:	df0022c4 	addi	fp,sp,139
  80520c:	d8c03317 	ldw	r3,204(sp)
  805210:	1739c83a 	sub	fp,r2,fp
  805214:	d9003317 	ldw	r4,204(sp)
  805218:	e0c7883a 	add	r3,fp,r3
  80521c:	df003a15 	stw	fp,232(sp)
  805220:	d8c02e15 	stw	r3,184(sp)
  805224:	00800044 	movi	r2,1
  805228:	1100b30e 	bge	r2,r4,8054f8 <___vfprintf_internal_r+0x2110>
  80522c:	d8c02e17 	ldw	r3,184(sp)
  805230:	18c00044 	addi	r3,r3,1
  805234:	d8c02e15 	stw	r3,184(sp)
  805238:	1805883a 	mov	r2,r3
  80523c:	1800ac16 	blt	r3,zero,8054f0 <___vfprintf_internal_r+0x2108>
  805240:	d8003215 	stw	zero,200(sp)
  805244:	003e5d06 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  805248:	d9002c17 	ldw	r4,176(sp)
  80524c:	d9801e04 	addi	r6,sp,120
  805250:	b80b883a 	mov	r5,r23
  805254:	080a9e40 	call	80a9e4 <__sprint_r>
  805258:	1039651e 	bne	r2,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80525c:	dc402617 	ldw	r17,152(sp)
  805260:	d8c02017 	ldw	r3,128(sp)
  805264:	d8801f17 	ldw	r2,124(sp)
  805268:	da000404 	addi	r8,sp,16
  80526c:	003ed606 	br	804dc8 <__alt_mem_onchip_mem+0xff784dc8>
  805270:	582b883a 	mov	r21,r11
  805274:	d8002915 	stw	zero,164(sp)
  805278:	0038bd06 	br	803570 <__alt_mem_onchip_mem+0xff783570>
  80527c:	d8802917 	ldw	r2,164(sp)
  805280:	103e071e 	bne	r2,zero,804aa0 <__alt_mem_onchip_mem+0xff784aa0>
  805284:	dc002915 	stw	r16,164(sp)
  805288:	003e0506 	br	804aa0 <__alt_mem_onchip_mem+0xff784aa0>
  80528c:	d9002917 	ldw	r4,164(sp)
  805290:	20c00044 	addi	r3,r4,1
  805294:	003e0f06 	br	804ad4 <__alt_mem_onchip_mem+0xff784ad4>
  805298:	01400184 	movi	r5,6
  80529c:	d9402915 	stw	r5,164(sp)
  8052a0:	003dff06 	br	804aa0 <__alt_mem_onchip_mem+0xff784aa0>
  8052a4:	d8802104 	addi	r2,sp,132
  8052a8:	d8800315 	stw	r2,12(sp)
  8052ac:	d8802504 	addi	r2,sp,148
  8052b0:	d8800215 	stw	r2,8(sp)
  8052b4:	d8802604 	addi	r2,sp,152
  8052b8:	d8800115 	stw	r2,4(sp)
  8052bc:	d8802917 	ldw	r2,164(sp)
  8052c0:	d9403617 	ldw	r5,216(sp)
  8052c4:	d9002c17 	ldw	r4,176(sp)
  8052c8:	d8800015 	stw	r2,0(sp)
  8052cc:	01c000c4 	movi	r7,3
  8052d0:	980d883a 	mov	r6,r19
  8052d4:	da003d15 	stw	r8,244(sp)
  8052d8:	0805a0c0 	call	805a0c <_dtoa_r>
  8052dc:	d8c02917 	ldw	r3,164(sp)
  8052e0:	da003d17 	ldw	r8,244(sp)
  8052e4:	1021883a 	mov	r16,r2
  8052e8:	10f9883a 	add	fp,r2,r3
  8052ec:	81000007 	ldb	r4,0(r16)
  8052f0:	00800c04 	movi	r2,48
  8052f4:	20805e26 	beq	r4,r2,805470 <___vfprintf_internal_r+0x2088>
  8052f8:	d8c02617 	ldw	r3,152(sp)
  8052fc:	e0f9883a 	add	fp,fp,r3
  805300:	003e0a06 	br	804b2c <__alt_mem_onchip_mem+0xff784b2c>
  805304:	00c00b44 	movi	r3,45
  805308:	24e0003c 	xorhi	r19,r4,32768
  80530c:	d8c02a05 	stb	r3,168(sp)
  805310:	003de906 	br	804ab8 <__alt_mem_onchip_mem+0xff784ab8>
  805314:	d8c03217 	ldw	r3,200(sp)
  805318:	00c07a0e 	bge	zero,r3,805504 <___vfprintf_internal_r+0x211c>
  80531c:	00800044 	movi	r2,1
  805320:	d9003317 	ldw	r4,204(sp)
  805324:	1105883a 	add	r2,r2,r4
  805328:	d8802e15 	stw	r2,184(sp)
  80532c:	10004e16 	blt	r2,zero,805468 <___vfprintf_internal_r+0x2080>
  805330:	044019c4 	movi	r17,103
  805334:	003e2106 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  805338:	d9002917 	ldw	r4,164(sp)
  80533c:	d8802104 	addi	r2,sp,132
  805340:	d8800315 	stw	r2,12(sp)
  805344:	d9000015 	stw	r4,0(sp)
  805348:	d8802504 	addi	r2,sp,148
  80534c:	d9403617 	ldw	r5,216(sp)
  805350:	d9002c17 	ldw	r4,176(sp)
  805354:	d8800215 	stw	r2,8(sp)
  805358:	d8802604 	addi	r2,sp,152
  80535c:	d8800115 	stw	r2,4(sp)
  805360:	01c000c4 	movi	r7,3
  805364:	980d883a 	mov	r6,r19
  805368:	da003d15 	stw	r8,244(sp)
  80536c:	0805a0c0 	call	805a0c <_dtoa_r>
  805370:	d8c02917 	ldw	r3,164(sp)
  805374:	da003d17 	ldw	r8,244(sp)
  805378:	1021883a 	mov	r16,r2
  80537c:	00801184 	movi	r2,70
  805380:	80f9883a 	add	fp,r16,r3
  805384:	88bfd926 	beq	r17,r2,8052ec <__alt_mem_onchip_mem+0xff7852ec>
  805388:	003de806 	br	804b2c <__alt_mem_onchip_mem+0xff784b2c>
  80538c:	d9002917 	ldw	r4,164(sp)
  805390:	00c04d0e 	bge	zero,r3,8054c8 <___vfprintf_internal_r+0x20e0>
  805394:	2000441e 	bne	r4,zero,8054a8 <___vfprintf_internal_r+0x20c0>
  805398:	9480004c 	andi	r18,r18,1
  80539c:	9000421e 	bne	r18,zero,8054a8 <___vfprintf_internal_r+0x20c0>
  8053a0:	1805883a 	mov	r2,r3
  8053a4:	18007016 	blt	r3,zero,805568 <___vfprintf_internal_r+0x2180>
  8053a8:	d8c03217 	ldw	r3,200(sp)
  8053ac:	d8c02e15 	stw	r3,184(sp)
  8053b0:	003e0206 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  8053b4:	df0022c4 	addi	fp,sp,139
  8053b8:	dc002915 	stw	r16,164(sp)
  8053bc:	4027883a 	mov	r19,r8
  8053c0:	e021883a 	mov	r16,fp
  8053c4:	b009883a 	mov	r4,r22
  8053c8:	01400284 	movi	r5,10
  8053cc:	08030e00 	call	8030e0 <__modsi3>
  8053d0:	10800c04 	addi	r2,r2,48
  8053d4:	843fffc4 	addi	r16,r16,-1
  8053d8:	b009883a 	mov	r4,r22
  8053dc:	01400284 	movi	r5,10
  8053e0:	80800005 	stb	r2,0(r16)
  8053e4:	080305c0 	call	80305c <__divsi3>
  8053e8:	102d883a 	mov	r22,r2
  8053ec:	00800244 	movi	r2,9
  8053f0:	15bff416 	blt	r2,r22,8053c4 <__alt_mem_onchip_mem+0xff7853c4>
  8053f4:	9811883a 	mov	r8,r19
  8053f8:	b0800c04 	addi	r2,r22,48
  8053fc:	8027883a 	mov	r19,r16
  805400:	997fffc4 	addi	r5,r19,-1
  805404:	98bfffc5 	stb	r2,-1(r19)
  805408:	dc002917 	ldw	r16,164(sp)
  80540c:	2f006a2e 	bgeu	r5,fp,8055b8 <___vfprintf_internal_r+0x21d0>
  805410:	d9c02384 	addi	r7,sp,142
  805414:	3ccfc83a 	sub	r7,r7,r19
  805418:	d9002344 	addi	r4,sp,141
  80541c:	e1cf883a 	add	r7,fp,r7
  805420:	00000106 	br	805428 <___vfprintf_internal_r+0x2040>
  805424:	28800003 	ldbu	r2,0(r5)
  805428:	20800005 	stb	r2,0(r4)
  80542c:	21000044 	addi	r4,r4,1
  805430:	29400044 	addi	r5,r5,1
  805434:	393ffb1e 	bne	r7,r4,805424 <__alt_mem_onchip_mem+0xff785424>
  805438:	d8802304 	addi	r2,sp,140
  80543c:	14c5c83a 	sub	r2,r2,r19
  805440:	d8c02344 	addi	r3,sp,141
  805444:	1885883a 	add	r2,r3,r2
  805448:	003f7006 	br	80520c <__alt_mem_onchip_mem+0xff78520c>
  80544c:	0005883a 	mov	r2,zero
  805450:	003f0f06 	br	805090 <__alt_mem_onchip_mem+0xff785090>
  805454:	d8c03217 	ldw	r3,200(sp)
  805458:	18c00044 	addi	r3,r3,1
  80545c:	d8c02e15 	stw	r3,184(sp)
  805460:	1805883a 	mov	r2,r3
  805464:	183fb20e 	bge	r3,zero,805330 <__alt_mem_onchip_mem+0xff785330>
  805468:	0005883a 	mov	r2,zero
  80546c:	003fb006 	br	805330 <__alt_mem_onchip_mem+0xff785330>
  805470:	d9003617 	ldw	r4,216(sp)
  805474:	000d883a 	mov	r6,zero
  805478:	000f883a 	mov	r7,zero
  80547c:	980b883a 	mov	r5,r19
  805480:	d8c03c15 	stw	r3,240(sp)
  805484:	da003d15 	stw	r8,244(sp)
  805488:	080e4a80 	call	80e4a8 <__eqdf2>
  80548c:	d8c03c17 	ldw	r3,240(sp)
  805490:	da003d17 	ldw	r8,244(sp)
  805494:	103f9826 	beq	r2,zero,8052f8 <__alt_mem_onchip_mem+0xff7852f8>
  805498:	00800044 	movi	r2,1
  80549c:	10c7c83a 	sub	r3,r2,r3
  8054a0:	d8c02615 	stw	r3,152(sp)
  8054a4:	003f9506 	br	8052fc <__alt_mem_onchip_mem+0xff7852fc>
  8054a8:	d9002917 	ldw	r4,164(sp)
  8054ac:	d8c03217 	ldw	r3,200(sp)
  8054b0:	20800044 	addi	r2,r4,1
  8054b4:	1885883a 	add	r2,r3,r2
  8054b8:	d8802e15 	stw	r2,184(sp)
  8054bc:	103dbf0e 	bge	r2,zero,804bbc <__alt_mem_onchip_mem+0xff784bbc>
  8054c0:	0005883a 	mov	r2,zero
  8054c4:	003dbd06 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  8054c8:	2000211e 	bne	r4,zero,805550 <___vfprintf_internal_r+0x2168>
  8054cc:	9480004c 	andi	r18,r18,1
  8054d0:	90001f1e 	bne	r18,zero,805550 <___vfprintf_internal_r+0x2168>
  8054d4:	00800044 	movi	r2,1
  8054d8:	d8802e15 	stw	r2,184(sp)
  8054dc:	003db706 	br	804bbc <__alt_mem_onchip_mem+0xff784bbc>
  8054e0:	00800b44 	movi	r2,45
  8054e4:	05adc83a 	sub	r22,zero,r22
  8054e8:	d8802305 	stb	r2,140(sp)
  8054ec:	003f3f06 	br	8051ec <__alt_mem_onchip_mem+0xff7851ec>
  8054f0:	0005883a 	mov	r2,zero
  8054f4:	003f5206 	br	805240 <__alt_mem_onchip_mem+0xff785240>
  8054f8:	90a4703a 	and	r18,r18,r2
  8054fc:	903f4e26 	beq	r18,zero,805238 <__alt_mem_onchip_mem+0xff785238>
  805500:	003f4a06 	br	80522c <__alt_mem_onchip_mem+0xff78522c>
  805504:	00800084 	movi	r2,2
  805508:	10c5c83a 	sub	r2,r2,r3
  80550c:	003f8406 	br	805320 <__alt_mem_onchip_mem+0xff785320>
  805510:	d8802d17 	ldw	r2,180(sp)
  805514:	d9002d17 	ldw	r4,180(sp)
  805518:	ac400043 	ldbu	r17,1(r21)
  80551c:	10800017 	ldw	r2,0(r2)
  805520:	582b883a 	mov	r21,r11
  805524:	d8802915 	stw	r2,164(sp)
  805528:	20800104 	addi	r2,r4,4
  80552c:	d9002917 	ldw	r4,164(sp)
  805530:	d8802d15 	stw	r2,180(sp)
  805534:	203e7a0e 	bge	r4,zero,804f20 <__alt_mem_onchip_mem+0xff784f20>
  805538:	8c403fcc 	andi	r17,r17,255
  80553c:	00bfffc4 	movi	r2,-1
  805540:	8c40201c 	xori	r17,r17,128
  805544:	d8802915 	stw	r2,164(sp)
  805548:	8c7fe004 	addi	r17,r17,-128
  80554c:	00380706 	br	80356c <__alt_mem_onchip_mem+0xff78356c>
  805550:	d8c02917 	ldw	r3,164(sp)
  805554:	18c00084 	addi	r3,r3,2
  805558:	d8c02e15 	stw	r3,184(sp)
  80555c:	1805883a 	mov	r2,r3
  805560:	183d960e 	bge	r3,zero,804bbc <__alt_mem_onchip_mem+0xff784bbc>
  805564:	003fd606 	br	8054c0 <__alt_mem_onchip_mem+0xff7854c0>
  805568:	0005883a 	mov	r2,zero
  80556c:	003f8e06 	br	8053a8 <__alt_mem_onchip_mem+0xff7853a8>
  805570:	9080004c 	andi	r2,r18,1
  805574:	103f811e 	bne	r2,zero,80537c <__alt_mem_onchip_mem+0xff78537c>
  805578:	d8802117 	ldw	r2,132(sp)
  80557c:	1405c83a 	sub	r2,r2,r16
  805580:	d8803315 	stw	r2,204(sp)
  805584:	b47ef326 	beq	r22,r17,805154 <__alt_mem_onchip_mem+0xff785154>
  805588:	dd802617 	ldw	r22,152(sp)
  80558c:	003f1106 	br	8051d4 <__alt_mem_onchip_mem+0xff7851d4>
  805590:	d9c02785 	stb	r7,158(sp)
  805594:	00390406 	br	8039a8 <__alt_mem_onchip_mem+0xff7839a8>
  805598:	d9c02785 	stb	r7,158(sp)
  80559c:	0038d306 	br	8038ec <__alt_mem_onchip_mem+0xff7838ec>
  8055a0:	d9c02785 	stb	r7,158(sp)
  8055a4:	003a6106 	br	803f2c <__alt_mem_onchip_mem+0xff783f2c>
  8055a8:	d9c02785 	stb	r7,158(sp)
  8055ac:	003af806 	br	804190 <__alt_mem_onchip_mem+0xff784190>
  8055b0:	0005883a 	mov	r2,zero
  8055b4:	003d7e06 	br	804bb0 <__alt_mem_onchip_mem+0xff784bb0>
  8055b8:	d8802344 	addi	r2,sp,141
  8055bc:	003f1306 	br	80520c <__alt_mem_onchip_mem+0xff78520c>
  8055c0:	d9c02785 	stb	r7,158(sp)
  8055c4:	00392306 	br	803a54 <__alt_mem_onchip_mem+0xff783a54>
  8055c8:	d9c02785 	stb	r7,158(sp)
  8055cc:	003aa906 	br	804074 <__alt_mem_onchip_mem+0xff784074>
  8055d0:	d9c02785 	stb	r7,158(sp)
  8055d4:	003a3d06 	br	803ecc <__alt_mem_onchip_mem+0xff783ecc>
  8055d8:	d9c02785 	stb	r7,158(sp)
  8055dc:	003aca06 	br	804108 <__alt_mem_onchip_mem+0xff784108>

008055e0 <__vfprintf_internal>:
  8055e0:	00802074 	movhi	r2,129
  8055e4:	10978d04 	addi	r2,r2,24116
  8055e8:	300f883a 	mov	r7,r6
  8055ec:	280d883a 	mov	r6,r5
  8055f0:	200b883a 	mov	r5,r4
  8055f4:	11000017 	ldw	r4,0(r2)
  8055f8:	08033e81 	jmpi	8033e8 <___vfprintf_internal_r>

008055fc <__sbprintf>:
  8055fc:	2880030b 	ldhu	r2,12(r5)
  805600:	2ac01917 	ldw	r11,100(r5)
  805604:	2a80038b 	ldhu	r10,14(r5)
  805608:	2a400717 	ldw	r9,28(r5)
  80560c:	2a000917 	ldw	r8,36(r5)
  805610:	defee204 	addi	sp,sp,-1144
  805614:	00c10004 	movi	r3,1024
  805618:	dc011a15 	stw	r16,1128(sp)
  80561c:	10bfff4c 	andi	r2,r2,65533
  805620:	2821883a 	mov	r16,r5
  805624:	d8cb883a 	add	r5,sp,r3
  805628:	dc811c15 	stw	r18,1136(sp)
  80562c:	dc411b15 	stw	r17,1132(sp)
  805630:	dfc11d15 	stw	ra,1140(sp)
  805634:	2025883a 	mov	r18,r4
  805638:	d881030d 	sth	r2,1036(sp)
  80563c:	dac11915 	stw	r11,1124(sp)
  805640:	da81038d 	sth	r10,1038(sp)
  805644:	da410715 	stw	r9,1052(sp)
  805648:	da010915 	stw	r8,1060(sp)
  80564c:	dec10015 	stw	sp,1024(sp)
  805650:	dec10415 	stw	sp,1040(sp)
  805654:	d8c10215 	stw	r3,1032(sp)
  805658:	d8c10515 	stw	r3,1044(sp)
  80565c:	d8010615 	stw	zero,1048(sp)
  805660:	08033e80 	call	8033e8 <___vfprintf_internal_r>
  805664:	1023883a 	mov	r17,r2
  805668:	10000416 	blt	r2,zero,80567c <__sbprintf+0x80>
  80566c:	d9410004 	addi	r5,sp,1024
  805670:	9009883a 	mov	r4,r18
  805674:	08072b00 	call	8072b0 <_fflush_r>
  805678:	10000d1e 	bne	r2,zero,8056b0 <__sbprintf+0xb4>
  80567c:	d881030b 	ldhu	r2,1036(sp)
  805680:	1080100c 	andi	r2,r2,64
  805684:	10000326 	beq	r2,zero,805694 <__sbprintf+0x98>
  805688:	8080030b 	ldhu	r2,12(r16)
  80568c:	10801014 	ori	r2,r2,64
  805690:	8080030d 	sth	r2,12(r16)
  805694:	8805883a 	mov	r2,r17
  805698:	dfc11d17 	ldw	ra,1140(sp)
  80569c:	dc811c17 	ldw	r18,1136(sp)
  8056a0:	dc411b17 	ldw	r17,1132(sp)
  8056a4:	dc011a17 	ldw	r16,1128(sp)
  8056a8:	dec11e04 	addi	sp,sp,1144
  8056ac:	f800283a 	ret
  8056b0:	047fffc4 	movi	r17,-1
  8056b4:	003ff106 	br	80567c <__alt_mem_onchip_mem+0xff78567c>

008056b8 <__swsetup_r>:
  8056b8:	00802074 	movhi	r2,129
  8056bc:	defffd04 	addi	sp,sp,-12
  8056c0:	10978d04 	addi	r2,r2,24116
  8056c4:	dc400115 	stw	r17,4(sp)
  8056c8:	2023883a 	mov	r17,r4
  8056cc:	11000017 	ldw	r4,0(r2)
  8056d0:	dc000015 	stw	r16,0(sp)
  8056d4:	dfc00215 	stw	ra,8(sp)
  8056d8:	2821883a 	mov	r16,r5
  8056dc:	20000226 	beq	r4,zero,8056e8 <__swsetup_r+0x30>
  8056e0:	20800e17 	ldw	r2,56(r4)
  8056e4:	10003126 	beq	r2,zero,8057ac <__swsetup_r+0xf4>
  8056e8:	8080030b 	ldhu	r2,12(r16)
  8056ec:	10c0020c 	andi	r3,r2,8
  8056f0:	1009883a 	mov	r4,r2
  8056f4:	18000f26 	beq	r3,zero,805734 <__swsetup_r+0x7c>
  8056f8:	80c00417 	ldw	r3,16(r16)
  8056fc:	18001526 	beq	r3,zero,805754 <__swsetup_r+0x9c>
  805700:	1100004c 	andi	r4,r2,1
  805704:	20001c1e 	bne	r4,zero,805778 <__swsetup_r+0xc0>
  805708:	1080008c 	andi	r2,r2,2
  80570c:	1000291e 	bne	r2,zero,8057b4 <__swsetup_r+0xfc>
  805710:	80800517 	ldw	r2,20(r16)
  805714:	80800215 	stw	r2,8(r16)
  805718:	18001c26 	beq	r3,zero,80578c <__swsetup_r+0xd4>
  80571c:	0005883a 	mov	r2,zero
  805720:	dfc00217 	ldw	ra,8(sp)
  805724:	dc400117 	ldw	r17,4(sp)
  805728:	dc000017 	ldw	r16,0(sp)
  80572c:	dec00304 	addi	sp,sp,12
  805730:	f800283a 	ret
  805734:	2080040c 	andi	r2,r4,16
  805738:	10002e26 	beq	r2,zero,8057f4 <__swsetup_r+0x13c>
  80573c:	2080010c 	andi	r2,r4,4
  805740:	10001e1e 	bne	r2,zero,8057bc <__swsetup_r+0x104>
  805744:	80c00417 	ldw	r3,16(r16)
  805748:	20800214 	ori	r2,r4,8
  80574c:	8080030d 	sth	r2,12(r16)
  805750:	183feb1e 	bne	r3,zero,805700 <__alt_mem_onchip_mem+0xff785700>
  805754:	1100a00c 	andi	r4,r2,640
  805758:	01408004 	movi	r5,512
  80575c:	217fe826 	beq	r4,r5,805700 <__alt_mem_onchip_mem+0xff785700>
  805760:	800b883a 	mov	r5,r16
  805764:	8809883a 	mov	r4,r17
  805768:	08082300 	call	808230 <__smakebuf_r>
  80576c:	8080030b 	ldhu	r2,12(r16)
  805770:	80c00417 	ldw	r3,16(r16)
  805774:	003fe206 	br	805700 <__alt_mem_onchip_mem+0xff785700>
  805778:	80800517 	ldw	r2,20(r16)
  80577c:	80000215 	stw	zero,8(r16)
  805780:	0085c83a 	sub	r2,zero,r2
  805784:	80800615 	stw	r2,24(r16)
  805788:	183fe41e 	bne	r3,zero,80571c <__alt_mem_onchip_mem+0xff78571c>
  80578c:	80c0030b 	ldhu	r3,12(r16)
  805790:	0005883a 	mov	r2,zero
  805794:	1900200c 	andi	r4,r3,128
  805798:	203fe126 	beq	r4,zero,805720 <__alt_mem_onchip_mem+0xff785720>
  80579c:	18c01014 	ori	r3,r3,64
  8057a0:	80c0030d 	sth	r3,12(r16)
  8057a4:	00bfffc4 	movi	r2,-1
  8057a8:	003fdd06 	br	805720 <__alt_mem_onchip_mem+0xff785720>
  8057ac:	080768c0 	call	80768c <__sinit>
  8057b0:	003fcd06 	br	8056e8 <__alt_mem_onchip_mem+0xff7856e8>
  8057b4:	0005883a 	mov	r2,zero
  8057b8:	003fd606 	br	805714 <__alt_mem_onchip_mem+0xff785714>
  8057bc:	81400c17 	ldw	r5,48(r16)
  8057c0:	28000626 	beq	r5,zero,8057dc <__swsetup_r+0x124>
  8057c4:	80801004 	addi	r2,r16,64
  8057c8:	28800326 	beq	r5,r2,8057d8 <__swsetup_r+0x120>
  8057cc:	8809883a 	mov	r4,r17
  8057d0:	08078000 	call	807800 <_free_r>
  8057d4:	8100030b 	ldhu	r4,12(r16)
  8057d8:	80000c15 	stw	zero,48(r16)
  8057dc:	80c00417 	ldw	r3,16(r16)
  8057e0:	00bff6c4 	movi	r2,-37
  8057e4:	1108703a 	and	r4,r2,r4
  8057e8:	80000115 	stw	zero,4(r16)
  8057ec:	80c00015 	stw	r3,0(r16)
  8057f0:	003fd506 	br	805748 <__alt_mem_onchip_mem+0xff785748>
  8057f4:	00800244 	movi	r2,9
  8057f8:	88800015 	stw	r2,0(r17)
  8057fc:	20801014 	ori	r2,r4,64
  805800:	8080030d 	sth	r2,12(r16)
  805804:	00bfffc4 	movi	r2,-1
  805808:	003fc506 	br	805720 <__alt_mem_onchip_mem+0xff785720>

0080580c <quorem>:
  80580c:	defff704 	addi	sp,sp,-36
  805810:	dc800215 	stw	r18,8(sp)
  805814:	20800417 	ldw	r2,16(r4)
  805818:	2c800417 	ldw	r18,16(r5)
  80581c:	dfc00815 	stw	ra,32(sp)
  805820:	ddc00715 	stw	r23,28(sp)
  805824:	dd800615 	stw	r22,24(sp)
  805828:	dd400515 	stw	r21,20(sp)
  80582c:	dd000415 	stw	r20,16(sp)
  805830:	dcc00315 	stw	r19,12(sp)
  805834:	dc400115 	stw	r17,4(sp)
  805838:	dc000015 	stw	r16,0(sp)
  80583c:	14807116 	blt	r2,r18,805a04 <quorem+0x1f8>
  805840:	94bfffc4 	addi	r18,r18,-1
  805844:	94ad883a 	add	r22,r18,r18
  805848:	b5ad883a 	add	r22,r22,r22
  80584c:	2c400504 	addi	r17,r5,20
  805850:	8da9883a 	add	r20,r17,r22
  805854:	25400504 	addi	r21,r4,20
  805858:	282f883a 	mov	r23,r5
  80585c:	adad883a 	add	r22,r21,r22
  805860:	a1400017 	ldw	r5,0(r20)
  805864:	2021883a 	mov	r16,r4
  805868:	b1000017 	ldw	r4,0(r22)
  80586c:	29400044 	addi	r5,r5,1
  805870:	08031540 	call	803154 <__udivsi3>
  805874:	1027883a 	mov	r19,r2
  805878:	10002c26 	beq	r2,zero,80592c <quorem+0x120>
  80587c:	a813883a 	mov	r9,r21
  805880:	880b883a 	mov	r5,r17
  805884:	0009883a 	mov	r4,zero
  805888:	000d883a 	mov	r6,zero
  80588c:	2a000017 	ldw	r8,0(r5)
  805890:	49c00017 	ldw	r7,0(r9)
  805894:	29400104 	addi	r5,r5,4
  805898:	40bfffcc 	andi	r2,r8,65535
  80589c:	14c5383a 	mul	r2,r2,r19
  8058a0:	4010d43a 	srli	r8,r8,16
  8058a4:	38ffffcc 	andi	r3,r7,65535
  8058a8:	1105883a 	add	r2,r2,r4
  8058ac:	1008d43a 	srli	r4,r2,16
  8058b0:	44d1383a 	mul	r8,r8,r19
  8058b4:	198d883a 	add	r6,r3,r6
  8058b8:	10ffffcc 	andi	r3,r2,65535
  8058bc:	30c7c83a 	sub	r3,r6,r3
  8058c0:	380ed43a 	srli	r7,r7,16
  8058c4:	4105883a 	add	r2,r8,r4
  8058c8:	180dd43a 	srai	r6,r3,16
  8058cc:	113fffcc 	andi	r4,r2,65535
  8058d0:	390fc83a 	sub	r7,r7,r4
  8058d4:	398d883a 	add	r6,r7,r6
  8058d8:	300e943a 	slli	r7,r6,16
  8058dc:	18ffffcc 	andi	r3,r3,65535
  8058e0:	1008d43a 	srli	r4,r2,16
  8058e4:	38ceb03a 	or	r7,r7,r3
  8058e8:	49c00015 	stw	r7,0(r9)
  8058ec:	300dd43a 	srai	r6,r6,16
  8058f0:	4a400104 	addi	r9,r9,4
  8058f4:	a17fe52e 	bgeu	r20,r5,80588c <__alt_mem_onchip_mem+0xff78588c>
  8058f8:	b0800017 	ldw	r2,0(r22)
  8058fc:	10000b1e 	bne	r2,zero,80592c <quorem+0x120>
  805900:	b0bfff04 	addi	r2,r22,-4
  805904:	a880082e 	bgeu	r21,r2,805928 <quorem+0x11c>
  805908:	b0ffff17 	ldw	r3,-4(r22)
  80590c:	18000326 	beq	r3,zero,80591c <quorem+0x110>
  805910:	00000506 	br	805928 <quorem+0x11c>
  805914:	10c00017 	ldw	r3,0(r2)
  805918:	1800031e 	bne	r3,zero,805928 <quorem+0x11c>
  80591c:	10bfff04 	addi	r2,r2,-4
  805920:	94bfffc4 	addi	r18,r18,-1
  805924:	a8bffb36 	bltu	r21,r2,805914 <__alt_mem_onchip_mem+0xff785914>
  805928:	84800415 	stw	r18,16(r16)
  80592c:	b80b883a 	mov	r5,r23
  805930:	8009883a 	mov	r4,r16
  805934:	08099700 	call	809970 <__mcmp>
  805938:	10002616 	blt	r2,zero,8059d4 <quorem+0x1c8>
  80593c:	9cc00044 	addi	r19,r19,1
  805940:	a805883a 	mov	r2,r21
  805944:	000b883a 	mov	r5,zero
  805948:	11000017 	ldw	r4,0(r2)
  80594c:	89800017 	ldw	r6,0(r17)
  805950:	10800104 	addi	r2,r2,4
  805954:	20ffffcc 	andi	r3,r4,65535
  805958:	194b883a 	add	r5,r3,r5
  80595c:	30ffffcc 	andi	r3,r6,65535
  805960:	28c7c83a 	sub	r3,r5,r3
  805964:	300cd43a 	srli	r6,r6,16
  805968:	2008d43a 	srli	r4,r4,16
  80596c:	180bd43a 	srai	r5,r3,16
  805970:	18ffffcc 	andi	r3,r3,65535
  805974:	2189c83a 	sub	r4,r4,r6
  805978:	2149883a 	add	r4,r4,r5
  80597c:	200c943a 	slli	r6,r4,16
  805980:	8c400104 	addi	r17,r17,4
  805984:	200bd43a 	srai	r5,r4,16
  805988:	30c6b03a 	or	r3,r6,r3
  80598c:	10ffff15 	stw	r3,-4(r2)
  805990:	a47fed2e 	bgeu	r20,r17,805948 <__alt_mem_onchip_mem+0xff785948>
  805994:	9485883a 	add	r2,r18,r18
  805998:	1085883a 	add	r2,r2,r2
  80599c:	a887883a 	add	r3,r21,r2
  8059a0:	18800017 	ldw	r2,0(r3)
  8059a4:	10000b1e 	bne	r2,zero,8059d4 <quorem+0x1c8>
  8059a8:	18bfff04 	addi	r2,r3,-4
  8059ac:	a880082e 	bgeu	r21,r2,8059d0 <quorem+0x1c4>
  8059b0:	18ffff17 	ldw	r3,-4(r3)
  8059b4:	18000326 	beq	r3,zero,8059c4 <quorem+0x1b8>
  8059b8:	00000506 	br	8059d0 <quorem+0x1c4>
  8059bc:	10c00017 	ldw	r3,0(r2)
  8059c0:	1800031e 	bne	r3,zero,8059d0 <quorem+0x1c4>
  8059c4:	10bfff04 	addi	r2,r2,-4
  8059c8:	94bfffc4 	addi	r18,r18,-1
  8059cc:	a8bffb36 	bltu	r21,r2,8059bc <__alt_mem_onchip_mem+0xff7859bc>
  8059d0:	84800415 	stw	r18,16(r16)
  8059d4:	9805883a 	mov	r2,r19
  8059d8:	dfc00817 	ldw	ra,32(sp)
  8059dc:	ddc00717 	ldw	r23,28(sp)
  8059e0:	dd800617 	ldw	r22,24(sp)
  8059e4:	dd400517 	ldw	r21,20(sp)
  8059e8:	dd000417 	ldw	r20,16(sp)
  8059ec:	dcc00317 	ldw	r19,12(sp)
  8059f0:	dc800217 	ldw	r18,8(sp)
  8059f4:	dc400117 	ldw	r17,4(sp)
  8059f8:	dc000017 	ldw	r16,0(sp)
  8059fc:	dec00904 	addi	sp,sp,36
  805a00:	f800283a 	ret
  805a04:	0005883a 	mov	r2,zero
  805a08:	003ff306 	br	8059d8 <__alt_mem_onchip_mem+0xff7859d8>

00805a0c <_dtoa_r>:
  805a0c:	20801017 	ldw	r2,64(r4)
  805a10:	deffde04 	addi	sp,sp,-136
  805a14:	df002015 	stw	fp,128(sp)
  805a18:	dcc01b15 	stw	r19,108(sp)
  805a1c:	dc801a15 	stw	r18,104(sp)
  805a20:	dc401915 	stw	r17,100(sp)
  805a24:	dc001815 	stw	r16,96(sp)
  805a28:	dfc02115 	stw	ra,132(sp)
  805a2c:	ddc01f15 	stw	r23,124(sp)
  805a30:	dd801e15 	stw	r22,120(sp)
  805a34:	dd401d15 	stw	r21,116(sp)
  805a38:	dd001c15 	stw	r20,112(sp)
  805a3c:	d9c00315 	stw	r7,12(sp)
  805a40:	2039883a 	mov	fp,r4
  805a44:	3023883a 	mov	r17,r6
  805a48:	2825883a 	mov	r18,r5
  805a4c:	dc002417 	ldw	r16,144(sp)
  805a50:	3027883a 	mov	r19,r6
  805a54:	10000826 	beq	r2,zero,805a78 <_dtoa_r+0x6c>
  805a58:	21801117 	ldw	r6,68(r4)
  805a5c:	00c00044 	movi	r3,1
  805a60:	100b883a 	mov	r5,r2
  805a64:	1986983a 	sll	r3,r3,r6
  805a68:	11800115 	stw	r6,4(r2)
  805a6c:	10c00215 	stw	r3,8(r2)
  805a70:	08091500 	call	809150 <_Bfree>
  805a74:	e0001015 	stw	zero,64(fp)
  805a78:	88002e16 	blt	r17,zero,805b34 <_dtoa_r+0x128>
  805a7c:	80000015 	stw	zero,0(r16)
  805a80:	889ffc2c 	andhi	r2,r17,32752
  805a84:	00dffc34 	movhi	r3,32752
  805a88:	10c01c26 	beq	r2,r3,805afc <_dtoa_r+0xf0>
  805a8c:	000d883a 	mov	r6,zero
  805a90:	000f883a 	mov	r7,zero
  805a94:	9009883a 	mov	r4,r18
  805a98:	980b883a 	mov	r5,r19
  805a9c:	080e4a80 	call	80e4a8 <__eqdf2>
  805aa0:	10002b1e 	bne	r2,zero,805b50 <_dtoa_r+0x144>
  805aa4:	d9c02317 	ldw	r7,140(sp)
  805aa8:	00800044 	movi	r2,1
  805aac:	38800015 	stw	r2,0(r7)
  805ab0:	d8802517 	ldw	r2,148(sp)
  805ab4:	10019e26 	beq	r2,zero,806130 <_dtoa_r+0x724>
  805ab8:	d8c02517 	ldw	r3,148(sp)
  805abc:	00802074 	movhi	r2,129
  805ac0:	108f1544 	addi	r2,r2,15445
  805ac4:	18800015 	stw	r2,0(r3)
  805ac8:	10bfffc4 	addi	r2,r2,-1
  805acc:	dfc02117 	ldw	ra,132(sp)
  805ad0:	df002017 	ldw	fp,128(sp)
  805ad4:	ddc01f17 	ldw	r23,124(sp)
  805ad8:	dd801e17 	ldw	r22,120(sp)
  805adc:	dd401d17 	ldw	r21,116(sp)
  805ae0:	dd001c17 	ldw	r20,112(sp)
  805ae4:	dcc01b17 	ldw	r19,108(sp)
  805ae8:	dc801a17 	ldw	r18,104(sp)
  805aec:	dc401917 	ldw	r17,100(sp)
  805af0:	dc001817 	ldw	r16,96(sp)
  805af4:	dec02204 	addi	sp,sp,136
  805af8:	f800283a 	ret
  805afc:	d8c02317 	ldw	r3,140(sp)
  805b00:	0089c3c4 	movi	r2,9999
  805b04:	18800015 	stw	r2,0(r3)
  805b08:	90017726 	beq	r18,zero,8060e8 <_dtoa_r+0x6dc>
  805b0c:	00802074 	movhi	r2,129
  805b10:	108f2104 	addi	r2,r2,15492
  805b14:	d9002517 	ldw	r4,148(sp)
  805b18:	203fec26 	beq	r4,zero,805acc <__alt_mem_onchip_mem+0xff785acc>
  805b1c:	10c000c7 	ldb	r3,3(r2)
  805b20:	1801781e 	bne	r3,zero,806104 <_dtoa_r+0x6f8>
  805b24:	10c000c4 	addi	r3,r2,3
  805b28:	d9802517 	ldw	r6,148(sp)
  805b2c:	30c00015 	stw	r3,0(r6)
  805b30:	003fe606 	br	805acc <__alt_mem_onchip_mem+0xff785acc>
  805b34:	04e00034 	movhi	r19,32768
  805b38:	9cffffc4 	addi	r19,r19,-1
  805b3c:	00800044 	movi	r2,1
  805b40:	8ce6703a 	and	r19,r17,r19
  805b44:	80800015 	stw	r2,0(r16)
  805b48:	9823883a 	mov	r17,r19
  805b4c:	003fcc06 	br	805a80 <__alt_mem_onchip_mem+0xff785a80>
  805b50:	d8800204 	addi	r2,sp,8
  805b54:	d8800015 	stw	r2,0(sp)
  805b58:	d9c00104 	addi	r7,sp,4
  805b5c:	900b883a 	mov	r5,r18
  805b60:	980d883a 	mov	r6,r19
  805b64:	e009883a 	mov	r4,fp
  805b68:	8820d53a 	srli	r16,r17,20
  805b6c:	0809d3c0 	call	809d3c <__d2b>
  805b70:	d8800915 	stw	r2,36(sp)
  805b74:	8001651e 	bne	r16,zero,80610c <_dtoa_r+0x700>
  805b78:	dd800217 	ldw	r22,8(sp)
  805b7c:	dc000117 	ldw	r16,4(sp)
  805b80:	00800804 	movi	r2,32
  805b84:	b421883a 	add	r16,r22,r16
  805b88:	80c10c84 	addi	r3,r16,1074
  805b8c:	10c2d10e 	bge	r2,r3,8066d4 <_dtoa_r+0xcc8>
  805b90:	00801004 	movi	r2,64
  805b94:	81010484 	addi	r4,r16,1042
  805b98:	10c7c83a 	sub	r3,r2,r3
  805b9c:	9108d83a 	srl	r4,r18,r4
  805ba0:	88e2983a 	sll	r17,r17,r3
  805ba4:	2448b03a 	or	r4,r4,r17
  805ba8:	080f8700 	call	80f870 <__floatunsidf>
  805bac:	017f8434 	movhi	r5,65040
  805bb0:	01800044 	movi	r6,1
  805bb4:	1009883a 	mov	r4,r2
  805bb8:	194b883a 	add	r5,r3,r5
  805bbc:	843fffc4 	addi	r16,r16,-1
  805bc0:	d9801115 	stw	r6,68(sp)
  805bc4:	000d883a 	mov	r6,zero
  805bc8:	01cffe34 	movhi	r7,16376
  805bcc:	080ee180 	call	80ee18 <__subdf3>
  805bd0:	0198dbf4 	movhi	r6,25455
  805bd4:	01cff4f4 	movhi	r7,16339
  805bd8:	3190d844 	addi	r6,r6,17249
  805bdc:	39e1e9c4 	addi	r7,r7,-30809
  805be0:	1009883a 	mov	r4,r2
  805be4:	180b883a 	mov	r5,r3
  805be8:	080e7000 	call	80e700 <__muldf3>
  805bec:	01a2d874 	movhi	r6,35681
  805bf0:	01cff1f4 	movhi	r7,16327
  805bf4:	31b22cc4 	addi	r6,r6,-14157
  805bf8:	39e28a04 	addi	r7,r7,-30168
  805bfc:	180b883a 	mov	r5,r3
  805c00:	1009883a 	mov	r4,r2
  805c04:	080d3140 	call	80d314 <__adddf3>
  805c08:	8009883a 	mov	r4,r16
  805c0c:	1029883a 	mov	r20,r2
  805c10:	1823883a 	mov	r17,r3
  805c14:	080f7940 	call	80f794 <__floatsidf>
  805c18:	019427f4 	movhi	r6,20639
  805c1c:	01cff4f4 	movhi	r7,16339
  805c20:	319e7ec4 	addi	r6,r6,31227
  805c24:	39d104c4 	addi	r7,r7,17427
  805c28:	1009883a 	mov	r4,r2
  805c2c:	180b883a 	mov	r5,r3
  805c30:	080e7000 	call	80e700 <__muldf3>
  805c34:	100d883a 	mov	r6,r2
  805c38:	180f883a 	mov	r7,r3
  805c3c:	a009883a 	mov	r4,r20
  805c40:	880b883a 	mov	r5,r17
  805c44:	080d3140 	call	80d314 <__adddf3>
  805c48:	1009883a 	mov	r4,r2
  805c4c:	180b883a 	mov	r5,r3
  805c50:	1029883a 	mov	r20,r2
  805c54:	1823883a 	mov	r17,r3
  805c58:	080f7140 	call	80f714 <__fixdfsi>
  805c5c:	000d883a 	mov	r6,zero
  805c60:	000f883a 	mov	r7,zero
  805c64:	a009883a 	mov	r4,r20
  805c68:	880b883a 	mov	r5,r17
  805c6c:	d8800515 	stw	r2,20(sp)
  805c70:	080e60c0 	call	80e60c <__ledf2>
  805c74:	10028716 	blt	r2,zero,806694 <_dtoa_r+0xc88>
  805c78:	d8c00517 	ldw	r3,20(sp)
  805c7c:	00800584 	movi	r2,22
  805c80:	10c27536 	bltu	r2,r3,806658 <_dtoa_r+0xc4c>
  805c84:	180490fa 	slli	r2,r3,3
  805c88:	00c02074 	movhi	r3,129
  805c8c:	18cf3d04 	addi	r3,r3,15604
  805c90:	1885883a 	add	r2,r3,r2
  805c94:	11000017 	ldw	r4,0(r2)
  805c98:	11400117 	ldw	r5,4(r2)
  805c9c:	900d883a 	mov	r6,r18
  805ca0:	980f883a 	mov	r7,r19
  805ca4:	080e5300 	call	80e530 <__gedf2>
  805ca8:	00828d0e 	bge	zero,r2,8066e0 <_dtoa_r+0xcd4>
  805cac:	d9000517 	ldw	r4,20(sp)
  805cb0:	d8000e15 	stw	zero,56(sp)
  805cb4:	213fffc4 	addi	r4,r4,-1
  805cb8:	d9000515 	stw	r4,20(sp)
  805cbc:	b42dc83a 	sub	r22,r22,r16
  805cc0:	b5bfffc4 	addi	r22,r22,-1
  805cc4:	b0026f16 	blt	r22,zero,806684 <_dtoa_r+0xc78>
  805cc8:	d8000815 	stw	zero,32(sp)
  805ccc:	d9c00517 	ldw	r7,20(sp)
  805cd0:	38026416 	blt	r7,zero,806664 <_dtoa_r+0xc58>
  805cd4:	b1ed883a 	add	r22,r22,r7
  805cd8:	d9c00d15 	stw	r7,52(sp)
  805cdc:	d8000a15 	stw	zero,40(sp)
  805ce0:	d9800317 	ldw	r6,12(sp)
  805ce4:	00800244 	movi	r2,9
  805ce8:	11811436 	bltu	r2,r6,80613c <_dtoa_r+0x730>
  805cec:	00800144 	movi	r2,5
  805cf0:	1184e10e 	bge	r2,r6,807078 <_dtoa_r+0x166c>
  805cf4:	31bfff04 	addi	r6,r6,-4
  805cf8:	d9800315 	stw	r6,12(sp)
  805cfc:	0023883a 	mov	r17,zero
  805d00:	d9800317 	ldw	r6,12(sp)
  805d04:	008000c4 	movi	r2,3
  805d08:	30836726 	beq	r6,r2,806aa8 <_dtoa_r+0x109c>
  805d0c:	1183410e 	bge	r2,r6,806a14 <_dtoa_r+0x1008>
  805d10:	d9c00317 	ldw	r7,12(sp)
  805d14:	00800104 	movi	r2,4
  805d18:	38827c26 	beq	r7,r2,80670c <_dtoa_r+0xd00>
  805d1c:	00800144 	movi	r2,5
  805d20:	3884c41e 	bne	r7,r2,807034 <_dtoa_r+0x1628>
  805d24:	00800044 	movi	r2,1
  805d28:	d8800b15 	stw	r2,44(sp)
  805d2c:	d8c00517 	ldw	r3,20(sp)
  805d30:	d9002217 	ldw	r4,136(sp)
  805d34:	1907883a 	add	r3,r3,r4
  805d38:	19800044 	addi	r6,r3,1
  805d3c:	d8c00c15 	stw	r3,48(sp)
  805d40:	d9800615 	stw	r6,24(sp)
  805d44:	0183a40e 	bge	zero,r6,806bd8 <_dtoa_r+0x11cc>
  805d48:	d9800617 	ldw	r6,24(sp)
  805d4c:	3021883a 	mov	r16,r6
  805d50:	e0001115 	stw	zero,68(fp)
  805d54:	008005c4 	movi	r2,23
  805d58:	1184c92e 	bgeu	r2,r6,807080 <_dtoa_r+0x1674>
  805d5c:	00c00044 	movi	r3,1
  805d60:	00800104 	movi	r2,4
  805d64:	1085883a 	add	r2,r2,r2
  805d68:	11000504 	addi	r4,r2,20
  805d6c:	180b883a 	mov	r5,r3
  805d70:	18c00044 	addi	r3,r3,1
  805d74:	313ffb2e 	bgeu	r6,r4,805d64 <__alt_mem_onchip_mem+0xff785d64>
  805d78:	e1401115 	stw	r5,68(fp)
  805d7c:	e009883a 	mov	r4,fp
  805d80:	08090a80 	call	8090a8 <_Balloc>
  805d84:	d8800715 	stw	r2,28(sp)
  805d88:	e0801015 	stw	r2,64(fp)
  805d8c:	00800384 	movi	r2,14
  805d90:	1400f736 	bltu	r2,r16,806170 <_dtoa_r+0x764>
  805d94:	8800f626 	beq	r17,zero,806170 <_dtoa_r+0x764>
  805d98:	d9c00517 	ldw	r7,20(sp)
  805d9c:	01c39a0e 	bge	zero,r7,806c08 <_dtoa_r+0x11fc>
  805da0:	388003cc 	andi	r2,r7,15
  805da4:	100490fa 	slli	r2,r2,3
  805da8:	382bd13a 	srai	r21,r7,4
  805dac:	00c02074 	movhi	r3,129
  805db0:	18cf3d04 	addi	r3,r3,15604
  805db4:	1885883a 	add	r2,r3,r2
  805db8:	a8c0040c 	andi	r3,r21,16
  805dbc:	12400017 	ldw	r9,0(r2)
  805dc0:	12000117 	ldw	r8,4(r2)
  805dc4:	18037926 	beq	r3,zero,806bac <_dtoa_r+0x11a0>
  805dc8:	00802074 	movhi	r2,129
  805dcc:	108f3304 	addi	r2,r2,15564
  805dd0:	11800817 	ldw	r6,32(r2)
  805dd4:	11c00917 	ldw	r7,36(r2)
  805dd8:	9009883a 	mov	r4,r18
  805ddc:	980b883a 	mov	r5,r19
  805de0:	da001715 	stw	r8,92(sp)
  805de4:	da401615 	stw	r9,88(sp)
  805de8:	080dbc00 	call	80dbc0 <__divdf3>
  805dec:	da001717 	ldw	r8,92(sp)
  805df0:	da401617 	ldw	r9,88(sp)
  805df4:	ad4003cc 	andi	r21,r21,15
  805df8:	040000c4 	movi	r16,3
  805dfc:	1023883a 	mov	r17,r2
  805e00:	1829883a 	mov	r20,r3
  805e04:	a8001126 	beq	r21,zero,805e4c <_dtoa_r+0x440>
  805e08:	05c02074 	movhi	r23,129
  805e0c:	bdcf3304 	addi	r23,r23,15564
  805e10:	4805883a 	mov	r2,r9
  805e14:	4007883a 	mov	r3,r8
  805e18:	a980004c 	andi	r6,r21,1
  805e1c:	1009883a 	mov	r4,r2
  805e20:	a82bd07a 	srai	r21,r21,1
  805e24:	180b883a 	mov	r5,r3
  805e28:	30000426 	beq	r6,zero,805e3c <_dtoa_r+0x430>
  805e2c:	b9800017 	ldw	r6,0(r23)
  805e30:	b9c00117 	ldw	r7,4(r23)
  805e34:	84000044 	addi	r16,r16,1
  805e38:	080e7000 	call	80e700 <__muldf3>
  805e3c:	bdc00204 	addi	r23,r23,8
  805e40:	a83ff51e 	bne	r21,zero,805e18 <__alt_mem_onchip_mem+0xff785e18>
  805e44:	1013883a 	mov	r9,r2
  805e48:	1811883a 	mov	r8,r3
  805e4c:	480d883a 	mov	r6,r9
  805e50:	400f883a 	mov	r7,r8
  805e54:	8809883a 	mov	r4,r17
  805e58:	a00b883a 	mov	r5,r20
  805e5c:	080dbc00 	call	80dbc0 <__divdf3>
  805e60:	d8800f15 	stw	r2,60(sp)
  805e64:	d8c01015 	stw	r3,64(sp)
  805e68:	d8c00e17 	ldw	r3,56(sp)
  805e6c:	18000626 	beq	r3,zero,805e88 <_dtoa_r+0x47c>
  805e70:	d9000f17 	ldw	r4,60(sp)
  805e74:	d9401017 	ldw	r5,64(sp)
  805e78:	000d883a 	mov	r6,zero
  805e7c:	01cffc34 	movhi	r7,16368
  805e80:	080e60c0 	call	80e60c <__ledf2>
  805e84:	10040b16 	blt	r2,zero,806eb4 <_dtoa_r+0x14a8>
  805e88:	8009883a 	mov	r4,r16
  805e8c:	080f7940 	call	80f794 <__floatsidf>
  805e90:	d9800f17 	ldw	r6,60(sp)
  805e94:	d9c01017 	ldw	r7,64(sp)
  805e98:	1009883a 	mov	r4,r2
  805e9c:	180b883a 	mov	r5,r3
  805ea0:	080e7000 	call	80e700 <__muldf3>
  805ea4:	000d883a 	mov	r6,zero
  805ea8:	01d00734 	movhi	r7,16412
  805eac:	1009883a 	mov	r4,r2
  805eb0:	180b883a 	mov	r5,r3
  805eb4:	080d3140 	call	80d314 <__adddf3>
  805eb8:	1021883a 	mov	r16,r2
  805ebc:	d8800617 	ldw	r2,24(sp)
  805ec0:	047f3034 	movhi	r17,64704
  805ec4:	1c63883a 	add	r17,r3,r17
  805ec8:	10031826 	beq	r2,zero,806b2c <_dtoa_r+0x1120>
  805ecc:	d8c00517 	ldw	r3,20(sp)
  805ed0:	db000617 	ldw	r12,24(sp)
  805ed4:	d8c01315 	stw	r3,76(sp)
  805ed8:	d9000b17 	ldw	r4,44(sp)
  805edc:	20038f26 	beq	r4,zero,806d1c <_dtoa_r+0x1310>
  805ee0:	60bfffc4 	addi	r2,r12,-1
  805ee4:	100490fa 	slli	r2,r2,3
  805ee8:	00c02074 	movhi	r3,129
  805eec:	18cf3d04 	addi	r3,r3,15604
  805ef0:	1885883a 	add	r2,r3,r2
  805ef4:	11800017 	ldw	r6,0(r2)
  805ef8:	11c00117 	ldw	r7,4(r2)
  805efc:	d8800717 	ldw	r2,28(sp)
  805f00:	0009883a 	mov	r4,zero
  805f04:	014ff834 	movhi	r5,16352
  805f08:	db001615 	stw	r12,88(sp)
  805f0c:	15c00044 	addi	r23,r2,1
  805f10:	080dbc00 	call	80dbc0 <__divdf3>
  805f14:	800d883a 	mov	r6,r16
  805f18:	880f883a 	mov	r7,r17
  805f1c:	1009883a 	mov	r4,r2
  805f20:	180b883a 	mov	r5,r3
  805f24:	080ee180 	call	80ee18 <__subdf3>
  805f28:	d9401017 	ldw	r5,64(sp)
  805f2c:	d9000f17 	ldw	r4,60(sp)
  805f30:	102b883a 	mov	r21,r2
  805f34:	d8c01215 	stw	r3,72(sp)
  805f38:	080f7140 	call	80f714 <__fixdfsi>
  805f3c:	1009883a 	mov	r4,r2
  805f40:	1029883a 	mov	r20,r2
  805f44:	080f7940 	call	80f794 <__floatsidf>
  805f48:	d9000f17 	ldw	r4,60(sp)
  805f4c:	d9401017 	ldw	r5,64(sp)
  805f50:	100d883a 	mov	r6,r2
  805f54:	180f883a 	mov	r7,r3
  805f58:	080ee180 	call	80ee18 <__subdf3>
  805f5c:	1823883a 	mov	r17,r3
  805f60:	d8c00717 	ldw	r3,28(sp)
  805f64:	d9401217 	ldw	r5,72(sp)
  805f68:	a2000c04 	addi	r8,r20,48
  805f6c:	1021883a 	mov	r16,r2
  805f70:	1a000005 	stb	r8,0(r3)
  805f74:	800d883a 	mov	r6,r16
  805f78:	880f883a 	mov	r7,r17
  805f7c:	a809883a 	mov	r4,r21
  805f80:	4029883a 	mov	r20,r8
  805f84:	080e5300 	call	80e530 <__gedf2>
  805f88:	00841d16 	blt	zero,r2,807000 <_dtoa_r+0x15f4>
  805f8c:	800d883a 	mov	r6,r16
  805f90:	880f883a 	mov	r7,r17
  805f94:	0009883a 	mov	r4,zero
  805f98:	014ffc34 	movhi	r5,16368
  805f9c:	080ee180 	call	80ee18 <__subdf3>
  805fa0:	d9401217 	ldw	r5,72(sp)
  805fa4:	100d883a 	mov	r6,r2
  805fa8:	180f883a 	mov	r7,r3
  805fac:	a809883a 	mov	r4,r21
  805fb0:	080e5300 	call	80e530 <__gedf2>
  805fb4:	db001617 	ldw	r12,88(sp)
  805fb8:	00840e16 	blt	zero,r2,806ff4 <_dtoa_r+0x15e8>
  805fbc:	00800044 	movi	r2,1
  805fc0:	13006b0e 	bge	r2,r12,806170 <_dtoa_r+0x764>
  805fc4:	d9000717 	ldw	r4,28(sp)
  805fc8:	dd800f15 	stw	r22,60(sp)
  805fcc:	dcc01015 	stw	r19,64(sp)
  805fd0:	2319883a 	add	r12,r4,r12
  805fd4:	dcc01217 	ldw	r19,72(sp)
  805fd8:	602d883a 	mov	r22,r12
  805fdc:	dc801215 	stw	r18,72(sp)
  805fe0:	b825883a 	mov	r18,r23
  805fe4:	00000906 	br	80600c <_dtoa_r+0x600>
  805fe8:	080ee180 	call	80ee18 <__subdf3>
  805fec:	a80d883a 	mov	r6,r21
  805ff0:	980f883a 	mov	r7,r19
  805ff4:	1009883a 	mov	r4,r2
  805ff8:	180b883a 	mov	r5,r3
  805ffc:	080e60c0 	call	80e60c <__ledf2>
  806000:	1003e816 	blt	r2,zero,806fa4 <_dtoa_r+0x1598>
  806004:	b825883a 	mov	r18,r23
  806008:	bd83e926 	beq	r23,r22,806fb0 <_dtoa_r+0x15a4>
  80600c:	a809883a 	mov	r4,r21
  806010:	980b883a 	mov	r5,r19
  806014:	000d883a 	mov	r6,zero
  806018:	01d00934 	movhi	r7,16420
  80601c:	080e7000 	call	80e700 <__muldf3>
  806020:	000d883a 	mov	r6,zero
  806024:	01d00934 	movhi	r7,16420
  806028:	8009883a 	mov	r4,r16
  80602c:	880b883a 	mov	r5,r17
  806030:	102b883a 	mov	r21,r2
  806034:	1827883a 	mov	r19,r3
  806038:	080e7000 	call	80e700 <__muldf3>
  80603c:	180b883a 	mov	r5,r3
  806040:	1009883a 	mov	r4,r2
  806044:	1821883a 	mov	r16,r3
  806048:	1023883a 	mov	r17,r2
  80604c:	080f7140 	call	80f714 <__fixdfsi>
  806050:	1009883a 	mov	r4,r2
  806054:	1029883a 	mov	r20,r2
  806058:	080f7940 	call	80f794 <__floatsidf>
  80605c:	8809883a 	mov	r4,r17
  806060:	800b883a 	mov	r5,r16
  806064:	100d883a 	mov	r6,r2
  806068:	180f883a 	mov	r7,r3
  80606c:	080ee180 	call	80ee18 <__subdf3>
  806070:	a5000c04 	addi	r20,r20,48
  806074:	a80d883a 	mov	r6,r21
  806078:	980f883a 	mov	r7,r19
  80607c:	1009883a 	mov	r4,r2
  806080:	180b883a 	mov	r5,r3
  806084:	95000005 	stb	r20,0(r18)
  806088:	1021883a 	mov	r16,r2
  80608c:	1823883a 	mov	r17,r3
  806090:	080e60c0 	call	80e60c <__ledf2>
  806094:	bdc00044 	addi	r23,r23,1
  806098:	800d883a 	mov	r6,r16
  80609c:	880f883a 	mov	r7,r17
  8060a0:	0009883a 	mov	r4,zero
  8060a4:	014ffc34 	movhi	r5,16368
  8060a8:	103fcf0e 	bge	r2,zero,805fe8 <__alt_mem_onchip_mem+0xff785fe8>
  8060ac:	d8c01317 	ldw	r3,76(sp)
  8060b0:	d8c00515 	stw	r3,20(sp)
  8060b4:	d9400917 	ldw	r5,36(sp)
  8060b8:	e009883a 	mov	r4,fp
  8060bc:	08091500 	call	809150 <_Bfree>
  8060c0:	d9000517 	ldw	r4,20(sp)
  8060c4:	d9802317 	ldw	r6,140(sp)
  8060c8:	d9c02517 	ldw	r7,148(sp)
  8060cc:	b8000005 	stb	zero,0(r23)
  8060d0:	20800044 	addi	r2,r4,1
  8060d4:	30800015 	stw	r2,0(r6)
  8060d8:	3802aa26 	beq	r7,zero,806b84 <_dtoa_r+0x1178>
  8060dc:	3dc00015 	stw	r23,0(r7)
  8060e0:	d8800717 	ldw	r2,28(sp)
  8060e4:	003e7906 	br	805acc <__alt_mem_onchip_mem+0xff785acc>
  8060e8:	00800434 	movhi	r2,16
  8060ec:	10bfffc4 	addi	r2,r2,-1
  8060f0:	88a2703a 	and	r17,r17,r2
  8060f4:	883e851e 	bne	r17,zero,805b0c <__alt_mem_onchip_mem+0xff785b0c>
  8060f8:	00802074 	movhi	r2,129
  8060fc:	108f1e04 	addi	r2,r2,15480
  806100:	003e8406 	br	805b14 <__alt_mem_onchip_mem+0xff785b14>
  806104:	10c00204 	addi	r3,r2,8
  806108:	003e8706 	br	805b28 <__alt_mem_onchip_mem+0xff785b28>
  80610c:	01400434 	movhi	r5,16
  806110:	297fffc4 	addi	r5,r5,-1
  806114:	994a703a 	and	r5,r19,r5
  806118:	9009883a 	mov	r4,r18
  80611c:	843f0044 	addi	r16,r16,-1023
  806120:	294ffc34 	orhi	r5,r5,16368
  806124:	dd800217 	ldw	r22,8(sp)
  806128:	d8001115 	stw	zero,68(sp)
  80612c:	003ea506 	br	805bc4 <__alt_mem_onchip_mem+0xff785bc4>
  806130:	00802074 	movhi	r2,129
  806134:	108f1504 	addi	r2,r2,15444
  806138:	003e6406 	br	805acc <__alt_mem_onchip_mem+0xff785acc>
  80613c:	e0001115 	stw	zero,68(fp)
  806140:	000b883a 	mov	r5,zero
  806144:	e009883a 	mov	r4,fp
  806148:	08090a80 	call	8090a8 <_Balloc>
  80614c:	01bfffc4 	movi	r6,-1
  806150:	01c00044 	movi	r7,1
  806154:	d8800715 	stw	r2,28(sp)
  806158:	d9800c15 	stw	r6,48(sp)
  80615c:	e0801015 	stw	r2,64(fp)
  806160:	d8000315 	stw	zero,12(sp)
  806164:	d9c00b15 	stw	r7,44(sp)
  806168:	d9800615 	stw	r6,24(sp)
  80616c:	d8002215 	stw	zero,136(sp)
  806170:	d8800117 	ldw	r2,4(sp)
  806174:	10008916 	blt	r2,zero,80639c <_dtoa_r+0x990>
  806178:	d9000517 	ldw	r4,20(sp)
  80617c:	00c00384 	movi	r3,14
  806180:	19008616 	blt	r3,r4,80639c <_dtoa_r+0x990>
  806184:	200490fa 	slli	r2,r4,3
  806188:	00c02074 	movhi	r3,129
  80618c:	d9802217 	ldw	r6,136(sp)
  806190:	18cf3d04 	addi	r3,r3,15604
  806194:	1885883a 	add	r2,r3,r2
  806198:	14000017 	ldw	r16,0(r2)
  80619c:	14400117 	ldw	r17,4(r2)
  8061a0:	30016316 	blt	r6,zero,806730 <_dtoa_r+0xd24>
  8061a4:	800d883a 	mov	r6,r16
  8061a8:	880f883a 	mov	r7,r17
  8061ac:	9009883a 	mov	r4,r18
  8061b0:	980b883a 	mov	r5,r19
  8061b4:	080dbc00 	call	80dbc0 <__divdf3>
  8061b8:	180b883a 	mov	r5,r3
  8061bc:	1009883a 	mov	r4,r2
  8061c0:	080f7140 	call	80f714 <__fixdfsi>
  8061c4:	1009883a 	mov	r4,r2
  8061c8:	102b883a 	mov	r21,r2
  8061cc:	080f7940 	call	80f794 <__floatsidf>
  8061d0:	800d883a 	mov	r6,r16
  8061d4:	880f883a 	mov	r7,r17
  8061d8:	1009883a 	mov	r4,r2
  8061dc:	180b883a 	mov	r5,r3
  8061e0:	080e7000 	call	80e700 <__muldf3>
  8061e4:	100d883a 	mov	r6,r2
  8061e8:	180f883a 	mov	r7,r3
  8061ec:	9009883a 	mov	r4,r18
  8061f0:	980b883a 	mov	r5,r19
  8061f4:	080ee180 	call	80ee18 <__subdf3>
  8061f8:	d9c00717 	ldw	r7,28(sp)
  8061fc:	1009883a 	mov	r4,r2
  806200:	a8800c04 	addi	r2,r21,48
  806204:	38800005 	stb	r2,0(r7)
  806208:	3dc00044 	addi	r23,r7,1
  80620c:	d9c00617 	ldw	r7,24(sp)
  806210:	01800044 	movi	r6,1
  806214:	180b883a 	mov	r5,r3
  806218:	2005883a 	mov	r2,r4
  80621c:	39803826 	beq	r7,r6,806300 <_dtoa_r+0x8f4>
  806220:	000d883a 	mov	r6,zero
  806224:	01d00934 	movhi	r7,16420
  806228:	080e7000 	call	80e700 <__muldf3>
  80622c:	000d883a 	mov	r6,zero
  806230:	000f883a 	mov	r7,zero
  806234:	1009883a 	mov	r4,r2
  806238:	180b883a 	mov	r5,r3
  80623c:	1025883a 	mov	r18,r2
  806240:	1827883a 	mov	r19,r3
  806244:	080e4a80 	call	80e4a8 <__eqdf2>
  806248:	103f9a26 	beq	r2,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  80624c:	d9c00617 	ldw	r7,24(sp)
  806250:	d8c00717 	ldw	r3,28(sp)
  806254:	b829883a 	mov	r20,r23
  806258:	38bfffc4 	addi	r2,r7,-1
  80625c:	18ad883a 	add	r22,r3,r2
  806260:	00000a06 	br	80628c <_dtoa_r+0x880>
  806264:	080e7000 	call	80e700 <__muldf3>
  806268:	000d883a 	mov	r6,zero
  80626c:	000f883a 	mov	r7,zero
  806270:	1009883a 	mov	r4,r2
  806274:	180b883a 	mov	r5,r3
  806278:	1025883a 	mov	r18,r2
  80627c:	1827883a 	mov	r19,r3
  806280:	b829883a 	mov	r20,r23
  806284:	080e4a80 	call	80e4a8 <__eqdf2>
  806288:	103f8a26 	beq	r2,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  80628c:	800d883a 	mov	r6,r16
  806290:	880f883a 	mov	r7,r17
  806294:	9009883a 	mov	r4,r18
  806298:	980b883a 	mov	r5,r19
  80629c:	080dbc00 	call	80dbc0 <__divdf3>
  8062a0:	180b883a 	mov	r5,r3
  8062a4:	1009883a 	mov	r4,r2
  8062a8:	080f7140 	call	80f714 <__fixdfsi>
  8062ac:	1009883a 	mov	r4,r2
  8062b0:	102b883a 	mov	r21,r2
  8062b4:	080f7940 	call	80f794 <__floatsidf>
  8062b8:	800d883a 	mov	r6,r16
  8062bc:	880f883a 	mov	r7,r17
  8062c0:	1009883a 	mov	r4,r2
  8062c4:	180b883a 	mov	r5,r3
  8062c8:	080e7000 	call	80e700 <__muldf3>
  8062cc:	100d883a 	mov	r6,r2
  8062d0:	180f883a 	mov	r7,r3
  8062d4:	9009883a 	mov	r4,r18
  8062d8:	980b883a 	mov	r5,r19
  8062dc:	080ee180 	call	80ee18 <__subdf3>
  8062e0:	aa000c04 	addi	r8,r21,48
  8062e4:	a2000005 	stb	r8,0(r20)
  8062e8:	000d883a 	mov	r6,zero
  8062ec:	01d00934 	movhi	r7,16420
  8062f0:	1009883a 	mov	r4,r2
  8062f4:	180b883a 	mov	r5,r3
  8062f8:	a5c00044 	addi	r23,r20,1
  8062fc:	b53fd91e 	bne	r22,r20,806264 <__alt_mem_onchip_mem+0xff786264>
  806300:	100d883a 	mov	r6,r2
  806304:	180f883a 	mov	r7,r3
  806308:	1009883a 	mov	r4,r2
  80630c:	180b883a 	mov	r5,r3
  806310:	080d3140 	call	80d314 <__adddf3>
  806314:	100d883a 	mov	r6,r2
  806318:	180f883a 	mov	r7,r3
  80631c:	8009883a 	mov	r4,r16
  806320:	880b883a 	mov	r5,r17
  806324:	1027883a 	mov	r19,r2
  806328:	1825883a 	mov	r18,r3
  80632c:	080e60c0 	call	80e60c <__ledf2>
  806330:	10000816 	blt	r2,zero,806354 <_dtoa_r+0x948>
  806334:	980d883a 	mov	r6,r19
  806338:	900f883a 	mov	r7,r18
  80633c:	8009883a 	mov	r4,r16
  806340:	880b883a 	mov	r5,r17
  806344:	080e4a80 	call	80e4a8 <__eqdf2>
  806348:	103f5a1e 	bne	r2,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  80634c:	ad40004c 	andi	r21,r21,1
  806350:	a83f5826 	beq	r21,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  806354:	bd3fffc3 	ldbu	r20,-1(r23)
  806358:	b8bfffc4 	addi	r2,r23,-1
  80635c:	1007883a 	mov	r3,r2
  806360:	01400e44 	movi	r5,57
  806364:	d9800717 	ldw	r6,28(sp)
  806368:	00000506 	br	806380 <_dtoa_r+0x974>
  80636c:	18ffffc4 	addi	r3,r3,-1
  806370:	11824726 	beq	r2,r6,806c90 <_dtoa_r+0x1284>
  806374:	1d000003 	ldbu	r20,0(r3)
  806378:	102f883a 	mov	r23,r2
  80637c:	10bfffc4 	addi	r2,r2,-1
  806380:	a1003fcc 	andi	r4,r20,255
  806384:	2100201c 	xori	r4,r4,128
  806388:	213fe004 	addi	r4,r4,-128
  80638c:	217ff726 	beq	r4,r5,80636c <__alt_mem_onchip_mem+0xff78636c>
  806390:	a2000044 	addi	r8,r20,1
  806394:	12000005 	stb	r8,0(r2)
  806398:	003f4606 	br	8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  80639c:	d9000b17 	ldw	r4,44(sp)
  8063a0:	2000c826 	beq	r4,zero,8066c4 <_dtoa_r+0xcb8>
  8063a4:	d9800317 	ldw	r6,12(sp)
  8063a8:	00c00044 	movi	r3,1
  8063ac:	1980f90e 	bge	r3,r6,806794 <_dtoa_r+0xd88>
  8063b0:	d8800617 	ldw	r2,24(sp)
  8063b4:	d8c00a17 	ldw	r3,40(sp)
  8063b8:	157fffc4 	addi	r21,r2,-1
  8063bc:	1d41f316 	blt	r3,r21,806b8c <_dtoa_r+0x1180>
  8063c0:	1d6bc83a 	sub	r21,r3,r21
  8063c4:	d9c00617 	ldw	r7,24(sp)
  8063c8:	3802aa16 	blt	r7,zero,806e74 <_dtoa_r+0x1468>
  8063cc:	dd000817 	ldw	r20,32(sp)
  8063d0:	d8800617 	ldw	r2,24(sp)
  8063d4:	d8c00817 	ldw	r3,32(sp)
  8063d8:	01400044 	movi	r5,1
  8063dc:	e009883a 	mov	r4,fp
  8063e0:	1887883a 	add	r3,r3,r2
  8063e4:	d8c00815 	stw	r3,32(sp)
  8063e8:	b0ad883a 	add	r22,r22,r2
  8063ec:	08094b40 	call	8094b4 <__i2b>
  8063f0:	1023883a 	mov	r17,r2
  8063f4:	a0000826 	beq	r20,zero,806418 <_dtoa_r+0xa0c>
  8063f8:	0580070e 	bge	zero,r22,806418 <_dtoa_r+0xa0c>
  8063fc:	a005883a 	mov	r2,r20
  806400:	b500b916 	blt	r22,r20,8066e8 <_dtoa_r+0xcdc>
  806404:	d9000817 	ldw	r4,32(sp)
  806408:	a0a9c83a 	sub	r20,r20,r2
  80640c:	b0adc83a 	sub	r22,r22,r2
  806410:	2089c83a 	sub	r4,r4,r2
  806414:	d9000815 	stw	r4,32(sp)
  806418:	d9800a17 	ldw	r6,40(sp)
  80641c:	0181810e 	bge	zero,r6,806a24 <_dtoa_r+0x1018>
  806420:	d9c00b17 	ldw	r7,44(sp)
  806424:	3800b326 	beq	r7,zero,8066f4 <_dtoa_r+0xce8>
  806428:	a800b226 	beq	r21,zero,8066f4 <_dtoa_r+0xce8>
  80642c:	880b883a 	mov	r5,r17
  806430:	a80d883a 	mov	r6,r21
  806434:	e009883a 	mov	r4,fp
  806438:	08096e80 	call	8096e8 <__pow5mult>
  80643c:	d9800917 	ldw	r6,36(sp)
  806440:	100b883a 	mov	r5,r2
  806444:	e009883a 	mov	r4,fp
  806448:	1023883a 	mov	r17,r2
  80644c:	08094f00 	call	8094f0 <__multiply>
  806450:	1021883a 	mov	r16,r2
  806454:	d8800a17 	ldw	r2,40(sp)
  806458:	d9400917 	ldw	r5,36(sp)
  80645c:	e009883a 	mov	r4,fp
  806460:	1545c83a 	sub	r2,r2,r21
  806464:	d8800a15 	stw	r2,40(sp)
  806468:	08091500 	call	809150 <_Bfree>
  80646c:	d8c00a17 	ldw	r3,40(sp)
  806470:	18009f1e 	bne	r3,zero,8066f0 <_dtoa_r+0xce4>
  806474:	05c00044 	movi	r23,1
  806478:	e009883a 	mov	r4,fp
  80647c:	b80b883a 	mov	r5,r23
  806480:	08094b40 	call	8094b4 <__i2b>
  806484:	d9000d17 	ldw	r4,52(sp)
  806488:	102b883a 	mov	r21,r2
  80648c:	2000ce26 	beq	r4,zero,8067c8 <_dtoa_r+0xdbc>
  806490:	200d883a 	mov	r6,r4
  806494:	100b883a 	mov	r5,r2
  806498:	e009883a 	mov	r4,fp
  80649c:	08096e80 	call	8096e8 <__pow5mult>
  8064a0:	d9800317 	ldw	r6,12(sp)
  8064a4:	102b883a 	mov	r21,r2
  8064a8:	b981810e 	bge	r23,r6,806ab0 <_dtoa_r+0x10a4>
  8064ac:	0027883a 	mov	r19,zero
  8064b0:	a8800417 	ldw	r2,16(r21)
  8064b4:	05c00804 	movi	r23,32
  8064b8:	10800104 	addi	r2,r2,4
  8064bc:	1085883a 	add	r2,r2,r2
  8064c0:	1085883a 	add	r2,r2,r2
  8064c4:	a885883a 	add	r2,r21,r2
  8064c8:	11000017 	ldw	r4,0(r2)
  8064cc:	080939c0 	call	80939c <__hi0bits>
  8064d0:	b885c83a 	sub	r2,r23,r2
  8064d4:	1585883a 	add	r2,r2,r22
  8064d8:	108007cc 	andi	r2,r2,31
  8064dc:	1000b326 	beq	r2,zero,8067ac <_dtoa_r+0xda0>
  8064e0:	00c00804 	movi	r3,32
  8064e4:	1887c83a 	sub	r3,r3,r2
  8064e8:	01000104 	movi	r4,4
  8064ec:	20c2cd0e 	bge	r4,r3,807024 <_dtoa_r+0x1618>
  8064f0:	00c00704 	movi	r3,28
  8064f4:	1885c83a 	sub	r2,r3,r2
  8064f8:	d8c00817 	ldw	r3,32(sp)
  8064fc:	a0a9883a 	add	r20,r20,r2
  806500:	b0ad883a 	add	r22,r22,r2
  806504:	1887883a 	add	r3,r3,r2
  806508:	d8c00815 	stw	r3,32(sp)
  80650c:	d9800817 	ldw	r6,32(sp)
  806510:	0180040e 	bge	zero,r6,806524 <_dtoa_r+0xb18>
  806514:	800b883a 	mov	r5,r16
  806518:	e009883a 	mov	r4,fp
  80651c:	08098280 	call	809828 <__lshift>
  806520:	1021883a 	mov	r16,r2
  806524:	0580050e 	bge	zero,r22,80653c <_dtoa_r+0xb30>
  806528:	a80b883a 	mov	r5,r21
  80652c:	b00d883a 	mov	r6,r22
  806530:	e009883a 	mov	r4,fp
  806534:	08098280 	call	809828 <__lshift>
  806538:	102b883a 	mov	r21,r2
  80653c:	d9c00e17 	ldw	r7,56(sp)
  806540:	3801211e 	bne	r7,zero,8069c8 <_dtoa_r+0xfbc>
  806544:	d9800617 	ldw	r6,24(sp)
  806548:	0181380e 	bge	zero,r6,806a2c <_dtoa_r+0x1020>
  80654c:	d8c00b17 	ldw	r3,44(sp)
  806550:	1800ab1e 	bne	r3,zero,806800 <_dtoa_r+0xdf4>
  806554:	dc800717 	ldw	r18,28(sp)
  806558:	dcc00617 	ldw	r19,24(sp)
  80655c:	9029883a 	mov	r20,r18
  806560:	00000206 	br	80656c <_dtoa_r+0xb60>
  806564:	08091780 	call	809178 <__multadd>
  806568:	1021883a 	mov	r16,r2
  80656c:	a80b883a 	mov	r5,r21
  806570:	8009883a 	mov	r4,r16
  806574:	080580c0 	call	80580c <quorem>
  806578:	10800c04 	addi	r2,r2,48
  80657c:	90800005 	stb	r2,0(r18)
  806580:	94800044 	addi	r18,r18,1
  806584:	9507c83a 	sub	r3,r18,r20
  806588:	000f883a 	mov	r7,zero
  80658c:	01800284 	movi	r6,10
  806590:	800b883a 	mov	r5,r16
  806594:	e009883a 	mov	r4,fp
  806598:	1cfff216 	blt	r3,r19,806564 <__alt_mem_onchip_mem+0xff786564>
  80659c:	1011883a 	mov	r8,r2
  8065a0:	d8800617 	ldw	r2,24(sp)
  8065a4:	0082370e 	bge	zero,r2,806e84 <_dtoa_r+0x1478>
  8065a8:	d9000717 	ldw	r4,28(sp)
  8065ac:	0025883a 	mov	r18,zero
  8065b0:	20af883a 	add	r23,r4,r2
  8065b4:	01800044 	movi	r6,1
  8065b8:	800b883a 	mov	r5,r16
  8065bc:	e009883a 	mov	r4,fp
  8065c0:	da001715 	stw	r8,92(sp)
  8065c4:	08098280 	call	809828 <__lshift>
  8065c8:	a80b883a 	mov	r5,r21
  8065cc:	1009883a 	mov	r4,r2
  8065d0:	d8800915 	stw	r2,36(sp)
  8065d4:	08099700 	call	809970 <__mcmp>
  8065d8:	da001717 	ldw	r8,92(sp)
  8065dc:	0081800e 	bge	zero,r2,806be0 <_dtoa_r+0x11d4>
  8065e0:	b93fffc3 	ldbu	r4,-1(r23)
  8065e4:	b8bfffc4 	addi	r2,r23,-1
  8065e8:	1007883a 	mov	r3,r2
  8065ec:	01800e44 	movi	r6,57
  8065f0:	d9c00717 	ldw	r7,28(sp)
  8065f4:	00000506 	br	80660c <_dtoa_r+0xc00>
  8065f8:	18ffffc4 	addi	r3,r3,-1
  8065fc:	11c12326 	beq	r2,r7,806a8c <_dtoa_r+0x1080>
  806600:	19000003 	ldbu	r4,0(r3)
  806604:	102f883a 	mov	r23,r2
  806608:	10bfffc4 	addi	r2,r2,-1
  80660c:	21403fcc 	andi	r5,r4,255
  806610:	2940201c 	xori	r5,r5,128
  806614:	297fe004 	addi	r5,r5,-128
  806618:	29bff726 	beq	r5,r6,8065f8 <__alt_mem_onchip_mem+0xff7865f8>
  80661c:	21000044 	addi	r4,r4,1
  806620:	11000005 	stb	r4,0(r2)
  806624:	a80b883a 	mov	r5,r21
  806628:	e009883a 	mov	r4,fp
  80662c:	08091500 	call	809150 <_Bfree>
  806630:	883ea026 	beq	r17,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  806634:	90000426 	beq	r18,zero,806648 <_dtoa_r+0xc3c>
  806638:	94400326 	beq	r18,r17,806648 <_dtoa_r+0xc3c>
  80663c:	900b883a 	mov	r5,r18
  806640:	e009883a 	mov	r4,fp
  806644:	08091500 	call	809150 <_Bfree>
  806648:	880b883a 	mov	r5,r17
  80664c:	e009883a 	mov	r4,fp
  806650:	08091500 	call	809150 <_Bfree>
  806654:	003e9706 	br	8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  806658:	01800044 	movi	r6,1
  80665c:	d9800e15 	stw	r6,56(sp)
  806660:	003d9606 	br	805cbc <__alt_mem_onchip_mem+0xff785cbc>
  806664:	d8800817 	ldw	r2,32(sp)
  806668:	d8c00517 	ldw	r3,20(sp)
  80666c:	d8000d15 	stw	zero,52(sp)
  806670:	10c5c83a 	sub	r2,r2,r3
  806674:	00c9c83a 	sub	r4,zero,r3
  806678:	d8800815 	stw	r2,32(sp)
  80667c:	d9000a15 	stw	r4,40(sp)
  806680:	003d9706 	br	805ce0 <__alt_mem_onchip_mem+0xff785ce0>
  806684:	05adc83a 	sub	r22,zero,r22
  806688:	dd800815 	stw	r22,32(sp)
  80668c:	002d883a 	mov	r22,zero
  806690:	003d8e06 	br	805ccc <__alt_mem_onchip_mem+0xff785ccc>
  806694:	d9000517 	ldw	r4,20(sp)
  806698:	080f7940 	call	80f794 <__floatsidf>
  80669c:	100d883a 	mov	r6,r2
  8066a0:	180f883a 	mov	r7,r3
  8066a4:	a009883a 	mov	r4,r20
  8066a8:	880b883a 	mov	r5,r17
  8066ac:	080e4a80 	call	80e4a8 <__eqdf2>
  8066b0:	103d7126 	beq	r2,zero,805c78 <__alt_mem_onchip_mem+0xff785c78>
  8066b4:	d9c00517 	ldw	r7,20(sp)
  8066b8:	39ffffc4 	addi	r7,r7,-1
  8066bc:	d9c00515 	stw	r7,20(sp)
  8066c0:	003d6d06 	br	805c78 <__alt_mem_onchip_mem+0xff785c78>
  8066c4:	dd400a17 	ldw	r21,40(sp)
  8066c8:	dd000817 	ldw	r20,32(sp)
  8066cc:	0023883a 	mov	r17,zero
  8066d0:	003f4806 	br	8063f4 <__alt_mem_onchip_mem+0xff7863f4>
  8066d4:	10e3c83a 	sub	r17,r2,r3
  8066d8:	9448983a 	sll	r4,r18,r17
  8066dc:	003d3206 	br	805ba8 <__alt_mem_onchip_mem+0xff785ba8>
  8066e0:	d8000e15 	stw	zero,56(sp)
  8066e4:	003d7506 	br	805cbc <__alt_mem_onchip_mem+0xff785cbc>
  8066e8:	b005883a 	mov	r2,r22
  8066ec:	003f4506 	br	806404 <__alt_mem_onchip_mem+0xff786404>
  8066f0:	dc000915 	stw	r16,36(sp)
  8066f4:	d9800a17 	ldw	r6,40(sp)
  8066f8:	d9400917 	ldw	r5,36(sp)
  8066fc:	e009883a 	mov	r4,fp
  806700:	08096e80 	call	8096e8 <__pow5mult>
  806704:	1021883a 	mov	r16,r2
  806708:	003f5a06 	br	806474 <__alt_mem_onchip_mem+0xff786474>
  80670c:	01c00044 	movi	r7,1
  806710:	d9c00b15 	stw	r7,44(sp)
  806714:	d8802217 	ldw	r2,136(sp)
  806718:	0081280e 	bge	zero,r2,806bbc <_dtoa_r+0x11b0>
  80671c:	100d883a 	mov	r6,r2
  806720:	1021883a 	mov	r16,r2
  806724:	d8800c15 	stw	r2,48(sp)
  806728:	d8800615 	stw	r2,24(sp)
  80672c:	003d8806 	br	805d50 <__alt_mem_onchip_mem+0xff785d50>
  806730:	d8800617 	ldw	r2,24(sp)
  806734:	00be9b16 	blt	zero,r2,8061a4 <__alt_mem_onchip_mem+0xff7861a4>
  806738:	10010f1e 	bne	r2,zero,806b78 <_dtoa_r+0x116c>
  80673c:	880b883a 	mov	r5,r17
  806740:	000d883a 	mov	r6,zero
  806744:	01d00534 	movhi	r7,16404
  806748:	8009883a 	mov	r4,r16
  80674c:	080e7000 	call	80e700 <__muldf3>
  806750:	900d883a 	mov	r6,r18
  806754:	980f883a 	mov	r7,r19
  806758:	1009883a 	mov	r4,r2
  80675c:	180b883a 	mov	r5,r3
  806760:	080e5300 	call	80e530 <__gedf2>
  806764:	002b883a 	mov	r21,zero
  806768:	0023883a 	mov	r17,zero
  80676c:	1000bf16 	blt	r2,zero,806a6c <_dtoa_r+0x1060>
  806770:	d9802217 	ldw	r6,136(sp)
  806774:	ddc00717 	ldw	r23,28(sp)
  806778:	018c303a 	nor	r6,zero,r6
  80677c:	d9800515 	stw	r6,20(sp)
  806780:	a80b883a 	mov	r5,r21
  806784:	e009883a 	mov	r4,fp
  806788:	08091500 	call	809150 <_Bfree>
  80678c:	883e4926 	beq	r17,zero,8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  806790:	003fad06 	br	806648 <__alt_mem_onchip_mem+0xff786648>
  806794:	d9c01117 	ldw	r7,68(sp)
  806798:	3801bc26 	beq	r7,zero,806e8c <_dtoa_r+0x1480>
  80679c:	10810cc4 	addi	r2,r2,1075
  8067a0:	dd400a17 	ldw	r21,40(sp)
  8067a4:	dd000817 	ldw	r20,32(sp)
  8067a8:	003f0a06 	br	8063d4 <__alt_mem_onchip_mem+0xff7863d4>
  8067ac:	00800704 	movi	r2,28
  8067b0:	d9000817 	ldw	r4,32(sp)
  8067b4:	a0a9883a 	add	r20,r20,r2
  8067b8:	b0ad883a 	add	r22,r22,r2
  8067bc:	2089883a 	add	r4,r4,r2
  8067c0:	d9000815 	stw	r4,32(sp)
  8067c4:	003f5106 	br	80650c <__alt_mem_onchip_mem+0xff78650c>
  8067c8:	d8c00317 	ldw	r3,12(sp)
  8067cc:	b8c1fc0e 	bge	r23,r3,806fc0 <_dtoa_r+0x15b4>
  8067d0:	0027883a 	mov	r19,zero
  8067d4:	b805883a 	mov	r2,r23
  8067d8:	003f3e06 	br	8064d4 <__alt_mem_onchip_mem+0xff7864d4>
  8067dc:	880b883a 	mov	r5,r17
  8067e0:	e009883a 	mov	r4,fp
  8067e4:	000f883a 	mov	r7,zero
  8067e8:	01800284 	movi	r6,10
  8067ec:	08091780 	call	809178 <__multadd>
  8067f0:	d9000c17 	ldw	r4,48(sp)
  8067f4:	1023883a 	mov	r17,r2
  8067f8:	0102040e 	bge	zero,r4,80700c <_dtoa_r+0x1600>
  8067fc:	d9000615 	stw	r4,24(sp)
  806800:	0500050e 	bge	zero,r20,806818 <_dtoa_r+0xe0c>
  806804:	880b883a 	mov	r5,r17
  806808:	a00d883a 	mov	r6,r20
  80680c:	e009883a 	mov	r4,fp
  806810:	08098280 	call	809828 <__lshift>
  806814:	1023883a 	mov	r17,r2
  806818:	9801241e 	bne	r19,zero,806cac <_dtoa_r+0x12a0>
  80681c:	8829883a 	mov	r20,r17
  806820:	d9000617 	ldw	r4,24(sp)
  806824:	dcc00717 	ldw	r19,28(sp)
  806828:	9480004c 	andi	r18,r18,1
  80682c:	20bfffc4 	addi	r2,r4,-1
  806830:	9885883a 	add	r2,r19,r2
  806834:	d8800415 	stw	r2,16(sp)
  806838:	dc800615 	stw	r18,24(sp)
  80683c:	a80b883a 	mov	r5,r21
  806840:	8009883a 	mov	r4,r16
  806844:	080580c0 	call	80580c <quorem>
  806848:	880b883a 	mov	r5,r17
  80684c:	8009883a 	mov	r4,r16
  806850:	102f883a 	mov	r23,r2
  806854:	08099700 	call	809970 <__mcmp>
  806858:	a80b883a 	mov	r5,r21
  80685c:	a00d883a 	mov	r6,r20
  806860:	e009883a 	mov	r4,fp
  806864:	102d883a 	mov	r22,r2
  806868:	08099d00 	call	8099d0 <__mdiff>
  80686c:	1007883a 	mov	r3,r2
  806870:	10800317 	ldw	r2,12(r2)
  806874:	bc800c04 	addi	r18,r23,48
  806878:	180b883a 	mov	r5,r3
  80687c:	10004e1e 	bne	r2,zero,8069b8 <_dtoa_r+0xfac>
  806880:	8009883a 	mov	r4,r16
  806884:	d8c01615 	stw	r3,88(sp)
  806888:	08099700 	call	809970 <__mcmp>
  80688c:	d8c01617 	ldw	r3,88(sp)
  806890:	e009883a 	mov	r4,fp
  806894:	d8801615 	stw	r2,88(sp)
  806898:	180b883a 	mov	r5,r3
  80689c:	08091500 	call	809150 <_Bfree>
  8068a0:	d8801617 	ldw	r2,88(sp)
  8068a4:	1000041e 	bne	r2,zero,8068b8 <_dtoa_r+0xeac>
  8068a8:	d9800317 	ldw	r6,12(sp)
  8068ac:	3000021e 	bne	r6,zero,8068b8 <_dtoa_r+0xeac>
  8068b0:	d8c00617 	ldw	r3,24(sp)
  8068b4:	18003726 	beq	r3,zero,806994 <_dtoa_r+0xf88>
  8068b8:	b0002016 	blt	r22,zero,80693c <_dtoa_r+0xf30>
  8068bc:	b000041e 	bne	r22,zero,8068d0 <_dtoa_r+0xec4>
  8068c0:	d9000317 	ldw	r4,12(sp)
  8068c4:	2000021e 	bne	r4,zero,8068d0 <_dtoa_r+0xec4>
  8068c8:	d8c00617 	ldw	r3,24(sp)
  8068cc:	18001b26 	beq	r3,zero,80693c <_dtoa_r+0xf30>
  8068d0:	00810716 	blt	zero,r2,806cf0 <_dtoa_r+0x12e4>
  8068d4:	d8c00417 	ldw	r3,16(sp)
  8068d8:	9d800044 	addi	r22,r19,1
  8068dc:	9c800005 	stb	r18,0(r19)
  8068e0:	b02f883a 	mov	r23,r22
  8068e4:	98c10626 	beq	r19,r3,806d00 <_dtoa_r+0x12f4>
  8068e8:	800b883a 	mov	r5,r16
  8068ec:	000f883a 	mov	r7,zero
  8068f0:	01800284 	movi	r6,10
  8068f4:	e009883a 	mov	r4,fp
  8068f8:	08091780 	call	809178 <__multadd>
  8068fc:	1021883a 	mov	r16,r2
  806900:	000f883a 	mov	r7,zero
  806904:	01800284 	movi	r6,10
  806908:	880b883a 	mov	r5,r17
  80690c:	e009883a 	mov	r4,fp
  806910:	8d002526 	beq	r17,r20,8069a8 <_dtoa_r+0xf9c>
  806914:	08091780 	call	809178 <__multadd>
  806918:	a00b883a 	mov	r5,r20
  80691c:	000f883a 	mov	r7,zero
  806920:	01800284 	movi	r6,10
  806924:	e009883a 	mov	r4,fp
  806928:	1023883a 	mov	r17,r2
  80692c:	08091780 	call	809178 <__multadd>
  806930:	1029883a 	mov	r20,r2
  806934:	b027883a 	mov	r19,r22
  806938:	003fc006 	br	80683c <__alt_mem_onchip_mem+0xff78683c>
  80693c:	9011883a 	mov	r8,r18
  806940:	00800e0e 	bge	zero,r2,80697c <_dtoa_r+0xf70>
  806944:	800b883a 	mov	r5,r16
  806948:	01800044 	movi	r6,1
  80694c:	e009883a 	mov	r4,fp
  806950:	da001715 	stw	r8,92(sp)
  806954:	08098280 	call	809828 <__lshift>
  806958:	a80b883a 	mov	r5,r21
  80695c:	1009883a 	mov	r4,r2
  806960:	1021883a 	mov	r16,r2
  806964:	08099700 	call	809970 <__mcmp>
  806968:	da001717 	ldw	r8,92(sp)
  80696c:	0081960e 	bge	zero,r2,806fc8 <_dtoa_r+0x15bc>
  806970:	00800e44 	movi	r2,57
  806974:	40817026 	beq	r8,r2,806f38 <_dtoa_r+0x152c>
  806978:	ba000c44 	addi	r8,r23,49
  80697c:	8825883a 	mov	r18,r17
  806980:	9dc00044 	addi	r23,r19,1
  806984:	9a000005 	stb	r8,0(r19)
  806988:	a023883a 	mov	r17,r20
  80698c:	dc000915 	stw	r16,36(sp)
  806990:	003f2406 	br	806624 <__alt_mem_onchip_mem+0xff786624>
  806994:	00800e44 	movi	r2,57
  806998:	9011883a 	mov	r8,r18
  80699c:	90816626 	beq	r18,r2,806f38 <_dtoa_r+0x152c>
  8069a0:	05bff516 	blt	zero,r22,806978 <__alt_mem_onchip_mem+0xff786978>
  8069a4:	003ff506 	br	80697c <__alt_mem_onchip_mem+0xff78697c>
  8069a8:	08091780 	call	809178 <__multadd>
  8069ac:	1023883a 	mov	r17,r2
  8069b0:	1029883a 	mov	r20,r2
  8069b4:	003fdf06 	br	806934 <__alt_mem_onchip_mem+0xff786934>
  8069b8:	e009883a 	mov	r4,fp
  8069bc:	08091500 	call	809150 <_Bfree>
  8069c0:	00800044 	movi	r2,1
  8069c4:	003fbc06 	br	8068b8 <__alt_mem_onchip_mem+0xff7868b8>
  8069c8:	a80b883a 	mov	r5,r21
  8069cc:	8009883a 	mov	r4,r16
  8069d0:	08099700 	call	809970 <__mcmp>
  8069d4:	103edb0e 	bge	r2,zero,806544 <__alt_mem_onchip_mem+0xff786544>
  8069d8:	800b883a 	mov	r5,r16
  8069dc:	000f883a 	mov	r7,zero
  8069e0:	01800284 	movi	r6,10
  8069e4:	e009883a 	mov	r4,fp
  8069e8:	08091780 	call	809178 <__multadd>
  8069ec:	1021883a 	mov	r16,r2
  8069f0:	d8800517 	ldw	r2,20(sp)
  8069f4:	d8c00b17 	ldw	r3,44(sp)
  8069f8:	10bfffc4 	addi	r2,r2,-1
  8069fc:	d8800515 	stw	r2,20(sp)
  806a00:	183f761e 	bne	r3,zero,8067dc <__alt_mem_onchip_mem+0xff7867dc>
  806a04:	d9000c17 	ldw	r4,48(sp)
  806a08:	0101730e 	bge	zero,r4,806fd8 <_dtoa_r+0x15cc>
  806a0c:	d9000615 	stw	r4,24(sp)
  806a10:	003ed006 	br	806554 <__alt_mem_onchip_mem+0xff786554>
  806a14:	00800084 	movi	r2,2
  806a18:	3081861e 	bne	r6,r2,807034 <_dtoa_r+0x1628>
  806a1c:	d8000b15 	stw	zero,44(sp)
  806a20:	003f3c06 	br	806714 <__alt_mem_onchip_mem+0xff786714>
  806a24:	dc000917 	ldw	r16,36(sp)
  806a28:	003e9206 	br	806474 <__alt_mem_onchip_mem+0xff786474>
  806a2c:	d9c00317 	ldw	r7,12(sp)
  806a30:	00800084 	movi	r2,2
  806a34:	11fec50e 	bge	r2,r7,80654c <__alt_mem_onchip_mem+0xff78654c>
  806a38:	d9000617 	ldw	r4,24(sp)
  806a3c:	20013c1e 	bne	r4,zero,806f30 <_dtoa_r+0x1524>
  806a40:	a80b883a 	mov	r5,r21
  806a44:	000f883a 	mov	r7,zero
  806a48:	01800144 	movi	r6,5
  806a4c:	e009883a 	mov	r4,fp
  806a50:	08091780 	call	809178 <__multadd>
  806a54:	100b883a 	mov	r5,r2
  806a58:	8009883a 	mov	r4,r16
  806a5c:	102b883a 	mov	r21,r2
  806a60:	08099700 	call	809970 <__mcmp>
  806a64:	dc000915 	stw	r16,36(sp)
  806a68:	00bf410e 	bge	zero,r2,806770 <__alt_mem_onchip_mem+0xff786770>
  806a6c:	d9c00717 	ldw	r7,28(sp)
  806a70:	00800c44 	movi	r2,49
  806a74:	38800005 	stb	r2,0(r7)
  806a78:	d8800517 	ldw	r2,20(sp)
  806a7c:	3dc00044 	addi	r23,r7,1
  806a80:	10800044 	addi	r2,r2,1
  806a84:	d8800515 	stw	r2,20(sp)
  806a88:	003f3d06 	br	806780 <__alt_mem_onchip_mem+0xff786780>
  806a8c:	d9800517 	ldw	r6,20(sp)
  806a90:	d9c00717 	ldw	r7,28(sp)
  806a94:	00800c44 	movi	r2,49
  806a98:	31800044 	addi	r6,r6,1
  806a9c:	d9800515 	stw	r6,20(sp)
  806aa0:	38800005 	stb	r2,0(r7)
  806aa4:	003edf06 	br	806624 <__alt_mem_onchip_mem+0xff786624>
  806aa8:	d8000b15 	stw	zero,44(sp)
  806aac:	003c9f06 	br	805d2c <__alt_mem_onchip_mem+0xff785d2c>
  806ab0:	903e7e1e 	bne	r18,zero,8064ac <__alt_mem_onchip_mem+0xff7864ac>
  806ab4:	00800434 	movhi	r2,16
  806ab8:	10bfffc4 	addi	r2,r2,-1
  806abc:	9884703a 	and	r2,r19,r2
  806ac0:	1000ea1e 	bne	r2,zero,806e6c <_dtoa_r+0x1460>
  806ac4:	9cdffc2c 	andhi	r19,r19,32752
  806ac8:	9800e826 	beq	r19,zero,806e6c <_dtoa_r+0x1460>
  806acc:	d9c00817 	ldw	r7,32(sp)
  806ad0:	b5800044 	addi	r22,r22,1
  806ad4:	04c00044 	movi	r19,1
  806ad8:	39c00044 	addi	r7,r7,1
  806adc:	d9c00815 	stw	r7,32(sp)
  806ae0:	d8800d17 	ldw	r2,52(sp)
  806ae4:	103e721e 	bne	r2,zero,8064b0 <__alt_mem_onchip_mem+0xff7864b0>
  806ae8:	00800044 	movi	r2,1
  806aec:	003e7906 	br	8064d4 <__alt_mem_onchip_mem+0xff7864d4>
  806af0:	8009883a 	mov	r4,r16
  806af4:	080f7940 	call	80f794 <__floatsidf>
  806af8:	d9800f17 	ldw	r6,60(sp)
  806afc:	d9c01017 	ldw	r7,64(sp)
  806b00:	1009883a 	mov	r4,r2
  806b04:	180b883a 	mov	r5,r3
  806b08:	080e7000 	call	80e700 <__muldf3>
  806b0c:	000d883a 	mov	r6,zero
  806b10:	01d00734 	movhi	r7,16412
  806b14:	1009883a 	mov	r4,r2
  806b18:	180b883a 	mov	r5,r3
  806b1c:	080d3140 	call	80d314 <__adddf3>
  806b20:	047f3034 	movhi	r17,64704
  806b24:	1021883a 	mov	r16,r2
  806b28:	1c63883a 	add	r17,r3,r17
  806b2c:	d9000f17 	ldw	r4,60(sp)
  806b30:	d9401017 	ldw	r5,64(sp)
  806b34:	000d883a 	mov	r6,zero
  806b38:	01d00534 	movhi	r7,16404
  806b3c:	080ee180 	call	80ee18 <__subdf3>
  806b40:	800d883a 	mov	r6,r16
  806b44:	880f883a 	mov	r7,r17
  806b48:	1009883a 	mov	r4,r2
  806b4c:	180b883a 	mov	r5,r3
  806b50:	102b883a 	mov	r21,r2
  806b54:	1829883a 	mov	r20,r3
  806b58:	080e5300 	call	80e530 <__gedf2>
  806b5c:	00806c16 	blt	zero,r2,806d10 <_dtoa_r+0x1304>
  806b60:	89e0003c 	xorhi	r7,r17,32768
  806b64:	800d883a 	mov	r6,r16
  806b68:	a809883a 	mov	r4,r21
  806b6c:	a00b883a 	mov	r5,r20
  806b70:	080e60c0 	call	80e60c <__ledf2>
  806b74:	103d7e0e 	bge	r2,zero,806170 <__alt_mem_onchip_mem+0xff786170>
  806b78:	002b883a 	mov	r21,zero
  806b7c:	0023883a 	mov	r17,zero
  806b80:	003efb06 	br	806770 <__alt_mem_onchip_mem+0xff786770>
  806b84:	d8800717 	ldw	r2,28(sp)
  806b88:	003bd006 	br	805acc <__alt_mem_onchip_mem+0xff785acc>
  806b8c:	d9000a17 	ldw	r4,40(sp)
  806b90:	d9800d17 	ldw	r6,52(sp)
  806b94:	dd400a15 	stw	r21,40(sp)
  806b98:	a905c83a 	sub	r2,r21,r4
  806b9c:	308d883a 	add	r6,r6,r2
  806ba0:	d9800d15 	stw	r6,52(sp)
  806ba4:	002b883a 	mov	r21,zero
  806ba8:	003e0606 	br	8063c4 <__alt_mem_onchip_mem+0xff7863c4>
  806bac:	9023883a 	mov	r17,r18
  806bb0:	9829883a 	mov	r20,r19
  806bb4:	04000084 	movi	r16,2
  806bb8:	003c9206 	br	805e04 <__alt_mem_onchip_mem+0xff785e04>
  806bbc:	04000044 	movi	r16,1
  806bc0:	dc000c15 	stw	r16,48(sp)
  806bc4:	dc000615 	stw	r16,24(sp)
  806bc8:	dc002215 	stw	r16,136(sp)
  806bcc:	e0001115 	stw	zero,68(fp)
  806bd0:	000b883a 	mov	r5,zero
  806bd4:	003c6906 	br	805d7c <__alt_mem_onchip_mem+0xff785d7c>
  806bd8:	3021883a 	mov	r16,r6
  806bdc:	003ffb06 	br	806bcc <__alt_mem_onchip_mem+0xff786bcc>
  806be0:	1000021e 	bne	r2,zero,806bec <_dtoa_r+0x11e0>
  806be4:	4200004c 	andi	r8,r8,1
  806be8:	403e7d1e 	bne	r8,zero,8065e0 <__alt_mem_onchip_mem+0xff7865e0>
  806bec:	01000c04 	movi	r4,48
  806bf0:	00000106 	br	806bf8 <_dtoa_r+0x11ec>
  806bf4:	102f883a 	mov	r23,r2
  806bf8:	b8bfffc4 	addi	r2,r23,-1
  806bfc:	10c00007 	ldb	r3,0(r2)
  806c00:	193ffc26 	beq	r3,r4,806bf4 <__alt_mem_onchip_mem+0xff786bf4>
  806c04:	003e8706 	br	806624 <__alt_mem_onchip_mem+0xff786624>
  806c08:	d8800517 	ldw	r2,20(sp)
  806c0c:	00a3c83a 	sub	r17,zero,r2
  806c10:	8800a426 	beq	r17,zero,806ea4 <_dtoa_r+0x1498>
  806c14:	888003cc 	andi	r2,r17,15
  806c18:	100490fa 	slli	r2,r2,3
  806c1c:	00c02074 	movhi	r3,129
  806c20:	18cf3d04 	addi	r3,r3,15604
  806c24:	1885883a 	add	r2,r3,r2
  806c28:	11800017 	ldw	r6,0(r2)
  806c2c:	11c00117 	ldw	r7,4(r2)
  806c30:	9009883a 	mov	r4,r18
  806c34:	980b883a 	mov	r5,r19
  806c38:	8823d13a 	srai	r17,r17,4
  806c3c:	080e7000 	call	80e700 <__muldf3>
  806c40:	d8800f15 	stw	r2,60(sp)
  806c44:	d8c01015 	stw	r3,64(sp)
  806c48:	8800e826 	beq	r17,zero,806fec <_dtoa_r+0x15e0>
  806c4c:	05002074 	movhi	r20,129
  806c50:	a50f3304 	addi	r20,r20,15564
  806c54:	04000084 	movi	r16,2
  806c58:	8980004c 	andi	r6,r17,1
  806c5c:	1009883a 	mov	r4,r2
  806c60:	8823d07a 	srai	r17,r17,1
  806c64:	180b883a 	mov	r5,r3
  806c68:	30000426 	beq	r6,zero,806c7c <_dtoa_r+0x1270>
  806c6c:	a1800017 	ldw	r6,0(r20)
  806c70:	a1c00117 	ldw	r7,4(r20)
  806c74:	84000044 	addi	r16,r16,1
  806c78:	080e7000 	call	80e700 <__muldf3>
  806c7c:	a5000204 	addi	r20,r20,8
  806c80:	883ff51e 	bne	r17,zero,806c58 <__alt_mem_onchip_mem+0xff786c58>
  806c84:	d8800f15 	stw	r2,60(sp)
  806c88:	d8c01015 	stw	r3,64(sp)
  806c8c:	003c7606 	br	805e68 <__alt_mem_onchip_mem+0xff785e68>
  806c90:	00c00c04 	movi	r3,48
  806c94:	10c00005 	stb	r3,0(r2)
  806c98:	d8c00517 	ldw	r3,20(sp)
  806c9c:	bd3fffc3 	ldbu	r20,-1(r23)
  806ca0:	18c00044 	addi	r3,r3,1
  806ca4:	d8c00515 	stw	r3,20(sp)
  806ca8:	003db906 	br	806390 <__alt_mem_onchip_mem+0xff786390>
  806cac:	89400117 	ldw	r5,4(r17)
  806cb0:	e009883a 	mov	r4,fp
  806cb4:	08090a80 	call	8090a8 <_Balloc>
  806cb8:	89800417 	ldw	r6,16(r17)
  806cbc:	89400304 	addi	r5,r17,12
  806cc0:	11000304 	addi	r4,r2,12
  806cc4:	31800084 	addi	r6,r6,2
  806cc8:	318d883a 	add	r6,r6,r6
  806ccc:	318d883a 	add	r6,r6,r6
  806cd0:	1027883a 	mov	r19,r2
  806cd4:	0808cdc0 	call	808cdc <memcpy>
  806cd8:	01800044 	movi	r6,1
  806cdc:	980b883a 	mov	r5,r19
  806ce0:	e009883a 	mov	r4,fp
  806ce4:	08098280 	call	809828 <__lshift>
  806ce8:	1029883a 	mov	r20,r2
  806cec:	003ecc06 	br	806820 <__alt_mem_onchip_mem+0xff786820>
  806cf0:	00800e44 	movi	r2,57
  806cf4:	90809026 	beq	r18,r2,806f38 <_dtoa_r+0x152c>
  806cf8:	92000044 	addi	r8,r18,1
  806cfc:	003f1f06 	br	80697c <__alt_mem_onchip_mem+0xff78697c>
  806d00:	9011883a 	mov	r8,r18
  806d04:	8825883a 	mov	r18,r17
  806d08:	a023883a 	mov	r17,r20
  806d0c:	003e2906 	br	8065b4 <__alt_mem_onchip_mem+0xff7865b4>
  806d10:	002b883a 	mov	r21,zero
  806d14:	0023883a 	mov	r17,zero
  806d18:	003f5406 	br	806a6c <__alt_mem_onchip_mem+0xff786a6c>
  806d1c:	61bfffc4 	addi	r6,r12,-1
  806d20:	300490fa 	slli	r2,r6,3
  806d24:	00c02074 	movhi	r3,129
  806d28:	18cf3d04 	addi	r3,r3,15604
  806d2c:	1885883a 	add	r2,r3,r2
  806d30:	11000017 	ldw	r4,0(r2)
  806d34:	11400117 	ldw	r5,4(r2)
  806d38:	d8800717 	ldw	r2,28(sp)
  806d3c:	880f883a 	mov	r7,r17
  806d40:	d9801215 	stw	r6,72(sp)
  806d44:	800d883a 	mov	r6,r16
  806d48:	db001615 	stw	r12,88(sp)
  806d4c:	15c00044 	addi	r23,r2,1
  806d50:	080e7000 	call	80e700 <__muldf3>
  806d54:	d9401017 	ldw	r5,64(sp)
  806d58:	d9000f17 	ldw	r4,60(sp)
  806d5c:	d8c01515 	stw	r3,84(sp)
  806d60:	d8801415 	stw	r2,80(sp)
  806d64:	080f7140 	call	80f714 <__fixdfsi>
  806d68:	1009883a 	mov	r4,r2
  806d6c:	1021883a 	mov	r16,r2
  806d70:	080f7940 	call	80f794 <__floatsidf>
  806d74:	d9000f17 	ldw	r4,60(sp)
  806d78:	d9401017 	ldw	r5,64(sp)
  806d7c:	100d883a 	mov	r6,r2
  806d80:	180f883a 	mov	r7,r3
  806d84:	080ee180 	call	80ee18 <__subdf3>
  806d88:	1829883a 	mov	r20,r3
  806d8c:	d8c00717 	ldw	r3,28(sp)
  806d90:	84000c04 	addi	r16,r16,48
  806d94:	1023883a 	mov	r17,r2
  806d98:	1c000005 	stb	r16,0(r3)
  806d9c:	db001617 	ldw	r12,88(sp)
  806da0:	00800044 	movi	r2,1
  806da4:	60802226 	beq	r12,r2,806e30 <_dtoa_r+0x1424>
  806da8:	d9c00717 	ldw	r7,28(sp)
  806dac:	8805883a 	mov	r2,r17
  806db0:	b82b883a 	mov	r21,r23
  806db4:	3b19883a 	add	r12,r7,r12
  806db8:	6023883a 	mov	r17,r12
  806dbc:	a007883a 	mov	r3,r20
  806dc0:	dc800f15 	stw	r18,60(sp)
  806dc4:	000d883a 	mov	r6,zero
  806dc8:	01d00934 	movhi	r7,16420
  806dcc:	1009883a 	mov	r4,r2
  806dd0:	180b883a 	mov	r5,r3
  806dd4:	080e7000 	call	80e700 <__muldf3>
  806dd8:	180b883a 	mov	r5,r3
  806ddc:	1009883a 	mov	r4,r2
  806de0:	1829883a 	mov	r20,r3
  806de4:	1025883a 	mov	r18,r2
  806de8:	080f7140 	call	80f714 <__fixdfsi>
  806dec:	1009883a 	mov	r4,r2
  806df0:	1021883a 	mov	r16,r2
  806df4:	080f7940 	call	80f794 <__floatsidf>
  806df8:	100d883a 	mov	r6,r2
  806dfc:	180f883a 	mov	r7,r3
  806e00:	9009883a 	mov	r4,r18
  806e04:	a00b883a 	mov	r5,r20
  806e08:	84000c04 	addi	r16,r16,48
  806e0c:	080ee180 	call	80ee18 <__subdf3>
  806e10:	ad400044 	addi	r21,r21,1
  806e14:	ac3fffc5 	stb	r16,-1(r21)
  806e18:	ac7fea1e 	bne	r21,r17,806dc4 <__alt_mem_onchip_mem+0xff786dc4>
  806e1c:	1023883a 	mov	r17,r2
  806e20:	d8801217 	ldw	r2,72(sp)
  806e24:	dc800f17 	ldw	r18,60(sp)
  806e28:	1829883a 	mov	r20,r3
  806e2c:	b8af883a 	add	r23,r23,r2
  806e30:	d9001417 	ldw	r4,80(sp)
  806e34:	d9401517 	ldw	r5,84(sp)
  806e38:	000d883a 	mov	r6,zero
  806e3c:	01cff834 	movhi	r7,16352
  806e40:	080d3140 	call	80d314 <__adddf3>
  806e44:	880d883a 	mov	r6,r17
  806e48:	a00f883a 	mov	r7,r20
  806e4c:	1009883a 	mov	r4,r2
  806e50:	180b883a 	mov	r5,r3
  806e54:	080e60c0 	call	80e60c <__ledf2>
  806e58:	10003e0e 	bge	r2,zero,806f54 <_dtoa_r+0x1548>
  806e5c:	d9001317 	ldw	r4,76(sp)
  806e60:	bd3fffc3 	ldbu	r20,-1(r23)
  806e64:	d9000515 	stw	r4,20(sp)
  806e68:	003d3b06 	br	806358 <__alt_mem_onchip_mem+0xff786358>
  806e6c:	0027883a 	mov	r19,zero
  806e70:	003f1b06 	br	806ae0 <__alt_mem_onchip_mem+0xff786ae0>
  806e74:	d8800817 	ldw	r2,32(sp)
  806e78:	11e9c83a 	sub	r20,r2,r7
  806e7c:	0005883a 	mov	r2,zero
  806e80:	003d5406 	br	8063d4 <__alt_mem_onchip_mem+0xff7863d4>
  806e84:	00800044 	movi	r2,1
  806e88:	003dc706 	br	8065a8 <__alt_mem_onchip_mem+0xff7865a8>
  806e8c:	d8c00217 	ldw	r3,8(sp)
  806e90:	00800d84 	movi	r2,54
  806e94:	dd400a17 	ldw	r21,40(sp)
  806e98:	10c5c83a 	sub	r2,r2,r3
  806e9c:	dd000817 	ldw	r20,32(sp)
  806ea0:	003d4c06 	br	8063d4 <__alt_mem_onchip_mem+0xff7863d4>
  806ea4:	dc800f15 	stw	r18,60(sp)
  806ea8:	dcc01015 	stw	r19,64(sp)
  806eac:	04000084 	movi	r16,2
  806eb0:	003bed06 	br	805e68 <__alt_mem_onchip_mem+0xff785e68>
  806eb4:	d9000617 	ldw	r4,24(sp)
  806eb8:	203f0d26 	beq	r4,zero,806af0 <__alt_mem_onchip_mem+0xff786af0>
  806ebc:	d9800c17 	ldw	r6,48(sp)
  806ec0:	01bcab0e 	bge	zero,r6,806170 <__alt_mem_onchip_mem+0xff786170>
  806ec4:	d9401017 	ldw	r5,64(sp)
  806ec8:	d9000f17 	ldw	r4,60(sp)
  806ecc:	000d883a 	mov	r6,zero
  806ed0:	01d00934 	movhi	r7,16420
  806ed4:	080e7000 	call	80e700 <__muldf3>
  806ed8:	81000044 	addi	r4,r16,1
  806edc:	d8800f15 	stw	r2,60(sp)
  806ee0:	d8c01015 	stw	r3,64(sp)
  806ee4:	080f7940 	call	80f794 <__floatsidf>
  806ee8:	d9800f17 	ldw	r6,60(sp)
  806eec:	d9c01017 	ldw	r7,64(sp)
  806ef0:	1009883a 	mov	r4,r2
  806ef4:	180b883a 	mov	r5,r3
  806ef8:	080e7000 	call	80e700 <__muldf3>
  806efc:	01d00734 	movhi	r7,16412
  806f00:	000d883a 	mov	r6,zero
  806f04:	1009883a 	mov	r4,r2
  806f08:	180b883a 	mov	r5,r3
  806f0c:	080d3140 	call	80d314 <__adddf3>
  806f10:	d9c00517 	ldw	r7,20(sp)
  806f14:	047f3034 	movhi	r17,64704
  806f18:	1021883a 	mov	r16,r2
  806f1c:	39ffffc4 	addi	r7,r7,-1
  806f20:	d9c01315 	stw	r7,76(sp)
  806f24:	1c63883a 	add	r17,r3,r17
  806f28:	db000c17 	ldw	r12,48(sp)
  806f2c:	003bea06 	br	805ed8 <__alt_mem_onchip_mem+0xff785ed8>
  806f30:	dc000915 	stw	r16,36(sp)
  806f34:	003e0e06 	br	806770 <__alt_mem_onchip_mem+0xff786770>
  806f38:	01000e44 	movi	r4,57
  806f3c:	8825883a 	mov	r18,r17
  806f40:	9dc00044 	addi	r23,r19,1
  806f44:	99000005 	stb	r4,0(r19)
  806f48:	a023883a 	mov	r17,r20
  806f4c:	dc000915 	stw	r16,36(sp)
  806f50:	003da406 	br	8065e4 <__alt_mem_onchip_mem+0xff7865e4>
  806f54:	d9801417 	ldw	r6,80(sp)
  806f58:	d9c01517 	ldw	r7,84(sp)
  806f5c:	0009883a 	mov	r4,zero
  806f60:	014ff834 	movhi	r5,16352
  806f64:	080ee180 	call	80ee18 <__subdf3>
  806f68:	880d883a 	mov	r6,r17
  806f6c:	a00f883a 	mov	r7,r20
  806f70:	1009883a 	mov	r4,r2
  806f74:	180b883a 	mov	r5,r3
  806f78:	080e5300 	call	80e530 <__gedf2>
  806f7c:	00bc7c0e 	bge	zero,r2,806170 <__alt_mem_onchip_mem+0xff786170>
  806f80:	01000c04 	movi	r4,48
  806f84:	00000106 	br	806f8c <_dtoa_r+0x1580>
  806f88:	102f883a 	mov	r23,r2
  806f8c:	b8bfffc4 	addi	r2,r23,-1
  806f90:	10c00007 	ldb	r3,0(r2)
  806f94:	193ffc26 	beq	r3,r4,806f88 <__alt_mem_onchip_mem+0xff786f88>
  806f98:	d9801317 	ldw	r6,76(sp)
  806f9c:	d9800515 	stw	r6,20(sp)
  806fa0:	003c4406 	br	8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  806fa4:	d9801317 	ldw	r6,76(sp)
  806fa8:	d9800515 	stw	r6,20(sp)
  806fac:	003cea06 	br	806358 <__alt_mem_onchip_mem+0xff786358>
  806fb0:	dd800f17 	ldw	r22,60(sp)
  806fb4:	dcc01017 	ldw	r19,64(sp)
  806fb8:	dc801217 	ldw	r18,72(sp)
  806fbc:	003c6c06 	br	806170 <__alt_mem_onchip_mem+0xff786170>
  806fc0:	903e031e 	bne	r18,zero,8067d0 <__alt_mem_onchip_mem+0xff7867d0>
  806fc4:	003ebb06 	br	806ab4 <__alt_mem_onchip_mem+0xff786ab4>
  806fc8:	103e6c1e 	bne	r2,zero,80697c <__alt_mem_onchip_mem+0xff78697c>
  806fcc:	4080004c 	andi	r2,r8,1
  806fd0:	103e6a26 	beq	r2,zero,80697c <__alt_mem_onchip_mem+0xff78697c>
  806fd4:	003e6606 	br	806970 <__alt_mem_onchip_mem+0xff786970>
  806fd8:	d8c00317 	ldw	r3,12(sp)
  806fdc:	00800084 	movi	r2,2
  806fe0:	10c02916 	blt	r2,r3,807088 <_dtoa_r+0x167c>
  806fe4:	d9000c17 	ldw	r4,48(sp)
  806fe8:	003e8806 	br	806a0c <__alt_mem_onchip_mem+0xff786a0c>
  806fec:	04000084 	movi	r16,2
  806ff0:	003b9d06 	br	805e68 <__alt_mem_onchip_mem+0xff785e68>
  806ff4:	d9001317 	ldw	r4,76(sp)
  806ff8:	d9000515 	stw	r4,20(sp)
  806ffc:	003cd606 	br	806358 <__alt_mem_onchip_mem+0xff786358>
  807000:	d8801317 	ldw	r2,76(sp)
  807004:	d8800515 	stw	r2,20(sp)
  807008:	003c2a06 	br	8060b4 <__alt_mem_onchip_mem+0xff7860b4>
  80700c:	d9800317 	ldw	r6,12(sp)
  807010:	00800084 	movi	r2,2
  807014:	11801516 	blt	r2,r6,80706c <_dtoa_r+0x1660>
  807018:	d9c00c17 	ldw	r7,48(sp)
  80701c:	d9c00615 	stw	r7,24(sp)
  807020:	003df706 	br	806800 <__alt_mem_onchip_mem+0xff786800>
  807024:	193d3926 	beq	r3,r4,80650c <__alt_mem_onchip_mem+0xff78650c>
  807028:	00c00f04 	movi	r3,60
  80702c:	1885c83a 	sub	r2,r3,r2
  807030:	003ddf06 	br	8067b0 <__alt_mem_onchip_mem+0xff7867b0>
  807034:	e009883a 	mov	r4,fp
  807038:	e0001115 	stw	zero,68(fp)
  80703c:	000b883a 	mov	r5,zero
  807040:	08090a80 	call	8090a8 <_Balloc>
  807044:	d8800715 	stw	r2,28(sp)
  807048:	d8c00717 	ldw	r3,28(sp)
  80704c:	00bfffc4 	movi	r2,-1
  807050:	01000044 	movi	r4,1
  807054:	d8800c15 	stw	r2,48(sp)
  807058:	e0c01015 	stw	r3,64(fp)
  80705c:	d9000b15 	stw	r4,44(sp)
  807060:	d8800615 	stw	r2,24(sp)
  807064:	d8002215 	stw	zero,136(sp)
  807068:	003c4106 	br	806170 <__alt_mem_onchip_mem+0xff786170>
  80706c:	d8c00c17 	ldw	r3,48(sp)
  807070:	d8c00615 	stw	r3,24(sp)
  807074:	003e7006 	br	806a38 <__alt_mem_onchip_mem+0xff786a38>
  807078:	04400044 	movi	r17,1
  80707c:	003b2006 	br	805d00 <__alt_mem_onchip_mem+0xff785d00>
  807080:	000b883a 	mov	r5,zero
  807084:	003b3d06 	br	805d7c <__alt_mem_onchip_mem+0xff785d7c>
  807088:	d8800c17 	ldw	r2,48(sp)
  80708c:	d8800615 	stw	r2,24(sp)
  807090:	003e6906 	br	806a38 <__alt_mem_onchip_mem+0xff786a38>

00807094 <__sflush_r>:
  807094:	2880030b 	ldhu	r2,12(r5)
  807098:	defffb04 	addi	sp,sp,-20
  80709c:	dcc00315 	stw	r19,12(sp)
  8070a0:	dc400115 	stw	r17,4(sp)
  8070a4:	dfc00415 	stw	ra,16(sp)
  8070a8:	dc800215 	stw	r18,8(sp)
  8070ac:	dc000015 	stw	r16,0(sp)
  8070b0:	10c0020c 	andi	r3,r2,8
  8070b4:	2823883a 	mov	r17,r5
  8070b8:	2027883a 	mov	r19,r4
  8070bc:	1800311e 	bne	r3,zero,807184 <__sflush_r+0xf0>
  8070c0:	28c00117 	ldw	r3,4(r5)
  8070c4:	10820014 	ori	r2,r2,2048
  8070c8:	2880030d 	sth	r2,12(r5)
  8070cc:	00c04b0e 	bge	zero,r3,8071fc <__sflush_r+0x168>
  8070d0:	8a000a17 	ldw	r8,40(r17)
  8070d4:	40002326 	beq	r8,zero,807164 <__sflush_r+0xd0>
  8070d8:	9c000017 	ldw	r16,0(r19)
  8070dc:	10c4000c 	andi	r3,r2,4096
  8070e0:	98000015 	stw	zero,0(r19)
  8070e4:	18004826 	beq	r3,zero,807208 <__sflush_r+0x174>
  8070e8:	89801417 	ldw	r6,80(r17)
  8070ec:	10c0010c 	andi	r3,r2,4
  8070f0:	18000626 	beq	r3,zero,80710c <__sflush_r+0x78>
  8070f4:	88c00117 	ldw	r3,4(r17)
  8070f8:	88800c17 	ldw	r2,48(r17)
  8070fc:	30cdc83a 	sub	r6,r6,r3
  807100:	10000226 	beq	r2,zero,80710c <__sflush_r+0x78>
  807104:	88800f17 	ldw	r2,60(r17)
  807108:	308dc83a 	sub	r6,r6,r2
  80710c:	89400717 	ldw	r5,28(r17)
  807110:	000f883a 	mov	r7,zero
  807114:	9809883a 	mov	r4,r19
  807118:	403ee83a 	callr	r8
  80711c:	00ffffc4 	movi	r3,-1
  807120:	10c04426 	beq	r2,r3,807234 <__sflush_r+0x1a0>
  807124:	88c0030b 	ldhu	r3,12(r17)
  807128:	89000417 	ldw	r4,16(r17)
  80712c:	88000115 	stw	zero,4(r17)
  807130:	197dffcc 	andi	r5,r3,63487
  807134:	8940030d 	sth	r5,12(r17)
  807138:	89000015 	stw	r4,0(r17)
  80713c:	18c4000c 	andi	r3,r3,4096
  807140:	18002c1e 	bne	r3,zero,8071f4 <__sflush_r+0x160>
  807144:	89400c17 	ldw	r5,48(r17)
  807148:	9c000015 	stw	r16,0(r19)
  80714c:	28000526 	beq	r5,zero,807164 <__sflush_r+0xd0>
  807150:	88801004 	addi	r2,r17,64
  807154:	28800226 	beq	r5,r2,807160 <__sflush_r+0xcc>
  807158:	9809883a 	mov	r4,r19
  80715c:	08078000 	call	807800 <_free_r>
  807160:	88000c15 	stw	zero,48(r17)
  807164:	0005883a 	mov	r2,zero
  807168:	dfc00417 	ldw	ra,16(sp)
  80716c:	dcc00317 	ldw	r19,12(sp)
  807170:	dc800217 	ldw	r18,8(sp)
  807174:	dc400117 	ldw	r17,4(sp)
  807178:	dc000017 	ldw	r16,0(sp)
  80717c:	dec00504 	addi	sp,sp,20
  807180:	f800283a 	ret
  807184:	2c800417 	ldw	r18,16(r5)
  807188:	903ff626 	beq	r18,zero,807164 <__alt_mem_onchip_mem+0xff787164>
  80718c:	2c000017 	ldw	r16,0(r5)
  807190:	108000cc 	andi	r2,r2,3
  807194:	2c800015 	stw	r18,0(r5)
  807198:	84a1c83a 	sub	r16,r16,r18
  80719c:	1000131e 	bne	r2,zero,8071ec <__sflush_r+0x158>
  8071a0:	28800517 	ldw	r2,20(r5)
  8071a4:	88800215 	stw	r2,8(r17)
  8071a8:	04000316 	blt	zero,r16,8071b8 <__sflush_r+0x124>
  8071ac:	003fed06 	br	807164 <__alt_mem_onchip_mem+0xff787164>
  8071b0:	90a5883a 	add	r18,r18,r2
  8071b4:	043feb0e 	bge	zero,r16,807164 <__alt_mem_onchip_mem+0xff787164>
  8071b8:	88800917 	ldw	r2,36(r17)
  8071bc:	89400717 	ldw	r5,28(r17)
  8071c0:	800f883a 	mov	r7,r16
  8071c4:	900d883a 	mov	r6,r18
  8071c8:	9809883a 	mov	r4,r19
  8071cc:	103ee83a 	callr	r2
  8071d0:	80a1c83a 	sub	r16,r16,r2
  8071d4:	00bff616 	blt	zero,r2,8071b0 <__alt_mem_onchip_mem+0xff7871b0>
  8071d8:	88c0030b 	ldhu	r3,12(r17)
  8071dc:	00bfffc4 	movi	r2,-1
  8071e0:	18c01014 	ori	r3,r3,64
  8071e4:	88c0030d 	sth	r3,12(r17)
  8071e8:	003fdf06 	br	807168 <__alt_mem_onchip_mem+0xff787168>
  8071ec:	0005883a 	mov	r2,zero
  8071f0:	003fec06 	br	8071a4 <__alt_mem_onchip_mem+0xff7871a4>
  8071f4:	88801415 	stw	r2,80(r17)
  8071f8:	003fd206 	br	807144 <__alt_mem_onchip_mem+0xff787144>
  8071fc:	28c00f17 	ldw	r3,60(r5)
  807200:	00ffb316 	blt	zero,r3,8070d0 <__alt_mem_onchip_mem+0xff7870d0>
  807204:	003fd706 	br	807164 <__alt_mem_onchip_mem+0xff787164>
  807208:	89400717 	ldw	r5,28(r17)
  80720c:	000d883a 	mov	r6,zero
  807210:	01c00044 	movi	r7,1
  807214:	9809883a 	mov	r4,r19
  807218:	403ee83a 	callr	r8
  80721c:	100d883a 	mov	r6,r2
  807220:	00bfffc4 	movi	r2,-1
  807224:	30801426 	beq	r6,r2,807278 <__sflush_r+0x1e4>
  807228:	8880030b 	ldhu	r2,12(r17)
  80722c:	8a000a17 	ldw	r8,40(r17)
  807230:	003fae06 	br	8070ec <__alt_mem_onchip_mem+0xff7870ec>
  807234:	98c00017 	ldw	r3,0(r19)
  807238:	183fba26 	beq	r3,zero,807124 <__alt_mem_onchip_mem+0xff787124>
  80723c:	01000744 	movi	r4,29
  807240:	19000626 	beq	r3,r4,80725c <__sflush_r+0x1c8>
  807244:	01000584 	movi	r4,22
  807248:	19000426 	beq	r3,r4,80725c <__sflush_r+0x1c8>
  80724c:	88c0030b 	ldhu	r3,12(r17)
  807250:	18c01014 	ori	r3,r3,64
  807254:	88c0030d 	sth	r3,12(r17)
  807258:	003fc306 	br	807168 <__alt_mem_onchip_mem+0xff787168>
  80725c:	8880030b 	ldhu	r2,12(r17)
  807260:	88c00417 	ldw	r3,16(r17)
  807264:	88000115 	stw	zero,4(r17)
  807268:	10bdffcc 	andi	r2,r2,63487
  80726c:	8880030d 	sth	r2,12(r17)
  807270:	88c00015 	stw	r3,0(r17)
  807274:	003fb306 	br	807144 <__alt_mem_onchip_mem+0xff787144>
  807278:	98800017 	ldw	r2,0(r19)
  80727c:	103fea26 	beq	r2,zero,807228 <__alt_mem_onchip_mem+0xff787228>
  807280:	00c00744 	movi	r3,29
  807284:	10c00226 	beq	r2,r3,807290 <__sflush_r+0x1fc>
  807288:	00c00584 	movi	r3,22
  80728c:	10c0031e 	bne	r2,r3,80729c <__sflush_r+0x208>
  807290:	9c000015 	stw	r16,0(r19)
  807294:	0005883a 	mov	r2,zero
  807298:	003fb306 	br	807168 <__alt_mem_onchip_mem+0xff787168>
  80729c:	88c0030b 	ldhu	r3,12(r17)
  8072a0:	3005883a 	mov	r2,r6
  8072a4:	18c01014 	ori	r3,r3,64
  8072a8:	88c0030d 	sth	r3,12(r17)
  8072ac:	003fae06 	br	807168 <__alt_mem_onchip_mem+0xff787168>

008072b0 <_fflush_r>:
  8072b0:	defffd04 	addi	sp,sp,-12
  8072b4:	dc000115 	stw	r16,4(sp)
  8072b8:	dfc00215 	stw	ra,8(sp)
  8072bc:	2021883a 	mov	r16,r4
  8072c0:	20000226 	beq	r4,zero,8072cc <_fflush_r+0x1c>
  8072c4:	20800e17 	ldw	r2,56(r4)
  8072c8:	10000c26 	beq	r2,zero,8072fc <_fflush_r+0x4c>
  8072cc:	2880030f 	ldh	r2,12(r5)
  8072d0:	1000051e 	bne	r2,zero,8072e8 <_fflush_r+0x38>
  8072d4:	0005883a 	mov	r2,zero
  8072d8:	dfc00217 	ldw	ra,8(sp)
  8072dc:	dc000117 	ldw	r16,4(sp)
  8072e0:	dec00304 	addi	sp,sp,12
  8072e4:	f800283a 	ret
  8072e8:	8009883a 	mov	r4,r16
  8072ec:	dfc00217 	ldw	ra,8(sp)
  8072f0:	dc000117 	ldw	r16,4(sp)
  8072f4:	dec00304 	addi	sp,sp,12
  8072f8:	08070941 	jmpi	807094 <__sflush_r>
  8072fc:	d9400015 	stw	r5,0(sp)
  807300:	080768c0 	call	80768c <__sinit>
  807304:	d9400017 	ldw	r5,0(sp)
  807308:	003ff006 	br	8072cc <__alt_mem_onchip_mem+0xff7872cc>

0080730c <fflush>:
  80730c:	20000526 	beq	r4,zero,807324 <fflush+0x18>
  807310:	00802074 	movhi	r2,129
  807314:	10978d04 	addi	r2,r2,24116
  807318:	200b883a 	mov	r5,r4
  80731c:	11000017 	ldw	r4,0(r2)
  807320:	08072b01 	jmpi	8072b0 <_fflush_r>
  807324:	00802074 	movhi	r2,129
  807328:	10978c04 	addi	r2,r2,24112
  80732c:	11000017 	ldw	r4,0(r2)
  807330:	01402034 	movhi	r5,128
  807334:	295cac04 	addi	r5,r5,29360
  807338:	08080901 	jmpi	808090 <_fwalk_reent>

0080733c <__fp_unlock>:
  80733c:	0005883a 	mov	r2,zero
  807340:	f800283a 	ret

00807344 <_cleanup_r>:
  807344:	01402074 	movhi	r5,129
  807348:	29702a04 	addi	r5,r5,-16216
  80734c:	08080901 	jmpi	808090 <_fwalk_reent>

00807350 <__sinit.part.1>:
  807350:	defff704 	addi	sp,sp,-36
  807354:	00c02034 	movhi	r3,128
  807358:	dfc00815 	stw	ra,32(sp)
  80735c:	ddc00715 	stw	r23,28(sp)
  807360:	dd800615 	stw	r22,24(sp)
  807364:	dd400515 	stw	r21,20(sp)
  807368:	dd000415 	stw	r20,16(sp)
  80736c:	dcc00315 	stw	r19,12(sp)
  807370:	dc800215 	stw	r18,8(sp)
  807374:	dc400115 	stw	r17,4(sp)
  807378:	dc000015 	stw	r16,0(sp)
  80737c:	18dcd104 	addi	r3,r3,29508
  807380:	24000117 	ldw	r16,4(r4)
  807384:	20c00f15 	stw	r3,60(r4)
  807388:	2080bb04 	addi	r2,r4,748
  80738c:	00c000c4 	movi	r3,3
  807390:	20c0b915 	stw	r3,740(r4)
  807394:	2080ba15 	stw	r2,744(r4)
  807398:	2000b815 	stw	zero,736(r4)
  80739c:	05c00204 	movi	r23,8
  8073a0:	00800104 	movi	r2,4
  8073a4:	2025883a 	mov	r18,r4
  8073a8:	b80d883a 	mov	r6,r23
  8073ac:	81001704 	addi	r4,r16,92
  8073b0:	000b883a 	mov	r5,zero
  8073b4:	80000015 	stw	zero,0(r16)
  8073b8:	80000115 	stw	zero,4(r16)
  8073bc:	80000215 	stw	zero,8(r16)
  8073c0:	8080030d 	sth	r2,12(r16)
  8073c4:	80001915 	stw	zero,100(r16)
  8073c8:	8000038d 	sth	zero,14(r16)
  8073cc:	80000415 	stw	zero,16(r16)
  8073d0:	80000515 	stw	zero,20(r16)
  8073d4:	80000615 	stw	zero,24(r16)
  8073d8:	0808f800 	call	808f80 <memset>
  8073dc:	05802074 	movhi	r22,129
  8073e0:	94400217 	ldw	r17,8(r18)
  8073e4:	05402074 	movhi	r21,129
  8073e8:	05002074 	movhi	r20,129
  8073ec:	04c02074 	movhi	r19,129
  8073f0:	b5a9b404 	addi	r22,r22,-22832
  8073f4:	ad69cb04 	addi	r21,r21,-22740
  8073f8:	a529ea04 	addi	r20,r20,-22616
  8073fc:	9cea0104 	addi	r19,r19,-22524
  807400:	85800815 	stw	r22,32(r16)
  807404:	85400915 	stw	r21,36(r16)
  807408:	85000a15 	stw	r20,40(r16)
  80740c:	84c00b15 	stw	r19,44(r16)
  807410:	84000715 	stw	r16,28(r16)
  807414:	00800284 	movi	r2,10
  807418:	8880030d 	sth	r2,12(r17)
  80741c:	00800044 	movi	r2,1
  807420:	b80d883a 	mov	r6,r23
  807424:	89001704 	addi	r4,r17,92
  807428:	000b883a 	mov	r5,zero
  80742c:	88000015 	stw	zero,0(r17)
  807430:	88000115 	stw	zero,4(r17)
  807434:	88000215 	stw	zero,8(r17)
  807438:	88001915 	stw	zero,100(r17)
  80743c:	8880038d 	sth	r2,14(r17)
  807440:	88000415 	stw	zero,16(r17)
  807444:	88000515 	stw	zero,20(r17)
  807448:	88000615 	stw	zero,24(r17)
  80744c:	0808f800 	call	808f80 <memset>
  807450:	94000317 	ldw	r16,12(r18)
  807454:	00800484 	movi	r2,18
  807458:	8c400715 	stw	r17,28(r17)
  80745c:	8d800815 	stw	r22,32(r17)
  807460:	8d400915 	stw	r21,36(r17)
  807464:	8d000a15 	stw	r20,40(r17)
  807468:	8cc00b15 	stw	r19,44(r17)
  80746c:	8080030d 	sth	r2,12(r16)
  807470:	00800084 	movi	r2,2
  807474:	80000015 	stw	zero,0(r16)
  807478:	80000115 	stw	zero,4(r16)
  80747c:	80000215 	stw	zero,8(r16)
  807480:	80001915 	stw	zero,100(r16)
  807484:	8080038d 	sth	r2,14(r16)
  807488:	80000415 	stw	zero,16(r16)
  80748c:	80000515 	stw	zero,20(r16)
  807490:	80000615 	stw	zero,24(r16)
  807494:	b80d883a 	mov	r6,r23
  807498:	000b883a 	mov	r5,zero
  80749c:	81001704 	addi	r4,r16,92
  8074a0:	0808f800 	call	808f80 <memset>
  8074a4:	00800044 	movi	r2,1
  8074a8:	84000715 	stw	r16,28(r16)
  8074ac:	85800815 	stw	r22,32(r16)
  8074b0:	85400915 	stw	r21,36(r16)
  8074b4:	85000a15 	stw	r20,40(r16)
  8074b8:	84c00b15 	stw	r19,44(r16)
  8074bc:	90800e15 	stw	r2,56(r18)
  8074c0:	dfc00817 	ldw	ra,32(sp)
  8074c4:	ddc00717 	ldw	r23,28(sp)
  8074c8:	dd800617 	ldw	r22,24(sp)
  8074cc:	dd400517 	ldw	r21,20(sp)
  8074d0:	dd000417 	ldw	r20,16(sp)
  8074d4:	dcc00317 	ldw	r19,12(sp)
  8074d8:	dc800217 	ldw	r18,8(sp)
  8074dc:	dc400117 	ldw	r17,4(sp)
  8074e0:	dc000017 	ldw	r16,0(sp)
  8074e4:	dec00904 	addi	sp,sp,36
  8074e8:	f800283a 	ret

008074ec <__fp_lock>:
  8074ec:	0005883a 	mov	r2,zero
  8074f0:	f800283a 	ret

008074f4 <__sfmoreglue>:
  8074f4:	defffc04 	addi	sp,sp,-16
  8074f8:	dc400115 	stw	r17,4(sp)
  8074fc:	2c7fffc4 	addi	r17,r5,-1
  807500:	8c401a24 	muli	r17,r17,104
  807504:	dc800215 	stw	r18,8(sp)
  807508:	2825883a 	mov	r18,r5
  80750c:	89401d04 	addi	r5,r17,116
  807510:	dc000015 	stw	r16,0(sp)
  807514:	dfc00315 	stw	ra,12(sp)
  807518:	08083ec0 	call	8083ec <_malloc_r>
  80751c:	1021883a 	mov	r16,r2
  807520:	10000726 	beq	r2,zero,807540 <__sfmoreglue+0x4c>
  807524:	11000304 	addi	r4,r2,12
  807528:	10000015 	stw	zero,0(r2)
  80752c:	14800115 	stw	r18,4(r2)
  807530:	11000215 	stw	r4,8(r2)
  807534:	89801a04 	addi	r6,r17,104
  807538:	000b883a 	mov	r5,zero
  80753c:	0808f800 	call	808f80 <memset>
  807540:	8005883a 	mov	r2,r16
  807544:	dfc00317 	ldw	ra,12(sp)
  807548:	dc800217 	ldw	r18,8(sp)
  80754c:	dc400117 	ldw	r17,4(sp)
  807550:	dc000017 	ldw	r16,0(sp)
  807554:	dec00404 	addi	sp,sp,16
  807558:	f800283a 	ret

0080755c <__sfp>:
  80755c:	defffb04 	addi	sp,sp,-20
  807560:	dc000015 	stw	r16,0(sp)
  807564:	04002074 	movhi	r16,129
  807568:	84178c04 	addi	r16,r16,24112
  80756c:	dcc00315 	stw	r19,12(sp)
  807570:	2027883a 	mov	r19,r4
  807574:	81000017 	ldw	r4,0(r16)
  807578:	dfc00415 	stw	ra,16(sp)
  80757c:	dc800215 	stw	r18,8(sp)
  807580:	20800e17 	ldw	r2,56(r4)
  807584:	dc400115 	stw	r17,4(sp)
  807588:	1000021e 	bne	r2,zero,807594 <__sfp+0x38>
  80758c:	08073500 	call	807350 <__sinit.part.1>
  807590:	81000017 	ldw	r4,0(r16)
  807594:	2480b804 	addi	r18,r4,736
  807598:	047fffc4 	movi	r17,-1
  80759c:	91000117 	ldw	r4,4(r18)
  8075a0:	94000217 	ldw	r16,8(r18)
  8075a4:	213fffc4 	addi	r4,r4,-1
  8075a8:	20000a16 	blt	r4,zero,8075d4 <__sfp+0x78>
  8075ac:	8080030f 	ldh	r2,12(r16)
  8075b0:	10000c26 	beq	r2,zero,8075e4 <__sfp+0x88>
  8075b4:	80c01d04 	addi	r3,r16,116
  8075b8:	00000206 	br	8075c4 <__sfp+0x68>
  8075bc:	18bfe60f 	ldh	r2,-104(r3)
  8075c0:	10000826 	beq	r2,zero,8075e4 <__sfp+0x88>
  8075c4:	213fffc4 	addi	r4,r4,-1
  8075c8:	1c3ffd04 	addi	r16,r3,-12
  8075cc:	18c01a04 	addi	r3,r3,104
  8075d0:	247ffa1e 	bne	r4,r17,8075bc <__alt_mem_onchip_mem+0xff7875bc>
  8075d4:	90800017 	ldw	r2,0(r18)
  8075d8:	10001d26 	beq	r2,zero,807650 <__sfp+0xf4>
  8075dc:	1025883a 	mov	r18,r2
  8075e0:	003fee06 	br	80759c <__alt_mem_onchip_mem+0xff78759c>
  8075e4:	00bfffc4 	movi	r2,-1
  8075e8:	8080038d 	sth	r2,14(r16)
  8075ec:	00800044 	movi	r2,1
  8075f0:	8080030d 	sth	r2,12(r16)
  8075f4:	80001915 	stw	zero,100(r16)
  8075f8:	80000015 	stw	zero,0(r16)
  8075fc:	80000215 	stw	zero,8(r16)
  807600:	80000115 	stw	zero,4(r16)
  807604:	80000415 	stw	zero,16(r16)
  807608:	80000515 	stw	zero,20(r16)
  80760c:	80000615 	stw	zero,24(r16)
  807610:	01800204 	movi	r6,8
  807614:	000b883a 	mov	r5,zero
  807618:	81001704 	addi	r4,r16,92
  80761c:	0808f800 	call	808f80 <memset>
  807620:	8005883a 	mov	r2,r16
  807624:	80000c15 	stw	zero,48(r16)
  807628:	80000d15 	stw	zero,52(r16)
  80762c:	80001115 	stw	zero,68(r16)
  807630:	80001215 	stw	zero,72(r16)
  807634:	dfc00417 	ldw	ra,16(sp)
  807638:	dcc00317 	ldw	r19,12(sp)
  80763c:	dc800217 	ldw	r18,8(sp)
  807640:	dc400117 	ldw	r17,4(sp)
  807644:	dc000017 	ldw	r16,0(sp)
  807648:	dec00504 	addi	sp,sp,20
  80764c:	f800283a 	ret
  807650:	01400104 	movi	r5,4
  807654:	9809883a 	mov	r4,r19
  807658:	08074f40 	call	8074f4 <__sfmoreglue>
  80765c:	90800015 	stw	r2,0(r18)
  807660:	103fde1e 	bne	r2,zero,8075dc <__alt_mem_onchip_mem+0xff7875dc>
  807664:	00800304 	movi	r2,12
  807668:	98800015 	stw	r2,0(r19)
  80766c:	0005883a 	mov	r2,zero
  807670:	003ff006 	br	807634 <__alt_mem_onchip_mem+0xff787634>

00807674 <_cleanup>:
  807674:	00802074 	movhi	r2,129
  807678:	10978c04 	addi	r2,r2,24112
  80767c:	11000017 	ldw	r4,0(r2)
  807680:	01402074 	movhi	r5,129
  807684:	29702a04 	addi	r5,r5,-16216
  807688:	08080901 	jmpi	808090 <_fwalk_reent>

0080768c <__sinit>:
  80768c:	20800e17 	ldw	r2,56(r4)
  807690:	10000126 	beq	r2,zero,807698 <__sinit+0xc>
  807694:	f800283a 	ret
  807698:	08073501 	jmpi	807350 <__sinit.part.1>

0080769c <__sfp_lock_acquire>:
  80769c:	f800283a 	ret

008076a0 <__sfp_lock_release>:
  8076a0:	f800283a 	ret

008076a4 <__sinit_lock_acquire>:
  8076a4:	f800283a 	ret

008076a8 <__sinit_lock_release>:
  8076a8:	f800283a 	ret

008076ac <__fp_lock_all>:
  8076ac:	00802074 	movhi	r2,129
  8076b0:	10978d04 	addi	r2,r2,24116
  8076b4:	11000017 	ldw	r4,0(r2)
  8076b8:	01402034 	movhi	r5,128
  8076bc:	295d3b04 	addi	r5,r5,29932
  8076c0:	0807fcc1 	jmpi	807fcc <_fwalk>

008076c4 <__fp_unlock_all>:
  8076c4:	00802074 	movhi	r2,129
  8076c8:	10978d04 	addi	r2,r2,24116
  8076cc:	11000017 	ldw	r4,0(r2)
  8076d0:	01402034 	movhi	r5,128
  8076d4:	295ccf04 	addi	r5,r5,29500
  8076d8:	0807fcc1 	jmpi	807fcc <_fwalk>

008076dc <_malloc_trim_r>:
  8076dc:	defffb04 	addi	sp,sp,-20
  8076e0:	dcc00315 	stw	r19,12(sp)
  8076e4:	04c02074 	movhi	r19,129
  8076e8:	dc800215 	stw	r18,8(sp)
  8076ec:	dc400115 	stw	r17,4(sp)
  8076f0:	dc000015 	stw	r16,0(sp)
  8076f4:	dfc00415 	stw	ra,16(sp)
  8076f8:	2821883a 	mov	r16,r5
  8076fc:	9cd18f04 	addi	r19,r19,17980
  807700:	2025883a 	mov	r18,r4
  807704:	08100240 	call	810024 <__malloc_lock>
  807708:	98800217 	ldw	r2,8(r19)
  80770c:	14400117 	ldw	r17,4(r2)
  807710:	00bfff04 	movi	r2,-4
  807714:	88a2703a 	and	r17,r17,r2
  807718:	8c21c83a 	sub	r16,r17,r16
  80771c:	8403fbc4 	addi	r16,r16,4079
  807720:	8020d33a 	srli	r16,r16,12
  807724:	0083ffc4 	movi	r2,4095
  807728:	843fffc4 	addi	r16,r16,-1
  80772c:	8020933a 	slli	r16,r16,12
  807730:	1400060e 	bge	r2,r16,80774c <_malloc_trim_r+0x70>
  807734:	000b883a 	mov	r5,zero
  807738:	9009883a 	mov	r4,r18
  80773c:	080a67c0 	call	80a67c <_sbrk_r>
  807740:	98c00217 	ldw	r3,8(r19)
  807744:	1c47883a 	add	r3,r3,r17
  807748:	10c00a26 	beq	r2,r3,807774 <_malloc_trim_r+0x98>
  80774c:	9009883a 	mov	r4,r18
  807750:	08100480 	call	810048 <__malloc_unlock>
  807754:	0005883a 	mov	r2,zero
  807758:	dfc00417 	ldw	ra,16(sp)
  80775c:	dcc00317 	ldw	r19,12(sp)
  807760:	dc800217 	ldw	r18,8(sp)
  807764:	dc400117 	ldw	r17,4(sp)
  807768:	dc000017 	ldw	r16,0(sp)
  80776c:	dec00504 	addi	sp,sp,20
  807770:	f800283a 	ret
  807774:	040bc83a 	sub	r5,zero,r16
  807778:	9009883a 	mov	r4,r18
  80777c:	080a67c0 	call	80a67c <_sbrk_r>
  807780:	00ffffc4 	movi	r3,-1
  807784:	10c00d26 	beq	r2,r3,8077bc <_malloc_trim_r+0xe0>
  807788:	00c02074 	movhi	r3,129
  80778c:	18df3b04 	addi	r3,r3,31980
  807790:	18800017 	ldw	r2,0(r3)
  807794:	99000217 	ldw	r4,8(r19)
  807798:	8c23c83a 	sub	r17,r17,r16
  80779c:	8c400054 	ori	r17,r17,1
  8077a0:	1421c83a 	sub	r16,r2,r16
  8077a4:	24400115 	stw	r17,4(r4)
  8077a8:	9009883a 	mov	r4,r18
  8077ac:	1c000015 	stw	r16,0(r3)
  8077b0:	08100480 	call	810048 <__malloc_unlock>
  8077b4:	00800044 	movi	r2,1
  8077b8:	003fe706 	br	807758 <__alt_mem_onchip_mem+0xff787758>
  8077bc:	000b883a 	mov	r5,zero
  8077c0:	9009883a 	mov	r4,r18
  8077c4:	080a67c0 	call	80a67c <_sbrk_r>
  8077c8:	99000217 	ldw	r4,8(r19)
  8077cc:	014003c4 	movi	r5,15
  8077d0:	1107c83a 	sub	r3,r2,r4
  8077d4:	28ffdd0e 	bge	r5,r3,80774c <__alt_mem_onchip_mem+0xff78774c>
  8077d8:	01402074 	movhi	r5,129
  8077dc:	29578f04 	addi	r5,r5,24124
  8077e0:	29400017 	ldw	r5,0(r5)
  8077e4:	18c00054 	ori	r3,r3,1
  8077e8:	20c00115 	stw	r3,4(r4)
  8077ec:	00c02074 	movhi	r3,129
  8077f0:	1145c83a 	sub	r2,r2,r5
  8077f4:	18df3b04 	addi	r3,r3,31980
  8077f8:	18800015 	stw	r2,0(r3)
  8077fc:	003fd306 	br	80774c <__alt_mem_onchip_mem+0xff78774c>

00807800 <_free_r>:
  807800:	28004126 	beq	r5,zero,807908 <_free_r+0x108>
  807804:	defffd04 	addi	sp,sp,-12
  807808:	dc400115 	stw	r17,4(sp)
  80780c:	dc000015 	stw	r16,0(sp)
  807810:	2023883a 	mov	r17,r4
  807814:	2821883a 	mov	r16,r5
  807818:	dfc00215 	stw	ra,8(sp)
  80781c:	08100240 	call	810024 <__malloc_lock>
  807820:	81ffff17 	ldw	r7,-4(r16)
  807824:	00bfff84 	movi	r2,-2
  807828:	01002074 	movhi	r4,129
  80782c:	81bffe04 	addi	r6,r16,-8
  807830:	3884703a 	and	r2,r7,r2
  807834:	21118f04 	addi	r4,r4,17980
  807838:	308b883a 	add	r5,r6,r2
  80783c:	2a400117 	ldw	r9,4(r5)
  807840:	22000217 	ldw	r8,8(r4)
  807844:	00ffff04 	movi	r3,-4
  807848:	48c6703a 	and	r3,r9,r3
  80784c:	2a005726 	beq	r5,r8,8079ac <_free_r+0x1ac>
  807850:	28c00115 	stw	r3,4(r5)
  807854:	39c0004c 	andi	r7,r7,1
  807858:	3800091e 	bne	r7,zero,807880 <_free_r+0x80>
  80785c:	823ffe17 	ldw	r8,-8(r16)
  807860:	22400204 	addi	r9,r4,8
  807864:	320dc83a 	sub	r6,r6,r8
  807868:	31c00217 	ldw	r7,8(r6)
  80786c:	1205883a 	add	r2,r2,r8
  807870:	3a406526 	beq	r7,r9,807a08 <_free_r+0x208>
  807874:	32000317 	ldw	r8,12(r6)
  807878:	3a000315 	stw	r8,12(r7)
  80787c:	41c00215 	stw	r7,8(r8)
  807880:	28cf883a 	add	r7,r5,r3
  807884:	39c00117 	ldw	r7,4(r7)
  807888:	39c0004c 	andi	r7,r7,1
  80788c:	38003a26 	beq	r7,zero,807978 <_free_r+0x178>
  807890:	10c00054 	ori	r3,r2,1
  807894:	30c00115 	stw	r3,4(r6)
  807898:	3087883a 	add	r3,r6,r2
  80789c:	18800015 	stw	r2,0(r3)
  8078a0:	00c07fc4 	movi	r3,511
  8078a4:	18801936 	bltu	r3,r2,80790c <_free_r+0x10c>
  8078a8:	1004d0fa 	srli	r2,r2,3
  8078ac:	01c00044 	movi	r7,1
  8078b0:	21400117 	ldw	r5,4(r4)
  8078b4:	10c00044 	addi	r3,r2,1
  8078b8:	18c7883a 	add	r3,r3,r3
  8078bc:	1005d0ba 	srai	r2,r2,2
  8078c0:	18c7883a 	add	r3,r3,r3
  8078c4:	18c7883a 	add	r3,r3,r3
  8078c8:	1907883a 	add	r3,r3,r4
  8078cc:	3884983a 	sll	r2,r7,r2
  8078d0:	19c00017 	ldw	r7,0(r3)
  8078d4:	1a3ffe04 	addi	r8,r3,-8
  8078d8:	1144b03a 	or	r2,r2,r5
  8078dc:	32000315 	stw	r8,12(r6)
  8078e0:	31c00215 	stw	r7,8(r6)
  8078e4:	20800115 	stw	r2,4(r4)
  8078e8:	19800015 	stw	r6,0(r3)
  8078ec:	39800315 	stw	r6,12(r7)
  8078f0:	8809883a 	mov	r4,r17
  8078f4:	dfc00217 	ldw	ra,8(sp)
  8078f8:	dc400117 	ldw	r17,4(sp)
  8078fc:	dc000017 	ldw	r16,0(sp)
  807900:	dec00304 	addi	sp,sp,12
  807904:	08100481 	jmpi	810048 <__malloc_unlock>
  807908:	f800283a 	ret
  80790c:	100ad27a 	srli	r5,r2,9
  807910:	00c00104 	movi	r3,4
  807914:	19404a36 	bltu	r3,r5,807a40 <_free_r+0x240>
  807918:	100ad1ba 	srli	r5,r2,6
  80791c:	28c00e44 	addi	r3,r5,57
  807920:	18c7883a 	add	r3,r3,r3
  807924:	29400e04 	addi	r5,r5,56
  807928:	18c7883a 	add	r3,r3,r3
  80792c:	18c7883a 	add	r3,r3,r3
  807930:	1909883a 	add	r4,r3,r4
  807934:	20c00017 	ldw	r3,0(r4)
  807938:	01c02074 	movhi	r7,129
  80793c:	213ffe04 	addi	r4,r4,-8
  807940:	39d18f04 	addi	r7,r7,17980
  807944:	20c04426 	beq	r4,r3,807a58 <_free_r+0x258>
  807948:	01ffff04 	movi	r7,-4
  80794c:	19400117 	ldw	r5,4(r3)
  807950:	29ca703a 	and	r5,r5,r7
  807954:	1140022e 	bgeu	r2,r5,807960 <_free_r+0x160>
  807958:	18c00217 	ldw	r3,8(r3)
  80795c:	20fffb1e 	bne	r4,r3,80794c <__alt_mem_onchip_mem+0xff78794c>
  807960:	19000317 	ldw	r4,12(r3)
  807964:	31000315 	stw	r4,12(r6)
  807968:	30c00215 	stw	r3,8(r6)
  80796c:	21800215 	stw	r6,8(r4)
  807970:	19800315 	stw	r6,12(r3)
  807974:	003fde06 	br	8078f0 <__alt_mem_onchip_mem+0xff7878f0>
  807978:	29c00217 	ldw	r7,8(r5)
  80797c:	10c5883a 	add	r2,r2,r3
  807980:	00c02074 	movhi	r3,129
  807984:	18d19104 	addi	r3,r3,17988
  807988:	38c03b26 	beq	r7,r3,807a78 <_free_r+0x278>
  80798c:	2a000317 	ldw	r8,12(r5)
  807990:	11400054 	ori	r5,r2,1
  807994:	3087883a 	add	r3,r6,r2
  807998:	3a000315 	stw	r8,12(r7)
  80799c:	41c00215 	stw	r7,8(r8)
  8079a0:	31400115 	stw	r5,4(r6)
  8079a4:	18800015 	stw	r2,0(r3)
  8079a8:	003fbd06 	br	8078a0 <__alt_mem_onchip_mem+0xff7878a0>
  8079ac:	39c0004c 	andi	r7,r7,1
  8079b0:	10c5883a 	add	r2,r2,r3
  8079b4:	3800071e 	bne	r7,zero,8079d4 <_free_r+0x1d4>
  8079b8:	81fffe17 	ldw	r7,-8(r16)
  8079bc:	31cdc83a 	sub	r6,r6,r7
  8079c0:	30c00317 	ldw	r3,12(r6)
  8079c4:	31400217 	ldw	r5,8(r6)
  8079c8:	11c5883a 	add	r2,r2,r7
  8079cc:	28c00315 	stw	r3,12(r5)
  8079d0:	19400215 	stw	r5,8(r3)
  8079d4:	10c00054 	ori	r3,r2,1
  8079d8:	30c00115 	stw	r3,4(r6)
  8079dc:	00c02074 	movhi	r3,129
  8079e0:	18d79004 	addi	r3,r3,24128
  8079e4:	18c00017 	ldw	r3,0(r3)
  8079e8:	21800215 	stw	r6,8(r4)
  8079ec:	10ffc036 	bltu	r2,r3,8078f0 <__alt_mem_onchip_mem+0xff7878f0>
  8079f0:	00802074 	movhi	r2,129
  8079f4:	109f3204 	addi	r2,r2,31944
  8079f8:	11400017 	ldw	r5,0(r2)
  8079fc:	8809883a 	mov	r4,r17
  807a00:	08076dc0 	call	8076dc <_malloc_trim_r>
  807a04:	003fba06 	br	8078f0 <__alt_mem_onchip_mem+0xff7878f0>
  807a08:	28c9883a 	add	r4,r5,r3
  807a0c:	21000117 	ldw	r4,4(r4)
  807a10:	2100004c 	andi	r4,r4,1
  807a14:	2000391e 	bne	r4,zero,807afc <_free_r+0x2fc>
  807a18:	29c00217 	ldw	r7,8(r5)
  807a1c:	29000317 	ldw	r4,12(r5)
  807a20:	1885883a 	add	r2,r3,r2
  807a24:	10c00054 	ori	r3,r2,1
  807a28:	39000315 	stw	r4,12(r7)
  807a2c:	21c00215 	stw	r7,8(r4)
  807a30:	30c00115 	stw	r3,4(r6)
  807a34:	308d883a 	add	r6,r6,r2
  807a38:	30800015 	stw	r2,0(r6)
  807a3c:	003fac06 	br	8078f0 <__alt_mem_onchip_mem+0xff7878f0>
  807a40:	00c00504 	movi	r3,20
  807a44:	19401536 	bltu	r3,r5,807a9c <_free_r+0x29c>
  807a48:	28c01704 	addi	r3,r5,92
  807a4c:	18c7883a 	add	r3,r3,r3
  807a50:	294016c4 	addi	r5,r5,91
  807a54:	003fb406 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807a58:	280bd0ba 	srai	r5,r5,2
  807a5c:	00c00044 	movi	r3,1
  807a60:	38800117 	ldw	r2,4(r7)
  807a64:	194a983a 	sll	r5,r3,r5
  807a68:	2007883a 	mov	r3,r4
  807a6c:	2884b03a 	or	r2,r5,r2
  807a70:	38800115 	stw	r2,4(r7)
  807a74:	003fbb06 	br	807964 <__alt_mem_onchip_mem+0xff787964>
  807a78:	21800515 	stw	r6,20(r4)
  807a7c:	21800415 	stw	r6,16(r4)
  807a80:	10c00054 	ori	r3,r2,1
  807a84:	31c00315 	stw	r7,12(r6)
  807a88:	31c00215 	stw	r7,8(r6)
  807a8c:	30c00115 	stw	r3,4(r6)
  807a90:	308d883a 	add	r6,r6,r2
  807a94:	30800015 	stw	r2,0(r6)
  807a98:	003f9506 	br	8078f0 <__alt_mem_onchip_mem+0xff7878f0>
  807a9c:	00c01504 	movi	r3,84
  807aa0:	19400536 	bltu	r3,r5,807ab8 <_free_r+0x2b8>
  807aa4:	100ad33a 	srli	r5,r2,12
  807aa8:	28c01bc4 	addi	r3,r5,111
  807aac:	18c7883a 	add	r3,r3,r3
  807ab0:	29401b84 	addi	r5,r5,110
  807ab4:	003f9c06 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807ab8:	00c05504 	movi	r3,340
  807abc:	19400536 	bltu	r3,r5,807ad4 <_free_r+0x2d4>
  807ac0:	100ad3fa 	srli	r5,r2,15
  807ac4:	28c01e04 	addi	r3,r5,120
  807ac8:	18c7883a 	add	r3,r3,r3
  807acc:	29401dc4 	addi	r5,r5,119
  807ad0:	003f9506 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807ad4:	00c15504 	movi	r3,1364
  807ad8:	19400536 	bltu	r3,r5,807af0 <_free_r+0x2f0>
  807adc:	100ad4ba 	srli	r5,r2,18
  807ae0:	28c01f44 	addi	r3,r5,125
  807ae4:	18c7883a 	add	r3,r3,r3
  807ae8:	29401f04 	addi	r5,r5,124
  807aec:	003f8e06 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807af0:	00c03f84 	movi	r3,254
  807af4:	01401f84 	movi	r5,126
  807af8:	003f8b06 	br	807928 <__alt_mem_onchip_mem+0xff787928>
  807afc:	10c00054 	ori	r3,r2,1
  807b00:	30c00115 	stw	r3,4(r6)
  807b04:	308d883a 	add	r6,r6,r2
  807b08:	30800015 	stw	r2,0(r6)
  807b0c:	003f7806 	br	8078f0 <__alt_mem_onchip_mem+0xff7878f0>

00807b10 <__sfvwrite_r>:
  807b10:	30800217 	ldw	r2,8(r6)
  807b14:	10006726 	beq	r2,zero,807cb4 <__sfvwrite_r+0x1a4>
  807b18:	28c0030b 	ldhu	r3,12(r5)
  807b1c:	defff404 	addi	sp,sp,-48
  807b20:	dd400715 	stw	r21,28(sp)
  807b24:	dd000615 	stw	r20,24(sp)
  807b28:	dc000215 	stw	r16,8(sp)
  807b2c:	dfc00b15 	stw	ra,44(sp)
  807b30:	df000a15 	stw	fp,40(sp)
  807b34:	ddc00915 	stw	r23,36(sp)
  807b38:	dd800815 	stw	r22,32(sp)
  807b3c:	dcc00515 	stw	r19,20(sp)
  807b40:	dc800415 	stw	r18,16(sp)
  807b44:	dc400315 	stw	r17,12(sp)
  807b48:	1880020c 	andi	r2,r3,8
  807b4c:	2821883a 	mov	r16,r5
  807b50:	202b883a 	mov	r21,r4
  807b54:	3029883a 	mov	r20,r6
  807b58:	10002726 	beq	r2,zero,807bf8 <__sfvwrite_r+0xe8>
  807b5c:	28800417 	ldw	r2,16(r5)
  807b60:	10002526 	beq	r2,zero,807bf8 <__sfvwrite_r+0xe8>
  807b64:	1880008c 	andi	r2,r3,2
  807b68:	a4400017 	ldw	r17,0(r20)
  807b6c:	10002a26 	beq	r2,zero,807c18 <__sfvwrite_r+0x108>
  807b70:	05a00034 	movhi	r22,32768
  807b74:	0027883a 	mov	r19,zero
  807b78:	0025883a 	mov	r18,zero
  807b7c:	b5bf0004 	addi	r22,r22,-1024
  807b80:	980d883a 	mov	r6,r19
  807b84:	a809883a 	mov	r4,r21
  807b88:	90004626 	beq	r18,zero,807ca4 <__sfvwrite_r+0x194>
  807b8c:	900f883a 	mov	r7,r18
  807b90:	b480022e 	bgeu	r22,r18,807b9c <__sfvwrite_r+0x8c>
  807b94:	01e00034 	movhi	r7,32768
  807b98:	39ff0004 	addi	r7,r7,-1024
  807b9c:	80800917 	ldw	r2,36(r16)
  807ba0:	81400717 	ldw	r5,28(r16)
  807ba4:	103ee83a 	callr	r2
  807ba8:	0080570e 	bge	zero,r2,807d08 <__sfvwrite_r+0x1f8>
  807bac:	a0c00217 	ldw	r3,8(r20)
  807bb0:	98a7883a 	add	r19,r19,r2
  807bb4:	90a5c83a 	sub	r18,r18,r2
  807bb8:	1885c83a 	sub	r2,r3,r2
  807bbc:	a0800215 	stw	r2,8(r20)
  807bc0:	103fef1e 	bne	r2,zero,807b80 <__alt_mem_onchip_mem+0xff787b80>
  807bc4:	0005883a 	mov	r2,zero
  807bc8:	dfc00b17 	ldw	ra,44(sp)
  807bcc:	df000a17 	ldw	fp,40(sp)
  807bd0:	ddc00917 	ldw	r23,36(sp)
  807bd4:	dd800817 	ldw	r22,32(sp)
  807bd8:	dd400717 	ldw	r21,28(sp)
  807bdc:	dd000617 	ldw	r20,24(sp)
  807be0:	dcc00517 	ldw	r19,20(sp)
  807be4:	dc800417 	ldw	r18,16(sp)
  807be8:	dc400317 	ldw	r17,12(sp)
  807bec:	dc000217 	ldw	r16,8(sp)
  807bf0:	dec00c04 	addi	sp,sp,48
  807bf4:	f800283a 	ret
  807bf8:	800b883a 	mov	r5,r16
  807bfc:	a809883a 	mov	r4,r21
  807c00:	08056b80 	call	8056b8 <__swsetup_r>
  807c04:	1000eb1e 	bne	r2,zero,807fb4 <__sfvwrite_r+0x4a4>
  807c08:	80c0030b 	ldhu	r3,12(r16)
  807c0c:	a4400017 	ldw	r17,0(r20)
  807c10:	1880008c 	andi	r2,r3,2
  807c14:	103fd61e 	bne	r2,zero,807b70 <__alt_mem_onchip_mem+0xff787b70>
  807c18:	1880004c 	andi	r2,r3,1
  807c1c:	10003f1e 	bne	r2,zero,807d1c <__sfvwrite_r+0x20c>
  807c20:	0039883a 	mov	fp,zero
  807c24:	0025883a 	mov	r18,zero
  807c28:	90001a26 	beq	r18,zero,807c94 <__sfvwrite_r+0x184>
  807c2c:	1880800c 	andi	r2,r3,512
  807c30:	84c00217 	ldw	r19,8(r16)
  807c34:	10002126 	beq	r2,zero,807cbc <__sfvwrite_r+0x1ac>
  807c38:	982f883a 	mov	r23,r19
  807c3c:	94c09336 	bltu	r18,r19,807e8c <__sfvwrite_r+0x37c>
  807c40:	1881200c 	andi	r2,r3,1152
  807c44:	10009e1e 	bne	r2,zero,807ec0 <__sfvwrite_r+0x3b0>
  807c48:	81000017 	ldw	r4,0(r16)
  807c4c:	b80d883a 	mov	r6,r23
  807c50:	e00b883a 	mov	r5,fp
  807c54:	0808e240 	call	808e24 <memmove>
  807c58:	80c00217 	ldw	r3,8(r16)
  807c5c:	81000017 	ldw	r4,0(r16)
  807c60:	9005883a 	mov	r2,r18
  807c64:	1ce7c83a 	sub	r19,r3,r19
  807c68:	25cf883a 	add	r7,r4,r23
  807c6c:	84c00215 	stw	r19,8(r16)
  807c70:	81c00015 	stw	r7,0(r16)
  807c74:	a0c00217 	ldw	r3,8(r20)
  807c78:	e0b9883a 	add	fp,fp,r2
  807c7c:	90a5c83a 	sub	r18,r18,r2
  807c80:	18a7c83a 	sub	r19,r3,r2
  807c84:	a4c00215 	stw	r19,8(r20)
  807c88:	983fce26 	beq	r19,zero,807bc4 <__alt_mem_onchip_mem+0xff787bc4>
  807c8c:	80c0030b 	ldhu	r3,12(r16)
  807c90:	903fe61e 	bne	r18,zero,807c2c <__alt_mem_onchip_mem+0xff787c2c>
  807c94:	8f000017 	ldw	fp,0(r17)
  807c98:	8c800117 	ldw	r18,4(r17)
  807c9c:	8c400204 	addi	r17,r17,8
  807ca0:	003fe106 	br	807c28 <__alt_mem_onchip_mem+0xff787c28>
  807ca4:	8cc00017 	ldw	r19,0(r17)
  807ca8:	8c800117 	ldw	r18,4(r17)
  807cac:	8c400204 	addi	r17,r17,8
  807cb0:	003fb306 	br	807b80 <__alt_mem_onchip_mem+0xff787b80>
  807cb4:	0005883a 	mov	r2,zero
  807cb8:	f800283a 	ret
  807cbc:	81000017 	ldw	r4,0(r16)
  807cc0:	80800417 	ldw	r2,16(r16)
  807cc4:	11005736 	bltu	r2,r4,807e24 <__sfvwrite_r+0x314>
  807cc8:	85c00517 	ldw	r23,20(r16)
  807ccc:	95c05536 	bltu	r18,r23,807e24 <__sfvwrite_r+0x314>
  807cd0:	00a00034 	movhi	r2,32768
  807cd4:	10bfffc4 	addi	r2,r2,-1
  807cd8:	9009883a 	mov	r4,r18
  807cdc:	1480012e 	bgeu	r2,r18,807ce4 <__sfvwrite_r+0x1d4>
  807ce0:	1009883a 	mov	r4,r2
  807ce4:	b80b883a 	mov	r5,r23
  807ce8:	080305c0 	call	80305c <__divsi3>
  807cec:	15cf383a 	mul	r7,r2,r23
  807cf0:	81400717 	ldw	r5,28(r16)
  807cf4:	80800917 	ldw	r2,36(r16)
  807cf8:	e00d883a 	mov	r6,fp
  807cfc:	a809883a 	mov	r4,r21
  807d00:	103ee83a 	callr	r2
  807d04:	00bfdb16 	blt	zero,r2,807c74 <__alt_mem_onchip_mem+0xff787c74>
  807d08:	8080030b 	ldhu	r2,12(r16)
  807d0c:	10801014 	ori	r2,r2,64
  807d10:	8080030d 	sth	r2,12(r16)
  807d14:	00bfffc4 	movi	r2,-1
  807d18:	003fab06 	br	807bc8 <__alt_mem_onchip_mem+0xff787bc8>
  807d1c:	0027883a 	mov	r19,zero
  807d20:	0011883a 	mov	r8,zero
  807d24:	0039883a 	mov	fp,zero
  807d28:	0025883a 	mov	r18,zero
  807d2c:	90001f26 	beq	r18,zero,807dac <__sfvwrite_r+0x29c>
  807d30:	40005a26 	beq	r8,zero,807e9c <__sfvwrite_r+0x38c>
  807d34:	982d883a 	mov	r22,r19
  807d38:	94c0012e 	bgeu	r18,r19,807d40 <__sfvwrite_r+0x230>
  807d3c:	902d883a 	mov	r22,r18
  807d40:	81000017 	ldw	r4,0(r16)
  807d44:	80800417 	ldw	r2,16(r16)
  807d48:	b02f883a 	mov	r23,r22
  807d4c:	81c00517 	ldw	r7,20(r16)
  807d50:	1100032e 	bgeu	r2,r4,807d60 <__sfvwrite_r+0x250>
  807d54:	80c00217 	ldw	r3,8(r16)
  807d58:	38c7883a 	add	r3,r7,r3
  807d5c:	1d801816 	blt	r3,r22,807dc0 <__sfvwrite_r+0x2b0>
  807d60:	b1c03e16 	blt	r22,r7,807e5c <__sfvwrite_r+0x34c>
  807d64:	80800917 	ldw	r2,36(r16)
  807d68:	81400717 	ldw	r5,28(r16)
  807d6c:	e00d883a 	mov	r6,fp
  807d70:	da000115 	stw	r8,4(sp)
  807d74:	a809883a 	mov	r4,r21
  807d78:	103ee83a 	callr	r2
  807d7c:	102f883a 	mov	r23,r2
  807d80:	da000117 	ldw	r8,4(sp)
  807d84:	00bfe00e 	bge	zero,r2,807d08 <__alt_mem_onchip_mem+0xff787d08>
  807d88:	9de7c83a 	sub	r19,r19,r23
  807d8c:	98001f26 	beq	r19,zero,807e0c <__sfvwrite_r+0x2fc>
  807d90:	a0800217 	ldw	r2,8(r20)
  807d94:	e5f9883a 	add	fp,fp,r23
  807d98:	95e5c83a 	sub	r18,r18,r23
  807d9c:	15efc83a 	sub	r23,r2,r23
  807da0:	a5c00215 	stw	r23,8(r20)
  807da4:	b83f8726 	beq	r23,zero,807bc4 <__alt_mem_onchip_mem+0xff787bc4>
  807da8:	903fe11e 	bne	r18,zero,807d30 <__alt_mem_onchip_mem+0xff787d30>
  807dac:	8f000017 	ldw	fp,0(r17)
  807db0:	8c800117 	ldw	r18,4(r17)
  807db4:	0011883a 	mov	r8,zero
  807db8:	8c400204 	addi	r17,r17,8
  807dbc:	003fdb06 	br	807d2c <__alt_mem_onchip_mem+0xff787d2c>
  807dc0:	180d883a 	mov	r6,r3
  807dc4:	e00b883a 	mov	r5,fp
  807dc8:	da000115 	stw	r8,4(sp)
  807dcc:	d8c00015 	stw	r3,0(sp)
  807dd0:	0808e240 	call	808e24 <memmove>
  807dd4:	d8c00017 	ldw	r3,0(sp)
  807dd8:	80800017 	ldw	r2,0(r16)
  807ddc:	800b883a 	mov	r5,r16
  807de0:	a809883a 	mov	r4,r21
  807de4:	10c5883a 	add	r2,r2,r3
  807de8:	80800015 	stw	r2,0(r16)
  807dec:	d8c00015 	stw	r3,0(sp)
  807df0:	08072b00 	call	8072b0 <_fflush_r>
  807df4:	d8c00017 	ldw	r3,0(sp)
  807df8:	da000117 	ldw	r8,4(sp)
  807dfc:	103fc21e 	bne	r2,zero,807d08 <__alt_mem_onchip_mem+0xff787d08>
  807e00:	182f883a 	mov	r23,r3
  807e04:	9de7c83a 	sub	r19,r19,r23
  807e08:	983fe11e 	bne	r19,zero,807d90 <__alt_mem_onchip_mem+0xff787d90>
  807e0c:	800b883a 	mov	r5,r16
  807e10:	a809883a 	mov	r4,r21
  807e14:	08072b00 	call	8072b0 <_fflush_r>
  807e18:	103fbb1e 	bne	r2,zero,807d08 <__alt_mem_onchip_mem+0xff787d08>
  807e1c:	0011883a 	mov	r8,zero
  807e20:	003fdb06 	br	807d90 <__alt_mem_onchip_mem+0xff787d90>
  807e24:	94c0012e 	bgeu	r18,r19,807e2c <__sfvwrite_r+0x31c>
  807e28:	9027883a 	mov	r19,r18
  807e2c:	980d883a 	mov	r6,r19
  807e30:	e00b883a 	mov	r5,fp
  807e34:	0808e240 	call	808e24 <memmove>
  807e38:	80800217 	ldw	r2,8(r16)
  807e3c:	80c00017 	ldw	r3,0(r16)
  807e40:	14c5c83a 	sub	r2,r2,r19
  807e44:	1cc7883a 	add	r3,r3,r19
  807e48:	80800215 	stw	r2,8(r16)
  807e4c:	80c00015 	stw	r3,0(r16)
  807e50:	10004326 	beq	r2,zero,807f60 <__sfvwrite_r+0x450>
  807e54:	9805883a 	mov	r2,r19
  807e58:	003f8606 	br	807c74 <__alt_mem_onchip_mem+0xff787c74>
  807e5c:	b00d883a 	mov	r6,r22
  807e60:	e00b883a 	mov	r5,fp
  807e64:	da000115 	stw	r8,4(sp)
  807e68:	0808e240 	call	808e24 <memmove>
  807e6c:	80800217 	ldw	r2,8(r16)
  807e70:	80c00017 	ldw	r3,0(r16)
  807e74:	da000117 	ldw	r8,4(sp)
  807e78:	1585c83a 	sub	r2,r2,r22
  807e7c:	1dad883a 	add	r22,r3,r22
  807e80:	80800215 	stw	r2,8(r16)
  807e84:	85800015 	stw	r22,0(r16)
  807e88:	003fbf06 	br	807d88 <__alt_mem_onchip_mem+0xff787d88>
  807e8c:	81000017 	ldw	r4,0(r16)
  807e90:	9027883a 	mov	r19,r18
  807e94:	902f883a 	mov	r23,r18
  807e98:	003f6c06 	br	807c4c <__alt_mem_onchip_mem+0xff787c4c>
  807e9c:	900d883a 	mov	r6,r18
  807ea0:	01400284 	movi	r5,10
  807ea4:	e009883a 	mov	r4,fp
  807ea8:	0808bf80 	call	808bf8 <memchr>
  807eac:	10003e26 	beq	r2,zero,807fa8 <__sfvwrite_r+0x498>
  807eb0:	10800044 	addi	r2,r2,1
  807eb4:	1727c83a 	sub	r19,r2,fp
  807eb8:	02000044 	movi	r8,1
  807ebc:	003f9d06 	br	807d34 <__alt_mem_onchip_mem+0xff787d34>
  807ec0:	80800517 	ldw	r2,20(r16)
  807ec4:	81400417 	ldw	r5,16(r16)
  807ec8:	81c00017 	ldw	r7,0(r16)
  807ecc:	10a7883a 	add	r19,r2,r2
  807ed0:	9885883a 	add	r2,r19,r2
  807ed4:	1026d7fa 	srli	r19,r2,31
  807ed8:	396dc83a 	sub	r22,r7,r5
  807edc:	b1000044 	addi	r4,r22,1
  807ee0:	9885883a 	add	r2,r19,r2
  807ee4:	1027d07a 	srai	r19,r2,1
  807ee8:	2485883a 	add	r2,r4,r18
  807eec:	980d883a 	mov	r6,r19
  807ef0:	9880022e 	bgeu	r19,r2,807efc <__sfvwrite_r+0x3ec>
  807ef4:	1027883a 	mov	r19,r2
  807ef8:	100d883a 	mov	r6,r2
  807efc:	18c1000c 	andi	r3,r3,1024
  807f00:	18001c26 	beq	r3,zero,807f74 <__sfvwrite_r+0x464>
  807f04:	300b883a 	mov	r5,r6
  807f08:	a809883a 	mov	r4,r21
  807f0c:	08083ec0 	call	8083ec <_malloc_r>
  807f10:	102f883a 	mov	r23,r2
  807f14:	10002926 	beq	r2,zero,807fbc <__sfvwrite_r+0x4ac>
  807f18:	81400417 	ldw	r5,16(r16)
  807f1c:	b00d883a 	mov	r6,r22
  807f20:	1009883a 	mov	r4,r2
  807f24:	0808cdc0 	call	808cdc <memcpy>
  807f28:	8080030b 	ldhu	r2,12(r16)
  807f2c:	00fedfc4 	movi	r3,-1153
  807f30:	10c4703a 	and	r2,r2,r3
  807f34:	10802014 	ori	r2,r2,128
  807f38:	8080030d 	sth	r2,12(r16)
  807f3c:	bd89883a 	add	r4,r23,r22
  807f40:	9d8fc83a 	sub	r7,r19,r22
  807f44:	85c00415 	stw	r23,16(r16)
  807f48:	84c00515 	stw	r19,20(r16)
  807f4c:	81000015 	stw	r4,0(r16)
  807f50:	9027883a 	mov	r19,r18
  807f54:	81c00215 	stw	r7,8(r16)
  807f58:	902f883a 	mov	r23,r18
  807f5c:	003f3b06 	br	807c4c <__alt_mem_onchip_mem+0xff787c4c>
  807f60:	800b883a 	mov	r5,r16
  807f64:	a809883a 	mov	r4,r21
  807f68:	08072b00 	call	8072b0 <_fflush_r>
  807f6c:	103fb926 	beq	r2,zero,807e54 <__alt_mem_onchip_mem+0xff787e54>
  807f70:	003f6506 	br	807d08 <__alt_mem_onchip_mem+0xff787d08>
  807f74:	a809883a 	mov	r4,r21
  807f78:	080a0a40 	call	80a0a4 <_realloc_r>
  807f7c:	102f883a 	mov	r23,r2
  807f80:	103fee1e 	bne	r2,zero,807f3c <__alt_mem_onchip_mem+0xff787f3c>
  807f84:	81400417 	ldw	r5,16(r16)
  807f88:	a809883a 	mov	r4,r21
  807f8c:	08078000 	call	807800 <_free_r>
  807f90:	8080030b 	ldhu	r2,12(r16)
  807f94:	00ffdfc4 	movi	r3,-129
  807f98:	1884703a 	and	r2,r3,r2
  807f9c:	00c00304 	movi	r3,12
  807fa0:	a8c00015 	stw	r3,0(r21)
  807fa4:	003f5906 	br	807d0c <__alt_mem_onchip_mem+0xff787d0c>
  807fa8:	94c00044 	addi	r19,r18,1
  807fac:	02000044 	movi	r8,1
  807fb0:	003f6006 	br	807d34 <__alt_mem_onchip_mem+0xff787d34>
  807fb4:	00bfffc4 	movi	r2,-1
  807fb8:	003f0306 	br	807bc8 <__alt_mem_onchip_mem+0xff787bc8>
  807fbc:	00800304 	movi	r2,12
  807fc0:	a8800015 	stw	r2,0(r21)
  807fc4:	8080030b 	ldhu	r2,12(r16)
  807fc8:	003f5006 	br	807d0c <__alt_mem_onchip_mem+0xff787d0c>

00807fcc <_fwalk>:
  807fcc:	defff704 	addi	sp,sp,-36
  807fd0:	dd000415 	stw	r20,16(sp)
  807fd4:	dfc00815 	stw	ra,32(sp)
  807fd8:	ddc00715 	stw	r23,28(sp)
  807fdc:	dd800615 	stw	r22,24(sp)
  807fe0:	dd400515 	stw	r21,20(sp)
  807fe4:	dcc00315 	stw	r19,12(sp)
  807fe8:	dc800215 	stw	r18,8(sp)
  807fec:	dc400115 	stw	r17,4(sp)
  807ff0:	dc000015 	stw	r16,0(sp)
  807ff4:	2500b804 	addi	r20,r4,736
  807ff8:	a0002326 	beq	r20,zero,808088 <_fwalk+0xbc>
  807ffc:	282b883a 	mov	r21,r5
  808000:	002f883a 	mov	r23,zero
  808004:	05800044 	movi	r22,1
  808008:	04ffffc4 	movi	r19,-1
  80800c:	a4400117 	ldw	r17,4(r20)
  808010:	a4800217 	ldw	r18,8(r20)
  808014:	8c7fffc4 	addi	r17,r17,-1
  808018:	88000d16 	blt	r17,zero,808050 <_fwalk+0x84>
  80801c:	94000304 	addi	r16,r18,12
  808020:	94800384 	addi	r18,r18,14
  808024:	8080000b 	ldhu	r2,0(r16)
  808028:	8c7fffc4 	addi	r17,r17,-1
  80802c:	813ffd04 	addi	r4,r16,-12
  808030:	b080042e 	bgeu	r22,r2,808044 <_fwalk+0x78>
  808034:	9080000f 	ldh	r2,0(r18)
  808038:	14c00226 	beq	r2,r19,808044 <_fwalk+0x78>
  80803c:	a83ee83a 	callr	r21
  808040:	b8aeb03a 	or	r23,r23,r2
  808044:	84001a04 	addi	r16,r16,104
  808048:	94801a04 	addi	r18,r18,104
  80804c:	8cfff51e 	bne	r17,r19,808024 <__alt_mem_onchip_mem+0xff788024>
  808050:	a5000017 	ldw	r20,0(r20)
  808054:	a03fed1e 	bne	r20,zero,80800c <__alt_mem_onchip_mem+0xff78800c>
  808058:	b805883a 	mov	r2,r23
  80805c:	dfc00817 	ldw	ra,32(sp)
  808060:	ddc00717 	ldw	r23,28(sp)
  808064:	dd800617 	ldw	r22,24(sp)
  808068:	dd400517 	ldw	r21,20(sp)
  80806c:	dd000417 	ldw	r20,16(sp)
  808070:	dcc00317 	ldw	r19,12(sp)
  808074:	dc800217 	ldw	r18,8(sp)
  808078:	dc400117 	ldw	r17,4(sp)
  80807c:	dc000017 	ldw	r16,0(sp)
  808080:	dec00904 	addi	sp,sp,36
  808084:	f800283a 	ret
  808088:	002f883a 	mov	r23,zero
  80808c:	003ff206 	br	808058 <__alt_mem_onchip_mem+0xff788058>

00808090 <_fwalk_reent>:
  808090:	defff704 	addi	sp,sp,-36
  808094:	dd000415 	stw	r20,16(sp)
  808098:	dfc00815 	stw	ra,32(sp)
  80809c:	ddc00715 	stw	r23,28(sp)
  8080a0:	dd800615 	stw	r22,24(sp)
  8080a4:	dd400515 	stw	r21,20(sp)
  8080a8:	dcc00315 	stw	r19,12(sp)
  8080ac:	dc800215 	stw	r18,8(sp)
  8080b0:	dc400115 	stw	r17,4(sp)
  8080b4:	dc000015 	stw	r16,0(sp)
  8080b8:	2500b804 	addi	r20,r4,736
  8080bc:	a0002326 	beq	r20,zero,80814c <_fwalk_reent+0xbc>
  8080c0:	282b883a 	mov	r21,r5
  8080c4:	2027883a 	mov	r19,r4
  8080c8:	002f883a 	mov	r23,zero
  8080cc:	05800044 	movi	r22,1
  8080d0:	04bfffc4 	movi	r18,-1
  8080d4:	a4400117 	ldw	r17,4(r20)
  8080d8:	a4000217 	ldw	r16,8(r20)
  8080dc:	8c7fffc4 	addi	r17,r17,-1
  8080e0:	88000c16 	blt	r17,zero,808114 <_fwalk_reent+0x84>
  8080e4:	84000304 	addi	r16,r16,12
  8080e8:	8080000b 	ldhu	r2,0(r16)
  8080ec:	8c7fffc4 	addi	r17,r17,-1
  8080f0:	817ffd04 	addi	r5,r16,-12
  8080f4:	b080052e 	bgeu	r22,r2,80810c <_fwalk_reent+0x7c>
  8080f8:	8080008f 	ldh	r2,2(r16)
  8080fc:	9809883a 	mov	r4,r19
  808100:	14800226 	beq	r2,r18,80810c <_fwalk_reent+0x7c>
  808104:	a83ee83a 	callr	r21
  808108:	b8aeb03a 	or	r23,r23,r2
  80810c:	84001a04 	addi	r16,r16,104
  808110:	8cbff51e 	bne	r17,r18,8080e8 <__alt_mem_onchip_mem+0xff7880e8>
  808114:	a5000017 	ldw	r20,0(r20)
  808118:	a03fee1e 	bne	r20,zero,8080d4 <__alt_mem_onchip_mem+0xff7880d4>
  80811c:	b805883a 	mov	r2,r23
  808120:	dfc00817 	ldw	ra,32(sp)
  808124:	ddc00717 	ldw	r23,28(sp)
  808128:	dd800617 	ldw	r22,24(sp)
  80812c:	dd400517 	ldw	r21,20(sp)
  808130:	dd000417 	ldw	r20,16(sp)
  808134:	dcc00317 	ldw	r19,12(sp)
  808138:	dc800217 	ldw	r18,8(sp)
  80813c:	dc400117 	ldw	r17,4(sp)
  808140:	dc000017 	ldw	r16,0(sp)
  808144:	dec00904 	addi	sp,sp,36
  808148:	f800283a 	ret
  80814c:	002f883a 	mov	r23,zero
  808150:	003ff206 	br	80811c <__alt_mem_onchip_mem+0xff78811c>

00808154 <_setlocale_r>:
  808154:	30001b26 	beq	r6,zero,8081c4 <_setlocale_r+0x70>
  808158:	01402074 	movhi	r5,129
  80815c:	defffe04 	addi	sp,sp,-8
  808160:	294f2304 	addi	r5,r5,15500
  808164:	3009883a 	mov	r4,r6
  808168:	dc000015 	stw	r16,0(sp)
  80816c:	dfc00115 	stw	ra,4(sp)
  808170:	3021883a 	mov	r16,r6
  808174:	080a80c0 	call	80a80c <strcmp>
  808178:	1000061e 	bne	r2,zero,808194 <_setlocale_r+0x40>
  80817c:	00802074 	movhi	r2,129
  808180:	108f2204 	addi	r2,r2,15496
  808184:	dfc00117 	ldw	ra,4(sp)
  808188:	dc000017 	ldw	r16,0(sp)
  80818c:	dec00204 	addi	sp,sp,8
  808190:	f800283a 	ret
  808194:	01402074 	movhi	r5,129
  808198:	294f2204 	addi	r5,r5,15496
  80819c:	8009883a 	mov	r4,r16
  8081a0:	080a80c0 	call	80a80c <strcmp>
  8081a4:	103ff526 	beq	r2,zero,80817c <__alt_mem_onchip_mem+0xff78817c>
  8081a8:	01402074 	movhi	r5,129
  8081ac:	294f0d04 	addi	r5,r5,15412
  8081b0:	8009883a 	mov	r4,r16
  8081b4:	080a80c0 	call	80a80c <strcmp>
  8081b8:	103ff026 	beq	r2,zero,80817c <__alt_mem_onchip_mem+0xff78817c>
  8081bc:	0005883a 	mov	r2,zero
  8081c0:	003ff006 	br	808184 <__alt_mem_onchip_mem+0xff788184>
  8081c4:	00802074 	movhi	r2,129
  8081c8:	108f2204 	addi	r2,r2,15496
  8081cc:	f800283a 	ret

008081d0 <__locale_charset>:
  8081d0:	00802074 	movhi	r2,129
  8081d4:	10917904 	addi	r2,r2,17892
  8081d8:	f800283a 	ret

008081dc <__locale_mb_cur_max>:
  8081dc:	00802074 	movhi	r2,129
  8081e0:	10978e04 	addi	r2,r2,24120
  8081e4:	10800017 	ldw	r2,0(r2)
  8081e8:	f800283a 	ret

008081ec <__locale_msgcharset>:
  8081ec:	00802074 	movhi	r2,129
  8081f0:	10917104 	addi	r2,r2,17860
  8081f4:	f800283a 	ret

008081f8 <__locale_cjk_lang>:
  8081f8:	0005883a 	mov	r2,zero
  8081fc:	f800283a 	ret

00808200 <_localeconv_r>:
  808200:	00802074 	movhi	r2,129
  808204:	10918104 	addi	r2,r2,17924
  808208:	f800283a 	ret

0080820c <setlocale>:
  80820c:	00802074 	movhi	r2,129
  808210:	10978d04 	addi	r2,r2,24116
  808214:	280d883a 	mov	r6,r5
  808218:	200b883a 	mov	r5,r4
  80821c:	11000017 	ldw	r4,0(r2)
  808220:	08081541 	jmpi	808154 <_setlocale_r>

00808224 <localeconv>:
  808224:	00802074 	movhi	r2,129
  808228:	10918104 	addi	r2,r2,17924
  80822c:	f800283a 	ret

00808230 <__smakebuf_r>:
  808230:	2880030b 	ldhu	r2,12(r5)
  808234:	10c0008c 	andi	r3,r2,2
  808238:	1800411e 	bne	r3,zero,808340 <__smakebuf_r+0x110>
  80823c:	deffec04 	addi	sp,sp,-80
  808240:	dc000f15 	stw	r16,60(sp)
  808244:	2821883a 	mov	r16,r5
  808248:	2940038f 	ldh	r5,14(r5)
  80824c:	dc401015 	stw	r17,64(sp)
  808250:	dfc01315 	stw	ra,76(sp)
  808254:	dcc01215 	stw	r19,72(sp)
  808258:	dc801115 	stw	r18,68(sp)
  80825c:	2023883a 	mov	r17,r4
  808260:	28001c16 	blt	r5,zero,8082d4 <__smakebuf_r+0xa4>
  808264:	d80d883a 	mov	r6,sp
  808268:	080c3b40 	call	80c3b4 <_fstat_r>
  80826c:	10001816 	blt	r2,zero,8082d0 <__smakebuf_r+0xa0>
  808270:	d8800117 	ldw	r2,4(sp)
  808274:	00e00014 	movui	r3,32768
  808278:	10bc000c 	andi	r2,r2,61440
  80827c:	14c80020 	cmpeqi	r19,r2,8192
  808280:	10c03726 	beq	r2,r3,808360 <__smakebuf_r+0x130>
  808284:	80c0030b 	ldhu	r3,12(r16)
  808288:	18c20014 	ori	r3,r3,2048
  80828c:	80c0030d 	sth	r3,12(r16)
  808290:	00c80004 	movi	r3,8192
  808294:	10c0521e 	bne	r2,r3,8083e0 <__smakebuf_r+0x1b0>
  808298:	8140038f 	ldh	r5,14(r16)
  80829c:	8809883a 	mov	r4,r17
  8082a0:	080c4100 	call	80c410 <_isatty_r>
  8082a4:	10004c26 	beq	r2,zero,8083d8 <__smakebuf_r+0x1a8>
  8082a8:	8080030b 	ldhu	r2,12(r16)
  8082ac:	80c010c4 	addi	r3,r16,67
  8082b0:	80c00015 	stw	r3,0(r16)
  8082b4:	10800054 	ori	r2,r2,1
  8082b8:	8080030d 	sth	r2,12(r16)
  8082bc:	00800044 	movi	r2,1
  8082c0:	80c00415 	stw	r3,16(r16)
  8082c4:	80800515 	stw	r2,20(r16)
  8082c8:	04810004 	movi	r18,1024
  8082cc:	00000706 	br	8082ec <__smakebuf_r+0xbc>
  8082d0:	8080030b 	ldhu	r2,12(r16)
  8082d4:	10c0200c 	andi	r3,r2,128
  8082d8:	18001f1e 	bne	r3,zero,808358 <__smakebuf_r+0x128>
  8082dc:	04810004 	movi	r18,1024
  8082e0:	10820014 	ori	r2,r2,2048
  8082e4:	8080030d 	sth	r2,12(r16)
  8082e8:	0027883a 	mov	r19,zero
  8082ec:	900b883a 	mov	r5,r18
  8082f0:	8809883a 	mov	r4,r17
  8082f4:	08083ec0 	call	8083ec <_malloc_r>
  8082f8:	10002c26 	beq	r2,zero,8083ac <__smakebuf_r+0x17c>
  8082fc:	80c0030b 	ldhu	r3,12(r16)
  808300:	01002034 	movhi	r4,128
  808304:	211cd104 	addi	r4,r4,29508
  808308:	89000f15 	stw	r4,60(r17)
  80830c:	18c02014 	ori	r3,r3,128
  808310:	80c0030d 	sth	r3,12(r16)
  808314:	80800015 	stw	r2,0(r16)
  808318:	80800415 	stw	r2,16(r16)
  80831c:	84800515 	stw	r18,20(r16)
  808320:	98001a1e 	bne	r19,zero,80838c <__smakebuf_r+0x15c>
  808324:	dfc01317 	ldw	ra,76(sp)
  808328:	dcc01217 	ldw	r19,72(sp)
  80832c:	dc801117 	ldw	r18,68(sp)
  808330:	dc401017 	ldw	r17,64(sp)
  808334:	dc000f17 	ldw	r16,60(sp)
  808338:	dec01404 	addi	sp,sp,80
  80833c:	f800283a 	ret
  808340:	288010c4 	addi	r2,r5,67
  808344:	28800015 	stw	r2,0(r5)
  808348:	28800415 	stw	r2,16(r5)
  80834c:	00800044 	movi	r2,1
  808350:	28800515 	stw	r2,20(r5)
  808354:	f800283a 	ret
  808358:	04801004 	movi	r18,64
  80835c:	003fe006 	br	8082e0 <__alt_mem_onchip_mem+0xff7882e0>
  808360:	81000a17 	ldw	r4,40(r16)
  808364:	00c02074 	movhi	r3,129
  808368:	18e9ea04 	addi	r3,r3,-22616
  80836c:	20ffc51e 	bne	r4,r3,808284 <__alt_mem_onchip_mem+0xff788284>
  808370:	8080030b 	ldhu	r2,12(r16)
  808374:	04810004 	movi	r18,1024
  808378:	84801315 	stw	r18,76(r16)
  80837c:	1484b03a 	or	r2,r2,r18
  808380:	8080030d 	sth	r2,12(r16)
  808384:	0027883a 	mov	r19,zero
  808388:	003fd806 	br	8082ec <__alt_mem_onchip_mem+0xff7882ec>
  80838c:	8140038f 	ldh	r5,14(r16)
  808390:	8809883a 	mov	r4,r17
  808394:	080c4100 	call	80c410 <_isatty_r>
  808398:	103fe226 	beq	r2,zero,808324 <__alt_mem_onchip_mem+0xff788324>
  80839c:	8080030b 	ldhu	r2,12(r16)
  8083a0:	10800054 	ori	r2,r2,1
  8083a4:	8080030d 	sth	r2,12(r16)
  8083a8:	003fde06 	br	808324 <__alt_mem_onchip_mem+0xff788324>
  8083ac:	8080030b 	ldhu	r2,12(r16)
  8083b0:	10c0800c 	andi	r3,r2,512
  8083b4:	183fdb1e 	bne	r3,zero,808324 <__alt_mem_onchip_mem+0xff788324>
  8083b8:	10800094 	ori	r2,r2,2
  8083bc:	80c010c4 	addi	r3,r16,67
  8083c0:	8080030d 	sth	r2,12(r16)
  8083c4:	00800044 	movi	r2,1
  8083c8:	80c00015 	stw	r3,0(r16)
  8083cc:	80c00415 	stw	r3,16(r16)
  8083d0:	80800515 	stw	r2,20(r16)
  8083d4:	003fd306 	br	808324 <__alt_mem_onchip_mem+0xff788324>
  8083d8:	04810004 	movi	r18,1024
  8083dc:	003fc306 	br	8082ec <__alt_mem_onchip_mem+0xff7882ec>
  8083e0:	0027883a 	mov	r19,zero
  8083e4:	04810004 	movi	r18,1024
  8083e8:	003fc006 	br	8082ec <__alt_mem_onchip_mem+0xff7882ec>

008083ec <_malloc_r>:
  8083ec:	defff504 	addi	sp,sp,-44
  8083f0:	dc800315 	stw	r18,12(sp)
  8083f4:	dfc00a15 	stw	ra,40(sp)
  8083f8:	df000915 	stw	fp,36(sp)
  8083fc:	ddc00815 	stw	r23,32(sp)
  808400:	dd800715 	stw	r22,28(sp)
  808404:	dd400615 	stw	r21,24(sp)
  808408:	dd000515 	stw	r20,20(sp)
  80840c:	dcc00415 	stw	r19,16(sp)
  808410:	dc400215 	stw	r17,8(sp)
  808414:	dc000115 	stw	r16,4(sp)
  808418:	288002c4 	addi	r2,r5,11
  80841c:	00c00584 	movi	r3,22
  808420:	2025883a 	mov	r18,r4
  808424:	18807f2e 	bgeu	r3,r2,808624 <_malloc_r+0x238>
  808428:	047ffe04 	movi	r17,-8
  80842c:	1462703a 	and	r17,r2,r17
  808430:	8800a316 	blt	r17,zero,8086c0 <_malloc_r+0x2d4>
  808434:	8940a236 	bltu	r17,r5,8086c0 <_malloc_r+0x2d4>
  808438:	08100240 	call	810024 <__malloc_lock>
  80843c:	00807dc4 	movi	r2,503
  808440:	1441e92e 	bgeu	r2,r17,808be8 <_malloc_r+0x7fc>
  808444:	8804d27a 	srli	r2,r17,9
  808448:	1000a126 	beq	r2,zero,8086d0 <_malloc_r+0x2e4>
  80844c:	00c00104 	movi	r3,4
  808450:	18811e36 	bltu	r3,r2,8088cc <_malloc_r+0x4e0>
  808454:	8804d1ba 	srli	r2,r17,6
  808458:	12000e44 	addi	r8,r2,57
  80845c:	11c00e04 	addi	r7,r2,56
  808460:	4209883a 	add	r4,r8,r8
  808464:	04c02074 	movhi	r19,129
  808468:	2109883a 	add	r4,r4,r4
  80846c:	9cd18f04 	addi	r19,r19,17980
  808470:	2109883a 	add	r4,r4,r4
  808474:	9909883a 	add	r4,r19,r4
  808478:	24000117 	ldw	r16,4(r4)
  80847c:	213ffe04 	addi	r4,r4,-8
  808480:	24009726 	beq	r4,r16,8086e0 <_malloc_r+0x2f4>
  808484:	80800117 	ldw	r2,4(r16)
  808488:	01bfff04 	movi	r6,-4
  80848c:	014003c4 	movi	r5,15
  808490:	1184703a 	and	r2,r2,r6
  808494:	1447c83a 	sub	r3,r2,r17
  808498:	28c00716 	blt	r5,r3,8084b8 <_malloc_r+0xcc>
  80849c:	1800920e 	bge	r3,zero,8086e8 <_malloc_r+0x2fc>
  8084a0:	84000317 	ldw	r16,12(r16)
  8084a4:	24008e26 	beq	r4,r16,8086e0 <_malloc_r+0x2f4>
  8084a8:	80800117 	ldw	r2,4(r16)
  8084ac:	1184703a 	and	r2,r2,r6
  8084b0:	1447c83a 	sub	r3,r2,r17
  8084b4:	28fff90e 	bge	r5,r3,80849c <__alt_mem_onchip_mem+0xff78849c>
  8084b8:	3809883a 	mov	r4,r7
  8084bc:	01802074 	movhi	r6,129
  8084c0:	9c000417 	ldw	r16,16(r19)
  8084c4:	31918f04 	addi	r6,r6,17980
  8084c8:	32000204 	addi	r8,r6,8
  8084cc:	82013426 	beq	r16,r8,8089a0 <_malloc_r+0x5b4>
  8084d0:	80c00117 	ldw	r3,4(r16)
  8084d4:	00bfff04 	movi	r2,-4
  8084d8:	188e703a 	and	r7,r3,r2
  8084dc:	3c45c83a 	sub	r2,r7,r17
  8084e0:	00c003c4 	movi	r3,15
  8084e4:	18811f16 	blt	r3,r2,808964 <_malloc_r+0x578>
  8084e8:	32000515 	stw	r8,20(r6)
  8084ec:	32000415 	stw	r8,16(r6)
  8084f0:	10007f0e 	bge	r2,zero,8086f0 <_malloc_r+0x304>
  8084f4:	00807fc4 	movi	r2,511
  8084f8:	11c0fd36 	bltu	r2,r7,8088f0 <_malloc_r+0x504>
  8084fc:	3806d0fa 	srli	r3,r7,3
  808500:	01c00044 	movi	r7,1
  808504:	30800117 	ldw	r2,4(r6)
  808508:	19400044 	addi	r5,r3,1
  80850c:	294b883a 	add	r5,r5,r5
  808510:	1807d0ba 	srai	r3,r3,2
  808514:	294b883a 	add	r5,r5,r5
  808518:	294b883a 	add	r5,r5,r5
  80851c:	298b883a 	add	r5,r5,r6
  808520:	38c6983a 	sll	r3,r7,r3
  808524:	29c00017 	ldw	r7,0(r5)
  808528:	2a7ffe04 	addi	r9,r5,-8
  80852c:	1886b03a 	or	r3,r3,r2
  808530:	82400315 	stw	r9,12(r16)
  808534:	81c00215 	stw	r7,8(r16)
  808538:	30c00115 	stw	r3,4(r6)
  80853c:	2c000015 	stw	r16,0(r5)
  808540:	3c000315 	stw	r16,12(r7)
  808544:	2005d0ba 	srai	r2,r4,2
  808548:	01400044 	movi	r5,1
  80854c:	288a983a 	sll	r5,r5,r2
  808550:	19406f36 	bltu	r3,r5,808710 <_malloc_r+0x324>
  808554:	28c4703a 	and	r2,r5,r3
  808558:	10000a1e 	bne	r2,zero,808584 <_malloc_r+0x198>
  80855c:	00bfff04 	movi	r2,-4
  808560:	294b883a 	add	r5,r5,r5
  808564:	2088703a 	and	r4,r4,r2
  808568:	28c4703a 	and	r2,r5,r3
  80856c:	21000104 	addi	r4,r4,4
  808570:	1000041e 	bne	r2,zero,808584 <_malloc_r+0x198>
  808574:	294b883a 	add	r5,r5,r5
  808578:	28c4703a 	and	r2,r5,r3
  80857c:	21000104 	addi	r4,r4,4
  808580:	103ffc26 	beq	r2,zero,808574 <__alt_mem_onchip_mem+0xff788574>
  808584:	02bfff04 	movi	r10,-4
  808588:	024003c4 	movi	r9,15
  80858c:	21800044 	addi	r6,r4,1
  808590:	318d883a 	add	r6,r6,r6
  808594:	318d883a 	add	r6,r6,r6
  808598:	318d883a 	add	r6,r6,r6
  80859c:	998d883a 	add	r6,r19,r6
  8085a0:	333ffe04 	addi	r12,r6,-8
  8085a4:	2017883a 	mov	r11,r4
  8085a8:	31800104 	addi	r6,r6,4
  8085ac:	34000017 	ldw	r16,0(r6)
  8085b0:	31fffd04 	addi	r7,r6,-12
  8085b4:	81c0041e 	bne	r16,r7,8085c8 <_malloc_r+0x1dc>
  8085b8:	0000fb06 	br	8089a8 <_malloc_r+0x5bc>
  8085bc:	1801030e 	bge	r3,zero,8089cc <_malloc_r+0x5e0>
  8085c0:	84000317 	ldw	r16,12(r16)
  8085c4:	81c0f826 	beq	r16,r7,8089a8 <_malloc_r+0x5bc>
  8085c8:	80800117 	ldw	r2,4(r16)
  8085cc:	1284703a 	and	r2,r2,r10
  8085d0:	1447c83a 	sub	r3,r2,r17
  8085d4:	48fff90e 	bge	r9,r3,8085bc <__alt_mem_onchip_mem+0xff7885bc>
  8085d8:	80800317 	ldw	r2,12(r16)
  8085dc:	81000217 	ldw	r4,8(r16)
  8085e0:	89400054 	ori	r5,r17,1
  8085e4:	81400115 	stw	r5,4(r16)
  8085e8:	20800315 	stw	r2,12(r4)
  8085ec:	11000215 	stw	r4,8(r2)
  8085f0:	8463883a 	add	r17,r16,r17
  8085f4:	9c400515 	stw	r17,20(r19)
  8085f8:	9c400415 	stw	r17,16(r19)
  8085fc:	18800054 	ori	r2,r3,1
  808600:	88800115 	stw	r2,4(r17)
  808604:	8a000315 	stw	r8,12(r17)
  808608:	8a000215 	stw	r8,8(r17)
  80860c:	88e3883a 	add	r17,r17,r3
  808610:	88c00015 	stw	r3,0(r17)
  808614:	9009883a 	mov	r4,r18
  808618:	08100480 	call	810048 <__malloc_unlock>
  80861c:	80800204 	addi	r2,r16,8
  808620:	00001b06 	br	808690 <_malloc_r+0x2a4>
  808624:	04400404 	movi	r17,16
  808628:	89402536 	bltu	r17,r5,8086c0 <_malloc_r+0x2d4>
  80862c:	08100240 	call	810024 <__malloc_lock>
  808630:	00800184 	movi	r2,6
  808634:	01000084 	movi	r4,2
  808638:	04c02074 	movhi	r19,129
  80863c:	1085883a 	add	r2,r2,r2
  808640:	9cd18f04 	addi	r19,r19,17980
  808644:	1085883a 	add	r2,r2,r2
  808648:	9885883a 	add	r2,r19,r2
  80864c:	14000117 	ldw	r16,4(r2)
  808650:	10fffe04 	addi	r3,r2,-8
  808654:	80c0d926 	beq	r16,r3,8089bc <_malloc_r+0x5d0>
  808658:	80c00117 	ldw	r3,4(r16)
  80865c:	81000317 	ldw	r4,12(r16)
  808660:	00bfff04 	movi	r2,-4
  808664:	1884703a 	and	r2,r3,r2
  808668:	81400217 	ldw	r5,8(r16)
  80866c:	8085883a 	add	r2,r16,r2
  808670:	10c00117 	ldw	r3,4(r2)
  808674:	29000315 	stw	r4,12(r5)
  808678:	21400215 	stw	r5,8(r4)
  80867c:	18c00054 	ori	r3,r3,1
  808680:	10c00115 	stw	r3,4(r2)
  808684:	9009883a 	mov	r4,r18
  808688:	08100480 	call	810048 <__malloc_unlock>
  80868c:	80800204 	addi	r2,r16,8
  808690:	dfc00a17 	ldw	ra,40(sp)
  808694:	df000917 	ldw	fp,36(sp)
  808698:	ddc00817 	ldw	r23,32(sp)
  80869c:	dd800717 	ldw	r22,28(sp)
  8086a0:	dd400617 	ldw	r21,24(sp)
  8086a4:	dd000517 	ldw	r20,20(sp)
  8086a8:	dcc00417 	ldw	r19,16(sp)
  8086ac:	dc800317 	ldw	r18,12(sp)
  8086b0:	dc400217 	ldw	r17,8(sp)
  8086b4:	dc000117 	ldw	r16,4(sp)
  8086b8:	dec00b04 	addi	sp,sp,44
  8086bc:	f800283a 	ret
  8086c0:	00800304 	movi	r2,12
  8086c4:	90800015 	stw	r2,0(r18)
  8086c8:	0005883a 	mov	r2,zero
  8086cc:	003ff006 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  8086d0:	01002004 	movi	r4,128
  8086d4:	02001004 	movi	r8,64
  8086d8:	01c00fc4 	movi	r7,63
  8086dc:	003f6106 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  8086e0:	4009883a 	mov	r4,r8
  8086e4:	003f7506 	br	8084bc <__alt_mem_onchip_mem+0xff7884bc>
  8086e8:	81000317 	ldw	r4,12(r16)
  8086ec:	003fde06 	br	808668 <__alt_mem_onchip_mem+0xff788668>
  8086f0:	81c5883a 	add	r2,r16,r7
  8086f4:	11400117 	ldw	r5,4(r2)
  8086f8:	9009883a 	mov	r4,r18
  8086fc:	29400054 	ori	r5,r5,1
  808700:	11400115 	stw	r5,4(r2)
  808704:	08100480 	call	810048 <__malloc_unlock>
  808708:	80800204 	addi	r2,r16,8
  80870c:	003fe006 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  808710:	9c000217 	ldw	r16,8(r19)
  808714:	00bfff04 	movi	r2,-4
  808718:	85800117 	ldw	r22,4(r16)
  80871c:	b0ac703a 	and	r22,r22,r2
  808720:	b4400336 	bltu	r22,r17,808730 <_malloc_r+0x344>
  808724:	b445c83a 	sub	r2,r22,r17
  808728:	00c003c4 	movi	r3,15
  80872c:	18805d16 	blt	r3,r2,8088a4 <_malloc_r+0x4b8>
  808730:	05c02074 	movhi	r23,129
  808734:	00802074 	movhi	r2,129
  808738:	109f3204 	addi	r2,r2,31944
  80873c:	bdd78f04 	addi	r23,r23,24124
  808740:	15400017 	ldw	r21,0(r2)
  808744:	b8c00017 	ldw	r3,0(r23)
  808748:	00bfffc4 	movi	r2,-1
  80874c:	858d883a 	add	r6,r16,r22
  808750:	8d6b883a 	add	r21,r17,r21
  808754:	1880ea26 	beq	r3,r2,808b00 <_malloc_r+0x714>
  808758:	ad4403c4 	addi	r21,r21,4111
  80875c:	00bc0004 	movi	r2,-4096
  808760:	a8aa703a 	and	r21,r21,r2
  808764:	a80b883a 	mov	r5,r21
  808768:	9009883a 	mov	r4,r18
  80876c:	d9800015 	stw	r6,0(sp)
  808770:	080a67c0 	call	80a67c <_sbrk_r>
  808774:	1029883a 	mov	r20,r2
  808778:	00bfffc4 	movi	r2,-1
  80877c:	d9800017 	ldw	r6,0(sp)
  808780:	a080e826 	beq	r20,r2,808b24 <_malloc_r+0x738>
  808784:	a180a636 	bltu	r20,r6,808a20 <_malloc_r+0x634>
  808788:	07002074 	movhi	fp,129
  80878c:	e71f3b04 	addi	fp,fp,31980
  808790:	e0800017 	ldw	r2,0(fp)
  808794:	a887883a 	add	r3,r21,r2
  808798:	e0c00015 	stw	r3,0(fp)
  80879c:	3500e626 	beq	r6,r20,808b38 <_malloc_r+0x74c>
  8087a0:	b9000017 	ldw	r4,0(r23)
  8087a4:	00bfffc4 	movi	r2,-1
  8087a8:	2080ee26 	beq	r4,r2,808b64 <_malloc_r+0x778>
  8087ac:	a185c83a 	sub	r2,r20,r6
  8087b0:	10c5883a 	add	r2,r2,r3
  8087b4:	e0800015 	stw	r2,0(fp)
  8087b8:	a0c001cc 	andi	r3,r20,7
  8087bc:	1800bc26 	beq	r3,zero,808ab0 <_malloc_r+0x6c4>
  8087c0:	a0e9c83a 	sub	r20,r20,r3
  8087c4:	00840204 	movi	r2,4104
  8087c8:	a5000204 	addi	r20,r20,8
  8087cc:	10c7c83a 	sub	r3,r2,r3
  8087d0:	a545883a 	add	r2,r20,r21
  8087d4:	1083ffcc 	andi	r2,r2,4095
  8087d8:	18abc83a 	sub	r21,r3,r2
  8087dc:	a80b883a 	mov	r5,r21
  8087e0:	9009883a 	mov	r4,r18
  8087e4:	080a67c0 	call	80a67c <_sbrk_r>
  8087e8:	00ffffc4 	movi	r3,-1
  8087ec:	10c0e126 	beq	r2,r3,808b74 <_malloc_r+0x788>
  8087f0:	1505c83a 	sub	r2,r2,r20
  8087f4:	1545883a 	add	r2,r2,r21
  8087f8:	10800054 	ori	r2,r2,1
  8087fc:	e0c00017 	ldw	r3,0(fp)
  808800:	9d000215 	stw	r20,8(r19)
  808804:	a0800115 	stw	r2,4(r20)
  808808:	a8c7883a 	add	r3,r21,r3
  80880c:	e0c00015 	stw	r3,0(fp)
  808810:	84c00e26 	beq	r16,r19,80884c <_malloc_r+0x460>
  808814:	018003c4 	movi	r6,15
  808818:	3580a72e 	bgeu	r6,r22,808ab8 <_malloc_r+0x6cc>
  80881c:	81400117 	ldw	r5,4(r16)
  808820:	013ffe04 	movi	r4,-8
  808824:	b0bffd04 	addi	r2,r22,-12
  808828:	1104703a 	and	r2,r2,r4
  80882c:	2900004c 	andi	r4,r5,1
  808830:	2088b03a 	or	r4,r4,r2
  808834:	81000115 	stw	r4,4(r16)
  808838:	01400144 	movi	r5,5
  80883c:	8089883a 	add	r4,r16,r2
  808840:	21400115 	stw	r5,4(r4)
  808844:	21400215 	stw	r5,8(r4)
  808848:	3080cd36 	bltu	r6,r2,808b80 <_malloc_r+0x794>
  80884c:	00802074 	movhi	r2,129
  808850:	109f3104 	addi	r2,r2,31940
  808854:	11000017 	ldw	r4,0(r2)
  808858:	20c0012e 	bgeu	r4,r3,808860 <_malloc_r+0x474>
  80885c:	10c00015 	stw	r3,0(r2)
  808860:	00802074 	movhi	r2,129
  808864:	109f3004 	addi	r2,r2,31936
  808868:	11000017 	ldw	r4,0(r2)
  80886c:	9c000217 	ldw	r16,8(r19)
  808870:	20c0012e 	bgeu	r4,r3,808878 <_malloc_r+0x48c>
  808874:	10c00015 	stw	r3,0(r2)
  808878:	80c00117 	ldw	r3,4(r16)
  80887c:	00bfff04 	movi	r2,-4
  808880:	1886703a 	and	r3,r3,r2
  808884:	1c45c83a 	sub	r2,r3,r17
  808888:	1c400236 	bltu	r3,r17,808894 <_malloc_r+0x4a8>
  80888c:	00c003c4 	movi	r3,15
  808890:	18800416 	blt	r3,r2,8088a4 <_malloc_r+0x4b8>
  808894:	9009883a 	mov	r4,r18
  808898:	08100480 	call	810048 <__malloc_unlock>
  80889c:	0005883a 	mov	r2,zero
  8088a0:	003f7b06 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  8088a4:	88c00054 	ori	r3,r17,1
  8088a8:	80c00115 	stw	r3,4(r16)
  8088ac:	8463883a 	add	r17,r16,r17
  8088b0:	10800054 	ori	r2,r2,1
  8088b4:	9c400215 	stw	r17,8(r19)
  8088b8:	88800115 	stw	r2,4(r17)
  8088bc:	9009883a 	mov	r4,r18
  8088c0:	08100480 	call	810048 <__malloc_unlock>
  8088c4:	80800204 	addi	r2,r16,8
  8088c8:	003f7106 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  8088cc:	00c00504 	movi	r3,20
  8088d0:	18804a2e 	bgeu	r3,r2,8089fc <_malloc_r+0x610>
  8088d4:	00c01504 	movi	r3,84
  8088d8:	18806e36 	bltu	r3,r2,808a94 <_malloc_r+0x6a8>
  8088dc:	8804d33a 	srli	r2,r17,12
  8088e0:	12001bc4 	addi	r8,r2,111
  8088e4:	11c01b84 	addi	r7,r2,110
  8088e8:	4209883a 	add	r4,r8,r8
  8088ec:	003edd06 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  8088f0:	3804d27a 	srli	r2,r7,9
  8088f4:	00c00104 	movi	r3,4
  8088f8:	1880442e 	bgeu	r3,r2,808a0c <_malloc_r+0x620>
  8088fc:	00c00504 	movi	r3,20
  808900:	18808136 	bltu	r3,r2,808b08 <_malloc_r+0x71c>
  808904:	11401704 	addi	r5,r2,92
  808908:	10c016c4 	addi	r3,r2,91
  80890c:	294b883a 	add	r5,r5,r5
  808910:	294b883a 	add	r5,r5,r5
  808914:	294b883a 	add	r5,r5,r5
  808918:	994b883a 	add	r5,r19,r5
  80891c:	28800017 	ldw	r2,0(r5)
  808920:	01802074 	movhi	r6,129
  808924:	297ffe04 	addi	r5,r5,-8
  808928:	31918f04 	addi	r6,r6,17980
  80892c:	28806526 	beq	r5,r2,808ac4 <_malloc_r+0x6d8>
  808930:	01bfff04 	movi	r6,-4
  808934:	10c00117 	ldw	r3,4(r2)
  808938:	1986703a 	and	r3,r3,r6
  80893c:	38c0022e 	bgeu	r7,r3,808948 <_malloc_r+0x55c>
  808940:	10800217 	ldw	r2,8(r2)
  808944:	28bffb1e 	bne	r5,r2,808934 <__alt_mem_onchip_mem+0xff788934>
  808948:	11400317 	ldw	r5,12(r2)
  80894c:	98c00117 	ldw	r3,4(r19)
  808950:	81400315 	stw	r5,12(r16)
  808954:	80800215 	stw	r2,8(r16)
  808958:	2c000215 	stw	r16,8(r5)
  80895c:	14000315 	stw	r16,12(r2)
  808960:	003ef806 	br	808544 <__alt_mem_onchip_mem+0xff788544>
  808964:	88c00054 	ori	r3,r17,1
  808968:	80c00115 	stw	r3,4(r16)
  80896c:	8463883a 	add	r17,r16,r17
  808970:	34400515 	stw	r17,20(r6)
  808974:	34400415 	stw	r17,16(r6)
  808978:	10c00054 	ori	r3,r2,1
  80897c:	8a000315 	stw	r8,12(r17)
  808980:	8a000215 	stw	r8,8(r17)
  808984:	88c00115 	stw	r3,4(r17)
  808988:	88a3883a 	add	r17,r17,r2
  80898c:	88800015 	stw	r2,0(r17)
  808990:	9009883a 	mov	r4,r18
  808994:	08100480 	call	810048 <__malloc_unlock>
  808998:	80800204 	addi	r2,r16,8
  80899c:	003f3c06 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  8089a0:	30c00117 	ldw	r3,4(r6)
  8089a4:	003ee706 	br	808544 <__alt_mem_onchip_mem+0xff788544>
  8089a8:	5ac00044 	addi	r11,r11,1
  8089ac:	588000cc 	andi	r2,r11,3
  8089b0:	31800204 	addi	r6,r6,8
  8089b4:	103efd1e 	bne	r2,zero,8085ac <__alt_mem_onchip_mem+0xff7885ac>
  8089b8:	00002406 	br	808a4c <_malloc_r+0x660>
  8089bc:	14000317 	ldw	r16,12(r2)
  8089c0:	143f251e 	bne	r2,r16,808658 <__alt_mem_onchip_mem+0xff788658>
  8089c4:	21000084 	addi	r4,r4,2
  8089c8:	003ebc06 	br	8084bc <__alt_mem_onchip_mem+0xff7884bc>
  8089cc:	8085883a 	add	r2,r16,r2
  8089d0:	10c00117 	ldw	r3,4(r2)
  8089d4:	81000317 	ldw	r4,12(r16)
  8089d8:	81400217 	ldw	r5,8(r16)
  8089dc:	18c00054 	ori	r3,r3,1
  8089e0:	10c00115 	stw	r3,4(r2)
  8089e4:	29000315 	stw	r4,12(r5)
  8089e8:	21400215 	stw	r5,8(r4)
  8089ec:	9009883a 	mov	r4,r18
  8089f0:	08100480 	call	810048 <__malloc_unlock>
  8089f4:	80800204 	addi	r2,r16,8
  8089f8:	003f2506 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  8089fc:	12001704 	addi	r8,r2,92
  808a00:	11c016c4 	addi	r7,r2,91
  808a04:	4209883a 	add	r4,r8,r8
  808a08:	003e9606 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  808a0c:	3804d1ba 	srli	r2,r7,6
  808a10:	11400e44 	addi	r5,r2,57
  808a14:	10c00e04 	addi	r3,r2,56
  808a18:	294b883a 	add	r5,r5,r5
  808a1c:	003fbc06 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808a20:	84ff5926 	beq	r16,r19,808788 <__alt_mem_onchip_mem+0xff788788>
  808a24:	00802074 	movhi	r2,129
  808a28:	10918f04 	addi	r2,r2,17980
  808a2c:	14000217 	ldw	r16,8(r2)
  808a30:	00bfff04 	movi	r2,-4
  808a34:	80c00117 	ldw	r3,4(r16)
  808a38:	1886703a 	and	r3,r3,r2
  808a3c:	003f9106 	br	808884 <__alt_mem_onchip_mem+0xff788884>
  808a40:	60800217 	ldw	r2,8(r12)
  808a44:	213fffc4 	addi	r4,r4,-1
  808a48:	1300651e 	bne	r2,r12,808be0 <_malloc_r+0x7f4>
  808a4c:	208000cc 	andi	r2,r4,3
  808a50:	633ffe04 	addi	r12,r12,-8
  808a54:	103ffa1e 	bne	r2,zero,808a40 <__alt_mem_onchip_mem+0xff788a40>
  808a58:	98800117 	ldw	r2,4(r19)
  808a5c:	0146303a 	nor	r3,zero,r5
  808a60:	1884703a 	and	r2,r3,r2
  808a64:	98800115 	stw	r2,4(r19)
  808a68:	294b883a 	add	r5,r5,r5
  808a6c:	117f2836 	bltu	r2,r5,808710 <__alt_mem_onchip_mem+0xff788710>
  808a70:	283f2726 	beq	r5,zero,808710 <__alt_mem_onchip_mem+0xff788710>
  808a74:	2886703a 	and	r3,r5,r2
  808a78:	5809883a 	mov	r4,r11
  808a7c:	183ec31e 	bne	r3,zero,80858c <__alt_mem_onchip_mem+0xff78858c>
  808a80:	294b883a 	add	r5,r5,r5
  808a84:	2886703a 	and	r3,r5,r2
  808a88:	21000104 	addi	r4,r4,4
  808a8c:	183ffc26 	beq	r3,zero,808a80 <__alt_mem_onchip_mem+0xff788a80>
  808a90:	003ebe06 	br	80858c <__alt_mem_onchip_mem+0xff78858c>
  808a94:	00c05504 	movi	r3,340
  808a98:	18801236 	bltu	r3,r2,808ae4 <_malloc_r+0x6f8>
  808a9c:	8804d3fa 	srli	r2,r17,15
  808aa0:	12001e04 	addi	r8,r2,120
  808aa4:	11c01dc4 	addi	r7,r2,119
  808aa8:	4209883a 	add	r4,r8,r8
  808aac:	003e6d06 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  808ab0:	00c40004 	movi	r3,4096
  808ab4:	003f4606 	br	8087d0 <__alt_mem_onchip_mem+0xff7887d0>
  808ab8:	00800044 	movi	r2,1
  808abc:	a0800115 	stw	r2,4(r20)
  808ac0:	003f7406 	br	808894 <__alt_mem_onchip_mem+0xff788894>
  808ac4:	1805d0ba 	srai	r2,r3,2
  808ac8:	01c00044 	movi	r7,1
  808acc:	30c00117 	ldw	r3,4(r6)
  808ad0:	388e983a 	sll	r7,r7,r2
  808ad4:	2805883a 	mov	r2,r5
  808ad8:	38c6b03a 	or	r3,r7,r3
  808adc:	30c00115 	stw	r3,4(r6)
  808ae0:	003f9b06 	br	808950 <__alt_mem_onchip_mem+0xff788950>
  808ae4:	00c15504 	movi	r3,1364
  808ae8:	18801a36 	bltu	r3,r2,808b54 <_malloc_r+0x768>
  808aec:	8804d4ba 	srli	r2,r17,18
  808af0:	12001f44 	addi	r8,r2,125
  808af4:	11c01f04 	addi	r7,r2,124
  808af8:	4209883a 	add	r4,r8,r8
  808afc:	003e5906 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  808b00:	ad400404 	addi	r21,r21,16
  808b04:	003f1706 	br	808764 <__alt_mem_onchip_mem+0xff788764>
  808b08:	00c01504 	movi	r3,84
  808b0c:	18802336 	bltu	r3,r2,808b9c <_malloc_r+0x7b0>
  808b10:	3804d33a 	srli	r2,r7,12
  808b14:	11401bc4 	addi	r5,r2,111
  808b18:	10c01b84 	addi	r3,r2,110
  808b1c:	294b883a 	add	r5,r5,r5
  808b20:	003f7b06 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808b24:	9c000217 	ldw	r16,8(r19)
  808b28:	00bfff04 	movi	r2,-4
  808b2c:	80c00117 	ldw	r3,4(r16)
  808b30:	1886703a 	and	r3,r3,r2
  808b34:	003f5306 	br	808884 <__alt_mem_onchip_mem+0xff788884>
  808b38:	3083ffcc 	andi	r2,r6,4095
  808b3c:	103f181e 	bne	r2,zero,8087a0 <__alt_mem_onchip_mem+0xff7887a0>
  808b40:	99000217 	ldw	r4,8(r19)
  808b44:	b545883a 	add	r2,r22,r21
  808b48:	10800054 	ori	r2,r2,1
  808b4c:	20800115 	stw	r2,4(r4)
  808b50:	003f3e06 	br	80884c <__alt_mem_onchip_mem+0xff78884c>
  808b54:	01003f84 	movi	r4,254
  808b58:	02001fc4 	movi	r8,127
  808b5c:	01c01f84 	movi	r7,126
  808b60:	003e4006 	br	808464 <__alt_mem_onchip_mem+0xff788464>
  808b64:	00802074 	movhi	r2,129
  808b68:	10978f04 	addi	r2,r2,24124
  808b6c:	15000015 	stw	r20,0(r2)
  808b70:	003f1106 	br	8087b8 <__alt_mem_onchip_mem+0xff7887b8>
  808b74:	00800044 	movi	r2,1
  808b78:	002b883a 	mov	r21,zero
  808b7c:	003f1f06 	br	8087fc <__alt_mem_onchip_mem+0xff7887fc>
  808b80:	81400204 	addi	r5,r16,8
  808b84:	9009883a 	mov	r4,r18
  808b88:	08078000 	call	807800 <_free_r>
  808b8c:	00802074 	movhi	r2,129
  808b90:	109f3b04 	addi	r2,r2,31980
  808b94:	10c00017 	ldw	r3,0(r2)
  808b98:	003f2c06 	br	80884c <__alt_mem_onchip_mem+0xff78884c>
  808b9c:	00c05504 	movi	r3,340
  808ba0:	18800536 	bltu	r3,r2,808bb8 <_malloc_r+0x7cc>
  808ba4:	3804d3fa 	srli	r2,r7,15
  808ba8:	11401e04 	addi	r5,r2,120
  808bac:	10c01dc4 	addi	r3,r2,119
  808bb0:	294b883a 	add	r5,r5,r5
  808bb4:	003f5606 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808bb8:	00c15504 	movi	r3,1364
  808bbc:	18800536 	bltu	r3,r2,808bd4 <_malloc_r+0x7e8>
  808bc0:	3804d4ba 	srli	r2,r7,18
  808bc4:	11401f44 	addi	r5,r2,125
  808bc8:	10c01f04 	addi	r3,r2,124
  808bcc:	294b883a 	add	r5,r5,r5
  808bd0:	003f4f06 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808bd4:	01403f84 	movi	r5,254
  808bd8:	00c01f84 	movi	r3,126
  808bdc:	003f4c06 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808be0:	98800117 	ldw	r2,4(r19)
  808be4:	003fa006 	br	808a68 <__alt_mem_onchip_mem+0xff788a68>
  808be8:	8808d0fa 	srli	r4,r17,3
  808bec:	20800044 	addi	r2,r4,1
  808bf0:	1085883a 	add	r2,r2,r2
  808bf4:	003e9006 	br	808638 <__alt_mem_onchip_mem+0xff788638>

00808bf8 <memchr>:
  808bf8:	208000cc 	andi	r2,r4,3
  808bfc:	280f883a 	mov	r7,r5
  808c00:	10003426 	beq	r2,zero,808cd4 <memchr+0xdc>
  808c04:	30bfffc4 	addi	r2,r6,-1
  808c08:	30001a26 	beq	r6,zero,808c74 <memchr+0x7c>
  808c0c:	20c00003 	ldbu	r3,0(r4)
  808c10:	29803fcc 	andi	r6,r5,255
  808c14:	30c0051e 	bne	r6,r3,808c2c <memchr+0x34>
  808c18:	00001806 	br	808c7c <memchr+0x84>
  808c1c:	10001526 	beq	r2,zero,808c74 <memchr+0x7c>
  808c20:	20c00003 	ldbu	r3,0(r4)
  808c24:	10bfffc4 	addi	r2,r2,-1
  808c28:	30c01426 	beq	r6,r3,808c7c <memchr+0x84>
  808c2c:	21000044 	addi	r4,r4,1
  808c30:	20c000cc 	andi	r3,r4,3
  808c34:	183ff91e 	bne	r3,zero,808c1c <__alt_mem_onchip_mem+0xff788c1c>
  808c38:	020000c4 	movi	r8,3
  808c3c:	40801136 	bltu	r8,r2,808c84 <memchr+0x8c>
  808c40:	10000c26 	beq	r2,zero,808c74 <memchr+0x7c>
  808c44:	20c00003 	ldbu	r3,0(r4)
  808c48:	29403fcc 	andi	r5,r5,255
  808c4c:	28c00b26 	beq	r5,r3,808c7c <memchr+0x84>
  808c50:	20c00044 	addi	r3,r4,1
  808c54:	39803fcc 	andi	r6,r7,255
  808c58:	2089883a 	add	r4,r4,r2
  808c5c:	00000306 	br	808c6c <memchr+0x74>
  808c60:	18c00044 	addi	r3,r3,1
  808c64:	197fffc3 	ldbu	r5,-1(r3)
  808c68:	31400526 	beq	r6,r5,808c80 <memchr+0x88>
  808c6c:	1805883a 	mov	r2,r3
  808c70:	20fffb1e 	bne	r4,r3,808c60 <__alt_mem_onchip_mem+0xff788c60>
  808c74:	0005883a 	mov	r2,zero
  808c78:	f800283a 	ret
  808c7c:	2005883a 	mov	r2,r4
  808c80:	f800283a 	ret
  808c84:	28c03fcc 	andi	r3,r5,255
  808c88:	1812923a 	slli	r9,r3,8
  808c8c:	02ffbff4 	movhi	r11,65279
  808c90:	02a02074 	movhi	r10,32897
  808c94:	48d2b03a 	or	r9,r9,r3
  808c98:	4806943a 	slli	r3,r9,16
  808c9c:	5affbfc4 	addi	r11,r11,-257
  808ca0:	52a02004 	addi	r10,r10,-32640
  808ca4:	48d2b03a 	or	r9,r9,r3
  808ca8:	20c00017 	ldw	r3,0(r4)
  808cac:	48c6f03a 	xor	r3,r9,r3
  808cb0:	1acd883a 	add	r6,r3,r11
  808cb4:	00c6303a 	nor	r3,zero,r3
  808cb8:	30c6703a 	and	r3,r6,r3
  808cbc:	1a86703a 	and	r3,r3,r10
  808cc0:	183fe01e 	bne	r3,zero,808c44 <__alt_mem_onchip_mem+0xff788c44>
  808cc4:	10bfff04 	addi	r2,r2,-4
  808cc8:	21000104 	addi	r4,r4,4
  808ccc:	40bff636 	bltu	r8,r2,808ca8 <__alt_mem_onchip_mem+0xff788ca8>
  808cd0:	003fdb06 	br	808c40 <__alt_mem_onchip_mem+0xff788c40>
  808cd4:	3005883a 	mov	r2,r6
  808cd8:	003fd706 	br	808c38 <__alt_mem_onchip_mem+0xff788c38>

00808cdc <memcpy>:
  808cdc:	defffd04 	addi	sp,sp,-12
  808ce0:	dfc00215 	stw	ra,8(sp)
  808ce4:	dc400115 	stw	r17,4(sp)
  808ce8:	dc000015 	stw	r16,0(sp)
  808cec:	00c003c4 	movi	r3,15
  808cf0:	2005883a 	mov	r2,r4
  808cf4:	1980452e 	bgeu	r3,r6,808e0c <memcpy+0x130>
  808cf8:	2906b03a 	or	r3,r5,r4
  808cfc:	18c000cc 	andi	r3,r3,3
  808d00:	1800441e 	bne	r3,zero,808e14 <memcpy+0x138>
  808d04:	347ffc04 	addi	r17,r6,-16
  808d08:	8822d13a 	srli	r17,r17,4
  808d0c:	28c00104 	addi	r3,r5,4
  808d10:	23400104 	addi	r13,r4,4
  808d14:	8820913a 	slli	r16,r17,4
  808d18:	2b000204 	addi	r12,r5,8
  808d1c:	22c00204 	addi	r11,r4,8
  808d20:	84000504 	addi	r16,r16,20
  808d24:	2a800304 	addi	r10,r5,12
  808d28:	22400304 	addi	r9,r4,12
  808d2c:	2c21883a 	add	r16,r5,r16
  808d30:	2811883a 	mov	r8,r5
  808d34:	200f883a 	mov	r7,r4
  808d38:	41000017 	ldw	r4,0(r8)
  808d3c:	1fc00017 	ldw	ra,0(r3)
  808d40:	63c00017 	ldw	r15,0(r12)
  808d44:	39000015 	stw	r4,0(r7)
  808d48:	53800017 	ldw	r14,0(r10)
  808d4c:	6fc00015 	stw	ra,0(r13)
  808d50:	5bc00015 	stw	r15,0(r11)
  808d54:	4b800015 	stw	r14,0(r9)
  808d58:	18c00404 	addi	r3,r3,16
  808d5c:	39c00404 	addi	r7,r7,16
  808d60:	42000404 	addi	r8,r8,16
  808d64:	6b400404 	addi	r13,r13,16
  808d68:	63000404 	addi	r12,r12,16
  808d6c:	5ac00404 	addi	r11,r11,16
  808d70:	52800404 	addi	r10,r10,16
  808d74:	4a400404 	addi	r9,r9,16
  808d78:	1c3fef1e 	bne	r3,r16,808d38 <__alt_mem_onchip_mem+0xff788d38>
  808d7c:	89c00044 	addi	r7,r17,1
  808d80:	380e913a 	slli	r7,r7,4
  808d84:	310003cc 	andi	r4,r6,15
  808d88:	02c000c4 	movi	r11,3
  808d8c:	11c7883a 	add	r3,r2,r7
  808d90:	29cb883a 	add	r5,r5,r7
  808d94:	5900212e 	bgeu	r11,r4,808e1c <memcpy+0x140>
  808d98:	1813883a 	mov	r9,r3
  808d9c:	2811883a 	mov	r8,r5
  808da0:	200f883a 	mov	r7,r4
  808da4:	42800017 	ldw	r10,0(r8)
  808da8:	4a400104 	addi	r9,r9,4
  808dac:	39ffff04 	addi	r7,r7,-4
  808db0:	4abfff15 	stw	r10,-4(r9)
  808db4:	42000104 	addi	r8,r8,4
  808db8:	59fffa36 	bltu	r11,r7,808da4 <__alt_mem_onchip_mem+0xff788da4>
  808dbc:	213fff04 	addi	r4,r4,-4
  808dc0:	2008d0ba 	srli	r4,r4,2
  808dc4:	318000cc 	andi	r6,r6,3
  808dc8:	21000044 	addi	r4,r4,1
  808dcc:	2109883a 	add	r4,r4,r4
  808dd0:	2109883a 	add	r4,r4,r4
  808dd4:	1907883a 	add	r3,r3,r4
  808dd8:	290b883a 	add	r5,r5,r4
  808ddc:	30000626 	beq	r6,zero,808df8 <memcpy+0x11c>
  808de0:	198d883a 	add	r6,r3,r6
  808de4:	29c00003 	ldbu	r7,0(r5)
  808de8:	18c00044 	addi	r3,r3,1
  808dec:	29400044 	addi	r5,r5,1
  808df0:	19ffffc5 	stb	r7,-1(r3)
  808df4:	19bffb1e 	bne	r3,r6,808de4 <__alt_mem_onchip_mem+0xff788de4>
  808df8:	dfc00217 	ldw	ra,8(sp)
  808dfc:	dc400117 	ldw	r17,4(sp)
  808e00:	dc000017 	ldw	r16,0(sp)
  808e04:	dec00304 	addi	sp,sp,12
  808e08:	f800283a 	ret
  808e0c:	2007883a 	mov	r3,r4
  808e10:	003ff206 	br	808ddc <__alt_mem_onchip_mem+0xff788ddc>
  808e14:	2007883a 	mov	r3,r4
  808e18:	003ff106 	br	808de0 <__alt_mem_onchip_mem+0xff788de0>
  808e1c:	200d883a 	mov	r6,r4
  808e20:	003fee06 	br	808ddc <__alt_mem_onchip_mem+0xff788ddc>

00808e24 <memmove>:
  808e24:	2005883a 	mov	r2,r4
  808e28:	29000b2e 	bgeu	r5,r4,808e58 <memmove+0x34>
  808e2c:	298f883a 	add	r7,r5,r6
  808e30:	21c0092e 	bgeu	r4,r7,808e58 <memmove+0x34>
  808e34:	2187883a 	add	r3,r4,r6
  808e38:	198bc83a 	sub	r5,r3,r6
  808e3c:	30004826 	beq	r6,zero,808f60 <memmove+0x13c>
  808e40:	39ffffc4 	addi	r7,r7,-1
  808e44:	39000003 	ldbu	r4,0(r7)
  808e48:	18ffffc4 	addi	r3,r3,-1
  808e4c:	19000005 	stb	r4,0(r3)
  808e50:	28fffb1e 	bne	r5,r3,808e40 <__alt_mem_onchip_mem+0xff788e40>
  808e54:	f800283a 	ret
  808e58:	00c003c4 	movi	r3,15
  808e5c:	1980412e 	bgeu	r3,r6,808f64 <memmove+0x140>
  808e60:	2886b03a 	or	r3,r5,r2
  808e64:	18c000cc 	andi	r3,r3,3
  808e68:	1800401e 	bne	r3,zero,808f6c <memmove+0x148>
  808e6c:	33fffc04 	addi	r15,r6,-16
  808e70:	781ed13a 	srli	r15,r15,4
  808e74:	28c00104 	addi	r3,r5,4
  808e78:	13400104 	addi	r13,r2,4
  808e7c:	781c913a 	slli	r14,r15,4
  808e80:	2b000204 	addi	r12,r5,8
  808e84:	12c00204 	addi	r11,r2,8
  808e88:	73800504 	addi	r14,r14,20
  808e8c:	2a800304 	addi	r10,r5,12
  808e90:	12400304 	addi	r9,r2,12
  808e94:	2b9d883a 	add	r14,r5,r14
  808e98:	2811883a 	mov	r8,r5
  808e9c:	100f883a 	mov	r7,r2
  808ea0:	41000017 	ldw	r4,0(r8)
  808ea4:	39c00404 	addi	r7,r7,16
  808ea8:	18c00404 	addi	r3,r3,16
  808eac:	393ffc15 	stw	r4,-16(r7)
  808eb0:	193ffc17 	ldw	r4,-16(r3)
  808eb4:	6b400404 	addi	r13,r13,16
  808eb8:	5ac00404 	addi	r11,r11,16
  808ebc:	693ffc15 	stw	r4,-16(r13)
  808ec0:	61000017 	ldw	r4,0(r12)
  808ec4:	4a400404 	addi	r9,r9,16
  808ec8:	42000404 	addi	r8,r8,16
  808ecc:	593ffc15 	stw	r4,-16(r11)
  808ed0:	51000017 	ldw	r4,0(r10)
  808ed4:	63000404 	addi	r12,r12,16
  808ed8:	52800404 	addi	r10,r10,16
  808edc:	493ffc15 	stw	r4,-16(r9)
  808ee0:	1bbfef1e 	bne	r3,r14,808ea0 <__alt_mem_onchip_mem+0xff788ea0>
  808ee4:	79000044 	addi	r4,r15,1
  808ee8:	2008913a 	slli	r4,r4,4
  808eec:	328003cc 	andi	r10,r6,15
  808ef0:	02c000c4 	movi	r11,3
  808ef4:	1107883a 	add	r3,r2,r4
  808ef8:	290b883a 	add	r5,r5,r4
  808efc:	5a801e2e 	bgeu	r11,r10,808f78 <memmove+0x154>
  808f00:	1813883a 	mov	r9,r3
  808f04:	2811883a 	mov	r8,r5
  808f08:	500f883a 	mov	r7,r10
  808f0c:	41000017 	ldw	r4,0(r8)
  808f10:	4a400104 	addi	r9,r9,4
  808f14:	39ffff04 	addi	r7,r7,-4
  808f18:	493fff15 	stw	r4,-4(r9)
  808f1c:	42000104 	addi	r8,r8,4
  808f20:	59fffa36 	bltu	r11,r7,808f0c <__alt_mem_onchip_mem+0xff788f0c>
  808f24:	513fff04 	addi	r4,r10,-4
  808f28:	2008d0ba 	srli	r4,r4,2
  808f2c:	318000cc 	andi	r6,r6,3
  808f30:	21000044 	addi	r4,r4,1
  808f34:	2109883a 	add	r4,r4,r4
  808f38:	2109883a 	add	r4,r4,r4
  808f3c:	1907883a 	add	r3,r3,r4
  808f40:	290b883a 	add	r5,r5,r4
  808f44:	30000b26 	beq	r6,zero,808f74 <memmove+0x150>
  808f48:	198d883a 	add	r6,r3,r6
  808f4c:	29c00003 	ldbu	r7,0(r5)
  808f50:	18c00044 	addi	r3,r3,1
  808f54:	29400044 	addi	r5,r5,1
  808f58:	19ffffc5 	stb	r7,-1(r3)
  808f5c:	19bffb1e 	bne	r3,r6,808f4c <__alt_mem_onchip_mem+0xff788f4c>
  808f60:	f800283a 	ret
  808f64:	1007883a 	mov	r3,r2
  808f68:	003ff606 	br	808f44 <__alt_mem_onchip_mem+0xff788f44>
  808f6c:	1007883a 	mov	r3,r2
  808f70:	003ff506 	br	808f48 <__alt_mem_onchip_mem+0xff788f48>
  808f74:	f800283a 	ret
  808f78:	500d883a 	mov	r6,r10
  808f7c:	003ff106 	br	808f44 <__alt_mem_onchip_mem+0xff788f44>

00808f80 <memset>:
  808f80:	20c000cc 	andi	r3,r4,3
  808f84:	2005883a 	mov	r2,r4
  808f88:	18004426 	beq	r3,zero,80909c <memset+0x11c>
  808f8c:	31ffffc4 	addi	r7,r6,-1
  808f90:	30004026 	beq	r6,zero,809094 <memset+0x114>
  808f94:	2813883a 	mov	r9,r5
  808f98:	200d883a 	mov	r6,r4
  808f9c:	2007883a 	mov	r3,r4
  808fa0:	00000406 	br	808fb4 <memset+0x34>
  808fa4:	3a3fffc4 	addi	r8,r7,-1
  808fa8:	31800044 	addi	r6,r6,1
  808fac:	38003926 	beq	r7,zero,809094 <memset+0x114>
  808fb0:	400f883a 	mov	r7,r8
  808fb4:	18c00044 	addi	r3,r3,1
  808fb8:	32400005 	stb	r9,0(r6)
  808fbc:	1a0000cc 	andi	r8,r3,3
  808fc0:	403ff81e 	bne	r8,zero,808fa4 <__alt_mem_onchip_mem+0xff788fa4>
  808fc4:	010000c4 	movi	r4,3
  808fc8:	21c02d2e 	bgeu	r4,r7,809080 <memset+0x100>
  808fcc:	29003fcc 	andi	r4,r5,255
  808fd0:	200c923a 	slli	r6,r4,8
  808fd4:	3108b03a 	or	r4,r6,r4
  808fd8:	200c943a 	slli	r6,r4,16
  808fdc:	218cb03a 	or	r6,r4,r6
  808fe0:	010003c4 	movi	r4,15
  808fe4:	21c0182e 	bgeu	r4,r7,809048 <memset+0xc8>
  808fe8:	3b3ffc04 	addi	r12,r7,-16
  808fec:	6018d13a 	srli	r12,r12,4
  808ff0:	1a000104 	addi	r8,r3,4
  808ff4:	1ac00204 	addi	r11,r3,8
  808ff8:	6008913a 	slli	r4,r12,4
  808ffc:	1a800304 	addi	r10,r3,12
  809000:	1813883a 	mov	r9,r3
  809004:	21000504 	addi	r4,r4,20
  809008:	1909883a 	add	r4,r3,r4
  80900c:	49800015 	stw	r6,0(r9)
  809010:	41800015 	stw	r6,0(r8)
  809014:	59800015 	stw	r6,0(r11)
  809018:	51800015 	stw	r6,0(r10)
  80901c:	42000404 	addi	r8,r8,16
  809020:	4a400404 	addi	r9,r9,16
  809024:	5ac00404 	addi	r11,r11,16
  809028:	52800404 	addi	r10,r10,16
  80902c:	413ff71e 	bne	r8,r4,80900c <__alt_mem_onchip_mem+0xff78900c>
  809030:	63000044 	addi	r12,r12,1
  809034:	6018913a 	slli	r12,r12,4
  809038:	39c003cc 	andi	r7,r7,15
  80903c:	010000c4 	movi	r4,3
  809040:	1b07883a 	add	r3,r3,r12
  809044:	21c00e2e 	bgeu	r4,r7,809080 <memset+0x100>
  809048:	1813883a 	mov	r9,r3
  80904c:	3811883a 	mov	r8,r7
  809050:	010000c4 	movi	r4,3
  809054:	49800015 	stw	r6,0(r9)
  809058:	423fff04 	addi	r8,r8,-4
  80905c:	4a400104 	addi	r9,r9,4
  809060:	223ffc36 	bltu	r4,r8,809054 <__alt_mem_onchip_mem+0xff789054>
  809064:	393fff04 	addi	r4,r7,-4
  809068:	2008d0ba 	srli	r4,r4,2
  80906c:	39c000cc 	andi	r7,r7,3
  809070:	21000044 	addi	r4,r4,1
  809074:	2109883a 	add	r4,r4,r4
  809078:	2109883a 	add	r4,r4,r4
  80907c:	1907883a 	add	r3,r3,r4
  809080:	38000526 	beq	r7,zero,809098 <memset+0x118>
  809084:	19cf883a 	add	r7,r3,r7
  809088:	19400005 	stb	r5,0(r3)
  80908c:	18c00044 	addi	r3,r3,1
  809090:	38fffd1e 	bne	r7,r3,809088 <__alt_mem_onchip_mem+0xff789088>
  809094:	f800283a 	ret
  809098:	f800283a 	ret
  80909c:	2007883a 	mov	r3,r4
  8090a0:	300f883a 	mov	r7,r6
  8090a4:	003fc706 	br	808fc4 <__alt_mem_onchip_mem+0xff788fc4>

008090a8 <_Balloc>:
  8090a8:	20801317 	ldw	r2,76(r4)
  8090ac:	defffc04 	addi	sp,sp,-16
  8090b0:	dc400115 	stw	r17,4(sp)
  8090b4:	dc000015 	stw	r16,0(sp)
  8090b8:	dfc00315 	stw	ra,12(sp)
  8090bc:	dc800215 	stw	r18,8(sp)
  8090c0:	2023883a 	mov	r17,r4
  8090c4:	2821883a 	mov	r16,r5
  8090c8:	10000f26 	beq	r2,zero,809108 <_Balloc+0x60>
  8090cc:	8407883a 	add	r3,r16,r16
  8090d0:	18c7883a 	add	r3,r3,r3
  8090d4:	10c7883a 	add	r3,r2,r3
  8090d8:	18800017 	ldw	r2,0(r3)
  8090dc:	10001126 	beq	r2,zero,809124 <_Balloc+0x7c>
  8090e0:	11000017 	ldw	r4,0(r2)
  8090e4:	19000015 	stw	r4,0(r3)
  8090e8:	10000415 	stw	zero,16(r2)
  8090ec:	10000315 	stw	zero,12(r2)
  8090f0:	dfc00317 	ldw	ra,12(sp)
  8090f4:	dc800217 	ldw	r18,8(sp)
  8090f8:	dc400117 	ldw	r17,4(sp)
  8090fc:	dc000017 	ldw	r16,0(sp)
  809100:	dec00404 	addi	sp,sp,16
  809104:	f800283a 	ret
  809108:	01800844 	movi	r6,33
  80910c:	01400104 	movi	r5,4
  809110:	080bfe40 	call	80bfe4 <_calloc_r>
  809114:	88801315 	stw	r2,76(r17)
  809118:	103fec1e 	bne	r2,zero,8090cc <__alt_mem_onchip_mem+0xff7890cc>
  80911c:	0005883a 	mov	r2,zero
  809120:	003ff306 	br	8090f0 <__alt_mem_onchip_mem+0xff7890f0>
  809124:	01400044 	movi	r5,1
  809128:	2c24983a 	sll	r18,r5,r16
  80912c:	8809883a 	mov	r4,r17
  809130:	91800144 	addi	r6,r18,5
  809134:	318d883a 	add	r6,r6,r6
  809138:	318d883a 	add	r6,r6,r6
  80913c:	080bfe40 	call	80bfe4 <_calloc_r>
  809140:	103ff626 	beq	r2,zero,80911c <__alt_mem_onchip_mem+0xff78911c>
  809144:	14000115 	stw	r16,4(r2)
  809148:	14800215 	stw	r18,8(r2)
  80914c:	003fe606 	br	8090e8 <__alt_mem_onchip_mem+0xff7890e8>

00809150 <_Bfree>:
  809150:	28000826 	beq	r5,zero,809174 <_Bfree+0x24>
  809154:	28c00117 	ldw	r3,4(r5)
  809158:	20801317 	ldw	r2,76(r4)
  80915c:	18c7883a 	add	r3,r3,r3
  809160:	18c7883a 	add	r3,r3,r3
  809164:	10c5883a 	add	r2,r2,r3
  809168:	10c00017 	ldw	r3,0(r2)
  80916c:	28c00015 	stw	r3,0(r5)
  809170:	11400015 	stw	r5,0(r2)
  809174:	f800283a 	ret

00809178 <__multadd>:
  809178:	defffa04 	addi	sp,sp,-24
  80917c:	dc800315 	stw	r18,12(sp)
  809180:	dc400215 	stw	r17,8(sp)
  809184:	dc000115 	stw	r16,4(sp)
  809188:	2823883a 	mov	r17,r5
  80918c:	2c000417 	ldw	r16,16(r5)
  809190:	dfc00515 	stw	ra,20(sp)
  809194:	dcc00415 	stw	r19,16(sp)
  809198:	2025883a 	mov	r18,r4
  80919c:	29400504 	addi	r5,r5,20
  8091a0:	0011883a 	mov	r8,zero
  8091a4:	28c00017 	ldw	r3,0(r5)
  8091a8:	29400104 	addi	r5,r5,4
  8091ac:	42000044 	addi	r8,r8,1
  8091b0:	18bfffcc 	andi	r2,r3,65535
  8091b4:	1185383a 	mul	r2,r2,r6
  8091b8:	1806d43a 	srli	r3,r3,16
  8091bc:	11cf883a 	add	r7,r2,r7
  8091c0:	3808d43a 	srli	r4,r7,16
  8091c4:	1987383a 	mul	r3,r3,r6
  8091c8:	38bfffcc 	andi	r2,r7,65535
  8091cc:	1907883a 	add	r3,r3,r4
  8091d0:	1808943a 	slli	r4,r3,16
  8091d4:	180ed43a 	srli	r7,r3,16
  8091d8:	2085883a 	add	r2,r4,r2
  8091dc:	28bfff15 	stw	r2,-4(r5)
  8091e0:	443ff016 	blt	r8,r16,8091a4 <__alt_mem_onchip_mem+0xff7891a4>
  8091e4:	38000926 	beq	r7,zero,80920c <__multadd+0x94>
  8091e8:	88800217 	ldw	r2,8(r17)
  8091ec:	80800f0e 	bge	r16,r2,80922c <__multadd+0xb4>
  8091f0:	80800144 	addi	r2,r16,5
  8091f4:	1085883a 	add	r2,r2,r2
  8091f8:	1085883a 	add	r2,r2,r2
  8091fc:	8885883a 	add	r2,r17,r2
  809200:	11c00015 	stw	r7,0(r2)
  809204:	84000044 	addi	r16,r16,1
  809208:	8c000415 	stw	r16,16(r17)
  80920c:	8805883a 	mov	r2,r17
  809210:	dfc00517 	ldw	ra,20(sp)
  809214:	dcc00417 	ldw	r19,16(sp)
  809218:	dc800317 	ldw	r18,12(sp)
  80921c:	dc400217 	ldw	r17,8(sp)
  809220:	dc000117 	ldw	r16,4(sp)
  809224:	dec00604 	addi	sp,sp,24
  809228:	f800283a 	ret
  80922c:	89400117 	ldw	r5,4(r17)
  809230:	9009883a 	mov	r4,r18
  809234:	d9c00015 	stw	r7,0(sp)
  809238:	29400044 	addi	r5,r5,1
  80923c:	08090a80 	call	8090a8 <_Balloc>
  809240:	89800417 	ldw	r6,16(r17)
  809244:	89400304 	addi	r5,r17,12
  809248:	11000304 	addi	r4,r2,12
  80924c:	31800084 	addi	r6,r6,2
  809250:	318d883a 	add	r6,r6,r6
  809254:	318d883a 	add	r6,r6,r6
  809258:	1027883a 	mov	r19,r2
  80925c:	0808cdc0 	call	808cdc <memcpy>
  809260:	d9c00017 	ldw	r7,0(sp)
  809264:	88000a26 	beq	r17,zero,809290 <__multadd+0x118>
  809268:	88c00117 	ldw	r3,4(r17)
  80926c:	90801317 	ldw	r2,76(r18)
  809270:	18c7883a 	add	r3,r3,r3
  809274:	18c7883a 	add	r3,r3,r3
  809278:	10c5883a 	add	r2,r2,r3
  80927c:	10c00017 	ldw	r3,0(r2)
  809280:	88c00015 	stw	r3,0(r17)
  809284:	14400015 	stw	r17,0(r2)
  809288:	9823883a 	mov	r17,r19
  80928c:	003fd806 	br	8091f0 <__alt_mem_onchip_mem+0xff7891f0>
  809290:	9823883a 	mov	r17,r19
  809294:	003fd606 	br	8091f0 <__alt_mem_onchip_mem+0xff7891f0>

00809298 <__s2b>:
  809298:	defff904 	addi	sp,sp,-28
  80929c:	dc400115 	stw	r17,4(sp)
  8092a0:	dc000015 	stw	r16,0(sp)
  8092a4:	2023883a 	mov	r17,r4
  8092a8:	2821883a 	mov	r16,r5
  8092ac:	39000204 	addi	r4,r7,8
  8092b0:	01400244 	movi	r5,9
  8092b4:	dcc00315 	stw	r19,12(sp)
  8092b8:	dc800215 	stw	r18,8(sp)
  8092bc:	dfc00615 	stw	ra,24(sp)
  8092c0:	dd400515 	stw	r21,20(sp)
  8092c4:	dd000415 	stw	r20,16(sp)
  8092c8:	3825883a 	mov	r18,r7
  8092cc:	3027883a 	mov	r19,r6
  8092d0:	080305c0 	call	80305c <__divsi3>
  8092d4:	00c00044 	movi	r3,1
  8092d8:	000b883a 	mov	r5,zero
  8092dc:	1880030e 	bge	r3,r2,8092ec <__s2b+0x54>
  8092e0:	18c7883a 	add	r3,r3,r3
  8092e4:	29400044 	addi	r5,r5,1
  8092e8:	18bffd16 	blt	r3,r2,8092e0 <__alt_mem_onchip_mem+0xff7892e0>
  8092ec:	8809883a 	mov	r4,r17
  8092f0:	08090a80 	call	8090a8 <_Balloc>
  8092f4:	d8c00717 	ldw	r3,28(sp)
  8092f8:	10c00515 	stw	r3,20(r2)
  8092fc:	00c00044 	movi	r3,1
  809300:	10c00415 	stw	r3,16(r2)
  809304:	00c00244 	movi	r3,9
  809308:	1cc0210e 	bge	r3,r19,809390 <__s2b+0xf8>
  80930c:	80eb883a 	add	r21,r16,r3
  809310:	a829883a 	mov	r20,r21
  809314:	84e1883a 	add	r16,r16,r19
  809318:	a1c00007 	ldb	r7,0(r20)
  80931c:	01800284 	movi	r6,10
  809320:	a5000044 	addi	r20,r20,1
  809324:	100b883a 	mov	r5,r2
  809328:	39fff404 	addi	r7,r7,-48
  80932c:	8809883a 	mov	r4,r17
  809330:	08091780 	call	809178 <__multadd>
  809334:	a43ff81e 	bne	r20,r16,809318 <__alt_mem_onchip_mem+0xff789318>
  809338:	ace1883a 	add	r16,r21,r19
  80933c:	843ffe04 	addi	r16,r16,-8
  809340:	9c800a0e 	bge	r19,r18,80936c <__s2b+0xd4>
  809344:	94e5c83a 	sub	r18,r18,r19
  809348:	84a5883a 	add	r18,r16,r18
  80934c:	81c00007 	ldb	r7,0(r16)
  809350:	01800284 	movi	r6,10
  809354:	84000044 	addi	r16,r16,1
  809358:	100b883a 	mov	r5,r2
  80935c:	39fff404 	addi	r7,r7,-48
  809360:	8809883a 	mov	r4,r17
  809364:	08091780 	call	809178 <__multadd>
  809368:	84bff81e 	bne	r16,r18,80934c <__alt_mem_onchip_mem+0xff78934c>
  80936c:	dfc00617 	ldw	ra,24(sp)
  809370:	dd400517 	ldw	r21,20(sp)
  809374:	dd000417 	ldw	r20,16(sp)
  809378:	dcc00317 	ldw	r19,12(sp)
  80937c:	dc800217 	ldw	r18,8(sp)
  809380:	dc400117 	ldw	r17,4(sp)
  809384:	dc000017 	ldw	r16,0(sp)
  809388:	dec00704 	addi	sp,sp,28
  80938c:	f800283a 	ret
  809390:	84000284 	addi	r16,r16,10
  809394:	1827883a 	mov	r19,r3
  809398:	003fe906 	br	809340 <__alt_mem_onchip_mem+0xff789340>

0080939c <__hi0bits>:
  80939c:	20bfffec 	andhi	r2,r4,65535
  8093a0:	1000141e 	bne	r2,zero,8093f4 <__hi0bits+0x58>
  8093a4:	2008943a 	slli	r4,r4,16
  8093a8:	00800404 	movi	r2,16
  8093ac:	20ffc02c 	andhi	r3,r4,65280
  8093b0:	1800021e 	bne	r3,zero,8093bc <__hi0bits+0x20>
  8093b4:	2008923a 	slli	r4,r4,8
  8093b8:	10800204 	addi	r2,r2,8
  8093bc:	20fc002c 	andhi	r3,r4,61440
  8093c0:	1800021e 	bne	r3,zero,8093cc <__hi0bits+0x30>
  8093c4:	2008913a 	slli	r4,r4,4
  8093c8:	10800104 	addi	r2,r2,4
  8093cc:	20f0002c 	andhi	r3,r4,49152
  8093d0:	1800031e 	bne	r3,zero,8093e0 <__hi0bits+0x44>
  8093d4:	2109883a 	add	r4,r4,r4
  8093d8:	10800084 	addi	r2,r2,2
  8093dc:	2109883a 	add	r4,r4,r4
  8093e0:	20000316 	blt	r4,zero,8093f0 <__hi0bits+0x54>
  8093e4:	2110002c 	andhi	r4,r4,16384
  8093e8:	2000041e 	bne	r4,zero,8093fc <__hi0bits+0x60>
  8093ec:	00800804 	movi	r2,32
  8093f0:	f800283a 	ret
  8093f4:	0005883a 	mov	r2,zero
  8093f8:	003fec06 	br	8093ac <__alt_mem_onchip_mem+0xff7893ac>
  8093fc:	10800044 	addi	r2,r2,1
  809400:	f800283a 	ret

00809404 <__lo0bits>:
  809404:	20c00017 	ldw	r3,0(r4)
  809408:	188001cc 	andi	r2,r3,7
  80940c:	10000826 	beq	r2,zero,809430 <__lo0bits+0x2c>
  809410:	1880004c 	andi	r2,r3,1
  809414:	1000211e 	bne	r2,zero,80949c <__lo0bits+0x98>
  809418:	1880008c 	andi	r2,r3,2
  80941c:	1000211e 	bne	r2,zero,8094a4 <__lo0bits+0xa0>
  809420:	1806d0ba 	srli	r3,r3,2
  809424:	00800084 	movi	r2,2
  809428:	20c00015 	stw	r3,0(r4)
  80942c:	f800283a 	ret
  809430:	18bfffcc 	andi	r2,r3,65535
  809434:	10001326 	beq	r2,zero,809484 <__lo0bits+0x80>
  809438:	0005883a 	mov	r2,zero
  80943c:	19403fcc 	andi	r5,r3,255
  809440:	2800021e 	bne	r5,zero,80944c <__lo0bits+0x48>
  809444:	1806d23a 	srli	r3,r3,8
  809448:	10800204 	addi	r2,r2,8
  80944c:	194003cc 	andi	r5,r3,15
  809450:	2800021e 	bne	r5,zero,80945c <__lo0bits+0x58>
  809454:	1806d13a 	srli	r3,r3,4
  809458:	10800104 	addi	r2,r2,4
  80945c:	194000cc 	andi	r5,r3,3
  809460:	2800021e 	bne	r5,zero,80946c <__lo0bits+0x68>
  809464:	1806d0ba 	srli	r3,r3,2
  809468:	10800084 	addi	r2,r2,2
  80946c:	1940004c 	andi	r5,r3,1
  809470:	2800081e 	bne	r5,zero,809494 <__lo0bits+0x90>
  809474:	1806d07a 	srli	r3,r3,1
  809478:	1800051e 	bne	r3,zero,809490 <__lo0bits+0x8c>
  80947c:	00800804 	movi	r2,32
  809480:	f800283a 	ret
  809484:	1806d43a 	srli	r3,r3,16
  809488:	00800404 	movi	r2,16
  80948c:	003feb06 	br	80943c <__alt_mem_onchip_mem+0xff78943c>
  809490:	10800044 	addi	r2,r2,1
  809494:	20c00015 	stw	r3,0(r4)
  809498:	f800283a 	ret
  80949c:	0005883a 	mov	r2,zero
  8094a0:	f800283a 	ret
  8094a4:	1806d07a 	srli	r3,r3,1
  8094a8:	00800044 	movi	r2,1
  8094ac:	20c00015 	stw	r3,0(r4)
  8094b0:	f800283a 	ret

008094b4 <__i2b>:
  8094b4:	defffd04 	addi	sp,sp,-12
  8094b8:	dc000015 	stw	r16,0(sp)
  8094bc:	04000044 	movi	r16,1
  8094c0:	dc400115 	stw	r17,4(sp)
  8094c4:	2823883a 	mov	r17,r5
  8094c8:	800b883a 	mov	r5,r16
  8094cc:	dfc00215 	stw	ra,8(sp)
  8094d0:	08090a80 	call	8090a8 <_Balloc>
  8094d4:	14400515 	stw	r17,20(r2)
  8094d8:	14000415 	stw	r16,16(r2)
  8094dc:	dfc00217 	ldw	ra,8(sp)
  8094e0:	dc400117 	ldw	r17,4(sp)
  8094e4:	dc000017 	ldw	r16,0(sp)
  8094e8:	dec00304 	addi	sp,sp,12
  8094ec:	f800283a 	ret

008094f0 <__multiply>:
  8094f0:	defffa04 	addi	sp,sp,-24
  8094f4:	dcc00315 	stw	r19,12(sp)
  8094f8:	dc800215 	stw	r18,8(sp)
  8094fc:	34c00417 	ldw	r19,16(r6)
  809500:	2c800417 	ldw	r18,16(r5)
  809504:	dd000415 	stw	r20,16(sp)
  809508:	dc400115 	stw	r17,4(sp)
  80950c:	dfc00515 	stw	ra,20(sp)
  809510:	dc000015 	stw	r16,0(sp)
  809514:	2829883a 	mov	r20,r5
  809518:	3023883a 	mov	r17,r6
  80951c:	94c0050e 	bge	r18,r19,809534 <__multiply+0x44>
  809520:	9007883a 	mov	r3,r18
  809524:	3029883a 	mov	r20,r6
  809528:	9825883a 	mov	r18,r19
  80952c:	2823883a 	mov	r17,r5
  809530:	1827883a 	mov	r19,r3
  809534:	a0800217 	ldw	r2,8(r20)
  809538:	94e1883a 	add	r16,r18,r19
  80953c:	a1400117 	ldw	r5,4(r20)
  809540:	1400010e 	bge	r2,r16,809548 <__multiply+0x58>
  809544:	29400044 	addi	r5,r5,1
  809548:	08090a80 	call	8090a8 <_Balloc>
  80954c:	8415883a 	add	r10,r16,r16
  809550:	12c00504 	addi	r11,r2,20
  809554:	5295883a 	add	r10,r10,r10
  809558:	5a95883a 	add	r10,r11,r10
  80955c:	5807883a 	mov	r3,r11
  809560:	5a80032e 	bgeu	r11,r10,809570 <__multiply+0x80>
  809564:	18000015 	stw	zero,0(r3)
  809568:	18c00104 	addi	r3,r3,4
  80956c:	1abffd36 	bltu	r3,r10,809564 <__alt_mem_onchip_mem+0xff789564>
  809570:	9ce7883a 	add	r19,r19,r19
  809574:	94a5883a 	add	r18,r18,r18
  809578:	89800504 	addi	r6,r17,20
  80957c:	9ce7883a 	add	r19,r19,r19
  809580:	a3400504 	addi	r13,r20,20
  809584:	94a5883a 	add	r18,r18,r18
  809588:	34d9883a 	add	r12,r6,r19
  80958c:	6c93883a 	add	r9,r13,r18
  809590:	3300422e 	bgeu	r6,r12,80969c <__multiply+0x1ac>
  809594:	37c00017 	ldw	ra,0(r6)
  809598:	fbffffcc 	andi	r15,ra,65535
  80959c:	78001b26 	beq	r15,zero,80960c <__multiply+0x11c>
  8095a0:	5811883a 	mov	r8,r11
  8095a4:	681d883a 	mov	r14,r13
  8095a8:	000f883a 	mov	r7,zero
  8095ac:	71000017 	ldw	r4,0(r14)
  8095b0:	40c00017 	ldw	r3,0(r8)
  8095b4:	73800104 	addi	r14,r14,4
  8095b8:	217fffcc 	andi	r5,r4,65535
  8095bc:	2bcb383a 	mul	r5,r5,r15
  8095c0:	2008d43a 	srli	r4,r4,16
  8095c4:	1c7fffcc 	andi	r17,r3,65535
  8095c8:	2c4b883a 	add	r5,r5,r17
  8095cc:	29cb883a 	add	r5,r5,r7
  8095d0:	23c9383a 	mul	r4,r4,r15
  8095d4:	1806d43a 	srli	r3,r3,16
  8095d8:	280ed43a 	srli	r7,r5,16
  8095dc:	297fffcc 	andi	r5,r5,65535
  8095e0:	20c7883a 	add	r3,r4,r3
  8095e4:	19c7883a 	add	r3,r3,r7
  8095e8:	1808943a 	slli	r4,r3,16
  8095ec:	4023883a 	mov	r17,r8
  8095f0:	180ed43a 	srli	r7,r3,16
  8095f4:	214ab03a 	or	r5,r4,r5
  8095f8:	41400015 	stw	r5,0(r8)
  8095fc:	42000104 	addi	r8,r8,4
  809600:	727fea36 	bltu	r14,r9,8095ac <__alt_mem_onchip_mem+0xff7895ac>
  809604:	89c00115 	stw	r7,4(r17)
  809608:	37c00017 	ldw	ra,0(r6)
  80960c:	f83ed43a 	srli	ra,ra,16
  809610:	f8001f26 	beq	ra,zero,809690 <__multiply+0x1a0>
  809614:	58c00017 	ldw	r3,0(r11)
  809618:	681d883a 	mov	r14,r13
  80961c:	581f883a 	mov	r15,r11
  809620:	1811883a 	mov	r8,r3
  809624:	5825883a 	mov	r18,r11
  809628:	000f883a 	mov	r7,zero
  80962c:	00000106 	br	809634 <__multiply+0x144>
  809630:	8825883a 	mov	r18,r17
  809634:	7140000b 	ldhu	r5,0(r14)
  809638:	4010d43a 	srli	r8,r8,16
  80963c:	193fffcc 	andi	r4,r3,65535
  809640:	2fcb383a 	mul	r5,r5,ra
  809644:	7bc00104 	addi	r15,r15,4
  809648:	73800104 	addi	r14,r14,4
  80964c:	2a0b883a 	add	r5,r5,r8
  809650:	29cb883a 	add	r5,r5,r7
  809654:	2806943a 	slli	r3,r5,16
  809658:	94400104 	addi	r17,r18,4
  80965c:	280ad43a 	srli	r5,r5,16
  809660:	1908b03a 	or	r4,r3,r4
  809664:	793fff15 	stw	r4,-4(r15)
  809668:	70ffff17 	ldw	r3,-4(r14)
  80966c:	8a000017 	ldw	r8,0(r17)
  809670:	1806d43a 	srli	r3,r3,16
  809674:	413fffcc 	andi	r4,r8,65535
  809678:	1fc7383a 	mul	r3,r3,ra
  80967c:	1907883a 	add	r3,r3,r4
  809680:	1947883a 	add	r3,r3,r5
  809684:	180ed43a 	srli	r7,r3,16
  809688:	727fe936 	bltu	r14,r9,809630 <__alt_mem_onchip_mem+0xff789630>
  80968c:	90c00115 	stw	r3,4(r18)
  809690:	31800104 	addi	r6,r6,4
  809694:	5ac00104 	addi	r11,r11,4
  809698:	333fbe36 	bltu	r6,r12,809594 <__alt_mem_onchip_mem+0xff789594>
  80969c:	0400090e 	bge	zero,r16,8096c4 <__multiply+0x1d4>
  8096a0:	50ffff17 	ldw	r3,-4(r10)
  8096a4:	52bfff04 	addi	r10,r10,-4
  8096a8:	18000326 	beq	r3,zero,8096b8 <__multiply+0x1c8>
  8096ac:	00000506 	br	8096c4 <__multiply+0x1d4>
  8096b0:	50c00017 	ldw	r3,0(r10)
  8096b4:	1800031e 	bne	r3,zero,8096c4 <__multiply+0x1d4>
  8096b8:	843fffc4 	addi	r16,r16,-1
  8096bc:	52bfff04 	addi	r10,r10,-4
  8096c0:	803ffb1e 	bne	r16,zero,8096b0 <__alt_mem_onchip_mem+0xff7896b0>
  8096c4:	14000415 	stw	r16,16(r2)
  8096c8:	dfc00517 	ldw	ra,20(sp)
  8096cc:	dd000417 	ldw	r20,16(sp)
  8096d0:	dcc00317 	ldw	r19,12(sp)
  8096d4:	dc800217 	ldw	r18,8(sp)
  8096d8:	dc400117 	ldw	r17,4(sp)
  8096dc:	dc000017 	ldw	r16,0(sp)
  8096e0:	dec00604 	addi	sp,sp,24
  8096e4:	f800283a 	ret

008096e8 <__pow5mult>:
  8096e8:	defffa04 	addi	sp,sp,-24
  8096ec:	dcc00315 	stw	r19,12(sp)
  8096f0:	dc000015 	stw	r16,0(sp)
  8096f4:	dfc00515 	stw	ra,20(sp)
  8096f8:	dd000415 	stw	r20,16(sp)
  8096fc:	dc800215 	stw	r18,8(sp)
  809700:	dc400115 	stw	r17,4(sp)
  809704:	308000cc 	andi	r2,r6,3
  809708:	3021883a 	mov	r16,r6
  80970c:	2027883a 	mov	r19,r4
  809710:	10002f1e 	bne	r2,zero,8097d0 <__pow5mult+0xe8>
  809714:	2825883a 	mov	r18,r5
  809718:	8021d0ba 	srai	r16,r16,2
  80971c:	80001a26 	beq	r16,zero,809788 <__pow5mult+0xa0>
  809720:	9c401217 	ldw	r17,72(r19)
  809724:	8800061e 	bne	r17,zero,809740 <__pow5mult+0x58>
  809728:	00003406 	br	8097fc <__pow5mult+0x114>
  80972c:	8021d07a 	srai	r16,r16,1
  809730:	80001526 	beq	r16,zero,809788 <__pow5mult+0xa0>
  809734:	88800017 	ldw	r2,0(r17)
  809738:	10001c26 	beq	r2,zero,8097ac <__pow5mult+0xc4>
  80973c:	1023883a 	mov	r17,r2
  809740:	8080004c 	andi	r2,r16,1
  809744:	103ff926 	beq	r2,zero,80972c <__alt_mem_onchip_mem+0xff78972c>
  809748:	880d883a 	mov	r6,r17
  80974c:	900b883a 	mov	r5,r18
  809750:	9809883a 	mov	r4,r19
  809754:	08094f00 	call	8094f0 <__multiply>
  809758:	90001b26 	beq	r18,zero,8097c8 <__pow5mult+0xe0>
  80975c:	91000117 	ldw	r4,4(r18)
  809760:	98c01317 	ldw	r3,76(r19)
  809764:	8021d07a 	srai	r16,r16,1
  809768:	2109883a 	add	r4,r4,r4
  80976c:	2109883a 	add	r4,r4,r4
  809770:	1907883a 	add	r3,r3,r4
  809774:	19000017 	ldw	r4,0(r3)
  809778:	91000015 	stw	r4,0(r18)
  80977c:	1c800015 	stw	r18,0(r3)
  809780:	1025883a 	mov	r18,r2
  809784:	803feb1e 	bne	r16,zero,809734 <__alt_mem_onchip_mem+0xff789734>
  809788:	9005883a 	mov	r2,r18
  80978c:	dfc00517 	ldw	ra,20(sp)
  809790:	dd000417 	ldw	r20,16(sp)
  809794:	dcc00317 	ldw	r19,12(sp)
  809798:	dc800217 	ldw	r18,8(sp)
  80979c:	dc400117 	ldw	r17,4(sp)
  8097a0:	dc000017 	ldw	r16,0(sp)
  8097a4:	dec00604 	addi	sp,sp,24
  8097a8:	f800283a 	ret
  8097ac:	880d883a 	mov	r6,r17
  8097b0:	880b883a 	mov	r5,r17
  8097b4:	9809883a 	mov	r4,r19
  8097b8:	08094f00 	call	8094f0 <__multiply>
  8097bc:	88800015 	stw	r2,0(r17)
  8097c0:	10000015 	stw	zero,0(r2)
  8097c4:	003fdd06 	br	80973c <__alt_mem_onchip_mem+0xff78973c>
  8097c8:	1025883a 	mov	r18,r2
  8097cc:	003fd706 	br	80972c <__alt_mem_onchip_mem+0xff78972c>
  8097d0:	10bfffc4 	addi	r2,r2,-1
  8097d4:	1085883a 	add	r2,r2,r2
  8097d8:	00c02074 	movhi	r3,129
  8097dc:	18cf2604 	addi	r3,r3,15512
  8097e0:	1085883a 	add	r2,r2,r2
  8097e4:	1885883a 	add	r2,r3,r2
  8097e8:	11800017 	ldw	r6,0(r2)
  8097ec:	000f883a 	mov	r7,zero
  8097f0:	08091780 	call	809178 <__multadd>
  8097f4:	1025883a 	mov	r18,r2
  8097f8:	003fc706 	br	809718 <__alt_mem_onchip_mem+0xff789718>
  8097fc:	05000044 	movi	r20,1
  809800:	a00b883a 	mov	r5,r20
  809804:	9809883a 	mov	r4,r19
  809808:	08090a80 	call	8090a8 <_Balloc>
  80980c:	1023883a 	mov	r17,r2
  809810:	00809c44 	movi	r2,625
  809814:	88800515 	stw	r2,20(r17)
  809818:	8d000415 	stw	r20,16(r17)
  80981c:	9c401215 	stw	r17,72(r19)
  809820:	88000015 	stw	zero,0(r17)
  809824:	003fc606 	br	809740 <__alt_mem_onchip_mem+0xff789740>

00809828 <__lshift>:
  809828:	defff904 	addi	sp,sp,-28
  80982c:	dd400515 	stw	r21,20(sp)
  809830:	dcc00315 	stw	r19,12(sp)
  809834:	302bd17a 	srai	r21,r6,5
  809838:	2cc00417 	ldw	r19,16(r5)
  80983c:	28800217 	ldw	r2,8(r5)
  809840:	dd000415 	stw	r20,16(sp)
  809844:	ace7883a 	add	r19,r21,r19
  809848:	dc800215 	stw	r18,8(sp)
  80984c:	dc400115 	stw	r17,4(sp)
  809850:	dc000015 	stw	r16,0(sp)
  809854:	dfc00615 	stw	ra,24(sp)
  809858:	9c000044 	addi	r16,r19,1
  80985c:	2823883a 	mov	r17,r5
  809860:	3029883a 	mov	r20,r6
  809864:	2025883a 	mov	r18,r4
  809868:	29400117 	ldw	r5,4(r5)
  80986c:	1400030e 	bge	r2,r16,80987c <__lshift+0x54>
  809870:	1085883a 	add	r2,r2,r2
  809874:	29400044 	addi	r5,r5,1
  809878:	143ffd16 	blt	r2,r16,809870 <__alt_mem_onchip_mem+0xff789870>
  80987c:	9009883a 	mov	r4,r18
  809880:	08090a80 	call	8090a8 <_Balloc>
  809884:	10c00504 	addi	r3,r2,20
  809888:	0540070e 	bge	zero,r21,8098a8 <__lshift+0x80>
  80988c:	ad6b883a 	add	r21,r21,r21
  809890:	ad6b883a 	add	r21,r21,r21
  809894:	1809883a 	mov	r4,r3
  809898:	1d47883a 	add	r3,r3,r21
  80989c:	20000015 	stw	zero,0(r4)
  8098a0:	21000104 	addi	r4,r4,4
  8098a4:	193ffd1e 	bne	r3,r4,80989c <__alt_mem_onchip_mem+0xff78989c>
  8098a8:	8a000417 	ldw	r8,16(r17)
  8098ac:	89000504 	addi	r4,r17,20
  8098b0:	a18007cc 	andi	r6,r20,31
  8098b4:	4211883a 	add	r8,r8,r8
  8098b8:	4211883a 	add	r8,r8,r8
  8098bc:	2211883a 	add	r8,r4,r8
  8098c0:	30002326 	beq	r6,zero,809950 <__lshift+0x128>
  8098c4:	02400804 	movi	r9,32
  8098c8:	4993c83a 	sub	r9,r9,r6
  8098cc:	000b883a 	mov	r5,zero
  8098d0:	21c00017 	ldw	r7,0(r4)
  8098d4:	1815883a 	mov	r10,r3
  8098d8:	18c00104 	addi	r3,r3,4
  8098dc:	398e983a 	sll	r7,r7,r6
  8098e0:	21000104 	addi	r4,r4,4
  8098e4:	394ab03a 	or	r5,r7,r5
  8098e8:	197fff15 	stw	r5,-4(r3)
  8098ec:	217fff17 	ldw	r5,-4(r4)
  8098f0:	2a4ad83a 	srl	r5,r5,r9
  8098f4:	223ff636 	bltu	r4,r8,8098d0 <__alt_mem_onchip_mem+0xff7898d0>
  8098f8:	51400115 	stw	r5,4(r10)
  8098fc:	28001a1e 	bne	r5,zero,809968 <__lshift+0x140>
  809900:	843fffc4 	addi	r16,r16,-1
  809904:	14000415 	stw	r16,16(r2)
  809908:	88000826 	beq	r17,zero,80992c <__lshift+0x104>
  80990c:	89000117 	ldw	r4,4(r17)
  809910:	90c01317 	ldw	r3,76(r18)
  809914:	2109883a 	add	r4,r4,r4
  809918:	2109883a 	add	r4,r4,r4
  80991c:	1907883a 	add	r3,r3,r4
  809920:	19000017 	ldw	r4,0(r3)
  809924:	89000015 	stw	r4,0(r17)
  809928:	1c400015 	stw	r17,0(r3)
  80992c:	dfc00617 	ldw	ra,24(sp)
  809930:	dd400517 	ldw	r21,20(sp)
  809934:	dd000417 	ldw	r20,16(sp)
  809938:	dcc00317 	ldw	r19,12(sp)
  80993c:	dc800217 	ldw	r18,8(sp)
  809940:	dc400117 	ldw	r17,4(sp)
  809944:	dc000017 	ldw	r16,0(sp)
  809948:	dec00704 	addi	sp,sp,28
  80994c:	f800283a 	ret
  809950:	21400017 	ldw	r5,0(r4)
  809954:	18c00104 	addi	r3,r3,4
  809958:	21000104 	addi	r4,r4,4
  80995c:	197fff15 	stw	r5,-4(r3)
  809960:	223ffb36 	bltu	r4,r8,809950 <__alt_mem_onchip_mem+0xff789950>
  809964:	003fe606 	br	809900 <__alt_mem_onchip_mem+0xff789900>
  809968:	9c000084 	addi	r16,r19,2
  80996c:	003fe406 	br	809900 <__alt_mem_onchip_mem+0xff789900>

00809970 <__mcmp>:
  809970:	20800417 	ldw	r2,16(r4)
  809974:	28c00417 	ldw	r3,16(r5)
  809978:	10c5c83a 	sub	r2,r2,r3
  80997c:	1000111e 	bne	r2,zero,8099c4 <__mcmp+0x54>
  809980:	18c7883a 	add	r3,r3,r3
  809984:	18c7883a 	add	r3,r3,r3
  809988:	21000504 	addi	r4,r4,20
  80998c:	29400504 	addi	r5,r5,20
  809990:	20c5883a 	add	r2,r4,r3
  809994:	28cb883a 	add	r5,r5,r3
  809998:	00000106 	br	8099a0 <__mcmp+0x30>
  80999c:	20800a2e 	bgeu	r4,r2,8099c8 <__mcmp+0x58>
  8099a0:	10bfff04 	addi	r2,r2,-4
  8099a4:	297fff04 	addi	r5,r5,-4
  8099a8:	11800017 	ldw	r6,0(r2)
  8099ac:	28c00017 	ldw	r3,0(r5)
  8099b0:	30fffa26 	beq	r6,r3,80999c <__alt_mem_onchip_mem+0xff78999c>
  8099b4:	30c00236 	bltu	r6,r3,8099c0 <__mcmp+0x50>
  8099b8:	00800044 	movi	r2,1
  8099bc:	f800283a 	ret
  8099c0:	00bfffc4 	movi	r2,-1
  8099c4:	f800283a 	ret
  8099c8:	0005883a 	mov	r2,zero
  8099cc:	f800283a 	ret

008099d0 <__mdiff>:
  8099d0:	28c00417 	ldw	r3,16(r5)
  8099d4:	30800417 	ldw	r2,16(r6)
  8099d8:	defffa04 	addi	sp,sp,-24
  8099dc:	dcc00315 	stw	r19,12(sp)
  8099e0:	dc800215 	stw	r18,8(sp)
  8099e4:	dfc00515 	stw	ra,20(sp)
  8099e8:	dd000415 	stw	r20,16(sp)
  8099ec:	dc400115 	stw	r17,4(sp)
  8099f0:	dc000015 	stw	r16,0(sp)
  8099f4:	1887c83a 	sub	r3,r3,r2
  8099f8:	2825883a 	mov	r18,r5
  8099fc:	3027883a 	mov	r19,r6
  809a00:	1800141e 	bne	r3,zero,809a54 <__mdiff+0x84>
  809a04:	1085883a 	add	r2,r2,r2
  809a08:	1085883a 	add	r2,r2,r2
  809a0c:	2a000504 	addi	r8,r5,20
  809a10:	34000504 	addi	r16,r6,20
  809a14:	4087883a 	add	r3,r8,r2
  809a18:	8085883a 	add	r2,r16,r2
  809a1c:	00000106 	br	809a24 <__mdiff+0x54>
  809a20:	40c0592e 	bgeu	r8,r3,809b88 <__mdiff+0x1b8>
  809a24:	18ffff04 	addi	r3,r3,-4
  809a28:	10bfff04 	addi	r2,r2,-4
  809a2c:	19c00017 	ldw	r7,0(r3)
  809a30:	11400017 	ldw	r5,0(r2)
  809a34:	397ffa26 	beq	r7,r5,809a20 <__alt_mem_onchip_mem+0xff789a20>
  809a38:	3940592e 	bgeu	r7,r5,809ba0 <__mdiff+0x1d0>
  809a3c:	9005883a 	mov	r2,r18
  809a40:	4023883a 	mov	r17,r8
  809a44:	9825883a 	mov	r18,r19
  809a48:	05000044 	movi	r20,1
  809a4c:	1027883a 	mov	r19,r2
  809a50:	00000406 	br	809a64 <__mdiff+0x94>
  809a54:	18005616 	blt	r3,zero,809bb0 <__mdiff+0x1e0>
  809a58:	34400504 	addi	r17,r6,20
  809a5c:	2c000504 	addi	r16,r5,20
  809a60:	0029883a 	mov	r20,zero
  809a64:	91400117 	ldw	r5,4(r18)
  809a68:	08090a80 	call	8090a8 <_Balloc>
  809a6c:	92400417 	ldw	r9,16(r18)
  809a70:	9b000417 	ldw	r12,16(r19)
  809a74:	12c00504 	addi	r11,r2,20
  809a78:	4a51883a 	add	r8,r9,r9
  809a7c:	6319883a 	add	r12,r12,r12
  809a80:	4211883a 	add	r8,r8,r8
  809a84:	6319883a 	add	r12,r12,r12
  809a88:	15000315 	stw	r20,12(r2)
  809a8c:	8211883a 	add	r8,r16,r8
  809a90:	8b19883a 	add	r12,r17,r12
  809a94:	0007883a 	mov	r3,zero
  809a98:	81400017 	ldw	r5,0(r16)
  809a9c:	89c00017 	ldw	r7,0(r17)
  809aa0:	59800104 	addi	r6,r11,4
  809aa4:	293fffcc 	andi	r4,r5,65535
  809aa8:	20c7883a 	add	r3,r4,r3
  809aac:	393fffcc 	andi	r4,r7,65535
  809ab0:	1909c83a 	sub	r4,r3,r4
  809ab4:	280ad43a 	srli	r5,r5,16
  809ab8:	380ed43a 	srli	r7,r7,16
  809abc:	2007d43a 	srai	r3,r4,16
  809ac0:	213fffcc 	andi	r4,r4,65535
  809ac4:	29cbc83a 	sub	r5,r5,r7
  809ac8:	28c7883a 	add	r3,r5,r3
  809acc:	180a943a 	slli	r5,r3,16
  809ad0:	8c400104 	addi	r17,r17,4
  809ad4:	84000104 	addi	r16,r16,4
  809ad8:	2908b03a 	or	r4,r5,r4
  809adc:	59000015 	stw	r4,0(r11)
  809ae0:	1807d43a 	srai	r3,r3,16
  809ae4:	3015883a 	mov	r10,r6
  809ae8:	3017883a 	mov	r11,r6
  809aec:	8b3fea36 	bltu	r17,r12,809a98 <__alt_mem_onchip_mem+0xff789a98>
  809af0:	8200162e 	bgeu	r16,r8,809b4c <__mdiff+0x17c>
  809af4:	8017883a 	mov	r11,r16
  809af8:	59400017 	ldw	r5,0(r11)
  809afc:	31800104 	addi	r6,r6,4
  809b00:	5ac00104 	addi	r11,r11,4
  809b04:	293fffcc 	andi	r4,r5,65535
  809b08:	20c7883a 	add	r3,r4,r3
  809b0c:	280ed43a 	srli	r7,r5,16
  809b10:	180bd43a 	srai	r5,r3,16
  809b14:	193fffcc 	andi	r4,r3,65535
  809b18:	3947883a 	add	r3,r7,r5
  809b1c:	180a943a 	slli	r5,r3,16
  809b20:	1807d43a 	srai	r3,r3,16
  809b24:	2908b03a 	or	r4,r5,r4
  809b28:	313fff15 	stw	r4,-4(r6)
  809b2c:	5a3ff236 	bltu	r11,r8,809af8 <__alt_mem_onchip_mem+0xff789af8>
  809b30:	0406303a 	nor	r3,zero,r16
  809b34:	1a07883a 	add	r3,r3,r8
  809b38:	1806d0ba 	srli	r3,r3,2
  809b3c:	18c00044 	addi	r3,r3,1
  809b40:	18c7883a 	add	r3,r3,r3
  809b44:	18c7883a 	add	r3,r3,r3
  809b48:	50d5883a 	add	r10,r10,r3
  809b4c:	50ffff04 	addi	r3,r10,-4
  809b50:	2000041e 	bne	r4,zero,809b64 <__mdiff+0x194>
  809b54:	18ffff04 	addi	r3,r3,-4
  809b58:	19000017 	ldw	r4,0(r3)
  809b5c:	4a7fffc4 	addi	r9,r9,-1
  809b60:	203ffc26 	beq	r4,zero,809b54 <__alt_mem_onchip_mem+0xff789b54>
  809b64:	12400415 	stw	r9,16(r2)
  809b68:	dfc00517 	ldw	ra,20(sp)
  809b6c:	dd000417 	ldw	r20,16(sp)
  809b70:	dcc00317 	ldw	r19,12(sp)
  809b74:	dc800217 	ldw	r18,8(sp)
  809b78:	dc400117 	ldw	r17,4(sp)
  809b7c:	dc000017 	ldw	r16,0(sp)
  809b80:	dec00604 	addi	sp,sp,24
  809b84:	f800283a 	ret
  809b88:	000b883a 	mov	r5,zero
  809b8c:	08090a80 	call	8090a8 <_Balloc>
  809b90:	00c00044 	movi	r3,1
  809b94:	10c00415 	stw	r3,16(r2)
  809b98:	10000515 	stw	zero,20(r2)
  809b9c:	003ff206 	br	809b68 <__alt_mem_onchip_mem+0xff789b68>
  809ba0:	8023883a 	mov	r17,r16
  809ba4:	0029883a 	mov	r20,zero
  809ba8:	4021883a 	mov	r16,r8
  809bac:	003fad06 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>
  809bb0:	9005883a 	mov	r2,r18
  809bb4:	94400504 	addi	r17,r18,20
  809bb8:	9c000504 	addi	r16,r19,20
  809bbc:	9825883a 	mov	r18,r19
  809bc0:	05000044 	movi	r20,1
  809bc4:	1027883a 	mov	r19,r2
  809bc8:	003fa606 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>

00809bcc <__ulp>:
  809bcc:	295ffc2c 	andhi	r5,r5,32752
  809bd0:	00bf3034 	movhi	r2,64704
  809bd4:	2887883a 	add	r3,r5,r2
  809bd8:	00c0020e 	bge	zero,r3,809be4 <__ulp+0x18>
  809bdc:	0005883a 	mov	r2,zero
  809be0:	f800283a 	ret
  809be4:	00c7c83a 	sub	r3,zero,r3
  809be8:	1807d53a 	srai	r3,r3,20
  809bec:	008004c4 	movi	r2,19
  809bf0:	10c00b0e 	bge	r2,r3,809c20 <__ulp+0x54>
  809bf4:	18bffb04 	addi	r2,r3,-20
  809bf8:	01000784 	movi	r4,30
  809bfc:	0007883a 	mov	r3,zero
  809c00:	20800516 	blt	r4,r2,809c18 <__ulp+0x4c>
  809c04:	010007c4 	movi	r4,31
  809c08:	2089c83a 	sub	r4,r4,r2
  809c0c:	00800044 	movi	r2,1
  809c10:	1104983a 	sll	r2,r2,r4
  809c14:	f800283a 	ret
  809c18:	00800044 	movi	r2,1
  809c1c:	f800283a 	ret
  809c20:	01400234 	movhi	r5,8
  809c24:	28c7d83a 	sra	r3,r5,r3
  809c28:	0005883a 	mov	r2,zero
  809c2c:	f800283a 	ret

00809c30 <__b2d>:
  809c30:	defffa04 	addi	sp,sp,-24
  809c34:	dc000015 	stw	r16,0(sp)
  809c38:	24000417 	ldw	r16,16(r4)
  809c3c:	dc400115 	stw	r17,4(sp)
  809c40:	24400504 	addi	r17,r4,20
  809c44:	8421883a 	add	r16,r16,r16
  809c48:	8421883a 	add	r16,r16,r16
  809c4c:	8c21883a 	add	r16,r17,r16
  809c50:	dc800215 	stw	r18,8(sp)
  809c54:	84bfff17 	ldw	r18,-4(r16)
  809c58:	dd000415 	stw	r20,16(sp)
  809c5c:	dcc00315 	stw	r19,12(sp)
  809c60:	9009883a 	mov	r4,r18
  809c64:	2829883a 	mov	r20,r5
  809c68:	dfc00515 	stw	ra,20(sp)
  809c6c:	080939c0 	call	80939c <__hi0bits>
  809c70:	00c00804 	movi	r3,32
  809c74:	1889c83a 	sub	r4,r3,r2
  809c78:	a1000015 	stw	r4,0(r20)
  809c7c:	01000284 	movi	r4,10
  809c80:	84ffff04 	addi	r19,r16,-4
  809c84:	20801216 	blt	r4,r2,809cd0 <__b2d+0xa0>
  809c88:	018002c4 	movi	r6,11
  809c8c:	308dc83a 	sub	r6,r6,r2
  809c90:	9186d83a 	srl	r3,r18,r6
  809c94:	18cffc34 	orhi	r3,r3,16368
  809c98:	8cc0212e 	bgeu	r17,r19,809d20 <__b2d+0xf0>
  809c9c:	813ffe17 	ldw	r4,-8(r16)
  809ca0:	218cd83a 	srl	r6,r4,r6
  809ca4:	10800544 	addi	r2,r2,21
  809ca8:	9084983a 	sll	r2,r18,r2
  809cac:	1184b03a 	or	r2,r2,r6
  809cb0:	dfc00517 	ldw	ra,20(sp)
  809cb4:	dd000417 	ldw	r20,16(sp)
  809cb8:	dcc00317 	ldw	r19,12(sp)
  809cbc:	dc800217 	ldw	r18,8(sp)
  809cc0:	dc400117 	ldw	r17,4(sp)
  809cc4:	dc000017 	ldw	r16,0(sp)
  809cc8:	dec00604 	addi	sp,sp,24
  809ccc:	f800283a 	ret
  809cd0:	8cc00f2e 	bgeu	r17,r19,809d10 <__b2d+0xe0>
  809cd4:	117ffd44 	addi	r5,r2,-11
  809cd8:	80bffe17 	ldw	r2,-8(r16)
  809cdc:	28000e26 	beq	r5,zero,809d18 <__b2d+0xe8>
  809ce0:	1949c83a 	sub	r4,r3,r5
  809ce4:	9164983a 	sll	r18,r18,r5
  809ce8:	1106d83a 	srl	r3,r2,r4
  809cec:	81bffe04 	addi	r6,r16,-8
  809cf0:	948ffc34 	orhi	r18,r18,16368
  809cf4:	90c6b03a 	or	r3,r18,r3
  809cf8:	89800e2e 	bgeu	r17,r6,809d34 <__b2d+0x104>
  809cfc:	81bffd17 	ldw	r6,-12(r16)
  809d00:	1144983a 	sll	r2,r2,r5
  809d04:	310ad83a 	srl	r5,r6,r4
  809d08:	2884b03a 	or	r2,r5,r2
  809d0c:	003fe806 	br	809cb0 <__alt_mem_onchip_mem+0xff789cb0>
  809d10:	10bffd44 	addi	r2,r2,-11
  809d14:	1000041e 	bne	r2,zero,809d28 <__b2d+0xf8>
  809d18:	90cffc34 	orhi	r3,r18,16368
  809d1c:	003fe406 	br	809cb0 <__alt_mem_onchip_mem+0xff789cb0>
  809d20:	000d883a 	mov	r6,zero
  809d24:	003fdf06 	br	809ca4 <__alt_mem_onchip_mem+0xff789ca4>
  809d28:	90a4983a 	sll	r18,r18,r2
  809d2c:	0005883a 	mov	r2,zero
  809d30:	003ff906 	br	809d18 <__alt_mem_onchip_mem+0xff789d18>
  809d34:	1144983a 	sll	r2,r2,r5
  809d38:	003fdd06 	br	809cb0 <__alt_mem_onchip_mem+0xff789cb0>

00809d3c <__d2b>:
  809d3c:	defff804 	addi	sp,sp,-32
  809d40:	dc000215 	stw	r16,8(sp)
  809d44:	3021883a 	mov	r16,r6
  809d48:	dc400315 	stw	r17,12(sp)
  809d4c:	8022907a 	slli	r17,r16,1
  809d50:	dd000615 	stw	r20,24(sp)
  809d54:	2829883a 	mov	r20,r5
  809d58:	01400044 	movi	r5,1
  809d5c:	dcc00515 	stw	r19,20(sp)
  809d60:	dc800415 	stw	r18,16(sp)
  809d64:	dfc00715 	stw	ra,28(sp)
  809d68:	3825883a 	mov	r18,r7
  809d6c:	8822d57a 	srli	r17,r17,21
  809d70:	08090a80 	call	8090a8 <_Balloc>
  809d74:	1027883a 	mov	r19,r2
  809d78:	00800434 	movhi	r2,16
  809d7c:	10bfffc4 	addi	r2,r2,-1
  809d80:	808c703a 	and	r6,r16,r2
  809d84:	88000126 	beq	r17,zero,809d8c <__d2b+0x50>
  809d88:	31800434 	orhi	r6,r6,16
  809d8c:	d9800015 	stw	r6,0(sp)
  809d90:	a0002426 	beq	r20,zero,809e24 <__d2b+0xe8>
  809d94:	d9000104 	addi	r4,sp,4
  809d98:	dd000115 	stw	r20,4(sp)
  809d9c:	08094040 	call	809404 <__lo0bits>
  809da0:	d8c00017 	ldw	r3,0(sp)
  809da4:	10002f1e 	bne	r2,zero,809e64 <__d2b+0x128>
  809da8:	d9000117 	ldw	r4,4(sp)
  809dac:	99000515 	stw	r4,20(r19)
  809db0:	1821003a 	cmpeq	r16,r3,zero
  809db4:	01000084 	movi	r4,2
  809db8:	2421c83a 	sub	r16,r4,r16
  809dbc:	98c00615 	stw	r3,24(r19)
  809dc0:	9c000415 	stw	r16,16(r19)
  809dc4:	88001f1e 	bne	r17,zero,809e44 <__d2b+0x108>
  809dc8:	10bef384 	addi	r2,r2,-1074
  809dcc:	90800015 	stw	r2,0(r18)
  809dd0:	00900034 	movhi	r2,16384
  809dd4:	10bfffc4 	addi	r2,r2,-1
  809dd8:	8085883a 	add	r2,r16,r2
  809ddc:	1085883a 	add	r2,r2,r2
  809de0:	1085883a 	add	r2,r2,r2
  809de4:	9885883a 	add	r2,r19,r2
  809de8:	11000517 	ldw	r4,20(r2)
  809dec:	8020917a 	slli	r16,r16,5
  809df0:	080939c0 	call	80939c <__hi0bits>
  809df4:	d8c00817 	ldw	r3,32(sp)
  809df8:	8085c83a 	sub	r2,r16,r2
  809dfc:	18800015 	stw	r2,0(r3)
  809e00:	9805883a 	mov	r2,r19
  809e04:	dfc00717 	ldw	ra,28(sp)
  809e08:	dd000617 	ldw	r20,24(sp)
  809e0c:	dcc00517 	ldw	r19,20(sp)
  809e10:	dc800417 	ldw	r18,16(sp)
  809e14:	dc400317 	ldw	r17,12(sp)
  809e18:	dc000217 	ldw	r16,8(sp)
  809e1c:	dec00804 	addi	sp,sp,32
  809e20:	f800283a 	ret
  809e24:	d809883a 	mov	r4,sp
  809e28:	08094040 	call	809404 <__lo0bits>
  809e2c:	d8c00017 	ldw	r3,0(sp)
  809e30:	04000044 	movi	r16,1
  809e34:	9c000415 	stw	r16,16(r19)
  809e38:	98c00515 	stw	r3,20(r19)
  809e3c:	10800804 	addi	r2,r2,32
  809e40:	883fe126 	beq	r17,zero,809dc8 <__alt_mem_onchip_mem+0xff789dc8>
  809e44:	00c00d44 	movi	r3,53
  809e48:	8c7ef344 	addi	r17,r17,-1075
  809e4c:	88a3883a 	add	r17,r17,r2
  809e50:	1885c83a 	sub	r2,r3,r2
  809e54:	d8c00817 	ldw	r3,32(sp)
  809e58:	94400015 	stw	r17,0(r18)
  809e5c:	18800015 	stw	r2,0(r3)
  809e60:	003fe706 	br	809e00 <__alt_mem_onchip_mem+0xff789e00>
  809e64:	01000804 	movi	r4,32
  809e68:	2089c83a 	sub	r4,r4,r2
  809e6c:	1908983a 	sll	r4,r3,r4
  809e70:	d9400117 	ldw	r5,4(sp)
  809e74:	1886d83a 	srl	r3,r3,r2
  809e78:	2148b03a 	or	r4,r4,r5
  809e7c:	99000515 	stw	r4,20(r19)
  809e80:	d8c00015 	stw	r3,0(sp)
  809e84:	003fca06 	br	809db0 <__alt_mem_onchip_mem+0xff789db0>

00809e88 <__ratio>:
  809e88:	defff904 	addi	sp,sp,-28
  809e8c:	dc400315 	stw	r17,12(sp)
  809e90:	2823883a 	mov	r17,r5
  809e94:	d9400104 	addi	r5,sp,4
  809e98:	dfc00615 	stw	ra,24(sp)
  809e9c:	dcc00515 	stw	r19,20(sp)
  809ea0:	dc800415 	stw	r18,16(sp)
  809ea4:	2027883a 	mov	r19,r4
  809ea8:	dc000215 	stw	r16,8(sp)
  809eac:	0809c300 	call	809c30 <__b2d>
  809eb0:	d80b883a 	mov	r5,sp
  809eb4:	8809883a 	mov	r4,r17
  809eb8:	1025883a 	mov	r18,r2
  809ebc:	1821883a 	mov	r16,r3
  809ec0:	0809c300 	call	809c30 <__b2d>
  809ec4:	8a000417 	ldw	r8,16(r17)
  809ec8:	99000417 	ldw	r4,16(r19)
  809ecc:	d9400117 	ldw	r5,4(sp)
  809ed0:	2209c83a 	sub	r4,r4,r8
  809ed4:	2010917a 	slli	r8,r4,5
  809ed8:	d9000017 	ldw	r4,0(sp)
  809edc:	2909c83a 	sub	r4,r5,r4
  809ee0:	4109883a 	add	r4,r8,r4
  809ee4:	01000e0e 	bge	zero,r4,809f20 <__ratio+0x98>
  809ee8:	2008953a 	slli	r4,r4,20
  809eec:	2421883a 	add	r16,r4,r16
  809ef0:	100d883a 	mov	r6,r2
  809ef4:	180f883a 	mov	r7,r3
  809ef8:	9009883a 	mov	r4,r18
  809efc:	800b883a 	mov	r5,r16
  809f00:	080dbc00 	call	80dbc0 <__divdf3>
  809f04:	dfc00617 	ldw	ra,24(sp)
  809f08:	dcc00517 	ldw	r19,20(sp)
  809f0c:	dc800417 	ldw	r18,16(sp)
  809f10:	dc400317 	ldw	r17,12(sp)
  809f14:	dc000217 	ldw	r16,8(sp)
  809f18:	dec00704 	addi	sp,sp,28
  809f1c:	f800283a 	ret
  809f20:	2008953a 	slli	r4,r4,20
  809f24:	1907c83a 	sub	r3,r3,r4
  809f28:	003ff106 	br	809ef0 <__alt_mem_onchip_mem+0xff789ef0>

00809f2c <_mprec_log10>:
  809f2c:	defffe04 	addi	sp,sp,-8
  809f30:	dc000015 	stw	r16,0(sp)
  809f34:	dfc00115 	stw	ra,4(sp)
  809f38:	008005c4 	movi	r2,23
  809f3c:	2021883a 	mov	r16,r4
  809f40:	11000d0e 	bge	r2,r4,809f78 <_mprec_log10+0x4c>
  809f44:	0005883a 	mov	r2,zero
  809f48:	00cffc34 	movhi	r3,16368
  809f4c:	843fffc4 	addi	r16,r16,-1
  809f50:	000d883a 	mov	r6,zero
  809f54:	01d00934 	movhi	r7,16420
  809f58:	1009883a 	mov	r4,r2
  809f5c:	180b883a 	mov	r5,r3
  809f60:	080e7000 	call	80e700 <__muldf3>
  809f64:	803ff91e 	bne	r16,zero,809f4c <__alt_mem_onchip_mem+0xff789f4c>
  809f68:	dfc00117 	ldw	ra,4(sp)
  809f6c:	dc000017 	ldw	r16,0(sp)
  809f70:	dec00204 	addi	sp,sp,8
  809f74:	f800283a 	ret
  809f78:	202090fa 	slli	r16,r4,3
  809f7c:	00802074 	movhi	r2,129
  809f80:	108f3d04 	addi	r2,r2,15604
  809f84:	1421883a 	add	r16,r2,r16
  809f88:	80800017 	ldw	r2,0(r16)
  809f8c:	80c00117 	ldw	r3,4(r16)
  809f90:	dfc00117 	ldw	ra,4(sp)
  809f94:	dc000017 	ldw	r16,0(sp)
  809f98:	dec00204 	addi	sp,sp,8
  809f9c:	f800283a 	ret

00809fa0 <__copybits>:
  809fa0:	297fffc4 	addi	r5,r5,-1
  809fa4:	280fd17a 	srai	r7,r5,5
  809fa8:	30c00417 	ldw	r3,16(r6)
  809fac:	30800504 	addi	r2,r6,20
  809fb0:	39c00044 	addi	r7,r7,1
  809fb4:	18c7883a 	add	r3,r3,r3
  809fb8:	39cf883a 	add	r7,r7,r7
  809fbc:	18c7883a 	add	r3,r3,r3
  809fc0:	39cf883a 	add	r7,r7,r7
  809fc4:	10c7883a 	add	r3,r2,r3
  809fc8:	21cf883a 	add	r7,r4,r7
  809fcc:	10c00d2e 	bgeu	r2,r3,80a004 <__copybits+0x64>
  809fd0:	200b883a 	mov	r5,r4
  809fd4:	12000017 	ldw	r8,0(r2)
  809fd8:	29400104 	addi	r5,r5,4
  809fdc:	10800104 	addi	r2,r2,4
  809fe0:	2a3fff15 	stw	r8,-4(r5)
  809fe4:	10fffb36 	bltu	r2,r3,809fd4 <__alt_mem_onchip_mem+0xff789fd4>
  809fe8:	1985c83a 	sub	r2,r3,r6
  809fec:	10bffac4 	addi	r2,r2,-21
  809ff0:	1004d0ba 	srli	r2,r2,2
  809ff4:	10800044 	addi	r2,r2,1
  809ff8:	1085883a 	add	r2,r2,r2
  809ffc:	1085883a 	add	r2,r2,r2
  80a000:	2089883a 	add	r4,r4,r2
  80a004:	21c0032e 	bgeu	r4,r7,80a014 <__copybits+0x74>
  80a008:	20000015 	stw	zero,0(r4)
  80a00c:	21000104 	addi	r4,r4,4
  80a010:	21fffd36 	bltu	r4,r7,80a008 <__alt_mem_onchip_mem+0xff78a008>
  80a014:	f800283a 	ret

0080a018 <__any_on>:
  80a018:	20c00417 	ldw	r3,16(r4)
  80a01c:	2805d17a 	srai	r2,r5,5
  80a020:	21000504 	addi	r4,r4,20
  80a024:	18800d0e 	bge	r3,r2,80a05c <__any_on+0x44>
  80a028:	18c7883a 	add	r3,r3,r3
  80a02c:	18c7883a 	add	r3,r3,r3
  80a030:	20c7883a 	add	r3,r4,r3
  80a034:	20c0192e 	bgeu	r4,r3,80a09c <__any_on+0x84>
  80a038:	18bfff17 	ldw	r2,-4(r3)
  80a03c:	18ffff04 	addi	r3,r3,-4
  80a040:	1000041e 	bne	r2,zero,80a054 <__any_on+0x3c>
  80a044:	20c0142e 	bgeu	r4,r3,80a098 <__any_on+0x80>
  80a048:	18ffff04 	addi	r3,r3,-4
  80a04c:	19400017 	ldw	r5,0(r3)
  80a050:	283ffc26 	beq	r5,zero,80a044 <__alt_mem_onchip_mem+0xff78a044>
  80a054:	00800044 	movi	r2,1
  80a058:	f800283a 	ret
  80a05c:	10c00a0e 	bge	r2,r3,80a088 <__any_on+0x70>
  80a060:	1085883a 	add	r2,r2,r2
  80a064:	1085883a 	add	r2,r2,r2
  80a068:	294007cc 	andi	r5,r5,31
  80a06c:	2087883a 	add	r3,r4,r2
  80a070:	283ff026 	beq	r5,zero,80a034 <__alt_mem_onchip_mem+0xff78a034>
  80a074:	19800017 	ldw	r6,0(r3)
  80a078:	3144d83a 	srl	r2,r6,r5
  80a07c:	114a983a 	sll	r5,r2,r5
  80a080:	317ff41e 	bne	r6,r5,80a054 <__alt_mem_onchip_mem+0xff78a054>
  80a084:	003feb06 	br	80a034 <__alt_mem_onchip_mem+0xff78a034>
  80a088:	1085883a 	add	r2,r2,r2
  80a08c:	1085883a 	add	r2,r2,r2
  80a090:	2087883a 	add	r3,r4,r2
  80a094:	003fe706 	br	80a034 <__alt_mem_onchip_mem+0xff78a034>
  80a098:	f800283a 	ret
  80a09c:	0005883a 	mov	r2,zero
  80a0a0:	f800283a 	ret

0080a0a4 <_realloc_r>:
  80a0a4:	defff604 	addi	sp,sp,-40
  80a0a8:	dc800215 	stw	r18,8(sp)
  80a0ac:	dfc00915 	stw	ra,36(sp)
  80a0b0:	df000815 	stw	fp,32(sp)
  80a0b4:	ddc00715 	stw	r23,28(sp)
  80a0b8:	dd800615 	stw	r22,24(sp)
  80a0bc:	dd400515 	stw	r21,20(sp)
  80a0c0:	dd000415 	stw	r20,16(sp)
  80a0c4:	dcc00315 	stw	r19,12(sp)
  80a0c8:	dc400115 	stw	r17,4(sp)
  80a0cc:	dc000015 	stw	r16,0(sp)
  80a0d0:	3025883a 	mov	r18,r6
  80a0d4:	2800b726 	beq	r5,zero,80a3b4 <_realloc_r+0x310>
  80a0d8:	282b883a 	mov	r21,r5
  80a0dc:	2029883a 	mov	r20,r4
  80a0e0:	08100240 	call	810024 <__malloc_lock>
  80a0e4:	a8bfff17 	ldw	r2,-4(r21)
  80a0e8:	043fff04 	movi	r16,-4
  80a0ec:	90c002c4 	addi	r3,r18,11
  80a0f0:	01000584 	movi	r4,22
  80a0f4:	acfffe04 	addi	r19,r21,-8
  80a0f8:	1420703a 	and	r16,r2,r16
  80a0fc:	20c0332e 	bgeu	r4,r3,80a1cc <_realloc_r+0x128>
  80a100:	047ffe04 	movi	r17,-8
  80a104:	1c62703a 	and	r17,r3,r17
  80a108:	8807883a 	mov	r3,r17
  80a10c:	88005816 	blt	r17,zero,80a270 <_realloc_r+0x1cc>
  80a110:	8c805736 	bltu	r17,r18,80a270 <_realloc_r+0x1cc>
  80a114:	80c0300e 	bge	r16,r3,80a1d8 <_realloc_r+0x134>
  80a118:	07002074 	movhi	fp,129
  80a11c:	e7118f04 	addi	fp,fp,17980
  80a120:	e1c00217 	ldw	r7,8(fp)
  80a124:	9c09883a 	add	r4,r19,r16
  80a128:	22000117 	ldw	r8,4(r4)
  80a12c:	21c06326 	beq	r4,r7,80a2bc <_realloc_r+0x218>
  80a130:	017fff84 	movi	r5,-2
  80a134:	414a703a 	and	r5,r8,r5
  80a138:	214b883a 	add	r5,r4,r5
  80a13c:	29800117 	ldw	r6,4(r5)
  80a140:	3180004c 	andi	r6,r6,1
  80a144:	30003f26 	beq	r6,zero,80a244 <_realloc_r+0x1a0>
  80a148:	1080004c 	andi	r2,r2,1
  80a14c:	10008326 	beq	r2,zero,80a35c <_realloc_r+0x2b8>
  80a150:	900b883a 	mov	r5,r18
  80a154:	a009883a 	mov	r4,r20
  80a158:	08083ec0 	call	8083ec <_malloc_r>
  80a15c:	1025883a 	mov	r18,r2
  80a160:	10011e26 	beq	r2,zero,80a5dc <_realloc_r+0x538>
  80a164:	a93fff17 	ldw	r4,-4(r21)
  80a168:	10fffe04 	addi	r3,r2,-8
  80a16c:	00bfff84 	movi	r2,-2
  80a170:	2084703a 	and	r2,r4,r2
  80a174:	9885883a 	add	r2,r19,r2
  80a178:	1880ee26 	beq	r3,r2,80a534 <_realloc_r+0x490>
  80a17c:	81bfff04 	addi	r6,r16,-4
  80a180:	00800904 	movi	r2,36
  80a184:	1180b836 	bltu	r2,r6,80a468 <_realloc_r+0x3c4>
  80a188:	00c004c4 	movi	r3,19
  80a18c:	19809636 	bltu	r3,r6,80a3e8 <_realloc_r+0x344>
  80a190:	9005883a 	mov	r2,r18
  80a194:	a807883a 	mov	r3,r21
  80a198:	19000017 	ldw	r4,0(r3)
  80a19c:	11000015 	stw	r4,0(r2)
  80a1a0:	19000117 	ldw	r4,4(r3)
  80a1a4:	11000115 	stw	r4,4(r2)
  80a1a8:	18c00217 	ldw	r3,8(r3)
  80a1ac:	10c00215 	stw	r3,8(r2)
  80a1b0:	a80b883a 	mov	r5,r21
  80a1b4:	a009883a 	mov	r4,r20
  80a1b8:	08078000 	call	807800 <_free_r>
  80a1bc:	a009883a 	mov	r4,r20
  80a1c0:	08100480 	call	810048 <__malloc_unlock>
  80a1c4:	9005883a 	mov	r2,r18
  80a1c8:	00001206 	br	80a214 <_realloc_r+0x170>
  80a1cc:	00c00404 	movi	r3,16
  80a1d0:	1823883a 	mov	r17,r3
  80a1d4:	003fce06 	br	80a110 <__alt_mem_onchip_mem+0xff78a110>
  80a1d8:	a825883a 	mov	r18,r21
  80a1dc:	8445c83a 	sub	r2,r16,r17
  80a1e0:	00c003c4 	movi	r3,15
  80a1e4:	18802636 	bltu	r3,r2,80a280 <_realloc_r+0x1dc>
  80a1e8:	99800117 	ldw	r6,4(r19)
  80a1ec:	9c07883a 	add	r3,r19,r16
  80a1f0:	3180004c 	andi	r6,r6,1
  80a1f4:	3420b03a 	or	r16,r6,r16
  80a1f8:	9c000115 	stw	r16,4(r19)
  80a1fc:	18800117 	ldw	r2,4(r3)
  80a200:	10800054 	ori	r2,r2,1
  80a204:	18800115 	stw	r2,4(r3)
  80a208:	a009883a 	mov	r4,r20
  80a20c:	08100480 	call	810048 <__malloc_unlock>
  80a210:	9005883a 	mov	r2,r18
  80a214:	dfc00917 	ldw	ra,36(sp)
  80a218:	df000817 	ldw	fp,32(sp)
  80a21c:	ddc00717 	ldw	r23,28(sp)
  80a220:	dd800617 	ldw	r22,24(sp)
  80a224:	dd400517 	ldw	r21,20(sp)
  80a228:	dd000417 	ldw	r20,16(sp)
  80a22c:	dcc00317 	ldw	r19,12(sp)
  80a230:	dc800217 	ldw	r18,8(sp)
  80a234:	dc400117 	ldw	r17,4(sp)
  80a238:	dc000017 	ldw	r16,0(sp)
  80a23c:	dec00a04 	addi	sp,sp,40
  80a240:	f800283a 	ret
  80a244:	017fff04 	movi	r5,-4
  80a248:	414a703a 	and	r5,r8,r5
  80a24c:	814d883a 	add	r6,r16,r5
  80a250:	30c01f16 	blt	r6,r3,80a2d0 <_realloc_r+0x22c>
  80a254:	20800317 	ldw	r2,12(r4)
  80a258:	20c00217 	ldw	r3,8(r4)
  80a25c:	a825883a 	mov	r18,r21
  80a260:	3021883a 	mov	r16,r6
  80a264:	18800315 	stw	r2,12(r3)
  80a268:	10c00215 	stw	r3,8(r2)
  80a26c:	003fdb06 	br	80a1dc <__alt_mem_onchip_mem+0xff78a1dc>
  80a270:	00800304 	movi	r2,12
  80a274:	a0800015 	stw	r2,0(r20)
  80a278:	0005883a 	mov	r2,zero
  80a27c:	003fe506 	br	80a214 <__alt_mem_onchip_mem+0xff78a214>
  80a280:	98c00117 	ldw	r3,4(r19)
  80a284:	9c4b883a 	add	r5,r19,r17
  80a288:	11000054 	ori	r4,r2,1
  80a28c:	18c0004c 	andi	r3,r3,1
  80a290:	1c62b03a 	or	r17,r3,r17
  80a294:	9c400115 	stw	r17,4(r19)
  80a298:	29000115 	stw	r4,4(r5)
  80a29c:	2885883a 	add	r2,r5,r2
  80a2a0:	10c00117 	ldw	r3,4(r2)
  80a2a4:	29400204 	addi	r5,r5,8
  80a2a8:	a009883a 	mov	r4,r20
  80a2ac:	18c00054 	ori	r3,r3,1
  80a2b0:	10c00115 	stw	r3,4(r2)
  80a2b4:	08078000 	call	807800 <_free_r>
  80a2b8:	003fd306 	br	80a208 <__alt_mem_onchip_mem+0xff78a208>
  80a2bc:	017fff04 	movi	r5,-4
  80a2c0:	414a703a 	and	r5,r8,r5
  80a2c4:	89800404 	addi	r6,r17,16
  80a2c8:	8151883a 	add	r8,r16,r5
  80a2cc:	4180590e 	bge	r8,r6,80a434 <_realloc_r+0x390>
  80a2d0:	1080004c 	andi	r2,r2,1
  80a2d4:	103f9e1e 	bne	r2,zero,80a150 <__alt_mem_onchip_mem+0xff78a150>
  80a2d8:	adbffe17 	ldw	r22,-8(r21)
  80a2dc:	00bfff04 	movi	r2,-4
  80a2e0:	9dadc83a 	sub	r22,r19,r22
  80a2e4:	b1800117 	ldw	r6,4(r22)
  80a2e8:	3084703a 	and	r2,r6,r2
  80a2ec:	20002026 	beq	r4,zero,80a370 <_realloc_r+0x2cc>
  80a2f0:	80af883a 	add	r23,r16,r2
  80a2f4:	b96f883a 	add	r23,r23,r5
  80a2f8:	21c05f26 	beq	r4,r7,80a478 <_realloc_r+0x3d4>
  80a2fc:	b8c01c16 	blt	r23,r3,80a370 <_realloc_r+0x2cc>
  80a300:	20800317 	ldw	r2,12(r4)
  80a304:	20c00217 	ldw	r3,8(r4)
  80a308:	81bfff04 	addi	r6,r16,-4
  80a30c:	01000904 	movi	r4,36
  80a310:	18800315 	stw	r2,12(r3)
  80a314:	10c00215 	stw	r3,8(r2)
  80a318:	b0c00217 	ldw	r3,8(r22)
  80a31c:	b0800317 	ldw	r2,12(r22)
  80a320:	b4800204 	addi	r18,r22,8
  80a324:	18800315 	stw	r2,12(r3)
  80a328:	10c00215 	stw	r3,8(r2)
  80a32c:	21801b36 	bltu	r4,r6,80a39c <_realloc_r+0x2f8>
  80a330:	008004c4 	movi	r2,19
  80a334:	1180352e 	bgeu	r2,r6,80a40c <_realloc_r+0x368>
  80a338:	a8800017 	ldw	r2,0(r21)
  80a33c:	b0800215 	stw	r2,8(r22)
  80a340:	a8800117 	ldw	r2,4(r21)
  80a344:	b0800315 	stw	r2,12(r22)
  80a348:	008006c4 	movi	r2,27
  80a34c:	11807f36 	bltu	r2,r6,80a54c <_realloc_r+0x4a8>
  80a350:	b0800404 	addi	r2,r22,16
  80a354:	ad400204 	addi	r21,r21,8
  80a358:	00002d06 	br	80a410 <_realloc_r+0x36c>
  80a35c:	adbffe17 	ldw	r22,-8(r21)
  80a360:	00bfff04 	movi	r2,-4
  80a364:	9dadc83a 	sub	r22,r19,r22
  80a368:	b1000117 	ldw	r4,4(r22)
  80a36c:	2084703a 	and	r2,r4,r2
  80a370:	b03f7726 	beq	r22,zero,80a150 <__alt_mem_onchip_mem+0xff78a150>
  80a374:	80af883a 	add	r23,r16,r2
  80a378:	b8ff7516 	blt	r23,r3,80a150 <__alt_mem_onchip_mem+0xff78a150>
  80a37c:	b0800317 	ldw	r2,12(r22)
  80a380:	b0c00217 	ldw	r3,8(r22)
  80a384:	81bfff04 	addi	r6,r16,-4
  80a388:	01000904 	movi	r4,36
  80a38c:	18800315 	stw	r2,12(r3)
  80a390:	10c00215 	stw	r3,8(r2)
  80a394:	b4800204 	addi	r18,r22,8
  80a398:	21bfe52e 	bgeu	r4,r6,80a330 <__alt_mem_onchip_mem+0xff78a330>
  80a39c:	a80b883a 	mov	r5,r21
  80a3a0:	9009883a 	mov	r4,r18
  80a3a4:	0808e240 	call	808e24 <memmove>
  80a3a8:	b821883a 	mov	r16,r23
  80a3ac:	b027883a 	mov	r19,r22
  80a3b0:	003f8a06 	br	80a1dc <__alt_mem_onchip_mem+0xff78a1dc>
  80a3b4:	300b883a 	mov	r5,r6
  80a3b8:	dfc00917 	ldw	ra,36(sp)
  80a3bc:	df000817 	ldw	fp,32(sp)
  80a3c0:	ddc00717 	ldw	r23,28(sp)
  80a3c4:	dd800617 	ldw	r22,24(sp)
  80a3c8:	dd400517 	ldw	r21,20(sp)
  80a3cc:	dd000417 	ldw	r20,16(sp)
  80a3d0:	dcc00317 	ldw	r19,12(sp)
  80a3d4:	dc800217 	ldw	r18,8(sp)
  80a3d8:	dc400117 	ldw	r17,4(sp)
  80a3dc:	dc000017 	ldw	r16,0(sp)
  80a3e0:	dec00a04 	addi	sp,sp,40
  80a3e4:	08083ec1 	jmpi	8083ec <_malloc_r>
  80a3e8:	a8c00017 	ldw	r3,0(r21)
  80a3ec:	90c00015 	stw	r3,0(r18)
  80a3f0:	a8c00117 	ldw	r3,4(r21)
  80a3f4:	90c00115 	stw	r3,4(r18)
  80a3f8:	00c006c4 	movi	r3,27
  80a3fc:	19804536 	bltu	r3,r6,80a514 <_realloc_r+0x470>
  80a400:	90800204 	addi	r2,r18,8
  80a404:	a8c00204 	addi	r3,r21,8
  80a408:	003f6306 	br	80a198 <__alt_mem_onchip_mem+0xff78a198>
  80a40c:	9005883a 	mov	r2,r18
  80a410:	a8c00017 	ldw	r3,0(r21)
  80a414:	b821883a 	mov	r16,r23
  80a418:	b027883a 	mov	r19,r22
  80a41c:	10c00015 	stw	r3,0(r2)
  80a420:	a8c00117 	ldw	r3,4(r21)
  80a424:	10c00115 	stw	r3,4(r2)
  80a428:	a8c00217 	ldw	r3,8(r21)
  80a42c:	10c00215 	stw	r3,8(r2)
  80a430:	003f6a06 	br	80a1dc <__alt_mem_onchip_mem+0xff78a1dc>
  80a434:	9c67883a 	add	r19,r19,r17
  80a438:	4445c83a 	sub	r2,r8,r17
  80a43c:	e4c00215 	stw	r19,8(fp)
  80a440:	10800054 	ori	r2,r2,1
  80a444:	98800115 	stw	r2,4(r19)
  80a448:	a8bfff17 	ldw	r2,-4(r21)
  80a44c:	a009883a 	mov	r4,r20
  80a450:	1080004c 	andi	r2,r2,1
  80a454:	1462b03a 	or	r17,r2,r17
  80a458:	ac7fff15 	stw	r17,-4(r21)
  80a45c:	08100480 	call	810048 <__malloc_unlock>
  80a460:	a805883a 	mov	r2,r21
  80a464:	003f6b06 	br	80a214 <__alt_mem_onchip_mem+0xff78a214>
  80a468:	a80b883a 	mov	r5,r21
  80a46c:	9009883a 	mov	r4,r18
  80a470:	0808e240 	call	808e24 <memmove>
  80a474:	003f4e06 	br	80a1b0 <__alt_mem_onchip_mem+0xff78a1b0>
  80a478:	89000404 	addi	r4,r17,16
  80a47c:	b93fbc16 	blt	r23,r4,80a370 <__alt_mem_onchip_mem+0xff78a370>
  80a480:	b0800317 	ldw	r2,12(r22)
  80a484:	b0c00217 	ldw	r3,8(r22)
  80a488:	81bfff04 	addi	r6,r16,-4
  80a48c:	01000904 	movi	r4,36
  80a490:	18800315 	stw	r2,12(r3)
  80a494:	10c00215 	stw	r3,8(r2)
  80a498:	b4800204 	addi	r18,r22,8
  80a49c:	21804336 	bltu	r4,r6,80a5ac <_realloc_r+0x508>
  80a4a0:	008004c4 	movi	r2,19
  80a4a4:	11803f2e 	bgeu	r2,r6,80a5a4 <_realloc_r+0x500>
  80a4a8:	a8800017 	ldw	r2,0(r21)
  80a4ac:	b0800215 	stw	r2,8(r22)
  80a4b0:	a8800117 	ldw	r2,4(r21)
  80a4b4:	b0800315 	stw	r2,12(r22)
  80a4b8:	008006c4 	movi	r2,27
  80a4bc:	11803f36 	bltu	r2,r6,80a5bc <_realloc_r+0x518>
  80a4c0:	b0800404 	addi	r2,r22,16
  80a4c4:	ad400204 	addi	r21,r21,8
  80a4c8:	a8c00017 	ldw	r3,0(r21)
  80a4cc:	10c00015 	stw	r3,0(r2)
  80a4d0:	a8c00117 	ldw	r3,4(r21)
  80a4d4:	10c00115 	stw	r3,4(r2)
  80a4d8:	a8c00217 	ldw	r3,8(r21)
  80a4dc:	10c00215 	stw	r3,8(r2)
  80a4e0:	b447883a 	add	r3,r22,r17
  80a4e4:	bc45c83a 	sub	r2,r23,r17
  80a4e8:	e0c00215 	stw	r3,8(fp)
  80a4ec:	10800054 	ori	r2,r2,1
  80a4f0:	18800115 	stw	r2,4(r3)
  80a4f4:	b0800117 	ldw	r2,4(r22)
  80a4f8:	a009883a 	mov	r4,r20
  80a4fc:	1080004c 	andi	r2,r2,1
  80a500:	1462b03a 	or	r17,r2,r17
  80a504:	b4400115 	stw	r17,4(r22)
  80a508:	08100480 	call	810048 <__malloc_unlock>
  80a50c:	9005883a 	mov	r2,r18
  80a510:	003f4006 	br	80a214 <__alt_mem_onchip_mem+0xff78a214>
  80a514:	a8c00217 	ldw	r3,8(r21)
  80a518:	90c00215 	stw	r3,8(r18)
  80a51c:	a8c00317 	ldw	r3,12(r21)
  80a520:	90c00315 	stw	r3,12(r18)
  80a524:	30801126 	beq	r6,r2,80a56c <_realloc_r+0x4c8>
  80a528:	90800404 	addi	r2,r18,16
  80a52c:	a8c00404 	addi	r3,r21,16
  80a530:	003f1906 	br	80a198 <__alt_mem_onchip_mem+0xff78a198>
  80a534:	90ffff17 	ldw	r3,-4(r18)
  80a538:	00bfff04 	movi	r2,-4
  80a53c:	a825883a 	mov	r18,r21
  80a540:	1884703a 	and	r2,r3,r2
  80a544:	80a1883a 	add	r16,r16,r2
  80a548:	003f2406 	br	80a1dc <__alt_mem_onchip_mem+0xff78a1dc>
  80a54c:	a8800217 	ldw	r2,8(r21)
  80a550:	b0800415 	stw	r2,16(r22)
  80a554:	a8800317 	ldw	r2,12(r21)
  80a558:	b0800515 	stw	r2,20(r22)
  80a55c:	31000a26 	beq	r6,r4,80a588 <_realloc_r+0x4e4>
  80a560:	b0800604 	addi	r2,r22,24
  80a564:	ad400404 	addi	r21,r21,16
  80a568:	003fa906 	br	80a410 <__alt_mem_onchip_mem+0xff78a410>
  80a56c:	a9000417 	ldw	r4,16(r21)
  80a570:	90800604 	addi	r2,r18,24
  80a574:	a8c00604 	addi	r3,r21,24
  80a578:	91000415 	stw	r4,16(r18)
  80a57c:	a9000517 	ldw	r4,20(r21)
  80a580:	91000515 	stw	r4,20(r18)
  80a584:	003f0406 	br	80a198 <__alt_mem_onchip_mem+0xff78a198>
  80a588:	a8c00417 	ldw	r3,16(r21)
  80a58c:	ad400604 	addi	r21,r21,24
  80a590:	b0800804 	addi	r2,r22,32
  80a594:	b0c00615 	stw	r3,24(r22)
  80a598:	a8ffff17 	ldw	r3,-4(r21)
  80a59c:	b0c00715 	stw	r3,28(r22)
  80a5a0:	003f9b06 	br	80a410 <__alt_mem_onchip_mem+0xff78a410>
  80a5a4:	9005883a 	mov	r2,r18
  80a5a8:	003fc706 	br	80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>
  80a5ac:	a80b883a 	mov	r5,r21
  80a5b0:	9009883a 	mov	r4,r18
  80a5b4:	0808e240 	call	808e24 <memmove>
  80a5b8:	003fc906 	br	80a4e0 <__alt_mem_onchip_mem+0xff78a4e0>
  80a5bc:	a8800217 	ldw	r2,8(r21)
  80a5c0:	b0800415 	stw	r2,16(r22)
  80a5c4:	a8800317 	ldw	r2,12(r21)
  80a5c8:	b0800515 	stw	r2,20(r22)
  80a5cc:	31000726 	beq	r6,r4,80a5ec <_realloc_r+0x548>
  80a5d0:	b0800604 	addi	r2,r22,24
  80a5d4:	ad400404 	addi	r21,r21,16
  80a5d8:	003fbb06 	br	80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>
  80a5dc:	a009883a 	mov	r4,r20
  80a5e0:	08100480 	call	810048 <__malloc_unlock>
  80a5e4:	0005883a 	mov	r2,zero
  80a5e8:	003f0a06 	br	80a214 <__alt_mem_onchip_mem+0xff78a214>
  80a5ec:	a8c00417 	ldw	r3,16(r21)
  80a5f0:	ad400604 	addi	r21,r21,24
  80a5f4:	b0800804 	addi	r2,r22,32
  80a5f8:	b0c00615 	stw	r3,24(r22)
  80a5fc:	a8ffff17 	ldw	r3,-4(r21)
  80a600:	b0c00715 	stw	r3,28(r22)
  80a604:	003fb006 	br	80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>

0080a608 <__fpclassifyd>:
  80a608:	00a00034 	movhi	r2,32768
  80a60c:	10bfffc4 	addi	r2,r2,-1
  80a610:	2884703a 	and	r2,r5,r2
  80a614:	10000726 	beq	r2,zero,80a634 <__fpclassifyd+0x2c>
  80a618:	00fffc34 	movhi	r3,65520
  80a61c:	019ff834 	movhi	r6,32736
  80a620:	28c7883a 	add	r3,r5,r3
  80a624:	31bfffc4 	addi	r6,r6,-1
  80a628:	30c00536 	bltu	r6,r3,80a640 <__fpclassifyd+0x38>
  80a62c:	00800104 	movi	r2,4
  80a630:	f800283a 	ret
  80a634:	2000021e 	bne	r4,zero,80a640 <__fpclassifyd+0x38>
  80a638:	00800084 	movi	r2,2
  80a63c:	f800283a 	ret
  80a640:	00dffc34 	movhi	r3,32752
  80a644:	019ff834 	movhi	r6,32736
  80a648:	28cb883a 	add	r5,r5,r3
  80a64c:	31bfffc4 	addi	r6,r6,-1
  80a650:	317ff62e 	bgeu	r6,r5,80a62c <__alt_mem_onchip_mem+0xff78a62c>
  80a654:	01400434 	movhi	r5,16
  80a658:	297fffc4 	addi	r5,r5,-1
  80a65c:	28800236 	bltu	r5,r2,80a668 <__fpclassifyd+0x60>
  80a660:	008000c4 	movi	r2,3
  80a664:	f800283a 	ret
  80a668:	10c00226 	beq	r2,r3,80a674 <__fpclassifyd+0x6c>
  80a66c:	0005883a 	mov	r2,zero
  80a670:	f800283a 	ret
  80a674:	2005003a 	cmpeq	r2,r4,zero
  80a678:	f800283a 	ret

0080a67c <_sbrk_r>:
  80a67c:	defffd04 	addi	sp,sp,-12
  80a680:	dc000015 	stw	r16,0(sp)
  80a684:	04002074 	movhi	r16,129
  80a688:	dc400115 	stw	r17,4(sp)
  80a68c:	841f3304 	addi	r16,r16,31948
  80a690:	2023883a 	mov	r17,r4
  80a694:	2809883a 	mov	r4,r5
  80a698:	dfc00215 	stw	ra,8(sp)
  80a69c:	80000015 	stw	zero,0(r16)
  80a6a0:	08102080 	call	810208 <sbrk>
  80a6a4:	00ffffc4 	movi	r3,-1
  80a6a8:	10c00526 	beq	r2,r3,80a6c0 <_sbrk_r+0x44>
  80a6ac:	dfc00217 	ldw	ra,8(sp)
  80a6b0:	dc400117 	ldw	r17,4(sp)
  80a6b4:	dc000017 	ldw	r16,0(sp)
  80a6b8:	dec00304 	addi	sp,sp,12
  80a6bc:	f800283a 	ret
  80a6c0:	80c00017 	ldw	r3,0(r16)
  80a6c4:	183ff926 	beq	r3,zero,80a6ac <__alt_mem_onchip_mem+0xff78a6ac>
  80a6c8:	88c00015 	stw	r3,0(r17)
  80a6cc:	003ff706 	br	80a6ac <__alt_mem_onchip_mem+0xff78a6ac>

0080a6d0 <__sread>:
  80a6d0:	defffe04 	addi	sp,sp,-8
  80a6d4:	dc000015 	stw	r16,0(sp)
  80a6d8:	2821883a 	mov	r16,r5
  80a6dc:	2940038f 	ldh	r5,14(r5)
  80a6e0:	dfc00115 	stw	ra,4(sp)
  80a6e4:	080c4c40 	call	80c4c4 <_read_r>
  80a6e8:	10000716 	blt	r2,zero,80a708 <__sread+0x38>
  80a6ec:	80c01417 	ldw	r3,80(r16)
  80a6f0:	1887883a 	add	r3,r3,r2
  80a6f4:	80c01415 	stw	r3,80(r16)
  80a6f8:	dfc00117 	ldw	ra,4(sp)
  80a6fc:	dc000017 	ldw	r16,0(sp)
  80a700:	dec00204 	addi	sp,sp,8
  80a704:	f800283a 	ret
  80a708:	80c0030b 	ldhu	r3,12(r16)
  80a70c:	18fbffcc 	andi	r3,r3,61439
  80a710:	80c0030d 	sth	r3,12(r16)
  80a714:	dfc00117 	ldw	ra,4(sp)
  80a718:	dc000017 	ldw	r16,0(sp)
  80a71c:	dec00204 	addi	sp,sp,8
  80a720:	f800283a 	ret

0080a724 <__seofread>:
  80a724:	0005883a 	mov	r2,zero
  80a728:	f800283a 	ret

0080a72c <__swrite>:
  80a72c:	2880030b 	ldhu	r2,12(r5)
  80a730:	defffb04 	addi	sp,sp,-20
  80a734:	dcc00315 	stw	r19,12(sp)
  80a738:	dc800215 	stw	r18,8(sp)
  80a73c:	dc400115 	stw	r17,4(sp)
  80a740:	dc000015 	stw	r16,0(sp)
  80a744:	dfc00415 	stw	ra,16(sp)
  80a748:	10c0400c 	andi	r3,r2,256
  80a74c:	2821883a 	mov	r16,r5
  80a750:	2023883a 	mov	r17,r4
  80a754:	3025883a 	mov	r18,r6
  80a758:	3827883a 	mov	r19,r7
  80a75c:	18000526 	beq	r3,zero,80a774 <__swrite+0x48>
  80a760:	2940038f 	ldh	r5,14(r5)
  80a764:	01c00084 	movi	r7,2
  80a768:	000d883a 	mov	r6,zero
  80a76c:	080c4640 	call	80c464 <_lseek_r>
  80a770:	8080030b 	ldhu	r2,12(r16)
  80a774:	8140038f 	ldh	r5,14(r16)
  80a778:	10bbffcc 	andi	r2,r2,61439
  80a77c:	980f883a 	mov	r7,r19
  80a780:	900d883a 	mov	r6,r18
  80a784:	8809883a 	mov	r4,r17
  80a788:	8080030d 	sth	r2,12(r16)
  80a78c:	dfc00417 	ldw	ra,16(sp)
  80a790:	dcc00317 	ldw	r19,12(sp)
  80a794:	dc800217 	ldw	r18,8(sp)
  80a798:	dc400117 	ldw	r17,4(sp)
  80a79c:	dc000017 	ldw	r16,0(sp)
  80a7a0:	dec00504 	addi	sp,sp,20
  80a7a4:	080bf301 	jmpi	80bf30 <_write_r>

0080a7a8 <__sseek>:
  80a7a8:	defffe04 	addi	sp,sp,-8
  80a7ac:	dc000015 	stw	r16,0(sp)
  80a7b0:	2821883a 	mov	r16,r5
  80a7b4:	2940038f 	ldh	r5,14(r5)
  80a7b8:	dfc00115 	stw	ra,4(sp)
  80a7bc:	080c4640 	call	80c464 <_lseek_r>
  80a7c0:	00ffffc4 	movi	r3,-1
  80a7c4:	10c00826 	beq	r2,r3,80a7e8 <__sseek+0x40>
  80a7c8:	80c0030b 	ldhu	r3,12(r16)
  80a7cc:	80801415 	stw	r2,80(r16)
  80a7d0:	18c40014 	ori	r3,r3,4096
  80a7d4:	80c0030d 	sth	r3,12(r16)
  80a7d8:	dfc00117 	ldw	ra,4(sp)
  80a7dc:	dc000017 	ldw	r16,0(sp)
  80a7e0:	dec00204 	addi	sp,sp,8
  80a7e4:	f800283a 	ret
  80a7e8:	80c0030b 	ldhu	r3,12(r16)
  80a7ec:	18fbffcc 	andi	r3,r3,61439
  80a7f0:	80c0030d 	sth	r3,12(r16)
  80a7f4:	dfc00117 	ldw	ra,4(sp)
  80a7f8:	dc000017 	ldw	r16,0(sp)
  80a7fc:	dec00204 	addi	sp,sp,8
  80a800:	f800283a 	ret

0080a804 <__sclose>:
  80a804:	2940038f 	ldh	r5,14(r5)
  80a808:	080bf901 	jmpi	80bf90 <_close_r>

0080a80c <strcmp>:
  80a80c:	2144b03a 	or	r2,r4,r5
  80a810:	108000cc 	andi	r2,r2,3
  80a814:	1000171e 	bne	r2,zero,80a874 <strcmp+0x68>
  80a818:	20800017 	ldw	r2,0(r4)
  80a81c:	28c00017 	ldw	r3,0(r5)
  80a820:	10c0141e 	bne	r2,r3,80a874 <strcmp+0x68>
  80a824:	027fbff4 	movhi	r9,65279
  80a828:	4a7fbfc4 	addi	r9,r9,-257
  80a82c:	0086303a 	nor	r3,zero,r2
  80a830:	02202074 	movhi	r8,32897
  80a834:	1245883a 	add	r2,r2,r9
  80a838:	42202004 	addi	r8,r8,-32640
  80a83c:	10c4703a 	and	r2,r2,r3
  80a840:	1204703a 	and	r2,r2,r8
  80a844:	10000226 	beq	r2,zero,80a850 <strcmp+0x44>
  80a848:	00002306 	br	80a8d8 <strcmp+0xcc>
  80a84c:	1000221e 	bne	r2,zero,80a8d8 <strcmp+0xcc>
  80a850:	21000104 	addi	r4,r4,4
  80a854:	20c00017 	ldw	r3,0(r4)
  80a858:	29400104 	addi	r5,r5,4
  80a85c:	29800017 	ldw	r6,0(r5)
  80a860:	1a4f883a 	add	r7,r3,r9
  80a864:	00c4303a 	nor	r2,zero,r3
  80a868:	3884703a 	and	r2,r7,r2
  80a86c:	1204703a 	and	r2,r2,r8
  80a870:	19bff626 	beq	r3,r6,80a84c <__alt_mem_onchip_mem+0xff78a84c>
  80a874:	20800003 	ldbu	r2,0(r4)
  80a878:	10c03fcc 	andi	r3,r2,255
  80a87c:	18c0201c 	xori	r3,r3,128
  80a880:	18ffe004 	addi	r3,r3,-128
  80a884:	18000c26 	beq	r3,zero,80a8b8 <strcmp+0xac>
  80a888:	29800007 	ldb	r6,0(r5)
  80a88c:	19800326 	beq	r3,r6,80a89c <strcmp+0x90>
  80a890:	00001306 	br	80a8e0 <strcmp+0xd4>
  80a894:	29800007 	ldb	r6,0(r5)
  80a898:	11800b1e 	bne	r2,r6,80a8c8 <strcmp+0xbc>
  80a89c:	21000044 	addi	r4,r4,1
  80a8a0:	20c00003 	ldbu	r3,0(r4)
  80a8a4:	29400044 	addi	r5,r5,1
  80a8a8:	18803fcc 	andi	r2,r3,255
  80a8ac:	1080201c 	xori	r2,r2,128
  80a8b0:	10bfe004 	addi	r2,r2,-128
  80a8b4:	103ff71e 	bne	r2,zero,80a894 <__alt_mem_onchip_mem+0xff78a894>
  80a8b8:	0007883a 	mov	r3,zero
  80a8bc:	28800003 	ldbu	r2,0(r5)
  80a8c0:	1885c83a 	sub	r2,r3,r2
  80a8c4:	f800283a 	ret
  80a8c8:	28800003 	ldbu	r2,0(r5)
  80a8cc:	18c03fcc 	andi	r3,r3,255
  80a8d0:	1885c83a 	sub	r2,r3,r2
  80a8d4:	f800283a 	ret
  80a8d8:	0005883a 	mov	r2,zero
  80a8dc:	f800283a 	ret
  80a8e0:	10c03fcc 	andi	r3,r2,255
  80a8e4:	003ff506 	br	80a8bc <__alt_mem_onchip_mem+0xff78a8bc>

0080a8e8 <__sprint_r.part.0>:
  80a8e8:	28801917 	ldw	r2,100(r5)
  80a8ec:	defff604 	addi	sp,sp,-40
  80a8f0:	dd400515 	stw	r21,20(sp)
  80a8f4:	dfc00915 	stw	ra,36(sp)
  80a8f8:	df000815 	stw	fp,32(sp)
  80a8fc:	ddc00715 	stw	r23,28(sp)
  80a900:	dd800615 	stw	r22,24(sp)
  80a904:	dd000415 	stw	r20,16(sp)
  80a908:	dcc00315 	stw	r19,12(sp)
  80a90c:	dc800215 	stw	r18,8(sp)
  80a910:	dc400115 	stw	r17,4(sp)
  80a914:	dc000015 	stw	r16,0(sp)
  80a918:	1088000c 	andi	r2,r2,8192
  80a91c:	302b883a 	mov	r21,r6
  80a920:	10002e26 	beq	r2,zero,80a9dc <__sprint_r.part.0+0xf4>
  80a924:	30800217 	ldw	r2,8(r6)
  80a928:	35800017 	ldw	r22,0(r6)
  80a92c:	10002926 	beq	r2,zero,80a9d4 <__sprint_r.part.0+0xec>
  80a930:	2827883a 	mov	r19,r5
  80a934:	2029883a 	mov	r20,r4
  80a938:	b5c00104 	addi	r23,r22,4
  80a93c:	04bfffc4 	movi	r18,-1
  80a940:	bc400017 	ldw	r17,0(r23)
  80a944:	b4000017 	ldw	r16,0(r22)
  80a948:	0039883a 	mov	fp,zero
  80a94c:	8822d0ba 	srli	r17,r17,2
  80a950:	8800031e 	bne	r17,zero,80a960 <__sprint_r.part.0+0x78>
  80a954:	00001806 	br	80a9b8 <__sprint_r.part.0+0xd0>
  80a958:	84000104 	addi	r16,r16,4
  80a95c:	8f001526 	beq	r17,fp,80a9b4 <__sprint_r.part.0+0xcc>
  80a960:	81400017 	ldw	r5,0(r16)
  80a964:	980d883a 	mov	r6,r19
  80a968:	a009883a 	mov	r4,r20
  80a96c:	080c3100 	call	80c310 <_fputwc_r>
  80a970:	e7000044 	addi	fp,fp,1
  80a974:	14bff81e 	bne	r2,r18,80a958 <__alt_mem_onchip_mem+0xff78a958>
  80a978:	9005883a 	mov	r2,r18
  80a97c:	a8000215 	stw	zero,8(r21)
  80a980:	a8000115 	stw	zero,4(r21)
  80a984:	dfc00917 	ldw	ra,36(sp)
  80a988:	df000817 	ldw	fp,32(sp)
  80a98c:	ddc00717 	ldw	r23,28(sp)
  80a990:	dd800617 	ldw	r22,24(sp)
  80a994:	dd400517 	ldw	r21,20(sp)
  80a998:	dd000417 	ldw	r20,16(sp)
  80a99c:	dcc00317 	ldw	r19,12(sp)
  80a9a0:	dc800217 	ldw	r18,8(sp)
  80a9a4:	dc400117 	ldw	r17,4(sp)
  80a9a8:	dc000017 	ldw	r16,0(sp)
  80a9ac:	dec00a04 	addi	sp,sp,40
  80a9b0:	f800283a 	ret
  80a9b4:	a8800217 	ldw	r2,8(r21)
  80a9b8:	8c63883a 	add	r17,r17,r17
  80a9bc:	8c63883a 	add	r17,r17,r17
  80a9c0:	1445c83a 	sub	r2,r2,r17
  80a9c4:	a8800215 	stw	r2,8(r21)
  80a9c8:	b5800204 	addi	r22,r22,8
  80a9cc:	bdc00204 	addi	r23,r23,8
  80a9d0:	103fdb1e 	bne	r2,zero,80a940 <__alt_mem_onchip_mem+0xff78a940>
  80a9d4:	0005883a 	mov	r2,zero
  80a9d8:	003fe806 	br	80a97c <__alt_mem_onchip_mem+0xff78a97c>
  80a9dc:	0807b100 	call	807b10 <__sfvwrite_r>
  80a9e0:	003fe606 	br	80a97c <__alt_mem_onchip_mem+0xff78a97c>

0080a9e4 <__sprint_r>:
  80a9e4:	30c00217 	ldw	r3,8(r6)
  80a9e8:	18000126 	beq	r3,zero,80a9f0 <__sprint_r+0xc>
  80a9ec:	080a8e81 	jmpi	80a8e8 <__sprint_r.part.0>
  80a9f0:	30000115 	stw	zero,4(r6)
  80a9f4:	0005883a 	mov	r2,zero
  80a9f8:	f800283a 	ret

0080a9fc <___vfiprintf_internal_r>:
  80a9fc:	deffc904 	addi	sp,sp,-220
  80aa00:	df003515 	stw	fp,212(sp)
  80aa04:	dd003115 	stw	r20,196(sp)
  80aa08:	dfc03615 	stw	ra,216(sp)
  80aa0c:	ddc03415 	stw	r23,208(sp)
  80aa10:	dd803315 	stw	r22,204(sp)
  80aa14:	dd403215 	stw	r21,200(sp)
  80aa18:	dcc03015 	stw	r19,192(sp)
  80aa1c:	dc802f15 	stw	r18,188(sp)
  80aa20:	dc402e15 	stw	r17,184(sp)
  80aa24:	dc002d15 	stw	r16,180(sp)
  80aa28:	d9002015 	stw	r4,128(sp)
  80aa2c:	d9c02215 	stw	r7,136(sp)
  80aa30:	2829883a 	mov	r20,r5
  80aa34:	3039883a 	mov	fp,r6
  80aa38:	20000226 	beq	r4,zero,80aa44 <___vfiprintf_internal_r+0x48>
  80aa3c:	20800e17 	ldw	r2,56(r4)
  80aa40:	1000cf26 	beq	r2,zero,80ad80 <___vfiprintf_internal_r+0x384>
  80aa44:	a080030b 	ldhu	r2,12(r20)
  80aa48:	10c8000c 	andi	r3,r2,8192
  80aa4c:	1800061e 	bne	r3,zero,80aa68 <___vfiprintf_internal_r+0x6c>
  80aa50:	a1001917 	ldw	r4,100(r20)
  80aa54:	00f7ffc4 	movi	r3,-8193
  80aa58:	10880014 	ori	r2,r2,8192
  80aa5c:	20c6703a 	and	r3,r4,r3
  80aa60:	a080030d 	sth	r2,12(r20)
  80aa64:	a0c01915 	stw	r3,100(r20)
  80aa68:	10c0020c 	andi	r3,r2,8
  80aa6c:	1800a926 	beq	r3,zero,80ad14 <___vfiprintf_internal_r+0x318>
  80aa70:	a0c00417 	ldw	r3,16(r20)
  80aa74:	1800a726 	beq	r3,zero,80ad14 <___vfiprintf_internal_r+0x318>
  80aa78:	1080068c 	andi	r2,r2,26
  80aa7c:	00c00284 	movi	r3,10
  80aa80:	10c0ac26 	beq	r2,r3,80ad34 <___vfiprintf_internal_r+0x338>
  80aa84:	da801a04 	addi	r10,sp,104
  80aa88:	da801e15 	stw	r10,120(sp)
  80aa8c:	d8801e17 	ldw	r2,120(sp)
  80aa90:	da8019c4 	addi	r10,sp,103
  80aa94:	05802074 	movhi	r22,129
  80aa98:	05c02074 	movhi	r23,129
  80aa9c:	da801f15 	stw	r10,124(sp)
  80aaa0:	1295c83a 	sub	r10,r2,r10
  80aaa4:	b58f7304 	addi	r22,r22,15820
  80aaa8:	bdcf6f04 	addi	r23,r23,15804
  80aaac:	dec01a15 	stw	sp,104(sp)
  80aab0:	d8001c15 	stw	zero,112(sp)
  80aab4:	d8001b15 	stw	zero,108(sp)
  80aab8:	d8002615 	stw	zero,152(sp)
  80aabc:	d8002315 	stw	zero,140(sp)
  80aac0:	da802715 	stw	r10,156(sp)
  80aac4:	d811883a 	mov	r8,sp
  80aac8:	dd002115 	stw	r20,132(sp)
  80aacc:	e021883a 	mov	r16,fp
  80aad0:	80800007 	ldb	r2,0(r16)
  80aad4:	1003ea26 	beq	r2,zero,80ba80 <___vfiprintf_internal_r+0x1084>
  80aad8:	00c00944 	movi	r3,37
  80aadc:	8025883a 	mov	r18,r16
  80aae0:	10c0021e 	bne	r2,r3,80aaec <___vfiprintf_internal_r+0xf0>
  80aae4:	00001606 	br	80ab40 <___vfiprintf_internal_r+0x144>
  80aae8:	10c00326 	beq	r2,r3,80aaf8 <___vfiprintf_internal_r+0xfc>
  80aaec:	94800044 	addi	r18,r18,1
  80aaf0:	90800007 	ldb	r2,0(r18)
  80aaf4:	103ffc1e 	bne	r2,zero,80aae8 <__alt_mem_onchip_mem+0xff78aae8>
  80aaf8:	9423c83a 	sub	r17,r18,r16
  80aafc:	88001026 	beq	r17,zero,80ab40 <___vfiprintf_internal_r+0x144>
  80ab00:	d8c01c17 	ldw	r3,112(sp)
  80ab04:	d8801b17 	ldw	r2,108(sp)
  80ab08:	44000015 	stw	r16,0(r8)
  80ab0c:	88c7883a 	add	r3,r17,r3
  80ab10:	10800044 	addi	r2,r2,1
  80ab14:	44400115 	stw	r17,4(r8)
  80ab18:	d8c01c15 	stw	r3,112(sp)
  80ab1c:	d8801b15 	stw	r2,108(sp)
  80ab20:	010001c4 	movi	r4,7
  80ab24:	2080760e 	bge	r4,r2,80ad00 <___vfiprintf_internal_r+0x304>
  80ab28:	1803821e 	bne	r3,zero,80b934 <___vfiprintf_internal_r+0xf38>
  80ab2c:	da802317 	ldw	r10,140(sp)
  80ab30:	d8001b15 	stw	zero,108(sp)
  80ab34:	d811883a 	mov	r8,sp
  80ab38:	5455883a 	add	r10,r10,r17
  80ab3c:	da802315 	stw	r10,140(sp)
  80ab40:	90800007 	ldb	r2,0(r18)
  80ab44:	10044626 	beq	r2,zero,80bc60 <___vfiprintf_internal_r+0x1264>
  80ab48:	90c00047 	ldb	r3,1(r18)
  80ab4c:	94000044 	addi	r16,r18,1
  80ab50:	d8001d85 	stb	zero,118(sp)
  80ab54:	0009883a 	mov	r4,zero
  80ab58:	000f883a 	mov	r7,zero
  80ab5c:	027fffc4 	movi	r9,-1
  80ab60:	0023883a 	mov	r17,zero
  80ab64:	0029883a 	mov	r20,zero
  80ab68:	01401604 	movi	r5,88
  80ab6c:	01800244 	movi	r6,9
  80ab70:	03400a84 	movi	r13,42
  80ab74:	03001b04 	movi	r12,108
  80ab78:	84000044 	addi	r16,r16,1
  80ab7c:	18bff804 	addi	r2,r3,-32
  80ab80:	28827336 	bltu	r5,r2,80b550 <___vfiprintf_internal_r+0xb54>
  80ab84:	100490ba 	slli	r2,r2,2
  80ab88:	02802074 	movhi	r10,129
  80ab8c:	52aae704 	addi	r10,r10,-21604
  80ab90:	1285883a 	add	r2,r2,r10
  80ab94:	10800017 	ldw	r2,0(r2)
  80ab98:	1000683a 	jmp	r2
  80ab9c:	0080b284 	movi	r2,714
  80aba0:	0080b550 	cmplti	r2,zero,725
  80aba4:	0080b550 	cmplti	r2,zero,725
  80aba8:	0080b2a4 	muli	r2,zero,714
  80abac:	0080b550 	cmplti	r2,zero,725
  80abb0:	0080b550 	cmplti	r2,zero,725
  80abb4:	0080b550 	cmplti	r2,zero,725
  80abb8:	0080b550 	cmplti	r2,zero,725
  80abbc:	0080b550 	cmplti	r2,zero,725
  80abc0:	0080b550 	cmplti	r2,zero,725
  80abc4:	0080b48c 	andi	r2,zero,722
  80abc8:	0080b4a8 	cmpgeui	r2,zero,722
  80abcc:	0080b550 	cmplti	r2,zero,725
  80abd0:	0080ad90 	cmplti	r2,zero,694
  80abd4:	0080b4b8 	rdprs	r2,zero,722
  80abd8:	0080b550 	cmplti	r2,zero,725
  80abdc:	0080b2b0 	cmpltui	r2,zero,714
  80abe0:	0080b2bc 	xorhi	r2,zero,714
  80abe4:	0080b2bc 	xorhi	r2,zero,714
  80abe8:	0080b2bc 	xorhi	r2,zero,714
  80abec:	0080b2bc 	xorhi	r2,zero,714
  80abf0:	0080b2bc 	xorhi	r2,zero,714
  80abf4:	0080b2bc 	xorhi	r2,zero,714
  80abf8:	0080b2bc 	xorhi	r2,zero,714
  80abfc:	0080b2bc 	xorhi	r2,zero,714
  80ac00:	0080b2bc 	xorhi	r2,zero,714
  80ac04:	0080b550 	cmplti	r2,zero,725
  80ac08:	0080b550 	cmplti	r2,zero,725
  80ac0c:	0080b550 	cmplti	r2,zero,725
  80ac10:	0080b550 	cmplti	r2,zero,725
  80ac14:	0080b550 	cmplti	r2,zero,725
  80ac18:	0080b550 	cmplti	r2,zero,725
  80ac1c:	0080b550 	cmplti	r2,zero,725
  80ac20:	0080b550 	cmplti	r2,zero,725
  80ac24:	0080b550 	cmplti	r2,zero,725
  80ac28:	0080b550 	cmplti	r2,zero,725
  80ac2c:	0080b2e8 	cmpgeui	r2,zero,715
  80ac30:	0080b550 	cmplti	r2,zero,725
  80ac34:	0080b550 	cmplti	r2,zero,725
  80ac38:	0080b550 	cmplti	r2,zero,725
  80ac3c:	0080b550 	cmplti	r2,zero,725
  80ac40:	0080b550 	cmplti	r2,zero,725
  80ac44:	0080b550 	cmplti	r2,zero,725
  80ac48:	0080b550 	cmplti	r2,zero,725
  80ac4c:	0080b550 	cmplti	r2,zero,725
  80ac50:	0080b550 	cmplti	r2,zero,725
  80ac54:	0080b550 	cmplti	r2,zero,725
  80ac58:	0080b320 	cmpeqi	r2,zero,716
  80ac5c:	0080b550 	cmplti	r2,zero,725
  80ac60:	0080b550 	cmplti	r2,zero,725
  80ac64:	0080b550 	cmplti	r2,zero,725
  80ac68:	0080b550 	cmplti	r2,zero,725
  80ac6c:	0080b550 	cmplti	r2,zero,725
  80ac70:	0080b378 	rdprs	r2,zero,717
  80ac74:	0080b550 	cmplti	r2,zero,725
  80ac78:	0080b550 	cmplti	r2,zero,725
  80ac7c:	0080b3e8 	cmpgeui	r2,zero,719
  80ac80:	0080b550 	cmplti	r2,zero,725
  80ac84:	0080b550 	cmplti	r2,zero,725
  80ac88:	0080b550 	cmplti	r2,zero,725
  80ac8c:	0080b550 	cmplti	r2,zero,725
  80ac90:	0080b550 	cmplti	r2,zero,725
  80ac94:	0080b550 	cmplti	r2,zero,725
  80ac98:	0080b550 	cmplti	r2,zero,725
  80ac9c:	0080b550 	cmplti	r2,zero,725
  80aca0:	0080b550 	cmplti	r2,zero,725
  80aca4:	0080b550 	cmplti	r2,zero,725
  80aca8:	0080b194 	movui	r2,710
  80acac:	0080b1c0 	call	80b1c <__alt_mem_sdram-0x77f4e4>
  80acb0:	0080b550 	cmplti	r2,zero,725
  80acb4:	0080b550 	cmplti	r2,zero,725
  80acb8:	0080b550 	cmplti	r2,zero,725
  80acbc:	0080b4f8 	rdprs	r2,zero,723
  80acc0:	0080b1c0 	call	80b1c <__alt_mem_sdram-0x77f4e4>
  80acc4:	0080b550 	cmplti	r2,zero,725
  80acc8:	0080b550 	cmplti	r2,zero,725
  80accc:	0080b054 	movui	r2,705
  80acd0:	0080b550 	cmplti	r2,zero,725
  80acd4:	0080b064 	muli	r2,zero,705
  80acd8:	0080b0a0 	cmpeqi	r2,zero,706
  80acdc:	0080ad9c 	xori	r2,zero,694
  80ace0:	0080b048 	cmpgei	r2,zero,705
  80ace4:	0080b550 	cmplti	r2,zero,725
  80ace8:	0080b424 	muli	r2,zero,720
  80acec:	0080b550 	cmplti	r2,zero,725
  80acf0:	0080b47c 	xorhi	r2,zero,721
  80acf4:	0080b550 	cmplti	r2,zero,725
  80acf8:	0080b550 	cmplti	r2,zero,725
  80acfc:	0080b140 	call	80b14 <__alt_mem_sdram-0x77f4ec>
  80ad00:	42000204 	addi	r8,r8,8
  80ad04:	da802317 	ldw	r10,140(sp)
  80ad08:	5455883a 	add	r10,r10,r17
  80ad0c:	da802315 	stw	r10,140(sp)
  80ad10:	003f8b06 	br	80ab40 <__alt_mem_onchip_mem+0xff78ab40>
  80ad14:	d9002017 	ldw	r4,128(sp)
  80ad18:	a00b883a 	mov	r5,r20
  80ad1c:	08056b80 	call	8056b8 <__swsetup_r>
  80ad20:	1003b11e 	bne	r2,zero,80bbe8 <___vfiprintf_internal_r+0x11ec>
  80ad24:	a080030b 	ldhu	r2,12(r20)
  80ad28:	00c00284 	movi	r3,10
  80ad2c:	1080068c 	andi	r2,r2,26
  80ad30:	10ff541e 	bne	r2,r3,80aa84 <__alt_mem_onchip_mem+0xff78aa84>
  80ad34:	a080038f 	ldh	r2,14(r20)
  80ad38:	103f5216 	blt	r2,zero,80aa84 <__alt_mem_onchip_mem+0xff78aa84>
  80ad3c:	d9c02217 	ldw	r7,136(sp)
  80ad40:	d9002017 	ldw	r4,128(sp)
  80ad44:	e00d883a 	mov	r6,fp
  80ad48:	a00b883a 	mov	r5,r20
  80ad4c:	080be740 	call	80be74 <__sbprintf>
  80ad50:	dfc03617 	ldw	ra,216(sp)
  80ad54:	df003517 	ldw	fp,212(sp)
  80ad58:	ddc03417 	ldw	r23,208(sp)
  80ad5c:	dd803317 	ldw	r22,204(sp)
  80ad60:	dd403217 	ldw	r21,200(sp)
  80ad64:	dd003117 	ldw	r20,196(sp)
  80ad68:	dcc03017 	ldw	r19,192(sp)
  80ad6c:	dc802f17 	ldw	r18,188(sp)
  80ad70:	dc402e17 	ldw	r17,184(sp)
  80ad74:	dc002d17 	ldw	r16,180(sp)
  80ad78:	dec03704 	addi	sp,sp,220
  80ad7c:	f800283a 	ret
  80ad80:	080768c0 	call	80768c <__sinit>
  80ad84:	003f2f06 	br	80aa44 <__alt_mem_onchip_mem+0xff78aa44>
  80ad88:	0463c83a 	sub	r17,zero,r17
  80ad8c:	d8802215 	stw	r2,136(sp)
  80ad90:	a5000114 	ori	r20,r20,4
  80ad94:	80c00007 	ldb	r3,0(r16)
  80ad98:	003f7706 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80ad9c:	00800c04 	movi	r2,48
  80ada0:	da802217 	ldw	r10,136(sp)
  80ada4:	d8801d05 	stb	r2,116(sp)
  80ada8:	00801e04 	movi	r2,120
  80adac:	d8801d45 	stb	r2,117(sp)
  80adb0:	d8001d85 	stb	zero,118(sp)
  80adb4:	50c00104 	addi	r3,r10,4
  80adb8:	54800017 	ldw	r18,0(r10)
  80adbc:	0027883a 	mov	r19,zero
  80adc0:	a0800094 	ori	r2,r20,2
  80adc4:	48030b16 	blt	r9,zero,80b9f4 <___vfiprintf_internal_r+0xff8>
  80adc8:	00bfdfc4 	movi	r2,-129
  80adcc:	a096703a 	and	r11,r20,r2
  80add0:	d8c02215 	stw	r3,136(sp)
  80add4:	5d000094 	ori	r20,r11,2
  80add8:	90032b1e 	bne	r18,zero,80ba88 <___vfiprintf_internal_r+0x108c>
  80addc:	00802074 	movhi	r2,129
  80ade0:	108f0e04 	addi	r2,r2,15416
  80ade4:	d8802615 	stw	r2,152(sp)
  80ade8:	0039883a 	mov	fp,zero
  80adec:	48017b1e 	bne	r9,zero,80b3dc <___vfiprintf_internal_r+0x9e0>
  80adf0:	0013883a 	mov	r9,zero
  80adf4:	0027883a 	mov	r19,zero
  80adf8:	dd401a04 	addi	r21,sp,104
  80adfc:	4825883a 	mov	r18,r9
  80ae00:	4cc0010e 	bge	r9,r19,80ae08 <___vfiprintf_internal_r+0x40c>
  80ae04:	9825883a 	mov	r18,r19
  80ae08:	e7003fcc 	andi	fp,fp,255
  80ae0c:	e700201c 	xori	fp,fp,128
  80ae10:	e73fe004 	addi	fp,fp,-128
  80ae14:	e0000126 	beq	fp,zero,80ae1c <___vfiprintf_internal_r+0x420>
  80ae18:	94800044 	addi	r18,r18,1
  80ae1c:	a380008c 	andi	r14,r20,2
  80ae20:	70000126 	beq	r14,zero,80ae28 <___vfiprintf_internal_r+0x42c>
  80ae24:	94800084 	addi	r18,r18,2
  80ae28:	a700210c 	andi	fp,r20,132
  80ae2c:	e001df1e 	bne	fp,zero,80b5ac <___vfiprintf_internal_r+0xbb0>
  80ae30:	8c87c83a 	sub	r3,r17,r18
  80ae34:	00c1dd0e 	bge	zero,r3,80b5ac <___vfiprintf_internal_r+0xbb0>
  80ae38:	01c00404 	movi	r7,16
  80ae3c:	d8801c17 	ldw	r2,112(sp)
  80ae40:	38c3ad0e 	bge	r7,r3,80bcf8 <___vfiprintf_internal_r+0x12fc>
  80ae44:	02802074 	movhi	r10,129
  80ae48:	528f7304 	addi	r10,r10,15820
  80ae4c:	dc002915 	stw	r16,164(sp)
  80ae50:	d9801b17 	ldw	r6,108(sp)
  80ae54:	da802415 	stw	r10,144(sp)
  80ae58:	03c001c4 	movi	r15,7
  80ae5c:	da402515 	stw	r9,148(sp)
  80ae60:	db802815 	stw	r14,160(sp)
  80ae64:	1821883a 	mov	r16,r3
  80ae68:	00000506 	br	80ae80 <___vfiprintf_internal_r+0x484>
  80ae6c:	31400084 	addi	r5,r6,2
  80ae70:	42000204 	addi	r8,r8,8
  80ae74:	200d883a 	mov	r6,r4
  80ae78:	843ffc04 	addi	r16,r16,-16
  80ae7c:	3c000d0e 	bge	r7,r16,80aeb4 <___vfiprintf_internal_r+0x4b8>
  80ae80:	10800404 	addi	r2,r2,16
  80ae84:	31000044 	addi	r4,r6,1
  80ae88:	45800015 	stw	r22,0(r8)
  80ae8c:	41c00115 	stw	r7,4(r8)
  80ae90:	d8801c15 	stw	r2,112(sp)
  80ae94:	d9001b15 	stw	r4,108(sp)
  80ae98:	793ff40e 	bge	r15,r4,80ae6c <__alt_mem_onchip_mem+0xff78ae6c>
  80ae9c:	1001b51e 	bne	r2,zero,80b574 <___vfiprintf_internal_r+0xb78>
  80aea0:	843ffc04 	addi	r16,r16,-16
  80aea4:	000d883a 	mov	r6,zero
  80aea8:	01400044 	movi	r5,1
  80aeac:	d811883a 	mov	r8,sp
  80aeb0:	3c3ff316 	blt	r7,r16,80ae80 <__alt_mem_onchip_mem+0xff78ae80>
  80aeb4:	8007883a 	mov	r3,r16
  80aeb8:	da402517 	ldw	r9,148(sp)
  80aebc:	db802817 	ldw	r14,160(sp)
  80aec0:	dc002917 	ldw	r16,164(sp)
  80aec4:	da802417 	ldw	r10,144(sp)
  80aec8:	1885883a 	add	r2,r3,r2
  80aecc:	40c00115 	stw	r3,4(r8)
  80aed0:	42800015 	stw	r10,0(r8)
  80aed4:	d8801c15 	stw	r2,112(sp)
  80aed8:	d9401b15 	stw	r5,108(sp)
  80aedc:	00c001c4 	movi	r3,7
  80aee0:	19426016 	blt	r3,r5,80b864 <___vfiprintf_internal_r+0xe68>
  80aee4:	d8c01d87 	ldb	r3,118(sp)
  80aee8:	42000204 	addi	r8,r8,8
  80aeec:	29000044 	addi	r4,r5,1
  80aef0:	1801b31e 	bne	r3,zero,80b5c0 <___vfiprintf_internal_r+0xbc4>
  80aef4:	7001c026 	beq	r14,zero,80b5f8 <___vfiprintf_internal_r+0xbfc>
  80aef8:	d8c01d04 	addi	r3,sp,116
  80aefc:	10800084 	addi	r2,r2,2
  80af00:	40c00015 	stw	r3,0(r8)
  80af04:	00c00084 	movi	r3,2
  80af08:	40c00115 	stw	r3,4(r8)
  80af0c:	d8801c15 	stw	r2,112(sp)
  80af10:	d9001b15 	stw	r4,108(sp)
  80af14:	00c001c4 	movi	r3,7
  80af18:	1902650e 	bge	r3,r4,80b8b0 <___vfiprintf_internal_r+0xeb4>
  80af1c:	10029a1e 	bne	r2,zero,80b988 <___vfiprintf_internal_r+0xf8c>
  80af20:	00c02004 	movi	r3,128
  80af24:	01000044 	movi	r4,1
  80af28:	000b883a 	mov	r5,zero
  80af2c:	d811883a 	mov	r8,sp
  80af30:	e0c1b31e 	bne	fp,r3,80b600 <___vfiprintf_internal_r+0xc04>
  80af34:	8cb9c83a 	sub	fp,r17,r18
  80af38:	0701b10e 	bge	zero,fp,80b600 <___vfiprintf_internal_r+0xc04>
  80af3c:	01c00404 	movi	r7,16
  80af40:	3f03890e 	bge	r7,fp,80bd68 <___vfiprintf_internal_r+0x136c>
  80af44:	00c02074 	movhi	r3,129
  80af48:	18cf6f04 	addi	r3,r3,15804
  80af4c:	d8c02415 	stw	r3,144(sp)
  80af50:	8007883a 	mov	r3,r16
  80af54:	034001c4 	movi	r13,7
  80af58:	e021883a 	mov	r16,fp
  80af5c:	da402515 	stw	r9,148(sp)
  80af60:	1839883a 	mov	fp,r3
  80af64:	00000506 	br	80af7c <___vfiprintf_internal_r+0x580>
  80af68:	29800084 	addi	r6,r5,2
  80af6c:	42000204 	addi	r8,r8,8
  80af70:	180b883a 	mov	r5,r3
  80af74:	843ffc04 	addi	r16,r16,-16
  80af78:	3c000d0e 	bge	r7,r16,80afb0 <___vfiprintf_internal_r+0x5b4>
  80af7c:	10800404 	addi	r2,r2,16
  80af80:	28c00044 	addi	r3,r5,1
  80af84:	45c00015 	stw	r23,0(r8)
  80af88:	41c00115 	stw	r7,4(r8)
  80af8c:	d8801c15 	stw	r2,112(sp)
  80af90:	d8c01b15 	stw	r3,108(sp)
  80af94:	68fff40e 	bge	r13,r3,80af68 <__alt_mem_onchip_mem+0xff78af68>
  80af98:	1002241e 	bne	r2,zero,80b82c <___vfiprintf_internal_r+0xe30>
  80af9c:	843ffc04 	addi	r16,r16,-16
  80afa0:	01800044 	movi	r6,1
  80afa4:	000b883a 	mov	r5,zero
  80afa8:	d811883a 	mov	r8,sp
  80afac:	3c3ff316 	blt	r7,r16,80af7c <__alt_mem_onchip_mem+0xff78af7c>
  80afb0:	da402517 	ldw	r9,148(sp)
  80afb4:	e007883a 	mov	r3,fp
  80afb8:	8039883a 	mov	fp,r16
  80afbc:	1821883a 	mov	r16,r3
  80afc0:	d8c02417 	ldw	r3,144(sp)
  80afc4:	1705883a 	add	r2,r2,fp
  80afc8:	47000115 	stw	fp,4(r8)
  80afcc:	40c00015 	stw	r3,0(r8)
  80afd0:	d8801c15 	stw	r2,112(sp)
  80afd4:	d9801b15 	stw	r6,108(sp)
  80afd8:	00c001c4 	movi	r3,7
  80afdc:	19827616 	blt	r3,r6,80b9b8 <___vfiprintf_internal_r+0xfbc>
  80afe0:	4cf9c83a 	sub	fp,r9,r19
  80afe4:	42000204 	addi	r8,r8,8
  80afe8:	31000044 	addi	r4,r6,1
  80afec:	300b883a 	mov	r5,r6
  80aff0:	07018516 	blt	zero,fp,80b608 <___vfiprintf_internal_r+0xc0c>
  80aff4:	9885883a 	add	r2,r19,r2
  80aff8:	45400015 	stw	r21,0(r8)
  80affc:	44c00115 	stw	r19,4(r8)
  80b000:	d8801c15 	stw	r2,112(sp)
  80b004:	d9001b15 	stw	r4,108(sp)
  80b008:	00c001c4 	movi	r3,7
  80b00c:	1901dd0e 	bge	r3,r4,80b784 <___vfiprintf_internal_r+0xd88>
  80b010:	1002401e 	bne	r2,zero,80b914 <___vfiprintf_internal_r+0xf18>
  80b014:	d8001b15 	stw	zero,108(sp)
  80b018:	a2c0010c 	andi	r11,r20,4
  80b01c:	58000226 	beq	r11,zero,80b028 <___vfiprintf_internal_r+0x62c>
  80b020:	8ca7c83a 	sub	r19,r17,r18
  80b024:	04c2f216 	blt	zero,r19,80bbf0 <___vfiprintf_internal_r+0x11f4>
  80b028:	8c80010e 	bge	r17,r18,80b030 <___vfiprintf_internal_r+0x634>
  80b02c:	9023883a 	mov	r17,r18
  80b030:	da802317 	ldw	r10,140(sp)
  80b034:	5455883a 	add	r10,r10,r17
  80b038:	da802315 	stw	r10,140(sp)
  80b03c:	d8001b15 	stw	zero,108(sp)
  80b040:	d811883a 	mov	r8,sp
  80b044:	003ea206 	br	80aad0 <__alt_mem_onchip_mem+0xff78aad0>
  80b048:	a5000814 	ori	r20,r20,32
  80b04c:	80c00007 	ldb	r3,0(r16)
  80b050:	003ec906 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b054:	80c00007 	ldb	r3,0(r16)
  80b058:	1b030926 	beq	r3,r12,80bc80 <___vfiprintf_internal_r+0x1284>
  80b05c:	a5000414 	ori	r20,r20,16
  80b060:	003ec506 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b064:	21003fcc 	andi	r4,r4,255
  80b068:	20035e1e 	bne	r4,zero,80bde4 <___vfiprintf_internal_r+0x13e8>
  80b06c:	a080080c 	andi	r2,r20,32
  80b070:	1002a526 	beq	r2,zero,80bb08 <___vfiprintf_internal_r+0x110c>
  80b074:	da802217 	ldw	r10,136(sp)
  80b078:	50800017 	ldw	r2,0(r10)
  80b07c:	da802317 	ldw	r10,140(sp)
  80b080:	5007d7fa 	srai	r3,r10,31
  80b084:	da802217 	ldw	r10,136(sp)
  80b088:	10c00115 	stw	r3,4(r2)
  80b08c:	52800104 	addi	r10,r10,4
  80b090:	da802215 	stw	r10,136(sp)
  80b094:	da802317 	ldw	r10,140(sp)
  80b098:	12800015 	stw	r10,0(r2)
  80b09c:	003e8c06 	br	80aad0 <__alt_mem_onchip_mem+0xff78aad0>
  80b0a0:	21003fcc 	andi	r4,r4,255
  80b0a4:	2003511e 	bne	r4,zero,80bdec <___vfiprintf_internal_r+0x13f0>
  80b0a8:	a080080c 	andi	r2,r20,32
  80b0ac:	1000a126 	beq	r2,zero,80b334 <___vfiprintf_internal_r+0x938>
  80b0b0:	da802217 	ldw	r10,136(sp)
  80b0b4:	d8001d85 	stb	zero,118(sp)
  80b0b8:	50800204 	addi	r2,r10,8
  80b0bc:	54800017 	ldw	r18,0(r10)
  80b0c0:	54c00117 	ldw	r19,4(r10)
  80b0c4:	4802b416 	blt	r9,zero,80bb98 <___vfiprintf_internal_r+0x119c>
  80b0c8:	013fdfc4 	movi	r4,-129
  80b0cc:	94c6b03a 	or	r3,r18,r19
  80b0d0:	d8802215 	stw	r2,136(sp)
  80b0d4:	a128703a 	and	r20,r20,r4
  80b0d8:	1800a226 	beq	r3,zero,80b364 <___vfiprintf_internal_r+0x968>
  80b0dc:	0039883a 	mov	fp,zero
  80b0e0:	dd401a04 	addi	r21,sp,104
  80b0e4:	9006d0fa 	srli	r3,r18,3
  80b0e8:	9808977a 	slli	r4,r19,29
  80b0ec:	9826d0fa 	srli	r19,r19,3
  80b0f0:	948001cc 	andi	r18,r18,7
  80b0f4:	90800c04 	addi	r2,r18,48
  80b0f8:	ad7fffc4 	addi	r21,r21,-1
  80b0fc:	20e4b03a 	or	r18,r4,r3
  80b100:	a8800005 	stb	r2,0(r21)
  80b104:	94c6b03a 	or	r3,r18,r19
  80b108:	183ff61e 	bne	r3,zero,80b0e4 <__alt_mem_onchip_mem+0xff78b0e4>
  80b10c:	a0c0004c 	andi	r3,r20,1
  80b110:	18005926 	beq	r3,zero,80b278 <___vfiprintf_internal_r+0x87c>
  80b114:	10803fcc 	andi	r2,r2,255
  80b118:	1080201c 	xori	r2,r2,128
  80b11c:	10bfe004 	addi	r2,r2,-128
  80b120:	00c00c04 	movi	r3,48
  80b124:	10c05426 	beq	r2,r3,80b278 <___vfiprintf_internal_r+0x87c>
  80b128:	da801e17 	ldw	r10,120(sp)
  80b12c:	a8bfffc4 	addi	r2,r21,-1
  80b130:	a8ffffc5 	stb	r3,-1(r21)
  80b134:	50a7c83a 	sub	r19,r10,r2
  80b138:	102b883a 	mov	r21,r2
  80b13c:	003f2f06 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b140:	21003fcc 	andi	r4,r4,255
  80b144:	2003421e 	bne	r4,zero,80be50 <___vfiprintf_internal_r+0x1454>
  80b148:	00802074 	movhi	r2,129
  80b14c:	108f0e04 	addi	r2,r2,15416
  80b150:	d8802615 	stw	r2,152(sp)
  80b154:	a080080c 	andi	r2,r20,32
  80b158:	1000aa26 	beq	r2,zero,80b404 <___vfiprintf_internal_r+0xa08>
  80b15c:	da802217 	ldw	r10,136(sp)
  80b160:	54800017 	ldw	r18,0(r10)
  80b164:	54c00117 	ldw	r19,4(r10)
  80b168:	52800204 	addi	r10,r10,8
  80b16c:	da802215 	stw	r10,136(sp)
  80b170:	a080004c 	andi	r2,r20,1
  80b174:	1001d226 	beq	r2,zero,80b8c0 <___vfiprintf_internal_r+0xec4>
  80b178:	94c4b03a 	or	r2,r18,r19
  80b17c:	1002351e 	bne	r2,zero,80ba54 <___vfiprintf_internal_r+0x1058>
  80b180:	d8001d85 	stb	zero,118(sp)
  80b184:	48022216 	blt	r9,zero,80ba10 <___vfiprintf_internal_r+0x1014>
  80b188:	00bfdfc4 	movi	r2,-129
  80b18c:	a0a8703a 	and	r20,r20,r2
  80b190:	003f1506 	br	80ade8 <__alt_mem_onchip_mem+0xff78ade8>
  80b194:	da802217 	ldw	r10,136(sp)
  80b198:	04800044 	movi	r18,1
  80b19c:	d8001d85 	stb	zero,118(sp)
  80b1a0:	50800017 	ldw	r2,0(r10)
  80b1a4:	52800104 	addi	r10,r10,4
  80b1a8:	da802215 	stw	r10,136(sp)
  80b1ac:	d8801005 	stb	r2,64(sp)
  80b1b0:	9027883a 	mov	r19,r18
  80b1b4:	dd401004 	addi	r21,sp,64
  80b1b8:	0013883a 	mov	r9,zero
  80b1bc:	003f1706 	br	80ae1c <__alt_mem_onchip_mem+0xff78ae1c>
  80b1c0:	21003fcc 	andi	r4,r4,255
  80b1c4:	2003201e 	bne	r4,zero,80be48 <___vfiprintf_internal_r+0x144c>
  80b1c8:	a080080c 	andi	r2,r20,32
  80b1cc:	10004b26 	beq	r2,zero,80b2fc <___vfiprintf_internal_r+0x900>
  80b1d0:	da802217 	ldw	r10,136(sp)
  80b1d4:	50800117 	ldw	r2,4(r10)
  80b1d8:	54800017 	ldw	r18,0(r10)
  80b1dc:	52800204 	addi	r10,r10,8
  80b1e0:	da802215 	stw	r10,136(sp)
  80b1e4:	1027883a 	mov	r19,r2
  80b1e8:	10022c16 	blt	r2,zero,80ba9c <___vfiprintf_internal_r+0x10a0>
  80b1ec:	df001d83 	ldbu	fp,118(sp)
  80b1f0:	48007216 	blt	r9,zero,80b3bc <___vfiprintf_internal_r+0x9c0>
  80b1f4:	00ffdfc4 	movi	r3,-129
  80b1f8:	94c4b03a 	or	r2,r18,r19
  80b1fc:	a0e8703a 	and	r20,r20,r3
  80b200:	1000cc26 	beq	r2,zero,80b534 <___vfiprintf_internal_r+0xb38>
  80b204:	98021026 	beq	r19,zero,80ba48 <___vfiprintf_internal_r+0x104c>
  80b208:	dc402415 	stw	r17,144(sp)
  80b20c:	dc002515 	stw	r16,148(sp)
  80b210:	9823883a 	mov	r17,r19
  80b214:	9021883a 	mov	r16,r18
  80b218:	dd401a04 	addi	r21,sp,104
  80b21c:	4825883a 	mov	r18,r9
  80b220:	4027883a 	mov	r19,r8
  80b224:	8009883a 	mov	r4,r16
  80b228:	880b883a 	mov	r5,r17
  80b22c:	01800284 	movi	r6,10
  80b230:	000f883a 	mov	r7,zero
  80b234:	080cddc0 	call	80cddc <__umoddi3>
  80b238:	10800c04 	addi	r2,r2,48
  80b23c:	ad7fffc4 	addi	r21,r21,-1
  80b240:	8009883a 	mov	r4,r16
  80b244:	880b883a 	mov	r5,r17
  80b248:	a8800005 	stb	r2,0(r21)
  80b24c:	01800284 	movi	r6,10
  80b250:	000f883a 	mov	r7,zero
  80b254:	080c8640 	call	80c864 <__udivdi3>
  80b258:	1021883a 	mov	r16,r2
  80b25c:	10c4b03a 	or	r2,r2,r3
  80b260:	1823883a 	mov	r17,r3
  80b264:	103fef1e 	bne	r2,zero,80b224 <__alt_mem_onchip_mem+0xff78b224>
  80b268:	dc402417 	ldw	r17,144(sp)
  80b26c:	dc002517 	ldw	r16,148(sp)
  80b270:	9013883a 	mov	r9,r18
  80b274:	9811883a 	mov	r8,r19
  80b278:	da801e17 	ldw	r10,120(sp)
  80b27c:	5567c83a 	sub	r19,r10,r21
  80b280:	003ede06 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b284:	38803fcc 	andi	r2,r7,255
  80b288:	1080201c 	xori	r2,r2,128
  80b28c:	10bfe004 	addi	r2,r2,-128
  80b290:	1002371e 	bne	r2,zero,80bb70 <___vfiprintf_internal_r+0x1174>
  80b294:	01000044 	movi	r4,1
  80b298:	01c00804 	movi	r7,32
  80b29c:	80c00007 	ldb	r3,0(r16)
  80b2a0:	003e3506 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b2a4:	a5000054 	ori	r20,r20,1
  80b2a8:	80c00007 	ldb	r3,0(r16)
  80b2ac:	003e3206 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b2b0:	a5002014 	ori	r20,r20,128
  80b2b4:	80c00007 	ldb	r3,0(r16)
  80b2b8:	003e2f06 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b2bc:	8015883a 	mov	r10,r16
  80b2c0:	0023883a 	mov	r17,zero
  80b2c4:	18bff404 	addi	r2,r3,-48
  80b2c8:	50c00007 	ldb	r3,0(r10)
  80b2cc:	8c4002a4 	muli	r17,r17,10
  80b2d0:	84000044 	addi	r16,r16,1
  80b2d4:	8015883a 	mov	r10,r16
  80b2d8:	1463883a 	add	r17,r2,r17
  80b2dc:	18bff404 	addi	r2,r3,-48
  80b2e0:	30bff92e 	bgeu	r6,r2,80b2c8 <__alt_mem_onchip_mem+0xff78b2c8>
  80b2e4:	003e2506 	br	80ab7c <__alt_mem_onchip_mem+0xff78ab7c>
  80b2e8:	21003fcc 	andi	r4,r4,255
  80b2ec:	2002d41e 	bne	r4,zero,80be40 <___vfiprintf_internal_r+0x1444>
  80b2f0:	a5000414 	ori	r20,r20,16
  80b2f4:	a080080c 	andi	r2,r20,32
  80b2f8:	103fb51e 	bne	r2,zero,80b1d0 <__alt_mem_onchip_mem+0xff78b1d0>
  80b2fc:	a080040c 	andi	r2,r20,16
  80b300:	1001f826 	beq	r2,zero,80bae4 <___vfiprintf_internal_r+0x10e8>
  80b304:	da802217 	ldw	r10,136(sp)
  80b308:	54800017 	ldw	r18,0(r10)
  80b30c:	52800104 	addi	r10,r10,4
  80b310:	da802215 	stw	r10,136(sp)
  80b314:	9027d7fa 	srai	r19,r18,31
  80b318:	9805883a 	mov	r2,r19
  80b31c:	003fb206 	br	80b1e8 <__alt_mem_onchip_mem+0xff78b1e8>
  80b320:	21003fcc 	andi	r4,r4,255
  80b324:	2002c41e 	bne	r4,zero,80be38 <___vfiprintf_internal_r+0x143c>
  80b328:	a5000414 	ori	r20,r20,16
  80b32c:	a080080c 	andi	r2,r20,32
  80b330:	103f5f1e 	bne	r2,zero,80b0b0 <__alt_mem_onchip_mem+0xff78b0b0>
  80b334:	a080040c 	andi	r2,r20,16
  80b338:	10020f26 	beq	r2,zero,80bb78 <___vfiprintf_internal_r+0x117c>
  80b33c:	da802217 	ldw	r10,136(sp)
  80b340:	d8001d85 	stb	zero,118(sp)
  80b344:	0027883a 	mov	r19,zero
  80b348:	50800104 	addi	r2,r10,4
  80b34c:	54800017 	ldw	r18,0(r10)
  80b350:	48021116 	blt	r9,zero,80bb98 <___vfiprintf_internal_r+0x119c>
  80b354:	00ffdfc4 	movi	r3,-129
  80b358:	d8802215 	stw	r2,136(sp)
  80b35c:	a0e8703a 	and	r20,r20,r3
  80b360:	903f5e1e 	bne	r18,zero,80b0dc <__alt_mem_onchip_mem+0xff78b0dc>
  80b364:	0039883a 	mov	fp,zero
  80b368:	4802a626 	beq	r9,zero,80be04 <___vfiprintf_internal_r+0x1408>
  80b36c:	0025883a 	mov	r18,zero
  80b370:	0027883a 	mov	r19,zero
  80b374:	003f5a06 	br	80b0e0 <__alt_mem_onchip_mem+0xff78b0e0>
  80b378:	21003fcc 	andi	r4,r4,255
  80b37c:	20029f1e 	bne	r4,zero,80bdfc <___vfiprintf_internal_r+0x1400>
  80b380:	a5000414 	ori	r20,r20,16
  80b384:	a080080c 	andi	r2,r20,32
  80b388:	10005e1e 	bne	r2,zero,80b504 <___vfiprintf_internal_r+0xb08>
  80b38c:	a080040c 	andi	r2,r20,16
  80b390:	1001a21e 	bne	r2,zero,80ba1c <___vfiprintf_internal_r+0x1020>
  80b394:	a080100c 	andi	r2,r20,64
  80b398:	d8001d85 	stb	zero,118(sp)
  80b39c:	da802217 	ldw	r10,136(sp)
  80b3a0:	1002231e 	bne	r2,zero,80bc30 <___vfiprintf_internal_r+0x1234>
  80b3a4:	50800104 	addi	r2,r10,4
  80b3a8:	54800017 	ldw	r18,0(r10)
  80b3ac:	0027883a 	mov	r19,zero
  80b3b0:	4801a00e 	bge	r9,zero,80ba34 <___vfiprintf_internal_r+0x1038>
  80b3b4:	d8802215 	stw	r2,136(sp)
  80b3b8:	0039883a 	mov	fp,zero
  80b3bc:	94c4b03a 	or	r2,r18,r19
  80b3c0:	103f901e 	bne	r2,zero,80b204 <__alt_mem_onchip_mem+0xff78b204>
  80b3c4:	00800044 	movi	r2,1
  80b3c8:	10803fcc 	andi	r2,r2,255
  80b3cc:	00c00044 	movi	r3,1
  80b3d0:	10c05926 	beq	r2,r3,80b538 <___vfiprintf_internal_r+0xb3c>
  80b3d4:	00c00084 	movi	r3,2
  80b3d8:	10ffe41e 	bne	r2,r3,80b36c <__alt_mem_onchip_mem+0xff78b36c>
  80b3dc:	0025883a 	mov	r18,zero
  80b3e0:	0027883a 	mov	r19,zero
  80b3e4:	00013d06 	br	80b8dc <___vfiprintf_internal_r+0xee0>
  80b3e8:	21003fcc 	andi	r4,r4,255
  80b3ec:	2002811e 	bne	r4,zero,80bdf4 <___vfiprintf_internal_r+0x13f8>
  80b3f0:	00802074 	movhi	r2,129
  80b3f4:	108f0904 	addi	r2,r2,15396
  80b3f8:	d8802615 	stw	r2,152(sp)
  80b3fc:	a080080c 	andi	r2,r20,32
  80b400:	103f561e 	bne	r2,zero,80b15c <__alt_mem_onchip_mem+0xff78b15c>
  80b404:	a080040c 	andi	r2,r20,16
  80b408:	1001d126 	beq	r2,zero,80bb50 <___vfiprintf_internal_r+0x1154>
  80b40c:	da802217 	ldw	r10,136(sp)
  80b410:	0027883a 	mov	r19,zero
  80b414:	54800017 	ldw	r18,0(r10)
  80b418:	52800104 	addi	r10,r10,4
  80b41c:	da802215 	stw	r10,136(sp)
  80b420:	003f5306 	br	80b170 <__alt_mem_onchip_mem+0xff78b170>
  80b424:	da802217 	ldw	r10,136(sp)
  80b428:	d8001d85 	stb	zero,118(sp)
  80b42c:	55400017 	ldw	r21,0(r10)
  80b430:	50c00104 	addi	r3,r10,4
  80b434:	a8024226 	beq	r21,zero,80bd40 <___vfiprintf_internal_r+0x1344>
  80b438:	48021816 	blt	r9,zero,80bc9c <___vfiprintf_internal_r+0x12a0>
  80b43c:	480d883a 	mov	r6,r9
  80b440:	000b883a 	mov	r5,zero
  80b444:	a809883a 	mov	r4,r21
  80b448:	d8c02a15 	stw	r3,168(sp)
  80b44c:	da002b15 	stw	r8,172(sp)
  80b450:	da402c15 	stw	r9,176(sp)
  80b454:	0808bf80 	call	808bf8 <memchr>
  80b458:	d8c02a17 	ldw	r3,168(sp)
  80b45c:	da002b17 	ldw	r8,172(sp)
  80b460:	da402c17 	ldw	r9,176(sp)
  80b464:	10024826 	beq	r2,zero,80bd88 <___vfiprintf_internal_r+0x138c>
  80b468:	1567c83a 	sub	r19,r2,r21
  80b46c:	df001d83 	ldbu	fp,118(sp)
  80b470:	d8c02215 	stw	r3,136(sp)
  80b474:	0013883a 	mov	r9,zero
  80b478:	003e6006 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b47c:	21003fcc 	andi	r4,r4,255
  80b480:	203fc026 	beq	r4,zero,80b384 <__alt_mem_onchip_mem+0xff78b384>
  80b484:	d9c01d85 	stb	r7,118(sp)
  80b488:	003fbe06 	br	80b384 <__alt_mem_onchip_mem+0xff78b384>
  80b48c:	da802217 	ldw	r10,136(sp)
  80b490:	54400017 	ldw	r17,0(r10)
  80b494:	50800104 	addi	r2,r10,4
  80b498:	883e3b16 	blt	r17,zero,80ad88 <__alt_mem_onchip_mem+0xff78ad88>
  80b49c:	d8802215 	stw	r2,136(sp)
  80b4a0:	80c00007 	ldb	r3,0(r16)
  80b4a4:	003db406 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b4a8:	01000044 	movi	r4,1
  80b4ac:	01c00ac4 	movi	r7,43
  80b4b0:	80c00007 	ldb	r3,0(r16)
  80b4b4:	003db006 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b4b8:	80c00007 	ldb	r3,0(r16)
  80b4bc:	82800044 	addi	r10,r16,1
  80b4c0:	1b423c26 	beq	r3,r13,80bdb4 <___vfiprintf_internal_r+0x13b8>
  80b4c4:	18bff404 	addi	r2,r3,-48
  80b4c8:	0013883a 	mov	r9,zero
  80b4cc:	30822b36 	bltu	r6,r2,80bd7c <___vfiprintf_internal_r+0x1380>
  80b4d0:	50c00007 	ldb	r3,0(r10)
  80b4d4:	4a4002a4 	muli	r9,r9,10
  80b4d8:	54000044 	addi	r16,r10,1
  80b4dc:	8015883a 	mov	r10,r16
  80b4e0:	4893883a 	add	r9,r9,r2
  80b4e4:	18bff404 	addi	r2,r3,-48
  80b4e8:	30bff92e 	bgeu	r6,r2,80b4d0 <__alt_mem_onchip_mem+0xff78b4d0>
  80b4ec:	483da30e 	bge	r9,zero,80ab7c <__alt_mem_onchip_mem+0xff78ab7c>
  80b4f0:	027fffc4 	movi	r9,-1
  80b4f4:	003da106 	br	80ab7c <__alt_mem_onchip_mem+0xff78ab7c>
  80b4f8:	a5001014 	ori	r20,r20,64
  80b4fc:	80c00007 	ldb	r3,0(r16)
  80b500:	003d9d06 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80b504:	da802217 	ldw	r10,136(sp)
  80b508:	d8001d85 	stb	zero,118(sp)
  80b50c:	50c00204 	addi	r3,r10,8
  80b510:	54800017 	ldw	r18,0(r10)
  80b514:	54c00117 	ldw	r19,4(r10)
  80b518:	4801ca16 	blt	r9,zero,80bc44 <___vfiprintf_internal_r+0x1248>
  80b51c:	013fdfc4 	movi	r4,-129
  80b520:	94c4b03a 	or	r2,r18,r19
  80b524:	d8c02215 	stw	r3,136(sp)
  80b528:	a128703a 	and	r20,r20,r4
  80b52c:	0039883a 	mov	fp,zero
  80b530:	103f341e 	bne	r2,zero,80b204 <__alt_mem_onchip_mem+0xff78b204>
  80b534:	483e2e26 	beq	r9,zero,80adf0 <__alt_mem_onchip_mem+0xff78adf0>
  80b538:	0025883a 	mov	r18,zero
  80b53c:	94800c04 	addi	r18,r18,48
  80b540:	dc8019c5 	stb	r18,103(sp)
  80b544:	dcc02717 	ldw	r19,156(sp)
  80b548:	dd4019c4 	addi	r21,sp,103
  80b54c:	003e2b06 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b550:	21003fcc 	andi	r4,r4,255
  80b554:	2002361e 	bne	r4,zero,80be30 <___vfiprintf_internal_r+0x1434>
  80b558:	1801c126 	beq	r3,zero,80bc60 <___vfiprintf_internal_r+0x1264>
  80b55c:	04800044 	movi	r18,1
  80b560:	d8c01005 	stb	r3,64(sp)
  80b564:	d8001d85 	stb	zero,118(sp)
  80b568:	9027883a 	mov	r19,r18
  80b56c:	dd401004 	addi	r21,sp,64
  80b570:	003f1106 	br	80b1b8 <__alt_mem_onchip_mem+0xff78b1b8>
  80b574:	d9402117 	ldw	r5,132(sp)
  80b578:	d9002017 	ldw	r4,128(sp)
  80b57c:	d9801a04 	addi	r6,sp,104
  80b580:	d9c02b15 	stw	r7,172(sp)
  80b584:	dbc02a15 	stw	r15,168(sp)
  80b588:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b58c:	d9c02b17 	ldw	r7,172(sp)
  80b590:	dbc02a17 	ldw	r15,168(sp)
  80b594:	10006d1e 	bne	r2,zero,80b74c <___vfiprintf_internal_r+0xd50>
  80b598:	d9801b17 	ldw	r6,108(sp)
  80b59c:	d8801c17 	ldw	r2,112(sp)
  80b5a0:	d811883a 	mov	r8,sp
  80b5a4:	31400044 	addi	r5,r6,1
  80b5a8:	003e3306 	br	80ae78 <__alt_mem_onchip_mem+0xff78ae78>
  80b5ac:	d9401b17 	ldw	r5,108(sp)
  80b5b0:	d8801c17 	ldw	r2,112(sp)
  80b5b4:	29000044 	addi	r4,r5,1
  80b5b8:	d8c01d87 	ldb	r3,118(sp)
  80b5bc:	183e4d26 	beq	r3,zero,80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b5c0:	00c00044 	movi	r3,1
  80b5c4:	d9401d84 	addi	r5,sp,118
  80b5c8:	10c5883a 	add	r2,r2,r3
  80b5cc:	41400015 	stw	r5,0(r8)
  80b5d0:	40c00115 	stw	r3,4(r8)
  80b5d4:	d8801c15 	stw	r2,112(sp)
  80b5d8:	d9001b15 	stw	r4,108(sp)
  80b5dc:	014001c4 	movi	r5,7
  80b5e0:	2900a90e 	bge	r5,r4,80b888 <___vfiprintf_internal_r+0xe8c>
  80b5e4:	1000da1e 	bne	r2,zero,80b950 <___vfiprintf_internal_r+0xf54>
  80b5e8:	7000ab1e 	bne	r14,zero,80b898 <___vfiprintf_internal_r+0xe9c>
  80b5ec:	000b883a 	mov	r5,zero
  80b5f0:	1809883a 	mov	r4,r3
  80b5f4:	d811883a 	mov	r8,sp
  80b5f8:	00c02004 	movi	r3,128
  80b5fc:	e0fe4d26 	beq	fp,r3,80af34 <__alt_mem_onchip_mem+0xff78af34>
  80b600:	4cf9c83a 	sub	fp,r9,r19
  80b604:	073e7b0e 	bge	zero,fp,80aff4 <__alt_mem_onchip_mem+0xff78aff4>
  80b608:	01c00404 	movi	r7,16
  80b60c:	3f01900e 	bge	r7,fp,80bc50 <___vfiprintf_internal_r+0x1254>
  80b610:	00c02074 	movhi	r3,129
  80b614:	18cf6f04 	addi	r3,r3,15804
  80b618:	d8c02415 	stw	r3,144(sp)
  80b61c:	034001c4 	movi	r13,7
  80b620:	00000506 	br	80b638 <___vfiprintf_internal_r+0xc3c>
  80b624:	29000084 	addi	r4,r5,2
  80b628:	42000204 	addi	r8,r8,8
  80b62c:	180b883a 	mov	r5,r3
  80b630:	e73ffc04 	addi	fp,fp,-16
  80b634:	3f000d0e 	bge	r7,fp,80b66c <___vfiprintf_internal_r+0xc70>
  80b638:	10800404 	addi	r2,r2,16
  80b63c:	28c00044 	addi	r3,r5,1
  80b640:	45c00015 	stw	r23,0(r8)
  80b644:	41c00115 	stw	r7,4(r8)
  80b648:	d8801c15 	stw	r2,112(sp)
  80b64c:	d8c01b15 	stw	r3,108(sp)
  80b650:	68fff40e 	bge	r13,r3,80b624 <__alt_mem_onchip_mem+0xff78b624>
  80b654:	1000101e 	bne	r2,zero,80b698 <___vfiprintf_internal_r+0xc9c>
  80b658:	e73ffc04 	addi	fp,fp,-16
  80b65c:	01000044 	movi	r4,1
  80b660:	000b883a 	mov	r5,zero
  80b664:	d811883a 	mov	r8,sp
  80b668:	3f3ff316 	blt	r7,fp,80b638 <__alt_mem_onchip_mem+0xff78b638>
  80b66c:	da802417 	ldw	r10,144(sp)
  80b670:	1705883a 	add	r2,r2,fp
  80b674:	47000115 	stw	fp,4(r8)
  80b678:	42800015 	stw	r10,0(r8)
  80b67c:	d8801c15 	stw	r2,112(sp)
  80b680:	d9001b15 	stw	r4,108(sp)
  80b684:	00c001c4 	movi	r3,7
  80b688:	19003616 	blt	r3,r4,80b764 <___vfiprintf_internal_r+0xd68>
  80b68c:	42000204 	addi	r8,r8,8
  80b690:	21000044 	addi	r4,r4,1
  80b694:	003e5706 	br	80aff4 <__alt_mem_onchip_mem+0xff78aff4>
  80b698:	d9402117 	ldw	r5,132(sp)
  80b69c:	d9002017 	ldw	r4,128(sp)
  80b6a0:	d9801a04 	addi	r6,sp,104
  80b6a4:	d9c02b15 	stw	r7,172(sp)
  80b6a8:	db402a15 	stw	r13,168(sp)
  80b6ac:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b6b0:	d9c02b17 	ldw	r7,172(sp)
  80b6b4:	db402a17 	ldw	r13,168(sp)
  80b6b8:	1000241e 	bne	r2,zero,80b74c <___vfiprintf_internal_r+0xd50>
  80b6bc:	d9401b17 	ldw	r5,108(sp)
  80b6c0:	d8801c17 	ldw	r2,112(sp)
  80b6c4:	d811883a 	mov	r8,sp
  80b6c8:	29000044 	addi	r4,r5,1
  80b6cc:	003fd806 	br	80b630 <__alt_mem_onchip_mem+0xff78b630>
  80b6d0:	d9401b17 	ldw	r5,108(sp)
  80b6d4:	00c02074 	movhi	r3,129
  80b6d8:	18cf7304 	addi	r3,r3,15820
  80b6dc:	d8c02415 	stw	r3,144(sp)
  80b6e0:	29400044 	addi	r5,r5,1
  80b6e4:	d8c02417 	ldw	r3,144(sp)
  80b6e8:	14c5883a 	add	r2,r2,r19
  80b6ec:	44c00115 	stw	r19,4(r8)
  80b6f0:	40c00015 	stw	r3,0(r8)
  80b6f4:	d8801c15 	stw	r2,112(sp)
  80b6f8:	d9401b15 	stw	r5,108(sp)
  80b6fc:	00c001c4 	movi	r3,7
  80b700:	1940070e 	bge	r3,r5,80b720 <___vfiprintf_internal_r+0xd24>
  80b704:	103e4826 	beq	r2,zero,80b028 <__alt_mem_onchip_mem+0xff78b028>
  80b708:	d9402117 	ldw	r5,132(sp)
  80b70c:	d9002017 	ldw	r4,128(sp)
  80b710:	d9801a04 	addi	r6,sp,104
  80b714:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b718:	10000c1e 	bne	r2,zero,80b74c <___vfiprintf_internal_r+0xd50>
  80b71c:	d8801c17 	ldw	r2,112(sp)
  80b720:	8c80010e 	bge	r17,r18,80b728 <___vfiprintf_internal_r+0xd2c>
  80b724:	9023883a 	mov	r17,r18
  80b728:	da802317 	ldw	r10,140(sp)
  80b72c:	5455883a 	add	r10,r10,r17
  80b730:	da802315 	stw	r10,140(sp)
  80b734:	103e4126 	beq	r2,zero,80b03c <__alt_mem_onchip_mem+0xff78b03c>
  80b738:	d9402117 	ldw	r5,132(sp)
  80b73c:	d9002017 	ldw	r4,128(sp)
  80b740:	d9801a04 	addi	r6,sp,104
  80b744:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b748:	103e3c26 	beq	r2,zero,80b03c <__alt_mem_onchip_mem+0xff78b03c>
  80b74c:	dd002117 	ldw	r20,132(sp)
  80b750:	a080030b 	ldhu	r2,12(r20)
  80b754:	1080100c 	andi	r2,r2,64
  80b758:	1001231e 	bne	r2,zero,80bbe8 <___vfiprintf_internal_r+0x11ec>
  80b75c:	d8802317 	ldw	r2,140(sp)
  80b760:	003d7b06 	br	80ad50 <__alt_mem_onchip_mem+0xff78ad50>
  80b764:	1000991e 	bne	r2,zero,80b9cc <___vfiprintf_internal_r+0xfd0>
  80b768:	00c00044 	movi	r3,1
  80b76c:	9805883a 	mov	r2,r19
  80b770:	dd400015 	stw	r21,0(sp)
  80b774:	dcc00115 	stw	r19,4(sp)
  80b778:	dcc01c15 	stw	r19,112(sp)
  80b77c:	d8c01b15 	stw	r3,108(sp)
  80b780:	d811883a 	mov	r8,sp
  80b784:	42000204 	addi	r8,r8,8
  80b788:	a2c0010c 	andi	r11,r20,4
  80b78c:	583fe426 	beq	r11,zero,80b720 <__alt_mem_onchip_mem+0xff78b720>
  80b790:	8ca7c83a 	sub	r19,r17,r18
  80b794:	04ffe20e 	bge	zero,r19,80b720 <__alt_mem_onchip_mem+0xff78b720>
  80b798:	01c00404 	movi	r7,16
  80b79c:	3cffcc0e 	bge	r7,r19,80b6d0 <__alt_mem_onchip_mem+0xff78b6d0>
  80b7a0:	02802074 	movhi	r10,129
  80b7a4:	528f7304 	addi	r10,r10,15820
  80b7a8:	d9001b17 	ldw	r4,108(sp)
  80b7ac:	da802415 	stw	r10,144(sp)
  80b7b0:	382b883a 	mov	r21,r7
  80b7b4:	050001c4 	movi	r20,7
  80b7b8:	df002017 	ldw	fp,128(sp)
  80b7bc:	00000506 	br	80b7d4 <___vfiprintf_internal_r+0xdd8>
  80b7c0:	21400084 	addi	r5,r4,2
  80b7c4:	42000204 	addi	r8,r8,8
  80b7c8:	1809883a 	mov	r4,r3
  80b7cc:	9cfffc04 	addi	r19,r19,-16
  80b7d0:	acffc40e 	bge	r21,r19,80b6e4 <__alt_mem_onchip_mem+0xff78b6e4>
  80b7d4:	10800404 	addi	r2,r2,16
  80b7d8:	20c00044 	addi	r3,r4,1
  80b7dc:	45800015 	stw	r22,0(r8)
  80b7e0:	45400115 	stw	r21,4(r8)
  80b7e4:	d8801c15 	stw	r2,112(sp)
  80b7e8:	d8c01b15 	stw	r3,108(sp)
  80b7ec:	a0fff40e 	bge	r20,r3,80b7c0 <__alt_mem_onchip_mem+0xff78b7c0>
  80b7f0:	1000041e 	bne	r2,zero,80b804 <___vfiprintf_internal_r+0xe08>
  80b7f4:	01400044 	movi	r5,1
  80b7f8:	0009883a 	mov	r4,zero
  80b7fc:	d811883a 	mov	r8,sp
  80b800:	003ff206 	br	80b7cc <__alt_mem_onchip_mem+0xff78b7cc>
  80b804:	d9402117 	ldw	r5,132(sp)
  80b808:	d9801a04 	addi	r6,sp,104
  80b80c:	e009883a 	mov	r4,fp
  80b810:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b814:	103fcd1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b818:	d9001b17 	ldw	r4,108(sp)
  80b81c:	d8801c17 	ldw	r2,112(sp)
  80b820:	d811883a 	mov	r8,sp
  80b824:	21400044 	addi	r5,r4,1
  80b828:	003fe806 	br	80b7cc <__alt_mem_onchip_mem+0xff78b7cc>
  80b82c:	d9402117 	ldw	r5,132(sp)
  80b830:	d9002017 	ldw	r4,128(sp)
  80b834:	d9801a04 	addi	r6,sp,104
  80b838:	d9c02b15 	stw	r7,172(sp)
  80b83c:	db402a15 	stw	r13,168(sp)
  80b840:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b844:	d9c02b17 	ldw	r7,172(sp)
  80b848:	db402a17 	ldw	r13,168(sp)
  80b84c:	103fbf1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b850:	d9401b17 	ldw	r5,108(sp)
  80b854:	d8801c17 	ldw	r2,112(sp)
  80b858:	d811883a 	mov	r8,sp
  80b85c:	29800044 	addi	r6,r5,1
  80b860:	003dc406 	br	80af74 <__alt_mem_onchip_mem+0xff78af74>
  80b864:	1000d21e 	bne	r2,zero,80bbb0 <___vfiprintf_internal_r+0x11b4>
  80b868:	d8c01d87 	ldb	r3,118(sp)
  80b86c:	18009526 	beq	r3,zero,80bac4 <___vfiprintf_internal_r+0x10c8>
  80b870:	00800044 	movi	r2,1
  80b874:	d8c01d84 	addi	r3,sp,118
  80b878:	1009883a 	mov	r4,r2
  80b87c:	d8c00015 	stw	r3,0(sp)
  80b880:	d8800115 	stw	r2,4(sp)
  80b884:	d811883a 	mov	r8,sp
  80b888:	200b883a 	mov	r5,r4
  80b88c:	42000204 	addi	r8,r8,8
  80b890:	21000044 	addi	r4,r4,1
  80b894:	003d9706 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b898:	d9001d04 	addi	r4,sp,116
  80b89c:	00800084 	movi	r2,2
  80b8a0:	d9000015 	stw	r4,0(sp)
  80b8a4:	d8800115 	stw	r2,4(sp)
  80b8a8:	1809883a 	mov	r4,r3
  80b8ac:	d811883a 	mov	r8,sp
  80b8b0:	200b883a 	mov	r5,r4
  80b8b4:	42000204 	addi	r8,r8,8
  80b8b8:	21000044 	addi	r4,r4,1
  80b8bc:	003f4e06 	br	80b5f8 <__alt_mem_onchip_mem+0xff78b5f8>
  80b8c0:	d8001d85 	stb	zero,118(sp)
  80b8c4:	48005016 	blt	r9,zero,80ba08 <___vfiprintf_internal_r+0x100c>
  80b8c8:	00ffdfc4 	movi	r3,-129
  80b8cc:	94c4b03a 	or	r2,r18,r19
  80b8d0:	a0e8703a 	and	r20,r20,r3
  80b8d4:	103d4426 	beq	r2,zero,80ade8 <__alt_mem_onchip_mem+0xff78ade8>
  80b8d8:	0039883a 	mov	fp,zero
  80b8dc:	d9002617 	ldw	r4,152(sp)
  80b8e0:	dd401a04 	addi	r21,sp,104
  80b8e4:	908003cc 	andi	r2,r18,15
  80b8e8:	9806973a 	slli	r3,r19,28
  80b8ec:	2085883a 	add	r2,r4,r2
  80b8f0:	9024d13a 	srli	r18,r18,4
  80b8f4:	10800003 	ldbu	r2,0(r2)
  80b8f8:	9826d13a 	srli	r19,r19,4
  80b8fc:	ad7fffc4 	addi	r21,r21,-1
  80b900:	1ca4b03a 	or	r18,r3,r18
  80b904:	a8800005 	stb	r2,0(r21)
  80b908:	94c4b03a 	or	r2,r18,r19
  80b90c:	103ff51e 	bne	r2,zero,80b8e4 <__alt_mem_onchip_mem+0xff78b8e4>
  80b910:	003e5906 	br	80b278 <__alt_mem_onchip_mem+0xff78b278>
  80b914:	d9402117 	ldw	r5,132(sp)
  80b918:	d9002017 	ldw	r4,128(sp)
  80b91c:	d9801a04 	addi	r6,sp,104
  80b920:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b924:	103f891e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b928:	d8801c17 	ldw	r2,112(sp)
  80b92c:	d811883a 	mov	r8,sp
  80b930:	003f9506 	br	80b788 <__alt_mem_onchip_mem+0xff78b788>
  80b934:	d9402117 	ldw	r5,132(sp)
  80b938:	d9002017 	ldw	r4,128(sp)
  80b93c:	d9801a04 	addi	r6,sp,104
  80b940:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b944:	103f811e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b948:	d811883a 	mov	r8,sp
  80b94c:	003ced06 	br	80ad04 <__alt_mem_onchip_mem+0xff78ad04>
  80b950:	d9402117 	ldw	r5,132(sp)
  80b954:	d9002017 	ldw	r4,128(sp)
  80b958:	d9801a04 	addi	r6,sp,104
  80b95c:	da402c15 	stw	r9,176(sp)
  80b960:	db802a15 	stw	r14,168(sp)
  80b964:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b968:	da402c17 	ldw	r9,176(sp)
  80b96c:	db802a17 	ldw	r14,168(sp)
  80b970:	103f761e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b974:	d9401b17 	ldw	r5,108(sp)
  80b978:	d8801c17 	ldw	r2,112(sp)
  80b97c:	d811883a 	mov	r8,sp
  80b980:	29000044 	addi	r4,r5,1
  80b984:	003d5b06 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b988:	d9402117 	ldw	r5,132(sp)
  80b98c:	d9002017 	ldw	r4,128(sp)
  80b990:	d9801a04 	addi	r6,sp,104
  80b994:	da402c15 	stw	r9,176(sp)
  80b998:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b99c:	da402c17 	ldw	r9,176(sp)
  80b9a0:	103f6a1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b9a4:	d9401b17 	ldw	r5,108(sp)
  80b9a8:	d8801c17 	ldw	r2,112(sp)
  80b9ac:	d811883a 	mov	r8,sp
  80b9b0:	29000044 	addi	r4,r5,1
  80b9b4:	003f1006 	br	80b5f8 <__alt_mem_onchip_mem+0xff78b5f8>
  80b9b8:	1000c31e 	bne	r2,zero,80bcc8 <___vfiprintf_internal_r+0x12cc>
  80b9bc:	01000044 	movi	r4,1
  80b9c0:	000b883a 	mov	r5,zero
  80b9c4:	d811883a 	mov	r8,sp
  80b9c8:	003f0d06 	br	80b600 <__alt_mem_onchip_mem+0xff78b600>
  80b9cc:	d9402117 	ldw	r5,132(sp)
  80b9d0:	d9002017 	ldw	r4,128(sp)
  80b9d4:	d9801a04 	addi	r6,sp,104
  80b9d8:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80b9dc:	103f5b1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80b9e0:	d9001b17 	ldw	r4,108(sp)
  80b9e4:	d8801c17 	ldw	r2,112(sp)
  80b9e8:	d811883a 	mov	r8,sp
  80b9ec:	21000044 	addi	r4,r4,1
  80b9f0:	003d8006 	br	80aff4 <__alt_mem_onchip_mem+0xff78aff4>
  80b9f4:	01002074 	movhi	r4,129
  80b9f8:	210f0e04 	addi	r4,r4,15416
  80b9fc:	d9002615 	stw	r4,152(sp)
  80ba00:	d8c02215 	stw	r3,136(sp)
  80ba04:	1029883a 	mov	r20,r2
  80ba08:	94c4b03a 	or	r2,r18,r19
  80ba0c:	103fb21e 	bne	r2,zero,80b8d8 <__alt_mem_onchip_mem+0xff78b8d8>
  80ba10:	0039883a 	mov	fp,zero
  80ba14:	00800084 	movi	r2,2
  80ba18:	003e6b06 	br	80b3c8 <__alt_mem_onchip_mem+0xff78b3c8>
  80ba1c:	da802217 	ldw	r10,136(sp)
  80ba20:	d8001d85 	stb	zero,118(sp)
  80ba24:	0027883a 	mov	r19,zero
  80ba28:	50800104 	addi	r2,r10,4
  80ba2c:	54800017 	ldw	r18,0(r10)
  80ba30:	483e6016 	blt	r9,zero,80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80ba34:	00ffdfc4 	movi	r3,-129
  80ba38:	d8802215 	stw	r2,136(sp)
  80ba3c:	a0e8703a 	and	r20,r20,r3
  80ba40:	0039883a 	mov	fp,zero
  80ba44:	903ebb26 	beq	r18,zero,80b534 <__alt_mem_onchip_mem+0xff78b534>
  80ba48:	00800244 	movi	r2,9
  80ba4c:	14bdee36 	bltu	r2,r18,80b208 <__alt_mem_onchip_mem+0xff78b208>
  80ba50:	003eba06 	br	80b53c <__alt_mem_onchip_mem+0xff78b53c>
  80ba54:	00800c04 	movi	r2,48
  80ba58:	d8c01d45 	stb	r3,117(sp)
  80ba5c:	d8801d05 	stb	r2,116(sp)
  80ba60:	d8001d85 	stb	zero,118(sp)
  80ba64:	a0c00094 	ori	r3,r20,2
  80ba68:	4800a916 	blt	r9,zero,80bd10 <___vfiprintf_internal_r+0x1314>
  80ba6c:	00bfdfc4 	movi	r2,-129
  80ba70:	a096703a 	and	r11,r20,r2
  80ba74:	5d000094 	ori	r20,r11,2
  80ba78:	0039883a 	mov	fp,zero
  80ba7c:	003f9706 	br	80b8dc <__alt_mem_onchip_mem+0xff78b8dc>
  80ba80:	8025883a 	mov	r18,r16
  80ba84:	003c2e06 	br	80ab40 <__alt_mem_onchip_mem+0xff78ab40>
  80ba88:	00802074 	movhi	r2,129
  80ba8c:	108f0e04 	addi	r2,r2,15416
  80ba90:	0039883a 	mov	fp,zero
  80ba94:	d8802615 	stw	r2,152(sp)
  80ba98:	003f9006 	br	80b8dc <__alt_mem_onchip_mem+0xff78b8dc>
  80ba9c:	04a5c83a 	sub	r18,zero,r18
  80baa0:	07000b44 	movi	fp,45
  80baa4:	9004c03a 	cmpne	r2,r18,zero
  80baa8:	04e7c83a 	sub	r19,zero,r19
  80baac:	df001d85 	stb	fp,118(sp)
  80bab0:	98a7c83a 	sub	r19,r19,r2
  80bab4:	48009f16 	blt	r9,zero,80bd34 <___vfiprintf_internal_r+0x1338>
  80bab8:	00bfdfc4 	movi	r2,-129
  80babc:	a0a8703a 	and	r20,r20,r2
  80bac0:	003dd006 	br	80b204 <__alt_mem_onchip_mem+0xff78b204>
  80bac4:	70004c26 	beq	r14,zero,80bbf8 <___vfiprintf_internal_r+0x11fc>
  80bac8:	00800084 	movi	r2,2
  80bacc:	d8c01d04 	addi	r3,sp,116
  80bad0:	d8c00015 	stw	r3,0(sp)
  80bad4:	d8800115 	stw	r2,4(sp)
  80bad8:	01000044 	movi	r4,1
  80badc:	d811883a 	mov	r8,sp
  80bae0:	003f7306 	br	80b8b0 <__alt_mem_onchip_mem+0xff78b8b0>
  80bae4:	a080100c 	andi	r2,r20,64
  80bae8:	da802217 	ldw	r10,136(sp)
  80baec:	103e0626 	beq	r2,zero,80b308 <__alt_mem_onchip_mem+0xff78b308>
  80baf0:	5480000f 	ldh	r18,0(r10)
  80baf4:	52800104 	addi	r10,r10,4
  80baf8:	da802215 	stw	r10,136(sp)
  80bafc:	9027d7fa 	srai	r19,r18,31
  80bb00:	9805883a 	mov	r2,r19
  80bb04:	003db806 	br	80b1e8 <__alt_mem_onchip_mem+0xff78b1e8>
  80bb08:	a080040c 	andi	r2,r20,16
  80bb0c:	1000091e 	bne	r2,zero,80bb34 <___vfiprintf_internal_r+0x1138>
  80bb10:	a2c0100c 	andi	r11,r20,64
  80bb14:	58000726 	beq	r11,zero,80bb34 <___vfiprintf_internal_r+0x1138>
  80bb18:	da802217 	ldw	r10,136(sp)
  80bb1c:	50800017 	ldw	r2,0(r10)
  80bb20:	52800104 	addi	r10,r10,4
  80bb24:	da802215 	stw	r10,136(sp)
  80bb28:	da802317 	ldw	r10,140(sp)
  80bb2c:	1280000d 	sth	r10,0(r2)
  80bb30:	003be706 	br	80aad0 <__alt_mem_onchip_mem+0xff78aad0>
  80bb34:	da802217 	ldw	r10,136(sp)
  80bb38:	50800017 	ldw	r2,0(r10)
  80bb3c:	52800104 	addi	r10,r10,4
  80bb40:	da802215 	stw	r10,136(sp)
  80bb44:	da802317 	ldw	r10,140(sp)
  80bb48:	12800015 	stw	r10,0(r2)
  80bb4c:	003be006 	br	80aad0 <__alt_mem_onchip_mem+0xff78aad0>
  80bb50:	a080100c 	andi	r2,r20,64
  80bb54:	da802217 	ldw	r10,136(sp)
  80bb58:	10003026 	beq	r2,zero,80bc1c <___vfiprintf_internal_r+0x1220>
  80bb5c:	5480000b 	ldhu	r18,0(r10)
  80bb60:	52800104 	addi	r10,r10,4
  80bb64:	0027883a 	mov	r19,zero
  80bb68:	da802215 	stw	r10,136(sp)
  80bb6c:	003d8006 	br	80b170 <__alt_mem_onchip_mem+0xff78b170>
  80bb70:	80c00007 	ldb	r3,0(r16)
  80bb74:	003c0006 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80bb78:	a080100c 	andi	r2,r20,64
  80bb7c:	d8001d85 	stb	zero,118(sp)
  80bb80:	da802217 	ldw	r10,136(sp)
  80bb84:	1000201e 	bne	r2,zero,80bc08 <___vfiprintf_internal_r+0x120c>
  80bb88:	50800104 	addi	r2,r10,4
  80bb8c:	54800017 	ldw	r18,0(r10)
  80bb90:	0027883a 	mov	r19,zero
  80bb94:	483def0e 	bge	r9,zero,80b354 <__alt_mem_onchip_mem+0xff78b354>
  80bb98:	94c6b03a 	or	r3,r18,r19
  80bb9c:	d8802215 	stw	r2,136(sp)
  80bba0:	183d4e1e 	bne	r3,zero,80b0dc <__alt_mem_onchip_mem+0xff78b0dc>
  80bba4:	0039883a 	mov	fp,zero
  80bba8:	0005883a 	mov	r2,zero
  80bbac:	003e0606 	br	80b3c8 <__alt_mem_onchip_mem+0xff78b3c8>
  80bbb0:	d9402117 	ldw	r5,132(sp)
  80bbb4:	d9002017 	ldw	r4,128(sp)
  80bbb8:	d9801a04 	addi	r6,sp,104
  80bbbc:	da402c15 	stw	r9,176(sp)
  80bbc0:	db802a15 	stw	r14,168(sp)
  80bbc4:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80bbc8:	da402c17 	ldw	r9,176(sp)
  80bbcc:	db802a17 	ldw	r14,168(sp)
  80bbd0:	103ede1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80bbd4:	d9401b17 	ldw	r5,108(sp)
  80bbd8:	d8801c17 	ldw	r2,112(sp)
  80bbdc:	d811883a 	mov	r8,sp
  80bbe0:	29000044 	addi	r4,r5,1
  80bbe4:	003e7406 	br	80b5b8 <__alt_mem_onchip_mem+0xff78b5b8>
  80bbe8:	00bfffc4 	movi	r2,-1
  80bbec:	003c5806 	br	80ad50 <__alt_mem_onchip_mem+0xff78ad50>
  80bbf0:	d811883a 	mov	r8,sp
  80bbf4:	003ee806 	br	80b798 <__alt_mem_onchip_mem+0xff78b798>
  80bbf8:	000b883a 	mov	r5,zero
  80bbfc:	01000044 	movi	r4,1
  80bc00:	d811883a 	mov	r8,sp
  80bc04:	003e7c06 	br	80b5f8 <__alt_mem_onchip_mem+0xff78b5f8>
  80bc08:	50800104 	addi	r2,r10,4
  80bc0c:	5480000b 	ldhu	r18,0(r10)
  80bc10:	0027883a 	mov	r19,zero
  80bc14:	483dcf0e 	bge	r9,zero,80b354 <__alt_mem_onchip_mem+0xff78b354>
  80bc18:	003fdf06 	br	80bb98 <__alt_mem_onchip_mem+0xff78bb98>
  80bc1c:	54800017 	ldw	r18,0(r10)
  80bc20:	52800104 	addi	r10,r10,4
  80bc24:	0027883a 	mov	r19,zero
  80bc28:	da802215 	stw	r10,136(sp)
  80bc2c:	003d5006 	br	80b170 <__alt_mem_onchip_mem+0xff78b170>
  80bc30:	50800104 	addi	r2,r10,4
  80bc34:	5480000b 	ldhu	r18,0(r10)
  80bc38:	0027883a 	mov	r19,zero
  80bc3c:	483f7d0e 	bge	r9,zero,80ba34 <__alt_mem_onchip_mem+0xff78ba34>
  80bc40:	003ddc06 	br	80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80bc44:	d8c02215 	stw	r3,136(sp)
  80bc48:	0039883a 	mov	fp,zero
  80bc4c:	003ddb06 	br	80b3bc <__alt_mem_onchip_mem+0xff78b3bc>
  80bc50:	02802074 	movhi	r10,129
  80bc54:	528f6f04 	addi	r10,r10,15804
  80bc58:	da802415 	stw	r10,144(sp)
  80bc5c:	003e8306 	br	80b66c <__alt_mem_onchip_mem+0xff78b66c>
  80bc60:	d8801c17 	ldw	r2,112(sp)
  80bc64:	dd002117 	ldw	r20,132(sp)
  80bc68:	103eb926 	beq	r2,zero,80b750 <__alt_mem_onchip_mem+0xff78b750>
  80bc6c:	d9002017 	ldw	r4,128(sp)
  80bc70:	d9801a04 	addi	r6,sp,104
  80bc74:	a00b883a 	mov	r5,r20
  80bc78:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80bc7c:	003eb406 	br	80b750 <__alt_mem_onchip_mem+0xff78b750>
  80bc80:	80c00043 	ldbu	r3,1(r16)
  80bc84:	a5000814 	ori	r20,r20,32
  80bc88:	84000044 	addi	r16,r16,1
  80bc8c:	18c03fcc 	andi	r3,r3,255
  80bc90:	18c0201c 	xori	r3,r3,128
  80bc94:	18ffe004 	addi	r3,r3,-128
  80bc98:	003bb706 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80bc9c:	a809883a 	mov	r4,r21
  80bca0:	d8c02a15 	stw	r3,168(sp)
  80bca4:	da002b15 	stw	r8,172(sp)
  80bca8:	08033500 	call	803350 <strlen>
  80bcac:	d8c02a17 	ldw	r3,168(sp)
  80bcb0:	1027883a 	mov	r19,r2
  80bcb4:	df001d83 	ldbu	fp,118(sp)
  80bcb8:	d8c02215 	stw	r3,136(sp)
  80bcbc:	0013883a 	mov	r9,zero
  80bcc0:	da002b17 	ldw	r8,172(sp)
  80bcc4:	003c4d06 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80bcc8:	d9402117 	ldw	r5,132(sp)
  80bccc:	d9002017 	ldw	r4,128(sp)
  80bcd0:	d9801a04 	addi	r6,sp,104
  80bcd4:	da402c15 	stw	r9,176(sp)
  80bcd8:	080a8e80 	call	80a8e8 <__sprint_r.part.0>
  80bcdc:	da402c17 	ldw	r9,176(sp)
  80bce0:	103e9a1e 	bne	r2,zero,80b74c <__alt_mem_onchip_mem+0xff78b74c>
  80bce4:	d9401b17 	ldw	r5,108(sp)
  80bce8:	d8801c17 	ldw	r2,112(sp)
  80bcec:	d811883a 	mov	r8,sp
  80bcf0:	29000044 	addi	r4,r5,1
  80bcf4:	003e4206 	br	80b600 <__alt_mem_onchip_mem+0xff78b600>
  80bcf8:	d9401b17 	ldw	r5,108(sp)
  80bcfc:	01002074 	movhi	r4,129
  80bd00:	210f7304 	addi	r4,r4,15820
  80bd04:	d9002415 	stw	r4,144(sp)
  80bd08:	29400044 	addi	r5,r5,1
  80bd0c:	003c6d06 	br	80aec4 <__alt_mem_onchip_mem+0xff78aec4>
  80bd10:	0039883a 	mov	fp,zero
  80bd14:	00800084 	movi	r2,2
  80bd18:	10803fcc 	andi	r2,r2,255
  80bd1c:	01000044 	movi	r4,1
  80bd20:	11001e26 	beq	r2,r4,80bd9c <___vfiprintf_internal_r+0x13a0>
  80bd24:	01000084 	movi	r4,2
  80bd28:	11001e1e 	bne	r2,r4,80bda4 <___vfiprintf_internal_r+0x13a8>
  80bd2c:	1829883a 	mov	r20,r3
  80bd30:	003eea06 	br	80b8dc <__alt_mem_onchip_mem+0xff78b8dc>
  80bd34:	a007883a 	mov	r3,r20
  80bd38:	00800044 	movi	r2,1
  80bd3c:	003ff606 	br	80bd18 <__alt_mem_onchip_mem+0xff78bd18>
  80bd40:	00800184 	movi	r2,6
  80bd44:	1240012e 	bgeu	r2,r9,80bd4c <___vfiprintf_internal_r+0x1350>
  80bd48:	1013883a 	mov	r9,r2
  80bd4c:	4827883a 	mov	r19,r9
  80bd50:	4825883a 	mov	r18,r9
  80bd54:	48001516 	blt	r9,zero,80bdac <___vfiprintf_internal_r+0x13b0>
  80bd58:	05402074 	movhi	r21,129
  80bd5c:	d8c02215 	stw	r3,136(sp)
  80bd60:	ad4f1304 	addi	r21,r21,15436
  80bd64:	003d1406 	br	80b1b8 <__alt_mem_onchip_mem+0xff78b1b8>
  80bd68:	02802074 	movhi	r10,129
  80bd6c:	528f6f04 	addi	r10,r10,15804
  80bd70:	da802415 	stw	r10,144(sp)
  80bd74:	200d883a 	mov	r6,r4
  80bd78:	003c9106 	br	80afc0 <__alt_mem_onchip_mem+0xff78afc0>
  80bd7c:	5021883a 	mov	r16,r10
  80bd80:	0013883a 	mov	r9,zero
  80bd84:	003b7d06 	br	80ab7c <__alt_mem_onchip_mem+0xff78ab7c>
  80bd88:	4827883a 	mov	r19,r9
  80bd8c:	df001d83 	ldbu	fp,118(sp)
  80bd90:	d8c02215 	stw	r3,136(sp)
  80bd94:	0013883a 	mov	r9,zero
  80bd98:	003c1806 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80bd9c:	1829883a 	mov	r20,r3
  80bda0:	003d1806 	br	80b204 <__alt_mem_onchip_mem+0xff78b204>
  80bda4:	1829883a 	mov	r20,r3
  80bda8:	003ccd06 	br	80b0e0 <__alt_mem_onchip_mem+0xff78b0e0>
  80bdac:	0025883a 	mov	r18,zero
  80bdb0:	003fe906 	br	80bd58 <__alt_mem_onchip_mem+0xff78bd58>
  80bdb4:	d8802217 	ldw	r2,136(sp)
  80bdb8:	80c00043 	ldbu	r3,1(r16)
  80bdbc:	5021883a 	mov	r16,r10
  80bdc0:	12400017 	ldw	r9,0(r2)
  80bdc4:	10800104 	addi	r2,r2,4
  80bdc8:	d8802215 	stw	r2,136(sp)
  80bdcc:	483faf0e 	bge	r9,zero,80bc8c <__alt_mem_onchip_mem+0xff78bc8c>
  80bdd0:	18c03fcc 	andi	r3,r3,255
  80bdd4:	18c0201c 	xori	r3,r3,128
  80bdd8:	027fffc4 	movi	r9,-1
  80bddc:	18ffe004 	addi	r3,r3,-128
  80bde0:	003b6506 	br	80ab78 <__alt_mem_onchip_mem+0xff78ab78>
  80bde4:	d9c01d85 	stb	r7,118(sp)
  80bde8:	003ca006 	br	80b06c <__alt_mem_onchip_mem+0xff78b06c>
  80bdec:	d9c01d85 	stb	r7,118(sp)
  80bdf0:	003cad06 	br	80b0a8 <__alt_mem_onchip_mem+0xff78b0a8>
  80bdf4:	d9c01d85 	stb	r7,118(sp)
  80bdf8:	003d7d06 	br	80b3f0 <__alt_mem_onchip_mem+0xff78b3f0>
  80bdfc:	d9c01d85 	stb	r7,118(sp)
  80be00:	003d5f06 	br	80b380 <__alt_mem_onchip_mem+0xff78b380>
  80be04:	a080004c 	andi	r2,r20,1
  80be08:	0039883a 	mov	fp,zero
  80be0c:	10000526 	beq	r2,zero,80be24 <___vfiprintf_internal_r+0x1428>
  80be10:	00800c04 	movi	r2,48
  80be14:	d88019c5 	stb	r2,103(sp)
  80be18:	dcc02717 	ldw	r19,156(sp)
  80be1c:	dd4019c4 	addi	r21,sp,103
  80be20:	003bf606 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80be24:	0027883a 	mov	r19,zero
  80be28:	dd401a04 	addi	r21,sp,104
  80be2c:	003bf306 	br	80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80be30:	d9c01d85 	stb	r7,118(sp)
  80be34:	003dc806 	br	80b558 <__alt_mem_onchip_mem+0xff78b558>
  80be38:	d9c01d85 	stb	r7,118(sp)
  80be3c:	003d3a06 	br	80b328 <__alt_mem_onchip_mem+0xff78b328>
  80be40:	d9c01d85 	stb	r7,118(sp)
  80be44:	003d2a06 	br	80b2f0 <__alt_mem_onchip_mem+0xff78b2f0>
  80be48:	d9c01d85 	stb	r7,118(sp)
  80be4c:	003cde06 	br	80b1c8 <__alt_mem_onchip_mem+0xff78b1c8>
  80be50:	d9c01d85 	stb	r7,118(sp)
  80be54:	003cbc06 	br	80b148 <__alt_mem_onchip_mem+0xff78b148>

0080be58 <__vfiprintf_internal>:
  80be58:	00802074 	movhi	r2,129
  80be5c:	10978d04 	addi	r2,r2,24116
  80be60:	300f883a 	mov	r7,r6
  80be64:	280d883a 	mov	r6,r5
  80be68:	200b883a 	mov	r5,r4
  80be6c:	11000017 	ldw	r4,0(r2)
  80be70:	080a9fc1 	jmpi	80a9fc <___vfiprintf_internal_r>

0080be74 <__sbprintf>:
  80be74:	2880030b 	ldhu	r2,12(r5)
  80be78:	2ac01917 	ldw	r11,100(r5)
  80be7c:	2a80038b 	ldhu	r10,14(r5)
  80be80:	2a400717 	ldw	r9,28(r5)
  80be84:	2a000917 	ldw	r8,36(r5)
  80be88:	defee204 	addi	sp,sp,-1144
  80be8c:	00c10004 	movi	r3,1024
  80be90:	dc011a15 	stw	r16,1128(sp)
  80be94:	10bfff4c 	andi	r2,r2,65533
  80be98:	2821883a 	mov	r16,r5
  80be9c:	d8cb883a 	add	r5,sp,r3
  80bea0:	dc811c15 	stw	r18,1136(sp)
  80bea4:	dc411b15 	stw	r17,1132(sp)
  80bea8:	dfc11d15 	stw	ra,1140(sp)
  80beac:	2025883a 	mov	r18,r4
  80beb0:	d881030d 	sth	r2,1036(sp)
  80beb4:	dac11915 	stw	r11,1124(sp)
  80beb8:	da81038d 	sth	r10,1038(sp)
  80bebc:	da410715 	stw	r9,1052(sp)
  80bec0:	da010915 	stw	r8,1060(sp)
  80bec4:	dec10015 	stw	sp,1024(sp)
  80bec8:	dec10415 	stw	sp,1040(sp)
  80becc:	d8c10215 	stw	r3,1032(sp)
  80bed0:	d8c10515 	stw	r3,1044(sp)
  80bed4:	d8010615 	stw	zero,1048(sp)
  80bed8:	080a9fc0 	call	80a9fc <___vfiprintf_internal_r>
  80bedc:	1023883a 	mov	r17,r2
  80bee0:	10000416 	blt	r2,zero,80bef4 <__sbprintf+0x80>
  80bee4:	d9410004 	addi	r5,sp,1024
  80bee8:	9009883a 	mov	r4,r18
  80beec:	08072b00 	call	8072b0 <_fflush_r>
  80bef0:	10000d1e 	bne	r2,zero,80bf28 <__sbprintf+0xb4>
  80bef4:	d881030b 	ldhu	r2,1036(sp)
  80bef8:	1080100c 	andi	r2,r2,64
  80befc:	10000326 	beq	r2,zero,80bf0c <__sbprintf+0x98>
  80bf00:	8080030b 	ldhu	r2,12(r16)
  80bf04:	10801014 	ori	r2,r2,64
  80bf08:	8080030d 	sth	r2,12(r16)
  80bf0c:	8805883a 	mov	r2,r17
  80bf10:	dfc11d17 	ldw	ra,1140(sp)
  80bf14:	dc811c17 	ldw	r18,1136(sp)
  80bf18:	dc411b17 	ldw	r17,1132(sp)
  80bf1c:	dc011a17 	ldw	r16,1128(sp)
  80bf20:	dec11e04 	addi	sp,sp,1144
  80bf24:	f800283a 	ret
  80bf28:	047fffc4 	movi	r17,-1
  80bf2c:	003ff106 	br	80bef4 <__alt_mem_onchip_mem+0xff78bef4>

0080bf30 <_write_r>:
  80bf30:	defffd04 	addi	sp,sp,-12
  80bf34:	2805883a 	mov	r2,r5
  80bf38:	dc000015 	stw	r16,0(sp)
  80bf3c:	04002074 	movhi	r16,129
  80bf40:	dc400115 	stw	r17,4(sp)
  80bf44:	300b883a 	mov	r5,r6
  80bf48:	841f3304 	addi	r16,r16,31948
  80bf4c:	2023883a 	mov	r17,r4
  80bf50:	380d883a 	mov	r6,r7
  80bf54:	1009883a 	mov	r4,r2
  80bf58:	dfc00215 	stw	ra,8(sp)
  80bf5c:	80000015 	stw	zero,0(r16)
  80bf60:	08104980 	call	810498 <write>
  80bf64:	00ffffc4 	movi	r3,-1
  80bf68:	10c00526 	beq	r2,r3,80bf80 <_write_r+0x50>
  80bf6c:	dfc00217 	ldw	ra,8(sp)
  80bf70:	dc400117 	ldw	r17,4(sp)
  80bf74:	dc000017 	ldw	r16,0(sp)
  80bf78:	dec00304 	addi	sp,sp,12
  80bf7c:	f800283a 	ret
  80bf80:	80c00017 	ldw	r3,0(r16)
  80bf84:	183ff926 	beq	r3,zero,80bf6c <__alt_mem_onchip_mem+0xff78bf6c>
  80bf88:	88c00015 	stw	r3,0(r17)
  80bf8c:	003ff706 	br	80bf6c <__alt_mem_onchip_mem+0xff78bf6c>

0080bf90 <_close_r>:
  80bf90:	defffd04 	addi	sp,sp,-12
  80bf94:	dc000015 	stw	r16,0(sp)
  80bf98:	04002074 	movhi	r16,129
  80bf9c:	dc400115 	stw	r17,4(sp)
  80bfa0:	841f3304 	addi	r16,r16,31948
  80bfa4:	2023883a 	mov	r17,r4
  80bfa8:	2809883a 	mov	r4,r5
  80bfac:	dfc00215 	stw	ra,8(sp)
  80bfb0:	80000015 	stw	zero,0(r16)
  80bfb4:	080fae40 	call	80fae4 <close>
  80bfb8:	00ffffc4 	movi	r3,-1
  80bfbc:	10c00526 	beq	r2,r3,80bfd4 <_close_r+0x44>
  80bfc0:	dfc00217 	ldw	ra,8(sp)
  80bfc4:	dc400117 	ldw	r17,4(sp)
  80bfc8:	dc000017 	ldw	r16,0(sp)
  80bfcc:	dec00304 	addi	sp,sp,12
  80bfd0:	f800283a 	ret
  80bfd4:	80c00017 	ldw	r3,0(r16)
  80bfd8:	183ff926 	beq	r3,zero,80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80bfdc:	88c00015 	stw	r3,0(r17)
  80bfe0:	003ff706 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>

0080bfe4 <_calloc_r>:
  80bfe4:	298b383a 	mul	r5,r5,r6
  80bfe8:	defffe04 	addi	sp,sp,-8
  80bfec:	dfc00115 	stw	ra,4(sp)
  80bff0:	dc000015 	stw	r16,0(sp)
  80bff4:	08083ec0 	call	8083ec <_malloc_r>
  80bff8:	10002926 	beq	r2,zero,80c0a0 <_calloc_r+0xbc>
  80bffc:	11bfff17 	ldw	r6,-4(r2)
  80c000:	1021883a 	mov	r16,r2
  80c004:	00bfff04 	movi	r2,-4
  80c008:	308c703a 	and	r6,r6,r2
  80c00c:	00c00904 	movi	r3,36
  80c010:	308d883a 	add	r6,r6,r2
  80c014:	19801636 	bltu	r3,r6,80c070 <_calloc_r+0x8c>
  80c018:	008004c4 	movi	r2,19
  80c01c:	11800b2e 	bgeu	r2,r6,80c04c <_calloc_r+0x68>
  80c020:	80000015 	stw	zero,0(r16)
  80c024:	80000115 	stw	zero,4(r16)
  80c028:	008006c4 	movi	r2,27
  80c02c:	11801a2e 	bgeu	r2,r6,80c098 <_calloc_r+0xb4>
  80c030:	80000215 	stw	zero,8(r16)
  80c034:	80000315 	stw	zero,12(r16)
  80c038:	30c0151e 	bne	r6,r3,80c090 <_calloc_r+0xac>
  80c03c:	80000415 	stw	zero,16(r16)
  80c040:	80800604 	addi	r2,r16,24
  80c044:	80000515 	stw	zero,20(r16)
  80c048:	00000106 	br	80c050 <_calloc_r+0x6c>
  80c04c:	8005883a 	mov	r2,r16
  80c050:	10000015 	stw	zero,0(r2)
  80c054:	10000115 	stw	zero,4(r2)
  80c058:	10000215 	stw	zero,8(r2)
  80c05c:	8005883a 	mov	r2,r16
  80c060:	dfc00117 	ldw	ra,4(sp)
  80c064:	dc000017 	ldw	r16,0(sp)
  80c068:	dec00204 	addi	sp,sp,8
  80c06c:	f800283a 	ret
  80c070:	000b883a 	mov	r5,zero
  80c074:	8009883a 	mov	r4,r16
  80c078:	0808f800 	call	808f80 <memset>
  80c07c:	8005883a 	mov	r2,r16
  80c080:	dfc00117 	ldw	ra,4(sp)
  80c084:	dc000017 	ldw	r16,0(sp)
  80c088:	dec00204 	addi	sp,sp,8
  80c08c:	f800283a 	ret
  80c090:	80800404 	addi	r2,r16,16
  80c094:	003fee06 	br	80c050 <__alt_mem_onchip_mem+0xff78c050>
  80c098:	80800204 	addi	r2,r16,8
  80c09c:	003fec06 	br	80c050 <__alt_mem_onchip_mem+0xff78c050>
  80c0a0:	0005883a 	mov	r2,zero
  80c0a4:	003fee06 	br	80c060 <__alt_mem_onchip_mem+0xff78c060>

0080c0a8 <_fclose_r>:
  80c0a8:	28003926 	beq	r5,zero,80c190 <_fclose_r+0xe8>
  80c0ac:	defffc04 	addi	sp,sp,-16
  80c0b0:	dc400115 	stw	r17,4(sp)
  80c0b4:	dc000015 	stw	r16,0(sp)
  80c0b8:	dfc00315 	stw	ra,12(sp)
  80c0bc:	dc800215 	stw	r18,8(sp)
  80c0c0:	2023883a 	mov	r17,r4
  80c0c4:	2821883a 	mov	r16,r5
  80c0c8:	20000226 	beq	r4,zero,80c0d4 <_fclose_r+0x2c>
  80c0cc:	20800e17 	ldw	r2,56(r4)
  80c0d0:	10002726 	beq	r2,zero,80c170 <_fclose_r+0xc8>
  80c0d4:	8080030f 	ldh	r2,12(r16)
  80c0d8:	1000071e 	bne	r2,zero,80c0f8 <_fclose_r+0x50>
  80c0dc:	0005883a 	mov	r2,zero
  80c0e0:	dfc00317 	ldw	ra,12(sp)
  80c0e4:	dc800217 	ldw	r18,8(sp)
  80c0e8:	dc400117 	ldw	r17,4(sp)
  80c0ec:	dc000017 	ldw	r16,0(sp)
  80c0f0:	dec00404 	addi	sp,sp,16
  80c0f4:	f800283a 	ret
  80c0f8:	800b883a 	mov	r5,r16
  80c0fc:	8809883a 	mov	r4,r17
  80c100:	08070940 	call	807094 <__sflush_r>
  80c104:	1025883a 	mov	r18,r2
  80c108:	80800b17 	ldw	r2,44(r16)
  80c10c:	10000426 	beq	r2,zero,80c120 <_fclose_r+0x78>
  80c110:	81400717 	ldw	r5,28(r16)
  80c114:	8809883a 	mov	r4,r17
  80c118:	103ee83a 	callr	r2
  80c11c:	10001616 	blt	r2,zero,80c178 <_fclose_r+0xd0>
  80c120:	8080030b 	ldhu	r2,12(r16)
  80c124:	1080200c 	andi	r2,r2,128
  80c128:	1000151e 	bne	r2,zero,80c180 <_fclose_r+0xd8>
  80c12c:	81400c17 	ldw	r5,48(r16)
  80c130:	28000526 	beq	r5,zero,80c148 <_fclose_r+0xa0>
  80c134:	80801004 	addi	r2,r16,64
  80c138:	28800226 	beq	r5,r2,80c144 <_fclose_r+0x9c>
  80c13c:	8809883a 	mov	r4,r17
  80c140:	08078000 	call	807800 <_free_r>
  80c144:	80000c15 	stw	zero,48(r16)
  80c148:	81401117 	ldw	r5,68(r16)
  80c14c:	28000326 	beq	r5,zero,80c15c <_fclose_r+0xb4>
  80c150:	8809883a 	mov	r4,r17
  80c154:	08078000 	call	807800 <_free_r>
  80c158:	80001115 	stw	zero,68(r16)
  80c15c:	080769c0 	call	80769c <__sfp_lock_acquire>
  80c160:	8000030d 	sth	zero,12(r16)
  80c164:	08076a00 	call	8076a0 <__sfp_lock_release>
  80c168:	9005883a 	mov	r2,r18
  80c16c:	003fdc06 	br	80c0e0 <__alt_mem_onchip_mem+0xff78c0e0>
  80c170:	080768c0 	call	80768c <__sinit>
  80c174:	003fd706 	br	80c0d4 <__alt_mem_onchip_mem+0xff78c0d4>
  80c178:	04bfffc4 	movi	r18,-1
  80c17c:	003fe806 	br	80c120 <__alt_mem_onchip_mem+0xff78c120>
  80c180:	81400417 	ldw	r5,16(r16)
  80c184:	8809883a 	mov	r4,r17
  80c188:	08078000 	call	807800 <_free_r>
  80c18c:	003fe706 	br	80c12c <__alt_mem_onchip_mem+0xff78c12c>
  80c190:	0005883a 	mov	r2,zero
  80c194:	f800283a 	ret

0080c198 <fclose>:
  80c198:	00802074 	movhi	r2,129
  80c19c:	10978d04 	addi	r2,r2,24116
  80c1a0:	200b883a 	mov	r5,r4
  80c1a4:	11000017 	ldw	r4,0(r2)
  80c1a8:	080c0a81 	jmpi	80c0a8 <_fclose_r>

0080c1ac <__fputwc>:
  80c1ac:	defff804 	addi	sp,sp,-32
  80c1b0:	dcc00415 	stw	r19,16(sp)
  80c1b4:	dc800315 	stw	r18,12(sp)
  80c1b8:	dc000115 	stw	r16,4(sp)
  80c1bc:	dfc00715 	stw	ra,28(sp)
  80c1c0:	dd400615 	stw	r21,24(sp)
  80c1c4:	dd000515 	stw	r20,20(sp)
  80c1c8:	dc400215 	stw	r17,8(sp)
  80c1cc:	2027883a 	mov	r19,r4
  80c1d0:	2825883a 	mov	r18,r5
  80c1d4:	3021883a 	mov	r16,r6
  80c1d8:	08081dc0 	call	8081dc <__locale_mb_cur_max>
  80c1dc:	00c00044 	movi	r3,1
  80c1e0:	10c03e26 	beq	r2,r3,80c2dc <__fputwc+0x130>
  80c1e4:	81c01704 	addi	r7,r16,92
  80c1e8:	900d883a 	mov	r6,r18
  80c1ec:	d80b883a 	mov	r5,sp
  80c1f0:	9809883a 	mov	r4,r19
  80c1f4:	080c67c0 	call	80c67c <_wcrtomb_r>
  80c1f8:	1029883a 	mov	r20,r2
  80c1fc:	00bfffc4 	movi	r2,-1
  80c200:	a0802026 	beq	r20,r2,80c284 <__fputwc+0xd8>
  80c204:	d9400003 	ldbu	r5,0(sp)
  80c208:	a0001c26 	beq	r20,zero,80c27c <__fputwc+0xd0>
  80c20c:	0023883a 	mov	r17,zero
  80c210:	05400284 	movi	r21,10
  80c214:	00000906 	br	80c23c <__fputwc+0x90>
  80c218:	80800017 	ldw	r2,0(r16)
  80c21c:	11400005 	stb	r5,0(r2)
  80c220:	80c00017 	ldw	r3,0(r16)
  80c224:	18c00044 	addi	r3,r3,1
  80c228:	80c00015 	stw	r3,0(r16)
  80c22c:	8c400044 	addi	r17,r17,1
  80c230:	dc45883a 	add	r2,sp,r17
  80c234:	8d00112e 	bgeu	r17,r20,80c27c <__fputwc+0xd0>
  80c238:	11400003 	ldbu	r5,0(r2)
  80c23c:	80c00217 	ldw	r3,8(r16)
  80c240:	18ffffc4 	addi	r3,r3,-1
  80c244:	80c00215 	stw	r3,8(r16)
  80c248:	183ff30e 	bge	r3,zero,80c218 <__alt_mem_onchip_mem+0xff78c218>
  80c24c:	80800617 	ldw	r2,24(r16)
  80c250:	18801916 	blt	r3,r2,80c2b8 <__fputwc+0x10c>
  80c254:	80800017 	ldw	r2,0(r16)
  80c258:	11400005 	stb	r5,0(r2)
  80c25c:	80800017 	ldw	r2,0(r16)
  80c260:	10c00003 	ldbu	r3,0(r2)
  80c264:	10800044 	addi	r2,r2,1
  80c268:	1d402326 	beq	r3,r21,80c2f8 <__fputwc+0x14c>
  80c26c:	80800015 	stw	r2,0(r16)
  80c270:	8c400044 	addi	r17,r17,1
  80c274:	dc45883a 	add	r2,sp,r17
  80c278:	8d3fef36 	bltu	r17,r20,80c238 <__alt_mem_onchip_mem+0xff78c238>
  80c27c:	9005883a 	mov	r2,r18
  80c280:	00000406 	br	80c294 <__fputwc+0xe8>
  80c284:	80c0030b 	ldhu	r3,12(r16)
  80c288:	a005883a 	mov	r2,r20
  80c28c:	18c01014 	ori	r3,r3,64
  80c290:	80c0030d 	sth	r3,12(r16)
  80c294:	dfc00717 	ldw	ra,28(sp)
  80c298:	dd400617 	ldw	r21,24(sp)
  80c29c:	dd000517 	ldw	r20,20(sp)
  80c2a0:	dcc00417 	ldw	r19,16(sp)
  80c2a4:	dc800317 	ldw	r18,12(sp)
  80c2a8:	dc400217 	ldw	r17,8(sp)
  80c2ac:	dc000117 	ldw	r16,4(sp)
  80c2b0:	dec00804 	addi	sp,sp,32
  80c2b4:	f800283a 	ret
  80c2b8:	800d883a 	mov	r6,r16
  80c2bc:	29403fcc 	andi	r5,r5,255
  80c2c0:	9809883a 	mov	r4,r19
  80c2c4:	080c5240 	call	80c524 <__swbuf_r>
  80c2c8:	10bfffe0 	cmpeqi	r2,r2,-1
  80c2cc:	10803fcc 	andi	r2,r2,255
  80c2d0:	103fd626 	beq	r2,zero,80c22c <__alt_mem_onchip_mem+0xff78c22c>
  80c2d4:	00bfffc4 	movi	r2,-1
  80c2d8:	003fee06 	br	80c294 <__alt_mem_onchip_mem+0xff78c294>
  80c2dc:	90ffffc4 	addi	r3,r18,-1
  80c2e0:	01003f84 	movi	r4,254
  80c2e4:	20ffbf36 	bltu	r4,r3,80c1e4 <__alt_mem_onchip_mem+0xff78c1e4>
  80c2e8:	900b883a 	mov	r5,r18
  80c2ec:	dc800005 	stb	r18,0(sp)
  80c2f0:	1029883a 	mov	r20,r2
  80c2f4:	003fc506 	br	80c20c <__alt_mem_onchip_mem+0xff78c20c>
  80c2f8:	800d883a 	mov	r6,r16
  80c2fc:	a80b883a 	mov	r5,r21
  80c300:	9809883a 	mov	r4,r19
  80c304:	080c5240 	call	80c524 <__swbuf_r>
  80c308:	10bfffe0 	cmpeqi	r2,r2,-1
  80c30c:	003fef06 	br	80c2cc <__alt_mem_onchip_mem+0xff78c2cc>

0080c310 <_fputwc_r>:
  80c310:	3080030b 	ldhu	r2,12(r6)
  80c314:	10c8000c 	andi	r3,r2,8192
  80c318:	1800051e 	bne	r3,zero,80c330 <_fputwc_r+0x20>
  80c31c:	30c01917 	ldw	r3,100(r6)
  80c320:	10880014 	ori	r2,r2,8192
  80c324:	3080030d 	sth	r2,12(r6)
  80c328:	18880014 	ori	r2,r3,8192
  80c32c:	30801915 	stw	r2,100(r6)
  80c330:	080c1ac1 	jmpi	80c1ac <__fputwc>

0080c334 <fputwc>:
  80c334:	00802074 	movhi	r2,129
  80c338:	defffc04 	addi	sp,sp,-16
  80c33c:	10978d04 	addi	r2,r2,24116
  80c340:	dc000115 	stw	r16,4(sp)
  80c344:	14000017 	ldw	r16,0(r2)
  80c348:	dc400215 	stw	r17,8(sp)
  80c34c:	dfc00315 	stw	ra,12(sp)
  80c350:	2023883a 	mov	r17,r4
  80c354:	80000226 	beq	r16,zero,80c360 <fputwc+0x2c>
  80c358:	80800e17 	ldw	r2,56(r16)
  80c35c:	10001026 	beq	r2,zero,80c3a0 <fputwc+0x6c>
  80c360:	2880030b 	ldhu	r2,12(r5)
  80c364:	10c8000c 	andi	r3,r2,8192
  80c368:	1800051e 	bne	r3,zero,80c380 <fputwc+0x4c>
  80c36c:	28c01917 	ldw	r3,100(r5)
  80c370:	10880014 	ori	r2,r2,8192
  80c374:	2880030d 	sth	r2,12(r5)
  80c378:	18880014 	ori	r2,r3,8192
  80c37c:	28801915 	stw	r2,100(r5)
  80c380:	280d883a 	mov	r6,r5
  80c384:	8009883a 	mov	r4,r16
  80c388:	880b883a 	mov	r5,r17
  80c38c:	dfc00317 	ldw	ra,12(sp)
  80c390:	dc400217 	ldw	r17,8(sp)
  80c394:	dc000117 	ldw	r16,4(sp)
  80c398:	dec00404 	addi	sp,sp,16
  80c39c:	080c1ac1 	jmpi	80c1ac <__fputwc>
  80c3a0:	8009883a 	mov	r4,r16
  80c3a4:	d9400015 	stw	r5,0(sp)
  80c3a8:	080768c0 	call	80768c <__sinit>
  80c3ac:	d9400017 	ldw	r5,0(sp)
  80c3b0:	003feb06 	br	80c360 <__alt_mem_onchip_mem+0xff78c360>

0080c3b4 <_fstat_r>:
  80c3b4:	defffd04 	addi	sp,sp,-12
  80c3b8:	2805883a 	mov	r2,r5
  80c3bc:	dc000015 	stw	r16,0(sp)
  80c3c0:	04002074 	movhi	r16,129
  80c3c4:	dc400115 	stw	r17,4(sp)
  80c3c8:	841f3304 	addi	r16,r16,31948
  80c3cc:	2023883a 	mov	r17,r4
  80c3d0:	300b883a 	mov	r5,r6
  80c3d4:	1009883a 	mov	r4,r2
  80c3d8:	dfc00215 	stw	ra,8(sp)
  80c3dc:	80000015 	stw	zero,0(r16)
  80c3e0:	080fc1c0 	call	80fc1c <fstat>
  80c3e4:	00ffffc4 	movi	r3,-1
  80c3e8:	10c00526 	beq	r2,r3,80c400 <_fstat_r+0x4c>
  80c3ec:	dfc00217 	ldw	ra,8(sp)
  80c3f0:	dc400117 	ldw	r17,4(sp)
  80c3f4:	dc000017 	ldw	r16,0(sp)
  80c3f8:	dec00304 	addi	sp,sp,12
  80c3fc:	f800283a 	ret
  80c400:	80c00017 	ldw	r3,0(r16)
  80c404:	183ff926 	beq	r3,zero,80c3ec <__alt_mem_onchip_mem+0xff78c3ec>
  80c408:	88c00015 	stw	r3,0(r17)
  80c40c:	003ff706 	br	80c3ec <__alt_mem_onchip_mem+0xff78c3ec>

0080c410 <_isatty_r>:
  80c410:	defffd04 	addi	sp,sp,-12
  80c414:	dc000015 	stw	r16,0(sp)
  80c418:	04002074 	movhi	r16,129
  80c41c:	dc400115 	stw	r17,4(sp)
  80c420:	841f3304 	addi	r16,r16,31948
  80c424:	2023883a 	mov	r17,r4
  80c428:	2809883a 	mov	r4,r5
  80c42c:	dfc00215 	stw	ra,8(sp)
  80c430:	80000015 	stw	zero,0(r16)
  80c434:	080fd080 	call	80fd08 <isatty>
  80c438:	00ffffc4 	movi	r3,-1
  80c43c:	10c00526 	beq	r2,r3,80c454 <_isatty_r+0x44>
  80c440:	dfc00217 	ldw	ra,8(sp)
  80c444:	dc400117 	ldw	r17,4(sp)
  80c448:	dc000017 	ldw	r16,0(sp)
  80c44c:	dec00304 	addi	sp,sp,12
  80c450:	f800283a 	ret
  80c454:	80c00017 	ldw	r3,0(r16)
  80c458:	183ff926 	beq	r3,zero,80c440 <__alt_mem_onchip_mem+0xff78c440>
  80c45c:	88c00015 	stw	r3,0(r17)
  80c460:	003ff706 	br	80c440 <__alt_mem_onchip_mem+0xff78c440>

0080c464 <_lseek_r>:
  80c464:	defffd04 	addi	sp,sp,-12
  80c468:	2805883a 	mov	r2,r5
  80c46c:	dc000015 	stw	r16,0(sp)
  80c470:	04002074 	movhi	r16,129
  80c474:	dc400115 	stw	r17,4(sp)
  80c478:	300b883a 	mov	r5,r6
  80c47c:	841f3304 	addi	r16,r16,31948
  80c480:	2023883a 	mov	r17,r4
  80c484:	380d883a 	mov	r6,r7
  80c488:	1009883a 	mov	r4,r2
  80c48c:	dfc00215 	stw	ra,8(sp)
  80c490:	80000015 	stw	zero,0(r16)
  80c494:	080fed40 	call	80fed4 <lseek>
  80c498:	00ffffc4 	movi	r3,-1
  80c49c:	10c00526 	beq	r2,r3,80c4b4 <_lseek_r+0x50>
  80c4a0:	dfc00217 	ldw	ra,8(sp)
  80c4a4:	dc400117 	ldw	r17,4(sp)
  80c4a8:	dc000017 	ldw	r16,0(sp)
  80c4ac:	dec00304 	addi	sp,sp,12
  80c4b0:	f800283a 	ret
  80c4b4:	80c00017 	ldw	r3,0(r16)
  80c4b8:	183ff926 	beq	r3,zero,80c4a0 <__alt_mem_onchip_mem+0xff78c4a0>
  80c4bc:	88c00015 	stw	r3,0(r17)
  80c4c0:	003ff706 	br	80c4a0 <__alt_mem_onchip_mem+0xff78c4a0>

0080c4c4 <_read_r>:
  80c4c4:	defffd04 	addi	sp,sp,-12
  80c4c8:	2805883a 	mov	r2,r5
  80c4cc:	dc000015 	stw	r16,0(sp)
  80c4d0:	04002074 	movhi	r16,129
  80c4d4:	dc400115 	stw	r17,4(sp)
  80c4d8:	300b883a 	mov	r5,r6
  80c4dc:	841f3304 	addi	r16,r16,31948
  80c4e0:	2023883a 	mov	r17,r4
  80c4e4:	380d883a 	mov	r6,r7
  80c4e8:	1009883a 	mov	r4,r2
  80c4ec:	dfc00215 	stw	ra,8(sp)
  80c4f0:	80000015 	stw	zero,0(r16)
  80c4f4:	08100a80 	call	8100a8 <read>
  80c4f8:	00ffffc4 	movi	r3,-1
  80c4fc:	10c00526 	beq	r2,r3,80c514 <_read_r+0x50>
  80c500:	dfc00217 	ldw	ra,8(sp)
  80c504:	dc400117 	ldw	r17,4(sp)
  80c508:	dc000017 	ldw	r16,0(sp)
  80c50c:	dec00304 	addi	sp,sp,12
  80c510:	f800283a 	ret
  80c514:	80c00017 	ldw	r3,0(r16)
  80c518:	183ff926 	beq	r3,zero,80c500 <__alt_mem_onchip_mem+0xff78c500>
  80c51c:	88c00015 	stw	r3,0(r17)
  80c520:	003ff706 	br	80c500 <__alt_mem_onchip_mem+0xff78c500>

0080c524 <__swbuf_r>:
  80c524:	defffb04 	addi	sp,sp,-20
  80c528:	dcc00315 	stw	r19,12(sp)
  80c52c:	dc800215 	stw	r18,8(sp)
  80c530:	dc000015 	stw	r16,0(sp)
  80c534:	dfc00415 	stw	ra,16(sp)
  80c538:	dc400115 	stw	r17,4(sp)
  80c53c:	2025883a 	mov	r18,r4
  80c540:	2827883a 	mov	r19,r5
  80c544:	3021883a 	mov	r16,r6
  80c548:	20000226 	beq	r4,zero,80c554 <__swbuf_r+0x30>
  80c54c:	20800e17 	ldw	r2,56(r4)
  80c550:	10004226 	beq	r2,zero,80c65c <__swbuf_r+0x138>
  80c554:	80800617 	ldw	r2,24(r16)
  80c558:	8100030b 	ldhu	r4,12(r16)
  80c55c:	80800215 	stw	r2,8(r16)
  80c560:	2080020c 	andi	r2,r4,8
  80c564:	10003626 	beq	r2,zero,80c640 <__swbuf_r+0x11c>
  80c568:	80c00417 	ldw	r3,16(r16)
  80c56c:	18003426 	beq	r3,zero,80c640 <__swbuf_r+0x11c>
  80c570:	2088000c 	andi	r2,r4,8192
  80c574:	9c403fcc 	andi	r17,r19,255
  80c578:	10001a26 	beq	r2,zero,80c5e4 <__swbuf_r+0xc0>
  80c57c:	80800017 	ldw	r2,0(r16)
  80c580:	81000517 	ldw	r4,20(r16)
  80c584:	10c7c83a 	sub	r3,r2,r3
  80c588:	1900200e 	bge	r3,r4,80c60c <__swbuf_r+0xe8>
  80c58c:	18c00044 	addi	r3,r3,1
  80c590:	81000217 	ldw	r4,8(r16)
  80c594:	11400044 	addi	r5,r2,1
  80c598:	81400015 	stw	r5,0(r16)
  80c59c:	213fffc4 	addi	r4,r4,-1
  80c5a0:	81000215 	stw	r4,8(r16)
  80c5a4:	14c00005 	stb	r19,0(r2)
  80c5a8:	80800517 	ldw	r2,20(r16)
  80c5ac:	10c01e26 	beq	r2,r3,80c628 <__swbuf_r+0x104>
  80c5b0:	8080030b 	ldhu	r2,12(r16)
  80c5b4:	1080004c 	andi	r2,r2,1
  80c5b8:	10000226 	beq	r2,zero,80c5c4 <__swbuf_r+0xa0>
  80c5bc:	00800284 	movi	r2,10
  80c5c0:	88801926 	beq	r17,r2,80c628 <__swbuf_r+0x104>
  80c5c4:	8805883a 	mov	r2,r17
  80c5c8:	dfc00417 	ldw	ra,16(sp)
  80c5cc:	dcc00317 	ldw	r19,12(sp)
  80c5d0:	dc800217 	ldw	r18,8(sp)
  80c5d4:	dc400117 	ldw	r17,4(sp)
  80c5d8:	dc000017 	ldw	r16,0(sp)
  80c5dc:	dec00504 	addi	sp,sp,20
  80c5e0:	f800283a 	ret
  80c5e4:	81401917 	ldw	r5,100(r16)
  80c5e8:	00b7ffc4 	movi	r2,-8193
  80c5ec:	21080014 	ori	r4,r4,8192
  80c5f0:	2884703a 	and	r2,r5,r2
  80c5f4:	80801915 	stw	r2,100(r16)
  80c5f8:	80800017 	ldw	r2,0(r16)
  80c5fc:	8100030d 	sth	r4,12(r16)
  80c600:	81000517 	ldw	r4,20(r16)
  80c604:	10c7c83a 	sub	r3,r2,r3
  80c608:	193fe016 	blt	r3,r4,80c58c <__alt_mem_onchip_mem+0xff78c58c>
  80c60c:	800b883a 	mov	r5,r16
  80c610:	9009883a 	mov	r4,r18
  80c614:	08072b00 	call	8072b0 <_fflush_r>
  80c618:	1000071e 	bne	r2,zero,80c638 <__swbuf_r+0x114>
  80c61c:	80800017 	ldw	r2,0(r16)
  80c620:	00c00044 	movi	r3,1
  80c624:	003fda06 	br	80c590 <__alt_mem_onchip_mem+0xff78c590>
  80c628:	800b883a 	mov	r5,r16
  80c62c:	9009883a 	mov	r4,r18
  80c630:	08072b00 	call	8072b0 <_fflush_r>
  80c634:	103fe326 	beq	r2,zero,80c5c4 <__alt_mem_onchip_mem+0xff78c5c4>
  80c638:	00bfffc4 	movi	r2,-1
  80c63c:	003fe206 	br	80c5c8 <__alt_mem_onchip_mem+0xff78c5c8>
  80c640:	800b883a 	mov	r5,r16
  80c644:	9009883a 	mov	r4,r18
  80c648:	08056b80 	call	8056b8 <__swsetup_r>
  80c64c:	103ffa1e 	bne	r2,zero,80c638 <__alt_mem_onchip_mem+0xff78c638>
  80c650:	8100030b 	ldhu	r4,12(r16)
  80c654:	80c00417 	ldw	r3,16(r16)
  80c658:	003fc506 	br	80c570 <__alt_mem_onchip_mem+0xff78c570>
  80c65c:	080768c0 	call	80768c <__sinit>
  80c660:	003fbc06 	br	80c554 <__alt_mem_onchip_mem+0xff78c554>

0080c664 <__swbuf>:
  80c664:	00802074 	movhi	r2,129
  80c668:	10978d04 	addi	r2,r2,24116
  80c66c:	280d883a 	mov	r6,r5
  80c670:	200b883a 	mov	r5,r4
  80c674:	11000017 	ldw	r4,0(r2)
  80c678:	080c5241 	jmpi	80c524 <__swbuf_r>

0080c67c <_wcrtomb_r>:
  80c67c:	defff604 	addi	sp,sp,-40
  80c680:	00802074 	movhi	r2,129
  80c684:	dc800815 	stw	r18,32(sp)
  80c688:	dc400715 	stw	r17,28(sp)
  80c68c:	dc000615 	stw	r16,24(sp)
  80c690:	10979104 	addi	r2,r2,24132
  80c694:	dfc00915 	stw	ra,36(sp)
  80c698:	2021883a 	mov	r16,r4
  80c69c:	3823883a 	mov	r17,r7
  80c6a0:	14800017 	ldw	r18,0(r2)
  80c6a4:	28001426 	beq	r5,zero,80c6f8 <_wcrtomb_r+0x7c>
  80c6a8:	d9400415 	stw	r5,16(sp)
  80c6ac:	d9800515 	stw	r6,20(sp)
  80c6b0:	08081d00 	call	8081d0 <__locale_charset>
  80c6b4:	d9800517 	ldw	r6,20(sp)
  80c6b8:	d9400417 	ldw	r5,16(sp)
  80c6bc:	100f883a 	mov	r7,r2
  80c6c0:	dc400015 	stw	r17,0(sp)
  80c6c4:	8009883a 	mov	r4,r16
  80c6c8:	903ee83a 	callr	r18
  80c6cc:	00ffffc4 	movi	r3,-1
  80c6d0:	10c0031e 	bne	r2,r3,80c6e0 <_wcrtomb_r+0x64>
  80c6d4:	88000015 	stw	zero,0(r17)
  80c6d8:	00c02284 	movi	r3,138
  80c6dc:	80c00015 	stw	r3,0(r16)
  80c6e0:	dfc00917 	ldw	ra,36(sp)
  80c6e4:	dc800817 	ldw	r18,32(sp)
  80c6e8:	dc400717 	ldw	r17,28(sp)
  80c6ec:	dc000617 	ldw	r16,24(sp)
  80c6f0:	dec00a04 	addi	sp,sp,40
  80c6f4:	f800283a 	ret
  80c6f8:	08081d00 	call	8081d0 <__locale_charset>
  80c6fc:	100f883a 	mov	r7,r2
  80c700:	dc400015 	stw	r17,0(sp)
  80c704:	000d883a 	mov	r6,zero
  80c708:	d9400104 	addi	r5,sp,4
  80c70c:	8009883a 	mov	r4,r16
  80c710:	903ee83a 	callr	r18
  80c714:	003fed06 	br	80c6cc <__alt_mem_onchip_mem+0xff78c6cc>

0080c718 <wcrtomb>:
  80c718:	defff604 	addi	sp,sp,-40
  80c71c:	00802074 	movhi	r2,129
  80c720:	dc800615 	stw	r18,24(sp)
  80c724:	dc400515 	stw	r17,20(sp)
  80c728:	10978d04 	addi	r2,r2,24116
  80c72c:	dfc00915 	stw	ra,36(sp)
  80c730:	dd000815 	stw	r20,32(sp)
  80c734:	dcc00715 	stw	r19,28(sp)
  80c738:	dc000415 	stw	r16,16(sp)
  80c73c:	3025883a 	mov	r18,r6
  80c740:	14400017 	ldw	r17,0(r2)
  80c744:	20001926 	beq	r4,zero,80c7ac <wcrtomb+0x94>
  80c748:	00802074 	movhi	r2,129
  80c74c:	10979104 	addi	r2,r2,24132
  80c750:	15000017 	ldw	r20,0(r2)
  80c754:	2021883a 	mov	r16,r4
  80c758:	2827883a 	mov	r19,r5
  80c75c:	08081d00 	call	8081d0 <__locale_charset>
  80c760:	100f883a 	mov	r7,r2
  80c764:	dc800015 	stw	r18,0(sp)
  80c768:	980d883a 	mov	r6,r19
  80c76c:	800b883a 	mov	r5,r16
  80c770:	8809883a 	mov	r4,r17
  80c774:	a03ee83a 	callr	r20
  80c778:	00ffffc4 	movi	r3,-1
  80c77c:	10c0031e 	bne	r2,r3,80c78c <wcrtomb+0x74>
  80c780:	90000015 	stw	zero,0(r18)
  80c784:	00c02284 	movi	r3,138
  80c788:	88c00015 	stw	r3,0(r17)
  80c78c:	dfc00917 	ldw	ra,36(sp)
  80c790:	dd000817 	ldw	r20,32(sp)
  80c794:	dcc00717 	ldw	r19,28(sp)
  80c798:	dc800617 	ldw	r18,24(sp)
  80c79c:	dc400517 	ldw	r17,20(sp)
  80c7a0:	dc000417 	ldw	r16,16(sp)
  80c7a4:	dec00a04 	addi	sp,sp,40
  80c7a8:	f800283a 	ret
  80c7ac:	00802074 	movhi	r2,129
  80c7b0:	10979104 	addi	r2,r2,24132
  80c7b4:	14000017 	ldw	r16,0(r2)
  80c7b8:	08081d00 	call	8081d0 <__locale_charset>
  80c7bc:	100f883a 	mov	r7,r2
  80c7c0:	dc800015 	stw	r18,0(sp)
  80c7c4:	000d883a 	mov	r6,zero
  80c7c8:	d9400104 	addi	r5,sp,4
  80c7cc:	8809883a 	mov	r4,r17
  80c7d0:	803ee83a 	callr	r16
  80c7d4:	003fe806 	br	80c778 <__alt_mem_onchip_mem+0xff78c778>

0080c7d8 <__ascii_wctomb>:
  80c7d8:	28000526 	beq	r5,zero,80c7f0 <__ascii_wctomb+0x18>
  80c7dc:	00803fc4 	movi	r2,255
  80c7e0:	11800536 	bltu	r2,r6,80c7f8 <__ascii_wctomb+0x20>
  80c7e4:	29800005 	stb	r6,0(r5)
  80c7e8:	00800044 	movi	r2,1
  80c7ec:	f800283a 	ret
  80c7f0:	0005883a 	mov	r2,zero
  80c7f4:	f800283a 	ret
  80c7f8:	00802284 	movi	r2,138
  80c7fc:	20800015 	stw	r2,0(r4)
  80c800:	00bfffc4 	movi	r2,-1
  80c804:	f800283a 	ret

0080c808 <_wctomb_r>:
  80c808:	00802074 	movhi	r2,129
  80c80c:	defff904 	addi	sp,sp,-28
  80c810:	10979104 	addi	r2,r2,24132
  80c814:	dfc00615 	stw	ra,24(sp)
  80c818:	dc400515 	stw	r17,20(sp)
  80c81c:	dc000415 	stw	r16,16(sp)
  80c820:	3823883a 	mov	r17,r7
  80c824:	14000017 	ldw	r16,0(r2)
  80c828:	d9000115 	stw	r4,4(sp)
  80c82c:	d9400215 	stw	r5,8(sp)
  80c830:	d9800315 	stw	r6,12(sp)
  80c834:	08081d00 	call	8081d0 <__locale_charset>
  80c838:	d9800317 	ldw	r6,12(sp)
  80c83c:	d9400217 	ldw	r5,8(sp)
  80c840:	d9000117 	ldw	r4,4(sp)
  80c844:	100f883a 	mov	r7,r2
  80c848:	dc400015 	stw	r17,0(sp)
  80c84c:	803ee83a 	callr	r16
  80c850:	dfc00617 	ldw	ra,24(sp)
  80c854:	dc400517 	ldw	r17,20(sp)
  80c858:	dc000417 	ldw	r16,16(sp)
  80c85c:	dec00704 	addi	sp,sp,28
  80c860:	f800283a 	ret

0080c864 <__udivdi3>:
  80c864:	defff504 	addi	sp,sp,-44
  80c868:	dcc00415 	stw	r19,16(sp)
  80c86c:	dc000115 	stw	r16,4(sp)
  80c870:	dfc00a15 	stw	ra,40(sp)
  80c874:	df000915 	stw	fp,36(sp)
  80c878:	ddc00815 	stw	r23,32(sp)
  80c87c:	dd800715 	stw	r22,28(sp)
  80c880:	dd400615 	stw	r21,24(sp)
  80c884:	dd000515 	stw	r20,20(sp)
  80c888:	dc800315 	stw	r18,12(sp)
  80c88c:	dc400215 	stw	r17,8(sp)
  80c890:	2027883a 	mov	r19,r4
  80c894:	2821883a 	mov	r16,r5
  80c898:	3800411e 	bne	r7,zero,80c9a0 <__udivdi3+0x13c>
  80c89c:	3023883a 	mov	r17,r6
  80c8a0:	2025883a 	mov	r18,r4
  80c8a4:	2980522e 	bgeu	r5,r6,80c9f0 <__udivdi3+0x18c>
  80c8a8:	00bfffd4 	movui	r2,65535
  80c8ac:	282d883a 	mov	r22,r5
  80c8b0:	1180a836 	bltu	r2,r6,80cb54 <__udivdi3+0x2f0>
  80c8b4:	00803fc4 	movi	r2,255
  80c8b8:	1185803a 	cmpltu	r2,r2,r6
  80c8bc:	100490fa 	slli	r2,r2,3
  80c8c0:	3086d83a 	srl	r3,r6,r2
  80c8c4:	01002074 	movhi	r4,129
  80c8c8:	210f7704 	addi	r4,r4,15836
  80c8cc:	20c7883a 	add	r3,r4,r3
  80c8d0:	18c00003 	ldbu	r3,0(r3)
  80c8d4:	1885883a 	add	r2,r3,r2
  80c8d8:	00c00804 	movi	r3,32
  80c8dc:	1887c83a 	sub	r3,r3,r2
  80c8e0:	18000526 	beq	r3,zero,80c8f8 <__udivdi3+0x94>
  80c8e4:	80e0983a 	sll	r16,r16,r3
  80c8e8:	9884d83a 	srl	r2,r19,r2
  80c8ec:	30e2983a 	sll	r17,r6,r3
  80c8f0:	98e4983a 	sll	r18,r19,r3
  80c8f4:	142cb03a 	or	r22,r2,r16
  80c8f8:	882ad43a 	srli	r21,r17,16
  80c8fc:	b009883a 	mov	r4,r22
  80c900:	8d3fffcc 	andi	r20,r17,65535
  80c904:	a80b883a 	mov	r5,r21
  80c908:	08031b80 	call	8031b8 <__umodsi3>
  80c90c:	b009883a 	mov	r4,r22
  80c910:	a80b883a 	mov	r5,r21
  80c914:	1027883a 	mov	r19,r2
  80c918:	08031540 	call	803154 <__udivsi3>
  80c91c:	102d883a 	mov	r22,r2
  80c920:	9826943a 	slli	r19,r19,16
  80c924:	9004d43a 	srli	r2,r18,16
  80c928:	a5a1383a 	mul	r16,r20,r22
  80c92c:	14c4b03a 	or	r2,r2,r19
  80c930:	1400052e 	bgeu	r2,r16,80c948 <__udivdi3+0xe4>
  80c934:	1445883a 	add	r2,r2,r17
  80c938:	b0ffffc4 	addi	r3,r22,-1
  80c93c:	14400136 	bltu	r2,r17,80c944 <__udivdi3+0xe0>
  80c940:	14012336 	bltu	r2,r16,80cdd0 <__udivdi3+0x56c>
  80c944:	182d883a 	mov	r22,r3
  80c948:	1421c83a 	sub	r16,r2,r16
  80c94c:	a80b883a 	mov	r5,r21
  80c950:	8009883a 	mov	r4,r16
  80c954:	08031b80 	call	8031b8 <__umodsi3>
  80c958:	1027883a 	mov	r19,r2
  80c95c:	a80b883a 	mov	r5,r21
  80c960:	8009883a 	mov	r4,r16
  80c964:	08031540 	call	803154 <__udivsi3>
  80c968:	9826943a 	slli	r19,r19,16
  80c96c:	a0a9383a 	mul	r20,r20,r2
  80c970:	94bfffcc 	andi	r18,r18,65535
  80c974:	94e4b03a 	or	r18,r18,r19
  80c978:	9500052e 	bgeu	r18,r20,80c990 <__udivdi3+0x12c>
  80c97c:	8ca5883a 	add	r18,r17,r18
  80c980:	10ffffc4 	addi	r3,r2,-1
  80c984:	9440f136 	bltu	r18,r17,80cd4c <__udivdi3+0x4e8>
  80c988:	9500f02e 	bgeu	r18,r20,80cd4c <__udivdi3+0x4e8>
  80c98c:	10bfff84 	addi	r2,r2,-2
  80c990:	b00c943a 	slli	r6,r22,16
  80c994:	0007883a 	mov	r3,zero
  80c998:	3084b03a 	or	r2,r6,r2
  80c99c:	00005906 	br	80cb04 <__udivdi3+0x2a0>
  80c9a0:	29c05636 	bltu	r5,r7,80cafc <__udivdi3+0x298>
  80c9a4:	00bfffd4 	movui	r2,65535
  80c9a8:	11c0622e 	bgeu	r2,r7,80cb34 <__udivdi3+0x2d0>
  80c9ac:	00804034 	movhi	r2,256
  80c9b0:	10bfffc4 	addi	r2,r2,-1
  80c9b4:	11c0ee36 	bltu	r2,r7,80cd70 <__udivdi3+0x50c>
  80c9b8:	00800404 	movi	r2,16
  80c9bc:	3886d83a 	srl	r3,r7,r2
  80c9c0:	01002074 	movhi	r4,129
  80c9c4:	210f7704 	addi	r4,r4,15836
  80c9c8:	20c7883a 	add	r3,r4,r3
  80c9cc:	18c00003 	ldbu	r3,0(r3)
  80c9d0:	05400804 	movi	r21,32
  80c9d4:	1885883a 	add	r2,r3,r2
  80c9d8:	a8abc83a 	sub	r21,r21,r2
  80c9dc:	a800621e 	bne	r21,zero,80cb68 <__udivdi3+0x304>
  80c9e0:	3c00e936 	bltu	r7,r16,80cd88 <__udivdi3+0x524>
  80c9e4:	9985403a 	cmpgeu	r2,r19,r6
  80c9e8:	0007883a 	mov	r3,zero
  80c9ec:	00004506 	br	80cb04 <__udivdi3+0x2a0>
  80c9f0:	3000041e 	bne	r6,zero,80ca04 <__udivdi3+0x1a0>
  80c9f4:	000b883a 	mov	r5,zero
  80c9f8:	01000044 	movi	r4,1
  80c9fc:	08031540 	call	803154 <__udivsi3>
  80ca00:	1023883a 	mov	r17,r2
  80ca04:	00bfffd4 	movui	r2,65535
  80ca08:	14404e2e 	bgeu	r2,r17,80cb44 <__udivdi3+0x2e0>
  80ca0c:	00804034 	movhi	r2,256
  80ca10:	10bfffc4 	addi	r2,r2,-1
  80ca14:	1440d836 	bltu	r2,r17,80cd78 <__udivdi3+0x514>
  80ca18:	00800404 	movi	r2,16
  80ca1c:	8886d83a 	srl	r3,r17,r2
  80ca20:	01002074 	movhi	r4,129
  80ca24:	210f7704 	addi	r4,r4,15836
  80ca28:	20c7883a 	add	r3,r4,r3
  80ca2c:	18c00003 	ldbu	r3,0(r3)
  80ca30:	1885883a 	add	r2,r3,r2
  80ca34:	00c00804 	movi	r3,32
  80ca38:	1887c83a 	sub	r3,r3,r2
  80ca3c:	18008f1e 	bne	r3,zero,80cc7c <__udivdi3+0x418>
  80ca40:	882ad43a 	srli	r21,r17,16
  80ca44:	8461c83a 	sub	r16,r16,r17
  80ca48:	8d3fffcc 	andi	r20,r17,65535
  80ca4c:	00c00044 	movi	r3,1
  80ca50:	8009883a 	mov	r4,r16
  80ca54:	a80b883a 	mov	r5,r21
  80ca58:	d8c00015 	stw	r3,0(sp)
  80ca5c:	08031b80 	call	8031b8 <__umodsi3>
  80ca60:	8009883a 	mov	r4,r16
  80ca64:	a80b883a 	mov	r5,r21
  80ca68:	1027883a 	mov	r19,r2
  80ca6c:	08031540 	call	803154 <__udivsi3>
  80ca70:	9826943a 	slli	r19,r19,16
  80ca74:	9008d43a 	srli	r4,r18,16
  80ca78:	1521383a 	mul	r16,r2,r20
  80ca7c:	102d883a 	mov	r22,r2
  80ca80:	24c8b03a 	or	r4,r4,r19
  80ca84:	d8c00017 	ldw	r3,0(sp)
  80ca88:	2400052e 	bgeu	r4,r16,80caa0 <__udivdi3+0x23c>
  80ca8c:	2449883a 	add	r4,r4,r17
  80ca90:	b0bfffc4 	addi	r2,r22,-1
  80ca94:	24400136 	bltu	r4,r17,80ca9c <__udivdi3+0x238>
  80ca98:	2400ca36 	bltu	r4,r16,80cdc4 <__udivdi3+0x560>
  80ca9c:	102d883a 	mov	r22,r2
  80caa0:	2421c83a 	sub	r16,r4,r16
  80caa4:	a80b883a 	mov	r5,r21
  80caa8:	8009883a 	mov	r4,r16
  80caac:	d8c00015 	stw	r3,0(sp)
  80cab0:	08031b80 	call	8031b8 <__umodsi3>
  80cab4:	1027883a 	mov	r19,r2
  80cab8:	a80b883a 	mov	r5,r21
  80cabc:	8009883a 	mov	r4,r16
  80cac0:	08031540 	call	803154 <__udivsi3>
  80cac4:	9826943a 	slli	r19,r19,16
  80cac8:	1529383a 	mul	r20,r2,r20
  80cacc:	94bfffcc 	andi	r18,r18,65535
  80cad0:	94e4b03a 	or	r18,r18,r19
  80cad4:	d8c00017 	ldw	r3,0(sp)
  80cad8:	9500052e 	bgeu	r18,r20,80caf0 <__udivdi3+0x28c>
  80cadc:	8ca5883a 	add	r18,r17,r18
  80cae0:	113fffc4 	addi	r4,r2,-1
  80cae4:	94409736 	bltu	r18,r17,80cd44 <__udivdi3+0x4e0>
  80cae8:	9500962e 	bgeu	r18,r20,80cd44 <__udivdi3+0x4e0>
  80caec:	10bfff84 	addi	r2,r2,-2
  80caf0:	b00c943a 	slli	r6,r22,16
  80caf4:	3084b03a 	or	r2,r6,r2
  80caf8:	00000206 	br	80cb04 <__udivdi3+0x2a0>
  80cafc:	0007883a 	mov	r3,zero
  80cb00:	0005883a 	mov	r2,zero
  80cb04:	dfc00a17 	ldw	ra,40(sp)
  80cb08:	df000917 	ldw	fp,36(sp)
  80cb0c:	ddc00817 	ldw	r23,32(sp)
  80cb10:	dd800717 	ldw	r22,28(sp)
  80cb14:	dd400617 	ldw	r21,24(sp)
  80cb18:	dd000517 	ldw	r20,20(sp)
  80cb1c:	dcc00417 	ldw	r19,16(sp)
  80cb20:	dc800317 	ldw	r18,12(sp)
  80cb24:	dc400217 	ldw	r17,8(sp)
  80cb28:	dc000117 	ldw	r16,4(sp)
  80cb2c:	dec00b04 	addi	sp,sp,44
  80cb30:	f800283a 	ret
  80cb34:	00803fc4 	movi	r2,255
  80cb38:	11c5803a 	cmpltu	r2,r2,r7
  80cb3c:	100490fa 	slli	r2,r2,3
  80cb40:	003f9e06 	br	80c9bc <__alt_mem_onchip_mem+0xff78c9bc>
  80cb44:	00803fc4 	movi	r2,255
  80cb48:	1445803a 	cmpltu	r2,r2,r17
  80cb4c:	100490fa 	slli	r2,r2,3
  80cb50:	003fb206 	br	80ca1c <__alt_mem_onchip_mem+0xff78ca1c>
  80cb54:	00804034 	movhi	r2,256
  80cb58:	10bfffc4 	addi	r2,r2,-1
  80cb5c:	11808836 	bltu	r2,r6,80cd80 <__udivdi3+0x51c>
  80cb60:	00800404 	movi	r2,16
  80cb64:	003f5606 	br	80c8c0 <__alt_mem_onchip_mem+0xff78c8c0>
  80cb68:	30aed83a 	srl	r23,r6,r2
  80cb6c:	3d4e983a 	sll	r7,r7,r21
  80cb70:	80acd83a 	srl	r22,r16,r2
  80cb74:	9884d83a 	srl	r2,r19,r2
  80cb78:	3deeb03a 	or	r23,r7,r23
  80cb7c:	b824d43a 	srli	r18,r23,16
  80cb80:	8560983a 	sll	r16,r16,r21
  80cb84:	b009883a 	mov	r4,r22
  80cb88:	900b883a 	mov	r5,r18
  80cb8c:	3568983a 	sll	r20,r6,r21
  80cb90:	1420b03a 	or	r16,r2,r16
  80cb94:	08031b80 	call	8031b8 <__umodsi3>
  80cb98:	b009883a 	mov	r4,r22
  80cb9c:	900b883a 	mov	r5,r18
  80cba0:	1023883a 	mov	r17,r2
  80cba4:	08031540 	call	803154 <__udivsi3>
  80cba8:	8808943a 	slli	r4,r17,16
  80cbac:	bf3fffcc 	andi	fp,r23,65535
  80cbb0:	8006d43a 	srli	r3,r16,16
  80cbb4:	e0a3383a 	mul	r17,fp,r2
  80cbb8:	100d883a 	mov	r6,r2
  80cbbc:	1906b03a 	or	r3,r3,r4
  80cbc0:	1c40042e 	bgeu	r3,r17,80cbd4 <__udivdi3+0x370>
  80cbc4:	1dc7883a 	add	r3,r3,r23
  80cbc8:	10bfffc4 	addi	r2,r2,-1
  80cbcc:	1dc0752e 	bgeu	r3,r23,80cda4 <__udivdi3+0x540>
  80cbd0:	100d883a 	mov	r6,r2
  80cbd4:	1c63c83a 	sub	r17,r3,r17
  80cbd8:	900b883a 	mov	r5,r18
  80cbdc:	8809883a 	mov	r4,r17
  80cbe0:	d9800015 	stw	r6,0(sp)
  80cbe4:	08031b80 	call	8031b8 <__umodsi3>
  80cbe8:	102d883a 	mov	r22,r2
  80cbec:	8809883a 	mov	r4,r17
  80cbf0:	900b883a 	mov	r5,r18
  80cbf4:	08031540 	call	803154 <__udivsi3>
  80cbf8:	b02c943a 	slli	r22,r22,16
  80cbfc:	e089383a 	mul	r4,fp,r2
  80cc00:	843fffcc 	andi	r16,r16,65535
  80cc04:	85a0b03a 	or	r16,r16,r22
  80cc08:	d9800017 	ldw	r6,0(sp)
  80cc0c:	8100042e 	bgeu	r16,r4,80cc20 <__udivdi3+0x3bc>
  80cc10:	85e1883a 	add	r16,r16,r23
  80cc14:	10ffffc4 	addi	r3,r2,-1
  80cc18:	85c05e2e 	bgeu	r16,r23,80cd94 <__udivdi3+0x530>
  80cc1c:	1805883a 	mov	r2,r3
  80cc20:	300c943a 	slli	r6,r6,16
  80cc24:	a17fffcc 	andi	r5,r20,65535
  80cc28:	a028d43a 	srli	r20,r20,16
  80cc2c:	3084b03a 	or	r2,r6,r2
  80cc30:	10ffffcc 	andi	r3,r2,65535
  80cc34:	100cd43a 	srli	r6,r2,16
  80cc38:	194f383a 	mul	r7,r3,r5
  80cc3c:	1d07383a 	mul	r3,r3,r20
  80cc40:	314b383a 	mul	r5,r6,r5
  80cc44:	3810d43a 	srli	r8,r7,16
  80cc48:	8121c83a 	sub	r16,r16,r4
  80cc4c:	1947883a 	add	r3,r3,r5
  80cc50:	40c7883a 	add	r3,r8,r3
  80cc54:	350d383a 	mul	r6,r6,r20
  80cc58:	1940022e 	bgeu	r3,r5,80cc64 <__udivdi3+0x400>
  80cc5c:	01000074 	movhi	r4,1
  80cc60:	310d883a 	add	r6,r6,r4
  80cc64:	1828d43a 	srli	r20,r3,16
  80cc68:	a18d883a 	add	r6,r20,r6
  80cc6c:	81803e36 	bltu	r16,r6,80cd68 <__udivdi3+0x504>
  80cc70:	81803826 	beq	r16,r6,80cd54 <__udivdi3+0x4f0>
  80cc74:	0007883a 	mov	r3,zero
  80cc78:	003fa206 	br	80cb04 <__alt_mem_onchip_mem+0xff78cb04>
  80cc7c:	88e2983a 	sll	r17,r17,r3
  80cc80:	80a8d83a 	srl	r20,r16,r2
  80cc84:	80e0983a 	sll	r16,r16,r3
  80cc88:	882ad43a 	srli	r21,r17,16
  80cc8c:	9884d83a 	srl	r2,r19,r2
  80cc90:	a009883a 	mov	r4,r20
  80cc94:	a80b883a 	mov	r5,r21
  80cc98:	142eb03a 	or	r23,r2,r16
  80cc9c:	98e4983a 	sll	r18,r19,r3
  80cca0:	08031b80 	call	8031b8 <__umodsi3>
  80cca4:	a009883a 	mov	r4,r20
  80cca8:	a80b883a 	mov	r5,r21
  80ccac:	1021883a 	mov	r16,r2
  80ccb0:	08031540 	call	803154 <__udivsi3>
  80ccb4:	1039883a 	mov	fp,r2
  80ccb8:	8d3fffcc 	andi	r20,r17,65535
  80ccbc:	8020943a 	slli	r16,r16,16
  80ccc0:	b804d43a 	srli	r2,r23,16
  80ccc4:	a72d383a 	mul	r22,r20,fp
  80ccc8:	1404b03a 	or	r2,r2,r16
  80cccc:	1580062e 	bgeu	r2,r22,80cce8 <__udivdi3+0x484>
  80ccd0:	1445883a 	add	r2,r2,r17
  80ccd4:	e0ffffc4 	addi	r3,fp,-1
  80ccd8:	14403836 	bltu	r2,r17,80cdbc <__udivdi3+0x558>
  80ccdc:	1580372e 	bgeu	r2,r22,80cdbc <__udivdi3+0x558>
  80cce0:	e73fff84 	addi	fp,fp,-2
  80cce4:	1445883a 	add	r2,r2,r17
  80cce8:	15adc83a 	sub	r22,r2,r22
  80ccec:	a80b883a 	mov	r5,r21
  80ccf0:	b009883a 	mov	r4,r22
  80ccf4:	08031b80 	call	8031b8 <__umodsi3>
  80ccf8:	1027883a 	mov	r19,r2
  80ccfc:	b009883a 	mov	r4,r22
  80cd00:	a80b883a 	mov	r5,r21
  80cd04:	08031540 	call	803154 <__udivsi3>
  80cd08:	9826943a 	slli	r19,r19,16
  80cd0c:	a0a1383a 	mul	r16,r20,r2
  80cd10:	b93fffcc 	andi	r4,r23,65535
  80cd14:	24c8b03a 	or	r4,r4,r19
  80cd18:	2400062e 	bgeu	r4,r16,80cd34 <__udivdi3+0x4d0>
  80cd1c:	2449883a 	add	r4,r4,r17
  80cd20:	10ffffc4 	addi	r3,r2,-1
  80cd24:	24402336 	bltu	r4,r17,80cdb4 <__udivdi3+0x550>
  80cd28:	2400222e 	bgeu	r4,r16,80cdb4 <__udivdi3+0x550>
  80cd2c:	10bfff84 	addi	r2,r2,-2
  80cd30:	2449883a 	add	r4,r4,r17
  80cd34:	e038943a 	slli	fp,fp,16
  80cd38:	2421c83a 	sub	r16,r4,r16
  80cd3c:	e086b03a 	or	r3,fp,r2
  80cd40:	003f4306 	br	80ca50 <__alt_mem_onchip_mem+0xff78ca50>
  80cd44:	2005883a 	mov	r2,r4
  80cd48:	003f6906 	br	80caf0 <__alt_mem_onchip_mem+0xff78caf0>
  80cd4c:	1805883a 	mov	r2,r3
  80cd50:	003f0f06 	br	80c990 <__alt_mem_onchip_mem+0xff78c990>
  80cd54:	1806943a 	slli	r3,r3,16
  80cd58:	9d66983a 	sll	r19,r19,r21
  80cd5c:	39ffffcc 	andi	r7,r7,65535
  80cd60:	19c7883a 	add	r3,r3,r7
  80cd64:	98ffc32e 	bgeu	r19,r3,80cc74 <__alt_mem_onchip_mem+0xff78cc74>
  80cd68:	10bfffc4 	addi	r2,r2,-1
  80cd6c:	003fc106 	br	80cc74 <__alt_mem_onchip_mem+0xff78cc74>
  80cd70:	00800604 	movi	r2,24
  80cd74:	003f1106 	br	80c9bc <__alt_mem_onchip_mem+0xff78c9bc>
  80cd78:	00800604 	movi	r2,24
  80cd7c:	003f2706 	br	80ca1c <__alt_mem_onchip_mem+0xff78ca1c>
  80cd80:	00800604 	movi	r2,24
  80cd84:	003ece06 	br	80c8c0 <__alt_mem_onchip_mem+0xff78c8c0>
  80cd88:	0007883a 	mov	r3,zero
  80cd8c:	00800044 	movi	r2,1
  80cd90:	003f5c06 	br	80cb04 <__alt_mem_onchip_mem+0xff78cb04>
  80cd94:	813fa12e 	bgeu	r16,r4,80cc1c <__alt_mem_onchip_mem+0xff78cc1c>
  80cd98:	10bfff84 	addi	r2,r2,-2
  80cd9c:	85e1883a 	add	r16,r16,r23
  80cda0:	003f9f06 	br	80cc20 <__alt_mem_onchip_mem+0xff78cc20>
  80cda4:	1c7f8a2e 	bgeu	r3,r17,80cbd0 <__alt_mem_onchip_mem+0xff78cbd0>
  80cda8:	31bfff84 	addi	r6,r6,-2
  80cdac:	1dc7883a 	add	r3,r3,r23
  80cdb0:	003f8806 	br	80cbd4 <__alt_mem_onchip_mem+0xff78cbd4>
  80cdb4:	1805883a 	mov	r2,r3
  80cdb8:	003fde06 	br	80cd34 <__alt_mem_onchip_mem+0xff78cd34>
  80cdbc:	1839883a 	mov	fp,r3
  80cdc0:	003fc906 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80cdc4:	b5bfff84 	addi	r22,r22,-2
  80cdc8:	2449883a 	add	r4,r4,r17
  80cdcc:	003f3406 	br	80caa0 <__alt_mem_onchip_mem+0xff78caa0>
  80cdd0:	b5bfff84 	addi	r22,r22,-2
  80cdd4:	1445883a 	add	r2,r2,r17
  80cdd8:	003edb06 	br	80c948 <__alt_mem_onchip_mem+0xff78c948>

0080cddc <__umoddi3>:
  80cddc:	defff404 	addi	sp,sp,-48
  80cde0:	df000a15 	stw	fp,40(sp)
  80cde4:	dc400315 	stw	r17,12(sp)
  80cde8:	dc000215 	stw	r16,8(sp)
  80cdec:	dfc00b15 	stw	ra,44(sp)
  80cdf0:	ddc00915 	stw	r23,36(sp)
  80cdf4:	dd800815 	stw	r22,32(sp)
  80cdf8:	dd400715 	stw	r21,28(sp)
  80cdfc:	dd000615 	stw	r20,24(sp)
  80ce00:	dcc00515 	stw	r19,20(sp)
  80ce04:	dc800415 	stw	r18,16(sp)
  80ce08:	2021883a 	mov	r16,r4
  80ce0c:	2823883a 	mov	r17,r5
  80ce10:	2839883a 	mov	fp,r5
  80ce14:	38003c1e 	bne	r7,zero,80cf08 <__umoddi3+0x12c>
  80ce18:	3027883a 	mov	r19,r6
  80ce1c:	2029883a 	mov	r20,r4
  80ce20:	2980512e 	bgeu	r5,r6,80cf68 <__umoddi3+0x18c>
  80ce24:	00bfffd4 	movui	r2,65535
  80ce28:	11809a36 	bltu	r2,r6,80d094 <__umoddi3+0x2b8>
  80ce2c:	01003fc4 	movi	r4,255
  80ce30:	2189803a 	cmpltu	r4,r4,r6
  80ce34:	200890fa 	slli	r4,r4,3
  80ce38:	3104d83a 	srl	r2,r6,r4
  80ce3c:	00c02074 	movhi	r3,129
  80ce40:	18cf7704 	addi	r3,r3,15836
  80ce44:	1885883a 	add	r2,r3,r2
  80ce48:	10c00003 	ldbu	r3,0(r2)
  80ce4c:	00800804 	movi	r2,32
  80ce50:	1909883a 	add	r4,r3,r4
  80ce54:	1125c83a 	sub	r18,r2,r4
  80ce58:	90000526 	beq	r18,zero,80ce70 <__umoddi3+0x94>
  80ce5c:	8ca2983a 	sll	r17,r17,r18
  80ce60:	8108d83a 	srl	r4,r16,r4
  80ce64:	34a6983a 	sll	r19,r6,r18
  80ce68:	84a8983a 	sll	r20,r16,r18
  80ce6c:	2478b03a 	or	fp,r4,r17
  80ce70:	982ed43a 	srli	r23,r19,16
  80ce74:	e009883a 	mov	r4,fp
  80ce78:	9dbfffcc 	andi	r22,r19,65535
  80ce7c:	b80b883a 	mov	r5,r23
  80ce80:	08031b80 	call	8031b8 <__umodsi3>
  80ce84:	e009883a 	mov	r4,fp
  80ce88:	b80b883a 	mov	r5,r23
  80ce8c:	102b883a 	mov	r21,r2
  80ce90:	08031540 	call	803154 <__udivsi3>
  80ce94:	a806943a 	slli	r3,r21,16
  80ce98:	a008d43a 	srli	r4,r20,16
  80ce9c:	b085383a 	mul	r2,r22,r2
  80cea0:	20c8b03a 	or	r4,r4,r3
  80cea4:	2080032e 	bgeu	r4,r2,80ceb4 <__umoddi3+0xd8>
  80cea8:	24c9883a 	add	r4,r4,r19
  80ceac:	24c00136 	bltu	r4,r19,80ceb4 <__umoddi3+0xd8>
  80ceb0:	20811036 	bltu	r4,r2,80d2f4 <__umoddi3+0x518>
  80ceb4:	20abc83a 	sub	r21,r4,r2
  80ceb8:	b80b883a 	mov	r5,r23
  80cebc:	a809883a 	mov	r4,r21
  80cec0:	08031b80 	call	8031b8 <__umodsi3>
  80cec4:	1023883a 	mov	r17,r2
  80cec8:	b80b883a 	mov	r5,r23
  80cecc:	a809883a 	mov	r4,r21
  80ced0:	08031540 	call	803154 <__udivsi3>
  80ced4:	8822943a 	slli	r17,r17,16
  80ced8:	b085383a 	mul	r2,r22,r2
  80cedc:	a0ffffcc 	andi	r3,r20,65535
  80cee0:	1c46b03a 	or	r3,r3,r17
  80cee4:	1880042e 	bgeu	r3,r2,80cef8 <__umoddi3+0x11c>
  80cee8:	1cc7883a 	add	r3,r3,r19
  80ceec:	1cc00236 	bltu	r3,r19,80cef8 <__umoddi3+0x11c>
  80cef0:	1880012e 	bgeu	r3,r2,80cef8 <__umoddi3+0x11c>
  80cef4:	1cc7883a 	add	r3,r3,r19
  80cef8:	1885c83a 	sub	r2,r3,r2
  80cefc:	1484d83a 	srl	r2,r2,r18
  80cf00:	0007883a 	mov	r3,zero
  80cf04:	00004f06 	br	80d044 <__umoddi3+0x268>
  80cf08:	29c04c36 	bltu	r5,r7,80d03c <__umoddi3+0x260>
  80cf0c:	00bfffd4 	movui	r2,65535
  80cf10:	11c0582e 	bgeu	r2,r7,80d074 <__umoddi3+0x298>
  80cf14:	00804034 	movhi	r2,256
  80cf18:	10bfffc4 	addi	r2,r2,-1
  80cf1c:	11c0e736 	bltu	r2,r7,80d2bc <__umoddi3+0x4e0>
  80cf20:	01000404 	movi	r4,16
  80cf24:	3904d83a 	srl	r2,r7,r4
  80cf28:	00c02074 	movhi	r3,129
  80cf2c:	18cf7704 	addi	r3,r3,15836
  80cf30:	1885883a 	add	r2,r3,r2
  80cf34:	14c00003 	ldbu	r19,0(r2)
  80cf38:	00c00804 	movi	r3,32
  80cf3c:	9927883a 	add	r19,r19,r4
  80cf40:	1ce9c83a 	sub	r20,r3,r19
  80cf44:	a000581e 	bne	r20,zero,80d0a8 <__umoddi3+0x2cc>
  80cf48:	3c400136 	bltu	r7,r17,80cf50 <__umoddi3+0x174>
  80cf4c:	8180eb36 	bltu	r16,r6,80d2fc <__umoddi3+0x520>
  80cf50:	8185c83a 	sub	r2,r16,r6
  80cf54:	89e3c83a 	sub	r17,r17,r7
  80cf58:	8089803a 	cmpltu	r4,r16,r2
  80cf5c:	8939c83a 	sub	fp,r17,r4
  80cf60:	e007883a 	mov	r3,fp
  80cf64:	00003706 	br	80d044 <__umoddi3+0x268>
  80cf68:	3000041e 	bne	r6,zero,80cf7c <__umoddi3+0x1a0>
  80cf6c:	000b883a 	mov	r5,zero
  80cf70:	01000044 	movi	r4,1
  80cf74:	08031540 	call	803154 <__udivsi3>
  80cf78:	1027883a 	mov	r19,r2
  80cf7c:	00bfffd4 	movui	r2,65535
  80cf80:	14c0402e 	bgeu	r2,r19,80d084 <__umoddi3+0x2a8>
  80cf84:	00804034 	movhi	r2,256
  80cf88:	10bfffc4 	addi	r2,r2,-1
  80cf8c:	14c0cd36 	bltu	r2,r19,80d2c4 <__umoddi3+0x4e8>
  80cf90:	00800404 	movi	r2,16
  80cf94:	9886d83a 	srl	r3,r19,r2
  80cf98:	01002074 	movhi	r4,129
  80cf9c:	210f7704 	addi	r4,r4,15836
  80cfa0:	20c7883a 	add	r3,r4,r3
  80cfa4:	18c00003 	ldbu	r3,0(r3)
  80cfa8:	1887883a 	add	r3,r3,r2
  80cfac:	00800804 	movi	r2,32
  80cfb0:	10e5c83a 	sub	r18,r2,r3
  80cfb4:	9000901e 	bne	r18,zero,80d1f8 <__umoddi3+0x41c>
  80cfb8:	982cd43a 	srli	r22,r19,16
  80cfbc:	8ce3c83a 	sub	r17,r17,r19
  80cfc0:	9d7fffcc 	andi	r21,r19,65535
  80cfc4:	b00b883a 	mov	r5,r22
  80cfc8:	8809883a 	mov	r4,r17
  80cfcc:	08031b80 	call	8031b8 <__umodsi3>
  80cfd0:	8809883a 	mov	r4,r17
  80cfd4:	b00b883a 	mov	r5,r22
  80cfd8:	1021883a 	mov	r16,r2
  80cfdc:	08031540 	call	803154 <__udivsi3>
  80cfe0:	8006943a 	slli	r3,r16,16
  80cfe4:	a008d43a 	srli	r4,r20,16
  80cfe8:	1545383a 	mul	r2,r2,r21
  80cfec:	20c8b03a 	or	r4,r4,r3
  80cff0:	2080042e 	bgeu	r4,r2,80d004 <__umoddi3+0x228>
  80cff4:	24c9883a 	add	r4,r4,r19
  80cff8:	24c00236 	bltu	r4,r19,80d004 <__umoddi3+0x228>
  80cffc:	2080012e 	bgeu	r4,r2,80d004 <__umoddi3+0x228>
  80d000:	24c9883a 	add	r4,r4,r19
  80d004:	20a1c83a 	sub	r16,r4,r2
  80d008:	b00b883a 	mov	r5,r22
  80d00c:	8009883a 	mov	r4,r16
  80d010:	08031b80 	call	8031b8 <__umodsi3>
  80d014:	1023883a 	mov	r17,r2
  80d018:	b00b883a 	mov	r5,r22
  80d01c:	8009883a 	mov	r4,r16
  80d020:	08031540 	call	803154 <__udivsi3>
  80d024:	8822943a 	slli	r17,r17,16
  80d028:	1545383a 	mul	r2,r2,r21
  80d02c:	a53fffcc 	andi	r20,r20,65535
  80d030:	a446b03a 	or	r3,r20,r17
  80d034:	18bfb02e 	bgeu	r3,r2,80cef8 <__alt_mem_onchip_mem+0xff78cef8>
  80d038:	003fab06 	br	80cee8 <__alt_mem_onchip_mem+0xff78cee8>
  80d03c:	2005883a 	mov	r2,r4
  80d040:	2807883a 	mov	r3,r5
  80d044:	dfc00b17 	ldw	ra,44(sp)
  80d048:	df000a17 	ldw	fp,40(sp)
  80d04c:	ddc00917 	ldw	r23,36(sp)
  80d050:	dd800817 	ldw	r22,32(sp)
  80d054:	dd400717 	ldw	r21,28(sp)
  80d058:	dd000617 	ldw	r20,24(sp)
  80d05c:	dcc00517 	ldw	r19,20(sp)
  80d060:	dc800417 	ldw	r18,16(sp)
  80d064:	dc400317 	ldw	r17,12(sp)
  80d068:	dc000217 	ldw	r16,8(sp)
  80d06c:	dec00c04 	addi	sp,sp,48
  80d070:	f800283a 	ret
  80d074:	04c03fc4 	movi	r19,255
  80d078:	99c9803a 	cmpltu	r4,r19,r7
  80d07c:	200890fa 	slli	r4,r4,3
  80d080:	003fa806 	br	80cf24 <__alt_mem_onchip_mem+0xff78cf24>
  80d084:	00803fc4 	movi	r2,255
  80d088:	14c5803a 	cmpltu	r2,r2,r19
  80d08c:	100490fa 	slli	r2,r2,3
  80d090:	003fc006 	br	80cf94 <__alt_mem_onchip_mem+0xff78cf94>
  80d094:	00804034 	movhi	r2,256
  80d098:	10bfffc4 	addi	r2,r2,-1
  80d09c:	11808b36 	bltu	r2,r6,80d2cc <__umoddi3+0x4f0>
  80d0a0:	01000404 	movi	r4,16
  80d0a4:	003f6406 	br	80ce38 <__alt_mem_onchip_mem+0xff78ce38>
  80d0a8:	34c4d83a 	srl	r2,r6,r19
  80d0ac:	3d0e983a 	sll	r7,r7,r20
  80d0b0:	8cf8d83a 	srl	fp,r17,r19
  80d0b4:	8d10983a 	sll	r8,r17,r20
  80d0b8:	38aab03a 	or	r21,r7,r2
  80d0bc:	a82cd43a 	srli	r22,r21,16
  80d0c0:	84e2d83a 	srl	r17,r16,r19
  80d0c4:	e009883a 	mov	r4,fp
  80d0c8:	b00b883a 	mov	r5,r22
  80d0cc:	8a22b03a 	or	r17,r17,r8
  80d0d0:	3524983a 	sll	r18,r6,r20
  80d0d4:	08031b80 	call	8031b8 <__umodsi3>
  80d0d8:	e009883a 	mov	r4,fp
  80d0dc:	b00b883a 	mov	r5,r22
  80d0e0:	102f883a 	mov	r23,r2
  80d0e4:	08031540 	call	803154 <__udivsi3>
  80d0e8:	100d883a 	mov	r6,r2
  80d0ec:	b808943a 	slli	r4,r23,16
  80d0f0:	aa3fffcc 	andi	r8,r21,65535
  80d0f4:	8804d43a 	srli	r2,r17,16
  80d0f8:	41af383a 	mul	r23,r8,r6
  80d0fc:	8520983a 	sll	r16,r16,r20
  80d100:	1104b03a 	or	r2,r2,r4
  80d104:	15c0042e 	bgeu	r2,r23,80d118 <__umoddi3+0x33c>
  80d108:	1545883a 	add	r2,r2,r21
  80d10c:	30ffffc4 	addi	r3,r6,-1
  80d110:	1540742e 	bgeu	r2,r21,80d2e4 <__umoddi3+0x508>
  80d114:	180d883a 	mov	r6,r3
  80d118:	15efc83a 	sub	r23,r2,r23
  80d11c:	b00b883a 	mov	r5,r22
  80d120:	b809883a 	mov	r4,r23
  80d124:	d9800115 	stw	r6,4(sp)
  80d128:	da000015 	stw	r8,0(sp)
  80d12c:	08031b80 	call	8031b8 <__umodsi3>
  80d130:	b00b883a 	mov	r5,r22
  80d134:	b809883a 	mov	r4,r23
  80d138:	1039883a 	mov	fp,r2
  80d13c:	08031540 	call	803154 <__udivsi3>
  80d140:	da000017 	ldw	r8,0(sp)
  80d144:	e038943a 	slli	fp,fp,16
  80d148:	100b883a 	mov	r5,r2
  80d14c:	4089383a 	mul	r4,r8,r2
  80d150:	8a3fffcc 	andi	r8,r17,65535
  80d154:	4710b03a 	or	r8,r8,fp
  80d158:	d9800117 	ldw	r6,4(sp)
  80d15c:	4100042e 	bgeu	r8,r4,80d170 <__umoddi3+0x394>
  80d160:	4551883a 	add	r8,r8,r21
  80d164:	10bfffc4 	addi	r2,r2,-1
  80d168:	45405a2e 	bgeu	r8,r21,80d2d4 <__umoddi3+0x4f8>
  80d16c:	100b883a 	mov	r5,r2
  80d170:	300c943a 	slli	r6,r6,16
  80d174:	91ffffcc 	andi	r7,r18,65535
  80d178:	9004d43a 	srli	r2,r18,16
  80d17c:	314cb03a 	or	r6,r6,r5
  80d180:	317fffcc 	andi	r5,r6,65535
  80d184:	300cd43a 	srli	r6,r6,16
  80d188:	29d3383a 	mul	r9,r5,r7
  80d18c:	288b383a 	mul	r5,r5,r2
  80d190:	31cf383a 	mul	r7,r6,r7
  80d194:	4806d43a 	srli	r3,r9,16
  80d198:	4111c83a 	sub	r8,r8,r4
  80d19c:	29cb883a 	add	r5,r5,r7
  80d1a0:	194b883a 	add	r5,r3,r5
  80d1a4:	3085383a 	mul	r2,r6,r2
  80d1a8:	29c0022e 	bgeu	r5,r7,80d1b4 <__umoddi3+0x3d8>
  80d1ac:	00c00074 	movhi	r3,1
  80d1b0:	10c5883a 	add	r2,r2,r3
  80d1b4:	2808d43a 	srli	r4,r5,16
  80d1b8:	280a943a 	slli	r5,r5,16
  80d1bc:	4a7fffcc 	andi	r9,r9,65535
  80d1c0:	2085883a 	add	r2,r4,r2
  80d1c4:	2a4b883a 	add	r5,r5,r9
  80d1c8:	40803636 	bltu	r8,r2,80d2a4 <__umoddi3+0x4c8>
  80d1cc:	40804d26 	beq	r8,r2,80d304 <__umoddi3+0x528>
  80d1d0:	4089c83a 	sub	r4,r8,r2
  80d1d4:	280f883a 	mov	r7,r5
  80d1d8:	81cfc83a 	sub	r7,r16,r7
  80d1dc:	81c7803a 	cmpltu	r3,r16,r7
  80d1e0:	20c7c83a 	sub	r3,r4,r3
  80d1e4:	1cc4983a 	sll	r2,r3,r19
  80d1e8:	3d0ed83a 	srl	r7,r7,r20
  80d1ec:	1d06d83a 	srl	r3,r3,r20
  80d1f0:	11c4b03a 	or	r2,r2,r7
  80d1f4:	003f9306 	br	80d044 <__alt_mem_onchip_mem+0xff78d044>
  80d1f8:	9ca6983a 	sll	r19,r19,r18
  80d1fc:	88e8d83a 	srl	r20,r17,r3
  80d200:	80c4d83a 	srl	r2,r16,r3
  80d204:	982cd43a 	srli	r22,r19,16
  80d208:	8ca2983a 	sll	r17,r17,r18
  80d20c:	a009883a 	mov	r4,r20
  80d210:	b00b883a 	mov	r5,r22
  80d214:	1478b03a 	or	fp,r2,r17
  80d218:	08031b80 	call	8031b8 <__umodsi3>
  80d21c:	a009883a 	mov	r4,r20
  80d220:	b00b883a 	mov	r5,r22
  80d224:	1023883a 	mov	r17,r2
  80d228:	08031540 	call	803154 <__udivsi3>
  80d22c:	9d7fffcc 	andi	r21,r19,65535
  80d230:	880a943a 	slli	r5,r17,16
  80d234:	e008d43a 	srli	r4,fp,16
  80d238:	a885383a 	mul	r2,r21,r2
  80d23c:	84a8983a 	sll	r20,r16,r18
  80d240:	2148b03a 	or	r4,r4,r5
  80d244:	2080042e 	bgeu	r4,r2,80d258 <__umoddi3+0x47c>
  80d248:	24c9883a 	add	r4,r4,r19
  80d24c:	24c00236 	bltu	r4,r19,80d258 <__umoddi3+0x47c>
  80d250:	2080012e 	bgeu	r4,r2,80d258 <__umoddi3+0x47c>
  80d254:	24c9883a 	add	r4,r4,r19
  80d258:	20a3c83a 	sub	r17,r4,r2
  80d25c:	b00b883a 	mov	r5,r22
  80d260:	8809883a 	mov	r4,r17
  80d264:	08031b80 	call	8031b8 <__umodsi3>
  80d268:	102f883a 	mov	r23,r2
  80d26c:	8809883a 	mov	r4,r17
  80d270:	b00b883a 	mov	r5,r22
  80d274:	08031540 	call	803154 <__udivsi3>
  80d278:	b82e943a 	slli	r23,r23,16
  80d27c:	a885383a 	mul	r2,r21,r2
  80d280:	e13fffcc 	andi	r4,fp,65535
  80d284:	25c8b03a 	or	r4,r4,r23
  80d288:	2080042e 	bgeu	r4,r2,80d29c <__umoddi3+0x4c0>
  80d28c:	24c9883a 	add	r4,r4,r19
  80d290:	24c00236 	bltu	r4,r19,80d29c <__umoddi3+0x4c0>
  80d294:	2080012e 	bgeu	r4,r2,80d29c <__umoddi3+0x4c0>
  80d298:	24c9883a 	add	r4,r4,r19
  80d29c:	20a3c83a 	sub	r17,r4,r2
  80d2a0:	003f4806 	br	80cfc4 <__alt_mem_onchip_mem+0xff78cfc4>
  80d2a4:	2c8fc83a 	sub	r7,r5,r18
  80d2a8:	1545c83a 	sub	r2,r2,r21
  80d2ac:	29cb803a 	cmpltu	r5,r5,r7
  80d2b0:	1145c83a 	sub	r2,r2,r5
  80d2b4:	4089c83a 	sub	r4,r8,r2
  80d2b8:	003fc706 	br	80d1d8 <__alt_mem_onchip_mem+0xff78d1d8>
  80d2bc:	01000604 	movi	r4,24
  80d2c0:	003f1806 	br	80cf24 <__alt_mem_onchip_mem+0xff78cf24>
  80d2c4:	00800604 	movi	r2,24
  80d2c8:	003f3206 	br	80cf94 <__alt_mem_onchip_mem+0xff78cf94>
  80d2cc:	01000604 	movi	r4,24
  80d2d0:	003ed906 	br	80ce38 <__alt_mem_onchip_mem+0xff78ce38>
  80d2d4:	413fa52e 	bgeu	r8,r4,80d16c <__alt_mem_onchip_mem+0xff78d16c>
  80d2d8:	297fff84 	addi	r5,r5,-2
  80d2dc:	4551883a 	add	r8,r8,r21
  80d2e0:	003fa306 	br	80d170 <__alt_mem_onchip_mem+0xff78d170>
  80d2e4:	15ff8b2e 	bgeu	r2,r23,80d114 <__alt_mem_onchip_mem+0xff78d114>
  80d2e8:	31bfff84 	addi	r6,r6,-2
  80d2ec:	1545883a 	add	r2,r2,r21
  80d2f0:	003f8906 	br	80d118 <__alt_mem_onchip_mem+0xff78d118>
  80d2f4:	24c9883a 	add	r4,r4,r19
  80d2f8:	003eee06 	br	80ceb4 <__alt_mem_onchip_mem+0xff78ceb4>
  80d2fc:	8005883a 	mov	r2,r16
  80d300:	003f1706 	br	80cf60 <__alt_mem_onchip_mem+0xff78cf60>
  80d304:	817fe736 	bltu	r16,r5,80d2a4 <__alt_mem_onchip_mem+0xff78d2a4>
  80d308:	280f883a 	mov	r7,r5
  80d30c:	0009883a 	mov	r4,zero
  80d310:	003fb106 	br	80d1d8 <__alt_mem_onchip_mem+0xff78d1d8>

0080d314 <__adddf3>:
  80d314:	02c00434 	movhi	r11,16
  80d318:	5affffc4 	addi	r11,r11,-1
  80d31c:	2806d7fa 	srli	r3,r5,31
  80d320:	2ad4703a 	and	r10,r5,r11
  80d324:	3ad2703a 	and	r9,r7,r11
  80d328:	3804d53a 	srli	r2,r7,20
  80d32c:	3018d77a 	srli	r12,r6,29
  80d330:	280ad53a 	srli	r5,r5,20
  80d334:	501490fa 	slli	r10,r10,3
  80d338:	2010d77a 	srli	r8,r4,29
  80d33c:	481290fa 	slli	r9,r9,3
  80d340:	380ed7fa 	srli	r7,r7,31
  80d344:	defffb04 	addi	sp,sp,-20
  80d348:	dc800215 	stw	r18,8(sp)
  80d34c:	dc400115 	stw	r17,4(sp)
  80d350:	dc000015 	stw	r16,0(sp)
  80d354:	dfc00415 	stw	ra,16(sp)
  80d358:	dcc00315 	stw	r19,12(sp)
  80d35c:	1c803fcc 	andi	r18,r3,255
  80d360:	2c01ffcc 	andi	r16,r5,2047
  80d364:	5210b03a 	or	r8,r10,r8
  80d368:	202290fa 	slli	r17,r4,3
  80d36c:	1081ffcc 	andi	r2,r2,2047
  80d370:	4b12b03a 	or	r9,r9,r12
  80d374:	300c90fa 	slli	r6,r6,3
  80d378:	91c07526 	beq	r18,r7,80d550 <__adddf3+0x23c>
  80d37c:	8087c83a 	sub	r3,r16,r2
  80d380:	00c0ab0e 	bge	zero,r3,80d630 <__adddf3+0x31c>
  80d384:	10002a1e 	bne	r2,zero,80d430 <__adddf3+0x11c>
  80d388:	4984b03a 	or	r2,r9,r6
  80d38c:	1000961e 	bne	r2,zero,80d5e8 <__adddf3+0x2d4>
  80d390:	888001cc 	andi	r2,r17,7
  80d394:	10000726 	beq	r2,zero,80d3b4 <__adddf3+0xa0>
  80d398:	888003cc 	andi	r2,r17,15
  80d39c:	00c00104 	movi	r3,4
  80d3a0:	10c00426 	beq	r2,r3,80d3b4 <__adddf3+0xa0>
  80d3a4:	88c7883a 	add	r3,r17,r3
  80d3a8:	1c63803a 	cmpltu	r17,r3,r17
  80d3ac:	4451883a 	add	r8,r8,r17
  80d3b0:	1823883a 	mov	r17,r3
  80d3b4:	4080202c 	andhi	r2,r8,128
  80d3b8:	10005926 	beq	r2,zero,80d520 <__adddf3+0x20c>
  80d3bc:	84000044 	addi	r16,r16,1
  80d3c0:	0081ffc4 	movi	r2,2047
  80d3c4:	8080ba26 	beq	r16,r2,80d6b0 <__adddf3+0x39c>
  80d3c8:	00bfe034 	movhi	r2,65408
  80d3cc:	10bfffc4 	addi	r2,r2,-1
  80d3d0:	4090703a 	and	r8,r8,r2
  80d3d4:	4004977a 	slli	r2,r8,29
  80d3d8:	4010927a 	slli	r8,r8,9
  80d3dc:	8822d0fa 	srli	r17,r17,3
  80d3e0:	8401ffcc 	andi	r16,r16,2047
  80d3e4:	4010d33a 	srli	r8,r8,12
  80d3e8:	9007883a 	mov	r3,r18
  80d3ec:	1444b03a 	or	r2,r2,r17
  80d3f0:	8401ffcc 	andi	r16,r16,2047
  80d3f4:	8020953a 	slli	r16,r16,20
  80d3f8:	18c03fcc 	andi	r3,r3,255
  80d3fc:	01000434 	movhi	r4,16
  80d400:	213fffc4 	addi	r4,r4,-1
  80d404:	180697fa 	slli	r3,r3,31
  80d408:	4110703a 	and	r8,r8,r4
  80d40c:	4410b03a 	or	r8,r8,r16
  80d410:	40c6b03a 	or	r3,r8,r3
  80d414:	dfc00417 	ldw	ra,16(sp)
  80d418:	dcc00317 	ldw	r19,12(sp)
  80d41c:	dc800217 	ldw	r18,8(sp)
  80d420:	dc400117 	ldw	r17,4(sp)
  80d424:	dc000017 	ldw	r16,0(sp)
  80d428:	dec00504 	addi	sp,sp,20
  80d42c:	f800283a 	ret
  80d430:	0081ffc4 	movi	r2,2047
  80d434:	80bfd626 	beq	r16,r2,80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d438:	4a402034 	orhi	r9,r9,128
  80d43c:	00800e04 	movi	r2,56
  80d440:	10c09f16 	blt	r2,r3,80d6c0 <__adddf3+0x3ac>
  80d444:	008007c4 	movi	r2,31
  80d448:	10c0c216 	blt	r2,r3,80d754 <__adddf3+0x440>
  80d44c:	00800804 	movi	r2,32
  80d450:	10c5c83a 	sub	r2,r2,r3
  80d454:	488a983a 	sll	r5,r9,r2
  80d458:	30c8d83a 	srl	r4,r6,r3
  80d45c:	3084983a 	sll	r2,r6,r2
  80d460:	48c6d83a 	srl	r3,r9,r3
  80d464:	290cb03a 	or	r6,r5,r4
  80d468:	1004c03a 	cmpne	r2,r2,zero
  80d46c:	308cb03a 	or	r6,r6,r2
  80d470:	898dc83a 	sub	r6,r17,r6
  80d474:	89a3803a 	cmpltu	r17,r17,r6
  80d478:	40d1c83a 	sub	r8,r8,r3
  80d47c:	4451c83a 	sub	r8,r8,r17
  80d480:	3023883a 	mov	r17,r6
  80d484:	4080202c 	andhi	r2,r8,128
  80d488:	10002326 	beq	r2,zero,80d518 <__adddf3+0x204>
  80d48c:	04c02034 	movhi	r19,128
  80d490:	9cffffc4 	addi	r19,r19,-1
  80d494:	44e6703a 	and	r19,r8,r19
  80d498:	98007626 	beq	r19,zero,80d674 <__adddf3+0x360>
  80d49c:	9809883a 	mov	r4,r19
  80d4a0:	080f9180 	call	80f918 <__clzsi2>
  80d4a4:	10fffe04 	addi	r3,r2,-8
  80d4a8:	010007c4 	movi	r4,31
  80d4ac:	20c07716 	blt	r4,r3,80d68c <__adddf3+0x378>
  80d4b0:	00800804 	movi	r2,32
  80d4b4:	10c5c83a 	sub	r2,r2,r3
  80d4b8:	8884d83a 	srl	r2,r17,r2
  80d4bc:	98d0983a 	sll	r8,r19,r3
  80d4c0:	88e2983a 	sll	r17,r17,r3
  80d4c4:	1204b03a 	or	r2,r2,r8
  80d4c8:	1c007416 	blt	r3,r16,80d69c <__adddf3+0x388>
  80d4cc:	1c21c83a 	sub	r16,r3,r16
  80d4d0:	82000044 	addi	r8,r16,1
  80d4d4:	00c007c4 	movi	r3,31
  80d4d8:	1a009116 	blt	r3,r8,80d720 <__adddf3+0x40c>
  80d4dc:	00c00804 	movi	r3,32
  80d4e0:	1a07c83a 	sub	r3,r3,r8
  80d4e4:	8a08d83a 	srl	r4,r17,r8
  80d4e8:	88e2983a 	sll	r17,r17,r3
  80d4ec:	10c6983a 	sll	r3,r2,r3
  80d4f0:	1210d83a 	srl	r8,r2,r8
  80d4f4:	8804c03a 	cmpne	r2,r17,zero
  80d4f8:	1906b03a 	or	r3,r3,r4
  80d4fc:	18a2b03a 	or	r17,r3,r2
  80d500:	0021883a 	mov	r16,zero
  80d504:	003fa206 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d508:	1890b03a 	or	r8,r3,r2
  80d50c:	40017d26 	beq	r8,zero,80db04 <__adddf3+0x7f0>
  80d510:	1011883a 	mov	r8,r2
  80d514:	1823883a 	mov	r17,r3
  80d518:	888001cc 	andi	r2,r17,7
  80d51c:	103f9e1e 	bne	r2,zero,80d398 <__alt_mem_onchip_mem+0xff78d398>
  80d520:	4004977a 	slli	r2,r8,29
  80d524:	8822d0fa 	srli	r17,r17,3
  80d528:	4010d0fa 	srli	r8,r8,3
  80d52c:	9007883a 	mov	r3,r18
  80d530:	1444b03a 	or	r2,r2,r17
  80d534:	0101ffc4 	movi	r4,2047
  80d538:	81002426 	beq	r16,r4,80d5cc <__adddf3+0x2b8>
  80d53c:	8120703a 	and	r16,r16,r4
  80d540:	01000434 	movhi	r4,16
  80d544:	213fffc4 	addi	r4,r4,-1
  80d548:	4110703a 	and	r8,r8,r4
  80d54c:	003fa806 	br	80d3f0 <__alt_mem_onchip_mem+0xff78d3f0>
  80d550:	8089c83a 	sub	r4,r16,r2
  80d554:	01005e0e 	bge	zero,r4,80d6d0 <__adddf3+0x3bc>
  80d558:	10002b26 	beq	r2,zero,80d608 <__adddf3+0x2f4>
  80d55c:	0081ffc4 	movi	r2,2047
  80d560:	80bf8b26 	beq	r16,r2,80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d564:	4a402034 	orhi	r9,r9,128
  80d568:	00800e04 	movi	r2,56
  80d56c:	1100a40e 	bge	r2,r4,80d800 <__adddf3+0x4ec>
  80d570:	498cb03a 	or	r6,r9,r6
  80d574:	300ac03a 	cmpne	r5,r6,zero
  80d578:	0013883a 	mov	r9,zero
  80d57c:	2c4b883a 	add	r5,r5,r17
  80d580:	2c63803a 	cmpltu	r17,r5,r17
  80d584:	4a11883a 	add	r8,r9,r8
  80d588:	8a11883a 	add	r8,r17,r8
  80d58c:	2823883a 	mov	r17,r5
  80d590:	4080202c 	andhi	r2,r8,128
  80d594:	103fe026 	beq	r2,zero,80d518 <__alt_mem_onchip_mem+0xff78d518>
  80d598:	84000044 	addi	r16,r16,1
  80d59c:	0081ffc4 	movi	r2,2047
  80d5a0:	8080d226 	beq	r16,r2,80d8ec <__adddf3+0x5d8>
  80d5a4:	00bfe034 	movhi	r2,65408
  80d5a8:	10bfffc4 	addi	r2,r2,-1
  80d5ac:	4090703a 	and	r8,r8,r2
  80d5b0:	880ad07a 	srli	r5,r17,1
  80d5b4:	400897fa 	slli	r4,r8,31
  80d5b8:	88c0004c 	andi	r3,r17,1
  80d5bc:	28e2b03a 	or	r17,r5,r3
  80d5c0:	4010d07a 	srli	r8,r8,1
  80d5c4:	2462b03a 	or	r17,r4,r17
  80d5c8:	003f7106 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d5cc:	4088b03a 	or	r4,r8,r2
  80d5d0:	20014526 	beq	r4,zero,80dae8 <__adddf3+0x7d4>
  80d5d4:	01000434 	movhi	r4,16
  80d5d8:	42000234 	orhi	r8,r8,8
  80d5dc:	213fffc4 	addi	r4,r4,-1
  80d5e0:	4110703a 	and	r8,r8,r4
  80d5e4:	003f8206 	br	80d3f0 <__alt_mem_onchip_mem+0xff78d3f0>
  80d5e8:	18ffffc4 	addi	r3,r3,-1
  80d5ec:	1800491e 	bne	r3,zero,80d714 <__adddf3+0x400>
  80d5f0:	898bc83a 	sub	r5,r17,r6
  80d5f4:	8963803a 	cmpltu	r17,r17,r5
  80d5f8:	4251c83a 	sub	r8,r8,r9
  80d5fc:	4451c83a 	sub	r8,r8,r17
  80d600:	2823883a 	mov	r17,r5
  80d604:	003f9f06 	br	80d484 <__alt_mem_onchip_mem+0xff78d484>
  80d608:	4984b03a 	or	r2,r9,r6
  80d60c:	103f6026 	beq	r2,zero,80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d610:	213fffc4 	addi	r4,r4,-1
  80d614:	2000931e 	bne	r4,zero,80d864 <__adddf3+0x550>
  80d618:	898d883a 	add	r6,r17,r6
  80d61c:	3463803a 	cmpltu	r17,r6,r17
  80d620:	4251883a 	add	r8,r8,r9
  80d624:	8a11883a 	add	r8,r17,r8
  80d628:	3023883a 	mov	r17,r6
  80d62c:	003fd806 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d630:	1800541e 	bne	r3,zero,80d784 <__adddf3+0x470>
  80d634:	80800044 	addi	r2,r16,1
  80d638:	1081ffcc 	andi	r2,r2,2047
  80d63c:	00c00044 	movi	r3,1
  80d640:	1880a00e 	bge	r3,r2,80d8c4 <__adddf3+0x5b0>
  80d644:	8989c83a 	sub	r4,r17,r6
  80d648:	8905803a 	cmpltu	r2,r17,r4
  80d64c:	4267c83a 	sub	r19,r8,r9
  80d650:	98a7c83a 	sub	r19,r19,r2
  80d654:	9880202c 	andhi	r2,r19,128
  80d658:	10006326 	beq	r2,zero,80d7e8 <__adddf3+0x4d4>
  80d65c:	3463c83a 	sub	r17,r6,r17
  80d660:	4a07c83a 	sub	r3,r9,r8
  80d664:	344d803a 	cmpltu	r6,r6,r17
  80d668:	19a7c83a 	sub	r19,r3,r6
  80d66c:	3825883a 	mov	r18,r7
  80d670:	983f8a1e 	bne	r19,zero,80d49c <__alt_mem_onchip_mem+0xff78d49c>
  80d674:	8809883a 	mov	r4,r17
  80d678:	080f9180 	call	80f918 <__clzsi2>
  80d67c:	10800804 	addi	r2,r2,32
  80d680:	10fffe04 	addi	r3,r2,-8
  80d684:	010007c4 	movi	r4,31
  80d688:	20ff890e 	bge	r4,r3,80d4b0 <__alt_mem_onchip_mem+0xff78d4b0>
  80d68c:	10bff604 	addi	r2,r2,-40
  80d690:	8884983a 	sll	r2,r17,r2
  80d694:	0023883a 	mov	r17,zero
  80d698:	1c3f8c0e 	bge	r3,r16,80d4cc <__alt_mem_onchip_mem+0xff78d4cc>
  80d69c:	023fe034 	movhi	r8,65408
  80d6a0:	423fffc4 	addi	r8,r8,-1
  80d6a4:	80e1c83a 	sub	r16,r16,r3
  80d6a8:	1210703a 	and	r8,r2,r8
  80d6ac:	003f3806 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d6b0:	9007883a 	mov	r3,r18
  80d6b4:	0011883a 	mov	r8,zero
  80d6b8:	0005883a 	mov	r2,zero
  80d6bc:	003f4c06 	br	80d3f0 <__alt_mem_onchip_mem+0xff78d3f0>
  80d6c0:	498cb03a 	or	r6,r9,r6
  80d6c4:	300cc03a 	cmpne	r6,r6,zero
  80d6c8:	0007883a 	mov	r3,zero
  80d6cc:	003f6806 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d6d0:	20009c1e 	bne	r4,zero,80d944 <__adddf3+0x630>
  80d6d4:	80800044 	addi	r2,r16,1
  80d6d8:	1141ffcc 	andi	r5,r2,2047
  80d6dc:	01000044 	movi	r4,1
  80d6e0:	2140670e 	bge	r4,r5,80d880 <__adddf3+0x56c>
  80d6e4:	0101ffc4 	movi	r4,2047
  80d6e8:	11007f26 	beq	r2,r4,80d8e8 <__adddf3+0x5d4>
  80d6ec:	898d883a 	add	r6,r17,r6
  80d6f0:	4247883a 	add	r3,r8,r9
  80d6f4:	3451803a 	cmpltu	r8,r6,r17
  80d6f8:	40d1883a 	add	r8,r8,r3
  80d6fc:	402297fa 	slli	r17,r8,31
  80d700:	300cd07a 	srli	r6,r6,1
  80d704:	4010d07a 	srli	r8,r8,1
  80d708:	1021883a 	mov	r16,r2
  80d70c:	89a2b03a 	or	r17,r17,r6
  80d710:	003f1f06 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d714:	0081ffc4 	movi	r2,2047
  80d718:	80bf481e 	bne	r16,r2,80d43c <__alt_mem_onchip_mem+0xff78d43c>
  80d71c:	003f1c06 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d720:	843ff844 	addi	r16,r16,-31
  80d724:	01000804 	movi	r4,32
  80d728:	1406d83a 	srl	r3,r2,r16
  80d72c:	41005026 	beq	r8,r4,80d870 <__adddf3+0x55c>
  80d730:	01001004 	movi	r4,64
  80d734:	2211c83a 	sub	r8,r4,r8
  80d738:	1204983a 	sll	r2,r2,r8
  80d73c:	88a2b03a 	or	r17,r17,r2
  80d740:	8822c03a 	cmpne	r17,r17,zero
  80d744:	1c62b03a 	or	r17,r3,r17
  80d748:	0011883a 	mov	r8,zero
  80d74c:	0021883a 	mov	r16,zero
  80d750:	003f7106 	br	80d518 <__alt_mem_onchip_mem+0xff78d518>
  80d754:	193ff804 	addi	r4,r3,-32
  80d758:	00800804 	movi	r2,32
  80d75c:	4908d83a 	srl	r4,r9,r4
  80d760:	18804526 	beq	r3,r2,80d878 <__adddf3+0x564>
  80d764:	00801004 	movi	r2,64
  80d768:	10c5c83a 	sub	r2,r2,r3
  80d76c:	4886983a 	sll	r3,r9,r2
  80d770:	198cb03a 	or	r6,r3,r6
  80d774:	300cc03a 	cmpne	r6,r6,zero
  80d778:	218cb03a 	or	r6,r4,r6
  80d77c:	0007883a 	mov	r3,zero
  80d780:	003f3b06 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>
  80d784:	80002a26 	beq	r16,zero,80d830 <__adddf3+0x51c>
  80d788:	0101ffc4 	movi	r4,2047
  80d78c:	11006826 	beq	r2,r4,80d930 <__adddf3+0x61c>
  80d790:	00c7c83a 	sub	r3,zero,r3
  80d794:	42002034 	orhi	r8,r8,128
  80d798:	01000e04 	movi	r4,56
  80d79c:	20c07c16 	blt	r4,r3,80d990 <__adddf3+0x67c>
  80d7a0:	010007c4 	movi	r4,31
  80d7a4:	20c0da16 	blt	r4,r3,80db10 <__adddf3+0x7fc>
  80d7a8:	01000804 	movi	r4,32
  80d7ac:	20c9c83a 	sub	r4,r4,r3
  80d7b0:	4114983a 	sll	r10,r8,r4
  80d7b4:	88cad83a 	srl	r5,r17,r3
  80d7b8:	8908983a 	sll	r4,r17,r4
  80d7bc:	40c6d83a 	srl	r3,r8,r3
  80d7c0:	5162b03a 	or	r17,r10,r5
  80d7c4:	2008c03a 	cmpne	r4,r4,zero
  80d7c8:	8922b03a 	or	r17,r17,r4
  80d7cc:	3463c83a 	sub	r17,r6,r17
  80d7d0:	48c7c83a 	sub	r3,r9,r3
  80d7d4:	344d803a 	cmpltu	r6,r6,r17
  80d7d8:	1991c83a 	sub	r8,r3,r6
  80d7dc:	1021883a 	mov	r16,r2
  80d7e0:	3825883a 	mov	r18,r7
  80d7e4:	003f2706 	br	80d484 <__alt_mem_onchip_mem+0xff78d484>
  80d7e8:	24d0b03a 	or	r8,r4,r19
  80d7ec:	40001b1e 	bne	r8,zero,80d85c <__adddf3+0x548>
  80d7f0:	0005883a 	mov	r2,zero
  80d7f4:	0007883a 	mov	r3,zero
  80d7f8:	0021883a 	mov	r16,zero
  80d7fc:	003f4d06 	br	80d534 <__alt_mem_onchip_mem+0xff78d534>
  80d800:	008007c4 	movi	r2,31
  80d804:	11003c16 	blt	r2,r4,80d8f8 <__adddf3+0x5e4>
  80d808:	00800804 	movi	r2,32
  80d80c:	1105c83a 	sub	r2,r2,r4
  80d810:	488e983a 	sll	r7,r9,r2
  80d814:	310ad83a 	srl	r5,r6,r4
  80d818:	3084983a 	sll	r2,r6,r2
  80d81c:	4912d83a 	srl	r9,r9,r4
  80d820:	394ab03a 	or	r5,r7,r5
  80d824:	1004c03a 	cmpne	r2,r2,zero
  80d828:	288ab03a 	or	r5,r5,r2
  80d82c:	003f5306 	br	80d57c <__alt_mem_onchip_mem+0xff78d57c>
  80d830:	4448b03a 	or	r4,r8,r17
  80d834:	20003e26 	beq	r4,zero,80d930 <__adddf3+0x61c>
  80d838:	00c6303a 	nor	r3,zero,r3
  80d83c:	18003a1e 	bne	r3,zero,80d928 <__adddf3+0x614>
  80d840:	3463c83a 	sub	r17,r6,r17
  80d844:	4a07c83a 	sub	r3,r9,r8
  80d848:	344d803a 	cmpltu	r6,r6,r17
  80d84c:	1991c83a 	sub	r8,r3,r6
  80d850:	1021883a 	mov	r16,r2
  80d854:	3825883a 	mov	r18,r7
  80d858:	003f0a06 	br	80d484 <__alt_mem_onchip_mem+0xff78d484>
  80d85c:	2023883a 	mov	r17,r4
  80d860:	003f0d06 	br	80d498 <__alt_mem_onchip_mem+0xff78d498>
  80d864:	0081ffc4 	movi	r2,2047
  80d868:	80bf3f1e 	bne	r16,r2,80d568 <__alt_mem_onchip_mem+0xff78d568>
  80d86c:	003ec806 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d870:	0005883a 	mov	r2,zero
  80d874:	003fb106 	br	80d73c <__alt_mem_onchip_mem+0xff78d73c>
  80d878:	0007883a 	mov	r3,zero
  80d87c:	003fbc06 	br	80d770 <__alt_mem_onchip_mem+0xff78d770>
  80d880:	4444b03a 	or	r2,r8,r17
  80d884:	8000871e 	bne	r16,zero,80daa4 <__adddf3+0x790>
  80d888:	1000ba26 	beq	r2,zero,80db74 <__adddf3+0x860>
  80d88c:	4984b03a 	or	r2,r9,r6
  80d890:	103ebf26 	beq	r2,zero,80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d894:	8985883a 	add	r2,r17,r6
  80d898:	4247883a 	add	r3,r8,r9
  80d89c:	1451803a 	cmpltu	r8,r2,r17
  80d8a0:	40d1883a 	add	r8,r8,r3
  80d8a4:	40c0202c 	andhi	r3,r8,128
  80d8a8:	1023883a 	mov	r17,r2
  80d8ac:	183f1a26 	beq	r3,zero,80d518 <__alt_mem_onchip_mem+0xff78d518>
  80d8b0:	00bfe034 	movhi	r2,65408
  80d8b4:	10bfffc4 	addi	r2,r2,-1
  80d8b8:	2021883a 	mov	r16,r4
  80d8bc:	4090703a 	and	r8,r8,r2
  80d8c0:	003eb306 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d8c4:	4444b03a 	or	r2,r8,r17
  80d8c8:	8000291e 	bne	r16,zero,80d970 <__adddf3+0x65c>
  80d8cc:	10004b1e 	bne	r2,zero,80d9fc <__adddf3+0x6e8>
  80d8d0:	4990b03a 	or	r8,r9,r6
  80d8d4:	40008b26 	beq	r8,zero,80db04 <__adddf3+0x7f0>
  80d8d8:	4811883a 	mov	r8,r9
  80d8dc:	3023883a 	mov	r17,r6
  80d8e0:	3825883a 	mov	r18,r7
  80d8e4:	003eaa06 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d8e8:	1021883a 	mov	r16,r2
  80d8ec:	0011883a 	mov	r8,zero
  80d8f0:	0005883a 	mov	r2,zero
  80d8f4:	003f0f06 	br	80d534 <__alt_mem_onchip_mem+0xff78d534>
  80d8f8:	217ff804 	addi	r5,r4,-32
  80d8fc:	00800804 	movi	r2,32
  80d900:	494ad83a 	srl	r5,r9,r5
  80d904:	20807d26 	beq	r4,r2,80dafc <__adddf3+0x7e8>
  80d908:	00801004 	movi	r2,64
  80d90c:	1109c83a 	sub	r4,r2,r4
  80d910:	4912983a 	sll	r9,r9,r4
  80d914:	498cb03a 	or	r6,r9,r6
  80d918:	300cc03a 	cmpne	r6,r6,zero
  80d91c:	298ab03a 	or	r5,r5,r6
  80d920:	0013883a 	mov	r9,zero
  80d924:	003f1506 	br	80d57c <__alt_mem_onchip_mem+0xff78d57c>
  80d928:	0101ffc4 	movi	r4,2047
  80d92c:	113f9a1e 	bne	r2,r4,80d798 <__alt_mem_onchip_mem+0xff78d798>
  80d930:	4811883a 	mov	r8,r9
  80d934:	3023883a 	mov	r17,r6
  80d938:	1021883a 	mov	r16,r2
  80d93c:	3825883a 	mov	r18,r7
  80d940:	003e9306 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d944:	8000161e 	bne	r16,zero,80d9a0 <__adddf3+0x68c>
  80d948:	444ab03a 	or	r5,r8,r17
  80d94c:	28005126 	beq	r5,zero,80da94 <__adddf3+0x780>
  80d950:	0108303a 	nor	r4,zero,r4
  80d954:	20004d1e 	bne	r4,zero,80da8c <__adddf3+0x778>
  80d958:	89a3883a 	add	r17,r17,r6
  80d95c:	4253883a 	add	r9,r8,r9
  80d960:	898d803a 	cmpltu	r6,r17,r6
  80d964:	3251883a 	add	r8,r6,r9
  80d968:	1021883a 	mov	r16,r2
  80d96c:	003f0806 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d970:	1000301e 	bne	r2,zero,80da34 <__adddf3+0x720>
  80d974:	4984b03a 	or	r2,r9,r6
  80d978:	10007126 	beq	r2,zero,80db40 <__adddf3+0x82c>
  80d97c:	4811883a 	mov	r8,r9
  80d980:	3023883a 	mov	r17,r6
  80d984:	3825883a 	mov	r18,r7
  80d988:	0401ffc4 	movi	r16,2047
  80d98c:	003e8006 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80d990:	4462b03a 	or	r17,r8,r17
  80d994:	8822c03a 	cmpne	r17,r17,zero
  80d998:	0007883a 	mov	r3,zero
  80d99c:	003f8b06 	br	80d7cc <__alt_mem_onchip_mem+0xff78d7cc>
  80d9a0:	0141ffc4 	movi	r5,2047
  80d9a4:	11403b26 	beq	r2,r5,80da94 <__adddf3+0x780>
  80d9a8:	0109c83a 	sub	r4,zero,r4
  80d9ac:	42002034 	orhi	r8,r8,128
  80d9b0:	01400e04 	movi	r5,56
  80d9b4:	29006716 	blt	r5,r4,80db54 <__adddf3+0x840>
  80d9b8:	014007c4 	movi	r5,31
  80d9bc:	29007016 	blt	r5,r4,80db80 <__adddf3+0x86c>
  80d9c0:	01400804 	movi	r5,32
  80d9c4:	290bc83a 	sub	r5,r5,r4
  80d9c8:	4154983a 	sll	r10,r8,r5
  80d9cc:	890ed83a 	srl	r7,r17,r4
  80d9d0:	894a983a 	sll	r5,r17,r5
  80d9d4:	4108d83a 	srl	r4,r8,r4
  80d9d8:	51e2b03a 	or	r17,r10,r7
  80d9dc:	280ac03a 	cmpne	r5,r5,zero
  80d9e0:	8962b03a 	or	r17,r17,r5
  80d9e4:	89a3883a 	add	r17,r17,r6
  80d9e8:	2253883a 	add	r9,r4,r9
  80d9ec:	898d803a 	cmpltu	r6,r17,r6
  80d9f0:	3251883a 	add	r8,r6,r9
  80d9f4:	1021883a 	mov	r16,r2
  80d9f8:	003ee506 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d9fc:	4984b03a 	or	r2,r9,r6
  80da00:	103e6326 	beq	r2,zero,80d390 <__alt_mem_onchip_mem+0xff78d390>
  80da04:	8987c83a 	sub	r3,r17,r6
  80da08:	88c9803a 	cmpltu	r4,r17,r3
  80da0c:	4245c83a 	sub	r2,r8,r9
  80da10:	1105c83a 	sub	r2,r2,r4
  80da14:	1100202c 	andhi	r4,r2,128
  80da18:	203ebb26 	beq	r4,zero,80d508 <__alt_mem_onchip_mem+0xff78d508>
  80da1c:	3463c83a 	sub	r17,r6,r17
  80da20:	4a07c83a 	sub	r3,r9,r8
  80da24:	344d803a 	cmpltu	r6,r6,r17
  80da28:	1991c83a 	sub	r8,r3,r6
  80da2c:	3825883a 	mov	r18,r7
  80da30:	003e5706 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80da34:	4984b03a 	or	r2,r9,r6
  80da38:	10002e26 	beq	r2,zero,80daf4 <__adddf3+0x7e0>
  80da3c:	4004d0fa 	srli	r2,r8,3
  80da40:	8822d0fa 	srli	r17,r17,3
  80da44:	4010977a 	slli	r8,r8,29
  80da48:	10c0022c 	andhi	r3,r2,8
  80da4c:	4462b03a 	or	r17,r8,r17
  80da50:	18000826 	beq	r3,zero,80da74 <__adddf3+0x760>
  80da54:	4808d0fa 	srli	r4,r9,3
  80da58:	20c0022c 	andhi	r3,r4,8
  80da5c:	1800051e 	bne	r3,zero,80da74 <__adddf3+0x760>
  80da60:	300cd0fa 	srli	r6,r6,3
  80da64:	4806977a 	slli	r3,r9,29
  80da68:	2005883a 	mov	r2,r4
  80da6c:	3825883a 	mov	r18,r7
  80da70:	19a2b03a 	or	r17,r3,r6
  80da74:	8810d77a 	srli	r8,r17,29
  80da78:	100490fa 	slli	r2,r2,3
  80da7c:	882290fa 	slli	r17,r17,3
  80da80:	0401ffc4 	movi	r16,2047
  80da84:	4090b03a 	or	r8,r8,r2
  80da88:	003e4106 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80da8c:	0141ffc4 	movi	r5,2047
  80da90:	117fc71e 	bne	r2,r5,80d9b0 <__alt_mem_onchip_mem+0xff78d9b0>
  80da94:	4811883a 	mov	r8,r9
  80da98:	3023883a 	mov	r17,r6
  80da9c:	1021883a 	mov	r16,r2
  80daa0:	003e3b06 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80daa4:	10002f26 	beq	r2,zero,80db64 <__adddf3+0x850>
  80daa8:	4984b03a 	or	r2,r9,r6
  80daac:	10001126 	beq	r2,zero,80daf4 <__adddf3+0x7e0>
  80dab0:	4004d0fa 	srli	r2,r8,3
  80dab4:	8822d0fa 	srli	r17,r17,3
  80dab8:	4010977a 	slli	r8,r8,29
  80dabc:	10c0022c 	andhi	r3,r2,8
  80dac0:	4462b03a 	or	r17,r8,r17
  80dac4:	183feb26 	beq	r3,zero,80da74 <__alt_mem_onchip_mem+0xff78da74>
  80dac8:	4808d0fa 	srli	r4,r9,3
  80dacc:	20c0022c 	andhi	r3,r4,8
  80dad0:	183fe81e 	bne	r3,zero,80da74 <__alt_mem_onchip_mem+0xff78da74>
  80dad4:	300cd0fa 	srli	r6,r6,3
  80dad8:	4806977a 	slli	r3,r9,29
  80dadc:	2005883a 	mov	r2,r4
  80dae0:	19a2b03a 	or	r17,r3,r6
  80dae4:	003fe306 	br	80da74 <__alt_mem_onchip_mem+0xff78da74>
  80dae8:	0011883a 	mov	r8,zero
  80daec:	0005883a 	mov	r2,zero
  80daf0:	003e3f06 	br	80d3f0 <__alt_mem_onchip_mem+0xff78d3f0>
  80daf4:	0401ffc4 	movi	r16,2047
  80daf8:	003e2506 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80dafc:	0013883a 	mov	r9,zero
  80db00:	003f8406 	br	80d914 <__alt_mem_onchip_mem+0xff78d914>
  80db04:	0005883a 	mov	r2,zero
  80db08:	0007883a 	mov	r3,zero
  80db0c:	003e8906 	br	80d534 <__alt_mem_onchip_mem+0xff78d534>
  80db10:	197ff804 	addi	r5,r3,-32
  80db14:	01000804 	movi	r4,32
  80db18:	414ad83a 	srl	r5,r8,r5
  80db1c:	19002426 	beq	r3,r4,80dbb0 <__adddf3+0x89c>
  80db20:	01001004 	movi	r4,64
  80db24:	20c7c83a 	sub	r3,r4,r3
  80db28:	40c6983a 	sll	r3,r8,r3
  80db2c:	1c46b03a 	or	r3,r3,r17
  80db30:	1806c03a 	cmpne	r3,r3,zero
  80db34:	28e2b03a 	or	r17,r5,r3
  80db38:	0007883a 	mov	r3,zero
  80db3c:	003f2306 	br	80d7cc <__alt_mem_onchip_mem+0xff78d7cc>
  80db40:	0007883a 	mov	r3,zero
  80db44:	5811883a 	mov	r8,r11
  80db48:	00bfffc4 	movi	r2,-1
  80db4c:	0401ffc4 	movi	r16,2047
  80db50:	003e7806 	br	80d534 <__alt_mem_onchip_mem+0xff78d534>
  80db54:	4462b03a 	or	r17,r8,r17
  80db58:	8822c03a 	cmpne	r17,r17,zero
  80db5c:	0009883a 	mov	r4,zero
  80db60:	003fa006 	br	80d9e4 <__alt_mem_onchip_mem+0xff78d9e4>
  80db64:	4811883a 	mov	r8,r9
  80db68:	3023883a 	mov	r17,r6
  80db6c:	0401ffc4 	movi	r16,2047
  80db70:	003e0706 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80db74:	4811883a 	mov	r8,r9
  80db78:	3023883a 	mov	r17,r6
  80db7c:	003e0406 	br	80d390 <__alt_mem_onchip_mem+0xff78d390>
  80db80:	21fff804 	addi	r7,r4,-32
  80db84:	01400804 	movi	r5,32
  80db88:	41ced83a 	srl	r7,r8,r7
  80db8c:	21400a26 	beq	r4,r5,80dbb8 <__adddf3+0x8a4>
  80db90:	01401004 	movi	r5,64
  80db94:	2909c83a 	sub	r4,r5,r4
  80db98:	4108983a 	sll	r4,r8,r4
  80db9c:	2448b03a 	or	r4,r4,r17
  80dba0:	2008c03a 	cmpne	r4,r4,zero
  80dba4:	3922b03a 	or	r17,r7,r4
  80dba8:	0009883a 	mov	r4,zero
  80dbac:	003f8d06 	br	80d9e4 <__alt_mem_onchip_mem+0xff78d9e4>
  80dbb0:	0007883a 	mov	r3,zero
  80dbb4:	003fdd06 	br	80db2c <__alt_mem_onchip_mem+0xff78db2c>
  80dbb8:	0009883a 	mov	r4,zero
  80dbbc:	003ff706 	br	80db9c <__alt_mem_onchip_mem+0xff78db9c>

0080dbc0 <__divdf3>:
  80dbc0:	defff204 	addi	sp,sp,-56
  80dbc4:	dd400915 	stw	r21,36(sp)
  80dbc8:	282ad53a 	srli	r21,r5,20
  80dbcc:	dd000815 	stw	r20,32(sp)
  80dbd0:	2828d7fa 	srli	r20,r5,31
  80dbd4:	dc000415 	stw	r16,16(sp)
  80dbd8:	04000434 	movhi	r16,16
  80dbdc:	df000c15 	stw	fp,48(sp)
  80dbe0:	843fffc4 	addi	r16,r16,-1
  80dbe4:	dfc00d15 	stw	ra,52(sp)
  80dbe8:	ddc00b15 	stw	r23,44(sp)
  80dbec:	dd800a15 	stw	r22,40(sp)
  80dbf0:	dcc00715 	stw	r19,28(sp)
  80dbf4:	dc800615 	stw	r18,24(sp)
  80dbf8:	dc400515 	stw	r17,20(sp)
  80dbfc:	ad41ffcc 	andi	r21,r21,2047
  80dc00:	2c20703a 	and	r16,r5,r16
  80dc04:	a7003fcc 	andi	fp,r20,255
  80dc08:	a8006126 	beq	r21,zero,80dd90 <__divdf3+0x1d0>
  80dc0c:	0081ffc4 	movi	r2,2047
  80dc10:	2025883a 	mov	r18,r4
  80dc14:	a8803726 	beq	r21,r2,80dcf4 <__divdf3+0x134>
  80dc18:	80800434 	orhi	r2,r16,16
  80dc1c:	100490fa 	slli	r2,r2,3
  80dc20:	2020d77a 	srli	r16,r4,29
  80dc24:	202490fa 	slli	r18,r4,3
  80dc28:	ad7f0044 	addi	r21,r21,-1023
  80dc2c:	80a0b03a 	or	r16,r16,r2
  80dc30:	0027883a 	mov	r19,zero
  80dc34:	0013883a 	mov	r9,zero
  80dc38:	3804d53a 	srli	r2,r7,20
  80dc3c:	382cd7fa 	srli	r22,r7,31
  80dc40:	04400434 	movhi	r17,16
  80dc44:	8c7fffc4 	addi	r17,r17,-1
  80dc48:	1081ffcc 	andi	r2,r2,2047
  80dc4c:	3011883a 	mov	r8,r6
  80dc50:	3c62703a 	and	r17,r7,r17
  80dc54:	b5c03fcc 	andi	r23,r22,255
  80dc58:	10006c26 	beq	r2,zero,80de0c <__divdf3+0x24c>
  80dc5c:	00c1ffc4 	movi	r3,2047
  80dc60:	10c06426 	beq	r2,r3,80ddf4 <__divdf3+0x234>
  80dc64:	88c00434 	orhi	r3,r17,16
  80dc68:	180690fa 	slli	r3,r3,3
  80dc6c:	3022d77a 	srli	r17,r6,29
  80dc70:	301090fa 	slli	r8,r6,3
  80dc74:	10bf0044 	addi	r2,r2,-1023
  80dc78:	88e2b03a 	or	r17,r17,r3
  80dc7c:	000f883a 	mov	r7,zero
  80dc80:	a58cf03a 	xor	r6,r20,r22
  80dc84:	3cc8b03a 	or	r4,r7,r19
  80dc88:	a8abc83a 	sub	r21,r21,r2
  80dc8c:	008003c4 	movi	r2,15
  80dc90:	3007883a 	mov	r3,r6
  80dc94:	34c03fcc 	andi	r19,r6,255
  80dc98:	11009036 	bltu	r2,r4,80dedc <__divdf3+0x31c>
  80dc9c:	200890ba 	slli	r4,r4,2
  80dca0:	00802074 	movhi	r2,129
  80dca4:	10b72d04 	addi	r2,r2,-9036
  80dca8:	2089883a 	add	r4,r4,r2
  80dcac:	20800017 	ldw	r2,0(r4)
  80dcb0:	1000683a 	jmp	r2
  80dcb4:	0080dedc 	xori	r2,zero,891
  80dcb8:	0080dd2c 	andhi	r2,zero,884
  80dcbc:	0080decc 	andi	r2,zero,891
  80dcc0:	0080dd20 	cmpeqi	r2,zero,884
  80dcc4:	0080decc 	andi	r2,zero,891
  80dcc8:	0080dea0 	cmpeqi	r2,zero,890
  80dccc:	0080decc 	andi	r2,zero,891
  80dcd0:	0080dd20 	cmpeqi	r2,zero,884
  80dcd4:	0080dd2c 	andhi	r2,zero,884
  80dcd8:	0080dd2c 	andhi	r2,zero,884
  80dcdc:	0080dea0 	cmpeqi	r2,zero,890
  80dce0:	0080dd20 	cmpeqi	r2,zero,884
  80dce4:	0080dd10 	cmplti	r2,zero,884
  80dce8:	0080dd10 	cmplti	r2,zero,884
  80dcec:	0080dd10 	cmplti	r2,zero,884
  80dcf0:	0080e1c0 	call	80e1c <__alt_mem_sdram-0x77f1e4>
  80dcf4:	2404b03a 	or	r2,r4,r16
  80dcf8:	1000661e 	bne	r2,zero,80de94 <__divdf3+0x2d4>
  80dcfc:	04c00204 	movi	r19,8
  80dd00:	0021883a 	mov	r16,zero
  80dd04:	0025883a 	mov	r18,zero
  80dd08:	02400084 	movi	r9,2
  80dd0c:	003fca06 	br	80dc38 <__alt_mem_onchip_mem+0xff78dc38>
  80dd10:	8023883a 	mov	r17,r16
  80dd14:	9011883a 	mov	r8,r18
  80dd18:	e02f883a 	mov	r23,fp
  80dd1c:	480f883a 	mov	r7,r9
  80dd20:	00800084 	movi	r2,2
  80dd24:	3881311e 	bne	r7,r2,80e1ec <__divdf3+0x62c>
  80dd28:	b827883a 	mov	r19,r23
  80dd2c:	98c0004c 	andi	r3,r19,1
  80dd30:	0081ffc4 	movi	r2,2047
  80dd34:	000b883a 	mov	r5,zero
  80dd38:	0025883a 	mov	r18,zero
  80dd3c:	1004953a 	slli	r2,r2,20
  80dd40:	18c03fcc 	andi	r3,r3,255
  80dd44:	04400434 	movhi	r17,16
  80dd48:	8c7fffc4 	addi	r17,r17,-1
  80dd4c:	180697fa 	slli	r3,r3,31
  80dd50:	2c4a703a 	and	r5,r5,r17
  80dd54:	288ab03a 	or	r5,r5,r2
  80dd58:	28c6b03a 	or	r3,r5,r3
  80dd5c:	9005883a 	mov	r2,r18
  80dd60:	dfc00d17 	ldw	ra,52(sp)
  80dd64:	df000c17 	ldw	fp,48(sp)
  80dd68:	ddc00b17 	ldw	r23,44(sp)
  80dd6c:	dd800a17 	ldw	r22,40(sp)
  80dd70:	dd400917 	ldw	r21,36(sp)
  80dd74:	dd000817 	ldw	r20,32(sp)
  80dd78:	dcc00717 	ldw	r19,28(sp)
  80dd7c:	dc800617 	ldw	r18,24(sp)
  80dd80:	dc400517 	ldw	r17,20(sp)
  80dd84:	dc000417 	ldw	r16,16(sp)
  80dd88:	dec00e04 	addi	sp,sp,56
  80dd8c:	f800283a 	ret
  80dd90:	2404b03a 	or	r2,r4,r16
  80dd94:	2027883a 	mov	r19,r4
  80dd98:	10003926 	beq	r2,zero,80de80 <__divdf3+0x2c0>
  80dd9c:	80012e26 	beq	r16,zero,80e258 <__divdf3+0x698>
  80dda0:	8009883a 	mov	r4,r16
  80dda4:	d9800315 	stw	r6,12(sp)
  80dda8:	d9c00215 	stw	r7,8(sp)
  80ddac:	080f9180 	call	80f918 <__clzsi2>
  80ddb0:	d9800317 	ldw	r6,12(sp)
  80ddb4:	d9c00217 	ldw	r7,8(sp)
  80ddb8:	113ffd44 	addi	r4,r2,-11
  80ddbc:	00c00704 	movi	r3,28
  80ddc0:	19012116 	blt	r3,r4,80e248 <__divdf3+0x688>
  80ddc4:	00c00744 	movi	r3,29
  80ddc8:	147ffe04 	addi	r17,r2,-8
  80ddcc:	1907c83a 	sub	r3,r3,r4
  80ddd0:	8460983a 	sll	r16,r16,r17
  80ddd4:	98c6d83a 	srl	r3,r19,r3
  80ddd8:	9c64983a 	sll	r18,r19,r17
  80dddc:	1c20b03a 	or	r16,r3,r16
  80dde0:	1080fcc4 	addi	r2,r2,1011
  80dde4:	00abc83a 	sub	r21,zero,r2
  80dde8:	0027883a 	mov	r19,zero
  80ddec:	0013883a 	mov	r9,zero
  80ddf0:	003f9106 	br	80dc38 <__alt_mem_onchip_mem+0xff78dc38>
  80ddf4:	3446b03a 	or	r3,r6,r17
  80ddf8:	18001f1e 	bne	r3,zero,80de78 <__divdf3+0x2b8>
  80ddfc:	0023883a 	mov	r17,zero
  80de00:	0011883a 	mov	r8,zero
  80de04:	01c00084 	movi	r7,2
  80de08:	003f9d06 	br	80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80de0c:	3446b03a 	or	r3,r6,r17
  80de10:	18001526 	beq	r3,zero,80de68 <__divdf3+0x2a8>
  80de14:	88011b26 	beq	r17,zero,80e284 <__divdf3+0x6c4>
  80de18:	8809883a 	mov	r4,r17
  80de1c:	d9800315 	stw	r6,12(sp)
  80de20:	da400115 	stw	r9,4(sp)
  80de24:	080f9180 	call	80f918 <__clzsi2>
  80de28:	d9800317 	ldw	r6,12(sp)
  80de2c:	da400117 	ldw	r9,4(sp)
  80de30:	113ffd44 	addi	r4,r2,-11
  80de34:	00c00704 	movi	r3,28
  80de38:	19010e16 	blt	r3,r4,80e274 <__divdf3+0x6b4>
  80de3c:	00c00744 	movi	r3,29
  80de40:	123ffe04 	addi	r8,r2,-8
  80de44:	1907c83a 	sub	r3,r3,r4
  80de48:	8a22983a 	sll	r17,r17,r8
  80de4c:	30c6d83a 	srl	r3,r6,r3
  80de50:	3210983a 	sll	r8,r6,r8
  80de54:	1c62b03a 	or	r17,r3,r17
  80de58:	1080fcc4 	addi	r2,r2,1011
  80de5c:	0085c83a 	sub	r2,zero,r2
  80de60:	000f883a 	mov	r7,zero
  80de64:	003f8606 	br	80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80de68:	0023883a 	mov	r17,zero
  80de6c:	0011883a 	mov	r8,zero
  80de70:	01c00044 	movi	r7,1
  80de74:	003f8206 	br	80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80de78:	01c000c4 	movi	r7,3
  80de7c:	003f8006 	br	80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80de80:	04c00104 	movi	r19,4
  80de84:	0021883a 	mov	r16,zero
  80de88:	0025883a 	mov	r18,zero
  80de8c:	02400044 	movi	r9,1
  80de90:	003f6906 	br	80dc38 <__alt_mem_onchip_mem+0xff78dc38>
  80de94:	04c00304 	movi	r19,12
  80de98:	024000c4 	movi	r9,3
  80de9c:	003f6606 	br	80dc38 <__alt_mem_onchip_mem+0xff78dc38>
  80dea0:	01400434 	movhi	r5,16
  80dea4:	0007883a 	mov	r3,zero
  80dea8:	297fffc4 	addi	r5,r5,-1
  80deac:	04bfffc4 	movi	r18,-1
  80deb0:	0081ffc4 	movi	r2,2047
  80deb4:	003fa106 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80deb8:	00c00044 	movi	r3,1
  80debc:	1887c83a 	sub	r3,r3,r2
  80dec0:	01000e04 	movi	r4,56
  80dec4:	20c1210e 	bge	r4,r3,80e34c <__divdf3+0x78c>
  80dec8:	98c0004c 	andi	r3,r19,1
  80decc:	0005883a 	mov	r2,zero
  80ded0:	000b883a 	mov	r5,zero
  80ded4:	0025883a 	mov	r18,zero
  80ded8:	003f9806 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80dedc:	8c00fd36 	bltu	r17,r16,80e2d4 <__divdf3+0x714>
  80dee0:	8440fb26 	beq	r16,r17,80e2d0 <__divdf3+0x710>
  80dee4:	8007883a 	mov	r3,r16
  80dee8:	ad7fffc4 	addi	r21,r21,-1
  80deec:	0021883a 	mov	r16,zero
  80def0:	4004d63a 	srli	r2,r8,24
  80def4:	8822923a 	slli	r17,r17,8
  80def8:	1809883a 	mov	r4,r3
  80defc:	402c923a 	slli	r22,r8,8
  80df00:	88b8b03a 	or	fp,r17,r2
  80df04:	e028d43a 	srli	r20,fp,16
  80df08:	d8c00015 	stw	r3,0(sp)
  80df0c:	e5ffffcc 	andi	r23,fp,65535
  80df10:	a00b883a 	mov	r5,r20
  80df14:	08031540 	call	803154 <__udivsi3>
  80df18:	d8c00017 	ldw	r3,0(sp)
  80df1c:	a00b883a 	mov	r5,r20
  80df20:	d8800315 	stw	r2,12(sp)
  80df24:	1809883a 	mov	r4,r3
  80df28:	08031b80 	call	8031b8 <__umodsi3>
  80df2c:	d9800317 	ldw	r6,12(sp)
  80df30:	1006943a 	slli	r3,r2,16
  80df34:	9004d43a 	srli	r2,r18,16
  80df38:	b9a3383a 	mul	r17,r23,r6
  80df3c:	10c4b03a 	or	r2,r2,r3
  80df40:	1440062e 	bgeu	r2,r17,80df5c <__divdf3+0x39c>
  80df44:	1705883a 	add	r2,r2,fp
  80df48:	30ffffc4 	addi	r3,r6,-1
  80df4c:	1700ee36 	bltu	r2,fp,80e308 <__divdf3+0x748>
  80df50:	1440ed2e 	bgeu	r2,r17,80e308 <__divdf3+0x748>
  80df54:	31bfff84 	addi	r6,r6,-2
  80df58:	1705883a 	add	r2,r2,fp
  80df5c:	1463c83a 	sub	r17,r2,r17
  80df60:	a00b883a 	mov	r5,r20
  80df64:	8809883a 	mov	r4,r17
  80df68:	d9800315 	stw	r6,12(sp)
  80df6c:	08031540 	call	803154 <__udivsi3>
  80df70:	a00b883a 	mov	r5,r20
  80df74:	8809883a 	mov	r4,r17
  80df78:	d8800215 	stw	r2,8(sp)
  80df7c:	08031b80 	call	8031b8 <__umodsi3>
  80df80:	d9c00217 	ldw	r7,8(sp)
  80df84:	1004943a 	slli	r2,r2,16
  80df88:	94bfffcc 	andi	r18,r18,65535
  80df8c:	b9d1383a 	mul	r8,r23,r7
  80df90:	90a4b03a 	or	r18,r18,r2
  80df94:	d9800317 	ldw	r6,12(sp)
  80df98:	9200062e 	bgeu	r18,r8,80dfb4 <__divdf3+0x3f4>
  80df9c:	9725883a 	add	r18,r18,fp
  80dfa0:	38bfffc4 	addi	r2,r7,-1
  80dfa4:	9700d636 	bltu	r18,fp,80e300 <__divdf3+0x740>
  80dfa8:	9200d52e 	bgeu	r18,r8,80e300 <__divdf3+0x740>
  80dfac:	39ffff84 	addi	r7,r7,-2
  80dfb0:	9725883a 	add	r18,r18,fp
  80dfb4:	3004943a 	slli	r2,r6,16
  80dfb8:	b012d43a 	srli	r9,r22,16
  80dfbc:	b1bfffcc 	andi	r6,r22,65535
  80dfc0:	11e2b03a 	or	r17,r2,r7
  80dfc4:	8806d43a 	srli	r3,r17,16
  80dfc8:	893fffcc 	andi	r4,r17,65535
  80dfcc:	218b383a 	mul	r5,r4,r6
  80dfd0:	30c5383a 	mul	r2,r6,r3
  80dfd4:	2249383a 	mul	r4,r4,r9
  80dfd8:	280ed43a 	srli	r7,r5,16
  80dfdc:	9225c83a 	sub	r18,r18,r8
  80dfe0:	2089883a 	add	r4,r4,r2
  80dfe4:	3909883a 	add	r4,r7,r4
  80dfe8:	1a47383a 	mul	r3,r3,r9
  80dfec:	2080022e 	bgeu	r4,r2,80dff8 <__divdf3+0x438>
  80dff0:	00800074 	movhi	r2,1
  80dff4:	1887883a 	add	r3,r3,r2
  80dff8:	2004d43a 	srli	r2,r4,16
  80dffc:	2008943a 	slli	r4,r4,16
  80e000:	297fffcc 	andi	r5,r5,65535
  80e004:	10c7883a 	add	r3,r2,r3
  80e008:	2149883a 	add	r4,r4,r5
  80e00c:	90c0a536 	bltu	r18,r3,80e2a4 <__divdf3+0x6e4>
  80e010:	90c0bf26 	beq	r18,r3,80e310 <__divdf3+0x750>
  80e014:	90c7c83a 	sub	r3,r18,r3
  80e018:	810fc83a 	sub	r7,r16,r4
  80e01c:	81e5803a 	cmpltu	r18,r16,r7
  80e020:	1ca5c83a 	sub	r18,r3,r18
  80e024:	e480c126 	beq	fp,r18,80e32c <__divdf3+0x76c>
  80e028:	a00b883a 	mov	r5,r20
  80e02c:	9009883a 	mov	r4,r18
  80e030:	d9800315 	stw	r6,12(sp)
  80e034:	d9c00215 	stw	r7,8(sp)
  80e038:	da400115 	stw	r9,4(sp)
  80e03c:	08031540 	call	803154 <__udivsi3>
  80e040:	a00b883a 	mov	r5,r20
  80e044:	9009883a 	mov	r4,r18
  80e048:	d8800015 	stw	r2,0(sp)
  80e04c:	08031b80 	call	8031b8 <__umodsi3>
  80e050:	d9c00217 	ldw	r7,8(sp)
  80e054:	da000017 	ldw	r8,0(sp)
  80e058:	1006943a 	slli	r3,r2,16
  80e05c:	3804d43a 	srli	r2,r7,16
  80e060:	ba21383a 	mul	r16,r23,r8
  80e064:	d9800317 	ldw	r6,12(sp)
  80e068:	10c4b03a 	or	r2,r2,r3
  80e06c:	da400117 	ldw	r9,4(sp)
  80e070:	1400062e 	bgeu	r2,r16,80e08c <__divdf3+0x4cc>
  80e074:	1705883a 	add	r2,r2,fp
  80e078:	40ffffc4 	addi	r3,r8,-1
  80e07c:	1700ad36 	bltu	r2,fp,80e334 <__divdf3+0x774>
  80e080:	1400ac2e 	bgeu	r2,r16,80e334 <__divdf3+0x774>
  80e084:	423fff84 	addi	r8,r8,-2
  80e088:	1705883a 	add	r2,r2,fp
  80e08c:	1421c83a 	sub	r16,r2,r16
  80e090:	a00b883a 	mov	r5,r20
  80e094:	8009883a 	mov	r4,r16
  80e098:	d9800315 	stw	r6,12(sp)
  80e09c:	d9c00215 	stw	r7,8(sp)
  80e0a0:	da000015 	stw	r8,0(sp)
  80e0a4:	da400115 	stw	r9,4(sp)
  80e0a8:	08031540 	call	803154 <__udivsi3>
  80e0ac:	8009883a 	mov	r4,r16
  80e0b0:	a00b883a 	mov	r5,r20
  80e0b4:	1025883a 	mov	r18,r2
  80e0b8:	08031b80 	call	8031b8 <__umodsi3>
  80e0bc:	d9c00217 	ldw	r7,8(sp)
  80e0c0:	1004943a 	slli	r2,r2,16
  80e0c4:	bcaf383a 	mul	r23,r23,r18
  80e0c8:	393fffcc 	andi	r4,r7,65535
  80e0cc:	2088b03a 	or	r4,r4,r2
  80e0d0:	d9800317 	ldw	r6,12(sp)
  80e0d4:	da000017 	ldw	r8,0(sp)
  80e0d8:	da400117 	ldw	r9,4(sp)
  80e0dc:	25c0062e 	bgeu	r4,r23,80e0f8 <__divdf3+0x538>
  80e0e0:	2709883a 	add	r4,r4,fp
  80e0e4:	90bfffc4 	addi	r2,r18,-1
  80e0e8:	27009436 	bltu	r4,fp,80e33c <__divdf3+0x77c>
  80e0ec:	25c0932e 	bgeu	r4,r23,80e33c <__divdf3+0x77c>
  80e0f0:	94bfff84 	addi	r18,r18,-2
  80e0f4:	2709883a 	add	r4,r4,fp
  80e0f8:	4004943a 	slli	r2,r8,16
  80e0fc:	25efc83a 	sub	r23,r4,r23
  80e100:	1490b03a 	or	r8,r2,r18
  80e104:	4008d43a 	srli	r4,r8,16
  80e108:	40ffffcc 	andi	r3,r8,65535
  80e10c:	30c5383a 	mul	r2,r6,r3
  80e110:	1a47383a 	mul	r3,r3,r9
  80e114:	310d383a 	mul	r6,r6,r4
  80e118:	100ad43a 	srli	r5,r2,16
  80e11c:	4913383a 	mul	r9,r9,r4
  80e120:	1987883a 	add	r3,r3,r6
  80e124:	28c7883a 	add	r3,r5,r3
  80e128:	1980022e 	bgeu	r3,r6,80e134 <__divdf3+0x574>
  80e12c:	01000074 	movhi	r4,1
  80e130:	4913883a 	add	r9,r9,r4
  80e134:	1808d43a 	srli	r4,r3,16
  80e138:	1806943a 	slli	r3,r3,16
  80e13c:	10bfffcc 	andi	r2,r2,65535
  80e140:	2253883a 	add	r9,r4,r9
  80e144:	1887883a 	add	r3,r3,r2
  80e148:	ba403836 	bltu	r23,r9,80e22c <__divdf3+0x66c>
  80e14c:	ba403626 	beq	r23,r9,80e228 <__divdf3+0x668>
  80e150:	42000054 	ori	r8,r8,1
  80e154:	a880ffc4 	addi	r2,r21,1023
  80e158:	00bf570e 	bge	zero,r2,80deb8 <__alt_mem_onchip_mem+0xff78deb8>
  80e15c:	40c001cc 	andi	r3,r8,7
  80e160:	18000726 	beq	r3,zero,80e180 <__divdf3+0x5c0>
  80e164:	40c003cc 	andi	r3,r8,15
  80e168:	01000104 	movi	r4,4
  80e16c:	19000426 	beq	r3,r4,80e180 <__divdf3+0x5c0>
  80e170:	4107883a 	add	r3,r8,r4
  80e174:	1a11803a 	cmpltu	r8,r3,r8
  80e178:	8a23883a 	add	r17,r17,r8
  80e17c:	1811883a 	mov	r8,r3
  80e180:	88c0402c 	andhi	r3,r17,256
  80e184:	18000426 	beq	r3,zero,80e198 <__divdf3+0x5d8>
  80e188:	00ffc034 	movhi	r3,65280
  80e18c:	18ffffc4 	addi	r3,r3,-1
  80e190:	a8810004 	addi	r2,r21,1024
  80e194:	88e2703a 	and	r17,r17,r3
  80e198:	00c1ff84 	movi	r3,2046
  80e19c:	18bee316 	blt	r3,r2,80dd2c <__alt_mem_onchip_mem+0xff78dd2c>
  80e1a0:	8824977a 	slli	r18,r17,29
  80e1a4:	4010d0fa 	srli	r8,r8,3
  80e1a8:	8822927a 	slli	r17,r17,9
  80e1ac:	1081ffcc 	andi	r2,r2,2047
  80e1b0:	9224b03a 	or	r18,r18,r8
  80e1b4:	880ad33a 	srli	r5,r17,12
  80e1b8:	98c0004c 	andi	r3,r19,1
  80e1bc:	003edf06 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80e1c0:	8080022c 	andhi	r2,r16,8
  80e1c4:	10001226 	beq	r2,zero,80e210 <__divdf3+0x650>
  80e1c8:	8880022c 	andhi	r2,r17,8
  80e1cc:	1000101e 	bne	r2,zero,80e210 <__divdf3+0x650>
  80e1d0:	00800434 	movhi	r2,16
  80e1d4:	89400234 	orhi	r5,r17,8
  80e1d8:	10bfffc4 	addi	r2,r2,-1
  80e1dc:	b007883a 	mov	r3,r22
  80e1e0:	288a703a 	and	r5,r5,r2
  80e1e4:	4025883a 	mov	r18,r8
  80e1e8:	003f3106 	br	80deb0 <__alt_mem_onchip_mem+0xff78deb0>
  80e1ec:	008000c4 	movi	r2,3
  80e1f0:	3880a626 	beq	r7,r2,80e48c <__divdf3+0x8cc>
  80e1f4:	00800044 	movi	r2,1
  80e1f8:	3880521e 	bne	r7,r2,80e344 <__divdf3+0x784>
  80e1fc:	b807883a 	mov	r3,r23
  80e200:	0005883a 	mov	r2,zero
  80e204:	000b883a 	mov	r5,zero
  80e208:	0025883a 	mov	r18,zero
  80e20c:	003ecb06 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80e210:	00800434 	movhi	r2,16
  80e214:	81400234 	orhi	r5,r16,8
  80e218:	10bfffc4 	addi	r2,r2,-1
  80e21c:	a007883a 	mov	r3,r20
  80e220:	288a703a 	and	r5,r5,r2
  80e224:	003f2206 	br	80deb0 <__alt_mem_onchip_mem+0xff78deb0>
  80e228:	183fca26 	beq	r3,zero,80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e22c:	e5ef883a 	add	r23,fp,r23
  80e230:	40bfffc4 	addi	r2,r8,-1
  80e234:	bf00392e 	bgeu	r23,fp,80e31c <__divdf3+0x75c>
  80e238:	1011883a 	mov	r8,r2
  80e23c:	ba7fc41e 	bne	r23,r9,80e150 <__alt_mem_onchip_mem+0xff78e150>
  80e240:	b0ffc31e 	bne	r22,r3,80e150 <__alt_mem_onchip_mem+0xff78e150>
  80e244:	003fc306 	br	80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e248:	143ff604 	addi	r16,r2,-40
  80e24c:	9c20983a 	sll	r16,r19,r16
  80e250:	0025883a 	mov	r18,zero
  80e254:	003ee206 	br	80dde0 <__alt_mem_onchip_mem+0xff78dde0>
  80e258:	d9800315 	stw	r6,12(sp)
  80e25c:	d9c00215 	stw	r7,8(sp)
  80e260:	080f9180 	call	80f918 <__clzsi2>
  80e264:	10800804 	addi	r2,r2,32
  80e268:	d9c00217 	ldw	r7,8(sp)
  80e26c:	d9800317 	ldw	r6,12(sp)
  80e270:	003ed106 	br	80ddb8 <__alt_mem_onchip_mem+0xff78ddb8>
  80e274:	147ff604 	addi	r17,r2,-40
  80e278:	3462983a 	sll	r17,r6,r17
  80e27c:	0011883a 	mov	r8,zero
  80e280:	003ef506 	br	80de58 <__alt_mem_onchip_mem+0xff78de58>
  80e284:	3009883a 	mov	r4,r6
  80e288:	d9800315 	stw	r6,12(sp)
  80e28c:	da400115 	stw	r9,4(sp)
  80e290:	080f9180 	call	80f918 <__clzsi2>
  80e294:	10800804 	addi	r2,r2,32
  80e298:	da400117 	ldw	r9,4(sp)
  80e29c:	d9800317 	ldw	r6,12(sp)
  80e2a0:	003ee306 	br	80de30 <__alt_mem_onchip_mem+0xff78de30>
  80e2a4:	85a1883a 	add	r16,r16,r22
  80e2a8:	8585803a 	cmpltu	r2,r16,r22
  80e2ac:	1705883a 	add	r2,r2,fp
  80e2b0:	14a5883a 	add	r18,r2,r18
  80e2b4:	88bfffc4 	addi	r2,r17,-1
  80e2b8:	e4800c2e 	bgeu	fp,r18,80e2ec <__divdf3+0x72c>
  80e2bc:	90c03e36 	bltu	r18,r3,80e3b8 <__divdf3+0x7f8>
  80e2c0:	1c806926 	beq	r3,r18,80e468 <__divdf3+0x8a8>
  80e2c4:	90c7c83a 	sub	r3,r18,r3
  80e2c8:	1023883a 	mov	r17,r2
  80e2cc:	003f5206 	br	80e018 <__alt_mem_onchip_mem+0xff78e018>
  80e2d0:	923f0436 	bltu	r18,r8,80dee4 <__alt_mem_onchip_mem+0xff78dee4>
  80e2d4:	800897fa 	slli	r4,r16,31
  80e2d8:	9004d07a 	srli	r2,r18,1
  80e2dc:	8006d07a 	srli	r3,r16,1
  80e2e0:	902097fa 	slli	r16,r18,31
  80e2e4:	20a4b03a 	or	r18,r4,r2
  80e2e8:	003f0106 	br	80def0 <__alt_mem_onchip_mem+0xff78def0>
  80e2ec:	e4bff51e 	bne	fp,r18,80e2c4 <__alt_mem_onchip_mem+0xff78e2c4>
  80e2f0:	85bff22e 	bgeu	r16,r22,80e2bc <__alt_mem_onchip_mem+0xff78e2bc>
  80e2f4:	e0c7c83a 	sub	r3,fp,r3
  80e2f8:	1023883a 	mov	r17,r2
  80e2fc:	003f4606 	br	80e018 <__alt_mem_onchip_mem+0xff78e018>
  80e300:	100f883a 	mov	r7,r2
  80e304:	003f2b06 	br	80dfb4 <__alt_mem_onchip_mem+0xff78dfb4>
  80e308:	180d883a 	mov	r6,r3
  80e30c:	003f1306 	br	80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80e310:	813fe436 	bltu	r16,r4,80e2a4 <__alt_mem_onchip_mem+0xff78e2a4>
  80e314:	0007883a 	mov	r3,zero
  80e318:	003f3f06 	br	80e018 <__alt_mem_onchip_mem+0xff78e018>
  80e31c:	ba402c36 	bltu	r23,r9,80e3d0 <__divdf3+0x810>
  80e320:	4dc05426 	beq	r9,r23,80e474 <__divdf3+0x8b4>
  80e324:	1011883a 	mov	r8,r2
  80e328:	003f8906 	br	80e150 <__alt_mem_onchip_mem+0xff78e150>
  80e32c:	023fffc4 	movi	r8,-1
  80e330:	003f8806 	br	80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e334:	1811883a 	mov	r8,r3
  80e338:	003f5406 	br	80e08c <__alt_mem_onchip_mem+0xff78e08c>
  80e33c:	1025883a 	mov	r18,r2
  80e340:	003f6d06 	br	80e0f8 <__alt_mem_onchip_mem+0xff78e0f8>
  80e344:	b827883a 	mov	r19,r23
  80e348:	003f8206 	br	80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e34c:	010007c4 	movi	r4,31
  80e350:	20c02616 	blt	r4,r3,80e3ec <__divdf3+0x82c>
  80e354:	00800804 	movi	r2,32
  80e358:	10c5c83a 	sub	r2,r2,r3
  80e35c:	888a983a 	sll	r5,r17,r2
  80e360:	40c8d83a 	srl	r4,r8,r3
  80e364:	4084983a 	sll	r2,r8,r2
  80e368:	88e2d83a 	srl	r17,r17,r3
  80e36c:	2906b03a 	or	r3,r5,r4
  80e370:	1004c03a 	cmpne	r2,r2,zero
  80e374:	1886b03a 	or	r3,r3,r2
  80e378:	188001cc 	andi	r2,r3,7
  80e37c:	10000726 	beq	r2,zero,80e39c <__divdf3+0x7dc>
  80e380:	188003cc 	andi	r2,r3,15
  80e384:	01000104 	movi	r4,4
  80e388:	11000426 	beq	r2,r4,80e39c <__divdf3+0x7dc>
  80e38c:	1805883a 	mov	r2,r3
  80e390:	10c00104 	addi	r3,r2,4
  80e394:	1885803a 	cmpltu	r2,r3,r2
  80e398:	88a3883a 	add	r17,r17,r2
  80e39c:	8880202c 	andhi	r2,r17,128
  80e3a0:	10002726 	beq	r2,zero,80e440 <__divdf3+0x880>
  80e3a4:	98c0004c 	andi	r3,r19,1
  80e3a8:	00800044 	movi	r2,1
  80e3ac:	000b883a 	mov	r5,zero
  80e3b0:	0025883a 	mov	r18,zero
  80e3b4:	003e6106 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80e3b8:	85a1883a 	add	r16,r16,r22
  80e3bc:	8585803a 	cmpltu	r2,r16,r22
  80e3c0:	1705883a 	add	r2,r2,fp
  80e3c4:	14a5883a 	add	r18,r2,r18
  80e3c8:	8c7fff84 	addi	r17,r17,-2
  80e3cc:	003f1106 	br	80e014 <__alt_mem_onchip_mem+0xff78e014>
  80e3d0:	b589883a 	add	r4,r22,r22
  80e3d4:	25ad803a 	cmpltu	r22,r4,r22
  80e3d8:	b739883a 	add	fp,r22,fp
  80e3dc:	40bfff84 	addi	r2,r8,-2
  80e3e0:	bf2f883a 	add	r23,r23,fp
  80e3e4:	202d883a 	mov	r22,r4
  80e3e8:	003f9306 	br	80e238 <__alt_mem_onchip_mem+0xff78e238>
  80e3ec:	013ff844 	movi	r4,-31
  80e3f0:	2085c83a 	sub	r2,r4,r2
  80e3f4:	8888d83a 	srl	r4,r17,r2
  80e3f8:	00800804 	movi	r2,32
  80e3fc:	18802126 	beq	r3,r2,80e484 <__divdf3+0x8c4>
  80e400:	00801004 	movi	r2,64
  80e404:	10c5c83a 	sub	r2,r2,r3
  80e408:	8884983a 	sll	r2,r17,r2
  80e40c:	1204b03a 	or	r2,r2,r8
  80e410:	1004c03a 	cmpne	r2,r2,zero
  80e414:	2084b03a 	or	r2,r4,r2
  80e418:	144001cc 	andi	r17,r2,7
  80e41c:	88000d1e 	bne	r17,zero,80e454 <__divdf3+0x894>
  80e420:	000b883a 	mov	r5,zero
  80e424:	1024d0fa 	srli	r18,r2,3
  80e428:	98c0004c 	andi	r3,r19,1
  80e42c:	0005883a 	mov	r2,zero
  80e430:	9464b03a 	or	r18,r18,r17
  80e434:	003e4106 	br	80dd3c <__alt_mem_onchip_mem+0xff78dd3c>
  80e438:	1007883a 	mov	r3,r2
  80e43c:	0023883a 	mov	r17,zero
  80e440:	880a927a 	slli	r5,r17,9
  80e444:	1805883a 	mov	r2,r3
  80e448:	8822977a 	slli	r17,r17,29
  80e44c:	280ad33a 	srli	r5,r5,12
  80e450:	003ff406 	br	80e424 <__alt_mem_onchip_mem+0xff78e424>
  80e454:	10c003cc 	andi	r3,r2,15
  80e458:	01000104 	movi	r4,4
  80e45c:	193ff626 	beq	r3,r4,80e438 <__alt_mem_onchip_mem+0xff78e438>
  80e460:	0023883a 	mov	r17,zero
  80e464:	003fca06 	br	80e390 <__alt_mem_onchip_mem+0xff78e390>
  80e468:	813fd336 	bltu	r16,r4,80e3b8 <__alt_mem_onchip_mem+0xff78e3b8>
  80e46c:	1023883a 	mov	r17,r2
  80e470:	003fa806 	br	80e314 <__alt_mem_onchip_mem+0xff78e314>
  80e474:	b0ffd636 	bltu	r22,r3,80e3d0 <__alt_mem_onchip_mem+0xff78e3d0>
  80e478:	1011883a 	mov	r8,r2
  80e47c:	b0ff341e 	bne	r22,r3,80e150 <__alt_mem_onchip_mem+0xff78e150>
  80e480:	003f3406 	br	80e154 <__alt_mem_onchip_mem+0xff78e154>
  80e484:	0005883a 	mov	r2,zero
  80e488:	003fe006 	br	80e40c <__alt_mem_onchip_mem+0xff78e40c>
  80e48c:	00800434 	movhi	r2,16
  80e490:	89400234 	orhi	r5,r17,8
  80e494:	10bfffc4 	addi	r2,r2,-1
  80e498:	b807883a 	mov	r3,r23
  80e49c:	288a703a 	and	r5,r5,r2
  80e4a0:	4025883a 	mov	r18,r8
  80e4a4:	003e8206 	br	80deb0 <__alt_mem_onchip_mem+0xff78deb0>

0080e4a8 <__eqdf2>:
  80e4a8:	2804d53a 	srli	r2,r5,20
  80e4ac:	3806d53a 	srli	r3,r7,20
  80e4b0:	02000434 	movhi	r8,16
  80e4b4:	423fffc4 	addi	r8,r8,-1
  80e4b8:	1081ffcc 	andi	r2,r2,2047
  80e4bc:	0281ffc4 	movi	r10,2047
  80e4c0:	2a12703a 	and	r9,r5,r8
  80e4c4:	18c1ffcc 	andi	r3,r3,2047
  80e4c8:	3a10703a 	and	r8,r7,r8
  80e4cc:	280ad7fa 	srli	r5,r5,31
  80e4d0:	380ed7fa 	srli	r7,r7,31
  80e4d4:	12801026 	beq	r2,r10,80e518 <__eqdf2+0x70>
  80e4d8:	0281ffc4 	movi	r10,2047
  80e4dc:	1a800a26 	beq	r3,r10,80e508 <__eqdf2+0x60>
  80e4e0:	10c00226 	beq	r2,r3,80e4ec <__eqdf2+0x44>
  80e4e4:	00800044 	movi	r2,1
  80e4e8:	f800283a 	ret
  80e4ec:	4a3ffd1e 	bne	r9,r8,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e4f0:	21bffc1e 	bne	r4,r6,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e4f4:	29c00c26 	beq	r5,r7,80e528 <__eqdf2+0x80>
  80e4f8:	103ffa1e 	bne	r2,zero,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e4fc:	2244b03a 	or	r2,r4,r9
  80e500:	1004c03a 	cmpne	r2,r2,zero
  80e504:	f800283a 	ret
  80e508:	3214b03a 	or	r10,r6,r8
  80e50c:	503ff426 	beq	r10,zero,80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80e510:	00800044 	movi	r2,1
  80e514:	f800283a 	ret
  80e518:	2254b03a 	or	r10,r4,r9
  80e51c:	503fee26 	beq	r10,zero,80e4d8 <__alt_mem_onchip_mem+0xff78e4d8>
  80e520:	00800044 	movi	r2,1
  80e524:	f800283a 	ret
  80e528:	0005883a 	mov	r2,zero
  80e52c:	f800283a 	ret

0080e530 <__gedf2>:
  80e530:	2804d53a 	srli	r2,r5,20
  80e534:	3806d53a 	srli	r3,r7,20
  80e538:	02000434 	movhi	r8,16
  80e53c:	423fffc4 	addi	r8,r8,-1
  80e540:	1081ffcc 	andi	r2,r2,2047
  80e544:	0241ffc4 	movi	r9,2047
  80e548:	2a14703a 	and	r10,r5,r8
  80e54c:	18c1ffcc 	andi	r3,r3,2047
  80e550:	3a10703a 	and	r8,r7,r8
  80e554:	280ad7fa 	srli	r5,r5,31
  80e558:	380ed7fa 	srli	r7,r7,31
  80e55c:	12401d26 	beq	r2,r9,80e5d4 <__gedf2+0xa4>
  80e560:	0241ffc4 	movi	r9,2047
  80e564:	1a401226 	beq	r3,r9,80e5b0 <__gedf2+0x80>
  80e568:	1000081e 	bne	r2,zero,80e58c <__gedf2+0x5c>
  80e56c:	2296b03a 	or	r11,r4,r10
  80e570:	5813003a 	cmpeq	r9,r11,zero
  80e574:	1800091e 	bne	r3,zero,80e59c <__gedf2+0x6c>
  80e578:	3218b03a 	or	r12,r6,r8
  80e57c:	6000071e 	bne	r12,zero,80e59c <__gedf2+0x6c>
  80e580:	0005883a 	mov	r2,zero
  80e584:	5800101e 	bne	r11,zero,80e5c8 <__gedf2+0x98>
  80e588:	f800283a 	ret
  80e58c:	18000c1e 	bne	r3,zero,80e5c0 <__gedf2+0x90>
  80e590:	3212b03a 	or	r9,r6,r8
  80e594:	48000c26 	beq	r9,zero,80e5c8 <__gedf2+0x98>
  80e598:	0013883a 	mov	r9,zero
  80e59c:	39c03fcc 	andi	r7,r7,255
  80e5a0:	48000826 	beq	r9,zero,80e5c4 <__gedf2+0x94>
  80e5a4:	38000926 	beq	r7,zero,80e5cc <__gedf2+0x9c>
  80e5a8:	00800044 	movi	r2,1
  80e5ac:	f800283a 	ret
  80e5b0:	3212b03a 	or	r9,r6,r8
  80e5b4:	483fec26 	beq	r9,zero,80e568 <__alt_mem_onchip_mem+0xff78e568>
  80e5b8:	00bfff84 	movi	r2,-2
  80e5bc:	f800283a 	ret
  80e5c0:	39c03fcc 	andi	r7,r7,255
  80e5c4:	29c00626 	beq	r5,r7,80e5e0 <__gedf2+0xb0>
  80e5c8:	283ff726 	beq	r5,zero,80e5a8 <__alt_mem_onchip_mem+0xff78e5a8>
  80e5cc:	00bfffc4 	movi	r2,-1
  80e5d0:	f800283a 	ret
  80e5d4:	2292b03a 	or	r9,r4,r10
  80e5d8:	483fe126 	beq	r9,zero,80e560 <__alt_mem_onchip_mem+0xff78e560>
  80e5dc:	003ff606 	br	80e5b8 <__alt_mem_onchip_mem+0xff78e5b8>
  80e5e0:	18bff916 	blt	r3,r2,80e5c8 <__alt_mem_onchip_mem+0xff78e5c8>
  80e5e4:	10c00316 	blt	r2,r3,80e5f4 <__gedf2+0xc4>
  80e5e8:	42bff736 	bltu	r8,r10,80e5c8 <__alt_mem_onchip_mem+0xff78e5c8>
  80e5ec:	52000326 	beq	r10,r8,80e5fc <__gedf2+0xcc>
  80e5f0:	5200042e 	bgeu	r10,r8,80e604 <__gedf2+0xd4>
  80e5f4:	283fec1e 	bne	r5,zero,80e5a8 <__alt_mem_onchip_mem+0xff78e5a8>
  80e5f8:	003ff406 	br	80e5cc <__alt_mem_onchip_mem+0xff78e5cc>
  80e5fc:	313ff236 	bltu	r6,r4,80e5c8 <__alt_mem_onchip_mem+0xff78e5c8>
  80e600:	21bffc36 	bltu	r4,r6,80e5f4 <__alt_mem_onchip_mem+0xff78e5f4>
  80e604:	0005883a 	mov	r2,zero
  80e608:	f800283a 	ret

0080e60c <__ledf2>:
  80e60c:	2804d53a 	srli	r2,r5,20
  80e610:	3810d53a 	srli	r8,r7,20
  80e614:	00c00434 	movhi	r3,16
  80e618:	18ffffc4 	addi	r3,r3,-1
  80e61c:	1081ffcc 	andi	r2,r2,2047
  80e620:	0241ffc4 	movi	r9,2047
  80e624:	28d4703a 	and	r10,r5,r3
  80e628:	4201ffcc 	andi	r8,r8,2047
  80e62c:	38c6703a 	and	r3,r7,r3
  80e630:	280ad7fa 	srli	r5,r5,31
  80e634:	380ed7fa 	srli	r7,r7,31
  80e638:	12401f26 	beq	r2,r9,80e6b8 <__ledf2+0xac>
  80e63c:	0241ffc4 	movi	r9,2047
  80e640:	42401426 	beq	r8,r9,80e694 <__ledf2+0x88>
  80e644:	1000091e 	bne	r2,zero,80e66c <__ledf2+0x60>
  80e648:	2296b03a 	or	r11,r4,r10
  80e64c:	5813003a 	cmpeq	r9,r11,zero
  80e650:	29403fcc 	andi	r5,r5,255
  80e654:	40000a1e 	bne	r8,zero,80e680 <__ledf2+0x74>
  80e658:	30d8b03a 	or	r12,r6,r3
  80e65c:	6000081e 	bne	r12,zero,80e680 <__ledf2+0x74>
  80e660:	0005883a 	mov	r2,zero
  80e664:	5800111e 	bne	r11,zero,80e6ac <__ledf2+0xa0>
  80e668:	f800283a 	ret
  80e66c:	29403fcc 	andi	r5,r5,255
  80e670:	40000c1e 	bne	r8,zero,80e6a4 <__ledf2+0x98>
  80e674:	30d2b03a 	or	r9,r6,r3
  80e678:	48000c26 	beq	r9,zero,80e6ac <__ledf2+0xa0>
  80e67c:	0013883a 	mov	r9,zero
  80e680:	39c03fcc 	andi	r7,r7,255
  80e684:	48000826 	beq	r9,zero,80e6a8 <__ledf2+0x9c>
  80e688:	38001126 	beq	r7,zero,80e6d0 <__ledf2+0xc4>
  80e68c:	00800044 	movi	r2,1
  80e690:	f800283a 	ret
  80e694:	30d2b03a 	or	r9,r6,r3
  80e698:	483fea26 	beq	r9,zero,80e644 <__alt_mem_onchip_mem+0xff78e644>
  80e69c:	00800084 	movi	r2,2
  80e6a0:	f800283a 	ret
  80e6a4:	39c03fcc 	andi	r7,r7,255
  80e6a8:	39400726 	beq	r7,r5,80e6c8 <__ledf2+0xbc>
  80e6ac:	2800081e 	bne	r5,zero,80e6d0 <__ledf2+0xc4>
  80e6b0:	00800044 	movi	r2,1
  80e6b4:	f800283a 	ret
  80e6b8:	2292b03a 	or	r9,r4,r10
  80e6bc:	483fdf26 	beq	r9,zero,80e63c <__alt_mem_onchip_mem+0xff78e63c>
  80e6c0:	00800084 	movi	r2,2
  80e6c4:	f800283a 	ret
  80e6c8:	4080030e 	bge	r8,r2,80e6d8 <__ledf2+0xcc>
  80e6cc:	383fef26 	beq	r7,zero,80e68c <__alt_mem_onchip_mem+0xff78e68c>
  80e6d0:	00bfffc4 	movi	r2,-1
  80e6d4:	f800283a 	ret
  80e6d8:	123feb16 	blt	r2,r8,80e688 <__alt_mem_onchip_mem+0xff78e688>
  80e6dc:	1abff336 	bltu	r3,r10,80e6ac <__alt_mem_onchip_mem+0xff78e6ac>
  80e6e0:	50c00326 	beq	r10,r3,80e6f0 <__ledf2+0xe4>
  80e6e4:	50c0042e 	bgeu	r10,r3,80e6f8 <__ledf2+0xec>
  80e6e8:	283fe81e 	bne	r5,zero,80e68c <__alt_mem_onchip_mem+0xff78e68c>
  80e6ec:	003ff806 	br	80e6d0 <__alt_mem_onchip_mem+0xff78e6d0>
  80e6f0:	313fee36 	bltu	r6,r4,80e6ac <__alt_mem_onchip_mem+0xff78e6ac>
  80e6f4:	21bffc36 	bltu	r4,r6,80e6e8 <__alt_mem_onchip_mem+0xff78e6e8>
  80e6f8:	0005883a 	mov	r2,zero
  80e6fc:	f800283a 	ret

0080e700 <__muldf3>:
  80e700:	defff304 	addi	sp,sp,-52
  80e704:	2804d53a 	srli	r2,r5,20
  80e708:	dd800915 	stw	r22,36(sp)
  80e70c:	282cd7fa 	srli	r22,r5,31
  80e710:	dc000315 	stw	r16,12(sp)
  80e714:	04000434 	movhi	r16,16
  80e718:	dd400815 	stw	r21,32(sp)
  80e71c:	dc800515 	stw	r18,20(sp)
  80e720:	843fffc4 	addi	r16,r16,-1
  80e724:	dfc00c15 	stw	ra,48(sp)
  80e728:	df000b15 	stw	fp,44(sp)
  80e72c:	ddc00a15 	stw	r23,40(sp)
  80e730:	dd000715 	stw	r20,28(sp)
  80e734:	dcc00615 	stw	r19,24(sp)
  80e738:	dc400415 	stw	r17,16(sp)
  80e73c:	1481ffcc 	andi	r18,r2,2047
  80e740:	2c20703a 	and	r16,r5,r16
  80e744:	b02b883a 	mov	r21,r22
  80e748:	b2403fcc 	andi	r9,r22,255
  80e74c:	90006026 	beq	r18,zero,80e8d0 <__muldf3+0x1d0>
  80e750:	0081ffc4 	movi	r2,2047
  80e754:	2029883a 	mov	r20,r4
  80e758:	90803626 	beq	r18,r2,80e834 <__muldf3+0x134>
  80e75c:	80800434 	orhi	r2,r16,16
  80e760:	100490fa 	slli	r2,r2,3
  80e764:	2020d77a 	srli	r16,r4,29
  80e768:	202890fa 	slli	r20,r4,3
  80e76c:	94bf0044 	addi	r18,r18,-1023
  80e770:	80a0b03a 	or	r16,r16,r2
  80e774:	0027883a 	mov	r19,zero
  80e778:	0039883a 	mov	fp,zero
  80e77c:	3804d53a 	srli	r2,r7,20
  80e780:	382ed7fa 	srli	r23,r7,31
  80e784:	04400434 	movhi	r17,16
  80e788:	8c7fffc4 	addi	r17,r17,-1
  80e78c:	1081ffcc 	andi	r2,r2,2047
  80e790:	3011883a 	mov	r8,r6
  80e794:	3c62703a 	and	r17,r7,r17
  80e798:	ba803fcc 	andi	r10,r23,255
  80e79c:	10006d26 	beq	r2,zero,80e954 <__muldf3+0x254>
  80e7a0:	00c1ffc4 	movi	r3,2047
  80e7a4:	10c06526 	beq	r2,r3,80e93c <__muldf3+0x23c>
  80e7a8:	88c00434 	orhi	r3,r17,16
  80e7ac:	180690fa 	slli	r3,r3,3
  80e7b0:	3022d77a 	srli	r17,r6,29
  80e7b4:	301090fa 	slli	r8,r6,3
  80e7b8:	10bf0044 	addi	r2,r2,-1023
  80e7bc:	88e2b03a 	or	r17,r17,r3
  80e7c0:	000b883a 	mov	r5,zero
  80e7c4:	9085883a 	add	r2,r18,r2
  80e7c8:	2cc8b03a 	or	r4,r5,r19
  80e7cc:	00c003c4 	movi	r3,15
  80e7d0:	bdacf03a 	xor	r22,r23,r22
  80e7d4:	12c00044 	addi	r11,r2,1
  80e7d8:	19009936 	bltu	r3,r4,80ea40 <__muldf3+0x340>
  80e7dc:	200890ba 	slli	r4,r4,2
  80e7e0:	00c02074 	movhi	r3,129
  80e7e4:	18f9fd04 	addi	r3,r3,-6156
  80e7e8:	20c9883a 	add	r4,r4,r3
  80e7ec:	20c00017 	ldw	r3,0(r4)
  80e7f0:	1800683a 	jmp	r3
  80e7f4:	0080ea40 	call	80ea4 <__alt_mem_sdram-0x77f15c>
  80e7f8:	0080e854 	movui	r2,929
  80e7fc:	0080e854 	movui	r2,929
  80e800:	0080e850 	cmplti	r2,zero,929
  80e804:	0080ea1c 	xori	r2,zero,936
  80e808:	0080ea1c 	xori	r2,zero,936
  80e80c:	0080ea04 	movi	r2,936
  80e810:	0080e850 	cmplti	r2,zero,929
  80e814:	0080ea1c 	xori	r2,zero,936
  80e818:	0080ea04 	movi	r2,936
  80e81c:	0080ea1c 	xori	r2,zero,936
  80e820:	0080e850 	cmplti	r2,zero,929
  80e824:	0080ea2c 	andhi	r2,zero,936
  80e828:	0080ea2c 	andhi	r2,zero,936
  80e82c:	0080ea2c 	andhi	r2,zero,936
  80e830:	0080ec48 	cmpgei	r2,zero,945
  80e834:	2404b03a 	or	r2,r4,r16
  80e838:	10006f1e 	bne	r2,zero,80e9f8 <__muldf3+0x2f8>
  80e83c:	04c00204 	movi	r19,8
  80e840:	0021883a 	mov	r16,zero
  80e844:	0029883a 	mov	r20,zero
  80e848:	07000084 	movi	fp,2
  80e84c:	003fcb06 	br	80e77c <__alt_mem_onchip_mem+0xff78e77c>
  80e850:	502d883a 	mov	r22,r10
  80e854:	00800084 	movi	r2,2
  80e858:	28805726 	beq	r5,r2,80e9b8 <__muldf3+0x2b8>
  80e85c:	008000c4 	movi	r2,3
  80e860:	28816626 	beq	r5,r2,80edfc <__muldf3+0x6fc>
  80e864:	00800044 	movi	r2,1
  80e868:	2881411e 	bne	r5,r2,80ed70 <__muldf3+0x670>
  80e86c:	b02b883a 	mov	r21,r22
  80e870:	0005883a 	mov	r2,zero
  80e874:	000b883a 	mov	r5,zero
  80e878:	0029883a 	mov	r20,zero
  80e87c:	1004953a 	slli	r2,r2,20
  80e880:	a8c03fcc 	andi	r3,r21,255
  80e884:	04400434 	movhi	r17,16
  80e888:	8c7fffc4 	addi	r17,r17,-1
  80e88c:	180697fa 	slli	r3,r3,31
  80e890:	2c4a703a 	and	r5,r5,r17
  80e894:	288ab03a 	or	r5,r5,r2
  80e898:	28c6b03a 	or	r3,r5,r3
  80e89c:	a005883a 	mov	r2,r20
  80e8a0:	dfc00c17 	ldw	ra,48(sp)
  80e8a4:	df000b17 	ldw	fp,44(sp)
  80e8a8:	ddc00a17 	ldw	r23,40(sp)
  80e8ac:	dd800917 	ldw	r22,36(sp)
  80e8b0:	dd400817 	ldw	r21,32(sp)
  80e8b4:	dd000717 	ldw	r20,28(sp)
  80e8b8:	dcc00617 	ldw	r19,24(sp)
  80e8bc:	dc800517 	ldw	r18,20(sp)
  80e8c0:	dc400417 	ldw	r17,16(sp)
  80e8c4:	dc000317 	ldw	r16,12(sp)
  80e8c8:	dec00d04 	addi	sp,sp,52
  80e8cc:	f800283a 	ret
  80e8d0:	2404b03a 	or	r2,r4,r16
  80e8d4:	2027883a 	mov	r19,r4
  80e8d8:	10004226 	beq	r2,zero,80e9e4 <__muldf3+0x2e4>
  80e8dc:	8000fc26 	beq	r16,zero,80ecd0 <__muldf3+0x5d0>
  80e8e0:	8009883a 	mov	r4,r16
  80e8e4:	d9800215 	stw	r6,8(sp)
  80e8e8:	d9c00015 	stw	r7,0(sp)
  80e8ec:	da400115 	stw	r9,4(sp)
  80e8f0:	080f9180 	call	80f918 <__clzsi2>
  80e8f4:	d9800217 	ldw	r6,8(sp)
  80e8f8:	d9c00017 	ldw	r7,0(sp)
  80e8fc:	da400117 	ldw	r9,4(sp)
  80e900:	113ffd44 	addi	r4,r2,-11
  80e904:	00c00704 	movi	r3,28
  80e908:	1900ed16 	blt	r3,r4,80ecc0 <__muldf3+0x5c0>
  80e90c:	00c00744 	movi	r3,29
  80e910:	147ffe04 	addi	r17,r2,-8
  80e914:	1907c83a 	sub	r3,r3,r4
  80e918:	8460983a 	sll	r16,r16,r17
  80e91c:	98c6d83a 	srl	r3,r19,r3
  80e920:	9c68983a 	sll	r20,r19,r17
  80e924:	1c20b03a 	or	r16,r3,r16
  80e928:	1080fcc4 	addi	r2,r2,1011
  80e92c:	00a5c83a 	sub	r18,zero,r2
  80e930:	0027883a 	mov	r19,zero
  80e934:	0039883a 	mov	fp,zero
  80e938:	003f9006 	br	80e77c <__alt_mem_onchip_mem+0xff78e77c>
  80e93c:	3446b03a 	or	r3,r6,r17
  80e940:	1800261e 	bne	r3,zero,80e9dc <__muldf3+0x2dc>
  80e944:	0023883a 	mov	r17,zero
  80e948:	0011883a 	mov	r8,zero
  80e94c:	01400084 	movi	r5,2
  80e950:	003f9c06 	br	80e7c4 <__alt_mem_onchip_mem+0xff78e7c4>
  80e954:	3446b03a 	or	r3,r6,r17
  80e958:	18001c26 	beq	r3,zero,80e9cc <__muldf3+0x2cc>
  80e95c:	8800ce26 	beq	r17,zero,80ec98 <__muldf3+0x598>
  80e960:	8809883a 	mov	r4,r17
  80e964:	d9800215 	stw	r6,8(sp)
  80e968:	da400115 	stw	r9,4(sp)
  80e96c:	da800015 	stw	r10,0(sp)
  80e970:	080f9180 	call	80f918 <__clzsi2>
  80e974:	d9800217 	ldw	r6,8(sp)
  80e978:	da400117 	ldw	r9,4(sp)
  80e97c:	da800017 	ldw	r10,0(sp)
  80e980:	113ffd44 	addi	r4,r2,-11
  80e984:	00c00704 	movi	r3,28
  80e988:	1900bf16 	blt	r3,r4,80ec88 <__muldf3+0x588>
  80e98c:	00c00744 	movi	r3,29
  80e990:	123ffe04 	addi	r8,r2,-8
  80e994:	1907c83a 	sub	r3,r3,r4
  80e998:	8a22983a 	sll	r17,r17,r8
  80e99c:	30c6d83a 	srl	r3,r6,r3
  80e9a0:	3210983a 	sll	r8,r6,r8
  80e9a4:	1c62b03a 	or	r17,r3,r17
  80e9a8:	1080fcc4 	addi	r2,r2,1011
  80e9ac:	0085c83a 	sub	r2,zero,r2
  80e9b0:	000b883a 	mov	r5,zero
  80e9b4:	003f8306 	br	80e7c4 <__alt_mem_onchip_mem+0xff78e7c4>
  80e9b8:	b02b883a 	mov	r21,r22
  80e9bc:	0081ffc4 	movi	r2,2047
  80e9c0:	000b883a 	mov	r5,zero
  80e9c4:	0029883a 	mov	r20,zero
  80e9c8:	003fac06 	br	80e87c <__alt_mem_onchip_mem+0xff78e87c>
  80e9cc:	0023883a 	mov	r17,zero
  80e9d0:	0011883a 	mov	r8,zero
  80e9d4:	01400044 	movi	r5,1
  80e9d8:	003f7a06 	br	80e7c4 <__alt_mem_onchip_mem+0xff78e7c4>
  80e9dc:	014000c4 	movi	r5,3
  80e9e0:	003f7806 	br	80e7c4 <__alt_mem_onchip_mem+0xff78e7c4>
  80e9e4:	04c00104 	movi	r19,4
  80e9e8:	0021883a 	mov	r16,zero
  80e9ec:	0029883a 	mov	r20,zero
  80e9f0:	07000044 	movi	fp,1
  80e9f4:	003f6106 	br	80e77c <__alt_mem_onchip_mem+0xff78e77c>
  80e9f8:	04c00304 	movi	r19,12
  80e9fc:	070000c4 	movi	fp,3
  80ea00:	003f5e06 	br	80e77c <__alt_mem_onchip_mem+0xff78e77c>
  80ea04:	01400434 	movhi	r5,16
  80ea08:	002b883a 	mov	r21,zero
  80ea0c:	297fffc4 	addi	r5,r5,-1
  80ea10:	053fffc4 	movi	r20,-1
  80ea14:	0081ffc4 	movi	r2,2047
  80ea18:	003f9806 	br	80e87c <__alt_mem_onchip_mem+0xff78e87c>
  80ea1c:	8023883a 	mov	r17,r16
  80ea20:	a011883a 	mov	r8,r20
  80ea24:	e00b883a 	mov	r5,fp
  80ea28:	003f8a06 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80ea2c:	8023883a 	mov	r17,r16
  80ea30:	a011883a 	mov	r8,r20
  80ea34:	482d883a 	mov	r22,r9
  80ea38:	e00b883a 	mov	r5,fp
  80ea3c:	003f8506 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80ea40:	a00ad43a 	srli	r5,r20,16
  80ea44:	401ad43a 	srli	r13,r8,16
  80ea48:	a53fffcc 	andi	r20,r20,65535
  80ea4c:	423fffcc 	andi	r8,r8,65535
  80ea50:	4519383a 	mul	r12,r8,r20
  80ea54:	4147383a 	mul	r3,r8,r5
  80ea58:	6d09383a 	mul	r4,r13,r20
  80ea5c:	600cd43a 	srli	r6,r12,16
  80ea60:	2b5d383a 	mul	r14,r5,r13
  80ea64:	20c9883a 	add	r4,r4,r3
  80ea68:	310d883a 	add	r6,r6,r4
  80ea6c:	30c0022e 	bgeu	r6,r3,80ea78 <__muldf3+0x378>
  80ea70:	00c00074 	movhi	r3,1
  80ea74:	70dd883a 	add	r14,r14,r3
  80ea78:	8826d43a 	srli	r19,r17,16
  80ea7c:	8bffffcc 	andi	r15,r17,65535
  80ea80:	7d23383a 	mul	r17,r15,r20
  80ea84:	7949383a 	mul	r4,r15,r5
  80ea88:	9d29383a 	mul	r20,r19,r20
  80ea8c:	8814d43a 	srli	r10,r17,16
  80ea90:	3012943a 	slli	r9,r6,16
  80ea94:	a129883a 	add	r20,r20,r4
  80ea98:	633fffcc 	andi	r12,r12,65535
  80ea9c:	5515883a 	add	r10,r10,r20
  80eaa0:	3006d43a 	srli	r3,r6,16
  80eaa4:	4b13883a 	add	r9,r9,r12
  80eaa8:	2ccb383a 	mul	r5,r5,r19
  80eaac:	5100022e 	bgeu	r10,r4,80eab8 <__muldf3+0x3b8>
  80eab0:	01000074 	movhi	r4,1
  80eab4:	290b883a 	add	r5,r5,r4
  80eab8:	802ad43a 	srli	r21,r16,16
  80eabc:	843fffcc 	andi	r16,r16,65535
  80eac0:	440d383a 	mul	r6,r8,r16
  80eac4:	4565383a 	mul	r18,r8,r21
  80eac8:	8349383a 	mul	r4,r16,r13
  80eacc:	500e943a 	slli	r7,r10,16
  80ead0:	3010d43a 	srli	r8,r6,16
  80ead4:	5028d43a 	srli	r20,r10,16
  80ead8:	2489883a 	add	r4,r4,r18
  80eadc:	8abfffcc 	andi	r10,r17,65535
  80eae0:	3a95883a 	add	r10,r7,r10
  80eae4:	4119883a 	add	r12,r8,r4
  80eae8:	a169883a 	add	r20,r20,r5
  80eaec:	1a87883a 	add	r3,r3,r10
  80eaf0:	6d5b383a 	mul	r13,r13,r21
  80eaf4:	6480022e 	bgeu	r12,r18,80eb00 <__muldf3+0x400>
  80eaf8:	01000074 	movhi	r4,1
  80eafc:	691b883a 	add	r13,r13,r4
  80eb00:	7c25383a 	mul	r18,r15,r16
  80eb04:	7d4b383a 	mul	r5,r15,r21
  80eb08:	84cf383a 	mul	r7,r16,r19
  80eb0c:	901ed43a 	srli	r15,r18,16
  80eb10:	6008d43a 	srli	r4,r12,16
  80eb14:	6010943a 	slli	r8,r12,16
  80eb18:	394f883a 	add	r7,r7,r5
  80eb1c:	333fffcc 	andi	r12,r6,65535
  80eb20:	79df883a 	add	r15,r15,r7
  80eb24:	235b883a 	add	r13,r4,r13
  80eb28:	9d63383a 	mul	r17,r19,r21
  80eb2c:	4309883a 	add	r4,r8,r12
  80eb30:	7940022e 	bgeu	r15,r5,80eb3c <__muldf3+0x43c>
  80eb34:	01400074 	movhi	r5,1
  80eb38:	8963883a 	add	r17,r17,r5
  80eb3c:	780a943a 	slli	r5,r15,16
  80eb40:	91bfffcc 	andi	r6,r18,65535
  80eb44:	70c7883a 	add	r3,r14,r3
  80eb48:	298d883a 	add	r6,r5,r6
  80eb4c:	1a8f803a 	cmpltu	r7,r3,r10
  80eb50:	350b883a 	add	r5,r6,r20
  80eb54:	20c7883a 	add	r3,r4,r3
  80eb58:	3955883a 	add	r10,r7,r5
  80eb5c:	1909803a 	cmpltu	r4,r3,r4
  80eb60:	6a91883a 	add	r8,r13,r10
  80eb64:	780cd43a 	srli	r6,r15,16
  80eb68:	2219883a 	add	r12,r4,r8
  80eb6c:	2d0b803a 	cmpltu	r5,r5,r20
  80eb70:	51cf803a 	cmpltu	r7,r10,r7
  80eb74:	29ceb03a 	or	r7,r5,r7
  80eb78:	4351803a 	cmpltu	r8,r8,r13
  80eb7c:	610b803a 	cmpltu	r5,r12,r4
  80eb80:	4148b03a 	or	r4,r8,r5
  80eb84:	398f883a 	add	r7,r7,r6
  80eb88:	3909883a 	add	r4,r7,r4
  80eb8c:	1810927a 	slli	r8,r3,9
  80eb90:	2449883a 	add	r4,r4,r17
  80eb94:	2008927a 	slli	r4,r4,9
  80eb98:	6022d5fa 	srli	r17,r12,23
  80eb9c:	1806d5fa 	srli	r3,r3,23
  80eba0:	4252b03a 	or	r9,r8,r9
  80eba4:	600a927a 	slli	r5,r12,9
  80eba8:	4810c03a 	cmpne	r8,r9,zero
  80ebac:	2462b03a 	or	r17,r4,r17
  80ebb0:	40c6b03a 	or	r3,r8,r3
  80ebb4:	8900402c 	andhi	r4,r17,256
  80ebb8:	1950b03a 	or	r8,r3,r5
  80ebbc:	20000726 	beq	r4,zero,80ebdc <__muldf3+0x4dc>
  80ebc0:	4006d07a 	srli	r3,r8,1
  80ebc4:	880497fa 	slli	r2,r17,31
  80ebc8:	4200004c 	andi	r8,r8,1
  80ebcc:	8822d07a 	srli	r17,r17,1
  80ebd0:	1a10b03a 	or	r8,r3,r8
  80ebd4:	1210b03a 	or	r8,r2,r8
  80ebd8:	5805883a 	mov	r2,r11
  80ebdc:	1140ffc4 	addi	r5,r2,1023
  80ebe0:	0140440e 	bge	zero,r5,80ecf4 <__muldf3+0x5f4>
  80ebe4:	40c001cc 	andi	r3,r8,7
  80ebe8:	18000726 	beq	r3,zero,80ec08 <__muldf3+0x508>
  80ebec:	40c003cc 	andi	r3,r8,15
  80ebf0:	01000104 	movi	r4,4
  80ebf4:	19000426 	beq	r3,r4,80ec08 <__muldf3+0x508>
  80ebf8:	4107883a 	add	r3,r8,r4
  80ebfc:	1a11803a 	cmpltu	r8,r3,r8
  80ec00:	8a23883a 	add	r17,r17,r8
  80ec04:	1811883a 	mov	r8,r3
  80ec08:	88c0402c 	andhi	r3,r17,256
  80ec0c:	18000426 	beq	r3,zero,80ec20 <__muldf3+0x520>
  80ec10:	11410004 	addi	r5,r2,1024
  80ec14:	00bfc034 	movhi	r2,65280
  80ec18:	10bfffc4 	addi	r2,r2,-1
  80ec1c:	88a2703a 	and	r17,r17,r2
  80ec20:	0081ff84 	movi	r2,2046
  80ec24:	117f6416 	blt	r2,r5,80e9b8 <__alt_mem_onchip_mem+0xff78e9b8>
  80ec28:	8828977a 	slli	r20,r17,29
  80ec2c:	4010d0fa 	srli	r8,r8,3
  80ec30:	8822927a 	slli	r17,r17,9
  80ec34:	2881ffcc 	andi	r2,r5,2047
  80ec38:	a228b03a 	or	r20,r20,r8
  80ec3c:	880ad33a 	srli	r5,r17,12
  80ec40:	b02b883a 	mov	r21,r22
  80ec44:	003f0d06 	br	80e87c <__alt_mem_onchip_mem+0xff78e87c>
  80ec48:	8080022c 	andhi	r2,r16,8
  80ec4c:	10000926 	beq	r2,zero,80ec74 <__muldf3+0x574>
  80ec50:	8880022c 	andhi	r2,r17,8
  80ec54:	1000071e 	bne	r2,zero,80ec74 <__muldf3+0x574>
  80ec58:	00800434 	movhi	r2,16
  80ec5c:	89400234 	orhi	r5,r17,8
  80ec60:	10bfffc4 	addi	r2,r2,-1
  80ec64:	b82b883a 	mov	r21,r23
  80ec68:	288a703a 	and	r5,r5,r2
  80ec6c:	4029883a 	mov	r20,r8
  80ec70:	003f6806 	br	80ea14 <__alt_mem_onchip_mem+0xff78ea14>
  80ec74:	00800434 	movhi	r2,16
  80ec78:	81400234 	orhi	r5,r16,8
  80ec7c:	10bfffc4 	addi	r2,r2,-1
  80ec80:	288a703a 	and	r5,r5,r2
  80ec84:	003f6306 	br	80ea14 <__alt_mem_onchip_mem+0xff78ea14>
  80ec88:	147ff604 	addi	r17,r2,-40
  80ec8c:	3462983a 	sll	r17,r6,r17
  80ec90:	0011883a 	mov	r8,zero
  80ec94:	003f4406 	br	80e9a8 <__alt_mem_onchip_mem+0xff78e9a8>
  80ec98:	3009883a 	mov	r4,r6
  80ec9c:	d9800215 	stw	r6,8(sp)
  80eca0:	da400115 	stw	r9,4(sp)
  80eca4:	da800015 	stw	r10,0(sp)
  80eca8:	080f9180 	call	80f918 <__clzsi2>
  80ecac:	10800804 	addi	r2,r2,32
  80ecb0:	da800017 	ldw	r10,0(sp)
  80ecb4:	da400117 	ldw	r9,4(sp)
  80ecb8:	d9800217 	ldw	r6,8(sp)
  80ecbc:	003f3006 	br	80e980 <__alt_mem_onchip_mem+0xff78e980>
  80ecc0:	143ff604 	addi	r16,r2,-40
  80ecc4:	9c20983a 	sll	r16,r19,r16
  80ecc8:	0029883a 	mov	r20,zero
  80eccc:	003f1606 	br	80e928 <__alt_mem_onchip_mem+0xff78e928>
  80ecd0:	d9800215 	stw	r6,8(sp)
  80ecd4:	d9c00015 	stw	r7,0(sp)
  80ecd8:	da400115 	stw	r9,4(sp)
  80ecdc:	080f9180 	call	80f918 <__clzsi2>
  80ece0:	10800804 	addi	r2,r2,32
  80ece4:	da400117 	ldw	r9,4(sp)
  80ece8:	d9c00017 	ldw	r7,0(sp)
  80ecec:	d9800217 	ldw	r6,8(sp)
  80ecf0:	003f0306 	br	80e900 <__alt_mem_onchip_mem+0xff78e900>
  80ecf4:	00c00044 	movi	r3,1
  80ecf8:	1947c83a 	sub	r3,r3,r5
  80ecfc:	00800e04 	movi	r2,56
  80ed00:	10feda16 	blt	r2,r3,80e86c <__alt_mem_onchip_mem+0xff78e86c>
  80ed04:	008007c4 	movi	r2,31
  80ed08:	10c01b16 	blt	r2,r3,80ed78 <__muldf3+0x678>
  80ed0c:	00800804 	movi	r2,32
  80ed10:	10c5c83a 	sub	r2,r2,r3
  80ed14:	888a983a 	sll	r5,r17,r2
  80ed18:	40c8d83a 	srl	r4,r8,r3
  80ed1c:	4084983a 	sll	r2,r8,r2
  80ed20:	88e2d83a 	srl	r17,r17,r3
  80ed24:	2906b03a 	or	r3,r5,r4
  80ed28:	1004c03a 	cmpne	r2,r2,zero
  80ed2c:	1886b03a 	or	r3,r3,r2
  80ed30:	188001cc 	andi	r2,r3,7
  80ed34:	10000726 	beq	r2,zero,80ed54 <__muldf3+0x654>
  80ed38:	188003cc 	andi	r2,r3,15
  80ed3c:	01000104 	movi	r4,4
  80ed40:	11000426 	beq	r2,r4,80ed54 <__muldf3+0x654>
  80ed44:	1805883a 	mov	r2,r3
  80ed48:	10c00104 	addi	r3,r2,4
  80ed4c:	1885803a 	cmpltu	r2,r3,r2
  80ed50:	88a3883a 	add	r17,r17,r2
  80ed54:	8880202c 	andhi	r2,r17,128
  80ed58:	10001c26 	beq	r2,zero,80edcc <__muldf3+0x6cc>
  80ed5c:	b02b883a 	mov	r21,r22
  80ed60:	00800044 	movi	r2,1
  80ed64:	000b883a 	mov	r5,zero
  80ed68:	0029883a 	mov	r20,zero
  80ed6c:	003ec306 	br	80e87c <__alt_mem_onchip_mem+0xff78e87c>
  80ed70:	5805883a 	mov	r2,r11
  80ed74:	003f9906 	br	80ebdc <__alt_mem_onchip_mem+0xff78ebdc>
  80ed78:	00bff844 	movi	r2,-31
  80ed7c:	1145c83a 	sub	r2,r2,r5
  80ed80:	8888d83a 	srl	r4,r17,r2
  80ed84:	00800804 	movi	r2,32
  80ed88:	18801a26 	beq	r3,r2,80edf4 <__muldf3+0x6f4>
  80ed8c:	00801004 	movi	r2,64
  80ed90:	10c5c83a 	sub	r2,r2,r3
  80ed94:	8884983a 	sll	r2,r17,r2
  80ed98:	1204b03a 	or	r2,r2,r8
  80ed9c:	1004c03a 	cmpne	r2,r2,zero
  80eda0:	2084b03a 	or	r2,r4,r2
  80eda4:	144001cc 	andi	r17,r2,7
  80eda8:	88000d1e 	bne	r17,zero,80ede0 <__muldf3+0x6e0>
  80edac:	000b883a 	mov	r5,zero
  80edb0:	1028d0fa 	srli	r20,r2,3
  80edb4:	b02b883a 	mov	r21,r22
  80edb8:	0005883a 	mov	r2,zero
  80edbc:	a468b03a 	or	r20,r20,r17
  80edc0:	003eae06 	br	80e87c <__alt_mem_onchip_mem+0xff78e87c>
  80edc4:	1007883a 	mov	r3,r2
  80edc8:	0023883a 	mov	r17,zero
  80edcc:	880a927a 	slli	r5,r17,9
  80edd0:	1805883a 	mov	r2,r3
  80edd4:	8822977a 	slli	r17,r17,29
  80edd8:	280ad33a 	srli	r5,r5,12
  80eddc:	003ff406 	br	80edb0 <__alt_mem_onchip_mem+0xff78edb0>
  80ede0:	10c003cc 	andi	r3,r2,15
  80ede4:	01000104 	movi	r4,4
  80ede8:	193ff626 	beq	r3,r4,80edc4 <__alt_mem_onchip_mem+0xff78edc4>
  80edec:	0023883a 	mov	r17,zero
  80edf0:	003fd506 	br	80ed48 <__alt_mem_onchip_mem+0xff78ed48>
  80edf4:	0005883a 	mov	r2,zero
  80edf8:	003fe706 	br	80ed98 <__alt_mem_onchip_mem+0xff78ed98>
  80edfc:	00800434 	movhi	r2,16
  80ee00:	89400234 	orhi	r5,r17,8
  80ee04:	10bfffc4 	addi	r2,r2,-1
  80ee08:	b02b883a 	mov	r21,r22
  80ee0c:	288a703a 	and	r5,r5,r2
  80ee10:	4029883a 	mov	r20,r8
  80ee14:	003eff06 	br	80ea14 <__alt_mem_onchip_mem+0xff78ea14>

0080ee18 <__subdf3>:
  80ee18:	02000434 	movhi	r8,16
  80ee1c:	423fffc4 	addi	r8,r8,-1
  80ee20:	defffb04 	addi	sp,sp,-20
  80ee24:	2a14703a 	and	r10,r5,r8
  80ee28:	3812d53a 	srli	r9,r7,20
  80ee2c:	3a10703a 	and	r8,r7,r8
  80ee30:	2006d77a 	srli	r3,r4,29
  80ee34:	3004d77a 	srli	r2,r6,29
  80ee38:	dc000015 	stw	r16,0(sp)
  80ee3c:	501490fa 	slli	r10,r10,3
  80ee40:	2820d53a 	srli	r16,r5,20
  80ee44:	401090fa 	slli	r8,r8,3
  80ee48:	dc800215 	stw	r18,8(sp)
  80ee4c:	dc400115 	stw	r17,4(sp)
  80ee50:	dfc00415 	stw	ra,16(sp)
  80ee54:	202290fa 	slli	r17,r4,3
  80ee58:	dcc00315 	stw	r19,12(sp)
  80ee5c:	4a41ffcc 	andi	r9,r9,2047
  80ee60:	0101ffc4 	movi	r4,2047
  80ee64:	2824d7fa 	srli	r18,r5,31
  80ee68:	8401ffcc 	andi	r16,r16,2047
  80ee6c:	50c6b03a 	or	r3,r10,r3
  80ee70:	380ed7fa 	srli	r7,r7,31
  80ee74:	408ab03a 	or	r5,r8,r2
  80ee78:	300c90fa 	slli	r6,r6,3
  80ee7c:	49009626 	beq	r9,r4,80f0d8 <__subdf3+0x2c0>
  80ee80:	39c0005c 	xori	r7,r7,1
  80ee84:	8245c83a 	sub	r2,r16,r9
  80ee88:	3c807426 	beq	r7,r18,80f05c <__subdf3+0x244>
  80ee8c:	0080af0e 	bge	zero,r2,80f14c <__subdf3+0x334>
  80ee90:	48002a1e 	bne	r9,zero,80ef3c <__subdf3+0x124>
  80ee94:	2988b03a 	or	r4,r5,r6
  80ee98:	20009a1e 	bne	r4,zero,80f104 <__subdf3+0x2ec>
  80ee9c:	888001cc 	andi	r2,r17,7
  80eea0:	10000726 	beq	r2,zero,80eec0 <__subdf3+0xa8>
  80eea4:	888003cc 	andi	r2,r17,15
  80eea8:	01000104 	movi	r4,4
  80eeac:	11000426 	beq	r2,r4,80eec0 <__subdf3+0xa8>
  80eeb0:	890b883a 	add	r5,r17,r4
  80eeb4:	2c63803a 	cmpltu	r17,r5,r17
  80eeb8:	1c47883a 	add	r3,r3,r17
  80eebc:	2823883a 	mov	r17,r5
  80eec0:	1880202c 	andhi	r2,r3,128
  80eec4:	10005926 	beq	r2,zero,80f02c <__subdf3+0x214>
  80eec8:	84000044 	addi	r16,r16,1
  80eecc:	0081ffc4 	movi	r2,2047
  80eed0:	8080be26 	beq	r16,r2,80f1cc <__subdf3+0x3b4>
  80eed4:	017fe034 	movhi	r5,65408
  80eed8:	297fffc4 	addi	r5,r5,-1
  80eedc:	1946703a 	and	r3,r3,r5
  80eee0:	1804977a 	slli	r2,r3,29
  80eee4:	1806927a 	slli	r3,r3,9
  80eee8:	8822d0fa 	srli	r17,r17,3
  80eeec:	8401ffcc 	andi	r16,r16,2047
  80eef0:	180ad33a 	srli	r5,r3,12
  80eef4:	9100004c 	andi	r4,r18,1
  80eef8:	1444b03a 	or	r2,r2,r17
  80eefc:	80c1ffcc 	andi	r3,r16,2047
  80ef00:	1820953a 	slli	r16,r3,20
  80ef04:	20c03fcc 	andi	r3,r4,255
  80ef08:	180897fa 	slli	r4,r3,31
  80ef0c:	00c00434 	movhi	r3,16
  80ef10:	18ffffc4 	addi	r3,r3,-1
  80ef14:	28c6703a 	and	r3,r5,r3
  80ef18:	1c06b03a 	or	r3,r3,r16
  80ef1c:	1906b03a 	or	r3,r3,r4
  80ef20:	dfc00417 	ldw	ra,16(sp)
  80ef24:	dcc00317 	ldw	r19,12(sp)
  80ef28:	dc800217 	ldw	r18,8(sp)
  80ef2c:	dc400117 	ldw	r17,4(sp)
  80ef30:	dc000017 	ldw	r16,0(sp)
  80ef34:	dec00504 	addi	sp,sp,20
  80ef38:	f800283a 	ret
  80ef3c:	0101ffc4 	movi	r4,2047
  80ef40:	813fd626 	beq	r16,r4,80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80ef44:	29402034 	orhi	r5,r5,128
  80ef48:	01000e04 	movi	r4,56
  80ef4c:	2080a316 	blt	r4,r2,80f1dc <__subdf3+0x3c4>
  80ef50:	010007c4 	movi	r4,31
  80ef54:	2080c616 	blt	r4,r2,80f270 <__subdf3+0x458>
  80ef58:	01000804 	movi	r4,32
  80ef5c:	2089c83a 	sub	r4,r4,r2
  80ef60:	2910983a 	sll	r8,r5,r4
  80ef64:	308ed83a 	srl	r7,r6,r2
  80ef68:	3108983a 	sll	r4,r6,r4
  80ef6c:	2884d83a 	srl	r2,r5,r2
  80ef70:	41ccb03a 	or	r6,r8,r7
  80ef74:	2008c03a 	cmpne	r4,r4,zero
  80ef78:	310cb03a 	or	r6,r6,r4
  80ef7c:	898dc83a 	sub	r6,r17,r6
  80ef80:	89a3803a 	cmpltu	r17,r17,r6
  80ef84:	1887c83a 	sub	r3,r3,r2
  80ef88:	1c47c83a 	sub	r3,r3,r17
  80ef8c:	3023883a 	mov	r17,r6
  80ef90:	1880202c 	andhi	r2,r3,128
  80ef94:	10002326 	beq	r2,zero,80f024 <__subdf3+0x20c>
  80ef98:	04c02034 	movhi	r19,128
  80ef9c:	9cffffc4 	addi	r19,r19,-1
  80efa0:	1ce6703a 	and	r19,r3,r19
  80efa4:	98007a26 	beq	r19,zero,80f190 <__subdf3+0x378>
  80efa8:	9809883a 	mov	r4,r19
  80efac:	080f9180 	call	80f918 <__clzsi2>
  80efb0:	113ffe04 	addi	r4,r2,-8
  80efb4:	00c007c4 	movi	r3,31
  80efb8:	19007b16 	blt	r3,r4,80f1a8 <__subdf3+0x390>
  80efbc:	00800804 	movi	r2,32
  80efc0:	1105c83a 	sub	r2,r2,r4
  80efc4:	8884d83a 	srl	r2,r17,r2
  80efc8:	9906983a 	sll	r3,r19,r4
  80efcc:	8922983a 	sll	r17,r17,r4
  80efd0:	10c4b03a 	or	r2,r2,r3
  80efd4:	24007816 	blt	r4,r16,80f1b8 <__subdf3+0x3a0>
  80efd8:	2421c83a 	sub	r16,r4,r16
  80efdc:	80c00044 	addi	r3,r16,1
  80efe0:	010007c4 	movi	r4,31
  80efe4:	20c09516 	blt	r4,r3,80f23c <__subdf3+0x424>
  80efe8:	01400804 	movi	r5,32
  80efec:	28cbc83a 	sub	r5,r5,r3
  80eff0:	88c8d83a 	srl	r4,r17,r3
  80eff4:	8962983a 	sll	r17,r17,r5
  80eff8:	114a983a 	sll	r5,r2,r5
  80effc:	10c6d83a 	srl	r3,r2,r3
  80f000:	8804c03a 	cmpne	r2,r17,zero
  80f004:	290ab03a 	or	r5,r5,r4
  80f008:	28a2b03a 	or	r17,r5,r2
  80f00c:	0021883a 	mov	r16,zero
  80f010:	003fa206 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f014:	2090b03a 	or	r8,r4,r2
  80f018:	40018e26 	beq	r8,zero,80f654 <__subdf3+0x83c>
  80f01c:	1007883a 	mov	r3,r2
  80f020:	2023883a 	mov	r17,r4
  80f024:	888001cc 	andi	r2,r17,7
  80f028:	103f9e1e 	bne	r2,zero,80eea4 <__alt_mem_onchip_mem+0xff78eea4>
  80f02c:	1804977a 	slli	r2,r3,29
  80f030:	8822d0fa 	srli	r17,r17,3
  80f034:	1810d0fa 	srli	r8,r3,3
  80f038:	9100004c 	andi	r4,r18,1
  80f03c:	1444b03a 	or	r2,r2,r17
  80f040:	00c1ffc4 	movi	r3,2047
  80f044:	80c02826 	beq	r16,r3,80f0e8 <__subdf3+0x2d0>
  80f048:	01400434 	movhi	r5,16
  80f04c:	297fffc4 	addi	r5,r5,-1
  80f050:	80e0703a 	and	r16,r16,r3
  80f054:	414a703a 	and	r5,r8,r5
  80f058:	003fa806 	br	80eefc <__alt_mem_onchip_mem+0xff78eefc>
  80f05c:	0080630e 	bge	zero,r2,80f1ec <__subdf3+0x3d4>
  80f060:	48003026 	beq	r9,zero,80f124 <__subdf3+0x30c>
  80f064:	0101ffc4 	movi	r4,2047
  80f068:	813f8c26 	beq	r16,r4,80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f06c:	29402034 	orhi	r5,r5,128
  80f070:	01000e04 	movi	r4,56
  80f074:	2080a90e 	bge	r4,r2,80f31c <__subdf3+0x504>
  80f078:	298cb03a 	or	r6,r5,r6
  80f07c:	3012c03a 	cmpne	r9,r6,zero
  80f080:	0005883a 	mov	r2,zero
  80f084:	4c53883a 	add	r9,r9,r17
  80f088:	4c63803a 	cmpltu	r17,r9,r17
  80f08c:	10c7883a 	add	r3,r2,r3
  80f090:	88c7883a 	add	r3,r17,r3
  80f094:	4823883a 	mov	r17,r9
  80f098:	1880202c 	andhi	r2,r3,128
  80f09c:	1000d026 	beq	r2,zero,80f3e0 <__subdf3+0x5c8>
  80f0a0:	84000044 	addi	r16,r16,1
  80f0a4:	0081ffc4 	movi	r2,2047
  80f0a8:	8080fe26 	beq	r16,r2,80f4a4 <__subdf3+0x68c>
  80f0ac:	00bfe034 	movhi	r2,65408
  80f0b0:	10bfffc4 	addi	r2,r2,-1
  80f0b4:	1886703a 	and	r3,r3,r2
  80f0b8:	880ad07a 	srli	r5,r17,1
  80f0bc:	180497fa 	slli	r2,r3,31
  80f0c0:	8900004c 	andi	r4,r17,1
  80f0c4:	2922b03a 	or	r17,r5,r4
  80f0c8:	1806d07a 	srli	r3,r3,1
  80f0cc:	1462b03a 	or	r17,r2,r17
  80f0d0:	3825883a 	mov	r18,r7
  80f0d4:	003f7106 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f0d8:	2984b03a 	or	r2,r5,r6
  80f0dc:	103f6826 	beq	r2,zero,80ee80 <__alt_mem_onchip_mem+0xff78ee80>
  80f0e0:	39c03fcc 	andi	r7,r7,255
  80f0e4:	003f6706 	br	80ee84 <__alt_mem_onchip_mem+0xff78ee84>
  80f0e8:	4086b03a 	or	r3,r8,r2
  80f0ec:	18015226 	beq	r3,zero,80f638 <__subdf3+0x820>
  80f0f0:	00c00434 	movhi	r3,16
  80f0f4:	41400234 	orhi	r5,r8,8
  80f0f8:	18ffffc4 	addi	r3,r3,-1
  80f0fc:	28ca703a 	and	r5,r5,r3
  80f100:	003f7e06 	br	80eefc <__alt_mem_onchip_mem+0xff78eefc>
  80f104:	10bfffc4 	addi	r2,r2,-1
  80f108:	1000491e 	bne	r2,zero,80f230 <__subdf3+0x418>
  80f10c:	898fc83a 	sub	r7,r17,r6
  80f110:	89e3803a 	cmpltu	r17,r17,r7
  80f114:	1947c83a 	sub	r3,r3,r5
  80f118:	1c47c83a 	sub	r3,r3,r17
  80f11c:	3823883a 	mov	r17,r7
  80f120:	003f9b06 	br	80ef90 <__alt_mem_onchip_mem+0xff78ef90>
  80f124:	2988b03a 	or	r4,r5,r6
  80f128:	203f5c26 	beq	r4,zero,80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f12c:	10bfffc4 	addi	r2,r2,-1
  80f130:	1000931e 	bne	r2,zero,80f380 <__subdf3+0x568>
  80f134:	898d883a 	add	r6,r17,r6
  80f138:	3463803a 	cmpltu	r17,r6,r17
  80f13c:	1947883a 	add	r3,r3,r5
  80f140:	88c7883a 	add	r3,r17,r3
  80f144:	3023883a 	mov	r17,r6
  80f148:	003fd306 	br	80f098 <__alt_mem_onchip_mem+0xff78f098>
  80f14c:	1000541e 	bne	r2,zero,80f2a0 <__subdf3+0x488>
  80f150:	80800044 	addi	r2,r16,1
  80f154:	1081ffcc 	andi	r2,r2,2047
  80f158:	01000044 	movi	r4,1
  80f15c:	2080a20e 	bge	r4,r2,80f3e8 <__subdf3+0x5d0>
  80f160:	8989c83a 	sub	r4,r17,r6
  80f164:	8905803a 	cmpltu	r2,r17,r4
  80f168:	1967c83a 	sub	r19,r3,r5
  80f16c:	98a7c83a 	sub	r19,r19,r2
  80f170:	9880202c 	andhi	r2,r19,128
  80f174:	10006326 	beq	r2,zero,80f304 <__subdf3+0x4ec>
  80f178:	3463c83a 	sub	r17,r6,r17
  80f17c:	28c7c83a 	sub	r3,r5,r3
  80f180:	344d803a 	cmpltu	r6,r6,r17
  80f184:	19a7c83a 	sub	r19,r3,r6
  80f188:	3825883a 	mov	r18,r7
  80f18c:	983f861e 	bne	r19,zero,80efa8 <__alt_mem_onchip_mem+0xff78efa8>
  80f190:	8809883a 	mov	r4,r17
  80f194:	080f9180 	call	80f918 <__clzsi2>
  80f198:	10800804 	addi	r2,r2,32
  80f19c:	113ffe04 	addi	r4,r2,-8
  80f1a0:	00c007c4 	movi	r3,31
  80f1a4:	193f850e 	bge	r3,r4,80efbc <__alt_mem_onchip_mem+0xff78efbc>
  80f1a8:	10bff604 	addi	r2,r2,-40
  80f1ac:	8884983a 	sll	r2,r17,r2
  80f1b0:	0023883a 	mov	r17,zero
  80f1b4:	243f880e 	bge	r4,r16,80efd8 <__alt_mem_onchip_mem+0xff78efd8>
  80f1b8:	00ffe034 	movhi	r3,65408
  80f1bc:	18ffffc4 	addi	r3,r3,-1
  80f1c0:	8121c83a 	sub	r16,r16,r4
  80f1c4:	10c6703a 	and	r3,r2,r3
  80f1c8:	003f3406 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f1cc:	9100004c 	andi	r4,r18,1
  80f1d0:	000b883a 	mov	r5,zero
  80f1d4:	0005883a 	mov	r2,zero
  80f1d8:	003f4806 	br	80eefc <__alt_mem_onchip_mem+0xff78eefc>
  80f1dc:	298cb03a 	or	r6,r5,r6
  80f1e0:	300cc03a 	cmpne	r6,r6,zero
  80f1e4:	0005883a 	mov	r2,zero
  80f1e8:	003f6406 	br	80ef7c <__alt_mem_onchip_mem+0xff78ef7c>
  80f1ec:	10009a1e 	bne	r2,zero,80f458 <__subdf3+0x640>
  80f1f0:	82400044 	addi	r9,r16,1
  80f1f4:	4881ffcc 	andi	r2,r9,2047
  80f1f8:	02800044 	movi	r10,1
  80f1fc:	5080670e 	bge	r10,r2,80f39c <__subdf3+0x584>
  80f200:	0081ffc4 	movi	r2,2047
  80f204:	4880af26 	beq	r9,r2,80f4c4 <__subdf3+0x6ac>
  80f208:	898d883a 	add	r6,r17,r6
  80f20c:	1945883a 	add	r2,r3,r5
  80f210:	3447803a 	cmpltu	r3,r6,r17
  80f214:	1887883a 	add	r3,r3,r2
  80f218:	182297fa 	slli	r17,r3,31
  80f21c:	300cd07a 	srli	r6,r6,1
  80f220:	1806d07a 	srli	r3,r3,1
  80f224:	4821883a 	mov	r16,r9
  80f228:	89a2b03a 	or	r17,r17,r6
  80f22c:	003f1b06 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f230:	0101ffc4 	movi	r4,2047
  80f234:	813f441e 	bne	r16,r4,80ef48 <__alt_mem_onchip_mem+0xff78ef48>
  80f238:	003f1806 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f23c:	843ff844 	addi	r16,r16,-31
  80f240:	01400804 	movi	r5,32
  80f244:	1408d83a 	srl	r4,r2,r16
  80f248:	19405026 	beq	r3,r5,80f38c <__subdf3+0x574>
  80f24c:	01401004 	movi	r5,64
  80f250:	28c7c83a 	sub	r3,r5,r3
  80f254:	10c4983a 	sll	r2,r2,r3
  80f258:	88a2b03a 	or	r17,r17,r2
  80f25c:	8822c03a 	cmpne	r17,r17,zero
  80f260:	2462b03a 	or	r17,r4,r17
  80f264:	0007883a 	mov	r3,zero
  80f268:	0021883a 	mov	r16,zero
  80f26c:	003f6d06 	br	80f024 <__alt_mem_onchip_mem+0xff78f024>
  80f270:	11fff804 	addi	r7,r2,-32
  80f274:	01000804 	movi	r4,32
  80f278:	29ced83a 	srl	r7,r5,r7
  80f27c:	11004526 	beq	r2,r4,80f394 <__subdf3+0x57c>
  80f280:	01001004 	movi	r4,64
  80f284:	2089c83a 	sub	r4,r4,r2
  80f288:	2904983a 	sll	r2,r5,r4
  80f28c:	118cb03a 	or	r6,r2,r6
  80f290:	300cc03a 	cmpne	r6,r6,zero
  80f294:	398cb03a 	or	r6,r7,r6
  80f298:	0005883a 	mov	r2,zero
  80f29c:	003f3706 	br	80ef7c <__alt_mem_onchip_mem+0xff78ef7c>
  80f2a0:	80002a26 	beq	r16,zero,80f34c <__subdf3+0x534>
  80f2a4:	0101ffc4 	movi	r4,2047
  80f2a8:	49006626 	beq	r9,r4,80f444 <__subdf3+0x62c>
  80f2ac:	0085c83a 	sub	r2,zero,r2
  80f2b0:	18c02034 	orhi	r3,r3,128
  80f2b4:	01000e04 	movi	r4,56
  80f2b8:	20807e16 	blt	r4,r2,80f4b4 <__subdf3+0x69c>
  80f2bc:	010007c4 	movi	r4,31
  80f2c0:	2080e716 	blt	r4,r2,80f660 <__subdf3+0x848>
  80f2c4:	01000804 	movi	r4,32
  80f2c8:	2089c83a 	sub	r4,r4,r2
  80f2cc:	1914983a 	sll	r10,r3,r4
  80f2d0:	8890d83a 	srl	r8,r17,r2
  80f2d4:	8908983a 	sll	r4,r17,r4
  80f2d8:	1884d83a 	srl	r2,r3,r2
  80f2dc:	5222b03a 	or	r17,r10,r8
  80f2e0:	2006c03a 	cmpne	r3,r4,zero
  80f2e4:	88e2b03a 	or	r17,r17,r3
  80f2e8:	3463c83a 	sub	r17,r6,r17
  80f2ec:	2885c83a 	sub	r2,r5,r2
  80f2f0:	344d803a 	cmpltu	r6,r6,r17
  80f2f4:	1187c83a 	sub	r3,r2,r6
  80f2f8:	4821883a 	mov	r16,r9
  80f2fc:	3825883a 	mov	r18,r7
  80f300:	003f2306 	br	80ef90 <__alt_mem_onchip_mem+0xff78ef90>
  80f304:	24d0b03a 	or	r8,r4,r19
  80f308:	40001b1e 	bne	r8,zero,80f378 <__subdf3+0x560>
  80f30c:	0005883a 	mov	r2,zero
  80f310:	0009883a 	mov	r4,zero
  80f314:	0021883a 	mov	r16,zero
  80f318:	003f4906 	br	80f040 <__alt_mem_onchip_mem+0xff78f040>
  80f31c:	010007c4 	movi	r4,31
  80f320:	20803a16 	blt	r4,r2,80f40c <__subdf3+0x5f4>
  80f324:	01000804 	movi	r4,32
  80f328:	2089c83a 	sub	r4,r4,r2
  80f32c:	2912983a 	sll	r9,r5,r4
  80f330:	3090d83a 	srl	r8,r6,r2
  80f334:	3108983a 	sll	r4,r6,r4
  80f338:	2884d83a 	srl	r2,r5,r2
  80f33c:	4a12b03a 	or	r9,r9,r8
  80f340:	2008c03a 	cmpne	r4,r4,zero
  80f344:	4912b03a 	or	r9,r9,r4
  80f348:	003f4e06 	br	80f084 <__alt_mem_onchip_mem+0xff78f084>
  80f34c:	1c48b03a 	or	r4,r3,r17
  80f350:	20003c26 	beq	r4,zero,80f444 <__subdf3+0x62c>
  80f354:	0084303a 	nor	r2,zero,r2
  80f358:	1000381e 	bne	r2,zero,80f43c <__subdf3+0x624>
  80f35c:	3463c83a 	sub	r17,r6,r17
  80f360:	28c5c83a 	sub	r2,r5,r3
  80f364:	344d803a 	cmpltu	r6,r6,r17
  80f368:	1187c83a 	sub	r3,r2,r6
  80f36c:	4821883a 	mov	r16,r9
  80f370:	3825883a 	mov	r18,r7
  80f374:	003f0606 	br	80ef90 <__alt_mem_onchip_mem+0xff78ef90>
  80f378:	2023883a 	mov	r17,r4
  80f37c:	003f0906 	br	80efa4 <__alt_mem_onchip_mem+0xff78efa4>
  80f380:	0101ffc4 	movi	r4,2047
  80f384:	813f3a1e 	bne	r16,r4,80f070 <__alt_mem_onchip_mem+0xff78f070>
  80f388:	003ec406 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f38c:	0005883a 	mov	r2,zero
  80f390:	003fb106 	br	80f258 <__alt_mem_onchip_mem+0xff78f258>
  80f394:	0005883a 	mov	r2,zero
  80f398:	003fbc06 	br	80f28c <__alt_mem_onchip_mem+0xff78f28c>
  80f39c:	1c44b03a 	or	r2,r3,r17
  80f3a0:	80008e1e 	bne	r16,zero,80f5dc <__subdf3+0x7c4>
  80f3a4:	1000c826 	beq	r2,zero,80f6c8 <__subdf3+0x8b0>
  80f3a8:	2984b03a 	or	r2,r5,r6
  80f3ac:	103ebb26 	beq	r2,zero,80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f3b0:	8989883a 	add	r4,r17,r6
  80f3b4:	1945883a 	add	r2,r3,r5
  80f3b8:	2447803a 	cmpltu	r3,r4,r17
  80f3bc:	1887883a 	add	r3,r3,r2
  80f3c0:	1880202c 	andhi	r2,r3,128
  80f3c4:	2023883a 	mov	r17,r4
  80f3c8:	103f1626 	beq	r2,zero,80f024 <__alt_mem_onchip_mem+0xff78f024>
  80f3cc:	00bfe034 	movhi	r2,65408
  80f3d0:	10bfffc4 	addi	r2,r2,-1
  80f3d4:	5021883a 	mov	r16,r10
  80f3d8:	1886703a 	and	r3,r3,r2
  80f3dc:	003eaf06 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f3e0:	3825883a 	mov	r18,r7
  80f3e4:	003f0f06 	br	80f024 <__alt_mem_onchip_mem+0xff78f024>
  80f3e8:	1c44b03a 	or	r2,r3,r17
  80f3ec:	8000251e 	bne	r16,zero,80f484 <__subdf3+0x66c>
  80f3f0:	1000661e 	bne	r2,zero,80f58c <__subdf3+0x774>
  80f3f4:	2990b03a 	or	r8,r5,r6
  80f3f8:	40009626 	beq	r8,zero,80f654 <__subdf3+0x83c>
  80f3fc:	2807883a 	mov	r3,r5
  80f400:	3023883a 	mov	r17,r6
  80f404:	3825883a 	mov	r18,r7
  80f408:	003ea406 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f40c:	127ff804 	addi	r9,r2,-32
  80f410:	01000804 	movi	r4,32
  80f414:	2a52d83a 	srl	r9,r5,r9
  80f418:	11008c26 	beq	r2,r4,80f64c <__subdf3+0x834>
  80f41c:	01001004 	movi	r4,64
  80f420:	2085c83a 	sub	r2,r4,r2
  80f424:	2884983a 	sll	r2,r5,r2
  80f428:	118cb03a 	or	r6,r2,r6
  80f42c:	300cc03a 	cmpne	r6,r6,zero
  80f430:	4992b03a 	or	r9,r9,r6
  80f434:	0005883a 	mov	r2,zero
  80f438:	003f1206 	br	80f084 <__alt_mem_onchip_mem+0xff78f084>
  80f43c:	0101ffc4 	movi	r4,2047
  80f440:	493f9c1e 	bne	r9,r4,80f2b4 <__alt_mem_onchip_mem+0xff78f2b4>
  80f444:	2807883a 	mov	r3,r5
  80f448:	3023883a 	mov	r17,r6
  80f44c:	4821883a 	mov	r16,r9
  80f450:	3825883a 	mov	r18,r7
  80f454:	003e9106 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f458:	80001f1e 	bne	r16,zero,80f4d8 <__subdf3+0x6c0>
  80f45c:	1c48b03a 	or	r4,r3,r17
  80f460:	20005a26 	beq	r4,zero,80f5cc <__subdf3+0x7b4>
  80f464:	0084303a 	nor	r2,zero,r2
  80f468:	1000561e 	bne	r2,zero,80f5c4 <__subdf3+0x7ac>
  80f46c:	89a3883a 	add	r17,r17,r6
  80f470:	1945883a 	add	r2,r3,r5
  80f474:	898d803a 	cmpltu	r6,r17,r6
  80f478:	3087883a 	add	r3,r6,r2
  80f47c:	4821883a 	mov	r16,r9
  80f480:	003f0506 	br	80f098 <__alt_mem_onchip_mem+0xff78f098>
  80f484:	10002b1e 	bne	r2,zero,80f534 <__subdf3+0x71c>
  80f488:	2984b03a 	or	r2,r5,r6
  80f48c:	10008026 	beq	r2,zero,80f690 <__subdf3+0x878>
  80f490:	2807883a 	mov	r3,r5
  80f494:	3023883a 	mov	r17,r6
  80f498:	3825883a 	mov	r18,r7
  80f49c:	0401ffc4 	movi	r16,2047
  80f4a0:	003e7e06 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f4a4:	3809883a 	mov	r4,r7
  80f4a8:	0011883a 	mov	r8,zero
  80f4ac:	0005883a 	mov	r2,zero
  80f4b0:	003ee306 	br	80f040 <__alt_mem_onchip_mem+0xff78f040>
  80f4b4:	1c62b03a 	or	r17,r3,r17
  80f4b8:	8822c03a 	cmpne	r17,r17,zero
  80f4bc:	0005883a 	mov	r2,zero
  80f4c0:	003f8906 	br	80f2e8 <__alt_mem_onchip_mem+0xff78f2e8>
  80f4c4:	3809883a 	mov	r4,r7
  80f4c8:	4821883a 	mov	r16,r9
  80f4cc:	0011883a 	mov	r8,zero
  80f4d0:	0005883a 	mov	r2,zero
  80f4d4:	003eda06 	br	80f040 <__alt_mem_onchip_mem+0xff78f040>
  80f4d8:	0101ffc4 	movi	r4,2047
  80f4dc:	49003b26 	beq	r9,r4,80f5cc <__subdf3+0x7b4>
  80f4e0:	0085c83a 	sub	r2,zero,r2
  80f4e4:	18c02034 	orhi	r3,r3,128
  80f4e8:	01000e04 	movi	r4,56
  80f4ec:	20806e16 	blt	r4,r2,80f6a8 <__subdf3+0x890>
  80f4f0:	010007c4 	movi	r4,31
  80f4f4:	20807716 	blt	r4,r2,80f6d4 <__subdf3+0x8bc>
  80f4f8:	01000804 	movi	r4,32
  80f4fc:	2089c83a 	sub	r4,r4,r2
  80f500:	1914983a 	sll	r10,r3,r4
  80f504:	8890d83a 	srl	r8,r17,r2
  80f508:	8908983a 	sll	r4,r17,r4
  80f50c:	1884d83a 	srl	r2,r3,r2
  80f510:	5222b03a 	or	r17,r10,r8
  80f514:	2006c03a 	cmpne	r3,r4,zero
  80f518:	88e2b03a 	or	r17,r17,r3
  80f51c:	89a3883a 	add	r17,r17,r6
  80f520:	1145883a 	add	r2,r2,r5
  80f524:	898d803a 	cmpltu	r6,r17,r6
  80f528:	3087883a 	add	r3,r6,r2
  80f52c:	4821883a 	mov	r16,r9
  80f530:	003ed906 	br	80f098 <__alt_mem_onchip_mem+0xff78f098>
  80f534:	2984b03a 	or	r2,r5,r6
  80f538:	10004226 	beq	r2,zero,80f644 <__subdf3+0x82c>
  80f53c:	1808d0fa 	srli	r4,r3,3
  80f540:	8822d0fa 	srli	r17,r17,3
  80f544:	1806977a 	slli	r3,r3,29
  80f548:	2080022c 	andhi	r2,r4,8
  80f54c:	1c62b03a 	or	r17,r3,r17
  80f550:	10000826 	beq	r2,zero,80f574 <__subdf3+0x75c>
  80f554:	2812d0fa 	srli	r9,r5,3
  80f558:	4880022c 	andhi	r2,r9,8
  80f55c:	1000051e 	bne	r2,zero,80f574 <__subdf3+0x75c>
  80f560:	300cd0fa 	srli	r6,r6,3
  80f564:	2804977a 	slli	r2,r5,29
  80f568:	4809883a 	mov	r4,r9
  80f56c:	3825883a 	mov	r18,r7
  80f570:	11a2b03a 	or	r17,r2,r6
  80f574:	8806d77a 	srli	r3,r17,29
  80f578:	200890fa 	slli	r4,r4,3
  80f57c:	882290fa 	slli	r17,r17,3
  80f580:	0401ffc4 	movi	r16,2047
  80f584:	1906b03a 	or	r3,r3,r4
  80f588:	003e4406 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f58c:	2984b03a 	or	r2,r5,r6
  80f590:	103e4226 	beq	r2,zero,80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f594:	8989c83a 	sub	r4,r17,r6
  80f598:	8911803a 	cmpltu	r8,r17,r4
  80f59c:	1945c83a 	sub	r2,r3,r5
  80f5a0:	1205c83a 	sub	r2,r2,r8
  80f5a4:	1200202c 	andhi	r8,r2,128
  80f5a8:	403e9a26 	beq	r8,zero,80f014 <__alt_mem_onchip_mem+0xff78f014>
  80f5ac:	3463c83a 	sub	r17,r6,r17
  80f5b0:	28c5c83a 	sub	r2,r5,r3
  80f5b4:	344d803a 	cmpltu	r6,r6,r17
  80f5b8:	1187c83a 	sub	r3,r2,r6
  80f5bc:	3825883a 	mov	r18,r7
  80f5c0:	003e3606 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f5c4:	0101ffc4 	movi	r4,2047
  80f5c8:	493fc71e 	bne	r9,r4,80f4e8 <__alt_mem_onchip_mem+0xff78f4e8>
  80f5cc:	2807883a 	mov	r3,r5
  80f5d0:	3023883a 	mov	r17,r6
  80f5d4:	4821883a 	mov	r16,r9
  80f5d8:	003e3006 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f5dc:	10003626 	beq	r2,zero,80f6b8 <__subdf3+0x8a0>
  80f5e0:	2984b03a 	or	r2,r5,r6
  80f5e4:	10001726 	beq	r2,zero,80f644 <__subdf3+0x82c>
  80f5e8:	1808d0fa 	srli	r4,r3,3
  80f5ec:	8822d0fa 	srli	r17,r17,3
  80f5f0:	1806977a 	slli	r3,r3,29
  80f5f4:	2080022c 	andhi	r2,r4,8
  80f5f8:	1c62b03a 	or	r17,r3,r17
  80f5fc:	10000726 	beq	r2,zero,80f61c <__subdf3+0x804>
  80f600:	2812d0fa 	srli	r9,r5,3
  80f604:	4880022c 	andhi	r2,r9,8
  80f608:	1000041e 	bne	r2,zero,80f61c <__subdf3+0x804>
  80f60c:	300cd0fa 	srli	r6,r6,3
  80f610:	2804977a 	slli	r2,r5,29
  80f614:	4809883a 	mov	r4,r9
  80f618:	11a2b03a 	or	r17,r2,r6
  80f61c:	8806d77a 	srli	r3,r17,29
  80f620:	200890fa 	slli	r4,r4,3
  80f624:	882290fa 	slli	r17,r17,3
  80f628:	3825883a 	mov	r18,r7
  80f62c:	1906b03a 	or	r3,r3,r4
  80f630:	0401ffc4 	movi	r16,2047
  80f634:	003e1906 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f638:	000b883a 	mov	r5,zero
  80f63c:	0005883a 	mov	r2,zero
  80f640:	003e2e06 	br	80eefc <__alt_mem_onchip_mem+0xff78eefc>
  80f644:	0401ffc4 	movi	r16,2047
  80f648:	003e1406 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f64c:	0005883a 	mov	r2,zero
  80f650:	003f7506 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f654:	0005883a 	mov	r2,zero
  80f658:	0009883a 	mov	r4,zero
  80f65c:	003e7806 	br	80f040 <__alt_mem_onchip_mem+0xff78f040>
  80f660:	123ff804 	addi	r8,r2,-32
  80f664:	01000804 	movi	r4,32
  80f668:	1a10d83a 	srl	r8,r3,r8
  80f66c:	11002526 	beq	r2,r4,80f704 <__subdf3+0x8ec>
  80f670:	01001004 	movi	r4,64
  80f674:	2085c83a 	sub	r2,r4,r2
  80f678:	1884983a 	sll	r2,r3,r2
  80f67c:	1444b03a 	or	r2,r2,r17
  80f680:	1004c03a 	cmpne	r2,r2,zero
  80f684:	40a2b03a 	or	r17,r8,r2
  80f688:	0005883a 	mov	r2,zero
  80f68c:	003f1606 	br	80f2e8 <__alt_mem_onchip_mem+0xff78f2e8>
  80f690:	02000434 	movhi	r8,16
  80f694:	0009883a 	mov	r4,zero
  80f698:	423fffc4 	addi	r8,r8,-1
  80f69c:	00bfffc4 	movi	r2,-1
  80f6a0:	0401ffc4 	movi	r16,2047
  80f6a4:	003e6606 	br	80f040 <__alt_mem_onchip_mem+0xff78f040>
  80f6a8:	1c62b03a 	or	r17,r3,r17
  80f6ac:	8822c03a 	cmpne	r17,r17,zero
  80f6b0:	0005883a 	mov	r2,zero
  80f6b4:	003f9906 	br	80f51c <__alt_mem_onchip_mem+0xff78f51c>
  80f6b8:	2807883a 	mov	r3,r5
  80f6bc:	3023883a 	mov	r17,r6
  80f6c0:	0401ffc4 	movi	r16,2047
  80f6c4:	003df506 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f6c8:	2807883a 	mov	r3,r5
  80f6cc:	3023883a 	mov	r17,r6
  80f6d0:	003df206 	br	80ee9c <__alt_mem_onchip_mem+0xff78ee9c>
  80f6d4:	123ff804 	addi	r8,r2,-32
  80f6d8:	01000804 	movi	r4,32
  80f6dc:	1a10d83a 	srl	r8,r3,r8
  80f6e0:	11000a26 	beq	r2,r4,80f70c <__subdf3+0x8f4>
  80f6e4:	01001004 	movi	r4,64
  80f6e8:	2085c83a 	sub	r2,r4,r2
  80f6ec:	1884983a 	sll	r2,r3,r2
  80f6f0:	1444b03a 	or	r2,r2,r17
  80f6f4:	1004c03a 	cmpne	r2,r2,zero
  80f6f8:	40a2b03a 	or	r17,r8,r2
  80f6fc:	0005883a 	mov	r2,zero
  80f700:	003f8606 	br	80f51c <__alt_mem_onchip_mem+0xff78f51c>
  80f704:	0005883a 	mov	r2,zero
  80f708:	003fdc06 	br	80f67c <__alt_mem_onchip_mem+0xff78f67c>
  80f70c:	0005883a 	mov	r2,zero
  80f710:	003ff706 	br	80f6f0 <__alt_mem_onchip_mem+0xff78f6f0>

0080f714 <__fixdfsi>:
  80f714:	280cd53a 	srli	r6,r5,20
  80f718:	00c00434 	movhi	r3,16
  80f71c:	18ffffc4 	addi	r3,r3,-1
  80f720:	3181ffcc 	andi	r6,r6,2047
  80f724:	01c0ff84 	movi	r7,1022
  80f728:	28c6703a 	and	r3,r5,r3
  80f72c:	280ad7fa 	srli	r5,r5,31
  80f730:	3980120e 	bge	r7,r6,80f77c <__fixdfsi+0x68>
  80f734:	00810744 	movi	r2,1053
  80f738:	11800c16 	blt	r2,r6,80f76c <__fixdfsi+0x58>
  80f73c:	00810cc4 	movi	r2,1075
  80f740:	1185c83a 	sub	r2,r2,r6
  80f744:	01c007c4 	movi	r7,31
  80f748:	18c00434 	orhi	r3,r3,16
  80f74c:	38800d16 	blt	r7,r2,80f784 <__fixdfsi+0x70>
  80f750:	31befb44 	addi	r6,r6,-1043
  80f754:	2084d83a 	srl	r2,r4,r2
  80f758:	1986983a 	sll	r3,r3,r6
  80f75c:	1884b03a 	or	r2,r3,r2
  80f760:	28000726 	beq	r5,zero,80f780 <__fixdfsi+0x6c>
  80f764:	0085c83a 	sub	r2,zero,r2
  80f768:	f800283a 	ret
  80f76c:	00a00034 	movhi	r2,32768
  80f770:	10bfffc4 	addi	r2,r2,-1
  80f774:	2885883a 	add	r2,r5,r2
  80f778:	f800283a 	ret
  80f77c:	0005883a 	mov	r2,zero
  80f780:	f800283a 	ret
  80f784:	008104c4 	movi	r2,1043
  80f788:	1185c83a 	sub	r2,r2,r6
  80f78c:	1884d83a 	srl	r2,r3,r2
  80f790:	003ff306 	br	80f760 <__alt_mem_onchip_mem+0xff78f760>

0080f794 <__floatsidf>:
  80f794:	defffd04 	addi	sp,sp,-12
  80f798:	dfc00215 	stw	ra,8(sp)
  80f79c:	dc400115 	stw	r17,4(sp)
  80f7a0:	dc000015 	stw	r16,0(sp)
  80f7a4:	20002b26 	beq	r4,zero,80f854 <__floatsidf+0xc0>
  80f7a8:	2023883a 	mov	r17,r4
  80f7ac:	2020d7fa 	srli	r16,r4,31
  80f7b0:	20002d16 	blt	r4,zero,80f868 <__floatsidf+0xd4>
  80f7b4:	8809883a 	mov	r4,r17
  80f7b8:	080f9180 	call	80f918 <__clzsi2>
  80f7bc:	01410784 	movi	r5,1054
  80f7c0:	288bc83a 	sub	r5,r5,r2
  80f7c4:	01010cc4 	movi	r4,1075
  80f7c8:	2149c83a 	sub	r4,r4,r5
  80f7cc:	00c007c4 	movi	r3,31
  80f7d0:	1900160e 	bge	r3,r4,80f82c <__floatsidf+0x98>
  80f7d4:	00c104c4 	movi	r3,1043
  80f7d8:	1947c83a 	sub	r3,r3,r5
  80f7dc:	88c6983a 	sll	r3,r17,r3
  80f7e0:	00800434 	movhi	r2,16
  80f7e4:	10bfffc4 	addi	r2,r2,-1
  80f7e8:	1886703a 	and	r3,r3,r2
  80f7ec:	2941ffcc 	andi	r5,r5,2047
  80f7f0:	800d883a 	mov	r6,r16
  80f7f4:	0005883a 	mov	r2,zero
  80f7f8:	280a953a 	slli	r5,r5,20
  80f7fc:	31803fcc 	andi	r6,r6,255
  80f800:	01000434 	movhi	r4,16
  80f804:	300c97fa 	slli	r6,r6,31
  80f808:	213fffc4 	addi	r4,r4,-1
  80f80c:	1906703a 	and	r3,r3,r4
  80f810:	1946b03a 	or	r3,r3,r5
  80f814:	1986b03a 	or	r3,r3,r6
  80f818:	dfc00217 	ldw	ra,8(sp)
  80f81c:	dc400117 	ldw	r17,4(sp)
  80f820:	dc000017 	ldw	r16,0(sp)
  80f824:	dec00304 	addi	sp,sp,12
  80f828:	f800283a 	ret
  80f82c:	00c002c4 	movi	r3,11
  80f830:	1887c83a 	sub	r3,r3,r2
  80f834:	88c6d83a 	srl	r3,r17,r3
  80f838:	8904983a 	sll	r2,r17,r4
  80f83c:	01000434 	movhi	r4,16
  80f840:	213fffc4 	addi	r4,r4,-1
  80f844:	2941ffcc 	andi	r5,r5,2047
  80f848:	1906703a 	and	r3,r3,r4
  80f84c:	800d883a 	mov	r6,r16
  80f850:	003fe906 	br	80f7f8 <__alt_mem_onchip_mem+0xff78f7f8>
  80f854:	000d883a 	mov	r6,zero
  80f858:	000b883a 	mov	r5,zero
  80f85c:	0007883a 	mov	r3,zero
  80f860:	0005883a 	mov	r2,zero
  80f864:	003fe406 	br	80f7f8 <__alt_mem_onchip_mem+0xff78f7f8>
  80f868:	0123c83a 	sub	r17,zero,r4
  80f86c:	003fd106 	br	80f7b4 <__alt_mem_onchip_mem+0xff78f7b4>

0080f870 <__floatunsidf>:
  80f870:	defffe04 	addi	sp,sp,-8
  80f874:	dc000015 	stw	r16,0(sp)
  80f878:	dfc00115 	stw	ra,4(sp)
  80f87c:	2021883a 	mov	r16,r4
  80f880:	20002226 	beq	r4,zero,80f90c <__floatunsidf+0x9c>
  80f884:	080f9180 	call	80f918 <__clzsi2>
  80f888:	01010784 	movi	r4,1054
  80f88c:	2089c83a 	sub	r4,r4,r2
  80f890:	01810cc4 	movi	r6,1075
  80f894:	310dc83a 	sub	r6,r6,r4
  80f898:	00c007c4 	movi	r3,31
  80f89c:	1980120e 	bge	r3,r6,80f8e8 <__floatunsidf+0x78>
  80f8a0:	00c104c4 	movi	r3,1043
  80f8a4:	1907c83a 	sub	r3,r3,r4
  80f8a8:	80ca983a 	sll	r5,r16,r3
  80f8ac:	00800434 	movhi	r2,16
  80f8b0:	10bfffc4 	addi	r2,r2,-1
  80f8b4:	2101ffcc 	andi	r4,r4,2047
  80f8b8:	0021883a 	mov	r16,zero
  80f8bc:	288a703a 	and	r5,r5,r2
  80f8c0:	2008953a 	slli	r4,r4,20
  80f8c4:	00c00434 	movhi	r3,16
  80f8c8:	18ffffc4 	addi	r3,r3,-1
  80f8cc:	28c6703a 	and	r3,r5,r3
  80f8d0:	8005883a 	mov	r2,r16
  80f8d4:	1906b03a 	or	r3,r3,r4
  80f8d8:	dfc00117 	ldw	ra,4(sp)
  80f8dc:	dc000017 	ldw	r16,0(sp)
  80f8e0:	dec00204 	addi	sp,sp,8
  80f8e4:	f800283a 	ret
  80f8e8:	00c002c4 	movi	r3,11
  80f8ec:	188bc83a 	sub	r5,r3,r2
  80f8f0:	814ad83a 	srl	r5,r16,r5
  80f8f4:	00c00434 	movhi	r3,16
  80f8f8:	18ffffc4 	addi	r3,r3,-1
  80f8fc:	81a0983a 	sll	r16,r16,r6
  80f900:	2101ffcc 	andi	r4,r4,2047
  80f904:	28ca703a 	and	r5,r5,r3
  80f908:	003fed06 	br	80f8c0 <__alt_mem_onchip_mem+0xff78f8c0>
  80f90c:	0009883a 	mov	r4,zero
  80f910:	000b883a 	mov	r5,zero
  80f914:	003fea06 	br	80f8c0 <__alt_mem_onchip_mem+0xff78f8c0>

0080f918 <__clzsi2>:
  80f918:	00bfffd4 	movui	r2,65535
  80f91c:	11000536 	bltu	r2,r4,80f934 <__clzsi2+0x1c>
  80f920:	00803fc4 	movi	r2,255
  80f924:	11000f36 	bltu	r2,r4,80f964 <__clzsi2+0x4c>
  80f928:	00800804 	movi	r2,32
  80f92c:	0007883a 	mov	r3,zero
  80f930:	00000506 	br	80f948 <__clzsi2+0x30>
  80f934:	00804034 	movhi	r2,256
  80f938:	10bfffc4 	addi	r2,r2,-1
  80f93c:	11000c2e 	bgeu	r2,r4,80f970 <__clzsi2+0x58>
  80f940:	00800204 	movi	r2,8
  80f944:	00c00604 	movi	r3,24
  80f948:	20c8d83a 	srl	r4,r4,r3
  80f94c:	00c02074 	movhi	r3,129
  80f950:	18cf7704 	addi	r3,r3,15836
  80f954:	1909883a 	add	r4,r3,r4
  80f958:	20c00003 	ldbu	r3,0(r4)
  80f95c:	10c5c83a 	sub	r2,r2,r3
  80f960:	f800283a 	ret
  80f964:	00800604 	movi	r2,24
  80f968:	00c00204 	movi	r3,8
  80f96c:	003ff606 	br	80f948 <__alt_mem_onchip_mem+0xff78f948>
  80f970:	00800404 	movi	r2,16
  80f974:	1007883a 	mov	r3,r2
  80f978:	003ff306 	br	80f948 <__alt_mem_onchip_mem+0xff78f948>

0080f97c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f97c:	defff504 	addi	sp,sp,-44
  80f980:	df000a15 	stw	fp,40(sp)
  80f984:	df000a04 	addi	fp,sp,40
  80f988:	e13ffc15 	stw	r4,-16(fp)
  80f98c:	e17ffd15 	stw	r5,-12(fp)
  80f990:	e1bffe15 	stw	r6,-8(fp)
  80f994:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f998:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f99c:	d0a7ab17 	ldw	r2,-24916(gp)
  
  if (alt_ticks_per_second ())
  80f9a0:	10003c26 	beq	r2,zero,80fa94 <alt_alarm_start+0x118>
  {
    if (alarm)
  80f9a4:	e0bffc17 	ldw	r2,-16(fp)
  80f9a8:	10003826 	beq	r2,zero,80fa8c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f9ac:	e0bffc17 	ldw	r2,-16(fp)
  80f9b0:	e0fffe17 	ldw	r3,-8(fp)
  80f9b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f9b8:	e0bffc17 	ldw	r2,-16(fp)
  80f9bc:	e0ffff17 	ldw	r3,-4(fp)
  80f9c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9c4:	0005303a 	rdctl	r2,status
  80f9c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9cc:	e0fff917 	ldw	r3,-28(fp)
  80f9d0:	00bfff84 	movi	r2,-2
  80f9d4:	1884703a 	and	r2,r3,r2
  80f9d8:	1001703a 	wrctl	status,r2
  
  return context;
  80f9dc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f9e0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f9e4:	d0a7ac17 	ldw	r2,-24912(gp)
      
      current_nticks = alt_nticks();
  80f9e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f9ec:	e0fffd17 	ldw	r3,-12(fp)
  80f9f0:	e0bff617 	ldw	r2,-40(fp)
  80f9f4:	1885883a 	add	r2,r3,r2
  80f9f8:	10c00044 	addi	r3,r2,1
  80f9fc:	e0bffc17 	ldw	r2,-16(fp)
  80fa00:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80fa04:	e0bffc17 	ldw	r2,-16(fp)
  80fa08:	10c00217 	ldw	r3,8(r2)
  80fa0c:	e0bff617 	ldw	r2,-40(fp)
  80fa10:	1880042e 	bgeu	r3,r2,80fa24 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80fa14:	e0bffc17 	ldw	r2,-16(fp)
  80fa18:	00c00044 	movi	r3,1
  80fa1c:	10c00405 	stb	r3,16(r2)
  80fa20:	00000206 	br	80fa2c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80fa24:	e0bffc17 	ldw	r2,-16(fp)
  80fa28:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80fa2c:	e0bffc17 	ldw	r2,-16(fp)
  80fa30:	d0e00d04 	addi	r3,gp,-32716
  80fa34:	e0fffa15 	stw	r3,-24(fp)
  80fa38:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80fa3c:	e0bffb17 	ldw	r2,-20(fp)
  80fa40:	e0fffa17 	ldw	r3,-24(fp)
  80fa44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80fa48:	e0bffa17 	ldw	r2,-24(fp)
  80fa4c:	10c00017 	ldw	r3,0(r2)
  80fa50:	e0bffb17 	ldw	r2,-20(fp)
  80fa54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80fa58:	e0bffa17 	ldw	r2,-24(fp)
  80fa5c:	10800017 	ldw	r2,0(r2)
  80fa60:	e0fffb17 	ldw	r3,-20(fp)
  80fa64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80fa68:	e0bffa17 	ldw	r2,-24(fp)
  80fa6c:	e0fffb17 	ldw	r3,-20(fp)
  80fa70:	10c00015 	stw	r3,0(r2)
  80fa74:	e0bff817 	ldw	r2,-32(fp)
  80fa78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa7c:	e0bff717 	ldw	r2,-36(fp)
  80fa80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80fa84:	0005883a 	mov	r2,zero
  80fa88:	00000306 	br	80fa98 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80fa8c:	00bffa84 	movi	r2,-22
  80fa90:	00000106 	br	80fa98 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80fa94:	00bfde84 	movi	r2,-134
  }
}
  80fa98:	e037883a 	mov	sp,fp
  80fa9c:	df000017 	ldw	fp,0(sp)
  80faa0:	dec00104 	addi	sp,sp,4
  80faa4:	f800283a 	ret

0080faa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80faa8:	defffe04 	addi	sp,sp,-8
  80faac:	dfc00115 	stw	ra,4(sp)
  80fab0:	df000015 	stw	fp,0(sp)
  80fab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fab8:	d0a00b17 	ldw	r2,-32724(gp)
  80fabc:	10000326 	beq	r2,zero,80facc <alt_get_errno+0x24>
  80fac0:	d0a00b17 	ldw	r2,-32724(gp)
  80fac4:	103ee83a 	callr	r2
  80fac8:	00000106 	br	80fad0 <alt_get_errno+0x28>
  80facc:	d0a7a704 	addi	r2,gp,-24932
}
  80fad0:	e037883a 	mov	sp,fp
  80fad4:	dfc00117 	ldw	ra,4(sp)
  80fad8:	df000017 	ldw	fp,0(sp)
  80fadc:	dec00204 	addi	sp,sp,8
  80fae0:	f800283a 	ret

0080fae4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fae4:	defffb04 	addi	sp,sp,-20
  80fae8:	dfc00415 	stw	ra,16(sp)
  80faec:	df000315 	stw	fp,12(sp)
  80faf0:	df000304 	addi	fp,sp,12
  80faf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80faf8:	e0bfff17 	ldw	r2,-4(fp)
  80fafc:	10000616 	blt	r2,zero,80fb18 <close+0x34>
  80fb00:	e0bfff17 	ldw	r2,-4(fp)
  80fb04:	10c00324 	muli	r3,r2,12
  80fb08:	00802074 	movhi	r2,129
  80fb0c:	10929b04 	addi	r2,r2,19052
  80fb10:	1885883a 	add	r2,r3,r2
  80fb14:	00000106 	br	80fb1c <close+0x38>
  80fb18:	0005883a 	mov	r2,zero
  80fb1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80fb20:	e0bffd17 	ldw	r2,-12(fp)
  80fb24:	10001926 	beq	r2,zero,80fb8c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80fb28:	e0bffd17 	ldw	r2,-12(fp)
  80fb2c:	10800017 	ldw	r2,0(r2)
  80fb30:	10800417 	ldw	r2,16(r2)
  80fb34:	10000626 	beq	r2,zero,80fb50 <close+0x6c>
  80fb38:	e0bffd17 	ldw	r2,-12(fp)
  80fb3c:	10800017 	ldw	r2,0(r2)
  80fb40:	10800417 	ldw	r2,16(r2)
  80fb44:	e13ffd17 	ldw	r4,-12(fp)
  80fb48:	103ee83a 	callr	r2
  80fb4c:	00000106 	br	80fb54 <close+0x70>
  80fb50:	0005883a 	mov	r2,zero
  80fb54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80fb58:	e13fff17 	ldw	r4,-4(fp)
  80fb5c:	08101a40 	call	8101a4 <alt_release_fd>
    if (rval < 0)
  80fb60:	e0bffe17 	ldw	r2,-8(fp)
  80fb64:	1000070e 	bge	r2,zero,80fb84 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80fb68:	080faa80 	call	80faa8 <alt_get_errno>
  80fb6c:	1007883a 	mov	r3,r2
  80fb70:	e0bffe17 	ldw	r2,-8(fp)
  80fb74:	0085c83a 	sub	r2,zero,r2
  80fb78:	18800015 	stw	r2,0(r3)
      return -1;
  80fb7c:	00bfffc4 	movi	r2,-1
  80fb80:	00000706 	br	80fba0 <close+0xbc>
    }
    return 0;
  80fb84:	0005883a 	mov	r2,zero
  80fb88:	00000506 	br	80fba0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fb8c:	080faa80 	call	80faa8 <alt_get_errno>
  80fb90:	1007883a 	mov	r3,r2
  80fb94:	00801444 	movi	r2,81
  80fb98:	18800015 	stw	r2,0(r3)
    return -1;
  80fb9c:	00bfffc4 	movi	r2,-1
  }
}
  80fba0:	e037883a 	mov	sp,fp
  80fba4:	dfc00117 	ldw	ra,4(sp)
  80fba8:	df000017 	ldw	fp,0(sp)
  80fbac:	dec00204 	addi	sp,sp,8
  80fbb0:	f800283a 	ret

0080fbb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80fbb4:	defffc04 	addi	sp,sp,-16
  80fbb8:	df000315 	stw	fp,12(sp)
  80fbbc:	df000304 	addi	fp,sp,12
  80fbc0:	e13ffd15 	stw	r4,-12(fp)
  80fbc4:	e17ffe15 	stw	r5,-8(fp)
  80fbc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80fbcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80fbd0:	e037883a 	mov	sp,fp
  80fbd4:	df000017 	ldw	fp,0(sp)
  80fbd8:	dec00104 	addi	sp,sp,4
  80fbdc:	f800283a 	ret

0080fbe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fbe0:	defffe04 	addi	sp,sp,-8
  80fbe4:	dfc00115 	stw	ra,4(sp)
  80fbe8:	df000015 	stw	fp,0(sp)
  80fbec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fbf0:	d0a00b17 	ldw	r2,-32724(gp)
  80fbf4:	10000326 	beq	r2,zero,80fc04 <alt_get_errno+0x24>
  80fbf8:	d0a00b17 	ldw	r2,-32724(gp)
  80fbfc:	103ee83a 	callr	r2
  80fc00:	00000106 	br	80fc08 <alt_get_errno+0x28>
  80fc04:	d0a7a704 	addi	r2,gp,-24932
}
  80fc08:	e037883a 	mov	sp,fp
  80fc0c:	dfc00117 	ldw	ra,4(sp)
  80fc10:	df000017 	ldw	fp,0(sp)
  80fc14:	dec00204 	addi	sp,sp,8
  80fc18:	f800283a 	ret

0080fc1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80fc1c:	defffb04 	addi	sp,sp,-20
  80fc20:	dfc00415 	stw	ra,16(sp)
  80fc24:	df000315 	stw	fp,12(sp)
  80fc28:	df000304 	addi	fp,sp,12
  80fc2c:	e13ffe15 	stw	r4,-8(fp)
  80fc30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fc34:	e0bffe17 	ldw	r2,-8(fp)
  80fc38:	10000616 	blt	r2,zero,80fc54 <fstat+0x38>
  80fc3c:	e0bffe17 	ldw	r2,-8(fp)
  80fc40:	10c00324 	muli	r3,r2,12
  80fc44:	00802074 	movhi	r2,129
  80fc48:	10929b04 	addi	r2,r2,19052
  80fc4c:	1885883a 	add	r2,r3,r2
  80fc50:	00000106 	br	80fc58 <fstat+0x3c>
  80fc54:	0005883a 	mov	r2,zero
  80fc58:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80fc5c:	e0bffd17 	ldw	r2,-12(fp)
  80fc60:	10001026 	beq	r2,zero,80fca4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80fc64:	e0bffd17 	ldw	r2,-12(fp)
  80fc68:	10800017 	ldw	r2,0(r2)
  80fc6c:	10800817 	ldw	r2,32(r2)
  80fc70:	10000726 	beq	r2,zero,80fc90 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80fc74:	e0bffd17 	ldw	r2,-12(fp)
  80fc78:	10800017 	ldw	r2,0(r2)
  80fc7c:	10800817 	ldw	r2,32(r2)
  80fc80:	e17fff17 	ldw	r5,-4(fp)
  80fc84:	e13ffd17 	ldw	r4,-12(fp)
  80fc88:	103ee83a 	callr	r2
  80fc8c:	00000a06 	br	80fcb8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80fc90:	e0bfff17 	ldw	r2,-4(fp)
  80fc94:	00c80004 	movi	r3,8192
  80fc98:	10c00115 	stw	r3,4(r2)
      return 0;
  80fc9c:	0005883a 	mov	r2,zero
  80fca0:	00000506 	br	80fcb8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fca4:	080fbe00 	call	80fbe0 <alt_get_errno>
  80fca8:	1007883a 	mov	r3,r2
  80fcac:	00801444 	movi	r2,81
  80fcb0:	18800015 	stw	r2,0(r3)
    return -1;
  80fcb4:	00bfffc4 	movi	r2,-1
  }
}
  80fcb8:	e037883a 	mov	sp,fp
  80fcbc:	dfc00117 	ldw	ra,4(sp)
  80fcc0:	df000017 	ldw	fp,0(sp)
  80fcc4:	dec00204 	addi	sp,sp,8
  80fcc8:	f800283a 	ret

0080fccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fccc:	defffe04 	addi	sp,sp,-8
  80fcd0:	dfc00115 	stw	ra,4(sp)
  80fcd4:	df000015 	stw	fp,0(sp)
  80fcd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fcdc:	d0a00b17 	ldw	r2,-32724(gp)
  80fce0:	10000326 	beq	r2,zero,80fcf0 <alt_get_errno+0x24>
  80fce4:	d0a00b17 	ldw	r2,-32724(gp)
  80fce8:	103ee83a 	callr	r2
  80fcec:	00000106 	br	80fcf4 <alt_get_errno+0x28>
  80fcf0:	d0a7a704 	addi	r2,gp,-24932
}
  80fcf4:	e037883a 	mov	sp,fp
  80fcf8:	dfc00117 	ldw	ra,4(sp)
  80fcfc:	df000017 	ldw	fp,0(sp)
  80fd00:	dec00204 	addi	sp,sp,8
  80fd04:	f800283a 	ret

0080fd08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80fd08:	deffed04 	addi	sp,sp,-76
  80fd0c:	dfc01215 	stw	ra,72(sp)
  80fd10:	df001115 	stw	fp,68(sp)
  80fd14:	df001104 	addi	fp,sp,68
  80fd18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fd1c:	e0bfff17 	ldw	r2,-4(fp)
  80fd20:	10000616 	blt	r2,zero,80fd3c <isatty+0x34>
  80fd24:	e0bfff17 	ldw	r2,-4(fp)
  80fd28:	10c00324 	muli	r3,r2,12
  80fd2c:	00802074 	movhi	r2,129
  80fd30:	10929b04 	addi	r2,r2,19052
  80fd34:	1885883a 	add	r2,r3,r2
  80fd38:	00000106 	br	80fd40 <isatty+0x38>
  80fd3c:	0005883a 	mov	r2,zero
  80fd40:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80fd44:	e0bfef17 	ldw	r2,-68(fp)
  80fd48:	10000e26 	beq	r2,zero,80fd84 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80fd4c:	e0bfef17 	ldw	r2,-68(fp)
  80fd50:	10800017 	ldw	r2,0(r2)
  80fd54:	10800817 	ldw	r2,32(r2)
  80fd58:	1000021e 	bne	r2,zero,80fd64 <isatty+0x5c>
    {
      return 1;
  80fd5c:	00800044 	movi	r2,1
  80fd60:	00000d06 	br	80fd98 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80fd64:	e0bff004 	addi	r2,fp,-64
  80fd68:	100b883a 	mov	r5,r2
  80fd6c:	e13fff17 	ldw	r4,-4(fp)
  80fd70:	080fc1c0 	call	80fc1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80fd74:	e0bff117 	ldw	r2,-60(fp)
  80fd78:	10880020 	cmpeqi	r2,r2,8192
  80fd7c:	10803fcc 	andi	r2,r2,255
  80fd80:	00000506 	br	80fd98 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80fd84:	080fccc0 	call	80fccc <alt_get_errno>
  80fd88:	1007883a 	mov	r3,r2
  80fd8c:	00801444 	movi	r2,81
  80fd90:	18800015 	stw	r2,0(r3)
    return 0;
  80fd94:	0005883a 	mov	r2,zero
  }
}
  80fd98:	e037883a 	mov	sp,fp
  80fd9c:	dfc00117 	ldw	ra,4(sp)
  80fda0:	df000017 	ldw	fp,0(sp)
  80fda4:	dec00204 	addi	sp,sp,8
  80fda8:	f800283a 	ret

0080fdac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80fdac:	defffc04 	addi	sp,sp,-16
  80fdb0:	df000315 	stw	fp,12(sp)
  80fdb4:	df000304 	addi	fp,sp,12
  80fdb8:	e13ffd15 	stw	r4,-12(fp)
  80fdbc:	e17ffe15 	stw	r5,-8(fp)
  80fdc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80fdc4:	e0fffe17 	ldw	r3,-8(fp)
  80fdc8:	e0bffd17 	ldw	r2,-12(fp)
  80fdcc:	18800c26 	beq	r3,r2,80fe00 <alt_load_section+0x54>
  {
    while( to != end )
  80fdd0:	00000806 	br	80fdf4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80fdd4:	e0bffe17 	ldw	r2,-8(fp)
  80fdd8:	10c00104 	addi	r3,r2,4
  80fddc:	e0fffe15 	stw	r3,-8(fp)
  80fde0:	e0fffd17 	ldw	r3,-12(fp)
  80fde4:	19000104 	addi	r4,r3,4
  80fde8:	e13ffd15 	stw	r4,-12(fp)
  80fdec:	18c00017 	ldw	r3,0(r3)
  80fdf0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80fdf4:	e0fffe17 	ldw	r3,-8(fp)
  80fdf8:	e0bfff17 	ldw	r2,-4(fp)
  80fdfc:	18bff51e 	bne	r3,r2,80fdd4 <__alt_mem_onchip_mem+0xff78fdd4>
    {
      *to++ = *from++;
    }
  }
}
  80fe00:	0001883a 	nop
  80fe04:	e037883a 	mov	sp,fp
  80fe08:	df000017 	ldw	fp,0(sp)
  80fe0c:	dec00104 	addi	sp,sp,4
  80fe10:	f800283a 	ret

0080fe14 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80fe14:	defffe04 	addi	sp,sp,-8
  80fe18:	dfc00115 	stw	ra,4(sp)
  80fe1c:	df000015 	stw	fp,0(sp)
  80fe20:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80fe24:	01802074 	movhi	r6,129
  80fe28:	31979e04 	addi	r6,r6,24184
  80fe2c:	01402074 	movhi	r5,129
  80fe30:	29506804 	addi	r5,r5,16800
  80fe34:	01002074 	movhi	r4,129
  80fe38:	21179e04 	addi	r4,r4,24184
  80fe3c:	080fdac0 	call	80fdac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80fe40:	01802034 	movhi	r6,128
  80fe44:	31809104 	addi	r6,r6,580
  80fe48:	01402034 	movhi	r5,128
  80fe4c:	29400804 	addi	r5,r5,32
  80fe50:	01002034 	movhi	r4,128
  80fe54:	21000804 	addi	r4,r4,32
  80fe58:	080fdac0 	call	80fdac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80fe5c:	01802074 	movhi	r6,129
  80fe60:	31906804 	addi	r6,r6,16800
  80fe64:	01402074 	movhi	r5,129
  80fe68:	294ea804 	addi	r5,r5,15008
  80fe6c:	01002074 	movhi	r4,129
  80fe70:	210ea804 	addi	r4,r4,15008
  80fe74:	080fdac0 	call	80fdac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80fe78:	08129a80 	call	8129a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80fe7c:	0812b900 	call	812b90 <alt_icache_flush_all>
}
  80fe80:	0001883a 	nop
  80fe84:	e037883a 	mov	sp,fp
  80fe88:	dfc00117 	ldw	ra,4(sp)
  80fe8c:	df000017 	ldw	fp,0(sp)
  80fe90:	dec00204 	addi	sp,sp,8
  80fe94:	f800283a 	ret

0080fe98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fe98:	defffe04 	addi	sp,sp,-8
  80fe9c:	dfc00115 	stw	ra,4(sp)
  80fea0:	df000015 	stw	fp,0(sp)
  80fea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fea8:	d0a00b17 	ldw	r2,-32724(gp)
  80feac:	10000326 	beq	r2,zero,80febc <alt_get_errno+0x24>
  80feb0:	d0a00b17 	ldw	r2,-32724(gp)
  80feb4:	103ee83a 	callr	r2
  80feb8:	00000106 	br	80fec0 <alt_get_errno+0x28>
  80febc:	d0a7a704 	addi	r2,gp,-24932
}
  80fec0:	e037883a 	mov	sp,fp
  80fec4:	dfc00117 	ldw	ra,4(sp)
  80fec8:	df000017 	ldw	fp,0(sp)
  80fecc:	dec00204 	addi	sp,sp,8
  80fed0:	f800283a 	ret

0080fed4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80fed4:	defff904 	addi	sp,sp,-28
  80fed8:	dfc00615 	stw	ra,24(sp)
  80fedc:	df000515 	stw	fp,20(sp)
  80fee0:	df000504 	addi	fp,sp,20
  80fee4:	e13ffd15 	stw	r4,-12(fp)
  80fee8:	e17ffe15 	stw	r5,-8(fp)
  80feec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80fef0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fef4:	e0bffd17 	ldw	r2,-12(fp)
  80fef8:	10000616 	blt	r2,zero,80ff14 <lseek+0x40>
  80fefc:	e0bffd17 	ldw	r2,-12(fp)
  80ff00:	10c00324 	muli	r3,r2,12
  80ff04:	00802074 	movhi	r2,129
  80ff08:	10929b04 	addi	r2,r2,19052
  80ff0c:	1885883a 	add	r2,r3,r2
  80ff10:	00000106 	br	80ff18 <lseek+0x44>
  80ff14:	0005883a 	mov	r2,zero
  80ff18:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80ff1c:	e0bffc17 	ldw	r2,-16(fp)
  80ff20:	10001026 	beq	r2,zero,80ff64 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ff24:	e0bffc17 	ldw	r2,-16(fp)
  80ff28:	10800017 	ldw	r2,0(r2)
  80ff2c:	10800717 	ldw	r2,28(r2)
  80ff30:	10000926 	beq	r2,zero,80ff58 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ff34:	e0bffc17 	ldw	r2,-16(fp)
  80ff38:	10800017 	ldw	r2,0(r2)
  80ff3c:	10800717 	ldw	r2,28(r2)
  80ff40:	e1bfff17 	ldw	r6,-4(fp)
  80ff44:	e17ffe17 	ldw	r5,-8(fp)
  80ff48:	e13ffc17 	ldw	r4,-16(fp)
  80ff4c:	103ee83a 	callr	r2
  80ff50:	e0bffb15 	stw	r2,-20(fp)
  80ff54:	00000506 	br	80ff6c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ff58:	00bfde84 	movi	r2,-134
  80ff5c:	e0bffb15 	stw	r2,-20(fp)
  80ff60:	00000206 	br	80ff6c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ff64:	00bfebc4 	movi	r2,-81
  80ff68:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80ff6c:	e0bffb17 	ldw	r2,-20(fp)
  80ff70:	1000070e 	bge	r2,zero,80ff90 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80ff74:	080fe980 	call	80fe98 <alt_get_errno>
  80ff78:	1007883a 	mov	r3,r2
  80ff7c:	e0bffb17 	ldw	r2,-20(fp)
  80ff80:	0085c83a 	sub	r2,zero,r2
  80ff84:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ff88:	00bfffc4 	movi	r2,-1
  80ff8c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80ff90:	e0bffb17 	ldw	r2,-20(fp)
}
  80ff94:	e037883a 	mov	sp,fp
  80ff98:	dfc00117 	ldw	ra,4(sp)
  80ff9c:	df000017 	ldw	fp,0(sp)
  80ffa0:	dec00204 	addi	sp,sp,8
  80ffa4:	f800283a 	ret

0080ffa8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ffa8:	defffd04 	addi	sp,sp,-12
  80ffac:	dfc00215 	stw	ra,8(sp)
  80ffb0:	df000115 	stw	fp,4(sp)
  80ffb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ffb8:	0009883a 	mov	r4,zero
  80ffbc:	08105c40 	call	8105c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80ffc0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ffc4:	08105fc0 	call	8105fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ffc8:	01802074 	movhi	r6,129
  80ffcc:	318fba04 	addi	r6,r6,16104
  80ffd0:	01402074 	movhi	r5,129
  80ffd4:	294fba04 	addi	r5,r5,16104
  80ffd8:	01002074 	movhi	r4,129
  80ffdc:	210fba04 	addi	r4,r4,16104
  80ffe0:	0812f280 	call	812f28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ffe4:	0812ad00 	call	812ad0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ffe8:	01002074 	movhi	r4,129
  80ffec:	210acc04 	addi	r4,r4,11056
  80fff0:	081370c0 	call	81370c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80fff4:	d0a7a817 	ldw	r2,-24928(gp)
  80fff8:	d0e7a917 	ldw	r3,-24924(gp)
  80fffc:	d127aa17 	ldw	r4,-24920(gp)
  810000:	200d883a 	mov	r6,r4
  810004:	180b883a 	mov	r5,r3
  810008:	1009883a 	mov	r4,r2
  81000c:	0800a3c0 	call	800a3c <main>
  810010:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810014:	01000044 	movi	r4,1
  810018:	080fae40 	call	80fae4 <close>
  exit (result);
  81001c:	e13fff17 	ldw	r4,-4(fp)
  810020:	08137200 	call	813720 <exit>

00810024 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810024:	defffe04 	addi	sp,sp,-8
  810028:	df000115 	stw	fp,4(sp)
  81002c:	df000104 	addi	fp,sp,4
  810030:	e13fff15 	stw	r4,-4(fp)
}
  810034:	0001883a 	nop
  810038:	e037883a 	mov	sp,fp
  81003c:	df000017 	ldw	fp,0(sp)
  810040:	dec00104 	addi	sp,sp,4
  810044:	f800283a 	ret

00810048 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810048:	defffe04 	addi	sp,sp,-8
  81004c:	df000115 	stw	fp,4(sp)
  810050:	df000104 	addi	fp,sp,4
  810054:	e13fff15 	stw	r4,-4(fp)
}
  810058:	0001883a 	nop
  81005c:	e037883a 	mov	sp,fp
  810060:	df000017 	ldw	fp,0(sp)
  810064:	dec00104 	addi	sp,sp,4
  810068:	f800283a 	ret

0081006c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81006c:	defffe04 	addi	sp,sp,-8
  810070:	dfc00115 	stw	ra,4(sp)
  810074:	df000015 	stw	fp,0(sp)
  810078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81007c:	d0a00b17 	ldw	r2,-32724(gp)
  810080:	10000326 	beq	r2,zero,810090 <alt_get_errno+0x24>
  810084:	d0a00b17 	ldw	r2,-32724(gp)
  810088:	103ee83a 	callr	r2
  81008c:	00000106 	br	810094 <alt_get_errno+0x28>
  810090:	d0a7a704 	addi	r2,gp,-24932
}
  810094:	e037883a 	mov	sp,fp
  810098:	dfc00117 	ldw	ra,4(sp)
  81009c:	df000017 	ldw	fp,0(sp)
  8100a0:	dec00204 	addi	sp,sp,8
  8100a4:	f800283a 	ret

008100a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8100a8:	defff904 	addi	sp,sp,-28
  8100ac:	dfc00615 	stw	ra,24(sp)
  8100b0:	df000515 	stw	fp,20(sp)
  8100b4:	df000504 	addi	fp,sp,20
  8100b8:	e13ffd15 	stw	r4,-12(fp)
  8100bc:	e17ffe15 	stw	r5,-8(fp)
  8100c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8100c4:	e0bffd17 	ldw	r2,-12(fp)
  8100c8:	10000616 	blt	r2,zero,8100e4 <read+0x3c>
  8100cc:	e0bffd17 	ldw	r2,-12(fp)
  8100d0:	10c00324 	muli	r3,r2,12
  8100d4:	00802074 	movhi	r2,129
  8100d8:	10929b04 	addi	r2,r2,19052
  8100dc:	1885883a 	add	r2,r3,r2
  8100e0:	00000106 	br	8100e8 <read+0x40>
  8100e4:	0005883a 	mov	r2,zero
  8100e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8100ec:	e0bffb17 	ldw	r2,-20(fp)
  8100f0:	10002226 	beq	r2,zero,81017c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8100f4:	e0bffb17 	ldw	r2,-20(fp)
  8100f8:	10800217 	ldw	r2,8(r2)
  8100fc:	108000cc 	andi	r2,r2,3
  810100:	10800060 	cmpeqi	r2,r2,1
  810104:	1000181e 	bne	r2,zero,810168 <read+0xc0>
        (fd->dev->read))
  810108:	e0bffb17 	ldw	r2,-20(fp)
  81010c:	10800017 	ldw	r2,0(r2)
  810110:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810114:	10001426 	beq	r2,zero,810168 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810118:	e0bffb17 	ldw	r2,-20(fp)
  81011c:	10800017 	ldw	r2,0(r2)
  810120:	10800517 	ldw	r2,20(r2)
  810124:	e0ffff17 	ldw	r3,-4(fp)
  810128:	180d883a 	mov	r6,r3
  81012c:	e17ffe17 	ldw	r5,-8(fp)
  810130:	e13ffb17 	ldw	r4,-20(fp)
  810134:	103ee83a 	callr	r2
  810138:	e0bffc15 	stw	r2,-16(fp)
  81013c:	e0bffc17 	ldw	r2,-16(fp)
  810140:	1000070e 	bge	r2,zero,810160 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  810144:	081006c0 	call	81006c <alt_get_errno>
  810148:	1007883a 	mov	r3,r2
  81014c:	e0bffc17 	ldw	r2,-16(fp)
  810150:	0085c83a 	sub	r2,zero,r2
  810154:	18800015 	stw	r2,0(r3)
          return -1;
  810158:	00bfffc4 	movi	r2,-1
  81015c:	00000c06 	br	810190 <read+0xe8>
        }
        return rval;
  810160:	e0bffc17 	ldw	r2,-16(fp)
  810164:	00000a06 	br	810190 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810168:	081006c0 	call	81006c <alt_get_errno>
  81016c:	1007883a 	mov	r3,r2
  810170:	00800344 	movi	r2,13
  810174:	18800015 	stw	r2,0(r3)
  810178:	00000406 	br	81018c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81017c:	081006c0 	call	81006c <alt_get_errno>
  810180:	1007883a 	mov	r3,r2
  810184:	00801444 	movi	r2,81
  810188:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81018c:	00bfffc4 	movi	r2,-1
}
  810190:	e037883a 	mov	sp,fp
  810194:	dfc00117 	ldw	ra,4(sp)
  810198:	df000017 	ldw	fp,0(sp)
  81019c:	dec00204 	addi	sp,sp,8
  8101a0:	f800283a 	ret

008101a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8101a4:	defffe04 	addi	sp,sp,-8
  8101a8:	df000115 	stw	fp,4(sp)
  8101ac:	df000104 	addi	fp,sp,4
  8101b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8101b4:	e0bfff17 	ldw	r2,-4(fp)
  8101b8:	108000d0 	cmplti	r2,r2,3
  8101bc:	10000d1e 	bne	r2,zero,8101f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8101c0:	00802074 	movhi	r2,129
  8101c4:	10929b04 	addi	r2,r2,19052
  8101c8:	e0ffff17 	ldw	r3,-4(fp)
  8101cc:	18c00324 	muli	r3,r3,12
  8101d0:	10c5883a 	add	r2,r2,r3
  8101d4:	10800204 	addi	r2,r2,8
  8101d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8101dc:	00802074 	movhi	r2,129
  8101e0:	10929b04 	addi	r2,r2,19052
  8101e4:	e0ffff17 	ldw	r3,-4(fp)
  8101e8:	18c00324 	muli	r3,r3,12
  8101ec:	10c5883a 	add	r2,r2,r3
  8101f0:	10000015 	stw	zero,0(r2)
  }
}
  8101f4:	0001883a 	nop
  8101f8:	e037883a 	mov	sp,fp
  8101fc:	df000017 	ldw	fp,0(sp)
  810200:	dec00104 	addi	sp,sp,4
  810204:	f800283a 	ret

00810208 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810208:	defff904 	addi	sp,sp,-28
  81020c:	df000615 	stw	fp,24(sp)
  810210:	df000604 	addi	fp,sp,24
  810214:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810218:	0005303a 	rdctl	r2,status
  81021c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810220:	e0fffe17 	ldw	r3,-8(fp)
  810224:	00bfff84 	movi	r2,-2
  810228:	1884703a 	and	r2,r3,r2
  81022c:	1001703a 	wrctl	status,r2
  
  return context;
  810230:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810234:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810238:	d0a00c17 	ldw	r2,-32720(gp)
  81023c:	10c000c4 	addi	r3,r2,3
  810240:	00bfff04 	movi	r2,-4
  810244:	1884703a 	and	r2,r3,r2
  810248:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81024c:	d0e00c17 	ldw	r3,-32720(gp)
  810250:	e0bfff17 	ldw	r2,-4(fp)
  810254:	1887883a 	add	r3,r3,r2
  810258:	00804034 	movhi	r2,256
  81025c:	10800004 	addi	r2,r2,0
  810260:	10c0062e 	bgeu	r2,r3,81027c <sbrk+0x74>
  810264:	e0bffb17 	ldw	r2,-20(fp)
  810268:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81026c:	e0bffa17 	ldw	r2,-24(fp)
  810270:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  810274:	00bfffc4 	movi	r2,-1
  810278:	00000b06 	br	8102a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81027c:	d0a00c17 	ldw	r2,-32720(gp)
  810280:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  810284:	d0e00c17 	ldw	r3,-32720(gp)
  810288:	e0bfff17 	ldw	r2,-4(fp)
  81028c:	1885883a 	add	r2,r3,r2
  810290:	d0a00c15 	stw	r2,-32720(gp)
  810294:	e0bffb17 	ldw	r2,-20(fp)
  810298:	e0bffc15 	stw	r2,-16(fp)
  81029c:	e0bffc17 	ldw	r2,-16(fp)
  8102a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8102a4:	e0bffd17 	ldw	r2,-12(fp)
} 
  8102a8:	e037883a 	mov	sp,fp
  8102ac:	df000017 	ldw	fp,0(sp)
  8102b0:	dec00104 	addi	sp,sp,4
  8102b4:	f800283a 	ret

008102b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8102b8:	defffa04 	addi	sp,sp,-24
  8102bc:	df000515 	stw	fp,20(sp)
  8102c0:	df000504 	addi	fp,sp,20
  8102c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102c8:	0005303a 	rdctl	r2,status
  8102cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8102d0:	e0fffc17 	ldw	r3,-16(fp)
  8102d4:	00bfff84 	movi	r2,-2
  8102d8:	1884703a 	and	r2,r3,r2
  8102dc:	1001703a 	wrctl	status,r2
  
  return context;
  8102e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8102e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8102e8:	e0bfff17 	ldw	r2,-4(fp)
  8102ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8102f0:	e0bffd17 	ldw	r2,-12(fp)
  8102f4:	10800017 	ldw	r2,0(r2)
  8102f8:	e0fffd17 	ldw	r3,-12(fp)
  8102fc:	18c00117 	ldw	r3,4(r3)
  810300:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810304:	e0bffd17 	ldw	r2,-12(fp)
  810308:	10800117 	ldw	r2,4(r2)
  81030c:	e0fffd17 	ldw	r3,-12(fp)
  810310:	18c00017 	ldw	r3,0(r3)
  810314:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810318:	e0bffd17 	ldw	r2,-12(fp)
  81031c:	e0fffd17 	ldw	r3,-12(fp)
  810320:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810324:	e0bffd17 	ldw	r2,-12(fp)
  810328:	e0fffd17 	ldw	r3,-12(fp)
  81032c:	10c00015 	stw	r3,0(r2)
  810330:	e0bffb17 	ldw	r2,-20(fp)
  810334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810338:	e0bffe17 	ldw	r2,-8(fp)
  81033c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810340:	0001883a 	nop
  810344:	e037883a 	mov	sp,fp
  810348:	df000017 	ldw	fp,0(sp)
  81034c:	dec00104 	addi	sp,sp,4
  810350:	f800283a 	ret

00810354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810354:	defffb04 	addi	sp,sp,-20
  810358:	dfc00415 	stw	ra,16(sp)
  81035c:	df000315 	stw	fp,12(sp)
  810360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810364:	d0a00d17 	ldw	r2,-32716(gp)
  810368:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81036c:	d0a7ac17 	ldw	r2,-24912(gp)
  810370:	10800044 	addi	r2,r2,1
  810374:	d0a7ac15 	stw	r2,-24912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810378:	00002e06 	br	810434 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81037c:	e0bffd17 	ldw	r2,-12(fp)
  810380:	10800017 	ldw	r2,0(r2)
  810384:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810388:	e0bffd17 	ldw	r2,-12(fp)
  81038c:	10800403 	ldbu	r2,16(r2)
  810390:	10803fcc 	andi	r2,r2,255
  810394:	10000426 	beq	r2,zero,8103a8 <alt_tick+0x54>
  810398:	d0a7ac17 	ldw	r2,-24912(gp)
  81039c:	1000021e 	bne	r2,zero,8103a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8103a0:	e0bffd17 	ldw	r2,-12(fp)
  8103a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8103a8:	e0bffd17 	ldw	r2,-12(fp)
  8103ac:	10800217 	ldw	r2,8(r2)
  8103b0:	d0e7ac17 	ldw	r3,-24912(gp)
  8103b4:	18801d36 	bltu	r3,r2,81042c <alt_tick+0xd8>
  8103b8:	e0bffd17 	ldw	r2,-12(fp)
  8103bc:	10800403 	ldbu	r2,16(r2)
  8103c0:	10803fcc 	andi	r2,r2,255
  8103c4:	1000191e 	bne	r2,zero,81042c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8103c8:	e0bffd17 	ldw	r2,-12(fp)
  8103cc:	10800317 	ldw	r2,12(r2)
  8103d0:	e0fffd17 	ldw	r3,-12(fp)
  8103d4:	18c00517 	ldw	r3,20(r3)
  8103d8:	1809883a 	mov	r4,r3
  8103dc:	103ee83a 	callr	r2
  8103e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8103e4:	e0bfff17 	ldw	r2,-4(fp)
  8103e8:	1000031e 	bne	r2,zero,8103f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8103ec:	e13ffd17 	ldw	r4,-12(fp)
  8103f0:	08102b80 	call	8102b8 <alt_alarm_stop>
  8103f4:	00000d06 	br	81042c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8103f8:	e0bffd17 	ldw	r2,-12(fp)
  8103fc:	10c00217 	ldw	r3,8(r2)
  810400:	e0bfff17 	ldw	r2,-4(fp)
  810404:	1887883a 	add	r3,r3,r2
  810408:	e0bffd17 	ldw	r2,-12(fp)
  81040c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810410:	e0bffd17 	ldw	r2,-12(fp)
  810414:	10c00217 	ldw	r3,8(r2)
  810418:	d0a7ac17 	ldw	r2,-24912(gp)
  81041c:	1880032e 	bgeu	r3,r2,81042c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810420:	e0bffd17 	ldw	r2,-12(fp)
  810424:	00c00044 	movi	r3,1
  810428:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  81042c:	e0bffe17 	ldw	r2,-8(fp)
  810430:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810434:	e0fffd17 	ldw	r3,-12(fp)
  810438:	d0a00d04 	addi	r2,gp,-32716
  81043c:	18bfcf1e 	bne	r3,r2,81037c <__alt_mem_onchip_mem+0xff79037c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810440:	0001883a 	nop
}
  810444:	0001883a 	nop
  810448:	e037883a 	mov	sp,fp
  81044c:	dfc00117 	ldw	ra,4(sp)
  810450:	df000017 	ldw	fp,0(sp)
  810454:	dec00204 	addi	sp,sp,8
  810458:	f800283a 	ret

0081045c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81045c:	defffe04 	addi	sp,sp,-8
  810460:	dfc00115 	stw	ra,4(sp)
  810464:	df000015 	stw	fp,0(sp)
  810468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81046c:	d0a00b17 	ldw	r2,-32724(gp)
  810470:	10000326 	beq	r2,zero,810480 <alt_get_errno+0x24>
  810474:	d0a00b17 	ldw	r2,-32724(gp)
  810478:	103ee83a 	callr	r2
  81047c:	00000106 	br	810484 <alt_get_errno+0x28>
  810480:	d0a7a704 	addi	r2,gp,-24932
}
  810484:	e037883a 	mov	sp,fp
  810488:	dfc00117 	ldw	ra,4(sp)
  81048c:	df000017 	ldw	fp,0(sp)
  810490:	dec00204 	addi	sp,sp,8
  810494:	f800283a 	ret

00810498 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  810498:	defff904 	addi	sp,sp,-28
  81049c:	dfc00615 	stw	ra,24(sp)
  8104a0:	df000515 	stw	fp,20(sp)
  8104a4:	df000504 	addi	fp,sp,20
  8104a8:	e13ffd15 	stw	r4,-12(fp)
  8104ac:	e17ffe15 	stw	r5,-8(fp)
  8104b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8104b4:	e0bffd17 	ldw	r2,-12(fp)
  8104b8:	10000616 	blt	r2,zero,8104d4 <write+0x3c>
  8104bc:	e0bffd17 	ldw	r2,-12(fp)
  8104c0:	10c00324 	muli	r3,r2,12
  8104c4:	00802074 	movhi	r2,129
  8104c8:	10929b04 	addi	r2,r2,19052
  8104cc:	1885883a 	add	r2,r3,r2
  8104d0:	00000106 	br	8104d8 <write+0x40>
  8104d4:	0005883a 	mov	r2,zero
  8104d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8104dc:	e0bffb17 	ldw	r2,-20(fp)
  8104e0:	10002126 	beq	r2,zero,810568 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8104e4:	e0bffb17 	ldw	r2,-20(fp)
  8104e8:	10800217 	ldw	r2,8(r2)
  8104ec:	108000cc 	andi	r2,r2,3
  8104f0:	10001826 	beq	r2,zero,810554 <write+0xbc>
  8104f4:	e0bffb17 	ldw	r2,-20(fp)
  8104f8:	10800017 	ldw	r2,0(r2)
  8104fc:	10800617 	ldw	r2,24(r2)
  810500:	10001426 	beq	r2,zero,810554 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  810504:	e0bffb17 	ldw	r2,-20(fp)
  810508:	10800017 	ldw	r2,0(r2)
  81050c:	10800617 	ldw	r2,24(r2)
  810510:	e0ffff17 	ldw	r3,-4(fp)
  810514:	180d883a 	mov	r6,r3
  810518:	e17ffe17 	ldw	r5,-8(fp)
  81051c:	e13ffb17 	ldw	r4,-20(fp)
  810520:	103ee83a 	callr	r2
  810524:	e0bffc15 	stw	r2,-16(fp)
  810528:	e0bffc17 	ldw	r2,-16(fp)
  81052c:	1000070e 	bge	r2,zero,81054c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  810530:	081045c0 	call	81045c <alt_get_errno>
  810534:	1007883a 	mov	r3,r2
  810538:	e0bffc17 	ldw	r2,-16(fp)
  81053c:	0085c83a 	sub	r2,zero,r2
  810540:	18800015 	stw	r2,0(r3)
        return -1;
  810544:	00bfffc4 	movi	r2,-1
  810548:	00000c06 	br	81057c <write+0xe4>
      }
      return rval;
  81054c:	e0bffc17 	ldw	r2,-16(fp)
  810550:	00000a06 	br	81057c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810554:	081045c0 	call	81045c <alt_get_errno>
  810558:	1007883a 	mov	r3,r2
  81055c:	00800344 	movi	r2,13
  810560:	18800015 	stw	r2,0(r3)
  810564:	00000406 	br	810578 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810568:	081045c0 	call	81045c <alt_get_errno>
  81056c:	1007883a 	mov	r3,r2
  810570:	00801444 	movi	r2,81
  810574:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810578:	00bfffc4 	movi	r2,-1
}
  81057c:	e037883a 	mov	sp,fp
  810580:	dfc00117 	ldw	ra,4(sp)
  810584:	df000017 	ldw	fp,0(sp)
  810588:	dec00204 	addi	sp,sp,8
  81058c:	f800283a 	ret

00810590 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810590:	defffd04 	addi	sp,sp,-12
  810594:	dfc00215 	stw	ra,8(sp)
  810598:	df000115 	stw	fp,4(sp)
  81059c:	df000104 	addi	fp,sp,4
  8105a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8105a4:	d1600804 	addi	r5,gp,-32736
  8105a8:	e13fff17 	ldw	r4,-4(fp)
  8105ac:	0812a2c0 	call	812a2c <alt_dev_llist_insert>
}
  8105b0:	e037883a 	mov	sp,fp
  8105b4:	dfc00117 	ldw	ra,4(sp)
  8105b8:	df000017 	ldw	fp,0(sp)
  8105bc:	dec00204 	addi	sp,sp,8
  8105c0:	f800283a 	ret

008105c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8105c4:	defffd04 	addi	sp,sp,-12
  8105c8:	dfc00215 	stw	ra,8(sp)
  8105cc:	df000115 	stw	fp,4(sp)
  8105d0:	df000104 	addi	fp,sp,4
  8105d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8105d8:	08132280 	call	813228 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8105dc:	00800044 	movi	r2,1
  8105e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8105e4:	0001883a 	nop
  8105e8:	e037883a 	mov	sp,fp
  8105ec:	dfc00117 	ldw	ra,4(sp)
  8105f0:	df000017 	ldw	fp,0(sp)
  8105f4:	dec00204 	addi	sp,sp,8
  8105f8:	f800283a 	ret

008105fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8105fc:	defffe04 	addi	sp,sp,-8
  810600:	dfc00115 	stw	ra,4(sp)
  810604:	df000015 	stw	fp,0(sp)
  810608:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  81060c:	01c0fa04 	movi	r7,1000
  810610:	01800084 	movi	r6,2
  810614:	000b883a 	mov	r5,zero
  810618:	01004434 	movhi	r4,272
  81061c:	21040804 	addi	r4,r4,4128
  810620:	08120540 	call	812054 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810624:	01800044 	movi	r6,1
  810628:	000b883a 	mov	r5,zero
  81062c:	01002074 	movhi	r4,129
  810630:	21130504 	addi	r4,r4,19476
  810634:	08107fc0 	call	8107fc <altera_avalon_jtag_uart_init>
  810638:	01002074 	movhi	r4,129
  81063c:	2112fb04 	addi	r4,r4,19436
  810640:	08105900 	call	810590 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  810644:	01002074 	movhi	r4,129
  810648:	21171d04 	addi	r4,r4,23668
  81064c:	0811e480 	call	811e48 <altera_avalon_lcd_16207_init>
  810650:	01002074 	movhi	r4,129
  810654:	21171304 	addi	r4,r4,23628
  810658:	08105900 	call	810590 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  81065c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  810660:	000d883a 	mov	r6,zero
  810664:	000b883a 	mov	r5,zero
  810668:	01002074 	movhi	r4,129
  81066c:	21176504 	addi	r4,r4,23956
  810670:	08121e00 	call	8121e0 <altera_avalon_uart_init>
  810674:	01002074 	movhi	r4,129
  810678:	21175b04 	addi	r4,r4,23916
  81067c:	08105900 	call	810590 <alt_dev_reg>
}
  810680:	0001883a 	nop
  810684:	e037883a 	mov	sp,fp
  810688:	dfc00117 	ldw	ra,4(sp)
  81068c:	df000017 	ldw	fp,0(sp)
  810690:	dec00204 	addi	sp,sp,8
  810694:	f800283a 	ret

00810698 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810698:	defffa04 	addi	sp,sp,-24
  81069c:	dfc00515 	stw	ra,20(sp)
  8106a0:	df000415 	stw	fp,16(sp)
  8106a4:	df000404 	addi	fp,sp,16
  8106a8:	e13ffd15 	stw	r4,-12(fp)
  8106ac:	e17ffe15 	stw	r5,-8(fp)
  8106b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8106b4:	e0bffd17 	ldw	r2,-12(fp)
  8106b8:	10800017 	ldw	r2,0(r2)
  8106bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8106c0:	e0bffc17 	ldw	r2,-16(fp)
  8106c4:	10c00a04 	addi	r3,r2,40
  8106c8:	e0bffd17 	ldw	r2,-12(fp)
  8106cc:	10800217 	ldw	r2,8(r2)
  8106d0:	100f883a 	mov	r7,r2
  8106d4:	e1bfff17 	ldw	r6,-4(fp)
  8106d8:	e17ffe17 	ldw	r5,-8(fp)
  8106dc:	1809883a 	mov	r4,r3
  8106e0:	0810cc00 	call	810cc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8106e4:	e037883a 	mov	sp,fp
  8106e8:	dfc00117 	ldw	ra,4(sp)
  8106ec:	df000017 	ldw	fp,0(sp)
  8106f0:	dec00204 	addi	sp,sp,8
  8106f4:	f800283a 	ret

008106f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8106f8:	defffa04 	addi	sp,sp,-24
  8106fc:	dfc00515 	stw	ra,20(sp)
  810700:	df000415 	stw	fp,16(sp)
  810704:	df000404 	addi	fp,sp,16
  810708:	e13ffd15 	stw	r4,-12(fp)
  81070c:	e17ffe15 	stw	r5,-8(fp)
  810710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810714:	e0bffd17 	ldw	r2,-12(fp)
  810718:	10800017 	ldw	r2,0(r2)
  81071c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810720:	e0bffc17 	ldw	r2,-16(fp)
  810724:	10c00a04 	addi	r3,r2,40
  810728:	e0bffd17 	ldw	r2,-12(fp)
  81072c:	10800217 	ldw	r2,8(r2)
  810730:	100f883a 	mov	r7,r2
  810734:	e1bfff17 	ldw	r6,-4(fp)
  810738:	e17ffe17 	ldw	r5,-8(fp)
  81073c:	1809883a 	mov	r4,r3
  810740:	0810edc0 	call	810edc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810744:	e037883a 	mov	sp,fp
  810748:	dfc00117 	ldw	ra,4(sp)
  81074c:	df000017 	ldw	fp,0(sp)
  810750:	dec00204 	addi	sp,sp,8
  810754:	f800283a 	ret

00810758 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810758:	defffc04 	addi	sp,sp,-16
  81075c:	dfc00315 	stw	ra,12(sp)
  810760:	df000215 	stw	fp,8(sp)
  810764:	df000204 	addi	fp,sp,8
  810768:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81076c:	e0bfff17 	ldw	r2,-4(fp)
  810770:	10800017 	ldw	r2,0(r2)
  810774:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810778:	e0bffe17 	ldw	r2,-8(fp)
  81077c:	10c00a04 	addi	r3,r2,40
  810780:	e0bfff17 	ldw	r2,-4(fp)
  810784:	10800217 	ldw	r2,8(r2)
  810788:	100b883a 	mov	r5,r2
  81078c:	1809883a 	mov	r4,r3
  810790:	0810b680 	call	810b68 <altera_avalon_jtag_uart_close>
}
  810794:	e037883a 	mov	sp,fp
  810798:	dfc00117 	ldw	ra,4(sp)
  81079c:	df000017 	ldw	fp,0(sp)
  8107a0:	dec00204 	addi	sp,sp,8
  8107a4:	f800283a 	ret

008107a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8107a8:	defffa04 	addi	sp,sp,-24
  8107ac:	dfc00515 	stw	ra,20(sp)
  8107b0:	df000415 	stw	fp,16(sp)
  8107b4:	df000404 	addi	fp,sp,16
  8107b8:	e13ffd15 	stw	r4,-12(fp)
  8107bc:	e17ffe15 	stw	r5,-8(fp)
  8107c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8107c4:	e0bffd17 	ldw	r2,-12(fp)
  8107c8:	10800017 	ldw	r2,0(r2)
  8107cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8107d0:	e0bffc17 	ldw	r2,-16(fp)
  8107d4:	10800a04 	addi	r2,r2,40
  8107d8:	e1bfff17 	ldw	r6,-4(fp)
  8107dc:	e17ffe17 	ldw	r5,-8(fp)
  8107e0:	1009883a 	mov	r4,r2
  8107e4:	0810bd00 	call	810bd0 <altera_avalon_jtag_uart_ioctl>
}
  8107e8:	e037883a 	mov	sp,fp
  8107ec:	dfc00117 	ldw	ra,4(sp)
  8107f0:	df000017 	ldw	fp,0(sp)
  8107f4:	dec00204 	addi	sp,sp,8
  8107f8:	f800283a 	ret

008107fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8107fc:	defffa04 	addi	sp,sp,-24
  810800:	dfc00515 	stw	ra,20(sp)
  810804:	df000415 	stw	fp,16(sp)
  810808:	df000404 	addi	fp,sp,16
  81080c:	e13ffd15 	stw	r4,-12(fp)
  810810:	e17ffe15 	stw	r5,-8(fp)
  810814:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810818:	e0bffd17 	ldw	r2,-12(fp)
  81081c:	00c00044 	movi	r3,1
  810820:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810824:	e0bffd17 	ldw	r2,-12(fp)
  810828:	10800017 	ldw	r2,0(r2)
  81082c:	10800104 	addi	r2,r2,4
  810830:	1007883a 	mov	r3,r2
  810834:	e0bffd17 	ldw	r2,-12(fp)
  810838:	10800817 	ldw	r2,32(r2)
  81083c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810840:	e0bffe17 	ldw	r2,-8(fp)
  810844:	e0ffff17 	ldw	r3,-4(fp)
  810848:	d8000015 	stw	zero,0(sp)
  81084c:	e1fffd17 	ldw	r7,-12(fp)
  810850:	01802074 	movhi	r6,129
  810854:	31822f04 	addi	r6,r6,2236
  810858:	180b883a 	mov	r5,r3
  81085c:	1009883a 	mov	r4,r2
  810860:	0812bc40 	call	812bc4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810864:	e0bffd17 	ldw	r2,-12(fp)
  810868:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81086c:	e0bffd17 	ldw	r2,-12(fp)
  810870:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  810874:	d0e7ab17 	ldw	r3,-24916(gp)
  810878:	e1fffd17 	ldw	r7,-12(fp)
  81087c:	01802074 	movhi	r6,129
  810880:	3182b204 	addi	r6,r6,2760
  810884:	180b883a 	mov	r5,r3
  810888:	1009883a 	mov	r4,r2
  81088c:	080f97c0 	call	80f97c <alt_alarm_start>
  810890:	1000040e 	bge	r2,zero,8108a4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810894:	e0fffd17 	ldw	r3,-12(fp)
  810898:	00a00034 	movhi	r2,32768
  81089c:	10bfffc4 	addi	r2,r2,-1
  8108a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8108a4:	0001883a 	nop
  8108a8:	e037883a 	mov	sp,fp
  8108ac:	dfc00117 	ldw	ra,4(sp)
  8108b0:	df000017 	ldw	fp,0(sp)
  8108b4:	dec00204 	addi	sp,sp,8
  8108b8:	f800283a 	ret

008108bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8108bc:	defff804 	addi	sp,sp,-32
  8108c0:	df000715 	stw	fp,28(sp)
  8108c4:	df000704 	addi	fp,sp,28
  8108c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8108cc:	e0bfff17 	ldw	r2,-4(fp)
  8108d0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  8108d4:	e0bffb17 	ldw	r2,-20(fp)
  8108d8:	10800017 	ldw	r2,0(r2)
  8108dc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8108e0:	e0bffc17 	ldw	r2,-16(fp)
  8108e4:	10800104 	addi	r2,r2,4
  8108e8:	10800037 	ldwio	r2,0(r2)
  8108ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8108f0:	e0bffd17 	ldw	r2,-12(fp)
  8108f4:	1080c00c 	andi	r2,r2,768
  8108f8:	10006d26 	beq	r2,zero,810ab0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8108fc:	e0bffd17 	ldw	r2,-12(fp)
  810900:	1080400c 	andi	r2,r2,256
  810904:	10003526 	beq	r2,zero,8109dc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810908:	00800074 	movhi	r2,1
  81090c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810910:	e0bffb17 	ldw	r2,-20(fp)
  810914:	10800a17 	ldw	r2,40(r2)
  810918:	10800044 	addi	r2,r2,1
  81091c:	1081ffcc 	andi	r2,r2,2047
  810920:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  810924:	e0bffb17 	ldw	r2,-20(fp)
  810928:	10c00b17 	ldw	r3,44(r2)
  81092c:	e0bffe17 	ldw	r2,-8(fp)
  810930:	18801526 	beq	r3,r2,810988 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810934:	e0bffc17 	ldw	r2,-16(fp)
  810938:	10800037 	ldwio	r2,0(r2)
  81093c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810940:	e0bff917 	ldw	r2,-28(fp)
  810944:	10a0000c 	andi	r2,r2,32768
  810948:	10001126 	beq	r2,zero,810990 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81094c:	e0bffb17 	ldw	r2,-20(fp)
  810950:	10800a17 	ldw	r2,40(r2)
  810954:	e0fff917 	ldw	r3,-28(fp)
  810958:	1809883a 	mov	r4,r3
  81095c:	e0fffb17 	ldw	r3,-20(fp)
  810960:	1885883a 	add	r2,r3,r2
  810964:	10800e04 	addi	r2,r2,56
  810968:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81096c:	e0bffb17 	ldw	r2,-20(fp)
  810970:	10800a17 	ldw	r2,40(r2)
  810974:	10800044 	addi	r2,r2,1
  810978:	10c1ffcc 	andi	r3,r2,2047
  81097c:	e0bffb17 	ldw	r2,-20(fp)
  810980:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  810984:	003fe206 	br	810910 <__alt_mem_onchip_mem+0xff790910>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  810988:	0001883a 	nop
  81098c:	00000106 	br	810994 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810990:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810994:	e0bff917 	ldw	r2,-28(fp)
  810998:	10bfffec 	andhi	r2,r2,65535
  81099c:	10000f26 	beq	r2,zero,8109dc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8109a0:	e0bffb17 	ldw	r2,-20(fp)
  8109a4:	10c00817 	ldw	r3,32(r2)
  8109a8:	00bfff84 	movi	r2,-2
  8109ac:	1886703a 	and	r3,r3,r2
  8109b0:	e0bffb17 	ldw	r2,-20(fp)
  8109b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8109b8:	e0bffc17 	ldw	r2,-16(fp)
  8109bc:	10800104 	addi	r2,r2,4
  8109c0:	1007883a 	mov	r3,r2
  8109c4:	e0bffb17 	ldw	r2,-20(fp)
  8109c8:	10800817 	ldw	r2,32(r2)
  8109cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8109d0:	e0bffc17 	ldw	r2,-16(fp)
  8109d4:	10800104 	addi	r2,r2,4
  8109d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8109dc:	e0bffd17 	ldw	r2,-12(fp)
  8109e0:	1080800c 	andi	r2,r2,512
  8109e4:	103fbe26 	beq	r2,zero,8108e0 <__alt_mem_onchip_mem+0xff7908e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8109e8:	e0bffd17 	ldw	r2,-12(fp)
  8109ec:	1004d43a 	srli	r2,r2,16
  8109f0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8109f4:	00001406 	br	810a48 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8109f8:	e0bffc17 	ldw	r2,-16(fp)
  8109fc:	e0fffb17 	ldw	r3,-20(fp)
  810a00:	18c00d17 	ldw	r3,52(r3)
  810a04:	e13ffb17 	ldw	r4,-20(fp)
  810a08:	20c7883a 	add	r3,r4,r3
  810a0c:	18c20e04 	addi	r3,r3,2104
  810a10:	18c00003 	ldbu	r3,0(r3)
  810a14:	18c03fcc 	andi	r3,r3,255
  810a18:	18c0201c 	xori	r3,r3,128
  810a1c:	18ffe004 	addi	r3,r3,-128
  810a20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810a24:	e0bffb17 	ldw	r2,-20(fp)
  810a28:	10800d17 	ldw	r2,52(r2)
  810a2c:	10800044 	addi	r2,r2,1
  810a30:	10c1ffcc 	andi	r3,r2,2047
  810a34:	e0bffb17 	ldw	r2,-20(fp)
  810a38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810a3c:	e0bffa17 	ldw	r2,-24(fp)
  810a40:	10bfffc4 	addi	r2,r2,-1
  810a44:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810a48:	e0bffa17 	ldw	r2,-24(fp)
  810a4c:	10000526 	beq	r2,zero,810a64 <altera_avalon_jtag_uart_irq+0x1a8>
  810a50:	e0bffb17 	ldw	r2,-20(fp)
  810a54:	10c00d17 	ldw	r3,52(r2)
  810a58:	e0bffb17 	ldw	r2,-20(fp)
  810a5c:	10800c17 	ldw	r2,48(r2)
  810a60:	18bfe51e 	bne	r3,r2,8109f8 <__alt_mem_onchip_mem+0xff7909f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810a64:	e0bffa17 	ldw	r2,-24(fp)
  810a68:	103f9d26 	beq	r2,zero,8108e0 <__alt_mem_onchip_mem+0xff7908e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810a6c:	e0bffb17 	ldw	r2,-20(fp)
  810a70:	10c00817 	ldw	r3,32(r2)
  810a74:	00bfff44 	movi	r2,-3
  810a78:	1886703a 	and	r3,r3,r2
  810a7c:	e0bffb17 	ldw	r2,-20(fp)
  810a80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810a84:	e0bffb17 	ldw	r2,-20(fp)
  810a88:	10800017 	ldw	r2,0(r2)
  810a8c:	10800104 	addi	r2,r2,4
  810a90:	1007883a 	mov	r3,r2
  810a94:	e0bffb17 	ldw	r2,-20(fp)
  810a98:	10800817 	ldw	r2,32(r2)
  810a9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810aa0:	e0bffc17 	ldw	r2,-16(fp)
  810aa4:	10800104 	addi	r2,r2,4
  810aa8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810aac:	003f8c06 	br	8108e0 <__alt_mem_onchip_mem+0xff7908e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810ab0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  810ab4:	0001883a 	nop
  810ab8:	e037883a 	mov	sp,fp
  810abc:	df000017 	ldw	fp,0(sp)
  810ac0:	dec00104 	addi	sp,sp,4
  810ac4:	f800283a 	ret

00810ac8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810ac8:	defff804 	addi	sp,sp,-32
  810acc:	df000715 	stw	fp,28(sp)
  810ad0:	df000704 	addi	fp,sp,28
  810ad4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810ad8:	e0bffb17 	ldw	r2,-20(fp)
  810adc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810ae0:	e0bff917 	ldw	r2,-28(fp)
  810ae4:	10800017 	ldw	r2,0(r2)
  810ae8:	10800104 	addi	r2,r2,4
  810aec:	10800037 	ldwio	r2,0(r2)
  810af0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810af4:	e0bffa17 	ldw	r2,-24(fp)
  810af8:	1081000c 	andi	r2,r2,1024
  810afc:	10000b26 	beq	r2,zero,810b2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810b00:	e0bff917 	ldw	r2,-28(fp)
  810b04:	10800017 	ldw	r2,0(r2)
  810b08:	10800104 	addi	r2,r2,4
  810b0c:	1007883a 	mov	r3,r2
  810b10:	e0bff917 	ldw	r2,-28(fp)
  810b14:	10800817 	ldw	r2,32(r2)
  810b18:	10810014 	ori	r2,r2,1024
  810b1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810b20:	e0bff917 	ldw	r2,-28(fp)
  810b24:	10000915 	stw	zero,36(r2)
  810b28:	00000a06 	br	810b54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810b2c:	e0bff917 	ldw	r2,-28(fp)
  810b30:	10c00917 	ldw	r3,36(r2)
  810b34:	00a00034 	movhi	r2,32768
  810b38:	10bfff04 	addi	r2,r2,-4
  810b3c:	10c00536 	bltu	r2,r3,810b54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810b40:	e0bff917 	ldw	r2,-28(fp)
  810b44:	10800917 	ldw	r2,36(r2)
  810b48:	10c00044 	addi	r3,r2,1
  810b4c:	e0bff917 	ldw	r2,-28(fp)
  810b50:	10c00915 	stw	r3,36(r2)
  810b54:	d0a7ab17 	ldw	r2,-24916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  810b58:	e037883a 	mov	sp,fp
  810b5c:	df000017 	ldw	fp,0(sp)
  810b60:	dec00104 	addi	sp,sp,4
  810b64:	f800283a 	ret

00810b68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  810b68:	defffd04 	addi	sp,sp,-12
  810b6c:	df000215 	stw	fp,8(sp)
  810b70:	df000204 	addi	fp,sp,8
  810b74:	e13ffe15 	stw	r4,-8(fp)
  810b78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810b7c:	00000506 	br	810b94 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  810b80:	e0bfff17 	ldw	r2,-4(fp)
  810b84:	1090000c 	andi	r2,r2,16384
  810b88:	10000226 	beq	r2,zero,810b94 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810b8c:	00bffd44 	movi	r2,-11
  810b90:	00000b06 	br	810bc0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810b94:	e0bffe17 	ldw	r2,-8(fp)
  810b98:	10c00d17 	ldw	r3,52(r2)
  810b9c:	e0bffe17 	ldw	r2,-8(fp)
  810ba0:	10800c17 	ldw	r2,48(r2)
  810ba4:	18800526 	beq	r3,r2,810bbc <altera_avalon_jtag_uart_close+0x54>
  810ba8:	e0bffe17 	ldw	r2,-8(fp)
  810bac:	10c00917 	ldw	r3,36(r2)
  810bb0:	e0bffe17 	ldw	r2,-8(fp)
  810bb4:	10800117 	ldw	r2,4(r2)
  810bb8:	18bff136 	bltu	r3,r2,810b80 <__alt_mem_onchip_mem+0xff790b80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810bbc:	0005883a 	mov	r2,zero
}
  810bc0:	e037883a 	mov	sp,fp
  810bc4:	df000017 	ldw	fp,0(sp)
  810bc8:	dec00104 	addi	sp,sp,4
  810bcc:	f800283a 	ret

00810bd0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810bd0:	defffa04 	addi	sp,sp,-24
  810bd4:	df000515 	stw	fp,20(sp)
  810bd8:	df000504 	addi	fp,sp,20
  810bdc:	e13ffd15 	stw	r4,-12(fp)
  810be0:	e17ffe15 	stw	r5,-8(fp)
  810be4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810be8:	00bff9c4 	movi	r2,-25
  810bec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810bf0:	e0bffe17 	ldw	r2,-8(fp)
  810bf4:	10da8060 	cmpeqi	r3,r2,27137
  810bf8:	1800031e 	bne	r3,zero,810c08 <altera_avalon_jtag_uart_ioctl+0x38>
  810bfc:	109a80a0 	cmpeqi	r2,r2,27138
  810c00:	1000181e 	bne	r2,zero,810c64 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810c04:	00002906 	br	810cac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810c08:	e0bffd17 	ldw	r2,-12(fp)
  810c0c:	10c00117 	ldw	r3,4(r2)
  810c10:	00a00034 	movhi	r2,32768
  810c14:	10bfffc4 	addi	r2,r2,-1
  810c18:	18802126 	beq	r3,r2,810ca0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810c1c:	e0bfff17 	ldw	r2,-4(fp)
  810c20:	10800017 	ldw	r2,0(r2)
  810c24:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810c28:	e0bffc17 	ldw	r2,-16(fp)
  810c2c:	10800090 	cmplti	r2,r2,2
  810c30:	1000061e 	bne	r2,zero,810c4c <altera_avalon_jtag_uart_ioctl+0x7c>
  810c34:	e0fffc17 	ldw	r3,-16(fp)
  810c38:	00a00034 	movhi	r2,32768
  810c3c:	10bfffc4 	addi	r2,r2,-1
  810c40:	18800226 	beq	r3,r2,810c4c <altera_avalon_jtag_uart_ioctl+0x7c>
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	00000206 	br	810c54 <altera_avalon_jtag_uart_ioctl+0x84>
  810c4c:	00a00034 	movhi	r2,32768
  810c50:	10bfff84 	addi	r2,r2,-2
  810c54:	e0fffd17 	ldw	r3,-12(fp)
  810c58:	18800115 	stw	r2,4(r3)
      rc = 0;
  810c5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810c60:	00000f06 	br	810ca0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  810c64:	e0bffd17 	ldw	r2,-12(fp)
  810c68:	10c00117 	ldw	r3,4(r2)
  810c6c:	00a00034 	movhi	r2,32768
  810c70:	10bfffc4 	addi	r2,r2,-1
  810c74:	18800c26 	beq	r3,r2,810ca8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  810c78:	e0bffd17 	ldw	r2,-12(fp)
  810c7c:	10c00917 	ldw	r3,36(r2)
  810c80:	e0bffd17 	ldw	r2,-12(fp)
  810c84:	10800117 	ldw	r2,4(r2)
  810c88:	1885803a 	cmpltu	r2,r3,r2
  810c8c:	10c03fcc 	andi	r3,r2,255
  810c90:	e0bfff17 	ldw	r2,-4(fp)
  810c94:	10c00015 	stw	r3,0(r2)
      rc = 0;
  810c98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810c9c:	00000206 	br	810ca8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  810ca0:	0001883a 	nop
  810ca4:	00000106 	br	810cac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  810ca8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  810cac:	e0bffb17 	ldw	r2,-20(fp)
}
  810cb0:	e037883a 	mov	sp,fp
  810cb4:	df000017 	ldw	fp,0(sp)
  810cb8:	dec00104 	addi	sp,sp,4
  810cbc:	f800283a 	ret

00810cc0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810cc0:	defff304 	addi	sp,sp,-52
  810cc4:	dfc00c15 	stw	ra,48(sp)
  810cc8:	df000b15 	stw	fp,44(sp)
  810ccc:	df000b04 	addi	fp,sp,44
  810cd0:	e13ffc15 	stw	r4,-16(fp)
  810cd4:	e17ffd15 	stw	r5,-12(fp)
  810cd8:	e1bffe15 	stw	r6,-8(fp)
  810cdc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810ce0:	e0bffd17 	ldw	r2,-12(fp)
  810ce4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810ce8:	00004706 	br	810e08 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810cec:	e0bffc17 	ldw	r2,-16(fp)
  810cf0:	10800a17 	ldw	r2,40(r2)
  810cf4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  810cf8:	e0bffc17 	ldw	r2,-16(fp)
  810cfc:	10800b17 	ldw	r2,44(r2)
  810d00:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  810d04:	e0fff717 	ldw	r3,-36(fp)
  810d08:	e0bff817 	ldw	r2,-32(fp)
  810d0c:	18800536 	bltu	r3,r2,810d24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810d10:	e0fff717 	ldw	r3,-36(fp)
  810d14:	e0bff817 	ldw	r2,-32(fp)
  810d18:	1885c83a 	sub	r2,r3,r2
  810d1c:	e0bff615 	stw	r2,-40(fp)
  810d20:	00000406 	br	810d34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810d24:	00c20004 	movi	r3,2048
  810d28:	e0bff817 	ldw	r2,-32(fp)
  810d2c:	1885c83a 	sub	r2,r3,r2
  810d30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  810d34:	e0bff617 	ldw	r2,-40(fp)
  810d38:	10001e26 	beq	r2,zero,810db4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810d3c:	e0fffe17 	ldw	r3,-8(fp)
  810d40:	e0bff617 	ldw	r2,-40(fp)
  810d44:	1880022e 	bgeu	r3,r2,810d50 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  810d48:	e0bffe17 	ldw	r2,-8(fp)
  810d4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  810d50:	e0bffc17 	ldw	r2,-16(fp)
  810d54:	10c00e04 	addi	r3,r2,56
  810d58:	e0bff817 	ldw	r2,-32(fp)
  810d5c:	1885883a 	add	r2,r3,r2
  810d60:	e1bff617 	ldw	r6,-40(fp)
  810d64:	100b883a 	mov	r5,r2
  810d68:	e13ff517 	ldw	r4,-44(fp)
  810d6c:	0808cdc0 	call	808cdc <memcpy>
      ptr   += n;
  810d70:	e0fff517 	ldw	r3,-44(fp)
  810d74:	e0bff617 	ldw	r2,-40(fp)
  810d78:	1885883a 	add	r2,r3,r2
  810d7c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  810d80:	e0fffe17 	ldw	r3,-8(fp)
  810d84:	e0bff617 	ldw	r2,-40(fp)
  810d88:	1885c83a 	sub	r2,r3,r2
  810d8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810d90:	e0fff817 	ldw	r3,-32(fp)
  810d94:	e0bff617 	ldw	r2,-40(fp)
  810d98:	1885883a 	add	r2,r3,r2
  810d9c:	10c1ffcc 	andi	r3,r2,2047
  810da0:	e0bffc17 	ldw	r2,-16(fp)
  810da4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  810da8:	e0bffe17 	ldw	r2,-8(fp)
  810dac:	00bfcf16 	blt	zero,r2,810cec <__alt_mem_onchip_mem+0xff790cec>
  810db0:	00000106 	br	810db8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  810db4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  810db8:	e0fff517 	ldw	r3,-44(fp)
  810dbc:	e0bffd17 	ldw	r2,-12(fp)
  810dc0:	1880141e 	bne	r3,r2,810e14 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810dc4:	e0bfff17 	ldw	r2,-4(fp)
  810dc8:	1090000c 	andi	r2,r2,16384
  810dcc:	1000131e 	bne	r2,zero,810e1c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810dd0:	0001883a 	nop
  810dd4:	e0bffc17 	ldw	r2,-16(fp)
  810dd8:	10c00a17 	ldw	r3,40(r2)
  810ddc:	e0bff717 	ldw	r2,-36(fp)
  810de0:	1880051e 	bne	r3,r2,810df8 <altera_avalon_jtag_uart_read+0x138>
  810de4:	e0bffc17 	ldw	r2,-16(fp)
  810de8:	10c00917 	ldw	r3,36(r2)
  810dec:	e0bffc17 	ldw	r2,-16(fp)
  810df0:	10800117 	ldw	r2,4(r2)
  810df4:	18bff736 	bltu	r3,r2,810dd4 <__alt_mem_onchip_mem+0xff790dd4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810df8:	e0bffc17 	ldw	r2,-16(fp)
  810dfc:	10c00a17 	ldw	r3,40(r2)
  810e00:	e0bff717 	ldw	r2,-36(fp)
  810e04:	18800726 	beq	r3,r2,810e24 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810e08:	e0bffe17 	ldw	r2,-8(fp)
  810e0c:	00bfb716 	blt	zero,r2,810cec <__alt_mem_onchip_mem+0xff790cec>
  810e10:	00000506 	br	810e28 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  810e14:	0001883a 	nop
  810e18:	00000306 	br	810e28 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  810e1c:	0001883a 	nop
  810e20:	00000106 	br	810e28 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  810e24:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810e28:	e0fff517 	ldw	r3,-44(fp)
  810e2c:	e0bffd17 	ldw	r2,-12(fp)
  810e30:	18801826 	beq	r3,r2,810e94 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e34:	0005303a 	rdctl	r2,status
  810e38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e3c:	e0fffb17 	ldw	r3,-20(fp)
  810e40:	00bfff84 	movi	r2,-2
  810e44:	1884703a 	and	r2,r3,r2
  810e48:	1001703a 	wrctl	status,r2
  
  return context;
  810e4c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  810e50:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810e54:	e0bffc17 	ldw	r2,-16(fp)
  810e58:	10800817 	ldw	r2,32(r2)
  810e5c:	10c00054 	ori	r3,r2,1
  810e60:	e0bffc17 	ldw	r2,-16(fp)
  810e64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810e68:	e0bffc17 	ldw	r2,-16(fp)
  810e6c:	10800017 	ldw	r2,0(r2)
  810e70:	10800104 	addi	r2,r2,4
  810e74:	1007883a 	mov	r3,r2
  810e78:	e0bffc17 	ldw	r2,-16(fp)
  810e7c:	10800817 	ldw	r2,32(r2)
  810e80:	18800035 	stwio	r2,0(r3)
  810e84:	e0bffa17 	ldw	r2,-24(fp)
  810e88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e8c:	e0bff917 	ldw	r2,-28(fp)
  810e90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  810e94:	e0fff517 	ldw	r3,-44(fp)
  810e98:	e0bffd17 	ldw	r2,-12(fp)
  810e9c:	18800426 	beq	r3,r2,810eb0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  810ea0:	e0fff517 	ldw	r3,-44(fp)
  810ea4:	e0bffd17 	ldw	r2,-12(fp)
  810ea8:	1885c83a 	sub	r2,r3,r2
  810eac:	00000606 	br	810ec8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  810eb0:	e0bfff17 	ldw	r2,-4(fp)
  810eb4:	1090000c 	andi	r2,r2,16384
  810eb8:	10000226 	beq	r2,zero,810ec4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  810ebc:	00bffd44 	movi	r2,-11
  810ec0:	00000106 	br	810ec8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  810ec4:	00bffec4 	movi	r2,-5
}
  810ec8:	e037883a 	mov	sp,fp
  810ecc:	dfc00117 	ldw	ra,4(sp)
  810ed0:	df000017 	ldw	fp,0(sp)
  810ed4:	dec00204 	addi	sp,sp,8
  810ed8:	f800283a 	ret

00810edc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810edc:	defff304 	addi	sp,sp,-52
  810ee0:	dfc00c15 	stw	ra,48(sp)
  810ee4:	df000b15 	stw	fp,44(sp)
  810ee8:	df000b04 	addi	fp,sp,44
  810eec:	e13ffc15 	stw	r4,-16(fp)
  810ef0:	e17ffd15 	stw	r5,-12(fp)
  810ef4:	e1bffe15 	stw	r6,-8(fp)
  810ef8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810efc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810f00:	e0bffd17 	ldw	r2,-12(fp)
  810f04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810f08:	00003706 	br	810fe8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810f0c:	e0bffc17 	ldw	r2,-16(fp)
  810f10:	10800c17 	ldw	r2,48(r2)
  810f14:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  810f18:	e0bffc17 	ldw	r2,-16(fp)
  810f1c:	10800d17 	ldw	r2,52(r2)
  810f20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  810f24:	e0fff917 	ldw	r3,-28(fp)
  810f28:	e0bff517 	ldw	r2,-44(fp)
  810f2c:	1880062e 	bgeu	r3,r2,810f48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810f30:	e0fff517 	ldw	r3,-44(fp)
  810f34:	e0bff917 	ldw	r2,-28(fp)
  810f38:	1885c83a 	sub	r2,r3,r2
  810f3c:	10bfffc4 	addi	r2,r2,-1
  810f40:	e0bff615 	stw	r2,-40(fp)
  810f44:	00000b06 	br	810f74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  810f48:	e0bff517 	ldw	r2,-44(fp)
  810f4c:	10000526 	beq	r2,zero,810f64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  810f50:	00c20004 	movi	r3,2048
  810f54:	e0bff917 	ldw	r2,-28(fp)
  810f58:	1885c83a 	sub	r2,r3,r2
  810f5c:	e0bff615 	stw	r2,-40(fp)
  810f60:	00000406 	br	810f74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  810f64:	00c1ffc4 	movi	r3,2047
  810f68:	e0bff917 	ldw	r2,-28(fp)
  810f6c:	1885c83a 	sub	r2,r3,r2
  810f70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  810f74:	e0bff617 	ldw	r2,-40(fp)
  810f78:	10001e26 	beq	r2,zero,810ff4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  810f7c:	e0fffe17 	ldw	r3,-8(fp)
  810f80:	e0bff617 	ldw	r2,-40(fp)
  810f84:	1880022e 	bgeu	r3,r2,810f90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  810f88:	e0bffe17 	ldw	r2,-8(fp)
  810f8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810f90:	e0bffc17 	ldw	r2,-16(fp)
  810f94:	10c20e04 	addi	r3,r2,2104
  810f98:	e0bff917 	ldw	r2,-28(fp)
  810f9c:	1885883a 	add	r2,r3,r2
  810fa0:	e1bff617 	ldw	r6,-40(fp)
  810fa4:	e17ffd17 	ldw	r5,-12(fp)
  810fa8:	1009883a 	mov	r4,r2
  810fac:	0808cdc0 	call	808cdc <memcpy>
      ptr   += n;
  810fb0:	e0fffd17 	ldw	r3,-12(fp)
  810fb4:	e0bff617 	ldw	r2,-40(fp)
  810fb8:	1885883a 	add	r2,r3,r2
  810fbc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810fc0:	e0fffe17 	ldw	r3,-8(fp)
  810fc4:	e0bff617 	ldw	r2,-40(fp)
  810fc8:	1885c83a 	sub	r2,r3,r2
  810fcc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810fd0:	e0fff917 	ldw	r3,-28(fp)
  810fd4:	e0bff617 	ldw	r2,-40(fp)
  810fd8:	1885883a 	add	r2,r3,r2
  810fdc:	10c1ffcc 	andi	r3,r2,2047
  810fe0:	e0bffc17 	ldw	r2,-16(fp)
  810fe4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810fe8:	e0bffe17 	ldw	r2,-8(fp)
  810fec:	00bfc716 	blt	zero,r2,810f0c <__alt_mem_onchip_mem+0xff790f0c>
  810ff0:	00000106 	br	810ff8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  810ff4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810ff8:	0005303a 	rdctl	r2,status
  810ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811000:	e0fffb17 	ldw	r3,-20(fp)
  811004:	00bfff84 	movi	r2,-2
  811008:	1884703a 	and	r2,r3,r2
  81100c:	1001703a 	wrctl	status,r2
  
  return context;
  811010:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811014:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811018:	e0bffc17 	ldw	r2,-16(fp)
  81101c:	10800817 	ldw	r2,32(r2)
  811020:	10c00094 	ori	r3,r2,2
  811024:	e0bffc17 	ldw	r2,-16(fp)
  811028:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81102c:	e0bffc17 	ldw	r2,-16(fp)
  811030:	10800017 	ldw	r2,0(r2)
  811034:	10800104 	addi	r2,r2,4
  811038:	1007883a 	mov	r3,r2
  81103c:	e0bffc17 	ldw	r2,-16(fp)
  811040:	10800817 	ldw	r2,32(r2)
  811044:	18800035 	stwio	r2,0(r3)
  811048:	e0bffa17 	ldw	r2,-24(fp)
  81104c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811050:	e0bff817 	ldw	r2,-32(fp)
  811054:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811058:	e0bffe17 	ldw	r2,-8(fp)
  81105c:	0080100e 	bge	zero,r2,8110a0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  811060:	e0bfff17 	ldw	r2,-4(fp)
  811064:	1090000c 	andi	r2,r2,16384
  811068:	1000101e 	bne	r2,zero,8110ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81106c:	0001883a 	nop
  811070:	e0bffc17 	ldw	r2,-16(fp)
  811074:	10c00d17 	ldw	r3,52(r2)
  811078:	e0bff517 	ldw	r2,-44(fp)
  81107c:	1880051e 	bne	r3,r2,811094 <altera_avalon_jtag_uart_write+0x1b8>
  811080:	e0bffc17 	ldw	r2,-16(fp)
  811084:	10c00917 	ldw	r3,36(r2)
  811088:	e0bffc17 	ldw	r2,-16(fp)
  81108c:	10800117 	ldw	r2,4(r2)
  811090:	18bff736 	bltu	r3,r2,811070 <__alt_mem_onchip_mem+0xff791070>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811094:	e0bffc17 	ldw	r2,-16(fp)
  811098:	10800917 	ldw	r2,36(r2)
  81109c:	1000051e 	bne	r2,zero,8110b4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8110a0:	e0bffe17 	ldw	r2,-8(fp)
  8110a4:	00bfd016 	blt	zero,r2,810fe8 <__alt_mem_onchip_mem+0xff790fe8>
  8110a8:	00000306 	br	8110b8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8110ac:	0001883a 	nop
  8110b0:	00000106 	br	8110b8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8110b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8110b8:	e0fffd17 	ldw	r3,-12(fp)
  8110bc:	e0bff717 	ldw	r2,-36(fp)
  8110c0:	18800426 	beq	r3,r2,8110d4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8110c4:	e0fffd17 	ldw	r3,-12(fp)
  8110c8:	e0bff717 	ldw	r2,-36(fp)
  8110cc:	1885c83a 	sub	r2,r3,r2
  8110d0:	00000606 	br	8110ec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8110d4:	e0bfff17 	ldw	r2,-4(fp)
  8110d8:	1090000c 	andi	r2,r2,16384
  8110dc:	10000226 	beq	r2,zero,8110e8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8110e0:	00bffd44 	movi	r2,-11
  8110e4:	00000106 	br	8110ec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8110e8:	00bffec4 	movi	r2,-5
}
  8110ec:	e037883a 	mov	sp,fp
  8110f0:	dfc00117 	ldw	ra,4(sp)
  8110f4:	df000017 	ldw	fp,0(sp)
  8110f8:	dec00204 	addi	sp,sp,8
  8110fc:	f800283a 	ret

00811100 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  811100:	defffa04 	addi	sp,sp,-24
  811104:	dfc00515 	stw	ra,20(sp)
  811108:	df000415 	stw	fp,16(sp)
  81110c:	df000404 	addi	fp,sp,16
  811110:	e13ffe15 	stw	r4,-8(fp)
  811114:	2805883a 	mov	r2,r5
  811118:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  81111c:	e0bffe17 	ldw	r2,-8(fp)
  811120:	10800017 	ldw	r2,0(r2)
  811124:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811128:	008003f4 	movhi	r2,15
  81112c:	10909004 	addi	r2,r2,16960
  811130:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  811134:	e0bffe17 	ldw	r2,-8(fp)
  811138:	10800803 	ldbu	r2,32(r2)
  81113c:	10803fcc 	andi	r2,r2,255
  811140:	1080201c 	xori	r2,r2,128
  811144:	10bfe004 	addi	r2,r2,-128
  811148:	1000151e 	bne	r2,zero,8111a0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81114c:	00000906 	br	811174 <lcd_write_command+0x74>
    if (--i == 0)
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	10bfffc4 	addi	r2,r2,-1
  811158:	e0bffc15 	stw	r2,-16(fp)
  81115c:	e0bffc17 	ldw	r2,-16(fp)
  811160:	1000041e 	bne	r2,zero,811174 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  811164:	e0bffe17 	ldw	r2,-8(fp)
  811168:	00c00044 	movi	r3,1
  81116c:	10c00805 	stb	r3,32(r2)
      return;
  811170:	00000c06 	br	8111a4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811174:	e0bffd17 	ldw	r2,-12(fp)
  811178:	10800104 	addi	r2,r2,4
  81117c:	10800037 	ldwio	r2,0(r2)
  811180:	1080200c 	andi	r2,r2,128
  811184:	103ff21e 	bne	r2,zero,811150 <__alt_mem_onchip_mem+0xff791150>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811188:	01001904 	movi	r4,100
  81118c:	08131f80 	call	8131f8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  811190:	e0bffd17 	ldw	r2,-12(fp)
  811194:	e0ffff03 	ldbu	r3,-4(fp)
  811198:	10c00035 	stwio	r3,0(r2)
  81119c:	00000106 	br	8111a4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8111a0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8111a4:	e037883a 	mov	sp,fp
  8111a8:	dfc00117 	ldw	ra,4(sp)
  8111ac:	df000017 	ldw	fp,0(sp)
  8111b0:	dec00204 	addi	sp,sp,8
  8111b4:	f800283a 	ret

008111b8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8111b8:	defffa04 	addi	sp,sp,-24
  8111bc:	dfc00515 	stw	ra,20(sp)
  8111c0:	df000415 	stw	fp,16(sp)
  8111c4:	df000404 	addi	fp,sp,16
  8111c8:	e13ffe15 	stw	r4,-8(fp)
  8111cc:	2805883a 	mov	r2,r5
  8111d0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8111d4:	e0bffe17 	ldw	r2,-8(fp)
  8111d8:	10800017 	ldw	r2,0(r2)
  8111dc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8111e0:	008003f4 	movhi	r2,15
  8111e4:	10909004 	addi	r2,r2,16960
  8111e8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8111ec:	e0bffe17 	ldw	r2,-8(fp)
  8111f0:	10800803 	ldbu	r2,32(r2)
  8111f4:	10803fcc 	andi	r2,r2,255
  8111f8:	1080201c 	xori	r2,r2,128
  8111fc:	10bfe004 	addi	r2,r2,-128
  811200:	10001d1e 	bne	r2,zero,811278 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811204:	00000906 	br	81122c <lcd_write_data+0x74>
    if (--i == 0)
  811208:	e0bffc17 	ldw	r2,-16(fp)
  81120c:	10bfffc4 	addi	r2,r2,-1
  811210:	e0bffc15 	stw	r2,-16(fp)
  811214:	e0bffc17 	ldw	r2,-16(fp)
  811218:	1000041e 	bne	r2,zero,81122c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  81121c:	e0bffe17 	ldw	r2,-8(fp)
  811220:	00c00044 	movi	r3,1
  811224:	10c00805 	stb	r3,32(r2)
      return;
  811228:	00001406 	br	81127c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81122c:	e0bffd17 	ldw	r2,-12(fp)
  811230:	10800104 	addi	r2,r2,4
  811234:	10800037 	ldwio	r2,0(r2)
  811238:	1080200c 	andi	r2,r2,128
  81123c:	103ff21e 	bne	r2,zero,811208 <__alt_mem_onchip_mem+0xff791208>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  811240:	01001904 	movi	r4,100
  811244:	08131f80 	call	8131f8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  811248:	e0bffd17 	ldw	r2,-12(fp)
  81124c:	10800204 	addi	r2,r2,8
  811250:	1007883a 	mov	r3,r2
  811254:	e0bfff03 	ldbu	r2,-4(fp)
  811258:	18800035 	stwio	r2,0(r3)

  sp->address++;
  81125c:	e0bffe17 	ldw	r2,-8(fp)
  811260:	108008c3 	ldbu	r2,35(r2)
  811264:	10800044 	addi	r2,r2,1
  811268:	1007883a 	mov	r3,r2
  81126c:	e0bffe17 	ldw	r2,-8(fp)
  811270:	10c008c5 	stb	r3,35(r2)
  811274:	00000106 	br	81127c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  811278:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  81127c:	e037883a 	mov	sp,fp
  811280:	dfc00117 	ldw	ra,4(sp)
  811284:	df000017 	ldw	fp,0(sp)
  811288:	dec00204 	addi	sp,sp,8
  81128c:	f800283a 	ret

00811290 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  811290:	defffc04 	addi	sp,sp,-16
  811294:	dfc00315 	stw	ra,12(sp)
  811298:	df000215 	stw	fp,8(sp)
  81129c:	df000204 	addi	fp,sp,8
  8112a0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8112a4:	01400044 	movi	r5,1
  8112a8:	e13fff17 	ldw	r4,-4(fp)
  8112ac:	08111000 	call	811100 <lcd_write_command>

  sp->x = 0;
  8112b0:	e0bfff17 	ldw	r2,-4(fp)
  8112b4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8112b8:	e0bfff17 	ldw	r2,-4(fp)
  8112bc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8112c0:	e0bfff17 	ldw	r2,-4(fp)
  8112c4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8112c8:	e03ffe15 	stw	zero,-8(fp)
  8112cc:	00001b06 	br	81133c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8112d0:	e0bffe17 	ldw	r2,-8(fp)
  8112d4:	108018e4 	muli	r2,r2,99
  8112d8:	10801004 	addi	r2,r2,64
  8112dc:	e0ffff17 	ldw	r3,-4(fp)
  8112e0:	1885883a 	add	r2,r3,r2
  8112e4:	01801444 	movi	r6,81
  8112e8:	01400804 	movi	r5,32
  8112ec:	1009883a 	mov	r4,r2
  8112f0:	0808f800 	call	808f80 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8112f4:	e0bffe17 	ldw	r2,-8(fp)
  8112f8:	108018e4 	muli	r2,r2,99
  8112fc:	10800c04 	addi	r2,r2,48
  811300:	e0ffff17 	ldw	r3,-4(fp)
  811304:	1885883a 	add	r2,r3,r2
  811308:	01800404 	movi	r6,16
  81130c:	01400804 	movi	r5,32
  811310:	1009883a 	mov	r4,r2
  811314:	0808f800 	call	808f80 <memset>
    sp->line[y].width = 0;
  811318:	e0ffff17 	ldw	r3,-4(fp)
  81131c:	e0bffe17 	ldw	r2,-8(fp)
  811320:	108018e4 	muli	r2,r2,99
  811324:	1885883a 	add	r2,r3,r2
  811328:	10802444 	addi	r2,r2,145
  81132c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811330:	e0bffe17 	ldw	r2,-8(fp)
  811334:	10800044 	addi	r2,r2,1
  811338:	e0bffe15 	stw	r2,-8(fp)
  81133c:	e0bffe17 	ldw	r2,-8(fp)
  811340:	10800090 	cmplti	r2,r2,2
  811344:	103fe21e 	bne	r2,zero,8112d0 <__alt_mem_onchip_mem+0xff7912d0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  811348:	0001883a 	nop
  81134c:	e037883a 	mov	sp,fp
  811350:	dfc00117 	ldw	ra,4(sp)
  811354:	df000017 	ldw	fp,0(sp)
  811358:	dec00204 	addi	sp,sp,8
  81135c:	f800283a 	ret

00811360 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  811360:	defff704 	addi	sp,sp,-36
  811364:	dfc00815 	stw	ra,32(sp)
  811368:	df000715 	stw	fp,28(sp)
  81136c:	df000704 	addi	fp,sp,28
  811370:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  811374:	e0bfff17 	ldw	r2,-4(fp)
  811378:	10800943 	ldbu	r2,37(r2)
  81137c:	10803fcc 	andi	r2,r2,255
  811380:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811384:	e03ff915 	stw	zero,-28(fp)
  811388:	00006706 	br	811528 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  81138c:	e0ffff17 	ldw	r3,-4(fp)
  811390:	e0bff917 	ldw	r2,-28(fp)
  811394:	108018e4 	muli	r2,r2,99
  811398:	1885883a 	add	r2,r3,r2
  81139c:	10802444 	addi	r2,r2,145
  8113a0:	10800003 	ldbu	r2,0(r2)
  8113a4:	10803fcc 	andi	r2,r2,255
  8113a8:	1080201c 	xori	r2,r2,128
  8113ac:	10bfe004 	addi	r2,r2,-128
  8113b0:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8113b4:	e0ffff17 	ldw	r3,-4(fp)
  8113b8:	e0bff917 	ldw	r2,-28(fp)
  8113bc:	108018e4 	muli	r2,r2,99
  8113c0:	1885883a 	add	r2,r3,r2
  8113c4:	10802484 	addi	r2,r2,146
  8113c8:	10800003 	ldbu	r2,0(r2)
  8113cc:	10c03fcc 	andi	r3,r2,255
  8113d0:	e0bffc17 	ldw	r2,-16(fp)
  8113d4:	1885383a 	mul	r2,r3,r2
  8113d8:	1005d23a 	srai	r2,r2,8
  8113dc:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8113e0:	e0fffb17 	ldw	r3,-20(fp)
  8113e4:	e0bffd17 	ldw	r2,-12(fp)
  8113e8:	18800116 	blt	r3,r2,8113f0 <lcd_repaint_screen+0x90>
      offset = 0;
  8113ec:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8113f0:	e03ffa15 	stw	zero,-24(fp)
  8113f4:	00004606 	br	811510 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8113f8:	e0fffa17 	ldw	r3,-24(fp)
  8113fc:	e0bffb17 	ldw	r2,-20(fp)
  811400:	1885883a 	add	r2,r3,r2
  811404:	e17ffd17 	ldw	r5,-12(fp)
  811408:	1009883a 	mov	r4,r2
  81140c:	08030e00 	call	8030e0 <__modsi3>
  811410:	1009883a 	mov	r4,r2
  811414:	e0ffff17 	ldw	r3,-4(fp)
  811418:	e0bff917 	ldw	r2,-28(fp)
  81141c:	108018e4 	muli	r2,r2,99
  811420:	1885883a 	add	r2,r3,r2
  811424:	1105883a 	add	r2,r2,r4
  811428:	10801004 	addi	r2,r2,64
  81142c:	10800003 	ldbu	r2,0(r2)
  811430:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  811434:	e0ffff17 	ldw	r3,-4(fp)
  811438:	e0bff917 	ldw	r2,-28(fp)
  81143c:	108018e4 	muli	r2,r2,99
  811440:	1887883a 	add	r3,r3,r2
  811444:	e0bffa17 	ldw	r2,-24(fp)
  811448:	1885883a 	add	r2,r3,r2
  81144c:	10800c04 	addi	r2,r2,48
  811450:	10800003 	ldbu	r2,0(r2)
  811454:	10c03fcc 	andi	r3,r2,255
  811458:	18c0201c 	xori	r3,r3,128
  81145c:	18ffe004 	addi	r3,r3,-128
  811460:	e0bffe07 	ldb	r2,-8(fp)
  811464:	18802726 	beq	r3,r2,811504 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  811468:	e0fff917 	ldw	r3,-28(fp)
  81146c:	d0a00f04 	addi	r2,gp,-32708
  811470:	1885883a 	add	r2,r3,r2
  811474:	10800003 	ldbu	r2,0(r2)
  811478:	1007883a 	mov	r3,r2
  81147c:	e0bffa17 	ldw	r2,-24(fp)
  811480:	1885883a 	add	r2,r3,r2
  811484:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  811488:	e0fffe43 	ldbu	r3,-7(fp)
  81148c:	e0bfff17 	ldw	r2,-4(fp)
  811490:	108008c3 	ldbu	r2,35(r2)
  811494:	10803fcc 	andi	r2,r2,255
  811498:	1080201c 	xori	r2,r2,128
  81149c:	10bfe004 	addi	r2,r2,-128
  8114a0:	18800a26 	beq	r3,r2,8114cc <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8114a4:	e0fffe43 	ldbu	r3,-7(fp)
  8114a8:	00bfe004 	movi	r2,-128
  8114ac:	1884b03a 	or	r2,r3,r2
  8114b0:	10803fcc 	andi	r2,r2,255
  8114b4:	100b883a 	mov	r5,r2
  8114b8:	e13fff17 	ldw	r4,-4(fp)
  8114bc:	08111000 	call	811100 <lcd_write_command>
          sp->address = address;
  8114c0:	e0fffe43 	ldbu	r3,-7(fp)
  8114c4:	e0bfff17 	ldw	r2,-4(fp)
  8114c8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8114cc:	e0bffe03 	ldbu	r2,-8(fp)
  8114d0:	10803fcc 	andi	r2,r2,255
  8114d4:	100b883a 	mov	r5,r2
  8114d8:	e13fff17 	ldw	r4,-4(fp)
  8114dc:	08111b80 	call	8111b8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8114e0:	e0ffff17 	ldw	r3,-4(fp)
  8114e4:	e0bff917 	ldw	r2,-28(fp)
  8114e8:	108018e4 	muli	r2,r2,99
  8114ec:	1887883a 	add	r3,r3,r2
  8114f0:	e0bffa17 	ldw	r2,-24(fp)
  8114f4:	1885883a 	add	r2,r3,r2
  8114f8:	10800c04 	addi	r2,r2,48
  8114fc:	e0fffe03 	ldbu	r3,-8(fp)
  811500:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  811504:	e0bffa17 	ldw	r2,-24(fp)
  811508:	10800044 	addi	r2,r2,1
  81150c:	e0bffa15 	stw	r2,-24(fp)
  811510:	e0bffa17 	ldw	r2,-24(fp)
  811514:	10800410 	cmplti	r2,r2,16
  811518:	103fb71e 	bne	r2,zero,8113f8 <__alt_mem_onchip_mem+0xff7913f8>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81151c:	e0bff917 	ldw	r2,-28(fp)
  811520:	10800044 	addi	r2,r2,1
  811524:	e0bff915 	stw	r2,-28(fp)
  811528:	e0bff917 	ldw	r2,-28(fp)
  81152c:	10800090 	cmplti	r2,r2,2
  811530:	103f961e 	bne	r2,zero,81138c <__alt_mem_onchip_mem+0xff79138c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  811534:	0001883a 	nop
  811538:	e037883a 	mov	sp,fp
  81153c:	dfc00117 	ldw	ra,4(sp)
  811540:	df000017 	ldw	fp,0(sp)
  811544:	dec00204 	addi	sp,sp,8
  811548:	f800283a 	ret

0081154c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  81154c:	defffc04 	addi	sp,sp,-16
  811550:	dfc00315 	stw	ra,12(sp)
  811554:	df000215 	stw	fp,8(sp)
  811558:	df000204 	addi	fp,sp,8
  81155c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811560:	e03ffe15 	stw	zero,-8(fp)
  811564:	00001d06 	br	8115dc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  811568:	e0bffe17 	ldw	r2,-8(fp)
  81156c:	00800f16 	blt	zero,r2,8115ac <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  811570:	e0bffe17 	ldw	r2,-8(fp)
  811574:	108018e4 	muli	r2,r2,99
  811578:	10801004 	addi	r2,r2,64
  81157c:	e0ffff17 	ldw	r3,-4(fp)
  811580:	1889883a 	add	r4,r3,r2
  811584:	e0bffe17 	ldw	r2,-8(fp)
  811588:	10800044 	addi	r2,r2,1
  81158c:	108018e4 	muli	r2,r2,99
  811590:	10801004 	addi	r2,r2,64
  811594:	e0ffff17 	ldw	r3,-4(fp)
  811598:	1885883a 	add	r2,r3,r2
  81159c:	01801404 	movi	r6,80
  8115a0:	100b883a 	mov	r5,r2
  8115a4:	0808cdc0 	call	808cdc <memcpy>
  8115a8:	00000906 	br	8115d0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8115ac:	e0bffe17 	ldw	r2,-8(fp)
  8115b0:	108018e4 	muli	r2,r2,99
  8115b4:	10801004 	addi	r2,r2,64
  8115b8:	e0ffff17 	ldw	r3,-4(fp)
  8115bc:	1885883a 	add	r2,r3,r2
  8115c0:	01801404 	movi	r6,80
  8115c4:	01400804 	movi	r5,32
  8115c8:	1009883a 	mov	r4,r2
  8115cc:	0808f800 	call	808f80 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8115d0:	e0bffe17 	ldw	r2,-8(fp)
  8115d4:	10800044 	addi	r2,r2,1
  8115d8:	e0bffe15 	stw	r2,-8(fp)
  8115dc:	e0bffe17 	ldw	r2,-8(fp)
  8115e0:	10800090 	cmplti	r2,r2,2
  8115e4:	103fe01e 	bne	r2,zero,811568 <__alt_mem_onchip_mem+0xff791568>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8115e8:	e0bfff17 	ldw	r2,-4(fp)
  8115ec:	10800883 	ldbu	r2,34(r2)
  8115f0:	10bfffc4 	addi	r2,r2,-1
  8115f4:	1007883a 	mov	r3,r2
  8115f8:	e0bfff17 	ldw	r2,-4(fp)
  8115fc:	10c00885 	stb	r3,34(r2)
}
  811600:	0001883a 	nop
  811604:	e037883a 	mov	sp,fp
  811608:	dfc00117 	ldw	ra,4(sp)
  81160c:	df000017 	ldw	fp,0(sp)
  811610:	dec00204 	addi	sp,sp,8
  811614:	f800283a 	ret

00811618 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  811618:	defff904 	addi	sp,sp,-28
  81161c:	dfc00615 	stw	ra,24(sp)
  811620:	df000515 	stw	fp,20(sp)
  811624:	df000504 	addi	fp,sp,20
  811628:	e13ffe15 	stw	r4,-8(fp)
  81162c:	2805883a 	mov	r2,r5
  811630:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  811634:	e03ffb15 	stw	zero,-20(fp)
  811638:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  81163c:	e0bffe17 	ldw	r2,-8(fp)
  811640:	10800a03 	ldbu	r2,40(r2)
  811644:	10803fcc 	andi	r2,r2,255
  811648:	1080201c 	xori	r2,r2,128
  81164c:	10bfe004 	addi	r2,r2,-128
  811650:	108016d8 	cmpnei	r2,r2,91
  811654:	1000411e 	bne	r2,zero,81175c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	10800a04 	addi	r2,r2,40
  811660:	10800044 	addi	r2,r2,1
  811664:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  811668:	00000c06 	br	81169c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  81166c:	e0bffb17 	ldw	r2,-20(fp)
  811670:	10c002a4 	muli	r3,r2,10
  811674:	e0bffd17 	ldw	r2,-12(fp)
  811678:	11000044 	addi	r4,r2,1
  81167c:	e13ffd15 	stw	r4,-12(fp)
  811680:	10800003 	ldbu	r2,0(r2)
  811684:	10803fcc 	andi	r2,r2,255
  811688:	1080201c 	xori	r2,r2,128
  81168c:	10bfe004 	addi	r2,r2,-128
  811690:	10bff404 	addi	r2,r2,-48
  811694:	1885883a 	add	r2,r3,r2
  811698:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  81169c:	d0e01117 	ldw	r3,-32700(gp)
  8116a0:	e0bffd17 	ldw	r2,-12(fp)
  8116a4:	10800003 	ldbu	r2,0(r2)
  8116a8:	10803fcc 	andi	r2,r2,255
  8116ac:	1080201c 	xori	r2,r2,128
  8116b0:	10bfe004 	addi	r2,r2,-128
  8116b4:	10800044 	addi	r2,r2,1
  8116b8:	1885883a 	add	r2,r3,r2
  8116bc:	10800003 	ldbu	r2,0(r2)
  8116c0:	10803fcc 	andi	r2,r2,255
  8116c4:	1080010c 	andi	r2,r2,4
  8116c8:	103fe81e 	bne	r2,zero,81166c <__alt_mem_onchip_mem+0xff79166c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8116cc:	e0bffd17 	ldw	r2,-12(fp)
  8116d0:	10800003 	ldbu	r2,0(r2)
  8116d4:	10803fcc 	andi	r2,r2,255
  8116d8:	1080201c 	xori	r2,r2,128
  8116dc:	10bfe004 	addi	r2,r2,-128
  8116e0:	10800ed8 	cmpnei	r2,r2,59
  8116e4:	10001f1e 	bne	r2,zero,811764 <lcd_handle_escape+0x14c>
    {
      ptr++;
  8116e8:	e0bffd17 	ldw	r2,-12(fp)
  8116ec:	10800044 	addi	r2,r2,1
  8116f0:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  8116f4:	00000c06 	br	811728 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8116f8:	e0bffc17 	ldw	r2,-16(fp)
  8116fc:	10c002a4 	muli	r3,r2,10
  811700:	e0bffd17 	ldw	r2,-12(fp)
  811704:	11000044 	addi	r4,r2,1
  811708:	e13ffd15 	stw	r4,-12(fp)
  81170c:	10800003 	ldbu	r2,0(r2)
  811710:	10803fcc 	andi	r2,r2,255
  811714:	1080201c 	xori	r2,r2,128
  811718:	10bfe004 	addi	r2,r2,-128
  81171c:	10bff404 	addi	r2,r2,-48
  811720:	1885883a 	add	r2,r3,r2
  811724:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  811728:	d0e01117 	ldw	r3,-32700(gp)
  81172c:	e0bffd17 	ldw	r2,-12(fp)
  811730:	10800003 	ldbu	r2,0(r2)
  811734:	10803fcc 	andi	r2,r2,255
  811738:	1080201c 	xori	r2,r2,128
  81173c:	10bfe004 	addi	r2,r2,-128
  811740:	10800044 	addi	r2,r2,1
  811744:	1885883a 	add	r2,r3,r2
  811748:	10800003 	ldbu	r2,0(r2)
  81174c:	10803fcc 	andi	r2,r2,255
  811750:	1080010c 	andi	r2,r2,4
  811754:	103fe81e 	bne	r2,zero,8116f8 <__alt_mem_onchip_mem+0xff7916f8>
  811758:	00000206 	br	811764 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  81175c:	00bfffc4 	movi	r2,-1
  811760:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  811764:	e0bfff07 	ldb	r2,-4(fp)
  811768:	10c012a0 	cmpeqi	r3,r2,74
  81176c:	1800291e 	bne	r3,zero,811814 <lcd_handle_escape+0x1fc>
  811770:	10c012c8 	cmpgei	r3,r2,75
  811774:	1800031e 	bne	r3,zero,811784 <lcd_handle_escape+0x16c>
  811778:	10801220 	cmpeqi	r2,r2,72
  81177c:	1000061e 	bne	r2,zero,811798 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811780:	00004a06 	br	8118ac <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  811784:	10c012e0 	cmpeqi	r3,r2,75
  811788:	1800281e 	bne	r3,zero,81182c <lcd_handle_escape+0x214>
  81178c:	108019a0 	cmpeqi	r2,r2,102
  811790:	1000011e 	bne	r2,zero,811798 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811794:	00004506 	br	8118ac <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  811798:	e0bffc17 	ldw	r2,-16(fp)
  81179c:	0080050e 	bge	zero,r2,8117b4 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  8117a0:	e0bffc17 	ldw	r2,-16(fp)
  8117a4:	10bfffc4 	addi	r2,r2,-1
  8117a8:	1007883a 	mov	r3,r2
  8117ac:	e0bffe17 	ldw	r2,-8(fp)
  8117b0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8117b4:	e0bffb17 	ldw	r2,-20(fp)
  8117b8:	0080370e 	bge	zero,r2,811898 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  8117bc:	e0bffb17 	ldw	r2,-20(fp)
  8117c0:	10bfffc4 	addi	r2,r2,-1
  8117c4:	1007883a 	mov	r3,r2
  8117c8:	e0bffe17 	ldw	r2,-8(fp)
  8117cc:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8117d0:	e0bffe17 	ldw	r2,-8(fp)
  8117d4:	10800883 	ldbu	r2,34(r2)
  8117d8:	10803fcc 	andi	r2,r2,255
  8117dc:	10800170 	cmpltui	r2,r2,5
  8117e0:	1000061e 	bne	r2,zero,8117fc <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  8117e4:	e0bffe17 	ldw	r2,-8(fp)
  8117e8:	00c00104 	movi	r3,4
  8117ec:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  8117f0:	00000206 	br	8117fc <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  8117f4:	e13ffe17 	ldw	r4,-8(fp)
  8117f8:	081154c0 	call	81154c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8117fc:	e0bffe17 	ldw	r2,-8(fp)
  811800:	10800883 	ldbu	r2,34(r2)
  811804:	10803fcc 	andi	r2,r2,255
  811808:	108000e8 	cmpgeui	r2,r2,3
  81180c:	103ff91e 	bne	r2,zero,8117f4 <__alt_mem_onchip_mem+0xff7917f4>
        lcd_scroll_up(sp);
    }
    break;
  811810:	00002106 	br	811898 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  811814:	e0bffb17 	ldw	r2,-20(fp)
  811818:	10800098 	cmpnei	r2,r2,2
  81181c:	1000201e 	bne	r2,zero,8118a0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811820:	e13ffe17 	ldw	r4,-8(fp)
  811824:	08112900 	call	811290 <lcd_clear_screen>
    break;
  811828:	00001d06 	br	8118a0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  81182c:	e0bffb17 	ldw	r2,-20(fp)
  811830:	00801d16 	blt	zero,r2,8118a8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811834:	e0bffe17 	ldw	r2,-8(fp)
  811838:	10800843 	ldbu	r2,33(r2)
  81183c:	10803fcc 	andi	r2,r2,255
  811840:	10801428 	cmpgeui	r2,r2,80
  811844:	1000181e 	bne	r2,zero,8118a8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  811848:	e0bffe17 	ldw	r2,-8(fp)
  81184c:	10800883 	ldbu	r2,34(r2)
  811850:	10803fcc 	andi	r2,r2,255
  811854:	108018e4 	muli	r2,r2,99
  811858:	10801004 	addi	r2,r2,64
  81185c:	e0fffe17 	ldw	r3,-8(fp)
  811860:	1887883a 	add	r3,r3,r2
  811864:	e0bffe17 	ldw	r2,-8(fp)
  811868:	10800843 	ldbu	r2,33(r2)
  81186c:	10803fcc 	andi	r2,r2,255
  811870:	1889883a 	add	r4,r3,r2
  811874:	e0bffe17 	ldw	r2,-8(fp)
  811878:	10800843 	ldbu	r2,33(r2)
  81187c:	10803fcc 	andi	r2,r2,255
  811880:	00c01404 	movi	r3,80
  811884:	1885c83a 	sub	r2,r3,r2
  811888:	100d883a 	mov	r6,r2
  81188c:	01400804 	movi	r5,32
  811890:	0808f800 	call	808f80 <memset>
    }
    break;
  811894:	00000406 	br	8118a8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  811898:	0001883a 	nop
  81189c:	00000306 	br	8118ac <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8118a0:	0001883a 	nop
  8118a4:	00000106 	br	8118ac <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  8118a8:	0001883a 	nop
  }
}
  8118ac:	0001883a 	nop
  8118b0:	e037883a 	mov	sp,fp
  8118b4:	dfc00117 	ldw	ra,4(sp)
  8118b8:	df000017 	ldw	fp,0(sp)
  8118bc:	dec00204 	addi	sp,sp,8
  8118c0:	f800283a 	ret

008118c4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8118c4:	defff304 	addi	sp,sp,-52
  8118c8:	dfc00c15 	stw	ra,48(sp)
  8118cc:	df000b15 	stw	fp,44(sp)
  8118d0:	df000b04 	addi	fp,sp,44
  8118d4:	e13ffc15 	stw	r4,-16(fp)
  8118d8:	e17ffd15 	stw	r5,-12(fp)
  8118dc:	e1bffe15 	stw	r6,-8(fp)
  8118e0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8118e4:	e0bffe17 	ldw	r2,-8(fp)
  8118e8:	e0fffd17 	ldw	r3,-12(fp)
  8118ec:	1885883a 	add	r2,r3,r2
  8118f0:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8118f4:	e0bffc17 	ldw	r2,-16(fp)
  8118f8:	00c00044 	movi	r3,1
  8118fc:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811900:	00009906 	br	811b68 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  811904:	e0bffd17 	ldw	r2,-12(fp)
  811908:	10800003 	ldbu	r2,0(r2)
  81190c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811910:	e0bffc17 	ldw	r2,-16(fp)
  811914:	10800903 	ldbu	r2,36(r2)
  811918:	10803fcc 	andi	r2,r2,255
  81191c:	1080201c 	xori	r2,r2,128
  811920:	10bfe004 	addi	r2,r2,-128
  811924:	10003716 	blt	r2,zero,811a04 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  811928:	e0bffc17 	ldw	r2,-16(fp)
  81192c:	10800903 	ldbu	r2,36(r2)
  811930:	10803fcc 	andi	r2,r2,255
  811934:	1080201c 	xori	r2,r2,128
  811938:	10bfe004 	addi	r2,r2,-128
  81193c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811940:	e0bffa17 	ldw	r2,-24(fp)
  811944:	1000031e 	bne	r2,zero,811954 <altera_avalon_lcd_16207_write+0x90>
  811948:	e0bff907 	ldb	r2,-28(fp)
  81194c:	108016d8 	cmpnei	r2,r2,91
  811950:	10000d1e 	bne	r2,zero,811988 <altera_avalon_lcd_16207_write+0xc4>
  811954:	e0bffa17 	ldw	r2,-24(fp)
  811958:	10001826 	beq	r2,zero,8119bc <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  81195c:	d0e01117 	ldw	r3,-32700(gp)
  811960:	e0bff907 	ldb	r2,-28(fp)
  811964:	10800044 	addi	r2,r2,1
  811968:	1885883a 	add	r2,r3,r2
  81196c:	10800003 	ldbu	r2,0(r2)
  811970:	10803fcc 	andi	r2,r2,255
  811974:	1080010c 	andi	r2,r2,4
  811978:	1000101e 	bne	r2,zero,8119bc <altera_avalon_lcd_16207_write+0xf8>
  81197c:	e0bff907 	ldb	r2,-28(fp)
  811980:	10800ee0 	cmpeqi	r2,r2,59
  811984:	10000d1e 	bne	r2,zero,8119bc <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  811988:	e0fffc17 	ldw	r3,-16(fp)
  81198c:	e0bffa17 	ldw	r2,-24(fp)
  811990:	1885883a 	add	r2,r3,r2
  811994:	10800a04 	addi	r2,r2,40
  811998:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81199c:	e0bff907 	ldb	r2,-28(fp)
  8119a0:	100b883a 	mov	r5,r2
  8119a4:	e13ffc17 	ldw	r4,-16(fp)
  8119a8:	08116180 	call	811618 <lcd_handle_escape>

        sp->esccount = -1;
  8119ac:	e0bffc17 	ldw	r2,-16(fp)
  8119b0:	00ffffc4 	movi	r3,-1
  8119b4:	10c00905 	stb	r3,36(r2)
  8119b8:	00006806 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8119bc:	e0bffc17 	ldw	r2,-16(fp)
  8119c0:	10800903 	ldbu	r2,36(r2)
  8119c4:	10803fcc 	andi	r2,r2,255
  8119c8:	108001e8 	cmpgeui	r2,r2,7
  8119cc:	1000631e 	bne	r2,zero,811b5c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  8119d0:	e0fffc17 	ldw	r3,-16(fp)
  8119d4:	e0bffa17 	ldw	r2,-24(fp)
  8119d8:	1885883a 	add	r2,r3,r2
  8119dc:	10800a04 	addi	r2,r2,40
  8119e0:	e0fff903 	ldbu	r3,-28(fp)
  8119e4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  8119e8:	e0bffc17 	ldw	r2,-16(fp)
  8119ec:	10800903 	ldbu	r2,36(r2)
  8119f0:	10800044 	addi	r2,r2,1
  8119f4:	1007883a 	mov	r3,r2
  8119f8:	e0bffc17 	ldw	r2,-16(fp)
  8119fc:	10c00905 	stb	r3,36(r2)
  811a00:	00005606 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811a04:	e0bff907 	ldb	r2,-28(fp)
  811a08:	108006d8 	cmpnei	r2,r2,27
  811a0c:	1000031e 	bne	r2,zero,811a1c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811a10:	e0bffc17 	ldw	r2,-16(fp)
  811a14:	10000905 	stb	zero,36(r2)
  811a18:	00005006 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811a1c:	e0bff907 	ldb	r2,-28(fp)
  811a20:	10800358 	cmpnei	r2,r2,13
  811a24:	1000031e 	bne	r2,zero,811a34 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811a28:	e0bffc17 	ldw	r2,-16(fp)
  811a2c:	10000845 	stb	zero,33(r2)
  811a30:	00004a06 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  811a34:	e0bff907 	ldb	r2,-28(fp)
  811a38:	10800298 	cmpnei	r2,r2,10
  811a3c:	1000101e 	bne	r2,zero,811a80 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811a40:	e0bffc17 	ldw	r2,-16(fp)
  811a44:	10000845 	stb	zero,33(r2)
      sp->y++;
  811a48:	e0bffc17 	ldw	r2,-16(fp)
  811a4c:	10800883 	ldbu	r2,34(r2)
  811a50:	10800044 	addi	r2,r2,1
  811a54:	1007883a 	mov	r3,r2
  811a58:	e0bffc17 	ldw	r2,-16(fp)
  811a5c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811a60:	e0bffc17 	ldw	r2,-16(fp)
  811a64:	10800883 	ldbu	r2,34(r2)
  811a68:	10803fcc 	andi	r2,r2,255
  811a6c:	108000f0 	cmpltui	r2,r2,3
  811a70:	10003a1e 	bne	r2,zero,811b5c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  811a74:	e13ffc17 	ldw	r4,-16(fp)
  811a78:	081154c0 	call	81154c <lcd_scroll_up>
  811a7c:	00003706 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  811a80:	e0bff907 	ldb	r2,-28(fp)
  811a84:	10800218 	cmpnei	r2,r2,8
  811a88:	10000b1e 	bne	r2,zero,811ab8 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811a8c:	e0bffc17 	ldw	r2,-16(fp)
  811a90:	10800843 	ldbu	r2,33(r2)
  811a94:	10803fcc 	andi	r2,r2,255
  811a98:	10003026 	beq	r2,zero,811b5c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811a9c:	e0bffc17 	ldw	r2,-16(fp)
  811aa0:	10800843 	ldbu	r2,33(r2)
  811aa4:	10bfffc4 	addi	r2,r2,-1
  811aa8:	1007883a 	mov	r3,r2
  811aac:	e0bffc17 	ldw	r2,-16(fp)
  811ab0:	10c00845 	stb	r3,33(r2)
  811ab4:	00002906 	br	811b5c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811ab8:	d0e01117 	ldw	r3,-32700(gp)
  811abc:	e0bff907 	ldb	r2,-28(fp)
  811ac0:	10800044 	addi	r2,r2,1
  811ac4:	1885883a 	add	r2,r3,r2
  811ac8:	10800003 	ldbu	r2,0(r2)
  811acc:	10803fcc 	andi	r2,r2,255
  811ad0:	1080201c 	xori	r2,r2,128
  811ad4:	10bfe004 	addi	r2,r2,-128
  811ad8:	108025cc 	andi	r2,r2,151
  811adc:	10001f26 	beq	r2,zero,811b5c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811ae0:	e0bffc17 	ldw	r2,-16(fp)
  811ae4:	10800883 	ldbu	r2,34(r2)
  811ae8:	10803fcc 	andi	r2,r2,255
  811aec:	108000b0 	cmpltui	r2,r2,2
  811af0:	1000021e 	bne	r2,zero,811afc <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811af4:	e13ffc17 	ldw	r4,-16(fp)
  811af8:	081154c0 	call	81154c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811afc:	e0bffc17 	ldw	r2,-16(fp)
  811b00:	10800843 	ldbu	r2,33(r2)
  811b04:	10803fcc 	andi	r2,r2,255
  811b08:	10801428 	cmpgeui	r2,r2,80
  811b0c:	10000d1e 	bne	r2,zero,811b44 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811b10:	e0bffc17 	ldw	r2,-16(fp)
  811b14:	10800883 	ldbu	r2,34(r2)
  811b18:	10c03fcc 	andi	r3,r2,255
  811b1c:	e0bffc17 	ldw	r2,-16(fp)
  811b20:	10800843 	ldbu	r2,33(r2)
  811b24:	10803fcc 	andi	r2,r2,255
  811b28:	e13ffc17 	ldw	r4,-16(fp)
  811b2c:	18c018e4 	muli	r3,r3,99
  811b30:	20c7883a 	add	r3,r4,r3
  811b34:	1885883a 	add	r2,r3,r2
  811b38:	10801004 	addi	r2,r2,64
  811b3c:	e0fff903 	ldbu	r3,-28(fp)
  811b40:	10c00005 	stb	r3,0(r2)

      sp->x++;
  811b44:	e0bffc17 	ldw	r2,-16(fp)
  811b48:	10800843 	ldbu	r2,33(r2)
  811b4c:	10800044 	addi	r2,r2,1
  811b50:	1007883a 	mov	r3,r2
  811b54:	e0bffc17 	ldw	r2,-16(fp)
  811b58:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  811b5c:	e0bffd17 	ldw	r2,-12(fp)
  811b60:	10800044 	addi	r2,r2,1
  811b64:	e0bffd15 	stw	r2,-12(fp)
  811b68:	e0fffd17 	ldw	r3,-12(fp)
  811b6c:	e0bff817 	ldw	r2,-32(fp)
  811b70:	18bf6436 	bltu	r3,r2,811904 <__alt_mem_onchip_mem+0xff791904>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  811b74:	00800404 	movi	r2,16
  811b78:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811b7c:	e03ff515 	stw	zero,-44(fp)
  811b80:	00003706 	br	811c60 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811b84:	00801404 	movi	r2,80
  811b88:	e0bff715 	stw	r2,-36(fp)
  811b8c:	00001106 	br	811bd4 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  811b90:	e0bff717 	ldw	r2,-36(fp)
  811b94:	10bfffc4 	addi	r2,r2,-1
  811b98:	e13ffc17 	ldw	r4,-16(fp)
  811b9c:	e0fff517 	ldw	r3,-44(fp)
  811ba0:	18c018e4 	muli	r3,r3,99
  811ba4:	20c7883a 	add	r3,r4,r3
  811ba8:	1885883a 	add	r2,r3,r2
  811bac:	10801004 	addi	r2,r2,64
  811bb0:	10800003 	ldbu	r2,0(r2)
  811bb4:	10803fcc 	andi	r2,r2,255
  811bb8:	1080201c 	xori	r2,r2,128
  811bbc:	10bfe004 	addi	r2,r2,-128
  811bc0:	10800820 	cmpeqi	r2,r2,32
  811bc4:	10000626 	beq	r2,zero,811be0 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811bc8:	e0bff717 	ldw	r2,-36(fp)
  811bcc:	10bfffc4 	addi	r2,r2,-1
  811bd0:	e0bff715 	stw	r2,-36(fp)
  811bd4:	e0bff717 	ldw	r2,-36(fp)
  811bd8:	00bfed16 	blt	zero,r2,811b90 <__alt_mem_onchip_mem+0xff791b90>
  811bdc:	00000106 	br	811be4 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811be0:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811be4:	e0bff717 	ldw	r2,-36(fp)
  811be8:	10800448 	cmpgei	r2,r2,17
  811bec:	1000031e 	bne	r2,zero,811bfc <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811bf0:	00800404 	movi	r2,16
  811bf4:	e0bff715 	stw	r2,-36(fp)
  811bf8:	00000306 	br	811c08 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811bfc:	e0bff717 	ldw	r2,-36(fp)
  811c00:	10800044 	addi	r2,r2,1
  811c04:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811c08:	e0bff717 	ldw	r2,-36(fp)
  811c0c:	1009883a 	mov	r4,r2
  811c10:	e0fffc17 	ldw	r3,-16(fp)
  811c14:	e0bff517 	ldw	r2,-44(fp)
  811c18:	108018e4 	muli	r2,r2,99
  811c1c:	1885883a 	add	r2,r3,r2
  811c20:	10802444 	addi	r2,r2,145
  811c24:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  811c28:	e0fff617 	ldw	r3,-40(fp)
  811c2c:	e0bff717 	ldw	r2,-36(fp)
  811c30:	1880020e 	bge	r3,r2,811c3c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  811c34:	e0bff717 	ldw	r2,-36(fp)
  811c38:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811c3c:	e0fffc17 	ldw	r3,-16(fp)
  811c40:	e0bff517 	ldw	r2,-44(fp)
  811c44:	108018e4 	muli	r2,r2,99
  811c48:	1885883a 	add	r2,r3,r2
  811c4c:	10802484 	addi	r2,r2,146
  811c50:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811c54:	e0bff517 	ldw	r2,-44(fp)
  811c58:	10800044 	addi	r2,r2,1
  811c5c:	e0bff515 	stw	r2,-44(fp)
  811c60:	e0bff517 	ldw	r2,-44(fp)
  811c64:	10800090 	cmplti	r2,r2,2
  811c68:	103fc61e 	bne	r2,zero,811b84 <__alt_mem_onchip_mem+0xff791b84>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  811c6c:	e0bff617 	ldw	r2,-40(fp)
  811c70:	10800448 	cmpgei	r2,r2,17
  811c74:	1000031e 	bne	r2,zero,811c84 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  811c78:	e0bffc17 	ldw	r2,-16(fp)
  811c7c:	10000985 	stb	zero,38(r2)
  811c80:	00002e06 	br	811d3c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  811c84:	e0bff617 	ldw	r2,-40(fp)
  811c88:	1085883a 	add	r2,r2,r2
  811c8c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  811c90:	e0bff617 	ldw	r2,-40(fp)
  811c94:	1007883a 	mov	r3,r2
  811c98:	e0bffc17 	ldw	r2,-16(fp)
  811c9c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811ca0:	e03ff515 	stw	zero,-44(fp)
  811ca4:	00002206 	br	811d30 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  811ca8:	e0fffc17 	ldw	r3,-16(fp)
  811cac:	e0bff517 	ldw	r2,-44(fp)
  811cb0:	108018e4 	muli	r2,r2,99
  811cb4:	1885883a 	add	r2,r3,r2
  811cb8:	10802444 	addi	r2,r2,145
  811cbc:	10800003 	ldbu	r2,0(r2)
  811cc0:	10803fcc 	andi	r2,r2,255
  811cc4:	1080201c 	xori	r2,r2,128
  811cc8:	10bfe004 	addi	r2,r2,-128
  811ccc:	10800450 	cmplti	r2,r2,17
  811cd0:	1000141e 	bne	r2,zero,811d24 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  811cd4:	e0fffc17 	ldw	r3,-16(fp)
  811cd8:	e0bff517 	ldw	r2,-44(fp)
  811cdc:	108018e4 	muli	r2,r2,99
  811ce0:	1885883a 	add	r2,r3,r2
  811ce4:	10802444 	addi	r2,r2,145
  811ce8:	10800003 	ldbu	r2,0(r2)
  811cec:	10803fcc 	andi	r2,r2,255
  811cf0:	1080201c 	xori	r2,r2,128
  811cf4:	10bfe004 	addi	r2,r2,-128
  811cf8:	1004923a 	slli	r2,r2,8
  811cfc:	e17ff617 	ldw	r5,-40(fp)
  811d00:	1009883a 	mov	r4,r2
  811d04:	080305c0 	call	80305c <__divsi3>
  811d08:	1009883a 	mov	r4,r2
  811d0c:	e0fffc17 	ldw	r3,-16(fp)
  811d10:	e0bff517 	ldw	r2,-44(fp)
  811d14:	108018e4 	muli	r2,r2,99
  811d18:	1885883a 	add	r2,r3,r2
  811d1c:	10802484 	addi	r2,r2,146
  811d20:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811d24:	e0bff517 	ldw	r2,-44(fp)
  811d28:	10800044 	addi	r2,r2,1
  811d2c:	e0bff515 	stw	r2,-44(fp)
  811d30:	e0bff517 	ldw	r2,-44(fp)
  811d34:	10800090 	cmplti	r2,r2,2
  811d38:	103fdb1e 	bne	r2,zero,811ca8 <__alt_mem_onchip_mem+0xff791ca8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  811d3c:	e0bffc17 	ldw	r2,-16(fp)
  811d40:	10800943 	ldbu	r2,37(r2)
  811d44:	10803fcc 	andi	r2,r2,255
  811d48:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  811d4c:	e13ffc17 	ldw	r4,-16(fp)
  811d50:	08113600 	call	811360 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  811d54:	e0bffc17 	ldw	r2,-16(fp)
  811d58:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  811d5c:	e0bffc17 	ldw	r2,-16(fp)
  811d60:	10800943 	ldbu	r2,37(r2)
  811d64:	10c03fcc 	andi	r3,r2,255
  811d68:	e0bffb17 	ldw	r2,-20(fp)
  811d6c:	18800426 	beq	r3,r2,811d80 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  811d70:	e0bffc17 	ldw	r2,-16(fp)
  811d74:	00c00044 	movi	r3,1
  811d78:	10c009c5 	stb	r3,39(r2)
  }
  811d7c:	003fef06 	br	811d3c <__alt_mem_onchip_mem+0xff791d3c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  811d80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  811d84:	e0bffe17 	ldw	r2,-8(fp)
}
  811d88:	e037883a 	mov	sp,fp
  811d8c:	dfc00117 	ldw	ra,4(sp)
  811d90:	df000017 	ldw	fp,0(sp)
  811d94:	dec00204 	addi	sp,sp,8
  811d98:	f800283a 	ret

00811d9c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  811d9c:	defffc04 	addi	sp,sp,-16
  811da0:	dfc00315 	stw	ra,12(sp)
  811da4:	df000215 	stw	fp,8(sp)
  811da8:	df000204 	addi	fp,sp,8
  811dac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  811db0:	e0bfff17 	ldw	r2,-4(fp)
  811db4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  811db8:	e0bffe17 	ldw	r2,-8(fp)
  811dbc:	10800943 	ldbu	r2,37(r2)
  811dc0:	10803fcc 	andi	r2,r2,255
  811dc4:	10c00044 	addi	r3,r2,1
  811dc8:	e0bffe17 	ldw	r2,-8(fp)
  811dcc:	10800983 	ldbu	r2,38(r2)
  811dd0:	10803fcc 	andi	r2,r2,255
  811dd4:	18800316 	blt	r3,r2,811de4 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  811dd8:	e0bffe17 	ldw	r2,-8(fp)
  811ddc:	10000945 	stb	zero,37(r2)
  811de0:	00000606 	br	811dfc <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  811de4:	e0bffe17 	ldw	r2,-8(fp)
  811de8:	10800943 	ldbu	r2,37(r2)
  811dec:	10800044 	addi	r2,r2,1
  811df0:	1007883a 	mov	r3,r2
  811df4:	e0bffe17 	ldw	r2,-8(fp)
  811df8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  811dfc:	e0bffe17 	ldw	r2,-8(fp)
  811e00:	10800983 	ldbu	r2,38(r2)
  811e04:	10803fcc 	andi	r2,r2,255
  811e08:	10000826 	beq	r2,zero,811e2c <alt_lcd_16207_timeout+0x90>
  811e0c:	e0bffe17 	ldw	r2,-8(fp)
  811e10:	108009c3 	ldbu	r2,39(r2)
  811e14:	10803fcc 	andi	r2,r2,255
  811e18:	1080201c 	xori	r2,r2,128
  811e1c:	10bfe004 	addi	r2,r2,-128
  811e20:	1000021e 	bne	r2,zero,811e2c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  811e24:	e13ffe17 	ldw	r4,-8(fp)
  811e28:	08113600 	call	811360 <lcd_repaint_screen>

  return sp->period;
  811e2c:	e0bffe17 	ldw	r2,-8(fp)
  811e30:	10800717 	ldw	r2,28(r2)
}
  811e34:	e037883a 	mov	sp,fp
  811e38:	dfc00117 	ldw	ra,4(sp)
  811e3c:	df000017 	ldw	fp,0(sp)
  811e40:	dec00204 	addi	sp,sp,8
  811e44:	f800283a 	ret

00811e48 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  811e48:	defffc04 	addi	sp,sp,-16
  811e4c:	dfc00315 	stw	ra,12(sp)
  811e50:	df000215 	stw	fp,8(sp)
  811e54:	df000204 	addi	fp,sp,8
  811e58:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  811e5c:	e0bfff17 	ldw	r2,-4(fp)
  811e60:	10800017 	ldw	r2,0(r2)
  811e64:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  811e68:	e0bfff17 	ldw	r2,-4(fp)
  811e6c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  811e70:	010ea604 	movi	r4,15000
  811e74:	08131f80 	call	8131f8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811e78:	e0bffe17 	ldw	r2,-8(fp)
  811e7c:	00c00c04 	movi	r3,48
  811e80:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  811e84:	01040104 	movi	r4,4100
  811e88:	08131f80 	call	8131f8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811e8c:	e0bffe17 	ldw	r2,-8(fp)
  811e90:	00c00c04 	movi	r3,48
  811e94:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  811e98:	0100fa04 	movi	r4,1000
  811e9c:	08131f80 	call	8131f8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811ea0:	e0bffe17 	ldw	r2,-8(fp)
  811ea4:	00c00c04 	movi	r3,48
  811ea8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  811eac:	01400e04 	movi	r5,56
  811eb0:	e13fff17 	ldw	r4,-4(fp)
  811eb4:	08111000 	call	811100 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  811eb8:	01400204 	movi	r5,8
  811ebc:	e13fff17 	ldw	r4,-4(fp)
  811ec0:	08111000 	call	811100 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  811ec4:	e13fff17 	ldw	r4,-4(fp)
  811ec8:	08112900 	call	811290 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  811ecc:	01400184 	movi	r5,6
  811ed0:	e13fff17 	ldw	r4,-4(fp)
  811ed4:	08111000 	call	811100 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  811ed8:	01400304 	movi	r5,12
  811edc:	e13fff17 	ldw	r4,-4(fp)
  811ee0:	08111000 	call	811100 <lcd_write_command>

  sp->esccount = -1;
  811ee4:	e0bfff17 	ldw	r2,-4(fp)
  811ee8:	00ffffc4 	movi	r3,-1
  811eec:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811ef0:	e0bfff17 	ldw	r2,-4(fp)
  811ef4:	10800a04 	addi	r2,r2,40
  811ef8:	01800204 	movi	r6,8
  811efc:	000b883a 	mov	r5,zero
  811f00:	1009883a 	mov	r4,r2
  811f04:	0808f800 	call	808f80 <memset>

  sp->scrollpos = 0;
  811f08:	e0bfff17 	ldw	r2,-4(fp)
  811f0c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811f10:	e0bfff17 	ldw	r2,-4(fp)
  811f14:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  811f18:	e0bfff17 	ldw	r2,-4(fp)
  811f1c:	100009c5 	stb	zero,39(r2)
  811f20:	d0a7ab17 	ldw	r2,-24916(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  811f24:	01400284 	movi	r5,10
  811f28:	1009883a 	mov	r4,r2
  811f2c:	08031540 	call	803154 <__udivsi3>
  811f30:	1007883a 	mov	r3,r2
  811f34:	e0bfff17 	ldw	r2,-4(fp)
  811f38:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  811f3c:	e0bfff17 	ldw	r2,-4(fp)
  811f40:	10c00104 	addi	r3,r2,4
  811f44:	e0bfff17 	ldw	r2,-4(fp)
  811f48:	10800717 	ldw	r2,28(r2)
  811f4c:	e1ffff17 	ldw	r7,-4(fp)
  811f50:	01802074 	movhi	r6,129
  811f54:	31876704 	addi	r6,r6,7580
  811f58:	100b883a 	mov	r5,r2
  811f5c:	1809883a 	mov	r4,r3
  811f60:	080f97c0 	call	80f97c <alt_alarm_start>
}
  811f64:	0001883a 	nop
  811f68:	e037883a 	mov	sp,fp
  811f6c:	dfc00117 	ldw	ra,4(sp)
  811f70:	df000017 	ldw	fp,0(sp)
  811f74:	dec00204 	addi	sp,sp,8
  811f78:	f800283a 	ret

00811f7c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811f7c:	defffa04 	addi	sp,sp,-24
  811f80:	dfc00515 	stw	ra,20(sp)
  811f84:	df000415 	stw	fp,16(sp)
  811f88:	df000404 	addi	fp,sp,16
  811f8c:	e13ffd15 	stw	r4,-12(fp)
  811f90:	e17ffe15 	stw	r5,-8(fp)
  811f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  811f98:	e0bffd17 	ldw	r2,-12(fp)
  811f9c:	10800017 	ldw	r2,0(r2)
  811fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  811fa4:	e0bffc17 	ldw	r2,-16(fp)
  811fa8:	10c00a04 	addi	r3,r2,40
  811fac:	e0bffd17 	ldw	r2,-12(fp)
  811fb0:	10800217 	ldw	r2,8(r2)
  811fb4:	100f883a 	mov	r7,r2
  811fb8:	e1bfff17 	ldw	r6,-4(fp)
  811fbc:	e17ffe17 	ldw	r5,-8(fp)
  811fc0:	1809883a 	mov	r4,r3
  811fc4:	08118c40 	call	8118c4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  811fc8:	e037883a 	mov	sp,fp
  811fcc:	dfc00117 	ldw	ra,4(sp)
  811fd0:	df000017 	ldw	fp,0(sp)
  811fd4:	dec00204 	addi	sp,sp,8
  811fd8:	f800283a 	ret

00811fdc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811fdc:	defffa04 	addi	sp,sp,-24
  811fe0:	dfc00515 	stw	ra,20(sp)
  811fe4:	df000415 	stw	fp,16(sp)
  811fe8:	df000404 	addi	fp,sp,16
  811fec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811ff0:	0007883a 	mov	r3,zero
  811ff4:	e0bfff17 	ldw	r2,-4(fp)
  811ff8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811ffc:	e0bfff17 	ldw	r2,-4(fp)
  812000:	10800104 	addi	r2,r2,4
  812004:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812008:	0005303a 	rdctl	r2,status
  81200c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812010:	e0fffd17 	ldw	r3,-12(fp)
  812014:	00bfff84 	movi	r2,-2
  812018:	1884703a 	and	r2,r3,r2
  81201c:	1001703a 	wrctl	status,r2
  
  return context;
  812020:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  812024:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  812028:	08103540 	call	810354 <alt_tick>
  81202c:	e0bffc17 	ldw	r2,-16(fp)
  812030:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812034:	e0bffe17 	ldw	r2,-8(fp)
  812038:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81203c:	0001883a 	nop
  812040:	e037883a 	mov	sp,fp
  812044:	dfc00117 	ldw	ra,4(sp)
  812048:	df000017 	ldw	fp,0(sp)
  81204c:	dec00204 	addi	sp,sp,8
  812050:	f800283a 	ret

00812054 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  812054:	defff804 	addi	sp,sp,-32
  812058:	dfc00715 	stw	ra,28(sp)
  81205c:	df000615 	stw	fp,24(sp)
  812060:	df000604 	addi	fp,sp,24
  812064:	e13ffc15 	stw	r4,-16(fp)
  812068:	e17ffd15 	stw	r5,-12(fp)
  81206c:	e1bffe15 	stw	r6,-8(fp)
  812070:	e1ffff15 	stw	r7,-4(fp)
  812074:	e0bfff17 	ldw	r2,-4(fp)
  812078:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81207c:	d0a7ab17 	ldw	r2,-24916(gp)
  812080:	1000021e 	bne	r2,zero,81208c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  812084:	e0bffb17 	ldw	r2,-20(fp)
  812088:	d0a7ab15 	stw	r2,-24916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81208c:	e0bffc17 	ldw	r2,-16(fp)
  812090:	10800104 	addi	r2,r2,4
  812094:	00c001c4 	movi	r3,7
  812098:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81209c:	d8000015 	stw	zero,0(sp)
  8120a0:	e1fffc17 	ldw	r7,-16(fp)
  8120a4:	01802074 	movhi	r6,129
  8120a8:	3187f704 	addi	r6,r6,8156
  8120ac:	e17ffe17 	ldw	r5,-8(fp)
  8120b0:	e13ffd17 	ldw	r4,-12(fp)
  8120b4:	0812bc40 	call	812bc4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8120b8:	0001883a 	nop
  8120bc:	e037883a 	mov	sp,fp
  8120c0:	dfc00117 	ldw	ra,4(sp)
  8120c4:	df000017 	ldw	fp,0(sp)
  8120c8:	dec00204 	addi	sp,sp,8
  8120cc:	f800283a 	ret

008120d0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8120d0:	defffa04 	addi	sp,sp,-24
  8120d4:	dfc00515 	stw	ra,20(sp)
  8120d8:	df000415 	stw	fp,16(sp)
  8120dc:	df000404 	addi	fp,sp,16
  8120e0:	e13ffd15 	stw	r4,-12(fp)
  8120e4:	e17ffe15 	stw	r5,-8(fp)
  8120e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8120ec:	e0bffd17 	ldw	r2,-12(fp)
  8120f0:	10800017 	ldw	r2,0(r2)
  8120f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8120f8:	e0bffc17 	ldw	r2,-16(fp)
  8120fc:	10c00a04 	addi	r3,r2,40
  812100:	e0bffd17 	ldw	r2,-12(fp)
  812104:	10800217 	ldw	r2,8(r2)
  812108:	100f883a 	mov	r7,r2
  81210c:	e1bfff17 	ldw	r6,-4(fp)
  812110:	e17ffe17 	ldw	r5,-8(fp)
  812114:	1809883a 	mov	r4,r3
  812118:	08125e40 	call	8125e4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81211c:	e037883a 	mov	sp,fp
  812120:	dfc00117 	ldw	ra,4(sp)
  812124:	df000017 	ldw	fp,0(sp)
  812128:	dec00204 	addi	sp,sp,8
  81212c:	f800283a 	ret

00812130 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812130:	defffa04 	addi	sp,sp,-24
  812134:	dfc00515 	stw	ra,20(sp)
  812138:	df000415 	stw	fp,16(sp)
  81213c:	df000404 	addi	fp,sp,16
  812140:	e13ffd15 	stw	r4,-12(fp)
  812144:	e17ffe15 	stw	r5,-8(fp)
  812148:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81214c:	e0bffd17 	ldw	r2,-12(fp)
  812150:	10800017 	ldw	r2,0(r2)
  812154:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  812158:	e0bffc17 	ldw	r2,-16(fp)
  81215c:	10c00a04 	addi	r3,r2,40
  812160:	e0bffd17 	ldw	r2,-12(fp)
  812164:	10800217 	ldw	r2,8(r2)
  812168:	100f883a 	mov	r7,r2
  81216c:	e1bfff17 	ldw	r6,-4(fp)
  812170:	e17ffe17 	ldw	r5,-8(fp)
  812174:	1809883a 	mov	r4,r3
  812178:	08127fc0 	call	8127fc <altera_avalon_uart_write>
      fd->fd_flags);
}
  81217c:	e037883a 	mov	sp,fp
  812180:	dfc00117 	ldw	ra,4(sp)
  812184:	df000017 	ldw	fp,0(sp)
  812188:	dec00204 	addi	sp,sp,8
  81218c:	f800283a 	ret

00812190 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  812190:	defffc04 	addi	sp,sp,-16
  812194:	dfc00315 	stw	ra,12(sp)
  812198:	df000215 	stw	fp,8(sp)
  81219c:	df000204 	addi	fp,sp,8
  8121a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8121a4:	e0bfff17 	ldw	r2,-4(fp)
  8121a8:	10800017 	ldw	r2,0(r2)
  8121ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8121b0:	e0bffe17 	ldw	r2,-8(fp)
  8121b4:	10c00a04 	addi	r3,r2,40
  8121b8:	e0bfff17 	ldw	r2,-4(fp)
  8121bc:	10800217 	ldw	r2,8(r2)
  8121c0:	100b883a 	mov	r5,r2
  8121c4:	1809883a 	mov	r4,r3
  8121c8:	08125540 	call	812554 <altera_avalon_uart_close>
}
  8121cc:	e037883a 	mov	sp,fp
  8121d0:	dfc00117 	ldw	ra,4(sp)
  8121d4:	df000017 	ldw	fp,0(sp)
  8121d8:	dec00204 	addi	sp,sp,8
  8121dc:	f800283a 	ret

008121e0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8121e0:	defff804 	addi	sp,sp,-32
  8121e4:	dfc00715 	stw	ra,28(sp)
  8121e8:	df000615 	stw	fp,24(sp)
  8121ec:	df000604 	addi	fp,sp,24
  8121f0:	e13ffd15 	stw	r4,-12(fp)
  8121f4:	e17ffe15 	stw	r5,-8(fp)
  8121f8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8121fc:	e0bffd17 	ldw	r2,-12(fp)
  812200:	10800017 	ldw	r2,0(r2)
  812204:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  812208:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81220c:	1000041e 	bne	r2,zero,812220 <altera_avalon_uart_init+0x40>
  812210:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  812214:	1000021e 	bne	r2,zero,812220 <altera_avalon_uart_init+0x40>
  812218:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81221c:	10000226 	beq	r2,zero,812228 <altera_avalon_uart_init+0x48>
  812220:	00800044 	movi	r2,1
  812224:	00000106 	br	81222c <altera_avalon_uart_init+0x4c>
  812228:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81222c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  812230:	e0bffc17 	ldw	r2,-16(fp)
  812234:	10000f1e 	bne	r2,zero,812274 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  812238:	e0bffd17 	ldw	r2,-12(fp)
  81223c:	00c32004 	movi	r3,3200
  812240:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  812244:	e0bffb17 	ldw	r2,-20(fp)
  812248:	10800304 	addi	r2,r2,12
  81224c:	e0fffd17 	ldw	r3,-12(fp)
  812250:	18c00117 	ldw	r3,4(r3)
  812254:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  812258:	d8000015 	stw	zero,0(sp)
  81225c:	e1fffd17 	ldw	r7,-12(fp)
  812260:	01802074 	movhi	r6,129
  812264:	3188a304 	addi	r6,r6,8844
  812268:	e17fff17 	ldw	r5,-4(fp)
  81226c:	e13ffe17 	ldw	r4,-8(fp)
  812270:	0812bc40 	call	812bc4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  812274:	0001883a 	nop
  812278:	e037883a 	mov	sp,fp
  81227c:	dfc00117 	ldw	ra,4(sp)
  812280:	df000017 	ldw	fp,0(sp)
  812284:	dec00204 	addi	sp,sp,8
  812288:	f800283a 	ret

0081228c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  81228c:	defffa04 	addi	sp,sp,-24
  812290:	dfc00515 	stw	ra,20(sp)
  812294:	df000415 	stw	fp,16(sp)
  812298:	df000404 	addi	fp,sp,16
  81229c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8122a0:	e0bfff17 	ldw	r2,-4(fp)
  8122a4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8122a8:	e0bffc17 	ldw	r2,-16(fp)
  8122ac:	10800017 	ldw	r2,0(r2)
  8122b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8122b4:	e0bffd17 	ldw	r2,-12(fp)
  8122b8:	10800204 	addi	r2,r2,8
  8122bc:	10800037 	ldwio	r2,0(r2)
  8122c0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8122c4:	e0bffd17 	ldw	r2,-12(fp)
  8122c8:	10800204 	addi	r2,r2,8
  8122cc:	0007883a 	mov	r3,zero
  8122d0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8122d4:	e0bffd17 	ldw	r2,-12(fp)
  8122d8:	10800204 	addi	r2,r2,8
  8122dc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8122e0:	e0bffe17 	ldw	r2,-8(fp)
  8122e4:	1080200c 	andi	r2,r2,128
  8122e8:	10000326 	beq	r2,zero,8122f8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8122ec:	e17ffe17 	ldw	r5,-8(fp)
  8122f0:	e13ffc17 	ldw	r4,-16(fp)
  8122f4:	08123280 	call	812328 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8122f8:	e0bffe17 	ldw	r2,-8(fp)
  8122fc:	1081100c 	andi	r2,r2,1088
  812300:	10000326 	beq	r2,zero,812310 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  812304:	e17ffe17 	ldw	r5,-8(fp)
  812308:	e13ffc17 	ldw	r4,-16(fp)
  81230c:	081240c0 	call	81240c <altera_avalon_uart_txirq>
  }
  

}
  812310:	0001883a 	nop
  812314:	e037883a 	mov	sp,fp
  812318:	dfc00117 	ldw	ra,4(sp)
  81231c:	df000017 	ldw	fp,0(sp)
  812320:	dec00204 	addi	sp,sp,8
  812324:	f800283a 	ret

00812328 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  812328:	defffc04 	addi	sp,sp,-16
  81232c:	df000315 	stw	fp,12(sp)
  812330:	df000304 	addi	fp,sp,12
  812334:	e13ffe15 	stw	r4,-8(fp)
  812338:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  81233c:	e0bfff17 	ldw	r2,-4(fp)
  812340:	108000cc 	andi	r2,r2,3
  812344:	10002c1e 	bne	r2,zero,8123f8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  812348:	e0bffe17 	ldw	r2,-8(fp)
  81234c:	10800317 	ldw	r2,12(r2)
  812350:	e0bffe17 	ldw	r2,-8(fp)
  812354:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812358:	e0bffe17 	ldw	r2,-8(fp)
  81235c:	10800317 	ldw	r2,12(r2)
  812360:	10800044 	addi	r2,r2,1
  812364:	10800fcc 	andi	r2,r2,63
  812368:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81236c:	e0bffe17 	ldw	r2,-8(fp)
  812370:	10800317 	ldw	r2,12(r2)
  812374:	e0fffe17 	ldw	r3,-8(fp)
  812378:	18c00017 	ldw	r3,0(r3)
  81237c:	18c00037 	ldwio	r3,0(r3)
  812380:	1809883a 	mov	r4,r3
  812384:	e0fffe17 	ldw	r3,-8(fp)
  812388:	1885883a 	add	r2,r3,r2
  81238c:	10800704 	addi	r2,r2,28
  812390:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  812394:	e0bffe17 	ldw	r2,-8(fp)
  812398:	e0fffd17 	ldw	r3,-12(fp)
  81239c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8123a0:	e0bffe17 	ldw	r2,-8(fp)
  8123a4:	10800317 	ldw	r2,12(r2)
  8123a8:	10800044 	addi	r2,r2,1
  8123ac:	10800fcc 	andi	r2,r2,63
  8123b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8123b4:	e0bffe17 	ldw	r2,-8(fp)
  8123b8:	10c00217 	ldw	r3,8(r2)
  8123bc:	e0bffd17 	ldw	r2,-12(fp)
  8123c0:	18800e1e 	bne	r3,r2,8123fc <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8123c4:	e0bffe17 	ldw	r2,-8(fp)
  8123c8:	10c00117 	ldw	r3,4(r2)
  8123cc:	00bfdfc4 	movi	r2,-129
  8123d0:	1886703a 	and	r3,r3,r2
  8123d4:	e0bffe17 	ldw	r2,-8(fp)
  8123d8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8123dc:	e0bffe17 	ldw	r2,-8(fp)
  8123e0:	10800017 	ldw	r2,0(r2)
  8123e4:	10800304 	addi	r2,r2,12
  8123e8:	e0fffe17 	ldw	r3,-8(fp)
  8123ec:	18c00117 	ldw	r3,4(r3)
  8123f0:	10c00035 	stwio	r3,0(r2)
  8123f4:	00000106 	br	8123fc <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8123f8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8123fc:	e037883a 	mov	sp,fp
  812400:	df000017 	ldw	fp,0(sp)
  812404:	dec00104 	addi	sp,sp,4
  812408:	f800283a 	ret

0081240c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81240c:	defffb04 	addi	sp,sp,-20
  812410:	df000415 	stw	fp,16(sp)
  812414:	df000404 	addi	fp,sp,16
  812418:	e13ffc15 	stw	r4,-16(fp)
  81241c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  812420:	e0bffc17 	ldw	r2,-16(fp)
  812424:	10c00417 	ldw	r3,16(r2)
  812428:	e0bffc17 	ldw	r2,-16(fp)
  81242c:	10800517 	ldw	r2,20(r2)
  812430:	18803226 	beq	r3,r2,8124fc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  812434:	e0bffc17 	ldw	r2,-16(fp)
  812438:	10800617 	ldw	r2,24(r2)
  81243c:	1080008c 	andi	r2,r2,2
  812440:	10000326 	beq	r2,zero,812450 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  812444:	e0bffd17 	ldw	r2,-12(fp)
  812448:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81244c:	10001d26 	beq	r2,zero,8124c4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  812450:	e0bffc17 	ldw	r2,-16(fp)
  812454:	10800417 	ldw	r2,16(r2)
  812458:	e0bffc17 	ldw	r2,-16(fp)
  81245c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  812460:	e0bffc17 	ldw	r2,-16(fp)
  812464:	10800017 	ldw	r2,0(r2)
  812468:	10800104 	addi	r2,r2,4
  81246c:	e0fffc17 	ldw	r3,-16(fp)
  812470:	18c00417 	ldw	r3,16(r3)
  812474:	e13ffc17 	ldw	r4,-16(fp)
  812478:	20c7883a 	add	r3,r4,r3
  81247c:	18c01704 	addi	r3,r3,92
  812480:	18c00003 	ldbu	r3,0(r3)
  812484:	18c03fcc 	andi	r3,r3,255
  812488:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81248c:	e0bffc17 	ldw	r2,-16(fp)
  812490:	10800417 	ldw	r2,16(r2)
  812494:	10800044 	addi	r2,r2,1
  812498:	e0fffc17 	ldw	r3,-16(fp)
  81249c:	18800415 	stw	r2,16(r3)
  8124a0:	10c00fcc 	andi	r3,r2,63
  8124a4:	e0bffc17 	ldw	r2,-16(fp)
  8124a8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8124ac:	e0bffc17 	ldw	r2,-16(fp)
  8124b0:	10800117 	ldw	r2,4(r2)
  8124b4:	10c01014 	ori	r3,r2,64
  8124b8:	e0bffc17 	ldw	r2,-16(fp)
  8124bc:	10c00115 	stw	r3,4(r2)
  8124c0:	00000e06 	br	8124fc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8124c4:	e0bffc17 	ldw	r2,-16(fp)
  8124c8:	10800017 	ldw	r2,0(r2)
  8124cc:	10800204 	addi	r2,r2,8
  8124d0:	10800037 	ldwio	r2,0(r2)
  8124d4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8124d8:	e0bffd17 	ldw	r2,-12(fp)
  8124dc:	1082000c 	andi	r2,r2,2048
  8124e0:	1000061e 	bne	r2,zero,8124fc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8124e4:	e0bffc17 	ldw	r2,-16(fp)
  8124e8:	10c00117 	ldw	r3,4(r2)
  8124ec:	00bfefc4 	movi	r2,-65
  8124f0:	1886703a 	and	r3,r3,r2
  8124f4:	e0bffc17 	ldw	r2,-16(fp)
  8124f8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8124fc:	e0bffc17 	ldw	r2,-16(fp)
  812500:	10c00417 	ldw	r3,16(r2)
  812504:	e0bffc17 	ldw	r2,-16(fp)
  812508:	10800517 	ldw	r2,20(r2)
  81250c:	1880061e 	bne	r3,r2,812528 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812510:	e0bffc17 	ldw	r2,-16(fp)
  812514:	10c00117 	ldw	r3,4(r2)
  812518:	00beefc4 	movi	r2,-1089
  81251c:	1886703a 	and	r3,r3,r2
  812520:	e0bffc17 	ldw	r2,-16(fp)
  812524:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812528:	e0bffc17 	ldw	r2,-16(fp)
  81252c:	10800017 	ldw	r2,0(r2)
  812530:	10800304 	addi	r2,r2,12
  812534:	e0fffc17 	ldw	r3,-16(fp)
  812538:	18c00117 	ldw	r3,4(r3)
  81253c:	10c00035 	stwio	r3,0(r2)
}
  812540:	0001883a 	nop
  812544:	e037883a 	mov	sp,fp
  812548:	df000017 	ldw	fp,0(sp)
  81254c:	dec00104 	addi	sp,sp,4
  812550:	f800283a 	ret

00812554 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  812554:	defffd04 	addi	sp,sp,-12
  812558:	df000215 	stw	fp,8(sp)
  81255c:	df000204 	addi	fp,sp,8
  812560:	e13ffe15 	stw	r4,-8(fp)
  812564:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812568:	00000506 	br	812580 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81256c:	e0bfff17 	ldw	r2,-4(fp)
  812570:	1090000c 	andi	r2,r2,16384
  812574:	10000226 	beq	r2,zero,812580 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  812578:	00bffd44 	movi	r2,-11
  81257c:	00000606 	br	812598 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812580:	e0bffe17 	ldw	r2,-8(fp)
  812584:	10c00417 	ldw	r3,16(r2)
  812588:	e0bffe17 	ldw	r2,-8(fp)
  81258c:	10800517 	ldw	r2,20(r2)
  812590:	18bff61e 	bne	r3,r2,81256c <__alt_mem_onchip_mem+0xff79256c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812594:	0005883a 	mov	r2,zero
}
  812598:	e037883a 	mov	sp,fp
  81259c:	df000017 	ldw	fp,0(sp)
  8125a0:	dec00104 	addi	sp,sp,4
  8125a4:	f800283a 	ret

008125a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8125a8:	defffe04 	addi	sp,sp,-8
  8125ac:	dfc00115 	stw	ra,4(sp)
  8125b0:	df000015 	stw	fp,0(sp)
  8125b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8125b8:	d0a00b17 	ldw	r2,-32724(gp)
  8125bc:	10000326 	beq	r2,zero,8125cc <alt_get_errno+0x24>
  8125c0:	d0a00b17 	ldw	r2,-32724(gp)
  8125c4:	103ee83a 	callr	r2
  8125c8:	00000106 	br	8125d0 <alt_get_errno+0x28>
  8125cc:	d0a7a704 	addi	r2,gp,-24932
}
  8125d0:	e037883a 	mov	sp,fp
  8125d4:	dfc00117 	ldw	ra,4(sp)
  8125d8:	df000017 	ldw	fp,0(sp)
  8125dc:	dec00204 	addi	sp,sp,8
  8125e0:	f800283a 	ret

008125e4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8125e4:	defff204 	addi	sp,sp,-56
  8125e8:	dfc00d15 	stw	ra,52(sp)
  8125ec:	df000c15 	stw	fp,48(sp)
  8125f0:	df000c04 	addi	fp,sp,48
  8125f4:	e13ffc15 	stw	r4,-16(fp)
  8125f8:	e17ffd15 	stw	r5,-12(fp)
  8125fc:	e1bffe15 	stw	r6,-8(fp)
  812600:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  812604:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  812608:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  81260c:	e0bfff17 	ldw	r2,-4(fp)
  812610:	1090000c 	andi	r2,r2,16384
  812614:	1005003a 	cmpeq	r2,r2,zero
  812618:	10803fcc 	andi	r2,r2,255
  81261c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812620:	00001306 	br	812670 <altera_avalon_uart_read+0x8c>
    {
      count++;
  812624:	e0bff517 	ldw	r2,-44(fp)
  812628:	10800044 	addi	r2,r2,1
  81262c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  812630:	e0bffd17 	ldw	r2,-12(fp)
  812634:	10c00044 	addi	r3,r2,1
  812638:	e0fffd15 	stw	r3,-12(fp)
  81263c:	e0fffc17 	ldw	r3,-16(fp)
  812640:	18c00217 	ldw	r3,8(r3)
  812644:	e13ffc17 	ldw	r4,-16(fp)
  812648:	20c7883a 	add	r3,r4,r3
  81264c:	18c00704 	addi	r3,r3,28
  812650:	18c00003 	ldbu	r3,0(r3)
  812654:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  812658:	e0bffc17 	ldw	r2,-16(fp)
  81265c:	10800217 	ldw	r2,8(r2)
  812660:	10800044 	addi	r2,r2,1
  812664:	10c00fcc 	andi	r3,r2,63
  812668:	e0bffc17 	ldw	r2,-16(fp)
  81266c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812670:	e0fff517 	ldw	r3,-44(fp)
  812674:	e0bffe17 	ldw	r2,-8(fp)
  812678:	1880050e 	bge	r3,r2,812690 <altera_avalon_uart_read+0xac>
  81267c:	e0bffc17 	ldw	r2,-16(fp)
  812680:	10c00217 	ldw	r3,8(r2)
  812684:	e0bffc17 	ldw	r2,-16(fp)
  812688:	10800317 	ldw	r2,12(r2)
  81268c:	18bfe51e 	bne	r3,r2,812624 <__alt_mem_onchip_mem+0xff792624>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  812690:	e0bff517 	ldw	r2,-44(fp)
  812694:	1000251e 	bne	r2,zero,81272c <altera_avalon_uart_read+0x148>
  812698:	e0bffc17 	ldw	r2,-16(fp)
  81269c:	10c00217 	ldw	r3,8(r2)
  8126a0:	e0bffc17 	ldw	r2,-16(fp)
  8126a4:	10800317 	ldw	r2,12(r2)
  8126a8:	1880201e 	bne	r3,r2,81272c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  8126ac:	e0bff617 	ldw	r2,-40(fp)
  8126b0:	1000071e 	bne	r2,zero,8126d0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8126b4:	08125a80 	call	8125a8 <alt_get_errno>
  8126b8:	1007883a 	mov	r3,r2
  8126bc:	008002c4 	movi	r2,11
  8126c0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  8126c4:	00800044 	movi	r2,1
  8126c8:	e0bff405 	stb	r2,-48(fp)
        break;
  8126cc:	00001b06 	br	81273c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126d0:	0005303a 	rdctl	r2,status
  8126d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8126d8:	e0fff917 	ldw	r3,-28(fp)
  8126dc:	00bfff84 	movi	r2,-2
  8126e0:	1884703a 	and	r2,r3,r2
  8126e4:	1001703a 	wrctl	status,r2
  
  return context;
  8126e8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8126ec:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8126f0:	e0bffc17 	ldw	r2,-16(fp)
  8126f4:	10800117 	ldw	r2,4(r2)
  8126f8:	10c02014 	ori	r3,r2,128
  8126fc:	e0bffc17 	ldw	r2,-16(fp)
  812700:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812704:	e0bffc17 	ldw	r2,-16(fp)
  812708:	10800017 	ldw	r2,0(r2)
  81270c:	10800304 	addi	r2,r2,12
  812710:	e0fffc17 	ldw	r3,-16(fp)
  812714:	18c00117 	ldw	r3,4(r3)
  812718:	10c00035 	stwio	r3,0(r2)
  81271c:	e0bff817 	ldw	r2,-32(fp)
  812720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812724:	e0bffa17 	ldw	r2,-24(fp)
  812728:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81272c:	e0bff517 	ldw	r2,-44(fp)
  812730:	1000021e 	bne	r2,zero,81273c <altera_avalon_uart_read+0x158>
  812734:	e0bffe17 	ldw	r2,-8(fp)
  812738:	103fcd1e 	bne	r2,zero,812670 <__alt_mem_onchip_mem+0xff792670>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81273c:	0005303a 	rdctl	r2,status
  812740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812744:	e0fffb17 	ldw	r3,-20(fp)
  812748:	00bfff84 	movi	r2,-2
  81274c:	1884703a 	and	r2,r3,r2
  812750:	1001703a 	wrctl	status,r2
  
  return context;
  812754:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  812758:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81275c:	e0bffc17 	ldw	r2,-16(fp)
  812760:	10800117 	ldw	r2,4(r2)
  812764:	10c02014 	ori	r3,r2,128
  812768:	e0bffc17 	ldw	r2,-16(fp)
  81276c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812770:	e0bffc17 	ldw	r2,-16(fp)
  812774:	10800017 	ldw	r2,0(r2)
  812778:	10800304 	addi	r2,r2,12
  81277c:	e0fffc17 	ldw	r3,-16(fp)
  812780:	18c00117 	ldw	r3,4(r3)
  812784:	10c00035 	stwio	r3,0(r2)
  812788:	e0bff817 	ldw	r2,-32(fp)
  81278c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812790:	e0bff717 	ldw	r2,-36(fp)
  812794:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  812798:	e0bff403 	ldbu	r2,-48(fp)
  81279c:	10000226 	beq	r2,zero,8127a8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8127a0:	00bffd44 	movi	r2,-11
  8127a4:	00000106 	br	8127ac <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  8127a8:	e0bff517 	ldw	r2,-44(fp)
  }
}
  8127ac:	e037883a 	mov	sp,fp
  8127b0:	dfc00117 	ldw	ra,4(sp)
  8127b4:	df000017 	ldw	fp,0(sp)
  8127b8:	dec00204 	addi	sp,sp,8
  8127bc:	f800283a 	ret

008127c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8127c0:	defffe04 	addi	sp,sp,-8
  8127c4:	dfc00115 	stw	ra,4(sp)
  8127c8:	df000015 	stw	fp,0(sp)
  8127cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8127d0:	d0a00b17 	ldw	r2,-32724(gp)
  8127d4:	10000326 	beq	r2,zero,8127e4 <alt_get_errno+0x24>
  8127d8:	d0a00b17 	ldw	r2,-32724(gp)
  8127dc:	103ee83a 	callr	r2
  8127e0:	00000106 	br	8127e8 <alt_get_errno+0x28>
  8127e4:	d0a7a704 	addi	r2,gp,-24932
}
  8127e8:	e037883a 	mov	sp,fp
  8127ec:	dfc00117 	ldw	ra,4(sp)
  8127f0:	df000017 	ldw	fp,0(sp)
  8127f4:	dec00204 	addi	sp,sp,8
  8127f8:	f800283a 	ret

008127fc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8127fc:	defff204 	addi	sp,sp,-56
  812800:	dfc00d15 	stw	ra,52(sp)
  812804:	df000c15 	stw	fp,48(sp)
  812808:	df000c04 	addi	fp,sp,48
  81280c:	e13ffc15 	stw	r4,-16(fp)
  812810:	e17ffd15 	stw	r5,-12(fp)
  812814:	e1bffe15 	stw	r6,-8(fp)
  812818:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  81281c:	e0bffe17 	ldw	r2,-8(fp)
  812820:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  812824:	e0bfff17 	ldw	r2,-4(fp)
  812828:	1090000c 	andi	r2,r2,16384
  81282c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812830:	00003c06 	br	812924 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812834:	e0bffc17 	ldw	r2,-16(fp)
  812838:	10800517 	ldw	r2,20(r2)
  81283c:	10800044 	addi	r2,r2,1
  812840:	10800fcc 	andi	r2,r2,63
  812844:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  812848:	e0bffc17 	ldw	r2,-16(fp)
  81284c:	10c00417 	ldw	r3,16(r2)
  812850:	e0bff717 	ldw	r2,-36(fp)
  812854:	1880221e 	bne	r3,r2,8128e0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  812858:	e0bff517 	ldw	r2,-44(fp)
  81285c:	10000526 	beq	r2,zero,812874 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  812860:	08127c00 	call	8127c0 <alt_get_errno>
  812864:	1007883a 	mov	r3,r2
  812868:	008002c4 	movi	r2,11
  81286c:	18800015 	stw	r2,0(r3)
        break;
  812870:	00002e06 	br	81292c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812874:	0005303a 	rdctl	r2,status
  812878:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81287c:	e0fff917 	ldw	r3,-28(fp)
  812880:	00bfff84 	movi	r2,-2
  812884:	1884703a 	and	r2,r3,r2
  812888:	1001703a 	wrctl	status,r2
  
  return context;
  81288c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812890:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812894:	e0bffc17 	ldw	r2,-16(fp)
  812898:	10800117 	ldw	r2,4(r2)
  81289c:	10c11014 	ori	r3,r2,1088
  8128a0:	e0bffc17 	ldw	r2,-16(fp)
  8128a4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8128a8:	e0bffc17 	ldw	r2,-16(fp)
  8128ac:	10800017 	ldw	r2,0(r2)
  8128b0:	10800304 	addi	r2,r2,12
  8128b4:	e0fffc17 	ldw	r3,-16(fp)
  8128b8:	18c00117 	ldw	r3,4(r3)
  8128bc:	10c00035 	stwio	r3,0(r2)
  8128c0:	e0bff817 	ldw	r2,-32(fp)
  8128c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8128c8:	e0bff617 	ldw	r2,-40(fp)
  8128cc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8128d0:	e0bffc17 	ldw	r2,-16(fp)
  8128d4:	10c00417 	ldw	r3,16(r2)
  8128d8:	e0bff717 	ldw	r2,-36(fp)
  8128dc:	18bffc26 	beq	r3,r2,8128d0 <__alt_mem_onchip_mem+0xff7928d0>
      }
    }

    count--;
  8128e0:	e0bff417 	ldw	r2,-48(fp)
  8128e4:	10bfffc4 	addi	r2,r2,-1
  8128e8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8128ec:	e0bffc17 	ldw	r2,-16(fp)
  8128f0:	10c00517 	ldw	r3,20(r2)
  8128f4:	e0bffd17 	ldw	r2,-12(fp)
  8128f8:	11000044 	addi	r4,r2,1
  8128fc:	e13ffd15 	stw	r4,-12(fp)
  812900:	10800003 	ldbu	r2,0(r2)
  812904:	1009883a 	mov	r4,r2
  812908:	e0bffc17 	ldw	r2,-16(fp)
  81290c:	10c5883a 	add	r2,r2,r3
  812910:	10801704 	addi	r2,r2,92
  812914:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  812918:	e0bffc17 	ldw	r2,-16(fp)
  81291c:	e0fff717 	ldw	r3,-36(fp)
  812920:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812924:	e0bff417 	ldw	r2,-48(fp)
  812928:	103fc21e 	bne	r2,zero,812834 <__alt_mem_onchip_mem+0xff792834>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81292c:	0005303a 	rdctl	r2,status
  812930:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812934:	e0fffb17 	ldw	r3,-20(fp)
  812938:	00bfff84 	movi	r2,-2
  81293c:	1884703a 	and	r2,r3,r2
  812940:	1001703a 	wrctl	status,r2
  
  return context;
  812944:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  812948:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81294c:	e0bffc17 	ldw	r2,-16(fp)
  812950:	10800117 	ldw	r2,4(r2)
  812954:	10c11014 	ori	r3,r2,1088
  812958:	e0bffc17 	ldw	r2,-16(fp)
  81295c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812960:	e0bffc17 	ldw	r2,-16(fp)
  812964:	10800017 	ldw	r2,0(r2)
  812968:	10800304 	addi	r2,r2,12
  81296c:	e0fffc17 	ldw	r3,-16(fp)
  812970:	18c00117 	ldw	r3,4(r3)
  812974:	10c00035 	stwio	r3,0(r2)
  812978:	e0bff817 	ldw	r2,-32(fp)
  81297c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812980:	e0bffa17 	ldw	r2,-24(fp)
  812984:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812988:	e0fffe17 	ldw	r3,-8(fp)
  81298c:	e0bff417 	ldw	r2,-48(fp)
  812990:	1885c83a 	sub	r2,r3,r2
}
  812994:	e037883a 	mov	sp,fp
  812998:	dfc00117 	ldw	ra,4(sp)
  81299c:	df000017 	ldw	fp,0(sp)
  8129a0:	dec00204 	addi	sp,sp,8
  8129a4:	f800283a 	ret

008129a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8129a8:	defffe04 	addi	sp,sp,-8
  8129ac:	df000115 	stw	fp,4(sp)
  8129b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8129b4:	e03fff15 	stw	zero,-4(fp)
  8129b8:	00000506 	br	8129d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8129bc:	e0bfff17 	ldw	r2,-4(fp)
  8129c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8129c4:	e0bfff17 	ldw	r2,-4(fp)
  8129c8:	10800804 	addi	r2,r2,32
  8129cc:	e0bfff15 	stw	r2,-4(fp)
  8129d0:	e0bfff17 	ldw	r2,-4(fp)
  8129d4:	10820030 	cmpltui	r2,r2,2048
  8129d8:	103ff81e 	bne	r2,zero,8129bc <__alt_mem_onchip_mem+0xff7929bc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8129dc:	0001883a 	nop
  8129e0:	e037883a 	mov	sp,fp
  8129e4:	df000017 	ldw	fp,0(sp)
  8129e8:	dec00104 	addi	sp,sp,4
  8129ec:	f800283a 	ret

008129f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8129f0:	defffe04 	addi	sp,sp,-8
  8129f4:	dfc00115 	stw	ra,4(sp)
  8129f8:	df000015 	stw	fp,0(sp)
  8129fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812a00:	d0a00b17 	ldw	r2,-32724(gp)
  812a04:	10000326 	beq	r2,zero,812a14 <alt_get_errno+0x24>
  812a08:	d0a00b17 	ldw	r2,-32724(gp)
  812a0c:	103ee83a 	callr	r2
  812a10:	00000106 	br	812a18 <alt_get_errno+0x28>
  812a14:	d0a7a704 	addi	r2,gp,-24932
}
  812a18:	e037883a 	mov	sp,fp
  812a1c:	dfc00117 	ldw	ra,4(sp)
  812a20:	df000017 	ldw	fp,0(sp)
  812a24:	dec00204 	addi	sp,sp,8
  812a28:	f800283a 	ret

00812a2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812a2c:	defffa04 	addi	sp,sp,-24
  812a30:	dfc00515 	stw	ra,20(sp)
  812a34:	df000415 	stw	fp,16(sp)
  812a38:	df000404 	addi	fp,sp,16
  812a3c:	e13ffe15 	stw	r4,-8(fp)
  812a40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812a44:	e0bffe17 	ldw	r2,-8(fp)
  812a48:	10000326 	beq	r2,zero,812a58 <alt_dev_llist_insert+0x2c>
  812a4c:	e0bffe17 	ldw	r2,-8(fp)
  812a50:	10800217 	ldw	r2,8(r2)
  812a54:	1000061e 	bne	r2,zero,812a70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812a58:	08129f00 	call	8129f0 <alt_get_errno>
  812a5c:	1007883a 	mov	r3,r2
  812a60:	00800584 	movi	r2,22
  812a64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812a68:	00bffa84 	movi	r2,-22
  812a6c:	00001306 	br	812abc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812a70:	e0bffe17 	ldw	r2,-8(fp)
  812a74:	e0ffff17 	ldw	r3,-4(fp)
  812a78:	e0fffc15 	stw	r3,-16(fp)
  812a7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812a80:	e0bffd17 	ldw	r2,-12(fp)
  812a84:	e0fffc17 	ldw	r3,-16(fp)
  812a88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812a8c:	e0bffc17 	ldw	r2,-16(fp)
  812a90:	10c00017 	ldw	r3,0(r2)
  812a94:	e0bffd17 	ldw	r2,-12(fp)
  812a98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812a9c:	e0bffc17 	ldw	r2,-16(fp)
  812aa0:	10800017 	ldw	r2,0(r2)
  812aa4:	e0fffd17 	ldw	r3,-12(fp)
  812aa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812aac:	e0bffc17 	ldw	r2,-16(fp)
  812ab0:	e0fffd17 	ldw	r3,-12(fp)
  812ab4:	10c00015 	stw	r3,0(r2)

  return 0;  
  812ab8:	0005883a 	mov	r2,zero
}
  812abc:	e037883a 	mov	sp,fp
  812ac0:	dfc00117 	ldw	ra,4(sp)
  812ac4:	df000017 	ldw	fp,0(sp)
  812ac8:	dec00204 	addi	sp,sp,8
  812acc:	f800283a 	ret

00812ad0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812ad0:	defffd04 	addi	sp,sp,-12
  812ad4:	dfc00215 	stw	ra,8(sp)
  812ad8:	df000115 	stw	fp,4(sp)
  812adc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ae0:	00802074 	movhi	r2,129
  812ae4:	108ea704 	addi	r2,r2,15004
  812ae8:	e0bfff15 	stw	r2,-4(fp)
  812aec:	00000606 	br	812b08 <_do_ctors+0x38>
        (*ctor) (); 
  812af0:	e0bfff17 	ldw	r2,-4(fp)
  812af4:	10800017 	ldw	r2,0(r2)
  812af8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812afc:	e0bfff17 	ldw	r2,-4(fp)
  812b00:	10bfff04 	addi	r2,r2,-4
  812b04:	e0bfff15 	stw	r2,-4(fp)
  812b08:	e0ffff17 	ldw	r3,-4(fp)
  812b0c:	00802074 	movhi	r2,129
  812b10:	108ea804 	addi	r2,r2,15008
  812b14:	18bff62e 	bgeu	r3,r2,812af0 <__alt_mem_onchip_mem+0xff792af0>
        (*ctor) (); 
}
  812b18:	0001883a 	nop
  812b1c:	e037883a 	mov	sp,fp
  812b20:	dfc00117 	ldw	ra,4(sp)
  812b24:	df000017 	ldw	fp,0(sp)
  812b28:	dec00204 	addi	sp,sp,8
  812b2c:	f800283a 	ret

00812b30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812b30:	defffd04 	addi	sp,sp,-12
  812b34:	dfc00215 	stw	ra,8(sp)
  812b38:	df000115 	stw	fp,4(sp)
  812b3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812b40:	00802074 	movhi	r2,129
  812b44:	108ea704 	addi	r2,r2,15004
  812b48:	e0bfff15 	stw	r2,-4(fp)
  812b4c:	00000606 	br	812b68 <_do_dtors+0x38>
        (*dtor) (); 
  812b50:	e0bfff17 	ldw	r2,-4(fp)
  812b54:	10800017 	ldw	r2,0(r2)
  812b58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812b5c:	e0bfff17 	ldw	r2,-4(fp)
  812b60:	10bfff04 	addi	r2,r2,-4
  812b64:	e0bfff15 	stw	r2,-4(fp)
  812b68:	e0ffff17 	ldw	r3,-4(fp)
  812b6c:	00802074 	movhi	r2,129
  812b70:	108ea804 	addi	r2,r2,15008
  812b74:	18bff62e 	bgeu	r3,r2,812b50 <__alt_mem_onchip_mem+0xff792b50>
        (*dtor) (); 
}
  812b78:	0001883a 	nop
  812b7c:	e037883a 	mov	sp,fp
  812b80:	dfc00117 	ldw	ra,4(sp)
  812b84:	df000017 	ldw	fp,0(sp)
  812b88:	dec00204 	addi	sp,sp,8
  812b8c:	f800283a 	ret

00812b90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  812b90:	defffe04 	addi	sp,sp,-8
  812b94:	dfc00115 	stw	ra,4(sp)
  812b98:	df000015 	stw	fp,0(sp)
  812b9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812ba0:	01440004 	movi	r5,4096
  812ba4:	0009883a 	mov	r4,zero
  812ba8:	08135e00 	call	8135e0 <alt_icache_flush>
#endif
}
  812bac:	0001883a 	nop
  812bb0:	e037883a 	mov	sp,fp
  812bb4:	dfc00117 	ldw	ra,4(sp)
  812bb8:	df000017 	ldw	fp,0(sp)
  812bbc:	dec00204 	addi	sp,sp,8
  812bc0:	f800283a 	ret

00812bc4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812bc4:	defff904 	addi	sp,sp,-28
  812bc8:	dfc00615 	stw	ra,24(sp)
  812bcc:	df000515 	stw	fp,20(sp)
  812bd0:	df000504 	addi	fp,sp,20
  812bd4:	e13ffc15 	stw	r4,-16(fp)
  812bd8:	e17ffd15 	stw	r5,-12(fp)
  812bdc:	e1bffe15 	stw	r6,-8(fp)
  812be0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812be4:	e0800217 	ldw	r2,8(fp)
  812be8:	d8800015 	stw	r2,0(sp)
  812bec:	e1ffff17 	ldw	r7,-4(fp)
  812bf0:	e1bffe17 	ldw	r6,-8(fp)
  812bf4:	e17ffd17 	ldw	r5,-12(fp)
  812bf8:	e13ffc17 	ldw	r4,-16(fp)
  812bfc:	0812d740 	call	812d74 <alt_iic_isr_register>
}  
  812c00:	e037883a 	mov	sp,fp
  812c04:	dfc00117 	ldw	ra,4(sp)
  812c08:	df000017 	ldw	fp,0(sp)
  812c0c:	dec00204 	addi	sp,sp,8
  812c10:	f800283a 	ret

00812c14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812c14:	defff904 	addi	sp,sp,-28
  812c18:	df000615 	stw	fp,24(sp)
  812c1c:	df000604 	addi	fp,sp,24
  812c20:	e13ffe15 	stw	r4,-8(fp)
  812c24:	e17fff15 	stw	r5,-4(fp)
  812c28:	e0bfff17 	ldw	r2,-4(fp)
  812c2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c30:	0005303a 	rdctl	r2,status
  812c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c38:	e0fffb17 	ldw	r3,-20(fp)
  812c3c:	00bfff84 	movi	r2,-2
  812c40:	1884703a 	and	r2,r3,r2
  812c44:	1001703a 	wrctl	status,r2
  
  return context;
  812c48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812c4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  812c50:	00c00044 	movi	r3,1
  812c54:	e0bffa17 	ldw	r2,-24(fp)
  812c58:	1884983a 	sll	r2,r3,r2
  812c5c:	1007883a 	mov	r3,r2
  812c60:	d0a7ad17 	ldw	r2,-24908(gp)
  812c64:	1884b03a 	or	r2,r3,r2
  812c68:	d0a7ad15 	stw	r2,-24908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812c6c:	d0a7ad17 	ldw	r2,-24908(gp)
  812c70:	100170fa 	wrctl	ienable,r2
  812c74:	e0bffc17 	ldw	r2,-16(fp)
  812c78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c7c:	e0bffd17 	ldw	r2,-12(fp)
  812c80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812c84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  812c88:	0001883a 	nop
}
  812c8c:	e037883a 	mov	sp,fp
  812c90:	df000017 	ldw	fp,0(sp)
  812c94:	dec00104 	addi	sp,sp,4
  812c98:	f800283a 	ret

00812c9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812c9c:	defff904 	addi	sp,sp,-28
  812ca0:	df000615 	stw	fp,24(sp)
  812ca4:	df000604 	addi	fp,sp,24
  812ca8:	e13ffe15 	stw	r4,-8(fp)
  812cac:	e17fff15 	stw	r5,-4(fp)
  812cb0:	e0bfff17 	ldw	r2,-4(fp)
  812cb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cb8:	0005303a 	rdctl	r2,status
  812cbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812cc0:	e0fffb17 	ldw	r3,-20(fp)
  812cc4:	00bfff84 	movi	r2,-2
  812cc8:	1884703a 	and	r2,r3,r2
  812ccc:	1001703a 	wrctl	status,r2
  
  return context;
  812cd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812cd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  812cd8:	00c00044 	movi	r3,1
  812cdc:	e0bffa17 	ldw	r2,-24(fp)
  812ce0:	1884983a 	sll	r2,r3,r2
  812ce4:	0084303a 	nor	r2,zero,r2
  812ce8:	1007883a 	mov	r3,r2
  812cec:	d0a7ad17 	ldw	r2,-24908(gp)
  812cf0:	1884703a 	and	r2,r3,r2
  812cf4:	d0a7ad15 	stw	r2,-24908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812cf8:	d0a7ad17 	ldw	r2,-24908(gp)
  812cfc:	100170fa 	wrctl	ienable,r2
  812d00:	e0bffc17 	ldw	r2,-16(fp)
  812d04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d08:	e0bffd17 	ldw	r2,-12(fp)
  812d0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812d10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812d14:	0001883a 	nop
}
  812d18:	e037883a 	mov	sp,fp
  812d1c:	df000017 	ldw	fp,0(sp)
  812d20:	dec00104 	addi	sp,sp,4
  812d24:	f800283a 	ret

00812d28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  812d28:	defffc04 	addi	sp,sp,-16
  812d2c:	df000315 	stw	fp,12(sp)
  812d30:	df000304 	addi	fp,sp,12
  812d34:	e13ffe15 	stw	r4,-8(fp)
  812d38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812d3c:	000530fa 	rdctl	r2,ienable
  812d40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  812d44:	00c00044 	movi	r3,1
  812d48:	e0bfff17 	ldw	r2,-4(fp)
  812d4c:	1884983a 	sll	r2,r3,r2
  812d50:	1007883a 	mov	r3,r2
  812d54:	e0bffd17 	ldw	r2,-12(fp)
  812d58:	1884703a 	and	r2,r3,r2
  812d5c:	1004c03a 	cmpne	r2,r2,zero
  812d60:	10803fcc 	andi	r2,r2,255
}
  812d64:	e037883a 	mov	sp,fp
  812d68:	df000017 	ldw	fp,0(sp)
  812d6c:	dec00104 	addi	sp,sp,4
  812d70:	f800283a 	ret

00812d74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812d74:	defff504 	addi	sp,sp,-44
  812d78:	dfc00a15 	stw	ra,40(sp)
  812d7c:	df000915 	stw	fp,36(sp)
  812d80:	df000904 	addi	fp,sp,36
  812d84:	e13ffc15 	stw	r4,-16(fp)
  812d88:	e17ffd15 	stw	r5,-12(fp)
  812d8c:	e1bffe15 	stw	r6,-8(fp)
  812d90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812d94:	00bffa84 	movi	r2,-22
  812d98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812d9c:	e0bffd17 	ldw	r2,-12(fp)
  812da0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812da4:	e0bff817 	ldw	r2,-32(fp)
  812da8:	10800808 	cmpgei	r2,r2,32
  812dac:	1000271e 	bne	r2,zero,812e4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812db0:	0005303a 	rdctl	r2,status
  812db4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812db8:	e0fffb17 	ldw	r3,-20(fp)
  812dbc:	00bfff84 	movi	r2,-2
  812dc0:	1884703a 	and	r2,r3,r2
  812dc4:	1001703a 	wrctl	status,r2
  
  return context;
  812dc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812dcc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812dd0:	00802074 	movhi	r2,129
  812dd4:	109f7504 	addi	r2,r2,32212
  812dd8:	e0fff817 	ldw	r3,-32(fp)
  812ddc:	180690fa 	slli	r3,r3,3
  812de0:	10c5883a 	add	r2,r2,r3
  812de4:	e0fffe17 	ldw	r3,-8(fp)
  812de8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812dec:	00802074 	movhi	r2,129
  812df0:	109f7504 	addi	r2,r2,32212
  812df4:	e0fff817 	ldw	r3,-32(fp)
  812df8:	180690fa 	slli	r3,r3,3
  812dfc:	10c5883a 	add	r2,r2,r3
  812e00:	10800104 	addi	r2,r2,4
  812e04:	e0ffff17 	ldw	r3,-4(fp)
  812e08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812e0c:	e0bffe17 	ldw	r2,-8(fp)
  812e10:	10000526 	beq	r2,zero,812e28 <alt_iic_isr_register+0xb4>
  812e14:	e0bff817 	ldw	r2,-32(fp)
  812e18:	100b883a 	mov	r5,r2
  812e1c:	e13ffc17 	ldw	r4,-16(fp)
  812e20:	0812c140 	call	812c14 <alt_ic_irq_enable>
  812e24:	00000406 	br	812e38 <alt_iic_isr_register+0xc4>
  812e28:	e0bff817 	ldw	r2,-32(fp)
  812e2c:	100b883a 	mov	r5,r2
  812e30:	e13ffc17 	ldw	r4,-16(fp)
  812e34:	0812c9c0 	call	812c9c <alt_ic_irq_disable>
  812e38:	e0bff715 	stw	r2,-36(fp)
  812e3c:	e0bffa17 	ldw	r2,-24(fp)
  812e40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e44:	e0bff917 	ldw	r2,-28(fp)
  812e48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  812e4c:	e0bff717 	ldw	r2,-36(fp)
}
  812e50:	e037883a 	mov	sp,fp
  812e54:	dfc00117 	ldw	ra,4(sp)
  812e58:	df000017 	ldw	fp,0(sp)
  812e5c:	dec00204 	addi	sp,sp,8
  812e60:	f800283a 	ret

00812e64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812e64:	defff904 	addi	sp,sp,-28
  812e68:	dfc00615 	stw	ra,24(sp)
  812e6c:	df000515 	stw	fp,20(sp)
  812e70:	df000504 	addi	fp,sp,20
  812e74:	e13ffc15 	stw	r4,-16(fp)
  812e78:	e17ffd15 	stw	r5,-12(fp)
  812e7c:	e1bffe15 	stw	r6,-8(fp)
  812e80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812e84:	e1bfff17 	ldw	r6,-4(fp)
  812e88:	e17ffe17 	ldw	r5,-8(fp)
  812e8c:	e13ffd17 	ldw	r4,-12(fp)
  812e90:	08130a40 	call	8130a4 <open>
  812e94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812e98:	e0bffb17 	ldw	r2,-20(fp)
  812e9c:	10001c16 	blt	r2,zero,812f10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812ea0:	00802074 	movhi	r2,129
  812ea4:	10929b04 	addi	r2,r2,19052
  812ea8:	e0fffb17 	ldw	r3,-20(fp)
  812eac:	18c00324 	muli	r3,r3,12
  812eb0:	10c5883a 	add	r2,r2,r3
  812eb4:	10c00017 	ldw	r3,0(r2)
  812eb8:	e0bffc17 	ldw	r2,-16(fp)
  812ebc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812ec0:	00802074 	movhi	r2,129
  812ec4:	10929b04 	addi	r2,r2,19052
  812ec8:	e0fffb17 	ldw	r3,-20(fp)
  812ecc:	18c00324 	muli	r3,r3,12
  812ed0:	10c5883a 	add	r2,r2,r3
  812ed4:	10800104 	addi	r2,r2,4
  812ed8:	10c00017 	ldw	r3,0(r2)
  812edc:	e0bffc17 	ldw	r2,-16(fp)
  812ee0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812ee4:	00802074 	movhi	r2,129
  812ee8:	10929b04 	addi	r2,r2,19052
  812eec:	e0fffb17 	ldw	r3,-20(fp)
  812ef0:	18c00324 	muli	r3,r3,12
  812ef4:	10c5883a 	add	r2,r2,r3
  812ef8:	10800204 	addi	r2,r2,8
  812efc:	10c00017 	ldw	r3,0(r2)
  812f00:	e0bffc17 	ldw	r2,-16(fp)
  812f04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812f08:	e13ffb17 	ldw	r4,-20(fp)
  812f0c:	08101a40 	call	8101a4 <alt_release_fd>
  }
} 
  812f10:	0001883a 	nop
  812f14:	e037883a 	mov	sp,fp
  812f18:	dfc00117 	ldw	ra,4(sp)
  812f1c:	df000017 	ldw	fp,0(sp)
  812f20:	dec00204 	addi	sp,sp,8
  812f24:	f800283a 	ret

00812f28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812f28:	defffb04 	addi	sp,sp,-20
  812f2c:	dfc00415 	stw	ra,16(sp)
  812f30:	df000315 	stw	fp,12(sp)
  812f34:	df000304 	addi	fp,sp,12
  812f38:	e13ffd15 	stw	r4,-12(fp)
  812f3c:	e17ffe15 	stw	r5,-8(fp)
  812f40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  812f44:	01c07fc4 	movi	r7,511
  812f48:	01800044 	movi	r6,1
  812f4c:	e17ffd17 	ldw	r5,-12(fp)
  812f50:	01002074 	movhi	r4,129
  812f54:	21129e04 	addi	r4,r4,19064
  812f58:	0812e640 	call	812e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  812f5c:	01c07fc4 	movi	r7,511
  812f60:	000d883a 	mov	r6,zero
  812f64:	e17ffe17 	ldw	r5,-8(fp)
  812f68:	01002074 	movhi	r4,129
  812f6c:	21129b04 	addi	r4,r4,19052
  812f70:	0812e640 	call	812e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812f74:	01c07fc4 	movi	r7,511
  812f78:	01800044 	movi	r6,1
  812f7c:	e17fff17 	ldw	r5,-4(fp)
  812f80:	01002074 	movhi	r4,129
  812f84:	2112a104 	addi	r4,r4,19076
  812f88:	0812e640 	call	812e64 <alt_open_fd>
}  
  812f8c:	0001883a 	nop
  812f90:	e037883a 	mov	sp,fp
  812f94:	dfc00117 	ldw	ra,4(sp)
  812f98:	df000017 	ldw	fp,0(sp)
  812f9c:	dec00204 	addi	sp,sp,8
  812fa0:	f800283a 	ret

00812fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812fa4:	defffe04 	addi	sp,sp,-8
  812fa8:	dfc00115 	stw	ra,4(sp)
  812fac:	df000015 	stw	fp,0(sp)
  812fb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812fb4:	d0a00b17 	ldw	r2,-32724(gp)
  812fb8:	10000326 	beq	r2,zero,812fc8 <alt_get_errno+0x24>
  812fbc:	d0a00b17 	ldw	r2,-32724(gp)
  812fc0:	103ee83a 	callr	r2
  812fc4:	00000106 	br	812fcc <alt_get_errno+0x28>
  812fc8:	d0a7a704 	addi	r2,gp,-24932
}
  812fcc:	e037883a 	mov	sp,fp
  812fd0:	dfc00117 	ldw	ra,4(sp)
  812fd4:	df000017 	ldw	fp,0(sp)
  812fd8:	dec00204 	addi	sp,sp,8
  812fdc:	f800283a 	ret

00812fe0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812fe0:	defffd04 	addi	sp,sp,-12
  812fe4:	df000215 	stw	fp,8(sp)
  812fe8:	df000204 	addi	fp,sp,8
  812fec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812ff0:	e0bfff17 	ldw	r2,-4(fp)
  812ff4:	10800217 	ldw	r2,8(r2)
  812ff8:	10d00034 	orhi	r3,r2,16384
  812ffc:	e0bfff17 	ldw	r2,-4(fp)
  813000:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813004:	e03ffe15 	stw	zero,-8(fp)
  813008:	00001d06 	br	813080 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81300c:	00802074 	movhi	r2,129
  813010:	10929b04 	addi	r2,r2,19052
  813014:	e0fffe17 	ldw	r3,-8(fp)
  813018:	18c00324 	muli	r3,r3,12
  81301c:	10c5883a 	add	r2,r2,r3
  813020:	10c00017 	ldw	r3,0(r2)
  813024:	e0bfff17 	ldw	r2,-4(fp)
  813028:	10800017 	ldw	r2,0(r2)
  81302c:	1880111e 	bne	r3,r2,813074 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813030:	00802074 	movhi	r2,129
  813034:	10929b04 	addi	r2,r2,19052
  813038:	e0fffe17 	ldw	r3,-8(fp)
  81303c:	18c00324 	muli	r3,r3,12
  813040:	10c5883a 	add	r2,r2,r3
  813044:	10800204 	addi	r2,r2,8
  813048:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81304c:	1000090e 	bge	r2,zero,813074 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  813050:	e0bffe17 	ldw	r2,-8(fp)
  813054:	10c00324 	muli	r3,r2,12
  813058:	00802074 	movhi	r2,129
  81305c:	10929b04 	addi	r2,r2,19052
  813060:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813064:	e0bfff17 	ldw	r2,-4(fp)
  813068:	18800226 	beq	r3,r2,813074 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81306c:	00bffcc4 	movi	r2,-13
  813070:	00000806 	br	813094 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813074:	e0bffe17 	ldw	r2,-8(fp)
  813078:	10800044 	addi	r2,r2,1
  81307c:	e0bffe15 	stw	r2,-8(fp)
  813080:	d0a00a17 	ldw	r2,-32728(gp)
  813084:	1007883a 	mov	r3,r2
  813088:	e0bffe17 	ldw	r2,-8(fp)
  81308c:	18bfdf2e 	bgeu	r3,r2,81300c <__alt_mem_onchip_mem+0xff79300c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813090:	0005883a 	mov	r2,zero
}
  813094:	e037883a 	mov	sp,fp
  813098:	df000017 	ldw	fp,0(sp)
  81309c:	dec00104 	addi	sp,sp,4
  8130a0:	f800283a 	ret

008130a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8130a4:	defff604 	addi	sp,sp,-40
  8130a8:	dfc00915 	stw	ra,36(sp)
  8130ac:	df000815 	stw	fp,32(sp)
  8130b0:	df000804 	addi	fp,sp,32
  8130b4:	e13ffd15 	stw	r4,-12(fp)
  8130b8:	e17ffe15 	stw	r5,-8(fp)
  8130bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8130c0:	00bfffc4 	movi	r2,-1
  8130c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8130c8:	00bffb44 	movi	r2,-19
  8130cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8130d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8130d4:	d1600804 	addi	r5,gp,-32736
  8130d8:	e13ffd17 	ldw	r4,-12(fp)
  8130dc:	08133a40 	call	8133a4 <alt_find_dev>
  8130e0:	e0bff815 	stw	r2,-32(fp)
  8130e4:	e0bff817 	ldw	r2,-32(fp)
  8130e8:	1000051e 	bne	r2,zero,813100 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8130ec:	e13ffd17 	ldw	r4,-12(fp)
  8130f0:	08134340 	call	813434 <alt_find_file>
  8130f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8130f8:	00800044 	movi	r2,1
  8130fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  813100:	e0bff817 	ldw	r2,-32(fp)
  813104:	10002926 	beq	r2,zero,8131ac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  813108:	e13ff817 	ldw	r4,-32(fp)
  81310c:	081353c0 	call	81353c <alt_get_fd>
  813110:	e0bff915 	stw	r2,-28(fp)
  813114:	e0bff917 	ldw	r2,-28(fp)
  813118:	1000030e 	bge	r2,zero,813128 <open+0x84>
    {
      status = index;
  81311c:	e0bff917 	ldw	r2,-28(fp)
  813120:	e0bffa15 	stw	r2,-24(fp)
  813124:	00002306 	br	8131b4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  813128:	e0bff917 	ldw	r2,-28(fp)
  81312c:	10c00324 	muli	r3,r2,12
  813130:	00802074 	movhi	r2,129
  813134:	10929b04 	addi	r2,r2,19052
  813138:	1885883a 	add	r2,r3,r2
  81313c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813140:	e0fffe17 	ldw	r3,-8(fp)
  813144:	00900034 	movhi	r2,16384
  813148:	10bfffc4 	addi	r2,r2,-1
  81314c:	1886703a 	and	r3,r3,r2
  813150:	e0bffc17 	ldw	r2,-16(fp)
  813154:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813158:	e0bffb17 	ldw	r2,-20(fp)
  81315c:	1000051e 	bne	r2,zero,813174 <open+0xd0>
  813160:	e13ffc17 	ldw	r4,-16(fp)
  813164:	0812fe00 	call	812fe0 <alt_file_locked>
  813168:	e0bffa15 	stw	r2,-24(fp)
  81316c:	e0bffa17 	ldw	r2,-24(fp)
  813170:	10001016 	blt	r2,zero,8131b4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813174:	e0bff817 	ldw	r2,-32(fp)
  813178:	10800317 	ldw	r2,12(r2)
  81317c:	10000826 	beq	r2,zero,8131a0 <open+0xfc>
  813180:	e0bff817 	ldw	r2,-32(fp)
  813184:	10800317 	ldw	r2,12(r2)
  813188:	e1ffff17 	ldw	r7,-4(fp)
  81318c:	e1bffe17 	ldw	r6,-8(fp)
  813190:	e17ffd17 	ldw	r5,-12(fp)
  813194:	e13ffc17 	ldw	r4,-16(fp)
  813198:	103ee83a 	callr	r2
  81319c:	00000106 	br	8131a4 <open+0x100>
  8131a0:	0005883a 	mov	r2,zero
  8131a4:	e0bffa15 	stw	r2,-24(fp)
  8131a8:	00000206 	br	8131b4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8131ac:	00bffb44 	movi	r2,-19
  8131b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8131b4:	e0bffa17 	ldw	r2,-24(fp)
  8131b8:	1000090e 	bge	r2,zero,8131e0 <open+0x13c>
  {
    alt_release_fd (index);  
  8131bc:	e13ff917 	ldw	r4,-28(fp)
  8131c0:	08101a40 	call	8101a4 <alt_release_fd>
    ALT_ERRNO = -status;
  8131c4:	0812fa40 	call	812fa4 <alt_get_errno>
  8131c8:	1007883a 	mov	r3,r2
  8131cc:	e0bffa17 	ldw	r2,-24(fp)
  8131d0:	0085c83a 	sub	r2,zero,r2
  8131d4:	18800015 	stw	r2,0(r3)
    return -1;
  8131d8:	00bfffc4 	movi	r2,-1
  8131dc:	00000106 	br	8131e4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8131e0:	e0bff917 	ldw	r2,-28(fp)
}
  8131e4:	e037883a 	mov	sp,fp
  8131e8:	dfc00117 	ldw	ra,4(sp)
  8131ec:	df000017 	ldw	fp,0(sp)
  8131f0:	dec00204 	addi	sp,sp,8
  8131f4:	f800283a 	ret

008131f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8131f8:	defffd04 	addi	sp,sp,-12
  8131fc:	dfc00215 	stw	ra,8(sp)
  813200:	df000115 	stw	fp,4(sp)
  813204:	df000104 	addi	fp,sp,4
  813208:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81320c:	e13fff17 	ldw	r4,-4(fp)
  813210:	081324c0 	call	81324c <alt_busy_sleep>
}
  813214:	e037883a 	mov	sp,fp
  813218:	dfc00117 	ldw	ra,4(sp)
  81321c:	df000017 	ldw	fp,0(sp)
  813220:	dec00204 	addi	sp,sp,8
  813224:	f800283a 	ret

00813228 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  813228:	deffff04 	addi	sp,sp,-4
  81322c:	df000015 	stw	fp,0(sp)
  813230:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813234:	000170fa 	wrctl	ienable,zero
}
  813238:	0001883a 	nop
  81323c:	e037883a 	mov	sp,fp
  813240:	df000017 	ldw	fp,0(sp)
  813244:	dec00104 	addi	sp,sp,4
  813248:	f800283a 	ret

0081324c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81324c:	defffa04 	addi	sp,sp,-24
  813250:	dfc00515 	stw	ra,20(sp)
  813254:	df000415 	stw	fp,16(sp)
  813258:	df000404 	addi	fp,sp,16
  81325c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813260:	008000c4 	movi	r2,3
  813264:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  813268:	e0fffd17 	ldw	r3,-12(fp)
  81326c:	008003f4 	movhi	r2,15
  813270:	10909004 	addi	r2,r2,16960
  813274:	1885383a 	mul	r2,r3,r2
  813278:	100b883a 	mov	r5,r2
  81327c:	0100bef4 	movhi	r4,763
  813280:	213c2004 	addi	r4,r4,-3968
  813284:	08031540 	call	803154 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  813288:	100b883a 	mov	r5,r2
  81328c:	01200034 	movhi	r4,32768
  813290:	213fffc4 	addi	r4,r4,-1
  813294:	08031540 	call	803154 <__udivsi3>
  813298:	100b883a 	mov	r5,r2
  81329c:	e13fff17 	ldw	r4,-4(fp)
  8132a0:	08031540 	call	803154 <__udivsi3>
  8132a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8132a8:	e0bffe17 	ldw	r2,-8(fp)
  8132ac:	10002a26 	beq	r2,zero,813358 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8132b0:	e03ffc15 	stw	zero,-16(fp)
  8132b4:	00001706 	br	813314 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8132b8:	00a00034 	movhi	r2,32768
  8132bc:	10bfffc4 	addi	r2,r2,-1
  8132c0:	10bfffc4 	addi	r2,r2,-1
  8132c4:	103ffe1e 	bne	r2,zero,8132c0 <__alt_mem_onchip_mem+0xff7932c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8132c8:	e0fffd17 	ldw	r3,-12(fp)
  8132cc:	008003f4 	movhi	r2,15
  8132d0:	10909004 	addi	r2,r2,16960
  8132d4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8132d8:	100b883a 	mov	r5,r2
  8132dc:	0100bef4 	movhi	r4,763
  8132e0:	213c2004 	addi	r4,r4,-3968
  8132e4:	08031540 	call	803154 <__udivsi3>
  8132e8:	100b883a 	mov	r5,r2
  8132ec:	01200034 	movhi	r4,32768
  8132f0:	213fffc4 	addi	r4,r4,-1
  8132f4:	08031540 	call	803154 <__udivsi3>
  8132f8:	1007883a 	mov	r3,r2
  8132fc:	e0bfff17 	ldw	r2,-4(fp)
  813300:	10c5c83a 	sub	r2,r2,r3
  813304:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  813308:	e0bffc17 	ldw	r2,-16(fp)
  81330c:	10800044 	addi	r2,r2,1
  813310:	e0bffc15 	stw	r2,-16(fp)
  813314:	e0fffc17 	ldw	r3,-16(fp)
  813318:	e0bffe17 	ldw	r2,-8(fp)
  81331c:	18bfe616 	blt	r3,r2,8132b8 <__alt_mem_onchip_mem+0xff7932b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813320:	e0fffd17 	ldw	r3,-12(fp)
  813324:	008003f4 	movhi	r2,15
  813328:	10909004 	addi	r2,r2,16960
  81332c:	1885383a 	mul	r2,r3,r2
  813330:	100b883a 	mov	r5,r2
  813334:	0100bef4 	movhi	r4,763
  813338:	213c2004 	addi	r4,r4,-3968
  81333c:	08031540 	call	803154 <__udivsi3>
  813340:	1007883a 	mov	r3,r2
  813344:	e0bfff17 	ldw	r2,-4(fp)
  813348:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81334c:	10bfffc4 	addi	r2,r2,-1
  813350:	103ffe1e 	bne	r2,zero,81334c <__alt_mem_onchip_mem+0xff79334c>
  813354:	00000d06 	br	81338c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813358:	e0fffd17 	ldw	r3,-12(fp)
  81335c:	008003f4 	movhi	r2,15
  813360:	10909004 	addi	r2,r2,16960
  813364:	1885383a 	mul	r2,r3,r2
  813368:	100b883a 	mov	r5,r2
  81336c:	0100bef4 	movhi	r4,763
  813370:	213c2004 	addi	r4,r4,-3968
  813374:	08031540 	call	803154 <__udivsi3>
  813378:	1007883a 	mov	r3,r2
  81337c:	e0bfff17 	ldw	r2,-4(fp)
  813380:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  813384:	10bfffc4 	addi	r2,r2,-1
  813388:	00bffe16 	blt	zero,r2,813384 <__alt_mem_onchip_mem+0xff793384>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81338c:	0005883a 	mov	r2,zero
}
  813390:	e037883a 	mov	sp,fp
  813394:	dfc00117 	ldw	ra,4(sp)
  813398:	df000017 	ldw	fp,0(sp)
  81339c:	dec00204 	addi	sp,sp,8
  8133a0:	f800283a 	ret

008133a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8133a4:	defffa04 	addi	sp,sp,-24
  8133a8:	dfc00515 	stw	ra,20(sp)
  8133ac:	df000415 	stw	fp,16(sp)
  8133b0:	df000404 	addi	fp,sp,16
  8133b4:	e13ffe15 	stw	r4,-8(fp)
  8133b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8133bc:	e0bfff17 	ldw	r2,-4(fp)
  8133c0:	10800017 	ldw	r2,0(r2)
  8133c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8133c8:	e13ffe17 	ldw	r4,-8(fp)
  8133cc:	08033500 	call	803350 <strlen>
  8133d0:	10800044 	addi	r2,r2,1
  8133d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8133d8:	00000d06 	br	813410 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8133dc:	e0bffc17 	ldw	r2,-16(fp)
  8133e0:	10800217 	ldw	r2,8(r2)
  8133e4:	e0fffd17 	ldw	r3,-12(fp)
  8133e8:	180d883a 	mov	r6,r3
  8133ec:	e17ffe17 	ldw	r5,-8(fp)
  8133f0:	1009883a 	mov	r4,r2
  8133f4:	08137580 	call	813758 <memcmp>
  8133f8:	1000021e 	bne	r2,zero,813404 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8133fc:	e0bffc17 	ldw	r2,-16(fp)
  813400:	00000706 	br	813420 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813404:	e0bffc17 	ldw	r2,-16(fp)
  813408:	10800017 	ldw	r2,0(r2)
  81340c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813410:	e0fffc17 	ldw	r3,-16(fp)
  813414:	e0bfff17 	ldw	r2,-4(fp)
  813418:	18bff01e 	bne	r3,r2,8133dc <__alt_mem_onchip_mem+0xff7933dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  81341c:	0005883a 	mov	r2,zero
}
  813420:	e037883a 	mov	sp,fp
  813424:	dfc00117 	ldw	ra,4(sp)
  813428:	df000017 	ldw	fp,0(sp)
  81342c:	dec00204 	addi	sp,sp,8
  813430:	f800283a 	ret

00813434 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813434:	defffb04 	addi	sp,sp,-20
  813438:	dfc00415 	stw	ra,16(sp)
  81343c:	df000315 	stw	fp,12(sp)
  813440:	df000304 	addi	fp,sp,12
  813444:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813448:	d0a00617 	ldw	r2,-32744(gp)
  81344c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813450:	00003106 	br	813518 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  813454:	e0bffd17 	ldw	r2,-12(fp)
  813458:	10800217 	ldw	r2,8(r2)
  81345c:	1009883a 	mov	r4,r2
  813460:	08033500 	call	803350 <strlen>
  813464:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  813468:	e0bffd17 	ldw	r2,-12(fp)
  81346c:	10c00217 	ldw	r3,8(r2)
  813470:	e0bffe17 	ldw	r2,-8(fp)
  813474:	10bfffc4 	addi	r2,r2,-1
  813478:	1885883a 	add	r2,r3,r2
  81347c:	10800003 	ldbu	r2,0(r2)
  813480:	10803fcc 	andi	r2,r2,255
  813484:	1080201c 	xori	r2,r2,128
  813488:	10bfe004 	addi	r2,r2,-128
  81348c:	10800bd8 	cmpnei	r2,r2,47
  813490:	1000031e 	bne	r2,zero,8134a0 <alt_find_file+0x6c>
    {
      len -= 1;
  813494:	e0bffe17 	ldw	r2,-8(fp)
  813498:	10bfffc4 	addi	r2,r2,-1
  81349c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8134a0:	e0bffe17 	ldw	r2,-8(fp)
  8134a4:	e0ffff17 	ldw	r3,-4(fp)
  8134a8:	1885883a 	add	r2,r3,r2
  8134ac:	10800003 	ldbu	r2,0(r2)
  8134b0:	10803fcc 	andi	r2,r2,255
  8134b4:	1080201c 	xori	r2,r2,128
  8134b8:	10bfe004 	addi	r2,r2,-128
  8134bc:	10800be0 	cmpeqi	r2,r2,47
  8134c0:	1000081e 	bne	r2,zero,8134e4 <alt_find_file+0xb0>
  8134c4:	e0bffe17 	ldw	r2,-8(fp)
  8134c8:	e0ffff17 	ldw	r3,-4(fp)
  8134cc:	1885883a 	add	r2,r3,r2
  8134d0:	10800003 	ldbu	r2,0(r2)
  8134d4:	10803fcc 	andi	r2,r2,255
  8134d8:	1080201c 	xori	r2,r2,128
  8134dc:	10bfe004 	addi	r2,r2,-128
  8134e0:	10000a1e 	bne	r2,zero,81350c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8134e4:	e0bffd17 	ldw	r2,-12(fp)
  8134e8:	10800217 	ldw	r2,8(r2)
  8134ec:	e0fffe17 	ldw	r3,-8(fp)
  8134f0:	180d883a 	mov	r6,r3
  8134f4:	e17fff17 	ldw	r5,-4(fp)
  8134f8:	1009883a 	mov	r4,r2
  8134fc:	08137580 	call	813758 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813500:	1000021e 	bne	r2,zero,81350c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813504:	e0bffd17 	ldw	r2,-12(fp)
  813508:	00000706 	br	813528 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  81350c:	e0bffd17 	ldw	r2,-12(fp)
  813510:	10800017 	ldw	r2,0(r2)
  813514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813518:	e0fffd17 	ldw	r3,-12(fp)
  81351c:	d0a00604 	addi	r2,gp,-32744
  813520:	18bfcc1e 	bne	r3,r2,813454 <__alt_mem_onchip_mem+0xff793454>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813524:	0005883a 	mov	r2,zero
}
  813528:	e037883a 	mov	sp,fp
  81352c:	dfc00117 	ldw	ra,4(sp)
  813530:	df000017 	ldw	fp,0(sp)
  813534:	dec00204 	addi	sp,sp,8
  813538:	f800283a 	ret

0081353c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  81353c:	defffc04 	addi	sp,sp,-16
  813540:	df000315 	stw	fp,12(sp)
  813544:	df000304 	addi	fp,sp,12
  813548:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  81354c:	00bffa04 	movi	r2,-24
  813550:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813554:	e03ffd15 	stw	zero,-12(fp)
  813558:	00001906 	br	8135c0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  81355c:	00802074 	movhi	r2,129
  813560:	10929b04 	addi	r2,r2,19052
  813564:	e0fffd17 	ldw	r3,-12(fp)
  813568:	18c00324 	muli	r3,r3,12
  81356c:	10c5883a 	add	r2,r2,r3
  813570:	10800017 	ldw	r2,0(r2)
  813574:	10000f1e 	bne	r2,zero,8135b4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  813578:	00802074 	movhi	r2,129
  81357c:	10929b04 	addi	r2,r2,19052
  813580:	e0fffd17 	ldw	r3,-12(fp)
  813584:	18c00324 	muli	r3,r3,12
  813588:	10c5883a 	add	r2,r2,r3
  81358c:	e0ffff17 	ldw	r3,-4(fp)
  813590:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813594:	d0e00a17 	ldw	r3,-32728(gp)
  813598:	e0bffd17 	ldw	r2,-12(fp)
  81359c:	1880020e 	bge	r3,r2,8135a8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8135a0:	e0bffd17 	ldw	r2,-12(fp)
  8135a4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  8135a8:	e0bffd17 	ldw	r2,-12(fp)
  8135ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8135b0:	00000606 	br	8135cc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8135b4:	e0bffd17 	ldw	r2,-12(fp)
  8135b8:	10800044 	addi	r2,r2,1
  8135bc:	e0bffd15 	stw	r2,-12(fp)
  8135c0:	e0bffd17 	ldw	r2,-12(fp)
  8135c4:	10800810 	cmplti	r2,r2,32
  8135c8:	103fe41e 	bne	r2,zero,81355c <__alt_mem_onchip_mem+0xff79355c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8135cc:	e0bffe17 	ldw	r2,-8(fp)
}
  8135d0:	e037883a 	mov	sp,fp
  8135d4:	df000017 	ldw	fp,0(sp)
  8135d8:	dec00104 	addi	sp,sp,4
  8135dc:	f800283a 	ret

008135e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8135e0:	defffb04 	addi	sp,sp,-20
  8135e4:	df000415 	stw	fp,16(sp)
  8135e8:	df000404 	addi	fp,sp,16
  8135ec:	e13ffe15 	stw	r4,-8(fp)
  8135f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8135f4:	e0bfff17 	ldw	r2,-4(fp)
  8135f8:	10840070 	cmpltui	r2,r2,4097
  8135fc:	1000021e 	bne	r2,zero,813608 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813600:	00840004 	movi	r2,4096
  813604:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813608:	e0fffe17 	ldw	r3,-8(fp)
  81360c:	e0bfff17 	ldw	r2,-4(fp)
  813610:	1885883a 	add	r2,r3,r2
  813614:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813618:	e0bffe17 	ldw	r2,-8(fp)
  81361c:	e0bffc15 	stw	r2,-16(fp)
  813620:	00000506 	br	813638 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813624:	e0bffc17 	ldw	r2,-16(fp)
  813628:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81362c:	e0bffc17 	ldw	r2,-16(fp)
  813630:	10800804 	addi	r2,r2,32
  813634:	e0bffc15 	stw	r2,-16(fp)
  813638:	e0fffc17 	ldw	r3,-16(fp)
  81363c:	e0bffd17 	ldw	r2,-12(fp)
  813640:	18bff836 	bltu	r3,r2,813624 <__alt_mem_onchip_mem+0xff793624>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813644:	e0bffe17 	ldw	r2,-8(fp)
  813648:	108007cc 	andi	r2,r2,31
  81364c:	10000226 	beq	r2,zero,813658 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813650:	e0bffc17 	ldw	r2,-16(fp)
  813654:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813658:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81365c:	0001883a 	nop
  813660:	e037883a 	mov	sp,fp
  813664:	df000017 	ldw	fp,0(sp)
  813668:	dec00104 	addi	sp,sp,4
  81366c:	f800283a 	ret

00813670 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  813670:	defffe04 	addi	sp,sp,-8
  813674:	df000115 	stw	fp,4(sp)
  813678:	df000104 	addi	fp,sp,4
  81367c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  813680:	e0bfff17 	ldw	r2,-4(fp)
  813684:	10bffe84 	addi	r2,r2,-6
  813688:	10c00428 	cmpgeui	r3,r2,16
  81368c:	18001a1e 	bne	r3,zero,8136f8 <alt_exception_cause_generated_bad_addr+0x88>
  813690:	100690ba 	slli	r3,r2,2
  813694:	00802074 	movhi	r2,129
  813698:	108daa04 	addi	r2,r2,13992
  81369c:	1885883a 	add	r2,r3,r2
  8136a0:	10800017 	ldw	r2,0(r2)
  8136a4:	1000683a 	jmp	r2
  8136a8:	008136e8 	cmpgeui	r2,zero,1243
  8136ac:	008136e8 	cmpgeui	r2,zero,1243
  8136b0:	008136f8 	rdprs	r2,zero,1243
  8136b4:	008136f8 	rdprs	r2,zero,1243
  8136b8:	008136f8 	rdprs	r2,zero,1243
  8136bc:	008136e8 	cmpgeui	r2,zero,1243
  8136c0:	008136f0 	cmpltui	r2,zero,1243
  8136c4:	008136f8 	rdprs	r2,zero,1243
  8136c8:	008136e8 	cmpgeui	r2,zero,1243
  8136cc:	008136e8 	cmpgeui	r2,zero,1243
  8136d0:	008136f8 	rdprs	r2,zero,1243
  8136d4:	008136e8 	cmpgeui	r2,zero,1243
  8136d8:	008136f0 	cmpltui	r2,zero,1243
  8136dc:	008136f8 	rdprs	r2,zero,1243
  8136e0:	008136f8 	rdprs	r2,zero,1243
  8136e4:	008136e8 	cmpgeui	r2,zero,1243
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8136e8:	00800044 	movi	r2,1
  8136ec:	00000306 	br	8136fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8136f0:	0005883a 	mov	r2,zero
  8136f4:	00000106 	br	8136fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8136f8:	0005883a 	mov	r2,zero
  }
}
  8136fc:	e037883a 	mov	sp,fp
  813700:	df000017 	ldw	fp,0(sp)
  813704:	dec00104 	addi	sp,sp,4
  813708:	f800283a 	ret

0081370c <atexit>:
  81370c:	200b883a 	mov	r5,r4
  813710:	000f883a 	mov	r7,zero
  813714:	000d883a 	mov	r6,zero
  813718:	0009883a 	mov	r4,zero
  81371c:	08137d41 	jmpi	8137d4 <__register_exitproc>

00813720 <exit>:
  813720:	defffe04 	addi	sp,sp,-8
  813724:	000b883a 	mov	r5,zero
  813728:	dc000015 	stw	r16,0(sp)
  81372c:	dfc00115 	stw	ra,4(sp)
  813730:	2021883a 	mov	r16,r4
  813734:	08138ec0 	call	8138ec <__call_exitprocs>
  813738:	00802074 	movhi	r2,129
  81373c:	10978c04 	addi	r2,r2,24112
  813740:	11000017 	ldw	r4,0(r2)
  813744:	20800f17 	ldw	r2,60(r4)
  813748:	10000126 	beq	r2,zero,813750 <exit+0x30>
  81374c:	103ee83a 	callr	r2
  813750:	8009883a 	mov	r4,r16
  813754:	0813a6c0 	call	813a6c <_exit>

00813758 <memcmp>:
  813758:	01c000c4 	movi	r7,3
  81375c:	3980192e 	bgeu	r7,r6,8137c4 <memcmp+0x6c>
  813760:	2144b03a 	or	r2,r4,r5
  813764:	11c4703a 	and	r2,r2,r7
  813768:	10000f26 	beq	r2,zero,8137a8 <memcmp+0x50>
  81376c:	20800003 	ldbu	r2,0(r4)
  813770:	28c00003 	ldbu	r3,0(r5)
  813774:	10c0151e 	bne	r2,r3,8137cc <memcmp+0x74>
  813778:	31bfff84 	addi	r6,r6,-2
  81377c:	01ffffc4 	movi	r7,-1
  813780:	00000406 	br	813794 <memcmp+0x3c>
  813784:	20800003 	ldbu	r2,0(r4)
  813788:	28c00003 	ldbu	r3,0(r5)
  81378c:	31bfffc4 	addi	r6,r6,-1
  813790:	10c00e1e 	bne	r2,r3,8137cc <memcmp+0x74>
  813794:	21000044 	addi	r4,r4,1
  813798:	29400044 	addi	r5,r5,1
  81379c:	31fff91e 	bne	r6,r7,813784 <__alt_mem_onchip_mem+0xff793784>
  8137a0:	0005883a 	mov	r2,zero
  8137a4:	f800283a 	ret
  8137a8:	20c00017 	ldw	r3,0(r4)
  8137ac:	28800017 	ldw	r2,0(r5)
  8137b0:	18bfee1e 	bne	r3,r2,81376c <__alt_mem_onchip_mem+0xff79376c>
  8137b4:	31bfff04 	addi	r6,r6,-4
  8137b8:	21000104 	addi	r4,r4,4
  8137bc:	29400104 	addi	r5,r5,4
  8137c0:	39bff936 	bltu	r7,r6,8137a8 <__alt_mem_onchip_mem+0xff7937a8>
  8137c4:	303fe91e 	bne	r6,zero,81376c <__alt_mem_onchip_mem+0xff79376c>
  8137c8:	003ff506 	br	8137a0 <__alt_mem_onchip_mem+0xff7937a0>
  8137cc:	10c5c83a 	sub	r2,r2,r3
  8137d0:	f800283a 	ret

008137d4 <__register_exitproc>:
  8137d4:	defffa04 	addi	sp,sp,-24
  8137d8:	dc000315 	stw	r16,12(sp)
  8137dc:	04002074 	movhi	r16,129
  8137e0:	84178c04 	addi	r16,r16,24112
  8137e4:	80c00017 	ldw	r3,0(r16)
  8137e8:	dc400415 	stw	r17,16(sp)
  8137ec:	dfc00515 	stw	ra,20(sp)
  8137f0:	18805217 	ldw	r2,328(r3)
  8137f4:	2023883a 	mov	r17,r4
  8137f8:	10003726 	beq	r2,zero,8138d8 <__register_exitproc+0x104>
  8137fc:	10c00117 	ldw	r3,4(r2)
  813800:	010007c4 	movi	r4,31
  813804:	20c00e16 	blt	r4,r3,813840 <__register_exitproc+0x6c>
  813808:	1a000044 	addi	r8,r3,1
  81380c:	8800221e 	bne	r17,zero,813898 <__register_exitproc+0xc4>
  813810:	18c00084 	addi	r3,r3,2
  813814:	18c7883a 	add	r3,r3,r3
  813818:	18c7883a 	add	r3,r3,r3
  81381c:	12000115 	stw	r8,4(r2)
  813820:	10c7883a 	add	r3,r2,r3
  813824:	19400015 	stw	r5,0(r3)
  813828:	0005883a 	mov	r2,zero
  81382c:	dfc00517 	ldw	ra,20(sp)
  813830:	dc400417 	ldw	r17,16(sp)
  813834:	dc000317 	ldw	r16,12(sp)
  813838:	dec00604 	addi	sp,sp,24
  81383c:	f800283a 	ret
  813840:	00800034 	movhi	r2,0
  813844:	10800004 	addi	r2,r2,0
  813848:	10002626 	beq	r2,zero,8138e4 <__register_exitproc+0x110>
  81384c:	01006404 	movi	r4,400
  813850:	d9400015 	stw	r5,0(sp)
  813854:	d9800115 	stw	r6,4(sp)
  813858:	d9c00215 	stw	r7,8(sp)
  81385c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  813860:	d9400017 	ldw	r5,0(sp)
  813864:	d9800117 	ldw	r6,4(sp)
  813868:	d9c00217 	ldw	r7,8(sp)
  81386c:	10001d26 	beq	r2,zero,8138e4 <__register_exitproc+0x110>
  813870:	81000017 	ldw	r4,0(r16)
  813874:	10000115 	stw	zero,4(r2)
  813878:	02000044 	movi	r8,1
  81387c:	22405217 	ldw	r9,328(r4)
  813880:	0007883a 	mov	r3,zero
  813884:	12400015 	stw	r9,0(r2)
  813888:	20805215 	stw	r2,328(r4)
  81388c:	10006215 	stw	zero,392(r2)
  813890:	10006315 	stw	zero,396(r2)
  813894:	883fde26 	beq	r17,zero,813810 <__alt_mem_onchip_mem+0xff793810>
  813898:	18c9883a 	add	r4,r3,r3
  81389c:	2109883a 	add	r4,r4,r4
  8138a0:	1109883a 	add	r4,r2,r4
  8138a4:	21802215 	stw	r6,136(r4)
  8138a8:	01800044 	movi	r6,1
  8138ac:	12406217 	ldw	r9,392(r2)
  8138b0:	30cc983a 	sll	r6,r6,r3
  8138b4:	4992b03a 	or	r9,r9,r6
  8138b8:	12406215 	stw	r9,392(r2)
  8138bc:	21c04215 	stw	r7,264(r4)
  8138c0:	01000084 	movi	r4,2
  8138c4:	893fd21e 	bne	r17,r4,813810 <__alt_mem_onchip_mem+0xff793810>
  8138c8:	11006317 	ldw	r4,396(r2)
  8138cc:	218cb03a 	or	r6,r4,r6
  8138d0:	11806315 	stw	r6,396(r2)
  8138d4:	003fce06 	br	813810 <__alt_mem_onchip_mem+0xff793810>
  8138d8:	18805304 	addi	r2,r3,332
  8138dc:	18805215 	stw	r2,328(r3)
  8138e0:	003fc606 	br	8137fc <__alt_mem_onchip_mem+0xff7937fc>
  8138e4:	00bfffc4 	movi	r2,-1
  8138e8:	003fd006 	br	81382c <__alt_mem_onchip_mem+0xff79382c>

008138ec <__call_exitprocs>:
  8138ec:	defff504 	addi	sp,sp,-44
  8138f0:	df000915 	stw	fp,36(sp)
  8138f4:	dd400615 	stw	r21,24(sp)
  8138f8:	dc800315 	stw	r18,12(sp)
  8138fc:	dfc00a15 	stw	ra,40(sp)
  813900:	ddc00815 	stw	r23,32(sp)
  813904:	dd800715 	stw	r22,28(sp)
  813908:	dd000515 	stw	r20,20(sp)
  81390c:	dcc00415 	stw	r19,16(sp)
  813910:	dc400215 	stw	r17,8(sp)
  813914:	dc000115 	stw	r16,4(sp)
  813918:	d9000015 	stw	r4,0(sp)
  81391c:	2839883a 	mov	fp,r5
  813920:	04800044 	movi	r18,1
  813924:	057fffc4 	movi	r21,-1
  813928:	00802074 	movhi	r2,129
  81392c:	10978c04 	addi	r2,r2,24112
  813930:	12000017 	ldw	r8,0(r2)
  813934:	45005217 	ldw	r20,328(r8)
  813938:	44c05204 	addi	r19,r8,328
  81393c:	a0001c26 	beq	r20,zero,8139b0 <__call_exitprocs+0xc4>
  813940:	a0800117 	ldw	r2,4(r20)
  813944:	15ffffc4 	addi	r23,r2,-1
  813948:	b8000d16 	blt	r23,zero,813980 <__call_exitprocs+0x94>
  81394c:	14000044 	addi	r16,r2,1
  813950:	8421883a 	add	r16,r16,r16
  813954:	8421883a 	add	r16,r16,r16
  813958:	84402004 	addi	r17,r16,128
  81395c:	a463883a 	add	r17,r20,r17
  813960:	a421883a 	add	r16,r20,r16
  813964:	e0001e26 	beq	fp,zero,8139e0 <__call_exitprocs+0xf4>
  813968:	80804017 	ldw	r2,256(r16)
  81396c:	e0801c26 	beq	fp,r2,8139e0 <__call_exitprocs+0xf4>
  813970:	bdffffc4 	addi	r23,r23,-1
  813974:	843fff04 	addi	r16,r16,-4
  813978:	8c7fff04 	addi	r17,r17,-4
  81397c:	bd7ff91e 	bne	r23,r21,813964 <__alt_mem_onchip_mem+0xff793964>
  813980:	00800034 	movhi	r2,0
  813984:	10800004 	addi	r2,r2,0
  813988:	10000926 	beq	r2,zero,8139b0 <__call_exitprocs+0xc4>
  81398c:	a0800117 	ldw	r2,4(r20)
  813990:	1000301e 	bne	r2,zero,813a54 <__call_exitprocs+0x168>
  813994:	a0800017 	ldw	r2,0(r20)
  813998:	10003226 	beq	r2,zero,813a64 <__call_exitprocs+0x178>
  81399c:	a009883a 	mov	r4,r20
  8139a0:	98800015 	stw	r2,0(r19)
  8139a4:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8139a8:	9d000017 	ldw	r20,0(r19)
  8139ac:	a03fe41e 	bne	r20,zero,813940 <__alt_mem_onchip_mem+0xff793940>
  8139b0:	dfc00a17 	ldw	ra,40(sp)
  8139b4:	df000917 	ldw	fp,36(sp)
  8139b8:	ddc00817 	ldw	r23,32(sp)
  8139bc:	dd800717 	ldw	r22,28(sp)
  8139c0:	dd400617 	ldw	r21,24(sp)
  8139c4:	dd000517 	ldw	r20,20(sp)
  8139c8:	dcc00417 	ldw	r19,16(sp)
  8139cc:	dc800317 	ldw	r18,12(sp)
  8139d0:	dc400217 	ldw	r17,8(sp)
  8139d4:	dc000117 	ldw	r16,4(sp)
  8139d8:	dec00b04 	addi	sp,sp,44
  8139dc:	f800283a 	ret
  8139e0:	a0800117 	ldw	r2,4(r20)
  8139e4:	80c00017 	ldw	r3,0(r16)
  8139e8:	10bfffc4 	addi	r2,r2,-1
  8139ec:	15c01426 	beq	r2,r23,813a40 <__call_exitprocs+0x154>
  8139f0:	80000015 	stw	zero,0(r16)
  8139f4:	183fde26 	beq	r3,zero,813970 <__alt_mem_onchip_mem+0xff793970>
  8139f8:	95c8983a 	sll	r4,r18,r23
  8139fc:	a0806217 	ldw	r2,392(r20)
  813a00:	a5800117 	ldw	r22,4(r20)
  813a04:	2084703a 	and	r2,r4,r2
  813a08:	10000b26 	beq	r2,zero,813a38 <__call_exitprocs+0x14c>
  813a0c:	a0806317 	ldw	r2,396(r20)
  813a10:	2088703a 	and	r4,r4,r2
  813a14:	20000c1e 	bne	r4,zero,813a48 <__call_exitprocs+0x15c>
  813a18:	89400017 	ldw	r5,0(r17)
  813a1c:	d9000017 	ldw	r4,0(sp)
  813a20:	183ee83a 	callr	r3
  813a24:	a0800117 	ldw	r2,4(r20)
  813a28:	15bfbf1e 	bne	r2,r22,813928 <__alt_mem_onchip_mem+0xff793928>
  813a2c:	98800017 	ldw	r2,0(r19)
  813a30:	153fcf26 	beq	r2,r20,813970 <__alt_mem_onchip_mem+0xff793970>
  813a34:	003fbc06 	br	813928 <__alt_mem_onchip_mem+0xff793928>
  813a38:	183ee83a 	callr	r3
  813a3c:	003ff906 	br	813a24 <__alt_mem_onchip_mem+0xff793a24>
  813a40:	a5c00115 	stw	r23,4(r20)
  813a44:	003feb06 	br	8139f4 <__alt_mem_onchip_mem+0xff7939f4>
  813a48:	89000017 	ldw	r4,0(r17)
  813a4c:	183ee83a 	callr	r3
  813a50:	003ff406 	br	813a24 <__alt_mem_onchip_mem+0xff793a24>
  813a54:	a0800017 	ldw	r2,0(r20)
  813a58:	a027883a 	mov	r19,r20
  813a5c:	1029883a 	mov	r20,r2
  813a60:	003fb606 	br	81393c <__alt_mem_onchip_mem+0xff79393c>
  813a64:	0005883a 	mov	r2,zero
  813a68:	003ffb06 	br	813a58 <__alt_mem_onchip_mem+0xff793a58>

00813a6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  813a6c:	defffd04 	addi	sp,sp,-12
  813a70:	df000215 	stw	fp,8(sp)
  813a74:	df000204 	addi	fp,sp,8
  813a78:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  813a7c:	0001883a 	nop
  813a80:	e0bfff17 	ldw	r2,-4(fp)
  813a84:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  813a88:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813a8c:	10000226 	beq	r2,zero,813a98 <_exit+0x2c>
    ALT_SIM_FAIL();
  813a90:	002af070 	cmpltui	zero,zero,43969
  813a94:	00000106 	br	813a9c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  813a98:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813a9c:	003fff06 	br	813a9c <__alt_mem_onchip_mem+0xff793a9c>
