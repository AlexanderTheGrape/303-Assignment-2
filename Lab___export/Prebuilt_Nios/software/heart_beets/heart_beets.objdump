
heart_beets.elf:     file format elf32-littlenios2
heart_beets.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000a184 memsz 0x0000a184 flags r-x
    LOAD off    0x0000b1a4 vaddr 0x0080a1a4 paddr 0x0080bdfc align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x0000da54 vaddr 0x0080da54 paddr 0x0080da54 align 2**12
         filesz 0x00000000 memsz 0x00000378 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009c0c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000354  00809e50  00809e50  0000ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  0080a1a4  0080bdfc  0000b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000378  0080da54  0080da54  0000da54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0080ddcc  0080ddcc  0000cdfc  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  0000cdfc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000cdfc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b68  00000000  00000000  0000ce20  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019b7b  00000000  00000000  0000d988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006bc1  00000000  00000000  00027503  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008657  00000000  00000000  0002e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001bcc  00000000  00000000  0003671c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000351f  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0003b807  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00040254  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000698  00000000  00000000  000402b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00045125  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00045128  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0004512b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0004512c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0004512d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00045131  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00045135  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00045139  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00045142  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0004514b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00045154  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00045160  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  0004518e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00809e50 l    d  .rodata	00000000 .rodata
0080a1a4 l    d  .rwdata	00000000 .rwdata
0080da54 l    d  .bss	00000000 .bss
0080ddcc l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../heart_beets_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
008030d0 l     F .text	00000008 __fp_unlock
008030e4 l     F .text	0000019c __sinit.part.1
00803280 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080a1a4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00805e58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00805f64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00805f90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080607c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080615c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00806248 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080641c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080bde4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080680c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00806940 l     F .text	00000034 alt_dev_reg
0080ab78 l     O .rwdata	00001060 jtag_uart
0080bbd8 l     O .rwdata	00000120 lcd
0080bcf8 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00806c6c l     F .text	0000020c altera_avalon_jtag_uart_irq
00806e78 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080bdf0 l     O .rwdata	00000004 colstart
008074b0 l     F .text	000000b8 lcd_write_command
00807568 l     F .text	000000d8 lcd_write_data
00807640 l     F .text	000000d0 lcd_clear_screen
00807710 l     F .text	000001ec lcd_repaint_screen
008078fc l     F .text	000000cc lcd_scroll_up
008079c8 l     F .text	000002ac lcd_handle_escape
0080814c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080838c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080863c l     F .text	0000009c altera_avalon_uart_irq
008086d8 l     F .text	000000e4 altera_avalon_uart_rxirq
008087bc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00808958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00808b70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00808da0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00809214 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00809354 l     F .text	0000003c alt_get_errno
00809390 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080a023 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080da8c g     O .bss	00000001 _cg81
0080da8d g     O .bss	00000001 _cg42
0080dbe0 g     O .bss	00000004 alt_instruction_exception_handler
0080da8e g     O .bss	00000001 g83
0080da8f g     O .bss	00000001 g81b
0080da90 g     O .bss	00000001 g40
0080da91 g     O .bss	00000001 _cg99
00805b24 g     F .text	00000054 _isatty_r
0080da92 g     O .bss	00000001 g91
0080da80 g     O .bss	00000004 maskedButton1
00806358 g     F .text	0000007c alt_main
0080da93 g     O .bss	00000001 g38b
00802f64 g     F .text	000000c0 _puts_r
0080da94 g     O .bss	00000001 APace
0080dccc g     O .bss	00000100 alt_irq
0080584c g     F .text	00000060 _lseek_r
0080da95 g     O .bss	00000001 PRE_g95
0080da96 g     O .bss	00000001 g4
0080bdfc g       *ABS*	00000000 __flash_rwdata_start
0080da97 g     O .bss	00000001 g108
0080da98 g     O .bss	00000001 g19
0080da99 g     O .bss	00000001 g111
0080ddcc g       *ABS*	00000000 __alt_heap_start
008003a0 g     F .text	00000040 AEI_timer_ISR
00804e00 g     F .text	0000005c __sseek
00803420 g     F .text	00000010 __sinit
0080da9a g     O .bss	00000001 g55
0080da9b g     O .bss	00000001 _cg96
0080da9c g     O .bss	00000001 _cg59
0080da9d g     O .bss	00000001 g27
00803288 g     F .text	00000068 __sfmoreglue
008063f8 g     F .text	00000024 __malloc_unlock
0080da9e g     O .bss	00000001 g124_fix0
0080da9f g     O .bss	00000001 g112
0080daa0 g     O .bss	00000001 g87b
0080daa1 g     O .bss	00000001 g78b
0080daa2 g     O .bss	00000001 g33b
0080daa3 g     O .bss	00000001 g3
0080dc0c g     O .bss	00000018 Ventricular_timer
008044ec g     F .text	0000015c memmove
0080daa4 g     O .bss	00000001 g103
0080daa5 g     O .bss	00000001 g47
0080daa6 g     O .bss	00000001 g85
0080daa7 g     O .bss	00000001 g42
00803408 g     F .text	00000018 _cleanup
0080daa8 g     O .bss	00000001 g9
0080daa9 g     O .bss	00000001 g127
0080daaa g     O .bss	00000001 LRITO
0080daab g     O .bss	00000001 g114b
0080daac g     O .bss	00000004 _PRE_GO
0080dab0 g     O .bss	00000001 PRE_g3
0080dab1 g     O .bss	00000001 g102
008095d8 g     F .text	00000024 altera_nios2_gen2_irq_init
0080dab2 g     O .bss	00000001 PRE_g29
0080dab3 g     O .bss	00000001 g96b
0080dab4 g     O .bss	00000001 g115
0080dab5 g     O .bss	00000001 AVI_start
00800000 g     F .entry	0000001c __reset
0080dab6 g     O .bss	00000001 PRE_g121
0080dab7 g     O .bss	00000001 _cg15
0080dab8 g     O .bss	00000001 PRE_g56
00800020 g       *ABS*	00000000 __flash_exceptions_start
00805ac8 g     F .text	0000005c _fstat_r
008002b8 g     F .text	00000028 Ventricular_timer_ISR
0080dbc4 g     O .bss	00000004 errno
0080dab9 g     O .bss	00000001 PRE_g32
0080daba g     O .bss	00000001 g87
0080dabb g     O .bss	00000001 g44
00804d7c g     F .text	00000008 __seofread
0080dabc g     O .bss	00000001 g123
0080dabd g     O .bss	00000001 _cg12
0080dbcc g     O .bss	00000004 alt_argv
00813dbc g       *ABS*	00000000 _gp
008095a8 g     F .text	00000030 usleep
0080dabe g     O .bss	00000001 _cg8
0080dabf g     O .bss	00000001 _Pacemaker1_local__reg_FilteredVSense16
0080092c g     F .text	000000a8 reset
0080dac0 g     O .bss	00000001 PRE_g20
0080dac1 g     O .bss	00000001 AVI_stop
0080dac2 g     O .bss	00000001 g104b
0080dac3 g     O .bss	00000001 g92
0080dac4 g     O .bss	00000001 g1
0080dac5 g     O .bss	00000001 g61
0080a9f8 g     O .rwdata	00000180 alt_fd_list
0080dac6 g     O .bss	00000001 g71
00809754 g     F .text	00000090 alt_find_dev
008043a4 g     F .text	00000148 memcpy
0080dac7 g     O .bss	00000001 g126
008030d8 g     F .text	0000000c _cleanup_r
0080dac8 g     O .bss	00000001 g75_e7
0080dac9 g     O .bss	00000001 g82
008092d8 g     F .text	0000007c alt_io_redirect
0080daca g     O .bss	00000001 _cg33
0080dacb g     O .bss	00000001 PRE_g69
00809e50 g       *ABS*	00000000 __DTOR_END__
0080dacc g     O .bss	00000001 _cg98
0080dacd g     O .bss	00000001 g12
00803024 g     F .text	00000014 puts
00809a20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080dace g     O .bss	00000001 g97
0080dacf g     O .bss	00000001 g52
0080dad0 g     O .bss	00000001 _cg46
00807070 g     F .text	0000021c altera_avalon_jtag_uart_read
0080dad1 g     O .bss	00000001 _cg35
0080dad2 g     O .bss	00000001 _cg74
00805c70 g     F .text	00000064 .hidden __udivsi3
008060b8 g     F .text	000000a4 isatty
0080dad3 g     O .bss	00000001 g17
0080dad4 g     O .bss	00000001 PRE_g77
0080dad5 g     O .bss	00000001 PRE_g34
0080dad6 g     O .bss	00000001 g61b
0080dad7 g     O .bss	00000001 g76
0080dad8 g     O .bss	00000001 g31
00809990 g     F .text	00000090 alt_icache_flush
0080dad9 g     O .bss	00000001 g37
00800508 g     F .text	00000150 heartLEDs
0080dbc0 g     O .bss	00000004 __malloc_top_pad
0080dada g     O .bss	00000001 g128_e2
0080dadb g     O .bss	00000001 _cg104
0080dadc g     O .bss	00000001 g62
00803470 g     F .text	000004bc __sfvwrite_r
0080dc24 g     O .bss	00000018 PVARP_timer
00804cd4 g     F .text	00000054 _sbrk_r
0080dadd g     O .bss	00000001 g84
0080dade g     O .bss	00000001 g41
0080dadf g     O .bss	00000001 _cg61
0080dae0 g     O .bss	00000001 _cg26
0080dae1 g     O .bss	00000001 g118
00805a68 g     F .text	00000060 _read_r
0080bddc g     O .rwdata	00000004 alt_max_fd
00800420 g     F .text	00000040 URI_timer_ISR
0080506c g     F .text	000000f0 _fclose_r
008053e8 g     F .text	00000030 fflush
008002e0 g     F .text	00000040 AVI_timer_ISR
0080dbbc g     O .bss	00000004 __malloc_max_sbrked_mem
0080dae2 g     O .bss	00000001 g18
0080dae3 g     O .bss	00000001 ASense
0080dc3c g     O .bss	00000018 VRP_timer
0080dae4 g     O .bss	00000001 g15b
0080dae5 g     O .bss	00000001 PRE_g53
0080dae6 g     O .bss	00000001 g132
00806284 g     F .text	000000d4 lseek
0080bdbc g     O .rwdata	00000004 _global_impure_ptr
0080dae7 g     O .bss	00000001 g48
00804770 g     F .text	00000564 _realloc_r
0080ddcc g       *ABS*	00000000 __bss_end
0080da74 g     O .bss	00000004 LED1
00809124 g     F .text	000000f0 alt_iic_isr_register
0080dae8 g     O .bss	00000001 _Pacemaker1_local_VRP_ex
00806704 g     F .text	00000108 alt_tick
0080da88 g     O .bss	00000004 button1_pressed
0080dae9 g     O .bss	00000001 g124_fix3
0080daea g     O .bss	00000001 g38
0080daeb g     O .bss	00000001 g105
00808590 g     F .text	000000ac altera_avalon_uart_init
0080daec g     O .bss	00000001 _Pacemaker1_local__pre_AVI_ex16
00803440 g     F .text	00000018 __fp_lock_all
008090d8 g     F .text	0000004c alt_ic_irq_enabled
0080daed g     O .bss	00000001 _cg21
0080dc54 g     O .bss	00000018 Atrial_timer
0080daee g     O .bss	00000001 g30b
00806668 g     F .text	0000009c alt_alarm_stop
0080dbdc g     O .bss	00000004 alt_irq_active
0080daef g     O .bss	00000001 g117
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
0080a9d0 g     O .rwdata	00000028 alt_dev_null
0080daf0 g     O .bss	00000001 _cg82
00808d58 g     F .text	00000048 alt_dcache_flush_all
0080daf1 g     O .bss	00000001 _cg63
0080daf2 g     O .bss	00000001 PRE_g111
0080daf3 g     O .bss	00000001 g64
0080daf4 g     O .bss	00000001 g21
0080da84 g     O .bss	00000004 button0_pressed
0080daf5 g     O .bss	00000001 g79
0080daf6 g     O .bss	00000001 g34
0080bdfc g       *ABS*	00000000 __ram_rwdata_end
0080daf7 g     O .bss	00000001 g5
0080bdd4 g     O .rwdata	00000008 alt_dev_list
0080daf8 g     O .bss	00000001 g94
0080daf9 g     O .bss	00000001 g110
0080dafa g     O .bss	00000001 g49
00806848 g     F .text	000000f8 write
0080dafb g     O .bss	00000001 _Pacemaker1_local_PVARP_ex
0080dafc g     O .bss	00000001 g2
0080dafd g     O .bss	00000001 g7
0080dafe g     O .bss	00000001 _cg90
0080daff g     O .bss	00000001 _cg16
0080a1a4 g       *ABS*	00000000 __ram_rodata_end
00805fcc g     F .text	000000b0 fstat
0080db00 g     O .bss	00000001 g80
0080da78 g     O .bss	00000004 uiButton
00805cd4 g     F .text	00000058 .hidden __umodsi3
0080db01 g     O .bss	00000001 PRE_g80
0080db02 g     O .bss	00000001 g128
0080ddcc g       *ABS*	00000000 end
0080db03 g     O .bss	00000001 g100
00807c74 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080db04 g     O .bss	00000001 g59
0080db05 g     O .bss	00000001 g99
0080db06 g     O .bss	00000001 g54
00808bac g     F .text	000001ac altera_avalon_uart_write
0080db07 g     O .bss	00000001 g66
0080db08 g     O .bss	00000001 g23
00806bac g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00809e50 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080db09 g     O .bss	00000001 _cg87
0080db0a g     O .bss	00000001 _cg48
0080da64 g     O .bss	00000004 LRI_timeout
0080db0b g     O .bss	00000001 g124_fix1
00808404 g     F .text	0000007c alt_avalon_timer_sc_init
008084e0 g     F .text	00000060 altera_avalon_uart_write_fd
00808540 g     F .text	00000050 altera_avalon_uart_close_fd
0080728c g     F .text	00000224 altera_avalon_jtag_uart_write
0080db0c g     O .bss	00000001 PRE_g71
00803430 g     F .text	00000004 __sfp_lock_acquire
008042c0 g     F .text	000000e4 memchr
0080db0d g     O .bss	00000001 g14
0080553c g     F .text	00000310 _free_r
0080db0e g     O .bss	00000001 _cg6
00809c9c g     F .text	00000180 __call_exitprocs
0080db0f g     O .bss	00000001 g9_e1
0080db10 g     O .bss	00000001 g101
0080db11 g     O .bss	00000001 _Pacemaker1_local_AEI_ex
0080db12 g     O .bss	00000001 g124_e1_fix_fix
0080db13 g     O .bss	00000001 _Pacemaker1_local_FilteredVSense
0080bdc4 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0080db14 g     O .bss	00000001 g114
0080dbd4 g     O .bss	00000004 _alt_tick_rate
0080db15 g     O .bss	00000001 g56
0080db16 g     O .bss	00000001 g129
0080db17 g     O .bss	00000001 g131
0080db18 g     O .bss	00000001 VSense
0080dbd8 g     O .bss	00000004 _alt_nticks
0080db19 g     O .bss	00000001 _cg114
00806458 g     F .text	000000fc read
008069ac g     F .text	0000009c alt_sys_init
0080db1a g     O .bss	00000001 g78
0080db1b g     O .bss	00000001 g33
00809b84 g     F .text	00000118 __register_exitproc
0080da7c g     O .bss	00000004 maskedButton0
0080db1c g     O .bss	00000001 VRP_start
0080db1d g     O .bss	00000001 g123_e14
0080db1e g     O .bss	00000001 _Pacemaker1_local_LRI_stop
0080db1f g     O .bss	00000001 g122
00800360 g     F .text	00000040 VRP_timer_ISR
0080db20 g     O .bss	00000001 URI_ex
0080db21 g     O .bss	00000001 g35b
00806f18 g     F .text	00000068 altera_avalon_jtag_uart_close
0080db22 g     O .bss	00000001 _Pacemaker1_local_LRI_ex
0080db23 g     O .bss	00000001 PRE_g22
0080a1a4 g       *ABS*	00000000 __ram_rwdata_start
00809e50 g       *ABS*	00000000 __ram_rodata_start
0080dbe4 g     O .bss	00000028 __malloc_current_mallinfo
0080db24 g     O .bss	00000001 _Pacemaker1_local_FilteredASense
0080db25 g     O .bss	00000001 PRE_g126
0080db26 g     O .bss	00000001 _cg64
0080dc6c g     O .bss	00000018 AVI_timer
0080da68 g     O .bss	00000004 URI_timeout
0080dc84 g     O .bss	00000018 LRI_timer
0080db27 g     O .bss	00000001 _reg_VPace9
00806a48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080db28 g     O .bss	00000001 g35
008098ec g     F .text	000000a4 alt_get_fd
008095fc g     F .text	00000158 alt_busy_sleep
0080db29 g     O .bss	00000001 g15
00805018 g     F .text	00000054 _close_r
0080db2a g     O .bss	00000001 g90
0080db2b g     O .bss	00000001 g84_e8
0080db2c g     O .bss	00000001 _GO
0080db2d g     O .bss	00000001 g89b
0080db2e g     O .bss	00000001 g46b
0080db2f g     O .bss	00000001 LRI_start
00809b08 g     F .text	0000007c memcmp
0080db30 g     O .bss	00000001 URITO
00806b08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0080db31 g     O .bss	00000001 VRPTO
0080db32 g     O .bss	00000001 PRE_g11
0080ddcc g       *ABS*	00000000 __alt_stack_base
00806b58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00804ec4 g     F .text	00000154 __swsetup_r
0080db33 g     O .bss	00000001 g43_e4
0080db34 g     O .bss	00000001 g121b
008009d4 g     F .text	00002590 tick
008032f0 g     F .text	00000118 __sfp
0080db35 g     O .bss	00000001 g27_e3
0080db36 g     O .bss	00000001 g63
0080db37 g     O .bss	00000001 g20
0080db38 g     O .bss	00000001 AVITO
0080db39 g     O .bss	00000001 g60
0080a5c8 g     O .rwdata	00000408 __malloc_av_
0080343c g     F .text	00000004 __sinit_lock_release
0080db3a g     O .bss	00000001 g115_e12
00804d28 g     F .text	00000054 __sread
0080db3b g     O .bss	00000001 g124_fix2
0080dc9c g     O .bss	00000018 AEI_timer
0080db3c g     O .bss	00000001 g23b
008097e4 g     F .text	00000108 alt_find_file
0080db3d g     O .bss	00000001 g93
00808ddc g     F .text	000000a4 alt_dev_llist_insert
008063d4 g     F .text	00000024 __malloc_lock
008065b8 g     F .text	000000b0 sbrk
0080db3e g     O .bss	00000001 g119
0080538c g     F .text	0000005c _fflush_r
0080db3f g     O .bss	00000001 PRE_g47
0080db40 g     O .bss	00000001 g21b
0080db41 g     O .bss	00000001 PRE_g97
0080da54 g       *ABS*	00000000 __bss_start
0080db42 g     O .bss	00000001 g86
0080db43 g     O .bss	00000001 g43
00804648 g     F .text	00000128 memset
0080db44 g     O .bss	00000001 _Pacemaker1_local__pre_FilteredVSense16
008008fc g     F .text	00000030 main
0080db45 g     O .bss	00000001 PRE_g113
0080dbd0 g     O .bss	00000004 alt_envp
0080dbb8 g     O .bss	00000004 __malloc_max_total_mem
0080db46 g     O .bss	00000001 PRE_g88
0080db47 g     O .bss	00000001 _Pacemaker1_local_AVI_ex
00806aa8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080db48 g     O .bss	00000001 g98b
0080db49 g     O .bss	00000001 PVARPTO
0080db4a g     O .bss	00000001 PRE_g14
0080db4b g     O .bss	00000001 g36
008081f8 g     F .text	00000134 altera_avalon_lcd_16207_init
0080db4c g     O .bss	00000001 g124_e1
0080dcb4 g     O .bss	00000018 URI_timer
0080db4d g     O .bss	00000001 g89
0080db4e g     O .bss	00000001 g46
00804e5c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080515c g     F .text	00000014 fclose
0080db4f g     O .bss	00000001 VRP_stop
0080db50 g     O .bss	00000001 PVARP_start
0080db51 g     O .bss	00000001 _Pacemaker1_local__reg_AVI_ex16
0080db52 g     O .bss	00000001 _cg106
00803ab4 g     F .text	0000080c _malloc_r
0080db53 g     O .bss	00000001 g57b
0080bde0 g     O .rwdata	00000004 alt_errno
0080db54 g     O .bss	00000001 PVARP_stop
0080392c g     F .text	000000c4 _fwalk
0080db55 g     O .bss	00000001 g132_e3
0080db56 g     O .bss	00000001 g95
0080db57 g     O .bss	00000001 g50
008003e0 g     F .text	00000040 LRI_timer_ISR
0080db58 g     O .bss	00000001 g96
0080db59 g     O .bss	00000001 g51
00805b78 g     F .text	00000084 .hidden __divsi3
0080da58 g     O .bss	00000004 PVARP_timeout
00805418 g     F .text	00000124 _malloc_trim_r
0080db5a g     O .bss	00000001 PRE_g103
00809e50 g       *ABS*	00000000 __CTOR_END__
0080db5b g     O .bss	00000001 PRE_g60
0080db5c g     O .bss	00000001 _cg70
0080db5d g     O .bss	00000001 g107
00809e50 g       *ABS*	00000000 __flash_rodata_start
0080db5e g     O .bss	00000001 g113
00809e50 g       *ABS*	00000000 __DTOR_LIST__
00800320 g     F .text	00000040 PVARP_timer_ISR
0080db5f g     O .bss	00000001 _cg78
0080db60 g     O .bss	00000001 g18_e2
00806974 g     F .text	00000038 alt_irq_init
0080db61 g     O .bss	00000001 g51_e5
0080db62 g     O .bss	00000001 _cg112
00806554 g     F .text	00000064 alt_release_fd
0080db63 g     O .bss	00000001 g104
0080db64 g     O .bss	00000001 PRE_g130
0080db65 g     O .bss	00000001 g13
0080db66 g     O .bss	00000001 PRE_g86
0080db67 g     O .bss	00000001 g98
0080db68 g     O .bss	00000001 g53
0080db69 g     O .bss	00000001 g8
0080db6a g     O .bss	00000001 g57
00809abc g     F .text	00000014 atexit
0080db6b g     O .bss	00000001 AEI_start
00804e64 g     F .text	00000060 _write_r
0080da5c g     O .bss	00000004 VRP_timeout
0080db6c g     O .bss	00000001 g70
0080db6d g     O .bss	00000001 _cg66
0080da60 g     O .bss	00000004 AEI_timeout
0080db6e g     O .bss	00000001 g116
0080bdc0 g     O .rwdata	00000004 _impure_ptr
0080dbc8 g     O .bss	00000004 alt_argc
0080db6f g     O .bss	00000001 g6
00805170 g     F .text	0000021c __sflush_r
00808ee0 g     F .text	00000060 _do_dtors
0080db70 g     O .bss	00000001 g72
0080db71 g     O .bss	00000001 g81
00800020 g       .exceptions	00000000 alt_irq_entry
00803458 g     F .text	00000018 __fp_unlock_all
0080db72 g     O .bss	00000001 g124
0080db73 g     O .bss	00000001 _cg108
0080832c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
0080bdcc g     O .rwdata	00000008 alt_fs_list
0080db74 g     O .bss	00000001 g119_e13
0080db75 g     O .bss	00000001 g0
0080db76 g     O .bss	00000001 _cg89
00800460 g     F .text	000000a8 pollButtons
0080db77 g     O .bss	00000001 _cg54
0080da6c g     O .bss	00000004 LEDbits
0080db78 g     O .bss	00000001 g75
0080db79 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080db7a g     O .bss	00000001 _cg40
0080db7b g     O .bss	00000001 g67_e6
0080db7c g     O .bss	00000001 _cg30
0080db7d g     O .bss	00000001 g16
0080db7e g     O .bss	00000001 g70b
0080db7f g     O .bss	00000001 _cg24
00808f74 g     F .text	00000050 alt_ic_isr_register
0080db80 g     O .bss	00000001 g58
0080db81 g     O .bss	00000001 _cg57
0080db82 g     O .bss	00000001 g68
0080db83 g     O .bss	00000001 g25
0080db84 g     O .bss	00000001 g124_fix4
0080bdfc g       *ABS*	00000000 _edata
00808480 g     F .text	00000060 altera_avalon_uart_read_fd
0080ddcc g       *ABS*	00000000 _end
0080db85 g     O .bss	00000001 g11
00800244 g       *ABS*	00000000 __ram_exceptions_end
00806f80 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080db86 g     O .bss	00000001 g65
0080db87 g     O .bss	00000001 g22
0080db88 g     O .bss	00000001 g28
0080db89 g     O .bss	00000001 g73
0080db8a g     O .bss	00000001 g54b
0080904c g     F .text	0000008c alt_ic_irq_disable
0080db8b g     O .bss	00000001 g93_e9
00804d84 g     F .text	0000007c __swrite
0080bdc8 g     O .rwdata	00000004 __malloc_trim_threshold
00809ad0 g     F .text	00000038 exit
0080db8c g     O .bss	00000001 g125
0080db8d g     O .bss	00000001 g124_e1_fix
008039f0 g     F .text	000000c4 _fwalk_reent
0080db8e g     O .bss	00000001 g77
0080db8f g     O .bss	00000001 g32
00805bfc g     F .text	00000074 .hidden __modsi3
0080bdf8 g     O .rwdata	00000004 __ctype_ptr__
0080db90 g     O .bss	00000001 g88
0080db91 g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00803434 g     F .text	00000004 __sfp_lock_release
0080db92 g     O .bss	00000001 _cg23
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080db93 g     O .bss	00000001 g101_e10
0080db94 g     O .bss	00000001 _cg92
0080db95 g     O .bss	00000001 PRE_g45
0080db96 g     O .bss	00000001 g130
00809f22 g     O .rodata	00000101 _ctype_
0080db97 g     O .bss	00000001 PRE_g5
0080da54 g     O .bss	00000004 AVI_timeout
00808904 g     F .text	00000054 altera_avalon_uart_close
00809e1c g     F .text	00000034 _exit
00805d2c g     F .text	0000012c alt_alarm_start
0080db98 g     O .bss	00000001 g121
00800658 g     F .text	000002a4 startTimers
008058ac g     F .text	000001bc __smakebuf_r
0080db99 g     O .bss	00000001 VPace
0080db9a g     O .bss	00000001 g12b
00803038 g     F .text	00000098 strlen
0080db9b g     O .bss	00000001 g39
00809454 g     F .text	00000154 open
0080db9c g     O .bss	00000001 _cg49
0080db9d g     O .bss	00000001 g120
0080db9e g     O .bss	00000001 PRE_g105
00808f40 g     F .text	00000034 alt_icache_flush_all
0080db9f g     O .bss	00000001 g29
0080dba0 g     O .bss	00000001 _cg4
0080dba1 g     O .bss	00000001 g67
0080dba2 g     O .bss	00000001 g24
0080dba3 g     O .bss	00000001 g133
0080dba4 g     O .bss	00000001 g112b
0080dba5 g     O .bss	00000001 AEI_stop
0080bdf4 g     O .rwdata	00000004 alt_priority_mask
0080dba6 g     O .bss	00000001 g109
00800290 g     F .text	00000028 Atrial_timer_ISR
00808fc4 g     F .text	00000088 alt_ic_irq_enable
0080da70 g     O .bss	00000004 LED0
00808994 g     F .text	000001dc altera_avalon_uart_read
0080dba7 g     O .bss	00000001 _pre_VPace9
0080dba8 g     O .bss	00000001 URI_start
0080dba9 g     O .bss	00000001 g4b
0080dbaa g     O .bss	00000001 g106
0080dbab g     O .bss	00000001 g10
0080bde8 g     O .rwdata	00000008 alt_alarm_list
0080dbac g     O .bss	00000001 g48b
00808e80 g     F .text	00000060 _do_ctors
0080dbad g     O .bss	00000001 PRE_g117
0080dbae g     O .bss	00000001 AEITO
0080dbaf g     O .bss	00000001 g69
0080dbb0 g     O .bss	00000001 g26
00805e94 g     F .text	000000d0 close
008061c4 g     F .text	00000084 alt_load
0080dbb1 g     O .bss	00000001 _cg72
0080dbb2 g     O .bss	00000001 _cg39
0080dbb3 g     O .bss	00000001 PRE_g37
0080dbb4 g     O .bss	00000001 g109_e11
00803438 g     F .text	00000004 __sinit_lock_acquire
0080dbb5 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	10b73304 	addi	r2,r2,-9012
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10b73304 	addi	r2,r2,-9012
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a78917 	ldw	r2,-25052(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a78917 	ldw	r2,-25052(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d68f6f14 	ori	gp,gp,15804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	10b69514 	ori	r2,r2,55892

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18f77314 	ori	r3,r3,56780

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08061c40 	call	8061c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08063580 	call	806358 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <Atrial_timer_ISR>:
unsigned int maskedButton1 = 0;
unsigned int button0_pressed = 0;
unsigned int button1_pressed = 0;

alt_u32 Atrial_timer_ISR(void* context)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	LED0 = 0;
  8002a0:	d0272d15 	stw	zero,-25420(gp)
	return 0;
  8002a4:	0005883a 	mov	r2,zero
}
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <Ventricular_timer_ISR>:

alt_u32 Ventricular_timer_ISR(void* context)
{
  8002b8:	defffe04 	addi	sp,sp,-8
  8002bc:	df000115 	stw	fp,4(sp)
  8002c0:	df000104 	addi	fp,sp,4
  8002c4:	e13fff15 	stw	r4,-4(fp)
	LED1 = 0;
  8002c8:	d0272e15 	stw	zero,-25416(gp)
	return 1;
  8002cc:	00800044 	movi	r2,1
}
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <AVI_timer_ISR>:

alt_u32 AVI_timer_ISR(void* context)
{
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	dfc00215 	stw	ra,8(sp)
  8002e8:	df000115 	stw	fp,4(sp)
  8002ec:	df000104 	addi	fp,sp,4
  8002f0:	e13fff15 	stw	r4,-4(fp)
	AVITO = 1;
  8002f4:	00800044 	movi	r2,1
  8002f8:	d0a75f05 	stb	r2,-25220(gp)
	printf("----AVI timed out----\n");
  8002fc:	01002074 	movhi	r4,129
  800300:	21279404 	addi	r4,r4,-25008
  800304:	08030240 	call	803024 <puts>

//	alt_alarm_stop(&AVI_timer);
	return 0;
  800308:	0005883a 	mov	r2,zero
}
  80030c:	e037883a 	mov	sp,fp
  800310:	dfc00117 	ldw	ra,4(sp)
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00204 	addi	sp,sp,8
  80031c:	f800283a 	ret

00800320 <PVARP_timer_ISR>:

alt_u32 PVARP_timer_ISR(void* context)
{
  800320:	defffd04 	addi	sp,sp,-12
  800324:	dfc00215 	stw	ra,8(sp)
  800328:	df000115 	stw	fp,4(sp)
  80032c:	df000104 	addi	fp,sp,4
  800330:	e13fff15 	stw	r4,-4(fp)
	PVARPTO = 1;
  800334:	00800044 	movi	r2,1
  800338:	d0a76345 	stb	r2,-25203(gp)
	printf("PVARP timed out\n");
  80033c:	01002074 	movhi	r4,129
  800340:	21279a04 	addi	r4,r4,-24984
  800344:	08030240 	call	803024 <puts>
//	alt_alarm_stop(&PVARP_timer);
	return 0;
  800348:	0005883a 	mov	r2,zero
}
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <VRP_timer_ISR>:

alt_u32 VRP_timer_ISR(void* context)
{
  800360:	defffd04 	addi	sp,sp,-12
  800364:	dfc00215 	stw	ra,8(sp)
  800368:	df000115 	stw	fp,4(sp)
  80036c:	df000104 	addi	fp,sp,4
  800370:	e13fff15 	stw	r4,-4(fp)
	VRPTO = 1;
  800374:	00800044 	movi	r2,1
  800378:	d0a75d45 	stb	r2,-25227(gp)
	printf("VRP timed out\n");
  80037c:	01002074 	movhi	r4,129
  800380:	21279e04 	addi	r4,r4,-24968
  800384:	08030240 	call	803024 <puts>
//	alt_alarm_stop(&VRP_timer);
	return 0;
  800388:	0005883a 	mov	r2,zero
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <AEI_timer_ISR>:

alt_u32 AEI_timer_ISR(void* context)
{
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
	AEITO = 1;
  8003b4:	00800044 	movi	r2,1
  8003b8:	d0a77c85 	stb	r2,-25102(gp)
	printf("AEI timed out\n");
  8003bc:	01002074 	movhi	r4,129
  8003c0:	2127a204 	addi	r4,r4,-24952
  8003c4:	08030240 	call	803024 <puts>

//	alt_alarm_stop(&AEI_timer);
	return 0;
  8003c8:	0005883a 	mov	r2,zero
}
  8003cc:	e037883a 	mov	sp,fp
  8003d0:	dfc00117 	ldw	ra,4(sp)
  8003d4:	df000017 	ldw	fp,0(sp)
  8003d8:	dec00204 	addi	sp,sp,8
  8003dc:	f800283a 	ret

008003e0 <LRI_timer_ISR>:

alt_u32 LRI_timer_ISR(void* context)
{
  8003e0:	defffd04 	addi	sp,sp,-12
  8003e4:	dfc00215 	stw	ra,8(sp)
  8003e8:	df000115 	stw	fp,4(sp)
  8003ec:	df000104 	addi	fp,sp,4
  8003f0:	e13fff15 	stw	r4,-4(fp)
	LRITO = 1;
  8003f4:	00800044 	movi	r2,1
  8003f8:	d0a73b85 	stb	r2,-25362(gp)
	printf("LRI timed out\n");
  8003fc:	01002074 	movhi	r4,129
  800400:	2127a604 	addi	r4,r4,-24936
  800404:	08030240 	call	803024 <puts>

//	alt_alarm_stop(&LRI_timer);
	return 0;
  800408:	0005883a 	mov	r2,zero
}
  80040c:	e037883a 	mov	sp,fp
  800410:	dfc00117 	ldw	ra,4(sp)
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00204 	addi	sp,sp,8
  80041c:	f800283a 	ret

00800420 <URI_timer_ISR>:

alt_u32 URI_timer_ISR(void* context)
{
  800420:	defffd04 	addi	sp,sp,-12
  800424:	dfc00215 	stw	ra,8(sp)
  800428:	df000115 	stw	fp,4(sp)
  80042c:	df000104 	addi	fp,sp,4
  800430:	e13fff15 	stw	r4,-4(fp)
	URITO = 1;
  800434:	00800044 	movi	r2,1
  800438:	d0a75d05 	stb	r2,-25228(gp)
	printf("URI timed out\n");
  80043c:	01002074 	movhi	r4,129
  800440:	2127aa04 	addi	r4,r4,-24920
  800444:	08030240 	call	803024 <puts>
//	alt_alarm_stop(&URI_timer);
	return 0;
  800448:	0005883a 	mov	r2,zero
}
  80044c:	e037883a 	mov	sp,fp
  800450:	dfc00117 	ldw	ra,4(sp)
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00204 	addi	sp,sp,8
  80045c:	f800283a 	ret

00800460 <pollButtons>:

void pollButtons()
{
  800460:	defffc04 	addi	sp,sp,-16
  800464:	dfc00315 	stw	ra,12(sp)
  800468:	df000215 	stw	fp,8(sp)
  80046c:	df000204 	addi	fp,sp,8
	// Poll buttons
	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800470:	00804434 	movhi	r2,272
  800474:	10842804 	addi	r2,r2,4256
  800478:	10800037 	ldwio	r2,0(r2)
  80047c:	d0a72f15 	stw	r2,-25412(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// clear the edge capture register
  800480:	0007883a 	mov	r3,zero
  800484:	00804434 	movhi	r2,272
  800488:	10842b04 	addi	r2,r2,4268
  80048c:	10c00035 	stwio	r3,0(r2)
	int maskedButton0 = uiButton & (1 << 0);
  800490:	d0a72f17 	ldw	r2,-25412(gp)
  800494:	1080004c 	andi	r2,r2,1
  800498:	e0bffe15 	stw	r2,-8(fp)
	int maskedButton1 = uiButton & (1 << 1);
  80049c:	d0a72f17 	ldw	r2,-25412(gp)
  8004a0:	1080008c 	andi	r2,r2,2
  8004a4:	e0bfff15 	stw	r2,-4(fp)

	if (maskedButton0 > 0){
  8004a8:	e0bffe17 	ldw	r2,-8(fp)
  8004ac:	0080020e 	bge	zero,r2,8004b8 <pollButtons+0x58>
		ASense = 0;
  8004b0:	d02749c5 	stb	zero,-25305(gp)
  8004b4:	00000506 	br	8004cc <pollButtons+0x6c>
	} else {
		ASense = 1;
  8004b8:	00800044 	movi	r2,1
  8004bc:	d0a749c5 	stb	r2,-25305(gp)
		printf("--- ASense! ---\n");
  8004c0:	01002074 	movhi	r4,129
  8004c4:	2127ae04 	addi	r4,r4,-24904
  8004c8:	08030240 	call	803024 <puts>
	}
	if (maskedButton1 > 0){
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	0080020e 	bge	zero,r2,8004dc <pollButtons+0x7c>
		VSense = 0;
  8004d4:	d0275705 	stb	zero,-25252(gp)

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004d8:	00000506 	br	8004f0 <pollButtons+0x90>
		printf("--- ASense! ---\n");
	}
	if (maskedButton1 > 0){
		VSense = 0;
	} else {
		VSense = 1;
  8004dc:	00800044 	movi	r2,1
  8004e0:	d0a75705 	stb	r2,-25252(gp)
		printf("--- VSense! ---\n");
  8004e4:	01002074 	movhi	r4,129
  8004e8:	2127b204 	addi	r4,r4,-24888
  8004ec:	08030240 	call	803024 <puts>

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004f0:	0001883a 	nop
  8004f4:	e037883a 	mov	sp,fp
  8004f8:	dfc00117 	ldw	ra,4(sp)
  8004fc:	df000017 	ldw	fp,0(sp)
  800500:	dec00204 	addi	sp,sp,8
  800504:	f800283a 	ret

00800508 <heartLEDs>:

void heartLEDs()
{
  800508:	defffc04 	addi	sp,sp,-16
  80050c:	dfc00315 	stw	ra,12(sp)
  800510:	df000215 	stw	fp,8(sp)
  800514:	df000204 	addi	fp,sp,8

	unsigned int A_LED = ASense || APace;
  800518:	d0a749c3 	ldbu	r2,-25305(gp)
  80051c:	10803fcc 	andi	r2,r2,255
  800520:	1080201c 	xori	r2,r2,128
  800524:	10bfe004 	addi	r2,r2,-128
  800528:	1000051e 	bne	r2,zero,800540 <heartLEDs+0x38>
  80052c:	d0a73603 	ldbu	r2,-25384(gp)
  800530:	10803fcc 	andi	r2,r2,255
  800534:	1080201c 	xori	r2,r2,128
  800538:	10bfe004 	addi	r2,r2,-128
  80053c:	10000226 	beq	r2,zero,800548 <heartLEDs+0x40>
  800540:	00800044 	movi	r2,1
  800544:	00000106 	br	80054c <heartLEDs+0x44>
  800548:	0005883a 	mov	r2,zero
  80054c:	e0bffe15 	stw	r2,-8(fp)
	unsigned int V_LED = VSense || VPace;
  800550:	d0a75703 	ldbu	r2,-25252(gp)
  800554:	10803fcc 	andi	r2,r2,255
  800558:	1080201c 	xori	r2,r2,128
  80055c:	10bfe004 	addi	r2,r2,-128
  800560:	1000051e 	bne	r2,zero,800578 <heartLEDs+0x70>
  800564:	d0a77743 	ldbu	r2,-25123(gp)
  800568:	10803fcc 	andi	r2,r2,255
  80056c:	1080201c 	xori	r2,r2,128
  800570:	10bfe004 	addi	r2,r2,-128
  800574:	10000226 	beq	r2,zero,800580 <heartLEDs+0x78>
  800578:	00800044 	movi	r2,1
  80057c:	00000106 	br	800584 <heartLEDs+0x7c>
  800580:	0005883a 	mov	r2,zero
  800584:	e0bfff15 	stw	r2,-4(fp)

//	printf("A_LED is: %d \n", A_LED);
//	printf("V_LED is: %d \n", V_LED);

	if (A_LED == 1)
  800588:	e0bffe17 	ldw	r2,-8(fp)
  80058c:	10800058 	cmpnei	r2,r2,1
  800590:	10000c1e 	bne	r2,zero,8005c4 <heartLEDs+0xbc>
	{
		LED0 = 1;
  800594:	00800044 	movi	r2,1
  800598:	d0a72d15 	stw	r2,-25420(gp)
		// Start timer
		alt_alarm_stop(&Atrial_timer);
  80059c:	01002074 	movhi	r4,129
  8005a0:	21371504 	addi	r4,r4,-9132
  8005a4:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL);
  8005a8:	000f883a 	mov	r7,zero
  8005ac:	01802034 	movhi	r6,128
  8005b0:	3180a404 	addi	r6,r6,656
  8005b4:	01401904 	movi	r5,100
  8005b8:	01002074 	movhi	r4,129
  8005bc:	21371504 	addi	r4,r4,-9132
  8005c0:	0805d2c0 	call	805d2c <alt_alarm_start>
	}

	if (V_LED == 1)
  8005c4:	e0bfff17 	ldw	r2,-4(fp)
  8005c8:	10800058 	cmpnei	r2,r2,1
  8005cc:	10000c1e 	bne	r2,zero,800600 <heartLEDs+0xf8>
	{
		LED1 = 1;
  8005d0:	00800044 	movi	r2,1
  8005d4:	d0a72e15 	stw	r2,-25416(gp)
		// Start timer
		alt_alarm_stop(&Ventricular_timer);
  8005d8:	01002074 	movhi	r4,129
  8005dc:	21370304 	addi	r4,r4,-9204
  8005e0:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL);
  8005e4:	000f883a 	mov	r7,zero
  8005e8:	01802034 	movhi	r6,128
  8005ec:	3180ae04 	addi	r6,r6,696
  8005f0:	01401904 	movi	r5,100
  8005f4:	01002074 	movhi	r4,129
  8005f8:	21370304 	addi	r4,r4,-9204
  8005fc:	0805d2c0 	call	805d2c <alt_alarm_start>
	}

	LEDbits = 0;
  800600:	d0272c15 	stw	zero,-25424(gp)
	LEDbits = LEDbits | (A_LED << 0);
  800604:	d0e72c17 	ldw	r3,-25424(gp)
  800608:	e0bffe17 	ldw	r2,-8(fp)
  80060c:	1884b03a 	or	r2,r3,r2
  800610:	d0a72c15 	stw	r2,-25424(gp)
	LEDbits = LEDbits | (V_LED << 1);
  800614:	e0bfff17 	ldw	r2,-4(fp)
  800618:	1085883a 	add	r2,r2,r2
  80061c:	1007883a 	mov	r3,r2
  800620:	d0a72c17 	ldw	r2,-25424(gp)
  800624:	1884b03a 	or	r2,r3,r2
  800628:	d0a72c15 	stw	r2,-25424(gp)

//	unsigned int allON = 0b00001111;

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits);
  80062c:	d0a72c17 	ldw	r2,-25424(gp)
  800630:	1007883a 	mov	r3,r2
  800634:	00804434 	movhi	r2,272
  800638:	10841c04 	addi	r2,r2,4208
  80063c:	10c00035 	stwio	r3,0(r2)
}
  800640:	0001883a 	nop
  800644:	e037883a 	mov	sp,fp
  800648:	dfc00117 	ldw	ra,4(sp)
  80064c:	df000017 	ldw	fp,0(sp)
  800650:	dec00204 	addi	sp,sp,8
  800654:	f800283a 	ret

00800658 <startTimers>:

void startTimers()
{
  800658:	defffe04 	addi	sp,sp,-8
  80065c:	dfc00115 	stw	ra,4(sp)
  800660:	df000015 	stw	fp,0(sp)
  800664:	d839883a 	mov	fp,sp
	if (AVI_stop == 1)
  800668:	d0a74143 	ldbu	r2,-25339(gp)
  80066c:	10803fcc 	andi	r2,r2,255
  800670:	1080201c 	xori	r2,r2,128
  800674:	10bfe004 	addi	r2,r2,-128
  800678:	10800058 	cmpnei	r2,r2,1
  80067c:	1000331e 	bne	r2,zero,80074c <startTimers+0xf4>
	{

		alt_alarm_stop(&PVARP_timer);
  800680:	01002074 	movhi	r4,129
  800684:	21370904 	addi	r4,r4,-9180
  800688:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_stop(&VRP_timer);
  80068c:	01002074 	movhi	r4,129
  800690:	21370f04 	addi	r4,r4,-9156
  800694:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_stop(&AEI_timer);
  800698:	01002074 	movhi	r4,129
  80069c:	21372704 	addi	r4,r4,-9060
  8006a0:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_stop(&LRI_timer);
  8006a4:	01002074 	movhi	r4,129
  8006a8:	21372104 	addi	r4,r4,-9084
  8006ac:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_stop(&URI_timer);
  8006b0:	01002074 	movhi	r4,129
  8006b4:	21372d04 	addi	r4,r4,-9036
  8006b8:	08066680 	call	806668 <alt_alarm_stop>

		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
  8006bc:	000f883a 	mov	r7,zero
  8006c0:	01802034 	movhi	r6,128
  8006c4:	3180c804 	addi	r6,r6,800
  8006c8:	01400c84 	movi	r5,50
  8006cc:	01002074 	movhi	r4,129
  8006d0:	21370904 	addi	r4,r4,-9180
  8006d4:	0805d2c0 	call	805d2c <alt_alarm_start>
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
  8006d8:	000f883a 	mov	r7,zero
  8006dc:	01802034 	movhi	r6,128
  8006e0:	3180d804 	addi	r6,r6,864
  8006e4:	01402584 	movi	r5,150
  8006e8:	01002074 	movhi	r4,129
  8006ec:	21370f04 	addi	r4,r4,-9156
  8006f0:	0805d2c0 	call	805d2c <alt_alarm_start>
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
  8006f4:	000f883a 	mov	r7,zero
  8006f8:	01802034 	movhi	r6,128
  8006fc:	3180e804 	addi	r6,r6,928
  800700:	0140c804 	movi	r5,800
  800704:	01002074 	movhi	r4,129
  800708:	21372704 	addi	r4,r4,-9060
  80070c:	0805d2c0 	call	805d2c <alt_alarm_start>
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
  800710:	000f883a 	mov	r7,zero
  800714:	01802034 	movhi	r6,128
  800718:	3180f804 	addi	r6,r6,992
  80071c:	0140ed84 	movi	r5,950
  800720:	01002074 	movhi	r4,129
  800724:	21372104 	addi	r4,r4,-9084
  800728:	0805d2c0 	call	805d2c <alt_alarm_start>
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
  80072c:	000f883a 	mov	r7,zero
  800730:	01802034 	movhi	r6,128
  800734:	31810804 	addi	r6,r6,1056
  800738:	0140e104 	movi	r5,900
  80073c:	01002074 	movhi	r4,129
  800740:	21372d04 	addi	r4,r4,-9036
  800744:	0805d2c0 	call	805d2c <alt_alarm_start>
  800748:	00001006 	br	80078c <startTimers+0x134>
	}
	else if (AVI_start == 1)
  80074c:	d0a73e43 	ldbu	r2,-25351(gp)
  800750:	10803fcc 	andi	r2,r2,255
  800754:	1080201c 	xori	r2,r2,128
  800758:	10bfe004 	addi	r2,r2,-128
  80075c:	10800058 	cmpnei	r2,r2,1
  800760:	10000a1e 	bne	r2,zero,80078c <startTimers+0x134>
	{
		alt_alarm_stop(&AVI_timer);
  800764:	01002074 	movhi	r4,129
  800768:	21371b04 	addi	r4,r4,-9108
  80076c:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  800770:	000f883a 	mov	r7,zero
  800774:	01802034 	movhi	r6,128
  800778:	3180b804 	addi	r6,r6,736
  80077c:	01404b04 	movi	r5,300
  800780:	01002074 	movhi	r4,129
  800784:	21371b04 	addi	r4,r4,-9108
  800788:	0805d2c0 	call	805d2c <alt_alarm_start>
	}

	if (PVARP_start == 1)
  80078c:	d0a76503 	ldbu	r2,-25196(gp)
  800790:	10803fcc 	andi	r2,r2,255
  800794:	1080201c 	xori	r2,r2,128
  800798:	10bfe004 	addi	r2,r2,-128
  80079c:	10800058 	cmpnei	r2,r2,1
  8007a0:	10000a1e 	bne	r2,zero,8007cc <startTimers+0x174>
	{
		alt_alarm_stop(&PVARP_timer);
  8007a4:	01002074 	movhi	r4,129
  8007a8:	21370904 	addi	r4,r4,-9180
  8007ac:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
  8007b0:	000f883a 	mov	r7,zero
  8007b4:	01802034 	movhi	r6,128
  8007b8:	3180c804 	addi	r6,r6,800
  8007bc:	01400c84 	movi	r5,50
  8007c0:	01002074 	movhi	r4,129
  8007c4:	21370904 	addi	r4,r4,-9180
  8007c8:	0805d2c0 	call	805d2c <alt_alarm_start>
	}
	if(VRP_start==1)
  8007cc:	d0a75803 	ldbu	r2,-25248(gp)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	1080201c 	xori	r2,r2,128
  8007d8:	10bfe004 	addi	r2,r2,-128
  8007dc:	10800058 	cmpnei	r2,r2,1
  8007e0:	10000a1e 	bne	r2,zero,80080c <startTimers+0x1b4>
	{
		alt_alarm_stop(&VRP_timer);
  8007e4:	01002074 	movhi	r4,129
  8007e8:	21370f04 	addi	r4,r4,-9156
  8007ec:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
  8007f0:	000f883a 	mov	r7,zero
  8007f4:	01802034 	movhi	r6,128
  8007f8:	3180d804 	addi	r6,r6,864
  8007fc:	01402584 	movi	r5,150
  800800:	01002074 	movhi	r4,129
  800804:	21370f04 	addi	r4,r4,-9156
  800808:	0805d2c0 	call	805d2c <alt_alarm_start>
	}
	if(AEI_start==1)
  80080c:	d0a76bc3 	ldbu	r2,-25169(gp)
  800810:	10803fcc 	andi	r2,r2,255
  800814:	1080201c 	xori	r2,r2,128
  800818:	10bfe004 	addi	r2,r2,-128
  80081c:	10800058 	cmpnei	r2,r2,1
  800820:	10000a1e 	bne	r2,zero,80084c <startTimers+0x1f4>
	{
		alt_alarm_stop(&AEI_timer);
  800824:	01002074 	movhi	r4,129
  800828:	21372704 	addi	r4,r4,-9060
  80082c:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
  800830:	000f883a 	mov	r7,zero
  800834:	01802034 	movhi	r6,128
  800838:	3180e804 	addi	r6,r6,928
  80083c:	0140c804 	movi	r5,800
  800840:	01002074 	movhi	r4,129
  800844:	21372704 	addi	r4,r4,-9060
  800848:	0805d2c0 	call	805d2c <alt_alarm_start>
	}
	if (URI_start == 1)
  80084c:	d0a77b03 	ldbu	r2,-25108(gp)
  800850:	10803fcc 	andi	r2,r2,255
  800854:	1080201c 	xori	r2,r2,128
  800858:	10bfe004 	addi	r2,r2,-128
  80085c:	10800058 	cmpnei	r2,r2,1
  800860:	10000a1e 	bne	r2,zero,80088c <startTimers+0x234>
	{
		alt_alarm_stop(&URI_timer);
  800864:	01002074 	movhi	r4,129
  800868:	21372d04 	addi	r4,r4,-9036
  80086c:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
  800870:	000f883a 	mov	r7,zero
  800874:	01802034 	movhi	r6,128
  800878:	31810804 	addi	r6,r6,1056
  80087c:	0140e104 	movi	r5,900
  800880:	01002074 	movhi	r4,129
  800884:	21372d04 	addi	r4,r4,-9036
  800888:	0805d2c0 	call	805d2c <alt_alarm_start>
	}
	if (LRI_start == 1)
  80088c:	d0a75cc3 	ldbu	r2,-25229(gp)
  800890:	10803fcc 	andi	r2,r2,255
  800894:	1080201c 	xori	r2,r2,128
  800898:	10bfe004 	addi	r2,r2,-128
  80089c:	10800058 	cmpnei	r2,r2,1
  8008a0:	10000a1e 	bne	r2,zero,8008cc <startTimers+0x274>
	{
		alt_alarm_stop(&LRI_timer);
  8008a4:	01002074 	movhi	r4,129
  8008a8:	21372104 	addi	r4,r4,-9084
  8008ac:	08066680 	call	806668 <alt_alarm_stop>
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
  8008b0:	000f883a 	mov	r7,zero
  8008b4:	01802034 	movhi	r6,128
  8008b8:	3180f804 	addi	r6,r6,992
  8008bc:	0140ed84 	movi	r5,950
  8008c0:	01002074 	movhi	r4,129
  8008c4:	21372104 	addi	r4,r4,-9084
  8008c8:	0805d2c0 	call	805d2c <alt_alarm_start>
	}


	AVITO = 0;
  8008cc:	d0275f05 	stb	zero,-25220(gp)
	PVARPTO = 0;
  8008d0:	d0276345 	stb	zero,-25203(gp)
	VRPTO = 0;
  8008d4:	d0275d45 	stb	zero,-25227(gp)
	AEITO = 0;
  8008d8:	d0277c85 	stb	zero,-25102(gp)
	LRITO = 0;
  8008dc:	d0273b85 	stb	zero,-25362(gp)
	URITO = 0;
  8008e0:	d0275d05 	stb	zero,-25228(gp)
}
  8008e4:	0001883a 	nop
  8008e8:	e037883a 	mov	sp,fp
  8008ec:	dfc00117 	ldw	ra,4(sp)
  8008f0:	df000017 	ldw	fp,0(sp)
  8008f4:	dec00204 	addi	sp,sp,8
  8008f8:	f800283a 	ret

008008fc <main>:

int main()
{
  8008fc:	defffe04 	addi	sp,sp,-8
  800900:	dfc00115 	stw	ra,4(sp)
  800904:	df000015 	stw	fp,0(sp)
  800908:	d839883a 	mov	fp,sp
	// Reset the scc
	reset();
  80090c:	080092c0 	call	80092c <reset>
//	alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//	alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//	alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);

	AVI_stop = 1;
  800910:	00800044 	movi	r2,1
  800914:	d0a74145 	stb	r2,-25339(gp)

	while(1) // Main loop
	{

		startTimers();
  800918:	08006580 	call	800658 <startTimers>
		tick();
  80091c:	08009d40 	call	8009d4 <tick>
		pollButtons();
  800920:	08004600 	call	800460 <pollButtons>
		heartLEDs();
  800924:	08005080 	call	800508 <heartLEDs>
	}
  800928:	003ffb06 	br	800918 <__alt_mem_onchip_mem+0xff780918>

0080092c <reset>:
char g124_e1_fix;
char g124_e1;
char g128_e2;
char g132_e3;
int _PRE_GO;
void reset(){
  80092c:	deffff04 	addi	sp,sp,-4
  800930:	df000015 	stw	fp,0(sp)
  800934:	d839883a 	mov	fp,sp
   _GO = 1;
  800938:	00800044 	movi	r2,1
  80093c:	d0a75c05 	stb	r2,-25232(gp)
   _PRE_GO = 0;
  800940:	d0273c15 	stw	zero,-25360(gp)
   PRE_g3 = 0;
  800944:	d0273d05 	stb	zero,-25356(gp)
   PRE_g5 = 0;
  800948:	d02776c5 	stb	zero,-25125(gp)
   PRE_g11 = 0;
  80094c:	d0275d85 	stb	zero,-25226(gp)
   PRE_g14 = 0;
  800950:	d0276385 	stb	zero,-25202(gp)
   PRE_g20 = 0;
  800954:	d0274105 	stb	zero,-25340(gp)
   PRE_g22 = 0;
  800958:	d02759c5 	stb	zero,-25241(gp)
   PRE_g29 = 0;
  80095c:	d0273d85 	stb	zero,-25354(gp)
   PRE_g32 = 0;
  800960:	d0273f45 	stb	zero,-25347(gp)
   PRE_g34 = 0;
  800964:	d0274645 	stb	zero,-25319(gp)
   PRE_g37 = 0;
  800968:	d0277dc5 	stb	zero,-25097(gp)
   PRE_g45 = 0;
  80096c:	d0277645 	stb	zero,-25127(gp)
   PRE_g47 = 0;
  800970:	d02760c5 	stb	zero,-25213(gp)
   PRE_g53 = 0;
  800974:	d0274a45 	stb	zero,-25303(gp)
   PRE_g56 = 0;
  800978:	d0273f05 	stb	zero,-25348(gp)
   PRE_g60 = 0;
  80097c:	d02767c5 	stb	zero,-25185(gp)
   PRE_g69 = 0;
  800980:	d02743c5 	stb	zero,-25329(gp)
   PRE_g71 = 0;
  800984:	d0275405 	stb	zero,-25264(gp)
   PRE_g77 = 0;
  800988:	d0274605 	stb	zero,-25320(gp)
   PRE_g80 = 0;
  80098c:	d0275145 	stb	zero,-25275(gp)
   PRE_g86 = 0;
  800990:	d0276a85 	stb	zero,-25174(gp)
   PRE_g88 = 0;
  800994:	d0276285 	stb	zero,-25206(gp)
   PRE_g95 = 0;
  800998:	d0273645 	stb	zero,-25383(gp)
   PRE_g97 = 0;
  80099c:	d0276145 	stb	zero,-25211(gp)
   PRE_g103 = 0;
  8009a0:	d0276785 	stb	zero,-25186(gp)
   PRE_g105 = 0;
  8009a4:	d0277885 	stb	zero,-25118(gp)
   PRE_g111 = 0;
  8009a8:	d0274d85 	stb	zero,-25290(gp)
   PRE_g113 = 0;
  8009ac:	d0276245 	stb	zero,-25207(gp)
   PRE_g117 = 0;
  8009b0:	d0277c45 	stb	zero,-25103(gp)
   PRE_g121 = 0;
  8009b4:	d0273e85 	stb	zero,-25350(gp)
   PRE_g126 = 0;
  8009b8:	d0275a45 	stb	zero,-25239(gp)
   PRE_g130 = 0;
  8009bc:	d0276a05 	stb	zero,-25176(gp)
   return;
  8009c0:	0001883a 	nop
}
  8009c4:	e037883a 	mov	sp,fp
  8009c8:	df000017 	ldw	fp,0(sp)
  8009cc:	dec00104 	addi	sp,sp,4
  8009d0:	f800283a 	ret

008009d4 <tick>:
void tick(){
  8009d4:	deffff04 	addi	sp,sp,-4
  8009d8:	df000015 	stw	fp,0(sp)
  8009dc:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  8009e0:	d0a73c17 	ldw	r2,-25360(gp)
  8009e4:	10800058 	cmpnei	r2,r2,1
  8009e8:	1000011e 	bne	r2,zero,8009f0 <tick+0x1c>
      _GO = 0;
  8009ec:	d0275c05 	stb	zero,-25232(gp)
   }
   {
      g0 = _GO;
  8009f0:	d0a75c03 	ldbu	r2,-25232(gp)
  8009f4:	d0a76e45 	stb	r2,-25159(gp)
      g1 = g0;
  8009f8:	d0a76e43 	ldbu	r2,-25159(gp)
  8009fc:	d0a74205 	stb	r2,-25336(gp)
      g2 = g1;
  800a00:	d0a74203 	ldbu	r2,-25336(gp)
  800a04:	d0a75005 	stb	r2,-25280(gp)
      g125 = g0;
  800a08:	d0a76e43 	ldbu	r2,-25159(gp)
  800a0c:	d0a77405 	stb	r2,-25136(gp)
      g127 =(PRE_g126);
  800a10:	d0a75a43 	ldbu	r2,-25239(gp)
  800a14:	d0a73b45 	stb	r2,-25363(gp)
      g126 =(g125||g127);
  800a18:	d0a77403 	ldbu	r2,-25136(gp)
  800a1c:	10803fcc 	andi	r2,r2,255
  800a20:	1080201c 	xori	r2,r2,128
  800a24:	10bfe004 	addi	r2,r2,-128
  800a28:	1000051e 	bne	r2,zero,800a40 <tick+0x6c>
  800a2c:	d0a73b43 	ldbu	r2,-25363(gp)
  800a30:	10803fcc 	andi	r2,r2,255
  800a34:	1080201c 	xori	r2,r2,128
  800a38:	10bfe004 	addi	r2,r2,-128
  800a3c:	10000226 	beq	r2,zero,800a48 <tick+0x74>
  800a40:	00800044 	movi	r2,1
  800a44:	00000106 	br	800a4c <tick+0x78>
  800a48:	0005883a 	mov	r2,zero
  800a4c:	d0a742c5 	stb	r2,-25333(gp)
      if(g126){
  800a50:	d0a742c3 	ldbu	r2,-25333(gp)
  800a54:	10803fcc 	andi	r2,r2,255
  800a58:	1080201c 	xori	r2,r2,128
  800a5c:	10bfe004 	addi	r2,r2,-128
  800a60:	10000e26 	beq	r2,zero,800a9c <tick+0xc8>
         VPace = 0;
  800a64:	d0277745 	stb	zero,-25123(gp)
         APace = 0;
  800a68:	d0273605 	stb	zero,-25384(gp)
         AVI_stop = 0;
  800a6c:	d0274145 	stb	zero,-25339(gp)
         AVI_start = 0;
  800a70:	d0273e45 	stb	zero,-25351(gp)
         LRI_start = 0;
  800a74:	d0275cc5 	stb	zero,-25229(gp)
         VRP_start = 0;
  800a78:	d0275805 	stb	zero,-25248(gp)
         VRP_stop = 0;
  800a7c:	d02764c5 	stb	zero,-25197(gp)
         AEI_start = 0;
  800a80:	d0276bc5 	stb	zero,-25169(gp)
         AEI_stop = 0;
  800a84:	d0277a45 	stb	zero,-25111(gp)
         AVI_start = 0;
  800a88:	d0273e45 	stb	zero,-25351(gp)
         PVARP_start = 0;
  800a8c:	d0276505 	stb	zero,-25196(gp)
         PVARP_stop = 0;
  800a90:	d0276605 	stb	zero,-25192(gp)
         URI_ex = 0;
  800a94:	d0275905 	stb	zero,-25244(gp)
         URI_start = 0;
  800a98:	d0277b05 	stb	zero,-25108(gp)
      }
      g122 =(PRE_g121);
  800a9c:	d0a73e83 	ldbu	r2,-25350(gp)
  800aa0:	d0a758c5 	stb	r2,-25245(gp)
      if(g122){
  800aa4:	d0a758c3 	ldbu	r2,-25245(gp)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	1080201c 	xori	r2,r2,128
  800ab0:	10bfe004 	addi	r2,r2,-128
  800ab4:	10000426 	beq	r2,zero,800ac8 <tick+0xf4>
         _Pacemaker1_local__pre_AVI_ex16 = _Pacemaker1_local__reg_AVI_ex16;
  800ab8:	d0a76543 	ldbu	r2,-25195(gp)
  800abc:	d0a74c05 	stb	r2,-25296(gp)
         _Pacemaker1_local__pre_FilteredVSense16 = _Pacemaker1_local__reg_FilteredVSense16;
  800ac0:	d0a740c3 	ldbu	r2,-25341(gp)
  800ac4:	d0a76205 	stb	r2,-25208(gp)
      }
      g118 =(PRE_g117);
  800ac8:	d0a77c43 	ldbu	r2,-25103(gp)
  800acc:	d0a74945 	stb	r2,-25307(gp)
      g116 = g1;
  800ad0:	d0a74203 	ldbu	r2,-25336(gp)
  800ad4:	d0a76c85 	stb	r2,-25166(gp)
      g117 =(g118||g116);
  800ad8:	d0a74943 	ldbu	r2,-25307(gp)
  800adc:	10803fcc 	andi	r2,r2,255
  800ae0:	1080201c 	xori	r2,r2,128
  800ae4:	10bfe004 	addi	r2,r2,-128
  800ae8:	1000051e 	bne	r2,zero,800b00 <tick+0x12c>
  800aec:	d0a76c83 	ldbu	r2,-25166(gp)
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	1080201c 	xori	r2,r2,128
  800af8:	10bfe004 	addi	r2,r2,-128
  800afc:	10000226 	beq	r2,zero,800b08 <tick+0x134>
  800b00:	00800044 	movi	r2,1
  800b04:	00000106 	br	800b0c <tick+0x138>
  800b08:	0005883a 	mov	r2,zero
  800b0c:	d0a74cc5 	stb	r2,-25293(gp)
      if(g117){
  800b10:	d0a74cc3 	ldbu	r2,-25293(gp)
  800b14:	10803fcc 	andi	r2,r2,255
  800b18:	1080201c 	xori	r2,r2,128
  800b1c:	10bfe004 	addi	r2,r2,-128
  800b20:	10000826 	beq	r2,zero,800b44 <tick+0x170>
         _Pacemaker1_local_LRI_ex = 0;
  800b24:	d0275985 	stb	zero,-25242(gp)
         _Pacemaker1_local_LRI_stop = 0;
  800b28:	d0275885 	stb	zero,-25246(gp)
         _Pacemaker1_local_VRP_ex = 0;
  800b2c:	d0274b05 	stb	zero,-25300(gp)
         _Pacemaker1_local_AVI_ex = 0;
  800b30:	d02762c5 	stb	zero,-25205(gp)
         _Pacemaker1_local_PVARP_ex = 0;
  800b34:	d0274fc5 	stb	zero,-25281(gp)
         _Pacemaker1_local_AEI_ex = 0;
  800b38:	d0275545 	stb	zero,-25259(gp)
         _Pacemaker1_local_FilteredASense = 0;
  800b3c:	d0275a05 	stb	zero,-25240(gp)
         _Pacemaker1_local_FilteredVSense = 0;
  800b40:	d02755c5 	stb	zero,-25257(gp)
      }
      g35 =(PRE_g34);
  800b44:	d0a74643 	ldbu	r2,-25319(gp)
  800b48:	d0a75b05 	stb	r2,-25236(gp)
      g35b = g35;
  800b4c:	d0a75b03 	ldbu	r2,-25236(gp)
  800b50:	d0a75945 	stb	r2,-25243(gp)
      _cg35 = _Pacemaker1_local__pre_FilteredVSense16;
  800b54:	d0a76203 	ldbu	r2,-25208(gp)
  800b58:	d0a74545 	stb	r2,-25323(gp)
      g131 =(PRE_g130);
  800b5c:	d0a76a03 	ldbu	r2,-25176(gp)
  800b60:	d0a756c5 	stb	r2,-25253(gp)
      if(g131){
  800b64:	d0a756c3 	ldbu	r2,-25253(gp)
  800b68:	10803fcc 	andi	r2,r2,255
  800b6c:	1080201c 	xori	r2,r2,128
  800b70:	10bfe004 	addi	r2,r2,-128
  800b74:	10000226 	beq	r2,zero,800b80 <tick+0x1ac>
         _pre_VPace9 = _reg_VPace9;
  800b78:	d0a75ac3 	ldbu	r2,-25237(gp)
  800b7c:	d0a77ac5 	stb	r2,-25109(gp)
      }
      g39 =(g35b&&(!(_cg35)));
  800b80:	d0a75943 	ldbu	r2,-25243(gp)
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1080201c 	xori	r2,r2,128
  800b8c:	10bfe004 	addi	r2,r2,-128
  800b90:	10000726 	beq	r2,zero,800bb0 <tick+0x1dc>
  800b94:	d0a74543 	ldbu	r2,-25323(gp)
  800b98:	10803fcc 	andi	r2,r2,255
  800b9c:	1080201c 	xori	r2,r2,128
  800ba0:	10bfe004 	addi	r2,r2,-128
  800ba4:	1000021e 	bne	r2,zero,800bb0 <tick+0x1dc>
  800ba8:	00800044 	movi	r2,1
  800bac:	00000106 	br	800bb4 <tick+0x1e0>
  800bb0:	0005883a 	mov	r2,zero
  800bb4:	d0a777c5 	stb	r2,-25121(gp)
      _cg39 = _pre_VPace9;
  800bb8:	d0a77ac3 	ldbu	r2,-25109(gp)
  800bbc:	d0a77d85 	stb	r2,-25098(gp)
      g36 =((g35b&&_cg35)||(g39&&_cg39));
  800bc0:	d0a75943 	ldbu	r2,-25243(gp)
  800bc4:	10803fcc 	andi	r2,r2,255
  800bc8:	1080201c 	xori	r2,r2,128
  800bcc:	10bfe004 	addi	r2,r2,-128
  800bd0:	10000526 	beq	r2,zero,800be8 <tick+0x214>
  800bd4:	d0a74543 	ldbu	r2,-25323(gp)
  800bd8:	10803fcc 	andi	r2,r2,255
  800bdc:	1080201c 	xori	r2,r2,128
  800be0:	10bfe004 	addi	r2,r2,-128
  800be4:	10000a1e 	bne	r2,zero,800c10 <tick+0x23c>
  800be8:	d0a777c3 	ldbu	r2,-25121(gp)
  800bec:	10803fcc 	andi	r2,r2,255
  800bf0:	1080201c 	xori	r2,r2,128
  800bf4:	10bfe004 	addi	r2,r2,-128
  800bf8:	10000726 	beq	r2,zero,800c18 <tick+0x244>
  800bfc:	d0a77d83 	ldbu	r2,-25098(gp)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1080201c 	xori	r2,r2,128
  800c08:	10bfe004 	addi	r2,r2,-128
  800c0c:	10000226 	beq	r2,zero,800c18 <tick+0x244>
  800c10:	00800044 	movi	r2,1
  800c14:	00000106 	br	800c1c <tick+0x248>
  800c18:	0005883a 	mov	r2,zero
  800c1c:	d0a763c5 	stb	r2,-25201(gp)
      if(g36){
  800c20:	d0a763c3 	ldbu	r2,-25201(gp)
  800c24:	10803fcc 	andi	r2,r2,255
  800c28:	1080201c 	xori	r2,r2,128
  800c2c:	10bfe004 	addi	r2,r2,-128
  800c30:	10000226 	beq	r2,zero,800c3c <tick+0x268>
         _Pacemaker1_local_LRI_stop =(_Pacemaker1_local_LRI_stop||1);
  800c34:	00800044 	movi	r2,1
  800c38:	d0a75885 	stb	r2,-25246(gp)
      }
      g23 =(PRE_g22);
  800c3c:	d0a759c3 	ldbu	r2,-25241(gp)
  800c40:	d0a75305 	stb	r2,-25268(gp)
      g23b = g23;
  800c44:	d0a75303 	ldbu	r2,-25268(gp)
  800c48:	d0a76005 	stb	r2,-25216(gp)
      _cg23 = _Pacemaker1_local_LRI_stop;
  800c4c:	d0a75883 	ldbu	r2,-25246(gp)
  800c50:	d0a77585 	stb	r2,-25130(gp)
      g24 =(g23b&&(!(_cg23)));
  800c54:	d0a76003 	ldbu	r2,-25216(gp)
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	1080201c 	xori	r2,r2,128
  800c60:	10bfe004 	addi	r2,r2,-128
  800c64:	10000726 	beq	r2,zero,800c84 <tick+0x2b0>
  800c68:	d0a77583 	ldbu	r2,-25130(gp)
  800c6c:	10803fcc 	andi	r2,r2,255
  800c70:	1080201c 	xori	r2,r2,128
  800c74:	10bfe004 	addi	r2,r2,-128
  800c78:	1000021e 	bne	r2,zero,800c84 <tick+0x2b0>
  800c7c:	00800044 	movi	r2,1
  800c80:	00000106 	br	800c88 <tick+0x2b4>
  800c84:	0005883a 	mov	r2,zero
  800c88:	d0a77985 	stb	r2,-25114(gp)
      _cg24 = LRITO;
  800c8c:	d0a73b83 	ldbu	r2,-25362(gp)
  800c90:	d0a770c5 	stb	r2,-25149(gp)
      g25 =(g24&&_cg24);
  800c94:	d0a77983 	ldbu	r2,-25114(gp)
  800c98:	10803fcc 	andi	r2,r2,255
  800c9c:	1080201c 	xori	r2,r2,128
  800ca0:	10bfe004 	addi	r2,r2,-128
  800ca4:	10000726 	beq	r2,zero,800cc4 <tick+0x2f0>
  800ca8:	d0a770c3 	ldbu	r2,-25149(gp)
  800cac:	10803fcc 	andi	r2,r2,255
  800cb0:	1080201c 	xori	r2,r2,128
  800cb4:	10bfe004 	addi	r2,r2,-128
  800cb8:	10000226 	beq	r2,zero,800cc4 <tick+0x2f0>
  800cbc:	00800044 	movi	r2,1
  800cc0:	00000106 	br	800cc8 <tick+0x2f4>
  800cc4:	0005883a 	mov	r2,zero
  800cc8:	d0a771c5 	stb	r2,-25145(gp)
      if(g25){
  800ccc:	d0a771c3 	ldbu	r2,-25145(gp)
  800cd0:	10803fcc 	andi	r2,r2,255
  800cd4:	1080201c 	xori	r2,r2,128
  800cd8:	10bfe004 	addi	r2,r2,-128
  800cdc:	10000226 	beq	r2,zero,800ce8 <tick+0x314>
         _Pacemaker1_local_LRI_ex =(_Pacemaker1_local_LRI_ex||1);
  800ce0:	00800044 	movi	r2,1
  800ce4:	d0a75985 	stb	r2,-25242(gp)
      }
      g40 =(g39&&(!(_cg39)));
  800ce8:	d0a777c3 	ldbu	r2,-25121(gp)
  800cec:	10803fcc 	andi	r2,r2,255
  800cf0:	1080201c 	xori	r2,r2,128
  800cf4:	10bfe004 	addi	r2,r2,-128
  800cf8:	10000726 	beq	r2,zero,800d18 <tick+0x344>
  800cfc:	d0a77d83 	ldbu	r2,-25098(gp)
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1080201c 	xori	r2,r2,128
  800d08:	10bfe004 	addi	r2,r2,-128
  800d0c:	1000021e 	bne	r2,zero,800d18 <tick+0x344>
  800d10:	00800044 	movi	r2,1
  800d14:	00000106 	br	800d1c <tick+0x348>
  800d18:	0005883a 	mov	r2,zero
  800d1c:	d0a73505 	stb	r2,-25388(gp)
      _cg40 = _Pacemaker1_local_LRI_ex;
  800d20:	d0a75983 	ldbu	r2,-25242(gp)
  800d24:	d0a76f85 	stb	r2,-25154(gp)
      g41 =(g40&&_cg40);
  800d28:	d0a73503 	ldbu	r2,-25388(gp)
  800d2c:	10803fcc 	andi	r2,r2,255
  800d30:	1080201c 	xori	r2,r2,128
  800d34:	10bfe004 	addi	r2,r2,-128
  800d38:	10000726 	beq	r2,zero,800d58 <tick+0x384>
  800d3c:	d0a76f83 	ldbu	r2,-25154(gp)
  800d40:	10803fcc 	andi	r2,r2,255
  800d44:	1080201c 	xori	r2,r2,128
  800d48:	10bfe004 	addi	r2,r2,-128
  800d4c:	10000226 	beq	r2,zero,800d58 <tick+0x384>
  800d50:	00800044 	movi	r2,1
  800d54:	00000106 	br	800d5c <tick+0x388>
  800d58:	0005883a 	mov	r2,zero
  800d5c:	d0a74885 	stb	r2,-25310(gp)
      if(g41){
  800d60:	d0a74883 	ldbu	r2,-25310(gp)
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	1080201c 	xori	r2,r2,128
  800d6c:	10bfe004 	addi	r2,r2,-128
  800d70:	10000226 	beq	r2,zero,800d7c <tick+0x3a8>
         VPace =(VPace||1);
  800d74:	00800044 	movi	r2,1
  800d78:	d0a77745 	stb	r2,-25123(gp)
      }
      g61 =(PRE_g60);
  800d7c:	d0a767c3 	ldbu	r2,-25185(gp)
  800d80:	d0a74245 	stb	r2,-25335(gp)
      g61b = g61;
  800d84:	d0a74243 	ldbu	r2,-25335(gp)
  800d88:	d0a74685 	stb	r2,-25318(gp)
      _cg61 = _Pacemaker1_local__pre_FilteredVSense16;
  800d8c:	d0a76203 	ldbu	r2,-25208(gp)
  800d90:	d0a748c5 	stb	r2,-25309(gp)
      g63 =(g61b&&(!(_cg61)));
  800d94:	d0a74683 	ldbu	r2,-25318(gp)
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	1080201c 	xori	r2,r2,128
  800da0:	10bfe004 	addi	r2,r2,-128
  800da4:	10000726 	beq	r2,zero,800dc4 <tick+0x3f0>
  800da8:	d0a748c3 	ldbu	r2,-25309(gp)
  800dac:	10803fcc 	andi	r2,r2,255
  800db0:	1080201c 	xori	r2,r2,128
  800db4:	10bfe004 	addi	r2,r2,-128
  800db8:	1000021e 	bne	r2,zero,800dc4 <tick+0x3f0>
  800dbc:	00800044 	movi	r2,1
  800dc0:	00000106 	br	800dc8 <tick+0x3f4>
  800dc4:	0005883a 	mov	r2,zero
  800dc8:	d0a75e85 	stb	r2,-25222(gp)
      _cg63 = VPace;
  800dcc:	d0a77743 	ldbu	r2,-25123(gp)
  800dd0:	d0a74d45 	stb	r2,-25291(gp)
      g64 =(g63&&(!(_cg63)));
  800dd4:	d0a75e83 	ldbu	r2,-25222(gp)
  800dd8:	10803fcc 	andi	r2,r2,255
  800ddc:	1080201c 	xori	r2,r2,128
  800de0:	10bfe004 	addi	r2,r2,-128
  800de4:	10000726 	beq	r2,zero,800e04 <tick+0x430>
  800de8:	d0a74d43 	ldbu	r2,-25291(gp)
  800dec:	10803fcc 	andi	r2,r2,255
  800df0:	1080201c 	xori	r2,r2,128
  800df4:	10bfe004 	addi	r2,r2,-128
  800df8:	1000021e 	bne	r2,zero,800e04 <tick+0x430>
  800dfc:	00800044 	movi	r2,1
  800e00:	00000106 	br	800e08 <tick+0x434>
  800e04:	0005883a 	mov	r2,zero
  800e08:	d0a74dc5 	stb	r2,-25289(gp)
      _cg64 = _Pacemaker1_local__pre_AVI_ex16;
  800e0c:	d0a74c03 	ldbu	r2,-25296(gp)
  800e10:	d0a75a85 	stb	r2,-25238(gp)
      g65 =(g64&&_cg64);
  800e14:	d0a74dc3 	ldbu	r2,-25289(gp)
  800e18:	10803fcc 	andi	r2,r2,255
  800e1c:	1080201c 	xori	r2,r2,128
  800e20:	10bfe004 	addi	r2,r2,-128
  800e24:	10000726 	beq	r2,zero,800e44 <tick+0x470>
  800e28:	d0a75a83 	ldbu	r2,-25238(gp)
  800e2c:	10803fcc 	andi	r2,r2,255
  800e30:	1080201c 	xori	r2,r2,128
  800e34:	10bfe004 	addi	r2,r2,-128
  800e38:	10000226 	beq	r2,zero,800e44 <tick+0x470>
  800e3c:	00800044 	movi	r2,1
  800e40:	00000106 	br	800e48 <tick+0x474>
  800e44:	0005883a 	mov	r2,zero
  800e48:	d0a77285 	stb	r2,-25142(gp)
      if(g65){
  800e4c:	d0a77283 	ldbu	r2,-25142(gp)
  800e50:	10803fcc 	andi	r2,r2,255
  800e54:	1080201c 	xori	r2,r2,128
  800e58:	10bfe004 	addi	r2,r2,-128
  800e5c:	10000226 	beq	r2,zero,800e68 <tick+0x494>
         VPace =(VPace||1);
  800e60:	00800044 	movi	r2,1
  800e64:	d0a77745 	stb	r2,-25123(gp)
      }
      g62 =(g65||(g61b&&_cg61)||(g63&&_cg63));
  800e68:	d0a77283 	ldbu	r2,-25142(gp)
  800e6c:	10803fcc 	andi	r2,r2,255
  800e70:	1080201c 	xori	r2,r2,128
  800e74:	10bfe004 	addi	r2,r2,-128
  800e78:	1000141e 	bne	r2,zero,800ecc <tick+0x4f8>
  800e7c:	d0a74683 	ldbu	r2,-25318(gp)
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	1080201c 	xori	r2,r2,128
  800e88:	10bfe004 	addi	r2,r2,-128
  800e8c:	10000526 	beq	r2,zero,800ea4 <tick+0x4d0>
  800e90:	d0a748c3 	ldbu	r2,-25309(gp)
  800e94:	10803fcc 	andi	r2,r2,255
  800e98:	1080201c 	xori	r2,r2,128
  800e9c:	10bfe004 	addi	r2,r2,-128
  800ea0:	10000a1e 	bne	r2,zero,800ecc <tick+0x4f8>
  800ea4:	d0a75e83 	ldbu	r2,-25222(gp)
  800ea8:	10803fcc 	andi	r2,r2,255
  800eac:	1080201c 	xori	r2,r2,128
  800eb0:	10bfe004 	addi	r2,r2,-128
  800eb4:	10000726 	beq	r2,zero,800ed4 <tick+0x500>
  800eb8:	d0a74d43 	ldbu	r2,-25291(gp)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	10000226 	beq	r2,zero,800ed4 <tick+0x500>
  800ecc:	00800044 	movi	r2,1
  800ed0:	00000106 	br	800ed8 <tick+0x504>
  800ed4:	0005883a 	mov	r2,zero
  800ed8:	d0a74805 	stb	r2,-25312(gp)
      if(g62){
  800edc:	d0a74803 	ldbu	r2,-25312(gp)
  800ee0:	10803fcc 	andi	r2,r2,255
  800ee4:	1080201c 	xori	r2,r2,128
  800ee8:	10bfe004 	addi	r2,r2,-128
  800eec:	10000226 	beq	r2,zero,800ef8 <tick+0x524>
         AVI_stop =(AVI_stop||1);
  800ef0:	00800044 	movi	r2,1
  800ef4:	d0a74145 	stb	r2,-25339(gp)
      }
      g57 =(PRE_g56);
  800ef8:	d0a73f03 	ldbu	r2,-25348(gp)
  800efc:	d0a76b85 	stb	r2,-25170(gp)
      g57b = g57;
  800f00:	d0a76b83 	ldbu	r2,-25170(gp)
  800f04:	d0a765c5 	stb	r2,-25193(gp)
      _cg57 = _Pacemaker1_local__pre_FilteredVSense16;
  800f08:	d0a76203 	ldbu	r2,-25208(gp)
  800f0c:	d0a77145 	stb	r2,-25147(gp)
      g58 =(g57b&&_cg57);
  800f10:	d0a765c3 	ldbu	r2,-25193(gp)
  800f14:	10803fcc 	andi	r2,r2,255
  800f18:	1080201c 	xori	r2,r2,128
  800f1c:	10bfe004 	addi	r2,r2,-128
  800f20:	10000726 	beq	r2,zero,800f40 <tick+0x56c>
  800f24:	d0a77143 	ldbu	r2,-25147(gp)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	10000226 	beq	r2,zero,800f40 <tick+0x56c>
  800f38:	00800044 	movi	r2,1
  800f3c:	00000106 	br	800f44 <tick+0x570>
  800f40:	0005883a 	mov	r2,zero
  800f44:	d0a77105 	stb	r2,-25148(gp)
      if(g58){
  800f48:	d0a77103 	ldbu	r2,-25148(gp)
  800f4c:	10803fcc 	andi	r2,r2,255
  800f50:	1080201c 	xori	r2,r2,128
  800f54:	10bfe004 	addi	r2,r2,-128
  800f58:	10000226 	beq	r2,zero,800f64 <tick+0x590>
         AVI_stop =(AVI_stop||1);
  800f5c:	00800044 	movi	r2,1
  800f60:	d0a74145 	stb	r2,-25339(gp)
      }
      g12 =(PRE_g11);
  800f64:	d0a75d83 	ldbu	r2,-25226(gp)
  800f68:	d0a74445 	stb	r2,-25327(gp)
      g12b = g12;
  800f6c:	d0a74443 	ldbu	r2,-25327(gp)
  800f70:	d0a77785 	stb	r2,-25122(gp)
      _cg12 = AVI_stop;
  800f74:	d0a74143 	ldbu	r2,-25339(gp)
  800f78:	d0a74045 	stb	r2,-25343(gp)
      g13 =(g12b&&_cg12);
  800f7c:	d0a77783 	ldbu	r2,-25122(gp)
  800f80:	10803fcc 	andi	r2,r2,255
  800f84:	1080201c 	xori	r2,r2,128
  800f88:	10bfe004 	addi	r2,r2,-128
  800f8c:	10000726 	beq	r2,zero,800fac <tick+0x5d8>
  800f90:	d0a74043 	ldbu	r2,-25343(gp)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080201c 	xori	r2,r2,128
  800f9c:	10bfe004 	addi	r2,r2,-128
  800fa0:	10000226 	beq	r2,zero,800fac <tick+0x5d8>
  800fa4:	00800044 	movi	r2,1
  800fa8:	00000106 	br	800fb0 <tick+0x5dc>
  800fac:	0005883a 	mov	r2,zero
  800fb0:	d0a76a45 	stb	r2,-25175(gp)
      if(g13){
  800fb4:	d0a76a43 	ldbu	r2,-25175(gp)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	10000226 	beq	r2,zero,800fd0 <tick+0x5fc>
         VRP_start =(VRP_start||1);
  800fc8:	00800044 	movi	r2,1
  800fcc:	d0a75805 	stb	r2,-25248(gp)
      }
      g4 =(PRE_g3);
  800fd0:	d0a73d03 	ldbu	r2,-25356(gp)
  800fd4:	d0a73685 	stb	r2,-25382(gp)
      g4b = g4;
  800fd8:	d0a73683 	ldbu	r2,-25382(gp)
  800fdc:	d0a77b45 	stb	r2,-25107(gp)
      _cg4 = AVI_stop;
  800fe0:	d0a74143 	ldbu	r2,-25339(gp)
  800fe4:	d0a77905 	stb	r2,-25116(gp)
      g8 =(g4b&&(!(_cg4)));
  800fe8:	d0a77b43 	ldbu	r2,-25107(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	10000726 	beq	r2,zero,801018 <tick+0x644>
  800ffc:	d0a77903 	ldbu	r2,-25116(gp)
  801000:	10803fcc 	andi	r2,r2,255
  801004:	1080201c 	xori	r2,r2,128
  801008:	10bfe004 	addi	r2,r2,-128
  80100c:	1000021e 	bne	r2,zero,801018 <tick+0x644>
  801010:	00800044 	movi	r2,1
  801014:	00000106 	br	80101c <tick+0x648>
  801018:	0005883a 	mov	r2,zero
  80101c:	d0a76b45 	stb	r2,-25171(gp)
      _cg8 = VRP_start;
  801020:	d0a75803 	ldbu	r2,-25248(gp)
  801024:	d0a74085 	stb	r2,-25342(gp)
      g6 =(PRE_g5);
  801028:	d0a776c3 	ldbu	r2,-25125(gp)
  80102c:	d0a76cc5 	stb	r2,-25165(gp)
      _cg6 = VRPTO;
  801030:	d0a75d43 	ldbu	r2,-25227(gp)
  801034:	d0a75485 	stb	r2,-25262(gp)
      g7 =(g6&&_cg6);
  801038:	d0a76cc3 	ldbu	r2,-25165(gp)
  80103c:	10803fcc 	andi	r2,r2,255
  801040:	1080201c 	xori	r2,r2,128
  801044:	10bfe004 	addi	r2,r2,-128
  801048:	10000726 	beq	r2,zero,801068 <tick+0x694>
  80104c:	d0a75483 	ldbu	r2,-25262(gp)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	10000226 	beq	r2,zero,801068 <tick+0x694>
  801060:	00800044 	movi	r2,1
  801064:	00000106 	br	80106c <tick+0x698>
  801068:	0005883a 	mov	r2,zero
  80106c:	d0a75045 	stb	r2,-25279(gp)
      if(g7){
  801070:	d0a75043 	ldbu	r2,-25279(gp)
  801074:	10803fcc 	andi	r2,r2,255
  801078:	1080201c 	xori	r2,r2,128
  80107c:	10bfe004 	addi	r2,r2,-128
  801080:	10000226 	beq	r2,zero,80108c <tick+0x6b8>
         _Pacemaker1_local_VRP_ex =(_Pacemaker1_local_VRP_ex||1);
  801084:	00800044 	movi	r2,1
  801088:	d0a74b05 	stb	r2,-25300(gp)
      }
      g3 =((g8&&(!(_cg8)))||g7||g2);
  80108c:	d0a76b43 	ldbu	r2,-25171(gp)
  801090:	10803fcc 	andi	r2,r2,255
  801094:	1080201c 	xori	r2,r2,128
  801098:	10bfe004 	addi	r2,r2,-128
  80109c:	10000526 	beq	r2,zero,8010b4 <tick+0x6e0>
  8010a0:	d0a74083 	ldbu	r2,-25342(gp)
  8010a4:	10803fcc 	andi	r2,r2,255
  8010a8:	1080201c 	xori	r2,r2,128
  8010ac:	10bfe004 	addi	r2,r2,-128
  8010b0:	10000a26 	beq	r2,zero,8010dc <tick+0x708>
  8010b4:	d0a75043 	ldbu	r2,-25279(gp)
  8010b8:	10803fcc 	andi	r2,r2,255
  8010bc:	1080201c 	xori	r2,r2,128
  8010c0:	10bfe004 	addi	r2,r2,-128
  8010c4:	1000051e 	bne	r2,zero,8010dc <tick+0x708>
  8010c8:	d0a75003 	ldbu	r2,-25280(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080201c 	xori	r2,r2,128
  8010d4:	10bfe004 	addi	r2,r2,-128
  8010d8:	10000226 	beq	r2,zero,8010e4 <tick+0x710>
  8010dc:	00800044 	movi	r2,1
  8010e0:	00000106 	br	8010e8 <tick+0x714>
  8010e4:	0005883a 	mov	r2,zero
  8010e8:	d0a739c5 	stb	r2,-25369(gp)
      g5 =((g4b&&_cg4)||(g8&&_cg8)||(g6&&(!(_cg6))));
  8010ec:	d0a77b43 	ldbu	r2,-25107(gp)
  8010f0:	10803fcc 	andi	r2,r2,255
  8010f4:	1080201c 	xori	r2,r2,128
  8010f8:	10bfe004 	addi	r2,r2,-128
  8010fc:	10000526 	beq	r2,zero,801114 <tick+0x740>
  801100:	d0a77903 	ldbu	r2,-25116(gp)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	1000141e 	bne	r2,zero,801164 <tick+0x790>
  801114:	d0a76b43 	ldbu	r2,-25171(gp)
  801118:	10803fcc 	andi	r2,r2,255
  80111c:	1080201c 	xori	r2,r2,128
  801120:	10bfe004 	addi	r2,r2,-128
  801124:	10000526 	beq	r2,zero,80113c <tick+0x768>
  801128:	d0a74083 	ldbu	r2,-25342(gp)
  80112c:	10803fcc 	andi	r2,r2,255
  801130:	1080201c 	xori	r2,r2,128
  801134:	10bfe004 	addi	r2,r2,-128
  801138:	10000a1e 	bne	r2,zero,801164 <tick+0x790>
  80113c:	d0a76cc3 	ldbu	r2,-25165(gp)
  801140:	10803fcc 	andi	r2,r2,255
  801144:	1080201c 	xori	r2,r2,128
  801148:	10bfe004 	addi	r2,r2,-128
  80114c:	10000726 	beq	r2,zero,80116c <tick+0x798>
  801150:	d0a75483 	ldbu	r2,-25262(gp)
  801154:	10803fcc 	andi	r2,r2,255
  801158:	1080201c 	xori	r2,r2,128
  80115c:	10bfe004 	addi	r2,r2,-128
  801160:	1000021e 	bne	r2,zero,80116c <tick+0x798>
  801164:	00800044 	movi	r2,1
  801168:	00000106 	br	801170 <tick+0x79c>
  80116c:	0005883a 	mov	r2,zero
  801170:	d0a74ec5 	stb	r2,-25285(gp)
      g10 = g1;
  801174:	d0a74203 	ldbu	r2,-25336(gp)
  801178:	d0a77bc5 	stb	r2,-25105(gp)
      g16 =(g12b&&(!(_cg12)));
  80117c:	d0a77783 	ldbu	r2,-25122(gp)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	10000726 	beq	r2,zero,8011ac <tick+0x7d8>
  801190:	d0a74043 	ldbu	r2,-25343(gp)
  801194:	10803fcc 	andi	r2,r2,255
  801198:	1080201c 	xori	r2,r2,128
  80119c:	10bfe004 	addi	r2,r2,-128
  8011a0:	1000021e 	bne	r2,zero,8011ac <tick+0x7d8>
  8011a4:	00800044 	movi	r2,1
  8011a8:	00000106 	br	8011b0 <tick+0x7dc>
  8011ac:	0005883a 	mov	r2,zero
  8011b0:	d0a77045 	stb	r2,-25151(gp)
      _cg16 = VSense;
  8011b4:	d0a75703 	ldbu	r2,-25252(gp)
  8011b8:	d0a750c5 	stb	r2,-25277(gp)
      g17 =(g16&&_cg16);
  8011bc:	d0a77043 	ldbu	r2,-25151(gp)
  8011c0:	10803fcc 	andi	r2,r2,255
  8011c4:	1080201c 	xori	r2,r2,128
  8011c8:	10bfe004 	addi	r2,r2,-128
  8011cc:	10000726 	beq	r2,zero,8011ec <tick+0x818>
  8011d0:	d0a750c3 	ldbu	r2,-25277(gp)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000226 	beq	r2,zero,8011ec <tick+0x818>
  8011e4:	00800044 	movi	r2,1
  8011e8:	00000106 	br	8011f0 <tick+0x81c>
  8011ec:	0005883a 	mov	r2,zero
  8011f0:	d0a745c5 	stb	r2,-25321(gp)
      if(g17){
  8011f4:	d0a745c3 	ldbu	r2,-25321(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	10000226 	beq	r2,zero,801210 <tick+0x83c>
         _Pacemaker1_local_FilteredVSense =(_Pacemaker1_local_FilteredVSense||1);
  801208:	00800044 	movi	r2,1
  80120c:	d0a755c5 	stb	r2,-25257(gp)
      }
      g15 =(PRE_g14);
  801210:	d0a76383 	ldbu	r2,-25202(gp)
  801214:	d0a75b45 	stb	r2,-25235(gp)
      g15b = g15;
  801218:	d0a75b43 	ldbu	r2,-25235(gp)
  80121c:	d0a74a05 	stb	r2,-25304(gp)
      _cg15 = _Pacemaker1_local_VRP_ex;
  801220:	d0a74b03 	ldbu	r2,-25300(gp)
  801224:	d0a73ec5 	stb	r2,-25349(gp)
      g11 =(g17||g10||(g15b&&_cg15)||(g16&&(!(_cg16))));
  801228:	d0a745c3 	ldbu	r2,-25321(gp)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	1000191e 	bne	r2,zero,8012a0 <tick+0x8cc>
  80123c:	d0a77bc3 	ldbu	r2,-25105(gp)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1080201c 	xori	r2,r2,128
  801248:	10bfe004 	addi	r2,r2,-128
  80124c:	1000141e 	bne	r2,zero,8012a0 <tick+0x8cc>
  801250:	d0a74a03 	ldbu	r2,-25304(gp)
  801254:	10803fcc 	andi	r2,r2,255
  801258:	1080201c 	xori	r2,r2,128
  80125c:	10bfe004 	addi	r2,r2,-128
  801260:	10000526 	beq	r2,zero,801278 <tick+0x8a4>
  801264:	d0a73ec3 	ldbu	r2,-25349(gp)
  801268:	10803fcc 	andi	r2,r2,255
  80126c:	1080201c 	xori	r2,r2,128
  801270:	10bfe004 	addi	r2,r2,-128
  801274:	10000a1e 	bne	r2,zero,8012a0 <tick+0x8cc>
  801278:	d0a77043 	ldbu	r2,-25151(gp)
  80127c:	10803fcc 	andi	r2,r2,255
  801280:	1080201c 	xori	r2,r2,128
  801284:	10bfe004 	addi	r2,r2,-128
  801288:	10000726 	beq	r2,zero,8012a8 <tick+0x8d4>
  80128c:	d0a750c3 	ldbu	r2,-25277(gp)
  801290:	10803fcc 	andi	r2,r2,255
  801294:	1080201c 	xori	r2,r2,128
  801298:	10bfe004 	addi	r2,r2,-128
  80129c:	1000021e 	bne	r2,zero,8012a8 <tick+0x8d4>
  8012a0:	00800044 	movi	r2,1
  8012a4:	00000106 	br	8012ac <tick+0x8d8>
  8012a8:	0005883a 	mov	r2,zero
  8012ac:	d0a77245 	stb	r2,-25143(gp)
      g14 =((g15b&&(!(_cg15)))||g13);
  8012b0:	d0a74a03 	ldbu	r2,-25304(gp)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	10000526 	beq	r2,zero,8012d8 <tick+0x904>
  8012c4:	d0a73ec3 	ldbu	r2,-25349(gp)
  8012c8:	10803fcc 	andi	r2,r2,255
  8012cc:	1080201c 	xori	r2,r2,128
  8012d0:	10bfe004 	addi	r2,r2,-128
  8012d4:	10000526 	beq	r2,zero,8012ec <tick+0x918>
  8012d8:	d0a76a43 	ldbu	r2,-25175(gp)
  8012dc:	10803fcc 	andi	r2,r2,255
  8012e0:	1080201c 	xori	r2,r2,128
  8012e4:	10bfe004 	addi	r2,r2,-128
  8012e8:	10000226 	beq	r2,zero,8012f4 <tick+0x920>
  8012ec:	00800044 	movi	r2,1
  8012f0:	00000106 	br	8012f8 <tick+0x924>
  8012f4:	0005883a 	mov	r2,zero
  8012f8:	d0a75445 	stb	r2,-25263(gp)
      g19 = g1;
  8012fc:	d0a74203 	ldbu	r2,-25336(gp)
  801300:	d0a73705 	stb	r2,-25380(gp)
      g30 =(PRE_g29);
  801304:	d0a73d83 	ldbu	r2,-25354(gp)
  801308:	d0a76f45 	stb	r2,-25155(gp)
      g30b = g30;
  80130c:	d0a76f43 	ldbu	r2,-25155(gp)
  801310:	d0a74c85 	stb	r2,-25294(gp)
      _cg30 = _Pacemaker1_local_FilteredVSense;
  801314:	d0a755c3 	ldbu	r2,-25257(gp)
  801318:	d0a77005 	stb	r2,-25152(gp)
      g42 =(g30b&&(!(_cg30)));
  80131c:	d0a74c83 	ldbu	r2,-25294(gp)
  801320:	10803fcc 	andi	r2,r2,255
  801324:	1080201c 	xori	r2,r2,128
  801328:	10bfe004 	addi	r2,r2,-128
  80132c:	10000726 	beq	r2,zero,80134c <tick+0x978>
  801330:	d0a77003 	ldbu	r2,-25152(gp)
  801334:	10803fcc 	andi	r2,r2,255
  801338:	1080201c 	xori	r2,r2,128
  80133c:	10bfe004 	addi	r2,r2,-128
  801340:	1000021e 	bne	r2,zero,80134c <tick+0x978>
  801344:	00800044 	movi	r2,1
  801348:	00000106 	br	801350 <tick+0x97c>
  80134c:	0005883a 	mov	r2,zero
  801350:	d0a73ac5 	stb	r2,-25365(gp)
      _cg42 = VPace;
  801354:	d0a77743 	ldbu	r2,-25123(gp)
  801358:	d0a73445 	stb	r2,-25391(gp)
      g31 =((g30b&&_cg30)||(g42&&_cg42));
  80135c:	d0a74c83 	ldbu	r2,-25294(gp)
  801360:	10803fcc 	andi	r2,r2,255
  801364:	1080201c 	xori	r2,r2,128
  801368:	10bfe004 	addi	r2,r2,-128
  80136c:	10000526 	beq	r2,zero,801384 <tick+0x9b0>
  801370:	d0a77003 	ldbu	r2,-25152(gp)
  801374:	10803fcc 	andi	r2,r2,255
  801378:	1080201c 	xori	r2,r2,128
  80137c:	10bfe004 	addi	r2,r2,-128
  801380:	10000a1e 	bne	r2,zero,8013ac <tick+0x9d8>
  801384:	d0a73ac3 	ldbu	r2,-25365(gp)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	10000726 	beq	r2,zero,8013b4 <tick+0x9e0>
  801398:	d0a73443 	ldbu	r2,-25391(gp)
  80139c:	10803fcc 	andi	r2,r2,255
  8013a0:	1080201c 	xori	r2,r2,128
  8013a4:	10bfe004 	addi	r2,r2,-128
  8013a8:	10000226 	beq	r2,zero,8013b4 <tick+0x9e0>
  8013ac:	00800044 	movi	r2,1
  8013b0:	00000106 	br	8013b8 <tick+0x9e4>
  8013b4:	0005883a 	mov	r2,zero
  8013b8:	d0a74705 	stb	r2,-25316(gp)
      if(g31){
  8013bc:	d0a74703 	ldbu	r2,-25316(gp)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000226 	beq	r2,zero,8013d8 <tick+0xa04>
         LRI_start =(LRI_start||1);
  8013d0:	00800044 	movi	r2,1
  8013d4:	d0a75cc5 	stb	r2,-25229(gp)
      }
      g38 =(PRE_g37);
  8013d8:	d0a77dc3 	ldbu	r2,-25097(gp)
  8013dc:	d0a74b85 	stb	r2,-25298(gp)
      g38b = g38;
  8013e0:	d0a74b83 	ldbu	r2,-25298(gp)
  8013e4:	d0a735c5 	stb	r2,-25385(gp)
      if(g38b){
  8013e8:	d0a735c3 	ldbu	r2,-25385(gp)
  8013ec:	10803fcc 	andi	r2,r2,255
  8013f0:	1080201c 	xori	r2,r2,128
  8013f4:	10bfe004 	addi	r2,r2,-128
  8013f8:	10000226 	beq	r2,zero,801404 <tick+0xa30>
         LRI_start =(LRI_start||1);
  8013fc:	00800044 	movi	r2,1
  801400:	d0a75cc5 	stb	r2,-25229(gp)
      }
      g21 =(PRE_g20);
  801404:	d0a74103 	ldbu	r2,-25340(gp)
  801408:	d0a74e05 	stb	r2,-25288(gp)
      g21b = g21;
  80140c:	d0a74e03 	ldbu	r2,-25288(gp)
  801410:	d0a76105 	stb	r2,-25212(gp)
      _cg21 = AVI_stop;
  801414:	d0a74143 	ldbu	r2,-25339(gp)
  801418:	d0a74c45 	stb	r2,-25295(gp)
      g26 =(g21b&&(!(_cg21)));
  80141c:	d0a76103 	ldbu	r2,-25212(gp)
  801420:	10803fcc 	andi	r2,r2,255
  801424:	1080201c 	xori	r2,r2,128
  801428:	10bfe004 	addi	r2,r2,-128
  80142c:	10000726 	beq	r2,zero,80144c <tick+0xa78>
  801430:	d0a74c43 	ldbu	r2,-25295(gp)
  801434:	10803fcc 	andi	r2,r2,255
  801438:	1080201c 	xori	r2,r2,128
  80143c:	10bfe004 	addi	r2,r2,-128
  801440:	1000021e 	bne	r2,zero,80144c <tick+0xa78>
  801444:	00800044 	movi	r2,1
  801448:	00000106 	br	801450 <tick+0xa7c>
  80144c:	0005883a 	mov	r2,zero
  801450:	d0a77d05 	stb	r2,-25100(gp)
      _cg26 = LRI_start;
  801454:	d0a75cc3 	ldbu	r2,-25229(gp)
  801458:	d0a74905 	stb	r2,-25308(gp)
      g20 =(g19||(g26&&(!(_cg26)))||g25||(g23b&&_cg23));
  80145c:	d0a73703 	ldbu	r2,-25380(gp)
  801460:	10803fcc 	andi	r2,r2,255
  801464:	1080201c 	xori	r2,r2,128
  801468:	10bfe004 	addi	r2,r2,-128
  80146c:	1000191e 	bne	r2,zero,8014d4 <tick+0xb00>
  801470:	d0a77d03 	ldbu	r2,-25100(gp)
  801474:	10803fcc 	andi	r2,r2,255
  801478:	1080201c 	xori	r2,r2,128
  80147c:	10bfe004 	addi	r2,r2,-128
  801480:	10000526 	beq	r2,zero,801498 <tick+0xac4>
  801484:	d0a74903 	ldbu	r2,-25308(gp)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000f26 	beq	r2,zero,8014d4 <tick+0xb00>
  801498:	d0a771c3 	ldbu	r2,-25145(gp)
  80149c:	10803fcc 	andi	r2,r2,255
  8014a0:	1080201c 	xori	r2,r2,128
  8014a4:	10bfe004 	addi	r2,r2,-128
  8014a8:	10000a1e 	bne	r2,zero,8014d4 <tick+0xb00>
  8014ac:	d0a76003 	ldbu	r2,-25216(gp)
  8014b0:	10803fcc 	andi	r2,r2,255
  8014b4:	1080201c 	xori	r2,r2,128
  8014b8:	10bfe004 	addi	r2,r2,-128
  8014bc:	10000726 	beq	r2,zero,8014dc <tick+0xb08>
  8014c0:	d0a77583 	ldbu	r2,-25130(gp)
  8014c4:	10803fcc 	andi	r2,r2,255
  8014c8:	1080201c 	xori	r2,r2,128
  8014cc:	10bfe004 	addi	r2,r2,-128
  8014d0:	10000226 	beq	r2,zero,8014dc <tick+0xb08>
  8014d4:	00800044 	movi	r2,1
  8014d8:	00000106 	br	8014e0 <tick+0xb0c>
  8014dc:	0005883a 	mov	r2,zero
  8014e0:	d0a75ec5 	stb	r2,-25221(gp)
      g22 =((g21b&&_cg21)||(g26&&_cg26)||(g24&&(!(_cg24))));
  8014e4:	d0a76103 	ldbu	r2,-25212(gp)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	10000526 	beq	r2,zero,80150c <tick+0xb38>
  8014f8:	d0a74c43 	ldbu	r2,-25295(gp)
  8014fc:	10803fcc 	andi	r2,r2,255
  801500:	1080201c 	xori	r2,r2,128
  801504:	10bfe004 	addi	r2,r2,-128
  801508:	1000141e 	bne	r2,zero,80155c <tick+0xb88>
  80150c:	d0a77d03 	ldbu	r2,-25100(gp)
  801510:	10803fcc 	andi	r2,r2,255
  801514:	1080201c 	xori	r2,r2,128
  801518:	10bfe004 	addi	r2,r2,-128
  80151c:	10000526 	beq	r2,zero,801534 <tick+0xb60>
  801520:	d0a74903 	ldbu	r2,-25308(gp)
  801524:	10803fcc 	andi	r2,r2,255
  801528:	1080201c 	xori	r2,r2,128
  80152c:	10bfe004 	addi	r2,r2,-128
  801530:	10000a1e 	bne	r2,zero,80155c <tick+0xb88>
  801534:	d0a77983 	ldbu	r2,-25114(gp)
  801538:	10803fcc 	andi	r2,r2,255
  80153c:	1080201c 	xori	r2,r2,128
  801540:	10bfe004 	addi	r2,r2,-128
  801544:	10000726 	beq	r2,zero,801564 <tick+0xb90>
  801548:	d0a770c3 	ldbu	r2,-25149(gp)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	1080201c 	xori	r2,r2,128
  801554:	10bfe004 	addi	r2,r2,-128
  801558:	1000021e 	bne	r2,zero,801564 <tick+0xb90>
  80155c:	00800044 	movi	r2,1
  801560:	00000106 	br	801568 <tick+0xb94>
  801564:	0005883a 	mov	r2,zero
  801568:	d0a772c5 	stb	r2,-25141(gp)
      g28 = g1;
  80156c:	d0a74203 	ldbu	r2,-25336(gp)
  801570:	d0a77305 	stb	r2,-25140(gp)
      g29 =((g42&&(!(_cg42)))||g28);
  801574:	d0a73ac3 	ldbu	r2,-25365(gp)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	10000526 	beq	r2,zero,80159c <tick+0xbc8>
  801588:	d0a73443 	ldbu	r2,-25391(gp)
  80158c:	10803fcc 	andi	r2,r2,255
  801590:	1080201c 	xori	r2,r2,128
  801594:	10bfe004 	addi	r2,r2,-128
  801598:	10000526 	beq	r2,zero,8015b0 <tick+0xbdc>
  80159c:	d0a77303 	ldbu	r2,-25140(gp)
  8015a0:	10803fcc 	andi	r2,r2,255
  8015a4:	1080201c 	xori	r2,r2,128
  8015a8:	10bfe004 	addi	r2,r2,-128
  8015ac:	10000226 	beq	r2,zero,8015b8 <tick+0xbe4>
  8015b0:	00800044 	movi	r2,1
  8015b4:	00000106 	br	8015bc <tick+0xbe8>
  8015b8:	0005883a 	mov	r2,zero
  8015bc:	d0a778c5 	stb	r2,-25117(gp)
      g33 =(PRE_g32);
  8015c0:	d0a73f43 	ldbu	r2,-25347(gp)
  8015c4:	d0a757c5 	stb	r2,-25249(gp)
      g33b = g33;
  8015c8:	d0a757c3 	ldbu	r2,-25249(gp)
  8015cc:	d0a73985 	stb	r2,-25370(gp)
      _cg33 = _Pacemaker1_local_VRP_ex;
  8015d0:	d0a74b03 	ldbu	r2,-25300(gp)
  8015d4:	d0a74385 	stb	r2,-25330(gp)
      g32 =((g33b&&(!(_cg33)))||g38b||g31);
  8015d8:	d0a73983 	ldbu	r2,-25370(gp)
  8015dc:	10803fcc 	andi	r2,r2,255
  8015e0:	1080201c 	xori	r2,r2,128
  8015e4:	10bfe004 	addi	r2,r2,-128
  8015e8:	10000526 	beq	r2,zero,801600 <tick+0xc2c>
  8015ec:	d0a74383 	ldbu	r2,-25330(gp)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	10000a26 	beq	r2,zero,801628 <tick+0xc54>
  801600:	d0a735c3 	ldbu	r2,-25385(gp)
  801604:	10803fcc 	andi	r2,r2,255
  801608:	1080201c 	xori	r2,r2,128
  80160c:	10bfe004 	addi	r2,r2,-128
  801610:	1000051e 	bne	r2,zero,801628 <tick+0xc54>
  801614:	d0a74703 	ldbu	r2,-25316(gp)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	10000226 	beq	r2,zero,801630 <tick+0xc5c>
  801628:	00800044 	movi	r2,1
  80162c:	00000106 	br	801634 <tick+0xc60>
  801630:	0005883a 	mov	r2,zero
  801634:	d0a774c5 	stb	r2,-25133(gp)
      g34 =((g33b&&_cg33)||(g40&&(!(_cg40))));
  801638:	d0a73983 	ldbu	r2,-25370(gp)
  80163c:	10803fcc 	andi	r2,r2,255
  801640:	1080201c 	xori	r2,r2,128
  801644:	10bfe004 	addi	r2,r2,-128
  801648:	10000526 	beq	r2,zero,801660 <tick+0xc8c>
  80164c:	d0a74383 	ldbu	r2,-25330(gp)
  801650:	10803fcc 	andi	r2,r2,255
  801654:	1080201c 	xori	r2,r2,128
  801658:	10bfe004 	addi	r2,r2,-128
  80165c:	10000a1e 	bne	r2,zero,801688 <tick+0xcb4>
  801660:	d0a73503 	ldbu	r2,-25388(gp)
  801664:	10803fcc 	andi	r2,r2,255
  801668:	1080201c 	xori	r2,r2,128
  80166c:	10bfe004 	addi	r2,r2,-128
  801670:	10000726 	beq	r2,zero,801690 <tick+0xcbc>
  801674:	d0a76f83 	ldbu	r2,-25154(gp)
  801678:	10803fcc 	andi	r2,r2,255
  80167c:	1080201c 	xori	r2,r2,128
  801680:	10bfe004 	addi	r2,r2,-128
  801684:	1000021e 	bne	r2,zero,801690 <tick+0xcbc>
  801688:	00800044 	movi	r2,1
  80168c:	00000106 	br	801694 <tick+0xcc0>
  801690:	0005883a 	mov	r2,zero
  801694:	d0a74e85 	stb	r2,-25286(gp)
      g37 =(g36||g41);
  801698:	d0a763c3 	ldbu	r2,-25201(gp)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1080201c 	xori	r2,r2,128
  8016a4:	10bfe004 	addi	r2,r2,-128
  8016a8:	1000051e 	bne	r2,zero,8016c0 <tick+0xcec>
  8016ac:	d0a74883 	ldbu	r2,-25310(gp)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	1080201c 	xori	r2,r2,128
  8016b8:	10bfe004 	addi	r2,r2,-128
  8016bc:	10000226 	beq	r2,zero,8016c8 <tick+0xcf4>
  8016c0:	00800044 	movi	r2,1
  8016c4:	00000106 	br	8016cc <tick+0xcf8>
  8016c8:	0005883a 	mov	r2,zero
  8016cc:	d0a74745 	stb	r2,-25315(gp)
      g44 = g1;
  8016d0:	d0a74203 	ldbu	r2,-25336(gp)
  8016d4:	d0a73fc5 	stb	r2,-25345(gp)
      g48 =(PRE_g47);
  8016d8:	d0a760c3 	ldbu	r2,-25213(gp)
  8016dc:	d0a74ac5 	stb	r2,-25301(gp)
      g48b = g48;
  8016e0:	d0a74ac3 	ldbu	r2,-25301(gp)
  8016e4:	d0a77c05 	stb	r2,-25104(gp)
      _cg48 = AVI_stop;
  8016e8:	d0a74143 	ldbu	r2,-25339(gp)
  8016ec:	d0a75385 	stb	r2,-25266(gp)
      g49 =(g48b&&(!(_cg48)));
  8016f0:	d0a77c03 	ldbu	r2,-25104(gp)
  8016f4:	10803fcc 	andi	r2,r2,255
  8016f8:	1080201c 	xori	r2,r2,128
  8016fc:	10bfe004 	addi	r2,r2,-128
  801700:	10000726 	beq	r2,zero,801720 <tick+0xd4c>
  801704:	d0a75383 	ldbu	r2,-25266(gp)
  801708:	10803fcc 	andi	r2,r2,255
  80170c:	1080201c 	xori	r2,r2,128
  801710:	10bfe004 	addi	r2,r2,-128
  801714:	1000021e 	bne	r2,zero,801720 <tick+0xd4c>
  801718:	00800044 	movi	r2,1
  80171c:	00000106 	br	801724 <tick+0xd50>
  801720:	0005883a 	mov	r2,zero
  801724:	d0a74f85 	stb	r2,-25282(gp)
      _cg49 = AVITO;
  801728:	d0a75f03 	ldbu	r2,-25220(gp)
  80172c:	d0a77805 	stb	r2,-25120(gp)
      g50 =(g49&&_cg49);
  801730:	d0a74f83 	ldbu	r2,-25282(gp)
  801734:	10803fcc 	andi	r2,r2,255
  801738:	1080201c 	xori	r2,r2,128
  80173c:	10bfe004 	addi	r2,r2,-128
  801740:	10000726 	beq	r2,zero,801760 <tick+0xd8c>
  801744:	d0a77803 	ldbu	r2,-25120(gp)
  801748:	10803fcc 	andi	r2,r2,255
  80174c:	1080201c 	xori	r2,r2,128
  801750:	10bfe004 	addi	r2,r2,-128
  801754:	10000226 	beq	r2,zero,801760 <tick+0xd8c>
  801758:	00800044 	movi	r2,1
  80175c:	00000106 	br	801764 <tick+0xd90>
  801760:	0005883a 	mov	r2,zero
  801764:	d0a766c5 	stb	r2,-25189(gp)
      if(g50){
  801768:	d0a766c3 	ldbu	r2,-25189(gp)
  80176c:	10803fcc 	andi	r2,r2,255
  801770:	1080201c 	xori	r2,r2,128
  801774:	10bfe004 	addi	r2,r2,-128
  801778:	10000226 	beq	r2,zero,801784 <tick+0xdb0>
         _Pacemaker1_local_AVI_ex =(_Pacemaker1_local_AVI_ex||1);
  80177c:	00800044 	movi	r2,1
  801780:	d0a762c5 	stb	r2,-25205(gp)
      }
      g78 =(PRE_g77);
  801784:	d0a74603 	ldbu	r2,-25320(gp)
  801788:	d0a75785 	stb	r2,-25250(gp)
      g78b = g78;
  80178c:	d0a75783 	ldbu	r2,-25250(gp)
  801790:	d0a73945 	stb	r2,-25371(gp)
      _cg78 = AVI_stop;
  801794:	d0a74143 	ldbu	r2,-25339(gp)
  801798:	d0a768c5 	stb	r2,-25181(gp)
      g82 =(g78b&&(!(_cg78)));
  80179c:	d0a73943 	ldbu	r2,-25371(gp)
  8017a0:	10803fcc 	andi	r2,r2,255
  8017a4:	1080201c 	xori	r2,r2,128
  8017a8:	10bfe004 	addi	r2,r2,-128
  8017ac:	10000726 	beq	r2,zero,8017cc <tick+0xdf8>
  8017b0:	d0a768c3 	ldbu	r2,-25181(gp)
  8017b4:	10803fcc 	andi	r2,r2,255
  8017b8:	1080201c 	xori	r2,r2,128
  8017bc:	10bfe004 	addi	r2,r2,-128
  8017c0:	1000021e 	bne	r2,zero,8017cc <tick+0xdf8>
  8017c4:	00800044 	movi	r2,1
  8017c8:	00000106 	br	8017d0 <tick+0xdfc>
  8017cc:	0005883a 	mov	r2,zero
  8017d0:	d0a74345 	stb	r2,-25331(gp)
      _cg82 = ASense;
  8017d4:	d0a749c3 	ldbu	r2,-25305(gp)
  8017d8:	d0a74d05 	stb	r2,-25292(gp)
      g83 =(g82&&_cg82);
  8017dc:	d0a74343 	ldbu	r2,-25331(gp)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10000726 	beq	r2,zero,80180c <tick+0xe38>
  8017f0:	d0a74d03 	ldbu	r2,-25292(gp)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	10000226 	beq	r2,zero,80180c <tick+0xe38>
  801804:	00800044 	movi	r2,1
  801808:	00000106 	br	801810 <tick+0xe3c>
  80180c:	0005883a 	mov	r2,zero
  801810:	d0a73485 	stb	r2,-25390(gp)
      if(g83){
  801814:	d0a73483 	ldbu	r2,-25390(gp)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	1080201c 	xori	r2,r2,128
  801820:	10bfe004 	addi	r2,r2,-128
  801824:	10000226 	beq	r2,zero,801830 <tick+0xe5c>
         _Pacemaker1_local_FilteredASense =(_Pacemaker1_local_FilteredASense||1);
  801828:	00800044 	movi	r2,1
  80182c:	d0a75a05 	stb	r2,-25240(gp)
      }
      g54 =(PRE_g53);
  801830:	d0a74a43 	ldbu	r2,-25303(gp)
  801834:	d0a75285 	stb	r2,-25270(gp)
      g54b = g54;
  801838:	d0a75283 	ldbu	r2,-25270(gp)
  80183c:	d0a77385 	stb	r2,-25138(gp)
      _cg54 = _Pacemaker1_local_FilteredASense;
  801840:	d0a75a03 	ldbu	r2,-25240(gp)
  801844:	d0a76ec5 	stb	r2,-25157(gp)
      g89 =(PRE_g88);
  801848:	d0a76283 	ldbu	r2,-25206(gp)
  80184c:	d0a76445 	stb	r2,-25199(gp)
      g89b = g89;
  801850:	d0a76443 	ldbu	r2,-25199(gp)
  801854:	d0a75c45 	stb	r2,-25231(gp)
      _cg89 = AEI_stop;
  801858:	d0a77a43 	ldbu	r2,-25111(gp)
  80185c:	d0a76e85 	stb	r2,-25158(gp)
      g90 =(g89b&&(!(_cg89)));
  801860:	d0a75c43 	ldbu	r2,-25231(gp)
  801864:	10803fcc 	andi	r2,r2,255
  801868:	1080201c 	xori	r2,r2,128
  80186c:	10bfe004 	addi	r2,r2,-128
  801870:	10000726 	beq	r2,zero,801890 <tick+0xebc>
  801874:	d0a76e83 	ldbu	r2,-25158(gp)
  801878:	10803fcc 	andi	r2,r2,255
  80187c:	1080201c 	xori	r2,r2,128
  801880:	10bfe004 	addi	r2,r2,-128
  801884:	1000021e 	bne	r2,zero,801890 <tick+0xebc>
  801888:	00800044 	movi	r2,1
  80188c:	00000106 	br	801894 <tick+0xec0>
  801890:	0005883a 	mov	r2,zero
  801894:	d0a75b85 	stb	r2,-25234(gp)
      _cg90 = AEITO;
  801898:	d0a77c83 	ldbu	r2,-25102(gp)
  80189c:	d0a75085 	stb	r2,-25278(gp)
      g91 =(g90&&_cg90);
  8018a0:	d0a75b83 	ldbu	r2,-25234(gp)
  8018a4:	10803fcc 	andi	r2,r2,255
  8018a8:	1080201c 	xori	r2,r2,128
  8018ac:	10bfe004 	addi	r2,r2,-128
  8018b0:	10000726 	beq	r2,zero,8018d0 <tick+0xefc>
  8018b4:	d0a75083 	ldbu	r2,-25278(gp)
  8018b8:	10803fcc 	andi	r2,r2,255
  8018bc:	1080201c 	xori	r2,r2,128
  8018c0:	10bfe004 	addi	r2,r2,-128
  8018c4:	10000226 	beq	r2,zero,8018d0 <tick+0xefc>
  8018c8:	00800044 	movi	r2,1
  8018cc:	00000106 	br	8018d4 <tick+0xf00>
  8018d0:	0005883a 	mov	r2,zero
  8018d4:	d0a73585 	stb	r2,-25386(gp)
      if(g91){
  8018d8:	d0a73583 	ldbu	r2,-25386(gp)
  8018dc:	10803fcc 	andi	r2,r2,255
  8018e0:	1080201c 	xori	r2,r2,128
  8018e4:	10bfe004 	addi	r2,r2,-128
  8018e8:	10000226 	beq	r2,zero,8018f4 <tick+0xf20>
         _Pacemaker1_local_AEI_ex =(_Pacemaker1_local_AEI_ex||1);
  8018ec:	00800044 	movi	r2,1
  8018f0:	d0a75545 	stb	r2,-25259(gp)
      }
      g98 =(PRE_g97);
  8018f4:	d0a76143 	ldbu	r2,-25211(gp)
  8018f8:	d0a76ac5 	stb	r2,-25173(gp)
      g98b = g98;
  8018fc:	d0a76ac3 	ldbu	r2,-25173(gp)
  801900:	d0a76305 	stb	r2,-25204(gp)
      _cg98 = _Pacemaker1_local_FilteredASense;
  801904:	d0a75a03 	ldbu	r2,-25240(gp)
  801908:	d0a74405 	stb	r2,-25328(gp)
      g99 =(g98b&&(!(_cg98)));
  80190c:	d0a76303 	ldbu	r2,-25204(gp)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	1080201c 	xori	r2,r2,128
  801918:	10bfe004 	addi	r2,r2,-128
  80191c:	10000726 	beq	r2,zero,80193c <tick+0xf68>
  801920:	d0a74403 	ldbu	r2,-25328(gp)
  801924:	10803fcc 	andi	r2,r2,255
  801928:	1080201c 	xori	r2,r2,128
  80192c:	10bfe004 	addi	r2,r2,-128
  801930:	1000021e 	bne	r2,zero,80193c <tick+0xf68>
  801934:	00800044 	movi	r2,1
  801938:	00000106 	br	801940 <tick+0xf6c>
  80193c:	0005883a 	mov	r2,zero
  801940:	d0a75245 	stb	r2,-25271(gp)
      _cg99 = _Pacemaker1_local_AEI_ex;
  801944:	d0a75543 	ldbu	r2,-25259(gp)
  801948:	d0a73545 	stb	r2,-25387(gp)
      g100 =(g99&&_cg99);
  80194c:	d0a75243 	ldbu	r2,-25271(gp)
  801950:	10803fcc 	andi	r2,r2,255
  801954:	1080201c 	xori	r2,r2,128
  801958:	10bfe004 	addi	r2,r2,-128
  80195c:	10000726 	beq	r2,zero,80197c <tick+0xfa8>
  801960:	d0a73543 	ldbu	r2,-25387(gp)
  801964:	10803fcc 	andi	r2,r2,255
  801968:	1080201c 	xori	r2,r2,128
  80196c:	10bfe004 	addi	r2,r2,-128
  801970:	10000226 	beq	r2,zero,80197c <tick+0xfa8>
  801974:	00800044 	movi	r2,1
  801978:	00000106 	br	801980 <tick+0xfac>
  80197c:	0005883a 	mov	r2,zero
  801980:	d0a751c5 	stb	r2,-25273(gp)
      if(g100){
  801984:	d0a751c3 	ldbu	r2,-25273(gp)
  801988:	10803fcc 	andi	r2,r2,255
  80198c:	1080201c 	xori	r2,r2,128
  801990:	10bfe004 	addi	r2,r2,-128
  801994:	10000226 	beq	r2,zero,8019a0 <tick+0xfcc>
         APace =(APace||1);
  801998:	00800044 	movi	r2,1
  80199c:	d0a73605 	stb	r2,-25384(gp)
      }
      g66 =(g54b&&(!(_cg54)));
  8019a0:	d0a77383 	ldbu	r2,-25138(gp)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	1080201c 	xori	r2,r2,128
  8019ac:	10bfe004 	addi	r2,r2,-128
  8019b0:	10000726 	beq	r2,zero,8019d0 <tick+0xffc>
  8019b4:	d0a76ec3 	ldbu	r2,-25157(gp)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	1000021e 	bne	r2,zero,8019d0 <tick+0xffc>
  8019c8:	00800044 	movi	r2,1
  8019cc:	00000106 	br	8019d4 <tick+0x1000>
  8019d0:	0005883a 	mov	r2,zero
  8019d4:	d0a752c5 	stb	r2,-25269(gp)
      _cg66 = APace;
  8019d8:	d0a73603 	ldbu	r2,-25384(gp)
  8019dc:	d0a76c45 	stb	r2,-25167(gp)
      g55 =((g54b&&_cg54)||(g66&&_cg66));
  8019e0:	d0a77383 	ldbu	r2,-25138(gp)
  8019e4:	10803fcc 	andi	r2,r2,255
  8019e8:	1080201c 	xori	r2,r2,128
  8019ec:	10bfe004 	addi	r2,r2,-128
  8019f0:	10000526 	beq	r2,zero,801a08 <tick+0x1034>
  8019f4:	d0a76ec3 	ldbu	r2,-25157(gp)
  8019f8:	10803fcc 	andi	r2,r2,255
  8019fc:	1080201c 	xori	r2,r2,128
  801a00:	10bfe004 	addi	r2,r2,-128
  801a04:	10000a1e 	bne	r2,zero,801a30 <tick+0x105c>
  801a08:	d0a752c3 	ldbu	r2,-25269(gp)
  801a0c:	10803fcc 	andi	r2,r2,255
  801a10:	1080201c 	xori	r2,r2,128
  801a14:	10bfe004 	addi	r2,r2,-128
  801a18:	10000726 	beq	r2,zero,801a38 <tick+0x1064>
  801a1c:	d0a76c43 	ldbu	r2,-25167(gp)
  801a20:	10803fcc 	andi	r2,r2,255
  801a24:	1080201c 	xori	r2,r2,128
  801a28:	10bfe004 	addi	r2,r2,-128
  801a2c:	10000226 	beq	r2,zero,801a38 <tick+0x1064>
  801a30:	00800044 	movi	r2,1
  801a34:	00000106 	br	801a3c <tick+0x1068>
  801a38:	0005883a 	mov	r2,zero
  801a3c:	d0a73785 	stb	r2,-25378(gp)
      if(g55){
  801a40:	d0a73783 	ldbu	r2,-25378(gp)
  801a44:	10803fcc 	andi	r2,r2,255
  801a48:	1080201c 	xori	r2,r2,128
  801a4c:	10bfe004 	addi	r2,r2,-128
  801a50:	10000226 	beq	r2,zero,801a5c <tick+0x1088>
         AVI_start =(AVI_start||1);
  801a54:	00800044 	movi	r2,1
  801a58:	d0a73e45 	stb	r2,-25351(gp)
      }
      g46 =(PRE_g45);
  801a5c:	d0a77643 	ldbu	r2,-25127(gp)
  801a60:	d0a76485 	stb	r2,-25198(gp)
      g46b = g46;
  801a64:	d0a76483 	ldbu	r2,-25198(gp)
  801a68:	d0a75c85 	stb	r2,-25230(gp)
      _cg46 = AVI_start;
  801a6c:	d0a73e43 	ldbu	r2,-25351(gp)
  801a70:	d0a74505 	stb	r2,-25324(gp)
      g45 =(g50||g44||(g48b&&_cg48)||(g46b&&(!(_cg46))));
  801a74:	d0a766c3 	ldbu	r2,-25189(gp)
  801a78:	10803fcc 	andi	r2,r2,255
  801a7c:	1080201c 	xori	r2,r2,128
  801a80:	10bfe004 	addi	r2,r2,-128
  801a84:	1000191e 	bne	r2,zero,801aec <tick+0x1118>
  801a88:	d0a73fc3 	ldbu	r2,-25345(gp)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	1000141e 	bne	r2,zero,801aec <tick+0x1118>
  801a9c:	d0a77c03 	ldbu	r2,-25104(gp)
  801aa0:	10803fcc 	andi	r2,r2,255
  801aa4:	1080201c 	xori	r2,r2,128
  801aa8:	10bfe004 	addi	r2,r2,-128
  801aac:	10000526 	beq	r2,zero,801ac4 <tick+0x10f0>
  801ab0:	d0a75383 	ldbu	r2,-25266(gp)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	10000a1e 	bne	r2,zero,801aec <tick+0x1118>
  801ac4:	d0a75c83 	ldbu	r2,-25230(gp)
  801ac8:	10803fcc 	andi	r2,r2,255
  801acc:	1080201c 	xori	r2,r2,128
  801ad0:	10bfe004 	addi	r2,r2,-128
  801ad4:	10000726 	beq	r2,zero,801af4 <tick+0x1120>
  801ad8:	d0a74503 	ldbu	r2,-25324(gp)
  801adc:	10803fcc 	andi	r2,r2,255
  801ae0:	1080201c 	xori	r2,r2,128
  801ae4:	10bfe004 	addi	r2,r2,-128
  801ae8:	1000021e 	bne	r2,zero,801af4 <tick+0x1120>
  801aec:	00800044 	movi	r2,1
  801af0:	00000106 	br	801af8 <tick+0x1124>
  801af4:	0005883a 	mov	r2,zero
  801af8:	d0a77545 	stb	r2,-25131(gp)
      g47 =((g49&&(!(_cg49)))||(g46b&&_cg46));
  801afc:	d0a74f83 	ldbu	r2,-25282(gp)
  801b00:	10803fcc 	andi	r2,r2,255
  801b04:	1080201c 	xori	r2,r2,128
  801b08:	10bfe004 	addi	r2,r2,-128
  801b0c:	10000526 	beq	r2,zero,801b24 <tick+0x1150>
  801b10:	d0a77803 	ldbu	r2,-25120(gp)
  801b14:	10803fcc 	andi	r2,r2,255
  801b18:	1080201c 	xori	r2,r2,128
  801b1c:	10bfe004 	addi	r2,r2,-128
  801b20:	10000a26 	beq	r2,zero,801b4c <tick+0x1178>
  801b24:	d0a75c83 	ldbu	r2,-25230(gp)
  801b28:	10803fcc 	andi	r2,r2,255
  801b2c:	1080201c 	xori	r2,r2,128
  801b30:	10bfe004 	addi	r2,r2,-128
  801b34:	10000726 	beq	r2,zero,801b54 <tick+0x1180>
  801b38:	d0a74503 	ldbu	r2,-25324(gp)
  801b3c:	10803fcc 	andi	r2,r2,255
  801b40:	1080201c 	xori	r2,r2,128
  801b44:	10bfe004 	addi	r2,r2,-128
  801b48:	10000226 	beq	r2,zero,801b54 <tick+0x1180>
  801b4c:	00800044 	movi	r2,1
  801b50:	00000106 	br	801b58 <tick+0x1184>
  801b54:	0005883a 	mov	r2,zero
  801b58:	d0a73a45 	stb	r2,-25367(gp)
      g52 = g1;
  801b5c:	d0a74203 	ldbu	r2,-25336(gp)
  801b60:	d0a744c5 	stb	r2,-25325(gp)
      g53 =(g62||(g66&&(!(_cg66)))||g52||g58);
  801b64:	d0a74803 	ldbu	r2,-25312(gp)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1000141e 	bne	r2,zero,801bc8 <tick+0x11f4>
  801b78:	d0a752c3 	ldbu	r2,-25269(gp)
  801b7c:	10803fcc 	andi	r2,r2,255
  801b80:	1080201c 	xori	r2,r2,128
  801b84:	10bfe004 	addi	r2,r2,-128
  801b88:	10000526 	beq	r2,zero,801ba0 <tick+0x11cc>
  801b8c:	d0a76c43 	ldbu	r2,-25167(gp)
  801b90:	10803fcc 	andi	r2,r2,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	10000a26 	beq	r2,zero,801bc8 <tick+0x11f4>
  801ba0:	d0a744c3 	ldbu	r2,-25325(gp)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	1000051e 	bne	r2,zero,801bc8 <tick+0x11f4>
  801bb4:	d0a77103 	ldbu	r2,-25148(gp)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	10000226 	beq	r2,zero,801bd0 <tick+0x11fc>
  801bc8:	00800044 	movi	r2,1
  801bcc:	00000106 	br	801bd4 <tick+0x1200>
  801bd0:	0005883a 	mov	r2,zero
  801bd4:	d0a76b05 	stb	r2,-25172(gp)
      g106 =(PRE_g105);
  801bd8:	d0a77883 	ldbu	r2,-25118(gp)
  801bdc:	d0a77b85 	stb	r2,-25106(gp)
      _cg106 = URITO;
  801be0:	d0a75d03 	ldbu	r2,-25228(gp)
  801be4:	d0a76585 	stb	r2,-25194(gp)
      g107 =(g106&&_cg106);
  801be8:	d0a77b83 	ldbu	r2,-25106(gp)
  801bec:	10803fcc 	andi	r2,r2,255
  801bf0:	1080201c 	xori	r2,r2,128
  801bf4:	10bfe004 	addi	r2,r2,-128
  801bf8:	10000726 	beq	r2,zero,801c18 <tick+0x1244>
  801bfc:	d0a76583 	ldbu	r2,-25194(gp)
  801c00:	10803fcc 	andi	r2,r2,255
  801c04:	1080201c 	xori	r2,r2,128
  801c08:	10bfe004 	addi	r2,r2,-128
  801c0c:	10000226 	beq	r2,zero,801c18 <tick+0x1244>
  801c10:	00800044 	movi	r2,1
  801c14:	00000106 	br	801c1c <tick+0x1248>
  801c18:	0005883a 	mov	r2,zero
  801c1c:	d0a76845 	stb	r2,-25183(gp)
      if(g107){
  801c20:	d0a76843 	ldbu	r2,-25183(gp)
  801c24:	10803fcc 	andi	r2,r2,255
  801c28:	1080201c 	xori	r2,r2,128
  801c2c:	10bfe004 	addi	r2,r2,-128
  801c30:	10000226 	beq	r2,zero,801c3c <tick+0x1268>
         URI_ex =(URI_ex||1);
  801c34:	00800044 	movi	r2,1
  801c38:	d0a75905 	stb	r2,-25244(gp)
      }
      g59 =(g57b&&(!(_cg57)));
  801c3c:	d0a765c3 	ldbu	r2,-25193(gp)
  801c40:	10803fcc 	andi	r2,r2,255
  801c44:	1080201c 	xori	r2,r2,128
  801c48:	10bfe004 	addi	r2,r2,-128
  801c4c:	10000726 	beq	r2,zero,801c6c <tick+0x1298>
  801c50:	d0a77143 	ldbu	r2,-25147(gp)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	1000021e 	bne	r2,zero,801c6c <tick+0x1298>
  801c64:	00800044 	movi	r2,1
  801c68:	00000106 	br	801c70 <tick+0x129c>
  801c6c:	0005883a 	mov	r2,zero
  801c70:	d0a75205 	stb	r2,-25272(gp)
      _cg59 = URI_ex;
  801c74:	d0a75903 	ldbu	r2,-25244(gp)
  801c78:	d0a73805 	stb	r2,-25376(gp)
      g56 =((g59&&(!(_cg59)))||g55);
  801c7c:	d0a75203 	ldbu	r2,-25272(gp)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	1080201c 	xori	r2,r2,128
  801c88:	10bfe004 	addi	r2,r2,-128
  801c8c:	10000526 	beq	r2,zero,801ca4 <tick+0x12d0>
  801c90:	d0a73803 	ldbu	r2,-25376(gp)
  801c94:	10803fcc 	andi	r2,r2,255
  801c98:	1080201c 	xori	r2,r2,128
  801c9c:	10bfe004 	addi	r2,r2,-128
  801ca0:	10000526 	beq	r2,zero,801cb8 <tick+0x12e4>
  801ca4:	d0a73783 	ldbu	r2,-25378(gp)
  801ca8:	10803fcc 	andi	r2,r2,255
  801cac:	1080201c 	xori	r2,r2,128
  801cb0:	10bfe004 	addi	r2,r2,-128
  801cb4:	10000226 	beq	r2,zero,801cc0 <tick+0x12ec>
  801cb8:	00800044 	movi	r2,1
  801cbc:	00000106 	br	801cc4 <tick+0x12f0>
  801cc0:	0005883a 	mov	r2,zero
  801cc4:	d0a75645 	stb	r2,-25255(gp)
      g60 =((g59&&_cg59)||(g64&&(!(_cg64))));
  801cc8:	d0a75203 	ldbu	r2,-25272(gp)
  801ccc:	10803fcc 	andi	r2,r2,255
  801cd0:	1080201c 	xori	r2,r2,128
  801cd4:	10bfe004 	addi	r2,r2,-128
  801cd8:	10000526 	beq	r2,zero,801cf0 <tick+0x131c>
  801cdc:	d0a73803 	ldbu	r2,-25376(gp)
  801ce0:	10803fcc 	andi	r2,r2,255
  801ce4:	1080201c 	xori	r2,r2,128
  801ce8:	10bfe004 	addi	r2,r2,-128
  801cec:	10000a1e 	bne	r2,zero,801d18 <tick+0x1344>
  801cf0:	d0a74dc3 	ldbu	r2,-25289(gp)
  801cf4:	10803fcc 	andi	r2,r2,255
  801cf8:	1080201c 	xori	r2,r2,128
  801cfc:	10bfe004 	addi	r2,r2,-128
  801d00:	10000726 	beq	r2,zero,801d20 <tick+0x134c>
  801d04:	d0a75a83 	ldbu	r2,-25238(gp)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	1000021e 	bne	r2,zero,801d20 <tick+0x134c>
  801d18:	00800044 	movi	r2,1
  801d1c:	00000106 	br	801d24 <tick+0x1350>
  801d20:	0005883a 	mov	r2,zero
  801d24:	d0a75f45 	stb	r2,-25219(gp)
      g68 = g1;
  801d28:	d0a74203 	ldbu	r2,-25336(gp)
  801d2c:	d0a77185 	stb	r2,-25146(gp)
      g79 =(g78b&&_cg78);
  801d30:	d0a73943 	ldbu	r2,-25371(gp)
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	1080201c 	xori	r2,r2,128
  801d3c:	10bfe004 	addi	r2,r2,-128
  801d40:	10000726 	beq	r2,zero,801d60 <tick+0x138c>
  801d44:	d0a768c3 	ldbu	r2,-25181(gp)
  801d48:	10803fcc 	andi	r2,r2,255
  801d4c:	1080201c 	xori	r2,r2,128
  801d50:	10bfe004 	addi	r2,r2,-128
  801d54:	10000226 	beq	r2,zero,801d60 <tick+0x138c>
  801d58:	00800044 	movi	r2,1
  801d5c:	00000106 	br	801d64 <tick+0x1390>
  801d60:	0005883a 	mov	r2,zero
  801d64:	d0a74e45 	stb	r2,-25287(gp)
      if(g79){
  801d68:	d0a74e43 	ldbu	r2,-25287(gp)
  801d6c:	10803fcc 	andi	r2,r2,255
  801d70:	1080201c 	xori	r2,r2,128
  801d74:	10bfe004 	addi	r2,r2,-128
  801d78:	10000226 	beq	r2,zero,801d84 <tick+0x13b0>
         PVARP_start =(PVARP_start||1);
  801d7c:	00800044 	movi	r2,1
  801d80:	d0a76505 	stb	r2,-25196(gp)
      }
      g70 =(PRE_g69);
  801d84:	d0a743c3 	ldbu	r2,-25329(gp)
  801d88:	d0a76c05 	stb	r2,-25168(gp)
      g70b = g70;
  801d8c:	d0a76c03 	ldbu	r2,-25168(gp)
  801d90:	d0a77085 	stb	r2,-25150(gp)
      _cg70 = AVI_stop;
  801d94:	d0a74143 	ldbu	r2,-25339(gp)
  801d98:	d0a76805 	stb	r2,-25184(gp)
      g74 =(g70b&&(!(_cg70)));
  801d9c:	d0a77083 	ldbu	r2,-25150(gp)
  801da0:	10803fcc 	andi	r2,r2,255
  801da4:	1080201c 	xori	r2,r2,128
  801da8:	10bfe004 	addi	r2,r2,-128
  801dac:	10000726 	beq	r2,zero,801dcc <tick+0x13f8>
  801db0:	d0a76803 	ldbu	r2,-25184(gp)
  801db4:	10803fcc 	andi	r2,r2,255
  801db8:	1080201c 	xori	r2,r2,128
  801dbc:	10bfe004 	addi	r2,r2,-128
  801dc0:	1000021e 	bne	r2,zero,801dcc <tick+0x13f8>
  801dc4:	00800044 	movi	r2,1
  801dc8:	00000106 	br	801dd0 <tick+0x13fc>
  801dcc:	0005883a 	mov	r2,zero
  801dd0:	d0a77e45 	stb	r2,-25095(gp)
      _cg74 = PVARP_start;
  801dd4:	d0a76503 	ldbu	r2,-25196(gp)
  801dd8:	d0a74585 	stb	r2,-25322(gp)
      g72 =(PRE_g71);
  801ddc:	d0a75403 	ldbu	r2,-25264(gp)
  801de0:	d0a76d05 	stb	r2,-25164(gp)
      _cg72 = PVARPTO;
  801de4:	d0a76343 	ldbu	r2,-25203(gp)
  801de8:	d0a77d45 	stb	r2,-25099(gp)
      g73 =(g72&&_cg72);
  801dec:	d0a76d03 	ldbu	r2,-25164(gp)
  801df0:	10803fcc 	andi	r2,r2,255
  801df4:	1080201c 	xori	r2,r2,128
  801df8:	10bfe004 	addi	r2,r2,-128
  801dfc:	10000726 	beq	r2,zero,801e1c <tick+0x1448>
  801e00:	d0a77d43 	ldbu	r2,-25099(gp)
  801e04:	10803fcc 	andi	r2,r2,255
  801e08:	1080201c 	xori	r2,r2,128
  801e0c:	10bfe004 	addi	r2,r2,-128
  801e10:	10000226 	beq	r2,zero,801e1c <tick+0x1448>
  801e14:	00800044 	movi	r2,1
  801e18:	00000106 	br	801e20 <tick+0x144c>
  801e1c:	0005883a 	mov	r2,zero
  801e20:	d0a77345 	stb	r2,-25139(gp)
      if(g73){
  801e24:	d0a77343 	ldbu	r2,-25139(gp)
  801e28:	10803fcc 	andi	r2,r2,255
  801e2c:	1080201c 	xori	r2,r2,128
  801e30:	10bfe004 	addi	r2,r2,-128
  801e34:	10000226 	beq	r2,zero,801e40 <tick+0x146c>
         _Pacemaker1_local_PVARP_ex =(_Pacemaker1_local_PVARP_ex||1);
  801e38:	00800044 	movi	r2,1
  801e3c:	d0a74fc5 	stb	r2,-25281(gp)
      }
      g69 =((g74&&(!(_cg74)))||g68||g73);
  801e40:	d0a77e43 	ldbu	r2,-25095(gp)
  801e44:	10803fcc 	andi	r2,r2,255
  801e48:	1080201c 	xori	r2,r2,128
  801e4c:	10bfe004 	addi	r2,r2,-128
  801e50:	10000526 	beq	r2,zero,801e68 <tick+0x1494>
  801e54:	d0a74583 	ldbu	r2,-25322(gp)
  801e58:	10803fcc 	andi	r2,r2,255
  801e5c:	1080201c 	xori	r2,r2,128
  801e60:	10bfe004 	addi	r2,r2,-128
  801e64:	10000a26 	beq	r2,zero,801e90 <tick+0x14bc>
  801e68:	d0a77183 	ldbu	r2,-25146(gp)
  801e6c:	10803fcc 	andi	r2,r2,255
  801e70:	1080201c 	xori	r2,r2,128
  801e74:	10bfe004 	addi	r2,r2,-128
  801e78:	1000051e 	bne	r2,zero,801e90 <tick+0x14bc>
  801e7c:	d0a77343 	ldbu	r2,-25139(gp)
  801e80:	10803fcc 	andi	r2,r2,255
  801e84:	1080201c 	xori	r2,r2,128
  801e88:	10bfe004 	addi	r2,r2,-128
  801e8c:	10000226 	beq	r2,zero,801e98 <tick+0x14c4>
  801e90:	00800044 	movi	r2,1
  801e94:	00000106 	br	801e9c <tick+0x14c8>
  801e98:	0005883a 	mov	r2,zero
  801e9c:	d0a77cc5 	stb	r2,-25101(gp)
      g71 =((g70b&&_cg70)||(g72&&(!(_cg72)))||(g74&&_cg74));
  801ea0:	d0a77083 	ldbu	r2,-25150(gp)
  801ea4:	10803fcc 	andi	r2,r2,255
  801ea8:	1080201c 	xori	r2,r2,128
  801eac:	10bfe004 	addi	r2,r2,-128
  801eb0:	10000526 	beq	r2,zero,801ec8 <tick+0x14f4>
  801eb4:	d0a76803 	ldbu	r2,-25184(gp)
  801eb8:	10803fcc 	andi	r2,r2,255
  801ebc:	1080201c 	xori	r2,r2,128
  801ec0:	10bfe004 	addi	r2,r2,-128
  801ec4:	1000141e 	bne	r2,zero,801f18 <tick+0x1544>
  801ec8:	d0a76d03 	ldbu	r2,-25164(gp)
  801ecc:	10803fcc 	andi	r2,r2,255
  801ed0:	1080201c 	xori	r2,r2,128
  801ed4:	10bfe004 	addi	r2,r2,-128
  801ed8:	10000526 	beq	r2,zero,801ef0 <tick+0x151c>
  801edc:	d0a77d43 	ldbu	r2,-25099(gp)
  801ee0:	10803fcc 	andi	r2,r2,255
  801ee4:	1080201c 	xori	r2,r2,128
  801ee8:	10bfe004 	addi	r2,r2,-128
  801eec:	10000a26 	beq	r2,zero,801f18 <tick+0x1544>
  801ef0:	d0a77e43 	ldbu	r2,-25095(gp)
  801ef4:	10803fcc 	andi	r2,r2,255
  801ef8:	1080201c 	xori	r2,r2,128
  801efc:	10bfe004 	addi	r2,r2,-128
  801f00:	10000726 	beq	r2,zero,801f20 <tick+0x154c>
  801f04:	d0a74583 	ldbu	r2,-25322(gp)
  801f08:	10803fcc 	andi	r2,r2,255
  801f0c:	1080201c 	xori	r2,r2,128
  801f10:	10bfe004 	addi	r2,r2,-128
  801f14:	10000226 	beq	r2,zero,801f20 <tick+0x154c>
  801f18:	00800044 	movi	r2,1
  801f1c:	00000106 	br	801f24 <tick+0x1550>
  801f20:	0005883a 	mov	r2,zero
  801f24:	d0a74285 	stb	r2,-25334(gp)
      g76 = g1;
  801f28:	d0a74203 	ldbu	r2,-25336(gp)
  801f2c:	d0a746c5 	stb	r2,-25317(gp)
      g81 =(PRE_g80);
  801f30:	d0a75143 	ldbu	r2,-25275(gp)
  801f34:	d0a76d45 	stb	r2,-25163(gp)
      g81b = g81;
  801f38:	d0a76d43 	ldbu	r2,-25163(gp)
  801f3c:	d0a734c5 	stb	r2,-25389(gp)
      _cg81 = _Pacemaker1_local_PVARP_ex;
  801f40:	d0a74fc3 	ldbu	r2,-25281(gp)
  801f44:	d0a73405 	stb	r2,-25392(gp)
      g77 =(g76||(g81b&&_cg81)||(g82&&(!(_cg82)))||g83);
  801f48:	d0a746c3 	ldbu	r2,-25317(gp)
  801f4c:	10803fcc 	andi	r2,r2,255
  801f50:	1080201c 	xori	r2,r2,128
  801f54:	10bfe004 	addi	r2,r2,-128
  801f58:	1000191e 	bne	r2,zero,801fc0 <tick+0x15ec>
  801f5c:	d0a734c3 	ldbu	r2,-25389(gp)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	10000526 	beq	r2,zero,801f84 <tick+0x15b0>
  801f70:	d0a73403 	ldbu	r2,-25392(gp)
  801f74:	10803fcc 	andi	r2,r2,255
  801f78:	1080201c 	xori	r2,r2,128
  801f7c:	10bfe004 	addi	r2,r2,-128
  801f80:	10000f1e 	bne	r2,zero,801fc0 <tick+0x15ec>
  801f84:	d0a74343 	ldbu	r2,-25331(gp)
  801f88:	10803fcc 	andi	r2,r2,255
  801f8c:	1080201c 	xori	r2,r2,128
  801f90:	10bfe004 	addi	r2,r2,-128
  801f94:	10000526 	beq	r2,zero,801fac <tick+0x15d8>
  801f98:	d0a74d03 	ldbu	r2,-25292(gp)
  801f9c:	10803fcc 	andi	r2,r2,255
  801fa0:	1080201c 	xori	r2,r2,128
  801fa4:	10bfe004 	addi	r2,r2,-128
  801fa8:	10000526 	beq	r2,zero,801fc0 <tick+0x15ec>
  801fac:	d0a73483 	ldbu	r2,-25390(gp)
  801fb0:	10803fcc 	andi	r2,r2,255
  801fb4:	1080201c 	xori	r2,r2,128
  801fb8:	10bfe004 	addi	r2,r2,-128
  801fbc:	10000226 	beq	r2,zero,801fc8 <tick+0x15f4>
  801fc0:	00800044 	movi	r2,1
  801fc4:	00000106 	br	801fcc <tick+0x15f8>
  801fc8:	0005883a 	mov	r2,zero
  801fcc:	d0a77485 	stb	r2,-25134(gp)
      g80 =((g81b&&(!(_cg81)))||g79);
  801fd0:	d0a734c3 	ldbu	r2,-25389(gp)
  801fd4:	10803fcc 	andi	r2,r2,255
  801fd8:	1080201c 	xori	r2,r2,128
  801fdc:	10bfe004 	addi	r2,r2,-128
  801fe0:	10000526 	beq	r2,zero,801ff8 <tick+0x1624>
  801fe4:	d0a73403 	ldbu	r2,-25392(gp)
  801fe8:	10803fcc 	andi	r2,r2,255
  801fec:	1080201c 	xori	r2,r2,128
  801ff0:	10bfe004 	addi	r2,r2,-128
  801ff4:	10000526 	beq	r2,zero,80200c <tick+0x1638>
  801ff8:	d0a74e43 	ldbu	r2,-25287(gp)
  801ffc:	10803fcc 	andi	r2,r2,255
  802000:	1080201c 	xori	r2,r2,128
  802004:	10bfe004 	addi	r2,r2,-128
  802008:	10000226 	beq	r2,zero,802014 <tick+0x1640>
  80200c:	00800044 	movi	r2,1
  802010:	00000106 	br	802018 <tick+0x1644>
  802014:	0005883a 	mov	r2,zero
  802018:	d0a75105 	stb	r2,-25276(gp)
      g85 = g1;
  80201c:	d0a74203 	ldbu	r2,-25336(gp)
  802020:	d0a73a85 	stb	r2,-25366(gp)
      g87 =(PRE_g86);
  802024:	d0a76a83 	ldbu	r2,-25174(gp)
  802028:	d0a73f85 	stb	r2,-25346(gp)
      g87b = g87;
  80202c:	d0a73f83 	ldbu	r2,-25346(gp)
  802030:	d0a73905 	stb	r2,-25372(gp)
      _cg87 = AVI_stop;
  802034:	d0a74143 	ldbu	r2,-25339(gp)
  802038:	d0a75345 	stb	r2,-25267(gp)
      g92 =(g87b&&(!(_cg87)));
  80203c:	d0a73903 	ldbu	r2,-25372(gp)
  802040:	10803fcc 	andi	r2,r2,255
  802044:	1080201c 	xori	r2,r2,128
  802048:	10bfe004 	addi	r2,r2,-128
  80204c:	10000726 	beq	r2,zero,80206c <tick+0x1698>
  802050:	d0a75343 	ldbu	r2,-25267(gp)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1080201c 	xori	r2,r2,128
  80205c:	10bfe004 	addi	r2,r2,-128
  802060:	1000021e 	bne	r2,zero,80206c <tick+0x1698>
  802064:	00800044 	movi	r2,1
  802068:	00000106 	br	802070 <tick+0x169c>
  80206c:	0005883a 	mov	r2,zero
  802070:	d0a741c5 	stb	r2,-25337(gp)
      _cg92 = AEI_start;
  802074:	d0a76bc3 	ldbu	r2,-25169(gp)
  802078:	d0a77605 	stb	r2,-25128(gp)
      g86 =(g91||(g92&&(!(_cg92)))||g85||(g89b&&_cg89));
  80207c:	d0a73583 	ldbu	r2,-25386(gp)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	1080201c 	xori	r2,r2,128
  802088:	10bfe004 	addi	r2,r2,-128
  80208c:	1000191e 	bne	r2,zero,8020f4 <tick+0x1720>
  802090:	d0a741c3 	ldbu	r2,-25337(gp)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	1080201c 	xori	r2,r2,128
  80209c:	10bfe004 	addi	r2,r2,-128
  8020a0:	10000526 	beq	r2,zero,8020b8 <tick+0x16e4>
  8020a4:	d0a77603 	ldbu	r2,-25128(gp)
  8020a8:	10803fcc 	andi	r2,r2,255
  8020ac:	1080201c 	xori	r2,r2,128
  8020b0:	10bfe004 	addi	r2,r2,-128
  8020b4:	10000f26 	beq	r2,zero,8020f4 <tick+0x1720>
  8020b8:	d0a73a83 	ldbu	r2,-25366(gp)
  8020bc:	10803fcc 	andi	r2,r2,255
  8020c0:	1080201c 	xori	r2,r2,128
  8020c4:	10bfe004 	addi	r2,r2,-128
  8020c8:	10000a1e 	bne	r2,zero,8020f4 <tick+0x1720>
  8020cc:	d0a75c43 	ldbu	r2,-25231(gp)
  8020d0:	10803fcc 	andi	r2,r2,255
  8020d4:	1080201c 	xori	r2,r2,128
  8020d8:	10bfe004 	addi	r2,r2,-128
  8020dc:	10000726 	beq	r2,zero,8020fc <tick+0x1728>
  8020e0:	d0a76e83 	ldbu	r2,-25158(gp)
  8020e4:	10803fcc 	andi	r2,r2,255
  8020e8:	1080201c 	xori	r2,r2,128
  8020ec:	10bfe004 	addi	r2,r2,-128
  8020f0:	10000226 	beq	r2,zero,8020fc <tick+0x1728>
  8020f4:	00800044 	movi	r2,1
  8020f8:	00000106 	br	802100 <tick+0x172c>
  8020fc:	0005883a 	mov	r2,zero
  802100:	d0a76185 	stb	r2,-25210(gp)
      g88 =((g90&&(!(_cg90)))||(g92&&_cg92)||(g87b&&_cg87));
  802104:	d0a75b83 	ldbu	r2,-25234(gp)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	10000526 	beq	r2,zero,80212c <tick+0x1758>
  802118:	d0a75083 	ldbu	r2,-25278(gp)
  80211c:	10803fcc 	andi	r2,r2,255
  802120:	1080201c 	xori	r2,r2,128
  802124:	10bfe004 	addi	r2,r2,-128
  802128:	10001426 	beq	r2,zero,80217c <tick+0x17a8>
  80212c:	d0a741c3 	ldbu	r2,-25337(gp)
  802130:	10803fcc 	andi	r2,r2,255
  802134:	1080201c 	xori	r2,r2,128
  802138:	10bfe004 	addi	r2,r2,-128
  80213c:	10000526 	beq	r2,zero,802154 <tick+0x1780>
  802140:	d0a77603 	ldbu	r2,-25128(gp)
  802144:	10803fcc 	andi	r2,r2,255
  802148:	1080201c 	xori	r2,r2,128
  80214c:	10bfe004 	addi	r2,r2,-128
  802150:	10000a1e 	bne	r2,zero,80217c <tick+0x17a8>
  802154:	d0a73903 	ldbu	r2,-25372(gp)
  802158:	10803fcc 	andi	r2,r2,255
  80215c:	1080201c 	xori	r2,r2,128
  802160:	10bfe004 	addi	r2,r2,-128
  802164:	10000726 	beq	r2,zero,802184 <tick+0x17b0>
  802168:	d0a75343 	ldbu	r2,-25267(gp)
  80216c:	10803fcc 	andi	r2,r2,255
  802170:	1080201c 	xori	r2,r2,128
  802174:	10bfe004 	addi	r2,r2,-128
  802178:	10000226 	beq	r2,zero,802184 <tick+0x17b0>
  80217c:	00800044 	movi	r2,1
  802180:	00000106 	br	802188 <tick+0x17b4>
  802184:	0005883a 	mov	r2,zero
  802188:	d0a77505 	stb	r2,-25132(gp)
      g94 = g1;
  80218c:	d0a74203 	ldbu	r2,-25336(gp)
  802190:	d0a74f05 	stb	r2,-25284(gp)
      g96 =(PRE_g95);
  802194:	d0a73643 	ldbu	r2,-25383(gp)
  802198:	d0a76705 	stb	r2,-25188(gp)
      g96b = g96;
  80219c:	d0a76703 	ldbu	r2,-25188(gp)
  8021a0:	d0a73dc5 	stb	r2,-25353(gp)
      _cg96 = AVI_stop;
  8021a4:	d0a74143 	ldbu	r2,-25339(gp)
  8021a8:	d0a737c5 	stb	r2,-25377(gp)
      g95 =(g94||(g96b&&(!(_cg96)))||(g98b&&_cg98)||g100);
  8021ac:	d0a74f03 	ldbu	r2,-25284(gp)
  8021b0:	10803fcc 	andi	r2,r2,255
  8021b4:	1080201c 	xori	r2,r2,128
  8021b8:	10bfe004 	addi	r2,r2,-128
  8021bc:	1000191e 	bne	r2,zero,802224 <tick+0x1850>
  8021c0:	d0a73dc3 	ldbu	r2,-25353(gp)
  8021c4:	10803fcc 	andi	r2,r2,255
  8021c8:	1080201c 	xori	r2,r2,128
  8021cc:	10bfe004 	addi	r2,r2,-128
  8021d0:	10000526 	beq	r2,zero,8021e8 <tick+0x1814>
  8021d4:	d0a737c3 	ldbu	r2,-25377(gp)
  8021d8:	10803fcc 	andi	r2,r2,255
  8021dc:	1080201c 	xori	r2,r2,128
  8021e0:	10bfe004 	addi	r2,r2,-128
  8021e4:	10000f26 	beq	r2,zero,802224 <tick+0x1850>
  8021e8:	d0a76303 	ldbu	r2,-25204(gp)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	1080201c 	xori	r2,r2,128
  8021f4:	10bfe004 	addi	r2,r2,-128
  8021f8:	10000526 	beq	r2,zero,802210 <tick+0x183c>
  8021fc:	d0a74403 	ldbu	r2,-25328(gp)
  802200:	10803fcc 	andi	r2,r2,255
  802204:	1080201c 	xori	r2,r2,128
  802208:	10bfe004 	addi	r2,r2,-128
  80220c:	1000051e 	bne	r2,zero,802224 <tick+0x1850>
  802210:	d0a751c3 	ldbu	r2,-25273(gp)
  802214:	10803fcc 	andi	r2,r2,255
  802218:	1080201c 	xori	r2,r2,128
  80221c:	10bfe004 	addi	r2,r2,-128
  802220:	10000226 	beq	r2,zero,80222c <tick+0x1858>
  802224:	00800044 	movi	r2,1
  802228:	00000106 	br	802230 <tick+0x185c>
  80222c:	0005883a 	mov	r2,zero
  802230:	d0a76685 	stb	r2,-25190(gp)
      g97 =((g96b&&_cg96)||(g99&&(!(_cg99))));
  802234:	d0a73dc3 	ldbu	r2,-25353(gp)
  802238:	10803fcc 	andi	r2,r2,255
  80223c:	1080201c 	xori	r2,r2,128
  802240:	10bfe004 	addi	r2,r2,-128
  802244:	10000526 	beq	r2,zero,80225c <tick+0x1888>
  802248:	d0a737c3 	ldbu	r2,-25377(gp)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10000a1e 	bne	r2,zero,802284 <tick+0x18b0>
  80225c:	d0a75243 	ldbu	r2,-25271(gp)
  802260:	10803fcc 	andi	r2,r2,255
  802264:	1080201c 	xori	r2,r2,128
  802268:	10bfe004 	addi	r2,r2,-128
  80226c:	10000726 	beq	r2,zero,80228c <tick+0x18b8>
  802270:	d0a73543 	ldbu	r2,-25387(gp)
  802274:	10803fcc 	andi	r2,r2,255
  802278:	1080201c 	xori	r2,r2,128
  80227c:	10bfe004 	addi	r2,r2,-128
  802280:	1000021e 	bne	r2,zero,80228c <tick+0x18b8>
  802284:	00800044 	movi	r2,1
  802288:	00000106 	br	802290 <tick+0x18bc>
  80228c:	0005883a 	mov	r2,zero
  802290:	d0a74485 	stb	r2,-25326(gp)
      g102 = g1;
  802294:	d0a74203 	ldbu	r2,-25336(gp)
  802298:	d0a73d45 	stb	r2,-25355(gp)
      g104 =(PRE_g103);
  80229c:	d0a76783 	ldbu	r2,-25186(gp)
  8022a0:	d0a769c5 	stb	r2,-25177(gp)
      g104b = g104;
  8022a4:	d0a769c3 	ldbu	r2,-25177(gp)
  8022a8:	d0a74185 	stb	r2,-25338(gp)
      _cg104 = AVI_stop;
  8022ac:	d0a74143 	ldbu	r2,-25339(gp)
  8022b0:	d0a747c5 	stb	r2,-25313(gp)
      g108 =(g104b&&(!(_cg104)));
  8022b4:	d0a74183 	ldbu	r2,-25338(gp)
  8022b8:	10803fcc 	andi	r2,r2,255
  8022bc:	1080201c 	xori	r2,r2,128
  8022c0:	10bfe004 	addi	r2,r2,-128
  8022c4:	10000726 	beq	r2,zero,8022e4 <tick+0x1910>
  8022c8:	d0a747c3 	ldbu	r2,-25313(gp)
  8022cc:	10803fcc 	andi	r2,r2,255
  8022d0:	1080201c 	xori	r2,r2,128
  8022d4:	10bfe004 	addi	r2,r2,-128
  8022d8:	1000021e 	bne	r2,zero,8022e4 <tick+0x1910>
  8022dc:	00800044 	movi	r2,1
  8022e0:	00000106 	br	8022e8 <tick+0x1914>
  8022e4:	0005883a 	mov	r2,zero
  8022e8:	d0a736c5 	stb	r2,-25381(gp)
      _cg108 = URI_start;
  8022ec:	d0a77b03 	ldbu	r2,-25108(gp)
  8022f0:	d0a76dc5 	stb	r2,-25161(gp)
      g103 =(g107||(g108&&(!(_cg108)))||g102);
  8022f4:	d0a76843 	ldbu	r2,-25183(gp)
  8022f8:	10803fcc 	andi	r2,r2,255
  8022fc:	1080201c 	xori	r2,r2,128
  802300:	10bfe004 	addi	r2,r2,-128
  802304:	10000f1e 	bne	r2,zero,802344 <tick+0x1970>
  802308:	d0a736c3 	ldbu	r2,-25381(gp)
  80230c:	10803fcc 	andi	r2,r2,255
  802310:	1080201c 	xori	r2,r2,128
  802314:	10bfe004 	addi	r2,r2,-128
  802318:	10000526 	beq	r2,zero,802330 <tick+0x195c>
  80231c:	d0a76dc3 	ldbu	r2,-25161(gp)
  802320:	10803fcc 	andi	r2,r2,255
  802324:	1080201c 	xori	r2,r2,128
  802328:	10bfe004 	addi	r2,r2,-128
  80232c:	10000526 	beq	r2,zero,802344 <tick+0x1970>
  802330:	d0a73d43 	ldbu	r2,-25355(gp)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	10000226 	beq	r2,zero,80234c <tick+0x1978>
  802344:	00800044 	movi	r2,1
  802348:	00000106 	br	802350 <tick+0x197c>
  80234c:	0005883a 	mov	r2,zero
  802350:	d0a73a05 	stb	r2,-25368(gp)
      g105 =((g108&&_cg108)||(g106&&(!(_cg106)))||(g104b&&_cg104));
  802354:	d0a736c3 	ldbu	r2,-25381(gp)
  802358:	10803fcc 	andi	r2,r2,255
  80235c:	1080201c 	xori	r2,r2,128
  802360:	10bfe004 	addi	r2,r2,-128
  802364:	10000526 	beq	r2,zero,80237c <tick+0x19a8>
  802368:	d0a76dc3 	ldbu	r2,-25161(gp)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	1000141e 	bne	r2,zero,8023cc <tick+0x19f8>
  80237c:	d0a77b83 	ldbu	r2,-25106(gp)
  802380:	10803fcc 	andi	r2,r2,255
  802384:	1080201c 	xori	r2,r2,128
  802388:	10bfe004 	addi	r2,r2,-128
  80238c:	10000526 	beq	r2,zero,8023a4 <tick+0x19d0>
  802390:	d0a76583 	ldbu	r2,-25194(gp)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	10000a26 	beq	r2,zero,8023cc <tick+0x19f8>
  8023a4:	d0a74183 	ldbu	r2,-25338(gp)
  8023a8:	10803fcc 	andi	r2,r2,255
  8023ac:	1080201c 	xori	r2,r2,128
  8023b0:	10bfe004 	addi	r2,r2,-128
  8023b4:	10000726 	beq	r2,zero,8023d4 <tick+0x1a00>
  8023b8:	d0a747c3 	ldbu	r2,-25313(gp)
  8023bc:	10803fcc 	andi	r2,r2,255
  8023c0:	1080201c 	xori	r2,r2,128
  8023c4:	10bfe004 	addi	r2,r2,-128
  8023c8:	10000226 	beq	r2,zero,8023d4 <tick+0x1a00>
  8023cc:	00800044 	movi	r2,1
  8023d0:	00000106 	br	8023d8 <tick+0x1a04>
  8023d4:	0005883a 	mov	r2,zero
  8023d8:	d0a74bc5 	stb	r2,-25297(gp)
      g110 = g1;
  8023dc:	d0a74203 	ldbu	r2,-25336(gp)
  8023e0:	d0a74f45 	stb	r2,-25283(gp)
      g114 =(PRE_g113);
  8023e4:	d0a76243 	ldbu	r2,-25207(gp)
  8023e8:	d0a75605 	stb	r2,-25256(gp)
      g114b = g114;
  8023ec:	d0a75603 	ldbu	r2,-25256(gp)
  8023f0:	d0a73bc5 	stb	r2,-25361(gp)
      _cg114 = URI_ex;
  8023f4:	d0a75903 	ldbu	r2,-25244(gp)
  8023f8:	d0a75745 	stb	r2,-25251(gp)
      g112 =(PRE_g111);
  8023fc:	d0a74d83 	ldbu	r2,-25290(gp)
  802400:	d0a738c5 	stb	r2,-25373(gp)
      g112b = g112;
  802404:	d0a738c3 	ldbu	r2,-25373(gp)
  802408:	d0a77a05 	stb	r2,-25112(gp)
      _cg112 = AVI_stop;
  80240c:	d0a74143 	ldbu	r2,-25339(gp)
  802410:	d0a76985 	stb	r2,-25178(gp)
      g111 =(g110||(g114b&&_cg114)||(g112b&&(!(_cg112))));
  802414:	d0a74f43 	ldbu	r2,-25283(gp)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	1000141e 	bne	r2,zero,802478 <tick+0x1aa4>
  802428:	d0a73bc3 	ldbu	r2,-25361(gp)
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	1080201c 	xori	r2,r2,128
  802434:	10bfe004 	addi	r2,r2,-128
  802438:	10000526 	beq	r2,zero,802450 <tick+0x1a7c>
  80243c:	d0a75743 	ldbu	r2,-25251(gp)
  802440:	10803fcc 	andi	r2,r2,255
  802444:	1080201c 	xori	r2,r2,128
  802448:	10bfe004 	addi	r2,r2,-128
  80244c:	10000a1e 	bne	r2,zero,802478 <tick+0x1aa4>
  802450:	d0a77a03 	ldbu	r2,-25112(gp)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	10000726 	beq	r2,zero,802480 <tick+0x1aac>
  802464:	d0a76983 	ldbu	r2,-25178(gp)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	1000021e 	bne	r2,zero,802480 <tick+0x1aac>
  802478:	00800044 	movi	r2,1
  80247c:	00000106 	br	802484 <tick+0x1ab0>
  802480:	0005883a 	mov	r2,zero
  802484:	d0a73745 	stb	r2,-25379(gp)
      g113 =((g112b&&_cg112)||(g114b&&(!(_cg114))));
  802488:	d0a77a03 	ldbu	r2,-25112(gp)
  80248c:	10803fcc 	andi	r2,r2,255
  802490:	1080201c 	xori	r2,r2,128
  802494:	10bfe004 	addi	r2,r2,-128
  802498:	10000526 	beq	r2,zero,8024b0 <tick+0x1adc>
  80249c:	d0a76983 	ldbu	r2,-25178(gp)
  8024a0:	10803fcc 	andi	r2,r2,255
  8024a4:	1080201c 	xori	r2,r2,128
  8024a8:	10bfe004 	addi	r2,r2,-128
  8024ac:	10000a1e 	bne	r2,zero,8024d8 <tick+0x1b04>
  8024b0:	d0a73bc3 	ldbu	r2,-25361(gp)
  8024b4:	10803fcc 	andi	r2,r2,255
  8024b8:	1080201c 	xori	r2,r2,128
  8024bc:	10bfe004 	addi	r2,r2,-128
  8024c0:	10000726 	beq	r2,zero,8024e0 <tick+0x1b0c>
  8024c4:	d0a75743 	ldbu	r2,-25251(gp)
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	1080201c 	xori	r2,r2,128
  8024d0:	10bfe004 	addi	r2,r2,-128
  8024d4:	1000021e 	bne	r2,zero,8024e0 <tick+0x1b0c>
  8024d8:	00800044 	movi	r2,1
  8024dc:	00000106 	br	8024e4 <tick+0x1b10>
  8024e0:	0005883a 	mov	r2,zero
  8024e4:	d0a76885 	stb	r2,-25182(gp)
      g120 = g1;
  8024e8:	d0a74203 	ldbu	r2,-25336(gp)
  8024ec:	d0a77845 	stb	r2,-25119(gp)
      g121 =(g122||g120);
  8024f0:	d0a758c3 	ldbu	r2,-25245(gp)
  8024f4:	10803fcc 	andi	r2,r2,255
  8024f8:	1080201c 	xori	r2,r2,128
  8024fc:	10bfe004 	addi	r2,r2,-128
  802500:	1000051e 	bne	r2,zero,802518 <tick+0x1b44>
  802504:	d0a77843 	ldbu	r2,-25119(gp)
  802508:	10803fcc 	andi	r2,r2,255
  80250c:	1080201c 	xori	r2,r2,128
  802510:	10bfe004 	addi	r2,r2,-128
  802514:	10000226 	beq	r2,zero,802520 <tick+0x1b4c>
  802518:	00800044 	movi	r2,1
  80251c:	00000106 	br	802524 <tick+0x1b50>
  802520:	0005883a 	mov	r2,zero
  802524:	d0a77705 	stb	r2,-25124(gp)
      if(g121){
  802528:	d0a77703 	ldbu	r2,-25124(gp)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	10000226 	beq	r2,zero,802544 <tick+0x1b70>
         _Pacemaker1_local__reg_AVI_ex16 = _Pacemaker1_local_AVI_ex;
  80253c:	d0a762c3 	ldbu	r2,-25205(gp)
  802540:	d0a76545 	stb	r2,-25195(gp)
      }
      g121b = g121;
  802544:	d0a77703 	ldbu	r2,-25124(gp)
  802548:	d0a75e05 	stb	r2,-25224(gp)
      if(g121b){
  80254c:	d0a75e03 	ldbu	r2,-25224(gp)
  802550:	10803fcc 	andi	r2,r2,255
  802554:	1080201c 	xori	r2,r2,128
  802558:	10bfe004 	addi	r2,r2,-128
  80255c:	10000226 	beq	r2,zero,802568 <tick+0x1b94>
         _Pacemaker1_local__reg_FilteredVSense16 = _Pacemaker1_local_FilteredVSense;
  802560:	d0a755c3 	ldbu	r2,-25257(gp)
  802564:	d0a740c5 	stb	r2,-25341(gp)
      }
      g129 = g0;
  802568:	d0a76e43 	ldbu	r2,-25159(gp)
  80256c:	d0a75685 	stb	r2,-25254(gp)
      g130 =(g131||g129);
  802570:	d0a756c3 	ldbu	r2,-25253(gp)
  802574:	10803fcc 	andi	r2,r2,255
  802578:	1080201c 	xori	r2,r2,128
  80257c:	10bfe004 	addi	r2,r2,-128
  802580:	1000051e 	bne	r2,zero,802598 <tick+0x1bc4>
  802584:	d0a75683 	ldbu	r2,-25254(gp)
  802588:	10803fcc 	andi	r2,r2,255
  80258c:	1080201c 	xori	r2,r2,128
  802590:	10bfe004 	addi	r2,r2,-128
  802594:	10000226 	beq	r2,zero,8025a0 <tick+0x1bcc>
  802598:	00800044 	movi	r2,1
  80259c:	00000106 	br	8025a4 <tick+0x1bd0>
  8025a0:	0005883a 	mov	r2,zero
  8025a4:	d0a77685 	stb	r2,-25126(gp)
      if(g130){
  8025a8:	d0a77683 	ldbu	r2,-25126(gp)
  8025ac:	10803fcc 	andi	r2,r2,255
  8025b0:	1080201c 	xori	r2,r2,128
  8025b4:	10bfe004 	addi	r2,r2,-128
  8025b8:	10000226 	beq	r2,zero,8025c4 <tick+0x1bf0>
         _reg_VPace9 = VPace;
  8025bc:	d0a77743 	ldbu	r2,-25123(gp)
  8025c0:	d0a75ac5 	stb	r2,-25237(gp)
      }
      g9_e1 =(!((g4||g6)));
  8025c4:	d0a73683 	ldbu	r2,-25382(gp)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	1000071e 	bne	r2,zero,8025f4 <tick+0x1c20>
  8025d8:	d0a76cc3 	ldbu	r2,-25165(gp)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	1000021e 	bne	r2,zero,8025f4 <tick+0x1c20>
  8025ec:	00800044 	movi	r2,1
  8025f0:	00000106 	br	8025f8 <tick+0x1c24>
  8025f4:	0005883a 	mov	r2,zero
  8025f8:	d0a754c5 	stb	r2,-25261(gp)
      g18_e2 =(!((g12||g15)));
  8025fc:	d0a74443 	ldbu	r2,-25327(gp)
  802600:	10803fcc 	andi	r2,r2,255
  802604:	1080201c 	xori	r2,r2,128
  802608:	10bfe004 	addi	r2,r2,-128
  80260c:	1000071e 	bne	r2,zero,80262c <tick+0x1c58>
  802610:	d0a75b43 	ldbu	r2,-25235(gp)
  802614:	10803fcc 	andi	r2,r2,255
  802618:	1080201c 	xori	r2,r2,128
  80261c:	10bfe004 	addi	r2,r2,-128
  802620:	1000021e 	bne	r2,zero,80262c <tick+0x1c58>
  802624:	00800044 	movi	r2,1
  802628:	00000106 	br	802630 <tick+0x1c5c>
  80262c:	0005883a 	mov	r2,zero
  802630:	d0a76905 	stb	r2,-25180(gp)
      g27_e3 =(!((g21||g23)));
  802634:	d0a74e03 	ldbu	r2,-25288(gp)
  802638:	10803fcc 	andi	r2,r2,255
  80263c:	1080201c 	xori	r2,r2,128
  802640:	10bfe004 	addi	r2,r2,-128
  802644:	1000071e 	bne	r2,zero,802664 <tick+0x1c90>
  802648:	d0a75303 	ldbu	r2,-25268(gp)
  80264c:	10803fcc 	andi	r2,r2,255
  802650:	1080201c 	xori	r2,r2,128
  802654:	10bfe004 	addi	r2,r2,-128
  802658:	1000021e 	bne	r2,zero,802664 <tick+0x1c90>
  80265c:	00800044 	movi	r2,1
  802660:	00000106 	br	802668 <tick+0x1c94>
  802664:	0005883a 	mov	r2,zero
  802668:	d0a75e45 	stb	r2,-25223(gp)
      g43_e4 =(!((g30||g33||g35||g38)));
  80266c:	d0a76f43 	ldbu	r2,-25155(gp)
  802670:	10803fcc 	andi	r2,r2,255
  802674:	1080201c 	xori	r2,r2,128
  802678:	10bfe004 	addi	r2,r2,-128
  80267c:	1000111e 	bne	r2,zero,8026c4 <tick+0x1cf0>
  802680:	d0a757c3 	ldbu	r2,-25249(gp)
  802684:	10803fcc 	andi	r2,r2,255
  802688:	1080201c 	xori	r2,r2,128
  80268c:	10bfe004 	addi	r2,r2,-128
  802690:	10000c1e 	bne	r2,zero,8026c4 <tick+0x1cf0>
  802694:	d0a75b03 	ldbu	r2,-25236(gp)
  802698:	10803fcc 	andi	r2,r2,255
  80269c:	1080201c 	xori	r2,r2,128
  8026a0:	10bfe004 	addi	r2,r2,-128
  8026a4:	1000071e 	bne	r2,zero,8026c4 <tick+0x1cf0>
  8026a8:	d0a74b83 	ldbu	r2,-25298(gp)
  8026ac:	10803fcc 	andi	r2,r2,255
  8026b0:	1080201c 	xori	r2,r2,128
  8026b4:	10bfe004 	addi	r2,r2,-128
  8026b8:	1000021e 	bne	r2,zero,8026c4 <tick+0x1cf0>
  8026bc:	00800044 	movi	r2,1
  8026c0:	00000106 	br	8026c8 <tick+0x1cf4>
  8026c4:	0005883a 	mov	r2,zero
  8026c8:	d0a75dc5 	stb	r2,-25225(gp)
      g51_e5 =(!((g46||g48)));
  8026cc:	d0a76483 	ldbu	r2,-25198(gp)
  8026d0:	10803fcc 	andi	r2,r2,255
  8026d4:	1080201c 	xori	r2,r2,128
  8026d8:	10bfe004 	addi	r2,r2,-128
  8026dc:	1000071e 	bne	r2,zero,8026fc <tick+0x1d28>
  8026e0:	d0a74ac3 	ldbu	r2,-25301(gp)
  8026e4:	10803fcc 	andi	r2,r2,255
  8026e8:	1080201c 	xori	r2,r2,128
  8026ec:	10bfe004 	addi	r2,r2,-128
  8026f0:	1000021e 	bne	r2,zero,8026fc <tick+0x1d28>
  8026f4:	00800044 	movi	r2,1
  8026f8:	00000106 	br	802700 <tick+0x1d2c>
  8026fc:	0005883a 	mov	r2,zero
  802700:	d0a76945 	stb	r2,-25179(gp)
      g67_e6 =(!((g54||g57||g61)));
  802704:	d0a75283 	ldbu	r2,-25270(gp)
  802708:	10803fcc 	andi	r2,r2,255
  80270c:	1080201c 	xori	r2,r2,128
  802710:	10bfe004 	addi	r2,r2,-128
  802714:	10000c1e 	bne	r2,zero,802748 <tick+0x1d74>
  802718:	d0a76b83 	ldbu	r2,-25170(gp)
  80271c:	10803fcc 	andi	r2,r2,255
  802720:	1080201c 	xori	r2,r2,128
  802724:	10bfe004 	addi	r2,r2,-128
  802728:	1000071e 	bne	r2,zero,802748 <tick+0x1d74>
  80272c:	d0a74243 	ldbu	r2,-25335(gp)
  802730:	10803fcc 	andi	r2,r2,255
  802734:	1080201c 	xori	r2,r2,128
  802738:	10bfe004 	addi	r2,r2,-128
  80273c:	1000021e 	bne	r2,zero,802748 <tick+0x1d74>
  802740:	00800044 	movi	r2,1
  802744:	00000106 	br	80274c <tick+0x1d78>
  802748:	0005883a 	mov	r2,zero
  80274c:	d0a76fc5 	stb	r2,-25153(gp)
      g75_e7 =(!((g70||g72)));
  802750:	d0a76c03 	ldbu	r2,-25168(gp)
  802754:	10803fcc 	andi	r2,r2,255
  802758:	1080201c 	xori	r2,r2,128
  80275c:	10bfe004 	addi	r2,r2,-128
  802760:	1000071e 	bne	r2,zero,802780 <tick+0x1dac>
  802764:	d0a76d03 	ldbu	r2,-25164(gp)
  802768:	10803fcc 	andi	r2,r2,255
  80276c:	1080201c 	xori	r2,r2,128
  802770:	10bfe004 	addi	r2,r2,-128
  802774:	1000021e 	bne	r2,zero,802780 <tick+0x1dac>
  802778:	00800044 	movi	r2,1
  80277c:	00000106 	br	802784 <tick+0x1db0>
  802780:	0005883a 	mov	r2,zero
  802784:	d0a74305 	stb	r2,-25332(gp)
      g84_e8 =(!((g78||g81)));
  802788:	d0a75783 	ldbu	r2,-25250(gp)
  80278c:	10803fcc 	andi	r2,r2,255
  802790:	1080201c 	xori	r2,r2,128
  802794:	10bfe004 	addi	r2,r2,-128
  802798:	1000071e 	bne	r2,zero,8027b8 <tick+0x1de4>
  80279c:	d0a76d43 	ldbu	r2,-25163(gp)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	1000021e 	bne	r2,zero,8027b8 <tick+0x1de4>
  8027b0:	00800044 	movi	r2,1
  8027b4:	00000106 	br	8027bc <tick+0x1de8>
  8027b8:	0005883a 	mov	r2,zero
  8027bc:	d0a75bc5 	stb	r2,-25233(gp)
      g93_e9 =(!((g87||g89)));
  8027c0:	d0a73f83 	ldbu	r2,-25346(gp)
  8027c4:	10803fcc 	andi	r2,r2,255
  8027c8:	1080201c 	xori	r2,r2,128
  8027cc:	10bfe004 	addi	r2,r2,-128
  8027d0:	1000071e 	bne	r2,zero,8027f0 <tick+0x1e1c>
  8027d4:	d0a76443 	ldbu	r2,-25199(gp)
  8027d8:	10803fcc 	andi	r2,r2,255
  8027dc:	1080201c 	xori	r2,r2,128
  8027e0:	10bfe004 	addi	r2,r2,-128
  8027e4:	1000021e 	bne	r2,zero,8027f0 <tick+0x1e1c>
  8027e8:	00800044 	movi	r2,1
  8027ec:	00000106 	br	8027f4 <tick+0x1e20>
  8027f0:	0005883a 	mov	r2,zero
  8027f4:	d0a773c5 	stb	r2,-25137(gp)
      g101_e10 =(!((g96||g98)));
  8027f8:	d0a76703 	ldbu	r2,-25188(gp)
  8027fc:	10803fcc 	andi	r2,r2,255
  802800:	1080201c 	xori	r2,r2,128
  802804:	10bfe004 	addi	r2,r2,-128
  802808:	1000071e 	bne	r2,zero,802828 <tick+0x1e54>
  80280c:	d0a76ac3 	ldbu	r2,-25173(gp)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	1000021e 	bne	r2,zero,802828 <tick+0x1e54>
  802820:	00800044 	movi	r2,1
  802824:	00000106 	br	80282c <tick+0x1e58>
  802828:	0005883a 	mov	r2,zero
  80282c:	d0a775c5 	stb	r2,-25129(gp)
      g109_e11 =(!((g104||g106)));
  802830:	d0a769c3 	ldbu	r2,-25177(gp)
  802834:	10803fcc 	andi	r2,r2,255
  802838:	1080201c 	xori	r2,r2,128
  80283c:	10bfe004 	addi	r2,r2,-128
  802840:	1000071e 	bne	r2,zero,802860 <tick+0x1e8c>
  802844:	d0a77b83 	ldbu	r2,-25106(gp)
  802848:	10803fcc 	andi	r2,r2,255
  80284c:	1080201c 	xori	r2,r2,128
  802850:	10bfe004 	addi	r2,r2,-128
  802854:	1000021e 	bne	r2,zero,802860 <tick+0x1e8c>
  802858:	00800044 	movi	r2,1
  80285c:	00000106 	br	802864 <tick+0x1e90>
  802860:	0005883a 	mov	r2,zero
  802864:	d0a77e05 	stb	r2,-25096(gp)
      g115_e12 =(!((g112||g114)));
  802868:	d0a738c3 	ldbu	r2,-25373(gp)
  80286c:	10803fcc 	andi	r2,r2,255
  802870:	1080201c 	xori	r2,r2,128
  802874:	10bfe004 	addi	r2,r2,-128
  802878:	1000071e 	bne	r2,zero,802898 <tick+0x1ec4>
  80287c:	d0a75603 	ldbu	r2,-25256(gp)
  802880:	10803fcc 	andi	r2,r2,255
  802884:	1080201c 	xori	r2,r2,128
  802888:	10bfe004 	addi	r2,r2,-128
  80288c:	1000021e 	bne	r2,zero,802898 <tick+0x1ec4>
  802890:	00800044 	movi	r2,1
  802894:	00000106 	br	80289c <tick+0x1ec8>
  802898:	0005883a 	mov	r2,zero
  80289c:	d0a75f85 	stb	r2,-25218(gp)
      g119_e13 =(!(g118));
  8028a0:	d0a74943 	ldbu	r2,-25307(gp)
  8028a4:	10803fcc 	andi	r2,r2,255
  8028a8:	1080201c 	xori	r2,r2,128
  8028ac:	10bfe004 	addi	r2,r2,-128
  8028b0:	1005003a 	cmpeq	r2,r2,zero
  8028b4:	d0a76e05 	stb	r2,-25160(gp)
      g123_e14 =(!(g122));
  8028b8:	d0a758c3 	ldbu	r2,-25245(gp)
  8028bc:	10803fcc 	andi	r2,r2,255
  8028c0:	1080201c 	xori	r2,r2,128
  8028c4:	10bfe004 	addi	r2,r2,-128
  8028c8:	1005003a 	cmpeq	r2,r2,zero
  8028cc:	d0a75845 	stb	r2,-25247(gp)
      g124_fix0 =((g9_e1||g9)&&(g18_e2||g18)&&(g27_e3||g27)&&(g43_e4||g43));
  8028d0:	d0a754c3 	ldbu	r2,-25261(gp)
  8028d4:	10803fcc 	andi	r2,r2,255
  8028d8:	1080201c 	xori	r2,r2,128
  8028dc:	10bfe004 	addi	r2,r2,-128
  8028e0:	1000051e 	bne	r2,zero,8028f8 <tick+0x1f24>
  8028e4:	d0a73b03 	ldbu	r2,-25364(gp)
  8028e8:	10803fcc 	andi	r2,r2,255
  8028ec:	1080201c 	xori	r2,r2,128
  8028f0:	10bfe004 	addi	r2,r2,-128
  8028f4:	10002026 	beq	r2,zero,802978 <tick+0x1fa4>
  8028f8:	d0a76903 	ldbu	r2,-25180(gp)
  8028fc:	10803fcc 	andi	r2,r2,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	1000051e 	bne	r2,zero,802920 <tick+0x1f4c>
  80290c:	d0a74983 	ldbu	r2,-25306(gp)
  802910:	10803fcc 	andi	r2,r2,255
  802914:	1080201c 	xori	r2,r2,128
  802918:	10bfe004 	addi	r2,r2,-128
  80291c:	10001626 	beq	r2,zero,802978 <tick+0x1fa4>
  802920:	d0a75e43 	ldbu	r2,-25223(gp)
  802924:	10803fcc 	andi	r2,r2,255
  802928:	1080201c 	xori	r2,r2,128
  80292c:	10bfe004 	addi	r2,r2,-128
  802930:	1000051e 	bne	r2,zero,802948 <tick+0x1f74>
  802934:	d0a73843 	ldbu	r2,-25375(gp)
  802938:	10803fcc 	andi	r2,r2,255
  80293c:	1080201c 	xori	r2,r2,128
  802940:	10bfe004 	addi	r2,r2,-128
  802944:	10000c26 	beq	r2,zero,802978 <tick+0x1fa4>
  802948:	d0a75dc3 	ldbu	r2,-25225(gp)
  80294c:	10803fcc 	andi	r2,r2,255
  802950:	1080201c 	xori	r2,r2,128
  802954:	10bfe004 	addi	r2,r2,-128
  802958:	1000051e 	bne	r2,zero,802970 <tick+0x1f9c>
  80295c:	d0a761c3 	ldbu	r2,-25209(gp)
  802960:	10803fcc 	andi	r2,r2,255
  802964:	1080201c 	xori	r2,r2,128
  802968:	10bfe004 	addi	r2,r2,-128
  80296c:	10000226 	beq	r2,zero,802978 <tick+0x1fa4>
  802970:	00800044 	movi	r2,1
  802974:	00000106 	br	80297c <tick+0x1fa8>
  802978:	0005883a 	mov	r2,zero
  80297c:	d0a73885 	stb	r2,-25374(gp)
      g124_fix1 =(g124_fix0&&(g51_e5||g51)&&(g67_e6||g67)&&(g75_e7||g75));
  802980:	d0a73883 	ldbu	r2,-25374(gp)
  802984:	10803fcc 	andi	r2,r2,255
  802988:	1080201c 	xori	r2,r2,128
  80298c:	10bfe004 	addi	r2,r2,-128
  802990:	10002026 	beq	r2,zero,802a14 <tick+0x2040>
  802994:	d0a76943 	ldbu	r2,-25179(gp)
  802998:	10803fcc 	andi	r2,r2,255
  80299c:	1080201c 	xori	r2,r2,128
  8029a0:	10bfe004 	addi	r2,r2,-128
  8029a4:	1000051e 	bne	r2,zero,8029bc <tick+0x1fe8>
  8029a8:	d0a76743 	ldbu	r2,-25187(gp)
  8029ac:	10803fcc 	andi	r2,r2,255
  8029b0:	1080201c 	xori	r2,r2,128
  8029b4:	10bfe004 	addi	r2,r2,-128
  8029b8:	10001626 	beq	r2,zero,802a14 <tick+0x2040>
  8029bc:	d0a76fc3 	ldbu	r2,-25153(gp)
  8029c0:	10803fcc 	andi	r2,r2,255
  8029c4:	1080201c 	xori	r2,r2,128
  8029c8:	10bfe004 	addi	r2,r2,-128
  8029cc:	1000051e 	bne	r2,zero,8029e4 <tick+0x2010>
  8029d0:	d0a77943 	ldbu	r2,-25115(gp)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	10000c26 	beq	r2,zero,802a14 <tick+0x2040>
  8029e4:	d0a74303 	ldbu	r2,-25332(gp)
  8029e8:	10803fcc 	andi	r2,r2,255
  8029ec:	1080201c 	xori	r2,r2,128
  8029f0:	10bfe004 	addi	r2,r2,-128
  8029f4:	1000051e 	bne	r2,zero,802a0c <tick+0x2038>
  8029f8:	d0a76f03 	ldbu	r2,-25156(gp)
  8029fc:	10803fcc 	andi	r2,r2,255
  802a00:	1080201c 	xori	r2,r2,128
  802a04:	10bfe004 	addi	r2,r2,-128
  802a08:	10000226 	beq	r2,zero,802a14 <tick+0x2040>
  802a0c:	00800044 	movi	r2,1
  802a10:	00000106 	br	802a18 <tick+0x2044>
  802a14:	0005883a 	mov	r2,zero
  802a18:	d0a753c5 	stb	r2,-25265(gp)
      g124_fix2 =(g124_fix1&&(g84_e8||g84)&&(g93_e9||g93)&&(g101_e10||g101));
  802a1c:	d0a753c3 	ldbu	r2,-25265(gp)
  802a20:	10803fcc 	andi	r2,r2,255
  802a24:	1080201c 	xori	r2,r2,128
  802a28:	10bfe004 	addi	r2,r2,-128
  802a2c:	10002026 	beq	r2,zero,802ab0 <tick+0x20dc>
  802a30:	d0a75bc3 	ldbu	r2,-25233(gp)
  802a34:	10803fcc 	andi	r2,r2,255
  802a38:	1080201c 	xori	r2,r2,128
  802a3c:	10bfe004 	addi	r2,r2,-128
  802a40:	1000051e 	bne	r2,zero,802a58 <tick+0x2084>
  802a44:	d0a74843 	ldbu	r2,-25311(gp)
  802a48:	10803fcc 	andi	r2,r2,255
  802a4c:	1080201c 	xori	r2,r2,128
  802a50:	10bfe004 	addi	r2,r2,-128
  802a54:	10001626 	beq	r2,zero,802ab0 <tick+0x20dc>
  802a58:	d0a773c3 	ldbu	r2,-25137(gp)
  802a5c:	10803fcc 	andi	r2,r2,255
  802a60:	1080201c 	xori	r2,r2,128
  802a64:	10bfe004 	addi	r2,r2,-128
  802a68:	1000051e 	bne	r2,zero,802a80 <tick+0x20ac>
  802a6c:	d0a76043 	ldbu	r2,-25215(gp)
  802a70:	10803fcc 	andi	r2,r2,255
  802a74:	1080201c 	xori	r2,r2,128
  802a78:	10bfe004 	addi	r2,r2,-128
  802a7c:	10000c26 	beq	r2,zero,802ab0 <tick+0x20dc>
  802a80:	d0a775c3 	ldbu	r2,-25129(gp)
  802a84:	10803fcc 	andi	r2,r2,255
  802a88:	1080201c 	xori	r2,r2,128
  802a8c:	10bfe004 	addi	r2,r2,-128
  802a90:	1000051e 	bne	r2,zero,802aa8 <tick+0x20d4>
  802a94:	d0a75503 	ldbu	r2,-25260(gp)
  802a98:	10803fcc 	andi	r2,r2,255
  802a9c:	1080201c 	xori	r2,r2,128
  802aa0:	10bfe004 	addi	r2,r2,-128
  802aa4:	10000226 	beq	r2,zero,802ab0 <tick+0x20dc>
  802aa8:	00800044 	movi	r2,1
  802aac:	00000106 	br	802ab4 <tick+0x20e0>
  802ab0:	0005883a 	mov	r2,zero
  802ab4:	d0a75fc5 	stb	r2,-25217(gp)
      g124_fix3 =(g9||g18||g27||g43);
  802ab8:	d0a73b03 	ldbu	r2,-25364(gp)
  802abc:	10803fcc 	andi	r2,r2,255
  802ac0:	1080201c 	xori	r2,r2,128
  802ac4:	10bfe004 	addi	r2,r2,-128
  802ac8:	10000f1e 	bne	r2,zero,802b08 <tick+0x2134>
  802acc:	d0a74983 	ldbu	r2,-25306(gp)
  802ad0:	10803fcc 	andi	r2,r2,255
  802ad4:	1080201c 	xori	r2,r2,128
  802ad8:	10bfe004 	addi	r2,r2,-128
  802adc:	10000a1e 	bne	r2,zero,802b08 <tick+0x2134>
  802ae0:	d0a73843 	ldbu	r2,-25375(gp)
  802ae4:	10803fcc 	andi	r2,r2,255
  802ae8:	1080201c 	xori	r2,r2,128
  802aec:	10bfe004 	addi	r2,r2,-128
  802af0:	1000051e 	bne	r2,zero,802b08 <tick+0x2134>
  802af4:	d0a761c3 	ldbu	r2,-25209(gp)
  802af8:	10803fcc 	andi	r2,r2,255
  802afc:	1080201c 	xori	r2,r2,128
  802b00:	10bfe004 	addi	r2,r2,-128
  802b04:	10000226 	beq	r2,zero,802b10 <tick+0x213c>
  802b08:	00800044 	movi	r2,1
  802b0c:	00000106 	br	802b14 <tick+0x2140>
  802b10:	0005883a 	mov	r2,zero
  802b14:	d0a74b45 	stb	r2,-25299(gp)
      g124_fix4 =(g124_fix3||g51||g67||g75);
  802b18:	d0a74b43 	ldbu	r2,-25299(gp)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	10000f1e 	bne	r2,zero,802b68 <tick+0x2194>
  802b2c:	d0a76743 	ldbu	r2,-25187(gp)
  802b30:	10803fcc 	andi	r2,r2,255
  802b34:	1080201c 	xori	r2,r2,128
  802b38:	10bfe004 	addi	r2,r2,-128
  802b3c:	10000a1e 	bne	r2,zero,802b68 <tick+0x2194>
  802b40:	d0a77943 	ldbu	r2,-25115(gp)
  802b44:	10803fcc 	andi	r2,r2,255
  802b48:	1080201c 	xori	r2,r2,128
  802b4c:	10bfe004 	addi	r2,r2,-128
  802b50:	1000051e 	bne	r2,zero,802b68 <tick+0x2194>
  802b54:	d0a76f03 	ldbu	r2,-25156(gp)
  802b58:	10803fcc 	andi	r2,r2,255
  802b5c:	1080201c 	xori	r2,r2,128
  802b60:	10bfe004 	addi	r2,r2,-128
  802b64:	10000226 	beq	r2,zero,802b70 <tick+0x219c>
  802b68:	00800044 	movi	r2,1
  802b6c:	00000106 	br	802b74 <tick+0x21a0>
  802b70:	0005883a 	mov	r2,zero
  802b74:	d0a77205 	stb	r2,-25144(gp)
      g124_e1_fix_fix =(g89||g98||g106||g114||g122||g15||g33||g57||g81||g35||g61);
  802b78:	d0a76443 	ldbu	r2,-25199(gp)
  802b7c:	10803fcc 	andi	r2,r2,255
  802b80:	1080201c 	xori	r2,r2,128
  802b84:	10bfe004 	addi	r2,r2,-128
  802b88:	1000321e 	bne	r2,zero,802c54 <tick+0x2280>
  802b8c:	d0a76ac3 	ldbu	r2,-25173(gp)
  802b90:	10803fcc 	andi	r2,r2,255
  802b94:	1080201c 	xori	r2,r2,128
  802b98:	10bfe004 	addi	r2,r2,-128
  802b9c:	10002d1e 	bne	r2,zero,802c54 <tick+0x2280>
  802ba0:	d0a77b83 	ldbu	r2,-25106(gp)
  802ba4:	10803fcc 	andi	r2,r2,255
  802ba8:	1080201c 	xori	r2,r2,128
  802bac:	10bfe004 	addi	r2,r2,-128
  802bb0:	1000281e 	bne	r2,zero,802c54 <tick+0x2280>
  802bb4:	d0a75603 	ldbu	r2,-25256(gp)
  802bb8:	10803fcc 	andi	r2,r2,255
  802bbc:	1080201c 	xori	r2,r2,128
  802bc0:	10bfe004 	addi	r2,r2,-128
  802bc4:	1000231e 	bne	r2,zero,802c54 <tick+0x2280>
  802bc8:	d0a758c3 	ldbu	r2,-25245(gp)
  802bcc:	10803fcc 	andi	r2,r2,255
  802bd0:	1080201c 	xori	r2,r2,128
  802bd4:	10bfe004 	addi	r2,r2,-128
  802bd8:	10001e1e 	bne	r2,zero,802c54 <tick+0x2280>
  802bdc:	d0a75b43 	ldbu	r2,-25235(gp)
  802be0:	10803fcc 	andi	r2,r2,255
  802be4:	1080201c 	xori	r2,r2,128
  802be8:	10bfe004 	addi	r2,r2,-128
  802bec:	1000191e 	bne	r2,zero,802c54 <tick+0x2280>
  802bf0:	d0a757c3 	ldbu	r2,-25249(gp)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	1000141e 	bne	r2,zero,802c54 <tick+0x2280>
  802c04:	d0a76b83 	ldbu	r2,-25170(gp)
  802c08:	10803fcc 	andi	r2,r2,255
  802c0c:	1080201c 	xori	r2,r2,128
  802c10:	10bfe004 	addi	r2,r2,-128
  802c14:	10000f1e 	bne	r2,zero,802c54 <tick+0x2280>
  802c18:	d0a76d43 	ldbu	r2,-25163(gp)
  802c1c:	10803fcc 	andi	r2,r2,255
  802c20:	1080201c 	xori	r2,r2,128
  802c24:	10bfe004 	addi	r2,r2,-128
  802c28:	10000a1e 	bne	r2,zero,802c54 <tick+0x2280>
  802c2c:	d0a75b03 	ldbu	r2,-25236(gp)
  802c30:	10803fcc 	andi	r2,r2,255
  802c34:	1080201c 	xori	r2,r2,128
  802c38:	10bfe004 	addi	r2,r2,-128
  802c3c:	1000051e 	bne	r2,zero,802c54 <tick+0x2280>
  802c40:	d0a74243 	ldbu	r2,-25335(gp)
  802c44:	10803fcc 	andi	r2,r2,255
  802c48:	1080201c 	xori	r2,r2,128
  802c4c:	10bfe004 	addi	r2,r2,-128
  802c50:	10000226 	beq	r2,zero,802c5c <tick+0x2288>
  802c54:	00800044 	movi	r2,1
  802c58:	00000106 	br	802c60 <tick+0x228c>
  802c5c:	0005883a 	mov	r2,zero
  802c60:	d0a75585 	stb	r2,-25258(gp)
      g124_e1_fix =(g87||g96||g104||g112||g6||g23||g48||g72||g38||g124_e1_fix_fix);
  802c64:	d0a73f83 	ldbu	r2,-25346(gp)
  802c68:	10803fcc 	andi	r2,r2,255
  802c6c:	1080201c 	xori	r2,r2,128
  802c70:	10bfe004 	addi	r2,r2,-128
  802c74:	10002d1e 	bne	r2,zero,802d2c <tick+0x2358>
  802c78:	d0a76703 	ldbu	r2,-25188(gp)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	1000281e 	bne	r2,zero,802d2c <tick+0x2358>
  802c8c:	d0a769c3 	ldbu	r2,-25177(gp)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1080201c 	xori	r2,r2,128
  802c98:	10bfe004 	addi	r2,r2,-128
  802c9c:	1000231e 	bne	r2,zero,802d2c <tick+0x2358>
  802ca0:	d0a738c3 	ldbu	r2,-25373(gp)
  802ca4:	10803fcc 	andi	r2,r2,255
  802ca8:	1080201c 	xori	r2,r2,128
  802cac:	10bfe004 	addi	r2,r2,-128
  802cb0:	10001e1e 	bne	r2,zero,802d2c <tick+0x2358>
  802cb4:	d0a76cc3 	ldbu	r2,-25165(gp)
  802cb8:	10803fcc 	andi	r2,r2,255
  802cbc:	1080201c 	xori	r2,r2,128
  802cc0:	10bfe004 	addi	r2,r2,-128
  802cc4:	1000191e 	bne	r2,zero,802d2c <tick+0x2358>
  802cc8:	d0a75303 	ldbu	r2,-25268(gp)
  802ccc:	10803fcc 	andi	r2,r2,255
  802cd0:	1080201c 	xori	r2,r2,128
  802cd4:	10bfe004 	addi	r2,r2,-128
  802cd8:	1000141e 	bne	r2,zero,802d2c <tick+0x2358>
  802cdc:	d0a74ac3 	ldbu	r2,-25301(gp)
  802ce0:	10803fcc 	andi	r2,r2,255
  802ce4:	1080201c 	xori	r2,r2,128
  802ce8:	10bfe004 	addi	r2,r2,-128
  802cec:	10000f1e 	bne	r2,zero,802d2c <tick+0x2358>
  802cf0:	d0a76d03 	ldbu	r2,-25164(gp)
  802cf4:	10803fcc 	andi	r2,r2,255
  802cf8:	1080201c 	xori	r2,r2,128
  802cfc:	10bfe004 	addi	r2,r2,-128
  802d00:	10000a1e 	bne	r2,zero,802d2c <tick+0x2358>
  802d04:	d0a74b83 	ldbu	r2,-25298(gp)
  802d08:	10803fcc 	andi	r2,r2,255
  802d0c:	1080201c 	xori	r2,r2,128
  802d10:	10bfe004 	addi	r2,r2,-128
  802d14:	1000051e 	bne	r2,zero,802d2c <tick+0x2358>
  802d18:	d0a75583 	ldbu	r2,-25258(gp)
  802d1c:	10803fcc 	andi	r2,r2,255
  802d20:	1080201c 	xori	r2,r2,128
  802d24:	10bfe004 	addi	r2,r2,-128
  802d28:	10000226 	beq	r2,zero,802d34 <tick+0x2360>
  802d2c:	00800044 	movi	r2,1
  802d30:	00000106 	br	802d38 <tick+0x2364>
  802d34:	0005883a 	mov	r2,zero
  802d38:	d0a77445 	stb	r2,-25135(gp)
      g124_e1 =(!((g4||g12||g21||g30||g46||g54||g70||g78||g118||g124_e1_fix)));
  802d3c:	d0a73683 	ldbu	r2,-25382(gp)
  802d40:	10803fcc 	andi	r2,r2,255
  802d44:	1080201c 	xori	r2,r2,128
  802d48:	10bfe004 	addi	r2,r2,-128
  802d4c:	10002f1e 	bne	r2,zero,802e0c <tick+0x2438>
  802d50:	d0a74443 	ldbu	r2,-25327(gp)
  802d54:	10803fcc 	andi	r2,r2,255
  802d58:	1080201c 	xori	r2,r2,128
  802d5c:	10bfe004 	addi	r2,r2,-128
  802d60:	10002a1e 	bne	r2,zero,802e0c <tick+0x2438>
  802d64:	d0a74e03 	ldbu	r2,-25288(gp)
  802d68:	10803fcc 	andi	r2,r2,255
  802d6c:	1080201c 	xori	r2,r2,128
  802d70:	10bfe004 	addi	r2,r2,-128
  802d74:	1000251e 	bne	r2,zero,802e0c <tick+0x2438>
  802d78:	d0a76f43 	ldbu	r2,-25155(gp)
  802d7c:	10803fcc 	andi	r2,r2,255
  802d80:	1080201c 	xori	r2,r2,128
  802d84:	10bfe004 	addi	r2,r2,-128
  802d88:	1000201e 	bne	r2,zero,802e0c <tick+0x2438>
  802d8c:	d0a76483 	ldbu	r2,-25198(gp)
  802d90:	10803fcc 	andi	r2,r2,255
  802d94:	1080201c 	xori	r2,r2,128
  802d98:	10bfe004 	addi	r2,r2,-128
  802d9c:	10001b1e 	bne	r2,zero,802e0c <tick+0x2438>
  802da0:	d0a75283 	ldbu	r2,-25270(gp)
  802da4:	10803fcc 	andi	r2,r2,255
  802da8:	1080201c 	xori	r2,r2,128
  802dac:	10bfe004 	addi	r2,r2,-128
  802db0:	1000161e 	bne	r2,zero,802e0c <tick+0x2438>
  802db4:	d0a76c03 	ldbu	r2,-25168(gp)
  802db8:	10803fcc 	andi	r2,r2,255
  802dbc:	1080201c 	xori	r2,r2,128
  802dc0:	10bfe004 	addi	r2,r2,-128
  802dc4:	1000111e 	bne	r2,zero,802e0c <tick+0x2438>
  802dc8:	d0a75783 	ldbu	r2,-25250(gp)
  802dcc:	10803fcc 	andi	r2,r2,255
  802dd0:	1080201c 	xori	r2,r2,128
  802dd4:	10bfe004 	addi	r2,r2,-128
  802dd8:	10000c1e 	bne	r2,zero,802e0c <tick+0x2438>
  802ddc:	d0a74943 	ldbu	r2,-25307(gp)
  802de0:	10803fcc 	andi	r2,r2,255
  802de4:	1080201c 	xori	r2,r2,128
  802de8:	10bfe004 	addi	r2,r2,-128
  802dec:	1000071e 	bne	r2,zero,802e0c <tick+0x2438>
  802df0:	d0a77443 	ldbu	r2,-25135(gp)
  802df4:	10803fcc 	andi	r2,r2,255
  802df8:	1080201c 	xori	r2,r2,128
  802dfc:	10bfe004 	addi	r2,r2,-128
  802e00:	1000021e 	bne	r2,zero,802e0c <tick+0x2438>
  802e04:	00800044 	movi	r2,1
  802e08:	00000106 	br	802e10 <tick+0x243c>
  802e0c:	0005883a 	mov	r2,zero
  802e10:	d0a76405 	stb	r2,-25200(gp)
      g128_e2 =(!(g127));
  802e14:	d0a73b43 	ldbu	r2,-25363(gp)
  802e18:	10803fcc 	andi	r2,r2,255
  802e1c:	1080201c 	xori	r2,r2,128
  802e20:	10bfe004 	addi	r2,r2,-128
  802e24:	1005003a 	cmpeq	r2,r2,zero
  802e28:	d0a74785 	stb	r2,-25314(gp)
      g132_e3 =(!(g131));
  802e2c:	d0a756c3 	ldbu	r2,-25253(gp)
  802e30:	10803fcc 	andi	r2,r2,255
  802e34:	1080201c 	xori	r2,r2,128
  802e38:	10bfe004 	addi	r2,r2,-128
  802e3c:	1005003a 	cmpeq	r2,r2,zero
  802e40:	d0a76645 	stb	r2,-25191(gp)
   }
   PRE_g3 = g3;
  802e44:	d0a739c3 	ldbu	r2,-25369(gp)
  802e48:	d0a73d05 	stb	r2,-25356(gp)
   PRE_g5 = g5;
  802e4c:	d0a74ec3 	ldbu	r2,-25285(gp)
  802e50:	d0a776c5 	stb	r2,-25125(gp)
   PRE_g11 = g11;
  802e54:	d0a77243 	ldbu	r2,-25143(gp)
  802e58:	d0a75d85 	stb	r2,-25226(gp)
   PRE_g14 = g14;
  802e5c:	d0a75443 	ldbu	r2,-25263(gp)
  802e60:	d0a76385 	stb	r2,-25202(gp)
   PRE_g20 = g20;
  802e64:	d0a75ec3 	ldbu	r2,-25221(gp)
  802e68:	d0a74105 	stb	r2,-25340(gp)
   PRE_g22 = g22;
  802e6c:	d0a772c3 	ldbu	r2,-25141(gp)
  802e70:	d0a759c5 	stb	r2,-25241(gp)
   PRE_g29 = g29;
  802e74:	d0a778c3 	ldbu	r2,-25117(gp)
  802e78:	d0a73d85 	stb	r2,-25354(gp)
   PRE_g32 = g32;
  802e7c:	d0a774c3 	ldbu	r2,-25133(gp)
  802e80:	d0a73f45 	stb	r2,-25347(gp)
   PRE_g34 = g34;
  802e84:	d0a74e83 	ldbu	r2,-25286(gp)
  802e88:	d0a74645 	stb	r2,-25319(gp)
   PRE_g37 = g37;
  802e8c:	d0a74743 	ldbu	r2,-25315(gp)
  802e90:	d0a77dc5 	stb	r2,-25097(gp)
   PRE_g45 = g45;
  802e94:	d0a77543 	ldbu	r2,-25131(gp)
  802e98:	d0a77645 	stb	r2,-25127(gp)
   PRE_g47 = g47;
  802e9c:	d0a73a43 	ldbu	r2,-25367(gp)
  802ea0:	d0a760c5 	stb	r2,-25213(gp)
   PRE_g53 = g53;
  802ea4:	d0a76b03 	ldbu	r2,-25172(gp)
  802ea8:	d0a74a45 	stb	r2,-25303(gp)
   PRE_g56 = g56;
  802eac:	d0a75643 	ldbu	r2,-25255(gp)
  802eb0:	d0a73f05 	stb	r2,-25348(gp)
   PRE_g60 = g60;
  802eb4:	d0a75f43 	ldbu	r2,-25219(gp)
  802eb8:	d0a767c5 	stb	r2,-25185(gp)
   PRE_g69 = g69;
  802ebc:	d0a77cc3 	ldbu	r2,-25101(gp)
  802ec0:	d0a743c5 	stb	r2,-25329(gp)
   PRE_g71 = g71;
  802ec4:	d0a74283 	ldbu	r2,-25334(gp)
  802ec8:	d0a75405 	stb	r2,-25264(gp)
   PRE_g77 = g77;
  802ecc:	d0a77483 	ldbu	r2,-25134(gp)
  802ed0:	d0a74605 	stb	r2,-25320(gp)
   PRE_g80 = g80;
  802ed4:	d0a75103 	ldbu	r2,-25276(gp)
  802ed8:	d0a75145 	stb	r2,-25275(gp)
   PRE_g86 = g86;
  802edc:	d0a76183 	ldbu	r2,-25210(gp)
  802ee0:	d0a76a85 	stb	r2,-25174(gp)
   PRE_g88 = g88;
  802ee4:	d0a77503 	ldbu	r2,-25132(gp)
  802ee8:	d0a76285 	stb	r2,-25206(gp)
   PRE_g95 = g95;
  802eec:	d0a76683 	ldbu	r2,-25190(gp)
  802ef0:	d0a73645 	stb	r2,-25383(gp)
   PRE_g97 = g97;
  802ef4:	d0a74483 	ldbu	r2,-25326(gp)
  802ef8:	d0a76145 	stb	r2,-25211(gp)
   PRE_g103 = g103;
  802efc:	d0a73a03 	ldbu	r2,-25368(gp)
  802f00:	d0a76785 	stb	r2,-25186(gp)
   PRE_g105 = g105;
  802f04:	d0a74bc3 	ldbu	r2,-25297(gp)
  802f08:	d0a77885 	stb	r2,-25118(gp)
   PRE_g111 = g111;
  802f0c:	d0a73743 	ldbu	r2,-25379(gp)
  802f10:	d0a74d85 	stb	r2,-25290(gp)
   PRE_g113 = g113;
  802f14:	d0a76883 	ldbu	r2,-25182(gp)
  802f18:	d0a76245 	stb	r2,-25207(gp)
   PRE_g117 = g117;
  802f1c:	d0a74cc3 	ldbu	r2,-25293(gp)
  802f20:	d0a77c45 	stb	r2,-25103(gp)
   PRE_g121 = g121;
  802f24:	d0a77703 	ldbu	r2,-25124(gp)
  802f28:	d0a73e85 	stb	r2,-25350(gp)
   PRE_g126 = g126;
  802f2c:	d0a742c3 	ldbu	r2,-25333(gp)
  802f30:	d0a75a45 	stb	r2,-25239(gp)
   PRE_g130 = g130;
  802f34:	d0a77683 	ldbu	r2,-25126(gp)
  802f38:	d0a76a05 	stb	r2,-25176(gp)
   _PRE_GO = _GO;
  802f3c:	d0a75c03 	ldbu	r2,-25232(gp)
  802f40:	10803fcc 	andi	r2,r2,255
  802f44:	1080201c 	xori	r2,r2,128
  802f48:	10bfe004 	addi	r2,r2,-128
  802f4c:	d0a73c15 	stw	r2,-25360(gp)
   return;
  802f50:	0001883a 	nop
}
  802f54:	e037883a 	mov	sp,fp
  802f58:	df000017 	ldw	fp,0(sp)
  802f5c:	dec00104 	addi	sp,sp,4
  802f60:	f800283a 	ret

00802f64 <_puts_r>:
  802f64:	defff604 	addi	sp,sp,-40
  802f68:	dc000715 	stw	r16,28(sp)
  802f6c:	2021883a 	mov	r16,r4
  802f70:	2809883a 	mov	r4,r5
  802f74:	dc400815 	stw	r17,32(sp)
  802f78:	dfc00915 	stw	ra,36(sp)
  802f7c:	2823883a 	mov	r17,r5
  802f80:	08030380 	call	803038 <strlen>
  802f84:	10c00044 	addi	r3,r2,1
  802f88:	d8800115 	stw	r2,4(sp)
  802f8c:	00802074 	movhi	r2,129
  802f90:	10a7b604 	addi	r2,r2,-24872
  802f94:	d8800215 	stw	r2,8(sp)
  802f98:	00800044 	movi	r2,1
  802f9c:	d8800315 	stw	r2,12(sp)
  802fa0:	00800084 	movi	r2,2
  802fa4:	dc400015 	stw	r17,0(sp)
  802fa8:	d8c00615 	stw	r3,24(sp)
  802fac:	dec00415 	stw	sp,16(sp)
  802fb0:	d8800515 	stw	r2,20(sp)
  802fb4:	80000226 	beq	r16,zero,802fc0 <_puts_r+0x5c>
  802fb8:	80800e17 	ldw	r2,56(r16)
  802fbc:	10001426 	beq	r2,zero,803010 <_puts_r+0xac>
  802fc0:	81400217 	ldw	r5,8(r16)
  802fc4:	2880030b 	ldhu	r2,12(r5)
  802fc8:	10c8000c 	andi	r3,r2,8192
  802fcc:	1800061e 	bne	r3,zero,802fe8 <_puts_r+0x84>
  802fd0:	29001917 	ldw	r4,100(r5)
  802fd4:	00f7ffc4 	movi	r3,-8193
  802fd8:	10880014 	ori	r2,r2,8192
  802fdc:	20c6703a 	and	r3,r4,r3
  802fe0:	2880030d 	sth	r2,12(r5)
  802fe4:	28c01915 	stw	r3,100(r5)
  802fe8:	d9800404 	addi	r6,sp,16
  802fec:	8009883a 	mov	r4,r16
  802ff0:	08034700 	call	803470 <__sfvwrite_r>
  802ff4:	1000091e 	bne	r2,zero,80301c <_puts_r+0xb8>
  802ff8:	00800284 	movi	r2,10
  802ffc:	dfc00917 	ldw	ra,36(sp)
  803000:	dc400817 	ldw	r17,32(sp)
  803004:	dc000717 	ldw	r16,28(sp)
  803008:	dec00a04 	addi	sp,sp,40
  80300c:	f800283a 	ret
  803010:	8009883a 	mov	r4,r16
  803014:	08034200 	call	803420 <__sinit>
  803018:	003fe906 	br	802fc0 <__alt_mem_onchip_mem+0xff782fc0>
  80301c:	00bfffc4 	movi	r2,-1
  803020:	003ff606 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>

00803024 <puts>:
  803024:	00802074 	movhi	r2,129
  803028:	10af7004 	addi	r2,r2,-16960
  80302c:	200b883a 	mov	r5,r4
  803030:	11000017 	ldw	r4,0(r2)
  803034:	0802f641 	jmpi	802f64 <_puts_r>

00803038 <strlen>:
  803038:	208000cc 	andi	r2,r4,3
  80303c:	10002026 	beq	r2,zero,8030c0 <strlen+0x88>
  803040:	20800007 	ldb	r2,0(r4)
  803044:	10002026 	beq	r2,zero,8030c8 <strlen+0x90>
  803048:	2005883a 	mov	r2,r4
  80304c:	00000206 	br	803058 <strlen+0x20>
  803050:	10c00007 	ldb	r3,0(r2)
  803054:	18001826 	beq	r3,zero,8030b8 <strlen+0x80>
  803058:	10800044 	addi	r2,r2,1
  80305c:	10c000cc 	andi	r3,r2,3
  803060:	183ffb1e 	bne	r3,zero,803050 <__alt_mem_onchip_mem+0xff783050>
  803064:	10c00017 	ldw	r3,0(r2)
  803068:	01ffbff4 	movhi	r7,65279
  80306c:	39ffbfc4 	addi	r7,r7,-257
  803070:	00ca303a 	nor	r5,zero,r3
  803074:	01a02074 	movhi	r6,32897
  803078:	19c7883a 	add	r3,r3,r7
  80307c:	31a02004 	addi	r6,r6,-32640
  803080:	1946703a 	and	r3,r3,r5
  803084:	1986703a 	and	r3,r3,r6
  803088:	1800091e 	bne	r3,zero,8030b0 <strlen+0x78>
  80308c:	10800104 	addi	r2,r2,4
  803090:	10c00017 	ldw	r3,0(r2)
  803094:	19cb883a 	add	r5,r3,r7
  803098:	00c6303a 	nor	r3,zero,r3
  80309c:	28c6703a 	and	r3,r5,r3
  8030a0:	1986703a 	and	r3,r3,r6
  8030a4:	183ff926 	beq	r3,zero,80308c <__alt_mem_onchip_mem+0xff78308c>
  8030a8:	00000106 	br	8030b0 <strlen+0x78>
  8030ac:	10800044 	addi	r2,r2,1
  8030b0:	10c00007 	ldb	r3,0(r2)
  8030b4:	183ffd1e 	bne	r3,zero,8030ac <__alt_mem_onchip_mem+0xff7830ac>
  8030b8:	1105c83a 	sub	r2,r2,r4
  8030bc:	f800283a 	ret
  8030c0:	2005883a 	mov	r2,r4
  8030c4:	003fe706 	br	803064 <__alt_mem_onchip_mem+0xff783064>
  8030c8:	0005883a 	mov	r2,zero
  8030cc:	f800283a 	ret

008030d0 <__fp_unlock>:
  8030d0:	0005883a 	mov	r2,zero
  8030d4:	f800283a 	ret

008030d8 <_cleanup_r>:
  8030d8:	01402034 	movhi	r5,128
  8030dc:	29541b04 	addi	r5,r5,20588
  8030e0:	08039f01 	jmpi	8039f0 <_fwalk_reent>

008030e4 <__sinit.part.1>:
  8030e4:	defff704 	addi	sp,sp,-36
  8030e8:	00c02034 	movhi	r3,128
  8030ec:	dfc00815 	stw	ra,32(sp)
  8030f0:	ddc00715 	stw	r23,28(sp)
  8030f4:	dd800615 	stw	r22,24(sp)
  8030f8:	dd400515 	stw	r21,20(sp)
  8030fc:	dd000415 	stw	r20,16(sp)
  803100:	dcc00315 	stw	r19,12(sp)
  803104:	dc800215 	stw	r18,8(sp)
  803108:	dc400115 	stw	r17,4(sp)
  80310c:	dc000015 	stw	r16,0(sp)
  803110:	18cc3604 	addi	r3,r3,12504
  803114:	24000117 	ldw	r16,4(r4)
  803118:	20c00f15 	stw	r3,60(r4)
  80311c:	2080bb04 	addi	r2,r4,748
  803120:	00c000c4 	movi	r3,3
  803124:	20c0b915 	stw	r3,740(r4)
  803128:	2080ba15 	stw	r2,744(r4)
  80312c:	2000b815 	stw	zero,736(r4)
  803130:	05c00204 	movi	r23,8
  803134:	00800104 	movi	r2,4
  803138:	2025883a 	mov	r18,r4
  80313c:	b80d883a 	mov	r6,r23
  803140:	81001704 	addi	r4,r16,92
  803144:	000b883a 	mov	r5,zero
  803148:	80000015 	stw	zero,0(r16)
  80314c:	80000115 	stw	zero,4(r16)
  803150:	80000215 	stw	zero,8(r16)
  803154:	8080030d 	sth	r2,12(r16)
  803158:	80001915 	stw	zero,100(r16)
  80315c:	8000038d 	sth	zero,14(r16)
  803160:	80000415 	stw	zero,16(r16)
  803164:	80000515 	stw	zero,20(r16)
  803168:	80000615 	stw	zero,24(r16)
  80316c:	08046480 	call	804648 <memset>
  803170:	05802034 	movhi	r22,128
  803174:	94400217 	ldw	r17,8(r18)
  803178:	05402034 	movhi	r21,128
  80317c:	05002034 	movhi	r20,128
  803180:	04c02034 	movhi	r19,128
  803184:	b5934a04 	addi	r22,r22,19752
  803188:	ad536104 	addi	r21,r21,19844
  80318c:	a5138004 	addi	r20,r20,19968
  803190:	9cd39704 	addi	r19,r19,20060
  803194:	85800815 	stw	r22,32(r16)
  803198:	85400915 	stw	r21,36(r16)
  80319c:	85000a15 	stw	r20,40(r16)
  8031a0:	84c00b15 	stw	r19,44(r16)
  8031a4:	84000715 	stw	r16,28(r16)
  8031a8:	00800284 	movi	r2,10
  8031ac:	8880030d 	sth	r2,12(r17)
  8031b0:	00800044 	movi	r2,1
  8031b4:	b80d883a 	mov	r6,r23
  8031b8:	89001704 	addi	r4,r17,92
  8031bc:	000b883a 	mov	r5,zero
  8031c0:	88000015 	stw	zero,0(r17)
  8031c4:	88000115 	stw	zero,4(r17)
  8031c8:	88000215 	stw	zero,8(r17)
  8031cc:	88001915 	stw	zero,100(r17)
  8031d0:	8880038d 	sth	r2,14(r17)
  8031d4:	88000415 	stw	zero,16(r17)
  8031d8:	88000515 	stw	zero,20(r17)
  8031dc:	88000615 	stw	zero,24(r17)
  8031e0:	08046480 	call	804648 <memset>
  8031e4:	94000317 	ldw	r16,12(r18)
  8031e8:	00800484 	movi	r2,18
  8031ec:	8c400715 	stw	r17,28(r17)
  8031f0:	8d800815 	stw	r22,32(r17)
  8031f4:	8d400915 	stw	r21,36(r17)
  8031f8:	8d000a15 	stw	r20,40(r17)
  8031fc:	8cc00b15 	stw	r19,44(r17)
  803200:	8080030d 	sth	r2,12(r16)
  803204:	00800084 	movi	r2,2
  803208:	80000015 	stw	zero,0(r16)
  80320c:	80000115 	stw	zero,4(r16)
  803210:	80000215 	stw	zero,8(r16)
  803214:	80001915 	stw	zero,100(r16)
  803218:	8080038d 	sth	r2,14(r16)
  80321c:	80000415 	stw	zero,16(r16)
  803220:	80000515 	stw	zero,20(r16)
  803224:	80000615 	stw	zero,24(r16)
  803228:	b80d883a 	mov	r6,r23
  80322c:	000b883a 	mov	r5,zero
  803230:	81001704 	addi	r4,r16,92
  803234:	08046480 	call	804648 <memset>
  803238:	00800044 	movi	r2,1
  80323c:	84000715 	stw	r16,28(r16)
  803240:	85800815 	stw	r22,32(r16)
  803244:	85400915 	stw	r21,36(r16)
  803248:	85000a15 	stw	r20,40(r16)
  80324c:	84c00b15 	stw	r19,44(r16)
  803250:	90800e15 	stw	r2,56(r18)
  803254:	dfc00817 	ldw	ra,32(sp)
  803258:	ddc00717 	ldw	r23,28(sp)
  80325c:	dd800617 	ldw	r22,24(sp)
  803260:	dd400517 	ldw	r21,20(sp)
  803264:	dd000417 	ldw	r20,16(sp)
  803268:	dcc00317 	ldw	r19,12(sp)
  80326c:	dc800217 	ldw	r18,8(sp)
  803270:	dc400117 	ldw	r17,4(sp)
  803274:	dc000017 	ldw	r16,0(sp)
  803278:	dec00904 	addi	sp,sp,36
  80327c:	f800283a 	ret

00803280 <__fp_lock>:
  803280:	0005883a 	mov	r2,zero
  803284:	f800283a 	ret

00803288 <__sfmoreglue>:
  803288:	defffc04 	addi	sp,sp,-16
  80328c:	dc400115 	stw	r17,4(sp)
  803290:	2c7fffc4 	addi	r17,r5,-1
  803294:	8c401a24 	muli	r17,r17,104
  803298:	dc800215 	stw	r18,8(sp)
  80329c:	2825883a 	mov	r18,r5
  8032a0:	89401d04 	addi	r5,r17,116
  8032a4:	dc000015 	stw	r16,0(sp)
  8032a8:	dfc00315 	stw	ra,12(sp)
  8032ac:	0803ab40 	call	803ab4 <_malloc_r>
  8032b0:	1021883a 	mov	r16,r2
  8032b4:	10000726 	beq	r2,zero,8032d4 <__sfmoreglue+0x4c>
  8032b8:	11000304 	addi	r4,r2,12
  8032bc:	10000015 	stw	zero,0(r2)
  8032c0:	14800115 	stw	r18,4(r2)
  8032c4:	11000215 	stw	r4,8(r2)
  8032c8:	89801a04 	addi	r6,r17,104
  8032cc:	000b883a 	mov	r5,zero
  8032d0:	08046480 	call	804648 <memset>
  8032d4:	8005883a 	mov	r2,r16
  8032d8:	dfc00317 	ldw	ra,12(sp)
  8032dc:	dc800217 	ldw	r18,8(sp)
  8032e0:	dc400117 	ldw	r17,4(sp)
  8032e4:	dc000017 	ldw	r16,0(sp)
  8032e8:	dec00404 	addi	sp,sp,16
  8032ec:	f800283a 	ret

008032f0 <__sfp>:
  8032f0:	defffb04 	addi	sp,sp,-20
  8032f4:	dc000015 	stw	r16,0(sp)
  8032f8:	04002074 	movhi	r16,129
  8032fc:	842f6f04 	addi	r16,r16,-16964
  803300:	dcc00315 	stw	r19,12(sp)
  803304:	2027883a 	mov	r19,r4
  803308:	81000017 	ldw	r4,0(r16)
  80330c:	dfc00415 	stw	ra,16(sp)
  803310:	dc800215 	stw	r18,8(sp)
  803314:	20800e17 	ldw	r2,56(r4)
  803318:	dc400115 	stw	r17,4(sp)
  80331c:	1000021e 	bne	r2,zero,803328 <__sfp+0x38>
  803320:	08030e40 	call	8030e4 <__sinit.part.1>
  803324:	81000017 	ldw	r4,0(r16)
  803328:	2480b804 	addi	r18,r4,736
  80332c:	047fffc4 	movi	r17,-1
  803330:	91000117 	ldw	r4,4(r18)
  803334:	94000217 	ldw	r16,8(r18)
  803338:	213fffc4 	addi	r4,r4,-1
  80333c:	20000a16 	blt	r4,zero,803368 <__sfp+0x78>
  803340:	8080030f 	ldh	r2,12(r16)
  803344:	10000c26 	beq	r2,zero,803378 <__sfp+0x88>
  803348:	80c01d04 	addi	r3,r16,116
  80334c:	00000206 	br	803358 <__sfp+0x68>
  803350:	18bfe60f 	ldh	r2,-104(r3)
  803354:	10000826 	beq	r2,zero,803378 <__sfp+0x88>
  803358:	213fffc4 	addi	r4,r4,-1
  80335c:	1c3ffd04 	addi	r16,r3,-12
  803360:	18c01a04 	addi	r3,r3,104
  803364:	247ffa1e 	bne	r4,r17,803350 <__alt_mem_onchip_mem+0xff783350>
  803368:	90800017 	ldw	r2,0(r18)
  80336c:	10001d26 	beq	r2,zero,8033e4 <__sfp+0xf4>
  803370:	1025883a 	mov	r18,r2
  803374:	003fee06 	br	803330 <__alt_mem_onchip_mem+0xff783330>
  803378:	00bfffc4 	movi	r2,-1
  80337c:	8080038d 	sth	r2,14(r16)
  803380:	00800044 	movi	r2,1
  803384:	8080030d 	sth	r2,12(r16)
  803388:	80001915 	stw	zero,100(r16)
  80338c:	80000015 	stw	zero,0(r16)
  803390:	80000215 	stw	zero,8(r16)
  803394:	80000115 	stw	zero,4(r16)
  803398:	80000415 	stw	zero,16(r16)
  80339c:	80000515 	stw	zero,20(r16)
  8033a0:	80000615 	stw	zero,24(r16)
  8033a4:	01800204 	movi	r6,8
  8033a8:	000b883a 	mov	r5,zero
  8033ac:	81001704 	addi	r4,r16,92
  8033b0:	08046480 	call	804648 <memset>
  8033b4:	8005883a 	mov	r2,r16
  8033b8:	80000c15 	stw	zero,48(r16)
  8033bc:	80000d15 	stw	zero,52(r16)
  8033c0:	80001115 	stw	zero,68(r16)
  8033c4:	80001215 	stw	zero,72(r16)
  8033c8:	dfc00417 	ldw	ra,16(sp)
  8033cc:	dcc00317 	ldw	r19,12(sp)
  8033d0:	dc800217 	ldw	r18,8(sp)
  8033d4:	dc400117 	ldw	r17,4(sp)
  8033d8:	dc000017 	ldw	r16,0(sp)
  8033dc:	dec00504 	addi	sp,sp,20
  8033e0:	f800283a 	ret
  8033e4:	01400104 	movi	r5,4
  8033e8:	9809883a 	mov	r4,r19
  8033ec:	08032880 	call	803288 <__sfmoreglue>
  8033f0:	90800015 	stw	r2,0(r18)
  8033f4:	103fde1e 	bne	r2,zero,803370 <__alt_mem_onchip_mem+0xff783370>
  8033f8:	00800304 	movi	r2,12
  8033fc:	98800015 	stw	r2,0(r19)
  803400:	0005883a 	mov	r2,zero
  803404:	003ff006 	br	8033c8 <__alt_mem_onchip_mem+0xff7833c8>

00803408 <_cleanup>:
  803408:	00802074 	movhi	r2,129
  80340c:	10af6f04 	addi	r2,r2,-16964
  803410:	11000017 	ldw	r4,0(r2)
  803414:	01402034 	movhi	r5,128
  803418:	29541b04 	addi	r5,r5,20588
  80341c:	08039f01 	jmpi	8039f0 <_fwalk_reent>

00803420 <__sinit>:
  803420:	20800e17 	ldw	r2,56(r4)
  803424:	10000126 	beq	r2,zero,80342c <__sinit+0xc>
  803428:	f800283a 	ret
  80342c:	08030e41 	jmpi	8030e4 <__sinit.part.1>

00803430 <__sfp_lock_acquire>:
  803430:	f800283a 	ret

00803434 <__sfp_lock_release>:
  803434:	f800283a 	ret

00803438 <__sinit_lock_acquire>:
  803438:	f800283a 	ret

0080343c <__sinit_lock_release>:
  80343c:	f800283a 	ret

00803440 <__fp_lock_all>:
  803440:	00802074 	movhi	r2,129
  803444:	10af7004 	addi	r2,r2,-16960
  803448:	11000017 	ldw	r4,0(r2)
  80344c:	01402034 	movhi	r5,128
  803450:	294ca004 	addi	r5,r5,12928
  803454:	080392c1 	jmpi	80392c <_fwalk>

00803458 <__fp_unlock_all>:
  803458:	00802074 	movhi	r2,129
  80345c:	10af7004 	addi	r2,r2,-16960
  803460:	11000017 	ldw	r4,0(r2)
  803464:	01402034 	movhi	r5,128
  803468:	294c3404 	addi	r5,r5,12496
  80346c:	080392c1 	jmpi	80392c <_fwalk>

00803470 <__sfvwrite_r>:
  803470:	30800217 	ldw	r2,8(r6)
  803474:	10006726 	beq	r2,zero,803614 <__sfvwrite_r+0x1a4>
  803478:	28c0030b 	ldhu	r3,12(r5)
  80347c:	defff404 	addi	sp,sp,-48
  803480:	dd400715 	stw	r21,28(sp)
  803484:	dd000615 	stw	r20,24(sp)
  803488:	dc000215 	stw	r16,8(sp)
  80348c:	dfc00b15 	stw	ra,44(sp)
  803490:	df000a15 	stw	fp,40(sp)
  803494:	ddc00915 	stw	r23,36(sp)
  803498:	dd800815 	stw	r22,32(sp)
  80349c:	dcc00515 	stw	r19,20(sp)
  8034a0:	dc800415 	stw	r18,16(sp)
  8034a4:	dc400315 	stw	r17,12(sp)
  8034a8:	1880020c 	andi	r2,r3,8
  8034ac:	2821883a 	mov	r16,r5
  8034b0:	202b883a 	mov	r21,r4
  8034b4:	3029883a 	mov	r20,r6
  8034b8:	10002726 	beq	r2,zero,803558 <__sfvwrite_r+0xe8>
  8034bc:	28800417 	ldw	r2,16(r5)
  8034c0:	10002526 	beq	r2,zero,803558 <__sfvwrite_r+0xe8>
  8034c4:	1880008c 	andi	r2,r3,2
  8034c8:	a4400017 	ldw	r17,0(r20)
  8034cc:	10002a26 	beq	r2,zero,803578 <__sfvwrite_r+0x108>
  8034d0:	05a00034 	movhi	r22,32768
  8034d4:	0027883a 	mov	r19,zero
  8034d8:	0025883a 	mov	r18,zero
  8034dc:	b5bf0004 	addi	r22,r22,-1024
  8034e0:	980d883a 	mov	r6,r19
  8034e4:	a809883a 	mov	r4,r21
  8034e8:	90004626 	beq	r18,zero,803604 <__sfvwrite_r+0x194>
  8034ec:	900f883a 	mov	r7,r18
  8034f0:	b480022e 	bgeu	r22,r18,8034fc <__sfvwrite_r+0x8c>
  8034f4:	01e00034 	movhi	r7,32768
  8034f8:	39ff0004 	addi	r7,r7,-1024
  8034fc:	80800917 	ldw	r2,36(r16)
  803500:	81400717 	ldw	r5,28(r16)
  803504:	103ee83a 	callr	r2
  803508:	0080570e 	bge	zero,r2,803668 <__sfvwrite_r+0x1f8>
  80350c:	a0c00217 	ldw	r3,8(r20)
  803510:	98a7883a 	add	r19,r19,r2
  803514:	90a5c83a 	sub	r18,r18,r2
  803518:	1885c83a 	sub	r2,r3,r2
  80351c:	a0800215 	stw	r2,8(r20)
  803520:	103fef1e 	bne	r2,zero,8034e0 <__alt_mem_onchip_mem+0xff7834e0>
  803524:	0005883a 	mov	r2,zero
  803528:	dfc00b17 	ldw	ra,44(sp)
  80352c:	df000a17 	ldw	fp,40(sp)
  803530:	ddc00917 	ldw	r23,36(sp)
  803534:	dd800817 	ldw	r22,32(sp)
  803538:	dd400717 	ldw	r21,28(sp)
  80353c:	dd000617 	ldw	r20,24(sp)
  803540:	dcc00517 	ldw	r19,20(sp)
  803544:	dc800417 	ldw	r18,16(sp)
  803548:	dc400317 	ldw	r17,12(sp)
  80354c:	dc000217 	ldw	r16,8(sp)
  803550:	dec00c04 	addi	sp,sp,48
  803554:	f800283a 	ret
  803558:	800b883a 	mov	r5,r16
  80355c:	a809883a 	mov	r4,r21
  803560:	0804ec40 	call	804ec4 <__swsetup_r>
  803564:	1000eb1e 	bne	r2,zero,803914 <__sfvwrite_r+0x4a4>
  803568:	80c0030b 	ldhu	r3,12(r16)
  80356c:	a4400017 	ldw	r17,0(r20)
  803570:	1880008c 	andi	r2,r3,2
  803574:	103fd61e 	bne	r2,zero,8034d0 <__alt_mem_onchip_mem+0xff7834d0>
  803578:	1880004c 	andi	r2,r3,1
  80357c:	10003f1e 	bne	r2,zero,80367c <__sfvwrite_r+0x20c>
  803580:	0039883a 	mov	fp,zero
  803584:	0025883a 	mov	r18,zero
  803588:	90001a26 	beq	r18,zero,8035f4 <__sfvwrite_r+0x184>
  80358c:	1880800c 	andi	r2,r3,512
  803590:	84c00217 	ldw	r19,8(r16)
  803594:	10002126 	beq	r2,zero,80361c <__sfvwrite_r+0x1ac>
  803598:	982f883a 	mov	r23,r19
  80359c:	94c09336 	bltu	r18,r19,8037ec <__sfvwrite_r+0x37c>
  8035a0:	1881200c 	andi	r2,r3,1152
  8035a4:	10009e1e 	bne	r2,zero,803820 <__sfvwrite_r+0x3b0>
  8035a8:	81000017 	ldw	r4,0(r16)
  8035ac:	b80d883a 	mov	r6,r23
  8035b0:	e00b883a 	mov	r5,fp
  8035b4:	08044ec0 	call	8044ec <memmove>
  8035b8:	80c00217 	ldw	r3,8(r16)
  8035bc:	81000017 	ldw	r4,0(r16)
  8035c0:	9005883a 	mov	r2,r18
  8035c4:	1ce7c83a 	sub	r19,r3,r19
  8035c8:	25cf883a 	add	r7,r4,r23
  8035cc:	84c00215 	stw	r19,8(r16)
  8035d0:	81c00015 	stw	r7,0(r16)
  8035d4:	a0c00217 	ldw	r3,8(r20)
  8035d8:	e0b9883a 	add	fp,fp,r2
  8035dc:	90a5c83a 	sub	r18,r18,r2
  8035e0:	18a7c83a 	sub	r19,r3,r2
  8035e4:	a4c00215 	stw	r19,8(r20)
  8035e8:	983fce26 	beq	r19,zero,803524 <__alt_mem_onchip_mem+0xff783524>
  8035ec:	80c0030b 	ldhu	r3,12(r16)
  8035f0:	903fe61e 	bne	r18,zero,80358c <__alt_mem_onchip_mem+0xff78358c>
  8035f4:	8f000017 	ldw	fp,0(r17)
  8035f8:	8c800117 	ldw	r18,4(r17)
  8035fc:	8c400204 	addi	r17,r17,8
  803600:	003fe106 	br	803588 <__alt_mem_onchip_mem+0xff783588>
  803604:	8cc00017 	ldw	r19,0(r17)
  803608:	8c800117 	ldw	r18,4(r17)
  80360c:	8c400204 	addi	r17,r17,8
  803610:	003fb306 	br	8034e0 <__alt_mem_onchip_mem+0xff7834e0>
  803614:	0005883a 	mov	r2,zero
  803618:	f800283a 	ret
  80361c:	81000017 	ldw	r4,0(r16)
  803620:	80800417 	ldw	r2,16(r16)
  803624:	11005736 	bltu	r2,r4,803784 <__sfvwrite_r+0x314>
  803628:	85c00517 	ldw	r23,20(r16)
  80362c:	95c05536 	bltu	r18,r23,803784 <__sfvwrite_r+0x314>
  803630:	00a00034 	movhi	r2,32768
  803634:	10bfffc4 	addi	r2,r2,-1
  803638:	9009883a 	mov	r4,r18
  80363c:	1480012e 	bgeu	r2,r18,803644 <__sfvwrite_r+0x1d4>
  803640:	1009883a 	mov	r4,r2
  803644:	b80b883a 	mov	r5,r23
  803648:	0805b780 	call	805b78 <__divsi3>
  80364c:	15cf383a 	mul	r7,r2,r23
  803650:	81400717 	ldw	r5,28(r16)
  803654:	80800917 	ldw	r2,36(r16)
  803658:	e00d883a 	mov	r6,fp
  80365c:	a809883a 	mov	r4,r21
  803660:	103ee83a 	callr	r2
  803664:	00bfdb16 	blt	zero,r2,8035d4 <__alt_mem_onchip_mem+0xff7835d4>
  803668:	8080030b 	ldhu	r2,12(r16)
  80366c:	10801014 	ori	r2,r2,64
  803670:	8080030d 	sth	r2,12(r16)
  803674:	00bfffc4 	movi	r2,-1
  803678:	003fab06 	br	803528 <__alt_mem_onchip_mem+0xff783528>
  80367c:	0027883a 	mov	r19,zero
  803680:	0011883a 	mov	r8,zero
  803684:	0039883a 	mov	fp,zero
  803688:	0025883a 	mov	r18,zero
  80368c:	90001f26 	beq	r18,zero,80370c <__sfvwrite_r+0x29c>
  803690:	40005a26 	beq	r8,zero,8037fc <__sfvwrite_r+0x38c>
  803694:	982d883a 	mov	r22,r19
  803698:	94c0012e 	bgeu	r18,r19,8036a0 <__sfvwrite_r+0x230>
  80369c:	902d883a 	mov	r22,r18
  8036a0:	81000017 	ldw	r4,0(r16)
  8036a4:	80800417 	ldw	r2,16(r16)
  8036a8:	b02f883a 	mov	r23,r22
  8036ac:	81c00517 	ldw	r7,20(r16)
  8036b0:	1100032e 	bgeu	r2,r4,8036c0 <__sfvwrite_r+0x250>
  8036b4:	80c00217 	ldw	r3,8(r16)
  8036b8:	38c7883a 	add	r3,r7,r3
  8036bc:	1d801816 	blt	r3,r22,803720 <__sfvwrite_r+0x2b0>
  8036c0:	b1c03e16 	blt	r22,r7,8037bc <__sfvwrite_r+0x34c>
  8036c4:	80800917 	ldw	r2,36(r16)
  8036c8:	81400717 	ldw	r5,28(r16)
  8036cc:	e00d883a 	mov	r6,fp
  8036d0:	da000115 	stw	r8,4(sp)
  8036d4:	a809883a 	mov	r4,r21
  8036d8:	103ee83a 	callr	r2
  8036dc:	102f883a 	mov	r23,r2
  8036e0:	da000117 	ldw	r8,4(sp)
  8036e4:	00bfe00e 	bge	zero,r2,803668 <__alt_mem_onchip_mem+0xff783668>
  8036e8:	9de7c83a 	sub	r19,r19,r23
  8036ec:	98001f26 	beq	r19,zero,80376c <__sfvwrite_r+0x2fc>
  8036f0:	a0800217 	ldw	r2,8(r20)
  8036f4:	e5f9883a 	add	fp,fp,r23
  8036f8:	95e5c83a 	sub	r18,r18,r23
  8036fc:	15efc83a 	sub	r23,r2,r23
  803700:	a5c00215 	stw	r23,8(r20)
  803704:	b83f8726 	beq	r23,zero,803524 <__alt_mem_onchip_mem+0xff783524>
  803708:	903fe11e 	bne	r18,zero,803690 <__alt_mem_onchip_mem+0xff783690>
  80370c:	8f000017 	ldw	fp,0(r17)
  803710:	8c800117 	ldw	r18,4(r17)
  803714:	0011883a 	mov	r8,zero
  803718:	8c400204 	addi	r17,r17,8
  80371c:	003fdb06 	br	80368c <__alt_mem_onchip_mem+0xff78368c>
  803720:	180d883a 	mov	r6,r3
  803724:	e00b883a 	mov	r5,fp
  803728:	da000115 	stw	r8,4(sp)
  80372c:	d8c00015 	stw	r3,0(sp)
  803730:	08044ec0 	call	8044ec <memmove>
  803734:	d8c00017 	ldw	r3,0(sp)
  803738:	80800017 	ldw	r2,0(r16)
  80373c:	800b883a 	mov	r5,r16
  803740:	a809883a 	mov	r4,r21
  803744:	10c5883a 	add	r2,r2,r3
  803748:	80800015 	stw	r2,0(r16)
  80374c:	d8c00015 	stw	r3,0(sp)
  803750:	080538c0 	call	80538c <_fflush_r>
  803754:	d8c00017 	ldw	r3,0(sp)
  803758:	da000117 	ldw	r8,4(sp)
  80375c:	103fc21e 	bne	r2,zero,803668 <__alt_mem_onchip_mem+0xff783668>
  803760:	182f883a 	mov	r23,r3
  803764:	9de7c83a 	sub	r19,r19,r23
  803768:	983fe11e 	bne	r19,zero,8036f0 <__alt_mem_onchip_mem+0xff7836f0>
  80376c:	800b883a 	mov	r5,r16
  803770:	a809883a 	mov	r4,r21
  803774:	080538c0 	call	80538c <_fflush_r>
  803778:	103fbb1e 	bne	r2,zero,803668 <__alt_mem_onchip_mem+0xff783668>
  80377c:	0011883a 	mov	r8,zero
  803780:	003fdb06 	br	8036f0 <__alt_mem_onchip_mem+0xff7836f0>
  803784:	94c0012e 	bgeu	r18,r19,80378c <__sfvwrite_r+0x31c>
  803788:	9027883a 	mov	r19,r18
  80378c:	980d883a 	mov	r6,r19
  803790:	e00b883a 	mov	r5,fp
  803794:	08044ec0 	call	8044ec <memmove>
  803798:	80800217 	ldw	r2,8(r16)
  80379c:	80c00017 	ldw	r3,0(r16)
  8037a0:	14c5c83a 	sub	r2,r2,r19
  8037a4:	1cc7883a 	add	r3,r3,r19
  8037a8:	80800215 	stw	r2,8(r16)
  8037ac:	80c00015 	stw	r3,0(r16)
  8037b0:	10004326 	beq	r2,zero,8038c0 <__sfvwrite_r+0x450>
  8037b4:	9805883a 	mov	r2,r19
  8037b8:	003f8606 	br	8035d4 <__alt_mem_onchip_mem+0xff7835d4>
  8037bc:	b00d883a 	mov	r6,r22
  8037c0:	e00b883a 	mov	r5,fp
  8037c4:	da000115 	stw	r8,4(sp)
  8037c8:	08044ec0 	call	8044ec <memmove>
  8037cc:	80800217 	ldw	r2,8(r16)
  8037d0:	80c00017 	ldw	r3,0(r16)
  8037d4:	da000117 	ldw	r8,4(sp)
  8037d8:	1585c83a 	sub	r2,r2,r22
  8037dc:	1dad883a 	add	r22,r3,r22
  8037e0:	80800215 	stw	r2,8(r16)
  8037e4:	85800015 	stw	r22,0(r16)
  8037e8:	003fbf06 	br	8036e8 <__alt_mem_onchip_mem+0xff7836e8>
  8037ec:	81000017 	ldw	r4,0(r16)
  8037f0:	9027883a 	mov	r19,r18
  8037f4:	902f883a 	mov	r23,r18
  8037f8:	003f6c06 	br	8035ac <__alt_mem_onchip_mem+0xff7835ac>
  8037fc:	900d883a 	mov	r6,r18
  803800:	01400284 	movi	r5,10
  803804:	e009883a 	mov	r4,fp
  803808:	08042c00 	call	8042c0 <memchr>
  80380c:	10003e26 	beq	r2,zero,803908 <__sfvwrite_r+0x498>
  803810:	10800044 	addi	r2,r2,1
  803814:	1727c83a 	sub	r19,r2,fp
  803818:	02000044 	movi	r8,1
  80381c:	003f9d06 	br	803694 <__alt_mem_onchip_mem+0xff783694>
  803820:	80800517 	ldw	r2,20(r16)
  803824:	81400417 	ldw	r5,16(r16)
  803828:	81c00017 	ldw	r7,0(r16)
  80382c:	10a7883a 	add	r19,r2,r2
  803830:	9885883a 	add	r2,r19,r2
  803834:	1026d7fa 	srli	r19,r2,31
  803838:	396dc83a 	sub	r22,r7,r5
  80383c:	b1000044 	addi	r4,r22,1
  803840:	9885883a 	add	r2,r19,r2
  803844:	1027d07a 	srai	r19,r2,1
  803848:	2485883a 	add	r2,r4,r18
  80384c:	980d883a 	mov	r6,r19
  803850:	9880022e 	bgeu	r19,r2,80385c <__sfvwrite_r+0x3ec>
  803854:	1027883a 	mov	r19,r2
  803858:	100d883a 	mov	r6,r2
  80385c:	18c1000c 	andi	r3,r3,1024
  803860:	18001c26 	beq	r3,zero,8038d4 <__sfvwrite_r+0x464>
  803864:	300b883a 	mov	r5,r6
  803868:	a809883a 	mov	r4,r21
  80386c:	0803ab40 	call	803ab4 <_malloc_r>
  803870:	102f883a 	mov	r23,r2
  803874:	10002926 	beq	r2,zero,80391c <__sfvwrite_r+0x4ac>
  803878:	81400417 	ldw	r5,16(r16)
  80387c:	b00d883a 	mov	r6,r22
  803880:	1009883a 	mov	r4,r2
  803884:	08043a40 	call	8043a4 <memcpy>
  803888:	8080030b 	ldhu	r2,12(r16)
  80388c:	00fedfc4 	movi	r3,-1153
  803890:	10c4703a 	and	r2,r2,r3
  803894:	10802014 	ori	r2,r2,128
  803898:	8080030d 	sth	r2,12(r16)
  80389c:	bd89883a 	add	r4,r23,r22
  8038a0:	9d8fc83a 	sub	r7,r19,r22
  8038a4:	85c00415 	stw	r23,16(r16)
  8038a8:	84c00515 	stw	r19,20(r16)
  8038ac:	81000015 	stw	r4,0(r16)
  8038b0:	9027883a 	mov	r19,r18
  8038b4:	81c00215 	stw	r7,8(r16)
  8038b8:	902f883a 	mov	r23,r18
  8038bc:	003f3b06 	br	8035ac <__alt_mem_onchip_mem+0xff7835ac>
  8038c0:	800b883a 	mov	r5,r16
  8038c4:	a809883a 	mov	r4,r21
  8038c8:	080538c0 	call	80538c <_fflush_r>
  8038cc:	103fb926 	beq	r2,zero,8037b4 <__alt_mem_onchip_mem+0xff7837b4>
  8038d0:	003f6506 	br	803668 <__alt_mem_onchip_mem+0xff783668>
  8038d4:	a809883a 	mov	r4,r21
  8038d8:	08047700 	call	804770 <_realloc_r>
  8038dc:	102f883a 	mov	r23,r2
  8038e0:	103fee1e 	bne	r2,zero,80389c <__alt_mem_onchip_mem+0xff78389c>
  8038e4:	81400417 	ldw	r5,16(r16)
  8038e8:	a809883a 	mov	r4,r21
  8038ec:	080553c0 	call	80553c <_free_r>
  8038f0:	8080030b 	ldhu	r2,12(r16)
  8038f4:	00ffdfc4 	movi	r3,-129
  8038f8:	1884703a 	and	r2,r3,r2
  8038fc:	00c00304 	movi	r3,12
  803900:	a8c00015 	stw	r3,0(r21)
  803904:	003f5906 	br	80366c <__alt_mem_onchip_mem+0xff78366c>
  803908:	94c00044 	addi	r19,r18,1
  80390c:	02000044 	movi	r8,1
  803910:	003f6006 	br	803694 <__alt_mem_onchip_mem+0xff783694>
  803914:	00bfffc4 	movi	r2,-1
  803918:	003f0306 	br	803528 <__alt_mem_onchip_mem+0xff783528>
  80391c:	00800304 	movi	r2,12
  803920:	a8800015 	stw	r2,0(r21)
  803924:	8080030b 	ldhu	r2,12(r16)
  803928:	003f5006 	br	80366c <__alt_mem_onchip_mem+0xff78366c>

0080392c <_fwalk>:
  80392c:	defff704 	addi	sp,sp,-36
  803930:	dd000415 	stw	r20,16(sp)
  803934:	dfc00815 	stw	ra,32(sp)
  803938:	ddc00715 	stw	r23,28(sp)
  80393c:	dd800615 	stw	r22,24(sp)
  803940:	dd400515 	stw	r21,20(sp)
  803944:	dcc00315 	stw	r19,12(sp)
  803948:	dc800215 	stw	r18,8(sp)
  80394c:	dc400115 	stw	r17,4(sp)
  803950:	dc000015 	stw	r16,0(sp)
  803954:	2500b804 	addi	r20,r4,736
  803958:	a0002326 	beq	r20,zero,8039e8 <_fwalk+0xbc>
  80395c:	282b883a 	mov	r21,r5
  803960:	002f883a 	mov	r23,zero
  803964:	05800044 	movi	r22,1
  803968:	04ffffc4 	movi	r19,-1
  80396c:	a4400117 	ldw	r17,4(r20)
  803970:	a4800217 	ldw	r18,8(r20)
  803974:	8c7fffc4 	addi	r17,r17,-1
  803978:	88000d16 	blt	r17,zero,8039b0 <_fwalk+0x84>
  80397c:	94000304 	addi	r16,r18,12
  803980:	94800384 	addi	r18,r18,14
  803984:	8080000b 	ldhu	r2,0(r16)
  803988:	8c7fffc4 	addi	r17,r17,-1
  80398c:	813ffd04 	addi	r4,r16,-12
  803990:	b080042e 	bgeu	r22,r2,8039a4 <_fwalk+0x78>
  803994:	9080000f 	ldh	r2,0(r18)
  803998:	14c00226 	beq	r2,r19,8039a4 <_fwalk+0x78>
  80399c:	a83ee83a 	callr	r21
  8039a0:	b8aeb03a 	or	r23,r23,r2
  8039a4:	84001a04 	addi	r16,r16,104
  8039a8:	94801a04 	addi	r18,r18,104
  8039ac:	8cfff51e 	bne	r17,r19,803984 <__alt_mem_onchip_mem+0xff783984>
  8039b0:	a5000017 	ldw	r20,0(r20)
  8039b4:	a03fed1e 	bne	r20,zero,80396c <__alt_mem_onchip_mem+0xff78396c>
  8039b8:	b805883a 	mov	r2,r23
  8039bc:	dfc00817 	ldw	ra,32(sp)
  8039c0:	ddc00717 	ldw	r23,28(sp)
  8039c4:	dd800617 	ldw	r22,24(sp)
  8039c8:	dd400517 	ldw	r21,20(sp)
  8039cc:	dd000417 	ldw	r20,16(sp)
  8039d0:	dcc00317 	ldw	r19,12(sp)
  8039d4:	dc800217 	ldw	r18,8(sp)
  8039d8:	dc400117 	ldw	r17,4(sp)
  8039dc:	dc000017 	ldw	r16,0(sp)
  8039e0:	dec00904 	addi	sp,sp,36
  8039e4:	f800283a 	ret
  8039e8:	002f883a 	mov	r23,zero
  8039ec:	003ff206 	br	8039b8 <__alt_mem_onchip_mem+0xff7839b8>

008039f0 <_fwalk_reent>:
  8039f0:	defff704 	addi	sp,sp,-36
  8039f4:	dd000415 	stw	r20,16(sp)
  8039f8:	dfc00815 	stw	ra,32(sp)
  8039fc:	ddc00715 	stw	r23,28(sp)
  803a00:	dd800615 	stw	r22,24(sp)
  803a04:	dd400515 	stw	r21,20(sp)
  803a08:	dcc00315 	stw	r19,12(sp)
  803a0c:	dc800215 	stw	r18,8(sp)
  803a10:	dc400115 	stw	r17,4(sp)
  803a14:	dc000015 	stw	r16,0(sp)
  803a18:	2500b804 	addi	r20,r4,736
  803a1c:	a0002326 	beq	r20,zero,803aac <_fwalk_reent+0xbc>
  803a20:	282b883a 	mov	r21,r5
  803a24:	2027883a 	mov	r19,r4
  803a28:	002f883a 	mov	r23,zero
  803a2c:	05800044 	movi	r22,1
  803a30:	04bfffc4 	movi	r18,-1
  803a34:	a4400117 	ldw	r17,4(r20)
  803a38:	a4000217 	ldw	r16,8(r20)
  803a3c:	8c7fffc4 	addi	r17,r17,-1
  803a40:	88000c16 	blt	r17,zero,803a74 <_fwalk_reent+0x84>
  803a44:	84000304 	addi	r16,r16,12
  803a48:	8080000b 	ldhu	r2,0(r16)
  803a4c:	8c7fffc4 	addi	r17,r17,-1
  803a50:	817ffd04 	addi	r5,r16,-12
  803a54:	b080052e 	bgeu	r22,r2,803a6c <_fwalk_reent+0x7c>
  803a58:	8080008f 	ldh	r2,2(r16)
  803a5c:	9809883a 	mov	r4,r19
  803a60:	14800226 	beq	r2,r18,803a6c <_fwalk_reent+0x7c>
  803a64:	a83ee83a 	callr	r21
  803a68:	b8aeb03a 	or	r23,r23,r2
  803a6c:	84001a04 	addi	r16,r16,104
  803a70:	8cbff51e 	bne	r17,r18,803a48 <__alt_mem_onchip_mem+0xff783a48>
  803a74:	a5000017 	ldw	r20,0(r20)
  803a78:	a03fee1e 	bne	r20,zero,803a34 <__alt_mem_onchip_mem+0xff783a34>
  803a7c:	b805883a 	mov	r2,r23
  803a80:	dfc00817 	ldw	ra,32(sp)
  803a84:	ddc00717 	ldw	r23,28(sp)
  803a88:	dd800617 	ldw	r22,24(sp)
  803a8c:	dd400517 	ldw	r21,20(sp)
  803a90:	dd000417 	ldw	r20,16(sp)
  803a94:	dcc00317 	ldw	r19,12(sp)
  803a98:	dc800217 	ldw	r18,8(sp)
  803a9c:	dc400117 	ldw	r17,4(sp)
  803aa0:	dc000017 	ldw	r16,0(sp)
  803aa4:	dec00904 	addi	sp,sp,36
  803aa8:	f800283a 	ret
  803aac:	002f883a 	mov	r23,zero
  803ab0:	003ff206 	br	803a7c <__alt_mem_onchip_mem+0xff783a7c>

00803ab4 <_malloc_r>:
  803ab4:	defff504 	addi	sp,sp,-44
  803ab8:	dc800315 	stw	r18,12(sp)
  803abc:	dfc00a15 	stw	ra,40(sp)
  803ac0:	df000915 	stw	fp,36(sp)
  803ac4:	ddc00815 	stw	r23,32(sp)
  803ac8:	dd800715 	stw	r22,28(sp)
  803acc:	dd400615 	stw	r21,24(sp)
  803ad0:	dd000515 	stw	r20,20(sp)
  803ad4:	dcc00415 	stw	r19,16(sp)
  803ad8:	dc400215 	stw	r17,8(sp)
  803adc:	dc000115 	stw	r16,4(sp)
  803ae0:	288002c4 	addi	r2,r5,11
  803ae4:	00c00584 	movi	r3,22
  803ae8:	2025883a 	mov	r18,r4
  803aec:	18807f2e 	bgeu	r3,r2,803cec <_malloc_r+0x238>
  803af0:	047ffe04 	movi	r17,-8
  803af4:	1462703a 	and	r17,r2,r17
  803af8:	8800a316 	blt	r17,zero,803d88 <_malloc_r+0x2d4>
  803afc:	8940a236 	bltu	r17,r5,803d88 <_malloc_r+0x2d4>
  803b00:	08063d40 	call	8063d4 <__malloc_lock>
  803b04:	00807dc4 	movi	r2,503
  803b08:	1441e92e 	bgeu	r2,r17,8042b0 <_malloc_r+0x7fc>
  803b0c:	8804d27a 	srli	r2,r17,9
  803b10:	1000a126 	beq	r2,zero,803d98 <_malloc_r+0x2e4>
  803b14:	00c00104 	movi	r3,4
  803b18:	18811e36 	bltu	r3,r2,803f94 <_malloc_r+0x4e0>
  803b1c:	8804d1ba 	srli	r2,r17,6
  803b20:	12000e44 	addi	r8,r2,57
  803b24:	11c00e04 	addi	r7,r2,56
  803b28:	4209883a 	add	r4,r8,r8
  803b2c:	04c02074 	movhi	r19,129
  803b30:	2109883a 	add	r4,r4,r4
  803b34:	9ce97204 	addi	r19,r19,-23096
  803b38:	2109883a 	add	r4,r4,r4
  803b3c:	9909883a 	add	r4,r19,r4
  803b40:	24000117 	ldw	r16,4(r4)
  803b44:	213ffe04 	addi	r4,r4,-8
  803b48:	24009726 	beq	r4,r16,803da8 <_malloc_r+0x2f4>
  803b4c:	80800117 	ldw	r2,4(r16)
  803b50:	01bfff04 	movi	r6,-4
  803b54:	014003c4 	movi	r5,15
  803b58:	1184703a 	and	r2,r2,r6
  803b5c:	1447c83a 	sub	r3,r2,r17
  803b60:	28c00716 	blt	r5,r3,803b80 <_malloc_r+0xcc>
  803b64:	1800920e 	bge	r3,zero,803db0 <_malloc_r+0x2fc>
  803b68:	84000317 	ldw	r16,12(r16)
  803b6c:	24008e26 	beq	r4,r16,803da8 <_malloc_r+0x2f4>
  803b70:	80800117 	ldw	r2,4(r16)
  803b74:	1184703a 	and	r2,r2,r6
  803b78:	1447c83a 	sub	r3,r2,r17
  803b7c:	28fff90e 	bge	r5,r3,803b64 <__alt_mem_onchip_mem+0xff783b64>
  803b80:	3809883a 	mov	r4,r7
  803b84:	01802074 	movhi	r6,129
  803b88:	9c000417 	ldw	r16,16(r19)
  803b8c:	31a97204 	addi	r6,r6,-23096
  803b90:	32000204 	addi	r8,r6,8
  803b94:	82013426 	beq	r16,r8,804068 <_malloc_r+0x5b4>
  803b98:	80c00117 	ldw	r3,4(r16)
  803b9c:	00bfff04 	movi	r2,-4
  803ba0:	188e703a 	and	r7,r3,r2
  803ba4:	3c45c83a 	sub	r2,r7,r17
  803ba8:	00c003c4 	movi	r3,15
  803bac:	18811f16 	blt	r3,r2,80402c <_malloc_r+0x578>
  803bb0:	32000515 	stw	r8,20(r6)
  803bb4:	32000415 	stw	r8,16(r6)
  803bb8:	10007f0e 	bge	r2,zero,803db8 <_malloc_r+0x304>
  803bbc:	00807fc4 	movi	r2,511
  803bc0:	11c0fd36 	bltu	r2,r7,803fb8 <_malloc_r+0x504>
  803bc4:	3806d0fa 	srli	r3,r7,3
  803bc8:	01c00044 	movi	r7,1
  803bcc:	30800117 	ldw	r2,4(r6)
  803bd0:	19400044 	addi	r5,r3,1
  803bd4:	294b883a 	add	r5,r5,r5
  803bd8:	1807d0ba 	srai	r3,r3,2
  803bdc:	294b883a 	add	r5,r5,r5
  803be0:	294b883a 	add	r5,r5,r5
  803be4:	298b883a 	add	r5,r5,r6
  803be8:	38c6983a 	sll	r3,r7,r3
  803bec:	29c00017 	ldw	r7,0(r5)
  803bf0:	2a7ffe04 	addi	r9,r5,-8
  803bf4:	1886b03a 	or	r3,r3,r2
  803bf8:	82400315 	stw	r9,12(r16)
  803bfc:	81c00215 	stw	r7,8(r16)
  803c00:	30c00115 	stw	r3,4(r6)
  803c04:	2c000015 	stw	r16,0(r5)
  803c08:	3c000315 	stw	r16,12(r7)
  803c0c:	2005d0ba 	srai	r2,r4,2
  803c10:	01400044 	movi	r5,1
  803c14:	288a983a 	sll	r5,r5,r2
  803c18:	19406f36 	bltu	r3,r5,803dd8 <_malloc_r+0x324>
  803c1c:	28c4703a 	and	r2,r5,r3
  803c20:	10000a1e 	bne	r2,zero,803c4c <_malloc_r+0x198>
  803c24:	00bfff04 	movi	r2,-4
  803c28:	294b883a 	add	r5,r5,r5
  803c2c:	2088703a 	and	r4,r4,r2
  803c30:	28c4703a 	and	r2,r5,r3
  803c34:	21000104 	addi	r4,r4,4
  803c38:	1000041e 	bne	r2,zero,803c4c <_malloc_r+0x198>
  803c3c:	294b883a 	add	r5,r5,r5
  803c40:	28c4703a 	and	r2,r5,r3
  803c44:	21000104 	addi	r4,r4,4
  803c48:	103ffc26 	beq	r2,zero,803c3c <__alt_mem_onchip_mem+0xff783c3c>
  803c4c:	02bfff04 	movi	r10,-4
  803c50:	024003c4 	movi	r9,15
  803c54:	21800044 	addi	r6,r4,1
  803c58:	318d883a 	add	r6,r6,r6
  803c5c:	318d883a 	add	r6,r6,r6
  803c60:	318d883a 	add	r6,r6,r6
  803c64:	998d883a 	add	r6,r19,r6
  803c68:	333ffe04 	addi	r12,r6,-8
  803c6c:	2017883a 	mov	r11,r4
  803c70:	31800104 	addi	r6,r6,4
  803c74:	34000017 	ldw	r16,0(r6)
  803c78:	31fffd04 	addi	r7,r6,-12
  803c7c:	81c0041e 	bne	r16,r7,803c90 <_malloc_r+0x1dc>
  803c80:	0000fb06 	br	804070 <_malloc_r+0x5bc>
  803c84:	1801030e 	bge	r3,zero,804094 <_malloc_r+0x5e0>
  803c88:	84000317 	ldw	r16,12(r16)
  803c8c:	81c0f826 	beq	r16,r7,804070 <_malloc_r+0x5bc>
  803c90:	80800117 	ldw	r2,4(r16)
  803c94:	1284703a 	and	r2,r2,r10
  803c98:	1447c83a 	sub	r3,r2,r17
  803c9c:	48fff90e 	bge	r9,r3,803c84 <__alt_mem_onchip_mem+0xff783c84>
  803ca0:	80800317 	ldw	r2,12(r16)
  803ca4:	81000217 	ldw	r4,8(r16)
  803ca8:	89400054 	ori	r5,r17,1
  803cac:	81400115 	stw	r5,4(r16)
  803cb0:	20800315 	stw	r2,12(r4)
  803cb4:	11000215 	stw	r4,8(r2)
  803cb8:	8463883a 	add	r17,r16,r17
  803cbc:	9c400515 	stw	r17,20(r19)
  803cc0:	9c400415 	stw	r17,16(r19)
  803cc4:	18800054 	ori	r2,r3,1
  803cc8:	88800115 	stw	r2,4(r17)
  803ccc:	8a000315 	stw	r8,12(r17)
  803cd0:	8a000215 	stw	r8,8(r17)
  803cd4:	88e3883a 	add	r17,r17,r3
  803cd8:	88c00015 	stw	r3,0(r17)
  803cdc:	9009883a 	mov	r4,r18
  803ce0:	08063f80 	call	8063f8 <__malloc_unlock>
  803ce4:	80800204 	addi	r2,r16,8
  803ce8:	00001b06 	br	803d58 <_malloc_r+0x2a4>
  803cec:	04400404 	movi	r17,16
  803cf0:	89402536 	bltu	r17,r5,803d88 <_malloc_r+0x2d4>
  803cf4:	08063d40 	call	8063d4 <__malloc_lock>
  803cf8:	00800184 	movi	r2,6
  803cfc:	01000084 	movi	r4,2
  803d00:	04c02074 	movhi	r19,129
  803d04:	1085883a 	add	r2,r2,r2
  803d08:	9ce97204 	addi	r19,r19,-23096
  803d0c:	1085883a 	add	r2,r2,r2
  803d10:	9885883a 	add	r2,r19,r2
  803d14:	14000117 	ldw	r16,4(r2)
  803d18:	10fffe04 	addi	r3,r2,-8
  803d1c:	80c0d926 	beq	r16,r3,804084 <_malloc_r+0x5d0>
  803d20:	80c00117 	ldw	r3,4(r16)
  803d24:	81000317 	ldw	r4,12(r16)
  803d28:	00bfff04 	movi	r2,-4
  803d2c:	1884703a 	and	r2,r3,r2
  803d30:	81400217 	ldw	r5,8(r16)
  803d34:	8085883a 	add	r2,r16,r2
  803d38:	10c00117 	ldw	r3,4(r2)
  803d3c:	29000315 	stw	r4,12(r5)
  803d40:	21400215 	stw	r5,8(r4)
  803d44:	18c00054 	ori	r3,r3,1
  803d48:	10c00115 	stw	r3,4(r2)
  803d4c:	9009883a 	mov	r4,r18
  803d50:	08063f80 	call	8063f8 <__malloc_unlock>
  803d54:	80800204 	addi	r2,r16,8
  803d58:	dfc00a17 	ldw	ra,40(sp)
  803d5c:	df000917 	ldw	fp,36(sp)
  803d60:	ddc00817 	ldw	r23,32(sp)
  803d64:	dd800717 	ldw	r22,28(sp)
  803d68:	dd400617 	ldw	r21,24(sp)
  803d6c:	dd000517 	ldw	r20,20(sp)
  803d70:	dcc00417 	ldw	r19,16(sp)
  803d74:	dc800317 	ldw	r18,12(sp)
  803d78:	dc400217 	ldw	r17,8(sp)
  803d7c:	dc000117 	ldw	r16,4(sp)
  803d80:	dec00b04 	addi	sp,sp,44
  803d84:	f800283a 	ret
  803d88:	00800304 	movi	r2,12
  803d8c:	90800015 	stw	r2,0(r18)
  803d90:	0005883a 	mov	r2,zero
  803d94:	003ff006 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  803d98:	01002004 	movi	r4,128
  803d9c:	02001004 	movi	r8,64
  803da0:	01c00fc4 	movi	r7,63
  803da4:	003f6106 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  803da8:	4009883a 	mov	r4,r8
  803dac:	003f7506 	br	803b84 <__alt_mem_onchip_mem+0xff783b84>
  803db0:	81000317 	ldw	r4,12(r16)
  803db4:	003fde06 	br	803d30 <__alt_mem_onchip_mem+0xff783d30>
  803db8:	81c5883a 	add	r2,r16,r7
  803dbc:	11400117 	ldw	r5,4(r2)
  803dc0:	9009883a 	mov	r4,r18
  803dc4:	29400054 	ori	r5,r5,1
  803dc8:	11400115 	stw	r5,4(r2)
  803dcc:	08063f80 	call	8063f8 <__malloc_unlock>
  803dd0:	80800204 	addi	r2,r16,8
  803dd4:	003fe006 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  803dd8:	9c000217 	ldw	r16,8(r19)
  803ddc:	00bfff04 	movi	r2,-4
  803de0:	85800117 	ldw	r22,4(r16)
  803de4:	b0ac703a 	and	r22,r22,r2
  803de8:	b4400336 	bltu	r22,r17,803df8 <_malloc_r+0x344>
  803dec:	b445c83a 	sub	r2,r22,r17
  803df0:	00c003c4 	movi	r3,15
  803df4:	18805d16 	blt	r3,r2,803f6c <_malloc_r+0x4b8>
  803df8:	05c02074 	movhi	r23,129
  803dfc:	00802074 	movhi	r2,129
  803e00:	10b6f004 	addi	r2,r2,-9280
  803e04:	bdef7104 	addi	r23,r23,-16956
  803e08:	15400017 	ldw	r21,0(r2)
  803e0c:	b8c00017 	ldw	r3,0(r23)
  803e10:	00bfffc4 	movi	r2,-1
  803e14:	858d883a 	add	r6,r16,r22
  803e18:	8d6b883a 	add	r21,r17,r21
  803e1c:	1880ea26 	beq	r3,r2,8041c8 <_malloc_r+0x714>
  803e20:	ad4403c4 	addi	r21,r21,4111
  803e24:	00bc0004 	movi	r2,-4096
  803e28:	a8aa703a 	and	r21,r21,r2
  803e2c:	a80b883a 	mov	r5,r21
  803e30:	9009883a 	mov	r4,r18
  803e34:	d9800015 	stw	r6,0(sp)
  803e38:	0804cd40 	call	804cd4 <_sbrk_r>
  803e3c:	1029883a 	mov	r20,r2
  803e40:	00bfffc4 	movi	r2,-1
  803e44:	d9800017 	ldw	r6,0(sp)
  803e48:	a080e826 	beq	r20,r2,8041ec <_malloc_r+0x738>
  803e4c:	a180a636 	bltu	r20,r6,8040e8 <_malloc_r+0x634>
  803e50:	07002074 	movhi	fp,129
  803e54:	e736f904 	addi	fp,fp,-9244
  803e58:	e0800017 	ldw	r2,0(fp)
  803e5c:	a887883a 	add	r3,r21,r2
  803e60:	e0c00015 	stw	r3,0(fp)
  803e64:	3500e626 	beq	r6,r20,804200 <_malloc_r+0x74c>
  803e68:	b9000017 	ldw	r4,0(r23)
  803e6c:	00bfffc4 	movi	r2,-1
  803e70:	2080ee26 	beq	r4,r2,80422c <_malloc_r+0x778>
  803e74:	a185c83a 	sub	r2,r20,r6
  803e78:	10c5883a 	add	r2,r2,r3
  803e7c:	e0800015 	stw	r2,0(fp)
  803e80:	a0c001cc 	andi	r3,r20,7
  803e84:	1800bc26 	beq	r3,zero,804178 <_malloc_r+0x6c4>
  803e88:	a0e9c83a 	sub	r20,r20,r3
  803e8c:	00840204 	movi	r2,4104
  803e90:	a5000204 	addi	r20,r20,8
  803e94:	10c7c83a 	sub	r3,r2,r3
  803e98:	a545883a 	add	r2,r20,r21
  803e9c:	1083ffcc 	andi	r2,r2,4095
  803ea0:	18abc83a 	sub	r21,r3,r2
  803ea4:	a80b883a 	mov	r5,r21
  803ea8:	9009883a 	mov	r4,r18
  803eac:	0804cd40 	call	804cd4 <_sbrk_r>
  803eb0:	00ffffc4 	movi	r3,-1
  803eb4:	10c0e126 	beq	r2,r3,80423c <_malloc_r+0x788>
  803eb8:	1505c83a 	sub	r2,r2,r20
  803ebc:	1545883a 	add	r2,r2,r21
  803ec0:	10800054 	ori	r2,r2,1
  803ec4:	e0c00017 	ldw	r3,0(fp)
  803ec8:	9d000215 	stw	r20,8(r19)
  803ecc:	a0800115 	stw	r2,4(r20)
  803ed0:	a8c7883a 	add	r3,r21,r3
  803ed4:	e0c00015 	stw	r3,0(fp)
  803ed8:	84c00e26 	beq	r16,r19,803f14 <_malloc_r+0x460>
  803edc:	018003c4 	movi	r6,15
  803ee0:	3580a72e 	bgeu	r6,r22,804180 <_malloc_r+0x6cc>
  803ee4:	81400117 	ldw	r5,4(r16)
  803ee8:	013ffe04 	movi	r4,-8
  803eec:	b0bffd04 	addi	r2,r22,-12
  803ef0:	1104703a 	and	r2,r2,r4
  803ef4:	2900004c 	andi	r4,r5,1
  803ef8:	2088b03a 	or	r4,r4,r2
  803efc:	81000115 	stw	r4,4(r16)
  803f00:	01400144 	movi	r5,5
  803f04:	8089883a 	add	r4,r16,r2
  803f08:	21400115 	stw	r5,4(r4)
  803f0c:	21400215 	stw	r5,8(r4)
  803f10:	3080cd36 	bltu	r6,r2,804248 <_malloc_r+0x794>
  803f14:	00802074 	movhi	r2,129
  803f18:	10b6ef04 	addi	r2,r2,-9284
  803f1c:	11000017 	ldw	r4,0(r2)
  803f20:	20c0012e 	bgeu	r4,r3,803f28 <_malloc_r+0x474>
  803f24:	10c00015 	stw	r3,0(r2)
  803f28:	00802074 	movhi	r2,129
  803f2c:	10b6ee04 	addi	r2,r2,-9288
  803f30:	11000017 	ldw	r4,0(r2)
  803f34:	9c000217 	ldw	r16,8(r19)
  803f38:	20c0012e 	bgeu	r4,r3,803f40 <_malloc_r+0x48c>
  803f3c:	10c00015 	stw	r3,0(r2)
  803f40:	80c00117 	ldw	r3,4(r16)
  803f44:	00bfff04 	movi	r2,-4
  803f48:	1886703a 	and	r3,r3,r2
  803f4c:	1c45c83a 	sub	r2,r3,r17
  803f50:	1c400236 	bltu	r3,r17,803f5c <_malloc_r+0x4a8>
  803f54:	00c003c4 	movi	r3,15
  803f58:	18800416 	blt	r3,r2,803f6c <_malloc_r+0x4b8>
  803f5c:	9009883a 	mov	r4,r18
  803f60:	08063f80 	call	8063f8 <__malloc_unlock>
  803f64:	0005883a 	mov	r2,zero
  803f68:	003f7b06 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  803f6c:	88c00054 	ori	r3,r17,1
  803f70:	80c00115 	stw	r3,4(r16)
  803f74:	8463883a 	add	r17,r16,r17
  803f78:	10800054 	ori	r2,r2,1
  803f7c:	9c400215 	stw	r17,8(r19)
  803f80:	88800115 	stw	r2,4(r17)
  803f84:	9009883a 	mov	r4,r18
  803f88:	08063f80 	call	8063f8 <__malloc_unlock>
  803f8c:	80800204 	addi	r2,r16,8
  803f90:	003f7106 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  803f94:	00c00504 	movi	r3,20
  803f98:	18804a2e 	bgeu	r3,r2,8040c4 <_malloc_r+0x610>
  803f9c:	00c01504 	movi	r3,84
  803fa0:	18806e36 	bltu	r3,r2,80415c <_malloc_r+0x6a8>
  803fa4:	8804d33a 	srli	r2,r17,12
  803fa8:	12001bc4 	addi	r8,r2,111
  803fac:	11c01b84 	addi	r7,r2,110
  803fb0:	4209883a 	add	r4,r8,r8
  803fb4:	003edd06 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  803fb8:	3804d27a 	srli	r2,r7,9
  803fbc:	00c00104 	movi	r3,4
  803fc0:	1880442e 	bgeu	r3,r2,8040d4 <_malloc_r+0x620>
  803fc4:	00c00504 	movi	r3,20
  803fc8:	18808136 	bltu	r3,r2,8041d0 <_malloc_r+0x71c>
  803fcc:	11401704 	addi	r5,r2,92
  803fd0:	10c016c4 	addi	r3,r2,91
  803fd4:	294b883a 	add	r5,r5,r5
  803fd8:	294b883a 	add	r5,r5,r5
  803fdc:	294b883a 	add	r5,r5,r5
  803fe0:	994b883a 	add	r5,r19,r5
  803fe4:	28800017 	ldw	r2,0(r5)
  803fe8:	01802074 	movhi	r6,129
  803fec:	297ffe04 	addi	r5,r5,-8
  803ff0:	31a97204 	addi	r6,r6,-23096
  803ff4:	28806526 	beq	r5,r2,80418c <_malloc_r+0x6d8>
  803ff8:	01bfff04 	movi	r6,-4
  803ffc:	10c00117 	ldw	r3,4(r2)
  804000:	1986703a 	and	r3,r3,r6
  804004:	38c0022e 	bgeu	r7,r3,804010 <_malloc_r+0x55c>
  804008:	10800217 	ldw	r2,8(r2)
  80400c:	28bffb1e 	bne	r5,r2,803ffc <__alt_mem_onchip_mem+0xff783ffc>
  804010:	11400317 	ldw	r5,12(r2)
  804014:	98c00117 	ldw	r3,4(r19)
  804018:	81400315 	stw	r5,12(r16)
  80401c:	80800215 	stw	r2,8(r16)
  804020:	2c000215 	stw	r16,8(r5)
  804024:	14000315 	stw	r16,12(r2)
  804028:	003ef806 	br	803c0c <__alt_mem_onchip_mem+0xff783c0c>
  80402c:	88c00054 	ori	r3,r17,1
  804030:	80c00115 	stw	r3,4(r16)
  804034:	8463883a 	add	r17,r16,r17
  804038:	34400515 	stw	r17,20(r6)
  80403c:	34400415 	stw	r17,16(r6)
  804040:	10c00054 	ori	r3,r2,1
  804044:	8a000315 	stw	r8,12(r17)
  804048:	8a000215 	stw	r8,8(r17)
  80404c:	88c00115 	stw	r3,4(r17)
  804050:	88a3883a 	add	r17,r17,r2
  804054:	88800015 	stw	r2,0(r17)
  804058:	9009883a 	mov	r4,r18
  80405c:	08063f80 	call	8063f8 <__malloc_unlock>
  804060:	80800204 	addi	r2,r16,8
  804064:	003f3c06 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  804068:	30c00117 	ldw	r3,4(r6)
  80406c:	003ee706 	br	803c0c <__alt_mem_onchip_mem+0xff783c0c>
  804070:	5ac00044 	addi	r11,r11,1
  804074:	588000cc 	andi	r2,r11,3
  804078:	31800204 	addi	r6,r6,8
  80407c:	103efd1e 	bne	r2,zero,803c74 <__alt_mem_onchip_mem+0xff783c74>
  804080:	00002406 	br	804114 <_malloc_r+0x660>
  804084:	14000317 	ldw	r16,12(r2)
  804088:	143f251e 	bne	r2,r16,803d20 <__alt_mem_onchip_mem+0xff783d20>
  80408c:	21000084 	addi	r4,r4,2
  804090:	003ebc06 	br	803b84 <__alt_mem_onchip_mem+0xff783b84>
  804094:	8085883a 	add	r2,r16,r2
  804098:	10c00117 	ldw	r3,4(r2)
  80409c:	81000317 	ldw	r4,12(r16)
  8040a0:	81400217 	ldw	r5,8(r16)
  8040a4:	18c00054 	ori	r3,r3,1
  8040a8:	10c00115 	stw	r3,4(r2)
  8040ac:	29000315 	stw	r4,12(r5)
  8040b0:	21400215 	stw	r5,8(r4)
  8040b4:	9009883a 	mov	r4,r18
  8040b8:	08063f80 	call	8063f8 <__malloc_unlock>
  8040bc:	80800204 	addi	r2,r16,8
  8040c0:	003f2506 	br	803d58 <__alt_mem_onchip_mem+0xff783d58>
  8040c4:	12001704 	addi	r8,r2,92
  8040c8:	11c016c4 	addi	r7,r2,91
  8040cc:	4209883a 	add	r4,r8,r8
  8040d0:	003e9606 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  8040d4:	3804d1ba 	srli	r2,r7,6
  8040d8:	11400e44 	addi	r5,r2,57
  8040dc:	10c00e04 	addi	r3,r2,56
  8040e0:	294b883a 	add	r5,r5,r5
  8040e4:	003fbc06 	br	803fd8 <__alt_mem_onchip_mem+0xff783fd8>
  8040e8:	84ff5926 	beq	r16,r19,803e50 <__alt_mem_onchip_mem+0xff783e50>
  8040ec:	00802074 	movhi	r2,129
  8040f0:	10a97204 	addi	r2,r2,-23096
  8040f4:	14000217 	ldw	r16,8(r2)
  8040f8:	00bfff04 	movi	r2,-4
  8040fc:	80c00117 	ldw	r3,4(r16)
  804100:	1886703a 	and	r3,r3,r2
  804104:	003f9106 	br	803f4c <__alt_mem_onchip_mem+0xff783f4c>
  804108:	60800217 	ldw	r2,8(r12)
  80410c:	213fffc4 	addi	r4,r4,-1
  804110:	1300651e 	bne	r2,r12,8042a8 <_malloc_r+0x7f4>
  804114:	208000cc 	andi	r2,r4,3
  804118:	633ffe04 	addi	r12,r12,-8
  80411c:	103ffa1e 	bne	r2,zero,804108 <__alt_mem_onchip_mem+0xff784108>
  804120:	98800117 	ldw	r2,4(r19)
  804124:	0146303a 	nor	r3,zero,r5
  804128:	1884703a 	and	r2,r3,r2
  80412c:	98800115 	stw	r2,4(r19)
  804130:	294b883a 	add	r5,r5,r5
  804134:	117f2836 	bltu	r2,r5,803dd8 <__alt_mem_onchip_mem+0xff783dd8>
  804138:	283f2726 	beq	r5,zero,803dd8 <__alt_mem_onchip_mem+0xff783dd8>
  80413c:	2886703a 	and	r3,r5,r2
  804140:	5809883a 	mov	r4,r11
  804144:	183ec31e 	bne	r3,zero,803c54 <__alt_mem_onchip_mem+0xff783c54>
  804148:	294b883a 	add	r5,r5,r5
  80414c:	2886703a 	and	r3,r5,r2
  804150:	21000104 	addi	r4,r4,4
  804154:	183ffc26 	beq	r3,zero,804148 <__alt_mem_onchip_mem+0xff784148>
  804158:	003ebe06 	br	803c54 <__alt_mem_onchip_mem+0xff783c54>
  80415c:	00c05504 	movi	r3,340
  804160:	18801236 	bltu	r3,r2,8041ac <_malloc_r+0x6f8>
  804164:	8804d3fa 	srli	r2,r17,15
  804168:	12001e04 	addi	r8,r2,120
  80416c:	11c01dc4 	addi	r7,r2,119
  804170:	4209883a 	add	r4,r8,r8
  804174:	003e6d06 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  804178:	00c40004 	movi	r3,4096
  80417c:	003f4606 	br	803e98 <__alt_mem_onchip_mem+0xff783e98>
  804180:	00800044 	movi	r2,1
  804184:	a0800115 	stw	r2,4(r20)
  804188:	003f7406 	br	803f5c <__alt_mem_onchip_mem+0xff783f5c>
  80418c:	1805d0ba 	srai	r2,r3,2
  804190:	01c00044 	movi	r7,1
  804194:	30c00117 	ldw	r3,4(r6)
  804198:	388e983a 	sll	r7,r7,r2
  80419c:	2805883a 	mov	r2,r5
  8041a0:	38c6b03a 	or	r3,r7,r3
  8041a4:	30c00115 	stw	r3,4(r6)
  8041a8:	003f9b06 	br	804018 <__alt_mem_onchip_mem+0xff784018>
  8041ac:	00c15504 	movi	r3,1364
  8041b0:	18801a36 	bltu	r3,r2,80421c <_malloc_r+0x768>
  8041b4:	8804d4ba 	srli	r2,r17,18
  8041b8:	12001f44 	addi	r8,r2,125
  8041bc:	11c01f04 	addi	r7,r2,124
  8041c0:	4209883a 	add	r4,r8,r8
  8041c4:	003e5906 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  8041c8:	ad400404 	addi	r21,r21,16
  8041cc:	003f1706 	br	803e2c <__alt_mem_onchip_mem+0xff783e2c>
  8041d0:	00c01504 	movi	r3,84
  8041d4:	18802336 	bltu	r3,r2,804264 <_malloc_r+0x7b0>
  8041d8:	3804d33a 	srli	r2,r7,12
  8041dc:	11401bc4 	addi	r5,r2,111
  8041e0:	10c01b84 	addi	r3,r2,110
  8041e4:	294b883a 	add	r5,r5,r5
  8041e8:	003f7b06 	br	803fd8 <__alt_mem_onchip_mem+0xff783fd8>
  8041ec:	9c000217 	ldw	r16,8(r19)
  8041f0:	00bfff04 	movi	r2,-4
  8041f4:	80c00117 	ldw	r3,4(r16)
  8041f8:	1886703a 	and	r3,r3,r2
  8041fc:	003f5306 	br	803f4c <__alt_mem_onchip_mem+0xff783f4c>
  804200:	3083ffcc 	andi	r2,r6,4095
  804204:	103f181e 	bne	r2,zero,803e68 <__alt_mem_onchip_mem+0xff783e68>
  804208:	99000217 	ldw	r4,8(r19)
  80420c:	b545883a 	add	r2,r22,r21
  804210:	10800054 	ori	r2,r2,1
  804214:	20800115 	stw	r2,4(r4)
  804218:	003f3e06 	br	803f14 <__alt_mem_onchip_mem+0xff783f14>
  80421c:	01003f84 	movi	r4,254
  804220:	02001fc4 	movi	r8,127
  804224:	01c01f84 	movi	r7,126
  804228:	003e4006 	br	803b2c <__alt_mem_onchip_mem+0xff783b2c>
  80422c:	00802074 	movhi	r2,129
  804230:	10af7104 	addi	r2,r2,-16956
  804234:	15000015 	stw	r20,0(r2)
  804238:	003f1106 	br	803e80 <__alt_mem_onchip_mem+0xff783e80>
  80423c:	00800044 	movi	r2,1
  804240:	002b883a 	mov	r21,zero
  804244:	003f1f06 	br	803ec4 <__alt_mem_onchip_mem+0xff783ec4>
  804248:	81400204 	addi	r5,r16,8
  80424c:	9009883a 	mov	r4,r18
  804250:	080553c0 	call	80553c <_free_r>
  804254:	00802074 	movhi	r2,129
  804258:	10b6f904 	addi	r2,r2,-9244
  80425c:	10c00017 	ldw	r3,0(r2)
  804260:	003f2c06 	br	803f14 <__alt_mem_onchip_mem+0xff783f14>
  804264:	00c05504 	movi	r3,340
  804268:	18800536 	bltu	r3,r2,804280 <_malloc_r+0x7cc>
  80426c:	3804d3fa 	srli	r2,r7,15
  804270:	11401e04 	addi	r5,r2,120
  804274:	10c01dc4 	addi	r3,r2,119
  804278:	294b883a 	add	r5,r5,r5
  80427c:	003f5606 	br	803fd8 <__alt_mem_onchip_mem+0xff783fd8>
  804280:	00c15504 	movi	r3,1364
  804284:	18800536 	bltu	r3,r2,80429c <_malloc_r+0x7e8>
  804288:	3804d4ba 	srli	r2,r7,18
  80428c:	11401f44 	addi	r5,r2,125
  804290:	10c01f04 	addi	r3,r2,124
  804294:	294b883a 	add	r5,r5,r5
  804298:	003f4f06 	br	803fd8 <__alt_mem_onchip_mem+0xff783fd8>
  80429c:	01403f84 	movi	r5,254
  8042a0:	00c01f84 	movi	r3,126
  8042a4:	003f4c06 	br	803fd8 <__alt_mem_onchip_mem+0xff783fd8>
  8042a8:	98800117 	ldw	r2,4(r19)
  8042ac:	003fa006 	br	804130 <__alt_mem_onchip_mem+0xff784130>
  8042b0:	8808d0fa 	srli	r4,r17,3
  8042b4:	20800044 	addi	r2,r4,1
  8042b8:	1085883a 	add	r2,r2,r2
  8042bc:	003e9006 	br	803d00 <__alt_mem_onchip_mem+0xff783d00>

008042c0 <memchr>:
  8042c0:	208000cc 	andi	r2,r4,3
  8042c4:	280f883a 	mov	r7,r5
  8042c8:	10003426 	beq	r2,zero,80439c <memchr+0xdc>
  8042cc:	30bfffc4 	addi	r2,r6,-1
  8042d0:	30001a26 	beq	r6,zero,80433c <memchr+0x7c>
  8042d4:	20c00003 	ldbu	r3,0(r4)
  8042d8:	29803fcc 	andi	r6,r5,255
  8042dc:	30c0051e 	bne	r6,r3,8042f4 <memchr+0x34>
  8042e0:	00001806 	br	804344 <memchr+0x84>
  8042e4:	10001526 	beq	r2,zero,80433c <memchr+0x7c>
  8042e8:	20c00003 	ldbu	r3,0(r4)
  8042ec:	10bfffc4 	addi	r2,r2,-1
  8042f0:	30c01426 	beq	r6,r3,804344 <memchr+0x84>
  8042f4:	21000044 	addi	r4,r4,1
  8042f8:	20c000cc 	andi	r3,r4,3
  8042fc:	183ff91e 	bne	r3,zero,8042e4 <__alt_mem_onchip_mem+0xff7842e4>
  804300:	020000c4 	movi	r8,3
  804304:	40801136 	bltu	r8,r2,80434c <memchr+0x8c>
  804308:	10000c26 	beq	r2,zero,80433c <memchr+0x7c>
  80430c:	20c00003 	ldbu	r3,0(r4)
  804310:	29403fcc 	andi	r5,r5,255
  804314:	28c00b26 	beq	r5,r3,804344 <memchr+0x84>
  804318:	20c00044 	addi	r3,r4,1
  80431c:	39803fcc 	andi	r6,r7,255
  804320:	2089883a 	add	r4,r4,r2
  804324:	00000306 	br	804334 <memchr+0x74>
  804328:	18c00044 	addi	r3,r3,1
  80432c:	197fffc3 	ldbu	r5,-1(r3)
  804330:	31400526 	beq	r6,r5,804348 <memchr+0x88>
  804334:	1805883a 	mov	r2,r3
  804338:	20fffb1e 	bne	r4,r3,804328 <__alt_mem_onchip_mem+0xff784328>
  80433c:	0005883a 	mov	r2,zero
  804340:	f800283a 	ret
  804344:	2005883a 	mov	r2,r4
  804348:	f800283a 	ret
  80434c:	28c03fcc 	andi	r3,r5,255
  804350:	1812923a 	slli	r9,r3,8
  804354:	02ffbff4 	movhi	r11,65279
  804358:	02a02074 	movhi	r10,32897
  80435c:	48d2b03a 	or	r9,r9,r3
  804360:	4806943a 	slli	r3,r9,16
  804364:	5affbfc4 	addi	r11,r11,-257
  804368:	52a02004 	addi	r10,r10,-32640
  80436c:	48d2b03a 	or	r9,r9,r3
  804370:	20c00017 	ldw	r3,0(r4)
  804374:	48c6f03a 	xor	r3,r9,r3
  804378:	1acd883a 	add	r6,r3,r11
  80437c:	00c6303a 	nor	r3,zero,r3
  804380:	30c6703a 	and	r3,r6,r3
  804384:	1a86703a 	and	r3,r3,r10
  804388:	183fe01e 	bne	r3,zero,80430c <__alt_mem_onchip_mem+0xff78430c>
  80438c:	10bfff04 	addi	r2,r2,-4
  804390:	21000104 	addi	r4,r4,4
  804394:	40bff636 	bltu	r8,r2,804370 <__alt_mem_onchip_mem+0xff784370>
  804398:	003fdb06 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  80439c:	3005883a 	mov	r2,r6
  8043a0:	003fd706 	br	804300 <__alt_mem_onchip_mem+0xff784300>

008043a4 <memcpy>:
  8043a4:	defffd04 	addi	sp,sp,-12
  8043a8:	dfc00215 	stw	ra,8(sp)
  8043ac:	dc400115 	stw	r17,4(sp)
  8043b0:	dc000015 	stw	r16,0(sp)
  8043b4:	00c003c4 	movi	r3,15
  8043b8:	2005883a 	mov	r2,r4
  8043bc:	1980452e 	bgeu	r3,r6,8044d4 <memcpy+0x130>
  8043c0:	2906b03a 	or	r3,r5,r4
  8043c4:	18c000cc 	andi	r3,r3,3
  8043c8:	1800441e 	bne	r3,zero,8044dc <memcpy+0x138>
  8043cc:	347ffc04 	addi	r17,r6,-16
  8043d0:	8822d13a 	srli	r17,r17,4
  8043d4:	28c00104 	addi	r3,r5,4
  8043d8:	23400104 	addi	r13,r4,4
  8043dc:	8820913a 	slli	r16,r17,4
  8043e0:	2b000204 	addi	r12,r5,8
  8043e4:	22c00204 	addi	r11,r4,8
  8043e8:	84000504 	addi	r16,r16,20
  8043ec:	2a800304 	addi	r10,r5,12
  8043f0:	22400304 	addi	r9,r4,12
  8043f4:	2c21883a 	add	r16,r5,r16
  8043f8:	2811883a 	mov	r8,r5
  8043fc:	200f883a 	mov	r7,r4
  804400:	41000017 	ldw	r4,0(r8)
  804404:	1fc00017 	ldw	ra,0(r3)
  804408:	63c00017 	ldw	r15,0(r12)
  80440c:	39000015 	stw	r4,0(r7)
  804410:	53800017 	ldw	r14,0(r10)
  804414:	6fc00015 	stw	ra,0(r13)
  804418:	5bc00015 	stw	r15,0(r11)
  80441c:	4b800015 	stw	r14,0(r9)
  804420:	18c00404 	addi	r3,r3,16
  804424:	39c00404 	addi	r7,r7,16
  804428:	42000404 	addi	r8,r8,16
  80442c:	6b400404 	addi	r13,r13,16
  804430:	63000404 	addi	r12,r12,16
  804434:	5ac00404 	addi	r11,r11,16
  804438:	52800404 	addi	r10,r10,16
  80443c:	4a400404 	addi	r9,r9,16
  804440:	1c3fef1e 	bne	r3,r16,804400 <__alt_mem_onchip_mem+0xff784400>
  804444:	89c00044 	addi	r7,r17,1
  804448:	380e913a 	slli	r7,r7,4
  80444c:	310003cc 	andi	r4,r6,15
  804450:	02c000c4 	movi	r11,3
  804454:	11c7883a 	add	r3,r2,r7
  804458:	29cb883a 	add	r5,r5,r7
  80445c:	5900212e 	bgeu	r11,r4,8044e4 <memcpy+0x140>
  804460:	1813883a 	mov	r9,r3
  804464:	2811883a 	mov	r8,r5
  804468:	200f883a 	mov	r7,r4
  80446c:	42800017 	ldw	r10,0(r8)
  804470:	4a400104 	addi	r9,r9,4
  804474:	39ffff04 	addi	r7,r7,-4
  804478:	4abfff15 	stw	r10,-4(r9)
  80447c:	42000104 	addi	r8,r8,4
  804480:	59fffa36 	bltu	r11,r7,80446c <__alt_mem_onchip_mem+0xff78446c>
  804484:	213fff04 	addi	r4,r4,-4
  804488:	2008d0ba 	srli	r4,r4,2
  80448c:	318000cc 	andi	r6,r6,3
  804490:	21000044 	addi	r4,r4,1
  804494:	2109883a 	add	r4,r4,r4
  804498:	2109883a 	add	r4,r4,r4
  80449c:	1907883a 	add	r3,r3,r4
  8044a0:	290b883a 	add	r5,r5,r4
  8044a4:	30000626 	beq	r6,zero,8044c0 <memcpy+0x11c>
  8044a8:	198d883a 	add	r6,r3,r6
  8044ac:	29c00003 	ldbu	r7,0(r5)
  8044b0:	18c00044 	addi	r3,r3,1
  8044b4:	29400044 	addi	r5,r5,1
  8044b8:	19ffffc5 	stb	r7,-1(r3)
  8044bc:	19bffb1e 	bne	r3,r6,8044ac <__alt_mem_onchip_mem+0xff7844ac>
  8044c0:	dfc00217 	ldw	ra,8(sp)
  8044c4:	dc400117 	ldw	r17,4(sp)
  8044c8:	dc000017 	ldw	r16,0(sp)
  8044cc:	dec00304 	addi	sp,sp,12
  8044d0:	f800283a 	ret
  8044d4:	2007883a 	mov	r3,r4
  8044d8:	003ff206 	br	8044a4 <__alt_mem_onchip_mem+0xff7844a4>
  8044dc:	2007883a 	mov	r3,r4
  8044e0:	003ff106 	br	8044a8 <__alt_mem_onchip_mem+0xff7844a8>
  8044e4:	200d883a 	mov	r6,r4
  8044e8:	003fee06 	br	8044a4 <__alt_mem_onchip_mem+0xff7844a4>

008044ec <memmove>:
  8044ec:	2005883a 	mov	r2,r4
  8044f0:	29000b2e 	bgeu	r5,r4,804520 <memmove+0x34>
  8044f4:	298f883a 	add	r7,r5,r6
  8044f8:	21c0092e 	bgeu	r4,r7,804520 <memmove+0x34>
  8044fc:	2187883a 	add	r3,r4,r6
  804500:	198bc83a 	sub	r5,r3,r6
  804504:	30004826 	beq	r6,zero,804628 <memmove+0x13c>
  804508:	39ffffc4 	addi	r7,r7,-1
  80450c:	39000003 	ldbu	r4,0(r7)
  804510:	18ffffc4 	addi	r3,r3,-1
  804514:	19000005 	stb	r4,0(r3)
  804518:	28fffb1e 	bne	r5,r3,804508 <__alt_mem_onchip_mem+0xff784508>
  80451c:	f800283a 	ret
  804520:	00c003c4 	movi	r3,15
  804524:	1980412e 	bgeu	r3,r6,80462c <memmove+0x140>
  804528:	2886b03a 	or	r3,r5,r2
  80452c:	18c000cc 	andi	r3,r3,3
  804530:	1800401e 	bne	r3,zero,804634 <memmove+0x148>
  804534:	33fffc04 	addi	r15,r6,-16
  804538:	781ed13a 	srli	r15,r15,4
  80453c:	28c00104 	addi	r3,r5,4
  804540:	13400104 	addi	r13,r2,4
  804544:	781c913a 	slli	r14,r15,4
  804548:	2b000204 	addi	r12,r5,8
  80454c:	12c00204 	addi	r11,r2,8
  804550:	73800504 	addi	r14,r14,20
  804554:	2a800304 	addi	r10,r5,12
  804558:	12400304 	addi	r9,r2,12
  80455c:	2b9d883a 	add	r14,r5,r14
  804560:	2811883a 	mov	r8,r5
  804564:	100f883a 	mov	r7,r2
  804568:	41000017 	ldw	r4,0(r8)
  80456c:	39c00404 	addi	r7,r7,16
  804570:	18c00404 	addi	r3,r3,16
  804574:	393ffc15 	stw	r4,-16(r7)
  804578:	193ffc17 	ldw	r4,-16(r3)
  80457c:	6b400404 	addi	r13,r13,16
  804580:	5ac00404 	addi	r11,r11,16
  804584:	693ffc15 	stw	r4,-16(r13)
  804588:	61000017 	ldw	r4,0(r12)
  80458c:	4a400404 	addi	r9,r9,16
  804590:	42000404 	addi	r8,r8,16
  804594:	593ffc15 	stw	r4,-16(r11)
  804598:	51000017 	ldw	r4,0(r10)
  80459c:	63000404 	addi	r12,r12,16
  8045a0:	52800404 	addi	r10,r10,16
  8045a4:	493ffc15 	stw	r4,-16(r9)
  8045a8:	1bbfef1e 	bne	r3,r14,804568 <__alt_mem_onchip_mem+0xff784568>
  8045ac:	79000044 	addi	r4,r15,1
  8045b0:	2008913a 	slli	r4,r4,4
  8045b4:	328003cc 	andi	r10,r6,15
  8045b8:	02c000c4 	movi	r11,3
  8045bc:	1107883a 	add	r3,r2,r4
  8045c0:	290b883a 	add	r5,r5,r4
  8045c4:	5a801e2e 	bgeu	r11,r10,804640 <memmove+0x154>
  8045c8:	1813883a 	mov	r9,r3
  8045cc:	2811883a 	mov	r8,r5
  8045d0:	500f883a 	mov	r7,r10
  8045d4:	41000017 	ldw	r4,0(r8)
  8045d8:	4a400104 	addi	r9,r9,4
  8045dc:	39ffff04 	addi	r7,r7,-4
  8045e0:	493fff15 	stw	r4,-4(r9)
  8045e4:	42000104 	addi	r8,r8,4
  8045e8:	59fffa36 	bltu	r11,r7,8045d4 <__alt_mem_onchip_mem+0xff7845d4>
  8045ec:	513fff04 	addi	r4,r10,-4
  8045f0:	2008d0ba 	srli	r4,r4,2
  8045f4:	318000cc 	andi	r6,r6,3
  8045f8:	21000044 	addi	r4,r4,1
  8045fc:	2109883a 	add	r4,r4,r4
  804600:	2109883a 	add	r4,r4,r4
  804604:	1907883a 	add	r3,r3,r4
  804608:	290b883a 	add	r5,r5,r4
  80460c:	30000b26 	beq	r6,zero,80463c <memmove+0x150>
  804610:	198d883a 	add	r6,r3,r6
  804614:	29c00003 	ldbu	r7,0(r5)
  804618:	18c00044 	addi	r3,r3,1
  80461c:	29400044 	addi	r5,r5,1
  804620:	19ffffc5 	stb	r7,-1(r3)
  804624:	19bffb1e 	bne	r3,r6,804614 <__alt_mem_onchip_mem+0xff784614>
  804628:	f800283a 	ret
  80462c:	1007883a 	mov	r3,r2
  804630:	003ff606 	br	80460c <__alt_mem_onchip_mem+0xff78460c>
  804634:	1007883a 	mov	r3,r2
  804638:	003ff506 	br	804610 <__alt_mem_onchip_mem+0xff784610>
  80463c:	f800283a 	ret
  804640:	500d883a 	mov	r6,r10
  804644:	003ff106 	br	80460c <__alt_mem_onchip_mem+0xff78460c>

00804648 <memset>:
  804648:	20c000cc 	andi	r3,r4,3
  80464c:	2005883a 	mov	r2,r4
  804650:	18004426 	beq	r3,zero,804764 <memset+0x11c>
  804654:	31ffffc4 	addi	r7,r6,-1
  804658:	30004026 	beq	r6,zero,80475c <memset+0x114>
  80465c:	2813883a 	mov	r9,r5
  804660:	200d883a 	mov	r6,r4
  804664:	2007883a 	mov	r3,r4
  804668:	00000406 	br	80467c <memset+0x34>
  80466c:	3a3fffc4 	addi	r8,r7,-1
  804670:	31800044 	addi	r6,r6,1
  804674:	38003926 	beq	r7,zero,80475c <memset+0x114>
  804678:	400f883a 	mov	r7,r8
  80467c:	18c00044 	addi	r3,r3,1
  804680:	32400005 	stb	r9,0(r6)
  804684:	1a0000cc 	andi	r8,r3,3
  804688:	403ff81e 	bne	r8,zero,80466c <__alt_mem_onchip_mem+0xff78466c>
  80468c:	010000c4 	movi	r4,3
  804690:	21c02d2e 	bgeu	r4,r7,804748 <memset+0x100>
  804694:	29003fcc 	andi	r4,r5,255
  804698:	200c923a 	slli	r6,r4,8
  80469c:	3108b03a 	or	r4,r6,r4
  8046a0:	200c943a 	slli	r6,r4,16
  8046a4:	218cb03a 	or	r6,r4,r6
  8046a8:	010003c4 	movi	r4,15
  8046ac:	21c0182e 	bgeu	r4,r7,804710 <memset+0xc8>
  8046b0:	3b3ffc04 	addi	r12,r7,-16
  8046b4:	6018d13a 	srli	r12,r12,4
  8046b8:	1a000104 	addi	r8,r3,4
  8046bc:	1ac00204 	addi	r11,r3,8
  8046c0:	6008913a 	slli	r4,r12,4
  8046c4:	1a800304 	addi	r10,r3,12
  8046c8:	1813883a 	mov	r9,r3
  8046cc:	21000504 	addi	r4,r4,20
  8046d0:	1909883a 	add	r4,r3,r4
  8046d4:	49800015 	stw	r6,0(r9)
  8046d8:	41800015 	stw	r6,0(r8)
  8046dc:	59800015 	stw	r6,0(r11)
  8046e0:	51800015 	stw	r6,0(r10)
  8046e4:	42000404 	addi	r8,r8,16
  8046e8:	4a400404 	addi	r9,r9,16
  8046ec:	5ac00404 	addi	r11,r11,16
  8046f0:	52800404 	addi	r10,r10,16
  8046f4:	413ff71e 	bne	r8,r4,8046d4 <__alt_mem_onchip_mem+0xff7846d4>
  8046f8:	63000044 	addi	r12,r12,1
  8046fc:	6018913a 	slli	r12,r12,4
  804700:	39c003cc 	andi	r7,r7,15
  804704:	010000c4 	movi	r4,3
  804708:	1b07883a 	add	r3,r3,r12
  80470c:	21c00e2e 	bgeu	r4,r7,804748 <memset+0x100>
  804710:	1813883a 	mov	r9,r3
  804714:	3811883a 	mov	r8,r7
  804718:	010000c4 	movi	r4,3
  80471c:	49800015 	stw	r6,0(r9)
  804720:	423fff04 	addi	r8,r8,-4
  804724:	4a400104 	addi	r9,r9,4
  804728:	223ffc36 	bltu	r4,r8,80471c <__alt_mem_onchip_mem+0xff78471c>
  80472c:	393fff04 	addi	r4,r7,-4
  804730:	2008d0ba 	srli	r4,r4,2
  804734:	39c000cc 	andi	r7,r7,3
  804738:	21000044 	addi	r4,r4,1
  80473c:	2109883a 	add	r4,r4,r4
  804740:	2109883a 	add	r4,r4,r4
  804744:	1907883a 	add	r3,r3,r4
  804748:	38000526 	beq	r7,zero,804760 <memset+0x118>
  80474c:	19cf883a 	add	r7,r3,r7
  804750:	19400005 	stb	r5,0(r3)
  804754:	18c00044 	addi	r3,r3,1
  804758:	38fffd1e 	bne	r7,r3,804750 <__alt_mem_onchip_mem+0xff784750>
  80475c:	f800283a 	ret
  804760:	f800283a 	ret
  804764:	2007883a 	mov	r3,r4
  804768:	300f883a 	mov	r7,r6
  80476c:	003fc706 	br	80468c <__alt_mem_onchip_mem+0xff78468c>

00804770 <_realloc_r>:
  804770:	defff604 	addi	sp,sp,-40
  804774:	dc800215 	stw	r18,8(sp)
  804778:	dfc00915 	stw	ra,36(sp)
  80477c:	df000815 	stw	fp,32(sp)
  804780:	ddc00715 	stw	r23,28(sp)
  804784:	dd800615 	stw	r22,24(sp)
  804788:	dd400515 	stw	r21,20(sp)
  80478c:	dd000415 	stw	r20,16(sp)
  804790:	dcc00315 	stw	r19,12(sp)
  804794:	dc400115 	stw	r17,4(sp)
  804798:	dc000015 	stw	r16,0(sp)
  80479c:	3025883a 	mov	r18,r6
  8047a0:	2800b726 	beq	r5,zero,804a80 <_realloc_r+0x310>
  8047a4:	282b883a 	mov	r21,r5
  8047a8:	2029883a 	mov	r20,r4
  8047ac:	08063d40 	call	8063d4 <__malloc_lock>
  8047b0:	a8bfff17 	ldw	r2,-4(r21)
  8047b4:	043fff04 	movi	r16,-4
  8047b8:	90c002c4 	addi	r3,r18,11
  8047bc:	01000584 	movi	r4,22
  8047c0:	acfffe04 	addi	r19,r21,-8
  8047c4:	1420703a 	and	r16,r2,r16
  8047c8:	20c0332e 	bgeu	r4,r3,804898 <_realloc_r+0x128>
  8047cc:	047ffe04 	movi	r17,-8
  8047d0:	1c62703a 	and	r17,r3,r17
  8047d4:	8807883a 	mov	r3,r17
  8047d8:	88005816 	blt	r17,zero,80493c <_realloc_r+0x1cc>
  8047dc:	8c805736 	bltu	r17,r18,80493c <_realloc_r+0x1cc>
  8047e0:	80c0300e 	bge	r16,r3,8048a4 <_realloc_r+0x134>
  8047e4:	07002074 	movhi	fp,129
  8047e8:	e7297204 	addi	fp,fp,-23096
  8047ec:	e1c00217 	ldw	r7,8(fp)
  8047f0:	9c09883a 	add	r4,r19,r16
  8047f4:	22000117 	ldw	r8,4(r4)
  8047f8:	21c06326 	beq	r4,r7,804988 <_realloc_r+0x218>
  8047fc:	017fff84 	movi	r5,-2
  804800:	414a703a 	and	r5,r8,r5
  804804:	214b883a 	add	r5,r4,r5
  804808:	29800117 	ldw	r6,4(r5)
  80480c:	3180004c 	andi	r6,r6,1
  804810:	30003f26 	beq	r6,zero,804910 <_realloc_r+0x1a0>
  804814:	1080004c 	andi	r2,r2,1
  804818:	10008326 	beq	r2,zero,804a28 <_realloc_r+0x2b8>
  80481c:	900b883a 	mov	r5,r18
  804820:	a009883a 	mov	r4,r20
  804824:	0803ab40 	call	803ab4 <_malloc_r>
  804828:	1025883a 	mov	r18,r2
  80482c:	10011e26 	beq	r2,zero,804ca8 <_realloc_r+0x538>
  804830:	a93fff17 	ldw	r4,-4(r21)
  804834:	10fffe04 	addi	r3,r2,-8
  804838:	00bfff84 	movi	r2,-2
  80483c:	2084703a 	and	r2,r4,r2
  804840:	9885883a 	add	r2,r19,r2
  804844:	1880ee26 	beq	r3,r2,804c00 <_realloc_r+0x490>
  804848:	81bfff04 	addi	r6,r16,-4
  80484c:	00800904 	movi	r2,36
  804850:	1180b836 	bltu	r2,r6,804b34 <_realloc_r+0x3c4>
  804854:	00c004c4 	movi	r3,19
  804858:	19809636 	bltu	r3,r6,804ab4 <_realloc_r+0x344>
  80485c:	9005883a 	mov	r2,r18
  804860:	a807883a 	mov	r3,r21
  804864:	19000017 	ldw	r4,0(r3)
  804868:	11000015 	stw	r4,0(r2)
  80486c:	19000117 	ldw	r4,4(r3)
  804870:	11000115 	stw	r4,4(r2)
  804874:	18c00217 	ldw	r3,8(r3)
  804878:	10c00215 	stw	r3,8(r2)
  80487c:	a80b883a 	mov	r5,r21
  804880:	a009883a 	mov	r4,r20
  804884:	080553c0 	call	80553c <_free_r>
  804888:	a009883a 	mov	r4,r20
  80488c:	08063f80 	call	8063f8 <__malloc_unlock>
  804890:	9005883a 	mov	r2,r18
  804894:	00001206 	br	8048e0 <_realloc_r+0x170>
  804898:	00c00404 	movi	r3,16
  80489c:	1823883a 	mov	r17,r3
  8048a0:	003fce06 	br	8047dc <__alt_mem_onchip_mem+0xff7847dc>
  8048a4:	a825883a 	mov	r18,r21
  8048a8:	8445c83a 	sub	r2,r16,r17
  8048ac:	00c003c4 	movi	r3,15
  8048b0:	18802636 	bltu	r3,r2,80494c <_realloc_r+0x1dc>
  8048b4:	99800117 	ldw	r6,4(r19)
  8048b8:	9c07883a 	add	r3,r19,r16
  8048bc:	3180004c 	andi	r6,r6,1
  8048c0:	3420b03a 	or	r16,r6,r16
  8048c4:	9c000115 	stw	r16,4(r19)
  8048c8:	18800117 	ldw	r2,4(r3)
  8048cc:	10800054 	ori	r2,r2,1
  8048d0:	18800115 	stw	r2,4(r3)
  8048d4:	a009883a 	mov	r4,r20
  8048d8:	08063f80 	call	8063f8 <__malloc_unlock>
  8048dc:	9005883a 	mov	r2,r18
  8048e0:	dfc00917 	ldw	ra,36(sp)
  8048e4:	df000817 	ldw	fp,32(sp)
  8048e8:	ddc00717 	ldw	r23,28(sp)
  8048ec:	dd800617 	ldw	r22,24(sp)
  8048f0:	dd400517 	ldw	r21,20(sp)
  8048f4:	dd000417 	ldw	r20,16(sp)
  8048f8:	dcc00317 	ldw	r19,12(sp)
  8048fc:	dc800217 	ldw	r18,8(sp)
  804900:	dc400117 	ldw	r17,4(sp)
  804904:	dc000017 	ldw	r16,0(sp)
  804908:	dec00a04 	addi	sp,sp,40
  80490c:	f800283a 	ret
  804910:	017fff04 	movi	r5,-4
  804914:	414a703a 	and	r5,r8,r5
  804918:	814d883a 	add	r6,r16,r5
  80491c:	30c01f16 	blt	r6,r3,80499c <_realloc_r+0x22c>
  804920:	20800317 	ldw	r2,12(r4)
  804924:	20c00217 	ldw	r3,8(r4)
  804928:	a825883a 	mov	r18,r21
  80492c:	3021883a 	mov	r16,r6
  804930:	18800315 	stw	r2,12(r3)
  804934:	10c00215 	stw	r3,8(r2)
  804938:	003fdb06 	br	8048a8 <__alt_mem_onchip_mem+0xff7848a8>
  80493c:	00800304 	movi	r2,12
  804940:	a0800015 	stw	r2,0(r20)
  804944:	0005883a 	mov	r2,zero
  804948:	003fe506 	br	8048e0 <__alt_mem_onchip_mem+0xff7848e0>
  80494c:	98c00117 	ldw	r3,4(r19)
  804950:	9c4b883a 	add	r5,r19,r17
  804954:	11000054 	ori	r4,r2,1
  804958:	18c0004c 	andi	r3,r3,1
  80495c:	1c62b03a 	or	r17,r3,r17
  804960:	9c400115 	stw	r17,4(r19)
  804964:	29000115 	stw	r4,4(r5)
  804968:	2885883a 	add	r2,r5,r2
  80496c:	10c00117 	ldw	r3,4(r2)
  804970:	29400204 	addi	r5,r5,8
  804974:	a009883a 	mov	r4,r20
  804978:	18c00054 	ori	r3,r3,1
  80497c:	10c00115 	stw	r3,4(r2)
  804980:	080553c0 	call	80553c <_free_r>
  804984:	003fd306 	br	8048d4 <__alt_mem_onchip_mem+0xff7848d4>
  804988:	017fff04 	movi	r5,-4
  80498c:	414a703a 	and	r5,r8,r5
  804990:	89800404 	addi	r6,r17,16
  804994:	8151883a 	add	r8,r16,r5
  804998:	4180590e 	bge	r8,r6,804b00 <_realloc_r+0x390>
  80499c:	1080004c 	andi	r2,r2,1
  8049a0:	103f9e1e 	bne	r2,zero,80481c <__alt_mem_onchip_mem+0xff78481c>
  8049a4:	adbffe17 	ldw	r22,-8(r21)
  8049a8:	00bfff04 	movi	r2,-4
  8049ac:	9dadc83a 	sub	r22,r19,r22
  8049b0:	b1800117 	ldw	r6,4(r22)
  8049b4:	3084703a 	and	r2,r6,r2
  8049b8:	20002026 	beq	r4,zero,804a3c <_realloc_r+0x2cc>
  8049bc:	80af883a 	add	r23,r16,r2
  8049c0:	b96f883a 	add	r23,r23,r5
  8049c4:	21c05f26 	beq	r4,r7,804b44 <_realloc_r+0x3d4>
  8049c8:	b8c01c16 	blt	r23,r3,804a3c <_realloc_r+0x2cc>
  8049cc:	20800317 	ldw	r2,12(r4)
  8049d0:	20c00217 	ldw	r3,8(r4)
  8049d4:	81bfff04 	addi	r6,r16,-4
  8049d8:	01000904 	movi	r4,36
  8049dc:	18800315 	stw	r2,12(r3)
  8049e0:	10c00215 	stw	r3,8(r2)
  8049e4:	b0c00217 	ldw	r3,8(r22)
  8049e8:	b0800317 	ldw	r2,12(r22)
  8049ec:	b4800204 	addi	r18,r22,8
  8049f0:	18800315 	stw	r2,12(r3)
  8049f4:	10c00215 	stw	r3,8(r2)
  8049f8:	21801b36 	bltu	r4,r6,804a68 <_realloc_r+0x2f8>
  8049fc:	008004c4 	movi	r2,19
  804a00:	1180352e 	bgeu	r2,r6,804ad8 <_realloc_r+0x368>
  804a04:	a8800017 	ldw	r2,0(r21)
  804a08:	b0800215 	stw	r2,8(r22)
  804a0c:	a8800117 	ldw	r2,4(r21)
  804a10:	b0800315 	stw	r2,12(r22)
  804a14:	008006c4 	movi	r2,27
  804a18:	11807f36 	bltu	r2,r6,804c18 <_realloc_r+0x4a8>
  804a1c:	b0800404 	addi	r2,r22,16
  804a20:	ad400204 	addi	r21,r21,8
  804a24:	00002d06 	br	804adc <_realloc_r+0x36c>
  804a28:	adbffe17 	ldw	r22,-8(r21)
  804a2c:	00bfff04 	movi	r2,-4
  804a30:	9dadc83a 	sub	r22,r19,r22
  804a34:	b1000117 	ldw	r4,4(r22)
  804a38:	2084703a 	and	r2,r4,r2
  804a3c:	b03f7726 	beq	r22,zero,80481c <__alt_mem_onchip_mem+0xff78481c>
  804a40:	80af883a 	add	r23,r16,r2
  804a44:	b8ff7516 	blt	r23,r3,80481c <__alt_mem_onchip_mem+0xff78481c>
  804a48:	b0800317 	ldw	r2,12(r22)
  804a4c:	b0c00217 	ldw	r3,8(r22)
  804a50:	81bfff04 	addi	r6,r16,-4
  804a54:	01000904 	movi	r4,36
  804a58:	18800315 	stw	r2,12(r3)
  804a5c:	10c00215 	stw	r3,8(r2)
  804a60:	b4800204 	addi	r18,r22,8
  804a64:	21bfe52e 	bgeu	r4,r6,8049fc <__alt_mem_onchip_mem+0xff7849fc>
  804a68:	a80b883a 	mov	r5,r21
  804a6c:	9009883a 	mov	r4,r18
  804a70:	08044ec0 	call	8044ec <memmove>
  804a74:	b821883a 	mov	r16,r23
  804a78:	b027883a 	mov	r19,r22
  804a7c:	003f8a06 	br	8048a8 <__alt_mem_onchip_mem+0xff7848a8>
  804a80:	300b883a 	mov	r5,r6
  804a84:	dfc00917 	ldw	ra,36(sp)
  804a88:	df000817 	ldw	fp,32(sp)
  804a8c:	ddc00717 	ldw	r23,28(sp)
  804a90:	dd800617 	ldw	r22,24(sp)
  804a94:	dd400517 	ldw	r21,20(sp)
  804a98:	dd000417 	ldw	r20,16(sp)
  804a9c:	dcc00317 	ldw	r19,12(sp)
  804aa0:	dc800217 	ldw	r18,8(sp)
  804aa4:	dc400117 	ldw	r17,4(sp)
  804aa8:	dc000017 	ldw	r16,0(sp)
  804aac:	dec00a04 	addi	sp,sp,40
  804ab0:	0803ab41 	jmpi	803ab4 <_malloc_r>
  804ab4:	a8c00017 	ldw	r3,0(r21)
  804ab8:	90c00015 	stw	r3,0(r18)
  804abc:	a8c00117 	ldw	r3,4(r21)
  804ac0:	90c00115 	stw	r3,4(r18)
  804ac4:	00c006c4 	movi	r3,27
  804ac8:	19804536 	bltu	r3,r6,804be0 <_realloc_r+0x470>
  804acc:	90800204 	addi	r2,r18,8
  804ad0:	a8c00204 	addi	r3,r21,8
  804ad4:	003f6306 	br	804864 <__alt_mem_onchip_mem+0xff784864>
  804ad8:	9005883a 	mov	r2,r18
  804adc:	a8c00017 	ldw	r3,0(r21)
  804ae0:	b821883a 	mov	r16,r23
  804ae4:	b027883a 	mov	r19,r22
  804ae8:	10c00015 	stw	r3,0(r2)
  804aec:	a8c00117 	ldw	r3,4(r21)
  804af0:	10c00115 	stw	r3,4(r2)
  804af4:	a8c00217 	ldw	r3,8(r21)
  804af8:	10c00215 	stw	r3,8(r2)
  804afc:	003f6a06 	br	8048a8 <__alt_mem_onchip_mem+0xff7848a8>
  804b00:	9c67883a 	add	r19,r19,r17
  804b04:	4445c83a 	sub	r2,r8,r17
  804b08:	e4c00215 	stw	r19,8(fp)
  804b0c:	10800054 	ori	r2,r2,1
  804b10:	98800115 	stw	r2,4(r19)
  804b14:	a8bfff17 	ldw	r2,-4(r21)
  804b18:	a009883a 	mov	r4,r20
  804b1c:	1080004c 	andi	r2,r2,1
  804b20:	1462b03a 	or	r17,r2,r17
  804b24:	ac7fff15 	stw	r17,-4(r21)
  804b28:	08063f80 	call	8063f8 <__malloc_unlock>
  804b2c:	a805883a 	mov	r2,r21
  804b30:	003f6b06 	br	8048e0 <__alt_mem_onchip_mem+0xff7848e0>
  804b34:	a80b883a 	mov	r5,r21
  804b38:	9009883a 	mov	r4,r18
  804b3c:	08044ec0 	call	8044ec <memmove>
  804b40:	003f4e06 	br	80487c <__alt_mem_onchip_mem+0xff78487c>
  804b44:	89000404 	addi	r4,r17,16
  804b48:	b93fbc16 	blt	r23,r4,804a3c <__alt_mem_onchip_mem+0xff784a3c>
  804b4c:	b0800317 	ldw	r2,12(r22)
  804b50:	b0c00217 	ldw	r3,8(r22)
  804b54:	81bfff04 	addi	r6,r16,-4
  804b58:	01000904 	movi	r4,36
  804b5c:	18800315 	stw	r2,12(r3)
  804b60:	10c00215 	stw	r3,8(r2)
  804b64:	b4800204 	addi	r18,r22,8
  804b68:	21804336 	bltu	r4,r6,804c78 <_realloc_r+0x508>
  804b6c:	008004c4 	movi	r2,19
  804b70:	11803f2e 	bgeu	r2,r6,804c70 <_realloc_r+0x500>
  804b74:	a8800017 	ldw	r2,0(r21)
  804b78:	b0800215 	stw	r2,8(r22)
  804b7c:	a8800117 	ldw	r2,4(r21)
  804b80:	b0800315 	stw	r2,12(r22)
  804b84:	008006c4 	movi	r2,27
  804b88:	11803f36 	bltu	r2,r6,804c88 <_realloc_r+0x518>
  804b8c:	b0800404 	addi	r2,r22,16
  804b90:	ad400204 	addi	r21,r21,8
  804b94:	a8c00017 	ldw	r3,0(r21)
  804b98:	10c00015 	stw	r3,0(r2)
  804b9c:	a8c00117 	ldw	r3,4(r21)
  804ba0:	10c00115 	stw	r3,4(r2)
  804ba4:	a8c00217 	ldw	r3,8(r21)
  804ba8:	10c00215 	stw	r3,8(r2)
  804bac:	b447883a 	add	r3,r22,r17
  804bb0:	bc45c83a 	sub	r2,r23,r17
  804bb4:	e0c00215 	stw	r3,8(fp)
  804bb8:	10800054 	ori	r2,r2,1
  804bbc:	18800115 	stw	r2,4(r3)
  804bc0:	b0800117 	ldw	r2,4(r22)
  804bc4:	a009883a 	mov	r4,r20
  804bc8:	1080004c 	andi	r2,r2,1
  804bcc:	1462b03a 	or	r17,r2,r17
  804bd0:	b4400115 	stw	r17,4(r22)
  804bd4:	08063f80 	call	8063f8 <__malloc_unlock>
  804bd8:	9005883a 	mov	r2,r18
  804bdc:	003f4006 	br	8048e0 <__alt_mem_onchip_mem+0xff7848e0>
  804be0:	a8c00217 	ldw	r3,8(r21)
  804be4:	90c00215 	stw	r3,8(r18)
  804be8:	a8c00317 	ldw	r3,12(r21)
  804bec:	90c00315 	stw	r3,12(r18)
  804bf0:	30801126 	beq	r6,r2,804c38 <_realloc_r+0x4c8>
  804bf4:	90800404 	addi	r2,r18,16
  804bf8:	a8c00404 	addi	r3,r21,16
  804bfc:	003f1906 	br	804864 <__alt_mem_onchip_mem+0xff784864>
  804c00:	90ffff17 	ldw	r3,-4(r18)
  804c04:	00bfff04 	movi	r2,-4
  804c08:	a825883a 	mov	r18,r21
  804c0c:	1884703a 	and	r2,r3,r2
  804c10:	80a1883a 	add	r16,r16,r2
  804c14:	003f2406 	br	8048a8 <__alt_mem_onchip_mem+0xff7848a8>
  804c18:	a8800217 	ldw	r2,8(r21)
  804c1c:	b0800415 	stw	r2,16(r22)
  804c20:	a8800317 	ldw	r2,12(r21)
  804c24:	b0800515 	stw	r2,20(r22)
  804c28:	31000a26 	beq	r6,r4,804c54 <_realloc_r+0x4e4>
  804c2c:	b0800604 	addi	r2,r22,24
  804c30:	ad400404 	addi	r21,r21,16
  804c34:	003fa906 	br	804adc <__alt_mem_onchip_mem+0xff784adc>
  804c38:	a9000417 	ldw	r4,16(r21)
  804c3c:	90800604 	addi	r2,r18,24
  804c40:	a8c00604 	addi	r3,r21,24
  804c44:	91000415 	stw	r4,16(r18)
  804c48:	a9000517 	ldw	r4,20(r21)
  804c4c:	91000515 	stw	r4,20(r18)
  804c50:	003f0406 	br	804864 <__alt_mem_onchip_mem+0xff784864>
  804c54:	a8c00417 	ldw	r3,16(r21)
  804c58:	ad400604 	addi	r21,r21,24
  804c5c:	b0800804 	addi	r2,r22,32
  804c60:	b0c00615 	stw	r3,24(r22)
  804c64:	a8ffff17 	ldw	r3,-4(r21)
  804c68:	b0c00715 	stw	r3,28(r22)
  804c6c:	003f9b06 	br	804adc <__alt_mem_onchip_mem+0xff784adc>
  804c70:	9005883a 	mov	r2,r18
  804c74:	003fc706 	br	804b94 <__alt_mem_onchip_mem+0xff784b94>
  804c78:	a80b883a 	mov	r5,r21
  804c7c:	9009883a 	mov	r4,r18
  804c80:	08044ec0 	call	8044ec <memmove>
  804c84:	003fc906 	br	804bac <__alt_mem_onchip_mem+0xff784bac>
  804c88:	a8800217 	ldw	r2,8(r21)
  804c8c:	b0800415 	stw	r2,16(r22)
  804c90:	a8800317 	ldw	r2,12(r21)
  804c94:	b0800515 	stw	r2,20(r22)
  804c98:	31000726 	beq	r6,r4,804cb8 <_realloc_r+0x548>
  804c9c:	b0800604 	addi	r2,r22,24
  804ca0:	ad400404 	addi	r21,r21,16
  804ca4:	003fbb06 	br	804b94 <__alt_mem_onchip_mem+0xff784b94>
  804ca8:	a009883a 	mov	r4,r20
  804cac:	08063f80 	call	8063f8 <__malloc_unlock>
  804cb0:	0005883a 	mov	r2,zero
  804cb4:	003f0a06 	br	8048e0 <__alt_mem_onchip_mem+0xff7848e0>
  804cb8:	a8c00417 	ldw	r3,16(r21)
  804cbc:	ad400604 	addi	r21,r21,24
  804cc0:	b0800804 	addi	r2,r22,32
  804cc4:	b0c00615 	stw	r3,24(r22)
  804cc8:	a8ffff17 	ldw	r3,-4(r21)
  804ccc:	b0c00715 	stw	r3,28(r22)
  804cd0:	003fb006 	br	804b94 <__alt_mem_onchip_mem+0xff784b94>

00804cd4 <_sbrk_r>:
  804cd4:	defffd04 	addi	sp,sp,-12
  804cd8:	dc000015 	stw	r16,0(sp)
  804cdc:	04002074 	movhi	r16,129
  804ce0:	dc400115 	stw	r17,4(sp)
  804ce4:	8436f104 	addi	r16,r16,-9276
  804ce8:	2023883a 	mov	r17,r4
  804cec:	2809883a 	mov	r4,r5
  804cf0:	dfc00215 	stw	ra,8(sp)
  804cf4:	80000015 	stw	zero,0(r16)
  804cf8:	08065b80 	call	8065b8 <sbrk>
  804cfc:	00ffffc4 	movi	r3,-1
  804d00:	10c00526 	beq	r2,r3,804d18 <_sbrk_r+0x44>
  804d04:	dfc00217 	ldw	ra,8(sp)
  804d08:	dc400117 	ldw	r17,4(sp)
  804d0c:	dc000017 	ldw	r16,0(sp)
  804d10:	dec00304 	addi	sp,sp,12
  804d14:	f800283a 	ret
  804d18:	80c00017 	ldw	r3,0(r16)
  804d1c:	183ff926 	beq	r3,zero,804d04 <__alt_mem_onchip_mem+0xff784d04>
  804d20:	88c00015 	stw	r3,0(r17)
  804d24:	003ff706 	br	804d04 <__alt_mem_onchip_mem+0xff784d04>

00804d28 <__sread>:
  804d28:	defffe04 	addi	sp,sp,-8
  804d2c:	dc000015 	stw	r16,0(sp)
  804d30:	2821883a 	mov	r16,r5
  804d34:	2940038f 	ldh	r5,14(r5)
  804d38:	dfc00115 	stw	ra,4(sp)
  804d3c:	0805a680 	call	805a68 <_read_r>
  804d40:	10000716 	blt	r2,zero,804d60 <__sread+0x38>
  804d44:	80c01417 	ldw	r3,80(r16)
  804d48:	1887883a 	add	r3,r3,r2
  804d4c:	80c01415 	stw	r3,80(r16)
  804d50:	dfc00117 	ldw	ra,4(sp)
  804d54:	dc000017 	ldw	r16,0(sp)
  804d58:	dec00204 	addi	sp,sp,8
  804d5c:	f800283a 	ret
  804d60:	80c0030b 	ldhu	r3,12(r16)
  804d64:	18fbffcc 	andi	r3,r3,61439
  804d68:	80c0030d 	sth	r3,12(r16)
  804d6c:	dfc00117 	ldw	ra,4(sp)
  804d70:	dc000017 	ldw	r16,0(sp)
  804d74:	dec00204 	addi	sp,sp,8
  804d78:	f800283a 	ret

00804d7c <__seofread>:
  804d7c:	0005883a 	mov	r2,zero
  804d80:	f800283a 	ret

00804d84 <__swrite>:
  804d84:	2880030b 	ldhu	r2,12(r5)
  804d88:	defffb04 	addi	sp,sp,-20
  804d8c:	dcc00315 	stw	r19,12(sp)
  804d90:	dc800215 	stw	r18,8(sp)
  804d94:	dc400115 	stw	r17,4(sp)
  804d98:	dc000015 	stw	r16,0(sp)
  804d9c:	dfc00415 	stw	ra,16(sp)
  804da0:	10c0400c 	andi	r3,r2,256
  804da4:	2821883a 	mov	r16,r5
  804da8:	2023883a 	mov	r17,r4
  804dac:	3025883a 	mov	r18,r6
  804db0:	3827883a 	mov	r19,r7
  804db4:	18000526 	beq	r3,zero,804dcc <__swrite+0x48>
  804db8:	2940038f 	ldh	r5,14(r5)
  804dbc:	01c00084 	movi	r7,2
  804dc0:	000d883a 	mov	r6,zero
  804dc4:	080584c0 	call	80584c <_lseek_r>
  804dc8:	8080030b 	ldhu	r2,12(r16)
  804dcc:	8140038f 	ldh	r5,14(r16)
  804dd0:	10bbffcc 	andi	r2,r2,61439
  804dd4:	980f883a 	mov	r7,r19
  804dd8:	900d883a 	mov	r6,r18
  804ddc:	8809883a 	mov	r4,r17
  804de0:	8080030d 	sth	r2,12(r16)
  804de4:	dfc00417 	ldw	ra,16(sp)
  804de8:	dcc00317 	ldw	r19,12(sp)
  804dec:	dc800217 	ldw	r18,8(sp)
  804df0:	dc400117 	ldw	r17,4(sp)
  804df4:	dc000017 	ldw	r16,0(sp)
  804df8:	dec00504 	addi	sp,sp,20
  804dfc:	0804e641 	jmpi	804e64 <_write_r>

00804e00 <__sseek>:
  804e00:	defffe04 	addi	sp,sp,-8
  804e04:	dc000015 	stw	r16,0(sp)
  804e08:	2821883a 	mov	r16,r5
  804e0c:	2940038f 	ldh	r5,14(r5)
  804e10:	dfc00115 	stw	ra,4(sp)
  804e14:	080584c0 	call	80584c <_lseek_r>
  804e18:	00ffffc4 	movi	r3,-1
  804e1c:	10c00826 	beq	r2,r3,804e40 <__sseek+0x40>
  804e20:	80c0030b 	ldhu	r3,12(r16)
  804e24:	80801415 	stw	r2,80(r16)
  804e28:	18c40014 	ori	r3,r3,4096
  804e2c:	80c0030d 	sth	r3,12(r16)
  804e30:	dfc00117 	ldw	ra,4(sp)
  804e34:	dc000017 	ldw	r16,0(sp)
  804e38:	dec00204 	addi	sp,sp,8
  804e3c:	f800283a 	ret
  804e40:	80c0030b 	ldhu	r3,12(r16)
  804e44:	18fbffcc 	andi	r3,r3,61439
  804e48:	80c0030d 	sth	r3,12(r16)
  804e4c:	dfc00117 	ldw	ra,4(sp)
  804e50:	dc000017 	ldw	r16,0(sp)
  804e54:	dec00204 	addi	sp,sp,8
  804e58:	f800283a 	ret

00804e5c <__sclose>:
  804e5c:	2940038f 	ldh	r5,14(r5)
  804e60:	08050181 	jmpi	805018 <_close_r>

00804e64 <_write_r>:
  804e64:	defffd04 	addi	sp,sp,-12
  804e68:	2805883a 	mov	r2,r5
  804e6c:	dc000015 	stw	r16,0(sp)
  804e70:	04002074 	movhi	r16,129
  804e74:	dc400115 	stw	r17,4(sp)
  804e78:	300b883a 	mov	r5,r6
  804e7c:	8436f104 	addi	r16,r16,-9276
  804e80:	2023883a 	mov	r17,r4
  804e84:	380d883a 	mov	r6,r7
  804e88:	1009883a 	mov	r4,r2
  804e8c:	dfc00215 	stw	ra,8(sp)
  804e90:	80000015 	stw	zero,0(r16)
  804e94:	08068480 	call	806848 <write>
  804e98:	00ffffc4 	movi	r3,-1
  804e9c:	10c00526 	beq	r2,r3,804eb4 <_write_r+0x50>
  804ea0:	dfc00217 	ldw	ra,8(sp)
  804ea4:	dc400117 	ldw	r17,4(sp)
  804ea8:	dc000017 	ldw	r16,0(sp)
  804eac:	dec00304 	addi	sp,sp,12
  804eb0:	f800283a 	ret
  804eb4:	80c00017 	ldw	r3,0(r16)
  804eb8:	183ff926 	beq	r3,zero,804ea0 <__alt_mem_onchip_mem+0xff784ea0>
  804ebc:	88c00015 	stw	r3,0(r17)
  804ec0:	003ff706 	br	804ea0 <__alt_mem_onchip_mem+0xff784ea0>

00804ec4 <__swsetup_r>:
  804ec4:	00802074 	movhi	r2,129
  804ec8:	defffd04 	addi	sp,sp,-12
  804ecc:	10af7004 	addi	r2,r2,-16960
  804ed0:	dc400115 	stw	r17,4(sp)
  804ed4:	2023883a 	mov	r17,r4
  804ed8:	11000017 	ldw	r4,0(r2)
  804edc:	dc000015 	stw	r16,0(sp)
  804ee0:	dfc00215 	stw	ra,8(sp)
  804ee4:	2821883a 	mov	r16,r5
  804ee8:	20000226 	beq	r4,zero,804ef4 <__swsetup_r+0x30>
  804eec:	20800e17 	ldw	r2,56(r4)
  804ef0:	10003126 	beq	r2,zero,804fb8 <__swsetup_r+0xf4>
  804ef4:	8080030b 	ldhu	r2,12(r16)
  804ef8:	10c0020c 	andi	r3,r2,8
  804efc:	1009883a 	mov	r4,r2
  804f00:	18000f26 	beq	r3,zero,804f40 <__swsetup_r+0x7c>
  804f04:	80c00417 	ldw	r3,16(r16)
  804f08:	18001526 	beq	r3,zero,804f60 <__swsetup_r+0x9c>
  804f0c:	1100004c 	andi	r4,r2,1
  804f10:	20001c1e 	bne	r4,zero,804f84 <__swsetup_r+0xc0>
  804f14:	1080008c 	andi	r2,r2,2
  804f18:	1000291e 	bne	r2,zero,804fc0 <__swsetup_r+0xfc>
  804f1c:	80800517 	ldw	r2,20(r16)
  804f20:	80800215 	stw	r2,8(r16)
  804f24:	18001c26 	beq	r3,zero,804f98 <__swsetup_r+0xd4>
  804f28:	0005883a 	mov	r2,zero
  804f2c:	dfc00217 	ldw	ra,8(sp)
  804f30:	dc400117 	ldw	r17,4(sp)
  804f34:	dc000017 	ldw	r16,0(sp)
  804f38:	dec00304 	addi	sp,sp,12
  804f3c:	f800283a 	ret
  804f40:	2080040c 	andi	r2,r4,16
  804f44:	10002e26 	beq	r2,zero,805000 <__swsetup_r+0x13c>
  804f48:	2080010c 	andi	r2,r4,4
  804f4c:	10001e1e 	bne	r2,zero,804fc8 <__swsetup_r+0x104>
  804f50:	80c00417 	ldw	r3,16(r16)
  804f54:	20800214 	ori	r2,r4,8
  804f58:	8080030d 	sth	r2,12(r16)
  804f5c:	183feb1e 	bne	r3,zero,804f0c <__alt_mem_onchip_mem+0xff784f0c>
  804f60:	1100a00c 	andi	r4,r2,640
  804f64:	01408004 	movi	r5,512
  804f68:	217fe826 	beq	r4,r5,804f0c <__alt_mem_onchip_mem+0xff784f0c>
  804f6c:	800b883a 	mov	r5,r16
  804f70:	8809883a 	mov	r4,r17
  804f74:	08058ac0 	call	8058ac <__smakebuf_r>
  804f78:	8080030b 	ldhu	r2,12(r16)
  804f7c:	80c00417 	ldw	r3,16(r16)
  804f80:	003fe206 	br	804f0c <__alt_mem_onchip_mem+0xff784f0c>
  804f84:	80800517 	ldw	r2,20(r16)
  804f88:	80000215 	stw	zero,8(r16)
  804f8c:	0085c83a 	sub	r2,zero,r2
  804f90:	80800615 	stw	r2,24(r16)
  804f94:	183fe41e 	bne	r3,zero,804f28 <__alt_mem_onchip_mem+0xff784f28>
  804f98:	80c0030b 	ldhu	r3,12(r16)
  804f9c:	0005883a 	mov	r2,zero
  804fa0:	1900200c 	andi	r4,r3,128
  804fa4:	203fe126 	beq	r4,zero,804f2c <__alt_mem_onchip_mem+0xff784f2c>
  804fa8:	18c01014 	ori	r3,r3,64
  804fac:	80c0030d 	sth	r3,12(r16)
  804fb0:	00bfffc4 	movi	r2,-1
  804fb4:	003fdd06 	br	804f2c <__alt_mem_onchip_mem+0xff784f2c>
  804fb8:	08034200 	call	803420 <__sinit>
  804fbc:	003fcd06 	br	804ef4 <__alt_mem_onchip_mem+0xff784ef4>
  804fc0:	0005883a 	mov	r2,zero
  804fc4:	003fd606 	br	804f20 <__alt_mem_onchip_mem+0xff784f20>
  804fc8:	81400c17 	ldw	r5,48(r16)
  804fcc:	28000626 	beq	r5,zero,804fe8 <__swsetup_r+0x124>
  804fd0:	80801004 	addi	r2,r16,64
  804fd4:	28800326 	beq	r5,r2,804fe4 <__swsetup_r+0x120>
  804fd8:	8809883a 	mov	r4,r17
  804fdc:	080553c0 	call	80553c <_free_r>
  804fe0:	8100030b 	ldhu	r4,12(r16)
  804fe4:	80000c15 	stw	zero,48(r16)
  804fe8:	80c00417 	ldw	r3,16(r16)
  804fec:	00bff6c4 	movi	r2,-37
  804ff0:	1108703a 	and	r4,r2,r4
  804ff4:	80000115 	stw	zero,4(r16)
  804ff8:	80c00015 	stw	r3,0(r16)
  804ffc:	003fd506 	br	804f54 <__alt_mem_onchip_mem+0xff784f54>
  805000:	00800244 	movi	r2,9
  805004:	88800015 	stw	r2,0(r17)
  805008:	20801014 	ori	r2,r4,64
  80500c:	8080030d 	sth	r2,12(r16)
  805010:	00bfffc4 	movi	r2,-1
  805014:	003fc506 	br	804f2c <__alt_mem_onchip_mem+0xff784f2c>

00805018 <_close_r>:
  805018:	defffd04 	addi	sp,sp,-12
  80501c:	dc000015 	stw	r16,0(sp)
  805020:	04002074 	movhi	r16,129
  805024:	dc400115 	stw	r17,4(sp)
  805028:	8436f104 	addi	r16,r16,-9276
  80502c:	2023883a 	mov	r17,r4
  805030:	2809883a 	mov	r4,r5
  805034:	dfc00215 	stw	ra,8(sp)
  805038:	80000015 	stw	zero,0(r16)
  80503c:	0805e940 	call	805e94 <close>
  805040:	00ffffc4 	movi	r3,-1
  805044:	10c00526 	beq	r2,r3,80505c <_close_r+0x44>
  805048:	dfc00217 	ldw	ra,8(sp)
  80504c:	dc400117 	ldw	r17,4(sp)
  805050:	dc000017 	ldw	r16,0(sp)
  805054:	dec00304 	addi	sp,sp,12
  805058:	f800283a 	ret
  80505c:	80c00017 	ldw	r3,0(r16)
  805060:	183ff926 	beq	r3,zero,805048 <__alt_mem_onchip_mem+0xff785048>
  805064:	88c00015 	stw	r3,0(r17)
  805068:	003ff706 	br	805048 <__alt_mem_onchip_mem+0xff785048>

0080506c <_fclose_r>:
  80506c:	28003926 	beq	r5,zero,805154 <_fclose_r+0xe8>
  805070:	defffc04 	addi	sp,sp,-16
  805074:	dc400115 	stw	r17,4(sp)
  805078:	dc000015 	stw	r16,0(sp)
  80507c:	dfc00315 	stw	ra,12(sp)
  805080:	dc800215 	stw	r18,8(sp)
  805084:	2023883a 	mov	r17,r4
  805088:	2821883a 	mov	r16,r5
  80508c:	20000226 	beq	r4,zero,805098 <_fclose_r+0x2c>
  805090:	20800e17 	ldw	r2,56(r4)
  805094:	10002726 	beq	r2,zero,805134 <_fclose_r+0xc8>
  805098:	8080030f 	ldh	r2,12(r16)
  80509c:	1000071e 	bne	r2,zero,8050bc <_fclose_r+0x50>
  8050a0:	0005883a 	mov	r2,zero
  8050a4:	dfc00317 	ldw	ra,12(sp)
  8050a8:	dc800217 	ldw	r18,8(sp)
  8050ac:	dc400117 	ldw	r17,4(sp)
  8050b0:	dc000017 	ldw	r16,0(sp)
  8050b4:	dec00404 	addi	sp,sp,16
  8050b8:	f800283a 	ret
  8050bc:	800b883a 	mov	r5,r16
  8050c0:	8809883a 	mov	r4,r17
  8050c4:	08051700 	call	805170 <__sflush_r>
  8050c8:	1025883a 	mov	r18,r2
  8050cc:	80800b17 	ldw	r2,44(r16)
  8050d0:	10000426 	beq	r2,zero,8050e4 <_fclose_r+0x78>
  8050d4:	81400717 	ldw	r5,28(r16)
  8050d8:	8809883a 	mov	r4,r17
  8050dc:	103ee83a 	callr	r2
  8050e0:	10001616 	blt	r2,zero,80513c <_fclose_r+0xd0>
  8050e4:	8080030b 	ldhu	r2,12(r16)
  8050e8:	1080200c 	andi	r2,r2,128
  8050ec:	1000151e 	bne	r2,zero,805144 <_fclose_r+0xd8>
  8050f0:	81400c17 	ldw	r5,48(r16)
  8050f4:	28000526 	beq	r5,zero,80510c <_fclose_r+0xa0>
  8050f8:	80801004 	addi	r2,r16,64
  8050fc:	28800226 	beq	r5,r2,805108 <_fclose_r+0x9c>
  805100:	8809883a 	mov	r4,r17
  805104:	080553c0 	call	80553c <_free_r>
  805108:	80000c15 	stw	zero,48(r16)
  80510c:	81401117 	ldw	r5,68(r16)
  805110:	28000326 	beq	r5,zero,805120 <_fclose_r+0xb4>
  805114:	8809883a 	mov	r4,r17
  805118:	080553c0 	call	80553c <_free_r>
  80511c:	80001115 	stw	zero,68(r16)
  805120:	08034300 	call	803430 <__sfp_lock_acquire>
  805124:	8000030d 	sth	zero,12(r16)
  805128:	08034340 	call	803434 <__sfp_lock_release>
  80512c:	9005883a 	mov	r2,r18
  805130:	003fdc06 	br	8050a4 <__alt_mem_onchip_mem+0xff7850a4>
  805134:	08034200 	call	803420 <__sinit>
  805138:	003fd706 	br	805098 <__alt_mem_onchip_mem+0xff785098>
  80513c:	04bfffc4 	movi	r18,-1
  805140:	003fe806 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>
  805144:	81400417 	ldw	r5,16(r16)
  805148:	8809883a 	mov	r4,r17
  80514c:	080553c0 	call	80553c <_free_r>
  805150:	003fe706 	br	8050f0 <__alt_mem_onchip_mem+0xff7850f0>
  805154:	0005883a 	mov	r2,zero
  805158:	f800283a 	ret

0080515c <fclose>:
  80515c:	00802074 	movhi	r2,129
  805160:	10af7004 	addi	r2,r2,-16960
  805164:	200b883a 	mov	r5,r4
  805168:	11000017 	ldw	r4,0(r2)
  80516c:	080506c1 	jmpi	80506c <_fclose_r>

00805170 <__sflush_r>:
  805170:	2880030b 	ldhu	r2,12(r5)
  805174:	defffb04 	addi	sp,sp,-20
  805178:	dcc00315 	stw	r19,12(sp)
  80517c:	dc400115 	stw	r17,4(sp)
  805180:	dfc00415 	stw	ra,16(sp)
  805184:	dc800215 	stw	r18,8(sp)
  805188:	dc000015 	stw	r16,0(sp)
  80518c:	10c0020c 	andi	r3,r2,8
  805190:	2823883a 	mov	r17,r5
  805194:	2027883a 	mov	r19,r4
  805198:	1800311e 	bne	r3,zero,805260 <__sflush_r+0xf0>
  80519c:	28c00117 	ldw	r3,4(r5)
  8051a0:	10820014 	ori	r2,r2,2048
  8051a4:	2880030d 	sth	r2,12(r5)
  8051a8:	00c04b0e 	bge	zero,r3,8052d8 <__sflush_r+0x168>
  8051ac:	8a000a17 	ldw	r8,40(r17)
  8051b0:	40002326 	beq	r8,zero,805240 <__sflush_r+0xd0>
  8051b4:	9c000017 	ldw	r16,0(r19)
  8051b8:	10c4000c 	andi	r3,r2,4096
  8051bc:	98000015 	stw	zero,0(r19)
  8051c0:	18004826 	beq	r3,zero,8052e4 <__sflush_r+0x174>
  8051c4:	89801417 	ldw	r6,80(r17)
  8051c8:	10c0010c 	andi	r3,r2,4
  8051cc:	18000626 	beq	r3,zero,8051e8 <__sflush_r+0x78>
  8051d0:	88c00117 	ldw	r3,4(r17)
  8051d4:	88800c17 	ldw	r2,48(r17)
  8051d8:	30cdc83a 	sub	r6,r6,r3
  8051dc:	10000226 	beq	r2,zero,8051e8 <__sflush_r+0x78>
  8051e0:	88800f17 	ldw	r2,60(r17)
  8051e4:	308dc83a 	sub	r6,r6,r2
  8051e8:	89400717 	ldw	r5,28(r17)
  8051ec:	000f883a 	mov	r7,zero
  8051f0:	9809883a 	mov	r4,r19
  8051f4:	403ee83a 	callr	r8
  8051f8:	00ffffc4 	movi	r3,-1
  8051fc:	10c04426 	beq	r2,r3,805310 <__sflush_r+0x1a0>
  805200:	88c0030b 	ldhu	r3,12(r17)
  805204:	89000417 	ldw	r4,16(r17)
  805208:	88000115 	stw	zero,4(r17)
  80520c:	197dffcc 	andi	r5,r3,63487
  805210:	8940030d 	sth	r5,12(r17)
  805214:	89000015 	stw	r4,0(r17)
  805218:	18c4000c 	andi	r3,r3,4096
  80521c:	18002c1e 	bne	r3,zero,8052d0 <__sflush_r+0x160>
  805220:	89400c17 	ldw	r5,48(r17)
  805224:	9c000015 	stw	r16,0(r19)
  805228:	28000526 	beq	r5,zero,805240 <__sflush_r+0xd0>
  80522c:	88801004 	addi	r2,r17,64
  805230:	28800226 	beq	r5,r2,80523c <__sflush_r+0xcc>
  805234:	9809883a 	mov	r4,r19
  805238:	080553c0 	call	80553c <_free_r>
  80523c:	88000c15 	stw	zero,48(r17)
  805240:	0005883a 	mov	r2,zero
  805244:	dfc00417 	ldw	ra,16(sp)
  805248:	dcc00317 	ldw	r19,12(sp)
  80524c:	dc800217 	ldw	r18,8(sp)
  805250:	dc400117 	ldw	r17,4(sp)
  805254:	dc000017 	ldw	r16,0(sp)
  805258:	dec00504 	addi	sp,sp,20
  80525c:	f800283a 	ret
  805260:	2c800417 	ldw	r18,16(r5)
  805264:	903ff626 	beq	r18,zero,805240 <__alt_mem_onchip_mem+0xff785240>
  805268:	2c000017 	ldw	r16,0(r5)
  80526c:	108000cc 	andi	r2,r2,3
  805270:	2c800015 	stw	r18,0(r5)
  805274:	84a1c83a 	sub	r16,r16,r18
  805278:	1000131e 	bne	r2,zero,8052c8 <__sflush_r+0x158>
  80527c:	28800517 	ldw	r2,20(r5)
  805280:	88800215 	stw	r2,8(r17)
  805284:	04000316 	blt	zero,r16,805294 <__sflush_r+0x124>
  805288:	003fed06 	br	805240 <__alt_mem_onchip_mem+0xff785240>
  80528c:	90a5883a 	add	r18,r18,r2
  805290:	043feb0e 	bge	zero,r16,805240 <__alt_mem_onchip_mem+0xff785240>
  805294:	88800917 	ldw	r2,36(r17)
  805298:	89400717 	ldw	r5,28(r17)
  80529c:	800f883a 	mov	r7,r16
  8052a0:	900d883a 	mov	r6,r18
  8052a4:	9809883a 	mov	r4,r19
  8052a8:	103ee83a 	callr	r2
  8052ac:	80a1c83a 	sub	r16,r16,r2
  8052b0:	00bff616 	blt	zero,r2,80528c <__alt_mem_onchip_mem+0xff78528c>
  8052b4:	88c0030b 	ldhu	r3,12(r17)
  8052b8:	00bfffc4 	movi	r2,-1
  8052bc:	18c01014 	ori	r3,r3,64
  8052c0:	88c0030d 	sth	r3,12(r17)
  8052c4:	003fdf06 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  8052c8:	0005883a 	mov	r2,zero
  8052cc:	003fec06 	br	805280 <__alt_mem_onchip_mem+0xff785280>
  8052d0:	88801415 	stw	r2,80(r17)
  8052d4:	003fd206 	br	805220 <__alt_mem_onchip_mem+0xff785220>
  8052d8:	28c00f17 	ldw	r3,60(r5)
  8052dc:	00ffb316 	blt	zero,r3,8051ac <__alt_mem_onchip_mem+0xff7851ac>
  8052e0:	003fd706 	br	805240 <__alt_mem_onchip_mem+0xff785240>
  8052e4:	89400717 	ldw	r5,28(r17)
  8052e8:	000d883a 	mov	r6,zero
  8052ec:	01c00044 	movi	r7,1
  8052f0:	9809883a 	mov	r4,r19
  8052f4:	403ee83a 	callr	r8
  8052f8:	100d883a 	mov	r6,r2
  8052fc:	00bfffc4 	movi	r2,-1
  805300:	30801426 	beq	r6,r2,805354 <__sflush_r+0x1e4>
  805304:	8880030b 	ldhu	r2,12(r17)
  805308:	8a000a17 	ldw	r8,40(r17)
  80530c:	003fae06 	br	8051c8 <__alt_mem_onchip_mem+0xff7851c8>
  805310:	98c00017 	ldw	r3,0(r19)
  805314:	183fba26 	beq	r3,zero,805200 <__alt_mem_onchip_mem+0xff785200>
  805318:	01000744 	movi	r4,29
  80531c:	19000626 	beq	r3,r4,805338 <__sflush_r+0x1c8>
  805320:	01000584 	movi	r4,22
  805324:	19000426 	beq	r3,r4,805338 <__sflush_r+0x1c8>
  805328:	88c0030b 	ldhu	r3,12(r17)
  80532c:	18c01014 	ori	r3,r3,64
  805330:	88c0030d 	sth	r3,12(r17)
  805334:	003fc306 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  805338:	8880030b 	ldhu	r2,12(r17)
  80533c:	88c00417 	ldw	r3,16(r17)
  805340:	88000115 	stw	zero,4(r17)
  805344:	10bdffcc 	andi	r2,r2,63487
  805348:	8880030d 	sth	r2,12(r17)
  80534c:	88c00015 	stw	r3,0(r17)
  805350:	003fb306 	br	805220 <__alt_mem_onchip_mem+0xff785220>
  805354:	98800017 	ldw	r2,0(r19)
  805358:	103fea26 	beq	r2,zero,805304 <__alt_mem_onchip_mem+0xff785304>
  80535c:	00c00744 	movi	r3,29
  805360:	10c00226 	beq	r2,r3,80536c <__sflush_r+0x1fc>
  805364:	00c00584 	movi	r3,22
  805368:	10c0031e 	bne	r2,r3,805378 <__sflush_r+0x208>
  80536c:	9c000015 	stw	r16,0(r19)
  805370:	0005883a 	mov	r2,zero
  805374:	003fb306 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  805378:	88c0030b 	ldhu	r3,12(r17)
  80537c:	3005883a 	mov	r2,r6
  805380:	18c01014 	ori	r3,r3,64
  805384:	88c0030d 	sth	r3,12(r17)
  805388:	003fae06 	br	805244 <__alt_mem_onchip_mem+0xff785244>

0080538c <_fflush_r>:
  80538c:	defffd04 	addi	sp,sp,-12
  805390:	dc000115 	stw	r16,4(sp)
  805394:	dfc00215 	stw	ra,8(sp)
  805398:	2021883a 	mov	r16,r4
  80539c:	20000226 	beq	r4,zero,8053a8 <_fflush_r+0x1c>
  8053a0:	20800e17 	ldw	r2,56(r4)
  8053a4:	10000c26 	beq	r2,zero,8053d8 <_fflush_r+0x4c>
  8053a8:	2880030f 	ldh	r2,12(r5)
  8053ac:	1000051e 	bne	r2,zero,8053c4 <_fflush_r+0x38>
  8053b0:	0005883a 	mov	r2,zero
  8053b4:	dfc00217 	ldw	ra,8(sp)
  8053b8:	dc000117 	ldw	r16,4(sp)
  8053bc:	dec00304 	addi	sp,sp,12
  8053c0:	f800283a 	ret
  8053c4:	8009883a 	mov	r4,r16
  8053c8:	dfc00217 	ldw	ra,8(sp)
  8053cc:	dc000117 	ldw	r16,4(sp)
  8053d0:	dec00304 	addi	sp,sp,12
  8053d4:	08051701 	jmpi	805170 <__sflush_r>
  8053d8:	d9400015 	stw	r5,0(sp)
  8053dc:	08034200 	call	803420 <__sinit>
  8053e0:	d9400017 	ldw	r5,0(sp)
  8053e4:	003ff006 	br	8053a8 <__alt_mem_onchip_mem+0xff7853a8>

008053e8 <fflush>:
  8053e8:	20000526 	beq	r4,zero,805400 <fflush+0x18>
  8053ec:	00802074 	movhi	r2,129
  8053f0:	10af7004 	addi	r2,r2,-16960
  8053f4:	200b883a 	mov	r5,r4
  8053f8:	11000017 	ldw	r4,0(r2)
  8053fc:	080538c1 	jmpi	80538c <_fflush_r>
  805400:	00802074 	movhi	r2,129
  805404:	10af6f04 	addi	r2,r2,-16964
  805408:	11000017 	ldw	r4,0(r2)
  80540c:	01402034 	movhi	r5,128
  805410:	2954e304 	addi	r5,r5,21388
  805414:	08039f01 	jmpi	8039f0 <_fwalk_reent>

00805418 <_malloc_trim_r>:
  805418:	defffb04 	addi	sp,sp,-20
  80541c:	dcc00315 	stw	r19,12(sp)
  805420:	04c02074 	movhi	r19,129
  805424:	dc800215 	stw	r18,8(sp)
  805428:	dc400115 	stw	r17,4(sp)
  80542c:	dc000015 	stw	r16,0(sp)
  805430:	dfc00415 	stw	ra,16(sp)
  805434:	2821883a 	mov	r16,r5
  805438:	9ce97204 	addi	r19,r19,-23096
  80543c:	2025883a 	mov	r18,r4
  805440:	08063d40 	call	8063d4 <__malloc_lock>
  805444:	98800217 	ldw	r2,8(r19)
  805448:	14400117 	ldw	r17,4(r2)
  80544c:	00bfff04 	movi	r2,-4
  805450:	88a2703a 	and	r17,r17,r2
  805454:	8c21c83a 	sub	r16,r17,r16
  805458:	8403fbc4 	addi	r16,r16,4079
  80545c:	8020d33a 	srli	r16,r16,12
  805460:	0083ffc4 	movi	r2,4095
  805464:	843fffc4 	addi	r16,r16,-1
  805468:	8020933a 	slli	r16,r16,12
  80546c:	1400060e 	bge	r2,r16,805488 <_malloc_trim_r+0x70>
  805470:	000b883a 	mov	r5,zero
  805474:	9009883a 	mov	r4,r18
  805478:	0804cd40 	call	804cd4 <_sbrk_r>
  80547c:	98c00217 	ldw	r3,8(r19)
  805480:	1c47883a 	add	r3,r3,r17
  805484:	10c00a26 	beq	r2,r3,8054b0 <_malloc_trim_r+0x98>
  805488:	9009883a 	mov	r4,r18
  80548c:	08063f80 	call	8063f8 <__malloc_unlock>
  805490:	0005883a 	mov	r2,zero
  805494:	dfc00417 	ldw	ra,16(sp)
  805498:	dcc00317 	ldw	r19,12(sp)
  80549c:	dc800217 	ldw	r18,8(sp)
  8054a0:	dc400117 	ldw	r17,4(sp)
  8054a4:	dc000017 	ldw	r16,0(sp)
  8054a8:	dec00504 	addi	sp,sp,20
  8054ac:	f800283a 	ret
  8054b0:	040bc83a 	sub	r5,zero,r16
  8054b4:	9009883a 	mov	r4,r18
  8054b8:	0804cd40 	call	804cd4 <_sbrk_r>
  8054bc:	00ffffc4 	movi	r3,-1
  8054c0:	10c00d26 	beq	r2,r3,8054f8 <_malloc_trim_r+0xe0>
  8054c4:	00c02074 	movhi	r3,129
  8054c8:	18f6f904 	addi	r3,r3,-9244
  8054cc:	18800017 	ldw	r2,0(r3)
  8054d0:	99000217 	ldw	r4,8(r19)
  8054d4:	8c23c83a 	sub	r17,r17,r16
  8054d8:	8c400054 	ori	r17,r17,1
  8054dc:	1421c83a 	sub	r16,r2,r16
  8054e0:	24400115 	stw	r17,4(r4)
  8054e4:	9009883a 	mov	r4,r18
  8054e8:	1c000015 	stw	r16,0(r3)
  8054ec:	08063f80 	call	8063f8 <__malloc_unlock>
  8054f0:	00800044 	movi	r2,1
  8054f4:	003fe706 	br	805494 <__alt_mem_onchip_mem+0xff785494>
  8054f8:	000b883a 	mov	r5,zero
  8054fc:	9009883a 	mov	r4,r18
  805500:	0804cd40 	call	804cd4 <_sbrk_r>
  805504:	99000217 	ldw	r4,8(r19)
  805508:	014003c4 	movi	r5,15
  80550c:	1107c83a 	sub	r3,r2,r4
  805510:	28ffdd0e 	bge	r5,r3,805488 <__alt_mem_onchip_mem+0xff785488>
  805514:	01402074 	movhi	r5,129
  805518:	296f7104 	addi	r5,r5,-16956
  80551c:	29400017 	ldw	r5,0(r5)
  805520:	18c00054 	ori	r3,r3,1
  805524:	20c00115 	stw	r3,4(r4)
  805528:	00c02074 	movhi	r3,129
  80552c:	1145c83a 	sub	r2,r2,r5
  805530:	18f6f904 	addi	r3,r3,-9244
  805534:	18800015 	stw	r2,0(r3)
  805538:	003fd306 	br	805488 <__alt_mem_onchip_mem+0xff785488>

0080553c <_free_r>:
  80553c:	28004126 	beq	r5,zero,805644 <_free_r+0x108>
  805540:	defffd04 	addi	sp,sp,-12
  805544:	dc400115 	stw	r17,4(sp)
  805548:	dc000015 	stw	r16,0(sp)
  80554c:	2023883a 	mov	r17,r4
  805550:	2821883a 	mov	r16,r5
  805554:	dfc00215 	stw	ra,8(sp)
  805558:	08063d40 	call	8063d4 <__malloc_lock>
  80555c:	81ffff17 	ldw	r7,-4(r16)
  805560:	00bfff84 	movi	r2,-2
  805564:	01002074 	movhi	r4,129
  805568:	81bffe04 	addi	r6,r16,-8
  80556c:	3884703a 	and	r2,r7,r2
  805570:	21297204 	addi	r4,r4,-23096
  805574:	308b883a 	add	r5,r6,r2
  805578:	2a400117 	ldw	r9,4(r5)
  80557c:	22000217 	ldw	r8,8(r4)
  805580:	00ffff04 	movi	r3,-4
  805584:	48c6703a 	and	r3,r9,r3
  805588:	2a005726 	beq	r5,r8,8056e8 <_free_r+0x1ac>
  80558c:	28c00115 	stw	r3,4(r5)
  805590:	39c0004c 	andi	r7,r7,1
  805594:	3800091e 	bne	r7,zero,8055bc <_free_r+0x80>
  805598:	823ffe17 	ldw	r8,-8(r16)
  80559c:	22400204 	addi	r9,r4,8
  8055a0:	320dc83a 	sub	r6,r6,r8
  8055a4:	31c00217 	ldw	r7,8(r6)
  8055a8:	1205883a 	add	r2,r2,r8
  8055ac:	3a406526 	beq	r7,r9,805744 <_free_r+0x208>
  8055b0:	32000317 	ldw	r8,12(r6)
  8055b4:	3a000315 	stw	r8,12(r7)
  8055b8:	41c00215 	stw	r7,8(r8)
  8055bc:	28cf883a 	add	r7,r5,r3
  8055c0:	39c00117 	ldw	r7,4(r7)
  8055c4:	39c0004c 	andi	r7,r7,1
  8055c8:	38003a26 	beq	r7,zero,8056b4 <_free_r+0x178>
  8055cc:	10c00054 	ori	r3,r2,1
  8055d0:	30c00115 	stw	r3,4(r6)
  8055d4:	3087883a 	add	r3,r6,r2
  8055d8:	18800015 	stw	r2,0(r3)
  8055dc:	00c07fc4 	movi	r3,511
  8055e0:	18801936 	bltu	r3,r2,805648 <_free_r+0x10c>
  8055e4:	1004d0fa 	srli	r2,r2,3
  8055e8:	01c00044 	movi	r7,1
  8055ec:	21400117 	ldw	r5,4(r4)
  8055f0:	10c00044 	addi	r3,r2,1
  8055f4:	18c7883a 	add	r3,r3,r3
  8055f8:	1005d0ba 	srai	r2,r2,2
  8055fc:	18c7883a 	add	r3,r3,r3
  805600:	18c7883a 	add	r3,r3,r3
  805604:	1907883a 	add	r3,r3,r4
  805608:	3884983a 	sll	r2,r7,r2
  80560c:	19c00017 	ldw	r7,0(r3)
  805610:	1a3ffe04 	addi	r8,r3,-8
  805614:	1144b03a 	or	r2,r2,r5
  805618:	32000315 	stw	r8,12(r6)
  80561c:	31c00215 	stw	r7,8(r6)
  805620:	20800115 	stw	r2,4(r4)
  805624:	19800015 	stw	r6,0(r3)
  805628:	39800315 	stw	r6,12(r7)
  80562c:	8809883a 	mov	r4,r17
  805630:	dfc00217 	ldw	ra,8(sp)
  805634:	dc400117 	ldw	r17,4(sp)
  805638:	dc000017 	ldw	r16,0(sp)
  80563c:	dec00304 	addi	sp,sp,12
  805640:	08063f81 	jmpi	8063f8 <__malloc_unlock>
  805644:	f800283a 	ret
  805648:	100ad27a 	srli	r5,r2,9
  80564c:	00c00104 	movi	r3,4
  805650:	19404a36 	bltu	r3,r5,80577c <_free_r+0x240>
  805654:	100ad1ba 	srli	r5,r2,6
  805658:	28c00e44 	addi	r3,r5,57
  80565c:	18c7883a 	add	r3,r3,r3
  805660:	29400e04 	addi	r5,r5,56
  805664:	18c7883a 	add	r3,r3,r3
  805668:	18c7883a 	add	r3,r3,r3
  80566c:	1909883a 	add	r4,r3,r4
  805670:	20c00017 	ldw	r3,0(r4)
  805674:	01c02074 	movhi	r7,129
  805678:	213ffe04 	addi	r4,r4,-8
  80567c:	39e97204 	addi	r7,r7,-23096
  805680:	20c04426 	beq	r4,r3,805794 <_free_r+0x258>
  805684:	01ffff04 	movi	r7,-4
  805688:	19400117 	ldw	r5,4(r3)
  80568c:	29ca703a 	and	r5,r5,r7
  805690:	1140022e 	bgeu	r2,r5,80569c <_free_r+0x160>
  805694:	18c00217 	ldw	r3,8(r3)
  805698:	20fffb1e 	bne	r4,r3,805688 <__alt_mem_onchip_mem+0xff785688>
  80569c:	19000317 	ldw	r4,12(r3)
  8056a0:	31000315 	stw	r4,12(r6)
  8056a4:	30c00215 	stw	r3,8(r6)
  8056a8:	21800215 	stw	r6,8(r4)
  8056ac:	19800315 	stw	r6,12(r3)
  8056b0:	003fde06 	br	80562c <__alt_mem_onchip_mem+0xff78562c>
  8056b4:	29c00217 	ldw	r7,8(r5)
  8056b8:	10c5883a 	add	r2,r2,r3
  8056bc:	00c02074 	movhi	r3,129
  8056c0:	18e97404 	addi	r3,r3,-23088
  8056c4:	38c03b26 	beq	r7,r3,8057b4 <_free_r+0x278>
  8056c8:	2a000317 	ldw	r8,12(r5)
  8056cc:	11400054 	ori	r5,r2,1
  8056d0:	3087883a 	add	r3,r6,r2
  8056d4:	3a000315 	stw	r8,12(r7)
  8056d8:	41c00215 	stw	r7,8(r8)
  8056dc:	31400115 	stw	r5,4(r6)
  8056e0:	18800015 	stw	r2,0(r3)
  8056e4:	003fbd06 	br	8055dc <__alt_mem_onchip_mem+0xff7855dc>
  8056e8:	39c0004c 	andi	r7,r7,1
  8056ec:	10c5883a 	add	r2,r2,r3
  8056f0:	3800071e 	bne	r7,zero,805710 <_free_r+0x1d4>
  8056f4:	81fffe17 	ldw	r7,-8(r16)
  8056f8:	31cdc83a 	sub	r6,r6,r7
  8056fc:	30c00317 	ldw	r3,12(r6)
  805700:	31400217 	ldw	r5,8(r6)
  805704:	11c5883a 	add	r2,r2,r7
  805708:	28c00315 	stw	r3,12(r5)
  80570c:	19400215 	stw	r5,8(r3)
  805710:	10c00054 	ori	r3,r2,1
  805714:	30c00115 	stw	r3,4(r6)
  805718:	00c02074 	movhi	r3,129
  80571c:	18ef7204 	addi	r3,r3,-16952
  805720:	18c00017 	ldw	r3,0(r3)
  805724:	21800215 	stw	r6,8(r4)
  805728:	10ffc036 	bltu	r2,r3,80562c <__alt_mem_onchip_mem+0xff78562c>
  80572c:	00802074 	movhi	r2,129
  805730:	10b6f004 	addi	r2,r2,-9280
  805734:	11400017 	ldw	r5,0(r2)
  805738:	8809883a 	mov	r4,r17
  80573c:	08054180 	call	805418 <_malloc_trim_r>
  805740:	003fba06 	br	80562c <__alt_mem_onchip_mem+0xff78562c>
  805744:	28c9883a 	add	r4,r5,r3
  805748:	21000117 	ldw	r4,4(r4)
  80574c:	2100004c 	andi	r4,r4,1
  805750:	2000391e 	bne	r4,zero,805838 <_free_r+0x2fc>
  805754:	29c00217 	ldw	r7,8(r5)
  805758:	29000317 	ldw	r4,12(r5)
  80575c:	1885883a 	add	r2,r3,r2
  805760:	10c00054 	ori	r3,r2,1
  805764:	39000315 	stw	r4,12(r7)
  805768:	21c00215 	stw	r7,8(r4)
  80576c:	30c00115 	stw	r3,4(r6)
  805770:	308d883a 	add	r6,r6,r2
  805774:	30800015 	stw	r2,0(r6)
  805778:	003fac06 	br	80562c <__alt_mem_onchip_mem+0xff78562c>
  80577c:	00c00504 	movi	r3,20
  805780:	19401536 	bltu	r3,r5,8057d8 <_free_r+0x29c>
  805784:	28c01704 	addi	r3,r5,92
  805788:	18c7883a 	add	r3,r3,r3
  80578c:	294016c4 	addi	r5,r5,91
  805790:	003fb406 	br	805664 <__alt_mem_onchip_mem+0xff785664>
  805794:	280bd0ba 	srai	r5,r5,2
  805798:	00c00044 	movi	r3,1
  80579c:	38800117 	ldw	r2,4(r7)
  8057a0:	194a983a 	sll	r5,r3,r5
  8057a4:	2007883a 	mov	r3,r4
  8057a8:	2884b03a 	or	r2,r5,r2
  8057ac:	38800115 	stw	r2,4(r7)
  8057b0:	003fbb06 	br	8056a0 <__alt_mem_onchip_mem+0xff7856a0>
  8057b4:	21800515 	stw	r6,20(r4)
  8057b8:	21800415 	stw	r6,16(r4)
  8057bc:	10c00054 	ori	r3,r2,1
  8057c0:	31c00315 	stw	r7,12(r6)
  8057c4:	31c00215 	stw	r7,8(r6)
  8057c8:	30c00115 	stw	r3,4(r6)
  8057cc:	308d883a 	add	r6,r6,r2
  8057d0:	30800015 	stw	r2,0(r6)
  8057d4:	003f9506 	br	80562c <__alt_mem_onchip_mem+0xff78562c>
  8057d8:	00c01504 	movi	r3,84
  8057dc:	19400536 	bltu	r3,r5,8057f4 <_free_r+0x2b8>
  8057e0:	100ad33a 	srli	r5,r2,12
  8057e4:	28c01bc4 	addi	r3,r5,111
  8057e8:	18c7883a 	add	r3,r3,r3
  8057ec:	29401b84 	addi	r5,r5,110
  8057f0:	003f9c06 	br	805664 <__alt_mem_onchip_mem+0xff785664>
  8057f4:	00c05504 	movi	r3,340
  8057f8:	19400536 	bltu	r3,r5,805810 <_free_r+0x2d4>
  8057fc:	100ad3fa 	srli	r5,r2,15
  805800:	28c01e04 	addi	r3,r5,120
  805804:	18c7883a 	add	r3,r3,r3
  805808:	29401dc4 	addi	r5,r5,119
  80580c:	003f9506 	br	805664 <__alt_mem_onchip_mem+0xff785664>
  805810:	00c15504 	movi	r3,1364
  805814:	19400536 	bltu	r3,r5,80582c <_free_r+0x2f0>
  805818:	100ad4ba 	srli	r5,r2,18
  80581c:	28c01f44 	addi	r3,r5,125
  805820:	18c7883a 	add	r3,r3,r3
  805824:	29401f04 	addi	r5,r5,124
  805828:	003f8e06 	br	805664 <__alt_mem_onchip_mem+0xff785664>
  80582c:	00c03f84 	movi	r3,254
  805830:	01401f84 	movi	r5,126
  805834:	003f8b06 	br	805664 <__alt_mem_onchip_mem+0xff785664>
  805838:	10c00054 	ori	r3,r2,1
  80583c:	30c00115 	stw	r3,4(r6)
  805840:	308d883a 	add	r6,r6,r2
  805844:	30800015 	stw	r2,0(r6)
  805848:	003f7806 	br	80562c <__alt_mem_onchip_mem+0xff78562c>

0080584c <_lseek_r>:
  80584c:	defffd04 	addi	sp,sp,-12
  805850:	2805883a 	mov	r2,r5
  805854:	dc000015 	stw	r16,0(sp)
  805858:	04002074 	movhi	r16,129
  80585c:	dc400115 	stw	r17,4(sp)
  805860:	300b883a 	mov	r5,r6
  805864:	8436f104 	addi	r16,r16,-9276
  805868:	2023883a 	mov	r17,r4
  80586c:	380d883a 	mov	r6,r7
  805870:	1009883a 	mov	r4,r2
  805874:	dfc00215 	stw	ra,8(sp)
  805878:	80000015 	stw	zero,0(r16)
  80587c:	08062840 	call	806284 <lseek>
  805880:	00ffffc4 	movi	r3,-1
  805884:	10c00526 	beq	r2,r3,80589c <_lseek_r+0x50>
  805888:	dfc00217 	ldw	ra,8(sp)
  80588c:	dc400117 	ldw	r17,4(sp)
  805890:	dc000017 	ldw	r16,0(sp)
  805894:	dec00304 	addi	sp,sp,12
  805898:	f800283a 	ret
  80589c:	80c00017 	ldw	r3,0(r16)
  8058a0:	183ff926 	beq	r3,zero,805888 <__alt_mem_onchip_mem+0xff785888>
  8058a4:	88c00015 	stw	r3,0(r17)
  8058a8:	003ff706 	br	805888 <__alt_mem_onchip_mem+0xff785888>

008058ac <__smakebuf_r>:
  8058ac:	2880030b 	ldhu	r2,12(r5)
  8058b0:	10c0008c 	andi	r3,r2,2
  8058b4:	1800411e 	bne	r3,zero,8059bc <__smakebuf_r+0x110>
  8058b8:	deffec04 	addi	sp,sp,-80
  8058bc:	dc000f15 	stw	r16,60(sp)
  8058c0:	2821883a 	mov	r16,r5
  8058c4:	2940038f 	ldh	r5,14(r5)
  8058c8:	dc401015 	stw	r17,64(sp)
  8058cc:	dfc01315 	stw	ra,76(sp)
  8058d0:	dcc01215 	stw	r19,72(sp)
  8058d4:	dc801115 	stw	r18,68(sp)
  8058d8:	2023883a 	mov	r17,r4
  8058dc:	28001c16 	blt	r5,zero,805950 <__smakebuf_r+0xa4>
  8058e0:	d80d883a 	mov	r6,sp
  8058e4:	0805ac80 	call	805ac8 <_fstat_r>
  8058e8:	10001816 	blt	r2,zero,80594c <__smakebuf_r+0xa0>
  8058ec:	d8800117 	ldw	r2,4(sp)
  8058f0:	00e00014 	movui	r3,32768
  8058f4:	10bc000c 	andi	r2,r2,61440
  8058f8:	14c80020 	cmpeqi	r19,r2,8192
  8058fc:	10c03726 	beq	r2,r3,8059dc <__smakebuf_r+0x130>
  805900:	80c0030b 	ldhu	r3,12(r16)
  805904:	18c20014 	ori	r3,r3,2048
  805908:	80c0030d 	sth	r3,12(r16)
  80590c:	00c80004 	movi	r3,8192
  805910:	10c0521e 	bne	r2,r3,805a5c <__smakebuf_r+0x1b0>
  805914:	8140038f 	ldh	r5,14(r16)
  805918:	8809883a 	mov	r4,r17
  80591c:	0805b240 	call	805b24 <_isatty_r>
  805920:	10004c26 	beq	r2,zero,805a54 <__smakebuf_r+0x1a8>
  805924:	8080030b 	ldhu	r2,12(r16)
  805928:	80c010c4 	addi	r3,r16,67
  80592c:	80c00015 	stw	r3,0(r16)
  805930:	10800054 	ori	r2,r2,1
  805934:	8080030d 	sth	r2,12(r16)
  805938:	00800044 	movi	r2,1
  80593c:	80c00415 	stw	r3,16(r16)
  805940:	80800515 	stw	r2,20(r16)
  805944:	04810004 	movi	r18,1024
  805948:	00000706 	br	805968 <__smakebuf_r+0xbc>
  80594c:	8080030b 	ldhu	r2,12(r16)
  805950:	10c0200c 	andi	r3,r2,128
  805954:	18001f1e 	bne	r3,zero,8059d4 <__smakebuf_r+0x128>
  805958:	04810004 	movi	r18,1024
  80595c:	10820014 	ori	r2,r2,2048
  805960:	8080030d 	sth	r2,12(r16)
  805964:	0027883a 	mov	r19,zero
  805968:	900b883a 	mov	r5,r18
  80596c:	8809883a 	mov	r4,r17
  805970:	0803ab40 	call	803ab4 <_malloc_r>
  805974:	10002c26 	beq	r2,zero,805a28 <__smakebuf_r+0x17c>
  805978:	80c0030b 	ldhu	r3,12(r16)
  80597c:	01002034 	movhi	r4,128
  805980:	210c3604 	addi	r4,r4,12504
  805984:	89000f15 	stw	r4,60(r17)
  805988:	18c02014 	ori	r3,r3,128
  80598c:	80c0030d 	sth	r3,12(r16)
  805990:	80800015 	stw	r2,0(r16)
  805994:	80800415 	stw	r2,16(r16)
  805998:	84800515 	stw	r18,20(r16)
  80599c:	98001a1e 	bne	r19,zero,805a08 <__smakebuf_r+0x15c>
  8059a0:	dfc01317 	ldw	ra,76(sp)
  8059a4:	dcc01217 	ldw	r19,72(sp)
  8059a8:	dc801117 	ldw	r18,68(sp)
  8059ac:	dc401017 	ldw	r17,64(sp)
  8059b0:	dc000f17 	ldw	r16,60(sp)
  8059b4:	dec01404 	addi	sp,sp,80
  8059b8:	f800283a 	ret
  8059bc:	288010c4 	addi	r2,r5,67
  8059c0:	28800015 	stw	r2,0(r5)
  8059c4:	28800415 	stw	r2,16(r5)
  8059c8:	00800044 	movi	r2,1
  8059cc:	28800515 	stw	r2,20(r5)
  8059d0:	f800283a 	ret
  8059d4:	04801004 	movi	r18,64
  8059d8:	003fe006 	br	80595c <__alt_mem_onchip_mem+0xff78595c>
  8059dc:	81000a17 	ldw	r4,40(r16)
  8059e0:	00c02034 	movhi	r3,128
  8059e4:	18d38004 	addi	r3,r3,19968
  8059e8:	20ffc51e 	bne	r4,r3,805900 <__alt_mem_onchip_mem+0xff785900>
  8059ec:	8080030b 	ldhu	r2,12(r16)
  8059f0:	04810004 	movi	r18,1024
  8059f4:	84801315 	stw	r18,76(r16)
  8059f8:	1484b03a 	or	r2,r2,r18
  8059fc:	8080030d 	sth	r2,12(r16)
  805a00:	0027883a 	mov	r19,zero
  805a04:	003fd806 	br	805968 <__alt_mem_onchip_mem+0xff785968>
  805a08:	8140038f 	ldh	r5,14(r16)
  805a0c:	8809883a 	mov	r4,r17
  805a10:	0805b240 	call	805b24 <_isatty_r>
  805a14:	103fe226 	beq	r2,zero,8059a0 <__alt_mem_onchip_mem+0xff7859a0>
  805a18:	8080030b 	ldhu	r2,12(r16)
  805a1c:	10800054 	ori	r2,r2,1
  805a20:	8080030d 	sth	r2,12(r16)
  805a24:	003fde06 	br	8059a0 <__alt_mem_onchip_mem+0xff7859a0>
  805a28:	8080030b 	ldhu	r2,12(r16)
  805a2c:	10c0800c 	andi	r3,r2,512
  805a30:	183fdb1e 	bne	r3,zero,8059a0 <__alt_mem_onchip_mem+0xff7859a0>
  805a34:	10800094 	ori	r2,r2,2
  805a38:	80c010c4 	addi	r3,r16,67
  805a3c:	8080030d 	sth	r2,12(r16)
  805a40:	00800044 	movi	r2,1
  805a44:	80c00015 	stw	r3,0(r16)
  805a48:	80c00415 	stw	r3,16(r16)
  805a4c:	80800515 	stw	r2,20(r16)
  805a50:	003fd306 	br	8059a0 <__alt_mem_onchip_mem+0xff7859a0>
  805a54:	04810004 	movi	r18,1024
  805a58:	003fc306 	br	805968 <__alt_mem_onchip_mem+0xff785968>
  805a5c:	0027883a 	mov	r19,zero
  805a60:	04810004 	movi	r18,1024
  805a64:	003fc006 	br	805968 <__alt_mem_onchip_mem+0xff785968>

00805a68 <_read_r>:
  805a68:	defffd04 	addi	sp,sp,-12
  805a6c:	2805883a 	mov	r2,r5
  805a70:	dc000015 	stw	r16,0(sp)
  805a74:	04002074 	movhi	r16,129
  805a78:	dc400115 	stw	r17,4(sp)
  805a7c:	300b883a 	mov	r5,r6
  805a80:	8436f104 	addi	r16,r16,-9276
  805a84:	2023883a 	mov	r17,r4
  805a88:	380d883a 	mov	r6,r7
  805a8c:	1009883a 	mov	r4,r2
  805a90:	dfc00215 	stw	ra,8(sp)
  805a94:	80000015 	stw	zero,0(r16)
  805a98:	08064580 	call	806458 <read>
  805a9c:	00ffffc4 	movi	r3,-1
  805aa0:	10c00526 	beq	r2,r3,805ab8 <_read_r+0x50>
  805aa4:	dfc00217 	ldw	ra,8(sp)
  805aa8:	dc400117 	ldw	r17,4(sp)
  805aac:	dc000017 	ldw	r16,0(sp)
  805ab0:	dec00304 	addi	sp,sp,12
  805ab4:	f800283a 	ret
  805ab8:	80c00017 	ldw	r3,0(r16)
  805abc:	183ff926 	beq	r3,zero,805aa4 <__alt_mem_onchip_mem+0xff785aa4>
  805ac0:	88c00015 	stw	r3,0(r17)
  805ac4:	003ff706 	br	805aa4 <__alt_mem_onchip_mem+0xff785aa4>

00805ac8 <_fstat_r>:
  805ac8:	defffd04 	addi	sp,sp,-12
  805acc:	2805883a 	mov	r2,r5
  805ad0:	dc000015 	stw	r16,0(sp)
  805ad4:	04002074 	movhi	r16,129
  805ad8:	dc400115 	stw	r17,4(sp)
  805adc:	8436f104 	addi	r16,r16,-9276
  805ae0:	2023883a 	mov	r17,r4
  805ae4:	300b883a 	mov	r5,r6
  805ae8:	1009883a 	mov	r4,r2
  805aec:	dfc00215 	stw	ra,8(sp)
  805af0:	80000015 	stw	zero,0(r16)
  805af4:	0805fcc0 	call	805fcc <fstat>
  805af8:	00ffffc4 	movi	r3,-1
  805afc:	10c00526 	beq	r2,r3,805b14 <_fstat_r+0x4c>
  805b00:	dfc00217 	ldw	ra,8(sp)
  805b04:	dc400117 	ldw	r17,4(sp)
  805b08:	dc000017 	ldw	r16,0(sp)
  805b0c:	dec00304 	addi	sp,sp,12
  805b10:	f800283a 	ret
  805b14:	80c00017 	ldw	r3,0(r16)
  805b18:	183ff926 	beq	r3,zero,805b00 <__alt_mem_onchip_mem+0xff785b00>
  805b1c:	88c00015 	stw	r3,0(r17)
  805b20:	003ff706 	br	805b00 <__alt_mem_onchip_mem+0xff785b00>

00805b24 <_isatty_r>:
  805b24:	defffd04 	addi	sp,sp,-12
  805b28:	dc000015 	stw	r16,0(sp)
  805b2c:	04002074 	movhi	r16,129
  805b30:	dc400115 	stw	r17,4(sp)
  805b34:	8436f104 	addi	r16,r16,-9276
  805b38:	2023883a 	mov	r17,r4
  805b3c:	2809883a 	mov	r4,r5
  805b40:	dfc00215 	stw	ra,8(sp)
  805b44:	80000015 	stw	zero,0(r16)
  805b48:	08060b80 	call	8060b8 <isatty>
  805b4c:	00ffffc4 	movi	r3,-1
  805b50:	10c00526 	beq	r2,r3,805b68 <_isatty_r+0x44>
  805b54:	dfc00217 	ldw	ra,8(sp)
  805b58:	dc400117 	ldw	r17,4(sp)
  805b5c:	dc000017 	ldw	r16,0(sp)
  805b60:	dec00304 	addi	sp,sp,12
  805b64:	f800283a 	ret
  805b68:	80c00017 	ldw	r3,0(r16)
  805b6c:	183ff926 	beq	r3,zero,805b54 <__alt_mem_onchip_mem+0xff785b54>
  805b70:	88c00015 	stw	r3,0(r17)
  805b74:	003ff706 	br	805b54 <__alt_mem_onchip_mem+0xff785b54>

00805b78 <__divsi3>:
  805b78:	20001b16 	blt	r4,zero,805be8 <__divsi3+0x70>
  805b7c:	000f883a 	mov	r7,zero
  805b80:	28001616 	blt	r5,zero,805bdc <__divsi3+0x64>
  805b84:	200d883a 	mov	r6,r4
  805b88:	29001a2e 	bgeu	r5,r4,805bf4 <__divsi3+0x7c>
  805b8c:	00800804 	movi	r2,32
  805b90:	00c00044 	movi	r3,1
  805b94:	00000106 	br	805b9c <__divsi3+0x24>
  805b98:	10000d26 	beq	r2,zero,805bd0 <__divsi3+0x58>
  805b9c:	294b883a 	add	r5,r5,r5
  805ba0:	10bfffc4 	addi	r2,r2,-1
  805ba4:	18c7883a 	add	r3,r3,r3
  805ba8:	293ffb36 	bltu	r5,r4,805b98 <__alt_mem_onchip_mem+0xff785b98>
  805bac:	0005883a 	mov	r2,zero
  805bb0:	18000726 	beq	r3,zero,805bd0 <__divsi3+0x58>
  805bb4:	0005883a 	mov	r2,zero
  805bb8:	31400236 	bltu	r6,r5,805bc4 <__divsi3+0x4c>
  805bbc:	314dc83a 	sub	r6,r6,r5
  805bc0:	10c4b03a 	or	r2,r2,r3
  805bc4:	1806d07a 	srli	r3,r3,1
  805bc8:	280ad07a 	srli	r5,r5,1
  805bcc:	183ffa1e 	bne	r3,zero,805bb8 <__alt_mem_onchip_mem+0xff785bb8>
  805bd0:	38000126 	beq	r7,zero,805bd8 <__divsi3+0x60>
  805bd4:	0085c83a 	sub	r2,zero,r2
  805bd8:	f800283a 	ret
  805bdc:	014bc83a 	sub	r5,zero,r5
  805be0:	39c0005c 	xori	r7,r7,1
  805be4:	003fe706 	br	805b84 <__alt_mem_onchip_mem+0xff785b84>
  805be8:	0109c83a 	sub	r4,zero,r4
  805bec:	01c00044 	movi	r7,1
  805bf0:	003fe306 	br	805b80 <__alt_mem_onchip_mem+0xff785b80>
  805bf4:	00c00044 	movi	r3,1
  805bf8:	003fee06 	br	805bb4 <__alt_mem_onchip_mem+0xff785bb4>

00805bfc <__modsi3>:
  805bfc:	20001716 	blt	r4,zero,805c5c <__modsi3+0x60>
  805c00:	000f883a 	mov	r7,zero
  805c04:	2005883a 	mov	r2,r4
  805c08:	28001216 	blt	r5,zero,805c54 <__modsi3+0x58>
  805c0c:	2900162e 	bgeu	r5,r4,805c68 <__modsi3+0x6c>
  805c10:	01800804 	movi	r6,32
  805c14:	00c00044 	movi	r3,1
  805c18:	00000106 	br	805c20 <__modsi3+0x24>
  805c1c:	30000a26 	beq	r6,zero,805c48 <__modsi3+0x4c>
  805c20:	294b883a 	add	r5,r5,r5
  805c24:	31bfffc4 	addi	r6,r6,-1
  805c28:	18c7883a 	add	r3,r3,r3
  805c2c:	293ffb36 	bltu	r5,r4,805c1c <__alt_mem_onchip_mem+0xff785c1c>
  805c30:	18000526 	beq	r3,zero,805c48 <__modsi3+0x4c>
  805c34:	1806d07a 	srli	r3,r3,1
  805c38:	11400136 	bltu	r2,r5,805c40 <__modsi3+0x44>
  805c3c:	1145c83a 	sub	r2,r2,r5
  805c40:	280ad07a 	srli	r5,r5,1
  805c44:	183ffb1e 	bne	r3,zero,805c34 <__alt_mem_onchip_mem+0xff785c34>
  805c48:	38000126 	beq	r7,zero,805c50 <__modsi3+0x54>
  805c4c:	0085c83a 	sub	r2,zero,r2
  805c50:	f800283a 	ret
  805c54:	014bc83a 	sub	r5,zero,r5
  805c58:	003fec06 	br	805c0c <__alt_mem_onchip_mem+0xff785c0c>
  805c5c:	0109c83a 	sub	r4,zero,r4
  805c60:	01c00044 	movi	r7,1
  805c64:	003fe706 	br	805c04 <__alt_mem_onchip_mem+0xff785c04>
  805c68:	00c00044 	movi	r3,1
  805c6c:	003ff106 	br	805c34 <__alt_mem_onchip_mem+0xff785c34>

00805c70 <__udivsi3>:
  805c70:	200d883a 	mov	r6,r4
  805c74:	2900152e 	bgeu	r5,r4,805ccc <__udivsi3+0x5c>
  805c78:	28001416 	blt	r5,zero,805ccc <__udivsi3+0x5c>
  805c7c:	00800804 	movi	r2,32
  805c80:	00c00044 	movi	r3,1
  805c84:	00000206 	br	805c90 <__udivsi3+0x20>
  805c88:	10000e26 	beq	r2,zero,805cc4 <__udivsi3+0x54>
  805c8c:	28000516 	blt	r5,zero,805ca4 <__udivsi3+0x34>
  805c90:	294b883a 	add	r5,r5,r5
  805c94:	10bfffc4 	addi	r2,r2,-1
  805c98:	18c7883a 	add	r3,r3,r3
  805c9c:	293ffa36 	bltu	r5,r4,805c88 <__alt_mem_onchip_mem+0xff785c88>
  805ca0:	18000826 	beq	r3,zero,805cc4 <__udivsi3+0x54>
  805ca4:	0005883a 	mov	r2,zero
  805ca8:	31400236 	bltu	r6,r5,805cb4 <__udivsi3+0x44>
  805cac:	314dc83a 	sub	r6,r6,r5
  805cb0:	10c4b03a 	or	r2,r2,r3
  805cb4:	1806d07a 	srli	r3,r3,1
  805cb8:	280ad07a 	srli	r5,r5,1
  805cbc:	183ffa1e 	bne	r3,zero,805ca8 <__alt_mem_onchip_mem+0xff785ca8>
  805cc0:	f800283a 	ret
  805cc4:	0005883a 	mov	r2,zero
  805cc8:	f800283a 	ret
  805ccc:	00c00044 	movi	r3,1
  805cd0:	003ff406 	br	805ca4 <__alt_mem_onchip_mem+0xff785ca4>

00805cd4 <__umodsi3>:
  805cd4:	2005883a 	mov	r2,r4
  805cd8:	2900122e 	bgeu	r5,r4,805d24 <__umodsi3+0x50>
  805cdc:	28001116 	blt	r5,zero,805d24 <__umodsi3+0x50>
  805ce0:	01800804 	movi	r6,32
  805ce4:	00c00044 	movi	r3,1
  805ce8:	00000206 	br	805cf4 <__umodsi3+0x20>
  805cec:	30000c26 	beq	r6,zero,805d20 <__umodsi3+0x4c>
  805cf0:	28000516 	blt	r5,zero,805d08 <__umodsi3+0x34>
  805cf4:	294b883a 	add	r5,r5,r5
  805cf8:	31bfffc4 	addi	r6,r6,-1
  805cfc:	18c7883a 	add	r3,r3,r3
  805d00:	293ffa36 	bltu	r5,r4,805cec <__alt_mem_onchip_mem+0xff785cec>
  805d04:	18000626 	beq	r3,zero,805d20 <__umodsi3+0x4c>
  805d08:	1806d07a 	srli	r3,r3,1
  805d0c:	11400136 	bltu	r2,r5,805d14 <__umodsi3+0x40>
  805d10:	1145c83a 	sub	r2,r2,r5
  805d14:	280ad07a 	srli	r5,r5,1
  805d18:	183ffb1e 	bne	r3,zero,805d08 <__alt_mem_onchip_mem+0xff785d08>
  805d1c:	f800283a 	ret
  805d20:	f800283a 	ret
  805d24:	00c00044 	movi	r3,1
  805d28:	003ff706 	br	805d08 <__alt_mem_onchip_mem+0xff785d08>

00805d2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  805d2c:	defff504 	addi	sp,sp,-44
  805d30:	df000a15 	stw	fp,40(sp)
  805d34:	df000a04 	addi	fp,sp,40
  805d38:	e13ffc15 	stw	r4,-16(fp)
  805d3c:	e17ffd15 	stw	r5,-12(fp)
  805d40:	e1bffe15 	stw	r6,-8(fp)
  805d44:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  805d48:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  805d4c:	d0a78617 	ldw	r2,-25064(gp)
  
  if (alt_ticks_per_second ())
  805d50:	10003c26 	beq	r2,zero,805e44 <alt_alarm_start+0x118>
  {
    if (alarm)
  805d54:	e0bffc17 	ldw	r2,-16(fp)
  805d58:	10003826 	beq	r2,zero,805e3c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  805d5c:	e0bffc17 	ldw	r2,-16(fp)
  805d60:	e0fffe17 	ldw	r3,-8(fp)
  805d64:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  805d68:	e0bffc17 	ldw	r2,-16(fp)
  805d6c:	e0ffff17 	ldw	r3,-4(fp)
  805d70:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d74:	0005303a 	rdctl	r2,status
  805d78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d7c:	e0fff917 	ldw	r3,-28(fp)
  805d80:	00bfff84 	movi	r2,-2
  805d84:	1884703a 	and	r2,r3,r2
  805d88:	1001703a 	wrctl	status,r2
  
  return context;
  805d8c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  805d90:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  805d94:	d0a78717 	ldw	r2,-25060(gp)
      
      current_nticks = alt_nticks();
  805d98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  805d9c:	e0fffd17 	ldw	r3,-12(fp)
  805da0:	e0bff617 	ldw	r2,-40(fp)
  805da4:	1885883a 	add	r2,r3,r2
  805da8:	10c00044 	addi	r3,r2,1
  805dac:	e0bffc17 	ldw	r2,-16(fp)
  805db0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  805db4:	e0bffc17 	ldw	r2,-16(fp)
  805db8:	10c00217 	ldw	r3,8(r2)
  805dbc:	e0bff617 	ldw	r2,-40(fp)
  805dc0:	1880042e 	bgeu	r3,r2,805dd4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  805dc4:	e0bffc17 	ldw	r2,-16(fp)
  805dc8:	00c00044 	movi	r3,1
  805dcc:	10c00405 	stb	r3,16(r2)
  805dd0:	00000206 	br	805ddc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  805dd4:	e0bffc17 	ldw	r2,-16(fp)
  805dd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  805ddc:	e0bffc17 	ldw	r2,-16(fp)
  805de0:	d0e00b04 	addi	r3,gp,-32724
  805de4:	e0fffa15 	stw	r3,-24(fp)
  805de8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  805dec:	e0bffb17 	ldw	r2,-20(fp)
  805df0:	e0fffa17 	ldw	r3,-24(fp)
  805df4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  805df8:	e0bffa17 	ldw	r2,-24(fp)
  805dfc:	10c00017 	ldw	r3,0(r2)
  805e00:	e0bffb17 	ldw	r2,-20(fp)
  805e04:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  805e08:	e0bffa17 	ldw	r2,-24(fp)
  805e0c:	10800017 	ldw	r2,0(r2)
  805e10:	e0fffb17 	ldw	r3,-20(fp)
  805e14:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  805e18:	e0bffa17 	ldw	r2,-24(fp)
  805e1c:	e0fffb17 	ldw	r3,-20(fp)
  805e20:	10c00015 	stw	r3,0(r2)
  805e24:	e0bff817 	ldw	r2,-32(fp)
  805e28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e2c:	e0bff717 	ldw	r2,-36(fp)
  805e30:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  805e34:	0005883a 	mov	r2,zero
  805e38:	00000306 	br	805e48 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  805e3c:	00bffa84 	movi	r2,-22
  805e40:	00000106 	br	805e48 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  805e44:	00bfde84 	movi	r2,-134
  }
}
  805e48:	e037883a 	mov	sp,fp
  805e4c:	df000017 	ldw	fp,0(sp)
  805e50:	dec00104 	addi	sp,sp,4
  805e54:	f800283a 	ret

00805e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805e58:	defffe04 	addi	sp,sp,-8
  805e5c:	dfc00115 	stw	ra,4(sp)
  805e60:	df000015 	stw	fp,0(sp)
  805e64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805e68:	d0a00917 	ldw	r2,-32732(gp)
  805e6c:	10000326 	beq	r2,zero,805e7c <alt_get_errno+0x24>
  805e70:	d0a00917 	ldw	r2,-32732(gp)
  805e74:	103ee83a 	callr	r2
  805e78:	00000106 	br	805e80 <alt_get_errno+0x28>
  805e7c:	d0a78204 	addi	r2,gp,-25080
}
  805e80:	e037883a 	mov	sp,fp
  805e84:	dfc00117 	ldw	ra,4(sp)
  805e88:	df000017 	ldw	fp,0(sp)
  805e8c:	dec00204 	addi	sp,sp,8
  805e90:	f800283a 	ret

00805e94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  805e94:	defffb04 	addi	sp,sp,-20
  805e98:	dfc00415 	stw	ra,16(sp)
  805e9c:	df000315 	stw	fp,12(sp)
  805ea0:	df000304 	addi	fp,sp,12
  805ea4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  805ea8:	e0bfff17 	ldw	r2,-4(fp)
  805eac:	10000616 	blt	r2,zero,805ec8 <close+0x34>
  805eb0:	e0bfff17 	ldw	r2,-4(fp)
  805eb4:	10c00324 	muli	r3,r2,12
  805eb8:	00802074 	movhi	r2,129
  805ebc:	10aa7e04 	addi	r2,r2,-22024
  805ec0:	1885883a 	add	r2,r3,r2
  805ec4:	00000106 	br	805ecc <close+0x38>
  805ec8:	0005883a 	mov	r2,zero
  805ecc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  805ed0:	e0bffd17 	ldw	r2,-12(fp)
  805ed4:	10001926 	beq	r2,zero,805f3c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  805ed8:	e0bffd17 	ldw	r2,-12(fp)
  805edc:	10800017 	ldw	r2,0(r2)
  805ee0:	10800417 	ldw	r2,16(r2)
  805ee4:	10000626 	beq	r2,zero,805f00 <close+0x6c>
  805ee8:	e0bffd17 	ldw	r2,-12(fp)
  805eec:	10800017 	ldw	r2,0(r2)
  805ef0:	10800417 	ldw	r2,16(r2)
  805ef4:	e13ffd17 	ldw	r4,-12(fp)
  805ef8:	103ee83a 	callr	r2
  805efc:	00000106 	br	805f04 <close+0x70>
  805f00:	0005883a 	mov	r2,zero
  805f04:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  805f08:	e13fff17 	ldw	r4,-4(fp)
  805f0c:	08065540 	call	806554 <alt_release_fd>
    if (rval < 0)
  805f10:	e0bffe17 	ldw	r2,-8(fp)
  805f14:	1000070e 	bge	r2,zero,805f34 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  805f18:	0805e580 	call	805e58 <alt_get_errno>
  805f1c:	1007883a 	mov	r3,r2
  805f20:	e0bffe17 	ldw	r2,-8(fp)
  805f24:	0085c83a 	sub	r2,zero,r2
  805f28:	18800015 	stw	r2,0(r3)
      return -1;
  805f2c:	00bfffc4 	movi	r2,-1
  805f30:	00000706 	br	805f50 <close+0xbc>
    }
    return 0;
  805f34:	0005883a 	mov	r2,zero
  805f38:	00000506 	br	805f50 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  805f3c:	0805e580 	call	805e58 <alt_get_errno>
  805f40:	1007883a 	mov	r3,r2
  805f44:	00801444 	movi	r2,81
  805f48:	18800015 	stw	r2,0(r3)
    return -1;
  805f4c:	00bfffc4 	movi	r2,-1
  }
}
  805f50:	e037883a 	mov	sp,fp
  805f54:	dfc00117 	ldw	ra,4(sp)
  805f58:	df000017 	ldw	fp,0(sp)
  805f5c:	dec00204 	addi	sp,sp,8
  805f60:	f800283a 	ret

00805f64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  805f64:	defffc04 	addi	sp,sp,-16
  805f68:	df000315 	stw	fp,12(sp)
  805f6c:	df000304 	addi	fp,sp,12
  805f70:	e13ffd15 	stw	r4,-12(fp)
  805f74:	e17ffe15 	stw	r5,-8(fp)
  805f78:	e1bfff15 	stw	r6,-4(fp)
  return len;
  805f7c:	e0bfff17 	ldw	r2,-4(fp)
}
  805f80:	e037883a 	mov	sp,fp
  805f84:	df000017 	ldw	fp,0(sp)
  805f88:	dec00104 	addi	sp,sp,4
  805f8c:	f800283a 	ret

00805f90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805f90:	defffe04 	addi	sp,sp,-8
  805f94:	dfc00115 	stw	ra,4(sp)
  805f98:	df000015 	stw	fp,0(sp)
  805f9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  805fa0:	d0a00917 	ldw	r2,-32732(gp)
  805fa4:	10000326 	beq	r2,zero,805fb4 <alt_get_errno+0x24>
  805fa8:	d0a00917 	ldw	r2,-32732(gp)
  805fac:	103ee83a 	callr	r2
  805fb0:	00000106 	br	805fb8 <alt_get_errno+0x28>
  805fb4:	d0a78204 	addi	r2,gp,-25080
}
  805fb8:	e037883a 	mov	sp,fp
  805fbc:	dfc00117 	ldw	ra,4(sp)
  805fc0:	df000017 	ldw	fp,0(sp)
  805fc4:	dec00204 	addi	sp,sp,8
  805fc8:	f800283a 	ret

00805fcc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  805fcc:	defffb04 	addi	sp,sp,-20
  805fd0:	dfc00415 	stw	ra,16(sp)
  805fd4:	df000315 	stw	fp,12(sp)
  805fd8:	df000304 	addi	fp,sp,12
  805fdc:	e13ffe15 	stw	r4,-8(fp)
  805fe0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  805fe4:	e0bffe17 	ldw	r2,-8(fp)
  805fe8:	10000616 	blt	r2,zero,806004 <fstat+0x38>
  805fec:	e0bffe17 	ldw	r2,-8(fp)
  805ff0:	10c00324 	muli	r3,r2,12
  805ff4:	00802074 	movhi	r2,129
  805ff8:	10aa7e04 	addi	r2,r2,-22024
  805ffc:	1885883a 	add	r2,r3,r2
  806000:	00000106 	br	806008 <fstat+0x3c>
  806004:	0005883a 	mov	r2,zero
  806008:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80600c:	e0bffd17 	ldw	r2,-12(fp)
  806010:	10001026 	beq	r2,zero,806054 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  806014:	e0bffd17 	ldw	r2,-12(fp)
  806018:	10800017 	ldw	r2,0(r2)
  80601c:	10800817 	ldw	r2,32(r2)
  806020:	10000726 	beq	r2,zero,806040 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  806024:	e0bffd17 	ldw	r2,-12(fp)
  806028:	10800017 	ldw	r2,0(r2)
  80602c:	10800817 	ldw	r2,32(r2)
  806030:	e17fff17 	ldw	r5,-4(fp)
  806034:	e13ffd17 	ldw	r4,-12(fp)
  806038:	103ee83a 	callr	r2
  80603c:	00000a06 	br	806068 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  806040:	e0bfff17 	ldw	r2,-4(fp)
  806044:	00c80004 	movi	r3,8192
  806048:	10c00115 	stw	r3,4(r2)
      return 0;
  80604c:	0005883a 	mov	r2,zero
  806050:	00000506 	br	806068 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  806054:	0805f900 	call	805f90 <alt_get_errno>
  806058:	1007883a 	mov	r3,r2
  80605c:	00801444 	movi	r2,81
  806060:	18800015 	stw	r2,0(r3)
    return -1;
  806064:	00bfffc4 	movi	r2,-1
  }
}
  806068:	e037883a 	mov	sp,fp
  80606c:	dfc00117 	ldw	ra,4(sp)
  806070:	df000017 	ldw	fp,0(sp)
  806074:	dec00204 	addi	sp,sp,8
  806078:	f800283a 	ret

0080607c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80607c:	defffe04 	addi	sp,sp,-8
  806080:	dfc00115 	stw	ra,4(sp)
  806084:	df000015 	stw	fp,0(sp)
  806088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80608c:	d0a00917 	ldw	r2,-32732(gp)
  806090:	10000326 	beq	r2,zero,8060a0 <alt_get_errno+0x24>
  806094:	d0a00917 	ldw	r2,-32732(gp)
  806098:	103ee83a 	callr	r2
  80609c:	00000106 	br	8060a4 <alt_get_errno+0x28>
  8060a0:	d0a78204 	addi	r2,gp,-25080
}
  8060a4:	e037883a 	mov	sp,fp
  8060a8:	dfc00117 	ldw	ra,4(sp)
  8060ac:	df000017 	ldw	fp,0(sp)
  8060b0:	dec00204 	addi	sp,sp,8
  8060b4:	f800283a 	ret

008060b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8060b8:	deffed04 	addi	sp,sp,-76
  8060bc:	dfc01215 	stw	ra,72(sp)
  8060c0:	df001115 	stw	fp,68(sp)
  8060c4:	df001104 	addi	fp,sp,68
  8060c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8060cc:	e0bfff17 	ldw	r2,-4(fp)
  8060d0:	10000616 	blt	r2,zero,8060ec <isatty+0x34>
  8060d4:	e0bfff17 	ldw	r2,-4(fp)
  8060d8:	10c00324 	muli	r3,r2,12
  8060dc:	00802074 	movhi	r2,129
  8060e0:	10aa7e04 	addi	r2,r2,-22024
  8060e4:	1885883a 	add	r2,r3,r2
  8060e8:	00000106 	br	8060f0 <isatty+0x38>
  8060ec:	0005883a 	mov	r2,zero
  8060f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  8060f4:	e0bfef17 	ldw	r2,-68(fp)
  8060f8:	10000e26 	beq	r2,zero,806134 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8060fc:	e0bfef17 	ldw	r2,-68(fp)
  806100:	10800017 	ldw	r2,0(r2)
  806104:	10800817 	ldw	r2,32(r2)
  806108:	1000021e 	bne	r2,zero,806114 <isatty+0x5c>
    {
      return 1;
  80610c:	00800044 	movi	r2,1
  806110:	00000d06 	br	806148 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  806114:	e0bff004 	addi	r2,fp,-64
  806118:	100b883a 	mov	r5,r2
  80611c:	e13fff17 	ldw	r4,-4(fp)
  806120:	0805fcc0 	call	805fcc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  806124:	e0bff117 	ldw	r2,-60(fp)
  806128:	10880020 	cmpeqi	r2,r2,8192
  80612c:	10803fcc 	andi	r2,r2,255
  806130:	00000506 	br	806148 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  806134:	080607c0 	call	80607c <alt_get_errno>
  806138:	1007883a 	mov	r3,r2
  80613c:	00801444 	movi	r2,81
  806140:	18800015 	stw	r2,0(r3)
    return 0;
  806144:	0005883a 	mov	r2,zero
  }
}
  806148:	e037883a 	mov	sp,fp
  80614c:	dfc00117 	ldw	ra,4(sp)
  806150:	df000017 	ldw	fp,0(sp)
  806154:	dec00204 	addi	sp,sp,8
  806158:	f800283a 	ret

0080615c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80615c:	defffc04 	addi	sp,sp,-16
  806160:	df000315 	stw	fp,12(sp)
  806164:	df000304 	addi	fp,sp,12
  806168:	e13ffd15 	stw	r4,-12(fp)
  80616c:	e17ffe15 	stw	r5,-8(fp)
  806170:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  806174:	e0fffe17 	ldw	r3,-8(fp)
  806178:	e0bffd17 	ldw	r2,-12(fp)
  80617c:	18800c26 	beq	r3,r2,8061b0 <alt_load_section+0x54>
  {
    while( to != end )
  806180:	00000806 	br	8061a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  806184:	e0bffe17 	ldw	r2,-8(fp)
  806188:	10c00104 	addi	r3,r2,4
  80618c:	e0fffe15 	stw	r3,-8(fp)
  806190:	e0fffd17 	ldw	r3,-12(fp)
  806194:	19000104 	addi	r4,r3,4
  806198:	e13ffd15 	stw	r4,-12(fp)
  80619c:	18c00017 	ldw	r3,0(r3)
  8061a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8061a4:	e0fffe17 	ldw	r3,-8(fp)
  8061a8:	e0bfff17 	ldw	r2,-4(fp)
  8061ac:	18bff51e 	bne	r3,r2,806184 <__alt_mem_onchip_mem+0xff786184>
    {
      *to++ = *from++;
    }
  }
}
  8061b0:	0001883a 	nop
  8061b4:	e037883a 	mov	sp,fp
  8061b8:	df000017 	ldw	fp,0(sp)
  8061bc:	dec00104 	addi	sp,sp,4
  8061c0:	f800283a 	ret

008061c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8061c4:	defffe04 	addi	sp,sp,-8
  8061c8:	dfc00115 	stw	ra,4(sp)
  8061cc:	df000015 	stw	fp,0(sp)
  8061d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8061d4:	01802074 	movhi	r6,129
  8061d8:	31af7f04 	addi	r6,r6,-16900
  8061dc:	01402074 	movhi	r5,129
  8061e0:	29686904 	addi	r5,r5,-24156
  8061e4:	01002074 	movhi	r4,129
  8061e8:	212f7f04 	addi	r4,r4,-16900
  8061ec:	080615c0 	call	80615c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8061f0:	01802034 	movhi	r6,128
  8061f4:	31809104 	addi	r6,r6,580
  8061f8:	01402034 	movhi	r5,128
  8061fc:	29400804 	addi	r5,r5,32
  806200:	01002034 	movhi	r4,128
  806204:	21000804 	addi	r4,r4,32
  806208:	080615c0 	call	80615c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80620c:	01802074 	movhi	r6,129
  806210:	31a86904 	addi	r6,r6,-24156
  806214:	01402074 	movhi	r5,129
  806218:	29679404 	addi	r5,r5,-25008
  80621c:	01002074 	movhi	r4,129
  806220:	21279404 	addi	r4,r4,-25008
  806224:	080615c0 	call	80615c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  806228:	0808d580 	call	808d58 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80622c:	0808f400 	call	808f40 <alt_icache_flush_all>
}
  806230:	0001883a 	nop
  806234:	e037883a 	mov	sp,fp
  806238:	dfc00117 	ldw	ra,4(sp)
  80623c:	df000017 	ldw	fp,0(sp)
  806240:	dec00204 	addi	sp,sp,8
  806244:	f800283a 	ret

00806248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  806248:	defffe04 	addi	sp,sp,-8
  80624c:	dfc00115 	stw	ra,4(sp)
  806250:	df000015 	stw	fp,0(sp)
  806254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  806258:	d0a00917 	ldw	r2,-32732(gp)
  80625c:	10000326 	beq	r2,zero,80626c <alt_get_errno+0x24>
  806260:	d0a00917 	ldw	r2,-32732(gp)
  806264:	103ee83a 	callr	r2
  806268:	00000106 	br	806270 <alt_get_errno+0x28>
  80626c:	d0a78204 	addi	r2,gp,-25080
}
  806270:	e037883a 	mov	sp,fp
  806274:	dfc00117 	ldw	ra,4(sp)
  806278:	df000017 	ldw	fp,0(sp)
  80627c:	dec00204 	addi	sp,sp,8
  806280:	f800283a 	ret

00806284 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  806284:	defff904 	addi	sp,sp,-28
  806288:	dfc00615 	stw	ra,24(sp)
  80628c:	df000515 	stw	fp,20(sp)
  806290:	df000504 	addi	fp,sp,20
  806294:	e13ffd15 	stw	r4,-12(fp)
  806298:	e17ffe15 	stw	r5,-8(fp)
  80629c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8062a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8062a4:	e0bffd17 	ldw	r2,-12(fp)
  8062a8:	10000616 	blt	r2,zero,8062c4 <lseek+0x40>
  8062ac:	e0bffd17 	ldw	r2,-12(fp)
  8062b0:	10c00324 	muli	r3,r2,12
  8062b4:	00802074 	movhi	r2,129
  8062b8:	10aa7e04 	addi	r2,r2,-22024
  8062bc:	1885883a 	add	r2,r3,r2
  8062c0:	00000106 	br	8062c8 <lseek+0x44>
  8062c4:	0005883a 	mov	r2,zero
  8062c8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8062cc:	e0bffc17 	ldw	r2,-16(fp)
  8062d0:	10001026 	beq	r2,zero,806314 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8062d4:	e0bffc17 	ldw	r2,-16(fp)
  8062d8:	10800017 	ldw	r2,0(r2)
  8062dc:	10800717 	ldw	r2,28(r2)
  8062e0:	10000926 	beq	r2,zero,806308 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8062e4:	e0bffc17 	ldw	r2,-16(fp)
  8062e8:	10800017 	ldw	r2,0(r2)
  8062ec:	10800717 	ldw	r2,28(r2)
  8062f0:	e1bfff17 	ldw	r6,-4(fp)
  8062f4:	e17ffe17 	ldw	r5,-8(fp)
  8062f8:	e13ffc17 	ldw	r4,-16(fp)
  8062fc:	103ee83a 	callr	r2
  806300:	e0bffb15 	stw	r2,-20(fp)
  806304:	00000506 	br	80631c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  806308:	00bfde84 	movi	r2,-134
  80630c:	e0bffb15 	stw	r2,-20(fp)
  806310:	00000206 	br	80631c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  806314:	00bfebc4 	movi	r2,-81
  806318:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80631c:	e0bffb17 	ldw	r2,-20(fp)
  806320:	1000070e 	bge	r2,zero,806340 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  806324:	08062480 	call	806248 <alt_get_errno>
  806328:	1007883a 	mov	r3,r2
  80632c:	e0bffb17 	ldw	r2,-20(fp)
  806330:	0085c83a 	sub	r2,zero,r2
  806334:	18800015 	stw	r2,0(r3)
    rc = -1;
  806338:	00bfffc4 	movi	r2,-1
  80633c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  806340:	e0bffb17 	ldw	r2,-20(fp)
}
  806344:	e037883a 	mov	sp,fp
  806348:	dfc00117 	ldw	ra,4(sp)
  80634c:	df000017 	ldw	fp,0(sp)
  806350:	dec00204 	addi	sp,sp,8
  806354:	f800283a 	ret

00806358 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  806358:	defffd04 	addi	sp,sp,-12
  80635c:	dfc00215 	stw	ra,8(sp)
  806360:	df000115 	stw	fp,4(sp)
  806364:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  806368:	0009883a 	mov	r4,zero
  80636c:	08069740 	call	806974 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  806370:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  806374:	08069ac0 	call	8069ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  806378:	01802074 	movhi	r6,129
  80637c:	31a7bb04 	addi	r6,r6,-24852
  806380:	01402074 	movhi	r5,129
  806384:	2967bb04 	addi	r5,r5,-24852
  806388:	01002074 	movhi	r4,129
  80638c:	2127bb04 	addi	r4,r4,-24852
  806390:	08092d80 	call	8092d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  806394:	0808e800 	call	808e80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  806398:	01002074 	movhi	r4,129
  80639c:	2123b804 	addi	r4,r4,-28960
  8063a0:	0809abc0 	call	809abc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8063a4:	d0a78317 	ldw	r2,-25076(gp)
  8063a8:	d0e78417 	ldw	r3,-25072(gp)
  8063ac:	d1278517 	ldw	r4,-25068(gp)
  8063b0:	200d883a 	mov	r6,r4
  8063b4:	180b883a 	mov	r5,r3
  8063b8:	1009883a 	mov	r4,r2
  8063bc:	08008fc0 	call	8008fc <main>
  8063c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8063c4:	01000044 	movi	r4,1
  8063c8:	0805e940 	call	805e94 <close>
  exit (result);
  8063cc:	e13fff17 	ldw	r4,-4(fp)
  8063d0:	0809ad00 	call	809ad0 <exit>

008063d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8063d4:	defffe04 	addi	sp,sp,-8
  8063d8:	df000115 	stw	fp,4(sp)
  8063dc:	df000104 	addi	fp,sp,4
  8063e0:	e13fff15 	stw	r4,-4(fp)
}
  8063e4:	0001883a 	nop
  8063e8:	e037883a 	mov	sp,fp
  8063ec:	df000017 	ldw	fp,0(sp)
  8063f0:	dec00104 	addi	sp,sp,4
  8063f4:	f800283a 	ret

008063f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8063f8:	defffe04 	addi	sp,sp,-8
  8063fc:	df000115 	stw	fp,4(sp)
  806400:	df000104 	addi	fp,sp,4
  806404:	e13fff15 	stw	r4,-4(fp)
}
  806408:	0001883a 	nop
  80640c:	e037883a 	mov	sp,fp
  806410:	df000017 	ldw	fp,0(sp)
  806414:	dec00104 	addi	sp,sp,4
  806418:	f800283a 	ret

0080641c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80641c:	defffe04 	addi	sp,sp,-8
  806420:	dfc00115 	stw	ra,4(sp)
  806424:	df000015 	stw	fp,0(sp)
  806428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80642c:	d0a00917 	ldw	r2,-32732(gp)
  806430:	10000326 	beq	r2,zero,806440 <alt_get_errno+0x24>
  806434:	d0a00917 	ldw	r2,-32732(gp)
  806438:	103ee83a 	callr	r2
  80643c:	00000106 	br	806444 <alt_get_errno+0x28>
  806440:	d0a78204 	addi	r2,gp,-25080
}
  806444:	e037883a 	mov	sp,fp
  806448:	dfc00117 	ldw	ra,4(sp)
  80644c:	df000017 	ldw	fp,0(sp)
  806450:	dec00204 	addi	sp,sp,8
  806454:	f800283a 	ret

00806458 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  806458:	defff904 	addi	sp,sp,-28
  80645c:	dfc00615 	stw	ra,24(sp)
  806460:	df000515 	stw	fp,20(sp)
  806464:	df000504 	addi	fp,sp,20
  806468:	e13ffd15 	stw	r4,-12(fp)
  80646c:	e17ffe15 	stw	r5,-8(fp)
  806470:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  806474:	e0bffd17 	ldw	r2,-12(fp)
  806478:	10000616 	blt	r2,zero,806494 <read+0x3c>
  80647c:	e0bffd17 	ldw	r2,-12(fp)
  806480:	10c00324 	muli	r3,r2,12
  806484:	00802074 	movhi	r2,129
  806488:	10aa7e04 	addi	r2,r2,-22024
  80648c:	1885883a 	add	r2,r3,r2
  806490:	00000106 	br	806498 <read+0x40>
  806494:	0005883a 	mov	r2,zero
  806498:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80649c:	e0bffb17 	ldw	r2,-20(fp)
  8064a0:	10002226 	beq	r2,zero,80652c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8064a4:	e0bffb17 	ldw	r2,-20(fp)
  8064a8:	10800217 	ldw	r2,8(r2)
  8064ac:	108000cc 	andi	r2,r2,3
  8064b0:	10800060 	cmpeqi	r2,r2,1
  8064b4:	1000181e 	bne	r2,zero,806518 <read+0xc0>
        (fd->dev->read))
  8064b8:	e0bffb17 	ldw	r2,-20(fp)
  8064bc:	10800017 	ldw	r2,0(r2)
  8064c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8064c4:	10001426 	beq	r2,zero,806518 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8064c8:	e0bffb17 	ldw	r2,-20(fp)
  8064cc:	10800017 	ldw	r2,0(r2)
  8064d0:	10800517 	ldw	r2,20(r2)
  8064d4:	e0ffff17 	ldw	r3,-4(fp)
  8064d8:	180d883a 	mov	r6,r3
  8064dc:	e17ffe17 	ldw	r5,-8(fp)
  8064e0:	e13ffb17 	ldw	r4,-20(fp)
  8064e4:	103ee83a 	callr	r2
  8064e8:	e0bffc15 	stw	r2,-16(fp)
  8064ec:	e0bffc17 	ldw	r2,-16(fp)
  8064f0:	1000070e 	bge	r2,zero,806510 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  8064f4:	080641c0 	call	80641c <alt_get_errno>
  8064f8:	1007883a 	mov	r3,r2
  8064fc:	e0bffc17 	ldw	r2,-16(fp)
  806500:	0085c83a 	sub	r2,zero,r2
  806504:	18800015 	stw	r2,0(r3)
          return -1;
  806508:	00bfffc4 	movi	r2,-1
  80650c:	00000c06 	br	806540 <read+0xe8>
        }
        return rval;
  806510:	e0bffc17 	ldw	r2,-16(fp)
  806514:	00000a06 	br	806540 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  806518:	080641c0 	call	80641c <alt_get_errno>
  80651c:	1007883a 	mov	r3,r2
  806520:	00800344 	movi	r2,13
  806524:	18800015 	stw	r2,0(r3)
  806528:	00000406 	br	80653c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80652c:	080641c0 	call	80641c <alt_get_errno>
  806530:	1007883a 	mov	r3,r2
  806534:	00801444 	movi	r2,81
  806538:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80653c:	00bfffc4 	movi	r2,-1
}
  806540:	e037883a 	mov	sp,fp
  806544:	dfc00117 	ldw	ra,4(sp)
  806548:	df000017 	ldw	fp,0(sp)
  80654c:	dec00204 	addi	sp,sp,8
  806550:	f800283a 	ret

00806554 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  806554:	defffe04 	addi	sp,sp,-8
  806558:	df000115 	stw	fp,4(sp)
  80655c:	df000104 	addi	fp,sp,4
  806560:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  806564:	e0bfff17 	ldw	r2,-4(fp)
  806568:	108000d0 	cmplti	r2,r2,3
  80656c:	10000d1e 	bne	r2,zero,8065a4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  806570:	00802074 	movhi	r2,129
  806574:	10aa7e04 	addi	r2,r2,-22024
  806578:	e0ffff17 	ldw	r3,-4(fp)
  80657c:	18c00324 	muli	r3,r3,12
  806580:	10c5883a 	add	r2,r2,r3
  806584:	10800204 	addi	r2,r2,8
  806588:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80658c:	00802074 	movhi	r2,129
  806590:	10aa7e04 	addi	r2,r2,-22024
  806594:	e0ffff17 	ldw	r3,-4(fp)
  806598:	18c00324 	muli	r3,r3,12
  80659c:	10c5883a 	add	r2,r2,r3
  8065a0:	10000015 	stw	zero,0(r2)
  }
}
  8065a4:	0001883a 	nop
  8065a8:	e037883a 	mov	sp,fp
  8065ac:	df000017 	ldw	fp,0(sp)
  8065b0:	dec00104 	addi	sp,sp,4
  8065b4:	f800283a 	ret

008065b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  8065b8:	defff904 	addi	sp,sp,-28
  8065bc:	df000615 	stw	fp,24(sp)
  8065c0:	df000604 	addi	fp,sp,24
  8065c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8065c8:	0005303a 	rdctl	r2,status
  8065cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8065d0:	e0fffe17 	ldw	r3,-8(fp)
  8065d4:	00bfff84 	movi	r2,-2
  8065d8:	1884703a 	and	r2,r3,r2
  8065dc:	1001703a 	wrctl	status,r2
  
  return context;
  8065e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  8065e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  8065e8:	d0a00a17 	ldw	r2,-32728(gp)
  8065ec:	10c000c4 	addi	r3,r2,3
  8065f0:	00bfff04 	movi	r2,-4
  8065f4:	1884703a 	and	r2,r3,r2
  8065f8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8065fc:	d0e00a17 	ldw	r3,-32728(gp)
  806600:	e0bfff17 	ldw	r2,-4(fp)
  806604:	1887883a 	add	r3,r3,r2
  806608:	00804034 	movhi	r2,256
  80660c:	10800004 	addi	r2,r2,0
  806610:	10c0062e 	bgeu	r2,r3,80662c <sbrk+0x74>
  806614:	e0bffb17 	ldw	r2,-20(fp)
  806618:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80661c:	e0bffa17 	ldw	r2,-24(fp)
  806620:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  806624:	00bfffc4 	movi	r2,-1
  806628:	00000b06 	br	806658 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80662c:	d0a00a17 	ldw	r2,-32728(gp)
  806630:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  806634:	d0e00a17 	ldw	r3,-32728(gp)
  806638:	e0bfff17 	ldw	r2,-4(fp)
  80663c:	1885883a 	add	r2,r3,r2
  806640:	d0a00a15 	stw	r2,-32728(gp)
  806644:	e0bffb17 	ldw	r2,-20(fp)
  806648:	e0bffc15 	stw	r2,-16(fp)
  80664c:	e0bffc17 	ldw	r2,-16(fp)
  806650:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  806654:	e0bffd17 	ldw	r2,-12(fp)
} 
  806658:	e037883a 	mov	sp,fp
  80665c:	df000017 	ldw	fp,0(sp)
  806660:	dec00104 	addi	sp,sp,4
  806664:	f800283a 	ret

00806668 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  806668:	defffa04 	addi	sp,sp,-24
  80666c:	df000515 	stw	fp,20(sp)
  806670:	df000504 	addi	fp,sp,20
  806674:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806678:	0005303a 	rdctl	r2,status
  80667c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806680:	e0fffc17 	ldw	r3,-16(fp)
  806684:	00bfff84 	movi	r2,-2
  806688:	1884703a 	and	r2,r3,r2
  80668c:	1001703a 	wrctl	status,r2
  
  return context;
  806690:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  806694:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  806698:	e0bfff17 	ldw	r2,-4(fp)
  80669c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8066a0:	e0bffd17 	ldw	r2,-12(fp)
  8066a4:	10800017 	ldw	r2,0(r2)
  8066a8:	e0fffd17 	ldw	r3,-12(fp)
  8066ac:	18c00117 	ldw	r3,4(r3)
  8066b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8066b4:	e0bffd17 	ldw	r2,-12(fp)
  8066b8:	10800117 	ldw	r2,4(r2)
  8066bc:	e0fffd17 	ldw	r3,-12(fp)
  8066c0:	18c00017 	ldw	r3,0(r3)
  8066c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8066c8:	e0bffd17 	ldw	r2,-12(fp)
  8066cc:	e0fffd17 	ldw	r3,-12(fp)
  8066d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8066d4:	e0bffd17 	ldw	r2,-12(fp)
  8066d8:	e0fffd17 	ldw	r3,-12(fp)
  8066dc:	10c00015 	stw	r3,0(r2)
  8066e0:	e0bffb17 	ldw	r2,-20(fp)
  8066e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8066e8:	e0bffe17 	ldw	r2,-8(fp)
  8066ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8066f0:	0001883a 	nop
  8066f4:	e037883a 	mov	sp,fp
  8066f8:	df000017 	ldw	fp,0(sp)
  8066fc:	dec00104 	addi	sp,sp,4
  806700:	f800283a 	ret

00806704 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  806704:	defffb04 	addi	sp,sp,-20
  806708:	dfc00415 	stw	ra,16(sp)
  80670c:	df000315 	stw	fp,12(sp)
  806710:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  806714:	d0a00b17 	ldw	r2,-32724(gp)
  806718:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80671c:	d0a78717 	ldw	r2,-25060(gp)
  806720:	10800044 	addi	r2,r2,1
  806724:	d0a78715 	stw	r2,-25060(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  806728:	00002e06 	br	8067e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80672c:	e0bffd17 	ldw	r2,-12(fp)
  806730:	10800017 	ldw	r2,0(r2)
  806734:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  806738:	e0bffd17 	ldw	r2,-12(fp)
  80673c:	10800403 	ldbu	r2,16(r2)
  806740:	10803fcc 	andi	r2,r2,255
  806744:	10000426 	beq	r2,zero,806758 <alt_tick+0x54>
  806748:	d0a78717 	ldw	r2,-25060(gp)
  80674c:	1000021e 	bne	r2,zero,806758 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  806750:	e0bffd17 	ldw	r2,-12(fp)
  806754:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  806758:	e0bffd17 	ldw	r2,-12(fp)
  80675c:	10800217 	ldw	r2,8(r2)
  806760:	d0e78717 	ldw	r3,-25060(gp)
  806764:	18801d36 	bltu	r3,r2,8067dc <alt_tick+0xd8>
  806768:	e0bffd17 	ldw	r2,-12(fp)
  80676c:	10800403 	ldbu	r2,16(r2)
  806770:	10803fcc 	andi	r2,r2,255
  806774:	1000191e 	bne	r2,zero,8067dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  806778:	e0bffd17 	ldw	r2,-12(fp)
  80677c:	10800317 	ldw	r2,12(r2)
  806780:	e0fffd17 	ldw	r3,-12(fp)
  806784:	18c00517 	ldw	r3,20(r3)
  806788:	1809883a 	mov	r4,r3
  80678c:	103ee83a 	callr	r2
  806790:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  806794:	e0bfff17 	ldw	r2,-4(fp)
  806798:	1000031e 	bne	r2,zero,8067a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80679c:	e13ffd17 	ldw	r4,-12(fp)
  8067a0:	08066680 	call	806668 <alt_alarm_stop>
  8067a4:	00000d06 	br	8067dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8067a8:	e0bffd17 	ldw	r2,-12(fp)
  8067ac:	10c00217 	ldw	r3,8(r2)
  8067b0:	e0bfff17 	ldw	r2,-4(fp)
  8067b4:	1887883a 	add	r3,r3,r2
  8067b8:	e0bffd17 	ldw	r2,-12(fp)
  8067bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8067c0:	e0bffd17 	ldw	r2,-12(fp)
  8067c4:	10c00217 	ldw	r3,8(r2)
  8067c8:	d0a78717 	ldw	r2,-25060(gp)
  8067cc:	1880032e 	bgeu	r3,r2,8067dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8067d0:	e0bffd17 	ldw	r2,-12(fp)
  8067d4:	00c00044 	movi	r3,1
  8067d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8067dc:	e0bffe17 	ldw	r2,-8(fp)
  8067e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8067e4:	e0fffd17 	ldw	r3,-12(fp)
  8067e8:	d0a00b04 	addi	r2,gp,-32724
  8067ec:	18bfcf1e 	bne	r3,r2,80672c <__alt_mem_onchip_mem+0xff78672c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8067f0:	0001883a 	nop
}
  8067f4:	0001883a 	nop
  8067f8:	e037883a 	mov	sp,fp
  8067fc:	dfc00117 	ldw	ra,4(sp)
  806800:	df000017 	ldw	fp,0(sp)
  806804:	dec00204 	addi	sp,sp,8
  806808:	f800283a 	ret

0080680c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80680c:	defffe04 	addi	sp,sp,-8
  806810:	dfc00115 	stw	ra,4(sp)
  806814:	df000015 	stw	fp,0(sp)
  806818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80681c:	d0a00917 	ldw	r2,-32732(gp)
  806820:	10000326 	beq	r2,zero,806830 <alt_get_errno+0x24>
  806824:	d0a00917 	ldw	r2,-32732(gp)
  806828:	103ee83a 	callr	r2
  80682c:	00000106 	br	806834 <alt_get_errno+0x28>
  806830:	d0a78204 	addi	r2,gp,-25080
}
  806834:	e037883a 	mov	sp,fp
  806838:	dfc00117 	ldw	ra,4(sp)
  80683c:	df000017 	ldw	fp,0(sp)
  806840:	dec00204 	addi	sp,sp,8
  806844:	f800283a 	ret

00806848 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  806848:	defff904 	addi	sp,sp,-28
  80684c:	dfc00615 	stw	ra,24(sp)
  806850:	df000515 	stw	fp,20(sp)
  806854:	df000504 	addi	fp,sp,20
  806858:	e13ffd15 	stw	r4,-12(fp)
  80685c:	e17ffe15 	stw	r5,-8(fp)
  806860:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  806864:	e0bffd17 	ldw	r2,-12(fp)
  806868:	10000616 	blt	r2,zero,806884 <write+0x3c>
  80686c:	e0bffd17 	ldw	r2,-12(fp)
  806870:	10c00324 	muli	r3,r2,12
  806874:	00802074 	movhi	r2,129
  806878:	10aa7e04 	addi	r2,r2,-22024
  80687c:	1885883a 	add	r2,r3,r2
  806880:	00000106 	br	806888 <write+0x40>
  806884:	0005883a 	mov	r2,zero
  806888:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80688c:	e0bffb17 	ldw	r2,-20(fp)
  806890:	10002126 	beq	r2,zero,806918 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  806894:	e0bffb17 	ldw	r2,-20(fp)
  806898:	10800217 	ldw	r2,8(r2)
  80689c:	108000cc 	andi	r2,r2,3
  8068a0:	10001826 	beq	r2,zero,806904 <write+0xbc>
  8068a4:	e0bffb17 	ldw	r2,-20(fp)
  8068a8:	10800017 	ldw	r2,0(r2)
  8068ac:	10800617 	ldw	r2,24(r2)
  8068b0:	10001426 	beq	r2,zero,806904 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8068b4:	e0bffb17 	ldw	r2,-20(fp)
  8068b8:	10800017 	ldw	r2,0(r2)
  8068bc:	10800617 	ldw	r2,24(r2)
  8068c0:	e0ffff17 	ldw	r3,-4(fp)
  8068c4:	180d883a 	mov	r6,r3
  8068c8:	e17ffe17 	ldw	r5,-8(fp)
  8068cc:	e13ffb17 	ldw	r4,-20(fp)
  8068d0:	103ee83a 	callr	r2
  8068d4:	e0bffc15 	stw	r2,-16(fp)
  8068d8:	e0bffc17 	ldw	r2,-16(fp)
  8068dc:	1000070e 	bge	r2,zero,8068fc <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8068e0:	080680c0 	call	80680c <alt_get_errno>
  8068e4:	1007883a 	mov	r3,r2
  8068e8:	e0bffc17 	ldw	r2,-16(fp)
  8068ec:	0085c83a 	sub	r2,zero,r2
  8068f0:	18800015 	stw	r2,0(r3)
        return -1;
  8068f4:	00bfffc4 	movi	r2,-1
  8068f8:	00000c06 	br	80692c <write+0xe4>
      }
      return rval;
  8068fc:	e0bffc17 	ldw	r2,-16(fp)
  806900:	00000a06 	br	80692c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  806904:	080680c0 	call	80680c <alt_get_errno>
  806908:	1007883a 	mov	r3,r2
  80690c:	00800344 	movi	r2,13
  806910:	18800015 	stw	r2,0(r3)
  806914:	00000406 	br	806928 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  806918:	080680c0 	call	80680c <alt_get_errno>
  80691c:	1007883a 	mov	r3,r2
  806920:	00801444 	movi	r2,81
  806924:	18800015 	stw	r2,0(r3)
  }
  return -1;
  806928:	00bfffc4 	movi	r2,-1
}
  80692c:	e037883a 	mov	sp,fp
  806930:	dfc00117 	ldw	ra,4(sp)
  806934:	df000017 	ldw	fp,0(sp)
  806938:	dec00204 	addi	sp,sp,8
  80693c:	f800283a 	ret

00806940 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  806940:	defffd04 	addi	sp,sp,-12
  806944:	dfc00215 	stw	ra,8(sp)
  806948:	df000115 	stw	fp,4(sp)
  80694c:	df000104 	addi	fp,sp,4
  806950:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  806954:	d1600604 	addi	r5,gp,-32744
  806958:	e13fff17 	ldw	r4,-4(fp)
  80695c:	0808ddc0 	call	808ddc <alt_dev_llist_insert>
}
  806960:	e037883a 	mov	sp,fp
  806964:	dfc00117 	ldw	ra,4(sp)
  806968:	df000017 	ldw	fp,0(sp)
  80696c:	dec00204 	addi	sp,sp,8
  806970:	f800283a 	ret

00806974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  806974:	defffd04 	addi	sp,sp,-12
  806978:	dfc00215 	stw	ra,8(sp)
  80697c:	df000115 	stw	fp,4(sp)
  806980:	df000104 	addi	fp,sp,4
  806984:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  806988:	08095d80 	call	8095d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80698c:	00800044 	movi	r2,1
  806990:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  806994:	0001883a 	nop
  806998:	e037883a 	mov	sp,fp
  80699c:	dfc00117 	ldw	ra,4(sp)
  8069a0:	df000017 	ldw	fp,0(sp)
  8069a4:	dec00204 	addi	sp,sp,8
  8069a8:	f800283a 	ret

008069ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8069ac:	defffe04 	addi	sp,sp,-8
  8069b0:	dfc00115 	stw	ra,4(sp)
  8069b4:	df000015 	stw	fp,0(sp)
  8069b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  8069bc:	01c0fa04 	movi	r7,1000
  8069c0:	01800084 	movi	r6,2
  8069c4:	000b883a 	mov	r5,zero
  8069c8:	01004434 	movhi	r4,272
  8069cc:	21040804 	addi	r4,r4,4128
  8069d0:	08084040 	call	808404 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8069d4:	01800044 	movi	r6,1
  8069d8:	000b883a 	mov	r5,zero
  8069dc:	01002074 	movhi	r4,129
  8069e0:	212ae804 	addi	r4,r4,-21600
  8069e4:	0806bac0 	call	806bac <altera_avalon_jtag_uart_init>
  8069e8:	01002074 	movhi	r4,129
  8069ec:	212ade04 	addi	r4,r4,-21640
  8069f0:	08069400 	call	806940 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8069f4:	01002074 	movhi	r4,129
  8069f8:	212f0004 	addi	r4,r4,-17408
  8069fc:	08081f80 	call	8081f8 <altera_avalon_lcd_16207_init>
  806a00:	01002074 	movhi	r4,129
  806a04:	212ef604 	addi	r4,r4,-17448
  806a08:	08069400 	call	806940 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  806a0c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  806a10:	000d883a 	mov	r6,zero
  806a14:	000b883a 	mov	r5,zero
  806a18:	01002074 	movhi	r4,129
  806a1c:	212f4804 	addi	r4,r4,-17120
  806a20:	08085900 	call	808590 <altera_avalon_uart_init>
  806a24:	01002074 	movhi	r4,129
  806a28:	212f3e04 	addi	r4,r4,-17160
  806a2c:	08069400 	call	806940 <alt_dev_reg>
}
  806a30:	0001883a 	nop
  806a34:	e037883a 	mov	sp,fp
  806a38:	dfc00117 	ldw	ra,4(sp)
  806a3c:	df000017 	ldw	fp,0(sp)
  806a40:	dec00204 	addi	sp,sp,8
  806a44:	f800283a 	ret

00806a48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  806a48:	defffa04 	addi	sp,sp,-24
  806a4c:	dfc00515 	stw	ra,20(sp)
  806a50:	df000415 	stw	fp,16(sp)
  806a54:	df000404 	addi	fp,sp,16
  806a58:	e13ffd15 	stw	r4,-12(fp)
  806a5c:	e17ffe15 	stw	r5,-8(fp)
  806a60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  806a64:	e0bffd17 	ldw	r2,-12(fp)
  806a68:	10800017 	ldw	r2,0(r2)
  806a6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  806a70:	e0bffc17 	ldw	r2,-16(fp)
  806a74:	10c00a04 	addi	r3,r2,40
  806a78:	e0bffd17 	ldw	r2,-12(fp)
  806a7c:	10800217 	ldw	r2,8(r2)
  806a80:	100f883a 	mov	r7,r2
  806a84:	e1bfff17 	ldw	r6,-4(fp)
  806a88:	e17ffe17 	ldw	r5,-8(fp)
  806a8c:	1809883a 	mov	r4,r3
  806a90:	08070700 	call	807070 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  806a94:	e037883a 	mov	sp,fp
  806a98:	dfc00117 	ldw	ra,4(sp)
  806a9c:	df000017 	ldw	fp,0(sp)
  806aa0:	dec00204 	addi	sp,sp,8
  806aa4:	f800283a 	ret

00806aa8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806aa8:	defffa04 	addi	sp,sp,-24
  806aac:	dfc00515 	stw	ra,20(sp)
  806ab0:	df000415 	stw	fp,16(sp)
  806ab4:	df000404 	addi	fp,sp,16
  806ab8:	e13ffd15 	stw	r4,-12(fp)
  806abc:	e17ffe15 	stw	r5,-8(fp)
  806ac0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  806ac4:	e0bffd17 	ldw	r2,-12(fp)
  806ac8:	10800017 	ldw	r2,0(r2)
  806acc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  806ad0:	e0bffc17 	ldw	r2,-16(fp)
  806ad4:	10c00a04 	addi	r3,r2,40
  806ad8:	e0bffd17 	ldw	r2,-12(fp)
  806adc:	10800217 	ldw	r2,8(r2)
  806ae0:	100f883a 	mov	r7,r2
  806ae4:	e1bfff17 	ldw	r6,-4(fp)
  806ae8:	e17ffe17 	ldw	r5,-8(fp)
  806aec:	1809883a 	mov	r4,r3
  806af0:	080728c0 	call	80728c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  806af4:	e037883a 	mov	sp,fp
  806af8:	dfc00117 	ldw	ra,4(sp)
  806afc:	df000017 	ldw	fp,0(sp)
  806b00:	dec00204 	addi	sp,sp,8
  806b04:	f800283a 	ret

00806b08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  806b08:	defffc04 	addi	sp,sp,-16
  806b0c:	dfc00315 	stw	ra,12(sp)
  806b10:	df000215 	stw	fp,8(sp)
  806b14:	df000204 	addi	fp,sp,8
  806b18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  806b1c:	e0bfff17 	ldw	r2,-4(fp)
  806b20:	10800017 	ldw	r2,0(r2)
  806b24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  806b28:	e0bffe17 	ldw	r2,-8(fp)
  806b2c:	10c00a04 	addi	r3,r2,40
  806b30:	e0bfff17 	ldw	r2,-4(fp)
  806b34:	10800217 	ldw	r2,8(r2)
  806b38:	100b883a 	mov	r5,r2
  806b3c:	1809883a 	mov	r4,r3
  806b40:	0806f180 	call	806f18 <altera_avalon_jtag_uart_close>
}
  806b44:	e037883a 	mov	sp,fp
  806b48:	dfc00117 	ldw	ra,4(sp)
  806b4c:	df000017 	ldw	fp,0(sp)
  806b50:	dec00204 	addi	sp,sp,8
  806b54:	f800283a 	ret

00806b58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  806b58:	defffa04 	addi	sp,sp,-24
  806b5c:	dfc00515 	stw	ra,20(sp)
  806b60:	df000415 	stw	fp,16(sp)
  806b64:	df000404 	addi	fp,sp,16
  806b68:	e13ffd15 	stw	r4,-12(fp)
  806b6c:	e17ffe15 	stw	r5,-8(fp)
  806b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  806b74:	e0bffd17 	ldw	r2,-12(fp)
  806b78:	10800017 	ldw	r2,0(r2)
  806b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  806b80:	e0bffc17 	ldw	r2,-16(fp)
  806b84:	10800a04 	addi	r2,r2,40
  806b88:	e1bfff17 	ldw	r6,-4(fp)
  806b8c:	e17ffe17 	ldw	r5,-8(fp)
  806b90:	1009883a 	mov	r4,r2
  806b94:	0806f800 	call	806f80 <altera_avalon_jtag_uart_ioctl>
}
  806b98:	e037883a 	mov	sp,fp
  806b9c:	dfc00117 	ldw	ra,4(sp)
  806ba0:	df000017 	ldw	fp,0(sp)
  806ba4:	dec00204 	addi	sp,sp,8
  806ba8:	f800283a 	ret

00806bac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  806bac:	defffa04 	addi	sp,sp,-24
  806bb0:	dfc00515 	stw	ra,20(sp)
  806bb4:	df000415 	stw	fp,16(sp)
  806bb8:	df000404 	addi	fp,sp,16
  806bbc:	e13ffd15 	stw	r4,-12(fp)
  806bc0:	e17ffe15 	stw	r5,-8(fp)
  806bc4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  806bc8:	e0bffd17 	ldw	r2,-12(fp)
  806bcc:	00c00044 	movi	r3,1
  806bd0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  806bd4:	e0bffd17 	ldw	r2,-12(fp)
  806bd8:	10800017 	ldw	r2,0(r2)
  806bdc:	10800104 	addi	r2,r2,4
  806be0:	1007883a 	mov	r3,r2
  806be4:	e0bffd17 	ldw	r2,-12(fp)
  806be8:	10800817 	ldw	r2,32(r2)
  806bec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  806bf0:	e0bffe17 	ldw	r2,-8(fp)
  806bf4:	e0ffff17 	ldw	r3,-4(fp)
  806bf8:	d8000015 	stw	zero,0(sp)
  806bfc:	e1fffd17 	ldw	r7,-12(fp)
  806c00:	01802034 	movhi	r6,128
  806c04:	319b1b04 	addi	r6,r6,27756
  806c08:	180b883a 	mov	r5,r3
  806c0c:	1009883a 	mov	r4,r2
  806c10:	0808f740 	call	808f74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  806c14:	e0bffd17 	ldw	r2,-12(fp)
  806c18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  806c1c:	e0bffd17 	ldw	r2,-12(fp)
  806c20:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  806c24:	d0e78617 	ldw	r3,-25064(gp)
  806c28:	e1fffd17 	ldw	r7,-12(fp)
  806c2c:	01802034 	movhi	r6,128
  806c30:	319b9e04 	addi	r6,r6,28280
  806c34:	180b883a 	mov	r5,r3
  806c38:	1009883a 	mov	r4,r2
  806c3c:	0805d2c0 	call	805d2c <alt_alarm_start>
  806c40:	1000040e 	bge	r2,zero,806c54 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  806c44:	e0fffd17 	ldw	r3,-12(fp)
  806c48:	00a00034 	movhi	r2,32768
  806c4c:	10bfffc4 	addi	r2,r2,-1
  806c50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  806c54:	0001883a 	nop
  806c58:	e037883a 	mov	sp,fp
  806c5c:	dfc00117 	ldw	ra,4(sp)
  806c60:	df000017 	ldw	fp,0(sp)
  806c64:	dec00204 	addi	sp,sp,8
  806c68:	f800283a 	ret

00806c6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  806c6c:	defff804 	addi	sp,sp,-32
  806c70:	df000715 	stw	fp,28(sp)
  806c74:	df000704 	addi	fp,sp,28
  806c78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  806c7c:	e0bfff17 	ldw	r2,-4(fp)
  806c80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  806c84:	e0bffb17 	ldw	r2,-20(fp)
  806c88:	10800017 	ldw	r2,0(r2)
  806c8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  806c90:	e0bffc17 	ldw	r2,-16(fp)
  806c94:	10800104 	addi	r2,r2,4
  806c98:	10800037 	ldwio	r2,0(r2)
  806c9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  806ca0:	e0bffd17 	ldw	r2,-12(fp)
  806ca4:	1080c00c 	andi	r2,r2,768
  806ca8:	10006d26 	beq	r2,zero,806e60 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  806cac:	e0bffd17 	ldw	r2,-12(fp)
  806cb0:	1080400c 	andi	r2,r2,256
  806cb4:	10003526 	beq	r2,zero,806d8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  806cb8:	00800074 	movhi	r2,1
  806cbc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  806cc0:	e0bffb17 	ldw	r2,-20(fp)
  806cc4:	10800a17 	ldw	r2,40(r2)
  806cc8:	10800044 	addi	r2,r2,1
  806ccc:	1081ffcc 	andi	r2,r2,2047
  806cd0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  806cd4:	e0bffb17 	ldw	r2,-20(fp)
  806cd8:	10c00b17 	ldw	r3,44(r2)
  806cdc:	e0bffe17 	ldw	r2,-8(fp)
  806ce0:	18801526 	beq	r3,r2,806d38 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  806ce4:	e0bffc17 	ldw	r2,-16(fp)
  806ce8:	10800037 	ldwio	r2,0(r2)
  806cec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  806cf0:	e0bff917 	ldw	r2,-28(fp)
  806cf4:	10a0000c 	andi	r2,r2,32768
  806cf8:	10001126 	beq	r2,zero,806d40 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  806cfc:	e0bffb17 	ldw	r2,-20(fp)
  806d00:	10800a17 	ldw	r2,40(r2)
  806d04:	e0fff917 	ldw	r3,-28(fp)
  806d08:	1809883a 	mov	r4,r3
  806d0c:	e0fffb17 	ldw	r3,-20(fp)
  806d10:	1885883a 	add	r2,r3,r2
  806d14:	10800e04 	addi	r2,r2,56
  806d18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  806d1c:	e0bffb17 	ldw	r2,-20(fp)
  806d20:	10800a17 	ldw	r2,40(r2)
  806d24:	10800044 	addi	r2,r2,1
  806d28:	10c1ffcc 	andi	r3,r2,2047
  806d2c:	e0bffb17 	ldw	r2,-20(fp)
  806d30:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  806d34:	003fe206 	br	806cc0 <__alt_mem_onchip_mem+0xff786cc0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  806d38:	0001883a 	nop
  806d3c:	00000106 	br	806d44 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  806d40:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  806d44:	e0bff917 	ldw	r2,-28(fp)
  806d48:	10bfffec 	andhi	r2,r2,65535
  806d4c:	10000f26 	beq	r2,zero,806d8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  806d50:	e0bffb17 	ldw	r2,-20(fp)
  806d54:	10c00817 	ldw	r3,32(r2)
  806d58:	00bfff84 	movi	r2,-2
  806d5c:	1886703a 	and	r3,r3,r2
  806d60:	e0bffb17 	ldw	r2,-20(fp)
  806d64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  806d68:	e0bffc17 	ldw	r2,-16(fp)
  806d6c:	10800104 	addi	r2,r2,4
  806d70:	1007883a 	mov	r3,r2
  806d74:	e0bffb17 	ldw	r2,-20(fp)
  806d78:	10800817 	ldw	r2,32(r2)
  806d7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  806d80:	e0bffc17 	ldw	r2,-16(fp)
  806d84:	10800104 	addi	r2,r2,4
  806d88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  806d8c:	e0bffd17 	ldw	r2,-12(fp)
  806d90:	1080800c 	andi	r2,r2,512
  806d94:	103fbe26 	beq	r2,zero,806c90 <__alt_mem_onchip_mem+0xff786c90>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  806d98:	e0bffd17 	ldw	r2,-12(fp)
  806d9c:	1004d43a 	srli	r2,r2,16
  806da0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  806da4:	00001406 	br	806df8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  806da8:	e0bffc17 	ldw	r2,-16(fp)
  806dac:	e0fffb17 	ldw	r3,-20(fp)
  806db0:	18c00d17 	ldw	r3,52(r3)
  806db4:	e13ffb17 	ldw	r4,-20(fp)
  806db8:	20c7883a 	add	r3,r4,r3
  806dbc:	18c20e04 	addi	r3,r3,2104
  806dc0:	18c00003 	ldbu	r3,0(r3)
  806dc4:	18c03fcc 	andi	r3,r3,255
  806dc8:	18c0201c 	xori	r3,r3,128
  806dcc:	18ffe004 	addi	r3,r3,-128
  806dd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  806dd4:	e0bffb17 	ldw	r2,-20(fp)
  806dd8:	10800d17 	ldw	r2,52(r2)
  806ddc:	10800044 	addi	r2,r2,1
  806de0:	10c1ffcc 	andi	r3,r2,2047
  806de4:	e0bffb17 	ldw	r2,-20(fp)
  806de8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  806dec:	e0bffa17 	ldw	r2,-24(fp)
  806df0:	10bfffc4 	addi	r2,r2,-1
  806df4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  806df8:	e0bffa17 	ldw	r2,-24(fp)
  806dfc:	10000526 	beq	r2,zero,806e14 <altera_avalon_jtag_uart_irq+0x1a8>
  806e00:	e0bffb17 	ldw	r2,-20(fp)
  806e04:	10c00d17 	ldw	r3,52(r2)
  806e08:	e0bffb17 	ldw	r2,-20(fp)
  806e0c:	10800c17 	ldw	r2,48(r2)
  806e10:	18bfe51e 	bne	r3,r2,806da8 <__alt_mem_onchip_mem+0xff786da8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  806e14:	e0bffa17 	ldw	r2,-24(fp)
  806e18:	103f9d26 	beq	r2,zero,806c90 <__alt_mem_onchip_mem+0xff786c90>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  806e1c:	e0bffb17 	ldw	r2,-20(fp)
  806e20:	10c00817 	ldw	r3,32(r2)
  806e24:	00bfff44 	movi	r2,-3
  806e28:	1886703a 	and	r3,r3,r2
  806e2c:	e0bffb17 	ldw	r2,-20(fp)
  806e30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  806e34:	e0bffb17 	ldw	r2,-20(fp)
  806e38:	10800017 	ldw	r2,0(r2)
  806e3c:	10800104 	addi	r2,r2,4
  806e40:	1007883a 	mov	r3,r2
  806e44:	e0bffb17 	ldw	r2,-20(fp)
  806e48:	10800817 	ldw	r2,32(r2)
  806e4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  806e50:	e0bffc17 	ldw	r2,-16(fp)
  806e54:	10800104 	addi	r2,r2,4
  806e58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  806e5c:	003f8c06 	br	806c90 <__alt_mem_onchip_mem+0xff786c90>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  806e60:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  806e64:	0001883a 	nop
  806e68:	e037883a 	mov	sp,fp
  806e6c:	df000017 	ldw	fp,0(sp)
  806e70:	dec00104 	addi	sp,sp,4
  806e74:	f800283a 	ret

00806e78 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  806e78:	defff804 	addi	sp,sp,-32
  806e7c:	df000715 	stw	fp,28(sp)
  806e80:	df000704 	addi	fp,sp,28
  806e84:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  806e88:	e0bffb17 	ldw	r2,-20(fp)
  806e8c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  806e90:	e0bff917 	ldw	r2,-28(fp)
  806e94:	10800017 	ldw	r2,0(r2)
  806e98:	10800104 	addi	r2,r2,4
  806e9c:	10800037 	ldwio	r2,0(r2)
  806ea0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  806ea4:	e0bffa17 	ldw	r2,-24(fp)
  806ea8:	1081000c 	andi	r2,r2,1024
  806eac:	10000b26 	beq	r2,zero,806edc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  806eb0:	e0bff917 	ldw	r2,-28(fp)
  806eb4:	10800017 	ldw	r2,0(r2)
  806eb8:	10800104 	addi	r2,r2,4
  806ebc:	1007883a 	mov	r3,r2
  806ec0:	e0bff917 	ldw	r2,-28(fp)
  806ec4:	10800817 	ldw	r2,32(r2)
  806ec8:	10810014 	ori	r2,r2,1024
  806ecc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  806ed0:	e0bff917 	ldw	r2,-28(fp)
  806ed4:	10000915 	stw	zero,36(r2)
  806ed8:	00000a06 	br	806f04 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  806edc:	e0bff917 	ldw	r2,-28(fp)
  806ee0:	10c00917 	ldw	r3,36(r2)
  806ee4:	00a00034 	movhi	r2,32768
  806ee8:	10bfff04 	addi	r2,r2,-4
  806eec:	10c00536 	bltu	r2,r3,806f04 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  806ef0:	e0bff917 	ldw	r2,-28(fp)
  806ef4:	10800917 	ldw	r2,36(r2)
  806ef8:	10c00044 	addi	r3,r2,1
  806efc:	e0bff917 	ldw	r2,-28(fp)
  806f00:	10c00915 	stw	r3,36(r2)
  806f04:	d0a78617 	ldw	r2,-25064(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  806f08:	e037883a 	mov	sp,fp
  806f0c:	df000017 	ldw	fp,0(sp)
  806f10:	dec00104 	addi	sp,sp,4
  806f14:	f800283a 	ret

00806f18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  806f18:	defffd04 	addi	sp,sp,-12
  806f1c:	df000215 	stw	fp,8(sp)
  806f20:	df000204 	addi	fp,sp,8
  806f24:	e13ffe15 	stw	r4,-8(fp)
  806f28:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  806f2c:	00000506 	br	806f44 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  806f30:	e0bfff17 	ldw	r2,-4(fp)
  806f34:	1090000c 	andi	r2,r2,16384
  806f38:	10000226 	beq	r2,zero,806f44 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  806f3c:	00bffd44 	movi	r2,-11
  806f40:	00000b06 	br	806f70 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  806f44:	e0bffe17 	ldw	r2,-8(fp)
  806f48:	10c00d17 	ldw	r3,52(r2)
  806f4c:	e0bffe17 	ldw	r2,-8(fp)
  806f50:	10800c17 	ldw	r2,48(r2)
  806f54:	18800526 	beq	r3,r2,806f6c <altera_avalon_jtag_uart_close+0x54>
  806f58:	e0bffe17 	ldw	r2,-8(fp)
  806f5c:	10c00917 	ldw	r3,36(r2)
  806f60:	e0bffe17 	ldw	r2,-8(fp)
  806f64:	10800117 	ldw	r2,4(r2)
  806f68:	18bff136 	bltu	r3,r2,806f30 <__alt_mem_onchip_mem+0xff786f30>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  806f6c:	0005883a 	mov	r2,zero
}
  806f70:	e037883a 	mov	sp,fp
  806f74:	df000017 	ldw	fp,0(sp)
  806f78:	dec00104 	addi	sp,sp,4
  806f7c:	f800283a 	ret

00806f80 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  806f80:	defffa04 	addi	sp,sp,-24
  806f84:	df000515 	stw	fp,20(sp)
  806f88:	df000504 	addi	fp,sp,20
  806f8c:	e13ffd15 	stw	r4,-12(fp)
  806f90:	e17ffe15 	stw	r5,-8(fp)
  806f94:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  806f98:	00bff9c4 	movi	r2,-25
  806f9c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  806fa0:	e0bffe17 	ldw	r2,-8(fp)
  806fa4:	10da8060 	cmpeqi	r3,r2,27137
  806fa8:	1800031e 	bne	r3,zero,806fb8 <altera_avalon_jtag_uart_ioctl+0x38>
  806fac:	109a80a0 	cmpeqi	r2,r2,27138
  806fb0:	1000181e 	bne	r2,zero,807014 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  806fb4:	00002906 	br	80705c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  806fb8:	e0bffd17 	ldw	r2,-12(fp)
  806fbc:	10c00117 	ldw	r3,4(r2)
  806fc0:	00a00034 	movhi	r2,32768
  806fc4:	10bfffc4 	addi	r2,r2,-1
  806fc8:	18802126 	beq	r3,r2,807050 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  806fcc:	e0bfff17 	ldw	r2,-4(fp)
  806fd0:	10800017 	ldw	r2,0(r2)
  806fd4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  806fd8:	e0bffc17 	ldw	r2,-16(fp)
  806fdc:	10800090 	cmplti	r2,r2,2
  806fe0:	1000061e 	bne	r2,zero,806ffc <altera_avalon_jtag_uart_ioctl+0x7c>
  806fe4:	e0fffc17 	ldw	r3,-16(fp)
  806fe8:	00a00034 	movhi	r2,32768
  806fec:	10bfffc4 	addi	r2,r2,-1
  806ff0:	18800226 	beq	r3,r2,806ffc <altera_avalon_jtag_uart_ioctl+0x7c>
  806ff4:	e0bffc17 	ldw	r2,-16(fp)
  806ff8:	00000206 	br	807004 <altera_avalon_jtag_uart_ioctl+0x84>
  806ffc:	00a00034 	movhi	r2,32768
  807000:	10bfff84 	addi	r2,r2,-2
  807004:	e0fffd17 	ldw	r3,-12(fp)
  807008:	18800115 	stw	r2,4(r3)
      rc = 0;
  80700c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  807010:	00000f06 	br	807050 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  807014:	e0bffd17 	ldw	r2,-12(fp)
  807018:	10c00117 	ldw	r3,4(r2)
  80701c:	00a00034 	movhi	r2,32768
  807020:	10bfffc4 	addi	r2,r2,-1
  807024:	18800c26 	beq	r3,r2,807058 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  807028:	e0bffd17 	ldw	r2,-12(fp)
  80702c:	10c00917 	ldw	r3,36(r2)
  807030:	e0bffd17 	ldw	r2,-12(fp)
  807034:	10800117 	ldw	r2,4(r2)
  807038:	1885803a 	cmpltu	r2,r3,r2
  80703c:	10c03fcc 	andi	r3,r2,255
  807040:	e0bfff17 	ldw	r2,-4(fp)
  807044:	10c00015 	stw	r3,0(r2)
      rc = 0;
  807048:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80704c:	00000206 	br	807058 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  807050:	0001883a 	nop
  807054:	00000106 	br	80705c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  807058:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80705c:	e0bffb17 	ldw	r2,-20(fp)
}
  807060:	e037883a 	mov	sp,fp
  807064:	df000017 	ldw	fp,0(sp)
  807068:	dec00104 	addi	sp,sp,4
  80706c:	f800283a 	ret

00807070 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  807070:	defff304 	addi	sp,sp,-52
  807074:	dfc00c15 	stw	ra,48(sp)
  807078:	df000b15 	stw	fp,44(sp)
  80707c:	df000b04 	addi	fp,sp,44
  807080:	e13ffc15 	stw	r4,-16(fp)
  807084:	e17ffd15 	stw	r5,-12(fp)
  807088:	e1bffe15 	stw	r6,-8(fp)
  80708c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  807090:	e0bffd17 	ldw	r2,-12(fp)
  807094:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  807098:	00004706 	br	8071b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80709c:	e0bffc17 	ldw	r2,-16(fp)
  8070a0:	10800a17 	ldw	r2,40(r2)
  8070a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8070a8:	e0bffc17 	ldw	r2,-16(fp)
  8070ac:	10800b17 	ldw	r2,44(r2)
  8070b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8070b4:	e0fff717 	ldw	r3,-36(fp)
  8070b8:	e0bff817 	ldw	r2,-32(fp)
  8070bc:	18800536 	bltu	r3,r2,8070d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8070c0:	e0fff717 	ldw	r3,-36(fp)
  8070c4:	e0bff817 	ldw	r2,-32(fp)
  8070c8:	1885c83a 	sub	r2,r3,r2
  8070cc:	e0bff615 	stw	r2,-40(fp)
  8070d0:	00000406 	br	8070e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8070d4:	00c20004 	movi	r3,2048
  8070d8:	e0bff817 	ldw	r2,-32(fp)
  8070dc:	1885c83a 	sub	r2,r3,r2
  8070e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8070e4:	e0bff617 	ldw	r2,-40(fp)
  8070e8:	10001e26 	beq	r2,zero,807164 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8070ec:	e0fffe17 	ldw	r3,-8(fp)
  8070f0:	e0bff617 	ldw	r2,-40(fp)
  8070f4:	1880022e 	bgeu	r3,r2,807100 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8070f8:	e0bffe17 	ldw	r2,-8(fp)
  8070fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  807100:	e0bffc17 	ldw	r2,-16(fp)
  807104:	10c00e04 	addi	r3,r2,56
  807108:	e0bff817 	ldw	r2,-32(fp)
  80710c:	1885883a 	add	r2,r3,r2
  807110:	e1bff617 	ldw	r6,-40(fp)
  807114:	100b883a 	mov	r5,r2
  807118:	e13ff517 	ldw	r4,-44(fp)
  80711c:	08043a40 	call	8043a4 <memcpy>
      ptr   += n;
  807120:	e0fff517 	ldw	r3,-44(fp)
  807124:	e0bff617 	ldw	r2,-40(fp)
  807128:	1885883a 	add	r2,r3,r2
  80712c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  807130:	e0fffe17 	ldw	r3,-8(fp)
  807134:	e0bff617 	ldw	r2,-40(fp)
  807138:	1885c83a 	sub	r2,r3,r2
  80713c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807140:	e0fff817 	ldw	r3,-32(fp)
  807144:	e0bff617 	ldw	r2,-40(fp)
  807148:	1885883a 	add	r2,r3,r2
  80714c:	10c1ffcc 	andi	r3,r2,2047
  807150:	e0bffc17 	ldw	r2,-16(fp)
  807154:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  807158:	e0bffe17 	ldw	r2,-8(fp)
  80715c:	00bfcf16 	blt	zero,r2,80709c <__alt_mem_onchip_mem+0xff78709c>
  807160:	00000106 	br	807168 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  807164:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  807168:	e0fff517 	ldw	r3,-44(fp)
  80716c:	e0bffd17 	ldw	r2,-12(fp)
  807170:	1880141e 	bne	r3,r2,8071c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  807174:	e0bfff17 	ldw	r2,-4(fp)
  807178:	1090000c 	andi	r2,r2,16384
  80717c:	1000131e 	bne	r2,zero,8071cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  807180:	0001883a 	nop
  807184:	e0bffc17 	ldw	r2,-16(fp)
  807188:	10c00a17 	ldw	r3,40(r2)
  80718c:	e0bff717 	ldw	r2,-36(fp)
  807190:	1880051e 	bne	r3,r2,8071a8 <altera_avalon_jtag_uart_read+0x138>
  807194:	e0bffc17 	ldw	r2,-16(fp)
  807198:	10c00917 	ldw	r3,36(r2)
  80719c:	e0bffc17 	ldw	r2,-16(fp)
  8071a0:	10800117 	ldw	r2,4(r2)
  8071a4:	18bff736 	bltu	r3,r2,807184 <__alt_mem_onchip_mem+0xff787184>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8071a8:	e0bffc17 	ldw	r2,-16(fp)
  8071ac:	10c00a17 	ldw	r3,40(r2)
  8071b0:	e0bff717 	ldw	r2,-36(fp)
  8071b4:	18800726 	beq	r3,r2,8071d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8071b8:	e0bffe17 	ldw	r2,-8(fp)
  8071bc:	00bfb716 	blt	zero,r2,80709c <__alt_mem_onchip_mem+0xff78709c>
  8071c0:	00000506 	br	8071d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8071c4:	0001883a 	nop
  8071c8:	00000306 	br	8071d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8071cc:	0001883a 	nop
  8071d0:	00000106 	br	8071d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8071d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8071d8:	e0fff517 	ldw	r3,-44(fp)
  8071dc:	e0bffd17 	ldw	r2,-12(fp)
  8071e0:	18801826 	beq	r3,r2,807244 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8071e4:	0005303a 	rdctl	r2,status
  8071e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8071ec:	e0fffb17 	ldw	r3,-20(fp)
  8071f0:	00bfff84 	movi	r2,-2
  8071f4:	1884703a 	and	r2,r3,r2
  8071f8:	1001703a 	wrctl	status,r2
  
  return context;
  8071fc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  807200:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  807204:	e0bffc17 	ldw	r2,-16(fp)
  807208:	10800817 	ldw	r2,32(r2)
  80720c:	10c00054 	ori	r3,r2,1
  807210:	e0bffc17 	ldw	r2,-16(fp)
  807214:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  807218:	e0bffc17 	ldw	r2,-16(fp)
  80721c:	10800017 	ldw	r2,0(r2)
  807220:	10800104 	addi	r2,r2,4
  807224:	1007883a 	mov	r3,r2
  807228:	e0bffc17 	ldw	r2,-16(fp)
  80722c:	10800817 	ldw	r2,32(r2)
  807230:	18800035 	stwio	r2,0(r3)
  807234:	e0bffa17 	ldw	r2,-24(fp)
  807238:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80723c:	e0bff917 	ldw	r2,-28(fp)
  807240:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  807244:	e0fff517 	ldw	r3,-44(fp)
  807248:	e0bffd17 	ldw	r2,-12(fp)
  80724c:	18800426 	beq	r3,r2,807260 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  807250:	e0fff517 	ldw	r3,-44(fp)
  807254:	e0bffd17 	ldw	r2,-12(fp)
  807258:	1885c83a 	sub	r2,r3,r2
  80725c:	00000606 	br	807278 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  807260:	e0bfff17 	ldw	r2,-4(fp)
  807264:	1090000c 	andi	r2,r2,16384
  807268:	10000226 	beq	r2,zero,807274 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80726c:	00bffd44 	movi	r2,-11
  807270:	00000106 	br	807278 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  807274:	00bffec4 	movi	r2,-5
}
  807278:	e037883a 	mov	sp,fp
  80727c:	dfc00117 	ldw	ra,4(sp)
  807280:	df000017 	ldw	fp,0(sp)
  807284:	dec00204 	addi	sp,sp,8
  807288:	f800283a 	ret

0080728c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80728c:	defff304 	addi	sp,sp,-52
  807290:	dfc00c15 	stw	ra,48(sp)
  807294:	df000b15 	stw	fp,44(sp)
  807298:	df000b04 	addi	fp,sp,44
  80729c:	e13ffc15 	stw	r4,-16(fp)
  8072a0:	e17ffd15 	stw	r5,-12(fp)
  8072a4:	e1bffe15 	stw	r6,-8(fp)
  8072a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8072ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8072b0:	e0bffd17 	ldw	r2,-12(fp)
  8072b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8072b8:	00003706 	br	807398 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8072bc:	e0bffc17 	ldw	r2,-16(fp)
  8072c0:	10800c17 	ldw	r2,48(r2)
  8072c4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8072c8:	e0bffc17 	ldw	r2,-16(fp)
  8072cc:	10800d17 	ldw	r2,52(r2)
  8072d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8072d4:	e0fff917 	ldw	r3,-28(fp)
  8072d8:	e0bff517 	ldw	r2,-44(fp)
  8072dc:	1880062e 	bgeu	r3,r2,8072f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8072e0:	e0fff517 	ldw	r3,-44(fp)
  8072e4:	e0bff917 	ldw	r2,-28(fp)
  8072e8:	1885c83a 	sub	r2,r3,r2
  8072ec:	10bfffc4 	addi	r2,r2,-1
  8072f0:	e0bff615 	stw	r2,-40(fp)
  8072f4:	00000b06 	br	807324 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8072f8:	e0bff517 	ldw	r2,-44(fp)
  8072fc:	10000526 	beq	r2,zero,807314 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  807300:	00c20004 	movi	r3,2048
  807304:	e0bff917 	ldw	r2,-28(fp)
  807308:	1885c83a 	sub	r2,r3,r2
  80730c:	e0bff615 	stw	r2,-40(fp)
  807310:	00000406 	br	807324 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  807314:	00c1ffc4 	movi	r3,2047
  807318:	e0bff917 	ldw	r2,-28(fp)
  80731c:	1885c83a 	sub	r2,r3,r2
  807320:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  807324:	e0bff617 	ldw	r2,-40(fp)
  807328:	10001e26 	beq	r2,zero,8073a4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80732c:	e0fffe17 	ldw	r3,-8(fp)
  807330:	e0bff617 	ldw	r2,-40(fp)
  807334:	1880022e 	bgeu	r3,r2,807340 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  807338:	e0bffe17 	ldw	r2,-8(fp)
  80733c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  807340:	e0bffc17 	ldw	r2,-16(fp)
  807344:	10c20e04 	addi	r3,r2,2104
  807348:	e0bff917 	ldw	r2,-28(fp)
  80734c:	1885883a 	add	r2,r3,r2
  807350:	e1bff617 	ldw	r6,-40(fp)
  807354:	e17ffd17 	ldw	r5,-12(fp)
  807358:	1009883a 	mov	r4,r2
  80735c:	08043a40 	call	8043a4 <memcpy>
      ptr   += n;
  807360:	e0fffd17 	ldw	r3,-12(fp)
  807364:	e0bff617 	ldw	r2,-40(fp)
  807368:	1885883a 	add	r2,r3,r2
  80736c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  807370:	e0fffe17 	ldw	r3,-8(fp)
  807374:	e0bff617 	ldw	r2,-40(fp)
  807378:	1885c83a 	sub	r2,r3,r2
  80737c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  807380:	e0fff917 	ldw	r3,-28(fp)
  807384:	e0bff617 	ldw	r2,-40(fp)
  807388:	1885883a 	add	r2,r3,r2
  80738c:	10c1ffcc 	andi	r3,r2,2047
  807390:	e0bffc17 	ldw	r2,-16(fp)
  807394:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  807398:	e0bffe17 	ldw	r2,-8(fp)
  80739c:	00bfc716 	blt	zero,r2,8072bc <__alt_mem_onchip_mem+0xff7872bc>
  8073a0:	00000106 	br	8073a8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8073a4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8073a8:	0005303a 	rdctl	r2,status
  8073ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8073b0:	e0fffb17 	ldw	r3,-20(fp)
  8073b4:	00bfff84 	movi	r2,-2
  8073b8:	1884703a 	and	r2,r3,r2
  8073bc:	1001703a 	wrctl	status,r2
  
  return context;
  8073c0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8073c4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8073c8:	e0bffc17 	ldw	r2,-16(fp)
  8073cc:	10800817 	ldw	r2,32(r2)
  8073d0:	10c00094 	ori	r3,r2,2
  8073d4:	e0bffc17 	ldw	r2,-16(fp)
  8073d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8073dc:	e0bffc17 	ldw	r2,-16(fp)
  8073e0:	10800017 	ldw	r2,0(r2)
  8073e4:	10800104 	addi	r2,r2,4
  8073e8:	1007883a 	mov	r3,r2
  8073ec:	e0bffc17 	ldw	r2,-16(fp)
  8073f0:	10800817 	ldw	r2,32(r2)
  8073f4:	18800035 	stwio	r2,0(r3)
  8073f8:	e0bffa17 	ldw	r2,-24(fp)
  8073fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807400:	e0bff817 	ldw	r2,-32(fp)
  807404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  807408:	e0bffe17 	ldw	r2,-8(fp)
  80740c:	0080100e 	bge	zero,r2,807450 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  807410:	e0bfff17 	ldw	r2,-4(fp)
  807414:	1090000c 	andi	r2,r2,16384
  807418:	1000101e 	bne	r2,zero,80745c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80741c:	0001883a 	nop
  807420:	e0bffc17 	ldw	r2,-16(fp)
  807424:	10c00d17 	ldw	r3,52(r2)
  807428:	e0bff517 	ldw	r2,-44(fp)
  80742c:	1880051e 	bne	r3,r2,807444 <altera_avalon_jtag_uart_write+0x1b8>
  807430:	e0bffc17 	ldw	r2,-16(fp)
  807434:	10c00917 	ldw	r3,36(r2)
  807438:	e0bffc17 	ldw	r2,-16(fp)
  80743c:	10800117 	ldw	r2,4(r2)
  807440:	18bff736 	bltu	r3,r2,807420 <__alt_mem_onchip_mem+0xff787420>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  807444:	e0bffc17 	ldw	r2,-16(fp)
  807448:	10800917 	ldw	r2,36(r2)
  80744c:	1000051e 	bne	r2,zero,807464 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  807450:	e0bffe17 	ldw	r2,-8(fp)
  807454:	00bfd016 	blt	zero,r2,807398 <__alt_mem_onchip_mem+0xff787398>
  807458:	00000306 	br	807468 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80745c:	0001883a 	nop
  807460:	00000106 	br	807468 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  807464:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  807468:	e0fffd17 	ldw	r3,-12(fp)
  80746c:	e0bff717 	ldw	r2,-36(fp)
  807470:	18800426 	beq	r3,r2,807484 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  807474:	e0fffd17 	ldw	r3,-12(fp)
  807478:	e0bff717 	ldw	r2,-36(fp)
  80747c:	1885c83a 	sub	r2,r3,r2
  807480:	00000606 	br	80749c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  807484:	e0bfff17 	ldw	r2,-4(fp)
  807488:	1090000c 	andi	r2,r2,16384
  80748c:	10000226 	beq	r2,zero,807498 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  807490:	00bffd44 	movi	r2,-11
  807494:	00000106 	br	80749c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  807498:	00bffec4 	movi	r2,-5
}
  80749c:	e037883a 	mov	sp,fp
  8074a0:	dfc00117 	ldw	ra,4(sp)
  8074a4:	df000017 	ldw	fp,0(sp)
  8074a8:	dec00204 	addi	sp,sp,8
  8074ac:	f800283a 	ret

008074b0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8074b0:	defffa04 	addi	sp,sp,-24
  8074b4:	dfc00515 	stw	ra,20(sp)
  8074b8:	df000415 	stw	fp,16(sp)
  8074bc:	df000404 	addi	fp,sp,16
  8074c0:	e13ffe15 	stw	r4,-8(fp)
  8074c4:	2805883a 	mov	r2,r5
  8074c8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8074cc:	e0bffe17 	ldw	r2,-8(fp)
  8074d0:	10800017 	ldw	r2,0(r2)
  8074d4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8074d8:	008003f4 	movhi	r2,15
  8074dc:	10909004 	addi	r2,r2,16960
  8074e0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8074e4:	e0bffe17 	ldw	r2,-8(fp)
  8074e8:	10800803 	ldbu	r2,32(r2)
  8074ec:	10803fcc 	andi	r2,r2,255
  8074f0:	1080201c 	xori	r2,r2,128
  8074f4:	10bfe004 	addi	r2,r2,-128
  8074f8:	1000151e 	bne	r2,zero,807550 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8074fc:	00000906 	br	807524 <lcd_write_command+0x74>
    if (--i == 0)
  807500:	e0bffc17 	ldw	r2,-16(fp)
  807504:	10bfffc4 	addi	r2,r2,-1
  807508:	e0bffc15 	stw	r2,-16(fp)
  80750c:	e0bffc17 	ldw	r2,-16(fp)
  807510:	1000041e 	bne	r2,zero,807524 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  807514:	e0bffe17 	ldw	r2,-8(fp)
  807518:	00c00044 	movi	r3,1
  80751c:	10c00805 	stb	r3,32(r2)
      return;
  807520:	00000c06 	br	807554 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  807524:	e0bffd17 	ldw	r2,-12(fp)
  807528:	10800104 	addi	r2,r2,4
  80752c:	10800037 	ldwio	r2,0(r2)
  807530:	1080200c 	andi	r2,r2,128
  807534:	103ff21e 	bne	r2,zero,807500 <__alt_mem_onchip_mem+0xff787500>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  807538:	01001904 	movi	r4,100
  80753c:	08095a80 	call	8095a8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  807540:	e0bffd17 	ldw	r2,-12(fp)
  807544:	e0ffff03 	ldbu	r3,-4(fp)
  807548:	10c00035 	stwio	r3,0(r2)
  80754c:	00000106 	br	807554 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  807550:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  807554:	e037883a 	mov	sp,fp
  807558:	dfc00117 	ldw	ra,4(sp)
  80755c:	df000017 	ldw	fp,0(sp)
  807560:	dec00204 	addi	sp,sp,8
  807564:	f800283a 	ret

00807568 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  807568:	defffa04 	addi	sp,sp,-24
  80756c:	dfc00515 	stw	ra,20(sp)
  807570:	df000415 	stw	fp,16(sp)
  807574:	df000404 	addi	fp,sp,16
  807578:	e13ffe15 	stw	r4,-8(fp)
  80757c:	2805883a 	mov	r2,r5
  807580:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  807584:	e0bffe17 	ldw	r2,-8(fp)
  807588:	10800017 	ldw	r2,0(r2)
  80758c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  807590:	008003f4 	movhi	r2,15
  807594:	10909004 	addi	r2,r2,16960
  807598:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80759c:	e0bffe17 	ldw	r2,-8(fp)
  8075a0:	10800803 	ldbu	r2,32(r2)
  8075a4:	10803fcc 	andi	r2,r2,255
  8075a8:	1080201c 	xori	r2,r2,128
  8075ac:	10bfe004 	addi	r2,r2,-128
  8075b0:	10001d1e 	bne	r2,zero,807628 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8075b4:	00000906 	br	8075dc <lcd_write_data+0x74>
    if (--i == 0)
  8075b8:	e0bffc17 	ldw	r2,-16(fp)
  8075bc:	10bfffc4 	addi	r2,r2,-1
  8075c0:	e0bffc15 	stw	r2,-16(fp)
  8075c4:	e0bffc17 	ldw	r2,-16(fp)
  8075c8:	1000041e 	bne	r2,zero,8075dc <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8075cc:	e0bffe17 	ldw	r2,-8(fp)
  8075d0:	00c00044 	movi	r3,1
  8075d4:	10c00805 	stb	r3,32(r2)
      return;
  8075d8:	00001406 	br	80762c <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8075dc:	e0bffd17 	ldw	r2,-12(fp)
  8075e0:	10800104 	addi	r2,r2,4
  8075e4:	10800037 	ldwio	r2,0(r2)
  8075e8:	1080200c 	andi	r2,r2,128
  8075ec:	103ff21e 	bne	r2,zero,8075b8 <__alt_mem_onchip_mem+0xff7875b8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8075f0:	01001904 	movi	r4,100
  8075f4:	08095a80 	call	8095a8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8075f8:	e0bffd17 	ldw	r2,-12(fp)
  8075fc:	10800204 	addi	r2,r2,8
  807600:	1007883a 	mov	r3,r2
  807604:	e0bfff03 	ldbu	r2,-4(fp)
  807608:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80760c:	e0bffe17 	ldw	r2,-8(fp)
  807610:	108008c3 	ldbu	r2,35(r2)
  807614:	10800044 	addi	r2,r2,1
  807618:	1007883a 	mov	r3,r2
  80761c:	e0bffe17 	ldw	r2,-8(fp)
  807620:	10c008c5 	stb	r3,35(r2)
  807624:	00000106 	br	80762c <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  807628:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80762c:	e037883a 	mov	sp,fp
  807630:	dfc00117 	ldw	ra,4(sp)
  807634:	df000017 	ldw	fp,0(sp)
  807638:	dec00204 	addi	sp,sp,8
  80763c:	f800283a 	ret

00807640 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  807640:	defffc04 	addi	sp,sp,-16
  807644:	dfc00315 	stw	ra,12(sp)
  807648:	df000215 	stw	fp,8(sp)
  80764c:	df000204 	addi	fp,sp,8
  807650:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  807654:	01400044 	movi	r5,1
  807658:	e13fff17 	ldw	r4,-4(fp)
  80765c:	08074b00 	call	8074b0 <lcd_write_command>

  sp->x = 0;
  807660:	e0bfff17 	ldw	r2,-4(fp)
  807664:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  807668:	e0bfff17 	ldw	r2,-4(fp)
  80766c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  807670:	e0bfff17 	ldw	r2,-4(fp)
  807674:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  807678:	e03ffe15 	stw	zero,-8(fp)
  80767c:	00001b06 	br	8076ec <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  807680:	e0bffe17 	ldw	r2,-8(fp)
  807684:	108018e4 	muli	r2,r2,99
  807688:	10801004 	addi	r2,r2,64
  80768c:	e0ffff17 	ldw	r3,-4(fp)
  807690:	1885883a 	add	r2,r3,r2
  807694:	01801444 	movi	r6,81
  807698:	01400804 	movi	r5,32
  80769c:	1009883a 	mov	r4,r2
  8076a0:	08046480 	call	804648 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8076a4:	e0bffe17 	ldw	r2,-8(fp)
  8076a8:	108018e4 	muli	r2,r2,99
  8076ac:	10800c04 	addi	r2,r2,48
  8076b0:	e0ffff17 	ldw	r3,-4(fp)
  8076b4:	1885883a 	add	r2,r3,r2
  8076b8:	01800404 	movi	r6,16
  8076bc:	01400804 	movi	r5,32
  8076c0:	1009883a 	mov	r4,r2
  8076c4:	08046480 	call	804648 <memset>
    sp->line[y].width = 0;
  8076c8:	e0ffff17 	ldw	r3,-4(fp)
  8076cc:	e0bffe17 	ldw	r2,-8(fp)
  8076d0:	108018e4 	muli	r2,r2,99
  8076d4:	1885883a 	add	r2,r3,r2
  8076d8:	10802444 	addi	r2,r2,145
  8076dc:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8076e0:	e0bffe17 	ldw	r2,-8(fp)
  8076e4:	10800044 	addi	r2,r2,1
  8076e8:	e0bffe15 	stw	r2,-8(fp)
  8076ec:	e0bffe17 	ldw	r2,-8(fp)
  8076f0:	10800090 	cmplti	r2,r2,2
  8076f4:	103fe21e 	bne	r2,zero,807680 <__alt_mem_onchip_mem+0xff787680>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8076f8:	0001883a 	nop
  8076fc:	e037883a 	mov	sp,fp
  807700:	dfc00117 	ldw	ra,4(sp)
  807704:	df000017 	ldw	fp,0(sp)
  807708:	dec00204 	addi	sp,sp,8
  80770c:	f800283a 	ret

00807710 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  807710:	defff704 	addi	sp,sp,-36
  807714:	dfc00815 	stw	ra,32(sp)
  807718:	df000715 	stw	fp,28(sp)
  80771c:	df000704 	addi	fp,sp,28
  807720:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  807724:	e0bfff17 	ldw	r2,-4(fp)
  807728:	10800943 	ldbu	r2,37(r2)
  80772c:	10803fcc 	andi	r2,r2,255
  807730:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  807734:	e03ff915 	stw	zero,-28(fp)
  807738:	00006706 	br	8078d8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80773c:	e0ffff17 	ldw	r3,-4(fp)
  807740:	e0bff917 	ldw	r2,-28(fp)
  807744:	108018e4 	muli	r2,r2,99
  807748:	1885883a 	add	r2,r3,r2
  80774c:	10802444 	addi	r2,r2,145
  807750:	10800003 	ldbu	r2,0(r2)
  807754:	10803fcc 	andi	r2,r2,255
  807758:	1080201c 	xori	r2,r2,128
  80775c:	10bfe004 	addi	r2,r2,-128
  807760:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  807764:	e0ffff17 	ldw	r3,-4(fp)
  807768:	e0bff917 	ldw	r2,-28(fp)
  80776c:	108018e4 	muli	r2,r2,99
  807770:	1885883a 	add	r2,r3,r2
  807774:	10802484 	addi	r2,r2,146
  807778:	10800003 	ldbu	r2,0(r2)
  80777c:	10c03fcc 	andi	r3,r2,255
  807780:	e0bffc17 	ldw	r2,-16(fp)
  807784:	1885383a 	mul	r2,r3,r2
  807788:	1005d23a 	srai	r2,r2,8
  80778c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  807790:	e0fffb17 	ldw	r3,-20(fp)
  807794:	e0bffd17 	ldw	r2,-12(fp)
  807798:	18800116 	blt	r3,r2,8077a0 <lcd_repaint_screen+0x90>
      offset = 0;
  80779c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8077a0:	e03ffa15 	stw	zero,-24(fp)
  8077a4:	00004606 	br	8078c0 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8077a8:	e0fffa17 	ldw	r3,-24(fp)
  8077ac:	e0bffb17 	ldw	r2,-20(fp)
  8077b0:	1885883a 	add	r2,r3,r2
  8077b4:	e17ffd17 	ldw	r5,-12(fp)
  8077b8:	1009883a 	mov	r4,r2
  8077bc:	0805bfc0 	call	805bfc <__modsi3>
  8077c0:	1009883a 	mov	r4,r2
  8077c4:	e0ffff17 	ldw	r3,-4(fp)
  8077c8:	e0bff917 	ldw	r2,-28(fp)
  8077cc:	108018e4 	muli	r2,r2,99
  8077d0:	1885883a 	add	r2,r3,r2
  8077d4:	1105883a 	add	r2,r2,r4
  8077d8:	10801004 	addi	r2,r2,64
  8077dc:	10800003 	ldbu	r2,0(r2)
  8077e0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8077e4:	e0ffff17 	ldw	r3,-4(fp)
  8077e8:	e0bff917 	ldw	r2,-28(fp)
  8077ec:	108018e4 	muli	r2,r2,99
  8077f0:	1887883a 	add	r3,r3,r2
  8077f4:	e0bffa17 	ldw	r2,-24(fp)
  8077f8:	1885883a 	add	r2,r3,r2
  8077fc:	10800c04 	addi	r2,r2,48
  807800:	10800003 	ldbu	r2,0(r2)
  807804:	10c03fcc 	andi	r3,r2,255
  807808:	18c0201c 	xori	r3,r3,128
  80780c:	18ffe004 	addi	r3,r3,-128
  807810:	e0bffe07 	ldb	r2,-8(fp)
  807814:	18802726 	beq	r3,r2,8078b4 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  807818:	e0fff917 	ldw	r3,-28(fp)
  80781c:	d0a00d04 	addi	r2,gp,-32716
  807820:	1885883a 	add	r2,r3,r2
  807824:	10800003 	ldbu	r2,0(r2)
  807828:	1007883a 	mov	r3,r2
  80782c:	e0bffa17 	ldw	r2,-24(fp)
  807830:	1885883a 	add	r2,r3,r2
  807834:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  807838:	e0fffe43 	ldbu	r3,-7(fp)
  80783c:	e0bfff17 	ldw	r2,-4(fp)
  807840:	108008c3 	ldbu	r2,35(r2)
  807844:	10803fcc 	andi	r2,r2,255
  807848:	1080201c 	xori	r2,r2,128
  80784c:	10bfe004 	addi	r2,r2,-128
  807850:	18800a26 	beq	r3,r2,80787c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  807854:	e0fffe43 	ldbu	r3,-7(fp)
  807858:	00bfe004 	movi	r2,-128
  80785c:	1884b03a 	or	r2,r3,r2
  807860:	10803fcc 	andi	r2,r2,255
  807864:	100b883a 	mov	r5,r2
  807868:	e13fff17 	ldw	r4,-4(fp)
  80786c:	08074b00 	call	8074b0 <lcd_write_command>
          sp->address = address;
  807870:	e0fffe43 	ldbu	r3,-7(fp)
  807874:	e0bfff17 	ldw	r2,-4(fp)
  807878:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80787c:	e0bffe03 	ldbu	r2,-8(fp)
  807880:	10803fcc 	andi	r2,r2,255
  807884:	100b883a 	mov	r5,r2
  807888:	e13fff17 	ldw	r4,-4(fp)
  80788c:	08075680 	call	807568 <lcd_write_data>
        sp->line[y].visible[x] = c;
  807890:	e0ffff17 	ldw	r3,-4(fp)
  807894:	e0bff917 	ldw	r2,-28(fp)
  807898:	108018e4 	muli	r2,r2,99
  80789c:	1887883a 	add	r3,r3,r2
  8078a0:	e0bffa17 	ldw	r2,-24(fp)
  8078a4:	1885883a 	add	r2,r3,r2
  8078a8:	10800c04 	addi	r2,r2,48
  8078ac:	e0fffe03 	ldbu	r3,-8(fp)
  8078b0:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8078b4:	e0bffa17 	ldw	r2,-24(fp)
  8078b8:	10800044 	addi	r2,r2,1
  8078bc:	e0bffa15 	stw	r2,-24(fp)
  8078c0:	e0bffa17 	ldw	r2,-24(fp)
  8078c4:	10800410 	cmplti	r2,r2,16
  8078c8:	103fb71e 	bne	r2,zero,8077a8 <__alt_mem_onchip_mem+0xff7877a8>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8078cc:	e0bff917 	ldw	r2,-28(fp)
  8078d0:	10800044 	addi	r2,r2,1
  8078d4:	e0bff915 	stw	r2,-28(fp)
  8078d8:	e0bff917 	ldw	r2,-28(fp)
  8078dc:	10800090 	cmplti	r2,r2,2
  8078e0:	103f961e 	bne	r2,zero,80773c <__alt_mem_onchip_mem+0xff78773c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8078e4:	0001883a 	nop
  8078e8:	e037883a 	mov	sp,fp
  8078ec:	dfc00117 	ldw	ra,4(sp)
  8078f0:	df000017 	ldw	fp,0(sp)
  8078f4:	dec00204 	addi	sp,sp,8
  8078f8:	f800283a 	ret

008078fc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8078fc:	defffc04 	addi	sp,sp,-16
  807900:	dfc00315 	stw	ra,12(sp)
  807904:	df000215 	stw	fp,8(sp)
  807908:	df000204 	addi	fp,sp,8
  80790c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  807910:	e03ffe15 	stw	zero,-8(fp)
  807914:	00001d06 	br	80798c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  807918:	e0bffe17 	ldw	r2,-8(fp)
  80791c:	00800f16 	blt	zero,r2,80795c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  807920:	e0bffe17 	ldw	r2,-8(fp)
  807924:	108018e4 	muli	r2,r2,99
  807928:	10801004 	addi	r2,r2,64
  80792c:	e0ffff17 	ldw	r3,-4(fp)
  807930:	1889883a 	add	r4,r3,r2
  807934:	e0bffe17 	ldw	r2,-8(fp)
  807938:	10800044 	addi	r2,r2,1
  80793c:	108018e4 	muli	r2,r2,99
  807940:	10801004 	addi	r2,r2,64
  807944:	e0ffff17 	ldw	r3,-4(fp)
  807948:	1885883a 	add	r2,r3,r2
  80794c:	01801404 	movi	r6,80
  807950:	100b883a 	mov	r5,r2
  807954:	08043a40 	call	8043a4 <memcpy>
  807958:	00000906 	br	807980 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80795c:	e0bffe17 	ldw	r2,-8(fp)
  807960:	108018e4 	muli	r2,r2,99
  807964:	10801004 	addi	r2,r2,64
  807968:	e0ffff17 	ldw	r3,-4(fp)
  80796c:	1885883a 	add	r2,r3,r2
  807970:	01801404 	movi	r6,80
  807974:	01400804 	movi	r5,32
  807978:	1009883a 	mov	r4,r2
  80797c:	08046480 	call	804648 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  807980:	e0bffe17 	ldw	r2,-8(fp)
  807984:	10800044 	addi	r2,r2,1
  807988:	e0bffe15 	stw	r2,-8(fp)
  80798c:	e0bffe17 	ldw	r2,-8(fp)
  807990:	10800090 	cmplti	r2,r2,2
  807994:	103fe01e 	bne	r2,zero,807918 <__alt_mem_onchip_mem+0xff787918>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  807998:	e0bfff17 	ldw	r2,-4(fp)
  80799c:	10800883 	ldbu	r2,34(r2)
  8079a0:	10bfffc4 	addi	r2,r2,-1
  8079a4:	1007883a 	mov	r3,r2
  8079a8:	e0bfff17 	ldw	r2,-4(fp)
  8079ac:	10c00885 	stb	r3,34(r2)
}
  8079b0:	0001883a 	nop
  8079b4:	e037883a 	mov	sp,fp
  8079b8:	dfc00117 	ldw	ra,4(sp)
  8079bc:	df000017 	ldw	fp,0(sp)
  8079c0:	dec00204 	addi	sp,sp,8
  8079c4:	f800283a 	ret

008079c8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8079c8:	defff904 	addi	sp,sp,-28
  8079cc:	dfc00615 	stw	ra,24(sp)
  8079d0:	df000515 	stw	fp,20(sp)
  8079d4:	df000504 	addi	fp,sp,20
  8079d8:	e13ffe15 	stw	r4,-8(fp)
  8079dc:	2805883a 	mov	r2,r5
  8079e0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8079e4:	e03ffb15 	stw	zero,-20(fp)
  8079e8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8079ec:	e0bffe17 	ldw	r2,-8(fp)
  8079f0:	10800a03 	ldbu	r2,40(r2)
  8079f4:	10803fcc 	andi	r2,r2,255
  8079f8:	1080201c 	xori	r2,r2,128
  8079fc:	10bfe004 	addi	r2,r2,-128
  807a00:	108016d8 	cmpnei	r2,r2,91
  807a04:	1000411e 	bne	r2,zero,807b0c <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  807a08:	e0bffe17 	ldw	r2,-8(fp)
  807a0c:	10800a04 	addi	r2,r2,40
  807a10:	10800044 	addi	r2,r2,1
  807a14:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  807a18:	00000c06 	br	807a4c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  807a1c:	e0bffb17 	ldw	r2,-20(fp)
  807a20:	10c002a4 	muli	r3,r2,10
  807a24:	e0bffd17 	ldw	r2,-12(fp)
  807a28:	11000044 	addi	r4,r2,1
  807a2c:	e13ffd15 	stw	r4,-12(fp)
  807a30:	10800003 	ldbu	r2,0(r2)
  807a34:	10803fcc 	andi	r2,r2,255
  807a38:	1080201c 	xori	r2,r2,128
  807a3c:	10bfe004 	addi	r2,r2,-128
  807a40:	10bff404 	addi	r2,r2,-48
  807a44:	1885883a 	add	r2,r3,r2
  807a48:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  807a4c:	d0e00f17 	ldw	r3,-32708(gp)
  807a50:	e0bffd17 	ldw	r2,-12(fp)
  807a54:	10800003 	ldbu	r2,0(r2)
  807a58:	10803fcc 	andi	r2,r2,255
  807a5c:	1080201c 	xori	r2,r2,128
  807a60:	10bfe004 	addi	r2,r2,-128
  807a64:	10800044 	addi	r2,r2,1
  807a68:	1885883a 	add	r2,r3,r2
  807a6c:	10800003 	ldbu	r2,0(r2)
  807a70:	10803fcc 	andi	r2,r2,255
  807a74:	1080010c 	andi	r2,r2,4
  807a78:	103fe81e 	bne	r2,zero,807a1c <__alt_mem_onchip_mem+0xff787a1c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  807a7c:	e0bffd17 	ldw	r2,-12(fp)
  807a80:	10800003 	ldbu	r2,0(r2)
  807a84:	10803fcc 	andi	r2,r2,255
  807a88:	1080201c 	xori	r2,r2,128
  807a8c:	10bfe004 	addi	r2,r2,-128
  807a90:	10800ed8 	cmpnei	r2,r2,59
  807a94:	10001f1e 	bne	r2,zero,807b14 <lcd_handle_escape+0x14c>
    {
      ptr++;
  807a98:	e0bffd17 	ldw	r2,-12(fp)
  807a9c:	10800044 	addi	r2,r2,1
  807aa0:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  807aa4:	00000c06 	br	807ad8 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  807aa8:	e0bffc17 	ldw	r2,-16(fp)
  807aac:	10c002a4 	muli	r3,r2,10
  807ab0:	e0bffd17 	ldw	r2,-12(fp)
  807ab4:	11000044 	addi	r4,r2,1
  807ab8:	e13ffd15 	stw	r4,-12(fp)
  807abc:	10800003 	ldbu	r2,0(r2)
  807ac0:	10803fcc 	andi	r2,r2,255
  807ac4:	1080201c 	xori	r2,r2,128
  807ac8:	10bfe004 	addi	r2,r2,-128
  807acc:	10bff404 	addi	r2,r2,-48
  807ad0:	1885883a 	add	r2,r3,r2
  807ad4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  807ad8:	d0e00f17 	ldw	r3,-32708(gp)
  807adc:	e0bffd17 	ldw	r2,-12(fp)
  807ae0:	10800003 	ldbu	r2,0(r2)
  807ae4:	10803fcc 	andi	r2,r2,255
  807ae8:	1080201c 	xori	r2,r2,128
  807aec:	10bfe004 	addi	r2,r2,-128
  807af0:	10800044 	addi	r2,r2,1
  807af4:	1885883a 	add	r2,r3,r2
  807af8:	10800003 	ldbu	r2,0(r2)
  807afc:	10803fcc 	andi	r2,r2,255
  807b00:	1080010c 	andi	r2,r2,4
  807b04:	103fe81e 	bne	r2,zero,807aa8 <__alt_mem_onchip_mem+0xff787aa8>
  807b08:	00000206 	br	807b14 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  807b0c:	00bfffc4 	movi	r2,-1
  807b10:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  807b14:	e0bfff07 	ldb	r2,-4(fp)
  807b18:	10c012a0 	cmpeqi	r3,r2,74
  807b1c:	1800291e 	bne	r3,zero,807bc4 <lcd_handle_escape+0x1fc>
  807b20:	10c012c8 	cmpgei	r3,r2,75
  807b24:	1800031e 	bne	r3,zero,807b34 <lcd_handle_escape+0x16c>
  807b28:	10801220 	cmpeqi	r2,r2,72
  807b2c:	1000061e 	bne	r2,zero,807b48 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  807b30:	00004a06 	br	807c5c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  807b34:	10c012e0 	cmpeqi	r3,r2,75
  807b38:	1800281e 	bne	r3,zero,807bdc <lcd_handle_escape+0x214>
  807b3c:	108019a0 	cmpeqi	r2,r2,102
  807b40:	1000011e 	bne	r2,zero,807b48 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  807b44:	00004506 	br	807c5c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  807b48:	e0bffc17 	ldw	r2,-16(fp)
  807b4c:	0080050e 	bge	zero,r2,807b64 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  807b50:	e0bffc17 	ldw	r2,-16(fp)
  807b54:	10bfffc4 	addi	r2,r2,-1
  807b58:	1007883a 	mov	r3,r2
  807b5c:	e0bffe17 	ldw	r2,-8(fp)
  807b60:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  807b64:	e0bffb17 	ldw	r2,-20(fp)
  807b68:	0080370e 	bge	zero,r2,807c48 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  807b6c:	e0bffb17 	ldw	r2,-20(fp)
  807b70:	10bfffc4 	addi	r2,r2,-1
  807b74:	1007883a 	mov	r3,r2
  807b78:	e0bffe17 	ldw	r2,-8(fp)
  807b7c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  807b80:	e0bffe17 	ldw	r2,-8(fp)
  807b84:	10800883 	ldbu	r2,34(r2)
  807b88:	10803fcc 	andi	r2,r2,255
  807b8c:	10800170 	cmpltui	r2,r2,5
  807b90:	1000061e 	bne	r2,zero,807bac <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  807b94:	e0bffe17 	ldw	r2,-8(fp)
  807b98:	00c00104 	movi	r3,4
  807b9c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  807ba0:	00000206 	br	807bac <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  807ba4:	e13ffe17 	ldw	r4,-8(fp)
  807ba8:	08078fc0 	call	8078fc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  807bac:	e0bffe17 	ldw	r2,-8(fp)
  807bb0:	10800883 	ldbu	r2,34(r2)
  807bb4:	10803fcc 	andi	r2,r2,255
  807bb8:	108000e8 	cmpgeui	r2,r2,3
  807bbc:	103ff91e 	bne	r2,zero,807ba4 <__alt_mem_onchip_mem+0xff787ba4>
        lcd_scroll_up(sp);
    }
    break;
  807bc0:	00002106 	br	807c48 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  807bc4:	e0bffb17 	ldw	r2,-20(fp)
  807bc8:	10800098 	cmpnei	r2,r2,2
  807bcc:	1000201e 	bne	r2,zero,807c50 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  807bd0:	e13ffe17 	ldw	r4,-8(fp)
  807bd4:	08076400 	call	807640 <lcd_clear_screen>
    break;
  807bd8:	00001d06 	br	807c50 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  807bdc:	e0bffb17 	ldw	r2,-20(fp)
  807be0:	00801d16 	blt	zero,r2,807c58 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  807be4:	e0bffe17 	ldw	r2,-8(fp)
  807be8:	10800843 	ldbu	r2,33(r2)
  807bec:	10803fcc 	andi	r2,r2,255
  807bf0:	10801428 	cmpgeui	r2,r2,80
  807bf4:	1000181e 	bne	r2,zero,807c58 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  807bf8:	e0bffe17 	ldw	r2,-8(fp)
  807bfc:	10800883 	ldbu	r2,34(r2)
  807c00:	10803fcc 	andi	r2,r2,255
  807c04:	108018e4 	muli	r2,r2,99
  807c08:	10801004 	addi	r2,r2,64
  807c0c:	e0fffe17 	ldw	r3,-8(fp)
  807c10:	1887883a 	add	r3,r3,r2
  807c14:	e0bffe17 	ldw	r2,-8(fp)
  807c18:	10800843 	ldbu	r2,33(r2)
  807c1c:	10803fcc 	andi	r2,r2,255
  807c20:	1889883a 	add	r4,r3,r2
  807c24:	e0bffe17 	ldw	r2,-8(fp)
  807c28:	10800843 	ldbu	r2,33(r2)
  807c2c:	10803fcc 	andi	r2,r2,255
  807c30:	00c01404 	movi	r3,80
  807c34:	1885c83a 	sub	r2,r3,r2
  807c38:	100d883a 	mov	r6,r2
  807c3c:	01400804 	movi	r5,32
  807c40:	08046480 	call	804648 <memset>
    }
    break;
  807c44:	00000406 	br	807c58 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  807c48:	0001883a 	nop
  807c4c:	00000306 	br	807c5c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  807c50:	0001883a 	nop
  807c54:	00000106 	br	807c5c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  807c58:	0001883a 	nop
  }
}
  807c5c:	0001883a 	nop
  807c60:	e037883a 	mov	sp,fp
  807c64:	dfc00117 	ldw	ra,4(sp)
  807c68:	df000017 	ldw	fp,0(sp)
  807c6c:	dec00204 	addi	sp,sp,8
  807c70:	f800283a 	ret

00807c74 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  807c74:	defff304 	addi	sp,sp,-52
  807c78:	dfc00c15 	stw	ra,48(sp)
  807c7c:	df000b15 	stw	fp,44(sp)
  807c80:	df000b04 	addi	fp,sp,44
  807c84:	e13ffc15 	stw	r4,-16(fp)
  807c88:	e17ffd15 	stw	r5,-12(fp)
  807c8c:	e1bffe15 	stw	r6,-8(fp)
  807c90:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  807c94:	e0bffe17 	ldw	r2,-8(fp)
  807c98:	e0fffd17 	ldw	r3,-12(fp)
  807c9c:	1885883a 	add	r2,r3,r2
  807ca0:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  807ca4:	e0bffc17 	ldw	r2,-16(fp)
  807ca8:	00c00044 	movi	r3,1
  807cac:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  807cb0:	00009906 	br	807f18 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  807cb4:	e0bffd17 	ldw	r2,-12(fp)
  807cb8:	10800003 	ldbu	r2,0(r2)
  807cbc:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  807cc0:	e0bffc17 	ldw	r2,-16(fp)
  807cc4:	10800903 	ldbu	r2,36(r2)
  807cc8:	10803fcc 	andi	r2,r2,255
  807ccc:	1080201c 	xori	r2,r2,128
  807cd0:	10bfe004 	addi	r2,r2,-128
  807cd4:	10003716 	blt	r2,zero,807db4 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  807cd8:	e0bffc17 	ldw	r2,-16(fp)
  807cdc:	10800903 	ldbu	r2,36(r2)
  807ce0:	10803fcc 	andi	r2,r2,255
  807ce4:	1080201c 	xori	r2,r2,128
  807ce8:	10bfe004 	addi	r2,r2,-128
  807cec:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  807cf0:	e0bffa17 	ldw	r2,-24(fp)
  807cf4:	1000031e 	bne	r2,zero,807d04 <altera_avalon_lcd_16207_write+0x90>
  807cf8:	e0bff907 	ldb	r2,-28(fp)
  807cfc:	108016d8 	cmpnei	r2,r2,91
  807d00:	10000d1e 	bne	r2,zero,807d38 <altera_avalon_lcd_16207_write+0xc4>
  807d04:	e0bffa17 	ldw	r2,-24(fp)
  807d08:	10001826 	beq	r2,zero,807d6c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  807d0c:	d0e00f17 	ldw	r3,-32708(gp)
  807d10:	e0bff907 	ldb	r2,-28(fp)
  807d14:	10800044 	addi	r2,r2,1
  807d18:	1885883a 	add	r2,r3,r2
  807d1c:	10800003 	ldbu	r2,0(r2)
  807d20:	10803fcc 	andi	r2,r2,255
  807d24:	1080010c 	andi	r2,r2,4
  807d28:	1000101e 	bne	r2,zero,807d6c <altera_avalon_lcd_16207_write+0xf8>
  807d2c:	e0bff907 	ldb	r2,-28(fp)
  807d30:	10800ee0 	cmpeqi	r2,r2,59
  807d34:	10000d1e 	bne	r2,zero,807d6c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  807d38:	e0fffc17 	ldw	r3,-16(fp)
  807d3c:	e0bffa17 	ldw	r2,-24(fp)
  807d40:	1885883a 	add	r2,r3,r2
  807d44:	10800a04 	addi	r2,r2,40
  807d48:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  807d4c:	e0bff907 	ldb	r2,-28(fp)
  807d50:	100b883a 	mov	r5,r2
  807d54:	e13ffc17 	ldw	r4,-16(fp)
  807d58:	08079c80 	call	8079c8 <lcd_handle_escape>

        sp->esccount = -1;
  807d5c:	e0bffc17 	ldw	r2,-16(fp)
  807d60:	00ffffc4 	movi	r3,-1
  807d64:	10c00905 	stb	r3,36(r2)
  807d68:	00006806 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  807d6c:	e0bffc17 	ldw	r2,-16(fp)
  807d70:	10800903 	ldbu	r2,36(r2)
  807d74:	10803fcc 	andi	r2,r2,255
  807d78:	108001e8 	cmpgeui	r2,r2,7
  807d7c:	1000631e 	bne	r2,zero,807f0c <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  807d80:	e0fffc17 	ldw	r3,-16(fp)
  807d84:	e0bffa17 	ldw	r2,-24(fp)
  807d88:	1885883a 	add	r2,r3,r2
  807d8c:	10800a04 	addi	r2,r2,40
  807d90:	e0fff903 	ldbu	r3,-28(fp)
  807d94:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  807d98:	e0bffc17 	ldw	r2,-16(fp)
  807d9c:	10800903 	ldbu	r2,36(r2)
  807da0:	10800044 	addi	r2,r2,1
  807da4:	1007883a 	mov	r3,r2
  807da8:	e0bffc17 	ldw	r2,-16(fp)
  807dac:	10c00905 	stb	r3,36(r2)
  807db0:	00005606 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  807db4:	e0bff907 	ldb	r2,-28(fp)
  807db8:	108006d8 	cmpnei	r2,r2,27
  807dbc:	1000031e 	bne	r2,zero,807dcc <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  807dc0:	e0bffc17 	ldw	r2,-16(fp)
  807dc4:	10000905 	stb	zero,36(r2)
  807dc8:	00005006 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  807dcc:	e0bff907 	ldb	r2,-28(fp)
  807dd0:	10800358 	cmpnei	r2,r2,13
  807dd4:	1000031e 	bne	r2,zero,807de4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  807dd8:	e0bffc17 	ldw	r2,-16(fp)
  807ddc:	10000845 	stb	zero,33(r2)
  807de0:	00004a06 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  807de4:	e0bff907 	ldb	r2,-28(fp)
  807de8:	10800298 	cmpnei	r2,r2,10
  807dec:	1000101e 	bne	r2,zero,807e30 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  807df0:	e0bffc17 	ldw	r2,-16(fp)
  807df4:	10000845 	stb	zero,33(r2)
      sp->y++;
  807df8:	e0bffc17 	ldw	r2,-16(fp)
  807dfc:	10800883 	ldbu	r2,34(r2)
  807e00:	10800044 	addi	r2,r2,1
  807e04:	1007883a 	mov	r3,r2
  807e08:	e0bffc17 	ldw	r2,-16(fp)
  807e0c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  807e10:	e0bffc17 	ldw	r2,-16(fp)
  807e14:	10800883 	ldbu	r2,34(r2)
  807e18:	10803fcc 	andi	r2,r2,255
  807e1c:	108000f0 	cmpltui	r2,r2,3
  807e20:	10003a1e 	bne	r2,zero,807f0c <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  807e24:	e13ffc17 	ldw	r4,-16(fp)
  807e28:	08078fc0 	call	8078fc <lcd_scroll_up>
  807e2c:	00003706 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  807e30:	e0bff907 	ldb	r2,-28(fp)
  807e34:	10800218 	cmpnei	r2,r2,8
  807e38:	10000b1e 	bne	r2,zero,807e68 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  807e3c:	e0bffc17 	ldw	r2,-16(fp)
  807e40:	10800843 	ldbu	r2,33(r2)
  807e44:	10803fcc 	andi	r2,r2,255
  807e48:	10003026 	beq	r2,zero,807f0c <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  807e4c:	e0bffc17 	ldw	r2,-16(fp)
  807e50:	10800843 	ldbu	r2,33(r2)
  807e54:	10bfffc4 	addi	r2,r2,-1
  807e58:	1007883a 	mov	r3,r2
  807e5c:	e0bffc17 	ldw	r2,-16(fp)
  807e60:	10c00845 	stb	r3,33(r2)
  807e64:	00002906 	br	807f0c <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  807e68:	d0e00f17 	ldw	r3,-32708(gp)
  807e6c:	e0bff907 	ldb	r2,-28(fp)
  807e70:	10800044 	addi	r2,r2,1
  807e74:	1885883a 	add	r2,r3,r2
  807e78:	10800003 	ldbu	r2,0(r2)
  807e7c:	10803fcc 	andi	r2,r2,255
  807e80:	1080201c 	xori	r2,r2,128
  807e84:	10bfe004 	addi	r2,r2,-128
  807e88:	108025cc 	andi	r2,r2,151
  807e8c:	10001f26 	beq	r2,zero,807f0c <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  807e90:	e0bffc17 	ldw	r2,-16(fp)
  807e94:	10800883 	ldbu	r2,34(r2)
  807e98:	10803fcc 	andi	r2,r2,255
  807e9c:	108000b0 	cmpltui	r2,r2,2
  807ea0:	1000021e 	bne	r2,zero,807eac <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  807ea4:	e13ffc17 	ldw	r4,-16(fp)
  807ea8:	08078fc0 	call	8078fc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  807eac:	e0bffc17 	ldw	r2,-16(fp)
  807eb0:	10800843 	ldbu	r2,33(r2)
  807eb4:	10803fcc 	andi	r2,r2,255
  807eb8:	10801428 	cmpgeui	r2,r2,80
  807ebc:	10000d1e 	bne	r2,zero,807ef4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  807ec0:	e0bffc17 	ldw	r2,-16(fp)
  807ec4:	10800883 	ldbu	r2,34(r2)
  807ec8:	10c03fcc 	andi	r3,r2,255
  807ecc:	e0bffc17 	ldw	r2,-16(fp)
  807ed0:	10800843 	ldbu	r2,33(r2)
  807ed4:	10803fcc 	andi	r2,r2,255
  807ed8:	e13ffc17 	ldw	r4,-16(fp)
  807edc:	18c018e4 	muli	r3,r3,99
  807ee0:	20c7883a 	add	r3,r4,r3
  807ee4:	1885883a 	add	r2,r3,r2
  807ee8:	10801004 	addi	r2,r2,64
  807eec:	e0fff903 	ldbu	r3,-28(fp)
  807ef0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  807ef4:	e0bffc17 	ldw	r2,-16(fp)
  807ef8:	10800843 	ldbu	r2,33(r2)
  807efc:	10800044 	addi	r2,r2,1
  807f00:	1007883a 	mov	r3,r2
  807f04:	e0bffc17 	ldw	r2,-16(fp)
  807f08:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  807f0c:	e0bffd17 	ldw	r2,-12(fp)
  807f10:	10800044 	addi	r2,r2,1
  807f14:	e0bffd15 	stw	r2,-12(fp)
  807f18:	e0fffd17 	ldw	r3,-12(fp)
  807f1c:	e0bff817 	ldw	r2,-32(fp)
  807f20:	18bf6436 	bltu	r3,r2,807cb4 <__alt_mem_onchip_mem+0xff787cb4>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  807f24:	00800404 	movi	r2,16
  807f28:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  807f2c:	e03ff515 	stw	zero,-44(fp)
  807f30:	00003706 	br	808010 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  807f34:	00801404 	movi	r2,80
  807f38:	e0bff715 	stw	r2,-36(fp)
  807f3c:	00001106 	br	807f84 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  807f40:	e0bff717 	ldw	r2,-36(fp)
  807f44:	10bfffc4 	addi	r2,r2,-1
  807f48:	e13ffc17 	ldw	r4,-16(fp)
  807f4c:	e0fff517 	ldw	r3,-44(fp)
  807f50:	18c018e4 	muli	r3,r3,99
  807f54:	20c7883a 	add	r3,r4,r3
  807f58:	1885883a 	add	r2,r3,r2
  807f5c:	10801004 	addi	r2,r2,64
  807f60:	10800003 	ldbu	r2,0(r2)
  807f64:	10803fcc 	andi	r2,r2,255
  807f68:	1080201c 	xori	r2,r2,128
  807f6c:	10bfe004 	addi	r2,r2,-128
  807f70:	10800820 	cmpeqi	r2,r2,32
  807f74:	10000626 	beq	r2,zero,807f90 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  807f78:	e0bff717 	ldw	r2,-36(fp)
  807f7c:	10bfffc4 	addi	r2,r2,-1
  807f80:	e0bff715 	stw	r2,-36(fp)
  807f84:	e0bff717 	ldw	r2,-36(fp)
  807f88:	00bfed16 	blt	zero,r2,807f40 <__alt_mem_onchip_mem+0xff787f40>
  807f8c:	00000106 	br	807f94 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  807f90:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  807f94:	e0bff717 	ldw	r2,-36(fp)
  807f98:	10800448 	cmpgei	r2,r2,17
  807f9c:	1000031e 	bne	r2,zero,807fac <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  807fa0:	00800404 	movi	r2,16
  807fa4:	e0bff715 	stw	r2,-36(fp)
  807fa8:	00000306 	br	807fb8 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  807fac:	e0bff717 	ldw	r2,-36(fp)
  807fb0:	10800044 	addi	r2,r2,1
  807fb4:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  807fb8:	e0bff717 	ldw	r2,-36(fp)
  807fbc:	1009883a 	mov	r4,r2
  807fc0:	e0fffc17 	ldw	r3,-16(fp)
  807fc4:	e0bff517 	ldw	r2,-44(fp)
  807fc8:	108018e4 	muli	r2,r2,99
  807fcc:	1885883a 	add	r2,r3,r2
  807fd0:	10802444 	addi	r2,r2,145
  807fd4:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  807fd8:	e0fff617 	ldw	r3,-40(fp)
  807fdc:	e0bff717 	ldw	r2,-36(fp)
  807fe0:	1880020e 	bge	r3,r2,807fec <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  807fe4:	e0bff717 	ldw	r2,-36(fp)
  807fe8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  807fec:	e0fffc17 	ldw	r3,-16(fp)
  807ff0:	e0bff517 	ldw	r2,-44(fp)
  807ff4:	108018e4 	muli	r2,r2,99
  807ff8:	1885883a 	add	r2,r3,r2
  807ffc:	10802484 	addi	r2,r2,146
  808000:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808004:	e0bff517 	ldw	r2,-44(fp)
  808008:	10800044 	addi	r2,r2,1
  80800c:	e0bff515 	stw	r2,-44(fp)
  808010:	e0bff517 	ldw	r2,-44(fp)
  808014:	10800090 	cmplti	r2,r2,2
  808018:	103fc61e 	bne	r2,zero,807f34 <__alt_mem_onchip_mem+0xff787f34>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80801c:	e0bff617 	ldw	r2,-40(fp)
  808020:	10800448 	cmpgei	r2,r2,17
  808024:	1000031e 	bne	r2,zero,808034 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  808028:	e0bffc17 	ldw	r2,-16(fp)
  80802c:	10000985 	stb	zero,38(r2)
  808030:	00002e06 	br	8080ec <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  808034:	e0bff617 	ldw	r2,-40(fp)
  808038:	1085883a 	add	r2,r2,r2
  80803c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  808040:	e0bff617 	ldw	r2,-40(fp)
  808044:	1007883a 	mov	r3,r2
  808048:	e0bffc17 	ldw	r2,-16(fp)
  80804c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  808050:	e03ff515 	stw	zero,-44(fp)
  808054:	00002206 	br	8080e0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  808058:	e0fffc17 	ldw	r3,-16(fp)
  80805c:	e0bff517 	ldw	r2,-44(fp)
  808060:	108018e4 	muli	r2,r2,99
  808064:	1885883a 	add	r2,r3,r2
  808068:	10802444 	addi	r2,r2,145
  80806c:	10800003 	ldbu	r2,0(r2)
  808070:	10803fcc 	andi	r2,r2,255
  808074:	1080201c 	xori	r2,r2,128
  808078:	10bfe004 	addi	r2,r2,-128
  80807c:	10800450 	cmplti	r2,r2,17
  808080:	1000141e 	bne	r2,zero,8080d4 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  808084:	e0fffc17 	ldw	r3,-16(fp)
  808088:	e0bff517 	ldw	r2,-44(fp)
  80808c:	108018e4 	muli	r2,r2,99
  808090:	1885883a 	add	r2,r3,r2
  808094:	10802444 	addi	r2,r2,145
  808098:	10800003 	ldbu	r2,0(r2)
  80809c:	10803fcc 	andi	r2,r2,255
  8080a0:	1080201c 	xori	r2,r2,128
  8080a4:	10bfe004 	addi	r2,r2,-128
  8080a8:	1004923a 	slli	r2,r2,8
  8080ac:	e17ff617 	ldw	r5,-40(fp)
  8080b0:	1009883a 	mov	r4,r2
  8080b4:	0805b780 	call	805b78 <__divsi3>
  8080b8:	1009883a 	mov	r4,r2
  8080bc:	e0fffc17 	ldw	r3,-16(fp)
  8080c0:	e0bff517 	ldw	r2,-44(fp)
  8080c4:	108018e4 	muli	r2,r2,99
  8080c8:	1885883a 	add	r2,r3,r2
  8080cc:	10802484 	addi	r2,r2,146
  8080d0:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8080d4:	e0bff517 	ldw	r2,-44(fp)
  8080d8:	10800044 	addi	r2,r2,1
  8080dc:	e0bff515 	stw	r2,-44(fp)
  8080e0:	e0bff517 	ldw	r2,-44(fp)
  8080e4:	10800090 	cmplti	r2,r2,2
  8080e8:	103fdb1e 	bne	r2,zero,808058 <__alt_mem_onchip_mem+0xff788058>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8080ec:	e0bffc17 	ldw	r2,-16(fp)
  8080f0:	10800943 	ldbu	r2,37(r2)
  8080f4:	10803fcc 	andi	r2,r2,255
  8080f8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8080fc:	e13ffc17 	ldw	r4,-16(fp)
  808100:	08077100 	call	807710 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  808104:	e0bffc17 	ldw	r2,-16(fp)
  808108:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80810c:	e0bffc17 	ldw	r2,-16(fp)
  808110:	10800943 	ldbu	r2,37(r2)
  808114:	10c03fcc 	andi	r3,r2,255
  808118:	e0bffb17 	ldw	r2,-20(fp)
  80811c:	18800426 	beq	r3,r2,808130 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  808120:	e0bffc17 	ldw	r2,-16(fp)
  808124:	00c00044 	movi	r3,1
  808128:	10c009c5 	stb	r3,39(r2)
  }
  80812c:	003fef06 	br	8080ec <__alt_mem_onchip_mem+0xff7880ec>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  808130:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  808134:	e0bffe17 	ldw	r2,-8(fp)
}
  808138:	e037883a 	mov	sp,fp
  80813c:	dfc00117 	ldw	ra,4(sp)
  808140:	df000017 	ldw	fp,0(sp)
  808144:	dec00204 	addi	sp,sp,8
  808148:	f800283a 	ret

0080814c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80814c:	defffc04 	addi	sp,sp,-16
  808150:	dfc00315 	stw	ra,12(sp)
  808154:	df000215 	stw	fp,8(sp)
  808158:	df000204 	addi	fp,sp,8
  80815c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  808160:	e0bfff17 	ldw	r2,-4(fp)
  808164:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  808168:	e0bffe17 	ldw	r2,-8(fp)
  80816c:	10800943 	ldbu	r2,37(r2)
  808170:	10803fcc 	andi	r2,r2,255
  808174:	10c00044 	addi	r3,r2,1
  808178:	e0bffe17 	ldw	r2,-8(fp)
  80817c:	10800983 	ldbu	r2,38(r2)
  808180:	10803fcc 	andi	r2,r2,255
  808184:	18800316 	blt	r3,r2,808194 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  808188:	e0bffe17 	ldw	r2,-8(fp)
  80818c:	10000945 	stb	zero,37(r2)
  808190:	00000606 	br	8081ac <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  808194:	e0bffe17 	ldw	r2,-8(fp)
  808198:	10800943 	ldbu	r2,37(r2)
  80819c:	10800044 	addi	r2,r2,1
  8081a0:	1007883a 	mov	r3,r2
  8081a4:	e0bffe17 	ldw	r2,-8(fp)
  8081a8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8081ac:	e0bffe17 	ldw	r2,-8(fp)
  8081b0:	10800983 	ldbu	r2,38(r2)
  8081b4:	10803fcc 	andi	r2,r2,255
  8081b8:	10000826 	beq	r2,zero,8081dc <alt_lcd_16207_timeout+0x90>
  8081bc:	e0bffe17 	ldw	r2,-8(fp)
  8081c0:	108009c3 	ldbu	r2,39(r2)
  8081c4:	10803fcc 	andi	r2,r2,255
  8081c8:	1080201c 	xori	r2,r2,128
  8081cc:	10bfe004 	addi	r2,r2,-128
  8081d0:	1000021e 	bne	r2,zero,8081dc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8081d4:	e13ffe17 	ldw	r4,-8(fp)
  8081d8:	08077100 	call	807710 <lcd_repaint_screen>

  return sp->period;
  8081dc:	e0bffe17 	ldw	r2,-8(fp)
  8081e0:	10800717 	ldw	r2,28(r2)
}
  8081e4:	e037883a 	mov	sp,fp
  8081e8:	dfc00117 	ldw	ra,4(sp)
  8081ec:	df000017 	ldw	fp,0(sp)
  8081f0:	dec00204 	addi	sp,sp,8
  8081f4:	f800283a 	ret

008081f8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8081f8:	defffc04 	addi	sp,sp,-16
  8081fc:	dfc00315 	stw	ra,12(sp)
  808200:	df000215 	stw	fp,8(sp)
  808204:	df000204 	addi	fp,sp,8
  808208:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80820c:	e0bfff17 	ldw	r2,-4(fp)
  808210:	10800017 	ldw	r2,0(r2)
  808214:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  808218:	e0bfff17 	ldw	r2,-4(fp)
  80821c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  808220:	010ea604 	movi	r4,15000
  808224:	08095a80 	call	8095a8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  808228:	e0bffe17 	ldw	r2,-8(fp)
  80822c:	00c00c04 	movi	r3,48
  808230:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  808234:	01040104 	movi	r4,4100
  808238:	08095a80 	call	8095a8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80823c:	e0bffe17 	ldw	r2,-8(fp)
  808240:	00c00c04 	movi	r3,48
  808244:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  808248:	0100fa04 	movi	r4,1000
  80824c:	08095a80 	call	8095a8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  808250:	e0bffe17 	ldw	r2,-8(fp)
  808254:	00c00c04 	movi	r3,48
  808258:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80825c:	01400e04 	movi	r5,56
  808260:	e13fff17 	ldw	r4,-4(fp)
  808264:	08074b00 	call	8074b0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  808268:	01400204 	movi	r5,8
  80826c:	e13fff17 	ldw	r4,-4(fp)
  808270:	08074b00 	call	8074b0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  808274:	e13fff17 	ldw	r4,-4(fp)
  808278:	08076400 	call	807640 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80827c:	01400184 	movi	r5,6
  808280:	e13fff17 	ldw	r4,-4(fp)
  808284:	08074b00 	call	8074b0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  808288:	01400304 	movi	r5,12
  80828c:	e13fff17 	ldw	r4,-4(fp)
  808290:	08074b00 	call	8074b0 <lcd_write_command>

  sp->esccount = -1;
  808294:	e0bfff17 	ldw	r2,-4(fp)
  808298:	00ffffc4 	movi	r3,-1
  80829c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8082a0:	e0bfff17 	ldw	r2,-4(fp)
  8082a4:	10800a04 	addi	r2,r2,40
  8082a8:	01800204 	movi	r6,8
  8082ac:	000b883a 	mov	r5,zero
  8082b0:	1009883a 	mov	r4,r2
  8082b4:	08046480 	call	804648 <memset>

  sp->scrollpos = 0;
  8082b8:	e0bfff17 	ldw	r2,-4(fp)
  8082bc:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8082c0:	e0bfff17 	ldw	r2,-4(fp)
  8082c4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8082c8:	e0bfff17 	ldw	r2,-4(fp)
  8082cc:	100009c5 	stb	zero,39(r2)
  8082d0:	d0a78617 	ldw	r2,-25064(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8082d4:	01400284 	movi	r5,10
  8082d8:	1009883a 	mov	r4,r2
  8082dc:	0805c700 	call	805c70 <__udivsi3>
  8082e0:	1007883a 	mov	r3,r2
  8082e4:	e0bfff17 	ldw	r2,-4(fp)
  8082e8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8082ec:	e0bfff17 	ldw	r2,-4(fp)
  8082f0:	10c00104 	addi	r3,r2,4
  8082f4:	e0bfff17 	ldw	r2,-4(fp)
  8082f8:	10800717 	ldw	r2,28(r2)
  8082fc:	e1ffff17 	ldw	r7,-4(fp)
  808300:	01802074 	movhi	r6,129
  808304:	31a05304 	addi	r6,r6,-32436
  808308:	100b883a 	mov	r5,r2
  80830c:	1809883a 	mov	r4,r3
  808310:	0805d2c0 	call	805d2c <alt_alarm_start>
}
  808314:	0001883a 	nop
  808318:	e037883a 	mov	sp,fp
  80831c:	dfc00117 	ldw	ra,4(sp)
  808320:	df000017 	ldw	fp,0(sp)
  808324:	dec00204 	addi	sp,sp,8
  808328:	f800283a 	ret

0080832c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80832c:	defffa04 	addi	sp,sp,-24
  808330:	dfc00515 	stw	ra,20(sp)
  808334:	df000415 	stw	fp,16(sp)
  808338:	df000404 	addi	fp,sp,16
  80833c:	e13ffd15 	stw	r4,-12(fp)
  808340:	e17ffe15 	stw	r5,-8(fp)
  808344:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  808348:	e0bffd17 	ldw	r2,-12(fp)
  80834c:	10800017 	ldw	r2,0(r2)
  808350:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  808354:	e0bffc17 	ldw	r2,-16(fp)
  808358:	10c00a04 	addi	r3,r2,40
  80835c:	e0bffd17 	ldw	r2,-12(fp)
  808360:	10800217 	ldw	r2,8(r2)
  808364:	100f883a 	mov	r7,r2
  808368:	e1bfff17 	ldw	r6,-4(fp)
  80836c:	e17ffe17 	ldw	r5,-8(fp)
  808370:	1809883a 	mov	r4,r3
  808374:	0807c740 	call	807c74 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  808378:	e037883a 	mov	sp,fp
  80837c:	dfc00117 	ldw	ra,4(sp)
  808380:	df000017 	ldw	fp,0(sp)
  808384:	dec00204 	addi	sp,sp,8
  808388:	f800283a 	ret

0080838c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80838c:	defffa04 	addi	sp,sp,-24
  808390:	dfc00515 	stw	ra,20(sp)
  808394:	df000415 	stw	fp,16(sp)
  808398:	df000404 	addi	fp,sp,16
  80839c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8083a0:	0007883a 	mov	r3,zero
  8083a4:	e0bfff17 	ldw	r2,-4(fp)
  8083a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8083ac:	e0bfff17 	ldw	r2,-4(fp)
  8083b0:	10800104 	addi	r2,r2,4
  8083b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8083b8:	0005303a 	rdctl	r2,status
  8083bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8083c0:	e0fffd17 	ldw	r3,-12(fp)
  8083c4:	00bfff84 	movi	r2,-2
  8083c8:	1884703a 	and	r2,r3,r2
  8083cc:	1001703a 	wrctl	status,r2
  
  return context;
  8083d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8083d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8083d8:	08067040 	call	806704 <alt_tick>
  8083dc:	e0bffc17 	ldw	r2,-16(fp)
  8083e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8083e4:	e0bffe17 	ldw	r2,-8(fp)
  8083e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8083ec:	0001883a 	nop
  8083f0:	e037883a 	mov	sp,fp
  8083f4:	dfc00117 	ldw	ra,4(sp)
  8083f8:	df000017 	ldw	fp,0(sp)
  8083fc:	dec00204 	addi	sp,sp,8
  808400:	f800283a 	ret

00808404 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  808404:	defff804 	addi	sp,sp,-32
  808408:	dfc00715 	stw	ra,28(sp)
  80840c:	df000615 	stw	fp,24(sp)
  808410:	df000604 	addi	fp,sp,24
  808414:	e13ffc15 	stw	r4,-16(fp)
  808418:	e17ffd15 	stw	r5,-12(fp)
  80841c:	e1bffe15 	stw	r6,-8(fp)
  808420:	e1ffff15 	stw	r7,-4(fp)
  808424:	e0bfff17 	ldw	r2,-4(fp)
  808428:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80842c:	d0a78617 	ldw	r2,-25064(gp)
  808430:	1000021e 	bne	r2,zero,80843c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  808434:	e0bffb17 	ldw	r2,-20(fp)
  808438:	d0a78615 	stw	r2,-25064(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80843c:	e0bffc17 	ldw	r2,-16(fp)
  808440:	10800104 	addi	r2,r2,4
  808444:	00c001c4 	movi	r3,7
  808448:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80844c:	d8000015 	stw	zero,0(sp)
  808450:	e1fffc17 	ldw	r7,-16(fp)
  808454:	01802074 	movhi	r6,129
  808458:	31a0e304 	addi	r6,r6,-31860
  80845c:	e17ffe17 	ldw	r5,-8(fp)
  808460:	e13ffd17 	ldw	r4,-12(fp)
  808464:	0808f740 	call	808f74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  808468:	0001883a 	nop
  80846c:	e037883a 	mov	sp,fp
  808470:	dfc00117 	ldw	ra,4(sp)
  808474:	df000017 	ldw	fp,0(sp)
  808478:	dec00204 	addi	sp,sp,8
  80847c:	f800283a 	ret

00808480 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  808480:	defffa04 	addi	sp,sp,-24
  808484:	dfc00515 	stw	ra,20(sp)
  808488:	df000415 	stw	fp,16(sp)
  80848c:	df000404 	addi	fp,sp,16
  808490:	e13ffd15 	stw	r4,-12(fp)
  808494:	e17ffe15 	stw	r5,-8(fp)
  808498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80849c:	e0bffd17 	ldw	r2,-12(fp)
  8084a0:	10800017 	ldw	r2,0(r2)
  8084a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8084a8:	e0bffc17 	ldw	r2,-16(fp)
  8084ac:	10c00a04 	addi	r3,r2,40
  8084b0:	e0bffd17 	ldw	r2,-12(fp)
  8084b4:	10800217 	ldw	r2,8(r2)
  8084b8:	100f883a 	mov	r7,r2
  8084bc:	e1bfff17 	ldw	r6,-4(fp)
  8084c0:	e17ffe17 	ldw	r5,-8(fp)
  8084c4:	1809883a 	mov	r4,r3
  8084c8:	08089940 	call	808994 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8084cc:	e037883a 	mov	sp,fp
  8084d0:	dfc00117 	ldw	ra,4(sp)
  8084d4:	df000017 	ldw	fp,0(sp)
  8084d8:	dec00204 	addi	sp,sp,8
  8084dc:	f800283a 	ret

008084e0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8084e0:	defffa04 	addi	sp,sp,-24
  8084e4:	dfc00515 	stw	ra,20(sp)
  8084e8:	df000415 	stw	fp,16(sp)
  8084ec:	df000404 	addi	fp,sp,16
  8084f0:	e13ffd15 	stw	r4,-12(fp)
  8084f4:	e17ffe15 	stw	r5,-8(fp)
  8084f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8084fc:	e0bffd17 	ldw	r2,-12(fp)
  808500:	10800017 	ldw	r2,0(r2)
  808504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  808508:	e0bffc17 	ldw	r2,-16(fp)
  80850c:	10c00a04 	addi	r3,r2,40
  808510:	e0bffd17 	ldw	r2,-12(fp)
  808514:	10800217 	ldw	r2,8(r2)
  808518:	100f883a 	mov	r7,r2
  80851c:	e1bfff17 	ldw	r6,-4(fp)
  808520:	e17ffe17 	ldw	r5,-8(fp)
  808524:	1809883a 	mov	r4,r3
  808528:	0808bac0 	call	808bac <altera_avalon_uart_write>
      fd->fd_flags);
}
  80852c:	e037883a 	mov	sp,fp
  808530:	dfc00117 	ldw	ra,4(sp)
  808534:	df000017 	ldw	fp,0(sp)
  808538:	dec00204 	addi	sp,sp,8
  80853c:	f800283a 	ret

00808540 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  808540:	defffc04 	addi	sp,sp,-16
  808544:	dfc00315 	stw	ra,12(sp)
  808548:	df000215 	stw	fp,8(sp)
  80854c:	df000204 	addi	fp,sp,8
  808550:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  808554:	e0bfff17 	ldw	r2,-4(fp)
  808558:	10800017 	ldw	r2,0(r2)
  80855c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  808560:	e0bffe17 	ldw	r2,-8(fp)
  808564:	10c00a04 	addi	r3,r2,40
  808568:	e0bfff17 	ldw	r2,-4(fp)
  80856c:	10800217 	ldw	r2,8(r2)
  808570:	100b883a 	mov	r5,r2
  808574:	1809883a 	mov	r4,r3
  808578:	08089040 	call	808904 <altera_avalon_uart_close>
}
  80857c:	e037883a 	mov	sp,fp
  808580:	dfc00117 	ldw	ra,4(sp)
  808584:	df000017 	ldw	fp,0(sp)
  808588:	dec00204 	addi	sp,sp,8
  80858c:	f800283a 	ret

00808590 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  808590:	defff804 	addi	sp,sp,-32
  808594:	dfc00715 	stw	ra,28(sp)
  808598:	df000615 	stw	fp,24(sp)
  80859c:	df000604 	addi	fp,sp,24
  8085a0:	e13ffd15 	stw	r4,-12(fp)
  8085a4:	e17ffe15 	stw	r5,-8(fp)
  8085a8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8085ac:	e0bffd17 	ldw	r2,-12(fp)
  8085b0:	10800017 	ldw	r2,0(r2)
  8085b4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8085b8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8085bc:	1000041e 	bne	r2,zero,8085d0 <altera_avalon_uart_init+0x40>
  8085c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8085c4:	1000021e 	bne	r2,zero,8085d0 <altera_avalon_uart_init+0x40>
  8085c8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8085cc:	10000226 	beq	r2,zero,8085d8 <altera_avalon_uart_init+0x48>
  8085d0:	00800044 	movi	r2,1
  8085d4:	00000106 	br	8085dc <altera_avalon_uart_init+0x4c>
  8085d8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8085dc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8085e0:	e0bffc17 	ldw	r2,-16(fp)
  8085e4:	10000f1e 	bne	r2,zero,808624 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8085e8:	e0bffd17 	ldw	r2,-12(fp)
  8085ec:	00c32004 	movi	r3,3200
  8085f0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8085f4:	e0bffb17 	ldw	r2,-20(fp)
  8085f8:	10800304 	addi	r2,r2,12
  8085fc:	e0fffd17 	ldw	r3,-12(fp)
  808600:	18c00117 	ldw	r3,4(r3)
  808604:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  808608:	d8000015 	stw	zero,0(sp)
  80860c:	e1fffd17 	ldw	r7,-12(fp)
  808610:	01802074 	movhi	r6,129
  808614:	31a18f04 	addi	r6,r6,-31172
  808618:	e17fff17 	ldw	r5,-4(fp)
  80861c:	e13ffe17 	ldw	r4,-8(fp)
  808620:	0808f740 	call	808f74 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  808624:	0001883a 	nop
  808628:	e037883a 	mov	sp,fp
  80862c:	dfc00117 	ldw	ra,4(sp)
  808630:	df000017 	ldw	fp,0(sp)
  808634:	dec00204 	addi	sp,sp,8
  808638:	f800283a 	ret

0080863c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80863c:	defffa04 	addi	sp,sp,-24
  808640:	dfc00515 	stw	ra,20(sp)
  808644:	df000415 	stw	fp,16(sp)
  808648:	df000404 	addi	fp,sp,16
  80864c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  808650:	e0bfff17 	ldw	r2,-4(fp)
  808654:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  808658:	e0bffc17 	ldw	r2,-16(fp)
  80865c:	10800017 	ldw	r2,0(r2)
  808660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  808664:	e0bffd17 	ldw	r2,-12(fp)
  808668:	10800204 	addi	r2,r2,8
  80866c:	10800037 	ldwio	r2,0(r2)
  808670:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  808674:	e0bffd17 	ldw	r2,-12(fp)
  808678:	10800204 	addi	r2,r2,8
  80867c:	0007883a 	mov	r3,zero
  808680:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  808684:	e0bffd17 	ldw	r2,-12(fp)
  808688:	10800204 	addi	r2,r2,8
  80868c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  808690:	e0bffe17 	ldw	r2,-8(fp)
  808694:	1080200c 	andi	r2,r2,128
  808698:	10000326 	beq	r2,zero,8086a8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80869c:	e17ffe17 	ldw	r5,-8(fp)
  8086a0:	e13ffc17 	ldw	r4,-16(fp)
  8086a4:	08086d80 	call	8086d8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8086a8:	e0bffe17 	ldw	r2,-8(fp)
  8086ac:	1081100c 	andi	r2,r2,1088
  8086b0:	10000326 	beq	r2,zero,8086c0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8086b4:	e17ffe17 	ldw	r5,-8(fp)
  8086b8:	e13ffc17 	ldw	r4,-16(fp)
  8086bc:	08087bc0 	call	8087bc <altera_avalon_uart_txirq>
  }
  

}
  8086c0:	0001883a 	nop
  8086c4:	e037883a 	mov	sp,fp
  8086c8:	dfc00117 	ldw	ra,4(sp)
  8086cc:	df000017 	ldw	fp,0(sp)
  8086d0:	dec00204 	addi	sp,sp,8
  8086d4:	f800283a 	ret

008086d8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8086d8:	defffc04 	addi	sp,sp,-16
  8086dc:	df000315 	stw	fp,12(sp)
  8086e0:	df000304 	addi	fp,sp,12
  8086e4:	e13ffe15 	stw	r4,-8(fp)
  8086e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8086ec:	e0bfff17 	ldw	r2,-4(fp)
  8086f0:	108000cc 	andi	r2,r2,3
  8086f4:	10002c1e 	bne	r2,zero,8087a8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8086f8:	e0bffe17 	ldw	r2,-8(fp)
  8086fc:	10800317 	ldw	r2,12(r2)
  808700:	e0bffe17 	ldw	r2,-8(fp)
  808704:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  808708:	e0bffe17 	ldw	r2,-8(fp)
  80870c:	10800317 	ldw	r2,12(r2)
  808710:	10800044 	addi	r2,r2,1
  808714:	10800fcc 	andi	r2,r2,63
  808718:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80871c:	e0bffe17 	ldw	r2,-8(fp)
  808720:	10800317 	ldw	r2,12(r2)
  808724:	e0fffe17 	ldw	r3,-8(fp)
  808728:	18c00017 	ldw	r3,0(r3)
  80872c:	18c00037 	ldwio	r3,0(r3)
  808730:	1809883a 	mov	r4,r3
  808734:	e0fffe17 	ldw	r3,-8(fp)
  808738:	1885883a 	add	r2,r3,r2
  80873c:	10800704 	addi	r2,r2,28
  808740:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  808744:	e0bffe17 	ldw	r2,-8(fp)
  808748:	e0fffd17 	ldw	r3,-12(fp)
  80874c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  808750:	e0bffe17 	ldw	r2,-8(fp)
  808754:	10800317 	ldw	r2,12(r2)
  808758:	10800044 	addi	r2,r2,1
  80875c:	10800fcc 	andi	r2,r2,63
  808760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  808764:	e0bffe17 	ldw	r2,-8(fp)
  808768:	10c00217 	ldw	r3,8(r2)
  80876c:	e0bffd17 	ldw	r2,-12(fp)
  808770:	18800e1e 	bne	r3,r2,8087ac <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  808774:	e0bffe17 	ldw	r2,-8(fp)
  808778:	10c00117 	ldw	r3,4(r2)
  80877c:	00bfdfc4 	movi	r2,-129
  808780:	1886703a 	and	r3,r3,r2
  808784:	e0bffe17 	ldw	r2,-8(fp)
  808788:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80878c:	e0bffe17 	ldw	r2,-8(fp)
  808790:	10800017 	ldw	r2,0(r2)
  808794:	10800304 	addi	r2,r2,12
  808798:	e0fffe17 	ldw	r3,-8(fp)
  80879c:	18c00117 	ldw	r3,4(r3)
  8087a0:	10c00035 	stwio	r3,0(r2)
  8087a4:	00000106 	br	8087ac <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8087a8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8087ac:	e037883a 	mov	sp,fp
  8087b0:	df000017 	ldw	fp,0(sp)
  8087b4:	dec00104 	addi	sp,sp,4
  8087b8:	f800283a 	ret

008087bc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8087bc:	defffb04 	addi	sp,sp,-20
  8087c0:	df000415 	stw	fp,16(sp)
  8087c4:	df000404 	addi	fp,sp,16
  8087c8:	e13ffc15 	stw	r4,-16(fp)
  8087cc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8087d0:	e0bffc17 	ldw	r2,-16(fp)
  8087d4:	10c00417 	ldw	r3,16(r2)
  8087d8:	e0bffc17 	ldw	r2,-16(fp)
  8087dc:	10800517 	ldw	r2,20(r2)
  8087e0:	18803226 	beq	r3,r2,8088ac <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8087e4:	e0bffc17 	ldw	r2,-16(fp)
  8087e8:	10800617 	ldw	r2,24(r2)
  8087ec:	1080008c 	andi	r2,r2,2
  8087f0:	10000326 	beq	r2,zero,808800 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8087f4:	e0bffd17 	ldw	r2,-12(fp)
  8087f8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8087fc:	10001d26 	beq	r2,zero,808874 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  808800:	e0bffc17 	ldw	r2,-16(fp)
  808804:	10800417 	ldw	r2,16(r2)
  808808:	e0bffc17 	ldw	r2,-16(fp)
  80880c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  808810:	e0bffc17 	ldw	r2,-16(fp)
  808814:	10800017 	ldw	r2,0(r2)
  808818:	10800104 	addi	r2,r2,4
  80881c:	e0fffc17 	ldw	r3,-16(fp)
  808820:	18c00417 	ldw	r3,16(r3)
  808824:	e13ffc17 	ldw	r4,-16(fp)
  808828:	20c7883a 	add	r3,r4,r3
  80882c:	18c01704 	addi	r3,r3,92
  808830:	18c00003 	ldbu	r3,0(r3)
  808834:	18c03fcc 	andi	r3,r3,255
  808838:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80883c:	e0bffc17 	ldw	r2,-16(fp)
  808840:	10800417 	ldw	r2,16(r2)
  808844:	10800044 	addi	r2,r2,1
  808848:	e0fffc17 	ldw	r3,-16(fp)
  80884c:	18800415 	stw	r2,16(r3)
  808850:	10c00fcc 	andi	r3,r2,63
  808854:	e0bffc17 	ldw	r2,-16(fp)
  808858:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80885c:	e0bffc17 	ldw	r2,-16(fp)
  808860:	10800117 	ldw	r2,4(r2)
  808864:	10c01014 	ori	r3,r2,64
  808868:	e0bffc17 	ldw	r2,-16(fp)
  80886c:	10c00115 	stw	r3,4(r2)
  808870:	00000e06 	br	8088ac <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  808874:	e0bffc17 	ldw	r2,-16(fp)
  808878:	10800017 	ldw	r2,0(r2)
  80887c:	10800204 	addi	r2,r2,8
  808880:	10800037 	ldwio	r2,0(r2)
  808884:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  808888:	e0bffd17 	ldw	r2,-12(fp)
  80888c:	1082000c 	andi	r2,r2,2048
  808890:	1000061e 	bne	r2,zero,8088ac <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  808894:	e0bffc17 	ldw	r2,-16(fp)
  808898:	10c00117 	ldw	r3,4(r2)
  80889c:	00bfefc4 	movi	r2,-65
  8088a0:	1886703a 	and	r3,r3,r2
  8088a4:	e0bffc17 	ldw	r2,-16(fp)
  8088a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8088ac:	e0bffc17 	ldw	r2,-16(fp)
  8088b0:	10c00417 	ldw	r3,16(r2)
  8088b4:	e0bffc17 	ldw	r2,-16(fp)
  8088b8:	10800517 	ldw	r2,20(r2)
  8088bc:	1880061e 	bne	r3,r2,8088d8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8088c0:	e0bffc17 	ldw	r2,-16(fp)
  8088c4:	10c00117 	ldw	r3,4(r2)
  8088c8:	00beefc4 	movi	r2,-1089
  8088cc:	1886703a 	and	r3,r3,r2
  8088d0:	e0bffc17 	ldw	r2,-16(fp)
  8088d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8088d8:	e0bffc17 	ldw	r2,-16(fp)
  8088dc:	10800017 	ldw	r2,0(r2)
  8088e0:	10800304 	addi	r2,r2,12
  8088e4:	e0fffc17 	ldw	r3,-16(fp)
  8088e8:	18c00117 	ldw	r3,4(r3)
  8088ec:	10c00035 	stwio	r3,0(r2)
}
  8088f0:	0001883a 	nop
  8088f4:	e037883a 	mov	sp,fp
  8088f8:	df000017 	ldw	fp,0(sp)
  8088fc:	dec00104 	addi	sp,sp,4
  808900:	f800283a 	ret

00808904 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  808904:	defffd04 	addi	sp,sp,-12
  808908:	df000215 	stw	fp,8(sp)
  80890c:	df000204 	addi	fp,sp,8
  808910:	e13ffe15 	stw	r4,-8(fp)
  808914:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  808918:	00000506 	br	808930 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80891c:	e0bfff17 	ldw	r2,-4(fp)
  808920:	1090000c 	andi	r2,r2,16384
  808924:	10000226 	beq	r2,zero,808930 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  808928:	00bffd44 	movi	r2,-11
  80892c:	00000606 	br	808948 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  808930:	e0bffe17 	ldw	r2,-8(fp)
  808934:	10c00417 	ldw	r3,16(r2)
  808938:	e0bffe17 	ldw	r2,-8(fp)
  80893c:	10800517 	ldw	r2,20(r2)
  808940:	18bff61e 	bne	r3,r2,80891c <__alt_mem_onchip_mem+0xff78891c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  808944:	0005883a 	mov	r2,zero
}
  808948:	e037883a 	mov	sp,fp
  80894c:	df000017 	ldw	fp,0(sp)
  808950:	dec00104 	addi	sp,sp,4
  808954:	f800283a 	ret

00808958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808958:	defffe04 	addi	sp,sp,-8
  80895c:	dfc00115 	stw	ra,4(sp)
  808960:	df000015 	stw	fp,0(sp)
  808964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808968:	d0a00917 	ldw	r2,-32732(gp)
  80896c:	10000326 	beq	r2,zero,80897c <alt_get_errno+0x24>
  808970:	d0a00917 	ldw	r2,-32732(gp)
  808974:	103ee83a 	callr	r2
  808978:	00000106 	br	808980 <alt_get_errno+0x28>
  80897c:	d0a78204 	addi	r2,gp,-25080
}
  808980:	e037883a 	mov	sp,fp
  808984:	dfc00117 	ldw	ra,4(sp)
  808988:	df000017 	ldw	fp,0(sp)
  80898c:	dec00204 	addi	sp,sp,8
  808990:	f800283a 	ret

00808994 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  808994:	defff204 	addi	sp,sp,-56
  808998:	dfc00d15 	stw	ra,52(sp)
  80899c:	df000c15 	stw	fp,48(sp)
  8089a0:	df000c04 	addi	fp,sp,48
  8089a4:	e13ffc15 	stw	r4,-16(fp)
  8089a8:	e17ffd15 	stw	r5,-12(fp)
  8089ac:	e1bffe15 	stw	r6,-8(fp)
  8089b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8089b4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8089b8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8089bc:	e0bfff17 	ldw	r2,-4(fp)
  8089c0:	1090000c 	andi	r2,r2,16384
  8089c4:	1005003a 	cmpeq	r2,r2,zero
  8089c8:	10803fcc 	andi	r2,r2,255
  8089cc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8089d0:	00001306 	br	808a20 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8089d4:	e0bff517 	ldw	r2,-44(fp)
  8089d8:	10800044 	addi	r2,r2,1
  8089dc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8089e0:	e0bffd17 	ldw	r2,-12(fp)
  8089e4:	10c00044 	addi	r3,r2,1
  8089e8:	e0fffd15 	stw	r3,-12(fp)
  8089ec:	e0fffc17 	ldw	r3,-16(fp)
  8089f0:	18c00217 	ldw	r3,8(r3)
  8089f4:	e13ffc17 	ldw	r4,-16(fp)
  8089f8:	20c7883a 	add	r3,r4,r3
  8089fc:	18c00704 	addi	r3,r3,28
  808a00:	18c00003 	ldbu	r3,0(r3)
  808a04:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  808a08:	e0bffc17 	ldw	r2,-16(fp)
  808a0c:	10800217 	ldw	r2,8(r2)
  808a10:	10800044 	addi	r2,r2,1
  808a14:	10c00fcc 	andi	r3,r2,63
  808a18:	e0bffc17 	ldw	r2,-16(fp)
  808a1c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  808a20:	e0fff517 	ldw	r3,-44(fp)
  808a24:	e0bffe17 	ldw	r2,-8(fp)
  808a28:	1880050e 	bge	r3,r2,808a40 <altera_avalon_uart_read+0xac>
  808a2c:	e0bffc17 	ldw	r2,-16(fp)
  808a30:	10c00217 	ldw	r3,8(r2)
  808a34:	e0bffc17 	ldw	r2,-16(fp)
  808a38:	10800317 	ldw	r2,12(r2)
  808a3c:	18bfe51e 	bne	r3,r2,8089d4 <__alt_mem_onchip_mem+0xff7889d4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  808a40:	e0bff517 	ldw	r2,-44(fp)
  808a44:	1000251e 	bne	r2,zero,808adc <altera_avalon_uart_read+0x148>
  808a48:	e0bffc17 	ldw	r2,-16(fp)
  808a4c:	10c00217 	ldw	r3,8(r2)
  808a50:	e0bffc17 	ldw	r2,-16(fp)
  808a54:	10800317 	ldw	r2,12(r2)
  808a58:	1880201e 	bne	r3,r2,808adc <altera_avalon_uart_read+0x148>
    {
      if (!block)
  808a5c:	e0bff617 	ldw	r2,-40(fp)
  808a60:	1000071e 	bne	r2,zero,808a80 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  808a64:	08089580 	call	808958 <alt_get_errno>
  808a68:	1007883a 	mov	r3,r2
  808a6c:	008002c4 	movi	r2,11
  808a70:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  808a74:	00800044 	movi	r2,1
  808a78:	e0bff405 	stb	r2,-48(fp)
        break;
  808a7c:	00001b06 	br	808aec <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a80:	0005303a 	rdctl	r2,status
  808a84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a88:	e0fff917 	ldw	r3,-28(fp)
  808a8c:	00bfff84 	movi	r2,-2
  808a90:	1884703a 	and	r2,r3,r2
  808a94:	1001703a 	wrctl	status,r2
  
  return context;
  808a98:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  808a9c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  808aa0:	e0bffc17 	ldw	r2,-16(fp)
  808aa4:	10800117 	ldw	r2,4(r2)
  808aa8:	10c02014 	ori	r3,r2,128
  808aac:	e0bffc17 	ldw	r2,-16(fp)
  808ab0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  808ab4:	e0bffc17 	ldw	r2,-16(fp)
  808ab8:	10800017 	ldw	r2,0(r2)
  808abc:	10800304 	addi	r2,r2,12
  808ac0:	e0fffc17 	ldw	r3,-16(fp)
  808ac4:	18c00117 	ldw	r3,4(r3)
  808ac8:	10c00035 	stwio	r3,0(r2)
  808acc:	e0bff817 	ldw	r2,-32(fp)
  808ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808ad4:	e0bffa17 	ldw	r2,-24(fp)
  808ad8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  808adc:	e0bff517 	ldw	r2,-44(fp)
  808ae0:	1000021e 	bne	r2,zero,808aec <altera_avalon_uart_read+0x158>
  808ae4:	e0bffe17 	ldw	r2,-8(fp)
  808ae8:	103fcd1e 	bne	r2,zero,808a20 <__alt_mem_onchip_mem+0xff788a20>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808aec:	0005303a 	rdctl	r2,status
  808af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808af4:	e0fffb17 	ldw	r3,-20(fp)
  808af8:	00bfff84 	movi	r2,-2
  808afc:	1884703a 	and	r2,r3,r2
  808b00:	1001703a 	wrctl	status,r2
  
  return context;
  808b04:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  808b08:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  808b0c:	e0bffc17 	ldw	r2,-16(fp)
  808b10:	10800117 	ldw	r2,4(r2)
  808b14:	10c02014 	ori	r3,r2,128
  808b18:	e0bffc17 	ldw	r2,-16(fp)
  808b1c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  808b20:	e0bffc17 	ldw	r2,-16(fp)
  808b24:	10800017 	ldw	r2,0(r2)
  808b28:	10800304 	addi	r2,r2,12
  808b2c:	e0fffc17 	ldw	r3,-16(fp)
  808b30:	18c00117 	ldw	r3,4(r3)
  808b34:	10c00035 	stwio	r3,0(r2)
  808b38:	e0bff817 	ldw	r2,-32(fp)
  808b3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808b40:	e0bff717 	ldw	r2,-36(fp)
  808b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  808b48:	e0bff403 	ldbu	r2,-48(fp)
  808b4c:	10000226 	beq	r2,zero,808b58 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  808b50:	00bffd44 	movi	r2,-11
  808b54:	00000106 	br	808b5c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  808b58:	e0bff517 	ldw	r2,-44(fp)
  }
}
  808b5c:	e037883a 	mov	sp,fp
  808b60:	dfc00117 	ldw	ra,4(sp)
  808b64:	df000017 	ldw	fp,0(sp)
  808b68:	dec00204 	addi	sp,sp,8
  808b6c:	f800283a 	ret

00808b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808b70:	defffe04 	addi	sp,sp,-8
  808b74:	dfc00115 	stw	ra,4(sp)
  808b78:	df000015 	stw	fp,0(sp)
  808b7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808b80:	d0a00917 	ldw	r2,-32732(gp)
  808b84:	10000326 	beq	r2,zero,808b94 <alt_get_errno+0x24>
  808b88:	d0a00917 	ldw	r2,-32732(gp)
  808b8c:	103ee83a 	callr	r2
  808b90:	00000106 	br	808b98 <alt_get_errno+0x28>
  808b94:	d0a78204 	addi	r2,gp,-25080
}
  808b98:	e037883a 	mov	sp,fp
  808b9c:	dfc00117 	ldw	ra,4(sp)
  808ba0:	df000017 	ldw	fp,0(sp)
  808ba4:	dec00204 	addi	sp,sp,8
  808ba8:	f800283a 	ret

00808bac <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  808bac:	defff204 	addi	sp,sp,-56
  808bb0:	dfc00d15 	stw	ra,52(sp)
  808bb4:	df000c15 	stw	fp,48(sp)
  808bb8:	df000c04 	addi	fp,sp,48
  808bbc:	e13ffc15 	stw	r4,-16(fp)
  808bc0:	e17ffd15 	stw	r5,-12(fp)
  808bc4:	e1bffe15 	stw	r6,-8(fp)
  808bc8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  808bcc:	e0bffe17 	ldw	r2,-8(fp)
  808bd0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  808bd4:	e0bfff17 	ldw	r2,-4(fp)
  808bd8:	1090000c 	andi	r2,r2,16384
  808bdc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  808be0:	00003c06 	br	808cd4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  808be4:	e0bffc17 	ldw	r2,-16(fp)
  808be8:	10800517 	ldw	r2,20(r2)
  808bec:	10800044 	addi	r2,r2,1
  808bf0:	10800fcc 	andi	r2,r2,63
  808bf4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  808bf8:	e0bffc17 	ldw	r2,-16(fp)
  808bfc:	10c00417 	ldw	r3,16(r2)
  808c00:	e0bff717 	ldw	r2,-36(fp)
  808c04:	1880221e 	bne	r3,r2,808c90 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  808c08:	e0bff517 	ldw	r2,-44(fp)
  808c0c:	10000526 	beq	r2,zero,808c24 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  808c10:	0808b700 	call	808b70 <alt_get_errno>
  808c14:	1007883a 	mov	r3,r2
  808c18:	008002c4 	movi	r2,11
  808c1c:	18800015 	stw	r2,0(r3)
        break;
  808c20:	00002e06 	br	808cdc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808c24:	0005303a 	rdctl	r2,status
  808c28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808c2c:	e0fff917 	ldw	r3,-28(fp)
  808c30:	00bfff84 	movi	r2,-2
  808c34:	1884703a 	and	r2,r3,r2
  808c38:	1001703a 	wrctl	status,r2
  
  return context;
  808c3c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  808c40:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  808c44:	e0bffc17 	ldw	r2,-16(fp)
  808c48:	10800117 	ldw	r2,4(r2)
  808c4c:	10c11014 	ori	r3,r2,1088
  808c50:	e0bffc17 	ldw	r2,-16(fp)
  808c54:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  808c58:	e0bffc17 	ldw	r2,-16(fp)
  808c5c:	10800017 	ldw	r2,0(r2)
  808c60:	10800304 	addi	r2,r2,12
  808c64:	e0fffc17 	ldw	r3,-16(fp)
  808c68:	18c00117 	ldw	r3,4(r3)
  808c6c:	10c00035 	stwio	r3,0(r2)
  808c70:	e0bff817 	ldw	r2,-32(fp)
  808c74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808c78:	e0bff617 	ldw	r2,-40(fp)
  808c7c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  808c80:	e0bffc17 	ldw	r2,-16(fp)
  808c84:	10c00417 	ldw	r3,16(r2)
  808c88:	e0bff717 	ldw	r2,-36(fp)
  808c8c:	18bffc26 	beq	r3,r2,808c80 <__alt_mem_onchip_mem+0xff788c80>
      }
    }

    count--;
  808c90:	e0bff417 	ldw	r2,-48(fp)
  808c94:	10bfffc4 	addi	r2,r2,-1
  808c98:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  808c9c:	e0bffc17 	ldw	r2,-16(fp)
  808ca0:	10c00517 	ldw	r3,20(r2)
  808ca4:	e0bffd17 	ldw	r2,-12(fp)
  808ca8:	11000044 	addi	r4,r2,1
  808cac:	e13ffd15 	stw	r4,-12(fp)
  808cb0:	10800003 	ldbu	r2,0(r2)
  808cb4:	1009883a 	mov	r4,r2
  808cb8:	e0bffc17 	ldw	r2,-16(fp)
  808cbc:	10c5883a 	add	r2,r2,r3
  808cc0:	10801704 	addi	r2,r2,92
  808cc4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  808cc8:	e0bffc17 	ldw	r2,-16(fp)
  808ccc:	e0fff717 	ldw	r3,-36(fp)
  808cd0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  808cd4:	e0bff417 	ldw	r2,-48(fp)
  808cd8:	103fc21e 	bne	r2,zero,808be4 <__alt_mem_onchip_mem+0xff788be4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808cdc:	0005303a 	rdctl	r2,status
  808ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808ce4:	e0fffb17 	ldw	r3,-20(fp)
  808ce8:	00bfff84 	movi	r2,-2
  808cec:	1884703a 	and	r2,r3,r2
  808cf0:	1001703a 	wrctl	status,r2
  
  return context;
  808cf4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  808cf8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  808cfc:	e0bffc17 	ldw	r2,-16(fp)
  808d00:	10800117 	ldw	r2,4(r2)
  808d04:	10c11014 	ori	r3,r2,1088
  808d08:	e0bffc17 	ldw	r2,-16(fp)
  808d0c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  808d10:	e0bffc17 	ldw	r2,-16(fp)
  808d14:	10800017 	ldw	r2,0(r2)
  808d18:	10800304 	addi	r2,r2,12
  808d1c:	e0fffc17 	ldw	r3,-16(fp)
  808d20:	18c00117 	ldw	r3,4(r3)
  808d24:	10c00035 	stwio	r3,0(r2)
  808d28:	e0bff817 	ldw	r2,-32(fp)
  808d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808d30:	e0bffa17 	ldw	r2,-24(fp)
  808d34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  808d38:	e0fffe17 	ldw	r3,-8(fp)
  808d3c:	e0bff417 	ldw	r2,-48(fp)
  808d40:	1885c83a 	sub	r2,r3,r2
}
  808d44:	e037883a 	mov	sp,fp
  808d48:	dfc00117 	ldw	ra,4(sp)
  808d4c:	df000017 	ldw	fp,0(sp)
  808d50:	dec00204 	addi	sp,sp,8
  808d54:	f800283a 	ret

00808d58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  808d58:	defffe04 	addi	sp,sp,-8
  808d5c:	df000115 	stw	fp,4(sp)
  808d60:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  808d64:	e03fff15 	stw	zero,-4(fp)
  808d68:	00000506 	br	808d80 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  808d6c:	e0bfff17 	ldw	r2,-4(fp)
  808d70:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  808d74:	e0bfff17 	ldw	r2,-4(fp)
  808d78:	10800804 	addi	r2,r2,32
  808d7c:	e0bfff15 	stw	r2,-4(fp)
  808d80:	e0bfff17 	ldw	r2,-4(fp)
  808d84:	10820030 	cmpltui	r2,r2,2048
  808d88:	103ff81e 	bne	r2,zero,808d6c <__alt_mem_onchip_mem+0xff788d6c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  808d8c:	0001883a 	nop
  808d90:	e037883a 	mov	sp,fp
  808d94:	df000017 	ldw	fp,0(sp)
  808d98:	dec00104 	addi	sp,sp,4
  808d9c:	f800283a 	ret

00808da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808da0:	defffe04 	addi	sp,sp,-8
  808da4:	dfc00115 	stw	ra,4(sp)
  808da8:	df000015 	stw	fp,0(sp)
  808dac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808db0:	d0a00917 	ldw	r2,-32732(gp)
  808db4:	10000326 	beq	r2,zero,808dc4 <alt_get_errno+0x24>
  808db8:	d0a00917 	ldw	r2,-32732(gp)
  808dbc:	103ee83a 	callr	r2
  808dc0:	00000106 	br	808dc8 <alt_get_errno+0x28>
  808dc4:	d0a78204 	addi	r2,gp,-25080
}
  808dc8:	e037883a 	mov	sp,fp
  808dcc:	dfc00117 	ldw	ra,4(sp)
  808dd0:	df000017 	ldw	fp,0(sp)
  808dd4:	dec00204 	addi	sp,sp,8
  808dd8:	f800283a 	ret

00808ddc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  808ddc:	defffa04 	addi	sp,sp,-24
  808de0:	dfc00515 	stw	ra,20(sp)
  808de4:	df000415 	stw	fp,16(sp)
  808de8:	df000404 	addi	fp,sp,16
  808dec:	e13ffe15 	stw	r4,-8(fp)
  808df0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  808df4:	e0bffe17 	ldw	r2,-8(fp)
  808df8:	10000326 	beq	r2,zero,808e08 <alt_dev_llist_insert+0x2c>
  808dfc:	e0bffe17 	ldw	r2,-8(fp)
  808e00:	10800217 	ldw	r2,8(r2)
  808e04:	1000061e 	bne	r2,zero,808e20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  808e08:	0808da00 	call	808da0 <alt_get_errno>
  808e0c:	1007883a 	mov	r3,r2
  808e10:	00800584 	movi	r2,22
  808e14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  808e18:	00bffa84 	movi	r2,-22
  808e1c:	00001306 	br	808e6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  808e20:	e0bffe17 	ldw	r2,-8(fp)
  808e24:	e0ffff17 	ldw	r3,-4(fp)
  808e28:	e0fffc15 	stw	r3,-16(fp)
  808e2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  808e30:	e0bffd17 	ldw	r2,-12(fp)
  808e34:	e0fffc17 	ldw	r3,-16(fp)
  808e38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  808e3c:	e0bffc17 	ldw	r2,-16(fp)
  808e40:	10c00017 	ldw	r3,0(r2)
  808e44:	e0bffd17 	ldw	r2,-12(fp)
  808e48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  808e4c:	e0bffc17 	ldw	r2,-16(fp)
  808e50:	10800017 	ldw	r2,0(r2)
  808e54:	e0fffd17 	ldw	r3,-12(fp)
  808e58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  808e5c:	e0bffc17 	ldw	r2,-16(fp)
  808e60:	e0fffd17 	ldw	r3,-12(fp)
  808e64:	10c00015 	stw	r3,0(r2)

  return 0;  
  808e68:	0005883a 	mov	r2,zero
}
  808e6c:	e037883a 	mov	sp,fp
  808e70:	dfc00117 	ldw	ra,4(sp)
  808e74:	df000017 	ldw	fp,0(sp)
  808e78:	dec00204 	addi	sp,sp,8
  808e7c:	f800283a 	ret

00808e80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  808e80:	defffd04 	addi	sp,sp,-12
  808e84:	dfc00215 	stw	ra,8(sp)
  808e88:	df000115 	stw	fp,4(sp)
  808e8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  808e90:	00802074 	movhi	r2,129
  808e94:	10a79304 	addi	r2,r2,-25012
  808e98:	e0bfff15 	stw	r2,-4(fp)
  808e9c:	00000606 	br	808eb8 <_do_ctors+0x38>
        (*ctor) (); 
  808ea0:	e0bfff17 	ldw	r2,-4(fp)
  808ea4:	10800017 	ldw	r2,0(r2)
  808ea8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  808eac:	e0bfff17 	ldw	r2,-4(fp)
  808eb0:	10bfff04 	addi	r2,r2,-4
  808eb4:	e0bfff15 	stw	r2,-4(fp)
  808eb8:	e0ffff17 	ldw	r3,-4(fp)
  808ebc:	00802074 	movhi	r2,129
  808ec0:	10a79404 	addi	r2,r2,-25008
  808ec4:	18bff62e 	bgeu	r3,r2,808ea0 <__alt_mem_onchip_mem+0xff788ea0>
        (*ctor) (); 
}
  808ec8:	0001883a 	nop
  808ecc:	e037883a 	mov	sp,fp
  808ed0:	dfc00117 	ldw	ra,4(sp)
  808ed4:	df000017 	ldw	fp,0(sp)
  808ed8:	dec00204 	addi	sp,sp,8
  808edc:	f800283a 	ret

00808ee0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  808ee0:	defffd04 	addi	sp,sp,-12
  808ee4:	dfc00215 	stw	ra,8(sp)
  808ee8:	df000115 	stw	fp,4(sp)
  808eec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  808ef0:	00802074 	movhi	r2,129
  808ef4:	10a79304 	addi	r2,r2,-25012
  808ef8:	e0bfff15 	stw	r2,-4(fp)
  808efc:	00000606 	br	808f18 <_do_dtors+0x38>
        (*dtor) (); 
  808f00:	e0bfff17 	ldw	r2,-4(fp)
  808f04:	10800017 	ldw	r2,0(r2)
  808f08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  808f0c:	e0bfff17 	ldw	r2,-4(fp)
  808f10:	10bfff04 	addi	r2,r2,-4
  808f14:	e0bfff15 	stw	r2,-4(fp)
  808f18:	e0ffff17 	ldw	r3,-4(fp)
  808f1c:	00802074 	movhi	r2,129
  808f20:	10a79404 	addi	r2,r2,-25008
  808f24:	18bff62e 	bgeu	r3,r2,808f00 <__alt_mem_onchip_mem+0xff788f00>
        (*dtor) (); 
}
  808f28:	0001883a 	nop
  808f2c:	e037883a 	mov	sp,fp
  808f30:	dfc00117 	ldw	ra,4(sp)
  808f34:	df000017 	ldw	fp,0(sp)
  808f38:	dec00204 	addi	sp,sp,8
  808f3c:	f800283a 	ret

00808f40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  808f40:	defffe04 	addi	sp,sp,-8
  808f44:	dfc00115 	stw	ra,4(sp)
  808f48:	df000015 	stw	fp,0(sp)
  808f4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  808f50:	01440004 	movi	r5,4096
  808f54:	0009883a 	mov	r4,zero
  808f58:	08099900 	call	809990 <alt_icache_flush>
#endif
}
  808f5c:	0001883a 	nop
  808f60:	e037883a 	mov	sp,fp
  808f64:	dfc00117 	ldw	ra,4(sp)
  808f68:	df000017 	ldw	fp,0(sp)
  808f6c:	dec00204 	addi	sp,sp,8
  808f70:	f800283a 	ret

00808f74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  808f74:	defff904 	addi	sp,sp,-28
  808f78:	dfc00615 	stw	ra,24(sp)
  808f7c:	df000515 	stw	fp,20(sp)
  808f80:	df000504 	addi	fp,sp,20
  808f84:	e13ffc15 	stw	r4,-16(fp)
  808f88:	e17ffd15 	stw	r5,-12(fp)
  808f8c:	e1bffe15 	stw	r6,-8(fp)
  808f90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  808f94:	e0800217 	ldw	r2,8(fp)
  808f98:	d8800015 	stw	r2,0(sp)
  808f9c:	e1ffff17 	ldw	r7,-4(fp)
  808fa0:	e1bffe17 	ldw	r6,-8(fp)
  808fa4:	e17ffd17 	ldw	r5,-12(fp)
  808fa8:	e13ffc17 	ldw	r4,-16(fp)
  808fac:	08091240 	call	809124 <alt_iic_isr_register>
}  
  808fb0:	e037883a 	mov	sp,fp
  808fb4:	dfc00117 	ldw	ra,4(sp)
  808fb8:	df000017 	ldw	fp,0(sp)
  808fbc:	dec00204 	addi	sp,sp,8
  808fc0:	f800283a 	ret

00808fc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  808fc4:	defff904 	addi	sp,sp,-28
  808fc8:	df000615 	stw	fp,24(sp)
  808fcc:	df000604 	addi	fp,sp,24
  808fd0:	e13ffe15 	stw	r4,-8(fp)
  808fd4:	e17fff15 	stw	r5,-4(fp)
  808fd8:	e0bfff17 	ldw	r2,-4(fp)
  808fdc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808fe0:	0005303a 	rdctl	r2,status
  808fe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808fe8:	e0fffb17 	ldw	r3,-20(fp)
  808fec:	00bfff84 	movi	r2,-2
  808ff0:	1884703a 	and	r2,r3,r2
  808ff4:	1001703a 	wrctl	status,r2
  
  return context;
  808ff8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  808ffc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  809000:	00c00044 	movi	r3,1
  809004:	e0bffa17 	ldw	r2,-24(fp)
  809008:	1884983a 	sll	r2,r3,r2
  80900c:	1007883a 	mov	r3,r2
  809010:	d0a78817 	ldw	r2,-25056(gp)
  809014:	1884b03a 	or	r2,r3,r2
  809018:	d0a78815 	stw	r2,-25056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80901c:	d0a78817 	ldw	r2,-25056(gp)
  809020:	100170fa 	wrctl	ienable,r2
  809024:	e0bffc17 	ldw	r2,-16(fp)
  809028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80902c:	e0bffd17 	ldw	r2,-12(fp)
  809030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  809034:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  809038:	0001883a 	nop
}
  80903c:	e037883a 	mov	sp,fp
  809040:	df000017 	ldw	fp,0(sp)
  809044:	dec00104 	addi	sp,sp,4
  809048:	f800283a 	ret

0080904c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80904c:	defff904 	addi	sp,sp,-28
  809050:	df000615 	stw	fp,24(sp)
  809054:	df000604 	addi	fp,sp,24
  809058:	e13ffe15 	stw	r4,-8(fp)
  80905c:	e17fff15 	stw	r5,-4(fp)
  809060:	e0bfff17 	ldw	r2,-4(fp)
  809064:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809068:	0005303a 	rdctl	r2,status
  80906c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809070:	e0fffb17 	ldw	r3,-20(fp)
  809074:	00bfff84 	movi	r2,-2
  809078:	1884703a 	and	r2,r3,r2
  80907c:	1001703a 	wrctl	status,r2
  
  return context;
  809080:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  809084:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  809088:	00c00044 	movi	r3,1
  80908c:	e0bffa17 	ldw	r2,-24(fp)
  809090:	1884983a 	sll	r2,r3,r2
  809094:	0084303a 	nor	r2,zero,r2
  809098:	1007883a 	mov	r3,r2
  80909c:	d0a78817 	ldw	r2,-25056(gp)
  8090a0:	1884703a 	and	r2,r3,r2
  8090a4:	d0a78815 	stw	r2,-25056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8090a8:	d0a78817 	ldw	r2,-25056(gp)
  8090ac:	100170fa 	wrctl	ienable,r2
  8090b0:	e0bffc17 	ldw	r2,-16(fp)
  8090b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8090b8:	e0bffd17 	ldw	r2,-12(fp)
  8090bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8090c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8090c4:	0001883a 	nop
}
  8090c8:	e037883a 	mov	sp,fp
  8090cc:	df000017 	ldw	fp,0(sp)
  8090d0:	dec00104 	addi	sp,sp,4
  8090d4:	f800283a 	ret

008090d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8090d8:	defffc04 	addi	sp,sp,-16
  8090dc:	df000315 	stw	fp,12(sp)
  8090e0:	df000304 	addi	fp,sp,12
  8090e4:	e13ffe15 	stw	r4,-8(fp)
  8090e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8090ec:	000530fa 	rdctl	r2,ienable
  8090f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8090f4:	00c00044 	movi	r3,1
  8090f8:	e0bfff17 	ldw	r2,-4(fp)
  8090fc:	1884983a 	sll	r2,r3,r2
  809100:	1007883a 	mov	r3,r2
  809104:	e0bffd17 	ldw	r2,-12(fp)
  809108:	1884703a 	and	r2,r3,r2
  80910c:	1004c03a 	cmpne	r2,r2,zero
  809110:	10803fcc 	andi	r2,r2,255
}
  809114:	e037883a 	mov	sp,fp
  809118:	df000017 	ldw	fp,0(sp)
  80911c:	dec00104 	addi	sp,sp,4
  809120:	f800283a 	ret

00809124 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  809124:	defff504 	addi	sp,sp,-44
  809128:	dfc00a15 	stw	ra,40(sp)
  80912c:	df000915 	stw	fp,36(sp)
  809130:	df000904 	addi	fp,sp,36
  809134:	e13ffc15 	stw	r4,-16(fp)
  809138:	e17ffd15 	stw	r5,-12(fp)
  80913c:	e1bffe15 	stw	r6,-8(fp)
  809140:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  809144:	00bffa84 	movi	r2,-22
  809148:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80914c:	e0bffd17 	ldw	r2,-12(fp)
  809150:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  809154:	e0bff817 	ldw	r2,-32(fp)
  809158:	10800808 	cmpgei	r2,r2,32
  80915c:	1000271e 	bne	r2,zero,8091fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809160:	0005303a 	rdctl	r2,status
  809164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809168:	e0fffb17 	ldw	r3,-20(fp)
  80916c:	00bfff84 	movi	r2,-2
  809170:	1884703a 	and	r2,r3,r2
  809174:	1001703a 	wrctl	status,r2
  
  return context;
  809178:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80917c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  809180:	00802074 	movhi	r2,129
  809184:	10b73304 	addi	r2,r2,-9012
  809188:	e0fff817 	ldw	r3,-32(fp)
  80918c:	180690fa 	slli	r3,r3,3
  809190:	10c5883a 	add	r2,r2,r3
  809194:	e0fffe17 	ldw	r3,-8(fp)
  809198:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80919c:	00802074 	movhi	r2,129
  8091a0:	10b73304 	addi	r2,r2,-9012
  8091a4:	e0fff817 	ldw	r3,-32(fp)
  8091a8:	180690fa 	slli	r3,r3,3
  8091ac:	10c5883a 	add	r2,r2,r3
  8091b0:	10800104 	addi	r2,r2,4
  8091b4:	e0ffff17 	ldw	r3,-4(fp)
  8091b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8091bc:	e0bffe17 	ldw	r2,-8(fp)
  8091c0:	10000526 	beq	r2,zero,8091d8 <alt_iic_isr_register+0xb4>
  8091c4:	e0bff817 	ldw	r2,-32(fp)
  8091c8:	100b883a 	mov	r5,r2
  8091cc:	e13ffc17 	ldw	r4,-16(fp)
  8091d0:	0808fc40 	call	808fc4 <alt_ic_irq_enable>
  8091d4:	00000406 	br	8091e8 <alt_iic_isr_register+0xc4>
  8091d8:	e0bff817 	ldw	r2,-32(fp)
  8091dc:	100b883a 	mov	r5,r2
  8091e0:	e13ffc17 	ldw	r4,-16(fp)
  8091e4:	080904c0 	call	80904c <alt_ic_irq_disable>
  8091e8:	e0bff715 	stw	r2,-36(fp)
  8091ec:	e0bffa17 	ldw	r2,-24(fp)
  8091f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8091f4:	e0bff917 	ldw	r2,-28(fp)
  8091f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8091fc:	e0bff717 	ldw	r2,-36(fp)
}
  809200:	e037883a 	mov	sp,fp
  809204:	dfc00117 	ldw	ra,4(sp)
  809208:	df000017 	ldw	fp,0(sp)
  80920c:	dec00204 	addi	sp,sp,8
  809210:	f800283a 	ret

00809214 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  809214:	defff904 	addi	sp,sp,-28
  809218:	dfc00615 	stw	ra,24(sp)
  80921c:	df000515 	stw	fp,20(sp)
  809220:	df000504 	addi	fp,sp,20
  809224:	e13ffc15 	stw	r4,-16(fp)
  809228:	e17ffd15 	stw	r5,-12(fp)
  80922c:	e1bffe15 	stw	r6,-8(fp)
  809230:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  809234:	e1bfff17 	ldw	r6,-4(fp)
  809238:	e17ffe17 	ldw	r5,-8(fp)
  80923c:	e13ffd17 	ldw	r4,-12(fp)
  809240:	08094540 	call	809454 <open>
  809244:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  809248:	e0bffb17 	ldw	r2,-20(fp)
  80924c:	10001c16 	blt	r2,zero,8092c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  809250:	00802074 	movhi	r2,129
  809254:	10aa7e04 	addi	r2,r2,-22024
  809258:	e0fffb17 	ldw	r3,-20(fp)
  80925c:	18c00324 	muli	r3,r3,12
  809260:	10c5883a 	add	r2,r2,r3
  809264:	10c00017 	ldw	r3,0(r2)
  809268:	e0bffc17 	ldw	r2,-16(fp)
  80926c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  809270:	00802074 	movhi	r2,129
  809274:	10aa7e04 	addi	r2,r2,-22024
  809278:	e0fffb17 	ldw	r3,-20(fp)
  80927c:	18c00324 	muli	r3,r3,12
  809280:	10c5883a 	add	r2,r2,r3
  809284:	10800104 	addi	r2,r2,4
  809288:	10c00017 	ldw	r3,0(r2)
  80928c:	e0bffc17 	ldw	r2,-16(fp)
  809290:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  809294:	00802074 	movhi	r2,129
  809298:	10aa7e04 	addi	r2,r2,-22024
  80929c:	e0fffb17 	ldw	r3,-20(fp)
  8092a0:	18c00324 	muli	r3,r3,12
  8092a4:	10c5883a 	add	r2,r2,r3
  8092a8:	10800204 	addi	r2,r2,8
  8092ac:	10c00017 	ldw	r3,0(r2)
  8092b0:	e0bffc17 	ldw	r2,-16(fp)
  8092b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8092b8:	e13ffb17 	ldw	r4,-20(fp)
  8092bc:	08065540 	call	806554 <alt_release_fd>
  }
} 
  8092c0:	0001883a 	nop
  8092c4:	e037883a 	mov	sp,fp
  8092c8:	dfc00117 	ldw	ra,4(sp)
  8092cc:	df000017 	ldw	fp,0(sp)
  8092d0:	dec00204 	addi	sp,sp,8
  8092d4:	f800283a 	ret

008092d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8092d8:	defffb04 	addi	sp,sp,-20
  8092dc:	dfc00415 	stw	ra,16(sp)
  8092e0:	df000315 	stw	fp,12(sp)
  8092e4:	df000304 	addi	fp,sp,12
  8092e8:	e13ffd15 	stw	r4,-12(fp)
  8092ec:	e17ffe15 	stw	r5,-8(fp)
  8092f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8092f4:	01c07fc4 	movi	r7,511
  8092f8:	01800044 	movi	r6,1
  8092fc:	e17ffd17 	ldw	r5,-12(fp)
  809300:	01002074 	movhi	r4,129
  809304:	212a8104 	addi	r4,r4,-22012
  809308:	08092140 	call	809214 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80930c:	01c07fc4 	movi	r7,511
  809310:	000d883a 	mov	r6,zero
  809314:	e17ffe17 	ldw	r5,-8(fp)
  809318:	01002074 	movhi	r4,129
  80931c:	212a7e04 	addi	r4,r4,-22024
  809320:	08092140 	call	809214 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  809324:	01c07fc4 	movi	r7,511
  809328:	01800044 	movi	r6,1
  80932c:	e17fff17 	ldw	r5,-4(fp)
  809330:	01002074 	movhi	r4,129
  809334:	212a8404 	addi	r4,r4,-22000
  809338:	08092140 	call	809214 <alt_open_fd>
}  
  80933c:	0001883a 	nop
  809340:	e037883a 	mov	sp,fp
  809344:	dfc00117 	ldw	ra,4(sp)
  809348:	df000017 	ldw	fp,0(sp)
  80934c:	dec00204 	addi	sp,sp,8
  809350:	f800283a 	ret

00809354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809354:	defffe04 	addi	sp,sp,-8
  809358:	dfc00115 	stw	ra,4(sp)
  80935c:	df000015 	stw	fp,0(sp)
  809360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  809364:	d0a00917 	ldw	r2,-32732(gp)
  809368:	10000326 	beq	r2,zero,809378 <alt_get_errno+0x24>
  80936c:	d0a00917 	ldw	r2,-32732(gp)
  809370:	103ee83a 	callr	r2
  809374:	00000106 	br	80937c <alt_get_errno+0x28>
  809378:	d0a78204 	addi	r2,gp,-25080
}
  80937c:	e037883a 	mov	sp,fp
  809380:	dfc00117 	ldw	ra,4(sp)
  809384:	df000017 	ldw	fp,0(sp)
  809388:	dec00204 	addi	sp,sp,8
  80938c:	f800283a 	ret

00809390 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  809390:	defffd04 	addi	sp,sp,-12
  809394:	df000215 	stw	fp,8(sp)
  809398:	df000204 	addi	fp,sp,8
  80939c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8093a0:	e0bfff17 	ldw	r2,-4(fp)
  8093a4:	10800217 	ldw	r2,8(r2)
  8093a8:	10d00034 	orhi	r3,r2,16384
  8093ac:	e0bfff17 	ldw	r2,-4(fp)
  8093b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8093b4:	e03ffe15 	stw	zero,-8(fp)
  8093b8:	00001d06 	br	809430 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8093bc:	00802074 	movhi	r2,129
  8093c0:	10aa7e04 	addi	r2,r2,-22024
  8093c4:	e0fffe17 	ldw	r3,-8(fp)
  8093c8:	18c00324 	muli	r3,r3,12
  8093cc:	10c5883a 	add	r2,r2,r3
  8093d0:	10c00017 	ldw	r3,0(r2)
  8093d4:	e0bfff17 	ldw	r2,-4(fp)
  8093d8:	10800017 	ldw	r2,0(r2)
  8093dc:	1880111e 	bne	r3,r2,809424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8093e0:	00802074 	movhi	r2,129
  8093e4:	10aa7e04 	addi	r2,r2,-22024
  8093e8:	e0fffe17 	ldw	r3,-8(fp)
  8093ec:	18c00324 	muli	r3,r3,12
  8093f0:	10c5883a 	add	r2,r2,r3
  8093f4:	10800204 	addi	r2,r2,8
  8093f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8093fc:	1000090e 	bge	r2,zero,809424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  809400:	e0bffe17 	ldw	r2,-8(fp)
  809404:	10c00324 	muli	r3,r2,12
  809408:	00802074 	movhi	r2,129
  80940c:	10aa7e04 	addi	r2,r2,-22024
  809410:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  809414:	e0bfff17 	ldw	r2,-4(fp)
  809418:	18800226 	beq	r3,r2,809424 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80941c:	00bffcc4 	movi	r2,-13
  809420:	00000806 	br	809444 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  809424:	e0bffe17 	ldw	r2,-8(fp)
  809428:	10800044 	addi	r2,r2,1
  80942c:	e0bffe15 	stw	r2,-8(fp)
  809430:	d0a00817 	ldw	r2,-32736(gp)
  809434:	1007883a 	mov	r3,r2
  809438:	e0bffe17 	ldw	r2,-8(fp)
  80943c:	18bfdf2e 	bgeu	r3,r2,8093bc <__alt_mem_onchip_mem+0xff7893bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  809440:	0005883a 	mov	r2,zero
}
  809444:	e037883a 	mov	sp,fp
  809448:	df000017 	ldw	fp,0(sp)
  80944c:	dec00104 	addi	sp,sp,4
  809450:	f800283a 	ret

00809454 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  809454:	defff604 	addi	sp,sp,-40
  809458:	dfc00915 	stw	ra,36(sp)
  80945c:	df000815 	stw	fp,32(sp)
  809460:	df000804 	addi	fp,sp,32
  809464:	e13ffd15 	stw	r4,-12(fp)
  809468:	e17ffe15 	stw	r5,-8(fp)
  80946c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  809470:	00bfffc4 	movi	r2,-1
  809474:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  809478:	00bffb44 	movi	r2,-19
  80947c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  809480:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  809484:	d1600604 	addi	r5,gp,-32744
  809488:	e13ffd17 	ldw	r4,-12(fp)
  80948c:	08097540 	call	809754 <alt_find_dev>
  809490:	e0bff815 	stw	r2,-32(fp)
  809494:	e0bff817 	ldw	r2,-32(fp)
  809498:	1000051e 	bne	r2,zero,8094b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80949c:	e13ffd17 	ldw	r4,-12(fp)
  8094a0:	08097e40 	call	8097e4 <alt_find_file>
  8094a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8094a8:	00800044 	movi	r2,1
  8094ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8094b0:	e0bff817 	ldw	r2,-32(fp)
  8094b4:	10002926 	beq	r2,zero,80955c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8094b8:	e13ff817 	ldw	r4,-32(fp)
  8094bc:	08098ec0 	call	8098ec <alt_get_fd>
  8094c0:	e0bff915 	stw	r2,-28(fp)
  8094c4:	e0bff917 	ldw	r2,-28(fp)
  8094c8:	1000030e 	bge	r2,zero,8094d8 <open+0x84>
    {
      status = index;
  8094cc:	e0bff917 	ldw	r2,-28(fp)
  8094d0:	e0bffa15 	stw	r2,-24(fp)
  8094d4:	00002306 	br	809564 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  8094d8:	e0bff917 	ldw	r2,-28(fp)
  8094dc:	10c00324 	muli	r3,r2,12
  8094e0:	00802074 	movhi	r2,129
  8094e4:	10aa7e04 	addi	r2,r2,-22024
  8094e8:	1885883a 	add	r2,r3,r2
  8094ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8094f0:	e0fffe17 	ldw	r3,-8(fp)
  8094f4:	00900034 	movhi	r2,16384
  8094f8:	10bfffc4 	addi	r2,r2,-1
  8094fc:	1886703a 	and	r3,r3,r2
  809500:	e0bffc17 	ldw	r2,-16(fp)
  809504:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  809508:	e0bffb17 	ldw	r2,-20(fp)
  80950c:	1000051e 	bne	r2,zero,809524 <open+0xd0>
  809510:	e13ffc17 	ldw	r4,-16(fp)
  809514:	08093900 	call	809390 <alt_file_locked>
  809518:	e0bffa15 	stw	r2,-24(fp)
  80951c:	e0bffa17 	ldw	r2,-24(fp)
  809520:	10001016 	blt	r2,zero,809564 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  809524:	e0bff817 	ldw	r2,-32(fp)
  809528:	10800317 	ldw	r2,12(r2)
  80952c:	10000826 	beq	r2,zero,809550 <open+0xfc>
  809530:	e0bff817 	ldw	r2,-32(fp)
  809534:	10800317 	ldw	r2,12(r2)
  809538:	e1ffff17 	ldw	r7,-4(fp)
  80953c:	e1bffe17 	ldw	r6,-8(fp)
  809540:	e17ffd17 	ldw	r5,-12(fp)
  809544:	e13ffc17 	ldw	r4,-16(fp)
  809548:	103ee83a 	callr	r2
  80954c:	00000106 	br	809554 <open+0x100>
  809550:	0005883a 	mov	r2,zero
  809554:	e0bffa15 	stw	r2,-24(fp)
  809558:	00000206 	br	809564 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80955c:	00bffb44 	movi	r2,-19
  809560:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  809564:	e0bffa17 	ldw	r2,-24(fp)
  809568:	1000090e 	bge	r2,zero,809590 <open+0x13c>
  {
    alt_release_fd (index);  
  80956c:	e13ff917 	ldw	r4,-28(fp)
  809570:	08065540 	call	806554 <alt_release_fd>
    ALT_ERRNO = -status;
  809574:	08093540 	call	809354 <alt_get_errno>
  809578:	1007883a 	mov	r3,r2
  80957c:	e0bffa17 	ldw	r2,-24(fp)
  809580:	0085c83a 	sub	r2,zero,r2
  809584:	18800015 	stw	r2,0(r3)
    return -1;
  809588:	00bfffc4 	movi	r2,-1
  80958c:	00000106 	br	809594 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  809590:	e0bff917 	ldw	r2,-28(fp)
}
  809594:	e037883a 	mov	sp,fp
  809598:	dfc00117 	ldw	ra,4(sp)
  80959c:	df000017 	ldw	fp,0(sp)
  8095a0:	dec00204 	addi	sp,sp,8
  8095a4:	f800283a 	ret

008095a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8095a8:	defffd04 	addi	sp,sp,-12
  8095ac:	dfc00215 	stw	ra,8(sp)
  8095b0:	df000115 	stw	fp,4(sp)
  8095b4:	df000104 	addi	fp,sp,4
  8095b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8095bc:	e13fff17 	ldw	r4,-4(fp)
  8095c0:	08095fc0 	call	8095fc <alt_busy_sleep>
}
  8095c4:	e037883a 	mov	sp,fp
  8095c8:	dfc00117 	ldw	ra,4(sp)
  8095cc:	df000017 	ldw	fp,0(sp)
  8095d0:	dec00204 	addi	sp,sp,8
  8095d4:	f800283a 	ret

008095d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8095d8:	deffff04 	addi	sp,sp,-4
  8095dc:	df000015 	stw	fp,0(sp)
  8095e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8095e4:	000170fa 	wrctl	ienable,zero
}
  8095e8:	0001883a 	nop
  8095ec:	e037883a 	mov	sp,fp
  8095f0:	df000017 	ldw	fp,0(sp)
  8095f4:	dec00104 	addi	sp,sp,4
  8095f8:	f800283a 	ret

008095fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8095fc:	defffa04 	addi	sp,sp,-24
  809600:	dfc00515 	stw	ra,20(sp)
  809604:	df000415 	stw	fp,16(sp)
  809608:	df000404 	addi	fp,sp,16
  80960c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  809610:	008000c4 	movi	r2,3
  809614:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  809618:	e0fffd17 	ldw	r3,-12(fp)
  80961c:	008003f4 	movhi	r2,15
  809620:	10909004 	addi	r2,r2,16960
  809624:	1885383a 	mul	r2,r3,r2
  809628:	100b883a 	mov	r5,r2
  80962c:	0100bef4 	movhi	r4,763
  809630:	213c2004 	addi	r4,r4,-3968
  809634:	0805c700 	call	805c70 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  809638:	100b883a 	mov	r5,r2
  80963c:	01200034 	movhi	r4,32768
  809640:	213fffc4 	addi	r4,r4,-1
  809644:	0805c700 	call	805c70 <__udivsi3>
  809648:	100b883a 	mov	r5,r2
  80964c:	e13fff17 	ldw	r4,-4(fp)
  809650:	0805c700 	call	805c70 <__udivsi3>
  809654:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  809658:	e0bffe17 	ldw	r2,-8(fp)
  80965c:	10002a26 	beq	r2,zero,809708 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  809660:	e03ffc15 	stw	zero,-16(fp)
  809664:	00001706 	br	8096c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  809668:	00a00034 	movhi	r2,32768
  80966c:	10bfffc4 	addi	r2,r2,-1
  809670:	10bfffc4 	addi	r2,r2,-1
  809674:	103ffe1e 	bne	r2,zero,809670 <__alt_mem_onchip_mem+0xff789670>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  809678:	e0fffd17 	ldw	r3,-12(fp)
  80967c:	008003f4 	movhi	r2,15
  809680:	10909004 	addi	r2,r2,16960
  809684:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  809688:	100b883a 	mov	r5,r2
  80968c:	0100bef4 	movhi	r4,763
  809690:	213c2004 	addi	r4,r4,-3968
  809694:	0805c700 	call	805c70 <__udivsi3>
  809698:	100b883a 	mov	r5,r2
  80969c:	01200034 	movhi	r4,32768
  8096a0:	213fffc4 	addi	r4,r4,-1
  8096a4:	0805c700 	call	805c70 <__udivsi3>
  8096a8:	1007883a 	mov	r3,r2
  8096ac:	e0bfff17 	ldw	r2,-4(fp)
  8096b0:	10c5c83a 	sub	r2,r2,r3
  8096b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8096b8:	e0bffc17 	ldw	r2,-16(fp)
  8096bc:	10800044 	addi	r2,r2,1
  8096c0:	e0bffc15 	stw	r2,-16(fp)
  8096c4:	e0fffc17 	ldw	r3,-16(fp)
  8096c8:	e0bffe17 	ldw	r2,-8(fp)
  8096cc:	18bfe616 	blt	r3,r2,809668 <__alt_mem_onchip_mem+0xff789668>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8096d0:	e0fffd17 	ldw	r3,-12(fp)
  8096d4:	008003f4 	movhi	r2,15
  8096d8:	10909004 	addi	r2,r2,16960
  8096dc:	1885383a 	mul	r2,r3,r2
  8096e0:	100b883a 	mov	r5,r2
  8096e4:	0100bef4 	movhi	r4,763
  8096e8:	213c2004 	addi	r4,r4,-3968
  8096ec:	0805c700 	call	805c70 <__udivsi3>
  8096f0:	1007883a 	mov	r3,r2
  8096f4:	e0bfff17 	ldw	r2,-4(fp)
  8096f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8096fc:	10bfffc4 	addi	r2,r2,-1
  809700:	103ffe1e 	bne	r2,zero,8096fc <__alt_mem_onchip_mem+0xff7896fc>
  809704:	00000d06 	br	80973c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  809708:	e0fffd17 	ldw	r3,-12(fp)
  80970c:	008003f4 	movhi	r2,15
  809710:	10909004 	addi	r2,r2,16960
  809714:	1885383a 	mul	r2,r3,r2
  809718:	100b883a 	mov	r5,r2
  80971c:	0100bef4 	movhi	r4,763
  809720:	213c2004 	addi	r4,r4,-3968
  809724:	0805c700 	call	805c70 <__udivsi3>
  809728:	1007883a 	mov	r3,r2
  80972c:	e0bfff17 	ldw	r2,-4(fp)
  809730:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  809734:	10bfffc4 	addi	r2,r2,-1
  809738:	00bffe16 	blt	zero,r2,809734 <__alt_mem_onchip_mem+0xff789734>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80973c:	0005883a 	mov	r2,zero
}
  809740:	e037883a 	mov	sp,fp
  809744:	dfc00117 	ldw	ra,4(sp)
  809748:	df000017 	ldw	fp,0(sp)
  80974c:	dec00204 	addi	sp,sp,8
  809750:	f800283a 	ret

00809754 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  809754:	defffa04 	addi	sp,sp,-24
  809758:	dfc00515 	stw	ra,20(sp)
  80975c:	df000415 	stw	fp,16(sp)
  809760:	df000404 	addi	fp,sp,16
  809764:	e13ffe15 	stw	r4,-8(fp)
  809768:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80976c:	e0bfff17 	ldw	r2,-4(fp)
  809770:	10800017 	ldw	r2,0(r2)
  809774:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  809778:	e13ffe17 	ldw	r4,-8(fp)
  80977c:	08030380 	call	803038 <strlen>
  809780:	10800044 	addi	r2,r2,1
  809784:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  809788:	00000d06 	br	8097c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80978c:	e0bffc17 	ldw	r2,-16(fp)
  809790:	10800217 	ldw	r2,8(r2)
  809794:	e0fffd17 	ldw	r3,-12(fp)
  809798:	180d883a 	mov	r6,r3
  80979c:	e17ffe17 	ldw	r5,-8(fp)
  8097a0:	1009883a 	mov	r4,r2
  8097a4:	0809b080 	call	809b08 <memcmp>
  8097a8:	1000021e 	bne	r2,zero,8097b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8097ac:	e0bffc17 	ldw	r2,-16(fp)
  8097b0:	00000706 	br	8097d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8097b4:	e0bffc17 	ldw	r2,-16(fp)
  8097b8:	10800017 	ldw	r2,0(r2)
  8097bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8097c0:	e0fffc17 	ldw	r3,-16(fp)
  8097c4:	e0bfff17 	ldw	r2,-4(fp)
  8097c8:	18bff01e 	bne	r3,r2,80978c <__alt_mem_onchip_mem+0xff78978c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8097cc:	0005883a 	mov	r2,zero
}
  8097d0:	e037883a 	mov	sp,fp
  8097d4:	dfc00117 	ldw	ra,4(sp)
  8097d8:	df000017 	ldw	fp,0(sp)
  8097dc:	dec00204 	addi	sp,sp,8
  8097e0:	f800283a 	ret

008097e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8097e4:	defffb04 	addi	sp,sp,-20
  8097e8:	dfc00415 	stw	ra,16(sp)
  8097ec:	df000315 	stw	fp,12(sp)
  8097f0:	df000304 	addi	fp,sp,12
  8097f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8097f8:	d0a00417 	ldw	r2,-32752(gp)
  8097fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  809800:	00003106 	br	8098c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  809804:	e0bffd17 	ldw	r2,-12(fp)
  809808:	10800217 	ldw	r2,8(r2)
  80980c:	1009883a 	mov	r4,r2
  809810:	08030380 	call	803038 <strlen>
  809814:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  809818:	e0bffd17 	ldw	r2,-12(fp)
  80981c:	10c00217 	ldw	r3,8(r2)
  809820:	e0bffe17 	ldw	r2,-8(fp)
  809824:	10bfffc4 	addi	r2,r2,-1
  809828:	1885883a 	add	r2,r3,r2
  80982c:	10800003 	ldbu	r2,0(r2)
  809830:	10803fcc 	andi	r2,r2,255
  809834:	1080201c 	xori	r2,r2,128
  809838:	10bfe004 	addi	r2,r2,-128
  80983c:	10800bd8 	cmpnei	r2,r2,47
  809840:	1000031e 	bne	r2,zero,809850 <alt_find_file+0x6c>
    {
      len -= 1;
  809844:	e0bffe17 	ldw	r2,-8(fp)
  809848:	10bfffc4 	addi	r2,r2,-1
  80984c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  809850:	e0bffe17 	ldw	r2,-8(fp)
  809854:	e0ffff17 	ldw	r3,-4(fp)
  809858:	1885883a 	add	r2,r3,r2
  80985c:	10800003 	ldbu	r2,0(r2)
  809860:	10803fcc 	andi	r2,r2,255
  809864:	1080201c 	xori	r2,r2,128
  809868:	10bfe004 	addi	r2,r2,-128
  80986c:	10800be0 	cmpeqi	r2,r2,47
  809870:	1000081e 	bne	r2,zero,809894 <alt_find_file+0xb0>
  809874:	e0bffe17 	ldw	r2,-8(fp)
  809878:	e0ffff17 	ldw	r3,-4(fp)
  80987c:	1885883a 	add	r2,r3,r2
  809880:	10800003 	ldbu	r2,0(r2)
  809884:	10803fcc 	andi	r2,r2,255
  809888:	1080201c 	xori	r2,r2,128
  80988c:	10bfe004 	addi	r2,r2,-128
  809890:	10000a1e 	bne	r2,zero,8098bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  809894:	e0bffd17 	ldw	r2,-12(fp)
  809898:	10800217 	ldw	r2,8(r2)
  80989c:	e0fffe17 	ldw	r3,-8(fp)
  8098a0:	180d883a 	mov	r6,r3
  8098a4:	e17fff17 	ldw	r5,-4(fp)
  8098a8:	1009883a 	mov	r4,r2
  8098ac:	0809b080 	call	809b08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8098b0:	1000021e 	bne	r2,zero,8098bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8098b4:	e0bffd17 	ldw	r2,-12(fp)
  8098b8:	00000706 	br	8098d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8098bc:	e0bffd17 	ldw	r2,-12(fp)
  8098c0:	10800017 	ldw	r2,0(r2)
  8098c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8098c8:	e0fffd17 	ldw	r3,-12(fp)
  8098cc:	d0a00404 	addi	r2,gp,-32752
  8098d0:	18bfcc1e 	bne	r3,r2,809804 <__alt_mem_onchip_mem+0xff789804>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8098d4:	0005883a 	mov	r2,zero
}
  8098d8:	e037883a 	mov	sp,fp
  8098dc:	dfc00117 	ldw	ra,4(sp)
  8098e0:	df000017 	ldw	fp,0(sp)
  8098e4:	dec00204 	addi	sp,sp,8
  8098e8:	f800283a 	ret

008098ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8098ec:	defffc04 	addi	sp,sp,-16
  8098f0:	df000315 	stw	fp,12(sp)
  8098f4:	df000304 	addi	fp,sp,12
  8098f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8098fc:	00bffa04 	movi	r2,-24
  809900:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  809904:	e03ffd15 	stw	zero,-12(fp)
  809908:	00001906 	br	809970 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80990c:	00802074 	movhi	r2,129
  809910:	10aa7e04 	addi	r2,r2,-22024
  809914:	e0fffd17 	ldw	r3,-12(fp)
  809918:	18c00324 	muli	r3,r3,12
  80991c:	10c5883a 	add	r2,r2,r3
  809920:	10800017 	ldw	r2,0(r2)
  809924:	10000f1e 	bne	r2,zero,809964 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  809928:	00802074 	movhi	r2,129
  80992c:	10aa7e04 	addi	r2,r2,-22024
  809930:	e0fffd17 	ldw	r3,-12(fp)
  809934:	18c00324 	muli	r3,r3,12
  809938:	10c5883a 	add	r2,r2,r3
  80993c:	e0ffff17 	ldw	r3,-4(fp)
  809940:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  809944:	d0e00817 	ldw	r3,-32736(gp)
  809948:	e0bffd17 	ldw	r2,-12(fp)
  80994c:	1880020e 	bge	r3,r2,809958 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  809950:	e0bffd17 	ldw	r2,-12(fp)
  809954:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
  809958:	e0bffd17 	ldw	r2,-12(fp)
  80995c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  809960:	00000606 	br	80997c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  809964:	e0bffd17 	ldw	r2,-12(fp)
  809968:	10800044 	addi	r2,r2,1
  80996c:	e0bffd15 	stw	r2,-12(fp)
  809970:	e0bffd17 	ldw	r2,-12(fp)
  809974:	10800810 	cmplti	r2,r2,32
  809978:	103fe41e 	bne	r2,zero,80990c <__alt_mem_onchip_mem+0xff78990c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80997c:	e0bffe17 	ldw	r2,-8(fp)
}
  809980:	e037883a 	mov	sp,fp
  809984:	df000017 	ldw	fp,0(sp)
  809988:	dec00104 	addi	sp,sp,4
  80998c:	f800283a 	ret

00809990 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  809990:	defffb04 	addi	sp,sp,-20
  809994:	df000415 	stw	fp,16(sp)
  809998:	df000404 	addi	fp,sp,16
  80999c:	e13ffe15 	stw	r4,-8(fp)
  8099a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8099a4:	e0bfff17 	ldw	r2,-4(fp)
  8099a8:	10840070 	cmpltui	r2,r2,4097
  8099ac:	1000021e 	bne	r2,zero,8099b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8099b0:	00840004 	movi	r2,4096
  8099b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8099b8:	e0fffe17 	ldw	r3,-8(fp)
  8099bc:	e0bfff17 	ldw	r2,-4(fp)
  8099c0:	1885883a 	add	r2,r3,r2
  8099c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8099c8:	e0bffe17 	ldw	r2,-8(fp)
  8099cc:	e0bffc15 	stw	r2,-16(fp)
  8099d0:	00000506 	br	8099e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8099d4:	e0bffc17 	ldw	r2,-16(fp)
  8099d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8099dc:	e0bffc17 	ldw	r2,-16(fp)
  8099e0:	10800804 	addi	r2,r2,32
  8099e4:	e0bffc15 	stw	r2,-16(fp)
  8099e8:	e0fffc17 	ldw	r3,-16(fp)
  8099ec:	e0bffd17 	ldw	r2,-12(fp)
  8099f0:	18bff836 	bltu	r3,r2,8099d4 <__alt_mem_onchip_mem+0xff7899d4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8099f4:	e0bffe17 	ldw	r2,-8(fp)
  8099f8:	108007cc 	andi	r2,r2,31
  8099fc:	10000226 	beq	r2,zero,809a08 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  809a00:	e0bffc17 	ldw	r2,-16(fp)
  809a04:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  809a08:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  809a0c:	0001883a 	nop
  809a10:	e037883a 	mov	sp,fp
  809a14:	df000017 	ldw	fp,0(sp)
  809a18:	dec00104 	addi	sp,sp,4
  809a1c:	f800283a 	ret

00809a20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  809a20:	defffe04 	addi	sp,sp,-8
  809a24:	df000115 	stw	fp,4(sp)
  809a28:	df000104 	addi	fp,sp,4
  809a2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  809a30:	e0bfff17 	ldw	r2,-4(fp)
  809a34:	10bffe84 	addi	r2,r2,-6
  809a38:	10c00428 	cmpgeui	r3,r2,16
  809a3c:	18001a1e 	bne	r3,zero,809aa8 <alt_exception_cause_generated_bad_addr+0x88>
  809a40:	100690ba 	slli	r3,r2,2
  809a44:	00802074 	movhi	r2,129
  809a48:	10a69604 	addi	r2,r2,-26024
  809a4c:	1885883a 	add	r2,r3,r2
  809a50:	10800017 	ldw	r2,0(r2)
  809a54:	1000683a 	jmp	r2
  809a58:	00809a98 	cmpnei	r2,zero,618
  809a5c:	00809a98 	cmpnei	r2,zero,618
  809a60:	00809aa8 	cmpgeui	r2,zero,618
  809a64:	00809aa8 	cmpgeui	r2,zero,618
  809a68:	00809aa8 	cmpgeui	r2,zero,618
  809a6c:	00809a98 	cmpnei	r2,zero,618
  809a70:	00809aa0 	cmpeqi	r2,zero,618
  809a74:	00809aa8 	cmpgeui	r2,zero,618
  809a78:	00809a98 	cmpnei	r2,zero,618
  809a7c:	00809a98 	cmpnei	r2,zero,618
  809a80:	00809aa8 	cmpgeui	r2,zero,618
  809a84:	00809a98 	cmpnei	r2,zero,618
  809a88:	00809aa0 	cmpeqi	r2,zero,618
  809a8c:	00809aa8 	cmpgeui	r2,zero,618
  809a90:	00809aa8 	cmpgeui	r2,zero,618
  809a94:	00809a98 	cmpnei	r2,zero,618
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  809a98:	00800044 	movi	r2,1
  809a9c:	00000306 	br	809aac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  809aa0:	0005883a 	mov	r2,zero
  809aa4:	00000106 	br	809aac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  809aa8:	0005883a 	mov	r2,zero
  }
}
  809aac:	e037883a 	mov	sp,fp
  809ab0:	df000017 	ldw	fp,0(sp)
  809ab4:	dec00104 	addi	sp,sp,4
  809ab8:	f800283a 	ret

00809abc <atexit>:
  809abc:	200b883a 	mov	r5,r4
  809ac0:	000f883a 	mov	r7,zero
  809ac4:	000d883a 	mov	r6,zero
  809ac8:	0009883a 	mov	r4,zero
  809acc:	0809b841 	jmpi	809b84 <__register_exitproc>

00809ad0 <exit>:
  809ad0:	defffe04 	addi	sp,sp,-8
  809ad4:	000b883a 	mov	r5,zero
  809ad8:	dc000015 	stw	r16,0(sp)
  809adc:	dfc00115 	stw	ra,4(sp)
  809ae0:	2021883a 	mov	r16,r4
  809ae4:	0809c9c0 	call	809c9c <__call_exitprocs>
  809ae8:	00802074 	movhi	r2,129
  809aec:	10af6f04 	addi	r2,r2,-16964
  809af0:	11000017 	ldw	r4,0(r2)
  809af4:	20800f17 	ldw	r2,60(r4)
  809af8:	10000126 	beq	r2,zero,809b00 <exit+0x30>
  809afc:	103ee83a 	callr	r2
  809b00:	8009883a 	mov	r4,r16
  809b04:	0809e1c0 	call	809e1c <_exit>

00809b08 <memcmp>:
  809b08:	01c000c4 	movi	r7,3
  809b0c:	3980192e 	bgeu	r7,r6,809b74 <memcmp+0x6c>
  809b10:	2144b03a 	or	r2,r4,r5
  809b14:	11c4703a 	and	r2,r2,r7
  809b18:	10000f26 	beq	r2,zero,809b58 <memcmp+0x50>
  809b1c:	20800003 	ldbu	r2,0(r4)
  809b20:	28c00003 	ldbu	r3,0(r5)
  809b24:	10c0151e 	bne	r2,r3,809b7c <memcmp+0x74>
  809b28:	31bfff84 	addi	r6,r6,-2
  809b2c:	01ffffc4 	movi	r7,-1
  809b30:	00000406 	br	809b44 <memcmp+0x3c>
  809b34:	20800003 	ldbu	r2,0(r4)
  809b38:	28c00003 	ldbu	r3,0(r5)
  809b3c:	31bfffc4 	addi	r6,r6,-1
  809b40:	10c00e1e 	bne	r2,r3,809b7c <memcmp+0x74>
  809b44:	21000044 	addi	r4,r4,1
  809b48:	29400044 	addi	r5,r5,1
  809b4c:	31fff91e 	bne	r6,r7,809b34 <__alt_mem_onchip_mem+0xff789b34>
  809b50:	0005883a 	mov	r2,zero
  809b54:	f800283a 	ret
  809b58:	20c00017 	ldw	r3,0(r4)
  809b5c:	28800017 	ldw	r2,0(r5)
  809b60:	18bfee1e 	bne	r3,r2,809b1c <__alt_mem_onchip_mem+0xff789b1c>
  809b64:	31bfff04 	addi	r6,r6,-4
  809b68:	21000104 	addi	r4,r4,4
  809b6c:	29400104 	addi	r5,r5,4
  809b70:	39bff936 	bltu	r7,r6,809b58 <__alt_mem_onchip_mem+0xff789b58>
  809b74:	303fe91e 	bne	r6,zero,809b1c <__alt_mem_onchip_mem+0xff789b1c>
  809b78:	003ff506 	br	809b50 <__alt_mem_onchip_mem+0xff789b50>
  809b7c:	10c5c83a 	sub	r2,r2,r3
  809b80:	f800283a 	ret

00809b84 <__register_exitproc>:
  809b84:	defffa04 	addi	sp,sp,-24
  809b88:	dc000315 	stw	r16,12(sp)
  809b8c:	04002074 	movhi	r16,129
  809b90:	842f6f04 	addi	r16,r16,-16964
  809b94:	80c00017 	ldw	r3,0(r16)
  809b98:	dc400415 	stw	r17,16(sp)
  809b9c:	dfc00515 	stw	ra,20(sp)
  809ba0:	18805217 	ldw	r2,328(r3)
  809ba4:	2023883a 	mov	r17,r4
  809ba8:	10003726 	beq	r2,zero,809c88 <__register_exitproc+0x104>
  809bac:	10c00117 	ldw	r3,4(r2)
  809bb0:	010007c4 	movi	r4,31
  809bb4:	20c00e16 	blt	r4,r3,809bf0 <__register_exitproc+0x6c>
  809bb8:	1a000044 	addi	r8,r3,1
  809bbc:	8800221e 	bne	r17,zero,809c48 <__register_exitproc+0xc4>
  809bc0:	18c00084 	addi	r3,r3,2
  809bc4:	18c7883a 	add	r3,r3,r3
  809bc8:	18c7883a 	add	r3,r3,r3
  809bcc:	12000115 	stw	r8,4(r2)
  809bd0:	10c7883a 	add	r3,r2,r3
  809bd4:	19400015 	stw	r5,0(r3)
  809bd8:	0005883a 	mov	r2,zero
  809bdc:	dfc00517 	ldw	ra,20(sp)
  809be0:	dc400417 	ldw	r17,16(sp)
  809be4:	dc000317 	ldw	r16,12(sp)
  809be8:	dec00604 	addi	sp,sp,24
  809bec:	f800283a 	ret
  809bf0:	00800034 	movhi	r2,0
  809bf4:	10800004 	addi	r2,r2,0
  809bf8:	10002626 	beq	r2,zero,809c94 <__register_exitproc+0x110>
  809bfc:	01006404 	movi	r4,400
  809c00:	d9400015 	stw	r5,0(sp)
  809c04:	d9800115 	stw	r6,4(sp)
  809c08:	d9c00215 	stw	r7,8(sp)
  809c0c:	00000000 	call	0 <__reset-0x800000>
  809c10:	d9400017 	ldw	r5,0(sp)
  809c14:	d9800117 	ldw	r6,4(sp)
  809c18:	d9c00217 	ldw	r7,8(sp)
  809c1c:	10001d26 	beq	r2,zero,809c94 <__register_exitproc+0x110>
  809c20:	81000017 	ldw	r4,0(r16)
  809c24:	10000115 	stw	zero,4(r2)
  809c28:	02000044 	movi	r8,1
  809c2c:	22405217 	ldw	r9,328(r4)
  809c30:	0007883a 	mov	r3,zero
  809c34:	12400015 	stw	r9,0(r2)
  809c38:	20805215 	stw	r2,328(r4)
  809c3c:	10006215 	stw	zero,392(r2)
  809c40:	10006315 	stw	zero,396(r2)
  809c44:	883fde26 	beq	r17,zero,809bc0 <__alt_mem_onchip_mem+0xff789bc0>
  809c48:	18c9883a 	add	r4,r3,r3
  809c4c:	2109883a 	add	r4,r4,r4
  809c50:	1109883a 	add	r4,r2,r4
  809c54:	21802215 	stw	r6,136(r4)
  809c58:	01800044 	movi	r6,1
  809c5c:	12406217 	ldw	r9,392(r2)
  809c60:	30cc983a 	sll	r6,r6,r3
  809c64:	4992b03a 	or	r9,r9,r6
  809c68:	12406215 	stw	r9,392(r2)
  809c6c:	21c04215 	stw	r7,264(r4)
  809c70:	01000084 	movi	r4,2
  809c74:	893fd21e 	bne	r17,r4,809bc0 <__alt_mem_onchip_mem+0xff789bc0>
  809c78:	11006317 	ldw	r4,396(r2)
  809c7c:	218cb03a 	or	r6,r4,r6
  809c80:	11806315 	stw	r6,396(r2)
  809c84:	003fce06 	br	809bc0 <__alt_mem_onchip_mem+0xff789bc0>
  809c88:	18805304 	addi	r2,r3,332
  809c8c:	18805215 	stw	r2,328(r3)
  809c90:	003fc606 	br	809bac <__alt_mem_onchip_mem+0xff789bac>
  809c94:	00bfffc4 	movi	r2,-1
  809c98:	003fd006 	br	809bdc <__alt_mem_onchip_mem+0xff789bdc>

00809c9c <__call_exitprocs>:
  809c9c:	defff504 	addi	sp,sp,-44
  809ca0:	df000915 	stw	fp,36(sp)
  809ca4:	dd400615 	stw	r21,24(sp)
  809ca8:	dc800315 	stw	r18,12(sp)
  809cac:	dfc00a15 	stw	ra,40(sp)
  809cb0:	ddc00815 	stw	r23,32(sp)
  809cb4:	dd800715 	stw	r22,28(sp)
  809cb8:	dd000515 	stw	r20,20(sp)
  809cbc:	dcc00415 	stw	r19,16(sp)
  809cc0:	dc400215 	stw	r17,8(sp)
  809cc4:	dc000115 	stw	r16,4(sp)
  809cc8:	d9000015 	stw	r4,0(sp)
  809ccc:	2839883a 	mov	fp,r5
  809cd0:	04800044 	movi	r18,1
  809cd4:	057fffc4 	movi	r21,-1
  809cd8:	00802074 	movhi	r2,129
  809cdc:	10af6f04 	addi	r2,r2,-16964
  809ce0:	12000017 	ldw	r8,0(r2)
  809ce4:	45005217 	ldw	r20,328(r8)
  809ce8:	44c05204 	addi	r19,r8,328
  809cec:	a0001c26 	beq	r20,zero,809d60 <__call_exitprocs+0xc4>
  809cf0:	a0800117 	ldw	r2,4(r20)
  809cf4:	15ffffc4 	addi	r23,r2,-1
  809cf8:	b8000d16 	blt	r23,zero,809d30 <__call_exitprocs+0x94>
  809cfc:	14000044 	addi	r16,r2,1
  809d00:	8421883a 	add	r16,r16,r16
  809d04:	8421883a 	add	r16,r16,r16
  809d08:	84402004 	addi	r17,r16,128
  809d0c:	a463883a 	add	r17,r20,r17
  809d10:	a421883a 	add	r16,r20,r16
  809d14:	e0001e26 	beq	fp,zero,809d90 <__call_exitprocs+0xf4>
  809d18:	80804017 	ldw	r2,256(r16)
  809d1c:	e0801c26 	beq	fp,r2,809d90 <__call_exitprocs+0xf4>
  809d20:	bdffffc4 	addi	r23,r23,-1
  809d24:	843fff04 	addi	r16,r16,-4
  809d28:	8c7fff04 	addi	r17,r17,-4
  809d2c:	bd7ff91e 	bne	r23,r21,809d14 <__alt_mem_onchip_mem+0xff789d14>
  809d30:	00800034 	movhi	r2,0
  809d34:	10800004 	addi	r2,r2,0
  809d38:	10000926 	beq	r2,zero,809d60 <__call_exitprocs+0xc4>
  809d3c:	a0800117 	ldw	r2,4(r20)
  809d40:	1000301e 	bne	r2,zero,809e04 <__call_exitprocs+0x168>
  809d44:	a0800017 	ldw	r2,0(r20)
  809d48:	10003226 	beq	r2,zero,809e14 <__call_exitprocs+0x178>
  809d4c:	a009883a 	mov	r4,r20
  809d50:	98800015 	stw	r2,0(r19)
  809d54:	00000000 	call	0 <__reset-0x800000>
  809d58:	9d000017 	ldw	r20,0(r19)
  809d5c:	a03fe41e 	bne	r20,zero,809cf0 <__alt_mem_onchip_mem+0xff789cf0>
  809d60:	dfc00a17 	ldw	ra,40(sp)
  809d64:	df000917 	ldw	fp,36(sp)
  809d68:	ddc00817 	ldw	r23,32(sp)
  809d6c:	dd800717 	ldw	r22,28(sp)
  809d70:	dd400617 	ldw	r21,24(sp)
  809d74:	dd000517 	ldw	r20,20(sp)
  809d78:	dcc00417 	ldw	r19,16(sp)
  809d7c:	dc800317 	ldw	r18,12(sp)
  809d80:	dc400217 	ldw	r17,8(sp)
  809d84:	dc000117 	ldw	r16,4(sp)
  809d88:	dec00b04 	addi	sp,sp,44
  809d8c:	f800283a 	ret
  809d90:	a0800117 	ldw	r2,4(r20)
  809d94:	80c00017 	ldw	r3,0(r16)
  809d98:	10bfffc4 	addi	r2,r2,-1
  809d9c:	15c01426 	beq	r2,r23,809df0 <__call_exitprocs+0x154>
  809da0:	80000015 	stw	zero,0(r16)
  809da4:	183fde26 	beq	r3,zero,809d20 <__alt_mem_onchip_mem+0xff789d20>
  809da8:	95c8983a 	sll	r4,r18,r23
  809dac:	a0806217 	ldw	r2,392(r20)
  809db0:	a5800117 	ldw	r22,4(r20)
  809db4:	2084703a 	and	r2,r4,r2
  809db8:	10000b26 	beq	r2,zero,809de8 <__call_exitprocs+0x14c>
  809dbc:	a0806317 	ldw	r2,396(r20)
  809dc0:	2088703a 	and	r4,r4,r2
  809dc4:	20000c1e 	bne	r4,zero,809df8 <__call_exitprocs+0x15c>
  809dc8:	89400017 	ldw	r5,0(r17)
  809dcc:	d9000017 	ldw	r4,0(sp)
  809dd0:	183ee83a 	callr	r3
  809dd4:	a0800117 	ldw	r2,4(r20)
  809dd8:	15bfbf1e 	bne	r2,r22,809cd8 <__alt_mem_onchip_mem+0xff789cd8>
  809ddc:	98800017 	ldw	r2,0(r19)
  809de0:	153fcf26 	beq	r2,r20,809d20 <__alt_mem_onchip_mem+0xff789d20>
  809de4:	003fbc06 	br	809cd8 <__alt_mem_onchip_mem+0xff789cd8>
  809de8:	183ee83a 	callr	r3
  809dec:	003ff906 	br	809dd4 <__alt_mem_onchip_mem+0xff789dd4>
  809df0:	a5c00115 	stw	r23,4(r20)
  809df4:	003feb06 	br	809da4 <__alt_mem_onchip_mem+0xff789da4>
  809df8:	89000017 	ldw	r4,0(r17)
  809dfc:	183ee83a 	callr	r3
  809e00:	003ff406 	br	809dd4 <__alt_mem_onchip_mem+0xff789dd4>
  809e04:	a0800017 	ldw	r2,0(r20)
  809e08:	a027883a 	mov	r19,r20
  809e0c:	1029883a 	mov	r20,r2
  809e10:	003fb606 	br	809cec <__alt_mem_onchip_mem+0xff789cec>
  809e14:	0005883a 	mov	r2,zero
  809e18:	003ffb06 	br	809e08 <__alt_mem_onchip_mem+0xff789e08>

00809e1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  809e1c:	defffd04 	addi	sp,sp,-12
  809e20:	df000215 	stw	fp,8(sp)
  809e24:	df000204 	addi	fp,sp,8
  809e28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  809e2c:	0001883a 	nop
  809e30:	e0bfff17 	ldw	r2,-4(fp)
  809e34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  809e38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  809e3c:	10000226 	beq	r2,zero,809e48 <_exit+0x2c>
    ALT_SIM_FAIL();
  809e40:	002af070 	cmpltui	zero,zero,43969
  809e44:	00000106 	br	809e4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  809e48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  809e4c:	003fff06 	br	809e4c <__alt_mem_onchip_mem+0xff789e4c>
