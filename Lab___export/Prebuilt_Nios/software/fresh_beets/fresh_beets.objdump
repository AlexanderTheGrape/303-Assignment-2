
fresh_beets.elf:     file format elf32-littlenios2
fresh_beets.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000139c4 memsz 0x000139c4 flags r-x
    LOAD off    0x000149e4 vaddr 0x008139e4 paddr 0x008156bc align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x00017394 vaddr 0x00817394 paddr 0x00817394 align 2**12
         filesz 0x00000000 memsz 0x00000370 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000131b4  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005ec  008133f8  008133f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  008139e4  008156bc  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000370  00817394  00817394  00017394  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00817704  00817704  000166bc  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000166bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000166bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc8  00000000  00000000  000166e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025ed6  00000000  00000000  000176a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000098eb  00000000  00000000  0003d57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ccff  00000000  00000000  00046e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002658  00000000  00000000  00053b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000045c7  00000000  00000000  000561c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  0005a787  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00071ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a8  00000000  00000000  00071f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000789e5  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000789e8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000789eb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000789ec  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000789ed  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000789f1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000789f5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000789f9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00078a02  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00078a0b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00078a14  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00078a20  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  00078a4e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008133f8 l    d  .rodata	00000000 .rodata
008139e4 l    d  .rwdata	00000000 .rwdata
00817394 l    d  .bss	00000000 .bss
00817704 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../fresh_beets_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081349a l     O .rodata	00000010 zeroes.4404
00804d08 l     F .text	000000bc __sbprintf
008134aa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00804f18 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806a48 l     F .text	00000008 __fp_unlock
00806a5c l     F .text	0000019c __sinit.part.1
00806bf8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008139e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00813e28 l     O .rwdata	00000020 lc_ctype_charset
00813e08 l     O .rwdata	00000020 lc_message_charset
00813e48 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008134dc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00809510 l     F .text	000000fc __sprint_r.part.0
00813610 l     O .rodata	00000010 blanks.4348
00813600 l     O .rodata	00000010 zeroes.4349
0080aa9c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080f400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080f50c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080f538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f624 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f704 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f7f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f9c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008156a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fdb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fee8 l     F .text	00000034 alt_dev_reg
00814430 l     O .rwdata	00001060 jtag_uart
00815490 l     O .rwdata	00000120 lcd
008155b0 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810214 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810420 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008156b0 l     O .rwdata	00000004 colstart
00810a58 l     F .text	000000b8 lcd_write_command
00810b10 l     F .text	000000d8 lcd_write_data
00810be8 l     F .text	000000d0 lcd_clear_screen
00810cb8 l     F .text	000001ec lcd_repaint_screen
00810ea4 l     F .text	000000cc lcd_scroll_up
00810f70 l     F .text	000002ac lcd_handle_escape
008116f4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811934 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00811be4 l     F .text	0000009c altera_avalon_uart_irq
00811c80 l     F .text	000000e4 altera_avalon_uart_rxirq
00811d64 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811f00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812118 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812348 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008127bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
008128fc l     F .text	0000003c alt_get_errno
00812938 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00813863 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008173cc g     O .bss	00000001 _cg42
00817518 g     O .bss	00000004 alt_instruction_exception_handler
008173cd g     O .bss	00000001 _Pacemaker1_local_AVI_start
008173ce g     O .bss	00000001 g83
008173cf g     O .bss	00000001 g40
00809020 g     F .text	00000074 _mprec_log10
008173d0 g     O .bss	00000001 g87_e9
0080910c g     F .text	0000008c __any_on
0080b4f4 g     F .text	00000054 _isatty_r
008134e8 g     O .rodata	00000028 __mprec_tinytens
008173d1 g     O .bss	00000001 g91
008173c0 g     O .bss	00000004 maskedButton1
0080f900 g     F .text	0000007c alt_main
008173d2 g     O .bss	00000001 APace
00817604 g     O .bss	00000100 alt_irq
0080b548 g     F .text	00000060 _lseek_r
008173d3 g     O .bss	00000001 g4
008156bc g       *ABS*	00000000 __flash_rwdata_start
008173d4 g     O .bss	00000001 g108
008173d5 g     O .bss	00000001 g19
008173d6 g     O .bss	00000001 g111
0080de00 g     F .text	00000088 .hidden __eqdf2
00817704 g       *ABS*	00000000 __alt_heap_start
00802ab8 g     F .text	0000003c printf
0080be20 g     F .text	0000009c _wcrtomb_r
008003a0 g     F .text	00000040 AEI_timer_ISR
00809338 g     F .text	0000005c __sseek
00806d98 g     F .text	00000010 __sinit
0080bcc8 g     F .text	00000140 __swbuf_r
008173d7 g     O .bss	00000001 g55
008173d8 g     O .bss	00000001 _cg59
008173d9 g     O .bss	00000001 g27
008073a4 g     F .text	0000007c _setlocale_r
00806c00 g     F .text	00000068 __sfmoreglue
0080f9a0 g     F .text	00000024 __malloc_unlock
008173da g     O .bss	00000001 _Pacemaker1_local__pre_AVI_ex21
008173db g     O .bss	00000001 g112
008173dc g     O .bss	00000001 g44b
008173dd g     O .bss	00000001 _Pacemaker1_local_VRP_start
008173de g     O .bss	00000001 g3
008173df g     O .bss	00000001 g76b
008173e0 g     O .bss	00000001 g31b
008173e1 g     O .bss	00000001 _Pacemaker1_local_LRI_start
00817544 g     O .bss	00000018 Ventricular_timer
0080b5a8 g     F .text	0000015c memmove
008173e2 g     O .bss	00000001 g103
008173e3 g     O .bss	00000001 PRE_g27
008173e4 g     O .bss	00000001 g47
008173e5 g     O .bss	00000001 g85
008173e6 g     O .bss	00000001 g42
00806d80 g     F .text	00000018 _cleanup
008173e7 g     O .bss	00000001 PRE_g114
0080819c g     F .text	000000a8 _Balloc
008173e8 g     O .bss	00000001 g9
008173e9 g     O .bss	00000001 LRITO
008173ea g     O .bss	00000001 g114b
008173ec g     O .bss	00000004 _PRE_GO
008173f0 g     O .bss	00000001 PRE_g3
008173f1 g     O .bss	00000001 g102
0080de88 g     F .text	000000dc .hidden __gtdf2
00812b80 g     F .text	00000024 altera_nios2_gen2_irq_init
008173f2 g     O .bss	00000001 g115
008173f3 g     O .bss	00000001 AVI_start
00800000 g     F .entry	0000001c __reset
008173f4 g     O .bss	00000001 _cg15
008173f5 g     O .bss	00000001 PRE_g56
008173f6 g     O .bss	00000001 PRE_g13
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080afdc g     F .text	0000005c _fstat_r
008002b8 g     F .text	00000028 Ventricular_timer_ISR
008173f7 g     O .bss	00000001 PRE_g72
008174fc g     O .bss	00000004 errno
008173f8 g     O .bss	00000001 PRE_g75
008173f9 g     O .bss	00000001 PRE_g32
008173fa g     O .bss	00000001 _cg73
008173fb g     O .bss	00000001 g87
008173fc g     O .bss	00000001 g44
008092b4 g     F .text	00000008 __seofread
00817504 g     O .bss	00000004 alt_argv
0081d674 g       *ABS*	00000000 _gp
00812b50 g     F .text	00000030 usleep
008173fd g     O .bss	00000001 _cg84
008173fe g     O .bss	00000001 _cg45
008007d4 g     F .text	000000a4 reset
008173ff g     O .bss	00000001 _Pacemaker1_local_PVARP_start
00817400 g     O .bss	00000001 PRE_g65
00817401 g     O .bss	00000001 AVI_stop
00817402 g     O .bss	00000001 g25_e3
00817403 g     O .bss	00000001 g92
00817404 g     O .bss	00000001 g1
00817405 g     O .bss	00000001 g61
008142b0 g     O .rwdata	00000180 alt_fd_list
00817406 g     O .bss	00000001 g71
00817407 g     O .bss	00000001 g50b
00812cfc g     F .text	00000090 alt_find_dev
00807f2c g     F .text	00000148 memcpy
00806a50 g     F .text	0000000c _cleanup_r
0080f0ec g     F .text	000000dc .hidden __floatsidf
00817408 g     O .bss	00000001 g82
00812880 g     F .text	0000007c alt_io_redirect
0080df64 g     F .text	000000f4 .hidden __ltdf2
00817409 g     O .bss	00000001 _cg33
008133f8 g       *ABS*	00000000 __DTOR_END__
0081740a g     O .bss	00000001 _cg98
0081740b g     O .bss	00000001 g12
00812fc8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0081740c g     O .bss	00000001 g97
0081740d g     O .bss	00000001 g52
0081740e g     O .bss	00000001 _Pacemaker1_local_URI_stop
00809198 g     F .text	00000074 __fpclassifyd
00808f7c g     F .text	000000a4 __ratio
0080aa80 g     F .text	0000001c __vfiprintf_internal
0081740f g     O .bss	00000001 _cg85
00810618 g     F .text	0000021c altera_avalon_jtag_uart_read
00802a88 g     F .text	00000030 _printf_r
0080cbb0 g     F .text	00000064 .hidden __udivsi3
0080f660 g     F .text	000000a4 isatty
00817410 g     O .bss	00000001 g17
00817411 g     O .bss	00000001 g117_e1_fix_fix
00813538 g     O .rodata	000000c8 __mprec_tens
00807420 g     F .text	0000000c __locale_charset
00817412 g     O .bss	00000001 g76
00817413 g     O .bss	00000001 g31
00812f38 g     F .text	00000090 alt_icache_flush
00817414 g     O .bss	00000001 g37
008004e8 g     F .text	00000150 heartLEDs
008174f8 g     O .bss	00000004 __malloc_top_pad
0081567c g     O .rwdata	00000004 __mb_cur_max
00807450 g     F .text	0000000c _localeconv_r
00817415 g     O .bss	00000001 g62
00817416 g     O .bss	00000001 g117_fix4
0080b038 g     F .text	000004bc __sfvwrite_r
008085a8 g     F .text	0000003c __i2b
0081755c g     O .bss	00000018 PVARP_timer
0080920c g     F .text	00000054 _sbrk_r
00817417 g     O .bss	00000001 g84
00817418 g     O .bss	00000001 g41
00817419 g     O .bss	00000001 g118
0080b704 g     F .text	00000060 _read_r
0081741a g     O .bss	00000001 PRE_g49
0081569c g     O .rwdata	00000004 alt_max_fd
00800420 g     F .text	00000040 URI_timer_ISR
0081741b g     O .bss	00000001 g121_e2
0080acd0 g     F .text	000000f0 _fclose_r
0081741c g     O .bss	00000001 g8_e1
0081741d g     O .bss	00000001 _Pacemaker1_local_AEI_start
00806a18 g     F .text	00000030 fflush
008002e0 g     F .text	00000040 AVI_timer_ISR
008174f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0081741e g     O .bss	00000001 g18
0081741f g     O .bss	00000001 PRE_g81
00817420 g     O .bss	00000001 g117_fix0
00817421 g     O .bss	00000001 ASense
00817574 g     O .bss	00000018 VRP_timer
0080cc6c g     F .text	000008ac .hidden __adddf3
00817422 g     O .bss	00000001 PRE_g104
00817423 g     O .bss	00000001 PRE_g10
00808d24 g     F .text	0000010c __b2d
0080c580 g     F .text	00000538 .hidden __umoddi3
0080f82c g     F .text	000000d4 lseek
00815674 g     O .rwdata	00000004 _global_impure_ptr
00817424 g     O .bss	00000001 g48
00817425 g     O .bss	00000001 PRE_g35
0080b764 g     F .text	00000564 _realloc_r
00817704 g       *ABS*	00000000 __bss_end
008173b4 g     O .bss	00000004 LED1
008126cc g     F .text	000000f0 alt_iic_isr_register
00817426 g     O .bss	00000001 _Pacemaker1_local_VRP_ex
0080fcac g     F .text	00000108 alt_tick
008173c8 g     O .bss	00000004 button1_pressed
0080c008 g     F .text	00000578 .hidden __udivdi3
0080af38 g     F .text	00000024 _fputwc_r
00813510 g     O .rodata	00000028 __mprec_bigtens
0080838c g     F .text	00000104 __s2b
0080f1c8 g     F .text	000000a8 .hidden __floatunsidf
00817427 g     O .bss	00000001 g38
00817428 g     O .bss	00000001 _Pacemaker1_local__reg_FilteredVSense21
00817429 g     O .bss	00000001 g105
00808a64 g     F .text	00000060 __mcmp
00811b38 g     F .text	000000ac altera_avalon_uart_init
00806db8 g     F .text	00000018 __fp_lock_all
00812680 g     F .text	0000004c alt_ic_irq_enabled
0081758c g     O .bss	00000018 Atrial_timer
0080fc10 g     F .text	0000009c alt_alarm_stop
00817514 g     O .bss	00000004 alt_irq_active
0081742a g     O .bss	00000001 g117
0081742b g     O .bss	00000001 _cg20
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814288 g     O .rwdata	00000028 alt_dev_null
0081742c g     O .bss	00000001 _cg76
0081742d g     O .bss	00000001 g112_e13
0081742e g     O .bss	00000001 g42b
0081742f g     O .bss	00000001 _cg82
00812300 g     F .text	00000048 alt_dcache_flush_all
00808490 g     F .text	00000068 __hi0bits
00817430 g     O .bss	00000001 g22b
00817431 g     O .bss	00000001 g14b
00817432 g     O .bss	00000001 _cg28
0080f06c g     F .text	00000080 .hidden __fixdfsi
00817433 g     O .bss	00000001 g64
00817434 g     O .bss	00000001 g21
00817435 g     O .bss	00000001 g39_e4
00817436 g     O .bss	00000001 _cg107
00817437 g     O .bss	00000001 _cg14
008173c4 g     O .bss	00000004 button0_pressed
00817438 g     O .bss	00000001 _cg68
00817439 g     O .bss	00000001 g79
0081743a g     O .bss	00000001 g34
008156bc g       *ABS*	00000000 __ram_rwdata_end
0081743b g     O .bss	00000001 g5
0081743c g     O .bss	00000001 g17_e2
0081743d g     O .bss	00000001 _Pacemaker1_local__reg_AVI_ex21
00815694 g     O .rwdata	00000008 alt_dev_list
0081743e g     O .bss	00000001 g94
0081743f g     O .bss	00000001 g110
00817440 g     O .bss	00000001 g49
0080fdf0 g     F .text	000000f8 write
00817441 g     O .bss	00000001 _Pacemaker1_local_PVARP_ex
00817442 g     O .bss	00000001 g70_e7
00817443 g     O .bss	00000001 g2
00817444 g     O .bss	00000001 g7
00817445 g     O .bss	00000001 _cg90
00817446 g     O .bss	00000001 _cg53
008139e4 g       *ABS*	00000000 __ram_rodata_end
0080f574 g     F .text	000000b0 fstat
0080df64 g     F .text	000000f4 .hidden __ledf2
00817447 g     O .bss	00000001 g80
008173b8 g     O .bss	00000004 uiButton
008087dc g     F .text	00000140 __pow5mult
00809624 g     F .text	0000145c ___vfiprintf_internal_r
008174ec g     O .bss	00000004 __nlocale_changed
0080cc14 g     F .text	00000058 .hidden __umodsi3
00817704 g       *ABS*	00000000 end
00817448 g     O .bss	00000001 g100
0081121c g     F .text	000004d8 altera_avalon_lcd_16207_write
00817449 g     O .bss	00000001 g59
0081744a g     O .bss	00000001 g99
0081744b g     O .bss	00000001 g54
00812154 g     F .text	000001ac altera_avalon_uart_write
0081744c g     O .bss	00000001 g66
0081744d g     O .bss	00000001 g23
0081744e g     O .bss	00000001 g117_fix3
00810154 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0081744f g     O .bss	00000001 _cg44
008133f8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008173a4 g     O .bss	00000004 LRI_timeout
008119ac g     F .text	0000007c alt_avalon_timer_sc_init
00811a88 g     F .text	00000060 altera_avalon_uart_write_fd
0080f270 g     F .text	00000064 .hidden __clzsi2
00811ae8 g     F .text	00000050 altera_avalon_uart_close_fd
00810834 g     F .text	00000224 altera_avalon_jtag_uart_write
00806da8 g     F .text	00000004 __sfp_lock_acquire
00807e48 g     F .text	000000e4 memchr
00817450 g     O .bss	00000001 g14
00802af4 g     F .text	000021f8 ___vfprintf_internal_r
00817451 g     O .bss	00000001 g117_fix1
00806f0c g     F .text	00000310 _free_r
00817452 g     O .bss	00000001 g63_e6
0080742c g     F .text	00000010 __locale_mb_cur_max
00817453 g     O .bss	00000001 _cg6
00813244 g     F .text	00000180 __call_exitprocs
00817454 g     O .bss	00000001 g108_e12
00817455 g     O .bss	00000001 g101
00817456 g     O .bss	00000001 _Pacemaker1_local_AEI_ex
00817457 g     O .bss	00000001 _Pacemaker1_local__pre_FilteredVSense21
008174e8 g     O .bss	00000004 __mlocale_changed
00817458 g     O .bss	00000001 _Pacemaker1_local_FilteredVSense
00815680 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00817459 g     O .bss	00000001 _cg100
0081745a g     O .bss	00000001 g114
0081750c g     O .bss	00000004 _alt_tick_rate
0081745b g     O .bss	00000001 g56
0081745c g     O .bss	00000001 PRE_g52
0080891c g     F .text	00000148 __lshift
0081745d g     O .bss	00000001 VSense
00817510 g     O .bss	00000004 _alt_nticks
0080fa00 g     F .text	000000fc read
0080ff54 g     F .text	0000009c alt_sys_init
0081745e g     O .bss	00000001 g78
0081745f g     O .bss	00000001 g33
0081312c g     F .text	00000118 __register_exitproc
00817460 g     O .bss	00000001 PRE_g119
008173bc g     O .bss	00000004 maskedButton0
00817461 g     O .bss	00000001 g92b
00817462 g     O .bss	00000001 _Pacemaker1_local_LRI_stop
00817463 g     O .bss	00000001 g122
00800360 g     F .text	00000040 VRP_timer_ISR
008085e4 g     F .text	000001f8 __multiply
008104c0 g     F .text	00000068 altera_avalon_jtag_uart_close
00817464 g     O .bss	00000001 _Pacemaker1_local_LRI_ex
00817465 g     O .bss	00000001 PRE_g67
008139e4 g       *ABS*	00000000 __ram_rwdata_start
008133f8 g       *ABS*	00000000 __ram_rodata_start
0081751c g     O .bss	00000028 __malloc_current_mallinfo
00817466 g     O .bss	00000001 g117_e1_fix
00817467 g     O .bss	00000001 _Pacemaker1_local_FilteredASense
00808e30 g     F .text	0000014c __d2b
00817468 g     O .bss	00000001 _cg60
00817469 g     O .bss	00000001 PRE_g83
008175a4 g     O .bss	00000018 AVI_timer
0081746a g     O .bss	00000001 PRE_g106
008173a8 g     O .bss	00000004 URI_timeout
008175bc g     O .bss	00000018 LRI_timer
0080fff0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081746b g     O .bss	00000001 g35
00812e94 g     F .text	000000a4 alt_get_fd
00812ba4 g     F .text	00000158 alt_busy_sleep
0081746c g     O .bss	00000001 g15
0080abb8 g     F .text	00000054 _close_r
0081746d g     O .bss	00000001 g90
0081746e g     O .bss	00000001 _GO
008130b0 g     F .text	0000007c memcmp
0081746f g     O .bss	00000001 URITO
008100b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817470 g     O .bss	00000001 VRPTO
00817704 g       *ABS*	00000000 __alt_stack_base
00810100 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00817471 g     O .bss	00000001 PRE_g91
00804dc4 g     F .text	00000154 __swsetup_r
00800878 g     F .text	00002210 tick
0080d518 g     F .text	000008e8 .hidden __divdf3
00806c68 g     F .text	00000118 __sfp
00817472 g     O .bss	00000001 g63
00817473 g     O .bss	00000001 g20
00809094 g     F .text	00000078 __copybits
00817474 g     O .bss	00000001 AVITO
00817475 g     O .bss	00000001 g60
00813e80 g     O .rwdata	00000408 __malloc_av_
00806db4 g     F .text	00000004 __sinit_lock_release
0080e058 g     F .text	00000718 .hidden __muldf3
00817476 g     O .bss	00000001 PRE_g19
00809260 g     F .text	00000054 __sread
008175d4 g     O .bss	00000018 AEI_timer
00817477 g     O .bss	00000001 g66b
00812d8c g     F .text	00000108 alt_find_file
00817478 g     O .bss	00000001 g93
00812384 g     F .text	000000a4 alt_dev_llist_insert
0080f97c g     F .text	00000024 __malloc_lock
0080fb60 g     F .text	000000b0 sbrk
00817479 g     O .bss	00000001 _cg22
0081747a g     O .bss	00000001 g119
008069bc g     F .text	0000005c _fflush_r
0080ac0c g     F .text	000000c4 _calloc_r
0081747b g     O .bss	00000001 g84b
0081747c g     O .bss	00000001 PRE_g97
0081747d g     O .bss	00000001 g107b
00817394 g       *ABS*	00000000 __bss_start
0081747e g     O .bss	00000001 g86
0081747f g     O .bss	00000001 g43
00808074 g     F .text	00000128 memset
0080078c g     F .text	00000048 main
00817508 g     O .bss	00000004 alt_envp
008174f0 g     O .bss	00000004 __malloc_max_total_mem
00817480 g     O .bss	00000001 PRE_g43
00817481 g     O .bss	00000001 _cg11
00817482 g     O .bss	00000001 _Pacemaker1_local_AVI_ex
00817483 g     O .bss	00000001 g11b
00810050 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00817484 g     O .bss	00000001 g98b
00817485 g     O .bss	00000001 g53b
00817486 g     O .bss	00000001 PVARPTO
0080be08 g     F .text	00000018 __swbuf
00817487 g     O .bss	00000001 g36
008117a0 g     F .text	00000134 altera_avalon_lcd_16207_init
00817488 g     O .bss	00000001 _Pacemaker1_local_URI_start
008175ec g     O .bss	00000018 URI_timer
00817489 g     O .bss	00000001 g89
0081748a g     O .bss	00000001 g46
00809394 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0081748b g     O .bss	00000001 g47_e5
0080adc0 g     F .text	00000014 fclose
00805118 g     F .text	00001688 _dtoa_r
0080763c g     F .text	0000080c _malloc_r
0080bf7c g     F .text	00000030 __ascii_wctomb
0081748c g     O .bss	00000001 g57b
008156a0 g     O .rwdata	00000004 alt_errno
0080721c g     F .text	000000c4 _fwalk
0081748d g     O .bss	00000001 g95
0081748e g     O .bss	00000001 g50
008003e0 g     F .text	00000040 LRI_timer_ISR
0081748f g     O .bss	00000001 g96
00817490 g     O .bss	00000001 g51
0080cab8 g     F .text	00000084 .hidden __divsi3
00817398 g     O .bss	00000004 PVARP_timeout
00806de8 g     F .text	00000124 _malloc_trim_r
008133f8 g       *ABS*	00000000 __CTOR_END__
0080939c g     F .text	000000dc strcmp
00817491 g     O .bss	00000001 _cg37
00817492 g     O .bss	00000001 g107
008133f8 g       *ABS*	00000000 __flash_rodata_start
00817493 g     O .bss	00000001 g113
008133f8 g       *ABS*	00000000 __DTOR_LIST__
00800320 g     F .text	00000040 PVARP_timer_ISR
0080de00 g     F .text	00000088 .hidden __nedf2
0080ff1c g     F .text	00000038 alt_irq_init
0080fafc g     F .text	00000064 alt_release_fd
00817494 g     O .bss	00000001 g104
00817495 g     O .bss	00000001 g73b
00817496 g     O .bss	00000001 g13
00813620 g     O .rodata	00000100 .hidden __clz_tab
008174e4 g     O .bss	00000004 _PathLocale
00817497 g     O .bss	00000001 PRE_g41
00817498 g     O .bss	00000001 g98
00817499 g     O .bss	00000001 g53
0081749a g     O .bss	00000001 g8
0081749b g     O .bss	00000001 g57
0081749c g     O .bss	00000001 PRE_g89
00813064 g     F .text	00000014 atexit
0080ab58 g     F .text	00000060 _write_r
0081739c g     O .bss	00000004 VRP_timeout
0081749d g     O .bss	00000001 g70
0081749e g     O .bss	00000001 _cg66
0081749f g     O .bss	00000001 g102_e11
0080745c g     F .text	00000018 setlocale
008173a0 g     O .bss	00000004 AEI_timeout
008174a0 g     O .bss	00000001 g36b
008174a1 g     O .bss	00000001 _Pacemaker1_local_AVI_stop
008174a2 g     O .bss	00000001 g116
00815678 g     O .rwdata	00000004 _impure_ptr
00817500 g     O .bss	00000004 alt_argc
008174a3 g     O .bss	00000001 g6
008067a0 g     F .text	0000021c __sflush_r
008174a4 g     O .bss	00000001 _cg93
00812488 g     F .text	00000060 _do_dtors
00807448 g     F .text	00000008 __locale_cjk_lang
008174a5 g     O .bss	00000001 _Pacemaker1_local_URI_ex
008174a6 g     O .bss	00000001 g82b
008174a7 g     O .bss	00000001 g72
008174a8 g     O .bss	00000001 g81
00800020 g       .exceptions	00000000 alt_irq_entry
008174a9 g     O .bss	00000001 PRE_g110
00808cc0 g     F .text	00000064 __ulp
00806dd0 g     F .text	00000018 __fp_unlock_all
008118d4 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008174aa g     O .bss	00000001 _cg50
008174ab g     O .bss	00000001 PRE_g99
0081568c g     O .rwdata	00000008 alt_fs_list
008174ac g     O .bss	00000001 g0
00800460 g     F .text	00000088 pollButtons
008173ac g     O .bss	00000004 LEDbits
008174ad g     O .bss	00000001 g75
008174ae g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807474 g     F .text	0000000c localeconv
008174af g     O .bss	00000001 g79_e8
008174b0 g     O .bss	00000001 PRE_g21
008174b1 g     O .bss	00000001 g16
008174b2 g     O .bss	00000001 g105b
0081251c g     F .text	00000050 alt_ic_isr_register
008174b3 g     O .bss	00000001 g58
008174b4 g     O .bss	00000001 _cg77
008174b5 g     O .bss	00000001 _cg57
008174b6 g     O .bss	00000001 g68
008174b7 g     O .bss	00000001 g25
008174b8 g     O .bss	00000001 g90b
008156bc g       *ABS*	00000000 _edata
00811a28 g     F .text	00000060 altera_avalon_uart_read_fd
00817704 g       *ABS*	00000000 _end
008174b9 g     O .bss	00000001 g11
0080add4 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008174ba g     O .bss	00000001 g95_e10
00810528 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008174bb g     O .bss	00000001 g65
008174bc g     O .bss	00000001 g22
008174bd g     O .bss	00000001 g28
008174be g     O .bss	00000001 g73
008125f4 g     F .text	0000008c alt_ic_irq_disable
008174bf g     O .bss	00000001 g117_e1
008092bc g     F .text	0000007c __swrite
00815684 g     O .rwdata	00000004 __malloc_trim_threshold
0080743c g     F .text	0000000c __locale_msgcharset
00813078 g     F .text	00000038 exit
008072e0 g     F .text	000000c4 _fwalk_reent
00808ac4 g     F .text	000001fc __mdiff
008174c0 g     O .bss	00000001 g77
008174c1 g     O .bss	00000001 g32
008174c2 g     O .bss	00000001 _Pacemaker1_local_VRP_stop
0080cb3c g     F .text	00000074 .hidden __modsi3
008156b8 g     O .rwdata	00000004 __ctype_ptr__
008174c3 g     O .bss	00000001 g20b
008174c4 g     O .bss	00000001 g88
008174c5 g     O .bss	00000001 g45
008174c6 g     O .bss	00000001 _Pacemaker1_local_PVARP_stop
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806dac g     F .text	00000004 __sfp_lock_release
008174c7 g     O .bss	00000001 _cg23
00800000 g       *ABS*	00000000 __alt_mem_sdram
008174c8 g     O .bss	00000001 _cg92
008174c9 g     O .bss	00000001 _cg55
00813762 g     O .rodata	00000101 _ctype_
008174ca g     O .bss	00000001 PRE_g5
00817394 g     O .bss	00000004 AVI_timeout
00811eac g     F .text	00000054 altera_avalon_uart_close
008174cb g     O .bss	00000001 PRE_g30
008133c4 g     F .text	00000034 _exit
0080f2d4 g     F .text	0000012c alt_alarm_start
008174cc g     O .bss	00000001 g121
00800638 g     F .text	00000154 startTimers
00807480 g     F .text	000001bc __smakebuf_r
008174cd g     O .bss	00000001 VPace
00809478 g     F .text	00000098 strlen
008174ce g     O .bss	00000001 g39
008129fc g     F .text	00000154 open
0080de88 g     F .text	000000dc .hidden __gedf2
008174cf g     O .bss	00000001 g120
008174d0 g     O .bss	00000001 g117_fix2
00815688 g     O .rwdata	00000004 __wctomb
0080960c g     F .text	00000018 __sprint_r
008124e8 g     F .text	00000034 alt_icache_flush_all
008174d1 g     O .bss	00000001 g29
008174d2 g     O .bss	00000001 _cg4
008174d3 g     O .bss	00000001 g67
008174d4 g     O .bss	00000001 g24
008156b4 g     O .rwdata	00000004 alt_priority_mask
008174d5 g     O .bss	00000001 g109
00800290 g     F .text	00000028 Atrial_timer_ISR
0081256c g     F .text	00000088 alt_ic_irq_enable
00804cec g     F .text	0000001c __vfprintf_internal
008173b0 g     O .bss	00000004 LED0
00811f3c g     F .text	000001dc altera_avalon_uart_read
0080bfac g     F .text	0000005c _wctomb_r
008174d6 g     O .bss	00000001 g4b
0080e770 g     F .text	000008fc .hidden __subdf3
008174d7 g     O .bss	00000001 g106
008084f8 g     F .text	000000b0 __lo0bits
008174d8 g     O .bss	00000001 _cg31
008174d9 g     O .bss	00000001 g10
008156a8 g     O .rwdata	00000008 alt_alarm_list
008174da g     O .bss	00000001 _cg62
00812428 g     F .text	00000060 _do_ctors
0080bebc g     F .text	000000c0 wcrtomb
008174db g     O .bss	00000001 AEITO
008174dc g     O .bss	00000001 g69
008174dd g     O .bss	00000001 g26
0080f43c g     F .text	000000d0 close
008174de g     O .bss	00000001 g116_e14
008174df g     O .bss	00000001 _Pacemaker1_local_AEI_stop
0080f76c g     F .text	00000084 alt_load
0080af5c g     F .text	00000080 fputwc
00806db0 g     F .text	00000004 __sinit_lock_acquire
008174e0 g     O .bss	00000001 _cg105
0080826c g     F .text	00000120 __multadd
00808244 g     F .text	00000028 _Bfree
008174e1 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109d8104 	addi	r2,r2,30212
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109d8104 	addi	r2,r2,30212
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7a917 	ldw	r2,-24924(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7a917 	ldw	r2,-24924(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b59d14 	ori	gp,gp,54900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109ce514 	ori	r2,r2,29588

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ddc114 	ori	r3,r3,30468

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080f76c0 	call	80f76c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f9000 	call	80f900 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <Atrial_timer_ISR>:
unsigned int maskedButton1 = 0;
unsigned int button0_pressed = 0;
unsigned int button1_pressed = 0;

alt_u32 Atrial_timer_ISR(void* context)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	LED0 = 0;
  8002a0:	d0274f15 	stw	zero,-25284(gp)
	return 0;
  8002a4:	0005883a 	mov	r2,zero
}
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <Ventricular_timer_ISR>:

alt_u32 Ventricular_timer_ISR(void* context)
{
  8002b8:	defffe04 	addi	sp,sp,-8
  8002bc:	df000115 	stw	fp,4(sp)
  8002c0:	df000104 	addi	fp,sp,4
  8002c4:	e13fff15 	stw	r4,-4(fp)
	LED1 = 0;
  8002c8:	d0275015 	stw	zero,-25280(gp)
	return 1;
  8002cc:	00800044 	movi	r2,1
}
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <AVI_timer_ISR>:

alt_u32 AVI_timer_ISR(void* context)
{
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	dfc00215 	stw	ra,8(sp)
  8002e8:	df000115 	stw	fp,4(sp)
  8002ec:	df000104 	addi	fp,sp,4
  8002f0:	e13fff15 	stw	r4,-4(fp)
	AVITO = 1;
  8002f4:	00800044 	movi	r2,1
  8002f8:	d0a78005 	stb	r2,-25088(gp)
	printf("AVI timed out");
  8002fc:	01002074 	movhi	r4,129
  800300:	210cfe04 	addi	r4,r4,13304
  800304:	0802ab80 	call	802ab8 <printf>

//	alt_alarm_stop(&AVI_timer);
	return 0;
  800308:	0005883a 	mov	r2,zero
}
  80030c:	e037883a 	mov	sp,fp
  800310:	dfc00117 	ldw	ra,4(sp)
  800314:	df000017 	ldw	fp,0(sp)
  800318:	dec00204 	addi	sp,sp,8
  80031c:	f800283a 	ret

00800320 <PVARP_timer_ISR>:

alt_u32 PVARP_timer_ISR(void* context)
{
  800320:	defffd04 	addi	sp,sp,-12
  800324:	dfc00215 	stw	ra,8(sp)
  800328:	df000115 	stw	fp,4(sp)
  80032c:	df000104 	addi	fp,sp,4
  800330:	e13fff15 	stw	r4,-4(fp)
	PVARPTO = 1;
  800334:	00800044 	movi	r2,1
  800338:	d0a78485 	stb	r2,-25070(gp)
	printf("PVARP timed out");
  80033c:	01002074 	movhi	r4,129
  800340:	210d0204 	addi	r4,r4,13320
  800344:	0802ab80 	call	802ab8 <printf>
//	alt_alarm_stop(&PVARP_timer);
	return 0;
  800348:	0005883a 	mov	r2,zero
}
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <VRP_timer_ISR>:

alt_u32 VRP_timer_ISR(void* context)
{
  800360:	defffd04 	addi	sp,sp,-12
  800364:	dfc00215 	stw	ra,8(sp)
  800368:	df000115 	stw	fp,4(sp)
  80036c:	df000104 	addi	fp,sp,4
  800370:	e13fff15 	stw	r4,-4(fp)
	VRPTO = 1;
  800374:	00800044 	movi	r2,1
  800378:	d0a77f05 	stb	r2,-25092(gp)
	printf("VRP timed out");
  80037c:	01002074 	movhi	r4,129
  800380:	210d0604 	addi	r4,r4,13336
  800384:	0802ab80 	call	802ab8 <printf>
//	alt_alarm_stop(&VRP_timer);
	return 0;
  800388:	0005883a 	mov	r2,zero
}
  80038c:	e037883a 	mov	sp,fp
  800390:	dfc00117 	ldw	ra,4(sp)
  800394:	df000017 	ldw	fp,0(sp)
  800398:	dec00204 	addi	sp,sp,8
  80039c:	f800283a 	ret

008003a0 <AEI_timer_ISR>:

alt_u32 AEI_timer_ISR(void* context)
{
  8003a0:	defffd04 	addi	sp,sp,-12
  8003a4:	dfc00215 	stw	ra,8(sp)
  8003a8:	df000115 	stw	fp,4(sp)
  8003ac:	df000104 	addi	fp,sp,4
  8003b0:	e13fff15 	stw	r4,-4(fp)
	AEITO = 1;
  8003b4:	00800044 	movi	r2,1
  8003b8:	d0a799c5 	stb	r2,-24985(gp)
	printf("AEI timed out");
  8003bc:	01002074 	movhi	r4,129
  8003c0:	210d0a04 	addi	r4,r4,13352
  8003c4:	0802ab80 	call	802ab8 <printf>

//	alt_alarm_stop(&AEI_timer);
	return 0;
  8003c8:	0005883a 	mov	r2,zero
}
  8003cc:	e037883a 	mov	sp,fp
  8003d0:	dfc00117 	ldw	ra,4(sp)
  8003d4:	df000017 	ldw	fp,0(sp)
  8003d8:	dec00204 	addi	sp,sp,8
  8003dc:	f800283a 	ret

008003e0 <LRI_timer_ISR>:

alt_u32 LRI_timer_ISR(void* context)
{
  8003e0:	defffd04 	addi	sp,sp,-12
  8003e4:	dfc00215 	stw	ra,8(sp)
  8003e8:	df000115 	stw	fp,4(sp)
  8003ec:	df000104 	addi	fp,sp,4
  8003f0:	e13fff15 	stw	r4,-4(fp)
	LRITO = 1;
  8003f4:	00800044 	movi	r2,1
  8003f8:	d0a75d45 	stb	r2,-25227(gp)
	printf("LRI timed out");
  8003fc:	01002074 	movhi	r4,129
  800400:	210d0e04 	addi	r4,r4,13368
  800404:	0802ab80 	call	802ab8 <printf>

//	alt_alarm_stop(&LRI_timer);
	return 0;
  800408:	0005883a 	mov	r2,zero
}
  80040c:	e037883a 	mov	sp,fp
  800410:	dfc00117 	ldw	ra,4(sp)
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00204 	addi	sp,sp,8
  80041c:	f800283a 	ret

00800420 <URI_timer_ISR>:

alt_u32 URI_timer_ISR(void* context)
{
  800420:	defffd04 	addi	sp,sp,-12
  800424:	dfc00215 	stw	ra,8(sp)
  800428:	df000115 	stw	fp,4(sp)
  80042c:	df000104 	addi	fp,sp,4
  800430:	e13fff15 	stw	r4,-4(fp)
	URITO = 1;
  800434:	00800044 	movi	r2,1
  800438:	d0a77ec5 	stb	r2,-25093(gp)
	printf("URI timed out");
  80043c:	01002074 	movhi	r4,129
  800440:	210d1204 	addi	r4,r4,13384
  800444:	0802ab80 	call	802ab8 <printf>
//	alt_alarm_stop(&URI_timer);
	return 0;
  800448:	0005883a 	mov	r2,zero
}
  80044c:	e037883a 	mov	sp,fp
  800450:	dfc00117 	ldw	ra,4(sp)
  800454:	df000017 	ldw	fp,0(sp)
  800458:	dec00204 	addi	sp,sp,8
  80045c:	f800283a 	ret

00800460 <pollButtons>:

void pollButtons()
{
  800460:	defffd04 	addi	sp,sp,-12
  800464:	df000215 	stw	fp,8(sp)
  800468:	df000204 	addi	fp,sp,8
	// Poll buttons
	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  80046c:	00804434 	movhi	r2,272
  800470:	10842804 	addi	r2,r2,4256
  800474:	10800037 	ldwio	r2,0(r2)
  800478:	d0a75115 	stw	r2,-25276(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// clear the edge capture register
  80047c:	0007883a 	mov	r3,zero
  800480:	00804434 	movhi	r2,272
  800484:	10842b04 	addi	r2,r2,4268
  800488:	10c00035 	stwio	r3,0(r2)
	int maskedButton0 = uiButton & (1 << 0);
  80048c:	d0a75117 	ldw	r2,-25276(gp)
  800490:	1080004c 	andi	r2,r2,1
  800494:	e0bffe15 	stw	r2,-8(fp)
	int maskedButton1 = uiButton & (1 << 1);
  800498:	d0a75117 	ldw	r2,-25276(gp)
  80049c:	1080008c 	andi	r2,r2,2
  8004a0:	e0bfff15 	stw	r2,-4(fp)

	if (maskedButton0 > 0){
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	0080020e 	bge	zero,r2,8004b4 <pollButtons+0x54>
		ASense = 0;
  8004ac:	d0276b45 	stb	zero,-25171(gp)
  8004b0:	00000206 	br	8004bc <pollButtons+0x5c>
	} else {
		ASense = 1;
  8004b4:	00800044 	movi	r2,1
  8004b8:	d0a76b45 	stb	r2,-25171(gp)
	}
	if (maskedButton1 > 0){
  8004bc:	e0bfff17 	ldw	r2,-4(fp)
  8004c0:	0080020e 	bge	zero,r2,8004cc <pollButtons+0x6c>
		VSense = 0;
  8004c4:	d0277a45 	stb	zero,-25111(gp)

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004c8:	00000206 	br	8004d4 <pollButtons+0x74>
		ASense = 1;
	}
	if (maskedButton1 > 0){
		VSense = 0;
	} else {
		VSense = 1;
  8004cc:	00800044 	movi	r2,1
  8004d0:	d0a77a45 	stb	r2,-25111(gp)

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}
  8004d4:	0001883a 	nop
  8004d8:	e037883a 	mov	sp,fp
  8004dc:	df000017 	ldw	fp,0(sp)
  8004e0:	dec00104 	addi	sp,sp,4
  8004e4:	f800283a 	ret

008004e8 <heartLEDs>:

void heartLEDs()
{
  8004e8:	defffc04 	addi	sp,sp,-16
  8004ec:	dfc00315 	stw	ra,12(sp)
  8004f0:	df000215 	stw	fp,8(sp)
  8004f4:	df000204 	addi	fp,sp,8

	unsigned int A_LED = ASense || APace;
  8004f8:	d0a76b43 	ldbu	r2,-25171(gp)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	1080201c 	xori	r2,r2,128
  800504:	10bfe004 	addi	r2,r2,-128
  800508:	1000051e 	bne	r2,zero,800520 <heartLEDs+0x38>
  80050c:	d0a75783 	ldbu	r2,-25250(gp)
  800510:	10803fcc 	andi	r2,r2,255
  800514:	1080201c 	xori	r2,r2,128
  800518:	10bfe004 	addi	r2,r2,-128
  80051c:	10000226 	beq	r2,zero,800528 <heartLEDs+0x40>
  800520:	00800044 	movi	r2,1
  800524:	00000106 	br	80052c <heartLEDs+0x44>
  800528:	0005883a 	mov	r2,zero
  80052c:	e0bffe15 	stw	r2,-8(fp)
	unsigned int V_LED = VSense || VPace;
  800530:	d0a77a43 	ldbu	r2,-25111(gp)
  800534:	10803fcc 	andi	r2,r2,255
  800538:	1080201c 	xori	r2,r2,128
  80053c:	10bfe004 	addi	r2,r2,-128
  800540:	1000051e 	bne	r2,zero,800558 <heartLEDs+0x70>
  800544:	d0a79643 	ldbu	r2,-24999(gp)
  800548:	10803fcc 	andi	r2,r2,255
  80054c:	1080201c 	xori	r2,r2,128
  800550:	10bfe004 	addi	r2,r2,-128
  800554:	10000226 	beq	r2,zero,800560 <heartLEDs+0x78>
  800558:	00800044 	movi	r2,1
  80055c:	00000106 	br	800564 <heartLEDs+0x7c>
  800560:	0005883a 	mov	r2,zero
  800564:	e0bfff15 	stw	r2,-4(fp)

//	printf("A_LED is: %d \n", A_LED);
//	printf("V_LED is: %d \n", V_LED);

	if (A_LED == 1)
  800568:	e0bffe17 	ldw	r2,-8(fp)
  80056c:	10800058 	cmpnei	r2,r2,1
  800570:	10000c1e 	bne	r2,zero,8005a4 <heartLEDs+0xbc>
	{
		LED0 = 1;
  800574:	00800044 	movi	r2,1
  800578:	d0a74f15 	stw	r2,-25284(gp)
		// Start timer
		alt_alarm_stop(&Atrial_timer);
  80057c:	01002074 	movhi	r4,129
  800580:	211d6304 	addi	r4,r4,30092
  800584:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL);
  800588:	000f883a 	mov	r7,zero
  80058c:	01802034 	movhi	r6,128
  800590:	3180a404 	addi	r6,r6,656
  800594:	01401904 	movi	r5,100
  800598:	01002074 	movhi	r4,129
  80059c:	211d6304 	addi	r4,r4,30092
  8005a0:	080f2d40 	call	80f2d4 <alt_alarm_start>
	}

	if (V_LED == 1)
  8005a4:	e0bfff17 	ldw	r2,-4(fp)
  8005a8:	10800058 	cmpnei	r2,r2,1
  8005ac:	10000c1e 	bne	r2,zero,8005e0 <heartLEDs+0xf8>
	{
		LED1 = 1;
  8005b0:	00800044 	movi	r2,1
  8005b4:	d0a75015 	stw	r2,-25280(gp)
		// Start timer
		alt_alarm_stop(&Ventricular_timer);
  8005b8:	01002074 	movhi	r4,129
  8005bc:	211d5104 	addi	r4,r4,30020
  8005c0:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL);
  8005c4:	000f883a 	mov	r7,zero
  8005c8:	01802034 	movhi	r6,128
  8005cc:	3180ae04 	addi	r6,r6,696
  8005d0:	01401904 	movi	r5,100
  8005d4:	01002074 	movhi	r4,129
  8005d8:	211d5104 	addi	r4,r4,30020
  8005dc:	080f2d40 	call	80f2d4 <alt_alarm_start>
	}

	LEDbits = 0;
  8005e0:	d0274e15 	stw	zero,-25288(gp)
	LEDbits = LEDbits | (A_LED << 0);
  8005e4:	d0e74e17 	ldw	r3,-25288(gp)
  8005e8:	e0bffe17 	ldw	r2,-8(fp)
  8005ec:	1884b03a 	or	r2,r3,r2
  8005f0:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = LEDbits | (V_LED << 1);
  8005f4:	e0bfff17 	ldw	r2,-4(fp)
  8005f8:	1085883a 	add	r2,r2,r2
  8005fc:	1007883a 	mov	r3,r2
  800600:	d0a74e17 	ldw	r2,-25288(gp)
  800604:	1884b03a 	or	r2,r3,r2
  800608:	d0a74e15 	stw	r2,-25288(gp)

//	unsigned int allON = 0b00001111;

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits);
  80060c:	d0a74e17 	ldw	r2,-25288(gp)
  800610:	1007883a 	mov	r3,r2
  800614:	00804434 	movhi	r2,272
  800618:	10841c04 	addi	r2,r2,4208
  80061c:	10c00035 	stwio	r3,0(r2)
}
  800620:	0001883a 	nop
  800624:	e037883a 	mov	sp,fp
  800628:	dfc00117 	ldw	ra,4(sp)
  80062c:	df000017 	ldw	fp,0(sp)
  800630:	dec00204 	addi	sp,sp,8
  800634:	f800283a 	ret

00800638 <startTimers>:

void startTimers()
{
  800638:	defffe04 	addi	sp,sp,-8
  80063c:	dfc00115 	stw	ra,4(sp)
  800640:	df000015 	stw	fp,0(sp)
  800644:	d839883a 	mov	fp,sp
	if (AVI_stop == 1)
  800648:	d0a76343 	ldbu	r2,-25203(gp)
  80064c:	10803fcc 	andi	r2,r2,255
  800650:	1080201c 	xori	r2,r2,128
  800654:	10bfe004 	addi	r2,r2,-128
  800658:	10800058 	cmpnei	r2,r2,1
  80065c:	1000321e 	bne	r2,zero,800728 <startTimers+0xf0>
	{

		alt_alarm_stop(&PVARP_timer);
  800660:	01002074 	movhi	r4,129
  800664:	211d5704 	addi	r4,r4,30044
  800668:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_stop(&VRP_timer);
  80066c:	01002074 	movhi	r4,129
  800670:	211d5d04 	addi	r4,r4,30068
  800674:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_stop(&AEI_timer);
  800678:	01002074 	movhi	r4,129
  80067c:	211d7504 	addi	r4,r4,30164
  800680:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_stop(&LRI_timer);
  800684:	01002074 	movhi	r4,129
  800688:	211d6f04 	addi	r4,r4,30140
  80068c:	080fc100 	call	80fc10 <alt_alarm_stop>
		alt_alarm_stop(&URI_timer);
  800690:	01002074 	movhi	r4,129
  800694:	211d7b04 	addi	r4,r4,30188
  800698:	080fc100 	call	80fc10 <alt_alarm_stop>

		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
  80069c:	000f883a 	mov	r7,zero
  8006a0:	01802034 	movhi	r6,128
  8006a4:	3180c804 	addi	r6,r6,800
  8006a8:	01400c84 	movi	r5,50
  8006ac:	01002074 	movhi	r4,129
  8006b0:	211d5704 	addi	r4,r4,30044
  8006b4:	080f2d40 	call	80f2d4 <alt_alarm_start>
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
  8006b8:	000f883a 	mov	r7,zero
  8006bc:	01802034 	movhi	r6,128
  8006c0:	3180d804 	addi	r6,r6,864
  8006c4:	01402584 	movi	r5,150
  8006c8:	01002074 	movhi	r4,129
  8006cc:	211d5d04 	addi	r4,r4,30068
  8006d0:	080f2d40 	call	80f2d4 <alt_alarm_start>
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
  8006d4:	000f883a 	mov	r7,zero
  8006d8:	01802034 	movhi	r6,128
  8006dc:	3180e804 	addi	r6,r6,928
  8006e0:	0140c804 	movi	r5,800
  8006e4:	01002074 	movhi	r4,129
  8006e8:	211d7504 	addi	r4,r4,30164
  8006ec:	080f2d40 	call	80f2d4 <alt_alarm_start>
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
  8006f0:	000f883a 	mov	r7,zero
  8006f4:	01802034 	movhi	r6,128
  8006f8:	3180f804 	addi	r6,r6,992
  8006fc:	0140ed84 	movi	r5,950
  800700:	01002074 	movhi	r4,129
  800704:	211d6f04 	addi	r4,r4,30140
  800708:	080f2d40 	call	80f2d4 <alt_alarm_start>
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
  80070c:	000f883a 	mov	r7,zero
  800710:	01802034 	movhi	r6,128
  800714:	31810804 	addi	r6,r6,1056
  800718:	0140e104 	movi	r5,900
  80071c:	01002074 	movhi	r4,129
  800720:	211d7b04 	addi	r4,r4,30188
  800724:	080f2d40 	call	80f2d4 <alt_alarm_start>
	}
	if (AVI_start == 1)
  800728:	d0a75fc3 	ldbu	r2,-25217(gp)
  80072c:	10803fcc 	andi	r2,r2,255
  800730:	1080201c 	xori	r2,r2,128
  800734:	10bfe004 	addi	r2,r2,-128
  800738:	10800058 	cmpnei	r2,r2,1
  80073c:	1000071e 	bne	r2,zero,80075c <startTimers+0x124>
	{
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  800740:	000f883a 	mov	r7,zero
  800744:	01802034 	movhi	r6,128
  800748:	3180b804 	addi	r6,r6,736
  80074c:	01404b04 	movi	r5,300
  800750:	01002074 	movhi	r4,129
  800754:	211d6904 	addi	r4,r4,30116
  800758:	080f2d40 	call	80f2d4 <alt_alarm_start>
	}

	AVI_timeout = 0;
  80075c:	d0274815 	stw	zero,-25312(gp)
	PVARP_timeout = 0;
  800760:	d0274915 	stw	zero,-25308(gp)
	VRP_timeout = 0;
  800764:	d0274a15 	stw	zero,-25304(gp)
	AEI_timeout = 0;
  800768:	d0274b15 	stw	zero,-25300(gp)
	LRI_timeout = 0;
  80076c:	d0274c15 	stw	zero,-25296(gp)
	URI_timeout = 0;
  800770:	d0274d15 	stw	zero,-25292(gp)
}
  800774:	0001883a 	nop
  800778:	e037883a 	mov	sp,fp
  80077c:	dfc00117 	ldw	ra,4(sp)
  800780:	df000017 	ldw	fp,0(sp)
  800784:	dec00204 	addi	sp,sp,8
  800788:	f800283a 	ret

0080078c <main>:

int main()
{
  80078c:	defffe04 	addi	sp,sp,-8
  800790:	dfc00115 	stw	ra,4(sp)
  800794:	df000015 	stw	fp,0(sp)
  800798:	d839883a 	mov	fp,sp
	// Reset the scc
	reset();
  80079c:	08007d40 	call	8007d4 <reset>



	// Start the AVI timer
	AVI_timeout = 0;
  8007a0:	d0274815 	stw	zero,-25312(gp)
	alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  8007a4:	000f883a 	mov	r7,zero
  8007a8:	01802034 	movhi	r6,128
  8007ac:	3180b804 	addi	r6,r6,736
  8007b0:	01404b04 	movi	r5,300
  8007b4:	01002074 	movhi	r4,129
  8007b8:	211d6904 	addi	r4,r4,30116
  8007bc:	080f2d40 	call	80f2d4 <alt_alarm_start>

	while(1) // Main loop
	{
		tick();
  8007c0:	08008780 	call	800878 <tick>
		startTimers();
  8007c4:	08006380 	call	800638 <startTimers>
		pollButtons();
  8007c8:	08004600 	call	800460 <pollButtons>
		heartLEDs();
  8007cc:	08004e80 	call	8004e8 <heartLEDs>
	}
  8007d0:	003ffb06 	br	8007c0 <__alt_mem_onchip_mem+0xff7807c0>

008007d4 <reset>:
char g117_e1_fix_fix;
char g117_e1_fix;
char g117_e1;
char g121_e2;
int _PRE_GO;
void reset(){
  8007d4:	deffff04 	addi	sp,sp,-4
  8007d8:	df000015 	stw	fp,0(sp)
  8007dc:	d839883a 	mov	fp,sp
   _GO = 1;
  8007e0:	00800044 	movi	r2,1
  8007e4:	d0a77e85 	stb	r2,-25094(gp)
   _PRE_GO = 0;
  8007e8:	d0275e15 	stw	zero,-25224(gp)
   PRE_g3 = 0;
  8007ec:	d0275f05 	stb	zero,-25220(gp)
   PRE_g5 = 0;
  8007f0:	d0279585 	stb	zero,-25002(gp)
   PRE_g10 = 0;
  8007f4:	d0276bc5 	stb	zero,-25169(gp)
   PRE_g13 = 0;
  8007f8:	d0276085 	stb	zero,-25214(gp)
   PRE_g19 = 0;
  8007fc:	d0278085 	stb	zero,-25086(gp)
   PRE_g21 = 0;
  800800:	d0278f05 	stb	zero,-25028(gp)
   PRE_g27 = 0;
  800804:	d0275bc5 	stb	zero,-25233(gp)
   PRE_g30 = 0;
  800808:	d02795c5 	stb	zero,-25001(gp)
   PRE_g32 = 0;
  80080c:	d0276145 	stb	zero,-25211(gp)
   PRE_g35 = 0;
  800810:	d0276c45 	stb	zero,-25167(gp)
   PRE_g41 = 0;
  800814:	d02788c5 	stb	zero,-25053(gp)
   PRE_g43 = 0;
  800818:	d0278305 	stb	zero,-25076(gp)
   PRE_g49 = 0;
  80081c:	d0276985 	stb	zero,-25178(gp)
   PRE_g52 = 0;
  800820:	d0277a05 	stb	zero,-25112(gp)
   PRE_g56 = 0;
  800824:	d0276045 	stb	zero,-25215(gp)
   PRE_g65 = 0;
  800828:	d0276305 	stb	zero,-25204(gp)
   PRE_g67 = 0;
  80082c:	d0277c45 	stb	zero,-25103(gp)
   PRE_g72 = 0;
  800830:	d02760c5 	stb	zero,-25213(gp)
   PRE_g75 = 0;
  800834:	d0276105 	stb	zero,-25212(gp)
   PRE_g81 = 0;
  800838:	d0276ac5 	stb	zero,-25173(gp)
   PRE_g83 = 0;
  80083c:	d0277d45 	stb	zero,-25099(gp)
   PRE_g89 = 0;
  800840:	d0278a05 	stb	zero,-25048(gp)
   PRE_g91 = 0;
  800844:	d0277f45 	stb	zero,-25091(gp)
   PRE_g97 = 0;
  800848:	d0278205 	stb	zero,-25080(gp)
   PRE_g99 = 0;
  80084c:	d0278dc5 	stb	zero,-25033(gp)
   PRE_g104 = 0;
  800850:	d0276b85 	stb	zero,-25170(gp)
   PRE_g106 = 0;
  800854:	d0277d85 	stb	zero,-25098(gp)
   PRE_g110 = 0;
  800858:	d0278d45 	stb	zero,-25035(gp)
   PRE_g114 = 0;
  80085c:	d0275cc5 	stb	zero,-25229(gp)
   PRE_g119 = 0;
  800860:	d0277b05 	stb	zero,-25108(gp)
   return;
  800864:	0001883a 	nop
}
  800868:	e037883a 	mov	sp,fp
  80086c:	df000017 	ldw	fp,0(sp)
  800870:	dec00104 	addi	sp,sp,4
  800874:	f800283a 	ret

00800878 <tick>:
void tick(){
  800878:	deffff04 	addi	sp,sp,-4
  80087c:	df000015 	stw	fp,0(sp)
  800880:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800884:	d0a75e17 	ldw	r2,-25224(gp)
  800888:	10800058 	cmpnei	r2,r2,1
  80088c:	1000011e 	bne	r2,zero,800894 <tick+0x1c>
      _GO = 0;
  800890:	d0277e85 	stb	zero,-25094(gp)
   }
   {
      g0 = _GO;
  800894:	d0a77e83 	ldbu	r2,-25094(gp)
  800898:	d0a78e05 	stb	r2,-25032(gp)
      g1 = g0;
  80089c:	d0a78e03 	ldbu	r2,-25032(gp)
  8008a0:	d0a76405 	stb	r2,-25200(gp)
      g2 = g1;
  8008a4:	d0a76403 	ldbu	r2,-25200(gp)
  8008a8:	d0a773c5 	stb	r2,-25137(gp)
      g111 =(PRE_g110);
  8008ac:	d0a78d43 	ldbu	r2,-25035(gp)
  8008b0:	d0a75885 	stb	r2,-25246(gp)
      g109 = g1;
  8008b4:	d0a76403 	ldbu	r2,-25200(gp)
  8008b8:	d0a79845 	stb	r2,-24991(gp)
      g110 =(g111||g109);
  8008bc:	d0a75883 	ldbu	r2,-25246(gp)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	1080201c 	xori	r2,r2,128
  8008c8:	10bfe004 	addi	r2,r2,-128
  8008cc:	1000051e 	bne	r2,zero,8008e4 <tick+0x6c>
  8008d0:	d0a79843 	ldbu	r2,-24991(gp)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10000226 	beq	r2,zero,8008ec <tick+0x74>
  8008e4:	00800044 	movi	r2,1
  8008e8:	00000106 	br	8008f0 <tick+0x78>
  8008ec:	0005883a 	mov	r2,zero
  8008f0:	d0a772c5 	stb	r2,-25141(gp)
      if(g110){
  8008f4:	d0a772c3 	ldbu	r2,-25141(gp)
  8008f8:	10803fcc 	andi	r2,r2,255
  8008fc:	1080201c 	xori	r2,r2,128
  800900:	10bfe004 	addi	r2,r2,-128
  800904:	10001426 	beq	r2,zero,800958 <tick+0xe0>
         _Pacemaker1_local_LRI_start = 0;
  800908:	d0275b45 	stb	zero,-25235(gp)
         _Pacemaker1_local_LRI_ex = 0;
  80090c:	d0277c05 	stb	zero,-25104(gp)
         _Pacemaker1_local_LRI_stop = 0;
  800910:	d0277b85 	stb	zero,-25106(gp)
         _Pacemaker1_local_VRP_start = 0;
  800914:	d0275a45 	stb	zero,-25239(gp)
         _Pacemaker1_local_VRP_stop = 0;
  800918:	d0279385 	stb	zero,-25010(gp)
         _Pacemaker1_local_VRP_ex = 0;
  80091c:	d0276c85 	stb	zero,-25166(gp)
         _Pacemaker1_local_AVI_start = 0;
  800920:	d0275645 	stb	zero,-25255(gp)
         _Pacemaker1_local_AVI_ex = 0;
  800924:	d0278385 	stb	zero,-25074(gp)
         _Pacemaker1_local_AVI_stop = 0;
  800928:	d0278b45 	stb	zero,-25043(gp)
         _Pacemaker1_local_PVARP_start = 0;
  80092c:	d02762c5 	stb	zero,-25205(gp)
         _Pacemaker1_local_PVARP_stop = 0;
  800930:	d0279485 	stb	zero,-25006(gp)
         _Pacemaker1_local_PVARP_ex = 0;
  800934:	d0277345 	stb	zero,-25139(gp)
         _Pacemaker1_local_AEI_start = 0;
  800938:	d0276a45 	stb	zero,-25175(gp)
         _Pacemaker1_local_AEI_stop = 0;
  80093c:	d0279ac5 	stb	zero,-24981(gp)
         _Pacemaker1_local_AEI_ex = 0;
  800940:	d0277885 	stb	zero,-25118(gp)
         _Pacemaker1_local_URI_start = 0;
  800944:	d0278505 	stb	zero,-25068(gp)
         _Pacemaker1_local_URI_stop = 0;
  800948:	d0276685 	stb	zero,-25190(gp)
         _Pacemaker1_local_URI_ex = 0;
  80094c:	d0278c45 	stb	zero,-25039(gp)
         _Pacemaker1_local_FilteredASense = 0;
  800950:	d0277cc5 	stb	zero,-25101(gp)
         _Pacemaker1_local_FilteredVSense = 0;
  800954:	d0277905 	stb	zero,-25116(gp)
      }
      g6 =(PRE_g5);
  800958:	d0a79583 	ldbu	r2,-25002(gp)
  80095c:	d0a78bc5 	stb	r2,-25041(gp)
      _cg6 = VRPTO;
  800960:	d0a77f03 	ldbu	r2,-25092(gp)
  800964:	d0a777c5 	stb	r2,-25121(gp)
      g7 =(g6&&_cg6);
  800968:	d0a78bc3 	ldbu	r2,-25041(gp)
  80096c:	10803fcc 	andi	r2,r2,255
  800970:	1080201c 	xori	r2,r2,128
  800974:	10bfe004 	addi	r2,r2,-128
  800978:	10000726 	beq	r2,zero,800998 <tick+0x120>
  80097c:	d0a777c3 	ldbu	r2,-25121(gp)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1080201c 	xori	r2,r2,128
  800988:	10bfe004 	addi	r2,r2,-128
  80098c:	10000226 	beq	r2,zero,800998 <tick+0x120>
  800990:	00800044 	movi	r2,1
  800994:	00000106 	br	80099c <tick+0x124>
  800998:	0005883a 	mov	r2,zero
  80099c:	d0a77405 	stb	r2,-25136(gp)
      if(g7){
  8009a0:	d0a77403 	ldbu	r2,-25136(gp)
  8009a4:	10803fcc 	andi	r2,r2,255
  8009a8:	1080201c 	xori	r2,r2,128
  8009ac:	10bfe004 	addi	r2,r2,-128
  8009b0:	10000226 	beq	r2,zero,8009bc <tick+0x144>
         _Pacemaker1_local_VRP_ex =(_Pacemaker1_local_VRP_ex||1);
  8009b4:	00800044 	movi	r2,1
  8009b8:	d0a76c85 	stb	r2,-25166(gp)
      }
      g120 =(PRE_g119);
  8009bc:	d0a77b03 	ldbu	r2,-25108(gp)
  8009c0:	d0a796c5 	stb	r2,-24997(gp)
      g118 = g0;
  8009c4:	d0a78e03 	ldbu	r2,-25032(gp)
  8009c8:	d0a76945 	stb	r2,-25179(gp)
      g119 =(g120||g118);
  8009cc:	d0a796c3 	ldbu	r2,-24997(gp)
  8009d0:	10803fcc 	andi	r2,r2,255
  8009d4:	1080201c 	xori	r2,r2,128
  8009d8:	10bfe004 	addi	r2,r2,-128
  8009dc:	1000051e 	bne	r2,zero,8009f4 <tick+0x17c>
  8009e0:	d0a76943 	ldbu	r2,-25179(gp)
  8009e4:	10803fcc 	andi	r2,r2,255
  8009e8:	1080201c 	xori	r2,r2,128
  8009ec:	10bfe004 	addi	r2,r2,-128
  8009f0:	10000226 	beq	r2,zero,8009fc <tick+0x184>
  8009f4:	00800044 	movi	r2,1
  8009f8:	00000106 	br	800a00 <tick+0x188>
  8009fc:	0005883a 	mov	r2,zero
  800a00:	d0a78185 	stb	r2,-25082(gp)
      if(g119){
  800a04:	d0a78183 	ldbu	r2,-25082(gp)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	1080201c 	xori	r2,r2,128
  800a10:	10bfe004 	addi	r2,r2,-128
  800a14:	10000426 	beq	r2,zero,800a28 <tick+0x1b0>
         VPace = 0;
  800a18:	d0279645 	stb	zero,-24999(gp)
         APace = 0;
  800a1c:	d0275785 	stb	zero,-25250(gp)
         AVI_stop = 0;
  800a20:	d0276345 	stb	zero,-25203(gp)
         AVI_start = 0;
  800a24:	d0275fc5 	stb	zero,-25217(gp)
      }
      g33 =(PRE_g32);
  800a28:	d0a76143 	ldbu	r2,-25211(gp)
  800a2c:	d0a77ac5 	stb	r2,-25109(gp)
      _cg33 = VSense;
  800a30:	d0a77a43 	ldbu	r2,-25111(gp)
  800a34:	d0a76545 	stb	r2,-25195(gp)
      g34 =(g33&&_cg33);
  800a38:	d0a77ac3 	ldbu	r2,-25109(gp)
  800a3c:	10803fcc 	andi	r2,r2,255
  800a40:	1080201c 	xori	r2,r2,128
  800a44:	10bfe004 	addi	r2,r2,-128
  800a48:	10000726 	beq	r2,zero,800a68 <tick+0x1f0>
  800a4c:	d0a76543 	ldbu	r2,-25195(gp)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1080201c 	xori	r2,r2,128
  800a58:	10bfe004 	addi	r2,r2,-128
  800a5c:	10000226 	beq	r2,zero,800a68 <tick+0x1f0>
  800a60:	00800044 	movi	r2,1
  800a64:	00000106 	br	800a6c <tick+0x1f4>
  800a68:	0005883a 	mov	r2,zero
  800a6c:	d0a77185 	stb	r2,-25146(gp)
      if(g34){
  800a70:	d0a77183 	ldbu	r2,-25146(gp)
  800a74:	10803fcc 	andi	r2,r2,255
  800a78:	1080201c 	xori	r2,r2,128
  800a7c:	10bfe004 	addi	r2,r2,-128
  800a80:	10000226 	beq	r2,zero,800a8c <tick+0x214>
         _Pacemaker1_local_LRI_stop =(_Pacemaker1_local_LRI_stop||1);
  800a84:	00800044 	movi	r2,1
  800a88:	d0a77b85 	stb	r2,-25106(gp)
      }
      g22 =(PRE_g21);
  800a8c:	d0a78f03 	ldbu	r2,-25028(gp)
  800a90:	d0a79205 	stb	r2,-25016(gp)
      g22b = g22;
  800a94:	d0a79203 	ldbu	r2,-25016(gp)
  800a98:	d0a76f05 	stb	r2,-25156(gp)
      _cg22 = _Pacemaker1_local_LRI_stop;
  800a9c:	d0a77b83 	ldbu	r2,-25106(gp)
  800aa0:	d0a78145 	stb	r2,-25083(gp)
      g23 =(g22b&&(!(_cg22)));
  800aa4:	d0a76f03 	ldbu	r2,-25156(gp)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	1080201c 	xori	r2,r2,128
  800ab0:	10bfe004 	addi	r2,r2,-128
  800ab4:	10000726 	beq	r2,zero,800ad4 <tick+0x25c>
  800ab8:	d0a78143 	ldbu	r2,-25083(gp)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1000021e 	bne	r2,zero,800ad4 <tick+0x25c>
  800acc:	00800044 	movi	r2,1
  800ad0:	00000106 	br	800ad8 <tick+0x260>
  800ad4:	0005883a 	mov	r2,zero
  800ad8:	d0a77645 	stb	r2,-25127(gp)
      _cg23 = LRITO;
  800adc:	d0a75d43 	ldbu	r2,-25227(gp)
  800ae0:	d0a794c5 	stb	r2,-25005(gp)
      g24 =(g23&&_cg23);
  800ae4:	d0a77643 	ldbu	r2,-25127(gp)
  800ae8:	10803fcc 	andi	r2,r2,255
  800aec:	1080201c 	xori	r2,r2,128
  800af0:	10bfe004 	addi	r2,r2,-128
  800af4:	10000726 	beq	r2,zero,800b14 <tick+0x29c>
  800af8:	d0a794c3 	ldbu	r2,-25005(gp)
  800afc:	10803fcc 	andi	r2,r2,255
  800b00:	1080201c 	xori	r2,r2,128
  800b04:	10bfe004 	addi	r2,r2,-128
  800b08:	10000226 	beq	r2,zero,800b14 <tick+0x29c>
  800b0c:	00800044 	movi	r2,1
  800b10:	00000106 	br	800b18 <tick+0x2a0>
  800b14:	0005883a 	mov	r2,zero
  800b18:	d0a79805 	stb	r2,-24992(gp)
      if(g24){
  800b1c:	d0a79803 	ldbu	r2,-24992(gp)
  800b20:	10803fcc 	andi	r2,r2,255
  800b24:	1080201c 	xori	r2,r2,128
  800b28:	10bfe004 	addi	r2,r2,-128
  800b2c:	10000226 	beq	r2,zero,800b38 <tick+0x2c0>
         _Pacemaker1_local_LRI_ex =(_Pacemaker1_local_LRI_ex||1);
  800b30:	00800044 	movi	r2,1
  800b34:	d0a77c05 	stb	r2,-25104(gp)
      }
      g37 =(g33&&(!(_cg33)));
  800b38:	d0a77ac3 	ldbu	r2,-25109(gp)
  800b3c:	10803fcc 	andi	r2,r2,255
  800b40:	1080201c 	xori	r2,r2,128
  800b44:	10bfe004 	addi	r2,r2,-128
  800b48:	10000726 	beq	r2,zero,800b68 <tick+0x2f0>
  800b4c:	d0a76543 	ldbu	r2,-25195(gp)
  800b50:	10803fcc 	andi	r2,r2,255
  800b54:	1080201c 	xori	r2,r2,128
  800b58:	10bfe004 	addi	r2,r2,-128
  800b5c:	1000021e 	bne	r2,zero,800b68 <tick+0x2f0>
  800b60:	00800044 	movi	r2,1
  800b64:	00000106 	br	800b6c <tick+0x2f4>
  800b68:	0005883a 	mov	r2,zero
  800b6c:	d0a76805 	stb	r2,-25184(gp)
      _cg37 = _Pacemaker1_local_LRI_ex;
  800b70:	d0a77c03 	ldbu	r2,-25104(gp)
  800b74:	d0a78745 	stb	r2,-25059(gp)
      g38 =(g37&&_cg37);
  800b78:	d0a76803 	ldbu	r2,-25184(gp)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	1080201c 	xori	r2,r2,128
  800b84:	10bfe004 	addi	r2,r2,-128
  800b88:	10000726 	beq	r2,zero,800ba8 <tick+0x330>
  800b8c:	d0a78743 	ldbu	r2,-25059(gp)
  800b90:	10803fcc 	andi	r2,r2,255
  800b94:	1080201c 	xori	r2,r2,128
  800b98:	10bfe004 	addi	r2,r2,-128
  800b9c:	10000226 	beq	r2,zero,800ba8 <tick+0x330>
  800ba0:	00800044 	movi	r2,1
  800ba4:	00000106 	br	800bac <tick+0x334>
  800ba8:	0005883a 	mov	r2,zero
  800bac:	d0a76cc5 	stb	r2,-25165(gp)
      if(g38){
  800bb0:	d0a76cc3 	ldbu	r2,-25165(gp)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	1080201c 	xori	r2,r2,128
  800bbc:	10bfe004 	addi	r2,r2,-128
  800bc0:	10000226 	beq	r2,zero,800bcc <tick+0x354>
         VPace =(VPace||1);
  800bc4:	00800044 	movi	r2,1
  800bc8:	d0a79645 	stb	r2,-24999(gp)
      }
      g115 =(PRE_g114);
  800bcc:	d0a75cc3 	ldbu	r2,-25229(gp)
  800bd0:	d0a75f85 	stb	r2,-25218(gp)
      if(g115){
  800bd4:	d0a75f83 	ldbu	r2,-25218(gp)
  800bd8:	10803fcc 	andi	r2,r2,255
  800bdc:	1080201c 	xori	r2,r2,128
  800be0:	10bfe004 	addi	r2,r2,-128
  800be4:	10000426 	beq	r2,zero,800bf8 <tick+0x380>
         _Pacemaker1_local__pre_FilteredVSense21 = _Pacemaker1_local__reg_FilteredVSense21;
  800be8:	d0a76d03 	ldbu	r2,-25164(gp)
  800bec:	d0a778c5 	stb	r2,-25117(gp)
         _Pacemaker1_local__pre_AVI_ex21 = _Pacemaker1_local__reg_AVI_ex21;
  800bf0:	d0a77243 	ldbu	r2,-25143(gp)
  800bf4:	d0a75985 	stb	r2,-25242(gp)
      }
      g57 =(PRE_g56);
  800bf8:	d0a76043 	ldbu	r2,-25215(gp)
  800bfc:	d0a789c5 	stb	r2,-25049(gp)
      g57b = g57;
  800c00:	d0a789c3 	ldbu	r2,-25049(gp)
  800c04:	d0a78605 	stb	r2,-25064(gp)
      _cg57 = _Pacemaker1_local__pre_FilteredVSense21;
  800c08:	d0a778c3 	ldbu	r2,-25117(gp)
  800c0c:	d0a79045 	stb	r2,-25023(gp)
      g59 =(g57b&&(!(_cg57)));
  800c10:	d0a78603 	ldbu	r2,-25064(gp)
  800c14:	10803fcc 	andi	r2,r2,255
  800c18:	1080201c 	xori	r2,r2,128
  800c1c:	10bfe004 	addi	r2,r2,-128
  800c20:	10000726 	beq	r2,zero,800c40 <tick+0x3c8>
  800c24:	d0a79043 	ldbu	r2,-25023(gp)
  800c28:	10803fcc 	andi	r2,r2,255
  800c2c:	1080201c 	xori	r2,r2,128
  800c30:	10bfe004 	addi	r2,r2,-128
  800c34:	1000021e 	bne	r2,zero,800c40 <tick+0x3c8>
  800c38:	00800044 	movi	r2,1
  800c3c:	00000106 	br	800c44 <tick+0x3cc>
  800c40:	0005883a 	mov	r2,zero
  800c44:	d0a77545 	stb	r2,-25131(gp)
      _cg59 = VPace;
  800c48:	d0a79643 	ldbu	r2,-24999(gp)
  800c4c:	d0a75905 	stb	r2,-25244(gp)
      g60 =(g59&&(!(_cg59)));
  800c50:	d0a77543 	ldbu	r2,-25131(gp)
  800c54:	10803fcc 	andi	r2,r2,255
  800c58:	1080201c 	xori	r2,r2,128
  800c5c:	10bfe004 	addi	r2,r2,-128
  800c60:	10000726 	beq	r2,zero,800c80 <tick+0x408>
  800c64:	d0a75903 	ldbu	r2,-25244(gp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	1080201c 	xori	r2,r2,128
  800c70:	10bfe004 	addi	r2,r2,-128
  800c74:	1000021e 	bne	r2,zero,800c80 <tick+0x408>
  800c78:	00800044 	movi	r2,1
  800c7c:	00000106 	br	800c84 <tick+0x40c>
  800c80:	0005883a 	mov	r2,zero
  800c84:	d0a78045 	stb	r2,-25087(gp)
      _cg60 = _Pacemaker1_local__pre_AVI_ex21;
  800c88:	d0a75983 	ldbu	r2,-25242(gp)
  800c8c:	d0a77d05 	stb	r2,-25100(gp)
      g61 =(g60&&_cg60);
  800c90:	d0a78043 	ldbu	r2,-25087(gp)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1080201c 	xori	r2,r2,128
  800c9c:	10bfe004 	addi	r2,r2,-128
  800ca0:	10000726 	beq	r2,zero,800cc0 <tick+0x448>
  800ca4:	d0a77d03 	ldbu	r2,-25100(gp)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000226 	beq	r2,zero,800cc0 <tick+0x448>
  800cb8:	00800044 	movi	r2,1
  800cbc:	00000106 	br	800cc4 <tick+0x44c>
  800cc0:	0005883a 	mov	r2,zero
  800cc4:	d0a76445 	stb	r2,-25199(gp)
      if(g61){
  800cc8:	d0a76443 	ldbu	r2,-25199(gp)
  800ccc:	10803fcc 	andi	r2,r2,255
  800cd0:	1080201c 	xori	r2,r2,128
  800cd4:	10bfe004 	addi	r2,r2,-128
  800cd8:	10000226 	beq	r2,zero,800ce4 <tick+0x46c>
         VPace =(VPace||1);
  800cdc:	00800044 	movi	r2,1
  800ce0:	d0a79645 	stb	r2,-24999(gp)
      }
      g58 =((g59&&_cg59)||g61||(g57b&&_cg57));
  800ce4:	d0a77543 	ldbu	r2,-25131(gp)
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	1080201c 	xori	r2,r2,128
  800cf0:	10bfe004 	addi	r2,r2,-128
  800cf4:	10000526 	beq	r2,zero,800d0c <tick+0x494>
  800cf8:	d0a75903 	ldbu	r2,-25244(gp)
  800cfc:	10803fcc 	andi	r2,r2,255
  800d00:	1080201c 	xori	r2,r2,128
  800d04:	10bfe004 	addi	r2,r2,-128
  800d08:	10000f1e 	bne	r2,zero,800d48 <tick+0x4d0>
  800d0c:	d0a76443 	ldbu	r2,-25199(gp)
  800d10:	10803fcc 	andi	r2,r2,255
  800d14:	1080201c 	xori	r2,r2,128
  800d18:	10bfe004 	addi	r2,r2,-128
  800d1c:	10000a1e 	bne	r2,zero,800d48 <tick+0x4d0>
  800d20:	d0a78603 	ldbu	r2,-25064(gp)
  800d24:	10803fcc 	andi	r2,r2,255
  800d28:	1080201c 	xori	r2,r2,128
  800d2c:	10bfe004 	addi	r2,r2,-128
  800d30:	10000726 	beq	r2,zero,800d50 <tick+0x4d8>
  800d34:	d0a79043 	ldbu	r2,-25023(gp)
  800d38:	10803fcc 	andi	r2,r2,255
  800d3c:	1080201c 	xori	r2,r2,128
  800d40:	10bfe004 	addi	r2,r2,-128
  800d44:	10000226 	beq	r2,zero,800d50 <tick+0x4d8>
  800d48:	00800044 	movi	r2,1
  800d4c:	00000106 	br	800d54 <tick+0x4dc>
  800d50:	0005883a 	mov	r2,zero
  800d54:	d0a78fc5 	stb	r2,-25025(gp)
      if(g58){
  800d58:	d0a78fc3 	ldbu	r2,-25025(gp)
  800d5c:	10803fcc 	andi	r2,r2,255
  800d60:	1080201c 	xori	r2,r2,128
  800d64:	10bfe004 	addi	r2,r2,-128
  800d68:	10000226 	beq	r2,zero,800d74 <tick+0x4fc>
         _Pacemaker1_local_AVI_stop =(_Pacemaker1_local_AVI_stop||1);
  800d6c:	00800044 	movi	r2,1
  800d70:	d0a78b45 	stb	r2,-25043(gp)
      }
      g53 =(PRE_g52);
  800d74:	d0a77a03 	ldbu	r2,-25112(gp)
  800d78:	d0a78945 	stb	r2,-25051(gp)
      g53b = g53;
  800d7c:	d0a78943 	ldbu	r2,-25051(gp)
  800d80:	d0a78445 	stb	r2,-25071(gp)
      _cg53 = _Pacemaker1_local__pre_FilteredVSense21;
  800d84:	d0a778c3 	ldbu	r2,-25117(gp)
  800d88:	d0a77485 	stb	r2,-25134(gp)
      g54 =(g53b&&_cg53);
  800d8c:	d0a78443 	ldbu	r2,-25071(gp)
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	1080201c 	xori	r2,r2,128
  800d98:	10bfe004 	addi	r2,r2,-128
  800d9c:	10000726 	beq	r2,zero,800dbc <tick+0x544>
  800da0:	d0a77483 	ldbu	r2,-25134(gp)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	1080201c 	xori	r2,r2,128
  800dac:	10bfe004 	addi	r2,r2,-128
  800db0:	10000226 	beq	r2,zero,800dbc <tick+0x544>
  800db4:	00800044 	movi	r2,1
  800db8:	00000106 	br	800dc0 <tick+0x548>
  800dbc:	0005883a 	mov	r2,zero
  800dc0:	d0a775c5 	stb	r2,-25129(gp)
      if(g54){
  800dc4:	d0a775c3 	ldbu	r2,-25129(gp)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	10000226 	beq	r2,zero,800de0 <tick+0x568>
         _Pacemaker1_local_AVI_stop =(_Pacemaker1_local_AVI_stop||1);
  800dd8:	00800044 	movi	r2,1
  800ddc:	d0a78b45 	stb	r2,-25043(gp)
      }
      g4 =(PRE_g3);
  800de0:	d0a75f03 	ldbu	r2,-25220(gp)
  800de4:	d0a757c5 	stb	r2,-25249(gp)
      g4b = g4;
  800de8:	d0a757c3 	ldbu	r2,-25249(gp)
  800dec:	d0a79885 	stb	r2,-24990(gp)
      _cg4 = _Pacemaker1_local_AVI_stop;
  800df0:	d0a78b43 	ldbu	r2,-25043(gp)
  800df4:	d0a79785 	stb	r2,-24994(gp)
      g3 =(g7||g2||(g4b&&(!(_cg4))));
  800df8:	d0a77403 	ldbu	r2,-25136(gp)
  800dfc:	10803fcc 	andi	r2,r2,255
  800e00:	1080201c 	xori	r2,r2,128
  800e04:	10bfe004 	addi	r2,r2,-128
  800e08:	10000f1e 	bne	r2,zero,800e48 <tick+0x5d0>
  800e0c:	d0a773c3 	ldbu	r2,-25137(gp)
  800e10:	10803fcc 	andi	r2,r2,255
  800e14:	1080201c 	xori	r2,r2,128
  800e18:	10bfe004 	addi	r2,r2,-128
  800e1c:	10000a1e 	bne	r2,zero,800e48 <tick+0x5d0>
  800e20:	d0a79883 	ldbu	r2,-24990(gp)
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	1080201c 	xori	r2,r2,128
  800e2c:	10bfe004 	addi	r2,r2,-128
  800e30:	10000726 	beq	r2,zero,800e50 <tick+0x5d8>
  800e34:	d0a79783 	ldbu	r2,-24994(gp)
  800e38:	10803fcc 	andi	r2,r2,255
  800e3c:	1080201c 	xori	r2,r2,128
  800e40:	10bfe004 	addi	r2,r2,-128
  800e44:	1000021e 	bne	r2,zero,800e50 <tick+0x5d8>
  800e48:	00800044 	movi	r2,1
  800e4c:	00000106 	br	800e54 <tick+0x5dc>
  800e50:	0005883a 	mov	r2,zero
  800e54:	d0a75a85 	stb	r2,-25238(gp)
      g5 =((g6&&(!(_cg6)))||(g4b&&_cg4));
  800e58:	d0a78bc3 	ldbu	r2,-25041(gp)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	10000526 	beq	r2,zero,800e80 <tick+0x608>
  800e6c:	d0a777c3 	ldbu	r2,-25121(gp)
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	1080201c 	xori	r2,r2,128
  800e78:	10bfe004 	addi	r2,r2,-128
  800e7c:	10000a26 	beq	r2,zero,800ea8 <tick+0x630>
  800e80:	d0a79883 	ldbu	r2,-24990(gp)
  800e84:	10803fcc 	andi	r2,r2,255
  800e88:	1080201c 	xori	r2,r2,128
  800e8c:	10bfe004 	addi	r2,r2,-128
  800e90:	10000726 	beq	r2,zero,800eb0 <tick+0x638>
  800e94:	d0a79783 	ldbu	r2,-24994(gp)
  800e98:	10803fcc 	andi	r2,r2,255
  800e9c:	1080201c 	xori	r2,r2,128
  800ea0:	10bfe004 	addi	r2,r2,-128
  800ea4:	10000226 	beq	r2,zero,800eb0 <tick+0x638>
  800ea8:	00800044 	movi	r2,1
  800eac:	00000106 	br	800eb4 <tick+0x63c>
  800eb0:	0005883a 	mov	r2,zero
  800eb4:	d0a771c5 	stb	r2,-25145(gp)
      g9 = g1;
  800eb8:	d0a76403 	ldbu	r2,-25200(gp)
  800ebc:	d0a75d05 	stb	r2,-25228(gp)
      g11 =(PRE_g10);
  800ec0:	d0a76bc3 	ldbu	r2,-25169(gp)
  800ec4:	d0a79145 	stb	r2,-25019(gp)
      g11b = g11;
  800ec8:	d0a79143 	ldbu	r2,-25019(gp)
  800ecc:	d0a783c5 	stb	r2,-25073(gp)
      _cg11 = _Pacemaker1_local_AVI_stop;
  800ed0:	d0a78b43 	ldbu	r2,-25043(gp)
  800ed4:	d0a78345 	stb	r2,-25075(gp)
      g15 =(g11b&&(!(_cg11)));
  800ed8:	d0a783c3 	ldbu	r2,-25073(gp)
  800edc:	10803fcc 	andi	r2,r2,255
  800ee0:	1080201c 	xori	r2,r2,128
  800ee4:	10bfe004 	addi	r2,r2,-128
  800ee8:	10000726 	beq	r2,zero,800f08 <tick+0x690>
  800eec:	d0a78343 	ldbu	r2,-25075(gp)
  800ef0:	10803fcc 	andi	r2,r2,255
  800ef4:	1080201c 	xori	r2,r2,128
  800ef8:	10bfe004 	addi	r2,r2,-128
  800efc:	1000021e 	bne	r2,zero,800f08 <tick+0x690>
  800f00:	00800044 	movi	r2,1
  800f04:	00000106 	br	800f0c <tick+0x694>
  800f08:	0005883a 	mov	r2,zero
  800f0c:	d0a77e05 	stb	r2,-25096(gp)
      _cg15 = VSense;
  800f10:	d0a77a43 	ldbu	r2,-25111(gp)
  800f14:	d0a76005 	stb	r2,-25216(gp)
      g14 =(PRE_g13);
  800f18:	d0a76083 	ldbu	r2,-25214(gp)
  800f1c:	d0a77705 	stb	r2,-25124(gp)
      g14b = g14;
  800f20:	d0a77703 	ldbu	r2,-25124(gp)
  800f24:	d0a76f45 	stb	r2,-25155(gp)
      _cg14 = _Pacemaker1_local_VRP_ex;
  800f28:	d0a76c83 	ldbu	r2,-25166(gp)
  800f2c:	d0a770c5 	stb	r2,-25149(gp)
      g16 =(g15&&_cg15);
  800f30:	d0a77e03 	ldbu	r2,-25096(gp)
  800f34:	10803fcc 	andi	r2,r2,255
  800f38:	1080201c 	xori	r2,r2,128
  800f3c:	10bfe004 	addi	r2,r2,-128
  800f40:	10000726 	beq	r2,zero,800f60 <tick+0x6e8>
  800f44:	d0a76003 	ldbu	r2,-25216(gp)
  800f48:	10803fcc 	andi	r2,r2,255
  800f4c:	1080201c 	xori	r2,r2,128
  800f50:	10bfe004 	addi	r2,r2,-128
  800f54:	10000226 	beq	r2,zero,800f60 <tick+0x6e8>
  800f58:	00800044 	movi	r2,1
  800f5c:	00000106 	br	800f64 <tick+0x6ec>
  800f60:	0005883a 	mov	r2,zero
  800f64:	d0a78f45 	stb	r2,-25027(gp)
      if(g16){
  800f68:	d0a78f43 	ldbu	r2,-25027(gp)
  800f6c:	10803fcc 	andi	r2,r2,255
  800f70:	1080201c 	xori	r2,r2,128
  800f74:	10bfe004 	addi	r2,r2,-128
  800f78:	10000226 	beq	r2,zero,800f84 <tick+0x70c>
         _Pacemaker1_local_FilteredVSense =(_Pacemaker1_local_FilteredVSense||1);
  800f7c:	00800044 	movi	r2,1
  800f80:	d0a77905 	stb	r2,-25116(gp)
      }
      g10 =((g15&&(!(_cg15)))||(g14b&&_cg14)||g9||g16);
  800f84:	d0a77e03 	ldbu	r2,-25096(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	10000526 	beq	r2,zero,800fac <tick+0x734>
  800f98:	d0a76003 	ldbu	r2,-25216(gp)
  800f9c:	10803fcc 	andi	r2,r2,255
  800fa0:	1080201c 	xori	r2,r2,128
  800fa4:	10bfe004 	addi	r2,r2,-128
  800fa8:	10001426 	beq	r2,zero,800ffc <tick+0x784>
  800fac:	d0a76f43 	ldbu	r2,-25155(gp)
  800fb0:	10803fcc 	andi	r2,r2,255
  800fb4:	1080201c 	xori	r2,r2,128
  800fb8:	10bfe004 	addi	r2,r2,-128
  800fbc:	10000526 	beq	r2,zero,800fd4 <tick+0x75c>
  800fc0:	d0a770c3 	ldbu	r2,-25149(gp)
  800fc4:	10803fcc 	andi	r2,r2,255
  800fc8:	1080201c 	xori	r2,r2,128
  800fcc:	10bfe004 	addi	r2,r2,-128
  800fd0:	10000a1e 	bne	r2,zero,800ffc <tick+0x784>
  800fd4:	d0a75d03 	ldbu	r2,-25228(gp)
  800fd8:	10803fcc 	andi	r2,r2,255
  800fdc:	1080201c 	xori	r2,r2,128
  800fe0:	10bfe004 	addi	r2,r2,-128
  800fe4:	1000051e 	bne	r2,zero,800ffc <tick+0x784>
  800fe8:	d0a78f43 	ldbu	r2,-25027(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	10000226 	beq	r2,zero,801004 <tick+0x78c>
  800ffc:	00800044 	movi	r2,1
  801000:	00000106 	br	801008 <tick+0x790>
  801004:	0005883a 	mov	r2,zero
  801008:	d0a79945 	stb	r2,-24987(gp)
      g12 =(g11b&&_cg11);
  80100c:	d0a783c3 	ldbu	r2,-25073(gp)
  801010:	10803fcc 	andi	r2,r2,255
  801014:	1080201c 	xori	r2,r2,128
  801018:	10bfe004 	addi	r2,r2,-128
  80101c:	10000726 	beq	r2,zero,80103c <tick+0x7c4>
  801020:	d0a78343 	ldbu	r2,-25075(gp)
  801024:	10803fcc 	andi	r2,r2,255
  801028:	1080201c 	xori	r2,r2,128
  80102c:	10bfe004 	addi	r2,r2,-128
  801030:	10000226 	beq	r2,zero,80103c <tick+0x7c4>
  801034:	00800044 	movi	r2,1
  801038:	00000106 	br	801040 <tick+0x7c8>
  80103c:	0005883a 	mov	r2,zero
  801040:	d0a765c5 	stb	r2,-25193(gp)
      if(g12){
  801044:	d0a765c3 	ldbu	r2,-25193(gp)
  801048:	10803fcc 	andi	r2,r2,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	10000226 	beq	r2,zero,801060 <tick+0x7e8>
         _Pacemaker1_local_VRP_start =(_Pacemaker1_local_VRP_start||1);
  801058:	00800044 	movi	r2,1
  80105c:	d0a75a45 	stb	r2,-25239(gp)
      }
      g13 =(g12||(g14b&&(!(_cg14))));
  801060:	d0a765c3 	ldbu	r2,-25193(gp)
  801064:	10803fcc 	andi	r2,r2,255
  801068:	1080201c 	xori	r2,r2,128
  80106c:	10bfe004 	addi	r2,r2,-128
  801070:	10000a1e 	bne	r2,zero,80109c <tick+0x824>
  801074:	d0a76f43 	ldbu	r2,-25155(gp)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	10000726 	beq	r2,zero,8010a4 <tick+0x82c>
  801088:	d0a770c3 	ldbu	r2,-25149(gp)
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	1080201c 	xori	r2,r2,128
  801094:	10bfe004 	addi	r2,r2,-128
  801098:	1000021e 	bne	r2,zero,8010a4 <tick+0x82c>
  80109c:	00800044 	movi	r2,1
  8010a0:	00000106 	br	8010a8 <tick+0x830>
  8010a4:	0005883a 	mov	r2,zero
  8010a8:	d0a78885 	stb	r2,-25054(gp)
      g18 = g1;
  8010ac:	d0a76403 	ldbu	r2,-25200(gp)
  8010b0:	d0a76a85 	stb	r2,-25174(gp)
      g20 =(PRE_g19);
  8010b4:	d0a78083 	ldbu	r2,-25086(gp)
  8010b8:	d0a77fc5 	stb	r2,-25089(gp)
      g20b = g20;
  8010bc:	d0a77fc3 	ldbu	r2,-25089(gp)
  8010c0:	d0a793c5 	stb	r2,-25009(gp)
      _cg20 = _Pacemaker1_local_AVI_stop;
  8010c4:	d0a78b43 	ldbu	r2,-25043(gp)
  8010c8:	d0a76dc5 	stb	r2,-25161(gp)
      g19 =(g18||(g20b&&(!(_cg20)))||(g22b&&_cg22)||g24);
  8010cc:	d0a76a83 	ldbu	r2,-25174(gp)
  8010d0:	10803fcc 	andi	r2,r2,255
  8010d4:	1080201c 	xori	r2,r2,128
  8010d8:	10bfe004 	addi	r2,r2,-128
  8010dc:	1000191e 	bne	r2,zero,801144 <tick+0x8cc>
  8010e0:	d0a793c3 	ldbu	r2,-25009(gp)
  8010e4:	10803fcc 	andi	r2,r2,255
  8010e8:	1080201c 	xori	r2,r2,128
  8010ec:	10bfe004 	addi	r2,r2,-128
  8010f0:	10000526 	beq	r2,zero,801108 <tick+0x890>
  8010f4:	d0a76dc3 	ldbu	r2,-25161(gp)
  8010f8:	10803fcc 	andi	r2,r2,255
  8010fc:	1080201c 	xori	r2,r2,128
  801100:	10bfe004 	addi	r2,r2,-128
  801104:	10000f26 	beq	r2,zero,801144 <tick+0x8cc>
  801108:	d0a76f03 	ldbu	r2,-25156(gp)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	1080201c 	xori	r2,r2,128
  801114:	10bfe004 	addi	r2,r2,-128
  801118:	10000526 	beq	r2,zero,801130 <tick+0x8b8>
  80111c:	d0a78143 	ldbu	r2,-25083(gp)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	1000051e 	bne	r2,zero,801144 <tick+0x8cc>
  801130:	d0a79803 	ldbu	r2,-24992(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10000226 	beq	r2,zero,80114c <tick+0x8d4>
  801144:	00800044 	movi	r2,1
  801148:	00000106 	br	801150 <tick+0x8d8>
  80114c:	0005883a 	mov	r2,zero
  801150:	d0a75845 	stb	r2,-25247(gp)
      g21 =((g20b&&_cg20)||(g23&&(!(_cg23))));
  801154:	d0a793c3 	ldbu	r2,-25009(gp)
  801158:	10803fcc 	andi	r2,r2,255
  80115c:	1080201c 	xori	r2,r2,128
  801160:	10bfe004 	addi	r2,r2,-128
  801164:	10000526 	beq	r2,zero,80117c <tick+0x904>
  801168:	d0a76dc3 	ldbu	r2,-25161(gp)
  80116c:	10803fcc 	andi	r2,r2,255
  801170:	1080201c 	xori	r2,r2,128
  801174:	10bfe004 	addi	r2,r2,-128
  801178:	10000a1e 	bne	r2,zero,8011a4 <tick+0x92c>
  80117c:	d0a77643 	ldbu	r2,-25127(gp)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	10000726 	beq	r2,zero,8011ac <tick+0x934>
  801190:	d0a794c3 	ldbu	r2,-25005(gp)
  801194:	10803fcc 	andi	r2,r2,255
  801198:	1080201c 	xori	r2,r2,128
  80119c:	10bfe004 	addi	r2,r2,-128
  8011a0:	1000021e 	bne	r2,zero,8011ac <tick+0x934>
  8011a4:	00800044 	movi	r2,1
  8011a8:	00000106 	br	8011b0 <tick+0x938>
  8011ac:	0005883a 	mov	r2,zero
  8011b0:	d0a77005 	stb	r2,-25152(gp)
      g26 = g1;
  8011b4:	d0a76403 	ldbu	r2,-25200(gp)
  8011b8:	d0a79a45 	stb	r2,-24983(gp)
      g28 =(PRE_g27);
  8011bc:	d0a75bc3 	ldbu	r2,-25233(gp)
  8011c0:	d0a79245 	stb	r2,-25015(gp)
      _cg28 = VSense;
  8011c4:	d0a77a43 	ldbu	r2,-25111(gp)
  8011c8:	d0a76f85 	stb	r2,-25154(gp)
      g27 =((g28&&(!(_cg28)))||g26);
  8011cc:	d0a79243 	ldbu	r2,-25015(gp)
  8011d0:	10803fcc 	andi	r2,r2,255
  8011d4:	1080201c 	xori	r2,r2,128
  8011d8:	10bfe004 	addi	r2,r2,-128
  8011dc:	10000526 	beq	r2,zero,8011f4 <tick+0x97c>
  8011e0:	d0a76f83 	ldbu	r2,-25154(gp)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	1080201c 	xori	r2,r2,128
  8011ec:	10bfe004 	addi	r2,r2,-128
  8011f0:	10000526 	beq	r2,zero,801208 <tick+0x990>
  8011f4:	d0a79a43 	ldbu	r2,-24983(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	10000226 	beq	r2,zero,801210 <tick+0x998>
  801208:	00800044 	movi	r2,1
  80120c:	00000106 	br	801214 <tick+0x99c>
  801210:	0005883a 	mov	r2,zero
  801214:	d0a75945 	stb	r2,-25243(gp)
      g29 =(g28&&_cg28);
  801218:	d0a79243 	ldbu	r2,-25015(gp)
  80121c:	10803fcc 	andi	r2,r2,255
  801220:	1080201c 	xori	r2,r2,128
  801224:	10bfe004 	addi	r2,r2,-128
  801228:	10000726 	beq	r2,zero,801248 <tick+0x9d0>
  80122c:	d0a76f83 	ldbu	r2,-25154(gp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	10000226 	beq	r2,zero,801248 <tick+0x9d0>
  801240:	00800044 	movi	r2,1
  801244:	00000106 	br	80124c <tick+0x9d4>
  801248:	0005883a 	mov	r2,zero
  80124c:	d0a79745 	stb	r2,-24995(gp)
      if(g29){
  801250:	d0a79743 	ldbu	r2,-24995(gp)
  801254:	10803fcc 	andi	r2,r2,255
  801258:	1080201c 	xori	r2,r2,128
  80125c:	10bfe004 	addi	r2,r2,-128
  801260:	10000226 	beq	r2,zero,80126c <tick+0x9f4>
         _Pacemaker1_local_LRI_start =(_Pacemaker1_local_LRI_start||1);
  801264:	00800044 	movi	r2,1
  801268:	d0a75b45 	stb	r2,-25235(gp)
      }
      g36 =(PRE_g35);
  80126c:	d0a76c43 	ldbu	r2,-25167(gp)
  801270:	d0a784c5 	stb	r2,-25069(gp)
      g36b = g36;
  801274:	d0a784c3 	ldbu	r2,-25069(gp)
  801278:	d0a78b05 	stb	r2,-25044(gp)
      if(g36b){
  80127c:	d0a78b03 	ldbu	r2,-25044(gp)
  801280:	10803fcc 	andi	r2,r2,255
  801284:	1080201c 	xori	r2,r2,128
  801288:	10bfe004 	addi	r2,r2,-128
  80128c:	10000226 	beq	r2,zero,801298 <tick+0xa20>
         _Pacemaker1_local_LRI_start =(_Pacemaker1_local_LRI_start||1);
  801290:	00800044 	movi	r2,1
  801294:	d0a75b45 	stb	r2,-25235(gp)
      }
      g31 =(PRE_g30);
  801298:	d0a795c3 	ldbu	r2,-25001(gp)
  80129c:	d0a767c5 	stb	r2,-25185(gp)
      g31b = g31;
  8012a0:	d0a767c3 	ldbu	r2,-25185(gp)
  8012a4:	d0a75b05 	stb	r2,-25236(gp)
      _cg31 = _Pacemaker1_local_VRP_ex;
  8012a8:	d0a76c83 	ldbu	r2,-25166(gp)
  8012ac:	d0a79905 	stb	r2,-24988(gp)
      g30 =(g29||g36b||(g31b&&(!(_cg31))));
  8012b0:	d0a79743 	ldbu	r2,-24995(gp)
  8012b4:	10803fcc 	andi	r2,r2,255
  8012b8:	1080201c 	xori	r2,r2,128
  8012bc:	10bfe004 	addi	r2,r2,-128
  8012c0:	10000f1e 	bne	r2,zero,801300 <tick+0xa88>
  8012c4:	d0a78b03 	ldbu	r2,-25044(gp)
  8012c8:	10803fcc 	andi	r2,r2,255
  8012cc:	1080201c 	xori	r2,r2,128
  8012d0:	10bfe004 	addi	r2,r2,-128
  8012d4:	10000a1e 	bne	r2,zero,801300 <tick+0xa88>
  8012d8:	d0a75b03 	ldbu	r2,-25236(gp)
  8012dc:	10803fcc 	andi	r2,r2,255
  8012e0:	1080201c 	xori	r2,r2,128
  8012e4:	10bfe004 	addi	r2,r2,-128
  8012e8:	10000726 	beq	r2,zero,801308 <tick+0xa90>
  8012ec:	d0a79903 	ldbu	r2,-24988(gp)
  8012f0:	10803fcc 	andi	r2,r2,255
  8012f4:	1080201c 	xori	r2,r2,128
  8012f8:	10bfe004 	addi	r2,r2,-128
  8012fc:	1000021e 	bne	r2,zero,801308 <tick+0xa90>
  801300:	00800044 	movi	r2,1
  801304:	00000106 	br	80130c <tick+0xa94>
  801308:	0005883a 	mov	r2,zero
  80130c:	d0a78e85 	stb	r2,-25030(gp)
      g32 =((g31b&&_cg31)||(g37&&(!(_cg37))));
  801310:	d0a75b03 	ldbu	r2,-25236(gp)
  801314:	10803fcc 	andi	r2,r2,255
  801318:	1080201c 	xori	r2,r2,128
  80131c:	10bfe004 	addi	r2,r2,-128
  801320:	10000526 	beq	r2,zero,801338 <tick+0xac0>
  801324:	d0a79903 	ldbu	r2,-24988(gp)
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	1080201c 	xori	r2,r2,128
  801330:	10bfe004 	addi	r2,r2,-128
  801334:	10000a1e 	bne	r2,zero,801360 <tick+0xae8>
  801338:	d0a76803 	ldbu	r2,-25184(gp)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080201c 	xori	r2,r2,128
  801344:	10bfe004 	addi	r2,r2,-128
  801348:	10000726 	beq	r2,zero,801368 <tick+0xaf0>
  80134c:	d0a78743 	ldbu	r2,-25059(gp)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	1080201c 	xori	r2,r2,128
  801358:	10bfe004 	addi	r2,r2,-128
  80135c:	1000021e 	bne	r2,zero,801368 <tick+0xaf0>
  801360:	00800044 	movi	r2,1
  801364:	00000106 	br	80136c <tick+0xaf4>
  801368:	0005883a 	mov	r2,zero
  80136c:	d0a79345 	stb	r2,-25011(gp)
      g35 =(g38||g34);
  801370:	d0a76cc3 	ldbu	r2,-25165(gp)
  801374:	10803fcc 	andi	r2,r2,255
  801378:	1080201c 	xori	r2,r2,128
  80137c:	10bfe004 	addi	r2,r2,-128
  801380:	1000051e 	bne	r2,zero,801398 <tick+0xb20>
  801384:	d0a77183 	ldbu	r2,-25146(gp)
  801388:	10803fcc 	andi	r2,r2,255
  80138c:	1080201c 	xori	r2,r2,128
  801390:	10bfe004 	addi	r2,r2,-128
  801394:	10000226 	beq	r2,zero,8013a0 <tick+0xb28>
  801398:	00800044 	movi	r2,1
  80139c:	00000106 	br	8013a4 <tick+0xb2c>
  8013a0:	0005883a 	mov	r2,zero
  8013a4:	d0a77dc5 	stb	r2,-25097(gp)
      g40 = g1;
  8013a8:	d0a76403 	ldbu	r2,-25200(gp)
  8013ac:	d0a756c5 	stb	r2,-25253(gp)
      g44 =(PRE_g43);
  8013b0:	d0a78303 	ldbu	r2,-25076(gp)
  8013b4:	d0a76205 	stb	r2,-25208(gp)
      g44b = g44;
  8013b8:	d0a76203 	ldbu	r2,-25208(gp)
  8013bc:	d0a75a05 	stb	r2,-25240(gp)
      _cg44 = _Pacemaker1_local_AVI_stop;
  8013c0:	d0a78b43 	ldbu	r2,-25043(gp)
  8013c4:	d0a776c5 	stb	r2,-25125(gp)
      g45 =(g44b&&(!(_cg44)));
  8013c8:	d0a75a03 	ldbu	r2,-25240(gp)
  8013cc:	10803fcc 	andi	r2,r2,255
  8013d0:	1080201c 	xori	r2,r2,128
  8013d4:	10bfe004 	addi	r2,r2,-128
  8013d8:	10000726 	beq	r2,zero,8013f8 <tick+0xb80>
  8013dc:	d0a776c3 	ldbu	r2,-25125(gp)
  8013e0:	10803fcc 	andi	r2,r2,255
  8013e4:	1080201c 	xori	r2,r2,128
  8013e8:	10bfe004 	addi	r2,r2,-128
  8013ec:	1000021e 	bne	r2,zero,8013f8 <tick+0xb80>
  8013f0:	00800044 	movi	r2,1
  8013f4:	00000106 	br	8013fc <tick+0xb84>
  8013f8:	0005883a 	mov	r2,zero
  8013fc:	d0a79445 	stb	r2,-25007(gp)
      _cg45 = AVITO;
  801400:	d0a78003 	ldbu	r2,-25088(gp)
  801404:	d0a76285 	stb	r2,-25206(gp)
      g46 =(g45&&_cg45);
  801408:	d0a79443 	ldbu	r2,-25007(gp)
  80140c:	10803fcc 	andi	r2,r2,255
  801410:	1080201c 	xori	r2,r2,128
  801414:	10bfe004 	addi	r2,r2,-128
  801418:	10000726 	beq	r2,zero,801438 <tick+0xbc0>
  80141c:	d0a76283 	ldbu	r2,-25206(gp)
  801420:	10803fcc 	andi	r2,r2,255
  801424:	1080201c 	xori	r2,r2,128
  801428:	10bfe004 	addi	r2,r2,-128
  80142c:	10000226 	beq	r2,zero,801438 <tick+0xbc0>
  801430:	00800044 	movi	r2,1
  801434:	00000106 	br	80143c <tick+0xbc4>
  801438:	0005883a 	mov	r2,zero
  80143c:	d0a78585 	stb	r2,-25066(gp)
      if(g46){
  801440:	d0a78583 	ldbu	r2,-25066(gp)
  801444:	10803fcc 	andi	r2,r2,255
  801448:	1080201c 	xori	r2,r2,128
  80144c:	10bfe004 	addi	r2,r2,-128
  801450:	10000226 	beq	r2,zero,80145c <tick+0xbe4>
         _Pacemaker1_local_AVI_ex =(_Pacemaker1_local_AVI_ex||1);
  801454:	00800044 	movi	r2,1
  801458:	d0a78385 	stb	r2,-25074(gp)
      }
      g84 =(PRE_g83);
  80145c:	d0a77d43 	ldbu	r2,-25099(gp)
  801460:	d0a768c5 	stb	r2,-25181(gp)
      g84b = g84;
  801464:	d0a768c3 	ldbu	r2,-25181(gp)
  801468:	d0a781c5 	stb	r2,-25081(gp)
      _cg84 = _Pacemaker1_local_AEI_stop;
  80146c:	d0a79ac3 	ldbu	r2,-24981(gp)
  801470:	d0a76245 	stb	r2,-25207(gp)
      g85 =(g84b&&(!(_cg84)));
  801474:	d0a781c3 	ldbu	r2,-25081(gp)
  801478:	10803fcc 	andi	r2,r2,255
  80147c:	1080201c 	xori	r2,r2,128
  801480:	10bfe004 	addi	r2,r2,-128
  801484:	10000726 	beq	r2,zero,8014a4 <tick+0xc2c>
  801488:	d0a76243 	ldbu	r2,-25207(gp)
  80148c:	10803fcc 	andi	r2,r2,255
  801490:	1080201c 	xori	r2,r2,128
  801494:	10bfe004 	addi	r2,r2,-128
  801498:	1000021e 	bne	r2,zero,8014a4 <tick+0xc2c>
  80149c:	00800044 	movi	r2,1
  8014a0:	00000106 	br	8014a8 <tick+0xc30>
  8014a4:	0005883a 	mov	r2,zero
  8014a8:	d0a75c45 	stb	r2,-25231(gp)
      _cg85 = AEITO;
  8014ac:	d0a799c3 	ldbu	r2,-24985(gp)
  8014b0:	d0a766c5 	stb	r2,-25189(gp)
      g86 =(g85&&_cg85);
  8014b4:	d0a75c43 	ldbu	r2,-25231(gp)
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1080201c 	xori	r2,r2,128
  8014c0:	10bfe004 	addi	r2,r2,-128
  8014c4:	10000726 	beq	r2,zero,8014e4 <tick+0xc6c>
  8014c8:	d0a766c3 	ldbu	r2,-25189(gp)
  8014cc:	10803fcc 	andi	r2,r2,255
  8014d0:	1080201c 	xori	r2,r2,128
  8014d4:	10bfe004 	addi	r2,r2,-128
  8014d8:	10000226 	beq	r2,zero,8014e4 <tick+0xc6c>
  8014dc:	00800044 	movi	r2,1
  8014e0:	00000106 	br	8014e8 <tick+0xc70>
  8014e4:	0005883a 	mov	r2,zero
  8014e8:	d0a78285 	stb	r2,-25078(gp)
      if(g86){
  8014ec:	d0a78283 	ldbu	r2,-25078(gp)
  8014f0:	10803fcc 	andi	r2,r2,255
  8014f4:	1080201c 	xori	r2,r2,128
  8014f8:	10bfe004 	addi	r2,r2,-128
  8014fc:	10000226 	beq	r2,zero,801508 <tick+0xc90>
         _Pacemaker1_local_AEI_ex =(_Pacemaker1_local_AEI_ex||1);
  801500:	00800044 	movi	r2,1
  801504:	d0a77885 	stb	r2,-25118(gp)
      }
      g73 =(PRE_g72);
  801508:	d0a760c3 	ldbu	r2,-25213(gp)
  80150c:	d0a79285 	stb	r2,-25014(gp)
      g73b = g73;
  801510:	d0a79283 	ldbu	r2,-25014(gp)
  801514:	d0a78845 	stb	r2,-25055(gp)
      _cg73 = _Pacemaker1_local_AVI_stop;
  801518:	d0a78b43 	ldbu	r2,-25043(gp)
  80151c:	d0a76185 	stb	r2,-25210(gp)
      g77 =(g73b&&(!(_cg73)));
  801520:	d0a78843 	ldbu	r2,-25055(gp)
  801524:	10803fcc 	andi	r2,r2,255
  801528:	1080201c 	xori	r2,r2,128
  80152c:	10bfe004 	addi	r2,r2,-128
  801530:	10000726 	beq	r2,zero,801550 <tick+0xcd8>
  801534:	d0a76183 	ldbu	r2,-25210(gp)
  801538:	10803fcc 	andi	r2,r2,255
  80153c:	1080201c 	xori	r2,r2,128
  801540:	10bfe004 	addi	r2,r2,-128
  801544:	1000021e 	bne	r2,zero,801550 <tick+0xcd8>
  801548:	00800044 	movi	r2,1
  80154c:	00000106 	br	801554 <tick+0xcdc>
  801550:	0005883a 	mov	r2,zero
  801554:	d0a79305 	stb	r2,-25012(gp)
      _cg77 = ASense;
  801558:	d0a76b43 	ldbu	r2,-25171(gp)
  80155c:	d0a79005 	stb	r2,-25024(gp)
      g78 =(g77&&_cg77);
  801560:	d0a79303 	ldbu	r2,-25012(gp)
  801564:	10803fcc 	andi	r2,r2,255
  801568:	1080201c 	xori	r2,r2,128
  80156c:	10bfe004 	addi	r2,r2,-128
  801570:	10000726 	beq	r2,zero,801590 <tick+0xd18>
  801574:	d0a79003 	ldbu	r2,-25024(gp)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	10000226 	beq	r2,zero,801590 <tick+0xd18>
  801588:	00800044 	movi	r2,1
  80158c:	00000106 	br	801594 <tick+0xd1c>
  801590:	0005883a 	mov	r2,zero
  801594:	d0a77a85 	stb	r2,-25110(gp)
      if(g78){
  801598:	d0a77a83 	ldbu	r2,-25110(gp)
  80159c:	10803fcc 	andi	r2,r2,255
  8015a0:	1080201c 	xori	r2,r2,128
  8015a4:	10bfe004 	addi	r2,r2,-128
  8015a8:	10000226 	beq	r2,zero,8015b4 <tick+0xd3c>
         _Pacemaker1_local_FilteredASense =(_Pacemaker1_local_FilteredASense||1);
  8015ac:	00800044 	movi	r2,1
  8015b0:	d0a77cc5 	stb	r2,-25101(gp)
      }
      g92 =(PRE_g91);
  8015b4:	d0a77f43 	ldbu	r2,-25091(gp)
  8015b8:	d0a763c5 	stb	r2,-25201(gp)
      g92b = g92;
  8015bc:	d0a763c3 	ldbu	r2,-25201(gp)
  8015c0:	d0a77b45 	stb	r2,-25107(gp)
      _cg92 = _Pacemaker1_local_FilteredASense;
  8015c4:	d0a77cc3 	ldbu	r2,-25101(gp)
  8015c8:	d0a79505 	stb	r2,-25004(gp)
      g93 =(g92b&&(!(_cg92)));
  8015cc:	d0a77b43 	ldbu	r2,-25107(gp)
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1080201c 	xori	r2,r2,128
  8015d8:	10bfe004 	addi	r2,r2,-128
  8015dc:	10000726 	beq	r2,zero,8015fc <tick+0xd84>
  8015e0:	d0a79503 	ldbu	r2,-25004(gp)
  8015e4:	10803fcc 	andi	r2,r2,255
  8015e8:	1080201c 	xori	r2,r2,128
  8015ec:	10bfe004 	addi	r2,r2,-128
  8015f0:	1000021e 	bne	r2,zero,8015fc <tick+0xd84>
  8015f4:	00800044 	movi	r2,1
  8015f8:	00000106 	br	801600 <tick+0xd88>
  8015fc:	0005883a 	mov	r2,zero
  801600:	d0a78105 	stb	r2,-25084(gp)
      _cg93 = _Pacemaker1_local_AEI_ex;
  801604:	d0a77883 	ldbu	r2,-25118(gp)
  801608:	d0a78c05 	stb	r2,-25040(gp)
      g94 =(g93&&_cg93);
  80160c:	d0a78103 	ldbu	r2,-25084(gp)
  801610:	10803fcc 	andi	r2,r2,255
  801614:	1080201c 	xori	r2,r2,128
  801618:	10bfe004 	addi	r2,r2,-128
  80161c:	10000726 	beq	r2,zero,80163c <tick+0xdc4>
  801620:	d0a78c03 	ldbu	r2,-25040(gp)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	10000226 	beq	r2,zero,80163c <tick+0xdc4>
  801634:	00800044 	movi	r2,1
  801638:	00000106 	br	801640 <tick+0xdc8>
  80163c:	0005883a 	mov	r2,zero
  801640:	d0a77285 	stb	r2,-25142(gp)
      if(g94){
  801644:	d0a77283 	ldbu	r2,-25142(gp)
  801648:	10803fcc 	andi	r2,r2,255
  80164c:	1080201c 	xori	r2,r2,128
  801650:	10bfe004 	addi	r2,r2,-128
  801654:	10000226 	beq	r2,zero,801660 <tick+0xde8>
         APace =(APace||1);
  801658:	00800044 	movi	r2,1
  80165c:	d0a75785 	stb	r2,-25250(gp)
      }
      g50 =(PRE_g49);
  801660:	d0a76983 	ldbu	r2,-25178(gp)
  801664:	d0a78685 	stb	r2,-25062(gp)
      g50b = g50;
  801668:	d0a78683 	ldbu	r2,-25062(gp)
  80166c:	d0a764c5 	stb	r2,-25197(gp)
      _cg50 = _Pacemaker1_local_FilteredASense;
  801670:	d0a77cc3 	ldbu	r2,-25101(gp)
  801674:	d0a78d85 	stb	r2,-25034(gp)
      g62 =(g50b&&(!(_cg50)));
  801678:	d0a764c3 	ldbu	r2,-25197(gp)
  80167c:	10803fcc 	andi	r2,r2,255
  801680:	1080201c 	xori	r2,r2,128
  801684:	10bfe004 	addi	r2,r2,-128
  801688:	10000726 	beq	r2,zero,8016a8 <tick+0xe30>
  80168c:	d0a78d83 	ldbu	r2,-25034(gp)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1080201c 	xori	r2,r2,128
  801698:	10bfe004 	addi	r2,r2,-128
  80169c:	1000021e 	bne	r2,zero,8016a8 <tick+0xe30>
  8016a0:	00800044 	movi	r2,1
  8016a4:	00000106 	br	8016ac <tick+0xe34>
  8016a8:	0005883a 	mov	r2,zero
  8016ac:	d0a76845 	stb	r2,-25183(gp)
      _cg62 = APace;
  8016b0:	d0a75783 	ldbu	r2,-25250(gp)
  8016b4:	d0a79985 	stb	r2,-24986(gp)
      g51 =((g62&&_cg62)||(g50b&&_cg50));
  8016b8:	d0a76843 	ldbu	r2,-25183(gp)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10000526 	beq	r2,zero,8016e0 <tick+0xe68>
  8016cc:	d0a79983 	ldbu	r2,-24986(gp)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	10000a1e 	bne	r2,zero,801708 <tick+0xe90>
  8016e0:	d0a764c3 	ldbu	r2,-25197(gp)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	10000726 	beq	r2,zero,801710 <tick+0xe98>
  8016f4:	d0a78d83 	ldbu	r2,-25034(gp)
  8016f8:	10803fcc 	andi	r2,r2,255
  8016fc:	1080201c 	xori	r2,r2,128
  801700:	10bfe004 	addi	r2,r2,-128
  801704:	10000226 	beq	r2,zero,801710 <tick+0xe98>
  801708:	00800044 	movi	r2,1
  80170c:	00000106 	br	801714 <tick+0xe9c>
  801710:	0005883a 	mov	r2,zero
  801714:	d0a78705 	stb	r2,-25060(gp)
      if(g51){
  801718:	d0a78703 	ldbu	r2,-25060(gp)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1080201c 	xori	r2,r2,128
  801724:	10bfe004 	addi	r2,r2,-128
  801728:	10000226 	beq	r2,zero,801734 <tick+0xebc>
         _Pacemaker1_local_AVI_start =(_Pacemaker1_local_AVI_start||1);
  80172c:	00800044 	movi	r2,1
  801730:	d0a75645 	stb	r2,-25255(gp)
      }
      g42 =(PRE_g41);
  801734:	d0a788c3 	ldbu	r2,-25053(gp)
  801738:	d0a75c85 	stb	r2,-25230(gp)
      g42b = g42;
  80173c:	d0a75c83 	ldbu	r2,-25230(gp)
  801740:	d0a76e85 	stb	r2,-25158(gp)
      _cg42 = _Pacemaker1_local_AVI_start;
  801744:	d0a75643 	ldbu	r2,-25255(gp)
  801748:	d0a75605 	stb	r2,-25256(gp)
      g41 =((g44b&&_cg44)||g46||g40||(g42b&&(!(_cg42))));
  80174c:	d0a75a03 	ldbu	r2,-25240(gp)
  801750:	10803fcc 	andi	r2,r2,255
  801754:	1080201c 	xori	r2,r2,128
  801758:	10bfe004 	addi	r2,r2,-128
  80175c:	10000526 	beq	r2,zero,801774 <tick+0xefc>
  801760:	d0a776c3 	ldbu	r2,-25125(gp)
  801764:	10803fcc 	andi	r2,r2,255
  801768:	1080201c 	xori	r2,r2,128
  80176c:	10bfe004 	addi	r2,r2,-128
  801770:	1000141e 	bne	r2,zero,8017c4 <tick+0xf4c>
  801774:	d0a78583 	ldbu	r2,-25066(gp)
  801778:	10803fcc 	andi	r2,r2,255
  80177c:	1080201c 	xori	r2,r2,128
  801780:	10bfe004 	addi	r2,r2,-128
  801784:	10000f1e 	bne	r2,zero,8017c4 <tick+0xf4c>
  801788:	d0a756c3 	ldbu	r2,-25253(gp)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	10000a1e 	bne	r2,zero,8017c4 <tick+0xf4c>
  80179c:	d0a76e83 	ldbu	r2,-25158(gp)
  8017a0:	10803fcc 	andi	r2,r2,255
  8017a4:	1080201c 	xori	r2,r2,128
  8017a8:	10bfe004 	addi	r2,r2,-128
  8017ac:	10000726 	beq	r2,zero,8017cc <tick+0xf54>
  8017b0:	d0a75603 	ldbu	r2,-25256(gp)
  8017b4:	10803fcc 	andi	r2,r2,255
  8017b8:	1080201c 	xori	r2,r2,128
  8017bc:	10bfe004 	addi	r2,r2,-128
  8017c0:	1000021e 	bne	r2,zero,8017cc <tick+0xf54>
  8017c4:	00800044 	movi	r2,1
  8017c8:	00000106 	br	8017d0 <tick+0xf58>
  8017cc:	0005883a 	mov	r2,zero
  8017d0:	d0a76905 	stb	r2,-25180(gp)
      g43 =((g42b&&_cg42)||(g45&&(!(_cg45))));
  8017d4:	d0a76e83 	ldbu	r2,-25158(gp)
  8017d8:	10803fcc 	andi	r2,r2,255
  8017dc:	1080201c 	xori	r2,r2,128
  8017e0:	10bfe004 	addi	r2,r2,-128
  8017e4:	10000526 	beq	r2,zero,8017fc <tick+0xf84>
  8017e8:	d0a75603 	ldbu	r2,-25256(gp)
  8017ec:	10803fcc 	andi	r2,r2,255
  8017f0:	1080201c 	xori	r2,r2,128
  8017f4:	10bfe004 	addi	r2,r2,-128
  8017f8:	10000a1e 	bne	r2,zero,801824 <tick+0xfac>
  8017fc:	d0a79443 	ldbu	r2,-25007(gp)
  801800:	10803fcc 	andi	r2,r2,255
  801804:	1080201c 	xori	r2,r2,128
  801808:	10bfe004 	addi	r2,r2,-128
  80180c:	10000726 	beq	r2,zero,80182c <tick+0xfb4>
  801810:	d0a76283 	ldbu	r2,-25206(gp)
  801814:	10803fcc 	andi	r2,r2,255
  801818:	1080201c 	xori	r2,r2,128
  80181c:	10bfe004 	addi	r2,r2,-128
  801820:	1000021e 	bne	r2,zero,80182c <tick+0xfb4>
  801824:	00800044 	movi	r2,1
  801828:	00000106 	br	801830 <tick+0xfb8>
  80182c:	0005883a 	mov	r2,zero
  801830:	d0a782c5 	stb	r2,-25077(gp)
      g48 = g1;
  801834:	d0a76403 	ldbu	r2,-25200(gp)
  801838:	d0a76c05 	stb	r2,-25168(gp)
      g49 =(g58||(g62&&(!(_cg62)))||g48||g54);
  80183c:	d0a78fc3 	ldbu	r2,-25025(gp)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	1000141e 	bne	r2,zero,8018a0 <tick+0x1028>
  801850:	d0a76843 	ldbu	r2,-25183(gp)
  801854:	10803fcc 	andi	r2,r2,255
  801858:	1080201c 	xori	r2,r2,128
  80185c:	10bfe004 	addi	r2,r2,-128
  801860:	10000526 	beq	r2,zero,801878 <tick+0x1000>
  801864:	d0a79983 	ldbu	r2,-24986(gp)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	10000a26 	beq	r2,zero,8018a0 <tick+0x1028>
  801878:	d0a76c03 	ldbu	r2,-25168(gp)
  80187c:	10803fcc 	andi	r2,r2,255
  801880:	1080201c 	xori	r2,r2,128
  801884:	10bfe004 	addi	r2,r2,-128
  801888:	1000051e 	bne	r2,zero,8018a0 <tick+0x1028>
  80188c:	d0a775c3 	ldbu	r2,-25129(gp)
  801890:	10803fcc 	andi	r2,r2,255
  801894:	1080201c 	xori	r2,r2,128
  801898:	10bfe004 	addi	r2,r2,-128
  80189c:	10000226 	beq	r2,zero,8018a8 <tick+0x1030>
  8018a0:	00800044 	movi	r2,1
  8018a4:	00000106 	br	8018ac <tick+0x1034>
  8018a8:	0005883a 	mov	r2,zero
  8018ac:	d0a77305 	stb	r2,-25140(gp)
      g100 =(PRE_g99);
  8018b0:	d0a78dc3 	ldbu	r2,-25033(gp)
  8018b4:	d0a77505 	stb	r2,-25132(gp)
      _cg100 = URITO;
  8018b8:	d0a77ec3 	ldbu	r2,-25093(gp)
  8018bc:	d0a77945 	stb	r2,-25115(gp)
      g101 =(g100&&_cg100);
  8018c0:	d0a77503 	ldbu	r2,-25132(gp)
  8018c4:	10803fcc 	andi	r2,r2,255
  8018c8:	1080201c 	xori	r2,r2,128
  8018cc:	10bfe004 	addi	r2,r2,-128
  8018d0:	10000726 	beq	r2,zero,8018f0 <tick+0x1078>
  8018d4:	d0a77943 	ldbu	r2,-25115(gp)
  8018d8:	10803fcc 	andi	r2,r2,255
  8018dc:	1080201c 	xori	r2,r2,128
  8018e0:	10bfe004 	addi	r2,r2,-128
  8018e4:	10000226 	beq	r2,zero,8018f0 <tick+0x1078>
  8018e8:	00800044 	movi	r2,1
  8018ec:	00000106 	br	8018f4 <tick+0x107c>
  8018f0:	0005883a 	mov	r2,zero
  8018f4:	d0a77845 	stb	r2,-25119(gp)
      if(g101){
  8018f8:	d0a77843 	ldbu	r2,-25119(gp)
  8018fc:	10803fcc 	andi	r2,r2,255
  801900:	1080201c 	xori	r2,r2,128
  801904:	10bfe004 	addi	r2,r2,-128
  801908:	10000226 	beq	r2,zero,801914 <tick+0x109c>
         _Pacemaker1_local_URI_ex =(_Pacemaker1_local_URI_ex||1);
  80190c:	00800044 	movi	r2,1
  801910:	d0a78c45 	stb	r2,-25039(gp)
      }
      g55 =(g53b&&(!(_cg53)));
  801914:	d0a78443 	ldbu	r2,-25071(gp)
  801918:	10803fcc 	andi	r2,r2,255
  80191c:	1080201c 	xori	r2,r2,128
  801920:	10bfe004 	addi	r2,r2,-128
  801924:	10000726 	beq	r2,zero,801944 <tick+0x10cc>
  801928:	d0a77483 	ldbu	r2,-25134(gp)
  80192c:	10803fcc 	andi	r2,r2,255
  801930:	1080201c 	xori	r2,r2,128
  801934:	10bfe004 	addi	r2,r2,-128
  801938:	1000021e 	bne	r2,zero,801944 <tick+0x10cc>
  80193c:	00800044 	movi	r2,1
  801940:	00000106 	br	801948 <tick+0x10d0>
  801944:	0005883a 	mov	r2,zero
  801948:	d0a758c5 	stb	r2,-25245(gp)
      _cg55 = _Pacemaker1_local_URI_ex;
  80194c:	d0a78c43 	ldbu	r2,-25039(gp)
  801950:	d0a79545 	stb	r2,-25003(gp)
      g52 =(g51||(g55&&(!(_cg55))));
  801954:	d0a78703 	ldbu	r2,-25060(gp)
  801958:	10803fcc 	andi	r2,r2,255
  80195c:	1080201c 	xori	r2,r2,128
  801960:	10bfe004 	addi	r2,r2,-128
  801964:	10000a1e 	bne	r2,zero,801990 <tick+0x1118>
  801968:	d0a758c3 	ldbu	r2,-25245(gp)
  80196c:	10803fcc 	andi	r2,r2,255
  801970:	1080201c 	xori	r2,r2,128
  801974:	10bfe004 	addi	r2,r2,-128
  801978:	10000726 	beq	r2,zero,801998 <tick+0x1120>
  80197c:	d0a79543 	ldbu	r2,-25003(gp)
  801980:	10803fcc 	andi	r2,r2,255
  801984:	1080201c 	xori	r2,r2,128
  801988:	10bfe004 	addi	r2,r2,-128
  80198c:	1000021e 	bne	r2,zero,801998 <tick+0x1120>
  801990:	00800044 	movi	r2,1
  801994:	00000106 	br	80199c <tick+0x1124>
  801998:	0005883a 	mov	r2,zero
  80199c:	d0a76645 	stb	r2,-25191(gp)
      g56 =((g60&&(!(_cg60)))||(g55&&_cg55));
  8019a0:	d0a78043 	ldbu	r2,-25087(gp)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	1080201c 	xori	r2,r2,128
  8019ac:	10bfe004 	addi	r2,r2,-128
  8019b0:	10000526 	beq	r2,zero,8019c8 <tick+0x1150>
  8019b4:	d0a77d03 	ldbu	r2,-25100(gp)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	10000a26 	beq	r2,zero,8019f0 <tick+0x1178>
  8019c8:	d0a758c3 	ldbu	r2,-25245(gp)
  8019cc:	10803fcc 	andi	r2,r2,255
  8019d0:	1080201c 	xori	r2,r2,128
  8019d4:	10bfe004 	addi	r2,r2,-128
  8019d8:	10000726 	beq	r2,zero,8019f8 <tick+0x1180>
  8019dc:	d0a79543 	ldbu	r2,-25003(gp)
  8019e0:	10803fcc 	andi	r2,r2,255
  8019e4:	1080201c 	xori	r2,r2,128
  8019e8:	10bfe004 	addi	r2,r2,-128
  8019ec:	10000226 	beq	r2,zero,8019f8 <tick+0x1180>
  8019f0:	00800044 	movi	r2,1
  8019f4:	00000106 	br	8019fc <tick+0x1184>
  8019f8:	0005883a 	mov	r2,zero
  8019fc:	d0a779c5 	stb	r2,-25113(gp)
      g64 = g1;
  801a00:	d0a76403 	ldbu	r2,-25200(gp)
  801a04:	d0a76fc5 	stb	r2,-25153(gp)
      g68 =(PRE_g67);
  801a08:	d0a77c43 	ldbu	r2,-25103(gp)
  801a0c:	d0a79085 	stb	r2,-25022(gp)
      _cg68 = PVARPTO;
  801a10:	d0a78483 	ldbu	r2,-25070(gp)
  801a14:	d0a77105 	stb	r2,-25148(gp)
      g69 =(g68&&_cg68);
  801a18:	d0a79083 	ldbu	r2,-25022(gp)
  801a1c:	10803fcc 	andi	r2,r2,255
  801a20:	1080201c 	xori	r2,r2,128
  801a24:	10bfe004 	addi	r2,r2,-128
  801a28:	10000726 	beq	r2,zero,801a48 <tick+0x11d0>
  801a2c:	d0a77103 	ldbu	r2,-25148(gp)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	1080201c 	xori	r2,r2,128
  801a38:	10bfe004 	addi	r2,r2,-128
  801a3c:	10000226 	beq	r2,zero,801a48 <tick+0x11d0>
  801a40:	00800044 	movi	r2,1
  801a44:	00000106 	br	801a4c <tick+0x11d4>
  801a48:	0005883a 	mov	r2,zero
  801a4c:	d0a79a05 	stb	r2,-24984(gp)
      if(g69){
  801a50:	d0a79a03 	ldbu	r2,-24984(gp)
  801a54:	10803fcc 	andi	r2,r2,255
  801a58:	1080201c 	xori	r2,r2,128
  801a5c:	10bfe004 	addi	r2,r2,-128
  801a60:	10000226 	beq	r2,zero,801a6c <tick+0x11f4>
         _Pacemaker1_local_PVARP_ex =(_Pacemaker1_local_PVARP_ex||1);
  801a64:	00800044 	movi	r2,1
  801a68:	d0a77345 	stb	r2,-25139(gp)
      }
      g66 =(PRE_g65);
  801a6c:	d0a76303 	ldbu	r2,-25204(gp)
  801a70:	d0a77605 	stb	r2,-25128(gp)
      g66b = g66;
  801a74:	d0a77603 	ldbu	r2,-25128(gp)
  801a78:	d0a780c5 	stb	r2,-25085(gp)
      _cg66 = _Pacemaker1_local_AVI_stop;
  801a7c:	d0a78b43 	ldbu	r2,-25043(gp)
  801a80:	d0a78a85 	stb	r2,-25046(gp)
      g65 =(g69||g64||(g66b&&(!(_cg66))));
  801a84:	d0a79a03 	ldbu	r2,-24984(gp)
  801a88:	10803fcc 	andi	r2,r2,255
  801a8c:	1080201c 	xori	r2,r2,128
  801a90:	10bfe004 	addi	r2,r2,-128
  801a94:	10000f1e 	bne	r2,zero,801ad4 <tick+0x125c>
  801a98:	d0a76fc3 	ldbu	r2,-25153(gp)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	10000a1e 	bne	r2,zero,801ad4 <tick+0x125c>
  801aac:	d0a780c3 	ldbu	r2,-25085(gp)
  801ab0:	10803fcc 	andi	r2,r2,255
  801ab4:	1080201c 	xori	r2,r2,128
  801ab8:	10bfe004 	addi	r2,r2,-128
  801abc:	10000726 	beq	r2,zero,801adc <tick+0x1264>
  801ac0:	d0a78a83 	ldbu	r2,-25046(gp)
  801ac4:	10803fcc 	andi	r2,r2,255
  801ac8:	1080201c 	xori	r2,r2,128
  801acc:	10bfe004 	addi	r2,r2,-128
  801ad0:	1000021e 	bne	r2,zero,801adc <tick+0x1264>
  801ad4:	00800044 	movi	r2,1
  801ad8:	00000106 	br	801ae0 <tick+0x1268>
  801adc:	0005883a 	mov	r2,zero
  801ae0:	d0a791c5 	stb	r2,-25017(gp)
      g67 =((g66b&&_cg66)||(g68&&(!(_cg68))));
  801ae4:	d0a780c3 	ldbu	r2,-25085(gp)
  801ae8:	10803fcc 	andi	r2,r2,255
  801aec:	1080201c 	xori	r2,r2,128
  801af0:	10bfe004 	addi	r2,r2,-128
  801af4:	10000526 	beq	r2,zero,801b0c <tick+0x1294>
  801af8:	d0a78a83 	ldbu	r2,-25046(gp)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	1080201c 	xori	r2,r2,128
  801b04:	10bfe004 	addi	r2,r2,-128
  801b08:	10000a1e 	bne	r2,zero,801b34 <tick+0x12bc>
  801b0c:	d0a79083 	ldbu	r2,-25022(gp)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	10000726 	beq	r2,zero,801b3c <tick+0x12c4>
  801b20:	d0a77103 	ldbu	r2,-25148(gp)
  801b24:	10803fcc 	andi	r2,r2,255
  801b28:	1080201c 	xori	r2,r2,128
  801b2c:	10bfe004 	addi	r2,r2,-128
  801b30:	1000021e 	bne	r2,zero,801b3c <tick+0x12c4>
  801b34:	00800044 	movi	r2,1
  801b38:	00000106 	br	801b40 <tick+0x12c8>
  801b3c:	0005883a 	mov	r2,zero
  801b40:	d0a797c5 	stb	r2,-24993(gp)
      g71 = g1;
  801b44:	d0a76403 	ldbu	r2,-25200(gp)
  801b48:	d0a76485 	stb	r2,-25198(gp)
      g76 =(PRE_g75);
  801b4c:	d0a76103 	ldbu	r2,-25212(gp)
  801b50:	d0a76785 	stb	r2,-25186(gp)
      g76b = g76;
  801b54:	d0a76783 	ldbu	r2,-25186(gp)
  801b58:	d0a75ac5 	stb	r2,-25237(gp)
      _cg76 = _Pacemaker1_local_PVARP_ex;
  801b5c:	d0a77343 	ldbu	r2,-25139(gp)
  801b60:	d0a76e05 	stb	r2,-25160(gp)
      g72 =(g78||g71||(g76b&&_cg76)||(g77&&(!(_cg77))));
  801b64:	d0a77a83 	ldbu	r2,-25110(gp)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1000191e 	bne	r2,zero,801bdc <tick+0x1364>
  801b78:	d0a76483 	ldbu	r2,-25198(gp)
  801b7c:	10803fcc 	andi	r2,r2,255
  801b80:	1080201c 	xori	r2,r2,128
  801b84:	10bfe004 	addi	r2,r2,-128
  801b88:	1000141e 	bne	r2,zero,801bdc <tick+0x1364>
  801b8c:	d0a75ac3 	ldbu	r2,-25237(gp)
  801b90:	10803fcc 	andi	r2,r2,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	10000526 	beq	r2,zero,801bb4 <tick+0x133c>
  801ba0:	d0a76e03 	ldbu	r2,-25160(gp)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	10000a1e 	bne	r2,zero,801bdc <tick+0x1364>
  801bb4:	d0a79303 	ldbu	r2,-25012(gp)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	10000726 	beq	r2,zero,801be4 <tick+0x136c>
  801bc8:	d0a79003 	ldbu	r2,-25024(gp)
  801bcc:	10803fcc 	andi	r2,r2,255
  801bd0:	1080201c 	xori	r2,r2,128
  801bd4:	10bfe004 	addi	r2,r2,-128
  801bd8:	1000021e 	bne	r2,zero,801be4 <tick+0x136c>
  801bdc:	00800044 	movi	r2,1
  801be0:	00000106 	br	801be8 <tick+0x1370>
  801be4:	0005883a 	mov	r2,zero
  801be8:	d0a78cc5 	stb	r2,-25037(gp)
      g74 =(g73b&&_cg73);
  801bec:	d0a78843 	ldbu	r2,-25055(gp)
  801bf0:	10803fcc 	andi	r2,r2,255
  801bf4:	1080201c 	xori	r2,r2,128
  801bf8:	10bfe004 	addi	r2,r2,-128
  801bfc:	10000726 	beq	r2,zero,801c1c <tick+0x13a4>
  801c00:	d0a76183 	ldbu	r2,-25210(gp)
  801c04:	10803fcc 	andi	r2,r2,255
  801c08:	1080201c 	xori	r2,r2,128
  801c0c:	10bfe004 	addi	r2,r2,-128
  801c10:	10000226 	beq	r2,zero,801c1c <tick+0x13a4>
  801c14:	00800044 	movi	r2,1
  801c18:	00000106 	br	801c20 <tick+0x13a8>
  801c1c:	0005883a 	mov	r2,zero
  801c20:	d0a79b45 	stb	r2,-24979(gp)
      if(g74){
  801c24:	d0a79b43 	ldbu	r2,-24979(gp)
  801c28:	10803fcc 	andi	r2,r2,255
  801c2c:	1080201c 	xori	r2,r2,128
  801c30:	10bfe004 	addi	r2,r2,-128
  801c34:	10000226 	beq	r2,zero,801c40 <tick+0x13c8>
         _Pacemaker1_local_PVARP_start =(_Pacemaker1_local_PVARP_start||1);
  801c38:	00800044 	movi	r2,1
  801c3c:	d0a762c5 	stb	r2,-25205(gp)
      }
      g75 =((g76b&&(!(_cg76)))||g74);
  801c40:	d0a75ac3 	ldbu	r2,-25237(gp)
  801c44:	10803fcc 	andi	r2,r2,255
  801c48:	1080201c 	xori	r2,r2,128
  801c4c:	10bfe004 	addi	r2,r2,-128
  801c50:	10000526 	beq	r2,zero,801c68 <tick+0x13f0>
  801c54:	d0a76e03 	ldbu	r2,-25160(gp)
  801c58:	10803fcc 	andi	r2,r2,255
  801c5c:	1080201c 	xori	r2,r2,128
  801c60:	10bfe004 	addi	r2,r2,-128
  801c64:	10000526 	beq	r2,zero,801c7c <tick+0x1404>
  801c68:	d0a79b43 	ldbu	r2,-24979(gp)
  801c6c:	10803fcc 	andi	r2,r2,255
  801c70:	1080201c 	xori	r2,r2,128
  801c74:	10bfe004 	addi	r2,r2,-128
  801c78:	10000226 	beq	r2,zero,801c84 <tick+0x140c>
  801c7c:	00800044 	movi	r2,1
  801c80:	00000106 	br	801c88 <tick+0x1410>
  801c84:	0005883a 	mov	r2,zero
  801c88:	d0a78e45 	stb	r2,-25031(gp)
      g80 = g1;
  801c8c:	d0a76403 	ldbu	r2,-25200(gp)
  801c90:	d0a774c5 	stb	r2,-25133(gp)
      g82 =(PRE_g81);
  801c94:	d0a76ac3 	ldbu	r2,-25173(gp)
  801c98:	d0a76505 	stb	r2,-25196(gp)
      g82b = g82;
  801c9c:	d0a76503 	ldbu	r2,-25196(gp)
  801ca0:	d0a78c85 	stb	r2,-25038(gp)
      _cg82 = _Pacemaker1_local_AVI_stop;
  801ca4:	d0a78b43 	ldbu	r2,-25043(gp)
  801ca8:	d0a76ec5 	stb	r2,-25157(gp)
      g81 =(g86||(g82b&&(!(_cg82)))||(g84b&&_cg84)||g80);
  801cac:	d0a78283 	ldbu	r2,-25078(gp)
  801cb0:	10803fcc 	andi	r2,r2,255
  801cb4:	1080201c 	xori	r2,r2,128
  801cb8:	10bfe004 	addi	r2,r2,-128
  801cbc:	1000191e 	bne	r2,zero,801d24 <tick+0x14ac>
  801cc0:	d0a78c83 	ldbu	r2,-25038(gp)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1080201c 	xori	r2,r2,128
  801ccc:	10bfe004 	addi	r2,r2,-128
  801cd0:	10000526 	beq	r2,zero,801ce8 <tick+0x1470>
  801cd4:	d0a76ec3 	ldbu	r2,-25157(gp)
  801cd8:	10803fcc 	andi	r2,r2,255
  801cdc:	1080201c 	xori	r2,r2,128
  801ce0:	10bfe004 	addi	r2,r2,-128
  801ce4:	10000f26 	beq	r2,zero,801d24 <tick+0x14ac>
  801ce8:	d0a781c3 	ldbu	r2,-25081(gp)
  801cec:	10803fcc 	andi	r2,r2,255
  801cf0:	1080201c 	xori	r2,r2,128
  801cf4:	10bfe004 	addi	r2,r2,-128
  801cf8:	10000526 	beq	r2,zero,801d10 <tick+0x1498>
  801cfc:	d0a76243 	ldbu	r2,-25207(gp)
  801d00:	10803fcc 	andi	r2,r2,255
  801d04:	1080201c 	xori	r2,r2,128
  801d08:	10bfe004 	addi	r2,r2,-128
  801d0c:	1000051e 	bne	r2,zero,801d24 <tick+0x14ac>
  801d10:	d0a774c3 	ldbu	r2,-25133(gp)
  801d14:	10803fcc 	andi	r2,r2,255
  801d18:	1080201c 	xori	r2,r2,128
  801d1c:	10bfe004 	addi	r2,r2,-128
  801d20:	10000226 	beq	r2,zero,801d2c <tick+0x14b4>
  801d24:	00800044 	movi	r2,1
  801d28:	00000106 	br	801d30 <tick+0x14b8>
  801d2c:	0005883a 	mov	r2,zero
  801d30:	d0a78d05 	stb	r2,-25036(gp)
      g83 =((g82b&&_cg82)||(g85&&(!(_cg85))));
  801d34:	d0a78c83 	ldbu	r2,-25038(gp)
  801d38:	10803fcc 	andi	r2,r2,255
  801d3c:	1080201c 	xori	r2,r2,128
  801d40:	10bfe004 	addi	r2,r2,-128
  801d44:	10000526 	beq	r2,zero,801d5c <tick+0x14e4>
  801d48:	d0a76ec3 	ldbu	r2,-25157(gp)
  801d4c:	10803fcc 	andi	r2,r2,255
  801d50:	1080201c 	xori	r2,r2,128
  801d54:	10bfe004 	addi	r2,r2,-128
  801d58:	10000a1e 	bne	r2,zero,801d84 <tick+0x150c>
  801d5c:	d0a75c43 	ldbu	r2,-25231(gp)
  801d60:	10803fcc 	andi	r2,r2,255
  801d64:	1080201c 	xori	r2,r2,128
  801d68:	10bfe004 	addi	r2,r2,-128
  801d6c:	10000726 	beq	r2,zero,801d8c <tick+0x1514>
  801d70:	d0a766c3 	ldbu	r2,-25189(gp)
  801d74:	10803fcc 	andi	r2,r2,255
  801d78:	1080201c 	xori	r2,r2,128
  801d7c:	10bfe004 	addi	r2,r2,-128
  801d80:	1000021e 	bne	r2,zero,801d8c <tick+0x1514>
  801d84:	00800044 	movi	r2,1
  801d88:	00000106 	br	801d90 <tick+0x1518>
  801d8c:	0005883a 	mov	r2,zero
  801d90:	d0a75685 	stb	r2,-25254(gp)
      g88 = g1;
  801d94:	d0a76403 	ldbu	r2,-25200(gp)
  801d98:	d0a79405 	stb	r2,-25008(gp)
      g90 =(PRE_g89);
  801d9c:	d0a78a03 	ldbu	r2,-25048(gp)
  801da0:	d0a77e45 	stb	r2,-25095(gp)
      g90b = g90;
  801da4:	d0a77e43 	ldbu	r2,-25095(gp)
  801da8:	d0a79105 	stb	r2,-25020(gp)
      _cg90 = _Pacemaker1_local_AVI_stop;
  801dac:	d0a78b43 	ldbu	r2,-25043(gp)
  801db0:	d0a77445 	stb	r2,-25135(gp)
      g89 =((g90b&&(!(_cg90)))||g88||(g92b&&_cg92)||g94);
  801db4:	d0a79103 	ldbu	r2,-25020(gp)
  801db8:	10803fcc 	andi	r2,r2,255
  801dbc:	1080201c 	xori	r2,r2,128
  801dc0:	10bfe004 	addi	r2,r2,-128
  801dc4:	10000526 	beq	r2,zero,801ddc <tick+0x1564>
  801dc8:	d0a77443 	ldbu	r2,-25135(gp)
  801dcc:	10803fcc 	andi	r2,r2,255
  801dd0:	1080201c 	xori	r2,r2,128
  801dd4:	10bfe004 	addi	r2,r2,-128
  801dd8:	10001426 	beq	r2,zero,801e2c <tick+0x15b4>
  801ddc:	d0a79403 	ldbu	r2,-25008(gp)
  801de0:	10803fcc 	andi	r2,r2,255
  801de4:	1080201c 	xori	r2,r2,128
  801de8:	10bfe004 	addi	r2,r2,-128
  801dec:	10000f1e 	bne	r2,zero,801e2c <tick+0x15b4>
  801df0:	d0a77b43 	ldbu	r2,-25107(gp)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10000526 	beq	r2,zero,801e18 <tick+0x15a0>
  801e04:	d0a79503 	ldbu	r2,-25004(gp)
  801e08:	10803fcc 	andi	r2,r2,255
  801e0c:	1080201c 	xori	r2,r2,128
  801e10:	10bfe004 	addi	r2,r2,-128
  801e14:	1000051e 	bne	r2,zero,801e2c <tick+0x15b4>
  801e18:	d0a77283 	ldbu	r2,-25142(gp)
  801e1c:	10803fcc 	andi	r2,r2,255
  801e20:	1080201c 	xori	r2,r2,128
  801e24:	10bfe004 	addi	r2,r2,-128
  801e28:	10000226 	beq	r2,zero,801e34 <tick+0x15bc>
  801e2c:	00800044 	movi	r2,1
  801e30:	00000106 	br	801e38 <tick+0x15c0>
  801e34:	0005883a 	mov	r2,zero
  801e38:	d0a78545 	stb	r2,-25067(gp)
      g91 =((g90b&&_cg90)||(g93&&(!(_cg93))));
  801e3c:	d0a79103 	ldbu	r2,-25020(gp)
  801e40:	10803fcc 	andi	r2,r2,255
  801e44:	1080201c 	xori	r2,r2,128
  801e48:	10bfe004 	addi	r2,r2,-128
  801e4c:	10000526 	beq	r2,zero,801e64 <tick+0x15ec>
  801e50:	d0a77443 	ldbu	r2,-25135(gp)
  801e54:	10803fcc 	andi	r2,r2,255
  801e58:	1080201c 	xori	r2,r2,128
  801e5c:	10bfe004 	addi	r2,r2,-128
  801e60:	10000a1e 	bne	r2,zero,801e8c <tick+0x1614>
  801e64:	d0a78103 	ldbu	r2,-25084(gp)
  801e68:	10803fcc 	andi	r2,r2,255
  801e6c:	1080201c 	xori	r2,r2,128
  801e70:	10bfe004 	addi	r2,r2,-128
  801e74:	10000726 	beq	r2,zero,801e94 <tick+0x161c>
  801e78:	d0a78c03 	ldbu	r2,-25040(gp)
  801e7c:	10803fcc 	andi	r2,r2,255
  801e80:	1080201c 	xori	r2,r2,128
  801e84:	10bfe004 	addi	r2,r2,-128
  801e88:	1000021e 	bne	r2,zero,801e94 <tick+0x161c>
  801e8c:	00800044 	movi	r2,1
  801e90:	00000106 	br	801e98 <tick+0x1620>
  801e94:	0005883a 	mov	r2,zero
  801e98:	d0a75745 	stb	r2,-25251(gp)
      g96 = g1;
  801e9c:	d0a76403 	ldbu	r2,-25200(gp)
  801ea0:	d0a786c5 	stb	r2,-25061(gp)
      g98 =(PRE_g97);
  801ea4:	d0a78203 	ldbu	r2,-25080(gp)
  801ea8:	d0a78905 	stb	r2,-25052(gp)
      g98b = g98;
  801eac:	d0a78903 	ldbu	r2,-25052(gp)
  801eb0:	d0a78405 	stb	r2,-25072(gp)
      _cg98 = _Pacemaker1_local_AVI_stop;
  801eb4:	d0a78b43 	ldbu	r2,-25043(gp)
  801eb8:	d0a76585 	stb	r2,-25194(gp)
      g97 =(g96||g101||(g98b&&(!(_cg98))));
  801ebc:	d0a786c3 	ldbu	r2,-25061(gp)
  801ec0:	10803fcc 	andi	r2,r2,255
  801ec4:	1080201c 	xori	r2,r2,128
  801ec8:	10bfe004 	addi	r2,r2,-128
  801ecc:	10000f1e 	bne	r2,zero,801f0c <tick+0x1694>
  801ed0:	d0a77843 	ldbu	r2,-25119(gp)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	1080201c 	xori	r2,r2,128
  801edc:	10bfe004 	addi	r2,r2,-128
  801ee0:	10000a1e 	bne	r2,zero,801f0c <tick+0x1694>
  801ee4:	d0a78403 	ldbu	r2,-25072(gp)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	10000726 	beq	r2,zero,801f14 <tick+0x169c>
  801ef8:	d0a76583 	ldbu	r2,-25194(gp)
  801efc:	10803fcc 	andi	r2,r2,255
  801f00:	1080201c 	xori	r2,r2,128
  801f04:	10bfe004 	addi	r2,r2,-128
  801f08:	1000021e 	bne	r2,zero,801f14 <tick+0x169c>
  801f0c:	00800044 	movi	r2,1
  801f10:	00000106 	br	801f18 <tick+0x16a0>
  801f14:	0005883a 	mov	r2,zero
  801f18:	d0a76605 	stb	r2,-25192(gp)
      g99 =((g98b&&_cg98)||(g100&&(!(_cg100))));
  801f1c:	d0a78403 	ldbu	r2,-25072(gp)
  801f20:	10803fcc 	andi	r2,r2,255
  801f24:	1080201c 	xori	r2,r2,128
  801f28:	10bfe004 	addi	r2,r2,-128
  801f2c:	10000526 	beq	r2,zero,801f44 <tick+0x16cc>
  801f30:	d0a76583 	ldbu	r2,-25194(gp)
  801f34:	10803fcc 	andi	r2,r2,255
  801f38:	1080201c 	xori	r2,r2,128
  801f3c:	10bfe004 	addi	r2,r2,-128
  801f40:	10000a1e 	bne	r2,zero,801f6c <tick+0x16f4>
  801f44:	d0a77503 	ldbu	r2,-25132(gp)
  801f48:	10803fcc 	andi	r2,r2,255
  801f4c:	1080201c 	xori	r2,r2,128
  801f50:	10bfe004 	addi	r2,r2,-128
  801f54:	10000726 	beq	r2,zero,801f74 <tick+0x16fc>
  801f58:	d0a77943 	ldbu	r2,-25115(gp)
  801f5c:	10803fcc 	andi	r2,r2,255
  801f60:	1080201c 	xori	r2,r2,128
  801f64:	10bfe004 	addi	r2,r2,-128
  801f68:	1000021e 	bne	r2,zero,801f74 <tick+0x16fc>
  801f6c:	00800044 	movi	r2,1
  801f70:	00000106 	br	801f78 <tick+0x1700>
  801f74:	0005883a 	mov	r2,zero
  801f78:	d0a77585 	stb	r2,-25130(gp)
      g103 = g1;
  801f7c:	d0a76403 	ldbu	r2,-25200(gp)
  801f80:	d0a75b85 	stb	r2,-25234(gp)
      g107 =(PRE_g106);
  801f84:	d0a77d83 	ldbu	r2,-25098(gp)
  801f88:	d0a78785 	stb	r2,-25058(gp)
      g107b = g107;
  801f8c:	d0a78783 	ldbu	r2,-25058(gp)
  801f90:	d0a78245 	stb	r2,-25079(gp)
      _cg107 = _Pacemaker1_local_URI_ex;
  801f94:	d0a78c43 	ldbu	r2,-25039(gp)
  801f98:	d0a77085 	stb	r2,-25150(gp)
      g105 =(PRE_g104);
  801f9c:	d0a76b83 	ldbu	r2,-25170(gp)
  801fa0:	d0a76d45 	stb	r2,-25163(gp)
      g105b = g105;
  801fa4:	d0a76d43 	ldbu	r2,-25163(gp)
  801fa8:	d0a78f85 	stb	r2,-25026(gp)
      _cg105 = _Pacemaker1_local_AVI_stop;
  801fac:	d0a78b43 	ldbu	r2,-25043(gp)
  801fb0:	d0a79b05 	stb	r2,-24980(gp)
      g104 =(g103||(g107b&&_cg107)||(g105b&&(!(_cg105))));
  801fb4:	d0a75b83 	ldbu	r2,-25234(gp)
  801fb8:	10803fcc 	andi	r2,r2,255
  801fbc:	1080201c 	xori	r2,r2,128
  801fc0:	10bfe004 	addi	r2,r2,-128
  801fc4:	1000141e 	bne	r2,zero,802018 <tick+0x17a0>
  801fc8:	d0a78243 	ldbu	r2,-25079(gp)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	10000526 	beq	r2,zero,801ff0 <tick+0x1778>
  801fdc:	d0a77083 	ldbu	r2,-25150(gp)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	10000a1e 	bne	r2,zero,802018 <tick+0x17a0>
  801ff0:	d0a78f83 	ldbu	r2,-25026(gp)
  801ff4:	10803fcc 	andi	r2,r2,255
  801ff8:	1080201c 	xori	r2,r2,128
  801ffc:	10bfe004 	addi	r2,r2,-128
  802000:	10000726 	beq	r2,zero,802020 <tick+0x17a8>
  802004:	d0a79b03 	ldbu	r2,-24980(gp)
  802008:	10803fcc 	andi	r2,r2,255
  80200c:	1080201c 	xori	r2,r2,128
  802010:	10bfe004 	addi	r2,r2,-128
  802014:	1000021e 	bne	r2,zero,802020 <tick+0x17a8>
  802018:	00800044 	movi	r2,1
  80201c:	00000106 	br	802024 <tick+0x17ac>
  802020:	0005883a 	mov	r2,zero
  802024:	d0a78805 	stb	r2,-25056(gp)
      g106 =((g105b&&_cg105)||(g107b&&(!(_cg107))));
  802028:	d0a78f83 	ldbu	r2,-25026(gp)
  80202c:	10803fcc 	andi	r2,r2,255
  802030:	1080201c 	xori	r2,r2,128
  802034:	10bfe004 	addi	r2,r2,-128
  802038:	10000526 	beq	r2,zero,802050 <tick+0x17d8>
  80203c:	d0a79b03 	ldbu	r2,-24980(gp)
  802040:	10803fcc 	andi	r2,r2,255
  802044:	1080201c 	xori	r2,r2,128
  802048:	10bfe004 	addi	r2,r2,-128
  80204c:	10000a1e 	bne	r2,zero,802078 <tick+0x1800>
  802050:	d0a78243 	ldbu	r2,-25079(gp)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1080201c 	xori	r2,r2,128
  80205c:	10bfe004 	addi	r2,r2,-128
  802060:	10000726 	beq	r2,zero,802080 <tick+0x1808>
  802064:	d0a77083 	ldbu	r2,-25150(gp)
  802068:	10803fcc 	andi	r2,r2,255
  80206c:	1080201c 	xori	r2,r2,128
  802070:	10bfe004 	addi	r2,r2,-128
  802074:	1000021e 	bne	r2,zero,802080 <tick+0x1808>
  802078:	00800044 	movi	r2,1
  80207c:	00000106 	br	802084 <tick+0x180c>
  802080:	0005883a 	mov	r2,zero
  802084:	d0a798c5 	stb	r2,-24989(gp)
      g113 = g1;
  802088:	d0a76403 	ldbu	r2,-25200(gp)
  80208c:	d0a787c5 	stb	r2,-25057(gp)
      g114 =(g113||g115);
  802090:	d0a787c3 	ldbu	r2,-25057(gp)
  802094:	10803fcc 	andi	r2,r2,255
  802098:	1080201c 	xori	r2,r2,128
  80209c:	10bfe004 	addi	r2,r2,-128
  8020a0:	1000051e 	bne	r2,zero,8020b8 <tick+0x1840>
  8020a4:	d0a75f83 	ldbu	r2,-25218(gp)
  8020a8:	10803fcc 	andi	r2,r2,255
  8020ac:	1080201c 	xori	r2,r2,128
  8020b0:	10bfe004 	addi	r2,r2,-128
  8020b4:	10000226 	beq	r2,zero,8020c0 <tick+0x1848>
  8020b8:	00800044 	movi	r2,1
  8020bc:	00000106 	br	8020c4 <tick+0x184c>
  8020c0:	0005883a 	mov	r2,zero
  8020c4:	d0a77985 	stb	r2,-25114(gp)
      if(g114){
  8020c8:	d0a77983 	ldbu	r2,-25114(gp)
  8020cc:	10803fcc 	andi	r2,r2,255
  8020d0:	1080201c 	xori	r2,r2,128
  8020d4:	10bfe004 	addi	r2,r2,-128
  8020d8:	10000226 	beq	r2,zero,8020e4 <tick+0x186c>
         _Pacemaker1_local__reg_FilteredVSense21 = _Pacemaker1_local_FilteredVSense;
  8020dc:	d0a77903 	ldbu	r2,-25116(gp)
  8020e0:	d0a76d05 	stb	r2,-25164(gp)
      }
      g114b = g114;
  8020e4:	d0a77983 	ldbu	r2,-25114(gp)
  8020e8:	d0a75d85 	stb	r2,-25226(gp)
      if(g114b){
  8020ec:	d0a75d83 	ldbu	r2,-25226(gp)
  8020f0:	10803fcc 	andi	r2,r2,255
  8020f4:	1080201c 	xori	r2,r2,128
  8020f8:	10bfe004 	addi	r2,r2,-128
  8020fc:	10000226 	beq	r2,zero,802108 <tick+0x1890>
         _Pacemaker1_local__reg_AVI_ex21 = _Pacemaker1_local_AVI_ex;
  802100:	d0a78383 	ldbu	r2,-25074(gp)
  802104:	d0a77245 	stb	r2,-25143(gp)
      }
      g8_e1 =(!((g4||g6)));
  802108:	d0a757c3 	ldbu	r2,-25249(gp)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	1000071e 	bne	r2,zero,802138 <tick+0x18c0>
  80211c:	d0a78bc3 	ldbu	r2,-25041(gp)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	1000021e 	bne	r2,zero,802138 <tick+0x18c0>
  802130:	00800044 	movi	r2,1
  802134:	00000106 	br	80213c <tick+0x18c4>
  802138:	0005883a 	mov	r2,zero
  80213c:	d0a76a05 	stb	r2,-25176(gp)
      g17_e2 =(!((g11||g14)));
  802140:	d0a79143 	ldbu	r2,-25019(gp)
  802144:	10803fcc 	andi	r2,r2,255
  802148:	1080201c 	xori	r2,r2,128
  80214c:	10bfe004 	addi	r2,r2,-128
  802150:	1000071e 	bne	r2,zero,802170 <tick+0x18f8>
  802154:	d0a77703 	ldbu	r2,-25124(gp)
  802158:	10803fcc 	andi	r2,r2,255
  80215c:	1080201c 	xori	r2,r2,128
  802160:	10bfe004 	addi	r2,r2,-128
  802164:	1000021e 	bne	r2,zero,802170 <tick+0x18f8>
  802168:	00800044 	movi	r2,1
  80216c:	00000106 	br	802174 <tick+0x18fc>
  802170:	0005883a 	mov	r2,zero
  802174:	d0a77205 	stb	r2,-25144(gp)
      g25_e3 =(!((g20||g22)));
  802178:	d0a77fc3 	ldbu	r2,-25089(gp)
  80217c:	10803fcc 	andi	r2,r2,255
  802180:	1080201c 	xori	r2,r2,128
  802184:	10bfe004 	addi	r2,r2,-128
  802188:	1000071e 	bne	r2,zero,8021a8 <tick+0x1930>
  80218c:	d0a79203 	ldbu	r2,-25016(gp)
  802190:	10803fcc 	andi	r2,r2,255
  802194:	1080201c 	xori	r2,r2,128
  802198:	10bfe004 	addi	r2,r2,-128
  80219c:	1000021e 	bne	r2,zero,8021a8 <tick+0x1930>
  8021a0:	00800044 	movi	r2,1
  8021a4:	00000106 	br	8021ac <tick+0x1934>
  8021a8:	0005883a 	mov	r2,zero
  8021ac:	d0a76385 	stb	r2,-25202(gp)
      g39_e4 =(!((g28||g31||g33||g36)));
  8021b0:	d0a79243 	ldbu	r2,-25015(gp)
  8021b4:	10803fcc 	andi	r2,r2,255
  8021b8:	1080201c 	xori	r2,r2,128
  8021bc:	10bfe004 	addi	r2,r2,-128
  8021c0:	1000111e 	bne	r2,zero,802208 <tick+0x1990>
  8021c4:	d0a767c3 	ldbu	r2,-25185(gp)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	10000c1e 	bne	r2,zero,802208 <tick+0x1990>
  8021d8:	d0a77ac3 	ldbu	r2,-25109(gp)
  8021dc:	10803fcc 	andi	r2,r2,255
  8021e0:	1080201c 	xori	r2,r2,128
  8021e4:	10bfe004 	addi	r2,r2,-128
  8021e8:	1000071e 	bne	r2,zero,802208 <tick+0x1990>
  8021ec:	d0a784c3 	ldbu	r2,-25069(gp)
  8021f0:	10803fcc 	andi	r2,r2,255
  8021f4:	1080201c 	xori	r2,r2,128
  8021f8:	10bfe004 	addi	r2,r2,-128
  8021fc:	1000021e 	bne	r2,zero,802208 <tick+0x1990>
  802200:	00800044 	movi	r2,1
  802204:	00000106 	br	80220c <tick+0x1994>
  802208:	0005883a 	mov	r2,zero
  80220c:	d0a77045 	stb	r2,-25151(gp)
      g47_e5 =(!((g42||g44)));
  802210:	d0a75c83 	ldbu	r2,-25230(gp)
  802214:	10803fcc 	andi	r2,r2,255
  802218:	1080201c 	xori	r2,r2,128
  80221c:	10bfe004 	addi	r2,r2,-128
  802220:	1000071e 	bne	r2,zero,802240 <tick+0x19c8>
  802224:	d0a76203 	ldbu	r2,-25208(gp)
  802228:	10803fcc 	andi	r2,r2,255
  80222c:	1080201c 	xori	r2,r2,128
  802230:	10bfe004 	addi	r2,r2,-128
  802234:	1000021e 	bne	r2,zero,802240 <tick+0x19c8>
  802238:	00800044 	movi	r2,1
  80223c:	00000106 	br	802244 <tick+0x19cc>
  802240:	0005883a 	mov	r2,zero
  802244:	d0a785c5 	stb	r2,-25065(gp)
      g63_e6 =(!((g50||g53||g57)));
  802248:	d0a78683 	ldbu	r2,-25062(gp)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10000c1e 	bne	r2,zero,80228c <tick+0x1a14>
  80225c:	d0a78943 	ldbu	r2,-25051(gp)
  802260:	10803fcc 	andi	r2,r2,255
  802264:	1080201c 	xori	r2,r2,128
  802268:	10bfe004 	addi	r2,r2,-128
  80226c:	1000071e 	bne	r2,zero,80228c <tick+0x1a14>
  802270:	d0a789c3 	ldbu	r2,-25049(gp)
  802274:	10803fcc 	andi	r2,r2,255
  802278:	1080201c 	xori	r2,r2,128
  80227c:	10bfe004 	addi	r2,r2,-128
  802280:	1000021e 	bne	r2,zero,80228c <tick+0x1a14>
  802284:	00800044 	movi	r2,1
  802288:	00000106 	br	802290 <tick+0x1a18>
  80228c:	0005883a 	mov	r2,zero
  802290:	d0a77785 	stb	r2,-25122(gp)
      g70_e7 =(!((g66||g68)));
  802294:	d0a77603 	ldbu	r2,-25128(gp)
  802298:	10803fcc 	andi	r2,r2,255
  80229c:	1080201c 	xori	r2,r2,128
  8022a0:	10bfe004 	addi	r2,r2,-128
  8022a4:	1000071e 	bne	r2,zero,8022c4 <tick+0x1a4c>
  8022a8:	d0a79083 	ldbu	r2,-25022(gp)
  8022ac:	10803fcc 	andi	r2,r2,255
  8022b0:	1080201c 	xori	r2,r2,128
  8022b4:	10bfe004 	addi	r2,r2,-128
  8022b8:	1000021e 	bne	r2,zero,8022c4 <tick+0x1a4c>
  8022bc:	00800044 	movi	r2,1
  8022c0:	00000106 	br	8022c8 <tick+0x1a50>
  8022c4:	0005883a 	mov	r2,zero
  8022c8:	d0a77385 	stb	r2,-25138(gp)
      g79_e8 =(!((g73||g76)));
  8022cc:	d0a79283 	ldbu	r2,-25014(gp)
  8022d0:	10803fcc 	andi	r2,r2,255
  8022d4:	1080201c 	xori	r2,r2,128
  8022d8:	10bfe004 	addi	r2,r2,-128
  8022dc:	1000071e 	bne	r2,zero,8022fc <tick+0x1a84>
  8022e0:	d0a76783 	ldbu	r2,-25186(gp)
  8022e4:	10803fcc 	andi	r2,r2,255
  8022e8:	1080201c 	xori	r2,r2,128
  8022ec:	10bfe004 	addi	r2,r2,-128
  8022f0:	1000021e 	bne	r2,zero,8022fc <tick+0x1a84>
  8022f4:	00800044 	movi	r2,1
  8022f8:	00000106 	br	802300 <tick+0x1a88>
  8022fc:	0005883a 	mov	r2,zero
  802300:	d0a78ec5 	stb	r2,-25029(gp)
      g87_e9 =(!((g82||g84)));
  802304:	d0a76503 	ldbu	r2,-25196(gp)
  802308:	10803fcc 	andi	r2,r2,255
  80230c:	1080201c 	xori	r2,r2,128
  802310:	10bfe004 	addi	r2,r2,-128
  802314:	1000071e 	bne	r2,zero,802334 <tick+0x1abc>
  802318:	d0a768c3 	ldbu	r2,-25181(gp)
  80231c:	10803fcc 	andi	r2,r2,255
  802320:	1080201c 	xori	r2,r2,128
  802324:	10bfe004 	addi	r2,r2,-128
  802328:	1000021e 	bne	r2,zero,802334 <tick+0x1abc>
  80232c:	00800044 	movi	r2,1
  802330:	00000106 	br	802338 <tick+0x1ac0>
  802334:	0005883a 	mov	r2,zero
  802338:	d0a75705 	stb	r2,-25252(gp)
      g95_e10 =(!((g90||g92)));
  80233c:	d0a77e43 	ldbu	r2,-25095(gp)
  802340:	10803fcc 	andi	r2,r2,255
  802344:	1080201c 	xori	r2,r2,128
  802348:	10bfe004 	addi	r2,r2,-128
  80234c:	1000071e 	bne	r2,zero,80236c <tick+0x1af4>
  802350:	d0a763c3 	ldbu	r2,-25201(gp)
  802354:	10803fcc 	andi	r2,r2,255
  802358:	1080201c 	xori	r2,r2,128
  80235c:	10bfe004 	addi	r2,r2,-128
  802360:	1000021e 	bne	r2,zero,80236c <tick+0x1af4>
  802364:	00800044 	movi	r2,1
  802368:	00000106 	br	802370 <tick+0x1af8>
  80236c:	0005883a 	mov	r2,zero
  802370:	d0a79185 	stb	r2,-25018(gp)
      g102_e11 =(!((g98||g100)));
  802374:	d0a78903 	ldbu	r2,-25052(gp)
  802378:	10803fcc 	andi	r2,r2,255
  80237c:	1080201c 	xori	r2,r2,128
  802380:	10bfe004 	addi	r2,r2,-128
  802384:	1000071e 	bne	r2,zero,8023a4 <tick+0x1b2c>
  802388:	d0a77503 	ldbu	r2,-25132(gp)
  80238c:	10803fcc 	andi	r2,r2,255
  802390:	1080201c 	xori	r2,r2,128
  802394:	10bfe004 	addi	r2,r2,-128
  802398:	1000021e 	bne	r2,zero,8023a4 <tick+0x1b2c>
  80239c:	00800044 	movi	r2,1
  8023a0:	00000106 	br	8023a8 <tick+0x1b30>
  8023a4:	0005883a 	mov	r2,zero
  8023a8:	d0a78ac5 	stb	r2,-25045(gp)
      g108_e12 =(!((g105||g107)));
  8023ac:	d0a76d43 	ldbu	r2,-25163(gp)
  8023b0:	10803fcc 	andi	r2,r2,255
  8023b4:	1080201c 	xori	r2,r2,128
  8023b8:	10bfe004 	addi	r2,r2,-128
  8023bc:	1000071e 	bne	r2,zero,8023dc <tick+0x1b64>
  8023c0:	d0a78783 	ldbu	r2,-25058(gp)
  8023c4:	10803fcc 	andi	r2,r2,255
  8023c8:	1080201c 	xori	r2,r2,128
  8023cc:	10bfe004 	addi	r2,r2,-128
  8023d0:	1000021e 	bne	r2,zero,8023dc <tick+0x1b64>
  8023d4:	00800044 	movi	r2,1
  8023d8:	00000106 	br	8023e0 <tick+0x1b68>
  8023dc:	0005883a 	mov	r2,zero
  8023e0:	d0a77805 	stb	r2,-25120(gp)
      g112_e13 =(!(g111));
  8023e4:	d0a75883 	ldbu	r2,-25246(gp)
  8023e8:	10803fcc 	andi	r2,r2,255
  8023ec:	1080201c 	xori	r2,r2,128
  8023f0:	10bfe004 	addi	r2,r2,-128
  8023f4:	1005003a 	cmpeq	r2,r2,zero
  8023f8:	d0a76e45 	stb	r2,-25159(gp)
      g116_e14 =(!(g115));
  8023fc:	d0a75f83 	ldbu	r2,-25218(gp)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	1005003a 	cmpeq	r2,r2,zero
  802410:	d0a79a85 	stb	r2,-24982(gp)
      g117_fix0 =((g8_e1||g8)&&(g17_e2||g17)&&(g25_e3||g25)&&(g39_e4||g39));
  802414:	d0a76a03 	ldbu	r2,-25176(gp)
  802418:	10803fcc 	andi	r2,r2,255
  80241c:	1080201c 	xori	r2,r2,128
  802420:	10bfe004 	addi	r2,r2,-128
  802424:	1000051e 	bne	r2,zero,80243c <tick+0x1bc4>
  802428:	d0a78983 	ldbu	r2,-25050(gp)
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	1080201c 	xori	r2,r2,128
  802434:	10bfe004 	addi	r2,r2,-128
  802438:	10002026 	beq	r2,zero,8024bc <tick+0x1c44>
  80243c:	d0a77203 	ldbu	r2,-25144(gp)
  802440:	10803fcc 	andi	r2,r2,255
  802444:	1080201c 	xori	r2,r2,128
  802448:	10bfe004 	addi	r2,r2,-128
  80244c:	1000051e 	bne	r2,zero,802464 <tick+0x1bec>
  802450:	d0a76703 	ldbu	r2,-25188(gp)
  802454:	10803fcc 	andi	r2,r2,255
  802458:	1080201c 	xori	r2,r2,128
  80245c:	10bfe004 	addi	r2,r2,-128
  802460:	10001626 	beq	r2,zero,8024bc <tick+0x1c44>
  802464:	d0a76383 	ldbu	r2,-25202(gp)
  802468:	10803fcc 	andi	r2,r2,255
  80246c:	1080201c 	xori	r2,r2,128
  802470:	10bfe004 	addi	r2,r2,-128
  802474:	1000051e 	bne	r2,zero,80248c <tick+0x1c14>
  802478:	d0a790c3 	ldbu	r2,-25021(gp)
  80247c:	10803fcc 	andi	r2,r2,255
  802480:	1080201c 	xori	r2,r2,128
  802484:	10bfe004 	addi	r2,r2,-128
  802488:	10000c26 	beq	r2,zero,8024bc <tick+0x1c44>
  80248c:	d0a77043 	ldbu	r2,-25151(gp)
  802490:	10803fcc 	andi	r2,r2,255
  802494:	1080201c 	xori	r2,r2,128
  802498:	10bfe004 	addi	r2,r2,-128
  80249c:	1000051e 	bne	r2,zero,8024b4 <tick+0x1c3c>
  8024a0:	d0a79683 	ldbu	r2,-24998(gp)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	1080201c 	xori	r2,r2,128
  8024ac:	10bfe004 	addi	r2,r2,-128
  8024b0:	10000226 	beq	r2,zero,8024bc <tick+0x1c44>
  8024b4:	00800044 	movi	r2,1
  8024b8:	00000106 	br	8024c0 <tick+0x1c48>
  8024bc:	0005883a 	mov	r2,zero
  8024c0:	d0a76b05 	stb	r2,-25172(gp)
      g117_fix1 =(g117_fix0&&(g47_e5||g47)&&(g63_e6||g63)&&(g70_e7||g70));
  8024c4:	d0a76b03 	ldbu	r2,-25172(gp)
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	1080201c 	xori	r2,r2,128
  8024d0:	10bfe004 	addi	r2,r2,-128
  8024d4:	10002026 	beq	r2,zero,802558 <tick+0x1ce0>
  8024d8:	d0a785c3 	ldbu	r2,-25065(gp)
  8024dc:	10803fcc 	andi	r2,r2,255
  8024e0:	1080201c 	xori	r2,r2,128
  8024e4:	10bfe004 	addi	r2,r2,-128
  8024e8:	1000051e 	bne	r2,zero,802500 <tick+0x1c88>
  8024ec:	d0a75c03 	ldbu	r2,-25232(gp)
  8024f0:	10803fcc 	andi	r2,r2,255
  8024f4:	1080201c 	xori	r2,r2,128
  8024f8:	10bfe004 	addi	r2,r2,-128
  8024fc:	10001626 	beq	r2,zero,802558 <tick+0x1ce0>
  802500:	d0a77783 	ldbu	r2,-25122(gp)
  802504:	10803fcc 	andi	r2,r2,255
  802508:	1080201c 	xori	r2,r2,128
  80250c:	10bfe004 	addi	r2,r2,-128
  802510:	1000051e 	bne	r2,zero,802528 <tick+0x1cb0>
  802514:	d0a77f83 	ldbu	r2,-25090(gp)
  802518:	10803fcc 	andi	r2,r2,255
  80251c:	1080201c 	xori	r2,r2,128
  802520:	10bfe004 	addi	r2,r2,-128
  802524:	10000c26 	beq	r2,zero,802558 <tick+0x1ce0>
  802528:	d0a77383 	ldbu	r2,-25138(gp)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	1000051e 	bne	r2,zero,802550 <tick+0x1cd8>
  80253c:	d0a78a43 	ldbu	r2,-25047(gp)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	10000226 	beq	r2,zero,802558 <tick+0x1ce0>
  802550:	00800044 	movi	r2,1
  802554:	00000106 	br	80255c <tick+0x1ce4>
  802558:	0005883a 	mov	r2,zero
  80255c:	d0a77745 	stb	r2,-25123(gp)
      g117_fix2 =(g117_fix1&&(g79_e8||g79)&&(g87_e9||g87)&&(g95_e10||g95));
  802560:	d0a77743 	ldbu	r2,-25123(gp)
  802564:	10803fcc 	andi	r2,r2,255
  802568:	1080201c 	xori	r2,r2,128
  80256c:	10bfe004 	addi	r2,r2,-128
  802570:	10002026 	beq	r2,zero,8025f4 <tick+0x1d7c>
  802574:	d0a78ec3 	ldbu	r2,-25029(gp)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	1000051e 	bne	r2,zero,80259c <tick+0x1d24>
  802588:	d0a77143 	ldbu	r2,-25147(gp)
  80258c:	10803fcc 	andi	r2,r2,255
  802590:	1080201c 	xori	r2,r2,128
  802594:	10bfe004 	addi	r2,r2,-128
  802598:	10001626 	beq	r2,zero,8025f4 <tick+0x1d7c>
  80259c:	d0a75703 	ldbu	r2,-25252(gp)
  8025a0:	10803fcc 	andi	r2,r2,255
  8025a4:	1080201c 	xori	r2,r2,128
  8025a8:	10bfe004 	addi	r2,r2,-128
  8025ac:	1000051e 	bne	r2,zero,8025c4 <tick+0x1d4c>
  8025b0:	d0a761c3 	ldbu	r2,-25209(gp)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	10000c26 	beq	r2,zero,8025f4 <tick+0x1d7c>
  8025c4:	d0a79183 	ldbu	r2,-25018(gp)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	1000051e 	bne	r2,zero,8025ec <tick+0x1d74>
  8025d8:	d0a78643 	ldbu	r2,-25063(gp)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	10000226 	beq	r2,zero,8025f4 <tick+0x1d7c>
  8025ec:	00800044 	movi	r2,1
  8025f0:	00000106 	br	8025f8 <tick+0x1d80>
  8025f4:	0005883a 	mov	r2,zero
  8025f8:	d0a79705 	stb	r2,-24996(gp)
      g117_fix3 =(g8||g17||g25||g39);
  8025fc:	d0a78983 	ldbu	r2,-25050(gp)
  802600:	10803fcc 	andi	r2,r2,255
  802604:	1080201c 	xori	r2,r2,128
  802608:	10bfe004 	addi	r2,r2,-128
  80260c:	10000f1e 	bne	r2,zero,80264c <tick+0x1dd4>
  802610:	d0a76703 	ldbu	r2,-25188(gp)
  802614:	10803fcc 	andi	r2,r2,255
  802618:	1080201c 	xori	r2,r2,128
  80261c:	10bfe004 	addi	r2,r2,-128
  802620:	10000a1e 	bne	r2,zero,80264c <tick+0x1dd4>
  802624:	d0a790c3 	ldbu	r2,-25021(gp)
  802628:	10803fcc 	andi	r2,r2,255
  80262c:	1080201c 	xori	r2,r2,128
  802630:	10bfe004 	addi	r2,r2,-128
  802634:	1000051e 	bne	r2,zero,80264c <tick+0x1dd4>
  802638:	d0a79683 	ldbu	r2,-24998(gp)
  80263c:	10803fcc 	andi	r2,r2,255
  802640:	1080201c 	xori	r2,r2,128
  802644:	10bfe004 	addi	r2,r2,-128
  802648:	10000226 	beq	r2,zero,802654 <tick+0x1ddc>
  80264c:	00800044 	movi	r2,1
  802650:	00000106 	br	802658 <tick+0x1de0>
  802654:	0005883a 	mov	r2,zero
  802658:	d0a77685 	stb	r2,-25126(gp)
      g117_fix4 =(g117_fix3||g47||g63||g70);
  80265c:	d0a77683 	ldbu	r2,-25126(gp)
  802660:	10803fcc 	andi	r2,r2,255
  802664:	1080201c 	xori	r2,r2,128
  802668:	10bfe004 	addi	r2,r2,-128
  80266c:	10000f1e 	bne	r2,zero,8026ac <tick+0x1e34>
  802670:	d0a75c03 	ldbu	r2,-25232(gp)
  802674:	10803fcc 	andi	r2,r2,255
  802678:	1080201c 	xori	r2,r2,128
  80267c:	10bfe004 	addi	r2,r2,-128
  802680:	10000a1e 	bne	r2,zero,8026ac <tick+0x1e34>
  802684:	d0a77f83 	ldbu	r2,-25090(gp)
  802688:	10803fcc 	andi	r2,r2,255
  80268c:	1080201c 	xori	r2,r2,128
  802690:	10bfe004 	addi	r2,r2,-128
  802694:	1000051e 	bne	r2,zero,8026ac <tick+0x1e34>
  802698:	d0a78a43 	ldbu	r2,-25047(gp)
  80269c:	10803fcc 	andi	r2,r2,255
  8026a0:	1080201c 	xori	r2,r2,128
  8026a4:	10bfe004 	addi	r2,r2,-128
  8026a8:	10000226 	beq	r2,zero,8026b4 <tick+0x1e3c>
  8026ac:	00800044 	movi	r2,1
  8026b0:	00000106 	br	8026b8 <tick+0x1e40>
  8026b4:	0005883a 	mov	r2,zero
  8026b8:	d0a76885 	stb	r2,-25182(gp)
      g117_e1_fix_fix =(g84||g92||g100||g107||g115||g14||g31||g53||g76||g33||g57);
  8026bc:	d0a768c3 	ldbu	r2,-25181(gp)
  8026c0:	10803fcc 	andi	r2,r2,255
  8026c4:	1080201c 	xori	r2,r2,128
  8026c8:	10bfe004 	addi	r2,r2,-128
  8026cc:	1000321e 	bne	r2,zero,802798 <tick+0x1f20>
  8026d0:	d0a763c3 	ldbu	r2,-25201(gp)
  8026d4:	10803fcc 	andi	r2,r2,255
  8026d8:	1080201c 	xori	r2,r2,128
  8026dc:	10bfe004 	addi	r2,r2,-128
  8026e0:	10002d1e 	bne	r2,zero,802798 <tick+0x1f20>
  8026e4:	d0a77503 	ldbu	r2,-25132(gp)
  8026e8:	10803fcc 	andi	r2,r2,255
  8026ec:	1080201c 	xori	r2,r2,128
  8026f0:	10bfe004 	addi	r2,r2,-128
  8026f4:	1000281e 	bne	r2,zero,802798 <tick+0x1f20>
  8026f8:	d0a78783 	ldbu	r2,-25058(gp)
  8026fc:	10803fcc 	andi	r2,r2,255
  802700:	1080201c 	xori	r2,r2,128
  802704:	10bfe004 	addi	r2,r2,-128
  802708:	1000231e 	bne	r2,zero,802798 <tick+0x1f20>
  80270c:	d0a75f83 	ldbu	r2,-25218(gp)
  802710:	10803fcc 	andi	r2,r2,255
  802714:	1080201c 	xori	r2,r2,128
  802718:	10bfe004 	addi	r2,r2,-128
  80271c:	10001e1e 	bne	r2,zero,802798 <tick+0x1f20>
  802720:	d0a77703 	ldbu	r2,-25124(gp)
  802724:	10803fcc 	andi	r2,r2,255
  802728:	1080201c 	xori	r2,r2,128
  80272c:	10bfe004 	addi	r2,r2,-128
  802730:	1000191e 	bne	r2,zero,802798 <tick+0x1f20>
  802734:	d0a767c3 	ldbu	r2,-25185(gp)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	1000141e 	bne	r2,zero,802798 <tick+0x1f20>
  802748:	d0a78943 	ldbu	r2,-25051(gp)
  80274c:	10803fcc 	andi	r2,r2,255
  802750:	1080201c 	xori	r2,r2,128
  802754:	10bfe004 	addi	r2,r2,-128
  802758:	10000f1e 	bne	r2,zero,802798 <tick+0x1f20>
  80275c:	d0a76783 	ldbu	r2,-25186(gp)
  802760:	10803fcc 	andi	r2,r2,255
  802764:	1080201c 	xori	r2,r2,128
  802768:	10bfe004 	addi	r2,r2,-128
  80276c:	10000a1e 	bne	r2,zero,802798 <tick+0x1f20>
  802770:	d0a77ac3 	ldbu	r2,-25109(gp)
  802774:	10803fcc 	andi	r2,r2,255
  802778:	1080201c 	xori	r2,r2,128
  80277c:	10bfe004 	addi	r2,r2,-128
  802780:	1000051e 	bne	r2,zero,802798 <tick+0x1f20>
  802784:	d0a789c3 	ldbu	r2,-25049(gp)
  802788:	10803fcc 	andi	r2,r2,255
  80278c:	1080201c 	xori	r2,r2,128
  802790:	10bfe004 	addi	r2,r2,-128
  802794:	10000226 	beq	r2,zero,8027a0 <tick+0x1f28>
  802798:	00800044 	movi	r2,1
  80279c:	00000106 	br	8027a4 <tick+0x1f2c>
  8027a0:	0005883a 	mov	r2,zero
  8027a4:	d0a76745 	stb	r2,-25187(gp)
      g117_e1_fix =(g82||g90||g98||g105||g6||g22||g44||g68||g36||g117_e1_fix_fix);
  8027a8:	d0a76503 	ldbu	r2,-25196(gp)
  8027ac:	10803fcc 	andi	r2,r2,255
  8027b0:	1080201c 	xori	r2,r2,128
  8027b4:	10bfe004 	addi	r2,r2,-128
  8027b8:	10002d1e 	bne	r2,zero,802870 <tick+0x1ff8>
  8027bc:	d0a77e43 	ldbu	r2,-25095(gp)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1080201c 	xori	r2,r2,128
  8027c8:	10bfe004 	addi	r2,r2,-128
  8027cc:	1000281e 	bne	r2,zero,802870 <tick+0x1ff8>
  8027d0:	d0a78903 	ldbu	r2,-25052(gp)
  8027d4:	10803fcc 	andi	r2,r2,255
  8027d8:	1080201c 	xori	r2,r2,128
  8027dc:	10bfe004 	addi	r2,r2,-128
  8027e0:	1000231e 	bne	r2,zero,802870 <tick+0x1ff8>
  8027e4:	d0a76d43 	ldbu	r2,-25163(gp)
  8027e8:	10803fcc 	andi	r2,r2,255
  8027ec:	1080201c 	xori	r2,r2,128
  8027f0:	10bfe004 	addi	r2,r2,-128
  8027f4:	10001e1e 	bne	r2,zero,802870 <tick+0x1ff8>
  8027f8:	d0a78bc3 	ldbu	r2,-25041(gp)
  8027fc:	10803fcc 	andi	r2,r2,255
  802800:	1080201c 	xori	r2,r2,128
  802804:	10bfe004 	addi	r2,r2,-128
  802808:	1000191e 	bne	r2,zero,802870 <tick+0x1ff8>
  80280c:	d0a79203 	ldbu	r2,-25016(gp)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	1000141e 	bne	r2,zero,802870 <tick+0x1ff8>
  802820:	d0a76203 	ldbu	r2,-25208(gp)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	1080201c 	xori	r2,r2,128
  80282c:	10bfe004 	addi	r2,r2,-128
  802830:	10000f1e 	bne	r2,zero,802870 <tick+0x1ff8>
  802834:	d0a79083 	ldbu	r2,-25022(gp)
  802838:	10803fcc 	andi	r2,r2,255
  80283c:	1080201c 	xori	r2,r2,128
  802840:	10bfe004 	addi	r2,r2,-128
  802844:	10000a1e 	bne	r2,zero,802870 <tick+0x1ff8>
  802848:	d0a784c3 	ldbu	r2,-25069(gp)
  80284c:	10803fcc 	andi	r2,r2,255
  802850:	1080201c 	xori	r2,r2,128
  802854:	10bfe004 	addi	r2,r2,-128
  802858:	1000051e 	bne	r2,zero,802870 <tick+0x1ff8>
  80285c:	d0a76743 	ldbu	r2,-25187(gp)
  802860:	10803fcc 	andi	r2,r2,255
  802864:	1080201c 	xori	r2,r2,128
  802868:	10bfe004 	addi	r2,r2,-128
  80286c:	10000226 	beq	r2,zero,802878 <tick+0x2000>
  802870:	00800044 	movi	r2,1
  802874:	00000106 	br	80287c <tick+0x2004>
  802878:	0005883a 	mov	r2,zero
  80287c:	d0a77c85 	stb	r2,-25102(gp)
      g117_e1 =(!((g4||g11||g20||g28||g42||g50||g66||g73||g111||g117_e1_fix)));
  802880:	d0a757c3 	ldbu	r2,-25249(gp)
  802884:	10803fcc 	andi	r2,r2,255
  802888:	1080201c 	xori	r2,r2,128
  80288c:	10bfe004 	addi	r2,r2,-128
  802890:	10002f1e 	bne	r2,zero,802950 <tick+0x20d8>
  802894:	d0a79143 	ldbu	r2,-25019(gp)
  802898:	10803fcc 	andi	r2,r2,255
  80289c:	1080201c 	xori	r2,r2,128
  8028a0:	10bfe004 	addi	r2,r2,-128
  8028a4:	10002a1e 	bne	r2,zero,802950 <tick+0x20d8>
  8028a8:	d0a77fc3 	ldbu	r2,-25089(gp)
  8028ac:	10803fcc 	andi	r2,r2,255
  8028b0:	1080201c 	xori	r2,r2,128
  8028b4:	10bfe004 	addi	r2,r2,-128
  8028b8:	1000251e 	bne	r2,zero,802950 <tick+0x20d8>
  8028bc:	d0a79243 	ldbu	r2,-25015(gp)
  8028c0:	10803fcc 	andi	r2,r2,255
  8028c4:	1080201c 	xori	r2,r2,128
  8028c8:	10bfe004 	addi	r2,r2,-128
  8028cc:	1000201e 	bne	r2,zero,802950 <tick+0x20d8>
  8028d0:	d0a75c83 	ldbu	r2,-25230(gp)
  8028d4:	10803fcc 	andi	r2,r2,255
  8028d8:	1080201c 	xori	r2,r2,128
  8028dc:	10bfe004 	addi	r2,r2,-128
  8028e0:	10001b1e 	bne	r2,zero,802950 <tick+0x20d8>
  8028e4:	d0a78683 	ldbu	r2,-25062(gp)
  8028e8:	10803fcc 	andi	r2,r2,255
  8028ec:	1080201c 	xori	r2,r2,128
  8028f0:	10bfe004 	addi	r2,r2,-128
  8028f4:	1000161e 	bne	r2,zero,802950 <tick+0x20d8>
  8028f8:	d0a77603 	ldbu	r2,-25128(gp)
  8028fc:	10803fcc 	andi	r2,r2,255
  802900:	1080201c 	xori	r2,r2,128
  802904:	10bfe004 	addi	r2,r2,-128
  802908:	1000111e 	bne	r2,zero,802950 <tick+0x20d8>
  80290c:	d0a79283 	ldbu	r2,-25014(gp)
  802910:	10803fcc 	andi	r2,r2,255
  802914:	1080201c 	xori	r2,r2,128
  802918:	10bfe004 	addi	r2,r2,-128
  80291c:	10000c1e 	bne	r2,zero,802950 <tick+0x20d8>
  802920:	d0a75883 	ldbu	r2,-25246(gp)
  802924:	10803fcc 	andi	r2,r2,255
  802928:	1080201c 	xori	r2,r2,128
  80292c:	10bfe004 	addi	r2,r2,-128
  802930:	1000071e 	bne	r2,zero,802950 <tick+0x20d8>
  802934:	d0a77c83 	ldbu	r2,-25102(gp)
  802938:	10803fcc 	andi	r2,r2,255
  80293c:	1080201c 	xori	r2,r2,128
  802940:	10bfe004 	addi	r2,r2,-128
  802944:	1000021e 	bne	r2,zero,802950 <tick+0x20d8>
  802948:	00800044 	movi	r2,1
  80294c:	00000106 	br	802954 <tick+0x20dc>
  802950:	0005883a 	mov	r2,zero
  802954:	d0a792c5 	stb	r2,-25013(gp)
      g121_e2 =(!(g120));
  802958:	d0a796c3 	ldbu	r2,-24997(gp)
  80295c:	10803fcc 	andi	r2,r2,255
  802960:	1080201c 	xori	r2,r2,128
  802964:	10bfe004 	addi	r2,r2,-128
  802968:	1005003a 	cmpeq	r2,r2,zero
  80296c:	d0a769c5 	stb	r2,-25177(gp)
   }
   PRE_g3 = g3;
  802970:	d0a75a83 	ldbu	r2,-25238(gp)
  802974:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g5 = g5;
  802978:	d0a771c3 	ldbu	r2,-25145(gp)
  80297c:	d0a79585 	stb	r2,-25002(gp)
   PRE_g10 = g10;
  802980:	d0a79943 	ldbu	r2,-24987(gp)
  802984:	d0a76bc5 	stb	r2,-25169(gp)
   PRE_g13 = g13;
  802988:	d0a78883 	ldbu	r2,-25054(gp)
  80298c:	d0a76085 	stb	r2,-25214(gp)
   PRE_g19 = g19;
  802990:	d0a75843 	ldbu	r2,-25247(gp)
  802994:	d0a78085 	stb	r2,-25086(gp)
   PRE_g21 = g21;
  802998:	d0a77003 	ldbu	r2,-25152(gp)
  80299c:	d0a78f05 	stb	r2,-25028(gp)
   PRE_g27 = g27;
  8029a0:	d0a75943 	ldbu	r2,-25243(gp)
  8029a4:	d0a75bc5 	stb	r2,-25233(gp)
   PRE_g30 = g30;
  8029a8:	d0a78e83 	ldbu	r2,-25030(gp)
  8029ac:	d0a795c5 	stb	r2,-25001(gp)
   PRE_g32 = g32;
  8029b0:	d0a79343 	ldbu	r2,-25011(gp)
  8029b4:	d0a76145 	stb	r2,-25211(gp)
   PRE_g35 = g35;
  8029b8:	d0a77dc3 	ldbu	r2,-25097(gp)
  8029bc:	d0a76c45 	stb	r2,-25167(gp)
   PRE_g41 = g41;
  8029c0:	d0a76903 	ldbu	r2,-25180(gp)
  8029c4:	d0a788c5 	stb	r2,-25053(gp)
   PRE_g43 = g43;
  8029c8:	d0a782c3 	ldbu	r2,-25077(gp)
  8029cc:	d0a78305 	stb	r2,-25076(gp)
   PRE_g49 = g49;
  8029d0:	d0a77303 	ldbu	r2,-25140(gp)
  8029d4:	d0a76985 	stb	r2,-25178(gp)
   PRE_g52 = g52;
  8029d8:	d0a76643 	ldbu	r2,-25191(gp)
  8029dc:	d0a77a05 	stb	r2,-25112(gp)
   PRE_g56 = g56;
  8029e0:	d0a779c3 	ldbu	r2,-25113(gp)
  8029e4:	d0a76045 	stb	r2,-25215(gp)
   PRE_g65 = g65;
  8029e8:	d0a791c3 	ldbu	r2,-25017(gp)
  8029ec:	d0a76305 	stb	r2,-25204(gp)
   PRE_g67 = g67;
  8029f0:	d0a797c3 	ldbu	r2,-24993(gp)
  8029f4:	d0a77c45 	stb	r2,-25103(gp)
   PRE_g72 = g72;
  8029f8:	d0a78cc3 	ldbu	r2,-25037(gp)
  8029fc:	d0a760c5 	stb	r2,-25213(gp)
   PRE_g75 = g75;
  802a00:	d0a78e43 	ldbu	r2,-25031(gp)
  802a04:	d0a76105 	stb	r2,-25212(gp)
   PRE_g81 = g81;
  802a08:	d0a78d03 	ldbu	r2,-25036(gp)
  802a0c:	d0a76ac5 	stb	r2,-25173(gp)
   PRE_g83 = g83;
  802a10:	d0a75683 	ldbu	r2,-25254(gp)
  802a14:	d0a77d45 	stb	r2,-25099(gp)
   PRE_g89 = g89;
  802a18:	d0a78543 	ldbu	r2,-25067(gp)
  802a1c:	d0a78a05 	stb	r2,-25048(gp)
   PRE_g91 = g91;
  802a20:	d0a75743 	ldbu	r2,-25251(gp)
  802a24:	d0a77f45 	stb	r2,-25091(gp)
   PRE_g97 = g97;
  802a28:	d0a76603 	ldbu	r2,-25192(gp)
  802a2c:	d0a78205 	stb	r2,-25080(gp)
   PRE_g99 = g99;
  802a30:	d0a77583 	ldbu	r2,-25130(gp)
  802a34:	d0a78dc5 	stb	r2,-25033(gp)
   PRE_g104 = g104;
  802a38:	d0a78803 	ldbu	r2,-25056(gp)
  802a3c:	d0a76b85 	stb	r2,-25170(gp)
   PRE_g106 = g106;
  802a40:	d0a798c3 	ldbu	r2,-24989(gp)
  802a44:	d0a77d85 	stb	r2,-25098(gp)
   PRE_g110 = g110;
  802a48:	d0a772c3 	ldbu	r2,-25141(gp)
  802a4c:	d0a78d45 	stb	r2,-25035(gp)
   PRE_g114 = g114;
  802a50:	d0a77983 	ldbu	r2,-25114(gp)
  802a54:	d0a75cc5 	stb	r2,-25229(gp)
   PRE_g119 = g119;
  802a58:	d0a78183 	ldbu	r2,-25082(gp)
  802a5c:	d0a77b05 	stb	r2,-25108(gp)
   _PRE_GO = _GO;
  802a60:	d0a77e83 	ldbu	r2,-25094(gp)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	d0a75e15 	stw	r2,-25224(gp)
   return;
  802a74:	0001883a 	nop
}
  802a78:	e037883a 	mov	sp,fp
  802a7c:	df000017 	ldw	fp,0(sp)
  802a80:	dec00104 	addi	sp,sp,4
  802a84:	f800283a 	ret

00802a88 <_printf_r>:
  802a88:	defffd04 	addi	sp,sp,-12
  802a8c:	2805883a 	mov	r2,r5
  802a90:	dfc00015 	stw	ra,0(sp)
  802a94:	d9800115 	stw	r6,4(sp)
  802a98:	d9c00215 	stw	r7,8(sp)
  802a9c:	21400217 	ldw	r5,8(r4)
  802aa0:	d9c00104 	addi	r7,sp,4
  802aa4:	100d883a 	mov	r6,r2
  802aa8:	0802af40 	call	802af4 <___vfprintf_internal_r>
  802aac:	dfc00017 	ldw	ra,0(sp)
  802ab0:	dec00304 	addi	sp,sp,12
  802ab4:	f800283a 	ret

00802ab8 <printf>:
  802ab8:	defffc04 	addi	sp,sp,-16
  802abc:	dfc00015 	stw	ra,0(sp)
  802ac0:	d9400115 	stw	r5,4(sp)
  802ac4:	d9800215 	stw	r6,8(sp)
  802ac8:	d9c00315 	stw	r7,12(sp)
  802acc:	00802074 	movhi	r2,129
  802ad0:	10959e04 	addi	r2,r2,22136
  802ad4:	10800017 	ldw	r2,0(r2)
  802ad8:	200b883a 	mov	r5,r4
  802adc:	d9800104 	addi	r6,sp,4
  802ae0:	11000217 	ldw	r4,8(r2)
  802ae4:	0804cec0 	call	804cec <__vfprintf_internal>
  802ae8:	dfc00017 	ldw	ra,0(sp)
  802aec:	dec00404 	addi	sp,sp,16
  802af0:	f800283a 	ret

00802af4 <___vfprintf_internal_r>:
  802af4:	deffb804 	addi	sp,sp,-288
  802af8:	dfc04715 	stw	ra,284(sp)
  802afc:	ddc04515 	stw	r23,276(sp)
  802b00:	dd404315 	stw	r21,268(sp)
  802b04:	d9002c15 	stw	r4,176(sp)
  802b08:	282f883a 	mov	r23,r5
  802b0c:	302b883a 	mov	r21,r6
  802b10:	d9c02d15 	stw	r7,180(sp)
  802b14:	df004615 	stw	fp,280(sp)
  802b18:	dd804415 	stw	r22,272(sp)
  802b1c:	dd004215 	stw	r20,264(sp)
  802b20:	dcc04115 	stw	r19,260(sp)
  802b24:	dc804015 	stw	r18,256(sp)
  802b28:	dc403f15 	stw	r17,252(sp)
  802b2c:	dc003e15 	stw	r16,248(sp)
  802b30:	08074500 	call	807450 <_localeconv_r>
  802b34:	10800017 	ldw	r2,0(r2)
  802b38:	1009883a 	mov	r4,r2
  802b3c:	d8803415 	stw	r2,208(sp)
  802b40:	08094780 	call	809478 <strlen>
  802b44:	d8803715 	stw	r2,220(sp)
  802b48:	d8802c17 	ldw	r2,176(sp)
  802b4c:	10000226 	beq	r2,zero,802b58 <___vfprintf_internal_r+0x64>
  802b50:	10800e17 	ldw	r2,56(r2)
  802b54:	1000f926 	beq	r2,zero,802f3c <___vfprintf_internal_r+0x448>
  802b58:	b880030b 	ldhu	r2,12(r23)
  802b5c:	10c8000c 	andi	r3,r2,8192
  802b60:	1800061e 	bne	r3,zero,802b7c <___vfprintf_internal_r+0x88>
  802b64:	b9001917 	ldw	r4,100(r23)
  802b68:	00f7ffc4 	movi	r3,-8193
  802b6c:	10880014 	ori	r2,r2,8192
  802b70:	20c6703a 	and	r3,r4,r3
  802b74:	b880030d 	sth	r2,12(r23)
  802b78:	b8c01915 	stw	r3,100(r23)
  802b7c:	10c0020c 	andi	r3,r2,8
  802b80:	1800c126 	beq	r3,zero,802e88 <___vfprintf_internal_r+0x394>
  802b84:	b8c00417 	ldw	r3,16(r23)
  802b88:	1800bf26 	beq	r3,zero,802e88 <___vfprintf_internal_r+0x394>
  802b8c:	1080068c 	andi	r2,r2,26
  802b90:	00c00284 	movi	r3,10
  802b94:	10c0c426 	beq	r2,r3,802ea8 <___vfprintf_internal_r+0x3b4>
  802b98:	d8c00404 	addi	r3,sp,16
  802b9c:	05002074 	movhi	r20,129
  802ba0:	d9001e04 	addi	r4,sp,120
  802ba4:	a50d2684 	addi	r20,r20,13466
  802ba8:	d8c01e15 	stw	r3,120(sp)
  802bac:	d8002015 	stw	zero,128(sp)
  802bb0:	d8001f15 	stw	zero,124(sp)
  802bb4:	d8003315 	stw	zero,204(sp)
  802bb8:	d8003615 	stw	zero,216(sp)
  802bbc:	d8003815 	stw	zero,224(sp)
  802bc0:	1811883a 	mov	r8,r3
  802bc4:	d8003915 	stw	zero,228(sp)
  802bc8:	d8003a15 	stw	zero,232(sp)
  802bcc:	d8002f15 	stw	zero,188(sp)
  802bd0:	d9002815 	stw	r4,160(sp)
  802bd4:	a8800007 	ldb	r2,0(r21)
  802bd8:	10027b26 	beq	r2,zero,8035c8 <___vfprintf_internal_r+0xad4>
  802bdc:	00c00944 	movi	r3,37
  802be0:	a821883a 	mov	r16,r21
  802be4:	10c0021e 	bne	r2,r3,802bf0 <___vfprintf_internal_r+0xfc>
  802be8:	00001406 	br	802c3c <___vfprintf_internal_r+0x148>
  802bec:	10c00326 	beq	r2,r3,802bfc <___vfprintf_internal_r+0x108>
  802bf0:	84000044 	addi	r16,r16,1
  802bf4:	80800007 	ldb	r2,0(r16)
  802bf8:	103ffc1e 	bne	r2,zero,802bec <__alt_mem_onchip_mem+0xff782bec>
  802bfc:	8563c83a 	sub	r17,r16,r21
  802c00:	88000e26 	beq	r17,zero,802c3c <___vfprintf_internal_r+0x148>
  802c04:	d8c02017 	ldw	r3,128(sp)
  802c08:	d8801f17 	ldw	r2,124(sp)
  802c0c:	45400015 	stw	r21,0(r8)
  802c10:	1c47883a 	add	r3,r3,r17
  802c14:	10800044 	addi	r2,r2,1
  802c18:	d8c02015 	stw	r3,128(sp)
  802c1c:	44400115 	stw	r17,4(r8)
  802c20:	d8801f15 	stw	r2,124(sp)
  802c24:	00c001c4 	movi	r3,7
  802c28:	1880a716 	blt	r3,r2,802ec8 <___vfprintf_internal_r+0x3d4>
  802c2c:	42000204 	addi	r8,r8,8
  802c30:	d9402f17 	ldw	r5,188(sp)
  802c34:	2c4b883a 	add	r5,r5,r17
  802c38:	d9402f15 	stw	r5,188(sp)
  802c3c:	80800007 	ldb	r2,0(r16)
  802c40:	1000a826 	beq	r2,zero,802ee4 <___vfprintf_internal_r+0x3f0>
  802c44:	84400047 	ldb	r17,1(r16)
  802c48:	00bfffc4 	movi	r2,-1
  802c4c:	85400044 	addi	r21,r16,1
  802c50:	d8002785 	stb	zero,158(sp)
  802c54:	0007883a 	mov	r3,zero
  802c58:	000f883a 	mov	r7,zero
  802c5c:	d8802915 	stw	r2,164(sp)
  802c60:	d8003115 	stw	zero,196(sp)
  802c64:	0025883a 	mov	r18,zero
  802c68:	01401604 	movi	r5,88
  802c6c:	01800244 	movi	r6,9
  802c70:	02800a84 	movi	r10,42
  802c74:	02401b04 	movi	r9,108
  802c78:	ad400044 	addi	r21,r21,1
  802c7c:	88bff804 	addi	r2,r17,-32
  802c80:	28830436 	bltu	r5,r2,803894 <___vfprintf_internal_r+0xda0>
  802c84:	100490ba 	slli	r2,r2,2
  802c88:	01002034 	movhi	r4,128
  802c8c:	210b2704 	addi	r4,r4,11420
  802c90:	1105883a 	add	r2,r2,r4
  802c94:	10800017 	ldw	r2,0(r2)
  802c98:	1000683a 	jmp	r2
  802c9c:	008037b4 	movhi	r2,222
  802ca0:	00803894 	movui	r2,226
  802ca4:	00803894 	movui	r2,226
  802ca8:	008037d4 	movui	r2,223
  802cac:	00803894 	movui	r2,226
  802cb0:	00803894 	movui	r2,226
  802cb4:	00803894 	movui	r2,226
  802cb8:	00803894 	movui	r2,226
  802cbc:	00803894 	movui	r2,226
  802cc0:	00803894 	movui	r2,226
  802cc4:	00802f48 	cmpgei	r2,zero,189
  802cc8:	008036f0 	cmpltui	r2,zero,219
  802ccc:	00803894 	movui	r2,226
  802cd0:	00802e10 	cmplti	r2,zero,184
  802cd4:	00802f70 	cmpltui	r2,zero,189
  802cd8:	00803894 	movui	r2,226
  802cdc:	00802fb0 	cmpltui	r2,zero,190
  802ce0:	00802fbc 	xorhi	r2,zero,190
  802ce4:	00802fbc 	xorhi	r2,zero,190
  802ce8:	00802fbc 	xorhi	r2,zero,190
  802cec:	00802fbc 	xorhi	r2,zero,190
  802cf0:	00802fbc 	xorhi	r2,zero,190
  802cf4:	00802fbc 	xorhi	r2,zero,190
  802cf8:	00802fbc 	xorhi	r2,zero,190
  802cfc:	00802fbc 	xorhi	r2,zero,190
  802d00:	00802fbc 	xorhi	r2,zero,190
  802d04:	00803894 	movui	r2,226
  802d08:	00803894 	movui	r2,226
  802d0c:	00803894 	movui	r2,226
  802d10:	00803894 	movui	r2,226
  802d14:	00803894 	movui	r2,226
  802d18:	00803894 	movui	r2,226
  802d1c:	00803894 	movui	r2,226
  802d20:	00803894 	movui	r2,226
  802d24:	00803894 	movui	r2,226
  802d28:	00803894 	movui	r2,226
  802d2c:	00802ff0 	cmpltui	r2,zero,191
  802d30:	008030ac 	andhi	r2,zero,194
  802d34:	00803894 	movui	r2,226
  802d38:	008030ac 	andhi	r2,zero,194
  802d3c:	00803894 	movui	r2,226
  802d40:	00803894 	movui	r2,226
  802d44:	00803894 	movui	r2,226
  802d48:	00803894 	movui	r2,226
  802d4c:	0080314c 	andi	r2,zero,197
  802d50:	00803894 	movui	r2,226
  802d54:	00803894 	movui	r2,226
  802d58:	00803158 	cmpnei	r2,zero,197
  802d5c:	00803894 	movui	r2,226
  802d60:	00803894 	movui	r2,226
  802d64:	00803894 	movui	r2,226
  802d68:	00803894 	movui	r2,226
  802d6c:	00803894 	movui	r2,226
  802d70:	008035d0 	cmplti	r2,zero,215
  802d74:	00803894 	movui	r2,226
  802d78:	00803894 	movui	r2,226
  802d7c:	00803630 	cmpltui	r2,zero,216
  802d80:	00803894 	movui	r2,226
  802d84:	00803894 	movui	r2,226
  802d88:	00803894 	movui	r2,226
  802d8c:	00803894 	movui	r2,226
  802d90:	00803894 	movui	r2,226
  802d94:	00803894 	movui	r2,226
  802d98:	00803894 	movui	r2,226
  802d9c:	00803894 	movui	r2,226
  802da0:	00803894 	movui	r2,226
  802da4:	00803894 	movui	r2,226
  802da8:	00803840 	call	80384 <__reset-0x77fc7c>
  802dac:	008037e0 	cmpeqi	r2,zero,223
  802db0:	008030ac 	andhi	r2,zero,194
  802db4:	008030ac 	andhi	r2,zero,194
  802db8:	008030ac 	andhi	r2,zero,194
  802dbc:	008037f0 	cmpltui	r2,zero,223
  802dc0:	008037e0 	cmpeqi	r2,zero,223
  802dc4:	00803894 	movui	r2,226
  802dc8:	00803894 	movui	r2,226
  802dcc:	008037fc 	xorhi	r2,zero,223
  802dd0:	00803894 	movui	r2,226
  802dd4:	0080380c 	andi	r2,zero,224
  802dd8:	008036e0 	cmpeqi	r2,zero,219
  802ddc:	00802e1c 	xori	r2,zero,184
  802de0:	00803700 	call	80370 <__reset-0x77fc90>
  802de4:	00803894 	movui	r2,226
  802de8:	0080370c 	andi	r2,zero,220
  802dec:	00803894 	movui	r2,226
  802df0:	00803768 	cmpgeui	r2,zero,221
  802df4:	00803894 	movui	r2,226
  802df8:	00803894 	movui	r2,226
  802dfc:	00803778 	rdprs	r2,zero,221
  802e00:	d9003117 	ldw	r4,196(sp)
  802e04:	d8802d15 	stw	r2,180(sp)
  802e08:	0109c83a 	sub	r4,zero,r4
  802e0c:	d9003115 	stw	r4,196(sp)
  802e10:	94800114 	ori	r18,r18,4
  802e14:	ac400007 	ldb	r17,0(r21)
  802e18:	003f9706 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  802e1c:	00800c04 	movi	r2,48
  802e20:	d9002d17 	ldw	r4,180(sp)
  802e24:	d9402917 	ldw	r5,164(sp)
  802e28:	d8802705 	stb	r2,156(sp)
  802e2c:	00801e04 	movi	r2,120
  802e30:	d8802745 	stb	r2,157(sp)
  802e34:	d8002785 	stb	zero,158(sp)
  802e38:	20c00104 	addi	r3,r4,4
  802e3c:	24c00017 	ldw	r19,0(r4)
  802e40:	002d883a 	mov	r22,zero
  802e44:	90800094 	ori	r2,r18,2
  802e48:	28029a16 	blt	r5,zero,8038b4 <___vfprintf_internal_r+0xdc0>
  802e4c:	00bfdfc4 	movi	r2,-129
  802e50:	90a4703a 	and	r18,r18,r2
  802e54:	d8c02d15 	stw	r3,180(sp)
  802e58:	94800094 	ori	r18,r18,2
  802e5c:	9802871e 	bne	r19,zero,80387c <___vfprintf_internal_r+0xd88>
  802e60:	00802074 	movhi	r2,129
  802e64:	108d1f04 	addi	r2,r2,13436
  802e68:	d8803915 	stw	r2,228(sp)
  802e6c:	04401e04 	movi	r17,120
  802e70:	d8802917 	ldw	r2,164(sp)
  802e74:	0039883a 	mov	fp,zero
  802e78:	1001e926 	beq	r2,zero,803620 <___vfprintf_internal_r+0xb2c>
  802e7c:	0027883a 	mov	r19,zero
  802e80:	002d883a 	mov	r22,zero
  802e84:	00020506 	br	80369c <___vfprintf_internal_r+0xba8>
  802e88:	d9002c17 	ldw	r4,176(sp)
  802e8c:	b80b883a 	mov	r5,r23
  802e90:	0804dc40 	call	804dc4 <__swsetup_r>
  802e94:	1005ac1e 	bne	r2,zero,804548 <___vfprintf_internal_r+0x1a54>
  802e98:	b880030b 	ldhu	r2,12(r23)
  802e9c:	00c00284 	movi	r3,10
  802ea0:	1080068c 	andi	r2,r2,26
  802ea4:	10ff3c1e 	bne	r2,r3,802b98 <__alt_mem_onchip_mem+0xff782b98>
  802ea8:	b880038f 	ldh	r2,14(r23)
  802eac:	103f3a16 	blt	r2,zero,802b98 <__alt_mem_onchip_mem+0xff782b98>
  802eb0:	d9c02d17 	ldw	r7,180(sp)
  802eb4:	d9002c17 	ldw	r4,176(sp)
  802eb8:	a80d883a 	mov	r6,r21
  802ebc:	b80b883a 	mov	r5,r23
  802ec0:	0804d080 	call	804d08 <__sbprintf>
  802ec4:	00001106 	br	802f0c <___vfprintf_internal_r+0x418>
  802ec8:	d9002c17 	ldw	r4,176(sp)
  802ecc:	d9801e04 	addi	r6,sp,120
  802ed0:	b80b883a 	mov	r5,r23
  802ed4:	080960c0 	call	80960c <__sprint_r>
  802ed8:	1000081e 	bne	r2,zero,802efc <___vfprintf_internal_r+0x408>
  802edc:	da000404 	addi	r8,sp,16
  802ee0:	003f5306 	br	802c30 <__alt_mem_onchip_mem+0xff782c30>
  802ee4:	d8802017 	ldw	r2,128(sp)
  802ee8:	10000426 	beq	r2,zero,802efc <___vfprintf_internal_r+0x408>
  802eec:	d9002c17 	ldw	r4,176(sp)
  802ef0:	d9801e04 	addi	r6,sp,120
  802ef4:	b80b883a 	mov	r5,r23
  802ef8:	080960c0 	call	80960c <__sprint_r>
  802efc:	b880030b 	ldhu	r2,12(r23)
  802f00:	1080100c 	andi	r2,r2,64
  802f04:	1005901e 	bne	r2,zero,804548 <___vfprintf_internal_r+0x1a54>
  802f08:	d8802f17 	ldw	r2,188(sp)
  802f0c:	dfc04717 	ldw	ra,284(sp)
  802f10:	df004617 	ldw	fp,280(sp)
  802f14:	ddc04517 	ldw	r23,276(sp)
  802f18:	dd804417 	ldw	r22,272(sp)
  802f1c:	dd404317 	ldw	r21,268(sp)
  802f20:	dd004217 	ldw	r20,264(sp)
  802f24:	dcc04117 	ldw	r19,260(sp)
  802f28:	dc804017 	ldw	r18,256(sp)
  802f2c:	dc403f17 	ldw	r17,252(sp)
  802f30:	dc003e17 	ldw	r16,248(sp)
  802f34:	dec04804 	addi	sp,sp,288
  802f38:	f800283a 	ret
  802f3c:	d9002c17 	ldw	r4,176(sp)
  802f40:	0806d980 	call	806d98 <__sinit>
  802f44:	003f0406 	br	802b58 <__alt_mem_onchip_mem+0xff782b58>
  802f48:	d8802d17 	ldw	r2,180(sp)
  802f4c:	d9002d17 	ldw	r4,180(sp)
  802f50:	10800017 	ldw	r2,0(r2)
  802f54:	d8803115 	stw	r2,196(sp)
  802f58:	20800104 	addi	r2,r4,4
  802f5c:	d9003117 	ldw	r4,196(sp)
  802f60:	203fa716 	blt	r4,zero,802e00 <__alt_mem_onchip_mem+0xff782e00>
  802f64:	d8802d15 	stw	r2,180(sp)
  802f68:	ac400007 	ldb	r17,0(r21)
  802f6c:	003f4206 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  802f70:	ac400007 	ldb	r17,0(r21)
  802f74:	aac00044 	addi	r11,r21,1
  802f78:	8a872826 	beq	r17,r10,804c1c <___vfprintf_internal_r+0x2128>
  802f7c:	88bff404 	addi	r2,r17,-48
  802f80:	0009883a 	mov	r4,zero
  802f84:	30867d36 	bltu	r6,r2,80497c <___vfprintf_internal_r+0x1e88>
  802f88:	5c400007 	ldb	r17,0(r11)
  802f8c:	210002a4 	muli	r4,r4,10
  802f90:	5d400044 	addi	r21,r11,1
  802f94:	a817883a 	mov	r11,r21
  802f98:	2089883a 	add	r4,r4,r2
  802f9c:	88bff404 	addi	r2,r17,-48
  802fa0:	30bff92e 	bgeu	r6,r2,802f88 <__alt_mem_onchip_mem+0xff782f88>
  802fa4:	2005c916 	blt	r4,zero,8046cc <___vfprintf_internal_r+0x1bd8>
  802fa8:	d9002915 	stw	r4,164(sp)
  802fac:	003f3306 	br	802c7c <__alt_mem_onchip_mem+0xff782c7c>
  802fb0:	94802014 	ori	r18,r18,128
  802fb4:	ac400007 	ldb	r17,0(r21)
  802fb8:	003f2f06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  802fbc:	a809883a 	mov	r4,r21
  802fc0:	d8003115 	stw	zero,196(sp)
  802fc4:	88bff404 	addi	r2,r17,-48
  802fc8:	0017883a 	mov	r11,zero
  802fcc:	24400007 	ldb	r17,0(r4)
  802fd0:	5ac002a4 	muli	r11,r11,10
  802fd4:	ad400044 	addi	r21,r21,1
  802fd8:	a809883a 	mov	r4,r21
  802fdc:	12d7883a 	add	r11,r2,r11
  802fe0:	88bff404 	addi	r2,r17,-48
  802fe4:	30bff92e 	bgeu	r6,r2,802fcc <__alt_mem_onchip_mem+0xff782fcc>
  802fe8:	dac03115 	stw	r11,196(sp)
  802fec:	003f2306 	br	802c7c <__alt_mem_onchip_mem+0xff782c7c>
  802ff0:	18c03fcc 	andi	r3,r3,255
  802ff4:	18072b1e 	bne	r3,zero,804ca4 <___vfprintf_internal_r+0x21b0>
  802ff8:	94800414 	ori	r18,r18,16
  802ffc:	9080080c 	andi	r2,r18,32
  803000:	10037b26 	beq	r2,zero,803df0 <___vfprintf_internal_r+0x12fc>
  803004:	d9402d17 	ldw	r5,180(sp)
  803008:	28800117 	ldw	r2,4(r5)
  80300c:	2cc00017 	ldw	r19,0(r5)
  803010:	29400204 	addi	r5,r5,8
  803014:	d9402d15 	stw	r5,180(sp)
  803018:	102d883a 	mov	r22,r2
  80301c:	10044b16 	blt	r2,zero,80414c <___vfprintf_internal_r+0x1658>
  803020:	d9402917 	ldw	r5,164(sp)
  803024:	df002783 	ldbu	fp,158(sp)
  803028:	2803bc16 	blt	r5,zero,803f1c <___vfprintf_internal_r+0x1428>
  80302c:	00ffdfc4 	movi	r3,-129
  803030:	9d84b03a 	or	r2,r19,r22
  803034:	90e4703a 	and	r18,r18,r3
  803038:	10017726 	beq	r2,zero,803618 <___vfprintf_internal_r+0xb24>
  80303c:	b0038326 	beq	r22,zero,803e4c <___vfprintf_internal_r+0x1358>
  803040:	dc402a15 	stw	r17,168(sp)
  803044:	dc001e04 	addi	r16,sp,120
  803048:	b023883a 	mov	r17,r22
  80304c:	402d883a 	mov	r22,r8
  803050:	9809883a 	mov	r4,r19
  803054:	880b883a 	mov	r5,r17
  803058:	01800284 	movi	r6,10
  80305c:	000f883a 	mov	r7,zero
  803060:	080c5800 	call	80c580 <__umoddi3>
  803064:	10800c04 	addi	r2,r2,48
  803068:	843fffc4 	addi	r16,r16,-1
  80306c:	9809883a 	mov	r4,r19
  803070:	880b883a 	mov	r5,r17
  803074:	80800005 	stb	r2,0(r16)
  803078:	01800284 	movi	r6,10
  80307c:	000f883a 	mov	r7,zero
  803080:	080c0080 	call	80c008 <__udivdi3>
  803084:	1027883a 	mov	r19,r2
  803088:	10c4b03a 	or	r2,r2,r3
  80308c:	1823883a 	mov	r17,r3
  803090:	103fef1e 	bne	r2,zero,803050 <__alt_mem_onchip_mem+0xff783050>
  803094:	d8c02817 	ldw	r3,160(sp)
  803098:	dc402a17 	ldw	r17,168(sp)
  80309c:	b011883a 	mov	r8,r22
  8030a0:	1c07c83a 	sub	r3,r3,r16
  8030a4:	d8c02e15 	stw	r3,184(sp)
  8030a8:	00005906 	br	803210 <___vfprintf_internal_r+0x71c>
  8030ac:	18c03fcc 	andi	r3,r3,255
  8030b0:	1806fa1e 	bne	r3,zero,804c9c <___vfprintf_internal_r+0x21a8>
  8030b4:	9080020c 	andi	r2,r18,8
  8030b8:	10048a26 	beq	r2,zero,8042e4 <___vfprintf_internal_r+0x17f0>
  8030bc:	d8c02d17 	ldw	r3,180(sp)
  8030c0:	d9002d17 	ldw	r4,180(sp)
  8030c4:	d9402d17 	ldw	r5,180(sp)
  8030c8:	18c00017 	ldw	r3,0(r3)
  8030cc:	21000117 	ldw	r4,4(r4)
  8030d0:	29400204 	addi	r5,r5,8
  8030d4:	d8c03615 	stw	r3,216(sp)
  8030d8:	d9003815 	stw	r4,224(sp)
  8030dc:	d9402d15 	stw	r5,180(sp)
  8030e0:	d9003617 	ldw	r4,216(sp)
  8030e4:	d9403817 	ldw	r5,224(sp)
  8030e8:	da003d15 	stw	r8,244(sp)
  8030ec:	04000044 	movi	r16,1
  8030f0:	08091980 	call	809198 <__fpclassifyd>
  8030f4:	da003d17 	ldw	r8,244(sp)
  8030f8:	14041f1e 	bne	r2,r16,804178 <___vfprintf_internal_r+0x1684>
  8030fc:	d9003617 	ldw	r4,216(sp)
  803100:	d9403817 	ldw	r5,224(sp)
  803104:	000d883a 	mov	r6,zero
  803108:	000f883a 	mov	r7,zero
  80310c:	080df640 	call	80df64 <__ledf2>
  803110:	da003d17 	ldw	r8,244(sp)
  803114:	1005be16 	blt	r2,zero,804810 <___vfprintf_internal_r+0x1d1c>
  803118:	df002783 	ldbu	fp,158(sp)
  80311c:	008011c4 	movi	r2,71
  803120:	1445330e 	bge	r2,r17,8045f0 <___vfprintf_internal_r+0x1afc>
  803124:	04002074 	movhi	r16,129
  803128:	840d1704 	addi	r16,r16,13404
  80312c:	00c000c4 	movi	r3,3
  803130:	00bfdfc4 	movi	r2,-129
  803134:	d8c02a15 	stw	r3,168(sp)
  803138:	90a4703a 	and	r18,r18,r2
  80313c:	d8c02e15 	stw	r3,184(sp)
  803140:	d8002915 	stw	zero,164(sp)
  803144:	d8003215 	stw	zero,200(sp)
  803148:	00003706 	br	803228 <___vfprintf_internal_r+0x734>
  80314c:	94800214 	ori	r18,r18,8
  803150:	ac400007 	ldb	r17,0(r21)
  803154:	003ec806 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  803158:	18c03fcc 	andi	r3,r3,255
  80315c:	1806db1e 	bne	r3,zero,804ccc <___vfprintf_internal_r+0x21d8>
  803160:	94800414 	ori	r18,r18,16
  803164:	9080080c 	andi	r2,r18,32
  803168:	1002d826 	beq	r2,zero,803ccc <___vfprintf_internal_r+0x11d8>
  80316c:	d9402d17 	ldw	r5,180(sp)
  803170:	d8c02917 	ldw	r3,164(sp)
  803174:	d8002785 	stb	zero,158(sp)
  803178:	28800204 	addi	r2,r5,8
  80317c:	2cc00017 	ldw	r19,0(r5)
  803180:	2d800117 	ldw	r22,4(r5)
  803184:	18048f16 	blt	r3,zero,8043c4 <___vfprintf_internal_r+0x18d0>
  803188:	013fdfc4 	movi	r4,-129
  80318c:	9d86b03a 	or	r3,r19,r22
  803190:	d8802d15 	stw	r2,180(sp)
  803194:	9124703a 	and	r18,r18,r4
  803198:	1802d91e 	bne	r3,zero,803d00 <___vfprintf_internal_r+0x120c>
  80319c:	d8c02917 	ldw	r3,164(sp)
  8031a0:	0039883a 	mov	fp,zero
  8031a4:	1805c326 	beq	r3,zero,8048b4 <___vfprintf_internal_r+0x1dc0>
  8031a8:	0027883a 	mov	r19,zero
  8031ac:	002d883a 	mov	r22,zero
  8031b0:	dc001e04 	addi	r16,sp,120
  8031b4:	9806d0fa 	srli	r3,r19,3
  8031b8:	b008977a 	slli	r4,r22,29
  8031bc:	b02cd0fa 	srli	r22,r22,3
  8031c0:	9cc001cc 	andi	r19,r19,7
  8031c4:	98800c04 	addi	r2,r19,48
  8031c8:	843fffc4 	addi	r16,r16,-1
  8031cc:	20e6b03a 	or	r19,r4,r3
  8031d0:	80800005 	stb	r2,0(r16)
  8031d4:	9d86b03a 	or	r3,r19,r22
  8031d8:	183ff61e 	bne	r3,zero,8031b4 <__alt_mem_onchip_mem+0xff7831b4>
  8031dc:	90c0004c 	andi	r3,r18,1
  8031e0:	18013b26 	beq	r3,zero,8036d0 <___vfprintf_internal_r+0xbdc>
  8031e4:	10803fcc 	andi	r2,r2,255
  8031e8:	1080201c 	xori	r2,r2,128
  8031ec:	10bfe004 	addi	r2,r2,-128
  8031f0:	00c00c04 	movi	r3,48
  8031f4:	10c13626 	beq	r2,r3,8036d0 <___vfprintf_internal_r+0xbdc>
  8031f8:	80ffffc5 	stb	r3,-1(r16)
  8031fc:	d8c02817 	ldw	r3,160(sp)
  803200:	80bfffc4 	addi	r2,r16,-1
  803204:	1021883a 	mov	r16,r2
  803208:	1887c83a 	sub	r3,r3,r2
  80320c:	d8c02e15 	stw	r3,184(sp)
  803210:	d8802e17 	ldw	r2,184(sp)
  803214:	d9002917 	ldw	r4,164(sp)
  803218:	1100010e 	bge	r2,r4,803220 <___vfprintf_internal_r+0x72c>
  80321c:	2005883a 	mov	r2,r4
  803220:	d8802a15 	stw	r2,168(sp)
  803224:	d8003215 	stw	zero,200(sp)
  803228:	e7003fcc 	andi	fp,fp,255
  80322c:	e700201c 	xori	fp,fp,128
  803230:	e73fe004 	addi	fp,fp,-128
  803234:	e0000326 	beq	fp,zero,803244 <___vfprintf_internal_r+0x750>
  803238:	d8c02a17 	ldw	r3,168(sp)
  80323c:	18c00044 	addi	r3,r3,1
  803240:	d8c02a15 	stw	r3,168(sp)
  803244:	90c0008c 	andi	r3,r18,2
  803248:	d8c02b15 	stw	r3,172(sp)
  80324c:	18000326 	beq	r3,zero,80325c <___vfprintf_internal_r+0x768>
  803250:	d8c02a17 	ldw	r3,168(sp)
  803254:	18c00084 	addi	r3,r3,2
  803258:	d8c02a15 	stw	r3,168(sp)
  80325c:	90c0210c 	andi	r3,r18,132
  803260:	d8c03015 	stw	r3,192(sp)
  803264:	1801a31e 	bne	r3,zero,8038f4 <___vfprintf_internal_r+0xe00>
  803268:	d9003117 	ldw	r4,196(sp)
  80326c:	d8c02a17 	ldw	r3,168(sp)
  803270:	20e7c83a 	sub	r19,r4,r3
  803274:	04c19f0e 	bge	zero,r19,8038f4 <___vfprintf_internal_r+0xe00>
  803278:	02400404 	movi	r9,16
  80327c:	d8c02017 	ldw	r3,128(sp)
  803280:	d8801f17 	ldw	r2,124(sp)
  803284:	4cc50d0e 	bge	r9,r19,8046bc <___vfprintf_internal_r+0x1bc8>
  803288:	01402074 	movhi	r5,129
  80328c:	294d2a84 	addi	r5,r5,13482
  803290:	dc403b15 	stw	r17,236(sp)
  803294:	d9403515 	stw	r5,212(sp)
  803298:	9823883a 	mov	r17,r19
  80329c:	482d883a 	mov	r22,r9
  8032a0:	9027883a 	mov	r19,r18
  8032a4:	070001c4 	movi	fp,7
  8032a8:	8025883a 	mov	r18,r16
  8032ac:	dc002c17 	ldw	r16,176(sp)
  8032b0:	00000306 	br	8032c0 <___vfprintf_internal_r+0x7cc>
  8032b4:	8c7ffc04 	addi	r17,r17,-16
  8032b8:	42000204 	addi	r8,r8,8
  8032bc:	b440130e 	bge	r22,r17,80330c <___vfprintf_internal_r+0x818>
  8032c0:	01002074 	movhi	r4,129
  8032c4:	18c00404 	addi	r3,r3,16
  8032c8:	10800044 	addi	r2,r2,1
  8032cc:	210d2a84 	addi	r4,r4,13482
  8032d0:	41000015 	stw	r4,0(r8)
  8032d4:	45800115 	stw	r22,4(r8)
  8032d8:	d8c02015 	stw	r3,128(sp)
  8032dc:	d8801f15 	stw	r2,124(sp)
  8032e0:	e0bff40e 	bge	fp,r2,8032b4 <__alt_mem_onchip_mem+0xff7832b4>
  8032e4:	d9801e04 	addi	r6,sp,120
  8032e8:	b80b883a 	mov	r5,r23
  8032ec:	8009883a 	mov	r4,r16
  8032f0:	080960c0 	call	80960c <__sprint_r>
  8032f4:	103f011e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  8032f8:	8c7ffc04 	addi	r17,r17,-16
  8032fc:	d8c02017 	ldw	r3,128(sp)
  803300:	d8801f17 	ldw	r2,124(sp)
  803304:	da000404 	addi	r8,sp,16
  803308:	b47fed16 	blt	r22,r17,8032c0 <__alt_mem_onchip_mem+0xff7832c0>
  80330c:	9021883a 	mov	r16,r18
  803310:	9825883a 	mov	r18,r19
  803314:	8827883a 	mov	r19,r17
  803318:	dc403b17 	ldw	r17,236(sp)
  80331c:	d9403517 	ldw	r5,212(sp)
  803320:	98c7883a 	add	r3,r19,r3
  803324:	10800044 	addi	r2,r2,1
  803328:	41400015 	stw	r5,0(r8)
  80332c:	44c00115 	stw	r19,4(r8)
  803330:	d8c02015 	stw	r3,128(sp)
  803334:	d8801f15 	stw	r2,124(sp)
  803338:	010001c4 	movi	r4,7
  80333c:	2082a316 	blt	r4,r2,803dcc <___vfprintf_internal_r+0x12d8>
  803340:	df002787 	ldb	fp,158(sp)
  803344:	42000204 	addi	r8,r8,8
  803348:	e0000c26 	beq	fp,zero,80337c <___vfprintf_internal_r+0x888>
  80334c:	d8801f17 	ldw	r2,124(sp)
  803350:	d9002784 	addi	r4,sp,158
  803354:	18c00044 	addi	r3,r3,1
  803358:	10800044 	addi	r2,r2,1
  80335c:	41000015 	stw	r4,0(r8)
  803360:	01000044 	movi	r4,1
  803364:	41000115 	stw	r4,4(r8)
  803368:	d8c02015 	stw	r3,128(sp)
  80336c:	d8801f15 	stw	r2,124(sp)
  803370:	010001c4 	movi	r4,7
  803374:	20823c16 	blt	r4,r2,803c68 <___vfprintf_internal_r+0x1174>
  803378:	42000204 	addi	r8,r8,8
  80337c:	d8802b17 	ldw	r2,172(sp)
  803380:	10000c26 	beq	r2,zero,8033b4 <___vfprintf_internal_r+0x8c0>
  803384:	d8801f17 	ldw	r2,124(sp)
  803388:	d9002704 	addi	r4,sp,156
  80338c:	18c00084 	addi	r3,r3,2
  803390:	10800044 	addi	r2,r2,1
  803394:	41000015 	stw	r4,0(r8)
  803398:	01000084 	movi	r4,2
  80339c:	41000115 	stw	r4,4(r8)
  8033a0:	d8c02015 	stw	r3,128(sp)
  8033a4:	d8801f15 	stw	r2,124(sp)
  8033a8:	010001c4 	movi	r4,7
  8033ac:	20823616 	blt	r4,r2,803c88 <___vfprintf_internal_r+0x1194>
  8033b0:	42000204 	addi	r8,r8,8
  8033b4:	d9003017 	ldw	r4,192(sp)
  8033b8:	00802004 	movi	r2,128
  8033bc:	20819926 	beq	r4,r2,803a24 <___vfprintf_internal_r+0xf30>
  8033c0:	d9402917 	ldw	r5,164(sp)
  8033c4:	d8802e17 	ldw	r2,184(sp)
  8033c8:	28adc83a 	sub	r22,r5,r2
  8033cc:	0580310e 	bge	zero,r22,803494 <___vfprintf_internal_r+0x9a0>
  8033d0:	07000404 	movi	fp,16
  8033d4:	d8801f17 	ldw	r2,124(sp)
  8033d8:	e584140e 	bge	fp,r22,80442c <___vfprintf_internal_r+0x1938>
  8033dc:	01402074 	movhi	r5,129
  8033e0:	294d2684 	addi	r5,r5,13466
  8033e4:	dc402915 	stw	r17,164(sp)
  8033e8:	d9402b15 	stw	r5,172(sp)
  8033ec:	b023883a 	mov	r17,r22
  8033f0:	04c001c4 	movi	r19,7
  8033f4:	a82d883a 	mov	r22,r21
  8033f8:	902b883a 	mov	r21,r18
  8033fc:	8025883a 	mov	r18,r16
  803400:	dc002c17 	ldw	r16,176(sp)
  803404:	00000306 	br	803414 <___vfprintf_internal_r+0x920>
  803408:	8c7ffc04 	addi	r17,r17,-16
  80340c:	42000204 	addi	r8,r8,8
  803410:	e440110e 	bge	fp,r17,803458 <___vfprintf_internal_r+0x964>
  803414:	18c00404 	addi	r3,r3,16
  803418:	10800044 	addi	r2,r2,1
  80341c:	45000015 	stw	r20,0(r8)
  803420:	47000115 	stw	fp,4(r8)
  803424:	d8c02015 	stw	r3,128(sp)
  803428:	d8801f15 	stw	r2,124(sp)
  80342c:	98bff60e 	bge	r19,r2,803408 <__alt_mem_onchip_mem+0xff783408>
  803430:	d9801e04 	addi	r6,sp,120
  803434:	b80b883a 	mov	r5,r23
  803438:	8009883a 	mov	r4,r16
  80343c:	080960c0 	call	80960c <__sprint_r>
  803440:	103eae1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803444:	8c7ffc04 	addi	r17,r17,-16
  803448:	d8c02017 	ldw	r3,128(sp)
  80344c:	d8801f17 	ldw	r2,124(sp)
  803450:	da000404 	addi	r8,sp,16
  803454:	e47fef16 	blt	fp,r17,803414 <__alt_mem_onchip_mem+0xff783414>
  803458:	9021883a 	mov	r16,r18
  80345c:	a825883a 	mov	r18,r21
  803460:	b02b883a 	mov	r21,r22
  803464:	882d883a 	mov	r22,r17
  803468:	dc402917 	ldw	r17,164(sp)
  80346c:	d9002b17 	ldw	r4,172(sp)
  803470:	1d87883a 	add	r3,r3,r22
  803474:	10800044 	addi	r2,r2,1
  803478:	41000015 	stw	r4,0(r8)
  80347c:	45800115 	stw	r22,4(r8)
  803480:	d8c02015 	stw	r3,128(sp)
  803484:	d8801f15 	stw	r2,124(sp)
  803488:	010001c4 	movi	r4,7
  80348c:	2081ee16 	blt	r4,r2,803c48 <___vfprintf_internal_r+0x1154>
  803490:	42000204 	addi	r8,r8,8
  803494:	9080400c 	andi	r2,r18,256
  803498:	1001181e 	bne	r2,zero,8038fc <___vfprintf_internal_r+0xe08>
  80349c:	d9402e17 	ldw	r5,184(sp)
  8034a0:	d8801f17 	ldw	r2,124(sp)
  8034a4:	44000015 	stw	r16,0(r8)
  8034a8:	1947883a 	add	r3,r3,r5
  8034ac:	10800044 	addi	r2,r2,1
  8034b0:	41400115 	stw	r5,4(r8)
  8034b4:	d8c02015 	stw	r3,128(sp)
  8034b8:	d8801f15 	stw	r2,124(sp)
  8034bc:	010001c4 	movi	r4,7
  8034c0:	2081d316 	blt	r4,r2,803c10 <___vfprintf_internal_r+0x111c>
  8034c4:	42000204 	addi	r8,r8,8
  8034c8:	9480010c 	andi	r18,r18,4
  8034cc:	90003226 	beq	r18,zero,803598 <___vfprintf_internal_r+0xaa4>
  8034d0:	d9403117 	ldw	r5,196(sp)
  8034d4:	d8802a17 	ldw	r2,168(sp)
  8034d8:	28a1c83a 	sub	r16,r5,r2
  8034dc:	04002e0e 	bge	zero,r16,803598 <___vfprintf_internal_r+0xaa4>
  8034e0:	04400404 	movi	r17,16
  8034e4:	d8801f17 	ldw	r2,124(sp)
  8034e8:	8c04a20e 	bge	r17,r16,804774 <___vfprintf_internal_r+0x1c80>
  8034ec:	01402074 	movhi	r5,129
  8034f0:	294d2a84 	addi	r5,r5,13482
  8034f4:	d9403515 	stw	r5,212(sp)
  8034f8:	048001c4 	movi	r18,7
  8034fc:	dcc02c17 	ldw	r19,176(sp)
  803500:	00000306 	br	803510 <___vfprintf_internal_r+0xa1c>
  803504:	843ffc04 	addi	r16,r16,-16
  803508:	42000204 	addi	r8,r8,8
  80350c:	8c00130e 	bge	r17,r16,80355c <___vfprintf_internal_r+0xa68>
  803510:	01002074 	movhi	r4,129
  803514:	18c00404 	addi	r3,r3,16
  803518:	10800044 	addi	r2,r2,1
  80351c:	210d2a84 	addi	r4,r4,13482
  803520:	41000015 	stw	r4,0(r8)
  803524:	44400115 	stw	r17,4(r8)
  803528:	d8c02015 	stw	r3,128(sp)
  80352c:	d8801f15 	stw	r2,124(sp)
  803530:	90bff40e 	bge	r18,r2,803504 <__alt_mem_onchip_mem+0xff783504>
  803534:	d9801e04 	addi	r6,sp,120
  803538:	b80b883a 	mov	r5,r23
  80353c:	9809883a 	mov	r4,r19
  803540:	080960c0 	call	80960c <__sprint_r>
  803544:	103e6d1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803548:	843ffc04 	addi	r16,r16,-16
  80354c:	d8c02017 	ldw	r3,128(sp)
  803550:	d8801f17 	ldw	r2,124(sp)
  803554:	da000404 	addi	r8,sp,16
  803558:	8c3fed16 	blt	r17,r16,803510 <__alt_mem_onchip_mem+0xff783510>
  80355c:	d9403517 	ldw	r5,212(sp)
  803560:	1c07883a 	add	r3,r3,r16
  803564:	10800044 	addi	r2,r2,1
  803568:	41400015 	stw	r5,0(r8)
  80356c:	44000115 	stw	r16,4(r8)
  803570:	d8c02015 	stw	r3,128(sp)
  803574:	d8801f15 	stw	r2,124(sp)
  803578:	010001c4 	movi	r4,7
  80357c:	2080060e 	bge	r4,r2,803598 <___vfprintf_internal_r+0xaa4>
  803580:	d9002c17 	ldw	r4,176(sp)
  803584:	d9801e04 	addi	r6,sp,120
  803588:	b80b883a 	mov	r5,r23
  80358c:	080960c0 	call	80960c <__sprint_r>
  803590:	103e5a1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803594:	d8c02017 	ldw	r3,128(sp)
  803598:	d8803117 	ldw	r2,196(sp)
  80359c:	d9002a17 	ldw	r4,168(sp)
  8035a0:	1100010e 	bge	r2,r4,8035a8 <___vfprintf_internal_r+0xab4>
  8035a4:	2005883a 	mov	r2,r4
  8035a8:	d9402f17 	ldw	r5,188(sp)
  8035ac:	288b883a 	add	r5,r5,r2
  8035b0:	d9402f15 	stw	r5,188(sp)
  8035b4:	18019e1e 	bne	r3,zero,803c30 <___vfprintf_internal_r+0x113c>
  8035b8:	a8800007 	ldb	r2,0(r21)
  8035bc:	d8001f15 	stw	zero,124(sp)
  8035c0:	da000404 	addi	r8,sp,16
  8035c4:	103d851e 	bne	r2,zero,802bdc <__alt_mem_onchip_mem+0xff782bdc>
  8035c8:	a821883a 	mov	r16,r21
  8035cc:	003d9b06 	br	802c3c <__alt_mem_onchip_mem+0xff782c3c>
  8035d0:	18c03fcc 	andi	r3,r3,255
  8035d4:	1805c11e 	bne	r3,zero,804cdc <___vfprintf_internal_r+0x21e8>
  8035d8:	94800414 	ori	r18,r18,16
  8035dc:	9080080c 	andi	r2,r18,32
  8035e0:	10020c26 	beq	r2,zero,803e14 <___vfprintf_internal_r+0x1320>
  8035e4:	d8802d17 	ldw	r2,180(sp)
  8035e8:	d9002917 	ldw	r4,164(sp)
  8035ec:	d8002785 	stb	zero,158(sp)
  8035f0:	10c00204 	addi	r3,r2,8
  8035f4:	14c00017 	ldw	r19,0(r2)
  8035f8:	15800117 	ldw	r22,4(r2)
  8035fc:	20040f16 	blt	r4,zero,80463c <___vfprintf_internal_r+0x1b48>
  803600:	013fdfc4 	movi	r4,-129
  803604:	9d84b03a 	or	r2,r19,r22
  803608:	d8c02d15 	stw	r3,180(sp)
  80360c:	9124703a 	and	r18,r18,r4
  803610:	0039883a 	mov	fp,zero
  803614:	103e891e 	bne	r2,zero,80303c <__alt_mem_onchip_mem+0xff78303c>
  803618:	d9002917 	ldw	r4,164(sp)
  80361c:	2002c11e 	bne	r4,zero,804124 <___vfprintf_internal_r+0x1630>
  803620:	d8002915 	stw	zero,164(sp)
  803624:	d8002e15 	stw	zero,184(sp)
  803628:	dc001e04 	addi	r16,sp,120
  80362c:	003ef806 	br	803210 <__alt_mem_onchip_mem+0xff783210>
  803630:	18c03fcc 	andi	r3,r3,255
  803634:	18059d1e 	bne	r3,zero,804cac <___vfprintf_internal_r+0x21b8>
  803638:	01402074 	movhi	r5,129
  80363c:	294d1a04 	addi	r5,r5,13416
  803640:	d9403915 	stw	r5,228(sp)
  803644:	9080080c 	andi	r2,r18,32
  803648:	10005226 	beq	r2,zero,803794 <___vfprintf_internal_r+0xca0>
  80364c:	d8802d17 	ldw	r2,180(sp)
  803650:	14c00017 	ldw	r19,0(r2)
  803654:	15800117 	ldw	r22,4(r2)
  803658:	10800204 	addi	r2,r2,8
  80365c:	d8802d15 	stw	r2,180(sp)
  803660:	9080004c 	andi	r2,r18,1
  803664:	10019026 	beq	r2,zero,803ca8 <___vfprintf_internal_r+0x11b4>
  803668:	9d84b03a 	or	r2,r19,r22
  80366c:	10036926 	beq	r2,zero,804414 <___vfprintf_internal_r+0x1920>
  803670:	d8c02917 	ldw	r3,164(sp)
  803674:	00800c04 	movi	r2,48
  803678:	d8802705 	stb	r2,156(sp)
  80367c:	dc402745 	stb	r17,157(sp)
  803680:	d8002785 	stb	zero,158(sp)
  803684:	90800094 	ori	r2,r18,2
  803688:	18045d16 	blt	r3,zero,804800 <___vfprintf_internal_r+0x1d0c>
  80368c:	00bfdfc4 	movi	r2,-129
  803690:	90a4703a 	and	r18,r18,r2
  803694:	94800094 	ori	r18,r18,2
  803698:	0039883a 	mov	fp,zero
  80369c:	d9003917 	ldw	r4,228(sp)
  8036a0:	dc001e04 	addi	r16,sp,120
  8036a4:	988003cc 	andi	r2,r19,15
  8036a8:	b006973a 	slli	r3,r22,28
  8036ac:	2085883a 	add	r2,r4,r2
  8036b0:	9826d13a 	srli	r19,r19,4
  8036b4:	10800003 	ldbu	r2,0(r2)
  8036b8:	b02cd13a 	srli	r22,r22,4
  8036bc:	843fffc4 	addi	r16,r16,-1
  8036c0:	1ce6b03a 	or	r19,r3,r19
  8036c4:	80800005 	stb	r2,0(r16)
  8036c8:	9d84b03a 	or	r2,r19,r22
  8036cc:	103ff51e 	bne	r2,zero,8036a4 <__alt_mem_onchip_mem+0xff7836a4>
  8036d0:	d8c02817 	ldw	r3,160(sp)
  8036d4:	1c07c83a 	sub	r3,r3,r16
  8036d8:	d8c02e15 	stw	r3,184(sp)
  8036dc:	003ecc06 	br	803210 <__alt_mem_onchip_mem+0xff783210>
  8036e0:	18c03fcc 	andi	r3,r3,255
  8036e4:	183e9f26 	beq	r3,zero,803164 <__alt_mem_onchip_mem+0xff783164>
  8036e8:	d9c02785 	stb	r7,158(sp)
  8036ec:	003e9d06 	br	803164 <__alt_mem_onchip_mem+0xff783164>
  8036f0:	00c00044 	movi	r3,1
  8036f4:	01c00ac4 	movi	r7,43
  8036f8:	ac400007 	ldb	r17,0(r21)
  8036fc:	003d5e06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  803700:	94800814 	ori	r18,r18,32
  803704:	ac400007 	ldb	r17,0(r21)
  803708:	003d5b06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  80370c:	d8c02d17 	ldw	r3,180(sp)
  803710:	d8002785 	stb	zero,158(sp)
  803714:	1c000017 	ldw	r16,0(r3)
  803718:	1cc00104 	addi	r19,r3,4
  80371c:	80041926 	beq	r16,zero,804784 <___vfprintf_internal_r+0x1c90>
  803720:	d9002917 	ldw	r4,164(sp)
  803724:	2003d016 	blt	r4,zero,804668 <___vfprintf_internal_r+0x1b74>
  803728:	200d883a 	mov	r6,r4
  80372c:	000b883a 	mov	r5,zero
  803730:	8009883a 	mov	r4,r16
  803734:	da003d15 	stw	r8,244(sp)
  803738:	0807e480 	call	807e48 <memchr>
  80373c:	da003d17 	ldw	r8,244(sp)
  803740:	10045426 	beq	r2,zero,804894 <___vfprintf_internal_r+0x1da0>
  803744:	1405c83a 	sub	r2,r2,r16
  803748:	d8802e15 	stw	r2,184(sp)
  80374c:	1003cc16 	blt	r2,zero,804680 <___vfprintf_internal_r+0x1b8c>
  803750:	df002783 	ldbu	fp,158(sp)
  803754:	d8802a15 	stw	r2,168(sp)
  803758:	dcc02d15 	stw	r19,180(sp)
  80375c:	d8002915 	stw	zero,164(sp)
  803760:	d8003215 	stw	zero,200(sp)
  803764:	003eb006 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  803768:	18c03fcc 	andi	r3,r3,255
  80376c:	183f9b26 	beq	r3,zero,8035dc <__alt_mem_onchip_mem+0xff7835dc>
  803770:	d9c02785 	stb	r7,158(sp)
  803774:	003f9906 	br	8035dc <__alt_mem_onchip_mem+0xff7835dc>
  803778:	18c03fcc 	andi	r3,r3,255
  80377c:	1805551e 	bne	r3,zero,804cd4 <___vfprintf_internal_r+0x21e0>
  803780:	01402074 	movhi	r5,129
  803784:	294d1f04 	addi	r5,r5,13436
  803788:	d9403915 	stw	r5,228(sp)
  80378c:	9080080c 	andi	r2,r18,32
  803790:	103fae1e 	bne	r2,zero,80364c <__alt_mem_onchip_mem+0xff78364c>
  803794:	9080040c 	andi	r2,r18,16
  803798:	1002de26 	beq	r2,zero,804314 <___vfprintf_internal_r+0x1820>
  80379c:	d8c02d17 	ldw	r3,180(sp)
  8037a0:	002d883a 	mov	r22,zero
  8037a4:	1cc00017 	ldw	r19,0(r3)
  8037a8:	18c00104 	addi	r3,r3,4
  8037ac:	d8c02d15 	stw	r3,180(sp)
  8037b0:	003fab06 	br	803660 <__alt_mem_onchip_mem+0xff783660>
  8037b4:	38803fcc 	andi	r2,r7,255
  8037b8:	1080201c 	xori	r2,r2,128
  8037bc:	10bfe004 	addi	r2,r2,-128
  8037c0:	1002d21e 	bne	r2,zero,80430c <___vfprintf_internal_r+0x1818>
  8037c4:	00c00044 	movi	r3,1
  8037c8:	01c00804 	movi	r7,32
  8037cc:	ac400007 	ldb	r17,0(r21)
  8037d0:	003d2906 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  8037d4:	94800054 	ori	r18,r18,1
  8037d8:	ac400007 	ldb	r17,0(r21)
  8037dc:	003d2606 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  8037e0:	18c03fcc 	andi	r3,r3,255
  8037e4:	183e0526 	beq	r3,zero,802ffc <__alt_mem_onchip_mem+0xff782ffc>
  8037e8:	d9c02785 	stb	r7,158(sp)
  8037ec:	003e0306 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  8037f0:	94801014 	ori	r18,r18,64
  8037f4:	ac400007 	ldb	r17,0(r21)
  8037f8:	003d1f06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  8037fc:	ac400007 	ldb	r17,0(r21)
  803800:	8a438726 	beq	r17,r9,804620 <___vfprintf_internal_r+0x1b2c>
  803804:	94800414 	ori	r18,r18,16
  803808:	003d1b06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  80380c:	18c03fcc 	andi	r3,r3,255
  803810:	1805341e 	bne	r3,zero,804ce4 <___vfprintf_internal_r+0x21f0>
  803814:	9080080c 	andi	r2,r18,32
  803818:	1002cd26 	beq	r2,zero,804350 <___vfprintf_internal_r+0x185c>
  80381c:	d9402d17 	ldw	r5,180(sp)
  803820:	d9002f17 	ldw	r4,188(sp)
  803824:	28800017 	ldw	r2,0(r5)
  803828:	2007d7fa 	srai	r3,r4,31
  80382c:	29400104 	addi	r5,r5,4
  803830:	d9402d15 	stw	r5,180(sp)
  803834:	11000015 	stw	r4,0(r2)
  803838:	10c00115 	stw	r3,4(r2)
  80383c:	003ce506 	br	802bd4 <__alt_mem_onchip_mem+0xff782bd4>
  803840:	d8c02d17 	ldw	r3,180(sp)
  803844:	d9002d17 	ldw	r4,180(sp)
  803848:	d8002785 	stb	zero,158(sp)
  80384c:	18800017 	ldw	r2,0(r3)
  803850:	21000104 	addi	r4,r4,4
  803854:	00c00044 	movi	r3,1
  803858:	d8c02a15 	stw	r3,168(sp)
  80385c:	d8801405 	stb	r2,80(sp)
  803860:	d9002d15 	stw	r4,180(sp)
  803864:	d8c02e15 	stw	r3,184(sp)
  803868:	d8002915 	stw	zero,164(sp)
  80386c:	d8003215 	stw	zero,200(sp)
  803870:	dc001404 	addi	r16,sp,80
  803874:	0039883a 	mov	fp,zero
  803878:	003e7206 	br	803244 <__alt_mem_onchip_mem+0xff783244>
  80387c:	01002074 	movhi	r4,129
  803880:	210d1f04 	addi	r4,r4,13436
  803884:	0039883a 	mov	fp,zero
  803888:	d9003915 	stw	r4,228(sp)
  80388c:	04401e04 	movi	r17,120
  803890:	003f8206 	br	80369c <__alt_mem_onchip_mem+0xff78369c>
  803894:	18c03fcc 	andi	r3,r3,255
  803898:	1805061e 	bne	r3,zero,804cb4 <___vfprintf_internal_r+0x21c0>
  80389c:	883d9126 	beq	r17,zero,802ee4 <__alt_mem_onchip_mem+0xff782ee4>
  8038a0:	00c00044 	movi	r3,1
  8038a4:	d8c02a15 	stw	r3,168(sp)
  8038a8:	dc401405 	stb	r17,80(sp)
  8038ac:	d8002785 	stb	zero,158(sp)
  8038b0:	003fec06 	br	803864 <__alt_mem_onchip_mem+0xff783864>
  8038b4:	01402074 	movhi	r5,129
  8038b8:	294d1f04 	addi	r5,r5,13436
  8038bc:	d9403915 	stw	r5,228(sp)
  8038c0:	d8c02d15 	stw	r3,180(sp)
  8038c4:	1025883a 	mov	r18,r2
  8038c8:	04401e04 	movi	r17,120
  8038cc:	9d84b03a 	or	r2,r19,r22
  8038d0:	1000fc1e 	bne	r2,zero,803cc4 <___vfprintf_internal_r+0x11d0>
  8038d4:	0039883a 	mov	fp,zero
  8038d8:	00800084 	movi	r2,2
  8038dc:	10803fcc 	andi	r2,r2,255
  8038e0:	00c00044 	movi	r3,1
  8038e4:	10c20f26 	beq	r2,r3,804124 <___vfprintf_internal_r+0x1630>
  8038e8:	00c00084 	movi	r3,2
  8038ec:	10fd6326 	beq	r2,r3,802e7c <__alt_mem_onchip_mem+0xff782e7c>
  8038f0:	003e2d06 	br	8031a8 <__alt_mem_onchip_mem+0xff7831a8>
  8038f4:	d8c02017 	ldw	r3,128(sp)
  8038f8:	003e9306 	br	803348 <__alt_mem_onchip_mem+0xff783348>
  8038fc:	00801944 	movi	r2,101
  803900:	14407e0e 	bge	r2,r17,803afc <___vfprintf_internal_r+0x1008>
  803904:	d9003617 	ldw	r4,216(sp)
  803908:	d9403817 	ldw	r5,224(sp)
  80390c:	000d883a 	mov	r6,zero
  803910:	000f883a 	mov	r7,zero
  803914:	d8c03c15 	stw	r3,240(sp)
  803918:	da003d15 	stw	r8,244(sp)
  80391c:	080de000 	call	80de00 <__eqdf2>
  803920:	d8c03c17 	ldw	r3,240(sp)
  803924:	da003d17 	ldw	r8,244(sp)
  803928:	1000f71e 	bne	r2,zero,803d08 <___vfprintf_internal_r+0x1214>
  80392c:	d8801f17 	ldw	r2,124(sp)
  803930:	01002074 	movhi	r4,129
  803934:	210d2604 	addi	r4,r4,13464
  803938:	18c00044 	addi	r3,r3,1
  80393c:	10800044 	addi	r2,r2,1
  803940:	41000015 	stw	r4,0(r8)
  803944:	01000044 	movi	r4,1
  803948:	41000115 	stw	r4,4(r8)
  80394c:	d8c02015 	stw	r3,128(sp)
  803950:	d8801f15 	stw	r2,124(sp)
  803954:	010001c4 	movi	r4,7
  803958:	2082b816 	blt	r4,r2,80443c <___vfprintf_internal_r+0x1948>
  80395c:	42000204 	addi	r8,r8,8
  803960:	d8802617 	ldw	r2,152(sp)
  803964:	d9403317 	ldw	r5,204(sp)
  803968:	11400216 	blt	r2,r5,803974 <___vfprintf_internal_r+0xe80>
  80396c:	9080004c 	andi	r2,r18,1
  803970:	103ed526 	beq	r2,zero,8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  803974:	d8803717 	ldw	r2,220(sp)
  803978:	d9003417 	ldw	r4,208(sp)
  80397c:	d9403717 	ldw	r5,220(sp)
  803980:	1887883a 	add	r3,r3,r2
  803984:	d8801f17 	ldw	r2,124(sp)
  803988:	41000015 	stw	r4,0(r8)
  80398c:	41400115 	stw	r5,4(r8)
  803990:	10800044 	addi	r2,r2,1
  803994:	d8c02015 	stw	r3,128(sp)
  803998:	d8801f15 	stw	r2,124(sp)
  80399c:	010001c4 	movi	r4,7
  8039a0:	20832916 	blt	r4,r2,804648 <___vfprintf_internal_r+0x1b54>
  8039a4:	42000204 	addi	r8,r8,8
  8039a8:	d8803317 	ldw	r2,204(sp)
  8039ac:	143fffc4 	addi	r16,r2,-1
  8039b0:	043ec50e 	bge	zero,r16,8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  8039b4:	04400404 	movi	r17,16
  8039b8:	d8801f17 	ldw	r2,124(sp)
  8039bc:	8c00880e 	bge	r17,r16,803be0 <___vfprintf_internal_r+0x10ec>
  8039c0:	01402074 	movhi	r5,129
  8039c4:	294d2684 	addi	r5,r5,13466
  8039c8:	d9402b15 	stw	r5,172(sp)
  8039cc:	058001c4 	movi	r22,7
  8039d0:	dcc02c17 	ldw	r19,176(sp)
  8039d4:	00000306 	br	8039e4 <___vfprintf_internal_r+0xef0>
  8039d8:	42000204 	addi	r8,r8,8
  8039dc:	843ffc04 	addi	r16,r16,-16
  8039e0:	8c00820e 	bge	r17,r16,803bec <___vfprintf_internal_r+0x10f8>
  8039e4:	18c00404 	addi	r3,r3,16
  8039e8:	10800044 	addi	r2,r2,1
  8039ec:	45000015 	stw	r20,0(r8)
  8039f0:	44400115 	stw	r17,4(r8)
  8039f4:	d8c02015 	stw	r3,128(sp)
  8039f8:	d8801f15 	stw	r2,124(sp)
  8039fc:	b0bff60e 	bge	r22,r2,8039d8 <__alt_mem_onchip_mem+0xff7839d8>
  803a00:	d9801e04 	addi	r6,sp,120
  803a04:	b80b883a 	mov	r5,r23
  803a08:	9809883a 	mov	r4,r19
  803a0c:	080960c0 	call	80960c <__sprint_r>
  803a10:	103d3a1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803a14:	d8c02017 	ldw	r3,128(sp)
  803a18:	d8801f17 	ldw	r2,124(sp)
  803a1c:	da000404 	addi	r8,sp,16
  803a20:	003fee06 	br	8039dc <__alt_mem_onchip_mem+0xff7839dc>
  803a24:	d9403117 	ldw	r5,196(sp)
  803a28:	d8802a17 	ldw	r2,168(sp)
  803a2c:	28adc83a 	sub	r22,r5,r2
  803a30:	05be630e 	bge	zero,r22,8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  803a34:	07000404 	movi	fp,16
  803a38:	d8801f17 	ldw	r2,124(sp)
  803a3c:	e5838f0e 	bge	fp,r22,80487c <___vfprintf_internal_r+0x1d88>
  803a40:	01402074 	movhi	r5,129
  803a44:	294d2684 	addi	r5,r5,13466
  803a48:	dc403015 	stw	r17,192(sp)
  803a4c:	d9402b15 	stw	r5,172(sp)
  803a50:	b023883a 	mov	r17,r22
  803a54:	04c001c4 	movi	r19,7
  803a58:	a82d883a 	mov	r22,r21
  803a5c:	902b883a 	mov	r21,r18
  803a60:	8025883a 	mov	r18,r16
  803a64:	dc002c17 	ldw	r16,176(sp)
  803a68:	00000306 	br	803a78 <___vfprintf_internal_r+0xf84>
  803a6c:	8c7ffc04 	addi	r17,r17,-16
  803a70:	42000204 	addi	r8,r8,8
  803a74:	e440110e 	bge	fp,r17,803abc <___vfprintf_internal_r+0xfc8>
  803a78:	18c00404 	addi	r3,r3,16
  803a7c:	10800044 	addi	r2,r2,1
  803a80:	45000015 	stw	r20,0(r8)
  803a84:	47000115 	stw	fp,4(r8)
  803a88:	d8c02015 	stw	r3,128(sp)
  803a8c:	d8801f15 	stw	r2,124(sp)
  803a90:	98bff60e 	bge	r19,r2,803a6c <__alt_mem_onchip_mem+0xff783a6c>
  803a94:	d9801e04 	addi	r6,sp,120
  803a98:	b80b883a 	mov	r5,r23
  803a9c:	8009883a 	mov	r4,r16
  803aa0:	080960c0 	call	80960c <__sprint_r>
  803aa4:	103d151e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803aa8:	8c7ffc04 	addi	r17,r17,-16
  803aac:	d8c02017 	ldw	r3,128(sp)
  803ab0:	d8801f17 	ldw	r2,124(sp)
  803ab4:	da000404 	addi	r8,sp,16
  803ab8:	e47fef16 	blt	fp,r17,803a78 <__alt_mem_onchip_mem+0xff783a78>
  803abc:	9021883a 	mov	r16,r18
  803ac0:	a825883a 	mov	r18,r21
  803ac4:	b02b883a 	mov	r21,r22
  803ac8:	882d883a 	mov	r22,r17
  803acc:	dc403017 	ldw	r17,192(sp)
  803ad0:	d9002b17 	ldw	r4,172(sp)
  803ad4:	1d87883a 	add	r3,r3,r22
  803ad8:	10800044 	addi	r2,r2,1
  803adc:	41000015 	stw	r4,0(r8)
  803ae0:	45800115 	stw	r22,4(r8)
  803ae4:	d8c02015 	stw	r3,128(sp)
  803ae8:	d8801f15 	stw	r2,124(sp)
  803aec:	010001c4 	movi	r4,7
  803af0:	20818e16 	blt	r4,r2,80412c <___vfprintf_internal_r+0x1638>
  803af4:	42000204 	addi	r8,r8,8
  803af8:	003e3106 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  803afc:	d9403317 	ldw	r5,204(sp)
  803b00:	00800044 	movi	r2,1
  803b04:	18c00044 	addi	r3,r3,1
  803b08:	1141530e 	bge	r2,r5,804058 <___vfprintf_internal_r+0x1564>
  803b0c:	dc401f17 	ldw	r17,124(sp)
  803b10:	00800044 	movi	r2,1
  803b14:	40800115 	stw	r2,4(r8)
  803b18:	8c400044 	addi	r17,r17,1
  803b1c:	44000015 	stw	r16,0(r8)
  803b20:	d8c02015 	stw	r3,128(sp)
  803b24:	dc401f15 	stw	r17,124(sp)
  803b28:	008001c4 	movi	r2,7
  803b2c:	14416b16 	blt	r2,r17,8040dc <___vfprintf_internal_r+0x15e8>
  803b30:	42000204 	addi	r8,r8,8
  803b34:	d8803717 	ldw	r2,220(sp)
  803b38:	d9003417 	ldw	r4,208(sp)
  803b3c:	8c400044 	addi	r17,r17,1
  803b40:	10c7883a 	add	r3,r2,r3
  803b44:	40800115 	stw	r2,4(r8)
  803b48:	41000015 	stw	r4,0(r8)
  803b4c:	d8c02015 	stw	r3,128(sp)
  803b50:	dc401f15 	stw	r17,124(sp)
  803b54:	008001c4 	movi	r2,7
  803b58:	14416916 	blt	r2,r17,804100 <___vfprintf_internal_r+0x160c>
  803b5c:	45800204 	addi	r22,r8,8
  803b60:	d9003617 	ldw	r4,216(sp)
  803b64:	d9403817 	ldw	r5,224(sp)
  803b68:	000d883a 	mov	r6,zero
  803b6c:	000f883a 	mov	r7,zero
  803b70:	d8c03c15 	stw	r3,240(sp)
  803b74:	080de000 	call	80de00 <__eqdf2>
  803b78:	d8c03c17 	ldw	r3,240(sp)
  803b7c:	1000bc26 	beq	r2,zero,803e70 <___vfprintf_internal_r+0x137c>
  803b80:	d9403317 	ldw	r5,204(sp)
  803b84:	84000044 	addi	r16,r16,1
  803b88:	8c400044 	addi	r17,r17,1
  803b8c:	28bfffc4 	addi	r2,r5,-1
  803b90:	1887883a 	add	r3,r3,r2
  803b94:	b0800115 	stw	r2,4(r22)
  803b98:	b4000015 	stw	r16,0(r22)
  803b9c:	d8c02015 	stw	r3,128(sp)
  803ba0:	dc401f15 	stw	r17,124(sp)
  803ba4:	008001c4 	movi	r2,7
  803ba8:	14414316 	blt	r2,r17,8040b8 <___vfprintf_internal_r+0x15c4>
  803bac:	b5800204 	addi	r22,r22,8
  803bb0:	d9003a17 	ldw	r4,232(sp)
  803bb4:	df0022c4 	addi	fp,sp,139
  803bb8:	8c400044 	addi	r17,r17,1
  803bbc:	20c7883a 	add	r3,r4,r3
  803bc0:	b7000015 	stw	fp,0(r22)
  803bc4:	b1000115 	stw	r4,4(r22)
  803bc8:	d8c02015 	stw	r3,128(sp)
  803bcc:	dc401f15 	stw	r17,124(sp)
  803bd0:	008001c4 	movi	r2,7
  803bd4:	14400e16 	blt	r2,r17,803c10 <___vfprintf_internal_r+0x111c>
  803bd8:	b2000204 	addi	r8,r22,8
  803bdc:	003e3a06 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  803be0:	01002074 	movhi	r4,129
  803be4:	210d2684 	addi	r4,r4,13466
  803be8:	d9002b15 	stw	r4,172(sp)
  803bec:	d9002b17 	ldw	r4,172(sp)
  803bf0:	1c07883a 	add	r3,r3,r16
  803bf4:	44000115 	stw	r16,4(r8)
  803bf8:	41000015 	stw	r4,0(r8)
  803bfc:	10800044 	addi	r2,r2,1
  803c00:	d8c02015 	stw	r3,128(sp)
  803c04:	d8801f15 	stw	r2,124(sp)
  803c08:	010001c4 	movi	r4,7
  803c0c:	20be2d0e 	bge	r4,r2,8034c4 <__alt_mem_onchip_mem+0xff7834c4>
  803c10:	d9002c17 	ldw	r4,176(sp)
  803c14:	d9801e04 	addi	r6,sp,120
  803c18:	b80b883a 	mov	r5,r23
  803c1c:	080960c0 	call	80960c <__sprint_r>
  803c20:	103cb61e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803c24:	d8c02017 	ldw	r3,128(sp)
  803c28:	da000404 	addi	r8,sp,16
  803c2c:	003e2606 	br	8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  803c30:	d9002c17 	ldw	r4,176(sp)
  803c34:	d9801e04 	addi	r6,sp,120
  803c38:	b80b883a 	mov	r5,r23
  803c3c:	080960c0 	call	80960c <__sprint_r>
  803c40:	103e5d26 	beq	r2,zero,8035b8 <__alt_mem_onchip_mem+0xff7835b8>
  803c44:	003cad06 	br	802efc <__alt_mem_onchip_mem+0xff782efc>
  803c48:	d9002c17 	ldw	r4,176(sp)
  803c4c:	d9801e04 	addi	r6,sp,120
  803c50:	b80b883a 	mov	r5,r23
  803c54:	080960c0 	call	80960c <__sprint_r>
  803c58:	103ca81e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803c5c:	d8c02017 	ldw	r3,128(sp)
  803c60:	da000404 	addi	r8,sp,16
  803c64:	003e0b06 	br	803494 <__alt_mem_onchip_mem+0xff783494>
  803c68:	d9002c17 	ldw	r4,176(sp)
  803c6c:	d9801e04 	addi	r6,sp,120
  803c70:	b80b883a 	mov	r5,r23
  803c74:	080960c0 	call	80960c <__sprint_r>
  803c78:	103ca01e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803c7c:	d8c02017 	ldw	r3,128(sp)
  803c80:	da000404 	addi	r8,sp,16
  803c84:	003dbd06 	br	80337c <__alt_mem_onchip_mem+0xff78337c>
  803c88:	d9002c17 	ldw	r4,176(sp)
  803c8c:	d9801e04 	addi	r6,sp,120
  803c90:	b80b883a 	mov	r5,r23
  803c94:	080960c0 	call	80960c <__sprint_r>
  803c98:	103c981e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803c9c:	d8c02017 	ldw	r3,128(sp)
  803ca0:	da000404 	addi	r8,sp,16
  803ca4:	003dc306 	br	8033b4 <__alt_mem_onchip_mem+0xff7833b4>
  803ca8:	d8802917 	ldw	r2,164(sp)
  803cac:	d8002785 	stb	zero,158(sp)
  803cb0:	103f0616 	blt	r2,zero,8038cc <__alt_mem_onchip_mem+0xff7838cc>
  803cb4:	00ffdfc4 	movi	r3,-129
  803cb8:	9d84b03a 	or	r2,r19,r22
  803cbc:	90e4703a 	and	r18,r18,r3
  803cc0:	103c6b26 	beq	r2,zero,802e70 <__alt_mem_onchip_mem+0xff782e70>
  803cc4:	0039883a 	mov	fp,zero
  803cc8:	003e7406 	br	80369c <__alt_mem_onchip_mem+0xff78369c>
  803ccc:	9080040c 	andi	r2,r18,16
  803cd0:	1001b326 	beq	r2,zero,8043a0 <___vfprintf_internal_r+0x18ac>
  803cd4:	d9002d17 	ldw	r4,180(sp)
  803cd8:	d9402917 	ldw	r5,164(sp)
  803cdc:	d8002785 	stb	zero,158(sp)
  803ce0:	20800104 	addi	r2,r4,4
  803ce4:	24c00017 	ldw	r19,0(r4)
  803ce8:	002d883a 	mov	r22,zero
  803cec:	2801b516 	blt	r5,zero,8043c4 <___vfprintf_internal_r+0x18d0>
  803cf0:	00ffdfc4 	movi	r3,-129
  803cf4:	d8802d15 	stw	r2,180(sp)
  803cf8:	90e4703a 	and	r18,r18,r3
  803cfc:	983d2726 	beq	r19,zero,80319c <__alt_mem_onchip_mem+0xff78319c>
  803d00:	0039883a 	mov	fp,zero
  803d04:	003d2a06 	br	8031b0 <__alt_mem_onchip_mem+0xff7831b0>
  803d08:	dc402617 	ldw	r17,152(sp)
  803d0c:	0441d30e 	bge	zero,r17,80445c <___vfprintf_internal_r+0x1968>
  803d10:	dc403217 	ldw	r17,200(sp)
  803d14:	d8803317 	ldw	r2,204(sp)
  803d18:	1440010e 	bge	r2,r17,803d20 <___vfprintf_internal_r+0x122c>
  803d1c:	1023883a 	mov	r17,r2
  803d20:	04400a0e 	bge	zero,r17,803d4c <___vfprintf_internal_r+0x1258>
  803d24:	d8801f17 	ldw	r2,124(sp)
  803d28:	1c47883a 	add	r3,r3,r17
  803d2c:	44000015 	stw	r16,0(r8)
  803d30:	10800044 	addi	r2,r2,1
  803d34:	44400115 	stw	r17,4(r8)
  803d38:	d8c02015 	stw	r3,128(sp)
  803d3c:	d8801f15 	stw	r2,124(sp)
  803d40:	010001c4 	movi	r4,7
  803d44:	20826516 	blt	r4,r2,8046dc <___vfprintf_internal_r+0x1be8>
  803d48:	42000204 	addi	r8,r8,8
  803d4c:	88026116 	blt	r17,zero,8046d4 <___vfprintf_internal_r+0x1be0>
  803d50:	d9003217 	ldw	r4,200(sp)
  803d54:	2463c83a 	sub	r17,r4,r17
  803d58:	04407b0e 	bge	zero,r17,803f48 <___vfprintf_internal_r+0x1454>
  803d5c:	05800404 	movi	r22,16
  803d60:	d8801f17 	ldw	r2,124(sp)
  803d64:	b4419d0e 	bge	r22,r17,8043dc <___vfprintf_internal_r+0x18e8>
  803d68:	01002074 	movhi	r4,129
  803d6c:	210d2684 	addi	r4,r4,13466
  803d70:	d9002b15 	stw	r4,172(sp)
  803d74:	070001c4 	movi	fp,7
  803d78:	dcc02c17 	ldw	r19,176(sp)
  803d7c:	00000306 	br	803d8c <___vfprintf_internal_r+0x1298>
  803d80:	42000204 	addi	r8,r8,8
  803d84:	8c7ffc04 	addi	r17,r17,-16
  803d88:	b441970e 	bge	r22,r17,8043e8 <___vfprintf_internal_r+0x18f4>
  803d8c:	18c00404 	addi	r3,r3,16
  803d90:	10800044 	addi	r2,r2,1
  803d94:	45000015 	stw	r20,0(r8)
  803d98:	45800115 	stw	r22,4(r8)
  803d9c:	d8c02015 	stw	r3,128(sp)
  803da0:	d8801f15 	stw	r2,124(sp)
  803da4:	e0bff60e 	bge	fp,r2,803d80 <__alt_mem_onchip_mem+0xff783d80>
  803da8:	d9801e04 	addi	r6,sp,120
  803dac:	b80b883a 	mov	r5,r23
  803db0:	9809883a 	mov	r4,r19
  803db4:	080960c0 	call	80960c <__sprint_r>
  803db8:	103c501e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803dbc:	d8c02017 	ldw	r3,128(sp)
  803dc0:	d8801f17 	ldw	r2,124(sp)
  803dc4:	da000404 	addi	r8,sp,16
  803dc8:	003fee06 	br	803d84 <__alt_mem_onchip_mem+0xff783d84>
  803dcc:	d9002c17 	ldw	r4,176(sp)
  803dd0:	d9801e04 	addi	r6,sp,120
  803dd4:	b80b883a 	mov	r5,r23
  803dd8:	080960c0 	call	80960c <__sprint_r>
  803ddc:	103c471e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803de0:	d8c02017 	ldw	r3,128(sp)
  803de4:	df002787 	ldb	fp,158(sp)
  803de8:	da000404 	addi	r8,sp,16
  803dec:	003d5606 	br	803348 <__alt_mem_onchip_mem+0xff783348>
  803df0:	9080040c 	andi	r2,r18,16
  803df4:	10016126 	beq	r2,zero,80437c <___vfprintf_internal_r+0x1888>
  803df8:	d8802d17 	ldw	r2,180(sp)
  803dfc:	14c00017 	ldw	r19,0(r2)
  803e00:	10800104 	addi	r2,r2,4
  803e04:	d8802d15 	stw	r2,180(sp)
  803e08:	982dd7fa 	srai	r22,r19,31
  803e0c:	b005883a 	mov	r2,r22
  803e10:	003c8206 	br	80301c <__alt_mem_onchip_mem+0xff78301c>
  803e14:	9080040c 	andi	r2,r18,16
  803e18:	10003526 	beq	r2,zero,803ef0 <___vfprintf_internal_r+0x13fc>
  803e1c:	d9402d17 	ldw	r5,180(sp)
  803e20:	d8c02917 	ldw	r3,164(sp)
  803e24:	d8002785 	stb	zero,158(sp)
  803e28:	28800104 	addi	r2,r5,4
  803e2c:	2cc00017 	ldw	r19,0(r5)
  803e30:	002d883a 	mov	r22,zero
  803e34:	18003716 	blt	r3,zero,803f14 <___vfprintf_internal_r+0x1420>
  803e38:	00ffdfc4 	movi	r3,-129
  803e3c:	d8802d15 	stw	r2,180(sp)
  803e40:	90e4703a 	and	r18,r18,r3
  803e44:	0039883a 	mov	fp,zero
  803e48:	983df326 	beq	r19,zero,803618 <__alt_mem_onchip_mem+0xff783618>
  803e4c:	00800244 	movi	r2,9
  803e50:	14fc7b36 	bltu	r2,r19,803040 <__alt_mem_onchip_mem+0xff783040>
  803e54:	d8c02817 	ldw	r3,160(sp)
  803e58:	dc001dc4 	addi	r16,sp,119
  803e5c:	9cc00c04 	addi	r19,r19,48
  803e60:	1c07c83a 	sub	r3,r3,r16
  803e64:	dcc01dc5 	stb	r19,119(sp)
  803e68:	d8c02e15 	stw	r3,184(sp)
  803e6c:	003ce806 	br	803210 <__alt_mem_onchip_mem+0xff783210>
  803e70:	d8803317 	ldw	r2,204(sp)
  803e74:	143fffc4 	addi	r16,r2,-1
  803e78:	043f4d0e 	bge	zero,r16,803bb0 <__alt_mem_onchip_mem+0xff783bb0>
  803e7c:	07000404 	movi	fp,16
  803e80:	e400810e 	bge	fp,r16,804088 <___vfprintf_internal_r+0x1594>
  803e84:	01402074 	movhi	r5,129
  803e88:	294d2684 	addi	r5,r5,13466
  803e8c:	d9402b15 	stw	r5,172(sp)
  803e90:	01c001c4 	movi	r7,7
  803e94:	dcc02c17 	ldw	r19,176(sp)
  803e98:	00000306 	br	803ea8 <___vfprintf_internal_r+0x13b4>
  803e9c:	b5800204 	addi	r22,r22,8
  803ea0:	843ffc04 	addi	r16,r16,-16
  803ea4:	e4007b0e 	bge	fp,r16,804094 <___vfprintf_internal_r+0x15a0>
  803ea8:	18c00404 	addi	r3,r3,16
  803eac:	8c400044 	addi	r17,r17,1
  803eb0:	b5000015 	stw	r20,0(r22)
  803eb4:	b7000115 	stw	fp,4(r22)
  803eb8:	d8c02015 	stw	r3,128(sp)
  803ebc:	dc401f15 	stw	r17,124(sp)
  803ec0:	3c7ff60e 	bge	r7,r17,803e9c <__alt_mem_onchip_mem+0xff783e9c>
  803ec4:	d9801e04 	addi	r6,sp,120
  803ec8:	b80b883a 	mov	r5,r23
  803ecc:	9809883a 	mov	r4,r19
  803ed0:	d9c03c15 	stw	r7,240(sp)
  803ed4:	080960c0 	call	80960c <__sprint_r>
  803ed8:	d9c03c17 	ldw	r7,240(sp)
  803edc:	103c071e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803ee0:	d8c02017 	ldw	r3,128(sp)
  803ee4:	dc401f17 	ldw	r17,124(sp)
  803ee8:	dd800404 	addi	r22,sp,16
  803eec:	003fec06 	br	803ea0 <__alt_mem_onchip_mem+0xff783ea0>
  803ef0:	9080100c 	andi	r2,r18,64
  803ef4:	d8002785 	stb	zero,158(sp)
  803ef8:	10010e26 	beq	r2,zero,804334 <___vfprintf_internal_r+0x1840>
  803efc:	d9002d17 	ldw	r4,180(sp)
  803f00:	d9402917 	ldw	r5,164(sp)
  803f04:	002d883a 	mov	r22,zero
  803f08:	20800104 	addi	r2,r4,4
  803f0c:	24c0000b 	ldhu	r19,0(r4)
  803f10:	283fc90e 	bge	r5,zero,803e38 <__alt_mem_onchip_mem+0xff783e38>
  803f14:	d8802d15 	stw	r2,180(sp)
  803f18:	0039883a 	mov	fp,zero
  803f1c:	9d84b03a 	or	r2,r19,r22
  803f20:	103c461e 	bne	r2,zero,80303c <__alt_mem_onchip_mem+0xff78303c>
  803f24:	00800044 	movi	r2,1
  803f28:	003e6c06 	br	8038dc <__alt_mem_onchip_mem+0xff7838dc>
  803f2c:	d9002c17 	ldw	r4,176(sp)
  803f30:	d9801e04 	addi	r6,sp,120
  803f34:	b80b883a 	mov	r5,r23
  803f38:	080960c0 	call	80960c <__sprint_r>
  803f3c:	103bef1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  803f40:	d8c02017 	ldw	r3,128(sp)
  803f44:	da000404 	addi	r8,sp,16
  803f48:	d9003217 	ldw	r4,200(sp)
  803f4c:	d8802617 	ldw	r2,152(sp)
  803f50:	d9403317 	ldw	r5,204(sp)
  803f54:	8123883a 	add	r17,r16,r4
  803f58:	11400216 	blt	r2,r5,803f64 <___vfprintf_internal_r+0x1470>
  803f5c:	9100004c 	andi	r4,r18,1
  803f60:	20000d26 	beq	r4,zero,803f98 <___vfprintf_internal_r+0x14a4>
  803f64:	d9003717 	ldw	r4,220(sp)
  803f68:	d9403417 	ldw	r5,208(sp)
  803f6c:	1907883a 	add	r3,r3,r4
  803f70:	d9001f17 	ldw	r4,124(sp)
  803f74:	41400015 	stw	r5,0(r8)
  803f78:	d9403717 	ldw	r5,220(sp)
  803f7c:	21000044 	addi	r4,r4,1
  803f80:	d8c02015 	stw	r3,128(sp)
  803f84:	41400115 	stw	r5,4(r8)
  803f88:	d9001f15 	stw	r4,124(sp)
  803f8c:	014001c4 	movi	r5,7
  803f90:	2901e816 	blt	r5,r4,804734 <___vfprintf_internal_r+0x1c40>
  803f94:	42000204 	addi	r8,r8,8
  803f98:	d9003317 	ldw	r4,204(sp)
  803f9c:	8121883a 	add	r16,r16,r4
  803fa0:	2085c83a 	sub	r2,r4,r2
  803fa4:	8461c83a 	sub	r16,r16,r17
  803fa8:	1400010e 	bge	r2,r16,803fb0 <___vfprintf_internal_r+0x14bc>
  803fac:	1021883a 	mov	r16,r2
  803fb0:	04000a0e 	bge	zero,r16,803fdc <___vfprintf_internal_r+0x14e8>
  803fb4:	d9001f17 	ldw	r4,124(sp)
  803fb8:	1c07883a 	add	r3,r3,r16
  803fbc:	44400015 	stw	r17,0(r8)
  803fc0:	21000044 	addi	r4,r4,1
  803fc4:	44000115 	stw	r16,4(r8)
  803fc8:	d8c02015 	stw	r3,128(sp)
  803fcc:	d9001f15 	stw	r4,124(sp)
  803fd0:	014001c4 	movi	r5,7
  803fd4:	2901fb16 	blt	r5,r4,8047c4 <___vfprintf_internal_r+0x1cd0>
  803fd8:	42000204 	addi	r8,r8,8
  803fdc:	8001f716 	blt	r16,zero,8047bc <___vfprintf_internal_r+0x1cc8>
  803fe0:	1421c83a 	sub	r16,r2,r16
  803fe4:	043d380e 	bge	zero,r16,8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  803fe8:	04400404 	movi	r17,16
  803fec:	d8801f17 	ldw	r2,124(sp)
  803ff0:	8c3efb0e 	bge	r17,r16,803be0 <__alt_mem_onchip_mem+0xff783be0>
  803ff4:	01402074 	movhi	r5,129
  803ff8:	294d2684 	addi	r5,r5,13466
  803ffc:	d9402b15 	stw	r5,172(sp)
  804000:	058001c4 	movi	r22,7
  804004:	dcc02c17 	ldw	r19,176(sp)
  804008:	00000306 	br	804018 <___vfprintf_internal_r+0x1524>
  80400c:	42000204 	addi	r8,r8,8
  804010:	843ffc04 	addi	r16,r16,-16
  804014:	8c3ef50e 	bge	r17,r16,803bec <__alt_mem_onchip_mem+0xff783bec>
  804018:	18c00404 	addi	r3,r3,16
  80401c:	10800044 	addi	r2,r2,1
  804020:	45000015 	stw	r20,0(r8)
  804024:	44400115 	stw	r17,4(r8)
  804028:	d8c02015 	stw	r3,128(sp)
  80402c:	d8801f15 	stw	r2,124(sp)
  804030:	b0bff60e 	bge	r22,r2,80400c <__alt_mem_onchip_mem+0xff78400c>
  804034:	d9801e04 	addi	r6,sp,120
  804038:	b80b883a 	mov	r5,r23
  80403c:	9809883a 	mov	r4,r19
  804040:	080960c0 	call	80960c <__sprint_r>
  804044:	103bad1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804048:	d8c02017 	ldw	r3,128(sp)
  80404c:	d8801f17 	ldw	r2,124(sp)
  804050:	da000404 	addi	r8,sp,16
  804054:	003fee06 	br	804010 <__alt_mem_onchip_mem+0xff784010>
  804058:	9088703a 	and	r4,r18,r2
  80405c:	203eab1e 	bne	r4,zero,803b0c <__alt_mem_onchip_mem+0xff783b0c>
  804060:	dc401f17 	ldw	r17,124(sp)
  804064:	40800115 	stw	r2,4(r8)
  804068:	44000015 	stw	r16,0(r8)
  80406c:	8c400044 	addi	r17,r17,1
  804070:	d8c02015 	stw	r3,128(sp)
  804074:	dc401f15 	stw	r17,124(sp)
  804078:	008001c4 	movi	r2,7
  80407c:	14400e16 	blt	r2,r17,8040b8 <___vfprintf_internal_r+0x15c4>
  804080:	45800204 	addi	r22,r8,8
  804084:	003eca06 	br	803bb0 <__alt_mem_onchip_mem+0xff783bb0>
  804088:	01002074 	movhi	r4,129
  80408c:	210d2684 	addi	r4,r4,13466
  804090:	d9002b15 	stw	r4,172(sp)
  804094:	d8802b17 	ldw	r2,172(sp)
  804098:	1c07883a 	add	r3,r3,r16
  80409c:	8c400044 	addi	r17,r17,1
  8040a0:	b0800015 	stw	r2,0(r22)
  8040a4:	b4000115 	stw	r16,4(r22)
  8040a8:	d8c02015 	stw	r3,128(sp)
  8040ac:	dc401f15 	stw	r17,124(sp)
  8040b0:	008001c4 	movi	r2,7
  8040b4:	147ebd0e 	bge	r2,r17,803bac <__alt_mem_onchip_mem+0xff783bac>
  8040b8:	d9002c17 	ldw	r4,176(sp)
  8040bc:	d9801e04 	addi	r6,sp,120
  8040c0:	b80b883a 	mov	r5,r23
  8040c4:	080960c0 	call	80960c <__sprint_r>
  8040c8:	103b8c1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  8040cc:	d8c02017 	ldw	r3,128(sp)
  8040d0:	dc401f17 	ldw	r17,124(sp)
  8040d4:	dd800404 	addi	r22,sp,16
  8040d8:	003eb506 	br	803bb0 <__alt_mem_onchip_mem+0xff783bb0>
  8040dc:	d9002c17 	ldw	r4,176(sp)
  8040e0:	d9801e04 	addi	r6,sp,120
  8040e4:	b80b883a 	mov	r5,r23
  8040e8:	080960c0 	call	80960c <__sprint_r>
  8040ec:	103b831e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  8040f0:	d8c02017 	ldw	r3,128(sp)
  8040f4:	dc401f17 	ldw	r17,124(sp)
  8040f8:	da000404 	addi	r8,sp,16
  8040fc:	003e8d06 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  804100:	d9002c17 	ldw	r4,176(sp)
  804104:	d9801e04 	addi	r6,sp,120
  804108:	b80b883a 	mov	r5,r23
  80410c:	080960c0 	call	80960c <__sprint_r>
  804110:	103b7a1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804114:	d8c02017 	ldw	r3,128(sp)
  804118:	dc401f17 	ldw	r17,124(sp)
  80411c:	dd800404 	addi	r22,sp,16
  804120:	003e8f06 	br	803b60 <__alt_mem_onchip_mem+0xff783b60>
  804124:	0027883a 	mov	r19,zero
  804128:	003f4a06 	br	803e54 <__alt_mem_onchip_mem+0xff783e54>
  80412c:	d9002c17 	ldw	r4,176(sp)
  804130:	d9801e04 	addi	r6,sp,120
  804134:	b80b883a 	mov	r5,r23
  804138:	080960c0 	call	80960c <__sprint_r>
  80413c:	103b6f1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804140:	d8c02017 	ldw	r3,128(sp)
  804144:	da000404 	addi	r8,sp,16
  804148:	003c9d06 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  80414c:	04e7c83a 	sub	r19,zero,r19
  804150:	9804c03a 	cmpne	r2,r19,zero
  804154:	05adc83a 	sub	r22,zero,r22
  804158:	b0adc83a 	sub	r22,r22,r2
  80415c:	d8802917 	ldw	r2,164(sp)
  804160:	07000b44 	movi	fp,45
  804164:	df002785 	stb	fp,158(sp)
  804168:	10017b16 	blt	r2,zero,804758 <___vfprintf_internal_r+0x1c64>
  80416c:	00bfdfc4 	movi	r2,-129
  804170:	90a4703a 	and	r18,r18,r2
  804174:	003bb106 	br	80303c <__alt_mem_onchip_mem+0xff78303c>
  804178:	d9003617 	ldw	r4,216(sp)
  80417c:	d9403817 	ldw	r5,224(sp)
  804180:	da003d15 	stw	r8,244(sp)
  804184:	08091980 	call	809198 <__fpclassifyd>
  804188:	da003d17 	ldw	r8,244(sp)
  80418c:	1000f026 	beq	r2,zero,804550 <___vfprintf_internal_r+0x1a5c>
  804190:	d9002917 	ldw	r4,164(sp)
  804194:	05bff7c4 	movi	r22,-33
  804198:	00bfffc4 	movi	r2,-1
  80419c:	8dac703a 	and	r22,r17,r22
  8041a0:	20820026 	beq	r4,r2,8049a4 <___vfprintf_internal_r+0x1eb0>
  8041a4:	008011c4 	movi	r2,71
  8041a8:	b081f726 	beq	r22,r2,804988 <___vfprintf_internal_r+0x1e94>
  8041ac:	d9003817 	ldw	r4,224(sp)
  8041b0:	90c04014 	ori	r3,r18,256
  8041b4:	d8c02b15 	stw	r3,172(sp)
  8041b8:	20021516 	blt	r4,zero,804a10 <___vfprintf_internal_r+0x1f1c>
  8041bc:	dcc03817 	ldw	r19,224(sp)
  8041c0:	d8002a05 	stb	zero,168(sp)
  8041c4:	00801984 	movi	r2,102
  8041c8:	8881f926 	beq	r17,r2,8049b0 <___vfprintf_internal_r+0x1ebc>
  8041cc:	00801184 	movi	r2,70
  8041d0:	88821c26 	beq	r17,r2,804a44 <___vfprintf_internal_r+0x1f50>
  8041d4:	00801144 	movi	r2,69
  8041d8:	b081ef26 	beq	r22,r2,804998 <___vfprintf_internal_r+0x1ea4>
  8041dc:	d8c02917 	ldw	r3,164(sp)
  8041e0:	d8802104 	addi	r2,sp,132
  8041e4:	d8800315 	stw	r2,12(sp)
  8041e8:	d9403617 	ldw	r5,216(sp)
  8041ec:	d8802504 	addi	r2,sp,148
  8041f0:	d9002c17 	ldw	r4,176(sp)
  8041f4:	d8800215 	stw	r2,8(sp)
  8041f8:	d8802604 	addi	r2,sp,152
  8041fc:	d8c00015 	stw	r3,0(sp)
  804200:	d8800115 	stw	r2,4(sp)
  804204:	01c00084 	movi	r7,2
  804208:	980d883a 	mov	r6,r19
  80420c:	d8c03c15 	stw	r3,240(sp)
  804210:	da003d15 	stw	r8,244(sp)
  804214:	08051180 	call	805118 <_dtoa_r>
  804218:	1021883a 	mov	r16,r2
  80421c:	008019c4 	movi	r2,103
  804220:	d8c03c17 	ldw	r3,240(sp)
  804224:	da003d17 	ldw	r8,244(sp)
  804228:	88817126 	beq	r17,r2,8047f0 <___vfprintf_internal_r+0x1cfc>
  80422c:	008011c4 	movi	r2,71
  804230:	88829226 	beq	r17,r2,804c7c <___vfprintf_internal_r+0x2188>
  804234:	80f9883a 	add	fp,r16,r3
  804238:	d9003617 	ldw	r4,216(sp)
  80423c:	000d883a 	mov	r6,zero
  804240:	000f883a 	mov	r7,zero
  804244:	980b883a 	mov	r5,r19
  804248:	da003d15 	stw	r8,244(sp)
  80424c:	080de000 	call	80de00 <__eqdf2>
  804250:	da003d17 	ldw	r8,244(sp)
  804254:	10018d26 	beq	r2,zero,80488c <___vfprintf_internal_r+0x1d98>
  804258:	d8802117 	ldw	r2,132(sp)
  80425c:	1700062e 	bgeu	r2,fp,804278 <___vfprintf_internal_r+0x1784>
  804260:	01000c04 	movi	r4,48
  804264:	10c00044 	addi	r3,r2,1
  804268:	d8c02115 	stw	r3,132(sp)
  80426c:	11000005 	stb	r4,0(r2)
  804270:	d8802117 	ldw	r2,132(sp)
  804274:	173ffb36 	bltu	r2,fp,804264 <__alt_mem_onchip_mem+0xff784264>
  804278:	1405c83a 	sub	r2,r2,r16
  80427c:	d8803315 	stw	r2,204(sp)
  804280:	008011c4 	movi	r2,71
  804284:	b0817626 	beq	r22,r2,804860 <___vfprintf_internal_r+0x1d6c>
  804288:	00801944 	movi	r2,101
  80428c:	1442810e 	bge	r2,r17,804c94 <___vfprintf_internal_r+0x21a0>
  804290:	d8c02617 	ldw	r3,152(sp)
  804294:	00801984 	movi	r2,102
  804298:	d8c03215 	stw	r3,200(sp)
  80429c:	8881fe26 	beq	r17,r2,804a98 <___vfprintf_internal_r+0x1fa4>
  8042a0:	d8c03217 	ldw	r3,200(sp)
  8042a4:	d9003317 	ldw	r4,204(sp)
  8042a8:	1901dd16 	blt	r3,r4,804a20 <___vfprintf_internal_r+0x1f2c>
  8042ac:	9480004c 	andi	r18,r18,1
  8042b0:	90022b1e 	bne	r18,zero,804b60 <___vfprintf_internal_r+0x206c>
  8042b4:	1805883a 	mov	r2,r3
  8042b8:	18028016 	blt	r3,zero,804cbc <___vfprintf_internal_r+0x21c8>
  8042bc:	d8c03217 	ldw	r3,200(sp)
  8042c0:	044019c4 	movi	r17,103
  8042c4:	d8c02e15 	stw	r3,184(sp)
  8042c8:	df002a07 	ldb	fp,168(sp)
  8042cc:	e001531e 	bne	fp,zero,80481c <___vfprintf_internal_r+0x1d28>
  8042d0:	df002783 	ldbu	fp,158(sp)
  8042d4:	d8802a15 	stw	r2,168(sp)
  8042d8:	dc802b17 	ldw	r18,172(sp)
  8042dc:	d8002915 	stw	zero,164(sp)
  8042e0:	003bd106 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  8042e4:	d8802d17 	ldw	r2,180(sp)
  8042e8:	d8c02d17 	ldw	r3,180(sp)
  8042ec:	d9002d17 	ldw	r4,180(sp)
  8042f0:	10800017 	ldw	r2,0(r2)
  8042f4:	18c00117 	ldw	r3,4(r3)
  8042f8:	21000204 	addi	r4,r4,8
  8042fc:	d8803615 	stw	r2,216(sp)
  804300:	d8c03815 	stw	r3,224(sp)
  804304:	d9002d15 	stw	r4,180(sp)
  804308:	003b7506 	br	8030e0 <__alt_mem_onchip_mem+0xff7830e0>
  80430c:	ac400007 	ldb	r17,0(r21)
  804310:	003a5906 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  804314:	9080100c 	andi	r2,r18,64
  804318:	1000a826 	beq	r2,zero,8045bc <___vfprintf_internal_r+0x1ac8>
  80431c:	d9002d17 	ldw	r4,180(sp)
  804320:	002d883a 	mov	r22,zero
  804324:	24c0000b 	ldhu	r19,0(r4)
  804328:	21000104 	addi	r4,r4,4
  80432c:	d9002d15 	stw	r4,180(sp)
  804330:	003ccb06 	br	803660 <__alt_mem_onchip_mem+0xff783660>
  804334:	d8c02d17 	ldw	r3,180(sp)
  804338:	d9002917 	ldw	r4,164(sp)
  80433c:	002d883a 	mov	r22,zero
  804340:	18800104 	addi	r2,r3,4
  804344:	1cc00017 	ldw	r19,0(r3)
  804348:	203ebb0e 	bge	r4,zero,803e38 <__alt_mem_onchip_mem+0xff783e38>
  80434c:	003ef106 	br	803f14 <__alt_mem_onchip_mem+0xff783f14>
  804350:	9080040c 	andi	r2,r18,16
  804354:	1000921e 	bne	r2,zero,8045a0 <___vfprintf_internal_r+0x1aac>
  804358:	9480100c 	andi	r18,r18,64
  80435c:	90013926 	beq	r18,zero,804844 <___vfprintf_internal_r+0x1d50>
  804360:	d9002d17 	ldw	r4,180(sp)
  804364:	d9402f17 	ldw	r5,188(sp)
  804368:	20800017 	ldw	r2,0(r4)
  80436c:	21000104 	addi	r4,r4,4
  804370:	d9002d15 	stw	r4,180(sp)
  804374:	1140000d 	sth	r5,0(r2)
  804378:	003a1606 	br	802bd4 <__alt_mem_onchip_mem+0xff782bd4>
  80437c:	9080100c 	andi	r2,r18,64
  804380:	10008026 	beq	r2,zero,804584 <___vfprintf_internal_r+0x1a90>
  804384:	d8c02d17 	ldw	r3,180(sp)
  804388:	1cc0000f 	ldh	r19,0(r3)
  80438c:	18c00104 	addi	r3,r3,4
  804390:	d8c02d15 	stw	r3,180(sp)
  804394:	982dd7fa 	srai	r22,r19,31
  804398:	b005883a 	mov	r2,r22
  80439c:	003b1f06 	br	80301c <__alt_mem_onchip_mem+0xff78301c>
  8043a0:	9080100c 	andi	r2,r18,64
  8043a4:	d8002785 	stb	zero,158(sp)
  8043a8:	10008a1e 	bne	r2,zero,8045d4 <___vfprintf_internal_r+0x1ae0>
  8043ac:	d9402d17 	ldw	r5,180(sp)
  8043b0:	d8c02917 	ldw	r3,164(sp)
  8043b4:	002d883a 	mov	r22,zero
  8043b8:	28800104 	addi	r2,r5,4
  8043bc:	2cc00017 	ldw	r19,0(r5)
  8043c0:	183e4b0e 	bge	r3,zero,803cf0 <__alt_mem_onchip_mem+0xff783cf0>
  8043c4:	9d86b03a 	or	r3,r19,r22
  8043c8:	d8802d15 	stw	r2,180(sp)
  8043cc:	183e4c1e 	bne	r3,zero,803d00 <__alt_mem_onchip_mem+0xff783d00>
  8043d0:	0039883a 	mov	fp,zero
  8043d4:	0005883a 	mov	r2,zero
  8043d8:	003d4006 	br	8038dc <__alt_mem_onchip_mem+0xff7838dc>
  8043dc:	01402074 	movhi	r5,129
  8043e0:	294d2684 	addi	r5,r5,13466
  8043e4:	d9402b15 	stw	r5,172(sp)
  8043e8:	d9402b17 	ldw	r5,172(sp)
  8043ec:	1c47883a 	add	r3,r3,r17
  8043f0:	10800044 	addi	r2,r2,1
  8043f4:	41400015 	stw	r5,0(r8)
  8043f8:	44400115 	stw	r17,4(r8)
  8043fc:	d8c02015 	stw	r3,128(sp)
  804400:	d8801f15 	stw	r2,124(sp)
  804404:	010001c4 	movi	r4,7
  804408:	20bec816 	blt	r4,r2,803f2c <__alt_mem_onchip_mem+0xff783f2c>
  80440c:	42000204 	addi	r8,r8,8
  804410:	003ecd06 	br	803f48 <__alt_mem_onchip_mem+0xff783f48>
  804414:	d9002917 	ldw	r4,164(sp)
  804418:	d8002785 	stb	zero,158(sp)
  80441c:	203d2d16 	blt	r4,zero,8038d4 <__alt_mem_onchip_mem+0xff7838d4>
  804420:	00bfdfc4 	movi	r2,-129
  804424:	90a4703a 	and	r18,r18,r2
  804428:	003a9106 	br	802e70 <__alt_mem_onchip_mem+0xff782e70>
  80442c:	01002074 	movhi	r4,129
  804430:	210d2684 	addi	r4,r4,13466
  804434:	d9002b15 	stw	r4,172(sp)
  804438:	003c0c06 	br	80346c <__alt_mem_onchip_mem+0xff78346c>
  80443c:	d9002c17 	ldw	r4,176(sp)
  804440:	d9801e04 	addi	r6,sp,120
  804444:	b80b883a 	mov	r5,r23
  804448:	080960c0 	call	80960c <__sprint_r>
  80444c:	103aab1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804450:	d8c02017 	ldw	r3,128(sp)
  804454:	da000404 	addi	r8,sp,16
  804458:	003d4106 	br	803960 <__alt_mem_onchip_mem+0xff783960>
  80445c:	d8801f17 	ldw	r2,124(sp)
  804460:	01402074 	movhi	r5,129
  804464:	01000044 	movi	r4,1
  804468:	18c00044 	addi	r3,r3,1
  80446c:	10800044 	addi	r2,r2,1
  804470:	294d2604 	addi	r5,r5,13464
  804474:	41000115 	stw	r4,4(r8)
  804478:	41400015 	stw	r5,0(r8)
  80447c:	d8c02015 	stw	r3,128(sp)
  804480:	d8801f15 	stw	r2,124(sp)
  804484:	010001c4 	movi	r4,7
  804488:	20805c16 	blt	r4,r2,8045fc <___vfprintf_internal_r+0x1b08>
  80448c:	42000204 	addi	r8,r8,8
  804490:	8800041e 	bne	r17,zero,8044a4 <___vfprintf_internal_r+0x19b0>
  804494:	d8803317 	ldw	r2,204(sp)
  804498:	1000021e 	bne	r2,zero,8044a4 <___vfprintf_internal_r+0x19b0>
  80449c:	9080004c 	andi	r2,r18,1
  8044a0:	103c0926 	beq	r2,zero,8034c8 <__alt_mem_onchip_mem+0xff7834c8>
  8044a4:	d9003717 	ldw	r4,220(sp)
  8044a8:	d8801f17 	ldw	r2,124(sp)
  8044ac:	d9403417 	ldw	r5,208(sp)
  8044b0:	20c7883a 	add	r3,r4,r3
  8044b4:	10800044 	addi	r2,r2,1
  8044b8:	41000115 	stw	r4,4(r8)
  8044bc:	41400015 	stw	r5,0(r8)
  8044c0:	d8c02015 	stw	r3,128(sp)
  8044c4:	d8801f15 	stw	r2,124(sp)
  8044c8:	010001c4 	movi	r4,7
  8044cc:	20812116 	blt	r4,r2,804954 <___vfprintf_internal_r+0x1e60>
  8044d0:	42000204 	addi	r8,r8,8
  8044d4:	0463c83a 	sub	r17,zero,r17
  8044d8:	0440730e 	bge	zero,r17,8046a8 <___vfprintf_internal_r+0x1bb4>
  8044dc:	05800404 	movi	r22,16
  8044e0:	b440860e 	bge	r22,r17,8046fc <___vfprintf_internal_r+0x1c08>
  8044e4:	01402074 	movhi	r5,129
  8044e8:	294d2684 	addi	r5,r5,13466
  8044ec:	d9402b15 	stw	r5,172(sp)
  8044f0:	070001c4 	movi	fp,7
  8044f4:	dcc02c17 	ldw	r19,176(sp)
  8044f8:	00000306 	br	804508 <___vfprintf_internal_r+0x1a14>
  8044fc:	42000204 	addi	r8,r8,8
  804500:	8c7ffc04 	addi	r17,r17,-16
  804504:	b440800e 	bge	r22,r17,804708 <___vfprintf_internal_r+0x1c14>
  804508:	18c00404 	addi	r3,r3,16
  80450c:	10800044 	addi	r2,r2,1
  804510:	45000015 	stw	r20,0(r8)
  804514:	45800115 	stw	r22,4(r8)
  804518:	d8c02015 	stw	r3,128(sp)
  80451c:	d8801f15 	stw	r2,124(sp)
  804520:	e0bff60e 	bge	fp,r2,8044fc <__alt_mem_onchip_mem+0xff7844fc>
  804524:	d9801e04 	addi	r6,sp,120
  804528:	b80b883a 	mov	r5,r23
  80452c:	9809883a 	mov	r4,r19
  804530:	080960c0 	call	80960c <__sprint_r>
  804534:	103a711e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804538:	d8c02017 	ldw	r3,128(sp)
  80453c:	d8801f17 	ldw	r2,124(sp)
  804540:	da000404 	addi	r8,sp,16
  804544:	003fee06 	br	804500 <__alt_mem_onchip_mem+0xff784500>
  804548:	00bfffc4 	movi	r2,-1
  80454c:	003a6f06 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>
  804550:	008011c4 	movi	r2,71
  804554:	1440b816 	blt	r2,r17,804838 <___vfprintf_internal_r+0x1d44>
  804558:	04002074 	movhi	r16,129
  80455c:	840d1804 	addi	r16,r16,13408
  804560:	00c000c4 	movi	r3,3
  804564:	00bfdfc4 	movi	r2,-129
  804568:	d8c02a15 	stw	r3,168(sp)
  80456c:	90a4703a 	and	r18,r18,r2
  804570:	df002783 	ldbu	fp,158(sp)
  804574:	d8c02e15 	stw	r3,184(sp)
  804578:	d8002915 	stw	zero,164(sp)
  80457c:	d8003215 	stw	zero,200(sp)
  804580:	003b2906 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  804584:	d9002d17 	ldw	r4,180(sp)
  804588:	24c00017 	ldw	r19,0(r4)
  80458c:	21000104 	addi	r4,r4,4
  804590:	d9002d15 	stw	r4,180(sp)
  804594:	982dd7fa 	srai	r22,r19,31
  804598:	b005883a 	mov	r2,r22
  80459c:	003a9f06 	br	80301c <__alt_mem_onchip_mem+0xff78301c>
  8045a0:	d9402d17 	ldw	r5,180(sp)
  8045a4:	d8c02f17 	ldw	r3,188(sp)
  8045a8:	28800017 	ldw	r2,0(r5)
  8045ac:	29400104 	addi	r5,r5,4
  8045b0:	d9402d15 	stw	r5,180(sp)
  8045b4:	10c00015 	stw	r3,0(r2)
  8045b8:	00398606 	br	802bd4 <__alt_mem_onchip_mem+0xff782bd4>
  8045bc:	d9402d17 	ldw	r5,180(sp)
  8045c0:	002d883a 	mov	r22,zero
  8045c4:	2cc00017 	ldw	r19,0(r5)
  8045c8:	29400104 	addi	r5,r5,4
  8045cc:	d9402d15 	stw	r5,180(sp)
  8045d0:	003c2306 	br	803660 <__alt_mem_onchip_mem+0xff783660>
  8045d4:	d8c02d17 	ldw	r3,180(sp)
  8045d8:	d9002917 	ldw	r4,164(sp)
  8045dc:	002d883a 	mov	r22,zero
  8045e0:	18800104 	addi	r2,r3,4
  8045e4:	1cc0000b 	ldhu	r19,0(r3)
  8045e8:	203dc10e 	bge	r4,zero,803cf0 <__alt_mem_onchip_mem+0xff783cf0>
  8045ec:	003f7506 	br	8043c4 <__alt_mem_onchip_mem+0xff7843c4>
  8045f0:	04002074 	movhi	r16,129
  8045f4:	840d1604 	addi	r16,r16,13400
  8045f8:	003acc06 	br	80312c <__alt_mem_onchip_mem+0xff78312c>
  8045fc:	d9002c17 	ldw	r4,176(sp)
  804600:	d9801e04 	addi	r6,sp,120
  804604:	b80b883a 	mov	r5,r23
  804608:	080960c0 	call	80960c <__sprint_r>
  80460c:	103a3b1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804610:	dc402617 	ldw	r17,152(sp)
  804614:	d8c02017 	ldw	r3,128(sp)
  804618:	da000404 	addi	r8,sp,16
  80461c:	003f9c06 	br	804490 <__alt_mem_onchip_mem+0xff784490>
  804620:	ac400043 	ldbu	r17,1(r21)
  804624:	94800814 	ori	r18,r18,32
  804628:	ad400044 	addi	r21,r21,1
  80462c:	8c403fcc 	andi	r17,r17,255
  804630:	8c40201c 	xori	r17,r17,128
  804634:	8c7fe004 	addi	r17,r17,-128
  804638:	00398f06 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  80463c:	d8c02d15 	stw	r3,180(sp)
  804640:	0039883a 	mov	fp,zero
  804644:	003e3506 	br	803f1c <__alt_mem_onchip_mem+0xff783f1c>
  804648:	d9002c17 	ldw	r4,176(sp)
  80464c:	d9801e04 	addi	r6,sp,120
  804650:	b80b883a 	mov	r5,r23
  804654:	080960c0 	call	80960c <__sprint_r>
  804658:	103a281e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  80465c:	d8c02017 	ldw	r3,128(sp)
  804660:	da000404 	addi	r8,sp,16
  804664:	003cd006 	br	8039a8 <__alt_mem_onchip_mem+0xff7839a8>
  804668:	8009883a 	mov	r4,r16
  80466c:	da003d15 	stw	r8,244(sp)
  804670:	08094780 	call	809478 <strlen>
  804674:	d8802e15 	stw	r2,184(sp)
  804678:	da003d17 	ldw	r8,244(sp)
  80467c:	103c340e 	bge	r2,zero,803750 <__alt_mem_onchip_mem+0xff783750>
  804680:	0005883a 	mov	r2,zero
  804684:	003c3206 	br	803750 <__alt_mem_onchip_mem+0xff783750>
  804688:	d9002c17 	ldw	r4,176(sp)
  80468c:	d9801e04 	addi	r6,sp,120
  804690:	b80b883a 	mov	r5,r23
  804694:	080960c0 	call	80960c <__sprint_r>
  804698:	103a181e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  80469c:	d8c02017 	ldw	r3,128(sp)
  8046a0:	d8801f17 	ldw	r2,124(sp)
  8046a4:	da000404 	addi	r8,sp,16
  8046a8:	d9403317 	ldw	r5,204(sp)
  8046ac:	10800044 	addi	r2,r2,1
  8046b0:	44000015 	stw	r16,0(r8)
  8046b4:	28c7883a 	add	r3,r5,r3
  8046b8:	003b7d06 	br	8034b0 <__alt_mem_onchip_mem+0xff7834b0>
  8046bc:	01002074 	movhi	r4,129
  8046c0:	210d2a84 	addi	r4,r4,13482
  8046c4:	d9003515 	stw	r4,212(sp)
  8046c8:	003b1406 	br	80331c <__alt_mem_onchip_mem+0xff78331c>
  8046cc:	013fffc4 	movi	r4,-1
  8046d0:	003a3506 	br	802fa8 <__alt_mem_onchip_mem+0xff782fa8>
  8046d4:	0023883a 	mov	r17,zero
  8046d8:	003d9d06 	br	803d50 <__alt_mem_onchip_mem+0xff783d50>
  8046dc:	d9002c17 	ldw	r4,176(sp)
  8046e0:	d9801e04 	addi	r6,sp,120
  8046e4:	b80b883a 	mov	r5,r23
  8046e8:	080960c0 	call	80960c <__sprint_r>
  8046ec:	103a031e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  8046f0:	d8c02017 	ldw	r3,128(sp)
  8046f4:	da000404 	addi	r8,sp,16
  8046f8:	003d9406 	br	803d4c <__alt_mem_onchip_mem+0xff783d4c>
  8046fc:	01002074 	movhi	r4,129
  804700:	210d2684 	addi	r4,r4,13466
  804704:	d9002b15 	stw	r4,172(sp)
  804708:	d9002b17 	ldw	r4,172(sp)
  80470c:	1c47883a 	add	r3,r3,r17
  804710:	10800044 	addi	r2,r2,1
  804714:	41000015 	stw	r4,0(r8)
  804718:	44400115 	stw	r17,4(r8)
  80471c:	d8c02015 	stw	r3,128(sp)
  804720:	d8801f15 	stw	r2,124(sp)
  804724:	010001c4 	movi	r4,7
  804728:	20bfd716 	blt	r4,r2,804688 <__alt_mem_onchip_mem+0xff784688>
  80472c:	42000204 	addi	r8,r8,8
  804730:	003fdd06 	br	8046a8 <__alt_mem_onchip_mem+0xff7846a8>
  804734:	d9002c17 	ldw	r4,176(sp)
  804738:	d9801e04 	addi	r6,sp,120
  80473c:	b80b883a 	mov	r5,r23
  804740:	080960c0 	call	80960c <__sprint_r>
  804744:	1039ed1e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804748:	d8802617 	ldw	r2,152(sp)
  80474c:	d8c02017 	ldw	r3,128(sp)
  804750:	da000404 	addi	r8,sp,16
  804754:	003e1006 	br	803f98 <__alt_mem_onchip_mem+0xff783f98>
  804758:	00800044 	movi	r2,1
  80475c:	10803fcc 	andi	r2,r2,255
  804760:	00c00044 	movi	r3,1
  804764:	10fa3526 	beq	r2,r3,80303c <__alt_mem_onchip_mem+0xff78303c>
  804768:	00c00084 	movi	r3,2
  80476c:	10fbcb26 	beq	r2,r3,80369c <__alt_mem_onchip_mem+0xff78369c>
  804770:	003a8f06 	br	8031b0 <__alt_mem_onchip_mem+0xff7831b0>
  804774:	01002074 	movhi	r4,129
  804778:	210d2a84 	addi	r4,r4,13482
  80477c:	d9003515 	stw	r4,212(sp)
  804780:	003b7606 	br	80355c <__alt_mem_onchip_mem+0xff78355c>
  804784:	d8802917 	ldw	r2,164(sp)
  804788:	00c00184 	movi	r3,6
  80478c:	1880012e 	bgeu	r3,r2,804794 <___vfprintf_internal_r+0x1ca0>
  804790:	1805883a 	mov	r2,r3
  804794:	d8802e15 	stw	r2,184(sp)
  804798:	1000ef16 	blt	r2,zero,804b58 <___vfprintf_internal_r+0x2064>
  80479c:	04002074 	movhi	r16,129
  8047a0:	d8802a15 	stw	r2,168(sp)
  8047a4:	dcc02d15 	stw	r19,180(sp)
  8047a8:	d8002915 	stw	zero,164(sp)
  8047ac:	d8003215 	stw	zero,200(sp)
  8047b0:	840d2404 	addi	r16,r16,13456
  8047b4:	0039883a 	mov	fp,zero
  8047b8:	003aa206 	br	803244 <__alt_mem_onchip_mem+0xff783244>
  8047bc:	0021883a 	mov	r16,zero
  8047c0:	003e0706 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  8047c4:	d9002c17 	ldw	r4,176(sp)
  8047c8:	d9801e04 	addi	r6,sp,120
  8047cc:	b80b883a 	mov	r5,r23
  8047d0:	080960c0 	call	80960c <__sprint_r>
  8047d4:	1039c91e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  8047d8:	d8802617 	ldw	r2,152(sp)
  8047dc:	d9403317 	ldw	r5,204(sp)
  8047e0:	d8c02017 	ldw	r3,128(sp)
  8047e4:	da000404 	addi	r8,sp,16
  8047e8:	2885c83a 	sub	r2,r5,r2
  8047ec:	003dfb06 	br	803fdc <__alt_mem_onchip_mem+0xff783fdc>
  8047f0:	9080004c 	andi	r2,r18,1
  8047f4:	103e8f1e 	bne	r2,zero,804234 <__alt_mem_onchip_mem+0xff784234>
  8047f8:	d8802117 	ldw	r2,132(sp)
  8047fc:	003e9e06 	br	804278 <__alt_mem_onchip_mem+0xff784278>
  804800:	1025883a 	mov	r18,r2
  804804:	0039883a 	mov	fp,zero
  804808:	00800084 	movi	r2,2
  80480c:	003fd306 	br	80475c <__alt_mem_onchip_mem+0xff78475c>
  804810:	07000b44 	movi	fp,45
  804814:	df002785 	stb	fp,158(sp)
  804818:	003a4006 	br	80311c <__alt_mem_onchip_mem+0xff78311c>
  80481c:	00c00b44 	movi	r3,45
  804820:	d8c02785 	stb	r3,158(sp)
  804824:	d8802a15 	stw	r2,168(sp)
  804828:	dc802b17 	ldw	r18,172(sp)
  80482c:	d8002915 	stw	zero,164(sp)
  804830:	07000b44 	movi	fp,45
  804834:	003a8006 	br	803238 <__alt_mem_onchip_mem+0xff783238>
  804838:	04002074 	movhi	r16,129
  80483c:	840d1904 	addi	r16,r16,13412
  804840:	003f4706 	br	804560 <__alt_mem_onchip_mem+0xff784560>
  804844:	d8c02d17 	ldw	r3,180(sp)
  804848:	d9002f17 	ldw	r4,188(sp)
  80484c:	18800017 	ldw	r2,0(r3)
  804850:	18c00104 	addi	r3,r3,4
  804854:	d8c02d15 	stw	r3,180(sp)
  804858:	11000015 	stw	r4,0(r2)
  80485c:	0038dd06 	br	802bd4 <__alt_mem_onchip_mem+0xff782bd4>
  804860:	dd802617 	ldw	r22,152(sp)
  804864:	00bfff44 	movi	r2,-3
  804868:	b0801c16 	blt	r22,r2,8048dc <___vfprintf_internal_r+0x1de8>
  80486c:	d9402917 	ldw	r5,164(sp)
  804870:	2d801a16 	blt	r5,r22,8048dc <___vfprintf_internal_r+0x1de8>
  804874:	dd803215 	stw	r22,200(sp)
  804878:	003e8906 	br	8042a0 <__alt_mem_onchip_mem+0xff7842a0>
  80487c:	01002074 	movhi	r4,129
  804880:	210d2684 	addi	r4,r4,13466
  804884:	d9002b15 	stw	r4,172(sp)
  804888:	003c9106 	br	803ad0 <__alt_mem_onchip_mem+0xff783ad0>
  80488c:	e005883a 	mov	r2,fp
  804890:	003e7906 	br	804278 <__alt_mem_onchip_mem+0xff784278>
  804894:	d9402917 	ldw	r5,164(sp)
  804898:	df002783 	ldbu	fp,158(sp)
  80489c:	dcc02d15 	stw	r19,180(sp)
  8048a0:	d9402a15 	stw	r5,168(sp)
  8048a4:	d9402e15 	stw	r5,184(sp)
  8048a8:	d8002915 	stw	zero,164(sp)
  8048ac:	d8003215 	stw	zero,200(sp)
  8048b0:	003a5d06 	br	803228 <__alt_mem_onchip_mem+0xff783228>
  8048b4:	9080004c 	andi	r2,r18,1
  8048b8:	0039883a 	mov	fp,zero
  8048bc:	10000426 	beq	r2,zero,8048d0 <___vfprintf_internal_r+0x1ddc>
  8048c0:	00800c04 	movi	r2,48
  8048c4:	dc001dc4 	addi	r16,sp,119
  8048c8:	d8801dc5 	stb	r2,119(sp)
  8048cc:	003b8006 	br	8036d0 <__alt_mem_onchip_mem+0xff7836d0>
  8048d0:	d8002e15 	stw	zero,184(sp)
  8048d4:	dc001e04 	addi	r16,sp,120
  8048d8:	003a4d06 	br	803210 <__alt_mem_onchip_mem+0xff783210>
  8048dc:	8c7fff84 	addi	r17,r17,-2
  8048e0:	b5bfffc4 	addi	r22,r22,-1
  8048e4:	dd802615 	stw	r22,152(sp)
  8048e8:	dc4022c5 	stb	r17,139(sp)
  8048ec:	b000bf16 	blt	r22,zero,804bec <___vfprintf_internal_r+0x20f8>
  8048f0:	00800ac4 	movi	r2,43
  8048f4:	d8802305 	stb	r2,140(sp)
  8048f8:	00800244 	movi	r2,9
  8048fc:	15807016 	blt	r2,r22,804ac0 <___vfprintf_internal_r+0x1fcc>
  804900:	00800c04 	movi	r2,48
  804904:	b5800c04 	addi	r22,r22,48
  804908:	d8802345 	stb	r2,141(sp)
  80490c:	dd802385 	stb	r22,142(sp)
  804910:	d88023c4 	addi	r2,sp,143
  804914:	df0022c4 	addi	fp,sp,139
  804918:	d8c03317 	ldw	r3,204(sp)
  80491c:	1739c83a 	sub	fp,r2,fp
  804920:	d9003317 	ldw	r4,204(sp)
  804924:	e0c7883a 	add	r3,fp,r3
  804928:	df003a15 	stw	fp,232(sp)
  80492c:	d8c02e15 	stw	r3,184(sp)
  804930:	00800044 	movi	r2,1
  804934:	1100b30e 	bge	r2,r4,804c04 <___vfprintf_internal_r+0x2110>
  804938:	d8c02e17 	ldw	r3,184(sp)
  80493c:	18c00044 	addi	r3,r3,1
  804940:	d8c02e15 	stw	r3,184(sp)
  804944:	1805883a 	mov	r2,r3
  804948:	1800ac16 	blt	r3,zero,804bfc <___vfprintf_internal_r+0x2108>
  80494c:	d8003215 	stw	zero,200(sp)
  804950:	003e5d06 	br	8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804954:	d9002c17 	ldw	r4,176(sp)
  804958:	d9801e04 	addi	r6,sp,120
  80495c:	b80b883a 	mov	r5,r23
  804960:	080960c0 	call	80960c <__sprint_r>
  804964:	1039651e 	bne	r2,zero,802efc <__alt_mem_onchip_mem+0xff782efc>
  804968:	dc402617 	ldw	r17,152(sp)
  80496c:	d8c02017 	ldw	r3,128(sp)
  804970:	d8801f17 	ldw	r2,124(sp)
  804974:	da000404 	addi	r8,sp,16
  804978:	003ed606 	br	8044d4 <__alt_mem_onchip_mem+0xff7844d4>
  80497c:	582b883a 	mov	r21,r11
  804980:	d8002915 	stw	zero,164(sp)
  804984:	0038bd06 	br	802c7c <__alt_mem_onchip_mem+0xff782c7c>
  804988:	d8802917 	ldw	r2,164(sp)
  80498c:	103e071e 	bne	r2,zero,8041ac <__alt_mem_onchip_mem+0xff7841ac>
  804990:	dc002915 	stw	r16,164(sp)
  804994:	003e0506 	br	8041ac <__alt_mem_onchip_mem+0xff7841ac>
  804998:	d9002917 	ldw	r4,164(sp)
  80499c:	20c00044 	addi	r3,r4,1
  8049a0:	003e0f06 	br	8041e0 <__alt_mem_onchip_mem+0xff7841e0>
  8049a4:	01400184 	movi	r5,6
  8049a8:	d9402915 	stw	r5,164(sp)
  8049ac:	003dff06 	br	8041ac <__alt_mem_onchip_mem+0xff7841ac>
  8049b0:	d8802104 	addi	r2,sp,132
  8049b4:	d8800315 	stw	r2,12(sp)
  8049b8:	d8802504 	addi	r2,sp,148
  8049bc:	d8800215 	stw	r2,8(sp)
  8049c0:	d8802604 	addi	r2,sp,152
  8049c4:	d8800115 	stw	r2,4(sp)
  8049c8:	d8802917 	ldw	r2,164(sp)
  8049cc:	d9403617 	ldw	r5,216(sp)
  8049d0:	d9002c17 	ldw	r4,176(sp)
  8049d4:	d8800015 	stw	r2,0(sp)
  8049d8:	01c000c4 	movi	r7,3
  8049dc:	980d883a 	mov	r6,r19
  8049e0:	da003d15 	stw	r8,244(sp)
  8049e4:	08051180 	call	805118 <_dtoa_r>
  8049e8:	d8c02917 	ldw	r3,164(sp)
  8049ec:	da003d17 	ldw	r8,244(sp)
  8049f0:	1021883a 	mov	r16,r2
  8049f4:	10f9883a 	add	fp,r2,r3
  8049f8:	81000007 	ldb	r4,0(r16)
  8049fc:	00800c04 	movi	r2,48
  804a00:	20805e26 	beq	r4,r2,804b7c <___vfprintf_internal_r+0x2088>
  804a04:	d8c02617 	ldw	r3,152(sp)
  804a08:	e0f9883a 	add	fp,fp,r3
  804a0c:	003e0a06 	br	804238 <__alt_mem_onchip_mem+0xff784238>
  804a10:	00c00b44 	movi	r3,45
  804a14:	24e0003c 	xorhi	r19,r4,32768
  804a18:	d8c02a05 	stb	r3,168(sp)
  804a1c:	003de906 	br	8041c4 <__alt_mem_onchip_mem+0xff7841c4>
  804a20:	d8c03217 	ldw	r3,200(sp)
  804a24:	00c07a0e 	bge	zero,r3,804c10 <___vfprintf_internal_r+0x211c>
  804a28:	00800044 	movi	r2,1
  804a2c:	d9003317 	ldw	r4,204(sp)
  804a30:	1105883a 	add	r2,r2,r4
  804a34:	d8802e15 	stw	r2,184(sp)
  804a38:	10004e16 	blt	r2,zero,804b74 <___vfprintf_internal_r+0x2080>
  804a3c:	044019c4 	movi	r17,103
  804a40:	003e2106 	br	8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804a44:	d9002917 	ldw	r4,164(sp)
  804a48:	d8802104 	addi	r2,sp,132
  804a4c:	d8800315 	stw	r2,12(sp)
  804a50:	d9000015 	stw	r4,0(sp)
  804a54:	d8802504 	addi	r2,sp,148
  804a58:	d9403617 	ldw	r5,216(sp)
  804a5c:	d9002c17 	ldw	r4,176(sp)
  804a60:	d8800215 	stw	r2,8(sp)
  804a64:	d8802604 	addi	r2,sp,152
  804a68:	d8800115 	stw	r2,4(sp)
  804a6c:	01c000c4 	movi	r7,3
  804a70:	980d883a 	mov	r6,r19
  804a74:	da003d15 	stw	r8,244(sp)
  804a78:	08051180 	call	805118 <_dtoa_r>
  804a7c:	d8c02917 	ldw	r3,164(sp)
  804a80:	da003d17 	ldw	r8,244(sp)
  804a84:	1021883a 	mov	r16,r2
  804a88:	00801184 	movi	r2,70
  804a8c:	80f9883a 	add	fp,r16,r3
  804a90:	88bfd926 	beq	r17,r2,8049f8 <__alt_mem_onchip_mem+0xff7849f8>
  804a94:	003de806 	br	804238 <__alt_mem_onchip_mem+0xff784238>
  804a98:	d9002917 	ldw	r4,164(sp)
  804a9c:	00c04d0e 	bge	zero,r3,804bd4 <___vfprintf_internal_r+0x20e0>
  804aa0:	2000441e 	bne	r4,zero,804bb4 <___vfprintf_internal_r+0x20c0>
  804aa4:	9480004c 	andi	r18,r18,1
  804aa8:	9000421e 	bne	r18,zero,804bb4 <___vfprintf_internal_r+0x20c0>
  804aac:	1805883a 	mov	r2,r3
  804ab0:	18007016 	blt	r3,zero,804c74 <___vfprintf_internal_r+0x2180>
  804ab4:	d8c03217 	ldw	r3,200(sp)
  804ab8:	d8c02e15 	stw	r3,184(sp)
  804abc:	003e0206 	br	8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804ac0:	df0022c4 	addi	fp,sp,139
  804ac4:	dc002915 	stw	r16,164(sp)
  804ac8:	4027883a 	mov	r19,r8
  804acc:	e021883a 	mov	r16,fp
  804ad0:	b009883a 	mov	r4,r22
  804ad4:	01400284 	movi	r5,10
  804ad8:	080cb3c0 	call	80cb3c <__modsi3>
  804adc:	10800c04 	addi	r2,r2,48
  804ae0:	843fffc4 	addi	r16,r16,-1
  804ae4:	b009883a 	mov	r4,r22
  804ae8:	01400284 	movi	r5,10
  804aec:	80800005 	stb	r2,0(r16)
  804af0:	080cab80 	call	80cab8 <__divsi3>
  804af4:	102d883a 	mov	r22,r2
  804af8:	00800244 	movi	r2,9
  804afc:	15bff416 	blt	r2,r22,804ad0 <__alt_mem_onchip_mem+0xff784ad0>
  804b00:	9811883a 	mov	r8,r19
  804b04:	b0800c04 	addi	r2,r22,48
  804b08:	8027883a 	mov	r19,r16
  804b0c:	997fffc4 	addi	r5,r19,-1
  804b10:	98bfffc5 	stb	r2,-1(r19)
  804b14:	dc002917 	ldw	r16,164(sp)
  804b18:	2f006a2e 	bgeu	r5,fp,804cc4 <___vfprintf_internal_r+0x21d0>
  804b1c:	d9c02384 	addi	r7,sp,142
  804b20:	3ccfc83a 	sub	r7,r7,r19
  804b24:	d9002344 	addi	r4,sp,141
  804b28:	e1cf883a 	add	r7,fp,r7
  804b2c:	00000106 	br	804b34 <___vfprintf_internal_r+0x2040>
  804b30:	28800003 	ldbu	r2,0(r5)
  804b34:	20800005 	stb	r2,0(r4)
  804b38:	21000044 	addi	r4,r4,1
  804b3c:	29400044 	addi	r5,r5,1
  804b40:	393ffb1e 	bne	r7,r4,804b30 <__alt_mem_onchip_mem+0xff784b30>
  804b44:	d8802304 	addi	r2,sp,140
  804b48:	14c5c83a 	sub	r2,r2,r19
  804b4c:	d8c02344 	addi	r3,sp,141
  804b50:	1885883a 	add	r2,r3,r2
  804b54:	003f7006 	br	804918 <__alt_mem_onchip_mem+0xff784918>
  804b58:	0005883a 	mov	r2,zero
  804b5c:	003f0f06 	br	80479c <__alt_mem_onchip_mem+0xff78479c>
  804b60:	d8c03217 	ldw	r3,200(sp)
  804b64:	18c00044 	addi	r3,r3,1
  804b68:	d8c02e15 	stw	r3,184(sp)
  804b6c:	1805883a 	mov	r2,r3
  804b70:	183fb20e 	bge	r3,zero,804a3c <__alt_mem_onchip_mem+0xff784a3c>
  804b74:	0005883a 	mov	r2,zero
  804b78:	003fb006 	br	804a3c <__alt_mem_onchip_mem+0xff784a3c>
  804b7c:	d9003617 	ldw	r4,216(sp)
  804b80:	000d883a 	mov	r6,zero
  804b84:	000f883a 	mov	r7,zero
  804b88:	980b883a 	mov	r5,r19
  804b8c:	d8c03c15 	stw	r3,240(sp)
  804b90:	da003d15 	stw	r8,244(sp)
  804b94:	080de000 	call	80de00 <__eqdf2>
  804b98:	d8c03c17 	ldw	r3,240(sp)
  804b9c:	da003d17 	ldw	r8,244(sp)
  804ba0:	103f9826 	beq	r2,zero,804a04 <__alt_mem_onchip_mem+0xff784a04>
  804ba4:	00800044 	movi	r2,1
  804ba8:	10c7c83a 	sub	r3,r2,r3
  804bac:	d8c02615 	stw	r3,152(sp)
  804bb0:	003f9506 	br	804a08 <__alt_mem_onchip_mem+0xff784a08>
  804bb4:	d9002917 	ldw	r4,164(sp)
  804bb8:	d8c03217 	ldw	r3,200(sp)
  804bbc:	20800044 	addi	r2,r4,1
  804bc0:	1885883a 	add	r2,r3,r2
  804bc4:	d8802e15 	stw	r2,184(sp)
  804bc8:	103dbf0e 	bge	r2,zero,8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804bcc:	0005883a 	mov	r2,zero
  804bd0:	003dbd06 	br	8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804bd4:	2000211e 	bne	r4,zero,804c5c <___vfprintf_internal_r+0x2168>
  804bd8:	9480004c 	andi	r18,r18,1
  804bdc:	90001f1e 	bne	r18,zero,804c5c <___vfprintf_internal_r+0x2168>
  804be0:	00800044 	movi	r2,1
  804be4:	d8802e15 	stw	r2,184(sp)
  804be8:	003db706 	br	8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804bec:	00800b44 	movi	r2,45
  804bf0:	05adc83a 	sub	r22,zero,r22
  804bf4:	d8802305 	stb	r2,140(sp)
  804bf8:	003f3f06 	br	8048f8 <__alt_mem_onchip_mem+0xff7848f8>
  804bfc:	0005883a 	mov	r2,zero
  804c00:	003f5206 	br	80494c <__alt_mem_onchip_mem+0xff78494c>
  804c04:	90a4703a 	and	r18,r18,r2
  804c08:	903f4e26 	beq	r18,zero,804944 <__alt_mem_onchip_mem+0xff784944>
  804c0c:	003f4a06 	br	804938 <__alt_mem_onchip_mem+0xff784938>
  804c10:	00800084 	movi	r2,2
  804c14:	10c5c83a 	sub	r2,r2,r3
  804c18:	003f8406 	br	804a2c <__alt_mem_onchip_mem+0xff784a2c>
  804c1c:	d8802d17 	ldw	r2,180(sp)
  804c20:	d9002d17 	ldw	r4,180(sp)
  804c24:	ac400043 	ldbu	r17,1(r21)
  804c28:	10800017 	ldw	r2,0(r2)
  804c2c:	582b883a 	mov	r21,r11
  804c30:	d8802915 	stw	r2,164(sp)
  804c34:	20800104 	addi	r2,r4,4
  804c38:	d9002917 	ldw	r4,164(sp)
  804c3c:	d8802d15 	stw	r2,180(sp)
  804c40:	203e7a0e 	bge	r4,zero,80462c <__alt_mem_onchip_mem+0xff78462c>
  804c44:	8c403fcc 	andi	r17,r17,255
  804c48:	00bfffc4 	movi	r2,-1
  804c4c:	8c40201c 	xori	r17,r17,128
  804c50:	d8802915 	stw	r2,164(sp)
  804c54:	8c7fe004 	addi	r17,r17,-128
  804c58:	00380706 	br	802c78 <__alt_mem_onchip_mem+0xff782c78>
  804c5c:	d8c02917 	ldw	r3,164(sp)
  804c60:	18c00084 	addi	r3,r3,2
  804c64:	d8c02e15 	stw	r3,184(sp)
  804c68:	1805883a 	mov	r2,r3
  804c6c:	183d960e 	bge	r3,zero,8042c8 <__alt_mem_onchip_mem+0xff7842c8>
  804c70:	003fd606 	br	804bcc <__alt_mem_onchip_mem+0xff784bcc>
  804c74:	0005883a 	mov	r2,zero
  804c78:	003f8e06 	br	804ab4 <__alt_mem_onchip_mem+0xff784ab4>
  804c7c:	9080004c 	andi	r2,r18,1
  804c80:	103f811e 	bne	r2,zero,804a88 <__alt_mem_onchip_mem+0xff784a88>
  804c84:	d8802117 	ldw	r2,132(sp)
  804c88:	1405c83a 	sub	r2,r2,r16
  804c8c:	d8803315 	stw	r2,204(sp)
  804c90:	b47ef326 	beq	r22,r17,804860 <__alt_mem_onchip_mem+0xff784860>
  804c94:	dd802617 	ldw	r22,152(sp)
  804c98:	003f1106 	br	8048e0 <__alt_mem_onchip_mem+0xff7848e0>
  804c9c:	d9c02785 	stb	r7,158(sp)
  804ca0:	00390406 	br	8030b4 <__alt_mem_onchip_mem+0xff7830b4>
  804ca4:	d9c02785 	stb	r7,158(sp)
  804ca8:	0038d306 	br	802ff8 <__alt_mem_onchip_mem+0xff782ff8>
  804cac:	d9c02785 	stb	r7,158(sp)
  804cb0:	003a6106 	br	803638 <__alt_mem_onchip_mem+0xff783638>
  804cb4:	d9c02785 	stb	r7,158(sp)
  804cb8:	003af806 	br	80389c <__alt_mem_onchip_mem+0xff78389c>
  804cbc:	0005883a 	mov	r2,zero
  804cc0:	003d7e06 	br	8042bc <__alt_mem_onchip_mem+0xff7842bc>
  804cc4:	d8802344 	addi	r2,sp,141
  804cc8:	003f1306 	br	804918 <__alt_mem_onchip_mem+0xff784918>
  804ccc:	d9c02785 	stb	r7,158(sp)
  804cd0:	00392306 	br	803160 <__alt_mem_onchip_mem+0xff783160>
  804cd4:	d9c02785 	stb	r7,158(sp)
  804cd8:	003aa906 	br	803780 <__alt_mem_onchip_mem+0xff783780>
  804cdc:	d9c02785 	stb	r7,158(sp)
  804ce0:	003a3d06 	br	8035d8 <__alt_mem_onchip_mem+0xff7835d8>
  804ce4:	d9c02785 	stb	r7,158(sp)
  804ce8:	003aca06 	br	803814 <__alt_mem_onchip_mem+0xff783814>

00804cec <__vfprintf_internal>:
  804cec:	00802074 	movhi	r2,129
  804cf0:	10959e04 	addi	r2,r2,22136
  804cf4:	300f883a 	mov	r7,r6
  804cf8:	280d883a 	mov	r6,r5
  804cfc:	200b883a 	mov	r5,r4
  804d00:	11000017 	ldw	r4,0(r2)
  804d04:	0802af41 	jmpi	802af4 <___vfprintf_internal_r>

00804d08 <__sbprintf>:
  804d08:	2880030b 	ldhu	r2,12(r5)
  804d0c:	2ac01917 	ldw	r11,100(r5)
  804d10:	2a80038b 	ldhu	r10,14(r5)
  804d14:	2a400717 	ldw	r9,28(r5)
  804d18:	2a000917 	ldw	r8,36(r5)
  804d1c:	defee204 	addi	sp,sp,-1144
  804d20:	00c10004 	movi	r3,1024
  804d24:	dc011a15 	stw	r16,1128(sp)
  804d28:	10bfff4c 	andi	r2,r2,65533
  804d2c:	2821883a 	mov	r16,r5
  804d30:	d8cb883a 	add	r5,sp,r3
  804d34:	dc811c15 	stw	r18,1136(sp)
  804d38:	dc411b15 	stw	r17,1132(sp)
  804d3c:	dfc11d15 	stw	ra,1140(sp)
  804d40:	2025883a 	mov	r18,r4
  804d44:	d881030d 	sth	r2,1036(sp)
  804d48:	dac11915 	stw	r11,1124(sp)
  804d4c:	da81038d 	sth	r10,1038(sp)
  804d50:	da410715 	stw	r9,1052(sp)
  804d54:	da010915 	stw	r8,1060(sp)
  804d58:	dec10015 	stw	sp,1024(sp)
  804d5c:	dec10415 	stw	sp,1040(sp)
  804d60:	d8c10215 	stw	r3,1032(sp)
  804d64:	d8c10515 	stw	r3,1044(sp)
  804d68:	d8010615 	stw	zero,1048(sp)
  804d6c:	0802af40 	call	802af4 <___vfprintf_internal_r>
  804d70:	1023883a 	mov	r17,r2
  804d74:	10000416 	blt	r2,zero,804d88 <__sbprintf+0x80>
  804d78:	d9410004 	addi	r5,sp,1024
  804d7c:	9009883a 	mov	r4,r18
  804d80:	08069bc0 	call	8069bc <_fflush_r>
  804d84:	10000d1e 	bne	r2,zero,804dbc <__sbprintf+0xb4>
  804d88:	d881030b 	ldhu	r2,1036(sp)
  804d8c:	1080100c 	andi	r2,r2,64
  804d90:	10000326 	beq	r2,zero,804da0 <__sbprintf+0x98>
  804d94:	8080030b 	ldhu	r2,12(r16)
  804d98:	10801014 	ori	r2,r2,64
  804d9c:	8080030d 	sth	r2,12(r16)
  804da0:	8805883a 	mov	r2,r17
  804da4:	dfc11d17 	ldw	ra,1140(sp)
  804da8:	dc811c17 	ldw	r18,1136(sp)
  804dac:	dc411b17 	ldw	r17,1132(sp)
  804db0:	dc011a17 	ldw	r16,1128(sp)
  804db4:	dec11e04 	addi	sp,sp,1144
  804db8:	f800283a 	ret
  804dbc:	047fffc4 	movi	r17,-1
  804dc0:	003ff106 	br	804d88 <__alt_mem_onchip_mem+0xff784d88>

00804dc4 <__swsetup_r>:
  804dc4:	00802074 	movhi	r2,129
  804dc8:	defffd04 	addi	sp,sp,-12
  804dcc:	10959e04 	addi	r2,r2,22136
  804dd0:	dc400115 	stw	r17,4(sp)
  804dd4:	2023883a 	mov	r17,r4
  804dd8:	11000017 	ldw	r4,0(r2)
  804ddc:	dc000015 	stw	r16,0(sp)
  804de0:	dfc00215 	stw	ra,8(sp)
  804de4:	2821883a 	mov	r16,r5
  804de8:	20000226 	beq	r4,zero,804df4 <__swsetup_r+0x30>
  804dec:	20800e17 	ldw	r2,56(r4)
  804df0:	10003126 	beq	r2,zero,804eb8 <__swsetup_r+0xf4>
  804df4:	8080030b 	ldhu	r2,12(r16)
  804df8:	10c0020c 	andi	r3,r2,8
  804dfc:	1009883a 	mov	r4,r2
  804e00:	18000f26 	beq	r3,zero,804e40 <__swsetup_r+0x7c>
  804e04:	80c00417 	ldw	r3,16(r16)
  804e08:	18001526 	beq	r3,zero,804e60 <__swsetup_r+0x9c>
  804e0c:	1100004c 	andi	r4,r2,1
  804e10:	20001c1e 	bne	r4,zero,804e84 <__swsetup_r+0xc0>
  804e14:	1080008c 	andi	r2,r2,2
  804e18:	1000291e 	bne	r2,zero,804ec0 <__swsetup_r+0xfc>
  804e1c:	80800517 	ldw	r2,20(r16)
  804e20:	80800215 	stw	r2,8(r16)
  804e24:	18001c26 	beq	r3,zero,804e98 <__swsetup_r+0xd4>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	dfc00217 	ldw	ra,8(sp)
  804e30:	dc400117 	ldw	r17,4(sp)
  804e34:	dc000017 	ldw	r16,0(sp)
  804e38:	dec00304 	addi	sp,sp,12
  804e3c:	f800283a 	ret
  804e40:	2080040c 	andi	r2,r4,16
  804e44:	10002e26 	beq	r2,zero,804f00 <__swsetup_r+0x13c>
  804e48:	2080010c 	andi	r2,r4,4
  804e4c:	10001e1e 	bne	r2,zero,804ec8 <__swsetup_r+0x104>
  804e50:	80c00417 	ldw	r3,16(r16)
  804e54:	20800214 	ori	r2,r4,8
  804e58:	8080030d 	sth	r2,12(r16)
  804e5c:	183feb1e 	bne	r3,zero,804e0c <__alt_mem_onchip_mem+0xff784e0c>
  804e60:	1100a00c 	andi	r4,r2,640
  804e64:	01408004 	movi	r5,512
  804e68:	217fe826 	beq	r4,r5,804e0c <__alt_mem_onchip_mem+0xff784e0c>
  804e6c:	800b883a 	mov	r5,r16
  804e70:	8809883a 	mov	r4,r17
  804e74:	08074800 	call	807480 <__smakebuf_r>
  804e78:	8080030b 	ldhu	r2,12(r16)
  804e7c:	80c00417 	ldw	r3,16(r16)
  804e80:	003fe206 	br	804e0c <__alt_mem_onchip_mem+0xff784e0c>
  804e84:	80800517 	ldw	r2,20(r16)
  804e88:	80000215 	stw	zero,8(r16)
  804e8c:	0085c83a 	sub	r2,zero,r2
  804e90:	80800615 	stw	r2,24(r16)
  804e94:	183fe41e 	bne	r3,zero,804e28 <__alt_mem_onchip_mem+0xff784e28>
  804e98:	80c0030b 	ldhu	r3,12(r16)
  804e9c:	0005883a 	mov	r2,zero
  804ea0:	1900200c 	andi	r4,r3,128
  804ea4:	203fe126 	beq	r4,zero,804e2c <__alt_mem_onchip_mem+0xff784e2c>
  804ea8:	18c01014 	ori	r3,r3,64
  804eac:	80c0030d 	sth	r3,12(r16)
  804eb0:	00bfffc4 	movi	r2,-1
  804eb4:	003fdd06 	br	804e2c <__alt_mem_onchip_mem+0xff784e2c>
  804eb8:	0806d980 	call	806d98 <__sinit>
  804ebc:	003fcd06 	br	804df4 <__alt_mem_onchip_mem+0xff784df4>
  804ec0:	0005883a 	mov	r2,zero
  804ec4:	003fd606 	br	804e20 <__alt_mem_onchip_mem+0xff784e20>
  804ec8:	81400c17 	ldw	r5,48(r16)
  804ecc:	28000626 	beq	r5,zero,804ee8 <__swsetup_r+0x124>
  804ed0:	80801004 	addi	r2,r16,64
  804ed4:	28800326 	beq	r5,r2,804ee4 <__swsetup_r+0x120>
  804ed8:	8809883a 	mov	r4,r17
  804edc:	0806f0c0 	call	806f0c <_free_r>
  804ee0:	8100030b 	ldhu	r4,12(r16)
  804ee4:	80000c15 	stw	zero,48(r16)
  804ee8:	80c00417 	ldw	r3,16(r16)
  804eec:	00bff6c4 	movi	r2,-37
  804ef0:	1108703a 	and	r4,r2,r4
  804ef4:	80000115 	stw	zero,4(r16)
  804ef8:	80c00015 	stw	r3,0(r16)
  804efc:	003fd506 	br	804e54 <__alt_mem_onchip_mem+0xff784e54>
  804f00:	00800244 	movi	r2,9
  804f04:	88800015 	stw	r2,0(r17)
  804f08:	20801014 	ori	r2,r4,64
  804f0c:	8080030d 	sth	r2,12(r16)
  804f10:	00bfffc4 	movi	r2,-1
  804f14:	003fc506 	br	804e2c <__alt_mem_onchip_mem+0xff784e2c>

00804f18 <quorem>:
  804f18:	defff704 	addi	sp,sp,-36
  804f1c:	dc800215 	stw	r18,8(sp)
  804f20:	20800417 	ldw	r2,16(r4)
  804f24:	2c800417 	ldw	r18,16(r5)
  804f28:	dfc00815 	stw	ra,32(sp)
  804f2c:	ddc00715 	stw	r23,28(sp)
  804f30:	dd800615 	stw	r22,24(sp)
  804f34:	dd400515 	stw	r21,20(sp)
  804f38:	dd000415 	stw	r20,16(sp)
  804f3c:	dcc00315 	stw	r19,12(sp)
  804f40:	dc400115 	stw	r17,4(sp)
  804f44:	dc000015 	stw	r16,0(sp)
  804f48:	14807116 	blt	r2,r18,805110 <quorem+0x1f8>
  804f4c:	94bfffc4 	addi	r18,r18,-1
  804f50:	94ad883a 	add	r22,r18,r18
  804f54:	b5ad883a 	add	r22,r22,r22
  804f58:	2c400504 	addi	r17,r5,20
  804f5c:	8da9883a 	add	r20,r17,r22
  804f60:	25400504 	addi	r21,r4,20
  804f64:	282f883a 	mov	r23,r5
  804f68:	adad883a 	add	r22,r21,r22
  804f6c:	a1400017 	ldw	r5,0(r20)
  804f70:	2021883a 	mov	r16,r4
  804f74:	b1000017 	ldw	r4,0(r22)
  804f78:	29400044 	addi	r5,r5,1
  804f7c:	080cbb00 	call	80cbb0 <__udivsi3>
  804f80:	1027883a 	mov	r19,r2
  804f84:	10002c26 	beq	r2,zero,805038 <quorem+0x120>
  804f88:	a813883a 	mov	r9,r21
  804f8c:	880b883a 	mov	r5,r17
  804f90:	0009883a 	mov	r4,zero
  804f94:	000d883a 	mov	r6,zero
  804f98:	2a000017 	ldw	r8,0(r5)
  804f9c:	49c00017 	ldw	r7,0(r9)
  804fa0:	29400104 	addi	r5,r5,4
  804fa4:	40bfffcc 	andi	r2,r8,65535
  804fa8:	14c5383a 	mul	r2,r2,r19
  804fac:	4010d43a 	srli	r8,r8,16
  804fb0:	38ffffcc 	andi	r3,r7,65535
  804fb4:	1105883a 	add	r2,r2,r4
  804fb8:	1008d43a 	srli	r4,r2,16
  804fbc:	44d1383a 	mul	r8,r8,r19
  804fc0:	198d883a 	add	r6,r3,r6
  804fc4:	10ffffcc 	andi	r3,r2,65535
  804fc8:	30c7c83a 	sub	r3,r6,r3
  804fcc:	380ed43a 	srli	r7,r7,16
  804fd0:	4105883a 	add	r2,r8,r4
  804fd4:	180dd43a 	srai	r6,r3,16
  804fd8:	113fffcc 	andi	r4,r2,65535
  804fdc:	390fc83a 	sub	r7,r7,r4
  804fe0:	398d883a 	add	r6,r7,r6
  804fe4:	300e943a 	slli	r7,r6,16
  804fe8:	18ffffcc 	andi	r3,r3,65535
  804fec:	1008d43a 	srli	r4,r2,16
  804ff0:	38ceb03a 	or	r7,r7,r3
  804ff4:	49c00015 	stw	r7,0(r9)
  804ff8:	300dd43a 	srai	r6,r6,16
  804ffc:	4a400104 	addi	r9,r9,4
  805000:	a17fe52e 	bgeu	r20,r5,804f98 <__alt_mem_onchip_mem+0xff784f98>
  805004:	b0800017 	ldw	r2,0(r22)
  805008:	10000b1e 	bne	r2,zero,805038 <quorem+0x120>
  80500c:	b0bfff04 	addi	r2,r22,-4
  805010:	a880082e 	bgeu	r21,r2,805034 <quorem+0x11c>
  805014:	b0ffff17 	ldw	r3,-4(r22)
  805018:	18000326 	beq	r3,zero,805028 <quorem+0x110>
  80501c:	00000506 	br	805034 <quorem+0x11c>
  805020:	10c00017 	ldw	r3,0(r2)
  805024:	1800031e 	bne	r3,zero,805034 <quorem+0x11c>
  805028:	10bfff04 	addi	r2,r2,-4
  80502c:	94bfffc4 	addi	r18,r18,-1
  805030:	a8bffb36 	bltu	r21,r2,805020 <__alt_mem_onchip_mem+0xff785020>
  805034:	84800415 	stw	r18,16(r16)
  805038:	b80b883a 	mov	r5,r23
  80503c:	8009883a 	mov	r4,r16
  805040:	0808a640 	call	808a64 <__mcmp>
  805044:	10002616 	blt	r2,zero,8050e0 <quorem+0x1c8>
  805048:	9cc00044 	addi	r19,r19,1
  80504c:	a805883a 	mov	r2,r21
  805050:	000b883a 	mov	r5,zero
  805054:	11000017 	ldw	r4,0(r2)
  805058:	89800017 	ldw	r6,0(r17)
  80505c:	10800104 	addi	r2,r2,4
  805060:	20ffffcc 	andi	r3,r4,65535
  805064:	194b883a 	add	r5,r3,r5
  805068:	30ffffcc 	andi	r3,r6,65535
  80506c:	28c7c83a 	sub	r3,r5,r3
  805070:	300cd43a 	srli	r6,r6,16
  805074:	2008d43a 	srli	r4,r4,16
  805078:	180bd43a 	srai	r5,r3,16
  80507c:	18ffffcc 	andi	r3,r3,65535
  805080:	2189c83a 	sub	r4,r4,r6
  805084:	2149883a 	add	r4,r4,r5
  805088:	200c943a 	slli	r6,r4,16
  80508c:	8c400104 	addi	r17,r17,4
  805090:	200bd43a 	srai	r5,r4,16
  805094:	30c6b03a 	or	r3,r6,r3
  805098:	10ffff15 	stw	r3,-4(r2)
  80509c:	a47fed2e 	bgeu	r20,r17,805054 <__alt_mem_onchip_mem+0xff785054>
  8050a0:	9485883a 	add	r2,r18,r18
  8050a4:	1085883a 	add	r2,r2,r2
  8050a8:	a887883a 	add	r3,r21,r2
  8050ac:	18800017 	ldw	r2,0(r3)
  8050b0:	10000b1e 	bne	r2,zero,8050e0 <quorem+0x1c8>
  8050b4:	18bfff04 	addi	r2,r3,-4
  8050b8:	a880082e 	bgeu	r21,r2,8050dc <quorem+0x1c4>
  8050bc:	18ffff17 	ldw	r3,-4(r3)
  8050c0:	18000326 	beq	r3,zero,8050d0 <quorem+0x1b8>
  8050c4:	00000506 	br	8050dc <quorem+0x1c4>
  8050c8:	10c00017 	ldw	r3,0(r2)
  8050cc:	1800031e 	bne	r3,zero,8050dc <quorem+0x1c4>
  8050d0:	10bfff04 	addi	r2,r2,-4
  8050d4:	94bfffc4 	addi	r18,r18,-1
  8050d8:	a8bffb36 	bltu	r21,r2,8050c8 <__alt_mem_onchip_mem+0xff7850c8>
  8050dc:	84800415 	stw	r18,16(r16)
  8050e0:	9805883a 	mov	r2,r19
  8050e4:	dfc00817 	ldw	ra,32(sp)
  8050e8:	ddc00717 	ldw	r23,28(sp)
  8050ec:	dd800617 	ldw	r22,24(sp)
  8050f0:	dd400517 	ldw	r21,20(sp)
  8050f4:	dd000417 	ldw	r20,16(sp)
  8050f8:	dcc00317 	ldw	r19,12(sp)
  8050fc:	dc800217 	ldw	r18,8(sp)
  805100:	dc400117 	ldw	r17,4(sp)
  805104:	dc000017 	ldw	r16,0(sp)
  805108:	dec00904 	addi	sp,sp,36
  80510c:	f800283a 	ret
  805110:	0005883a 	mov	r2,zero
  805114:	003ff306 	br	8050e4 <__alt_mem_onchip_mem+0xff7850e4>

00805118 <_dtoa_r>:
  805118:	20801017 	ldw	r2,64(r4)
  80511c:	deffde04 	addi	sp,sp,-136
  805120:	df002015 	stw	fp,128(sp)
  805124:	dcc01b15 	stw	r19,108(sp)
  805128:	dc801a15 	stw	r18,104(sp)
  80512c:	dc401915 	stw	r17,100(sp)
  805130:	dc001815 	stw	r16,96(sp)
  805134:	dfc02115 	stw	ra,132(sp)
  805138:	ddc01f15 	stw	r23,124(sp)
  80513c:	dd801e15 	stw	r22,120(sp)
  805140:	dd401d15 	stw	r21,116(sp)
  805144:	dd001c15 	stw	r20,112(sp)
  805148:	d9c00315 	stw	r7,12(sp)
  80514c:	2039883a 	mov	fp,r4
  805150:	3023883a 	mov	r17,r6
  805154:	2825883a 	mov	r18,r5
  805158:	dc002417 	ldw	r16,144(sp)
  80515c:	3027883a 	mov	r19,r6
  805160:	10000826 	beq	r2,zero,805184 <_dtoa_r+0x6c>
  805164:	21801117 	ldw	r6,68(r4)
  805168:	00c00044 	movi	r3,1
  80516c:	100b883a 	mov	r5,r2
  805170:	1986983a 	sll	r3,r3,r6
  805174:	11800115 	stw	r6,4(r2)
  805178:	10c00215 	stw	r3,8(r2)
  80517c:	08082440 	call	808244 <_Bfree>
  805180:	e0001015 	stw	zero,64(fp)
  805184:	88002e16 	blt	r17,zero,805240 <_dtoa_r+0x128>
  805188:	80000015 	stw	zero,0(r16)
  80518c:	889ffc2c 	andhi	r2,r17,32752
  805190:	00dffc34 	movhi	r3,32752
  805194:	10c01c26 	beq	r2,r3,805208 <_dtoa_r+0xf0>
  805198:	000d883a 	mov	r6,zero
  80519c:	000f883a 	mov	r7,zero
  8051a0:	9009883a 	mov	r4,r18
  8051a4:	980b883a 	mov	r5,r19
  8051a8:	080de000 	call	80de00 <__eqdf2>
  8051ac:	10002b1e 	bne	r2,zero,80525c <_dtoa_r+0x144>
  8051b0:	d9c02317 	ldw	r7,140(sp)
  8051b4:	00800044 	movi	r2,1
  8051b8:	38800015 	stw	r2,0(r7)
  8051bc:	d8802517 	ldw	r2,148(sp)
  8051c0:	10019e26 	beq	r2,zero,80583c <_dtoa_r+0x724>
  8051c4:	d8c02517 	ldw	r3,148(sp)
  8051c8:	00802074 	movhi	r2,129
  8051cc:	108d2644 	addi	r2,r2,13465
  8051d0:	18800015 	stw	r2,0(r3)
  8051d4:	10bfffc4 	addi	r2,r2,-1
  8051d8:	dfc02117 	ldw	ra,132(sp)
  8051dc:	df002017 	ldw	fp,128(sp)
  8051e0:	ddc01f17 	ldw	r23,124(sp)
  8051e4:	dd801e17 	ldw	r22,120(sp)
  8051e8:	dd401d17 	ldw	r21,116(sp)
  8051ec:	dd001c17 	ldw	r20,112(sp)
  8051f0:	dcc01b17 	ldw	r19,108(sp)
  8051f4:	dc801a17 	ldw	r18,104(sp)
  8051f8:	dc401917 	ldw	r17,100(sp)
  8051fc:	dc001817 	ldw	r16,96(sp)
  805200:	dec02204 	addi	sp,sp,136
  805204:	f800283a 	ret
  805208:	d8c02317 	ldw	r3,140(sp)
  80520c:	0089c3c4 	movi	r2,9999
  805210:	18800015 	stw	r2,0(r3)
  805214:	90017726 	beq	r18,zero,8057f4 <_dtoa_r+0x6dc>
  805218:	00802074 	movhi	r2,129
  80521c:	108d3204 	addi	r2,r2,13512
  805220:	d9002517 	ldw	r4,148(sp)
  805224:	203fec26 	beq	r4,zero,8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  805228:	10c000c7 	ldb	r3,3(r2)
  80522c:	1801781e 	bne	r3,zero,805810 <_dtoa_r+0x6f8>
  805230:	10c000c4 	addi	r3,r2,3
  805234:	d9802517 	ldw	r6,148(sp)
  805238:	30c00015 	stw	r3,0(r6)
  80523c:	003fe606 	br	8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  805240:	04e00034 	movhi	r19,32768
  805244:	9cffffc4 	addi	r19,r19,-1
  805248:	00800044 	movi	r2,1
  80524c:	8ce6703a 	and	r19,r17,r19
  805250:	80800015 	stw	r2,0(r16)
  805254:	9823883a 	mov	r17,r19
  805258:	003fcc06 	br	80518c <__alt_mem_onchip_mem+0xff78518c>
  80525c:	d8800204 	addi	r2,sp,8
  805260:	d8800015 	stw	r2,0(sp)
  805264:	d9c00104 	addi	r7,sp,4
  805268:	900b883a 	mov	r5,r18
  80526c:	980d883a 	mov	r6,r19
  805270:	e009883a 	mov	r4,fp
  805274:	8820d53a 	srli	r16,r17,20
  805278:	0808e300 	call	808e30 <__d2b>
  80527c:	d8800915 	stw	r2,36(sp)
  805280:	8001651e 	bne	r16,zero,805818 <_dtoa_r+0x700>
  805284:	dd800217 	ldw	r22,8(sp)
  805288:	dc000117 	ldw	r16,4(sp)
  80528c:	00800804 	movi	r2,32
  805290:	b421883a 	add	r16,r22,r16
  805294:	80c10c84 	addi	r3,r16,1074
  805298:	10c2d10e 	bge	r2,r3,805de0 <_dtoa_r+0xcc8>
  80529c:	00801004 	movi	r2,64
  8052a0:	81010484 	addi	r4,r16,1042
  8052a4:	10c7c83a 	sub	r3,r2,r3
  8052a8:	9108d83a 	srl	r4,r18,r4
  8052ac:	88e2983a 	sll	r17,r17,r3
  8052b0:	2448b03a 	or	r4,r4,r17
  8052b4:	080f1c80 	call	80f1c8 <__floatunsidf>
  8052b8:	017f8434 	movhi	r5,65040
  8052bc:	01800044 	movi	r6,1
  8052c0:	1009883a 	mov	r4,r2
  8052c4:	194b883a 	add	r5,r3,r5
  8052c8:	843fffc4 	addi	r16,r16,-1
  8052cc:	d9801115 	stw	r6,68(sp)
  8052d0:	000d883a 	mov	r6,zero
  8052d4:	01cffe34 	movhi	r7,16376
  8052d8:	080e7700 	call	80e770 <__subdf3>
  8052dc:	0198dbf4 	movhi	r6,25455
  8052e0:	01cff4f4 	movhi	r7,16339
  8052e4:	3190d844 	addi	r6,r6,17249
  8052e8:	39e1e9c4 	addi	r7,r7,-30809
  8052ec:	1009883a 	mov	r4,r2
  8052f0:	180b883a 	mov	r5,r3
  8052f4:	080e0580 	call	80e058 <__muldf3>
  8052f8:	01a2d874 	movhi	r6,35681
  8052fc:	01cff1f4 	movhi	r7,16327
  805300:	31b22cc4 	addi	r6,r6,-14157
  805304:	39e28a04 	addi	r7,r7,-30168
  805308:	180b883a 	mov	r5,r3
  80530c:	1009883a 	mov	r4,r2
  805310:	080cc6c0 	call	80cc6c <__adddf3>
  805314:	8009883a 	mov	r4,r16
  805318:	1029883a 	mov	r20,r2
  80531c:	1823883a 	mov	r17,r3
  805320:	080f0ec0 	call	80f0ec <__floatsidf>
  805324:	019427f4 	movhi	r6,20639
  805328:	01cff4f4 	movhi	r7,16339
  80532c:	319e7ec4 	addi	r6,r6,31227
  805330:	39d104c4 	addi	r7,r7,17427
  805334:	1009883a 	mov	r4,r2
  805338:	180b883a 	mov	r5,r3
  80533c:	080e0580 	call	80e058 <__muldf3>
  805340:	100d883a 	mov	r6,r2
  805344:	180f883a 	mov	r7,r3
  805348:	a009883a 	mov	r4,r20
  80534c:	880b883a 	mov	r5,r17
  805350:	080cc6c0 	call	80cc6c <__adddf3>
  805354:	1009883a 	mov	r4,r2
  805358:	180b883a 	mov	r5,r3
  80535c:	1029883a 	mov	r20,r2
  805360:	1823883a 	mov	r17,r3
  805364:	080f06c0 	call	80f06c <__fixdfsi>
  805368:	000d883a 	mov	r6,zero
  80536c:	000f883a 	mov	r7,zero
  805370:	a009883a 	mov	r4,r20
  805374:	880b883a 	mov	r5,r17
  805378:	d8800515 	stw	r2,20(sp)
  80537c:	080df640 	call	80df64 <__ledf2>
  805380:	10028716 	blt	r2,zero,805da0 <_dtoa_r+0xc88>
  805384:	d8c00517 	ldw	r3,20(sp)
  805388:	00800584 	movi	r2,22
  80538c:	10c27536 	bltu	r2,r3,805d64 <_dtoa_r+0xc4c>
  805390:	180490fa 	slli	r2,r3,3
  805394:	00c02074 	movhi	r3,129
  805398:	18cd4e04 	addi	r3,r3,13624
  80539c:	1885883a 	add	r2,r3,r2
  8053a0:	11000017 	ldw	r4,0(r2)
  8053a4:	11400117 	ldw	r5,4(r2)
  8053a8:	900d883a 	mov	r6,r18
  8053ac:	980f883a 	mov	r7,r19
  8053b0:	080de880 	call	80de88 <__gedf2>
  8053b4:	00828d0e 	bge	zero,r2,805dec <_dtoa_r+0xcd4>
  8053b8:	d9000517 	ldw	r4,20(sp)
  8053bc:	d8000e15 	stw	zero,56(sp)
  8053c0:	213fffc4 	addi	r4,r4,-1
  8053c4:	d9000515 	stw	r4,20(sp)
  8053c8:	b42dc83a 	sub	r22,r22,r16
  8053cc:	b5bfffc4 	addi	r22,r22,-1
  8053d0:	b0026f16 	blt	r22,zero,805d90 <_dtoa_r+0xc78>
  8053d4:	d8000815 	stw	zero,32(sp)
  8053d8:	d9c00517 	ldw	r7,20(sp)
  8053dc:	38026416 	blt	r7,zero,805d70 <_dtoa_r+0xc58>
  8053e0:	b1ed883a 	add	r22,r22,r7
  8053e4:	d9c00d15 	stw	r7,52(sp)
  8053e8:	d8000a15 	stw	zero,40(sp)
  8053ec:	d9800317 	ldw	r6,12(sp)
  8053f0:	00800244 	movi	r2,9
  8053f4:	11811436 	bltu	r2,r6,805848 <_dtoa_r+0x730>
  8053f8:	00800144 	movi	r2,5
  8053fc:	1184e10e 	bge	r2,r6,806784 <_dtoa_r+0x166c>
  805400:	31bfff04 	addi	r6,r6,-4
  805404:	d9800315 	stw	r6,12(sp)
  805408:	0023883a 	mov	r17,zero
  80540c:	d9800317 	ldw	r6,12(sp)
  805410:	008000c4 	movi	r2,3
  805414:	30836726 	beq	r6,r2,8061b4 <_dtoa_r+0x109c>
  805418:	1183410e 	bge	r2,r6,806120 <_dtoa_r+0x1008>
  80541c:	d9c00317 	ldw	r7,12(sp)
  805420:	00800104 	movi	r2,4
  805424:	38827c26 	beq	r7,r2,805e18 <_dtoa_r+0xd00>
  805428:	00800144 	movi	r2,5
  80542c:	3884c41e 	bne	r7,r2,806740 <_dtoa_r+0x1628>
  805430:	00800044 	movi	r2,1
  805434:	d8800b15 	stw	r2,44(sp)
  805438:	d8c00517 	ldw	r3,20(sp)
  80543c:	d9002217 	ldw	r4,136(sp)
  805440:	1907883a 	add	r3,r3,r4
  805444:	19800044 	addi	r6,r3,1
  805448:	d8c00c15 	stw	r3,48(sp)
  80544c:	d9800615 	stw	r6,24(sp)
  805450:	0183a40e 	bge	zero,r6,8062e4 <_dtoa_r+0x11cc>
  805454:	d9800617 	ldw	r6,24(sp)
  805458:	3021883a 	mov	r16,r6
  80545c:	e0001115 	stw	zero,68(fp)
  805460:	008005c4 	movi	r2,23
  805464:	1184c92e 	bgeu	r2,r6,80678c <_dtoa_r+0x1674>
  805468:	00c00044 	movi	r3,1
  80546c:	00800104 	movi	r2,4
  805470:	1085883a 	add	r2,r2,r2
  805474:	11000504 	addi	r4,r2,20
  805478:	180b883a 	mov	r5,r3
  80547c:	18c00044 	addi	r3,r3,1
  805480:	313ffb2e 	bgeu	r6,r4,805470 <__alt_mem_onchip_mem+0xff785470>
  805484:	e1401115 	stw	r5,68(fp)
  805488:	e009883a 	mov	r4,fp
  80548c:	080819c0 	call	80819c <_Balloc>
  805490:	d8800715 	stw	r2,28(sp)
  805494:	e0801015 	stw	r2,64(fp)
  805498:	00800384 	movi	r2,14
  80549c:	1400f736 	bltu	r2,r16,80587c <_dtoa_r+0x764>
  8054a0:	8800f626 	beq	r17,zero,80587c <_dtoa_r+0x764>
  8054a4:	d9c00517 	ldw	r7,20(sp)
  8054a8:	01c39a0e 	bge	zero,r7,806314 <_dtoa_r+0x11fc>
  8054ac:	388003cc 	andi	r2,r7,15
  8054b0:	100490fa 	slli	r2,r2,3
  8054b4:	382bd13a 	srai	r21,r7,4
  8054b8:	00c02074 	movhi	r3,129
  8054bc:	18cd4e04 	addi	r3,r3,13624
  8054c0:	1885883a 	add	r2,r3,r2
  8054c4:	a8c0040c 	andi	r3,r21,16
  8054c8:	12400017 	ldw	r9,0(r2)
  8054cc:	12000117 	ldw	r8,4(r2)
  8054d0:	18037926 	beq	r3,zero,8062b8 <_dtoa_r+0x11a0>
  8054d4:	00802074 	movhi	r2,129
  8054d8:	108d4404 	addi	r2,r2,13584
  8054dc:	11800817 	ldw	r6,32(r2)
  8054e0:	11c00917 	ldw	r7,36(r2)
  8054e4:	9009883a 	mov	r4,r18
  8054e8:	980b883a 	mov	r5,r19
  8054ec:	da001715 	stw	r8,92(sp)
  8054f0:	da401615 	stw	r9,88(sp)
  8054f4:	080d5180 	call	80d518 <__divdf3>
  8054f8:	da001717 	ldw	r8,92(sp)
  8054fc:	da401617 	ldw	r9,88(sp)
  805500:	ad4003cc 	andi	r21,r21,15
  805504:	040000c4 	movi	r16,3
  805508:	1023883a 	mov	r17,r2
  80550c:	1829883a 	mov	r20,r3
  805510:	a8001126 	beq	r21,zero,805558 <_dtoa_r+0x440>
  805514:	05c02074 	movhi	r23,129
  805518:	bdcd4404 	addi	r23,r23,13584
  80551c:	4805883a 	mov	r2,r9
  805520:	4007883a 	mov	r3,r8
  805524:	a980004c 	andi	r6,r21,1
  805528:	1009883a 	mov	r4,r2
  80552c:	a82bd07a 	srai	r21,r21,1
  805530:	180b883a 	mov	r5,r3
  805534:	30000426 	beq	r6,zero,805548 <_dtoa_r+0x430>
  805538:	b9800017 	ldw	r6,0(r23)
  80553c:	b9c00117 	ldw	r7,4(r23)
  805540:	84000044 	addi	r16,r16,1
  805544:	080e0580 	call	80e058 <__muldf3>
  805548:	bdc00204 	addi	r23,r23,8
  80554c:	a83ff51e 	bne	r21,zero,805524 <__alt_mem_onchip_mem+0xff785524>
  805550:	1013883a 	mov	r9,r2
  805554:	1811883a 	mov	r8,r3
  805558:	480d883a 	mov	r6,r9
  80555c:	400f883a 	mov	r7,r8
  805560:	8809883a 	mov	r4,r17
  805564:	a00b883a 	mov	r5,r20
  805568:	080d5180 	call	80d518 <__divdf3>
  80556c:	d8800f15 	stw	r2,60(sp)
  805570:	d8c01015 	stw	r3,64(sp)
  805574:	d8c00e17 	ldw	r3,56(sp)
  805578:	18000626 	beq	r3,zero,805594 <_dtoa_r+0x47c>
  80557c:	d9000f17 	ldw	r4,60(sp)
  805580:	d9401017 	ldw	r5,64(sp)
  805584:	000d883a 	mov	r6,zero
  805588:	01cffc34 	movhi	r7,16368
  80558c:	080df640 	call	80df64 <__ledf2>
  805590:	10040b16 	blt	r2,zero,8065c0 <_dtoa_r+0x14a8>
  805594:	8009883a 	mov	r4,r16
  805598:	080f0ec0 	call	80f0ec <__floatsidf>
  80559c:	d9800f17 	ldw	r6,60(sp)
  8055a0:	d9c01017 	ldw	r7,64(sp)
  8055a4:	1009883a 	mov	r4,r2
  8055a8:	180b883a 	mov	r5,r3
  8055ac:	080e0580 	call	80e058 <__muldf3>
  8055b0:	000d883a 	mov	r6,zero
  8055b4:	01d00734 	movhi	r7,16412
  8055b8:	1009883a 	mov	r4,r2
  8055bc:	180b883a 	mov	r5,r3
  8055c0:	080cc6c0 	call	80cc6c <__adddf3>
  8055c4:	1021883a 	mov	r16,r2
  8055c8:	d8800617 	ldw	r2,24(sp)
  8055cc:	047f3034 	movhi	r17,64704
  8055d0:	1c63883a 	add	r17,r3,r17
  8055d4:	10031826 	beq	r2,zero,806238 <_dtoa_r+0x1120>
  8055d8:	d8c00517 	ldw	r3,20(sp)
  8055dc:	db000617 	ldw	r12,24(sp)
  8055e0:	d8c01315 	stw	r3,76(sp)
  8055e4:	d9000b17 	ldw	r4,44(sp)
  8055e8:	20038f26 	beq	r4,zero,806428 <_dtoa_r+0x1310>
  8055ec:	60bfffc4 	addi	r2,r12,-1
  8055f0:	100490fa 	slli	r2,r2,3
  8055f4:	00c02074 	movhi	r3,129
  8055f8:	18cd4e04 	addi	r3,r3,13624
  8055fc:	1885883a 	add	r2,r3,r2
  805600:	11800017 	ldw	r6,0(r2)
  805604:	11c00117 	ldw	r7,4(r2)
  805608:	d8800717 	ldw	r2,28(sp)
  80560c:	0009883a 	mov	r4,zero
  805610:	014ff834 	movhi	r5,16352
  805614:	db001615 	stw	r12,88(sp)
  805618:	15c00044 	addi	r23,r2,1
  80561c:	080d5180 	call	80d518 <__divdf3>
  805620:	800d883a 	mov	r6,r16
  805624:	880f883a 	mov	r7,r17
  805628:	1009883a 	mov	r4,r2
  80562c:	180b883a 	mov	r5,r3
  805630:	080e7700 	call	80e770 <__subdf3>
  805634:	d9401017 	ldw	r5,64(sp)
  805638:	d9000f17 	ldw	r4,60(sp)
  80563c:	102b883a 	mov	r21,r2
  805640:	d8c01215 	stw	r3,72(sp)
  805644:	080f06c0 	call	80f06c <__fixdfsi>
  805648:	1009883a 	mov	r4,r2
  80564c:	1029883a 	mov	r20,r2
  805650:	080f0ec0 	call	80f0ec <__floatsidf>
  805654:	d9000f17 	ldw	r4,60(sp)
  805658:	d9401017 	ldw	r5,64(sp)
  80565c:	100d883a 	mov	r6,r2
  805660:	180f883a 	mov	r7,r3
  805664:	080e7700 	call	80e770 <__subdf3>
  805668:	1823883a 	mov	r17,r3
  80566c:	d8c00717 	ldw	r3,28(sp)
  805670:	d9401217 	ldw	r5,72(sp)
  805674:	a2000c04 	addi	r8,r20,48
  805678:	1021883a 	mov	r16,r2
  80567c:	1a000005 	stb	r8,0(r3)
  805680:	800d883a 	mov	r6,r16
  805684:	880f883a 	mov	r7,r17
  805688:	a809883a 	mov	r4,r21
  80568c:	4029883a 	mov	r20,r8
  805690:	080de880 	call	80de88 <__gedf2>
  805694:	00841d16 	blt	zero,r2,80670c <_dtoa_r+0x15f4>
  805698:	800d883a 	mov	r6,r16
  80569c:	880f883a 	mov	r7,r17
  8056a0:	0009883a 	mov	r4,zero
  8056a4:	014ffc34 	movhi	r5,16368
  8056a8:	080e7700 	call	80e770 <__subdf3>
  8056ac:	d9401217 	ldw	r5,72(sp)
  8056b0:	100d883a 	mov	r6,r2
  8056b4:	180f883a 	mov	r7,r3
  8056b8:	a809883a 	mov	r4,r21
  8056bc:	080de880 	call	80de88 <__gedf2>
  8056c0:	db001617 	ldw	r12,88(sp)
  8056c4:	00840e16 	blt	zero,r2,806700 <_dtoa_r+0x15e8>
  8056c8:	00800044 	movi	r2,1
  8056cc:	13006b0e 	bge	r2,r12,80587c <_dtoa_r+0x764>
  8056d0:	d9000717 	ldw	r4,28(sp)
  8056d4:	dd800f15 	stw	r22,60(sp)
  8056d8:	dcc01015 	stw	r19,64(sp)
  8056dc:	2319883a 	add	r12,r4,r12
  8056e0:	dcc01217 	ldw	r19,72(sp)
  8056e4:	602d883a 	mov	r22,r12
  8056e8:	dc801215 	stw	r18,72(sp)
  8056ec:	b825883a 	mov	r18,r23
  8056f0:	00000906 	br	805718 <_dtoa_r+0x600>
  8056f4:	080e7700 	call	80e770 <__subdf3>
  8056f8:	a80d883a 	mov	r6,r21
  8056fc:	980f883a 	mov	r7,r19
  805700:	1009883a 	mov	r4,r2
  805704:	180b883a 	mov	r5,r3
  805708:	080df640 	call	80df64 <__ledf2>
  80570c:	1003e816 	blt	r2,zero,8066b0 <_dtoa_r+0x1598>
  805710:	b825883a 	mov	r18,r23
  805714:	bd83e926 	beq	r23,r22,8066bc <_dtoa_r+0x15a4>
  805718:	a809883a 	mov	r4,r21
  80571c:	980b883a 	mov	r5,r19
  805720:	000d883a 	mov	r6,zero
  805724:	01d00934 	movhi	r7,16420
  805728:	080e0580 	call	80e058 <__muldf3>
  80572c:	000d883a 	mov	r6,zero
  805730:	01d00934 	movhi	r7,16420
  805734:	8009883a 	mov	r4,r16
  805738:	880b883a 	mov	r5,r17
  80573c:	102b883a 	mov	r21,r2
  805740:	1827883a 	mov	r19,r3
  805744:	080e0580 	call	80e058 <__muldf3>
  805748:	180b883a 	mov	r5,r3
  80574c:	1009883a 	mov	r4,r2
  805750:	1821883a 	mov	r16,r3
  805754:	1023883a 	mov	r17,r2
  805758:	080f06c0 	call	80f06c <__fixdfsi>
  80575c:	1009883a 	mov	r4,r2
  805760:	1029883a 	mov	r20,r2
  805764:	080f0ec0 	call	80f0ec <__floatsidf>
  805768:	8809883a 	mov	r4,r17
  80576c:	800b883a 	mov	r5,r16
  805770:	100d883a 	mov	r6,r2
  805774:	180f883a 	mov	r7,r3
  805778:	080e7700 	call	80e770 <__subdf3>
  80577c:	a5000c04 	addi	r20,r20,48
  805780:	a80d883a 	mov	r6,r21
  805784:	980f883a 	mov	r7,r19
  805788:	1009883a 	mov	r4,r2
  80578c:	180b883a 	mov	r5,r3
  805790:	95000005 	stb	r20,0(r18)
  805794:	1021883a 	mov	r16,r2
  805798:	1823883a 	mov	r17,r3
  80579c:	080df640 	call	80df64 <__ledf2>
  8057a0:	bdc00044 	addi	r23,r23,1
  8057a4:	800d883a 	mov	r6,r16
  8057a8:	880f883a 	mov	r7,r17
  8057ac:	0009883a 	mov	r4,zero
  8057b0:	014ffc34 	movhi	r5,16368
  8057b4:	103fcf0e 	bge	r2,zero,8056f4 <__alt_mem_onchip_mem+0xff7856f4>
  8057b8:	d8c01317 	ldw	r3,76(sp)
  8057bc:	d8c00515 	stw	r3,20(sp)
  8057c0:	d9400917 	ldw	r5,36(sp)
  8057c4:	e009883a 	mov	r4,fp
  8057c8:	08082440 	call	808244 <_Bfree>
  8057cc:	d9000517 	ldw	r4,20(sp)
  8057d0:	d9802317 	ldw	r6,140(sp)
  8057d4:	d9c02517 	ldw	r7,148(sp)
  8057d8:	b8000005 	stb	zero,0(r23)
  8057dc:	20800044 	addi	r2,r4,1
  8057e0:	30800015 	stw	r2,0(r6)
  8057e4:	3802aa26 	beq	r7,zero,806290 <_dtoa_r+0x1178>
  8057e8:	3dc00015 	stw	r23,0(r7)
  8057ec:	d8800717 	ldw	r2,28(sp)
  8057f0:	003e7906 	br	8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  8057f4:	00800434 	movhi	r2,16
  8057f8:	10bfffc4 	addi	r2,r2,-1
  8057fc:	88a2703a 	and	r17,r17,r2
  805800:	883e851e 	bne	r17,zero,805218 <__alt_mem_onchip_mem+0xff785218>
  805804:	00802074 	movhi	r2,129
  805808:	108d2f04 	addi	r2,r2,13500
  80580c:	003e8406 	br	805220 <__alt_mem_onchip_mem+0xff785220>
  805810:	10c00204 	addi	r3,r2,8
  805814:	003e8706 	br	805234 <__alt_mem_onchip_mem+0xff785234>
  805818:	01400434 	movhi	r5,16
  80581c:	297fffc4 	addi	r5,r5,-1
  805820:	994a703a 	and	r5,r19,r5
  805824:	9009883a 	mov	r4,r18
  805828:	843f0044 	addi	r16,r16,-1023
  80582c:	294ffc34 	orhi	r5,r5,16368
  805830:	dd800217 	ldw	r22,8(sp)
  805834:	d8001115 	stw	zero,68(sp)
  805838:	003ea506 	br	8052d0 <__alt_mem_onchip_mem+0xff7852d0>
  80583c:	00802074 	movhi	r2,129
  805840:	108d2604 	addi	r2,r2,13464
  805844:	003e6406 	br	8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  805848:	e0001115 	stw	zero,68(fp)
  80584c:	000b883a 	mov	r5,zero
  805850:	e009883a 	mov	r4,fp
  805854:	080819c0 	call	80819c <_Balloc>
  805858:	01bfffc4 	movi	r6,-1
  80585c:	01c00044 	movi	r7,1
  805860:	d8800715 	stw	r2,28(sp)
  805864:	d9800c15 	stw	r6,48(sp)
  805868:	e0801015 	stw	r2,64(fp)
  80586c:	d8000315 	stw	zero,12(sp)
  805870:	d9c00b15 	stw	r7,44(sp)
  805874:	d9800615 	stw	r6,24(sp)
  805878:	d8002215 	stw	zero,136(sp)
  80587c:	d8800117 	ldw	r2,4(sp)
  805880:	10008916 	blt	r2,zero,805aa8 <_dtoa_r+0x990>
  805884:	d9000517 	ldw	r4,20(sp)
  805888:	00c00384 	movi	r3,14
  80588c:	19008616 	blt	r3,r4,805aa8 <_dtoa_r+0x990>
  805890:	200490fa 	slli	r2,r4,3
  805894:	00c02074 	movhi	r3,129
  805898:	d9802217 	ldw	r6,136(sp)
  80589c:	18cd4e04 	addi	r3,r3,13624
  8058a0:	1885883a 	add	r2,r3,r2
  8058a4:	14000017 	ldw	r16,0(r2)
  8058a8:	14400117 	ldw	r17,4(r2)
  8058ac:	30016316 	blt	r6,zero,805e3c <_dtoa_r+0xd24>
  8058b0:	800d883a 	mov	r6,r16
  8058b4:	880f883a 	mov	r7,r17
  8058b8:	9009883a 	mov	r4,r18
  8058bc:	980b883a 	mov	r5,r19
  8058c0:	080d5180 	call	80d518 <__divdf3>
  8058c4:	180b883a 	mov	r5,r3
  8058c8:	1009883a 	mov	r4,r2
  8058cc:	080f06c0 	call	80f06c <__fixdfsi>
  8058d0:	1009883a 	mov	r4,r2
  8058d4:	102b883a 	mov	r21,r2
  8058d8:	080f0ec0 	call	80f0ec <__floatsidf>
  8058dc:	800d883a 	mov	r6,r16
  8058e0:	880f883a 	mov	r7,r17
  8058e4:	1009883a 	mov	r4,r2
  8058e8:	180b883a 	mov	r5,r3
  8058ec:	080e0580 	call	80e058 <__muldf3>
  8058f0:	100d883a 	mov	r6,r2
  8058f4:	180f883a 	mov	r7,r3
  8058f8:	9009883a 	mov	r4,r18
  8058fc:	980b883a 	mov	r5,r19
  805900:	080e7700 	call	80e770 <__subdf3>
  805904:	d9c00717 	ldw	r7,28(sp)
  805908:	1009883a 	mov	r4,r2
  80590c:	a8800c04 	addi	r2,r21,48
  805910:	38800005 	stb	r2,0(r7)
  805914:	3dc00044 	addi	r23,r7,1
  805918:	d9c00617 	ldw	r7,24(sp)
  80591c:	01800044 	movi	r6,1
  805920:	180b883a 	mov	r5,r3
  805924:	2005883a 	mov	r2,r4
  805928:	39803826 	beq	r7,r6,805a0c <_dtoa_r+0x8f4>
  80592c:	000d883a 	mov	r6,zero
  805930:	01d00934 	movhi	r7,16420
  805934:	080e0580 	call	80e058 <__muldf3>
  805938:	000d883a 	mov	r6,zero
  80593c:	000f883a 	mov	r7,zero
  805940:	1009883a 	mov	r4,r2
  805944:	180b883a 	mov	r5,r3
  805948:	1025883a 	mov	r18,r2
  80594c:	1827883a 	mov	r19,r3
  805950:	080de000 	call	80de00 <__eqdf2>
  805954:	103f9a26 	beq	r2,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805958:	d9c00617 	ldw	r7,24(sp)
  80595c:	d8c00717 	ldw	r3,28(sp)
  805960:	b829883a 	mov	r20,r23
  805964:	38bfffc4 	addi	r2,r7,-1
  805968:	18ad883a 	add	r22,r3,r2
  80596c:	00000a06 	br	805998 <_dtoa_r+0x880>
  805970:	080e0580 	call	80e058 <__muldf3>
  805974:	000d883a 	mov	r6,zero
  805978:	000f883a 	mov	r7,zero
  80597c:	1009883a 	mov	r4,r2
  805980:	180b883a 	mov	r5,r3
  805984:	1025883a 	mov	r18,r2
  805988:	1827883a 	mov	r19,r3
  80598c:	b829883a 	mov	r20,r23
  805990:	080de000 	call	80de00 <__eqdf2>
  805994:	103f8a26 	beq	r2,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805998:	800d883a 	mov	r6,r16
  80599c:	880f883a 	mov	r7,r17
  8059a0:	9009883a 	mov	r4,r18
  8059a4:	980b883a 	mov	r5,r19
  8059a8:	080d5180 	call	80d518 <__divdf3>
  8059ac:	180b883a 	mov	r5,r3
  8059b0:	1009883a 	mov	r4,r2
  8059b4:	080f06c0 	call	80f06c <__fixdfsi>
  8059b8:	1009883a 	mov	r4,r2
  8059bc:	102b883a 	mov	r21,r2
  8059c0:	080f0ec0 	call	80f0ec <__floatsidf>
  8059c4:	800d883a 	mov	r6,r16
  8059c8:	880f883a 	mov	r7,r17
  8059cc:	1009883a 	mov	r4,r2
  8059d0:	180b883a 	mov	r5,r3
  8059d4:	080e0580 	call	80e058 <__muldf3>
  8059d8:	100d883a 	mov	r6,r2
  8059dc:	180f883a 	mov	r7,r3
  8059e0:	9009883a 	mov	r4,r18
  8059e4:	980b883a 	mov	r5,r19
  8059e8:	080e7700 	call	80e770 <__subdf3>
  8059ec:	aa000c04 	addi	r8,r21,48
  8059f0:	a2000005 	stb	r8,0(r20)
  8059f4:	000d883a 	mov	r6,zero
  8059f8:	01d00934 	movhi	r7,16420
  8059fc:	1009883a 	mov	r4,r2
  805a00:	180b883a 	mov	r5,r3
  805a04:	a5c00044 	addi	r23,r20,1
  805a08:	b53fd91e 	bne	r22,r20,805970 <__alt_mem_onchip_mem+0xff785970>
  805a0c:	100d883a 	mov	r6,r2
  805a10:	180f883a 	mov	r7,r3
  805a14:	1009883a 	mov	r4,r2
  805a18:	180b883a 	mov	r5,r3
  805a1c:	080cc6c0 	call	80cc6c <__adddf3>
  805a20:	100d883a 	mov	r6,r2
  805a24:	180f883a 	mov	r7,r3
  805a28:	8009883a 	mov	r4,r16
  805a2c:	880b883a 	mov	r5,r17
  805a30:	1027883a 	mov	r19,r2
  805a34:	1825883a 	mov	r18,r3
  805a38:	080df640 	call	80df64 <__ledf2>
  805a3c:	10000816 	blt	r2,zero,805a60 <_dtoa_r+0x948>
  805a40:	980d883a 	mov	r6,r19
  805a44:	900f883a 	mov	r7,r18
  805a48:	8009883a 	mov	r4,r16
  805a4c:	880b883a 	mov	r5,r17
  805a50:	080de000 	call	80de00 <__eqdf2>
  805a54:	103f5a1e 	bne	r2,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805a58:	ad40004c 	andi	r21,r21,1
  805a5c:	a83f5826 	beq	r21,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805a60:	bd3fffc3 	ldbu	r20,-1(r23)
  805a64:	b8bfffc4 	addi	r2,r23,-1
  805a68:	1007883a 	mov	r3,r2
  805a6c:	01400e44 	movi	r5,57
  805a70:	d9800717 	ldw	r6,28(sp)
  805a74:	00000506 	br	805a8c <_dtoa_r+0x974>
  805a78:	18ffffc4 	addi	r3,r3,-1
  805a7c:	11824726 	beq	r2,r6,80639c <_dtoa_r+0x1284>
  805a80:	1d000003 	ldbu	r20,0(r3)
  805a84:	102f883a 	mov	r23,r2
  805a88:	10bfffc4 	addi	r2,r2,-1
  805a8c:	a1003fcc 	andi	r4,r20,255
  805a90:	2100201c 	xori	r4,r4,128
  805a94:	213fe004 	addi	r4,r4,-128
  805a98:	217ff726 	beq	r4,r5,805a78 <__alt_mem_onchip_mem+0xff785a78>
  805a9c:	a2000044 	addi	r8,r20,1
  805aa0:	12000005 	stb	r8,0(r2)
  805aa4:	003f4606 	br	8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805aa8:	d9000b17 	ldw	r4,44(sp)
  805aac:	2000c826 	beq	r4,zero,805dd0 <_dtoa_r+0xcb8>
  805ab0:	d9800317 	ldw	r6,12(sp)
  805ab4:	00c00044 	movi	r3,1
  805ab8:	1980f90e 	bge	r3,r6,805ea0 <_dtoa_r+0xd88>
  805abc:	d8800617 	ldw	r2,24(sp)
  805ac0:	d8c00a17 	ldw	r3,40(sp)
  805ac4:	157fffc4 	addi	r21,r2,-1
  805ac8:	1d41f316 	blt	r3,r21,806298 <_dtoa_r+0x1180>
  805acc:	1d6bc83a 	sub	r21,r3,r21
  805ad0:	d9c00617 	ldw	r7,24(sp)
  805ad4:	3802aa16 	blt	r7,zero,806580 <_dtoa_r+0x1468>
  805ad8:	dd000817 	ldw	r20,32(sp)
  805adc:	d8800617 	ldw	r2,24(sp)
  805ae0:	d8c00817 	ldw	r3,32(sp)
  805ae4:	01400044 	movi	r5,1
  805ae8:	e009883a 	mov	r4,fp
  805aec:	1887883a 	add	r3,r3,r2
  805af0:	d8c00815 	stw	r3,32(sp)
  805af4:	b0ad883a 	add	r22,r22,r2
  805af8:	08085a80 	call	8085a8 <__i2b>
  805afc:	1023883a 	mov	r17,r2
  805b00:	a0000826 	beq	r20,zero,805b24 <_dtoa_r+0xa0c>
  805b04:	0580070e 	bge	zero,r22,805b24 <_dtoa_r+0xa0c>
  805b08:	a005883a 	mov	r2,r20
  805b0c:	b500b916 	blt	r22,r20,805df4 <_dtoa_r+0xcdc>
  805b10:	d9000817 	ldw	r4,32(sp)
  805b14:	a0a9c83a 	sub	r20,r20,r2
  805b18:	b0adc83a 	sub	r22,r22,r2
  805b1c:	2089c83a 	sub	r4,r4,r2
  805b20:	d9000815 	stw	r4,32(sp)
  805b24:	d9800a17 	ldw	r6,40(sp)
  805b28:	0181810e 	bge	zero,r6,806130 <_dtoa_r+0x1018>
  805b2c:	d9c00b17 	ldw	r7,44(sp)
  805b30:	3800b326 	beq	r7,zero,805e00 <_dtoa_r+0xce8>
  805b34:	a800b226 	beq	r21,zero,805e00 <_dtoa_r+0xce8>
  805b38:	880b883a 	mov	r5,r17
  805b3c:	a80d883a 	mov	r6,r21
  805b40:	e009883a 	mov	r4,fp
  805b44:	08087dc0 	call	8087dc <__pow5mult>
  805b48:	d9800917 	ldw	r6,36(sp)
  805b4c:	100b883a 	mov	r5,r2
  805b50:	e009883a 	mov	r4,fp
  805b54:	1023883a 	mov	r17,r2
  805b58:	08085e40 	call	8085e4 <__multiply>
  805b5c:	1021883a 	mov	r16,r2
  805b60:	d8800a17 	ldw	r2,40(sp)
  805b64:	d9400917 	ldw	r5,36(sp)
  805b68:	e009883a 	mov	r4,fp
  805b6c:	1545c83a 	sub	r2,r2,r21
  805b70:	d8800a15 	stw	r2,40(sp)
  805b74:	08082440 	call	808244 <_Bfree>
  805b78:	d8c00a17 	ldw	r3,40(sp)
  805b7c:	18009f1e 	bne	r3,zero,805dfc <_dtoa_r+0xce4>
  805b80:	05c00044 	movi	r23,1
  805b84:	e009883a 	mov	r4,fp
  805b88:	b80b883a 	mov	r5,r23
  805b8c:	08085a80 	call	8085a8 <__i2b>
  805b90:	d9000d17 	ldw	r4,52(sp)
  805b94:	102b883a 	mov	r21,r2
  805b98:	2000ce26 	beq	r4,zero,805ed4 <_dtoa_r+0xdbc>
  805b9c:	200d883a 	mov	r6,r4
  805ba0:	100b883a 	mov	r5,r2
  805ba4:	e009883a 	mov	r4,fp
  805ba8:	08087dc0 	call	8087dc <__pow5mult>
  805bac:	d9800317 	ldw	r6,12(sp)
  805bb0:	102b883a 	mov	r21,r2
  805bb4:	b981810e 	bge	r23,r6,8061bc <_dtoa_r+0x10a4>
  805bb8:	0027883a 	mov	r19,zero
  805bbc:	a8800417 	ldw	r2,16(r21)
  805bc0:	05c00804 	movi	r23,32
  805bc4:	10800104 	addi	r2,r2,4
  805bc8:	1085883a 	add	r2,r2,r2
  805bcc:	1085883a 	add	r2,r2,r2
  805bd0:	a885883a 	add	r2,r21,r2
  805bd4:	11000017 	ldw	r4,0(r2)
  805bd8:	08084900 	call	808490 <__hi0bits>
  805bdc:	b885c83a 	sub	r2,r23,r2
  805be0:	1585883a 	add	r2,r2,r22
  805be4:	108007cc 	andi	r2,r2,31
  805be8:	1000b326 	beq	r2,zero,805eb8 <_dtoa_r+0xda0>
  805bec:	00c00804 	movi	r3,32
  805bf0:	1887c83a 	sub	r3,r3,r2
  805bf4:	01000104 	movi	r4,4
  805bf8:	20c2cd0e 	bge	r4,r3,806730 <_dtoa_r+0x1618>
  805bfc:	00c00704 	movi	r3,28
  805c00:	1885c83a 	sub	r2,r3,r2
  805c04:	d8c00817 	ldw	r3,32(sp)
  805c08:	a0a9883a 	add	r20,r20,r2
  805c0c:	b0ad883a 	add	r22,r22,r2
  805c10:	1887883a 	add	r3,r3,r2
  805c14:	d8c00815 	stw	r3,32(sp)
  805c18:	d9800817 	ldw	r6,32(sp)
  805c1c:	0180040e 	bge	zero,r6,805c30 <_dtoa_r+0xb18>
  805c20:	800b883a 	mov	r5,r16
  805c24:	e009883a 	mov	r4,fp
  805c28:	080891c0 	call	80891c <__lshift>
  805c2c:	1021883a 	mov	r16,r2
  805c30:	0580050e 	bge	zero,r22,805c48 <_dtoa_r+0xb30>
  805c34:	a80b883a 	mov	r5,r21
  805c38:	b00d883a 	mov	r6,r22
  805c3c:	e009883a 	mov	r4,fp
  805c40:	080891c0 	call	80891c <__lshift>
  805c44:	102b883a 	mov	r21,r2
  805c48:	d9c00e17 	ldw	r7,56(sp)
  805c4c:	3801211e 	bne	r7,zero,8060d4 <_dtoa_r+0xfbc>
  805c50:	d9800617 	ldw	r6,24(sp)
  805c54:	0181380e 	bge	zero,r6,806138 <_dtoa_r+0x1020>
  805c58:	d8c00b17 	ldw	r3,44(sp)
  805c5c:	1800ab1e 	bne	r3,zero,805f0c <_dtoa_r+0xdf4>
  805c60:	dc800717 	ldw	r18,28(sp)
  805c64:	dcc00617 	ldw	r19,24(sp)
  805c68:	9029883a 	mov	r20,r18
  805c6c:	00000206 	br	805c78 <_dtoa_r+0xb60>
  805c70:	080826c0 	call	80826c <__multadd>
  805c74:	1021883a 	mov	r16,r2
  805c78:	a80b883a 	mov	r5,r21
  805c7c:	8009883a 	mov	r4,r16
  805c80:	0804f180 	call	804f18 <quorem>
  805c84:	10800c04 	addi	r2,r2,48
  805c88:	90800005 	stb	r2,0(r18)
  805c8c:	94800044 	addi	r18,r18,1
  805c90:	9507c83a 	sub	r3,r18,r20
  805c94:	000f883a 	mov	r7,zero
  805c98:	01800284 	movi	r6,10
  805c9c:	800b883a 	mov	r5,r16
  805ca0:	e009883a 	mov	r4,fp
  805ca4:	1cfff216 	blt	r3,r19,805c70 <__alt_mem_onchip_mem+0xff785c70>
  805ca8:	1011883a 	mov	r8,r2
  805cac:	d8800617 	ldw	r2,24(sp)
  805cb0:	0082370e 	bge	zero,r2,806590 <_dtoa_r+0x1478>
  805cb4:	d9000717 	ldw	r4,28(sp)
  805cb8:	0025883a 	mov	r18,zero
  805cbc:	20af883a 	add	r23,r4,r2
  805cc0:	01800044 	movi	r6,1
  805cc4:	800b883a 	mov	r5,r16
  805cc8:	e009883a 	mov	r4,fp
  805ccc:	da001715 	stw	r8,92(sp)
  805cd0:	080891c0 	call	80891c <__lshift>
  805cd4:	a80b883a 	mov	r5,r21
  805cd8:	1009883a 	mov	r4,r2
  805cdc:	d8800915 	stw	r2,36(sp)
  805ce0:	0808a640 	call	808a64 <__mcmp>
  805ce4:	da001717 	ldw	r8,92(sp)
  805ce8:	0081800e 	bge	zero,r2,8062ec <_dtoa_r+0x11d4>
  805cec:	b93fffc3 	ldbu	r4,-1(r23)
  805cf0:	b8bfffc4 	addi	r2,r23,-1
  805cf4:	1007883a 	mov	r3,r2
  805cf8:	01800e44 	movi	r6,57
  805cfc:	d9c00717 	ldw	r7,28(sp)
  805d00:	00000506 	br	805d18 <_dtoa_r+0xc00>
  805d04:	18ffffc4 	addi	r3,r3,-1
  805d08:	11c12326 	beq	r2,r7,806198 <_dtoa_r+0x1080>
  805d0c:	19000003 	ldbu	r4,0(r3)
  805d10:	102f883a 	mov	r23,r2
  805d14:	10bfffc4 	addi	r2,r2,-1
  805d18:	21403fcc 	andi	r5,r4,255
  805d1c:	2940201c 	xori	r5,r5,128
  805d20:	297fe004 	addi	r5,r5,-128
  805d24:	29bff726 	beq	r5,r6,805d04 <__alt_mem_onchip_mem+0xff785d04>
  805d28:	21000044 	addi	r4,r4,1
  805d2c:	11000005 	stb	r4,0(r2)
  805d30:	a80b883a 	mov	r5,r21
  805d34:	e009883a 	mov	r4,fp
  805d38:	08082440 	call	808244 <_Bfree>
  805d3c:	883ea026 	beq	r17,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805d40:	90000426 	beq	r18,zero,805d54 <_dtoa_r+0xc3c>
  805d44:	94400326 	beq	r18,r17,805d54 <_dtoa_r+0xc3c>
  805d48:	900b883a 	mov	r5,r18
  805d4c:	e009883a 	mov	r4,fp
  805d50:	08082440 	call	808244 <_Bfree>
  805d54:	880b883a 	mov	r5,r17
  805d58:	e009883a 	mov	r4,fp
  805d5c:	08082440 	call	808244 <_Bfree>
  805d60:	003e9706 	br	8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805d64:	01800044 	movi	r6,1
  805d68:	d9800e15 	stw	r6,56(sp)
  805d6c:	003d9606 	br	8053c8 <__alt_mem_onchip_mem+0xff7853c8>
  805d70:	d8800817 	ldw	r2,32(sp)
  805d74:	d8c00517 	ldw	r3,20(sp)
  805d78:	d8000d15 	stw	zero,52(sp)
  805d7c:	10c5c83a 	sub	r2,r2,r3
  805d80:	00c9c83a 	sub	r4,zero,r3
  805d84:	d8800815 	stw	r2,32(sp)
  805d88:	d9000a15 	stw	r4,40(sp)
  805d8c:	003d9706 	br	8053ec <__alt_mem_onchip_mem+0xff7853ec>
  805d90:	05adc83a 	sub	r22,zero,r22
  805d94:	dd800815 	stw	r22,32(sp)
  805d98:	002d883a 	mov	r22,zero
  805d9c:	003d8e06 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805da0:	d9000517 	ldw	r4,20(sp)
  805da4:	080f0ec0 	call	80f0ec <__floatsidf>
  805da8:	100d883a 	mov	r6,r2
  805dac:	180f883a 	mov	r7,r3
  805db0:	a009883a 	mov	r4,r20
  805db4:	880b883a 	mov	r5,r17
  805db8:	080de000 	call	80de00 <__eqdf2>
  805dbc:	103d7126 	beq	r2,zero,805384 <__alt_mem_onchip_mem+0xff785384>
  805dc0:	d9c00517 	ldw	r7,20(sp)
  805dc4:	39ffffc4 	addi	r7,r7,-1
  805dc8:	d9c00515 	stw	r7,20(sp)
  805dcc:	003d6d06 	br	805384 <__alt_mem_onchip_mem+0xff785384>
  805dd0:	dd400a17 	ldw	r21,40(sp)
  805dd4:	dd000817 	ldw	r20,32(sp)
  805dd8:	0023883a 	mov	r17,zero
  805ddc:	003f4806 	br	805b00 <__alt_mem_onchip_mem+0xff785b00>
  805de0:	10e3c83a 	sub	r17,r2,r3
  805de4:	9448983a 	sll	r4,r18,r17
  805de8:	003d3206 	br	8052b4 <__alt_mem_onchip_mem+0xff7852b4>
  805dec:	d8000e15 	stw	zero,56(sp)
  805df0:	003d7506 	br	8053c8 <__alt_mem_onchip_mem+0xff7853c8>
  805df4:	b005883a 	mov	r2,r22
  805df8:	003f4506 	br	805b10 <__alt_mem_onchip_mem+0xff785b10>
  805dfc:	dc000915 	stw	r16,36(sp)
  805e00:	d9800a17 	ldw	r6,40(sp)
  805e04:	d9400917 	ldw	r5,36(sp)
  805e08:	e009883a 	mov	r4,fp
  805e0c:	08087dc0 	call	8087dc <__pow5mult>
  805e10:	1021883a 	mov	r16,r2
  805e14:	003f5a06 	br	805b80 <__alt_mem_onchip_mem+0xff785b80>
  805e18:	01c00044 	movi	r7,1
  805e1c:	d9c00b15 	stw	r7,44(sp)
  805e20:	d8802217 	ldw	r2,136(sp)
  805e24:	0081280e 	bge	zero,r2,8062c8 <_dtoa_r+0x11b0>
  805e28:	100d883a 	mov	r6,r2
  805e2c:	1021883a 	mov	r16,r2
  805e30:	d8800c15 	stw	r2,48(sp)
  805e34:	d8800615 	stw	r2,24(sp)
  805e38:	003d8806 	br	80545c <__alt_mem_onchip_mem+0xff78545c>
  805e3c:	d8800617 	ldw	r2,24(sp)
  805e40:	00be9b16 	blt	zero,r2,8058b0 <__alt_mem_onchip_mem+0xff7858b0>
  805e44:	10010f1e 	bne	r2,zero,806284 <_dtoa_r+0x116c>
  805e48:	880b883a 	mov	r5,r17
  805e4c:	000d883a 	mov	r6,zero
  805e50:	01d00534 	movhi	r7,16404
  805e54:	8009883a 	mov	r4,r16
  805e58:	080e0580 	call	80e058 <__muldf3>
  805e5c:	900d883a 	mov	r6,r18
  805e60:	980f883a 	mov	r7,r19
  805e64:	1009883a 	mov	r4,r2
  805e68:	180b883a 	mov	r5,r3
  805e6c:	080de880 	call	80de88 <__gedf2>
  805e70:	002b883a 	mov	r21,zero
  805e74:	0023883a 	mov	r17,zero
  805e78:	1000bf16 	blt	r2,zero,806178 <_dtoa_r+0x1060>
  805e7c:	d9802217 	ldw	r6,136(sp)
  805e80:	ddc00717 	ldw	r23,28(sp)
  805e84:	018c303a 	nor	r6,zero,r6
  805e88:	d9800515 	stw	r6,20(sp)
  805e8c:	a80b883a 	mov	r5,r21
  805e90:	e009883a 	mov	r4,fp
  805e94:	08082440 	call	808244 <_Bfree>
  805e98:	883e4926 	beq	r17,zero,8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  805e9c:	003fad06 	br	805d54 <__alt_mem_onchip_mem+0xff785d54>
  805ea0:	d9c01117 	ldw	r7,68(sp)
  805ea4:	3801bc26 	beq	r7,zero,806598 <_dtoa_r+0x1480>
  805ea8:	10810cc4 	addi	r2,r2,1075
  805eac:	dd400a17 	ldw	r21,40(sp)
  805eb0:	dd000817 	ldw	r20,32(sp)
  805eb4:	003f0a06 	br	805ae0 <__alt_mem_onchip_mem+0xff785ae0>
  805eb8:	00800704 	movi	r2,28
  805ebc:	d9000817 	ldw	r4,32(sp)
  805ec0:	a0a9883a 	add	r20,r20,r2
  805ec4:	b0ad883a 	add	r22,r22,r2
  805ec8:	2089883a 	add	r4,r4,r2
  805ecc:	d9000815 	stw	r4,32(sp)
  805ed0:	003f5106 	br	805c18 <__alt_mem_onchip_mem+0xff785c18>
  805ed4:	d8c00317 	ldw	r3,12(sp)
  805ed8:	b8c1fc0e 	bge	r23,r3,8066cc <_dtoa_r+0x15b4>
  805edc:	0027883a 	mov	r19,zero
  805ee0:	b805883a 	mov	r2,r23
  805ee4:	003f3e06 	br	805be0 <__alt_mem_onchip_mem+0xff785be0>
  805ee8:	880b883a 	mov	r5,r17
  805eec:	e009883a 	mov	r4,fp
  805ef0:	000f883a 	mov	r7,zero
  805ef4:	01800284 	movi	r6,10
  805ef8:	080826c0 	call	80826c <__multadd>
  805efc:	d9000c17 	ldw	r4,48(sp)
  805f00:	1023883a 	mov	r17,r2
  805f04:	0102040e 	bge	zero,r4,806718 <_dtoa_r+0x1600>
  805f08:	d9000615 	stw	r4,24(sp)
  805f0c:	0500050e 	bge	zero,r20,805f24 <_dtoa_r+0xe0c>
  805f10:	880b883a 	mov	r5,r17
  805f14:	a00d883a 	mov	r6,r20
  805f18:	e009883a 	mov	r4,fp
  805f1c:	080891c0 	call	80891c <__lshift>
  805f20:	1023883a 	mov	r17,r2
  805f24:	9801241e 	bne	r19,zero,8063b8 <_dtoa_r+0x12a0>
  805f28:	8829883a 	mov	r20,r17
  805f2c:	d9000617 	ldw	r4,24(sp)
  805f30:	dcc00717 	ldw	r19,28(sp)
  805f34:	9480004c 	andi	r18,r18,1
  805f38:	20bfffc4 	addi	r2,r4,-1
  805f3c:	9885883a 	add	r2,r19,r2
  805f40:	d8800415 	stw	r2,16(sp)
  805f44:	dc800615 	stw	r18,24(sp)
  805f48:	a80b883a 	mov	r5,r21
  805f4c:	8009883a 	mov	r4,r16
  805f50:	0804f180 	call	804f18 <quorem>
  805f54:	880b883a 	mov	r5,r17
  805f58:	8009883a 	mov	r4,r16
  805f5c:	102f883a 	mov	r23,r2
  805f60:	0808a640 	call	808a64 <__mcmp>
  805f64:	a80b883a 	mov	r5,r21
  805f68:	a00d883a 	mov	r6,r20
  805f6c:	e009883a 	mov	r4,fp
  805f70:	102d883a 	mov	r22,r2
  805f74:	0808ac40 	call	808ac4 <__mdiff>
  805f78:	1007883a 	mov	r3,r2
  805f7c:	10800317 	ldw	r2,12(r2)
  805f80:	bc800c04 	addi	r18,r23,48
  805f84:	180b883a 	mov	r5,r3
  805f88:	10004e1e 	bne	r2,zero,8060c4 <_dtoa_r+0xfac>
  805f8c:	8009883a 	mov	r4,r16
  805f90:	d8c01615 	stw	r3,88(sp)
  805f94:	0808a640 	call	808a64 <__mcmp>
  805f98:	d8c01617 	ldw	r3,88(sp)
  805f9c:	e009883a 	mov	r4,fp
  805fa0:	d8801615 	stw	r2,88(sp)
  805fa4:	180b883a 	mov	r5,r3
  805fa8:	08082440 	call	808244 <_Bfree>
  805fac:	d8801617 	ldw	r2,88(sp)
  805fb0:	1000041e 	bne	r2,zero,805fc4 <_dtoa_r+0xeac>
  805fb4:	d9800317 	ldw	r6,12(sp)
  805fb8:	3000021e 	bne	r6,zero,805fc4 <_dtoa_r+0xeac>
  805fbc:	d8c00617 	ldw	r3,24(sp)
  805fc0:	18003726 	beq	r3,zero,8060a0 <_dtoa_r+0xf88>
  805fc4:	b0002016 	blt	r22,zero,806048 <_dtoa_r+0xf30>
  805fc8:	b000041e 	bne	r22,zero,805fdc <_dtoa_r+0xec4>
  805fcc:	d9000317 	ldw	r4,12(sp)
  805fd0:	2000021e 	bne	r4,zero,805fdc <_dtoa_r+0xec4>
  805fd4:	d8c00617 	ldw	r3,24(sp)
  805fd8:	18001b26 	beq	r3,zero,806048 <_dtoa_r+0xf30>
  805fdc:	00810716 	blt	zero,r2,8063fc <_dtoa_r+0x12e4>
  805fe0:	d8c00417 	ldw	r3,16(sp)
  805fe4:	9d800044 	addi	r22,r19,1
  805fe8:	9c800005 	stb	r18,0(r19)
  805fec:	b02f883a 	mov	r23,r22
  805ff0:	98c10626 	beq	r19,r3,80640c <_dtoa_r+0x12f4>
  805ff4:	800b883a 	mov	r5,r16
  805ff8:	000f883a 	mov	r7,zero
  805ffc:	01800284 	movi	r6,10
  806000:	e009883a 	mov	r4,fp
  806004:	080826c0 	call	80826c <__multadd>
  806008:	1021883a 	mov	r16,r2
  80600c:	000f883a 	mov	r7,zero
  806010:	01800284 	movi	r6,10
  806014:	880b883a 	mov	r5,r17
  806018:	e009883a 	mov	r4,fp
  80601c:	8d002526 	beq	r17,r20,8060b4 <_dtoa_r+0xf9c>
  806020:	080826c0 	call	80826c <__multadd>
  806024:	a00b883a 	mov	r5,r20
  806028:	000f883a 	mov	r7,zero
  80602c:	01800284 	movi	r6,10
  806030:	e009883a 	mov	r4,fp
  806034:	1023883a 	mov	r17,r2
  806038:	080826c0 	call	80826c <__multadd>
  80603c:	1029883a 	mov	r20,r2
  806040:	b027883a 	mov	r19,r22
  806044:	003fc006 	br	805f48 <__alt_mem_onchip_mem+0xff785f48>
  806048:	9011883a 	mov	r8,r18
  80604c:	00800e0e 	bge	zero,r2,806088 <_dtoa_r+0xf70>
  806050:	800b883a 	mov	r5,r16
  806054:	01800044 	movi	r6,1
  806058:	e009883a 	mov	r4,fp
  80605c:	da001715 	stw	r8,92(sp)
  806060:	080891c0 	call	80891c <__lshift>
  806064:	a80b883a 	mov	r5,r21
  806068:	1009883a 	mov	r4,r2
  80606c:	1021883a 	mov	r16,r2
  806070:	0808a640 	call	808a64 <__mcmp>
  806074:	da001717 	ldw	r8,92(sp)
  806078:	0081960e 	bge	zero,r2,8066d4 <_dtoa_r+0x15bc>
  80607c:	00800e44 	movi	r2,57
  806080:	40817026 	beq	r8,r2,806644 <_dtoa_r+0x152c>
  806084:	ba000c44 	addi	r8,r23,49
  806088:	8825883a 	mov	r18,r17
  80608c:	9dc00044 	addi	r23,r19,1
  806090:	9a000005 	stb	r8,0(r19)
  806094:	a023883a 	mov	r17,r20
  806098:	dc000915 	stw	r16,36(sp)
  80609c:	003f2406 	br	805d30 <__alt_mem_onchip_mem+0xff785d30>
  8060a0:	00800e44 	movi	r2,57
  8060a4:	9011883a 	mov	r8,r18
  8060a8:	90816626 	beq	r18,r2,806644 <_dtoa_r+0x152c>
  8060ac:	05bff516 	blt	zero,r22,806084 <__alt_mem_onchip_mem+0xff786084>
  8060b0:	003ff506 	br	806088 <__alt_mem_onchip_mem+0xff786088>
  8060b4:	080826c0 	call	80826c <__multadd>
  8060b8:	1023883a 	mov	r17,r2
  8060bc:	1029883a 	mov	r20,r2
  8060c0:	003fdf06 	br	806040 <__alt_mem_onchip_mem+0xff786040>
  8060c4:	e009883a 	mov	r4,fp
  8060c8:	08082440 	call	808244 <_Bfree>
  8060cc:	00800044 	movi	r2,1
  8060d0:	003fbc06 	br	805fc4 <__alt_mem_onchip_mem+0xff785fc4>
  8060d4:	a80b883a 	mov	r5,r21
  8060d8:	8009883a 	mov	r4,r16
  8060dc:	0808a640 	call	808a64 <__mcmp>
  8060e0:	103edb0e 	bge	r2,zero,805c50 <__alt_mem_onchip_mem+0xff785c50>
  8060e4:	800b883a 	mov	r5,r16
  8060e8:	000f883a 	mov	r7,zero
  8060ec:	01800284 	movi	r6,10
  8060f0:	e009883a 	mov	r4,fp
  8060f4:	080826c0 	call	80826c <__multadd>
  8060f8:	1021883a 	mov	r16,r2
  8060fc:	d8800517 	ldw	r2,20(sp)
  806100:	d8c00b17 	ldw	r3,44(sp)
  806104:	10bfffc4 	addi	r2,r2,-1
  806108:	d8800515 	stw	r2,20(sp)
  80610c:	183f761e 	bne	r3,zero,805ee8 <__alt_mem_onchip_mem+0xff785ee8>
  806110:	d9000c17 	ldw	r4,48(sp)
  806114:	0101730e 	bge	zero,r4,8066e4 <_dtoa_r+0x15cc>
  806118:	d9000615 	stw	r4,24(sp)
  80611c:	003ed006 	br	805c60 <__alt_mem_onchip_mem+0xff785c60>
  806120:	00800084 	movi	r2,2
  806124:	3081861e 	bne	r6,r2,806740 <_dtoa_r+0x1628>
  806128:	d8000b15 	stw	zero,44(sp)
  80612c:	003f3c06 	br	805e20 <__alt_mem_onchip_mem+0xff785e20>
  806130:	dc000917 	ldw	r16,36(sp)
  806134:	003e9206 	br	805b80 <__alt_mem_onchip_mem+0xff785b80>
  806138:	d9c00317 	ldw	r7,12(sp)
  80613c:	00800084 	movi	r2,2
  806140:	11fec50e 	bge	r2,r7,805c58 <__alt_mem_onchip_mem+0xff785c58>
  806144:	d9000617 	ldw	r4,24(sp)
  806148:	20013c1e 	bne	r4,zero,80663c <_dtoa_r+0x1524>
  80614c:	a80b883a 	mov	r5,r21
  806150:	000f883a 	mov	r7,zero
  806154:	01800144 	movi	r6,5
  806158:	e009883a 	mov	r4,fp
  80615c:	080826c0 	call	80826c <__multadd>
  806160:	100b883a 	mov	r5,r2
  806164:	8009883a 	mov	r4,r16
  806168:	102b883a 	mov	r21,r2
  80616c:	0808a640 	call	808a64 <__mcmp>
  806170:	dc000915 	stw	r16,36(sp)
  806174:	00bf410e 	bge	zero,r2,805e7c <__alt_mem_onchip_mem+0xff785e7c>
  806178:	d9c00717 	ldw	r7,28(sp)
  80617c:	00800c44 	movi	r2,49
  806180:	38800005 	stb	r2,0(r7)
  806184:	d8800517 	ldw	r2,20(sp)
  806188:	3dc00044 	addi	r23,r7,1
  80618c:	10800044 	addi	r2,r2,1
  806190:	d8800515 	stw	r2,20(sp)
  806194:	003f3d06 	br	805e8c <__alt_mem_onchip_mem+0xff785e8c>
  806198:	d9800517 	ldw	r6,20(sp)
  80619c:	d9c00717 	ldw	r7,28(sp)
  8061a0:	00800c44 	movi	r2,49
  8061a4:	31800044 	addi	r6,r6,1
  8061a8:	d9800515 	stw	r6,20(sp)
  8061ac:	38800005 	stb	r2,0(r7)
  8061b0:	003edf06 	br	805d30 <__alt_mem_onchip_mem+0xff785d30>
  8061b4:	d8000b15 	stw	zero,44(sp)
  8061b8:	003c9f06 	br	805438 <__alt_mem_onchip_mem+0xff785438>
  8061bc:	903e7e1e 	bne	r18,zero,805bb8 <__alt_mem_onchip_mem+0xff785bb8>
  8061c0:	00800434 	movhi	r2,16
  8061c4:	10bfffc4 	addi	r2,r2,-1
  8061c8:	9884703a 	and	r2,r19,r2
  8061cc:	1000ea1e 	bne	r2,zero,806578 <_dtoa_r+0x1460>
  8061d0:	9cdffc2c 	andhi	r19,r19,32752
  8061d4:	9800e826 	beq	r19,zero,806578 <_dtoa_r+0x1460>
  8061d8:	d9c00817 	ldw	r7,32(sp)
  8061dc:	b5800044 	addi	r22,r22,1
  8061e0:	04c00044 	movi	r19,1
  8061e4:	39c00044 	addi	r7,r7,1
  8061e8:	d9c00815 	stw	r7,32(sp)
  8061ec:	d8800d17 	ldw	r2,52(sp)
  8061f0:	103e721e 	bne	r2,zero,805bbc <__alt_mem_onchip_mem+0xff785bbc>
  8061f4:	00800044 	movi	r2,1
  8061f8:	003e7906 	br	805be0 <__alt_mem_onchip_mem+0xff785be0>
  8061fc:	8009883a 	mov	r4,r16
  806200:	080f0ec0 	call	80f0ec <__floatsidf>
  806204:	d9800f17 	ldw	r6,60(sp)
  806208:	d9c01017 	ldw	r7,64(sp)
  80620c:	1009883a 	mov	r4,r2
  806210:	180b883a 	mov	r5,r3
  806214:	080e0580 	call	80e058 <__muldf3>
  806218:	000d883a 	mov	r6,zero
  80621c:	01d00734 	movhi	r7,16412
  806220:	1009883a 	mov	r4,r2
  806224:	180b883a 	mov	r5,r3
  806228:	080cc6c0 	call	80cc6c <__adddf3>
  80622c:	047f3034 	movhi	r17,64704
  806230:	1021883a 	mov	r16,r2
  806234:	1c63883a 	add	r17,r3,r17
  806238:	d9000f17 	ldw	r4,60(sp)
  80623c:	d9401017 	ldw	r5,64(sp)
  806240:	000d883a 	mov	r6,zero
  806244:	01d00534 	movhi	r7,16404
  806248:	080e7700 	call	80e770 <__subdf3>
  80624c:	800d883a 	mov	r6,r16
  806250:	880f883a 	mov	r7,r17
  806254:	1009883a 	mov	r4,r2
  806258:	180b883a 	mov	r5,r3
  80625c:	102b883a 	mov	r21,r2
  806260:	1829883a 	mov	r20,r3
  806264:	080de880 	call	80de88 <__gedf2>
  806268:	00806c16 	blt	zero,r2,80641c <_dtoa_r+0x1304>
  80626c:	89e0003c 	xorhi	r7,r17,32768
  806270:	800d883a 	mov	r6,r16
  806274:	a809883a 	mov	r4,r21
  806278:	a00b883a 	mov	r5,r20
  80627c:	080df640 	call	80df64 <__ledf2>
  806280:	103d7e0e 	bge	r2,zero,80587c <__alt_mem_onchip_mem+0xff78587c>
  806284:	002b883a 	mov	r21,zero
  806288:	0023883a 	mov	r17,zero
  80628c:	003efb06 	br	805e7c <__alt_mem_onchip_mem+0xff785e7c>
  806290:	d8800717 	ldw	r2,28(sp)
  806294:	003bd006 	br	8051d8 <__alt_mem_onchip_mem+0xff7851d8>
  806298:	d9000a17 	ldw	r4,40(sp)
  80629c:	d9800d17 	ldw	r6,52(sp)
  8062a0:	dd400a15 	stw	r21,40(sp)
  8062a4:	a905c83a 	sub	r2,r21,r4
  8062a8:	308d883a 	add	r6,r6,r2
  8062ac:	d9800d15 	stw	r6,52(sp)
  8062b0:	002b883a 	mov	r21,zero
  8062b4:	003e0606 	br	805ad0 <__alt_mem_onchip_mem+0xff785ad0>
  8062b8:	9023883a 	mov	r17,r18
  8062bc:	9829883a 	mov	r20,r19
  8062c0:	04000084 	movi	r16,2
  8062c4:	003c9206 	br	805510 <__alt_mem_onchip_mem+0xff785510>
  8062c8:	04000044 	movi	r16,1
  8062cc:	dc000c15 	stw	r16,48(sp)
  8062d0:	dc000615 	stw	r16,24(sp)
  8062d4:	dc002215 	stw	r16,136(sp)
  8062d8:	e0001115 	stw	zero,68(fp)
  8062dc:	000b883a 	mov	r5,zero
  8062e0:	003c6906 	br	805488 <__alt_mem_onchip_mem+0xff785488>
  8062e4:	3021883a 	mov	r16,r6
  8062e8:	003ffb06 	br	8062d8 <__alt_mem_onchip_mem+0xff7862d8>
  8062ec:	1000021e 	bne	r2,zero,8062f8 <_dtoa_r+0x11e0>
  8062f0:	4200004c 	andi	r8,r8,1
  8062f4:	403e7d1e 	bne	r8,zero,805cec <__alt_mem_onchip_mem+0xff785cec>
  8062f8:	01000c04 	movi	r4,48
  8062fc:	00000106 	br	806304 <_dtoa_r+0x11ec>
  806300:	102f883a 	mov	r23,r2
  806304:	b8bfffc4 	addi	r2,r23,-1
  806308:	10c00007 	ldb	r3,0(r2)
  80630c:	193ffc26 	beq	r3,r4,806300 <__alt_mem_onchip_mem+0xff786300>
  806310:	003e8706 	br	805d30 <__alt_mem_onchip_mem+0xff785d30>
  806314:	d8800517 	ldw	r2,20(sp)
  806318:	00a3c83a 	sub	r17,zero,r2
  80631c:	8800a426 	beq	r17,zero,8065b0 <_dtoa_r+0x1498>
  806320:	888003cc 	andi	r2,r17,15
  806324:	100490fa 	slli	r2,r2,3
  806328:	00c02074 	movhi	r3,129
  80632c:	18cd4e04 	addi	r3,r3,13624
  806330:	1885883a 	add	r2,r3,r2
  806334:	11800017 	ldw	r6,0(r2)
  806338:	11c00117 	ldw	r7,4(r2)
  80633c:	9009883a 	mov	r4,r18
  806340:	980b883a 	mov	r5,r19
  806344:	8823d13a 	srai	r17,r17,4
  806348:	080e0580 	call	80e058 <__muldf3>
  80634c:	d8800f15 	stw	r2,60(sp)
  806350:	d8c01015 	stw	r3,64(sp)
  806354:	8800e826 	beq	r17,zero,8066f8 <_dtoa_r+0x15e0>
  806358:	05002074 	movhi	r20,129
  80635c:	a50d4404 	addi	r20,r20,13584
  806360:	04000084 	movi	r16,2
  806364:	8980004c 	andi	r6,r17,1
  806368:	1009883a 	mov	r4,r2
  80636c:	8823d07a 	srai	r17,r17,1
  806370:	180b883a 	mov	r5,r3
  806374:	30000426 	beq	r6,zero,806388 <_dtoa_r+0x1270>
  806378:	a1800017 	ldw	r6,0(r20)
  80637c:	a1c00117 	ldw	r7,4(r20)
  806380:	84000044 	addi	r16,r16,1
  806384:	080e0580 	call	80e058 <__muldf3>
  806388:	a5000204 	addi	r20,r20,8
  80638c:	883ff51e 	bne	r17,zero,806364 <__alt_mem_onchip_mem+0xff786364>
  806390:	d8800f15 	stw	r2,60(sp)
  806394:	d8c01015 	stw	r3,64(sp)
  806398:	003c7606 	br	805574 <__alt_mem_onchip_mem+0xff785574>
  80639c:	00c00c04 	movi	r3,48
  8063a0:	10c00005 	stb	r3,0(r2)
  8063a4:	d8c00517 	ldw	r3,20(sp)
  8063a8:	bd3fffc3 	ldbu	r20,-1(r23)
  8063ac:	18c00044 	addi	r3,r3,1
  8063b0:	d8c00515 	stw	r3,20(sp)
  8063b4:	003db906 	br	805a9c <__alt_mem_onchip_mem+0xff785a9c>
  8063b8:	89400117 	ldw	r5,4(r17)
  8063bc:	e009883a 	mov	r4,fp
  8063c0:	080819c0 	call	80819c <_Balloc>
  8063c4:	89800417 	ldw	r6,16(r17)
  8063c8:	89400304 	addi	r5,r17,12
  8063cc:	11000304 	addi	r4,r2,12
  8063d0:	31800084 	addi	r6,r6,2
  8063d4:	318d883a 	add	r6,r6,r6
  8063d8:	318d883a 	add	r6,r6,r6
  8063dc:	1027883a 	mov	r19,r2
  8063e0:	0807f2c0 	call	807f2c <memcpy>
  8063e4:	01800044 	movi	r6,1
  8063e8:	980b883a 	mov	r5,r19
  8063ec:	e009883a 	mov	r4,fp
  8063f0:	080891c0 	call	80891c <__lshift>
  8063f4:	1029883a 	mov	r20,r2
  8063f8:	003ecc06 	br	805f2c <__alt_mem_onchip_mem+0xff785f2c>
  8063fc:	00800e44 	movi	r2,57
  806400:	90809026 	beq	r18,r2,806644 <_dtoa_r+0x152c>
  806404:	92000044 	addi	r8,r18,1
  806408:	003f1f06 	br	806088 <__alt_mem_onchip_mem+0xff786088>
  80640c:	9011883a 	mov	r8,r18
  806410:	8825883a 	mov	r18,r17
  806414:	a023883a 	mov	r17,r20
  806418:	003e2906 	br	805cc0 <__alt_mem_onchip_mem+0xff785cc0>
  80641c:	002b883a 	mov	r21,zero
  806420:	0023883a 	mov	r17,zero
  806424:	003f5406 	br	806178 <__alt_mem_onchip_mem+0xff786178>
  806428:	61bfffc4 	addi	r6,r12,-1
  80642c:	300490fa 	slli	r2,r6,3
  806430:	00c02074 	movhi	r3,129
  806434:	18cd4e04 	addi	r3,r3,13624
  806438:	1885883a 	add	r2,r3,r2
  80643c:	11000017 	ldw	r4,0(r2)
  806440:	11400117 	ldw	r5,4(r2)
  806444:	d8800717 	ldw	r2,28(sp)
  806448:	880f883a 	mov	r7,r17
  80644c:	d9801215 	stw	r6,72(sp)
  806450:	800d883a 	mov	r6,r16
  806454:	db001615 	stw	r12,88(sp)
  806458:	15c00044 	addi	r23,r2,1
  80645c:	080e0580 	call	80e058 <__muldf3>
  806460:	d9401017 	ldw	r5,64(sp)
  806464:	d9000f17 	ldw	r4,60(sp)
  806468:	d8c01515 	stw	r3,84(sp)
  80646c:	d8801415 	stw	r2,80(sp)
  806470:	080f06c0 	call	80f06c <__fixdfsi>
  806474:	1009883a 	mov	r4,r2
  806478:	1021883a 	mov	r16,r2
  80647c:	080f0ec0 	call	80f0ec <__floatsidf>
  806480:	d9000f17 	ldw	r4,60(sp)
  806484:	d9401017 	ldw	r5,64(sp)
  806488:	100d883a 	mov	r6,r2
  80648c:	180f883a 	mov	r7,r3
  806490:	080e7700 	call	80e770 <__subdf3>
  806494:	1829883a 	mov	r20,r3
  806498:	d8c00717 	ldw	r3,28(sp)
  80649c:	84000c04 	addi	r16,r16,48
  8064a0:	1023883a 	mov	r17,r2
  8064a4:	1c000005 	stb	r16,0(r3)
  8064a8:	db001617 	ldw	r12,88(sp)
  8064ac:	00800044 	movi	r2,1
  8064b0:	60802226 	beq	r12,r2,80653c <_dtoa_r+0x1424>
  8064b4:	d9c00717 	ldw	r7,28(sp)
  8064b8:	8805883a 	mov	r2,r17
  8064bc:	b82b883a 	mov	r21,r23
  8064c0:	3b19883a 	add	r12,r7,r12
  8064c4:	6023883a 	mov	r17,r12
  8064c8:	a007883a 	mov	r3,r20
  8064cc:	dc800f15 	stw	r18,60(sp)
  8064d0:	000d883a 	mov	r6,zero
  8064d4:	01d00934 	movhi	r7,16420
  8064d8:	1009883a 	mov	r4,r2
  8064dc:	180b883a 	mov	r5,r3
  8064e0:	080e0580 	call	80e058 <__muldf3>
  8064e4:	180b883a 	mov	r5,r3
  8064e8:	1009883a 	mov	r4,r2
  8064ec:	1829883a 	mov	r20,r3
  8064f0:	1025883a 	mov	r18,r2
  8064f4:	080f06c0 	call	80f06c <__fixdfsi>
  8064f8:	1009883a 	mov	r4,r2
  8064fc:	1021883a 	mov	r16,r2
  806500:	080f0ec0 	call	80f0ec <__floatsidf>
  806504:	100d883a 	mov	r6,r2
  806508:	180f883a 	mov	r7,r3
  80650c:	9009883a 	mov	r4,r18
  806510:	a00b883a 	mov	r5,r20
  806514:	84000c04 	addi	r16,r16,48
  806518:	080e7700 	call	80e770 <__subdf3>
  80651c:	ad400044 	addi	r21,r21,1
  806520:	ac3fffc5 	stb	r16,-1(r21)
  806524:	ac7fea1e 	bne	r21,r17,8064d0 <__alt_mem_onchip_mem+0xff7864d0>
  806528:	1023883a 	mov	r17,r2
  80652c:	d8801217 	ldw	r2,72(sp)
  806530:	dc800f17 	ldw	r18,60(sp)
  806534:	1829883a 	mov	r20,r3
  806538:	b8af883a 	add	r23,r23,r2
  80653c:	d9001417 	ldw	r4,80(sp)
  806540:	d9401517 	ldw	r5,84(sp)
  806544:	000d883a 	mov	r6,zero
  806548:	01cff834 	movhi	r7,16352
  80654c:	080cc6c0 	call	80cc6c <__adddf3>
  806550:	880d883a 	mov	r6,r17
  806554:	a00f883a 	mov	r7,r20
  806558:	1009883a 	mov	r4,r2
  80655c:	180b883a 	mov	r5,r3
  806560:	080df640 	call	80df64 <__ledf2>
  806564:	10003e0e 	bge	r2,zero,806660 <_dtoa_r+0x1548>
  806568:	d9001317 	ldw	r4,76(sp)
  80656c:	bd3fffc3 	ldbu	r20,-1(r23)
  806570:	d9000515 	stw	r4,20(sp)
  806574:	003d3b06 	br	805a64 <__alt_mem_onchip_mem+0xff785a64>
  806578:	0027883a 	mov	r19,zero
  80657c:	003f1b06 	br	8061ec <__alt_mem_onchip_mem+0xff7861ec>
  806580:	d8800817 	ldw	r2,32(sp)
  806584:	11e9c83a 	sub	r20,r2,r7
  806588:	0005883a 	mov	r2,zero
  80658c:	003d5406 	br	805ae0 <__alt_mem_onchip_mem+0xff785ae0>
  806590:	00800044 	movi	r2,1
  806594:	003dc706 	br	805cb4 <__alt_mem_onchip_mem+0xff785cb4>
  806598:	d8c00217 	ldw	r3,8(sp)
  80659c:	00800d84 	movi	r2,54
  8065a0:	dd400a17 	ldw	r21,40(sp)
  8065a4:	10c5c83a 	sub	r2,r2,r3
  8065a8:	dd000817 	ldw	r20,32(sp)
  8065ac:	003d4c06 	br	805ae0 <__alt_mem_onchip_mem+0xff785ae0>
  8065b0:	dc800f15 	stw	r18,60(sp)
  8065b4:	dcc01015 	stw	r19,64(sp)
  8065b8:	04000084 	movi	r16,2
  8065bc:	003bed06 	br	805574 <__alt_mem_onchip_mem+0xff785574>
  8065c0:	d9000617 	ldw	r4,24(sp)
  8065c4:	203f0d26 	beq	r4,zero,8061fc <__alt_mem_onchip_mem+0xff7861fc>
  8065c8:	d9800c17 	ldw	r6,48(sp)
  8065cc:	01bcab0e 	bge	zero,r6,80587c <__alt_mem_onchip_mem+0xff78587c>
  8065d0:	d9401017 	ldw	r5,64(sp)
  8065d4:	d9000f17 	ldw	r4,60(sp)
  8065d8:	000d883a 	mov	r6,zero
  8065dc:	01d00934 	movhi	r7,16420
  8065e0:	080e0580 	call	80e058 <__muldf3>
  8065e4:	81000044 	addi	r4,r16,1
  8065e8:	d8800f15 	stw	r2,60(sp)
  8065ec:	d8c01015 	stw	r3,64(sp)
  8065f0:	080f0ec0 	call	80f0ec <__floatsidf>
  8065f4:	d9800f17 	ldw	r6,60(sp)
  8065f8:	d9c01017 	ldw	r7,64(sp)
  8065fc:	1009883a 	mov	r4,r2
  806600:	180b883a 	mov	r5,r3
  806604:	080e0580 	call	80e058 <__muldf3>
  806608:	01d00734 	movhi	r7,16412
  80660c:	000d883a 	mov	r6,zero
  806610:	1009883a 	mov	r4,r2
  806614:	180b883a 	mov	r5,r3
  806618:	080cc6c0 	call	80cc6c <__adddf3>
  80661c:	d9c00517 	ldw	r7,20(sp)
  806620:	047f3034 	movhi	r17,64704
  806624:	1021883a 	mov	r16,r2
  806628:	39ffffc4 	addi	r7,r7,-1
  80662c:	d9c01315 	stw	r7,76(sp)
  806630:	1c63883a 	add	r17,r3,r17
  806634:	db000c17 	ldw	r12,48(sp)
  806638:	003bea06 	br	8055e4 <__alt_mem_onchip_mem+0xff7855e4>
  80663c:	dc000915 	stw	r16,36(sp)
  806640:	003e0e06 	br	805e7c <__alt_mem_onchip_mem+0xff785e7c>
  806644:	01000e44 	movi	r4,57
  806648:	8825883a 	mov	r18,r17
  80664c:	9dc00044 	addi	r23,r19,1
  806650:	99000005 	stb	r4,0(r19)
  806654:	a023883a 	mov	r17,r20
  806658:	dc000915 	stw	r16,36(sp)
  80665c:	003da406 	br	805cf0 <__alt_mem_onchip_mem+0xff785cf0>
  806660:	d9801417 	ldw	r6,80(sp)
  806664:	d9c01517 	ldw	r7,84(sp)
  806668:	0009883a 	mov	r4,zero
  80666c:	014ff834 	movhi	r5,16352
  806670:	080e7700 	call	80e770 <__subdf3>
  806674:	880d883a 	mov	r6,r17
  806678:	a00f883a 	mov	r7,r20
  80667c:	1009883a 	mov	r4,r2
  806680:	180b883a 	mov	r5,r3
  806684:	080de880 	call	80de88 <__gedf2>
  806688:	00bc7c0e 	bge	zero,r2,80587c <__alt_mem_onchip_mem+0xff78587c>
  80668c:	01000c04 	movi	r4,48
  806690:	00000106 	br	806698 <_dtoa_r+0x1580>
  806694:	102f883a 	mov	r23,r2
  806698:	b8bfffc4 	addi	r2,r23,-1
  80669c:	10c00007 	ldb	r3,0(r2)
  8066a0:	193ffc26 	beq	r3,r4,806694 <__alt_mem_onchip_mem+0xff786694>
  8066a4:	d9801317 	ldw	r6,76(sp)
  8066a8:	d9800515 	stw	r6,20(sp)
  8066ac:	003c4406 	br	8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  8066b0:	d9801317 	ldw	r6,76(sp)
  8066b4:	d9800515 	stw	r6,20(sp)
  8066b8:	003cea06 	br	805a64 <__alt_mem_onchip_mem+0xff785a64>
  8066bc:	dd800f17 	ldw	r22,60(sp)
  8066c0:	dcc01017 	ldw	r19,64(sp)
  8066c4:	dc801217 	ldw	r18,72(sp)
  8066c8:	003c6c06 	br	80587c <__alt_mem_onchip_mem+0xff78587c>
  8066cc:	903e031e 	bne	r18,zero,805edc <__alt_mem_onchip_mem+0xff785edc>
  8066d0:	003ebb06 	br	8061c0 <__alt_mem_onchip_mem+0xff7861c0>
  8066d4:	103e6c1e 	bne	r2,zero,806088 <__alt_mem_onchip_mem+0xff786088>
  8066d8:	4080004c 	andi	r2,r8,1
  8066dc:	103e6a26 	beq	r2,zero,806088 <__alt_mem_onchip_mem+0xff786088>
  8066e0:	003e6606 	br	80607c <__alt_mem_onchip_mem+0xff78607c>
  8066e4:	d8c00317 	ldw	r3,12(sp)
  8066e8:	00800084 	movi	r2,2
  8066ec:	10c02916 	blt	r2,r3,806794 <_dtoa_r+0x167c>
  8066f0:	d9000c17 	ldw	r4,48(sp)
  8066f4:	003e8806 	br	806118 <__alt_mem_onchip_mem+0xff786118>
  8066f8:	04000084 	movi	r16,2
  8066fc:	003b9d06 	br	805574 <__alt_mem_onchip_mem+0xff785574>
  806700:	d9001317 	ldw	r4,76(sp)
  806704:	d9000515 	stw	r4,20(sp)
  806708:	003cd606 	br	805a64 <__alt_mem_onchip_mem+0xff785a64>
  80670c:	d8801317 	ldw	r2,76(sp)
  806710:	d8800515 	stw	r2,20(sp)
  806714:	003c2a06 	br	8057c0 <__alt_mem_onchip_mem+0xff7857c0>
  806718:	d9800317 	ldw	r6,12(sp)
  80671c:	00800084 	movi	r2,2
  806720:	11801516 	blt	r2,r6,806778 <_dtoa_r+0x1660>
  806724:	d9c00c17 	ldw	r7,48(sp)
  806728:	d9c00615 	stw	r7,24(sp)
  80672c:	003df706 	br	805f0c <__alt_mem_onchip_mem+0xff785f0c>
  806730:	193d3926 	beq	r3,r4,805c18 <__alt_mem_onchip_mem+0xff785c18>
  806734:	00c00f04 	movi	r3,60
  806738:	1885c83a 	sub	r2,r3,r2
  80673c:	003ddf06 	br	805ebc <__alt_mem_onchip_mem+0xff785ebc>
  806740:	e009883a 	mov	r4,fp
  806744:	e0001115 	stw	zero,68(fp)
  806748:	000b883a 	mov	r5,zero
  80674c:	080819c0 	call	80819c <_Balloc>
  806750:	d8800715 	stw	r2,28(sp)
  806754:	d8c00717 	ldw	r3,28(sp)
  806758:	00bfffc4 	movi	r2,-1
  80675c:	01000044 	movi	r4,1
  806760:	d8800c15 	stw	r2,48(sp)
  806764:	e0c01015 	stw	r3,64(fp)
  806768:	d9000b15 	stw	r4,44(sp)
  80676c:	d8800615 	stw	r2,24(sp)
  806770:	d8002215 	stw	zero,136(sp)
  806774:	003c4106 	br	80587c <__alt_mem_onchip_mem+0xff78587c>
  806778:	d8c00c17 	ldw	r3,48(sp)
  80677c:	d8c00615 	stw	r3,24(sp)
  806780:	003e7006 	br	806144 <__alt_mem_onchip_mem+0xff786144>
  806784:	04400044 	movi	r17,1
  806788:	003b2006 	br	80540c <__alt_mem_onchip_mem+0xff78540c>
  80678c:	000b883a 	mov	r5,zero
  806790:	003b3d06 	br	805488 <__alt_mem_onchip_mem+0xff785488>
  806794:	d8800c17 	ldw	r2,48(sp)
  806798:	d8800615 	stw	r2,24(sp)
  80679c:	003e6906 	br	806144 <__alt_mem_onchip_mem+0xff786144>

008067a0 <__sflush_r>:
  8067a0:	2880030b 	ldhu	r2,12(r5)
  8067a4:	defffb04 	addi	sp,sp,-20
  8067a8:	dcc00315 	stw	r19,12(sp)
  8067ac:	dc400115 	stw	r17,4(sp)
  8067b0:	dfc00415 	stw	ra,16(sp)
  8067b4:	dc800215 	stw	r18,8(sp)
  8067b8:	dc000015 	stw	r16,0(sp)
  8067bc:	10c0020c 	andi	r3,r2,8
  8067c0:	2823883a 	mov	r17,r5
  8067c4:	2027883a 	mov	r19,r4
  8067c8:	1800311e 	bne	r3,zero,806890 <__sflush_r+0xf0>
  8067cc:	28c00117 	ldw	r3,4(r5)
  8067d0:	10820014 	ori	r2,r2,2048
  8067d4:	2880030d 	sth	r2,12(r5)
  8067d8:	00c04b0e 	bge	zero,r3,806908 <__sflush_r+0x168>
  8067dc:	8a000a17 	ldw	r8,40(r17)
  8067e0:	40002326 	beq	r8,zero,806870 <__sflush_r+0xd0>
  8067e4:	9c000017 	ldw	r16,0(r19)
  8067e8:	10c4000c 	andi	r3,r2,4096
  8067ec:	98000015 	stw	zero,0(r19)
  8067f0:	18004826 	beq	r3,zero,806914 <__sflush_r+0x174>
  8067f4:	89801417 	ldw	r6,80(r17)
  8067f8:	10c0010c 	andi	r3,r2,4
  8067fc:	18000626 	beq	r3,zero,806818 <__sflush_r+0x78>
  806800:	88c00117 	ldw	r3,4(r17)
  806804:	88800c17 	ldw	r2,48(r17)
  806808:	30cdc83a 	sub	r6,r6,r3
  80680c:	10000226 	beq	r2,zero,806818 <__sflush_r+0x78>
  806810:	88800f17 	ldw	r2,60(r17)
  806814:	308dc83a 	sub	r6,r6,r2
  806818:	89400717 	ldw	r5,28(r17)
  80681c:	000f883a 	mov	r7,zero
  806820:	9809883a 	mov	r4,r19
  806824:	403ee83a 	callr	r8
  806828:	00ffffc4 	movi	r3,-1
  80682c:	10c04426 	beq	r2,r3,806940 <__sflush_r+0x1a0>
  806830:	88c0030b 	ldhu	r3,12(r17)
  806834:	89000417 	ldw	r4,16(r17)
  806838:	88000115 	stw	zero,4(r17)
  80683c:	197dffcc 	andi	r5,r3,63487
  806840:	8940030d 	sth	r5,12(r17)
  806844:	89000015 	stw	r4,0(r17)
  806848:	18c4000c 	andi	r3,r3,4096
  80684c:	18002c1e 	bne	r3,zero,806900 <__sflush_r+0x160>
  806850:	89400c17 	ldw	r5,48(r17)
  806854:	9c000015 	stw	r16,0(r19)
  806858:	28000526 	beq	r5,zero,806870 <__sflush_r+0xd0>
  80685c:	88801004 	addi	r2,r17,64
  806860:	28800226 	beq	r5,r2,80686c <__sflush_r+0xcc>
  806864:	9809883a 	mov	r4,r19
  806868:	0806f0c0 	call	806f0c <_free_r>
  80686c:	88000c15 	stw	zero,48(r17)
  806870:	0005883a 	mov	r2,zero
  806874:	dfc00417 	ldw	ra,16(sp)
  806878:	dcc00317 	ldw	r19,12(sp)
  80687c:	dc800217 	ldw	r18,8(sp)
  806880:	dc400117 	ldw	r17,4(sp)
  806884:	dc000017 	ldw	r16,0(sp)
  806888:	dec00504 	addi	sp,sp,20
  80688c:	f800283a 	ret
  806890:	2c800417 	ldw	r18,16(r5)
  806894:	903ff626 	beq	r18,zero,806870 <__alt_mem_onchip_mem+0xff786870>
  806898:	2c000017 	ldw	r16,0(r5)
  80689c:	108000cc 	andi	r2,r2,3
  8068a0:	2c800015 	stw	r18,0(r5)
  8068a4:	84a1c83a 	sub	r16,r16,r18
  8068a8:	1000131e 	bne	r2,zero,8068f8 <__sflush_r+0x158>
  8068ac:	28800517 	ldw	r2,20(r5)
  8068b0:	88800215 	stw	r2,8(r17)
  8068b4:	04000316 	blt	zero,r16,8068c4 <__sflush_r+0x124>
  8068b8:	003fed06 	br	806870 <__alt_mem_onchip_mem+0xff786870>
  8068bc:	90a5883a 	add	r18,r18,r2
  8068c0:	043feb0e 	bge	zero,r16,806870 <__alt_mem_onchip_mem+0xff786870>
  8068c4:	88800917 	ldw	r2,36(r17)
  8068c8:	89400717 	ldw	r5,28(r17)
  8068cc:	800f883a 	mov	r7,r16
  8068d0:	900d883a 	mov	r6,r18
  8068d4:	9809883a 	mov	r4,r19
  8068d8:	103ee83a 	callr	r2
  8068dc:	80a1c83a 	sub	r16,r16,r2
  8068e0:	00bff616 	blt	zero,r2,8068bc <__alt_mem_onchip_mem+0xff7868bc>
  8068e4:	88c0030b 	ldhu	r3,12(r17)
  8068e8:	00bfffc4 	movi	r2,-1
  8068ec:	18c01014 	ori	r3,r3,64
  8068f0:	88c0030d 	sth	r3,12(r17)
  8068f4:	003fdf06 	br	806874 <__alt_mem_onchip_mem+0xff786874>
  8068f8:	0005883a 	mov	r2,zero
  8068fc:	003fec06 	br	8068b0 <__alt_mem_onchip_mem+0xff7868b0>
  806900:	88801415 	stw	r2,80(r17)
  806904:	003fd206 	br	806850 <__alt_mem_onchip_mem+0xff786850>
  806908:	28c00f17 	ldw	r3,60(r5)
  80690c:	00ffb316 	blt	zero,r3,8067dc <__alt_mem_onchip_mem+0xff7867dc>
  806910:	003fd706 	br	806870 <__alt_mem_onchip_mem+0xff786870>
  806914:	89400717 	ldw	r5,28(r17)
  806918:	000d883a 	mov	r6,zero
  80691c:	01c00044 	movi	r7,1
  806920:	9809883a 	mov	r4,r19
  806924:	403ee83a 	callr	r8
  806928:	100d883a 	mov	r6,r2
  80692c:	00bfffc4 	movi	r2,-1
  806930:	30801426 	beq	r6,r2,806984 <__sflush_r+0x1e4>
  806934:	8880030b 	ldhu	r2,12(r17)
  806938:	8a000a17 	ldw	r8,40(r17)
  80693c:	003fae06 	br	8067f8 <__alt_mem_onchip_mem+0xff7867f8>
  806940:	98c00017 	ldw	r3,0(r19)
  806944:	183fba26 	beq	r3,zero,806830 <__alt_mem_onchip_mem+0xff786830>
  806948:	01000744 	movi	r4,29
  80694c:	19000626 	beq	r3,r4,806968 <__sflush_r+0x1c8>
  806950:	01000584 	movi	r4,22
  806954:	19000426 	beq	r3,r4,806968 <__sflush_r+0x1c8>
  806958:	88c0030b 	ldhu	r3,12(r17)
  80695c:	18c01014 	ori	r3,r3,64
  806960:	88c0030d 	sth	r3,12(r17)
  806964:	003fc306 	br	806874 <__alt_mem_onchip_mem+0xff786874>
  806968:	8880030b 	ldhu	r2,12(r17)
  80696c:	88c00417 	ldw	r3,16(r17)
  806970:	88000115 	stw	zero,4(r17)
  806974:	10bdffcc 	andi	r2,r2,63487
  806978:	8880030d 	sth	r2,12(r17)
  80697c:	88c00015 	stw	r3,0(r17)
  806980:	003fb306 	br	806850 <__alt_mem_onchip_mem+0xff786850>
  806984:	98800017 	ldw	r2,0(r19)
  806988:	103fea26 	beq	r2,zero,806934 <__alt_mem_onchip_mem+0xff786934>
  80698c:	00c00744 	movi	r3,29
  806990:	10c00226 	beq	r2,r3,80699c <__sflush_r+0x1fc>
  806994:	00c00584 	movi	r3,22
  806998:	10c0031e 	bne	r2,r3,8069a8 <__sflush_r+0x208>
  80699c:	9c000015 	stw	r16,0(r19)
  8069a0:	0005883a 	mov	r2,zero
  8069a4:	003fb306 	br	806874 <__alt_mem_onchip_mem+0xff786874>
  8069a8:	88c0030b 	ldhu	r3,12(r17)
  8069ac:	3005883a 	mov	r2,r6
  8069b0:	18c01014 	ori	r3,r3,64
  8069b4:	88c0030d 	sth	r3,12(r17)
  8069b8:	003fae06 	br	806874 <__alt_mem_onchip_mem+0xff786874>

008069bc <_fflush_r>:
  8069bc:	defffd04 	addi	sp,sp,-12
  8069c0:	dc000115 	stw	r16,4(sp)
  8069c4:	dfc00215 	stw	ra,8(sp)
  8069c8:	2021883a 	mov	r16,r4
  8069cc:	20000226 	beq	r4,zero,8069d8 <_fflush_r+0x1c>
  8069d0:	20800e17 	ldw	r2,56(r4)
  8069d4:	10000c26 	beq	r2,zero,806a08 <_fflush_r+0x4c>
  8069d8:	2880030f 	ldh	r2,12(r5)
  8069dc:	1000051e 	bne	r2,zero,8069f4 <_fflush_r+0x38>
  8069e0:	0005883a 	mov	r2,zero
  8069e4:	dfc00217 	ldw	ra,8(sp)
  8069e8:	dc000117 	ldw	r16,4(sp)
  8069ec:	dec00304 	addi	sp,sp,12
  8069f0:	f800283a 	ret
  8069f4:	8009883a 	mov	r4,r16
  8069f8:	dfc00217 	ldw	ra,8(sp)
  8069fc:	dc000117 	ldw	r16,4(sp)
  806a00:	dec00304 	addi	sp,sp,12
  806a04:	08067a01 	jmpi	8067a0 <__sflush_r>
  806a08:	d9400015 	stw	r5,0(sp)
  806a0c:	0806d980 	call	806d98 <__sinit>
  806a10:	d9400017 	ldw	r5,0(sp)
  806a14:	003ff006 	br	8069d8 <__alt_mem_onchip_mem+0xff7869d8>

00806a18 <fflush>:
  806a18:	20000526 	beq	r4,zero,806a30 <fflush+0x18>
  806a1c:	00802074 	movhi	r2,129
  806a20:	10959e04 	addi	r2,r2,22136
  806a24:	200b883a 	mov	r5,r4
  806a28:	11000017 	ldw	r4,0(r2)
  806a2c:	08069bc1 	jmpi	8069bc <_fflush_r>
  806a30:	00802074 	movhi	r2,129
  806a34:	10959d04 	addi	r2,r2,22132
  806a38:	11000017 	ldw	r4,0(r2)
  806a3c:	01402034 	movhi	r5,128
  806a40:	295a6f04 	addi	r5,r5,27068
  806a44:	08072e01 	jmpi	8072e0 <_fwalk_reent>

00806a48 <__fp_unlock>:
  806a48:	0005883a 	mov	r2,zero
  806a4c:	f800283a 	ret

00806a50 <_cleanup_r>:
  806a50:	01402074 	movhi	r5,129
  806a54:	296b3404 	addi	r5,r5,-21296
  806a58:	08072e01 	jmpi	8072e0 <_fwalk_reent>

00806a5c <__sinit.part.1>:
  806a5c:	defff704 	addi	sp,sp,-36
  806a60:	00c02034 	movhi	r3,128
  806a64:	dfc00815 	stw	ra,32(sp)
  806a68:	ddc00715 	stw	r23,28(sp)
  806a6c:	dd800615 	stw	r22,24(sp)
  806a70:	dd400515 	stw	r21,20(sp)
  806a74:	dd000415 	stw	r20,16(sp)
  806a78:	dcc00315 	stw	r19,12(sp)
  806a7c:	dc800215 	stw	r18,8(sp)
  806a80:	dc400115 	stw	r17,4(sp)
  806a84:	dc000015 	stw	r16,0(sp)
  806a88:	18da9404 	addi	r3,r3,27216
  806a8c:	24000117 	ldw	r16,4(r4)
  806a90:	20c00f15 	stw	r3,60(r4)
  806a94:	2080bb04 	addi	r2,r4,748
  806a98:	00c000c4 	movi	r3,3
  806a9c:	20c0b915 	stw	r3,740(r4)
  806aa0:	2080ba15 	stw	r2,744(r4)
  806aa4:	2000b815 	stw	zero,736(r4)
  806aa8:	05c00204 	movi	r23,8
  806aac:	00800104 	movi	r2,4
  806ab0:	2025883a 	mov	r18,r4
  806ab4:	b80d883a 	mov	r6,r23
  806ab8:	81001704 	addi	r4,r16,92
  806abc:	000b883a 	mov	r5,zero
  806ac0:	80000015 	stw	zero,0(r16)
  806ac4:	80000115 	stw	zero,4(r16)
  806ac8:	80000215 	stw	zero,8(r16)
  806acc:	8080030d 	sth	r2,12(r16)
  806ad0:	80001915 	stw	zero,100(r16)
  806ad4:	8000038d 	sth	zero,14(r16)
  806ad8:	80000415 	stw	zero,16(r16)
  806adc:	80000515 	stw	zero,20(r16)
  806ae0:	80000615 	stw	zero,24(r16)
  806ae4:	08080740 	call	808074 <memset>
  806ae8:	05802074 	movhi	r22,129
  806aec:	94400217 	ldw	r17,8(r18)
  806af0:	05402074 	movhi	r21,129
  806af4:	05002074 	movhi	r20,129
  806af8:	04c02074 	movhi	r19,129
  806afc:	b5a49804 	addi	r22,r22,-28064
  806b00:	ad64af04 	addi	r21,r21,-27972
  806b04:	a524ce04 	addi	r20,r20,-27848
  806b08:	9ce4e504 	addi	r19,r19,-27756
  806b0c:	85800815 	stw	r22,32(r16)
  806b10:	85400915 	stw	r21,36(r16)
  806b14:	85000a15 	stw	r20,40(r16)
  806b18:	84c00b15 	stw	r19,44(r16)
  806b1c:	84000715 	stw	r16,28(r16)
  806b20:	00800284 	movi	r2,10
  806b24:	8880030d 	sth	r2,12(r17)
  806b28:	00800044 	movi	r2,1
  806b2c:	b80d883a 	mov	r6,r23
  806b30:	89001704 	addi	r4,r17,92
  806b34:	000b883a 	mov	r5,zero
  806b38:	88000015 	stw	zero,0(r17)
  806b3c:	88000115 	stw	zero,4(r17)
  806b40:	88000215 	stw	zero,8(r17)
  806b44:	88001915 	stw	zero,100(r17)
  806b48:	8880038d 	sth	r2,14(r17)
  806b4c:	88000415 	stw	zero,16(r17)
  806b50:	88000515 	stw	zero,20(r17)
  806b54:	88000615 	stw	zero,24(r17)
  806b58:	08080740 	call	808074 <memset>
  806b5c:	94000317 	ldw	r16,12(r18)
  806b60:	00800484 	movi	r2,18
  806b64:	8c400715 	stw	r17,28(r17)
  806b68:	8d800815 	stw	r22,32(r17)
  806b6c:	8d400915 	stw	r21,36(r17)
  806b70:	8d000a15 	stw	r20,40(r17)
  806b74:	8cc00b15 	stw	r19,44(r17)
  806b78:	8080030d 	sth	r2,12(r16)
  806b7c:	00800084 	movi	r2,2
  806b80:	80000015 	stw	zero,0(r16)
  806b84:	80000115 	stw	zero,4(r16)
  806b88:	80000215 	stw	zero,8(r16)
  806b8c:	80001915 	stw	zero,100(r16)
  806b90:	8080038d 	sth	r2,14(r16)
  806b94:	80000415 	stw	zero,16(r16)
  806b98:	80000515 	stw	zero,20(r16)
  806b9c:	80000615 	stw	zero,24(r16)
  806ba0:	b80d883a 	mov	r6,r23
  806ba4:	000b883a 	mov	r5,zero
  806ba8:	81001704 	addi	r4,r16,92
  806bac:	08080740 	call	808074 <memset>
  806bb0:	00800044 	movi	r2,1
  806bb4:	84000715 	stw	r16,28(r16)
  806bb8:	85800815 	stw	r22,32(r16)
  806bbc:	85400915 	stw	r21,36(r16)
  806bc0:	85000a15 	stw	r20,40(r16)
  806bc4:	84c00b15 	stw	r19,44(r16)
  806bc8:	90800e15 	stw	r2,56(r18)
  806bcc:	dfc00817 	ldw	ra,32(sp)
  806bd0:	ddc00717 	ldw	r23,28(sp)
  806bd4:	dd800617 	ldw	r22,24(sp)
  806bd8:	dd400517 	ldw	r21,20(sp)
  806bdc:	dd000417 	ldw	r20,16(sp)
  806be0:	dcc00317 	ldw	r19,12(sp)
  806be4:	dc800217 	ldw	r18,8(sp)
  806be8:	dc400117 	ldw	r17,4(sp)
  806bec:	dc000017 	ldw	r16,0(sp)
  806bf0:	dec00904 	addi	sp,sp,36
  806bf4:	f800283a 	ret

00806bf8 <__fp_lock>:
  806bf8:	0005883a 	mov	r2,zero
  806bfc:	f800283a 	ret

00806c00 <__sfmoreglue>:
  806c00:	defffc04 	addi	sp,sp,-16
  806c04:	dc400115 	stw	r17,4(sp)
  806c08:	2c7fffc4 	addi	r17,r5,-1
  806c0c:	8c401a24 	muli	r17,r17,104
  806c10:	dc800215 	stw	r18,8(sp)
  806c14:	2825883a 	mov	r18,r5
  806c18:	89401d04 	addi	r5,r17,116
  806c1c:	dc000015 	stw	r16,0(sp)
  806c20:	dfc00315 	stw	ra,12(sp)
  806c24:	080763c0 	call	80763c <_malloc_r>
  806c28:	1021883a 	mov	r16,r2
  806c2c:	10000726 	beq	r2,zero,806c4c <__sfmoreglue+0x4c>
  806c30:	11000304 	addi	r4,r2,12
  806c34:	10000015 	stw	zero,0(r2)
  806c38:	14800115 	stw	r18,4(r2)
  806c3c:	11000215 	stw	r4,8(r2)
  806c40:	89801a04 	addi	r6,r17,104
  806c44:	000b883a 	mov	r5,zero
  806c48:	08080740 	call	808074 <memset>
  806c4c:	8005883a 	mov	r2,r16
  806c50:	dfc00317 	ldw	ra,12(sp)
  806c54:	dc800217 	ldw	r18,8(sp)
  806c58:	dc400117 	ldw	r17,4(sp)
  806c5c:	dc000017 	ldw	r16,0(sp)
  806c60:	dec00404 	addi	sp,sp,16
  806c64:	f800283a 	ret

00806c68 <__sfp>:
  806c68:	defffb04 	addi	sp,sp,-20
  806c6c:	dc000015 	stw	r16,0(sp)
  806c70:	04002074 	movhi	r16,129
  806c74:	84159d04 	addi	r16,r16,22132
  806c78:	dcc00315 	stw	r19,12(sp)
  806c7c:	2027883a 	mov	r19,r4
  806c80:	81000017 	ldw	r4,0(r16)
  806c84:	dfc00415 	stw	ra,16(sp)
  806c88:	dc800215 	stw	r18,8(sp)
  806c8c:	20800e17 	ldw	r2,56(r4)
  806c90:	dc400115 	stw	r17,4(sp)
  806c94:	1000021e 	bne	r2,zero,806ca0 <__sfp+0x38>
  806c98:	0806a5c0 	call	806a5c <__sinit.part.1>
  806c9c:	81000017 	ldw	r4,0(r16)
  806ca0:	2480b804 	addi	r18,r4,736
  806ca4:	047fffc4 	movi	r17,-1
  806ca8:	91000117 	ldw	r4,4(r18)
  806cac:	94000217 	ldw	r16,8(r18)
  806cb0:	213fffc4 	addi	r4,r4,-1
  806cb4:	20000a16 	blt	r4,zero,806ce0 <__sfp+0x78>
  806cb8:	8080030f 	ldh	r2,12(r16)
  806cbc:	10000c26 	beq	r2,zero,806cf0 <__sfp+0x88>
  806cc0:	80c01d04 	addi	r3,r16,116
  806cc4:	00000206 	br	806cd0 <__sfp+0x68>
  806cc8:	18bfe60f 	ldh	r2,-104(r3)
  806ccc:	10000826 	beq	r2,zero,806cf0 <__sfp+0x88>
  806cd0:	213fffc4 	addi	r4,r4,-1
  806cd4:	1c3ffd04 	addi	r16,r3,-12
  806cd8:	18c01a04 	addi	r3,r3,104
  806cdc:	247ffa1e 	bne	r4,r17,806cc8 <__alt_mem_onchip_mem+0xff786cc8>
  806ce0:	90800017 	ldw	r2,0(r18)
  806ce4:	10001d26 	beq	r2,zero,806d5c <__sfp+0xf4>
  806ce8:	1025883a 	mov	r18,r2
  806cec:	003fee06 	br	806ca8 <__alt_mem_onchip_mem+0xff786ca8>
  806cf0:	00bfffc4 	movi	r2,-1
  806cf4:	8080038d 	sth	r2,14(r16)
  806cf8:	00800044 	movi	r2,1
  806cfc:	8080030d 	sth	r2,12(r16)
  806d00:	80001915 	stw	zero,100(r16)
  806d04:	80000015 	stw	zero,0(r16)
  806d08:	80000215 	stw	zero,8(r16)
  806d0c:	80000115 	stw	zero,4(r16)
  806d10:	80000415 	stw	zero,16(r16)
  806d14:	80000515 	stw	zero,20(r16)
  806d18:	80000615 	stw	zero,24(r16)
  806d1c:	01800204 	movi	r6,8
  806d20:	000b883a 	mov	r5,zero
  806d24:	81001704 	addi	r4,r16,92
  806d28:	08080740 	call	808074 <memset>
  806d2c:	8005883a 	mov	r2,r16
  806d30:	80000c15 	stw	zero,48(r16)
  806d34:	80000d15 	stw	zero,52(r16)
  806d38:	80001115 	stw	zero,68(r16)
  806d3c:	80001215 	stw	zero,72(r16)
  806d40:	dfc00417 	ldw	ra,16(sp)
  806d44:	dcc00317 	ldw	r19,12(sp)
  806d48:	dc800217 	ldw	r18,8(sp)
  806d4c:	dc400117 	ldw	r17,4(sp)
  806d50:	dc000017 	ldw	r16,0(sp)
  806d54:	dec00504 	addi	sp,sp,20
  806d58:	f800283a 	ret
  806d5c:	01400104 	movi	r5,4
  806d60:	9809883a 	mov	r4,r19
  806d64:	0806c000 	call	806c00 <__sfmoreglue>
  806d68:	90800015 	stw	r2,0(r18)
  806d6c:	103fde1e 	bne	r2,zero,806ce8 <__alt_mem_onchip_mem+0xff786ce8>
  806d70:	00800304 	movi	r2,12
  806d74:	98800015 	stw	r2,0(r19)
  806d78:	0005883a 	mov	r2,zero
  806d7c:	003ff006 	br	806d40 <__alt_mem_onchip_mem+0xff786d40>

00806d80 <_cleanup>:
  806d80:	00802074 	movhi	r2,129
  806d84:	10959d04 	addi	r2,r2,22132
  806d88:	11000017 	ldw	r4,0(r2)
  806d8c:	01402074 	movhi	r5,129
  806d90:	296b3404 	addi	r5,r5,-21296
  806d94:	08072e01 	jmpi	8072e0 <_fwalk_reent>

00806d98 <__sinit>:
  806d98:	20800e17 	ldw	r2,56(r4)
  806d9c:	10000126 	beq	r2,zero,806da4 <__sinit+0xc>
  806da0:	f800283a 	ret
  806da4:	0806a5c1 	jmpi	806a5c <__sinit.part.1>

00806da8 <__sfp_lock_acquire>:
  806da8:	f800283a 	ret

00806dac <__sfp_lock_release>:
  806dac:	f800283a 	ret

00806db0 <__sinit_lock_acquire>:
  806db0:	f800283a 	ret

00806db4 <__sinit_lock_release>:
  806db4:	f800283a 	ret

00806db8 <__fp_lock_all>:
  806db8:	00802074 	movhi	r2,129
  806dbc:	10959e04 	addi	r2,r2,22136
  806dc0:	11000017 	ldw	r4,0(r2)
  806dc4:	01402034 	movhi	r5,128
  806dc8:	295afe04 	addi	r5,r5,27640
  806dcc:	080721c1 	jmpi	80721c <_fwalk>

00806dd0 <__fp_unlock_all>:
  806dd0:	00802074 	movhi	r2,129
  806dd4:	10959e04 	addi	r2,r2,22136
  806dd8:	11000017 	ldw	r4,0(r2)
  806ddc:	01402034 	movhi	r5,128
  806de0:	295a9204 	addi	r5,r5,27208
  806de4:	080721c1 	jmpi	80721c <_fwalk>

00806de8 <_malloc_trim_r>:
  806de8:	defffb04 	addi	sp,sp,-20
  806dec:	dcc00315 	stw	r19,12(sp)
  806df0:	04c02074 	movhi	r19,129
  806df4:	dc800215 	stw	r18,8(sp)
  806df8:	dc400115 	stw	r17,4(sp)
  806dfc:	dc000015 	stw	r16,0(sp)
  806e00:	dfc00415 	stw	ra,16(sp)
  806e04:	2821883a 	mov	r16,r5
  806e08:	9ccfa004 	addi	r19,r19,16000
  806e0c:	2025883a 	mov	r18,r4
  806e10:	080f97c0 	call	80f97c <__malloc_lock>
  806e14:	98800217 	ldw	r2,8(r19)
  806e18:	14400117 	ldw	r17,4(r2)
  806e1c:	00bfff04 	movi	r2,-4
  806e20:	88a2703a 	and	r17,r17,r2
  806e24:	8c21c83a 	sub	r16,r17,r16
  806e28:	8403fbc4 	addi	r16,r16,4079
  806e2c:	8020d33a 	srli	r16,r16,12
  806e30:	0083ffc4 	movi	r2,4095
  806e34:	843fffc4 	addi	r16,r16,-1
  806e38:	8020933a 	slli	r16,r16,12
  806e3c:	1400060e 	bge	r2,r16,806e58 <_malloc_trim_r+0x70>
  806e40:	000b883a 	mov	r5,zero
  806e44:	9009883a 	mov	r4,r18
  806e48:	080920c0 	call	80920c <_sbrk_r>
  806e4c:	98c00217 	ldw	r3,8(r19)
  806e50:	1c47883a 	add	r3,r3,r17
  806e54:	10c00a26 	beq	r2,r3,806e80 <_malloc_trim_r+0x98>
  806e58:	9009883a 	mov	r4,r18
  806e5c:	080f9a00 	call	80f9a0 <__malloc_unlock>
  806e60:	0005883a 	mov	r2,zero
  806e64:	dfc00417 	ldw	ra,16(sp)
  806e68:	dcc00317 	ldw	r19,12(sp)
  806e6c:	dc800217 	ldw	r18,8(sp)
  806e70:	dc400117 	ldw	r17,4(sp)
  806e74:	dc000017 	ldw	r16,0(sp)
  806e78:	dec00504 	addi	sp,sp,20
  806e7c:	f800283a 	ret
  806e80:	040bc83a 	sub	r5,zero,r16
  806e84:	9009883a 	mov	r4,r18
  806e88:	080920c0 	call	80920c <_sbrk_r>
  806e8c:	00ffffc4 	movi	r3,-1
  806e90:	10c00d26 	beq	r2,r3,806ec8 <_malloc_trim_r+0xe0>
  806e94:	00c02074 	movhi	r3,129
  806e98:	18dd4704 	addi	r3,r3,29980
  806e9c:	18800017 	ldw	r2,0(r3)
  806ea0:	99000217 	ldw	r4,8(r19)
  806ea4:	8c23c83a 	sub	r17,r17,r16
  806ea8:	8c400054 	ori	r17,r17,1
  806eac:	1421c83a 	sub	r16,r2,r16
  806eb0:	24400115 	stw	r17,4(r4)
  806eb4:	9009883a 	mov	r4,r18
  806eb8:	1c000015 	stw	r16,0(r3)
  806ebc:	080f9a00 	call	80f9a0 <__malloc_unlock>
  806ec0:	00800044 	movi	r2,1
  806ec4:	003fe706 	br	806e64 <__alt_mem_onchip_mem+0xff786e64>
  806ec8:	000b883a 	mov	r5,zero
  806ecc:	9009883a 	mov	r4,r18
  806ed0:	080920c0 	call	80920c <_sbrk_r>
  806ed4:	99000217 	ldw	r4,8(r19)
  806ed8:	014003c4 	movi	r5,15
  806edc:	1107c83a 	sub	r3,r2,r4
  806ee0:	28ffdd0e 	bge	r5,r3,806e58 <__alt_mem_onchip_mem+0xff786e58>
  806ee4:	01402074 	movhi	r5,129
  806ee8:	2955a004 	addi	r5,r5,22144
  806eec:	29400017 	ldw	r5,0(r5)
  806ef0:	18c00054 	ori	r3,r3,1
  806ef4:	20c00115 	stw	r3,4(r4)
  806ef8:	00c02074 	movhi	r3,129
  806efc:	1145c83a 	sub	r2,r2,r5
  806f00:	18dd4704 	addi	r3,r3,29980
  806f04:	18800015 	stw	r2,0(r3)
  806f08:	003fd306 	br	806e58 <__alt_mem_onchip_mem+0xff786e58>

00806f0c <_free_r>:
  806f0c:	28004126 	beq	r5,zero,807014 <_free_r+0x108>
  806f10:	defffd04 	addi	sp,sp,-12
  806f14:	dc400115 	stw	r17,4(sp)
  806f18:	dc000015 	stw	r16,0(sp)
  806f1c:	2023883a 	mov	r17,r4
  806f20:	2821883a 	mov	r16,r5
  806f24:	dfc00215 	stw	ra,8(sp)
  806f28:	080f97c0 	call	80f97c <__malloc_lock>
  806f2c:	81ffff17 	ldw	r7,-4(r16)
  806f30:	00bfff84 	movi	r2,-2
  806f34:	01002074 	movhi	r4,129
  806f38:	81bffe04 	addi	r6,r16,-8
  806f3c:	3884703a 	and	r2,r7,r2
  806f40:	210fa004 	addi	r4,r4,16000
  806f44:	308b883a 	add	r5,r6,r2
  806f48:	2a400117 	ldw	r9,4(r5)
  806f4c:	22000217 	ldw	r8,8(r4)
  806f50:	00ffff04 	movi	r3,-4
  806f54:	48c6703a 	and	r3,r9,r3
  806f58:	2a005726 	beq	r5,r8,8070b8 <_free_r+0x1ac>
  806f5c:	28c00115 	stw	r3,4(r5)
  806f60:	39c0004c 	andi	r7,r7,1
  806f64:	3800091e 	bne	r7,zero,806f8c <_free_r+0x80>
  806f68:	823ffe17 	ldw	r8,-8(r16)
  806f6c:	22400204 	addi	r9,r4,8
  806f70:	320dc83a 	sub	r6,r6,r8
  806f74:	31c00217 	ldw	r7,8(r6)
  806f78:	1205883a 	add	r2,r2,r8
  806f7c:	3a406526 	beq	r7,r9,807114 <_free_r+0x208>
  806f80:	32000317 	ldw	r8,12(r6)
  806f84:	3a000315 	stw	r8,12(r7)
  806f88:	41c00215 	stw	r7,8(r8)
  806f8c:	28cf883a 	add	r7,r5,r3
  806f90:	39c00117 	ldw	r7,4(r7)
  806f94:	39c0004c 	andi	r7,r7,1
  806f98:	38003a26 	beq	r7,zero,807084 <_free_r+0x178>
  806f9c:	10c00054 	ori	r3,r2,1
  806fa0:	30c00115 	stw	r3,4(r6)
  806fa4:	3087883a 	add	r3,r6,r2
  806fa8:	18800015 	stw	r2,0(r3)
  806fac:	00c07fc4 	movi	r3,511
  806fb0:	18801936 	bltu	r3,r2,807018 <_free_r+0x10c>
  806fb4:	1004d0fa 	srli	r2,r2,3
  806fb8:	01c00044 	movi	r7,1
  806fbc:	21400117 	ldw	r5,4(r4)
  806fc0:	10c00044 	addi	r3,r2,1
  806fc4:	18c7883a 	add	r3,r3,r3
  806fc8:	1005d0ba 	srai	r2,r2,2
  806fcc:	18c7883a 	add	r3,r3,r3
  806fd0:	18c7883a 	add	r3,r3,r3
  806fd4:	1907883a 	add	r3,r3,r4
  806fd8:	3884983a 	sll	r2,r7,r2
  806fdc:	19c00017 	ldw	r7,0(r3)
  806fe0:	1a3ffe04 	addi	r8,r3,-8
  806fe4:	1144b03a 	or	r2,r2,r5
  806fe8:	32000315 	stw	r8,12(r6)
  806fec:	31c00215 	stw	r7,8(r6)
  806ff0:	20800115 	stw	r2,4(r4)
  806ff4:	19800015 	stw	r6,0(r3)
  806ff8:	39800315 	stw	r6,12(r7)
  806ffc:	8809883a 	mov	r4,r17
  807000:	dfc00217 	ldw	ra,8(sp)
  807004:	dc400117 	ldw	r17,4(sp)
  807008:	dc000017 	ldw	r16,0(sp)
  80700c:	dec00304 	addi	sp,sp,12
  807010:	080f9a01 	jmpi	80f9a0 <__malloc_unlock>
  807014:	f800283a 	ret
  807018:	100ad27a 	srli	r5,r2,9
  80701c:	00c00104 	movi	r3,4
  807020:	19404a36 	bltu	r3,r5,80714c <_free_r+0x240>
  807024:	100ad1ba 	srli	r5,r2,6
  807028:	28c00e44 	addi	r3,r5,57
  80702c:	18c7883a 	add	r3,r3,r3
  807030:	29400e04 	addi	r5,r5,56
  807034:	18c7883a 	add	r3,r3,r3
  807038:	18c7883a 	add	r3,r3,r3
  80703c:	1909883a 	add	r4,r3,r4
  807040:	20c00017 	ldw	r3,0(r4)
  807044:	01c02074 	movhi	r7,129
  807048:	213ffe04 	addi	r4,r4,-8
  80704c:	39cfa004 	addi	r7,r7,16000
  807050:	20c04426 	beq	r4,r3,807164 <_free_r+0x258>
  807054:	01ffff04 	movi	r7,-4
  807058:	19400117 	ldw	r5,4(r3)
  80705c:	29ca703a 	and	r5,r5,r7
  807060:	1140022e 	bgeu	r2,r5,80706c <_free_r+0x160>
  807064:	18c00217 	ldw	r3,8(r3)
  807068:	20fffb1e 	bne	r4,r3,807058 <__alt_mem_onchip_mem+0xff787058>
  80706c:	19000317 	ldw	r4,12(r3)
  807070:	31000315 	stw	r4,12(r6)
  807074:	30c00215 	stw	r3,8(r6)
  807078:	21800215 	stw	r6,8(r4)
  80707c:	19800315 	stw	r6,12(r3)
  807080:	003fde06 	br	806ffc <__alt_mem_onchip_mem+0xff786ffc>
  807084:	29c00217 	ldw	r7,8(r5)
  807088:	10c5883a 	add	r2,r2,r3
  80708c:	00c02074 	movhi	r3,129
  807090:	18cfa204 	addi	r3,r3,16008
  807094:	38c03b26 	beq	r7,r3,807184 <_free_r+0x278>
  807098:	2a000317 	ldw	r8,12(r5)
  80709c:	11400054 	ori	r5,r2,1
  8070a0:	3087883a 	add	r3,r6,r2
  8070a4:	3a000315 	stw	r8,12(r7)
  8070a8:	41c00215 	stw	r7,8(r8)
  8070ac:	31400115 	stw	r5,4(r6)
  8070b0:	18800015 	stw	r2,0(r3)
  8070b4:	003fbd06 	br	806fac <__alt_mem_onchip_mem+0xff786fac>
  8070b8:	39c0004c 	andi	r7,r7,1
  8070bc:	10c5883a 	add	r2,r2,r3
  8070c0:	3800071e 	bne	r7,zero,8070e0 <_free_r+0x1d4>
  8070c4:	81fffe17 	ldw	r7,-8(r16)
  8070c8:	31cdc83a 	sub	r6,r6,r7
  8070cc:	30c00317 	ldw	r3,12(r6)
  8070d0:	31400217 	ldw	r5,8(r6)
  8070d4:	11c5883a 	add	r2,r2,r7
  8070d8:	28c00315 	stw	r3,12(r5)
  8070dc:	19400215 	stw	r5,8(r3)
  8070e0:	10c00054 	ori	r3,r2,1
  8070e4:	30c00115 	stw	r3,4(r6)
  8070e8:	00c02074 	movhi	r3,129
  8070ec:	18d5a104 	addi	r3,r3,22148
  8070f0:	18c00017 	ldw	r3,0(r3)
  8070f4:	21800215 	stw	r6,8(r4)
  8070f8:	10ffc036 	bltu	r2,r3,806ffc <__alt_mem_onchip_mem+0xff786ffc>
  8070fc:	00802074 	movhi	r2,129
  807100:	109d3e04 	addi	r2,r2,29944
  807104:	11400017 	ldw	r5,0(r2)
  807108:	8809883a 	mov	r4,r17
  80710c:	0806de80 	call	806de8 <_malloc_trim_r>
  807110:	003fba06 	br	806ffc <__alt_mem_onchip_mem+0xff786ffc>
  807114:	28c9883a 	add	r4,r5,r3
  807118:	21000117 	ldw	r4,4(r4)
  80711c:	2100004c 	andi	r4,r4,1
  807120:	2000391e 	bne	r4,zero,807208 <_free_r+0x2fc>
  807124:	29c00217 	ldw	r7,8(r5)
  807128:	29000317 	ldw	r4,12(r5)
  80712c:	1885883a 	add	r2,r3,r2
  807130:	10c00054 	ori	r3,r2,1
  807134:	39000315 	stw	r4,12(r7)
  807138:	21c00215 	stw	r7,8(r4)
  80713c:	30c00115 	stw	r3,4(r6)
  807140:	308d883a 	add	r6,r6,r2
  807144:	30800015 	stw	r2,0(r6)
  807148:	003fac06 	br	806ffc <__alt_mem_onchip_mem+0xff786ffc>
  80714c:	00c00504 	movi	r3,20
  807150:	19401536 	bltu	r3,r5,8071a8 <_free_r+0x29c>
  807154:	28c01704 	addi	r3,r5,92
  807158:	18c7883a 	add	r3,r3,r3
  80715c:	294016c4 	addi	r5,r5,91
  807160:	003fb406 	br	807034 <__alt_mem_onchip_mem+0xff787034>
  807164:	280bd0ba 	srai	r5,r5,2
  807168:	00c00044 	movi	r3,1
  80716c:	38800117 	ldw	r2,4(r7)
  807170:	194a983a 	sll	r5,r3,r5
  807174:	2007883a 	mov	r3,r4
  807178:	2884b03a 	or	r2,r5,r2
  80717c:	38800115 	stw	r2,4(r7)
  807180:	003fbb06 	br	807070 <__alt_mem_onchip_mem+0xff787070>
  807184:	21800515 	stw	r6,20(r4)
  807188:	21800415 	stw	r6,16(r4)
  80718c:	10c00054 	ori	r3,r2,1
  807190:	31c00315 	stw	r7,12(r6)
  807194:	31c00215 	stw	r7,8(r6)
  807198:	30c00115 	stw	r3,4(r6)
  80719c:	308d883a 	add	r6,r6,r2
  8071a0:	30800015 	stw	r2,0(r6)
  8071a4:	003f9506 	br	806ffc <__alt_mem_onchip_mem+0xff786ffc>
  8071a8:	00c01504 	movi	r3,84
  8071ac:	19400536 	bltu	r3,r5,8071c4 <_free_r+0x2b8>
  8071b0:	100ad33a 	srli	r5,r2,12
  8071b4:	28c01bc4 	addi	r3,r5,111
  8071b8:	18c7883a 	add	r3,r3,r3
  8071bc:	29401b84 	addi	r5,r5,110
  8071c0:	003f9c06 	br	807034 <__alt_mem_onchip_mem+0xff787034>
  8071c4:	00c05504 	movi	r3,340
  8071c8:	19400536 	bltu	r3,r5,8071e0 <_free_r+0x2d4>
  8071cc:	100ad3fa 	srli	r5,r2,15
  8071d0:	28c01e04 	addi	r3,r5,120
  8071d4:	18c7883a 	add	r3,r3,r3
  8071d8:	29401dc4 	addi	r5,r5,119
  8071dc:	003f9506 	br	807034 <__alt_mem_onchip_mem+0xff787034>
  8071e0:	00c15504 	movi	r3,1364
  8071e4:	19400536 	bltu	r3,r5,8071fc <_free_r+0x2f0>
  8071e8:	100ad4ba 	srli	r5,r2,18
  8071ec:	28c01f44 	addi	r3,r5,125
  8071f0:	18c7883a 	add	r3,r3,r3
  8071f4:	29401f04 	addi	r5,r5,124
  8071f8:	003f8e06 	br	807034 <__alt_mem_onchip_mem+0xff787034>
  8071fc:	00c03f84 	movi	r3,254
  807200:	01401f84 	movi	r5,126
  807204:	003f8b06 	br	807034 <__alt_mem_onchip_mem+0xff787034>
  807208:	10c00054 	ori	r3,r2,1
  80720c:	30c00115 	stw	r3,4(r6)
  807210:	308d883a 	add	r6,r6,r2
  807214:	30800015 	stw	r2,0(r6)
  807218:	003f7806 	br	806ffc <__alt_mem_onchip_mem+0xff786ffc>

0080721c <_fwalk>:
  80721c:	defff704 	addi	sp,sp,-36
  807220:	dd000415 	stw	r20,16(sp)
  807224:	dfc00815 	stw	ra,32(sp)
  807228:	ddc00715 	stw	r23,28(sp)
  80722c:	dd800615 	stw	r22,24(sp)
  807230:	dd400515 	stw	r21,20(sp)
  807234:	dcc00315 	stw	r19,12(sp)
  807238:	dc800215 	stw	r18,8(sp)
  80723c:	dc400115 	stw	r17,4(sp)
  807240:	dc000015 	stw	r16,0(sp)
  807244:	2500b804 	addi	r20,r4,736
  807248:	a0002326 	beq	r20,zero,8072d8 <_fwalk+0xbc>
  80724c:	282b883a 	mov	r21,r5
  807250:	002f883a 	mov	r23,zero
  807254:	05800044 	movi	r22,1
  807258:	04ffffc4 	movi	r19,-1
  80725c:	a4400117 	ldw	r17,4(r20)
  807260:	a4800217 	ldw	r18,8(r20)
  807264:	8c7fffc4 	addi	r17,r17,-1
  807268:	88000d16 	blt	r17,zero,8072a0 <_fwalk+0x84>
  80726c:	94000304 	addi	r16,r18,12
  807270:	94800384 	addi	r18,r18,14
  807274:	8080000b 	ldhu	r2,0(r16)
  807278:	8c7fffc4 	addi	r17,r17,-1
  80727c:	813ffd04 	addi	r4,r16,-12
  807280:	b080042e 	bgeu	r22,r2,807294 <_fwalk+0x78>
  807284:	9080000f 	ldh	r2,0(r18)
  807288:	14c00226 	beq	r2,r19,807294 <_fwalk+0x78>
  80728c:	a83ee83a 	callr	r21
  807290:	b8aeb03a 	or	r23,r23,r2
  807294:	84001a04 	addi	r16,r16,104
  807298:	94801a04 	addi	r18,r18,104
  80729c:	8cfff51e 	bne	r17,r19,807274 <__alt_mem_onchip_mem+0xff787274>
  8072a0:	a5000017 	ldw	r20,0(r20)
  8072a4:	a03fed1e 	bne	r20,zero,80725c <__alt_mem_onchip_mem+0xff78725c>
  8072a8:	b805883a 	mov	r2,r23
  8072ac:	dfc00817 	ldw	ra,32(sp)
  8072b0:	ddc00717 	ldw	r23,28(sp)
  8072b4:	dd800617 	ldw	r22,24(sp)
  8072b8:	dd400517 	ldw	r21,20(sp)
  8072bc:	dd000417 	ldw	r20,16(sp)
  8072c0:	dcc00317 	ldw	r19,12(sp)
  8072c4:	dc800217 	ldw	r18,8(sp)
  8072c8:	dc400117 	ldw	r17,4(sp)
  8072cc:	dc000017 	ldw	r16,0(sp)
  8072d0:	dec00904 	addi	sp,sp,36
  8072d4:	f800283a 	ret
  8072d8:	002f883a 	mov	r23,zero
  8072dc:	003ff206 	br	8072a8 <__alt_mem_onchip_mem+0xff7872a8>

008072e0 <_fwalk_reent>:
  8072e0:	defff704 	addi	sp,sp,-36
  8072e4:	dd000415 	stw	r20,16(sp)
  8072e8:	dfc00815 	stw	ra,32(sp)
  8072ec:	ddc00715 	stw	r23,28(sp)
  8072f0:	dd800615 	stw	r22,24(sp)
  8072f4:	dd400515 	stw	r21,20(sp)
  8072f8:	dcc00315 	stw	r19,12(sp)
  8072fc:	dc800215 	stw	r18,8(sp)
  807300:	dc400115 	stw	r17,4(sp)
  807304:	dc000015 	stw	r16,0(sp)
  807308:	2500b804 	addi	r20,r4,736
  80730c:	a0002326 	beq	r20,zero,80739c <_fwalk_reent+0xbc>
  807310:	282b883a 	mov	r21,r5
  807314:	2027883a 	mov	r19,r4
  807318:	002f883a 	mov	r23,zero
  80731c:	05800044 	movi	r22,1
  807320:	04bfffc4 	movi	r18,-1
  807324:	a4400117 	ldw	r17,4(r20)
  807328:	a4000217 	ldw	r16,8(r20)
  80732c:	8c7fffc4 	addi	r17,r17,-1
  807330:	88000c16 	blt	r17,zero,807364 <_fwalk_reent+0x84>
  807334:	84000304 	addi	r16,r16,12
  807338:	8080000b 	ldhu	r2,0(r16)
  80733c:	8c7fffc4 	addi	r17,r17,-1
  807340:	817ffd04 	addi	r5,r16,-12
  807344:	b080052e 	bgeu	r22,r2,80735c <_fwalk_reent+0x7c>
  807348:	8080008f 	ldh	r2,2(r16)
  80734c:	9809883a 	mov	r4,r19
  807350:	14800226 	beq	r2,r18,80735c <_fwalk_reent+0x7c>
  807354:	a83ee83a 	callr	r21
  807358:	b8aeb03a 	or	r23,r23,r2
  80735c:	84001a04 	addi	r16,r16,104
  807360:	8cbff51e 	bne	r17,r18,807338 <__alt_mem_onchip_mem+0xff787338>
  807364:	a5000017 	ldw	r20,0(r20)
  807368:	a03fee1e 	bne	r20,zero,807324 <__alt_mem_onchip_mem+0xff787324>
  80736c:	b805883a 	mov	r2,r23
  807370:	dfc00817 	ldw	ra,32(sp)
  807374:	ddc00717 	ldw	r23,28(sp)
  807378:	dd800617 	ldw	r22,24(sp)
  80737c:	dd400517 	ldw	r21,20(sp)
  807380:	dd000417 	ldw	r20,16(sp)
  807384:	dcc00317 	ldw	r19,12(sp)
  807388:	dc800217 	ldw	r18,8(sp)
  80738c:	dc400117 	ldw	r17,4(sp)
  807390:	dc000017 	ldw	r16,0(sp)
  807394:	dec00904 	addi	sp,sp,36
  807398:	f800283a 	ret
  80739c:	002f883a 	mov	r23,zero
  8073a0:	003ff206 	br	80736c <__alt_mem_onchip_mem+0xff78736c>

008073a4 <_setlocale_r>:
  8073a4:	30001b26 	beq	r6,zero,807414 <_setlocale_r+0x70>
  8073a8:	01402074 	movhi	r5,129
  8073ac:	defffe04 	addi	sp,sp,-8
  8073b0:	294d3404 	addi	r5,r5,13520
  8073b4:	3009883a 	mov	r4,r6
  8073b8:	dc000015 	stw	r16,0(sp)
  8073bc:	dfc00115 	stw	ra,4(sp)
  8073c0:	3021883a 	mov	r16,r6
  8073c4:	080939c0 	call	80939c <strcmp>
  8073c8:	1000061e 	bne	r2,zero,8073e4 <_setlocale_r+0x40>
  8073cc:	00802074 	movhi	r2,129
  8073d0:	108d3304 	addi	r2,r2,13516
  8073d4:	dfc00117 	ldw	ra,4(sp)
  8073d8:	dc000017 	ldw	r16,0(sp)
  8073dc:	dec00204 	addi	sp,sp,8
  8073e0:	f800283a 	ret
  8073e4:	01402074 	movhi	r5,129
  8073e8:	294d3304 	addi	r5,r5,13516
  8073ec:	8009883a 	mov	r4,r16
  8073f0:	080939c0 	call	80939c <strcmp>
  8073f4:	103ff526 	beq	r2,zero,8073cc <__alt_mem_onchip_mem+0xff7873cc>
  8073f8:	01402074 	movhi	r5,129
  8073fc:	294d1e04 	addi	r5,r5,13432
  807400:	8009883a 	mov	r4,r16
  807404:	080939c0 	call	80939c <strcmp>
  807408:	103ff026 	beq	r2,zero,8073cc <__alt_mem_onchip_mem+0xff7873cc>
  80740c:	0005883a 	mov	r2,zero
  807410:	003ff006 	br	8073d4 <__alt_mem_onchip_mem+0xff7873d4>
  807414:	00802074 	movhi	r2,129
  807418:	108d3304 	addi	r2,r2,13516
  80741c:	f800283a 	ret

00807420 <__locale_charset>:
  807420:	00802074 	movhi	r2,129
  807424:	108f8a04 	addi	r2,r2,15912
  807428:	f800283a 	ret

0080742c <__locale_mb_cur_max>:
  80742c:	00802074 	movhi	r2,129
  807430:	10959f04 	addi	r2,r2,22140
  807434:	10800017 	ldw	r2,0(r2)
  807438:	f800283a 	ret

0080743c <__locale_msgcharset>:
  80743c:	00802074 	movhi	r2,129
  807440:	108f8204 	addi	r2,r2,15880
  807444:	f800283a 	ret

00807448 <__locale_cjk_lang>:
  807448:	0005883a 	mov	r2,zero
  80744c:	f800283a 	ret

00807450 <_localeconv_r>:
  807450:	00802074 	movhi	r2,129
  807454:	108f9204 	addi	r2,r2,15944
  807458:	f800283a 	ret

0080745c <setlocale>:
  80745c:	00802074 	movhi	r2,129
  807460:	10959e04 	addi	r2,r2,22136
  807464:	280d883a 	mov	r6,r5
  807468:	200b883a 	mov	r5,r4
  80746c:	11000017 	ldw	r4,0(r2)
  807470:	08073a41 	jmpi	8073a4 <_setlocale_r>

00807474 <localeconv>:
  807474:	00802074 	movhi	r2,129
  807478:	108f9204 	addi	r2,r2,15944
  80747c:	f800283a 	ret

00807480 <__smakebuf_r>:
  807480:	2880030b 	ldhu	r2,12(r5)
  807484:	10c0008c 	andi	r3,r2,2
  807488:	1800411e 	bne	r3,zero,807590 <__smakebuf_r+0x110>
  80748c:	deffec04 	addi	sp,sp,-80
  807490:	dc000f15 	stw	r16,60(sp)
  807494:	2821883a 	mov	r16,r5
  807498:	2940038f 	ldh	r5,14(r5)
  80749c:	dc401015 	stw	r17,64(sp)
  8074a0:	dfc01315 	stw	ra,76(sp)
  8074a4:	dcc01215 	stw	r19,72(sp)
  8074a8:	dc801115 	stw	r18,68(sp)
  8074ac:	2023883a 	mov	r17,r4
  8074b0:	28001c16 	blt	r5,zero,807524 <__smakebuf_r+0xa4>
  8074b4:	d80d883a 	mov	r6,sp
  8074b8:	080afdc0 	call	80afdc <_fstat_r>
  8074bc:	10001816 	blt	r2,zero,807520 <__smakebuf_r+0xa0>
  8074c0:	d8800117 	ldw	r2,4(sp)
  8074c4:	00e00014 	movui	r3,32768
  8074c8:	10bc000c 	andi	r2,r2,61440
  8074cc:	14c80020 	cmpeqi	r19,r2,8192
  8074d0:	10c03726 	beq	r2,r3,8075b0 <__smakebuf_r+0x130>
  8074d4:	80c0030b 	ldhu	r3,12(r16)
  8074d8:	18c20014 	ori	r3,r3,2048
  8074dc:	80c0030d 	sth	r3,12(r16)
  8074e0:	00c80004 	movi	r3,8192
  8074e4:	10c0521e 	bne	r2,r3,807630 <__smakebuf_r+0x1b0>
  8074e8:	8140038f 	ldh	r5,14(r16)
  8074ec:	8809883a 	mov	r4,r17
  8074f0:	080b4f40 	call	80b4f4 <_isatty_r>
  8074f4:	10004c26 	beq	r2,zero,807628 <__smakebuf_r+0x1a8>
  8074f8:	8080030b 	ldhu	r2,12(r16)
  8074fc:	80c010c4 	addi	r3,r16,67
  807500:	80c00015 	stw	r3,0(r16)
  807504:	10800054 	ori	r2,r2,1
  807508:	8080030d 	sth	r2,12(r16)
  80750c:	00800044 	movi	r2,1
  807510:	80c00415 	stw	r3,16(r16)
  807514:	80800515 	stw	r2,20(r16)
  807518:	04810004 	movi	r18,1024
  80751c:	00000706 	br	80753c <__smakebuf_r+0xbc>
  807520:	8080030b 	ldhu	r2,12(r16)
  807524:	10c0200c 	andi	r3,r2,128
  807528:	18001f1e 	bne	r3,zero,8075a8 <__smakebuf_r+0x128>
  80752c:	04810004 	movi	r18,1024
  807530:	10820014 	ori	r2,r2,2048
  807534:	8080030d 	sth	r2,12(r16)
  807538:	0027883a 	mov	r19,zero
  80753c:	900b883a 	mov	r5,r18
  807540:	8809883a 	mov	r4,r17
  807544:	080763c0 	call	80763c <_malloc_r>
  807548:	10002c26 	beq	r2,zero,8075fc <__smakebuf_r+0x17c>
  80754c:	80c0030b 	ldhu	r3,12(r16)
  807550:	01002034 	movhi	r4,128
  807554:	211a9404 	addi	r4,r4,27216
  807558:	89000f15 	stw	r4,60(r17)
  80755c:	18c02014 	ori	r3,r3,128
  807560:	80c0030d 	sth	r3,12(r16)
  807564:	80800015 	stw	r2,0(r16)
  807568:	80800415 	stw	r2,16(r16)
  80756c:	84800515 	stw	r18,20(r16)
  807570:	98001a1e 	bne	r19,zero,8075dc <__smakebuf_r+0x15c>
  807574:	dfc01317 	ldw	ra,76(sp)
  807578:	dcc01217 	ldw	r19,72(sp)
  80757c:	dc801117 	ldw	r18,68(sp)
  807580:	dc401017 	ldw	r17,64(sp)
  807584:	dc000f17 	ldw	r16,60(sp)
  807588:	dec01404 	addi	sp,sp,80
  80758c:	f800283a 	ret
  807590:	288010c4 	addi	r2,r5,67
  807594:	28800015 	stw	r2,0(r5)
  807598:	28800415 	stw	r2,16(r5)
  80759c:	00800044 	movi	r2,1
  8075a0:	28800515 	stw	r2,20(r5)
  8075a4:	f800283a 	ret
  8075a8:	04801004 	movi	r18,64
  8075ac:	003fe006 	br	807530 <__alt_mem_onchip_mem+0xff787530>
  8075b0:	81000a17 	ldw	r4,40(r16)
  8075b4:	00c02074 	movhi	r3,129
  8075b8:	18e4ce04 	addi	r3,r3,-27848
  8075bc:	20ffc51e 	bne	r4,r3,8074d4 <__alt_mem_onchip_mem+0xff7874d4>
  8075c0:	8080030b 	ldhu	r2,12(r16)
  8075c4:	04810004 	movi	r18,1024
  8075c8:	84801315 	stw	r18,76(r16)
  8075cc:	1484b03a 	or	r2,r2,r18
  8075d0:	8080030d 	sth	r2,12(r16)
  8075d4:	0027883a 	mov	r19,zero
  8075d8:	003fd806 	br	80753c <__alt_mem_onchip_mem+0xff78753c>
  8075dc:	8140038f 	ldh	r5,14(r16)
  8075e0:	8809883a 	mov	r4,r17
  8075e4:	080b4f40 	call	80b4f4 <_isatty_r>
  8075e8:	103fe226 	beq	r2,zero,807574 <__alt_mem_onchip_mem+0xff787574>
  8075ec:	8080030b 	ldhu	r2,12(r16)
  8075f0:	10800054 	ori	r2,r2,1
  8075f4:	8080030d 	sth	r2,12(r16)
  8075f8:	003fde06 	br	807574 <__alt_mem_onchip_mem+0xff787574>
  8075fc:	8080030b 	ldhu	r2,12(r16)
  807600:	10c0800c 	andi	r3,r2,512
  807604:	183fdb1e 	bne	r3,zero,807574 <__alt_mem_onchip_mem+0xff787574>
  807608:	10800094 	ori	r2,r2,2
  80760c:	80c010c4 	addi	r3,r16,67
  807610:	8080030d 	sth	r2,12(r16)
  807614:	00800044 	movi	r2,1
  807618:	80c00015 	stw	r3,0(r16)
  80761c:	80c00415 	stw	r3,16(r16)
  807620:	80800515 	stw	r2,20(r16)
  807624:	003fd306 	br	807574 <__alt_mem_onchip_mem+0xff787574>
  807628:	04810004 	movi	r18,1024
  80762c:	003fc306 	br	80753c <__alt_mem_onchip_mem+0xff78753c>
  807630:	0027883a 	mov	r19,zero
  807634:	04810004 	movi	r18,1024
  807638:	003fc006 	br	80753c <__alt_mem_onchip_mem+0xff78753c>

0080763c <_malloc_r>:
  80763c:	defff504 	addi	sp,sp,-44
  807640:	dc800315 	stw	r18,12(sp)
  807644:	dfc00a15 	stw	ra,40(sp)
  807648:	df000915 	stw	fp,36(sp)
  80764c:	ddc00815 	stw	r23,32(sp)
  807650:	dd800715 	stw	r22,28(sp)
  807654:	dd400615 	stw	r21,24(sp)
  807658:	dd000515 	stw	r20,20(sp)
  80765c:	dcc00415 	stw	r19,16(sp)
  807660:	dc400215 	stw	r17,8(sp)
  807664:	dc000115 	stw	r16,4(sp)
  807668:	288002c4 	addi	r2,r5,11
  80766c:	00c00584 	movi	r3,22
  807670:	2025883a 	mov	r18,r4
  807674:	18807f2e 	bgeu	r3,r2,807874 <_malloc_r+0x238>
  807678:	047ffe04 	movi	r17,-8
  80767c:	1462703a 	and	r17,r2,r17
  807680:	8800a316 	blt	r17,zero,807910 <_malloc_r+0x2d4>
  807684:	8940a236 	bltu	r17,r5,807910 <_malloc_r+0x2d4>
  807688:	080f97c0 	call	80f97c <__malloc_lock>
  80768c:	00807dc4 	movi	r2,503
  807690:	1441e92e 	bgeu	r2,r17,807e38 <_malloc_r+0x7fc>
  807694:	8804d27a 	srli	r2,r17,9
  807698:	1000a126 	beq	r2,zero,807920 <_malloc_r+0x2e4>
  80769c:	00c00104 	movi	r3,4
  8076a0:	18811e36 	bltu	r3,r2,807b1c <_malloc_r+0x4e0>
  8076a4:	8804d1ba 	srli	r2,r17,6
  8076a8:	12000e44 	addi	r8,r2,57
  8076ac:	11c00e04 	addi	r7,r2,56
  8076b0:	4209883a 	add	r4,r8,r8
  8076b4:	04c02074 	movhi	r19,129
  8076b8:	2109883a 	add	r4,r4,r4
  8076bc:	9ccfa004 	addi	r19,r19,16000
  8076c0:	2109883a 	add	r4,r4,r4
  8076c4:	9909883a 	add	r4,r19,r4
  8076c8:	24000117 	ldw	r16,4(r4)
  8076cc:	213ffe04 	addi	r4,r4,-8
  8076d0:	24009726 	beq	r4,r16,807930 <_malloc_r+0x2f4>
  8076d4:	80800117 	ldw	r2,4(r16)
  8076d8:	01bfff04 	movi	r6,-4
  8076dc:	014003c4 	movi	r5,15
  8076e0:	1184703a 	and	r2,r2,r6
  8076e4:	1447c83a 	sub	r3,r2,r17
  8076e8:	28c00716 	blt	r5,r3,807708 <_malloc_r+0xcc>
  8076ec:	1800920e 	bge	r3,zero,807938 <_malloc_r+0x2fc>
  8076f0:	84000317 	ldw	r16,12(r16)
  8076f4:	24008e26 	beq	r4,r16,807930 <_malloc_r+0x2f4>
  8076f8:	80800117 	ldw	r2,4(r16)
  8076fc:	1184703a 	and	r2,r2,r6
  807700:	1447c83a 	sub	r3,r2,r17
  807704:	28fff90e 	bge	r5,r3,8076ec <__alt_mem_onchip_mem+0xff7876ec>
  807708:	3809883a 	mov	r4,r7
  80770c:	01802074 	movhi	r6,129
  807710:	9c000417 	ldw	r16,16(r19)
  807714:	318fa004 	addi	r6,r6,16000
  807718:	32000204 	addi	r8,r6,8
  80771c:	82013426 	beq	r16,r8,807bf0 <_malloc_r+0x5b4>
  807720:	80c00117 	ldw	r3,4(r16)
  807724:	00bfff04 	movi	r2,-4
  807728:	188e703a 	and	r7,r3,r2
  80772c:	3c45c83a 	sub	r2,r7,r17
  807730:	00c003c4 	movi	r3,15
  807734:	18811f16 	blt	r3,r2,807bb4 <_malloc_r+0x578>
  807738:	32000515 	stw	r8,20(r6)
  80773c:	32000415 	stw	r8,16(r6)
  807740:	10007f0e 	bge	r2,zero,807940 <_malloc_r+0x304>
  807744:	00807fc4 	movi	r2,511
  807748:	11c0fd36 	bltu	r2,r7,807b40 <_malloc_r+0x504>
  80774c:	3806d0fa 	srli	r3,r7,3
  807750:	01c00044 	movi	r7,1
  807754:	30800117 	ldw	r2,4(r6)
  807758:	19400044 	addi	r5,r3,1
  80775c:	294b883a 	add	r5,r5,r5
  807760:	1807d0ba 	srai	r3,r3,2
  807764:	294b883a 	add	r5,r5,r5
  807768:	294b883a 	add	r5,r5,r5
  80776c:	298b883a 	add	r5,r5,r6
  807770:	38c6983a 	sll	r3,r7,r3
  807774:	29c00017 	ldw	r7,0(r5)
  807778:	2a7ffe04 	addi	r9,r5,-8
  80777c:	1886b03a 	or	r3,r3,r2
  807780:	82400315 	stw	r9,12(r16)
  807784:	81c00215 	stw	r7,8(r16)
  807788:	30c00115 	stw	r3,4(r6)
  80778c:	2c000015 	stw	r16,0(r5)
  807790:	3c000315 	stw	r16,12(r7)
  807794:	2005d0ba 	srai	r2,r4,2
  807798:	01400044 	movi	r5,1
  80779c:	288a983a 	sll	r5,r5,r2
  8077a0:	19406f36 	bltu	r3,r5,807960 <_malloc_r+0x324>
  8077a4:	28c4703a 	and	r2,r5,r3
  8077a8:	10000a1e 	bne	r2,zero,8077d4 <_malloc_r+0x198>
  8077ac:	00bfff04 	movi	r2,-4
  8077b0:	294b883a 	add	r5,r5,r5
  8077b4:	2088703a 	and	r4,r4,r2
  8077b8:	28c4703a 	and	r2,r5,r3
  8077bc:	21000104 	addi	r4,r4,4
  8077c0:	1000041e 	bne	r2,zero,8077d4 <_malloc_r+0x198>
  8077c4:	294b883a 	add	r5,r5,r5
  8077c8:	28c4703a 	and	r2,r5,r3
  8077cc:	21000104 	addi	r4,r4,4
  8077d0:	103ffc26 	beq	r2,zero,8077c4 <__alt_mem_onchip_mem+0xff7877c4>
  8077d4:	02bfff04 	movi	r10,-4
  8077d8:	024003c4 	movi	r9,15
  8077dc:	21800044 	addi	r6,r4,1
  8077e0:	318d883a 	add	r6,r6,r6
  8077e4:	318d883a 	add	r6,r6,r6
  8077e8:	318d883a 	add	r6,r6,r6
  8077ec:	998d883a 	add	r6,r19,r6
  8077f0:	333ffe04 	addi	r12,r6,-8
  8077f4:	2017883a 	mov	r11,r4
  8077f8:	31800104 	addi	r6,r6,4
  8077fc:	34000017 	ldw	r16,0(r6)
  807800:	31fffd04 	addi	r7,r6,-12
  807804:	81c0041e 	bne	r16,r7,807818 <_malloc_r+0x1dc>
  807808:	0000fb06 	br	807bf8 <_malloc_r+0x5bc>
  80780c:	1801030e 	bge	r3,zero,807c1c <_malloc_r+0x5e0>
  807810:	84000317 	ldw	r16,12(r16)
  807814:	81c0f826 	beq	r16,r7,807bf8 <_malloc_r+0x5bc>
  807818:	80800117 	ldw	r2,4(r16)
  80781c:	1284703a 	and	r2,r2,r10
  807820:	1447c83a 	sub	r3,r2,r17
  807824:	48fff90e 	bge	r9,r3,80780c <__alt_mem_onchip_mem+0xff78780c>
  807828:	80800317 	ldw	r2,12(r16)
  80782c:	81000217 	ldw	r4,8(r16)
  807830:	89400054 	ori	r5,r17,1
  807834:	81400115 	stw	r5,4(r16)
  807838:	20800315 	stw	r2,12(r4)
  80783c:	11000215 	stw	r4,8(r2)
  807840:	8463883a 	add	r17,r16,r17
  807844:	9c400515 	stw	r17,20(r19)
  807848:	9c400415 	stw	r17,16(r19)
  80784c:	18800054 	ori	r2,r3,1
  807850:	88800115 	stw	r2,4(r17)
  807854:	8a000315 	stw	r8,12(r17)
  807858:	8a000215 	stw	r8,8(r17)
  80785c:	88e3883a 	add	r17,r17,r3
  807860:	88c00015 	stw	r3,0(r17)
  807864:	9009883a 	mov	r4,r18
  807868:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80786c:	80800204 	addi	r2,r16,8
  807870:	00001b06 	br	8078e0 <_malloc_r+0x2a4>
  807874:	04400404 	movi	r17,16
  807878:	89402536 	bltu	r17,r5,807910 <_malloc_r+0x2d4>
  80787c:	080f97c0 	call	80f97c <__malloc_lock>
  807880:	00800184 	movi	r2,6
  807884:	01000084 	movi	r4,2
  807888:	04c02074 	movhi	r19,129
  80788c:	1085883a 	add	r2,r2,r2
  807890:	9ccfa004 	addi	r19,r19,16000
  807894:	1085883a 	add	r2,r2,r2
  807898:	9885883a 	add	r2,r19,r2
  80789c:	14000117 	ldw	r16,4(r2)
  8078a0:	10fffe04 	addi	r3,r2,-8
  8078a4:	80c0d926 	beq	r16,r3,807c0c <_malloc_r+0x5d0>
  8078a8:	80c00117 	ldw	r3,4(r16)
  8078ac:	81000317 	ldw	r4,12(r16)
  8078b0:	00bfff04 	movi	r2,-4
  8078b4:	1884703a 	and	r2,r3,r2
  8078b8:	81400217 	ldw	r5,8(r16)
  8078bc:	8085883a 	add	r2,r16,r2
  8078c0:	10c00117 	ldw	r3,4(r2)
  8078c4:	29000315 	stw	r4,12(r5)
  8078c8:	21400215 	stw	r5,8(r4)
  8078cc:	18c00054 	ori	r3,r3,1
  8078d0:	10c00115 	stw	r3,4(r2)
  8078d4:	9009883a 	mov	r4,r18
  8078d8:	080f9a00 	call	80f9a0 <__malloc_unlock>
  8078dc:	80800204 	addi	r2,r16,8
  8078e0:	dfc00a17 	ldw	ra,40(sp)
  8078e4:	df000917 	ldw	fp,36(sp)
  8078e8:	ddc00817 	ldw	r23,32(sp)
  8078ec:	dd800717 	ldw	r22,28(sp)
  8078f0:	dd400617 	ldw	r21,24(sp)
  8078f4:	dd000517 	ldw	r20,20(sp)
  8078f8:	dcc00417 	ldw	r19,16(sp)
  8078fc:	dc800317 	ldw	r18,12(sp)
  807900:	dc400217 	ldw	r17,8(sp)
  807904:	dc000117 	ldw	r16,4(sp)
  807908:	dec00b04 	addi	sp,sp,44
  80790c:	f800283a 	ret
  807910:	00800304 	movi	r2,12
  807914:	90800015 	stw	r2,0(r18)
  807918:	0005883a 	mov	r2,zero
  80791c:	003ff006 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807920:	01002004 	movi	r4,128
  807924:	02001004 	movi	r8,64
  807928:	01c00fc4 	movi	r7,63
  80792c:	003f6106 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807930:	4009883a 	mov	r4,r8
  807934:	003f7506 	br	80770c <__alt_mem_onchip_mem+0xff78770c>
  807938:	81000317 	ldw	r4,12(r16)
  80793c:	003fde06 	br	8078b8 <__alt_mem_onchip_mem+0xff7878b8>
  807940:	81c5883a 	add	r2,r16,r7
  807944:	11400117 	ldw	r5,4(r2)
  807948:	9009883a 	mov	r4,r18
  80794c:	29400054 	ori	r5,r5,1
  807950:	11400115 	stw	r5,4(r2)
  807954:	080f9a00 	call	80f9a0 <__malloc_unlock>
  807958:	80800204 	addi	r2,r16,8
  80795c:	003fe006 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807960:	9c000217 	ldw	r16,8(r19)
  807964:	00bfff04 	movi	r2,-4
  807968:	85800117 	ldw	r22,4(r16)
  80796c:	b0ac703a 	and	r22,r22,r2
  807970:	b4400336 	bltu	r22,r17,807980 <_malloc_r+0x344>
  807974:	b445c83a 	sub	r2,r22,r17
  807978:	00c003c4 	movi	r3,15
  80797c:	18805d16 	blt	r3,r2,807af4 <_malloc_r+0x4b8>
  807980:	05c02074 	movhi	r23,129
  807984:	00802074 	movhi	r2,129
  807988:	109d3e04 	addi	r2,r2,29944
  80798c:	bdd5a004 	addi	r23,r23,22144
  807990:	15400017 	ldw	r21,0(r2)
  807994:	b8c00017 	ldw	r3,0(r23)
  807998:	00bfffc4 	movi	r2,-1
  80799c:	858d883a 	add	r6,r16,r22
  8079a0:	8d6b883a 	add	r21,r17,r21
  8079a4:	1880ea26 	beq	r3,r2,807d50 <_malloc_r+0x714>
  8079a8:	ad4403c4 	addi	r21,r21,4111
  8079ac:	00bc0004 	movi	r2,-4096
  8079b0:	a8aa703a 	and	r21,r21,r2
  8079b4:	a80b883a 	mov	r5,r21
  8079b8:	9009883a 	mov	r4,r18
  8079bc:	d9800015 	stw	r6,0(sp)
  8079c0:	080920c0 	call	80920c <_sbrk_r>
  8079c4:	1029883a 	mov	r20,r2
  8079c8:	00bfffc4 	movi	r2,-1
  8079cc:	d9800017 	ldw	r6,0(sp)
  8079d0:	a080e826 	beq	r20,r2,807d74 <_malloc_r+0x738>
  8079d4:	a180a636 	bltu	r20,r6,807c70 <_malloc_r+0x634>
  8079d8:	07002074 	movhi	fp,129
  8079dc:	e71d4704 	addi	fp,fp,29980
  8079e0:	e0800017 	ldw	r2,0(fp)
  8079e4:	a887883a 	add	r3,r21,r2
  8079e8:	e0c00015 	stw	r3,0(fp)
  8079ec:	3500e626 	beq	r6,r20,807d88 <_malloc_r+0x74c>
  8079f0:	b9000017 	ldw	r4,0(r23)
  8079f4:	00bfffc4 	movi	r2,-1
  8079f8:	2080ee26 	beq	r4,r2,807db4 <_malloc_r+0x778>
  8079fc:	a185c83a 	sub	r2,r20,r6
  807a00:	10c5883a 	add	r2,r2,r3
  807a04:	e0800015 	stw	r2,0(fp)
  807a08:	a0c001cc 	andi	r3,r20,7
  807a0c:	1800bc26 	beq	r3,zero,807d00 <_malloc_r+0x6c4>
  807a10:	a0e9c83a 	sub	r20,r20,r3
  807a14:	00840204 	movi	r2,4104
  807a18:	a5000204 	addi	r20,r20,8
  807a1c:	10c7c83a 	sub	r3,r2,r3
  807a20:	a545883a 	add	r2,r20,r21
  807a24:	1083ffcc 	andi	r2,r2,4095
  807a28:	18abc83a 	sub	r21,r3,r2
  807a2c:	a80b883a 	mov	r5,r21
  807a30:	9009883a 	mov	r4,r18
  807a34:	080920c0 	call	80920c <_sbrk_r>
  807a38:	00ffffc4 	movi	r3,-1
  807a3c:	10c0e126 	beq	r2,r3,807dc4 <_malloc_r+0x788>
  807a40:	1505c83a 	sub	r2,r2,r20
  807a44:	1545883a 	add	r2,r2,r21
  807a48:	10800054 	ori	r2,r2,1
  807a4c:	e0c00017 	ldw	r3,0(fp)
  807a50:	9d000215 	stw	r20,8(r19)
  807a54:	a0800115 	stw	r2,4(r20)
  807a58:	a8c7883a 	add	r3,r21,r3
  807a5c:	e0c00015 	stw	r3,0(fp)
  807a60:	84c00e26 	beq	r16,r19,807a9c <_malloc_r+0x460>
  807a64:	018003c4 	movi	r6,15
  807a68:	3580a72e 	bgeu	r6,r22,807d08 <_malloc_r+0x6cc>
  807a6c:	81400117 	ldw	r5,4(r16)
  807a70:	013ffe04 	movi	r4,-8
  807a74:	b0bffd04 	addi	r2,r22,-12
  807a78:	1104703a 	and	r2,r2,r4
  807a7c:	2900004c 	andi	r4,r5,1
  807a80:	2088b03a 	or	r4,r4,r2
  807a84:	81000115 	stw	r4,4(r16)
  807a88:	01400144 	movi	r5,5
  807a8c:	8089883a 	add	r4,r16,r2
  807a90:	21400115 	stw	r5,4(r4)
  807a94:	21400215 	stw	r5,8(r4)
  807a98:	3080cd36 	bltu	r6,r2,807dd0 <_malloc_r+0x794>
  807a9c:	00802074 	movhi	r2,129
  807aa0:	109d3d04 	addi	r2,r2,29940
  807aa4:	11000017 	ldw	r4,0(r2)
  807aa8:	20c0012e 	bgeu	r4,r3,807ab0 <_malloc_r+0x474>
  807aac:	10c00015 	stw	r3,0(r2)
  807ab0:	00802074 	movhi	r2,129
  807ab4:	109d3c04 	addi	r2,r2,29936
  807ab8:	11000017 	ldw	r4,0(r2)
  807abc:	9c000217 	ldw	r16,8(r19)
  807ac0:	20c0012e 	bgeu	r4,r3,807ac8 <_malloc_r+0x48c>
  807ac4:	10c00015 	stw	r3,0(r2)
  807ac8:	80c00117 	ldw	r3,4(r16)
  807acc:	00bfff04 	movi	r2,-4
  807ad0:	1886703a 	and	r3,r3,r2
  807ad4:	1c45c83a 	sub	r2,r3,r17
  807ad8:	1c400236 	bltu	r3,r17,807ae4 <_malloc_r+0x4a8>
  807adc:	00c003c4 	movi	r3,15
  807ae0:	18800416 	blt	r3,r2,807af4 <_malloc_r+0x4b8>
  807ae4:	9009883a 	mov	r4,r18
  807ae8:	080f9a00 	call	80f9a0 <__malloc_unlock>
  807aec:	0005883a 	mov	r2,zero
  807af0:	003f7b06 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807af4:	88c00054 	ori	r3,r17,1
  807af8:	80c00115 	stw	r3,4(r16)
  807afc:	8463883a 	add	r17,r16,r17
  807b00:	10800054 	ori	r2,r2,1
  807b04:	9c400215 	stw	r17,8(r19)
  807b08:	88800115 	stw	r2,4(r17)
  807b0c:	9009883a 	mov	r4,r18
  807b10:	080f9a00 	call	80f9a0 <__malloc_unlock>
  807b14:	80800204 	addi	r2,r16,8
  807b18:	003f7106 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807b1c:	00c00504 	movi	r3,20
  807b20:	18804a2e 	bgeu	r3,r2,807c4c <_malloc_r+0x610>
  807b24:	00c01504 	movi	r3,84
  807b28:	18806e36 	bltu	r3,r2,807ce4 <_malloc_r+0x6a8>
  807b2c:	8804d33a 	srli	r2,r17,12
  807b30:	12001bc4 	addi	r8,r2,111
  807b34:	11c01b84 	addi	r7,r2,110
  807b38:	4209883a 	add	r4,r8,r8
  807b3c:	003edd06 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807b40:	3804d27a 	srli	r2,r7,9
  807b44:	00c00104 	movi	r3,4
  807b48:	1880442e 	bgeu	r3,r2,807c5c <_malloc_r+0x620>
  807b4c:	00c00504 	movi	r3,20
  807b50:	18808136 	bltu	r3,r2,807d58 <_malloc_r+0x71c>
  807b54:	11401704 	addi	r5,r2,92
  807b58:	10c016c4 	addi	r3,r2,91
  807b5c:	294b883a 	add	r5,r5,r5
  807b60:	294b883a 	add	r5,r5,r5
  807b64:	294b883a 	add	r5,r5,r5
  807b68:	994b883a 	add	r5,r19,r5
  807b6c:	28800017 	ldw	r2,0(r5)
  807b70:	01802074 	movhi	r6,129
  807b74:	297ffe04 	addi	r5,r5,-8
  807b78:	318fa004 	addi	r6,r6,16000
  807b7c:	28806526 	beq	r5,r2,807d14 <_malloc_r+0x6d8>
  807b80:	01bfff04 	movi	r6,-4
  807b84:	10c00117 	ldw	r3,4(r2)
  807b88:	1986703a 	and	r3,r3,r6
  807b8c:	38c0022e 	bgeu	r7,r3,807b98 <_malloc_r+0x55c>
  807b90:	10800217 	ldw	r2,8(r2)
  807b94:	28bffb1e 	bne	r5,r2,807b84 <__alt_mem_onchip_mem+0xff787b84>
  807b98:	11400317 	ldw	r5,12(r2)
  807b9c:	98c00117 	ldw	r3,4(r19)
  807ba0:	81400315 	stw	r5,12(r16)
  807ba4:	80800215 	stw	r2,8(r16)
  807ba8:	2c000215 	stw	r16,8(r5)
  807bac:	14000315 	stw	r16,12(r2)
  807bb0:	003ef806 	br	807794 <__alt_mem_onchip_mem+0xff787794>
  807bb4:	88c00054 	ori	r3,r17,1
  807bb8:	80c00115 	stw	r3,4(r16)
  807bbc:	8463883a 	add	r17,r16,r17
  807bc0:	34400515 	stw	r17,20(r6)
  807bc4:	34400415 	stw	r17,16(r6)
  807bc8:	10c00054 	ori	r3,r2,1
  807bcc:	8a000315 	stw	r8,12(r17)
  807bd0:	8a000215 	stw	r8,8(r17)
  807bd4:	88c00115 	stw	r3,4(r17)
  807bd8:	88a3883a 	add	r17,r17,r2
  807bdc:	88800015 	stw	r2,0(r17)
  807be0:	9009883a 	mov	r4,r18
  807be4:	080f9a00 	call	80f9a0 <__malloc_unlock>
  807be8:	80800204 	addi	r2,r16,8
  807bec:	003f3c06 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807bf0:	30c00117 	ldw	r3,4(r6)
  807bf4:	003ee706 	br	807794 <__alt_mem_onchip_mem+0xff787794>
  807bf8:	5ac00044 	addi	r11,r11,1
  807bfc:	588000cc 	andi	r2,r11,3
  807c00:	31800204 	addi	r6,r6,8
  807c04:	103efd1e 	bne	r2,zero,8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807c08:	00002406 	br	807c9c <_malloc_r+0x660>
  807c0c:	14000317 	ldw	r16,12(r2)
  807c10:	143f251e 	bne	r2,r16,8078a8 <__alt_mem_onchip_mem+0xff7878a8>
  807c14:	21000084 	addi	r4,r4,2
  807c18:	003ebc06 	br	80770c <__alt_mem_onchip_mem+0xff78770c>
  807c1c:	8085883a 	add	r2,r16,r2
  807c20:	10c00117 	ldw	r3,4(r2)
  807c24:	81000317 	ldw	r4,12(r16)
  807c28:	81400217 	ldw	r5,8(r16)
  807c2c:	18c00054 	ori	r3,r3,1
  807c30:	10c00115 	stw	r3,4(r2)
  807c34:	29000315 	stw	r4,12(r5)
  807c38:	21400215 	stw	r5,8(r4)
  807c3c:	9009883a 	mov	r4,r18
  807c40:	080f9a00 	call	80f9a0 <__malloc_unlock>
  807c44:	80800204 	addi	r2,r16,8
  807c48:	003f2506 	br	8078e0 <__alt_mem_onchip_mem+0xff7878e0>
  807c4c:	12001704 	addi	r8,r2,92
  807c50:	11c016c4 	addi	r7,r2,91
  807c54:	4209883a 	add	r4,r8,r8
  807c58:	003e9606 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807c5c:	3804d1ba 	srli	r2,r7,6
  807c60:	11400e44 	addi	r5,r2,57
  807c64:	10c00e04 	addi	r3,r2,56
  807c68:	294b883a 	add	r5,r5,r5
  807c6c:	003fbc06 	br	807b60 <__alt_mem_onchip_mem+0xff787b60>
  807c70:	84ff5926 	beq	r16,r19,8079d8 <__alt_mem_onchip_mem+0xff7879d8>
  807c74:	00802074 	movhi	r2,129
  807c78:	108fa004 	addi	r2,r2,16000
  807c7c:	14000217 	ldw	r16,8(r2)
  807c80:	00bfff04 	movi	r2,-4
  807c84:	80c00117 	ldw	r3,4(r16)
  807c88:	1886703a 	and	r3,r3,r2
  807c8c:	003f9106 	br	807ad4 <__alt_mem_onchip_mem+0xff787ad4>
  807c90:	60800217 	ldw	r2,8(r12)
  807c94:	213fffc4 	addi	r4,r4,-1
  807c98:	1300651e 	bne	r2,r12,807e30 <_malloc_r+0x7f4>
  807c9c:	208000cc 	andi	r2,r4,3
  807ca0:	633ffe04 	addi	r12,r12,-8
  807ca4:	103ffa1e 	bne	r2,zero,807c90 <__alt_mem_onchip_mem+0xff787c90>
  807ca8:	98800117 	ldw	r2,4(r19)
  807cac:	0146303a 	nor	r3,zero,r5
  807cb0:	1884703a 	and	r2,r3,r2
  807cb4:	98800115 	stw	r2,4(r19)
  807cb8:	294b883a 	add	r5,r5,r5
  807cbc:	117f2836 	bltu	r2,r5,807960 <__alt_mem_onchip_mem+0xff787960>
  807cc0:	283f2726 	beq	r5,zero,807960 <__alt_mem_onchip_mem+0xff787960>
  807cc4:	2886703a 	and	r3,r5,r2
  807cc8:	5809883a 	mov	r4,r11
  807ccc:	183ec31e 	bne	r3,zero,8077dc <__alt_mem_onchip_mem+0xff7877dc>
  807cd0:	294b883a 	add	r5,r5,r5
  807cd4:	2886703a 	and	r3,r5,r2
  807cd8:	21000104 	addi	r4,r4,4
  807cdc:	183ffc26 	beq	r3,zero,807cd0 <__alt_mem_onchip_mem+0xff787cd0>
  807ce0:	003ebe06 	br	8077dc <__alt_mem_onchip_mem+0xff7877dc>
  807ce4:	00c05504 	movi	r3,340
  807ce8:	18801236 	bltu	r3,r2,807d34 <_malloc_r+0x6f8>
  807cec:	8804d3fa 	srli	r2,r17,15
  807cf0:	12001e04 	addi	r8,r2,120
  807cf4:	11c01dc4 	addi	r7,r2,119
  807cf8:	4209883a 	add	r4,r8,r8
  807cfc:	003e6d06 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807d00:	00c40004 	movi	r3,4096
  807d04:	003f4606 	br	807a20 <__alt_mem_onchip_mem+0xff787a20>
  807d08:	00800044 	movi	r2,1
  807d0c:	a0800115 	stw	r2,4(r20)
  807d10:	003f7406 	br	807ae4 <__alt_mem_onchip_mem+0xff787ae4>
  807d14:	1805d0ba 	srai	r2,r3,2
  807d18:	01c00044 	movi	r7,1
  807d1c:	30c00117 	ldw	r3,4(r6)
  807d20:	388e983a 	sll	r7,r7,r2
  807d24:	2805883a 	mov	r2,r5
  807d28:	38c6b03a 	or	r3,r7,r3
  807d2c:	30c00115 	stw	r3,4(r6)
  807d30:	003f9b06 	br	807ba0 <__alt_mem_onchip_mem+0xff787ba0>
  807d34:	00c15504 	movi	r3,1364
  807d38:	18801a36 	bltu	r3,r2,807da4 <_malloc_r+0x768>
  807d3c:	8804d4ba 	srli	r2,r17,18
  807d40:	12001f44 	addi	r8,r2,125
  807d44:	11c01f04 	addi	r7,r2,124
  807d48:	4209883a 	add	r4,r8,r8
  807d4c:	003e5906 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807d50:	ad400404 	addi	r21,r21,16
  807d54:	003f1706 	br	8079b4 <__alt_mem_onchip_mem+0xff7879b4>
  807d58:	00c01504 	movi	r3,84
  807d5c:	18802336 	bltu	r3,r2,807dec <_malloc_r+0x7b0>
  807d60:	3804d33a 	srli	r2,r7,12
  807d64:	11401bc4 	addi	r5,r2,111
  807d68:	10c01b84 	addi	r3,r2,110
  807d6c:	294b883a 	add	r5,r5,r5
  807d70:	003f7b06 	br	807b60 <__alt_mem_onchip_mem+0xff787b60>
  807d74:	9c000217 	ldw	r16,8(r19)
  807d78:	00bfff04 	movi	r2,-4
  807d7c:	80c00117 	ldw	r3,4(r16)
  807d80:	1886703a 	and	r3,r3,r2
  807d84:	003f5306 	br	807ad4 <__alt_mem_onchip_mem+0xff787ad4>
  807d88:	3083ffcc 	andi	r2,r6,4095
  807d8c:	103f181e 	bne	r2,zero,8079f0 <__alt_mem_onchip_mem+0xff7879f0>
  807d90:	99000217 	ldw	r4,8(r19)
  807d94:	b545883a 	add	r2,r22,r21
  807d98:	10800054 	ori	r2,r2,1
  807d9c:	20800115 	stw	r2,4(r4)
  807da0:	003f3e06 	br	807a9c <__alt_mem_onchip_mem+0xff787a9c>
  807da4:	01003f84 	movi	r4,254
  807da8:	02001fc4 	movi	r8,127
  807dac:	01c01f84 	movi	r7,126
  807db0:	003e4006 	br	8076b4 <__alt_mem_onchip_mem+0xff7876b4>
  807db4:	00802074 	movhi	r2,129
  807db8:	1095a004 	addi	r2,r2,22144
  807dbc:	15000015 	stw	r20,0(r2)
  807dc0:	003f1106 	br	807a08 <__alt_mem_onchip_mem+0xff787a08>
  807dc4:	00800044 	movi	r2,1
  807dc8:	002b883a 	mov	r21,zero
  807dcc:	003f1f06 	br	807a4c <__alt_mem_onchip_mem+0xff787a4c>
  807dd0:	81400204 	addi	r5,r16,8
  807dd4:	9009883a 	mov	r4,r18
  807dd8:	0806f0c0 	call	806f0c <_free_r>
  807ddc:	00802074 	movhi	r2,129
  807de0:	109d4704 	addi	r2,r2,29980
  807de4:	10c00017 	ldw	r3,0(r2)
  807de8:	003f2c06 	br	807a9c <__alt_mem_onchip_mem+0xff787a9c>
  807dec:	00c05504 	movi	r3,340
  807df0:	18800536 	bltu	r3,r2,807e08 <_malloc_r+0x7cc>
  807df4:	3804d3fa 	srli	r2,r7,15
  807df8:	11401e04 	addi	r5,r2,120
  807dfc:	10c01dc4 	addi	r3,r2,119
  807e00:	294b883a 	add	r5,r5,r5
  807e04:	003f5606 	br	807b60 <__alt_mem_onchip_mem+0xff787b60>
  807e08:	00c15504 	movi	r3,1364
  807e0c:	18800536 	bltu	r3,r2,807e24 <_malloc_r+0x7e8>
  807e10:	3804d4ba 	srli	r2,r7,18
  807e14:	11401f44 	addi	r5,r2,125
  807e18:	10c01f04 	addi	r3,r2,124
  807e1c:	294b883a 	add	r5,r5,r5
  807e20:	003f4f06 	br	807b60 <__alt_mem_onchip_mem+0xff787b60>
  807e24:	01403f84 	movi	r5,254
  807e28:	00c01f84 	movi	r3,126
  807e2c:	003f4c06 	br	807b60 <__alt_mem_onchip_mem+0xff787b60>
  807e30:	98800117 	ldw	r2,4(r19)
  807e34:	003fa006 	br	807cb8 <__alt_mem_onchip_mem+0xff787cb8>
  807e38:	8808d0fa 	srli	r4,r17,3
  807e3c:	20800044 	addi	r2,r4,1
  807e40:	1085883a 	add	r2,r2,r2
  807e44:	003e9006 	br	807888 <__alt_mem_onchip_mem+0xff787888>

00807e48 <memchr>:
  807e48:	208000cc 	andi	r2,r4,3
  807e4c:	280f883a 	mov	r7,r5
  807e50:	10003426 	beq	r2,zero,807f24 <memchr+0xdc>
  807e54:	30bfffc4 	addi	r2,r6,-1
  807e58:	30001a26 	beq	r6,zero,807ec4 <memchr+0x7c>
  807e5c:	20c00003 	ldbu	r3,0(r4)
  807e60:	29803fcc 	andi	r6,r5,255
  807e64:	30c0051e 	bne	r6,r3,807e7c <memchr+0x34>
  807e68:	00001806 	br	807ecc <memchr+0x84>
  807e6c:	10001526 	beq	r2,zero,807ec4 <memchr+0x7c>
  807e70:	20c00003 	ldbu	r3,0(r4)
  807e74:	10bfffc4 	addi	r2,r2,-1
  807e78:	30c01426 	beq	r6,r3,807ecc <memchr+0x84>
  807e7c:	21000044 	addi	r4,r4,1
  807e80:	20c000cc 	andi	r3,r4,3
  807e84:	183ff91e 	bne	r3,zero,807e6c <__alt_mem_onchip_mem+0xff787e6c>
  807e88:	020000c4 	movi	r8,3
  807e8c:	40801136 	bltu	r8,r2,807ed4 <memchr+0x8c>
  807e90:	10000c26 	beq	r2,zero,807ec4 <memchr+0x7c>
  807e94:	20c00003 	ldbu	r3,0(r4)
  807e98:	29403fcc 	andi	r5,r5,255
  807e9c:	28c00b26 	beq	r5,r3,807ecc <memchr+0x84>
  807ea0:	20c00044 	addi	r3,r4,1
  807ea4:	39803fcc 	andi	r6,r7,255
  807ea8:	2089883a 	add	r4,r4,r2
  807eac:	00000306 	br	807ebc <memchr+0x74>
  807eb0:	18c00044 	addi	r3,r3,1
  807eb4:	197fffc3 	ldbu	r5,-1(r3)
  807eb8:	31400526 	beq	r6,r5,807ed0 <memchr+0x88>
  807ebc:	1805883a 	mov	r2,r3
  807ec0:	20fffb1e 	bne	r4,r3,807eb0 <__alt_mem_onchip_mem+0xff787eb0>
  807ec4:	0005883a 	mov	r2,zero
  807ec8:	f800283a 	ret
  807ecc:	2005883a 	mov	r2,r4
  807ed0:	f800283a 	ret
  807ed4:	28c03fcc 	andi	r3,r5,255
  807ed8:	1812923a 	slli	r9,r3,8
  807edc:	02ffbff4 	movhi	r11,65279
  807ee0:	02a02074 	movhi	r10,32897
  807ee4:	48d2b03a 	or	r9,r9,r3
  807ee8:	4806943a 	slli	r3,r9,16
  807eec:	5affbfc4 	addi	r11,r11,-257
  807ef0:	52a02004 	addi	r10,r10,-32640
  807ef4:	48d2b03a 	or	r9,r9,r3
  807ef8:	20c00017 	ldw	r3,0(r4)
  807efc:	48c6f03a 	xor	r3,r9,r3
  807f00:	1acd883a 	add	r6,r3,r11
  807f04:	00c6303a 	nor	r3,zero,r3
  807f08:	30c6703a 	and	r3,r6,r3
  807f0c:	1a86703a 	and	r3,r3,r10
  807f10:	183fe01e 	bne	r3,zero,807e94 <__alt_mem_onchip_mem+0xff787e94>
  807f14:	10bfff04 	addi	r2,r2,-4
  807f18:	21000104 	addi	r4,r4,4
  807f1c:	40bff636 	bltu	r8,r2,807ef8 <__alt_mem_onchip_mem+0xff787ef8>
  807f20:	003fdb06 	br	807e90 <__alt_mem_onchip_mem+0xff787e90>
  807f24:	3005883a 	mov	r2,r6
  807f28:	003fd706 	br	807e88 <__alt_mem_onchip_mem+0xff787e88>

00807f2c <memcpy>:
  807f2c:	defffd04 	addi	sp,sp,-12
  807f30:	dfc00215 	stw	ra,8(sp)
  807f34:	dc400115 	stw	r17,4(sp)
  807f38:	dc000015 	stw	r16,0(sp)
  807f3c:	00c003c4 	movi	r3,15
  807f40:	2005883a 	mov	r2,r4
  807f44:	1980452e 	bgeu	r3,r6,80805c <memcpy+0x130>
  807f48:	2906b03a 	or	r3,r5,r4
  807f4c:	18c000cc 	andi	r3,r3,3
  807f50:	1800441e 	bne	r3,zero,808064 <memcpy+0x138>
  807f54:	347ffc04 	addi	r17,r6,-16
  807f58:	8822d13a 	srli	r17,r17,4
  807f5c:	28c00104 	addi	r3,r5,4
  807f60:	23400104 	addi	r13,r4,4
  807f64:	8820913a 	slli	r16,r17,4
  807f68:	2b000204 	addi	r12,r5,8
  807f6c:	22c00204 	addi	r11,r4,8
  807f70:	84000504 	addi	r16,r16,20
  807f74:	2a800304 	addi	r10,r5,12
  807f78:	22400304 	addi	r9,r4,12
  807f7c:	2c21883a 	add	r16,r5,r16
  807f80:	2811883a 	mov	r8,r5
  807f84:	200f883a 	mov	r7,r4
  807f88:	41000017 	ldw	r4,0(r8)
  807f8c:	1fc00017 	ldw	ra,0(r3)
  807f90:	63c00017 	ldw	r15,0(r12)
  807f94:	39000015 	stw	r4,0(r7)
  807f98:	53800017 	ldw	r14,0(r10)
  807f9c:	6fc00015 	stw	ra,0(r13)
  807fa0:	5bc00015 	stw	r15,0(r11)
  807fa4:	4b800015 	stw	r14,0(r9)
  807fa8:	18c00404 	addi	r3,r3,16
  807fac:	39c00404 	addi	r7,r7,16
  807fb0:	42000404 	addi	r8,r8,16
  807fb4:	6b400404 	addi	r13,r13,16
  807fb8:	63000404 	addi	r12,r12,16
  807fbc:	5ac00404 	addi	r11,r11,16
  807fc0:	52800404 	addi	r10,r10,16
  807fc4:	4a400404 	addi	r9,r9,16
  807fc8:	1c3fef1e 	bne	r3,r16,807f88 <__alt_mem_onchip_mem+0xff787f88>
  807fcc:	89c00044 	addi	r7,r17,1
  807fd0:	380e913a 	slli	r7,r7,4
  807fd4:	310003cc 	andi	r4,r6,15
  807fd8:	02c000c4 	movi	r11,3
  807fdc:	11c7883a 	add	r3,r2,r7
  807fe0:	29cb883a 	add	r5,r5,r7
  807fe4:	5900212e 	bgeu	r11,r4,80806c <memcpy+0x140>
  807fe8:	1813883a 	mov	r9,r3
  807fec:	2811883a 	mov	r8,r5
  807ff0:	200f883a 	mov	r7,r4
  807ff4:	42800017 	ldw	r10,0(r8)
  807ff8:	4a400104 	addi	r9,r9,4
  807ffc:	39ffff04 	addi	r7,r7,-4
  808000:	4abfff15 	stw	r10,-4(r9)
  808004:	42000104 	addi	r8,r8,4
  808008:	59fffa36 	bltu	r11,r7,807ff4 <__alt_mem_onchip_mem+0xff787ff4>
  80800c:	213fff04 	addi	r4,r4,-4
  808010:	2008d0ba 	srli	r4,r4,2
  808014:	318000cc 	andi	r6,r6,3
  808018:	21000044 	addi	r4,r4,1
  80801c:	2109883a 	add	r4,r4,r4
  808020:	2109883a 	add	r4,r4,r4
  808024:	1907883a 	add	r3,r3,r4
  808028:	290b883a 	add	r5,r5,r4
  80802c:	30000626 	beq	r6,zero,808048 <memcpy+0x11c>
  808030:	198d883a 	add	r6,r3,r6
  808034:	29c00003 	ldbu	r7,0(r5)
  808038:	18c00044 	addi	r3,r3,1
  80803c:	29400044 	addi	r5,r5,1
  808040:	19ffffc5 	stb	r7,-1(r3)
  808044:	19bffb1e 	bne	r3,r6,808034 <__alt_mem_onchip_mem+0xff788034>
  808048:	dfc00217 	ldw	ra,8(sp)
  80804c:	dc400117 	ldw	r17,4(sp)
  808050:	dc000017 	ldw	r16,0(sp)
  808054:	dec00304 	addi	sp,sp,12
  808058:	f800283a 	ret
  80805c:	2007883a 	mov	r3,r4
  808060:	003ff206 	br	80802c <__alt_mem_onchip_mem+0xff78802c>
  808064:	2007883a 	mov	r3,r4
  808068:	003ff106 	br	808030 <__alt_mem_onchip_mem+0xff788030>
  80806c:	200d883a 	mov	r6,r4
  808070:	003fee06 	br	80802c <__alt_mem_onchip_mem+0xff78802c>

00808074 <memset>:
  808074:	20c000cc 	andi	r3,r4,3
  808078:	2005883a 	mov	r2,r4
  80807c:	18004426 	beq	r3,zero,808190 <memset+0x11c>
  808080:	31ffffc4 	addi	r7,r6,-1
  808084:	30004026 	beq	r6,zero,808188 <memset+0x114>
  808088:	2813883a 	mov	r9,r5
  80808c:	200d883a 	mov	r6,r4
  808090:	2007883a 	mov	r3,r4
  808094:	00000406 	br	8080a8 <memset+0x34>
  808098:	3a3fffc4 	addi	r8,r7,-1
  80809c:	31800044 	addi	r6,r6,1
  8080a0:	38003926 	beq	r7,zero,808188 <memset+0x114>
  8080a4:	400f883a 	mov	r7,r8
  8080a8:	18c00044 	addi	r3,r3,1
  8080ac:	32400005 	stb	r9,0(r6)
  8080b0:	1a0000cc 	andi	r8,r3,3
  8080b4:	403ff81e 	bne	r8,zero,808098 <__alt_mem_onchip_mem+0xff788098>
  8080b8:	010000c4 	movi	r4,3
  8080bc:	21c02d2e 	bgeu	r4,r7,808174 <memset+0x100>
  8080c0:	29003fcc 	andi	r4,r5,255
  8080c4:	200c923a 	slli	r6,r4,8
  8080c8:	3108b03a 	or	r4,r6,r4
  8080cc:	200c943a 	slli	r6,r4,16
  8080d0:	218cb03a 	or	r6,r4,r6
  8080d4:	010003c4 	movi	r4,15
  8080d8:	21c0182e 	bgeu	r4,r7,80813c <memset+0xc8>
  8080dc:	3b3ffc04 	addi	r12,r7,-16
  8080e0:	6018d13a 	srli	r12,r12,4
  8080e4:	1a000104 	addi	r8,r3,4
  8080e8:	1ac00204 	addi	r11,r3,8
  8080ec:	6008913a 	slli	r4,r12,4
  8080f0:	1a800304 	addi	r10,r3,12
  8080f4:	1813883a 	mov	r9,r3
  8080f8:	21000504 	addi	r4,r4,20
  8080fc:	1909883a 	add	r4,r3,r4
  808100:	49800015 	stw	r6,0(r9)
  808104:	41800015 	stw	r6,0(r8)
  808108:	59800015 	stw	r6,0(r11)
  80810c:	51800015 	stw	r6,0(r10)
  808110:	42000404 	addi	r8,r8,16
  808114:	4a400404 	addi	r9,r9,16
  808118:	5ac00404 	addi	r11,r11,16
  80811c:	52800404 	addi	r10,r10,16
  808120:	413ff71e 	bne	r8,r4,808100 <__alt_mem_onchip_mem+0xff788100>
  808124:	63000044 	addi	r12,r12,1
  808128:	6018913a 	slli	r12,r12,4
  80812c:	39c003cc 	andi	r7,r7,15
  808130:	010000c4 	movi	r4,3
  808134:	1b07883a 	add	r3,r3,r12
  808138:	21c00e2e 	bgeu	r4,r7,808174 <memset+0x100>
  80813c:	1813883a 	mov	r9,r3
  808140:	3811883a 	mov	r8,r7
  808144:	010000c4 	movi	r4,3
  808148:	49800015 	stw	r6,0(r9)
  80814c:	423fff04 	addi	r8,r8,-4
  808150:	4a400104 	addi	r9,r9,4
  808154:	223ffc36 	bltu	r4,r8,808148 <__alt_mem_onchip_mem+0xff788148>
  808158:	393fff04 	addi	r4,r7,-4
  80815c:	2008d0ba 	srli	r4,r4,2
  808160:	39c000cc 	andi	r7,r7,3
  808164:	21000044 	addi	r4,r4,1
  808168:	2109883a 	add	r4,r4,r4
  80816c:	2109883a 	add	r4,r4,r4
  808170:	1907883a 	add	r3,r3,r4
  808174:	38000526 	beq	r7,zero,80818c <memset+0x118>
  808178:	19cf883a 	add	r7,r3,r7
  80817c:	19400005 	stb	r5,0(r3)
  808180:	18c00044 	addi	r3,r3,1
  808184:	38fffd1e 	bne	r7,r3,80817c <__alt_mem_onchip_mem+0xff78817c>
  808188:	f800283a 	ret
  80818c:	f800283a 	ret
  808190:	2007883a 	mov	r3,r4
  808194:	300f883a 	mov	r7,r6
  808198:	003fc706 	br	8080b8 <__alt_mem_onchip_mem+0xff7880b8>

0080819c <_Balloc>:
  80819c:	20801317 	ldw	r2,76(r4)
  8081a0:	defffc04 	addi	sp,sp,-16
  8081a4:	dc400115 	stw	r17,4(sp)
  8081a8:	dc000015 	stw	r16,0(sp)
  8081ac:	dfc00315 	stw	ra,12(sp)
  8081b0:	dc800215 	stw	r18,8(sp)
  8081b4:	2023883a 	mov	r17,r4
  8081b8:	2821883a 	mov	r16,r5
  8081bc:	10000f26 	beq	r2,zero,8081fc <_Balloc+0x60>
  8081c0:	8407883a 	add	r3,r16,r16
  8081c4:	18c7883a 	add	r3,r3,r3
  8081c8:	10c7883a 	add	r3,r2,r3
  8081cc:	18800017 	ldw	r2,0(r3)
  8081d0:	10001126 	beq	r2,zero,808218 <_Balloc+0x7c>
  8081d4:	11000017 	ldw	r4,0(r2)
  8081d8:	19000015 	stw	r4,0(r3)
  8081dc:	10000415 	stw	zero,16(r2)
  8081e0:	10000315 	stw	zero,12(r2)
  8081e4:	dfc00317 	ldw	ra,12(sp)
  8081e8:	dc800217 	ldw	r18,8(sp)
  8081ec:	dc400117 	ldw	r17,4(sp)
  8081f0:	dc000017 	ldw	r16,0(sp)
  8081f4:	dec00404 	addi	sp,sp,16
  8081f8:	f800283a 	ret
  8081fc:	01800844 	movi	r6,33
  808200:	01400104 	movi	r5,4
  808204:	080ac0c0 	call	80ac0c <_calloc_r>
  808208:	88801315 	stw	r2,76(r17)
  80820c:	103fec1e 	bne	r2,zero,8081c0 <__alt_mem_onchip_mem+0xff7881c0>
  808210:	0005883a 	mov	r2,zero
  808214:	003ff306 	br	8081e4 <__alt_mem_onchip_mem+0xff7881e4>
  808218:	01400044 	movi	r5,1
  80821c:	2c24983a 	sll	r18,r5,r16
  808220:	8809883a 	mov	r4,r17
  808224:	91800144 	addi	r6,r18,5
  808228:	318d883a 	add	r6,r6,r6
  80822c:	318d883a 	add	r6,r6,r6
  808230:	080ac0c0 	call	80ac0c <_calloc_r>
  808234:	103ff626 	beq	r2,zero,808210 <__alt_mem_onchip_mem+0xff788210>
  808238:	14000115 	stw	r16,4(r2)
  80823c:	14800215 	stw	r18,8(r2)
  808240:	003fe606 	br	8081dc <__alt_mem_onchip_mem+0xff7881dc>

00808244 <_Bfree>:
  808244:	28000826 	beq	r5,zero,808268 <_Bfree+0x24>
  808248:	28c00117 	ldw	r3,4(r5)
  80824c:	20801317 	ldw	r2,76(r4)
  808250:	18c7883a 	add	r3,r3,r3
  808254:	18c7883a 	add	r3,r3,r3
  808258:	10c5883a 	add	r2,r2,r3
  80825c:	10c00017 	ldw	r3,0(r2)
  808260:	28c00015 	stw	r3,0(r5)
  808264:	11400015 	stw	r5,0(r2)
  808268:	f800283a 	ret

0080826c <__multadd>:
  80826c:	defffa04 	addi	sp,sp,-24
  808270:	dc800315 	stw	r18,12(sp)
  808274:	dc400215 	stw	r17,8(sp)
  808278:	dc000115 	stw	r16,4(sp)
  80827c:	2823883a 	mov	r17,r5
  808280:	2c000417 	ldw	r16,16(r5)
  808284:	dfc00515 	stw	ra,20(sp)
  808288:	dcc00415 	stw	r19,16(sp)
  80828c:	2025883a 	mov	r18,r4
  808290:	29400504 	addi	r5,r5,20
  808294:	0011883a 	mov	r8,zero
  808298:	28c00017 	ldw	r3,0(r5)
  80829c:	29400104 	addi	r5,r5,4
  8082a0:	42000044 	addi	r8,r8,1
  8082a4:	18bfffcc 	andi	r2,r3,65535
  8082a8:	1185383a 	mul	r2,r2,r6
  8082ac:	1806d43a 	srli	r3,r3,16
  8082b0:	11cf883a 	add	r7,r2,r7
  8082b4:	3808d43a 	srli	r4,r7,16
  8082b8:	1987383a 	mul	r3,r3,r6
  8082bc:	38bfffcc 	andi	r2,r7,65535
  8082c0:	1907883a 	add	r3,r3,r4
  8082c4:	1808943a 	slli	r4,r3,16
  8082c8:	180ed43a 	srli	r7,r3,16
  8082cc:	2085883a 	add	r2,r4,r2
  8082d0:	28bfff15 	stw	r2,-4(r5)
  8082d4:	443ff016 	blt	r8,r16,808298 <__alt_mem_onchip_mem+0xff788298>
  8082d8:	38000926 	beq	r7,zero,808300 <__multadd+0x94>
  8082dc:	88800217 	ldw	r2,8(r17)
  8082e0:	80800f0e 	bge	r16,r2,808320 <__multadd+0xb4>
  8082e4:	80800144 	addi	r2,r16,5
  8082e8:	1085883a 	add	r2,r2,r2
  8082ec:	1085883a 	add	r2,r2,r2
  8082f0:	8885883a 	add	r2,r17,r2
  8082f4:	11c00015 	stw	r7,0(r2)
  8082f8:	84000044 	addi	r16,r16,1
  8082fc:	8c000415 	stw	r16,16(r17)
  808300:	8805883a 	mov	r2,r17
  808304:	dfc00517 	ldw	ra,20(sp)
  808308:	dcc00417 	ldw	r19,16(sp)
  80830c:	dc800317 	ldw	r18,12(sp)
  808310:	dc400217 	ldw	r17,8(sp)
  808314:	dc000117 	ldw	r16,4(sp)
  808318:	dec00604 	addi	sp,sp,24
  80831c:	f800283a 	ret
  808320:	89400117 	ldw	r5,4(r17)
  808324:	9009883a 	mov	r4,r18
  808328:	d9c00015 	stw	r7,0(sp)
  80832c:	29400044 	addi	r5,r5,1
  808330:	080819c0 	call	80819c <_Balloc>
  808334:	89800417 	ldw	r6,16(r17)
  808338:	89400304 	addi	r5,r17,12
  80833c:	11000304 	addi	r4,r2,12
  808340:	31800084 	addi	r6,r6,2
  808344:	318d883a 	add	r6,r6,r6
  808348:	318d883a 	add	r6,r6,r6
  80834c:	1027883a 	mov	r19,r2
  808350:	0807f2c0 	call	807f2c <memcpy>
  808354:	d9c00017 	ldw	r7,0(sp)
  808358:	88000a26 	beq	r17,zero,808384 <__multadd+0x118>
  80835c:	88c00117 	ldw	r3,4(r17)
  808360:	90801317 	ldw	r2,76(r18)
  808364:	18c7883a 	add	r3,r3,r3
  808368:	18c7883a 	add	r3,r3,r3
  80836c:	10c5883a 	add	r2,r2,r3
  808370:	10c00017 	ldw	r3,0(r2)
  808374:	88c00015 	stw	r3,0(r17)
  808378:	14400015 	stw	r17,0(r2)
  80837c:	9823883a 	mov	r17,r19
  808380:	003fd806 	br	8082e4 <__alt_mem_onchip_mem+0xff7882e4>
  808384:	9823883a 	mov	r17,r19
  808388:	003fd606 	br	8082e4 <__alt_mem_onchip_mem+0xff7882e4>

0080838c <__s2b>:
  80838c:	defff904 	addi	sp,sp,-28
  808390:	dc400115 	stw	r17,4(sp)
  808394:	dc000015 	stw	r16,0(sp)
  808398:	2023883a 	mov	r17,r4
  80839c:	2821883a 	mov	r16,r5
  8083a0:	39000204 	addi	r4,r7,8
  8083a4:	01400244 	movi	r5,9
  8083a8:	dcc00315 	stw	r19,12(sp)
  8083ac:	dc800215 	stw	r18,8(sp)
  8083b0:	dfc00615 	stw	ra,24(sp)
  8083b4:	dd400515 	stw	r21,20(sp)
  8083b8:	dd000415 	stw	r20,16(sp)
  8083bc:	3825883a 	mov	r18,r7
  8083c0:	3027883a 	mov	r19,r6
  8083c4:	080cab80 	call	80cab8 <__divsi3>
  8083c8:	00c00044 	movi	r3,1
  8083cc:	000b883a 	mov	r5,zero
  8083d0:	1880030e 	bge	r3,r2,8083e0 <__s2b+0x54>
  8083d4:	18c7883a 	add	r3,r3,r3
  8083d8:	29400044 	addi	r5,r5,1
  8083dc:	18bffd16 	blt	r3,r2,8083d4 <__alt_mem_onchip_mem+0xff7883d4>
  8083e0:	8809883a 	mov	r4,r17
  8083e4:	080819c0 	call	80819c <_Balloc>
  8083e8:	d8c00717 	ldw	r3,28(sp)
  8083ec:	10c00515 	stw	r3,20(r2)
  8083f0:	00c00044 	movi	r3,1
  8083f4:	10c00415 	stw	r3,16(r2)
  8083f8:	00c00244 	movi	r3,9
  8083fc:	1cc0210e 	bge	r3,r19,808484 <__s2b+0xf8>
  808400:	80eb883a 	add	r21,r16,r3
  808404:	a829883a 	mov	r20,r21
  808408:	84e1883a 	add	r16,r16,r19
  80840c:	a1c00007 	ldb	r7,0(r20)
  808410:	01800284 	movi	r6,10
  808414:	a5000044 	addi	r20,r20,1
  808418:	100b883a 	mov	r5,r2
  80841c:	39fff404 	addi	r7,r7,-48
  808420:	8809883a 	mov	r4,r17
  808424:	080826c0 	call	80826c <__multadd>
  808428:	a43ff81e 	bne	r20,r16,80840c <__alt_mem_onchip_mem+0xff78840c>
  80842c:	ace1883a 	add	r16,r21,r19
  808430:	843ffe04 	addi	r16,r16,-8
  808434:	9c800a0e 	bge	r19,r18,808460 <__s2b+0xd4>
  808438:	94e5c83a 	sub	r18,r18,r19
  80843c:	84a5883a 	add	r18,r16,r18
  808440:	81c00007 	ldb	r7,0(r16)
  808444:	01800284 	movi	r6,10
  808448:	84000044 	addi	r16,r16,1
  80844c:	100b883a 	mov	r5,r2
  808450:	39fff404 	addi	r7,r7,-48
  808454:	8809883a 	mov	r4,r17
  808458:	080826c0 	call	80826c <__multadd>
  80845c:	84bff81e 	bne	r16,r18,808440 <__alt_mem_onchip_mem+0xff788440>
  808460:	dfc00617 	ldw	ra,24(sp)
  808464:	dd400517 	ldw	r21,20(sp)
  808468:	dd000417 	ldw	r20,16(sp)
  80846c:	dcc00317 	ldw	r19,12(sp)
  808470:	dc800217 	ldw	r18,8(sp)
  808474:	dc400117 	ldw	r17,4(sp)
  808478:	dc000017 	ldw	r16,0(sp)
  80847c:	dec00704 	addi	sp,sp,28
  808480:	f800283a 	ret
  808484:	84000284 	addi	r16,r16,10
  808488:	1827883a 	mov	r19,r3
  80848c:	003fe906 	br	808434 <__alt_mem_onchip_mem+0xff788434>

00808490 <__hi0bits>:
  808490:	20bfffec 	andhi	r2,r4,65535
  808494:	1000141e 	bne	r2,zero,8084e8 <__hi0bits+0x58>
  808498:	2008943a 	slli	r4,r4,16
  80849c:	00800404 	movi	r2,16
  8084a0:	20ffc02c 	andhi	r3,r4,65280
  8084a4:	1800021e 	bne	r3,zero,8084b0 <__hi0bits+0x20>
  8084a8:	2008923a 	slli	r4,r4,8
  8084ac:	10800204 	addi	r2,r2,8
  8084b0:	20fc002c 	andhi	r3,r4,61440
  8084b4:	1800021e 	bne	r3,zero,8084c0 <__hi0bits+0x30>
  8084b8:	2008913a 	slli	r4,r4,4
  8084bc:	10800104 	addi	r2,r2,4
  8084c0:	20f0002c 	andhi	r3,r4,49152
  8084c4:	1800031e 	bne	r3,zero,8084d4 <__hi0bits+0x44>
  8084c8:	2109883a 	add	r4,r4,r4
  8084cc:	10800084 	addi	r2,r2,2
  8084d0:	2109883a 	add	r4,r4,r4
  8084d4:	20000316 	blt	r4,zero,8084e4 <__hi0bits+0x54>
  8084d8:	2110002c 	andhi	r4,r4,16384
  8084dc:	2000041e 	bne	r4,zero,8084f0 <__hi0bits+0x60>
  8084e0:	00800804 	movi	r2,32
  8084e4:	f800283a 	ret
  8084e8:	0005883a 	mov	r2,zero
  8084ec:	003fec06 	br	8084a0 <__alt_mem_onchip_mem+0xff7884a0>
  8084f0:	10800044 	addi	r2,r2,1
  8084f4:	f800283a 	ret

008084f8 <__lo0bits>:
  8084f8:	20c00017 	ldw	r3,0(r4)
  8084fc:	188001cc 	andi	r2,r3,7
  808500:	10000826 	beq	r2,zero,808524 <__lo0bits+0x2c>
  808504:	1880004c 	andi	r2,r3,1
  808508:	1000211e 	bne	r2,zero,808590 <__lo0bits+0x98>
  80850c:	1880008c 	andi	r2,r3,2
  808510:	1000211e 	bne	r2,zero,808598 <__lo0bits+0xa0>
  808514:	1806d0ba 	srli	r3,r3,2
  808518:	00800084 	movi	r2,2
  80851c:	20c00015 	stw	r3,0(r4)
  808520:	f800283a 	ret
  808524:	18bfffcc 	andi	r2,r3,65535
  808528:	10001326 	beq	r2,zero,808578 <__lo0bits+0x80>
  80852c:	0005883a 	mov	r2,zero
  808530:	19403fcc 	andi	r5,r3,255
  808534:	2800021e 	bne	r5,zero,808540 <__lo0bits+0x48>
  808538:	1806d23a 	srli	r3,r3,8
  80853c:	10800204 	addi	r2,r2,8
  808540:	194003cc 	andi	r5,r3,15
  808544:	2800021e 	bne	r5,zero,808550 <__lo0bits+0x58>
  808548:	1806d13a 	srli	r3,r3,4
  80854c:	10800104 	addi	r2,r2,4
  808550:	194000cc 	andi	r5,r3,3
  808554:	2800021e 	bne	r5,zero,808560 <__lo0bits+0x68>
  808558:	1806d0ba 	srli	r3,r3,2
  80855c:	10800084 	addi	r2,r2,2
  808560:	1940004c 	andi	r5,r3,1
  808564:	2800081e 	bne	r5,zero,808588 <__lo0bits+0x90>
  808568:	1806d07a 	srli	r3,r3,1
  80856c:	1800051e 	bne	r3,zero,808584 <__lo0bits+0x8c>
  808570:	00800804 	movi	r2,32
  808574:	f800283a 	ret
  808578:	1806d43a 	srli	r3,r3,16
  80857c:	00800404 	movi	r2,16
  808580:	003feb06 	br	808530 <__alt_mem_onchip_mem+0xff788530>
  808584:	10800044 	addi	r2,r2,1
  808588:	20c00015 	stw	r3,0(r4)
  80858c:	f800283a 	ret
  808590:	0005883a 	mov	r2,zero
  808594:	f800283a 	ret
  808598:	1806d07a 	srli	r3,r3,1
  80859c:	00800044 	movi	r2,1
  8085a0:	20c00015 	stw	r3,0(r4)
  8085a4:	f800283a 	ret

008085a8 <__i2b>:
  8085a8:	defffd04 	addi	sp,sp,-12
  8085ac:	dc000015 	stw	r16,0(sp)
  8085b0:	04000044 	movi	r16,1
  8085b4:	dc400115 	stw	r17,4(sp)
  8085b8:	2823883a 	mov	r17,r5
  8085bc:	800b883a 	mov	r5,r16
  8085c0:	dfc00215 	stw	ra,8(sp)
  8085c4:	080819c0 	call	80819c <_Balloc>
  8085c8:	14400515 	stw	r17,20(r2)
  8085cc:	14000415 	stw	r16,16(r2)
  8085d0:	dfc00217 	ldw	ra,8(sp)
  8085d4:	dc400117 	ldw	r17,4(sp)
  8085d8:	dc000017 	ldw	r16,0(sp)
  8085dc:	dec00304 	addi	sp,sp,12
  8085e0:	f800283a 	ret

008085e4 <__multiply>:
  8085e4:	defffa04 	addi	sp,sp,-24
  8085e8:	dcc00315 	stw	r19,12(sp)
  8085ec:	dc800215 	stw	r18,8(sp)
  8085f0:	34c00417 	ldw	r19,16(r6)
  8085f4:	2c800417 	ldw	r18,16(r5)
  8085f8:	dd000415 	stw	r20,16(sp)
  8085fc:	dc400115 	stw	r17,4(sp)
  808600:	dfc00515 	stw	ra,20(sp)
  808604:	dc000015 	stw	r16,0(sp)
  808608:	2829883a 	mov	r20,r5
  80860c:	3023883a 	mov	r17,r6
  808610:	94c0050e 	bge	r18,r19,808628 <__multiply+0x44>
  808614:	9007883a 	mov	r3,r18
  808618:	3029883a 	mov	r20,r6
  80861c:	9825883a 	mov	r18,r19
  808620:	2823883a 	mov	r17,r5
  808624:	1827883a 	mov	r19,r3
  808628:	a0800217 	ldw	r2,8(r20)
  80862c:	94e1883a 	add	r16,r18,r19
  808630:	a1400117 	ldw	r5,4(r20)
  808634:	1400010e 	bge	r2,r16,80863c <__multiply+0x58>
  808638:	29400044 	addi	r5,r5,1
  80863c:	080819c0 	call	80819c <_Balloc>
  808640:	8415883a 	add	r10,r16,r16
  808644:	12c00504 	addi	r11,r2,20
  808648:	5295883a 	add	r10,r10,r10
  80864c:	5a95883a 	add	r10,r11,r10
  808650:	5807883a 	mov	r3,r11
  808654:	5a80032e 	bgeu	r11,r10,808664 <__multiply+0x80>
  808658:	18000015 	stw	zero,0(r3)
  80865c:	18c00104 	addi	r3,r3,4
  808660:	1abffd36 	bltu	r3,r10,808658 <__alt_mem_onchip_mem+0xff788658>
  808664:	9ce7883a 	add	r19,r19,r19
  808668:	94a5883a 	add	r18,r18,r18
  80866c:	89800504 	addi	r6,r17,20
  808670:	9ce7883a 	add	r19,r19,r19
  808674:	a3400504 	addi	r13,r20,20
  808678:	94a5883a 	add	r18,r18,r18
  80867c:	34d9883a 	add	r12,r6,r19
  808680:	6c93883a 	add	r9,r13,r18
  808684:	3300422e 	bgeu	r6,r12,808790 <__multiply+0x1ac>
  808688:	37c00017 	ldw	ra,0(r6)
  80868c:	fbffffcc 	andi	r15,ra,65535
  808690:	78001b26 	beq	r15,zero,808700 <__multiply+0x11c>
  808694:	5811883a 	mov	r8,r11
  808698:	681d883a 	mov	r14,r13
  80869c:	000f883a 	mov	r7,zero
  8086a0:	71000017 	ldw	r4,0(r14)
  8086a4:	40c00017 	ldw	r3,0(r8)
  8086a8:	73800104 	addi	r14,r14,4
  8086ac:	217fffcc 	andi	r5,r4,65535
  8086b0:	2bcb383a 	mul	r5,r5,r15
  8086b4:	2008d43a 	srli	r4,r4,16
  8086b8:	1c7fffcc 	andi	r17,r3,65535
  8086bc:	2c4b883a 	add	r5,r5,r17
  8086c0:	29cb883a 	add	r5,r5,r7
  8086c4:	23c9383a 	mul	r4,r4,r15
  8086c8:	1806d43a 	srli	r3,r3,16
  8086cc:	280ed43a 	srli	r7,r5,16
  8086d0:	297fffcc 	andi	r5,r5,65535
  8086d4:	20c7883a 	add	r3,r4,r3
  8086d8:	19c7883a 	add	r3,r3,r7
  8086dc:	1808943a 	slli	r4,r3,16
  8086e0:	4023883a 	mov	r17,r8
  8086e4:	180ed43a 	srli	r7,r3,16
  8086e8:	214ab03a 	or	r5,r4,r5
  8086ec:	41400015 	stw	r5,0(r8)
  8086f0:	42000104 	addi	r8,r8,4
  8086f4:	727fea36 	bltu	r14,r9,8086a0 <__alt_mem_onchip_mem+0xff7886a0>
  8086f8:	89c00115 	stw	r7,4(r17)
  8086fc:	37c00017 	ldw	ra,0(r6)
  808700:	f83ed43a 	srli	ra,ra,16
  808704:	f8001f26 	beq	ra,zero,808784 <__multiply+0x1a0>
  808708:	58c00017 	ldw	r3,0(r11)
  80870c:	681d883a 	mov	r14,r13
  808710:	581f883a 	mov	r15,r11
  808714:	1811883a 	mov	r8,r3
  808718:	5825883a 	mov	r18,r11
  80871c:	000f883a 	mov	r7,zero
  808720:	00000106 	br	808728 <__multiply+0x144>
  808724:	8825883a 	mov	r18,r17
  808728:	7140000b 	ldhu	r5,0(r14)
  80872c:	4010d43a 	srli	r8,r8,16
  808730:	193fffcc 	andi	r4,r3,65535
  808734:	2fcb383a 	mul	r5,r5,ra
  808738:	7bc00104 	addi	r15,r15,4
  80873c:	73800104 	addi	r14,r14,4
  808740:	2a0b883a 	add	r5,r5,r8
  808744:	29cb883a 	add	r5,r5,r7
  808748:	2806943a 	slli	r3,r5,16
  80874c:	94400104 	addi	r17,r18,4
  808750:	280ad43a 	srli	r5,r5,16
  808754:	1908b03a 	or	r4,r3,r4
  808758:	793fff15 	stw	r4,-4(r15)
  80875c:	70ffff17 	ldw	r3,-4(r14)
  808760:	8a000017 	ldw	r8,0(r17)
  808764:	1806d43a 	srli	r3,r3,16
  808768:	413fffcc 	andi	r4,r8,65535
  80876c:	1fc7383a 	mul	r3,r3,ra
  808770:	1907883a 	add	r3,r3,r4
  808774:	1947883a 	add	r3,r3,r5
  808778:	180ed43a 	srli	r7,r3,16
  80877c:	727fe936 	bltu	r14,r9,808724 <__alt_mem_onchip_mem+0xff788724>
  808780:	90c00115 	stw	r3,4(r18)
  808784:	31800104 	addi	r6,r6,4
  808788:	5ac00104 	addi	r11,r11,4
  80878c:	333fbe36 	bltu	r6,r12,808688 <__alt_mem_onchip_mem+0xff788688>
  808790:	0400090e 	bge	zero,r16,8087b8 <__multiply+0x1d4>
  808794:	50ffff17 	ldw	r3,-4(r10)
  808798:	52bfff04 	addi	r10,r10,-4
  80879c:	18000326 	beq	r3,zero,8087ac <__multiply+0x1c8>
  8087a0:	00000506 	br	8087b8 <__multiply+0x1d4>
  8087a4:	50c00017 	ldw	r3,0(r10)
  8087a8:	1800031e 	bne	r3,zero,8087b8 <__multiply+0x1d4>
  8087ac:	843fffc4 	addi	r16,r16,-1
  8087b0:	52bfff04 	addi	r10,r10,-4
  8087b4:	803ffb1e 	bne	r16,zero,8087a4 <__alt_mem_onchip_mem+0xff7887a4>
  8087b8:	14000415 	stw	r16,16(r2)
  8087bc:	dfc00517 	ldw	ra,20(sp)
  8087c0:	dd000417 	ldw	r20,16(sp)
  8087c4:	dcc00317 	ldw	r19,12(sp)
  8087c8:	dc800217 	ldw	r18,8(sp)
  8087cc:	dc400117 	ldw	r17,4(sp)
  8087d0:	dc000017 	ldw	r16,0(sp)
  8087d4:	dec00604 	addi	sp,sp,24
  8087d8:	f800283a 	ret

008087dc <__pow5mult>:
  8087dc:	defffa04 	addi	sp,sp,-24
  8087e0:	dcc00315 	stw	r19,12(sp)
  8087e4:	dc000015 	stw	r16,0(sp)
  8087e8:	dfc00515 	stw	ra,20(sp)
  8087ec:	dd000415 	stw	r20,16(sp)
  8087f0:	dc800215 	stw	r18,8(sp)
  8087f4:	dc400115 	stw	r17,4(sp)
  8087f8:	308000cc 	andi	r2,r6,3
  8087fc:	3021883a 	mov	r16,r6
  808800:	2027883a 	mov	r19,r4
  808804:	10002f1e 	bne	r2,zero,8088c4 <__pow5mult+0xe8>
  808808:	2825883a 	mov	r18,r5
  80880c:	8021d0ba 	srai	r16,r16,2
  808810:	80001a26 	beq	r16,zero,80887c <__pow5mult+0xa0>
  808814:	9c401217 	ldw	r17,72(r19)
  808818:	8800061e 	bne	r17,zero,808834 <__pow5mult+0x58>
  80881c:	00003406 	br	8088f0 <__pow5mult+0x114>
  808820:	8021d07a 	srai	r16,r16,1
  808824:	80001526 	beq	r16,zero,80887c <__pow5mult+0xa0>
  808828:	88800017 	ldw	r2,0(r17)
  80882c:	10001c26 	beq	r2,zero,8088a0 <__pow5mult+0xc4>
  808830:	1023883a 	mov	r17,r2
  808834:	8080004c 	andi	r2,r16,1
  808838:	103ff926 	beq	r2,zero,808820 <__alt_mem_onchip_mem+0xff788820>
  80883c:	880d883a 	mov	r6,r17
  808840:	900b883a 	mov	r5,r18
  808844:	9809883a 	mov	r4,r19
  808848:	08085e40 	call	8085e4 <__multiply>
  80884c:	90001b26 	beq	r18,zero,8088bc <__pow5mult+0xe0>
  808850:	91000117 	ldw	r4,4(r18)
  808854:	98c01317 	ldw	r3,76(r19)
  808858:	8021d07a 	srai	r16,r16,1
  80885c:	2109883a 	add	r4,r4,r4
  808860:	2109883a 	add	r4,r4,r4
  808864:	1907883a 	add	r3,r3,r4
  808868:	19000017 	ldw	r4,0(r3)
  80886c:	91000015 	stw	r4,0(r18)
  808870:	1c800015 	stw	r18,0(r3)
  808874:	1025883a 	mov	r18,r2
  808878:	803feb1e 	bne	r16,zero,808828 <__alt_mem_onchip_mem+0xff788828>
  80887c:	9005883a 	mov	r2,r18
  808880:	dfc00517 	ldw	ra,20(sp)
  808884:	dd000417 	ldw	r20,16(sp)
  808888:	dcc00317 	ldw	r19,12(sp)
  80888c:	dc800217 	ldw	r18,8(sp)
  808890:	dc400117 	ldw	r17,4(sp)
  808894:	dc000017 	ldw	r16,0(sp)
  808898:	dec00604 	addi	sp,sp,24
  80889c:	f800283a 	ret
  8088a0:	880d883a 	mov	r6,r17
  8088a4:	880b883a 	mov	r5,r17
  8088a8:	9809883a 	mov	r4,r19
  8088ac:	08085e40 	call	8085e4 <__multiply>
  8088b0:	88800015 	stw	r2,0(r17)
  8088b4:	10000015 	stw	zero,0(r2)
  8088b8:	003fdd06 	br	808830 <__alt_mem_onchip_mem+0xff788830>
  8088bc:	1025883a 	mov	r18,r2
  8088c0:	003fd706 	br	808820 <__alt_mem_onchip_mem+0xff788820>
  8088c4:	10bfffc4 	addi	r2,r2,-1
  8088c8:	1085883a 	add	r2,r2,r2
  8088cc:	00c02074 	movhi	r3,129
  8088d0:	18cd3704 	addi	r3,r3,13532
  8088d4:	1085883a 	add	r2,r2,r2
  8088d8:	1885883a 	add	r2,r3,r2
  8088dc:	11800017 	ldw	r6,0(r2)
  8088e0:	000f883a 	mov	r7,zero
  8088e4:	080826c0 	call	80826c <__multadd>
  8088e8:	1025883a 	mov	r18,r2
  8088ec:	003fc706 	br	80880c <__alt_mem_onchip_mem+0xff78880c>
  8088f0:	05000044 	movi	r20,1
  8088f4:	a00b883a 	mov	r5,r20
  8088f8:	9809883a 	mov	r4,r19
  8088fc:	080819c0 	call	80819c <_Balloc>
  808900:	1023883a 	mov	r17,r2
  808904:	00809c44 	movi	r2,625
  808908:	88800515 	stw	r2,20(r17)
  80890c:	8d000415 	stw	r20,16(r17)
  808910:	9c401215 	stw	r17,72(r19)
  808914:	88000015 	stw	zero,0(r17)
  808918:	003fc606 	br	808834 <__alt_mem_onchip_mem+0xff788834>

0080891c <__lshift>:
  80891c:	defff904 	addi	sp,sp,-28
  808920:	dd400515 	stw	r21,20(sp)
  808924:	dcc00315 	stw	r19,12(sp)
  808928:	302bd17a 	srai	r21,r6,5
  80892c:	2cc00417 	ldw	r19,16(r5)
  808930:	28800217 	ldw	r2,8(r5)
  808934:	dd000415 	stw	r20,16(sp)
  808938:	ace7883a 	add	r19,r21,r19
  80893c:	dc800215 	stw	r18,8(sp)
  808940:	dc400115 	stw	r17,4(sp)
  808944:	dc000015 	stw	r16,0(sp)
  808948:	dfc00615 	stw	ra,24(sp)
  80894c:	9c000044 	addi	r16,r19,1
  808950:	2823883a 	mov	r17,r5
  808954:	3029883a 	mov	r20,r6
  808958:	2025883a 	mov	r18,r4
  80895c:	29400117 	ldw	r5,4(r5)
  808960:	1400030e 	bge	r2,r16,808970 <__lshift+0x54>
  808964:	1085883a 	add	r2,r2,r2
  808968:	29400044 	addi	r5,r5,1
  80896c:	143ffd16 	blt	r2,r16,808964 <__alt_mem_onchip_mem+0xff788964>
  808970:	9009883a 	mov	r4,r18
  808974:	080819c0 	call	80819c <_Balloc>
  808978:	10c00504 	addi	r3,r2,20
  80897c:	0540070e 	bge	zero,r21,80899c <__lshift+0x80>
  808980:	ad6b883a 	add	r21,r21,r21
  808984:	ad6b883a 	add	r21,r21,r21
  808988:	1809883a 	mov	r4,r3
  80898c:	1d47883a 	add	r3,r3,r21
  808990:	20000015 	stw	zero,0(r4)
  808994:	21000104 	addi	r4,r4,4
  808998:	193ffd1e 	bne	r3,r4,808990 <__alt_mem_onchip_mem+0xff788990>
  80899c:	8a000417 	ldw	r8,16(r17)
  8089a0:	89000504 	addi	r4,r17,20
  8089a4:	a18007cc 	andi	r6,r20,31
  8089a8:	4211883a 	add	r8,r8,r8
  8089ac:	4211883a 	add	r8,r8,r8
  8089b0:	2211883a 	add	r8,r4,r8
  8089b4:	30002326 	beq	r6,zero,808a44 <__lshift+0x128>
  8089b8:	02400804 	movi	r9,32
  8089bc:	4993c83a 	sub	r9,r9,r6
  8089c0:	000b883a 	mov	r5,zero
  8089c4:	21c00017 	ldw	r7,0(r4)
  8089c8:	1815883a 	mov	r10,r3
  8089cc:	18c00104 	addi	r3,r3,4
  8089d0:	398e983a 	sll	r7,r7,r6
  8089d4:	21000104 	addi	r4,r4,4
  8089d8:	394ab03a 	or	r5,r7,r5
  8089dc:	197fff15 	stw	r5,-4(r3)
  8089e0:	217fff17 	ldw	r5,-4(r4)
  8089e4:	2a4ad83a 	srl	r5,r5,r9
  8089e8:	223ff636 	bltu	r4,r8,8089c4 <__alt_mem_onchip_mem+0xff7889c4>
  8089ec:	51400115 	stw	r5,4(r10)
  8089f0:	28001a1e 	bne	r5,zero,808a5c <__lshift+0x140>
  8089f4:	843fffc4 	addi	r16,r16,-1
  8089f8:	14000415 	stw	r16,16(r2)
  8089fc:	88000826 	beq	r17,zero,808a20 <__lshift+0x104>
  808a00:	89000117 	ldw	r4,4(r17)
  808a04:	90c01317 	ldw	r3,76(r18)
  808a08:	2109883a 	add	r4,r4,r4
  808a0c:	2109883a 	add	r4,r4,r4
  808a10:	1907883a 	add	r3,r3,r4
  808a14:	19000017 	ldw	r4,0(r3)
  808a18:	89000015 	stw	r4,0(r17)
  808a1c:	1c400015 	stw	r17,0(r3)
  808a20:	dfc00617 	ldw	ra,24(sp)
  808a24:	dd400517 	ldw	r21,20(sp)
  808a28:	dd000417 	ldw	r20,16(sp)
  808a2c:	dcc00317 	ldw	r19,12(sp)
  808a30:	dc800217 	ldw	r18,8(sp)
  808a34:	dc400117 	ldw	r17,4(sp)
  808a38:	dc000017 	ldw	r16,0(sp)
  808a3c:	dec00704 	addi	sp,sp,28
  808a40:	f800283a 	ret
  808a44:	21400017 	ldw	r5,0(r4)
  808a48:	18c00104 	addi	r3,r3,4
  808a4c:	21000104 	addi	r4,r4,4
  808a50:	197fff15 	stw	r5,-4(r3)
  808a54:	223ffb36 	bltu	r4,r8,808a44 <__alt_mem_onchip_mem+0xff788a44>
  808a58:	003fe606 	br	8089f4 <__alt_mem_onchip_mem+0xff7889f4>
  808a5c:	9c000084 	addi	r16,r19,2
  808a60:	003fe406 	br	8089f4 <__alt_mem_onchip_mem+0xff7889f4>

00808a64 <__mcmp>:
  808a64:	20800417 	ldw	r2,16(r4)
  808a68:	28c00417 	ldw	r3,16(r5)
  808a6c:	10c5c83a 	sub	r2,r2,r3
  808a70:	1000111e 	bne	r2,zero,808ab8 <__mcmp+0x54>
  808a74:	18c7883a 	add	r3,r3,r3
  808a78:	18c7883a 	add	r3,r3,r3
  808a7c:	21000504 	addi	r4,r4,20
  808a80:	29400504 	addi	r5,r5,20
  808a84:	20c5883a 	add	r2,r4,r3
  808a88:	28cb883a 	add	r5,r5,r3
  808a8c:	00000106 	br	808a94 <__mcmp+0x30>
  808a90:	20800a2e 	bgeu	r4,r2,808abc <__mcmp+0x58>
  808a94:	10bfff04 	addi	r2,r2,-4
  808a98:	297fff04 	addi	r5,r5,-4
  808a9c:	11800017 	ldw	r6,0(r2)
  808aa0:	28c00017 	ldw	r3,0(r5)
  808aa4:	30fffa26 	beq	r6,r3,808a90 <__alt_mem_onchip_mem+0xff788a90>
  808aa8:	30c00236 	bltu	r6,r3,808ab4 <__mcmp+0x50>
  808aac:	00800044 	movi	r2,1
  808ab0:	f800283a 	ret
  808ab4:	00bfffc4 	movi	r2,-1
  808ab8:	f800283a 	ret
  808abc:	0005883a 	mov	r2,zero
  808ac0:	f800283a 	ret

00808ac4 <__mdiff>:
  808ac4:	28c00417 	ldw	r3,16(r5)
  808ac8:	30800417 	ldw	r2,16(r6)
  808acc:	defffa04 	addi	sp,sp,-24
  808ad0:	dcc00315 	stw	r19,12(sp)
  808ad4:	dc800215 	stw	r18,8(sp)
  808ad8:	dfc00515 	stw	ra,20(sp)
  808adc:	dd000415 	stw	r20,16(sp)
  808ae0:	dc400115 	stw	r17,4(sp)
  808ae4:	dc000015 	stw	r16,0(sp)
  808ae8:	1887c83a 	sub	r3,r3,r2
  808aec:	2825883a 	mov	r18,r5
  808af0:	3027883a 	mov	r19,r6
  808af4:	1800141e 	bne	r3,zero,808b48 <__mdiff+0x84>
  808af8:	1085883a 	add	r2,r2,r2
  808afc:	1085883a 	add	r2,r2,r2
  808b00:	2a000504 	addi	r8,r5,20
  808b04:	34000504 	addi	r16,r6,20
  808b08:	4087883a 	add	r3,r8,r2
  808b0c:	8085883a 	add	r2,r16,r2
  808b10:	00000106 	br	808b18 <__mdiff+0x54>
  808b14:	40c0592e 	bgeu	r8,r3,808c7c <__mdiff+0x1b8>
  808b18:	18ffff04 	addi	r3,r3,-4
  808b1c:	10bfff04 	addi	r2,r2,-4
  808b20:	19c00017 	ldw	r7,0(r3)
  808b24:	11400017 	ldw	r5,0(r2)
  808b28:	397ffa26 	beq	r7,r5,808b14 <__alt_mem_onchip_mem+0xff788b14>
  808b2c:	3940592e 	bgeu	r7,r5,808c94 <__mdiff+0x1d0>
  808b30:	9005883a 	mov	r2,r18
  808b34:	4023883a 	mov	r17,r8
  808b38:	9825883a 	mov	r18,r19
  808b3c:	05000044 	movi	r20,1
  808b40:	1027883a 	mov	r19,r2
  808b44:	00000406 	br	808b58 <__mdiff+0x94>
  808b48:	18005616 	blt	r3,zero,808ca4 <__mdiff+0x1e0>
  808b4c:	34400504 	addi	r17,r6,20
  808b50:	2c000504 	addi	r16,r5,20
  808b54:	0029883a 	mov	r20,zero
  808b58:	91400117 	ldw	r5,4(r18)
  808b5c:	080819c0 	call	80819c <_Balloc>
  808b60:	92400417 	ldw	r9,16(r18)
  808b64:	9b000417 	ldw	r12,16(r19)
  808b68:	12c00504 	addi	r11,r2,20
  808b6c:	4a51883a 	add	r8,r9,r9
  808b70:	6319883a 	add	r12,r12,r12
  808b74:	4211883a 	add	r8,r8,r8
  808b78:	6319883a 	add	r12,r12,r12
  808b7c:	15000315 	stw	r20,12(r2)
  808b80:	8211883a 	add	r8,r16,r8
  808b84:	8b19883a 	add	r12,r17,r12
  808b88:	0007883a 	mov	r3,zero
  808b8c:	81400017 	ldw	r5,0(r16)
  808b90:	89c00017 	ldw	r7,0(r17)
  808b94:	59800104 	addi	r6,r11,4
  808b98:	293fffcc 	andi	r4,r5,65535
  808b9c:	20c7883a 	add	r3,r4,r3
  808ba0:	393fffcc 	andi	r4,r7,65535
  808ba4:	1909c83a 	sub	r4,r3,r4
  808ba8:	280ad43a 	srli	r5,r5,16
  808bac:	380ed43a 	srli	r7,r7,16
  808bb0:	2007d43a 	srai	r3,r4,16
  808bb4:	213fffcc 	andi	r4,r4,65535
  808bb8:	29cbc83a 	sub	r5,r5,r7
  808bbc:	28c7883a 	add	r3,r5,r3
  808bc0:	180a943a 	slli	r5,r3,16
  808bc4:	8c400104 	addi	r17,r17,4
  808bc8:	84000104 	addi	r16,r16,4
  808bcc:	2908b03a 	or	r4,r5,r4
  808bd0:	59000015 	stw	r4,0(r11)
  808bd4:	1807d43a 	srai	r3,r3,16
  808bd8:	3015883a 	mov	r10,r6
  808bdc:	3017883a 	mov	r11,r6
  808be0:	8b3fea36 	bltu	r17,r12,808b8c <__alt_mem_onchip_mem+0xff788b8c>
  808be4:	8200162e 	bgeu	r16,r8,808c40 <__mdiff+0x17c>
  808be8:	8017883a 	mov	r11,r16
  808bec:	59400017 	ldw	r5,0(r11)
  808bf0:	31800104 	addi	r6,r6,4
  808bf4:	5ac00104 	addi	r11,r11,4
  808bf8:	293fffcc 	andi	r4,r5,65535
  808bfc:	20c7883a 	add	r3,r4,r3
  808c00:	280ed43a 	srli	r7,r5,16
  808c04:	180bd43a 	srai	r5,r3,16
  808c08:	193fffcc 	andi	r4,r3,65535
  808c0c:	3947883a 	add	r3,r7,r5
  808c10:	180a943a 	slli	r5,r3,16
  808c14:	1807d43a 	srai	r3,r3,16
  808c18:	2908b03a 	or	r4,r5,r4
  808c1c:	313fff15 	stw	r4,-4(r6)
  808c20:	5a3ff236 	bltu	r11,r8,808bec <__alt_mem_onchip_mem+0xff788bec>
  808c24:	0406303a 	nor	r3,zero,r16
  808c28:	1a07883a 	add	r3,r3,r8
  808c2c:	1806d0ba 	srli	r3,r3,2
  808c30:	18c00044 	addi	r3,r3,1
  808c34:	18c7883a 	add	r3,r3,r3
  808c38:	18c7883a 	add	r3,r3,r3
  808c3c:	50d5883a 	add	r10,r10,r3
  808c40:	50ffff04 	addi	r3,r10,-4
  808c44:	2000041e 	bne	r4,zero,808c58 <__mdiff+0x194>
  808c48:	18ffff04 	addi	r3,r3,-4
  808c4c:	19000017 	ldw	r4,0(r3)
  808c50:	4a7fffc4 	addi	r9,r9,-1
  808c54:	203ffc26 	beq	r4,zero,808c48 <__alt_mem_onchip_mem+0xff788c48>
  808c58:	12400415 	stw	r9,16(r2)
  808c5c:	dfc00517 	ldw	ra,20(sp)
  808c60:	dd000417 	ldw	r20,16(sp)
  808c64:	dcc00317 	ldw	r19,12(sp)
  808c68:	dc800217 	ldw	r18,8(sp)
  808c6c:	dc400117 	ldw	r17,4(sp)
  808c70:	dc000017 	ldw	r16,0(sp)
  808c74:	dec00604 	addi	sp,sp,24
  808c78:	f800283a 	ret
  808c7c:	000b883a 	mov	r5,zero
  808c80:	080819c0 	call	80819c <_Balloc>
  808c84:	00c00044 	movi	r3,1
  808c88:	10c00415 	stw	r3,16(r2)
  808c8c:	10000515 	stw	zero,20(r2)
  808c90:	003ff206 	br	808c5c <__alt_mem_onchip_mem+0xff788c5c>
  808c94:	8023883a 	mov	r17,r16
  808c98:	0029883a 	mov	r20,zero
  808c9c:	4021883a 	mov	r16,r8
  808ca0:	003fad06 	br	808b58 <__alt_mem_onchip_mem+0xff788b58>
  808ca4:	9005883a 	mov	r2,r18
  808ca8:	94400504 	addi	r17,r18,20
  808cac:	9c000504 	addi	r16,r19,20
  808cb0:	9825883a 	mov	r18,r19
  808cb4:	05000044 	movi	r20,1
  808cb8:	1027883a 	mov	r19,r2
  808cbc:	003fa606 	br	808b58 <__alt_mem_onchip_mem+0xff788b58>

00808cc0 <__ulp>:
  808cc0:	295ffc2c 	andhi	r5,r5,32752
  808cc4:	00bf3034 	movhi	r2,64704
  808cc8:	2887883a 	add	r3,r5,r2
  808ccc:	00c0020e 	bge	zero,r3,808cd8 <__ulp+0x18>
  808cd0:	0005883a 	mov	r2,zero
  808cd4:	f800283a 	ret
  808cd8:	00c7c83a 	sub	r3,zero,r3
  808cdc:	1807d53a 	srai	r3,r3,20
  808ce0:	008004c4 	movi	r2,19
  808ce4:	10c00b0e 	bge	r2,r3,808d14 <__ulp+0x54>
  808ce8:	18bffb04 	addi	r2,r3,-20
  808cec:	01000784 	movi	r4,30
  808cf0:	0007883a 	mov	r3,zero
  808cf4:	20800516 	blt	r4,r2,808d0c <__ulp+0x4c>
  808cf8:	010007c4 	movi	r4,31
  808cfc:	2089c83a 	sub	r4,r4,r2
  808d00:	00800044 	movi	r2,1
  808d04:	1104983a 	sll	r2,r2,r4
  808d08:	f800283a 	ret
  808d0c:	00800044 	movi	r2,1
  808d10:	f800283a 	ret
  808d14:	01400234 	movhi	r5,8
  808d18:	28c7d83a 	sra	r3,r5,r3
  808d1c:	0005883a 	mov	r2,zero
  808d20:	f800283a 	ret

00808d24 <__b2d>:
  808d24:	defffa04 	addi	sp,sp,-24
  808d28:	dc000015 	stw	r16,0(sp)
  808d2c:	24000417 	ldw	r16,16(r4)
  808d30:	dc400115 	stw	r17,4(sp)
  808d34:	24400504 	addi	r17,r4,20
  808d38:	8421883a 	add	r16,r16,r16
  808d3c:	8421883a 	add	r16,r16,r16
  808d40:	8c21883a 	add	r16,r17,r16
  808d44:	dc800215 	stw	r18,8(sp)
  808d48:	84bfff17 	ldw	r18,-4(r16)
  808d4c:	dd000415 	stw	r20,16(sp)
  808d50:	dcc00315 	stw	r19,12(sp)
  808d54:	9009883a 	mov	r4,r18
  808d58:	2829883a 	mov	r20,r5
  808d5c:	dfc00515 	stw	ra,20(sp)
  808d60:	08084900 	call	808490 <__hi0bits>
  808d64:	00c00804 	movi	r3,32
  808d68:	1889c83a 	sub	r4,r3,r2
  808d6c:	a1000015 	stw	r4,0(r20)
  808d70:	01000284 	movi	r4,10
  808d74:	84ffff04 	addi	r19,r16,-4
  808d78:	20801216 	blt	r4,r2,808dc4 <__b2d+0xa0>
  808d7c:	018002c4 	movi	r6,11
  808d80:	308dc83a 	sub	r6,r6,r2
  808d84:	9186d83a 	srl	r3,r18,r6
  808d88:	18cffc34 	orhi	r3,r3,16368
  808d8c:	8cc0212e 	bgeu	r17,r19,808e14 <__b2d+0xf0>
  808d90:	813ffe17 	ldw	r4,-8(r16)
  808d94:	218cd83a 	srl	r6,r4,r6
  808d98:	10800544 	addi	r2,r2,21
  808d9c:	9084983a 	sll	r2,r18,r2
  808da0:	1184b03a 	or	r2,r2,r6
  808da4:	dfc00517 	ldw	ra,20(sp)
  808da8:	dd000417 	ldw	r20,16(sp)
  808dac:	dcc00317 	ldw	r19,12(sp)
  808db0:	dc800217 	ldw	r18,8(sp)
  808db4:	dc400117 	ldw	r17,4(sp)
  808db8:	dc000017 	ldw	r16,0(sp)
  808dbc:	dec00604 	addi	sp,sp,24
  808dc0:	f800283a 	ret
  808dc4:	8cc00f2e 	bgeu	r17,r19,808e04 <__b2d+0xe0>
  808dc8:	117ffd44 	addi	r5,r2,-11
  808dcc:	80bffe17 	ldw	r2,-8(r16)
  808dd0:	28000e26 	beq	r5,zero,808e0c <__b2d+0xe8>
  808dd4:	1949c83a 	sub	r4,r3,r5
  808dd8:	9164983a 	sll	r18,r18,r5
  808ddc:	1106d83a 	srl	r3,r2,r4
  808de0:	81bffe04 	addi	r6,r16,-8
  808de4:	948ffc34 	orhi	r18,r18,16368
  808de8:	90c6b03a 	or	r3,r18,r3
  808dec:	89800e2e 	bgeu	r17,r6,808e28 <__b2d+0x104>
  808df0:	81bffd17 	ldw	r6,-12(r16)
  808df4:	1144983a 	sll	r2,r2,r5
  808df8:	310ad83a 	srl	r5,r6,r4
  808dfc:	2884b03a 	or	r2,r5,r2
  808e00:	003fe806 	br	808da4 <__alt_mem_onchip_mem+0xff788da4>
  808e04:	10bffd44 	addi	r2,r2,-11
  808e08:	1000041e 	bne	r2,zero,808e1c <__b2d+0xf8>
  808e0c:	90cffc34 	orhi	r3,r18,16368
  808e10:	003fe406 	br	808da4 <__alt_mem_onchip_mem+0xff788da4>
  808e14:	000d883a 	mov	r6,zero
  808e18:	003fdf06 	br	808d98 <__alt_mem_onchip_mem+0xff788d98>
  808e1c:	90a4983a 	sll	r18,r18,r2
  808e20:	0005883a 	mov	r2,zero
  808e24:	003ff906 	br	808e0c <__alt_mem_onchip_mem+0xff788e0c>
  808e28:	1144983a 	sll	r2,r2,r5
  808e2c:	003fdd06 	br	808da4 <__alt_mem_onchip_mem+0xff788da4>

00808e30 <__d2b>:
  808e30:	defff804 	addi	sp,sp,-32
  808e34:	dc000215 	stw	r16,8(sp)
  808e38:	3021883a 	mov	r16,r6
  808e3c:	dc400315 	stw	r17,12(sp)
  808e40:	8022907a 	slli	r17,r16,1
  808e44:	dd000615 	stw	r20,24(sp)
  808e48:	2829883a 	mov	r20,r5
  808e4c:	01400044 	movi	r5,1
  808e50:	dcc00515 	stw	r19,20(sp)
  808e54:	dc800415 	stw	r18,16(sp)
  808e58:	dfc00715 	stw	ra,28(sp)
  808e5c:	3825883a 	mov	r18,r7
  808e60:	8822d57a 	srli	r17,r17,21
  808e64:	080819c0 	call	80819c <_Balloc>
  808e68:	1027883a 	mov	r19,r2
  808e6c:	00800434 	movhi	r2,16
  808e70:	10bfffc4 	addi	r2,r2,-1
  808e74:	808c703a 	and	r6,r16,r2
  808e78:	88000126 	beq	r17,zero,808e80 <__d2b+0x50>
  808e7c:	31800434 	orhi	r6,r6,16
  808e80:	d9800015 	stw	r6,0(sp)
  808e84:	a0002426 	beq	r20,zero,808f18 <__d2b+0xe8>
  808e88:	d9000104 	addi	r4,sp,4
  808e8c:	dd000115 	stw	r20,4(sp)
  808e90:	08084f80 	call	8084f8 <__lo0bits>
  808e94:	d8c00017 	ldw	r3,0(sp)
  808e98:	10002f1e 	bne	r2,zero,808f58 <__d2b+0x128>
  808e9c:	d9000117 	ldw	r4,4(sp)
  808ea0:	99000515 	stw	r4,20(r19)
  808ea4:	1821003a 	cmpeq	r16,r3,zero
  808ea8:	01000084 	movi	r4,2
  808eac:	2421c83a 	sub	r16,r4,r16
  808eb0:	98c00615 	stw	r3,24(r19)
  808eb4:	9c000415 	stw	r16,16(r19)
  808eb8:	88001f1e 	bne	r17,zero,808f38 <__d2b+0x108>
  808ebc:	10bef384 	addi	r2,r2,-1074
  808ec0:	90800015 	stw	r2,0(r18)
  808ec4:	00900034 	movhi	r2,16384
  808ec8:	10bfffc4 	addi	r2,r2,-1
  808ecc:	8085883a 	add	r2,r16,r2
  808ed0:	1085883a 	add	r2,r2,r2
  808ed4:	1085883a 	add	r2,r2,r2
  808ed8:	9885883a 	add	r2,r19,r2
  808edc:	11000517 	ldw	r4,20(r2)
  808ee0:	8020917a 	slli	r16,r16,5
  808ee4:	08084900 	call	808490 <__hi0bits>
  808ee8:	d8c00817 	ldw	r3,32(sp)
  808eec:	8085c83a 	sub	r2,r16,r2
  808ef0:	18800015 	stw	r2,0(r3)
  808ef4:	9805883a 	mov	r2,r19
  808ef8:	dfc00717 	ldw	ra,28(sp)
  808efc:	dd000617 	ldw	r20,24(sp)
  808f00:	dcc00517 	ldw	r19,20(sp)
  808f04:	dc800417 	ldw	r18,16(sp)
  808f08:	dc400317 	ldw	r17,12(sp)
  808f0c:	dc000217 	ldw	r16,8(sp)
  808f10:	dec00804 	addi	sp,sp,32
  808f14:	f800283a 	ret
  808f18:	d809883a 	mov	r4,sp
  808f1c:	08084f80 	call	8084f8 <__lo0bits>
  808f20:	d8c00017 	ldw	r3,0(sp)
  808f24:	04000044 	movi	r16,1
  808f28:	9c000415 	stw	r16,16(r19)
  808f2c:	98c00515 	stw	r3,20(r19)
  808f30:	10800804 	addi	r2,r2,32
  808f34:	883fe126 	beq	r17,zero,808ebc <__alt_mem_onchip_mem+0xff788ebc>
  808f38:	00c00d44 	movi	r3,53
  808f3c:	8c7ef344 	addi	r17,r17,-1075
  808f40:	88a3883a 	add	r17,r17,r2
  808f44:	1885c83a 	sub	r2,r3,r2
  808f48:	d8c00817 	ldw	r3,32(sp)
  808f4c:	94400015 	stw	r17,0(r18)
  808f50:	18800015 	stw	r2,0(r3)
  808f54:	003fe706 	br	808ef4 <__alt_mem_onchip_mem+0xff788ef4>
  808f58:	01000804 	movi	r4,32
  808f5c:	2089c83a 	sub	r4,r4,r2
  808f60:	1908983a 	sll	r4,r3,r4
  808f64:	d9400117 	ldw	r5,4(sp)
  808f68:	1886d83a 	srl	r3,r3,r2
  808f6c:	2148b03a 	or	r4,r4,r5
  808f70:	99000515 	stw	r4,20(r19)
  808f74:	d8c00015 	stw	r3,0(sp)
  808f78:	003fca06 	br	808ea4 <__alt_mem_onchip_mem+0xff788ea4>

00808f7c <__ratio>:
  808f7c:	defff904 	addi	sp,sp,-28
  808f80:	dc400315 	stw	r17,12(sp)
  808f84:	2823883a 	mov	r17,r5
  808f88:	d9400104 	addi	r5,sp,4
  808f8c:	dfc00615 	stw	ra,24(sp)
  808f90:	dcc00515 	stw	r19,20(sp)
  808f94:	dc800415 	stw	r18,16(sp)
  808f98:	2027883a 	mov	r19,r4
  808f9c:	dc000215 	stw	r16,8(sp)
  808fa0:	0808d240 	call	808d24 <__b2d>
  808fa4:	d80b883a 	mov	r5,sp
  808fa8:	8809883a 	mov	r4,r17
  808fac:	1025883a 	mov	r18,r2
  808fb0:	1821883a 	mov	r16,r3
  808fb4:	0808d240 	call	808d24 <__b2d>
  808fb8:	8a000417 	ldw	r8,16(r17)
  808fbc:	99000417 	ldw	r4,16(r19)
  808fc0:	d9400117 	ldw	r5,4(sp)
  808fc4:	2209c83a 	sub	r4,r4,r8
  808fc8:	2010917a 	slli	r8,r4,5
  808fcc:	d9000017 	ldw	r4,0(sp)
  808fd0:	2909c83a 	sub	r4,r5,r4
  808fd4:	4109883a 	add	r4,r8,r4
  808fd8:	01000e0e 	bge	zero,r4,809014 <__ratio+0x98>
  808fdc:	2008953a 	slli	r4,r4,20
  808fe0:	2421883a 	add	r16,r4,r16
  808fe4:	100d883a 	mov	r6,r2
  808fe8:	180f883a 	mov	r7,r3
  808fec:	9009883a 	mov	r4,r18
  808ff0:	800b883a 	mov	r5,r16
  808ff4:	080d5180 	call	80d518 <__divdf3>
  808ff8:	dfc00617 	ldw	ra,24(sp)
  808ffc:	dcc00517 	ldw	r19,20(sp)
  809000:	dc800417 	ldw	r18,16(sp)
  809004:	dc400317 	ldw	r17,12(sp)
  809008:	dc000217 	ldw	r16,8(sp)
  80900c:	dec00704 	addi	sp,sp,28
  809010:	f800283a 	ret
  809014:	2008953a 	slli	r4,r4,20
  809018:	1907c83a 	sub	r3,r3,r4
  80901c:	003ff106 	br	808fe4 <__alt_mem_onchip_mem+0xff788fe4>

00809020 <_mprec_log10>:
  809020:	defffe04 	addi	sp,sp,-8
  809024:	dc000015 	stw	r16,0(sp)
  809028:	dfc00115 	stw	ra,4(sp)
  80902c:	008005c4 	movi	r2,23
  809030:	2021883a 	mov	r16,r4
  809034:	11000d0e 	bge	r2,r4,80906c <_mprec_log10+0x4c>
  809038:	0005883a 	mov	r2,zero
  80903c:	00cffc34 	movhi	r3,16368
  809040:	843fffc4 	addi	r16,r16,-1
  809044:	000d883a 	mov	r6,zero
  809048:	01d00934 	movhi	r7,16420
  80904c:	1009883a 	mov	r4,r2
  809050:	180b883a 	mov	r5,r3
  809054:	080e0580 	call	80e058 <__muldf3>
  809058:	803ff91e 	bne	r16,zero,809040 <__alt_mem_onchip_mem+0xff789040>
  80905c:	dfc00117 	ldw	ra,4(sp)
  809060:	dc000017 	ldw	r16,0(sp)
  809064:	dec00204 	addi	sp,sp,8
  809068:	f800283a 	ret
  80906c:	202090fa 	slli	r16,r4,3
  809070:	00802074 	movhi	r2,129
  809074:	108d4e04 	addi	r2,r2,13624
  809078:	1421883a 	add	r16,r2,r16
  80907c:	80800017 	ldw	r2,0(r16)
  809080:	80c00117 	ldw	r3,4(r16)
  809084:	dfc00117 	ldw	ra,4(sp)
  809088:	dc000017 	ldw	r16,0(sp)
  80908c:	dec00204 	addi	sp,sp,8
  809090:	f800283a 	ret

00809094 <__copybits>:
  809094:	297fffc4 	addi	r5,r5,-1
  809098:	280fd17a 	srai	r7,r5,5
  80909c:	30c00417 	ldw	r3,16(r6)
  8090a0:	30800504 	addi	r2,r6,20
  8090a4:	39c00044 	addi	r7,r7,1
  8090a8:	18c7883a 	add	r3,r3,r3
  8090ac:	39cf883a 	add	r7,r7,r7
  8090b0:	18c7883a 	add	r3,r3,r3
  8090b4:	39cf883a 	add	r7,r7,r7
  8090b8:	10c7883a 	add	r3,r2,r3
  8090bc:	21cf883a 	add	r7,r4,r7
  8090c0:	10c00d2e 	bgeu	r2,r3,8090f8 <__copybits+0x64>
  8090c4:	200b883a 	mov	r5,r4
  8090c8:	12000017 	ldw	r8,0(r2)
  8090cc:	29400104 	addi	r5,r5,4
  8090d0:	10800104 	addi	r2,r2,4
  8090d4:	2a3fff15 	stw	r8,-4(r5)
  8090d8:	10fffb36 	bltu	r2,r3,8090c8 <__alt_mem_onchip_mem+0xff7890c8>
  8090dc:	1985c83a 	sub	r2,r3,r6
  8090e0:	10bffac4 	addi	r2,r2,-21
  8090e4:	1004d0ba 	srli	r2,r2,2
  8090e8:	10800044 	addi	r2,r2,1
  8090ec:	1085883a 	add	r2,r2,r2
  8090f0:	1085883a 	add	r2,r2,r2
  8090f4:	2089883a 	add	r4,r4,r2
  8090f8:	21c0032e 	bgeu	r4,r7,809108 <__copybits+0x74>
  8090fc:	20000015 	stw	zero,0(r4)
  809100:	21000104 	addi	r4,r4,4
  809104:	21fffd36 	bltu	r4,r7,8090fc <__alt_mem_onchip_mem+0xff7890fc>
  809108:	f800283a 	ret

0080910c <__any_on>:
  80910c:	20c00417 	ldw	r3,16(r4)
  809110:	2805d17a 	srai	r2,r5,5
  809114:	21000504 	addi	r4,r4,20
  809118:	18800d0e 	bge	r3,r2,809150 <__any_on+0x44>
  80911c:	18c7883a 	add	r3,r3,r3
  809120:	18c7883a 	add	r3,r3,r3
  809124:	20c7883a 	add	r3,r4,r3
  809128:	20c0192e 	bgeu	r4,r3,809190 <__any_on+0x84>
  80912c:	18bfff17 	ldw	r2,-4(r3)
  809130:	18ffff04 	addi	r3,r3,-4
  809134:	1000041e 	bne	r2,zero,809148 <__any_on+0x3c>
  809138:	20c0142e 	bgeu	r4,r3,80918c <__any_on+0x80>
  80913c:	18ffff04 	addi	r3,r3,-4
  809140:	19400017 	ldw	r5,0(r3)
  809144:	283ffc26 	beq	r5,zero,809138 <__alt_mem_onchip_mem+0xff789138>
  809148:	00800044 	movi	r2,1
  80914c:	f800283a 	ret
  809150:	10c00a0e 	bge	r2,r3,80917c <__any_on+0x70>
  809154:	1085883a 	add	r2,r2,r2
  809158:	1085883a 	add	r2,r2,r2
  80915c:	294007cc 	andi	r5,r5,31
  809160:	2087883a 	add	r3,r4,r2
  809164:	283ff026 	beq	r5,zero,809128 <__alt_mem_onchip_mem+0xff789128>
  809168:	19800017 	ldw	r6,0(r3)
  80916c:	3144d83a 	srl	r2,r6,r5
  809170:	114a983a 	sll	r5,r2,r5
  809174:	317ff41e 	bne	r6,r5,809148 <__alt_mem_onchip_mem+0xff789148>
  809178:	003feb06 	br	809128 <__alt_mem_onchip_mem+0xff789128>
  80917c:	1085883a 	add	r2,r2,r2
  809180:	1085883a 	add	r2,r2,r2
  809184:	2087883a 	add	r3,r4,r2
  809188:	003fe706 	br	809128 <__alt_mem_onchip_mem+0xff789128>
  80918c:	f800283a 	ret
  809190:	0005883a 	mov	r2,zero
  809194:	f800283a 	ret

00809198 <__fpclassifyd>:
  809198:	00a00034 	movhi	r2,32768
  80919c:	10bfffc4 	addi	r2,r2,-1
  8091a0:	2884703a 	and	r2,r5,r2
  8091a4:	10000726 	beq	r2,zero,8091c4 <__fpclassifyd+0x2c>
  8091a8:	00fffc34 	movhi	r3,65520
  8091ac:	019ff834 	movhi	r6,32736
  8091b0:	28c7883a 	add	r3,r5,r3
  8091b4:	31bfffc4 	addi	r6,r6,-1
  8091b8:	30c00536 	bltu	r6,r3,8091d0 <__fpclassifyd+0x38>
  8091bc:	00800104 	movi	r2,4
  8091c0:	f800283a 	ret
  8091c4:	2000021e 	bne	r4,zero,8091d0 <__fpclassifyd+0x38>
  8091c8:	00800084 	movi	r2,2
  8091cc:	f800283a 	ret
  8091d0:	00dffc34 	movhi	r3,32752
  8091d4:	019ff834 	movhi	r6,32736
  8091d8:	28cb883a 	add	r5,r5,r3
  8091dc:	31bfffc4 	addi	r6,r6,-1
  8091e0:	317ff62e 	bgeu	r6,r5,8091bc <__alt_mem_onchip_mem+0xff7891bc>
  8091e4:	01400434 	movhi	r5,16
  8091e8:	297fffc4 	addi	r5,r5,-1
  8091ec:	28800236 	bltu	r5,r2,8091f8 <__fpclassifyd+0x60>
  8091f0:	008000c4 	movi	r2,3
  8091f4:	f800283a 	ret
  8091f8:	10c00226 	beq	r2,r3,809204 <__fpclassifyd+0x6c>
  8091fc:	0005883a 	mov	r2,zero
  809200:	f800283a 	ret
  809204:	2005003a 	cmpeq	r2,r4,zero
  809208:	f800283a 	ret

0080920c <_sbrk_r>:
  80920c:	defffd04 	addi	sp,sp,-12
  809210:	dc000015 	stw	r16,0(sp)
  809214:	04002074 	movhi	r16,129
  809218:	dc400115 	stw	r17,4(sp)
  80921c:	841d3f04 	addi	r16,r16,29948
  809220:	2023883a 	mov	r17,r4
  809224:	2809883a 	mov	r4,r5
  809228:	dfc00215 	stw	ra,8(sp)
  80922c:	80000015 	stw	zero,0(r16)
  809230:	080fb600 	call	80fb60 <sbrk>
  809234:	00ffffc4 	movi	r3,-1
  809238:	10c00526 	beq	r2,r3,809250 <_sbrk_r+0x44>
  80923c:	dfc00217 	ldw	ra,8(sp)
  809240:	dc400117 	ldw	r17,4(sp)
  809244:	dc000017 	ldw	r16,0(sp)
  809248:	dec00304 	addi	sp,sp,12
  80924c:	f800283a 	ret
  809250:	80c00017 	ldw	r3,0(r16)
  809254:	183ff926 	beq	r3,zero,80923c <__alt_mem_onchip_mem+0xff78923c>
  809258:	88c00015 	stw	r3,0(r17)
  80925c:	003ff706 	br	80923c <__alt_mem_onchip_mem+0xff78923c>

00809260 <__sread>:
  809260:	defffe04 	addi	sp,sp,-8
  809264:	dc000015 	stw	r16,0(sp)
  809268:	2821883a 	mov	r16,r5
  80926c:	2940038f 	ldh	r5,14(r5)
  809270:	dfc00115 	stw	ra,4(sp)
  809274:	080b7040 	call	80b704 <_read_r>
  809278:	10000716 	blt	r2,zero,809298 <__sread+0x38>
  80927c:	80c01417 	ldw	r3,80(r16)
  809280:	1887883a 	add	r3,r3,r2
  809284:	80c01415 	stw	r3,80(r16)
  809288:	dfc00117 	ldw	ra,4(sp)
  80928c:	dc000017 	ldw	r16,0(sp)
  809290:	dec00204 	addi	sp,sp,8
  809294:	f800283a 	ret
  809298:	80c0030b 	ldhu	r3,12(r16)
  80929c:	18fbffcc 	andi	r3,r3,61439
  8092a0:	80c0030d 	sth	r3,12(r16)
  8092a4:	dfc00117 	ldw	ra,4(sp)
  8092a8:	dc000017 	ldw	r16,0(sp)
  8092ac:	dec00204 	addi	sp,sp,8
  8092b0:	f800283a 	ret

008092b4 <__seofread>:
  8092b4:	0005883a 	mov	r2,zero
  8092b8:	f800283a 	ret

008092bc <__swrite>:
  8092bc:	2880030b 	ldhu	r2,12(r5)
  8092c0:	defffb04 	addi	sp,sp,-20
  8092c4:	dcc00315 	stw	r19,12(sp)
  8092c8:	dc800215 	stw	r18,8(sp)
  8092cc:	dc400115 	stw	r17,4(sp)
  8092d0:	dc000015 	stw	r16,0(sp)
  8092d4:	dfc00415 	stw	ra,16(sp)
  8092d8:	10c0400c 	andi	r3,r2,256
  8092dc:	2821883a 	mov	r16,r5
  8092e0:	2023883a 	mov	r17,r4
  8092e4:	3025883a 	mov	r18,r6
  8092e8:	3827883a 	mov	r19,r7
  8092ec:	18000526 	beq	r3,zero,809304 <__swrite+0x48>
  8092f0:	2940038f 	ldh	r5,14(r5)
  8092f4:	01c00084 	movi	r7,2
  8092f8:	000d883a 	mov	r6,zero
  8092fc:	080b5480 	call	80b548 <_lseek_r>
  809300:	8080030b 	ldhu	r2,12(r16)
  809304:	8140038f 	ldh	r5,14(r16)
  809308:	10bbffcc 	andi	r2,r2,61439
  80930c:	980f883a 	mov	r7,r19
  809310:	900d883a 	mov	r6,r18
  809314:	8809883a 	mov	r4,r17
  809318:	8080030d 	sth	r2,12(r16)
  80931c:	dfc00417 	ldw	ra,16(sp)
  809320:	dcc00317 	ldw	r19,12(sp)
  809324:	dc800217 	ldw	r18,8(sp)
  809328:	dc400117 	ldw	r17,4(sp)
  80932c:	dc000017 	ldw	r16,0(sp)
  809330:	dec00504 	addi	sp,sp,20
  809334:	080ab581 	jmpi	80ab58 <_write_r>

00809338 <__sseek>:
  809338:	defffe04 	addi	sp,sp,-8
  80933c:	dc000015 	stw	r16,0(sp)
  809340:	2821883a 	mov	r16,r5
  809344:	2940038f 	ldh	r5,14(r5)
  809348:	dfc00115 	stw	ra,4(sp)
  80934c:	080b5480 	call	80b548 <_lseek_r>
  809350:	00ffffc4 	movi	r3,-1
  809354:	10c00826 	beq	r2,r3,809378 <__sseek+0x40>
  809358:	80c0030b 	ldhu	r3,12(r16)
  80935c:	80801415 	stw	r2,80(r16)
  809360:	18c40014 	ori	r3,r3,4096
  809364:	80c0030d 	sth	r3,12(r16)
  809368:	dfc00117 	ldw	ra,4(sp)
  80936c:	dc000017 	ldw	r16,0(sp)
  809370:	dec00204 	addi	sp,sp,8
  809374:	f800283a 	ret
  809378:	80c0030b 	ldhu	r3,12(r16)
  80937c:	18fbffcc 	andi	r3,r3,61439
  809380:	80c0030d 	sth	r3,12(r16)
  809384:	dfc00117 	ldw	ra,4(sp)
  809388:	dc000017 	ldw	r16,0(sp)
  80938c:	dec00204 	addi	sp,sp,8
  809390:	f800283a 	ret

00809394 <__sclose>:
  809394:	2940038f 	ldh	r5,14(r5)
  809398:	080abb81 	jmpi	80abb8 <_close_r>

0080939c <strcmp>:
  80939c:	2144b03a 	or	r2,r4,r5
  8093a0:	108000cc 	andi	r2,r2,3
  8093a4:	1000171e 	bne	r2,zero,809404 <strcmp+0x68>
  8093a8:	20800017 	ldw	r2,0(r4)
  8093ac:	28c00017 	ldw	r3,0(r5)
  8093b0:	10c0141e 	bne	r2,r3,809404 <strcmp+0x68>
  8093b4:	027fbff4 	movhi	r9,65279
  8093b8:	4a7fbfc4 	addi	r9,r9,-257
  8093bc:	0086303a 	nor	r3,zero,r2
  8093c0:	02202074 	movhi	r8,32897
  8093c4:	1245883a 	add	r2,r2,r9
  8093c8:	42202004 	addi	r8,r8,-32640
  8093cc:	10c4703a 	and	r2,r2,r3
  8093d0:	1204703a 	and	r2,r2,r8
  8093d4:	10000226 	beq	r2,zero,8093e0 <strcmp+0x44>
  8093d8:	00002306 	br	809468 <strcmp+0xcc>
  8093dc:	1000221e 	bne	r2,zero,809468 <strcmp+0xcc>
  8093e0:	21000104 	addi	r4,r4,4
  8093e4:	20c00017 	ldw	r3,0(r4)
  8093e8:	29400104 	addi	r5,r5,4
  8093ec:	29800017 	ldw	r6,0(r5)
  8093f0:	1a4f883a 	add	r7,r3,r9
  8093f4:	00c4303a 	nor	r2,zero,r3
  8093f8:	3884703a 	and	r2,r7,r2
  8093fc:	1204703a 	and	r2,r2,r8
  809400:	19bff626 	beq	r3,r6,8093dc <__alt_mem_onchip_mem+0xff7893dc>
  809404:	20800003 	ldbu	r2,0(r4)
  809408:	10c03fcc 	andi	r3,r2,255
  80940c:	18c0201c 	xori	r3,r3,128
  809410:	18ffe004 	addi	r3,r3,-128
  809414:	18000c26 	beq	r3,zero,809448 <strcmp+0xac>
  809418:	29800007 	ldb	r6,0(r5)
  80941c:	19800326 	beq	r3,r6,80942c <strcmp+0x90>
  809420:	00001306 	br	809470 <strcmp+0xd4>
  809424:	29800007 	ldb	r6,0(r5)
  809428:	11800b1e 	bne	r2,r6,809458 <strcmp+0xbc>
  80942c:	21000044 	addi	r4,r4,1
  809430:	20c00003 	ldbu	r3,0(r4)
  809434:	29400044 	addi	r5,r5,1
  809438:	18803fcc 	andi	r2,r3,255
  80943c:	1080201c 	xori	r2,r2,128
  809440:	10bfe004 	addi	r2,r2,-128
  809444:	103ff71e 	bne	r2,zero,809424 <__alt_mem_onchip_mem+0xff789424>
  809448:	0007883a 	mov	r3,zero
  80944c:	28800003 	ldbu	r2,0(r5)
  809450:	1885c83a 	sub	r2,r3,r2
  809454:	f800283a 	ret
  809458:	28800003 	ldbu	r2,0(r5)
  80945c:	18c03fcc 	andi	r3,r3,255
  809460:	1885c83a 	sub	r2,r3,r2
  809464:	f800283a 	ret
  809468:	0005883a 	mov	r2,zero
  80946c:	f800283a 	ret
  809470:	10c03fcc 	andi	r3,r2,255
  809474:	003ff506 	br	80944c <__alt_mem_onchip_mem+0xff78944c>

00809478 <strlen>:
  809478:	208000cc 	andi	r2,r4,3
  80947c:	10002026 	beq	r2,zero,809500 <strlen+0x88>
  809480:	20800007 	ldb	r2,0(r4)
  809484:	10002026 	beq	r2,zero,809508 <strlen+0x90>
  809488:	2005883a 	mov	r2,r4
  80948c:	00000206 	br	809498 <strlen+0x20>
  809490:	10c00007 	ldb	r3,0(r2)
  809494:	18001826 	beq	r3,zero,8094f8 <strlen+0x80>
  809498:	10800044 	addi	r2,r2,1
  80949c:	10c000cc 	andi	r3,r2,3
  8094a0:	183ffb1e 	bne	r3,zero,809490 <__alt_mem_onchip_mem+0xff789490>
  8094a4:	10c00017 	ldw	r3,0(r2)
  8094a8:	01ffbff4 	movhi	r7,65279
  8094ac:	39ffbfc4 	addi	r7,r7,-257
  8094b0:	00ca303a 	nor	r5,zero,r3
  8094b4:	01a02074 	movhi	r6,32897
  8094b8:	19c7883a 	add	r3,r3,r7
  8094bc:	31a02004 	addi	r6,r6,-32640
  8094c0:	1946703a 	and	r3,r3,r5
  8094c4:	1986703a 	and	r3,r3,r6
  8094c8:	1800091e 	bne	r3,zero,8094f0 <strlen+0x78>
  8094cc:	10800104 	addi	r2,r2,4
  8094d0:	10c00017 	ldw	r3,0(r2)
  8094d4:	19cb883a 	add	r5,r3,r7
  8094d8:	00c6303a 	nor	r3,zero,r3
  8094dc:	28c6703a 	and	r3,r5,r3
  8094e0:	1986703a 	and	r3,r3,r6
  8094e4:	183ff926 	beq	r3,zero,8094cc <__alt_mem_onchip_mem+0xff7894cc>
  8094e8:	00000106 	br	8094f0 <strlen+0x78>
  8094ec:	10800044 	addi	r2,r2,1
  8094f0:	10c00007 	ldb	r3,0(r2)
  8094f4:	183ffd1e 	bne	r3,zero,8094ec <__alt_mem_onchip_mem+0xff7894ec>
  8094f8:	1105c83a 	sub	r2,r2,r4
  8094fc:	f800283a 	ret
  809500:	2005883a 	mov	r2,r4
  809504:	003fe706 	br	8094a4 <__alt_mem_onchip_mem+0xff7894a4>
  809508:	0005883a 	mov	r2,zero
  80950c:	f800283a 	ret

00809510 <__sprint_r.part.0>:
  809510:	28801917 	ldw	r2,100(r5)
  809514:	defff604 	addi	sp,sp,-40
  809518:	dd400515 	stw	r21,20(sp)
  80951c:	dfc00915 	stw	ra,36(sp)
  809520:	df000815 	stw	fp,32(sp)
  809524:	ddc00715 	stw	r23,28(sp)
  809528:	dd800615 	stw	r22,24(sp)
  80952c:	dd000415 	stw	r20,16(sp)
  809530:	dcc00315 	stw	r19,12(sp)
  809534:	dc800215 	stw	r18,8(sp)
  809538:	dc400115 	stw	r17,4(sp)
  80953c:	dc000015 	stw	r16,0(sp)
  809540:	1088000c 	andi	r2,r2,8192
  809544:	302b883a 	mov	r21,r6
  809548:	10002e26 	beq	r2,zero,809604 <__sprint_r.part.0+0xf4>
  80954c:	30800217 	ldw	r2,8(r6)
  809550:	35800017 	ldw	r22,0(r6)
  809554:	10002926 	beq	r2,zero,8095fc <__sprint_r.part.0+0xec>
  809558:	2827883a 	mov	r19,r5
  80955c:	2029883a 	mov	r20,r4
  809560:	b5c00104 	addi	r23,r22,4
  809564:	04bfffc4 	movi	r18,-1
  809568:	bc400017 	ldw	r17,0(r23)
  80956c:	b4000017 	ldw	r16,0(r22)
  809570:	0039883a 	mov	fp,zero
  809574:	8822d0ba 	srli	r17,r17,2
  809578:	8800031e 	bne	r17,zero,809588 <__sprint_r.part.0+0x78>
  80957c:	00001806 	br	8095e0 <__sprint_r.part.0+0xd0>
  809580:	84000104 	addi	r16,r16,4
  809584:	8f001526 	beq	r17,fp,8095dc <__sprint_r.part.0+0xcc>
  809588:	81400017 	ldw	r5,0(r16)
  80958c:	980d883a 	mov	r6,r19
  809590:	a009883a 	mov	r4,r20
  809594:	080af380 	call	80af38 <_fputwc_r>
  809598:	e7000044 	addi	fp,fp,1
  80959c:	14bff81e 	bne	r2,r18,809580 <__alt_mem_onchip_mem+0xff789580>
  8095a0:	9005883a 	mov	r2,r18
  8095a4:	a8000215 	stw	zero,8(r21)
  8095a8:	a8000115 	stw	zero,4(r21)
  8095ac:	dfc00917 	ldw	ra,36(sp)
  8095b0:	df000817 	ldw	fp,32(sp)
  8095b4:	ddc00717 	ldw	r23,28(sp)
  8095b8:	dd800617 	ldw	r22,24(sp)
  8095bc:	dd400517 	ldw	r21,20(sp)
  8095c0:	dd000417 	ldw	r20,16(sp)
  8095c4:	dcc00317 	ldw	r19,12(sp)
  8095c8:	dc800217 	ldw	r18,8(sp)
  8095cc:	dc400117 	ldw	r17,4(sp)
  8095d0:	dc000017 	ldw	r16,0(sp)
  8095d4:	dec00a04 	addi	sp,sp,40
  8095d8:	f800283a 	ret
  8095dc:	a8800217 	ldw	r2,8(r21)
  8095e0:	8c63883a 	add	r17,r17,r17
  8095e4:	8c63883a 	add	r17,r17,r17
  8095e8:	1445c83a 	sub	r2,r2,r17
  8095ec:	a8800215 	stw	r2,8(r21)
  8095f0:	b5800204 	addi	r22,r22,8
  8095f4:	bdc00204 	addi	r23,r23,8
  8095f8:	103fdb1e 	bne	r2,zero,809568 <__alt_mem_onchip_mem+0xff789568>
  8095fc:	0005883a 	mov	r2,zero
  809600:	003fe806 	br	8095a4 <__alt_mem_onchip_mem+0xff7895a4>
  809604:	080b0380 	call	80b038 <__sfvwrite_r>
  809608:	003fe606 	br	8095a4 <__alt_mem_onchip_mem+0xff7895a4>

0080960c <__sprint_r>:
  80960c:	30c00217 	ldw	r3,8(r6)
  809610:	18000126 	beq	r3,zero,809618 <__sprint_r+0xc>
  809614:	08095101 	jmpi	809510 <__sprint_r.part.0>
  809618:	30000115 	stw	zero,4(r6)
  80961c:	0005883a 	mov	r2,zero
  809620:	f800283a 	ret

00809624 <___vfiprintf_internal_r>:
  809624:	deffc904 	addi	sp,sp,-220
  809628:	df003515 	stw	fp,212(sp)
  80962c:	dd003115 	stw	r20,196(sp)
  809630:	dfc03615 	stw	ra,216(sp)
  809634:	ddc03415 	stw	r23,208(sp)
  809638:	dd803315 	stw	r22,204(sp)
  80963c:	dd403215 	stw	r21,200(sp)
  809640:	dcc03015 	stw	r19,192(sp)
  809644:	dc802f15 	stw	r18,188(sp)
  809648:	dc402e15 	stw	r17,184(sp)
  80964c:	dc002d15 	stw	r16,180(sp)
  809650:	d9002015 	stw	r4,128(sp)
  809654:	d9c02215 	stw	r7,136(sp)
  809658:	2829883a 	mov	r20,r5
  80965c:	3039883a 	mov	fp,r6
  809660:	20000226 	beq	r4,zero,80966c <___vfiprintf_internal_r+0x48>
  809664:	20800e17 	ldw	r2,56(r4)
  809668:	1000cf26 	beq	r2,zero,8099a8 <___vfiprintf_internal_r+0x384>
  80966c:	a080030b 	ldhu	r2,12(r20)
  809670:	10c8000c 	andi	r3,r2,8192
  809674:	1800061e 	bne	r3,zero,809690 <___vfiprintf_internal_r+0x6c>
  809678:	a1001917 	ldw	r4,100(r20)
  80967c:	00f7ffc4 	movi	r3,-8193
  809680:	10880014 	ori	r2,r2,8192
  809684:	20c6703a 	and	r3,r4,r3
  809688:	a080030d 	sth	r2,12(r20)
  80968c:	a0c01915 	stw	r3,100(r20)
  809690:	10c0020c 	andi	r3,r2,8
  809694:	1800a926 	beq	r3,zero,80993c <___vfiprintf_internal_r+0x318>
  809698:	a0c00417 	ldw	r3,16(r20)
  80969c:	1800a726 	beq	r3,zero,80993c <___vfiprintf_internal_r+0x318>
  8096a0:	1080068c 	andi	r2,r2,26
  8096a4:	00c00284 	movi	r3,10
  8096a8:	10c0ac26 	beq	r2,r3,80995c <___vfiprintf_internal_r+0x338>
  8096ac:	da801a04 	addi	r10,sp,104
  8096b0:	da801e15 	stw	r10,120(sp)
  8096b4:	d8801e17 	ldw	r2,120(sp)
  8096b8:	da8019c4 	addi	r10,sp,103
  8096bc:	05802074 	movhi	r22,129
  8096c0:	05c02074 	movhi	r23,129
  8096c4:	da801f15 	stw	r10,124(sp)
  8096c8:	1295c83a 	sub	r10,r2,r10
  8096cc:	b58d8404 	addi	r22,r22,13840
  8096d0:	bdcd8004 	addi	r23,r23,13824
  8096d4:	dec01a15 	stw	sp,104(sp)
  8096d8:	d8001c15 	stw	zero,112(sp)
  8096dc:	d8001b15 	stw	zero,108(sp)
  8096e0:	d8002615 	stw	zero,152(sp)
  8096e4:	d8002315 	stw	zero,140(sp)
  8096e8:	da802715 	stw	r10,156(sp)
  8096ec:	d811883a 	mov	r8,sp
  8096f0:	dd002115 	stw	r20,132(sp)
  8096f4:	e021883a 	mov	r16,fp
  8096f8:	80800007 	ldb	r2,0(r16)
  8096fc:	1003ea26 	beq	r2,zero,80a6a8 <___vfiprintf_internal_r+0x1084>
  809700:	00c00944 	movi	r3,37
  809704:	8025883a 	mov	r18,r16
  809708:	10c0021e 	bne	r2,r3,809714 <___vfiprintf_internal_r+0xf0>
  80970c:	00001606 	br	809768 <___vfiprintf_internal_r+0x144>
  809710:	10c00326 	beq	r2,r3,809720 <___vfiprintf_internal_r+0xfc>
  809714:	94800044 	addi	r18,r18,1
  809718:	90800007 	ldb	r2,0(r18)
  80971c:	103ffc1e 	bne	r2,zero,809710 <__alt_mem_onchip_mem+0xff789710>
  809720:	9423c83a 	sub	r17,r18,r16
  809724:	88001026 	beq	r17,zero,809768 <___vfiprintf_internal_r+0x144>
  809728:	d8c01c17 	ldw	r3,112(sp)
  80972c:	d8801b17 	ldw	r2,108(sp)
  809730:	44000015 	stw	r16,0(r8)
  809734:	88c7883a 	add	r3,r17,r3
  809738:	10800044 	addi	r2,r2,1
  80973c:	44400115 	stw	r17,4(r8)
  809740:	d8c01c15 	stw	r3,112(sp)
  809744:	d8801b15 	stw	r2,108(sp)
  809748:	010001c4 	movi	r4,7
  80974c:	2080760e 	bge	r4,r2,809928 <___vfiprintf_internal_r+0x304>
  809750:	1803821e 	bne	r3,zero,80a55c <___vfiprintf_internal_r+0xf38>
  809754:	da802317 	ldw	r10,140(sp)
  809758:	d8001b15 	stw	zero,108(sp)
  80975c:	d811883a 	mov	r8,sp
  809760:	5455883a 	add	r10,r10,r17
  809764:	da802315 	stw	r10,140(sp)
  809768:	90800007 	ldb	r2,0(r18)
  80976c:	10044626 	beq	r2,zero,80a888 <___vfiprintf_internal_r+0x1264>
  809770:	90c00047 	ldb	r3,1(r18)
  809774:	94000044 	addi	r16,r18,1
  809778:	d8001d85 	stb	zero,118(sp)
  80977c:	0009883a 	mov	r4,zero
  809780:	000f883a 	mov	r7,zero
  809784:	027fffc4 	movi	r9,-1
  809788:	0023883a 	mov	r17,zero
  80978c:	0029883a 	mov	r20,zero
  809790:	01401604 	movi	r5,88
  809794:	01800244 	movi	r6,9
  809798:	03400a84 	movi	r13,42
  80979c:	03001b04 	movi	r12,108
  8097a0:	84000044 	addi	r16,r16,1
  8097a4:	18bff804 	addi	r2,r3,-32
  8097a8:	28827336 	bltu	r5,r2,80a178 <___vfiprintf_internal_r+0xb54>
  8097ac:	100490ba 	slli	r2,r2,2
  8097b0:	02802074 	movhi	r10,129
  8097b4:	52a5f104 	addi	r10,r10,-26684
  8097b8:	1285883a 	add	r2,r2,r10
  8097bc:	10800017 	ldw	r2,0(r2)
  8097c0:	1000683a 	jmp	r2
  8097c4:	00809eac 	andhi	r2,zero,634
  8097c8:	0080a178 	rdprs	r2,zero,645
  8097cc:	0080a178 	rdprs	r2,zero,645
  8097d0:	00809ecc 	andi	r2,zero,635
  8097d4:	0080a178 	rdprs	r2,zero,645
  8097d8:	0080a178 	rdprs	r2,zero,645
  8097dc:	0080a178 	rdprs	r2,zero,645
  8097e0:	0080a178 	rdprs	r2,zero,645
  8097e4:	0080a178 	rdprs	r2,zero,645
  8097e8:	0080a178 	rdprs	r2,zero,645
  8097ec:	0080a0b4 	movhi	r2,642
  8097f0:	0080a0d0 	cmplti	r2,zero,643
  8097f4:	0080a178 	rdprs	r2,zero,645
  8097f8:	008099b8 	rdprs	r2,zero,614
  8097fc:	0080a0e0 	cmpeqi	r2,zero,643
  809800:	0080a178 	rdprs	r2,zero,645
  809804:	00809ed8 	cmpnei	r2,zero,635
  809808:	00809ee4 	muli	r2,zero,635
  80980c:	00809ee4 	muli	r2,zero,635
  809810:	00809ee4 	muli	r2,zero,635
  809814:	00809ee4 	muli	r2,zero,635
  809818:	00809ee4 	muli	r2,zero,635
  80981c:	00809ee4 	muli	r2,zero,635
  809820:	00809ee4 	muli	r2,zero,635
  809824:	00809ee4 	muli	r2,zero,635
  809828:	00809ee4 	muli	r2,zero,635
  80982c:	0080a178 	rdprs	r2,zero,645
  809830:	0080a178 	rdprs	r2,zero,645
  809834:	0080a178 	rdprs	r2,zero,645
  809838:	0080a178 	rdprs	r2,zero,645
  80983c:	0080a178 	rdprs	r2,zero,645
  809840:	0080a178 	rdprs	r2,zero,645
  809844:	0080a178 	rdprs	r2,zero,645
  809848:	0080a178 	rdprs	r2,zero,645
  80984c:	0080a178 	rdprs	r2,zero,645
  809850:	0080a178 	rdprs	r2,zero,645
  809854:	00809f10 	cmplti	r2,zero,636
  809858:	0080a178 	rdprs	r2,zero,645
  80985c:	0080a178 	rdprs	r2,zero,645
  809860:	0080a178 	rdprs	r2,zero,645
  809864:	0080a178 	rdprs	r2,zero,645
  809868:	0080a178 	rdprs	r2,zero,645
  80986c:	0080a178 	rdprs	r2,zero,645
  809870:	0080a178 	rdprs	r2,zero,645
  809874:	0080a178 	rdprs	r2,zero,645
  809878:	0080a178 	rdprs	r2,zero,645
  80987c:	0080a178 	rdprs	r2,zero,645
  809880:	00809f48 	cmpgei	r2,zero,637
  809884:	0080a178 	rdprs	r2,zero,645
  809888:	0080a178 	rdprs	r2,zero,645
  80988c:	0080a178 	rdprs	r2,zero,645
  809890:	0080a178 	rdprs	r2,zero,645
  809894:	0080a178 	rdprs	r2,zero,645
  809898:	00809fa0 	cmpeqi	r2,zero,638
  80989c:	0080a178 	rdprs	r2,zero,645
  8098a0:	0080a178 	rdprs	r2,zero,645
  8098a4:	0080a010 	cmplti	r2,zero,640
  8098a8:	0080a178 	rdprs	r2,zero,645
  8098ac:	0080a178 	rdprs	r2,zero,645
  8098b0:	0080a178 	rdprs	r2,zero,645
  8098b4:	0080a178 	rdprs	r2,zero,645
  8098b8:	0080a178 	rdprs	r2,zero,645
  8098bc:	0080a178 	rdprs	r2,zero,645
  8098c0:	0080a178 	rdprs	r2,zero,645
  8098c4:	0080a178 	rdprs	r2,zero,645
  8098c8:	0080a178 	rdprs	r2,zero,645
  8098cc:	0080a178 	rdprs	r2,zero,645
  8098d0:	00809dbc 	xorhi	r2,zero,630
  8098d4:	00809de8 	cmpgeui	r2,zero,631
  8098d8:	0080a178 	rdprs	r2,zero,645
  8098dc:	0080a178 	rdprs	r2,zero,645
  8098e0:	0080a178 	rdprs	r2,zero,645
  8098e4:	0080a120 	cmpeqi	r2,zero,644
  8098e8:	00809de8 	cmpgeui	r2,zero,631
  8098ec:	0080a178 	rdprs	r2,zero,645
  8098f0:	0080a178 	rdprs	r2,zero,645
  8098f4:	00809c7c 	xorhi	r2,zero,625
  8098f8:	0080a178 	rdprs	r2,zero,645
  8098fc:	00809c8c 	andi	r2,zero,626
  809900:	00809cc8 	cmpgei	r2,zero,627
  809904:	008099c4 	movi	r2,615
  809908:	00809c70 	cmpltui	r2,zero,625
  80990c:	0080a178 	rdprs	r2,zero,645
  809910:	0080a04c 	andi	r2,zero,641
  809914:	0080a178 	rdprs	r2,zero,645
  809918:	0080a0a4 	muli	r2,zero,642
  80991c:	0080a178 	rdprs	r2,zero,645
  809920:	0080a178 	rdprs	r2,zero,645
  809924:	00809d68 	cmpgeui	r2,zero,629
  809928:	42000204 	addi	r8,r8,8
  80992c:	da802317 	ldw	r10,140(sp)
  809930:	5455883a 	add	r10,r10,r17
  809934:	da802315 	stw	r10,140(sp)
  809938:	003f8b06 	br	809768 <__alt_mem_onchip_mem+0xff789768>
  80993c:	d9002017 	ldw	r4,128(sp)
  809940:	a00b883a 	mov	r5,r20
  809944:	0804dc40 	call	804dc4 <__swsetup_r>
  809948:	1003b11e 	bne	r2,zero,80a810 <___vfiprintf_internal_r+0x11ec>
  80994c:	a080030b 	ldhu	r2,12(r20)
  809950:	00c00284 	movi	r3,10
  809954:	1080068c 	andi	r2,r2,26
  809958:	10ff541e 	bne	r2,r3,8096ac <__alt_mem_onchip_mem+0xff7896ac>
  80995c:	a080038f 	ldh	r2,14(r20)
  809960:	103f5216 	blt	r2,zero,8096ac <__alt_mem_onchip_mem+0xff7896ac>
  809964:	d9c02217 	ldw	r7,136(sp)
  809968:	d9002017 	ldw	r4,128(sp)
  80996c:	e00d883a 	mov	r6,fp
  809970:	a00b883a 	mov	r5,r20
  809974:	080aa9c0 	call	80aa9c <__sbprintf>
  809978:	dfc03617 	ldw	ra,216(sp)
  80997c:	df003517 	ldw	fp,212(sp)
  809980:	ddc03417 	ldw	r23,208(sp)
  809984:	dd803317 	ldw	r22,204(sp)
  809988:	dd403217 	ldw	r21,200(sp)
  80998c:	dd003117 	ldw	r20,196(sp)
  809990:	dcc03017 	ldw	r19,192(sp)
  809994:	dc802f17 	ldw	r18,188(sp)
  809998:	dc402e17 	ldw	r17,184(sp)
  80999c:	dc002d17 	ldw	r16,180(sp)
  8099a0:	dec03704 	addi	sp,sp,220
  8099a4:	f800283a 	ret
  8099a8:	0806d980 	call	806d98 <__sinit>
  8099ac:	003f2f06 	br	80966c <__alt_mem_onchip_mem+0xff78966c>
  8099b0:	0463c83a 	sub	r17,zero,r17
  8099b4:	d8802215 	stw	r2,136(sp)
  8099b8:	a5000114 	ori	r20,r20,4
  8099bc:	80c00007 	ldb	r3,0(r16)
  8099c0:	003f7706 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  8099c4:	00800c04 	movi	r2,48
  8099c8:	da802217 	ldw	r10,136(sp)
  8099cc:	d8801d05 	stb	r2,116(sp)
  8099d0:	00801e04 	movi	r2,120
  8099d4:	d8801d45 	stb	r2,117(sp)
  8099d8:	d8001d85 	stb	zero,118(sp)
  8099dc:	50c00104 	addi	r3,r10,4
  8099e0:	54800017 	ldw	r18,0(r10)
  8099e4:	0027883a 	mov	r19,zero
  8099e8:	a0800094 	ori	r2,r20,2
  8099ec:	48030b16 	blt	r9,zero,80a61c <___vfiprintf_internal_r+0xff8>
  8099f0:	00bfdfc4 	movi	r2,-129
  8099f4:	a096703a 	and	r11,r20,r2
  8099f8:	d8c02215 	stw	r3,136(sp)
  8099fc:	5d000094 	ori	r20,r11,2
  809a00:	90032b1e 	bne	r18,zero,80a6b0 <___vfiprintf_internal_r+0x108c>
  809a04:	00802074 	movhi	r2,129
  809a08:	108d1f04 	addi	r2,r2,13436
  809a0c:	d8802615 	stw	r2,152(sp)
  809a10:	0039883a 	mov	fp,zero
  809a14:	48017b1e 	bne	r9,zero,80a004 <___vfiprintf_internal_r+0x9e0>
  809a18:	0013883a 	mov	r9,zero
  809a1c:	0027883a 	mov	r19,zero
  809a20:	dd401a04 	addi	r21,sp,104
  809a24:	4825883a 	mov	r18,r9
  809a28:	4cc0010e 	bge	r9,r19,809a30 <___vfiprintf_internal_r+0x40c>
  809a2c:	9825883a 	mov	r18,r19
  809a30:	e7003fcc 	andi	fp,fp,255
  809a34:	e700201c 	xori	fp,fp,128
  809a38:	e73fe004 	addi	fp,fp,-128
  809a3c:	e0000126 	beq	fp,zero,809a44 <___vfiprintf_internal_r+0x420>
  809a40:	94800044 	addi	r18,r18,1
  809a44:	a380008c 	andi	r14,r20,2
  809a48:	70000126 	beq	r14,zero,809a50 <___vfiprintf_internal_r+0x42c>
  809a4c:	94800084 	addi	r18,r18,2
  809a50:	a700210c 	andi	fp,r20,132
  809a54:	e001df1e 	bne	fp,zero,80a1d4 <___vfiprintf_internal_r+0xbb0>
  809a58:	8c87c83a 	sub	r3,r17,r18
  809a5c:	00c1dd0e 	bge	zero,r3,80a1d4 <___vfiprintf_internal_r+0xbb0>
  809a60:	01c00404 	movi	r7,16
  809a64:	d8801c17 	ldw	r2,112(sp)
  809a68:	38c3ad0e 	bge	r7,r3,80a920 <___vfiprintf_internal_r+0x12fc>
  809a6c:	02802074 	movhi	r10,129
  809a70:	528d8404 	addi	r10,r10,13840
  809a74:	dc002915 	stw	r16,164(sp)
  809a78:	d9801b17 	ldw	r6,108(sp)
  809a7c:	da802415 	stw	r10,144(sp)
  809a80:	03c001c4 	movi	r15,7
  809a84:	da402515 	stw	r9,148(sp)
  809a88:	db802815 	stw	r14,160(sp)
  809a8c:	1821883a 	mov	r16,r3
  809a90:	00000506 	br	809aa8 <___vfiprintf_internal_r+0x484>
  809a94:	31400084 	addi	r5,r6,2
  809a98:	42000204 	addi	r8,r8,8
  809a9c:	200d883a 	mov	r6,r4
  809aa0:	843ffc04 	addi	r16,r16,-16
  809aa4:	3c000d0e 	bge	r7,r16,809adc <___vfiprintf_internal_r+0x4b8>
  809aa8:	10800404 	addi	r2,r2,16
  809aac:	31000044 	addi	r4,r6,1
  809ab0:	45800015 	stw	r22,0(r8)
  809ab4:	41c00115 	stw	r7,4(r8)
  809ab8:	d8801c15 	stw	r2,112(sp)
  809abc:	d9001b15 	stw	r4,108(sp)
  809ac0:	793ff40e 	bge	r15,r4,809a94 <__alt_mem_onchip_mem+0xff789a94>
  809ac4:	1001b51e 	bne	r2,zero,80a19c <___vfiprintf_internal_r+0xb78>
  809ac8:	843ffc04 	addi	r16,r16,-16
  809acc:	000d883a 	mov	r6,zero
  809ad0:	01400044 	movi	r5,1
  809ad4:	d811883a 	mov	r8,sp
  809ad8:	3c3ff316 	blt	r7,r16,809aa8 <__alt_mem_onchip_mem+0xff789aa8>
  809adc:	8007883a 	mov	r3,r16
  809ae0:	da402517 	ldw	r9,148(sp)
  809ae4:	db802817 	ldw	r14,160(sp)
  809ae8:	dc002917 	ldw	r16,164(sp)
  809aec:	da802417 	ldw	r10,144(sp)
  809af0:	1885883a 	add	r2,r3,r2
  809af4:	40c00115 	stw	r3,4(r8)
  809af8:	42800015 	stw	r10,0(r8)
  809afc:	d8801c15 	stw	r2,112(sp)
  809b00:	d9401b15 	stw	r5,108(sp)
  809b04:	00c001c4 	movi	r3,7
  809b08:	19426016 	blt	r3,r5,80a48c <___vfiprintf_internal_r+0xe68>
  809b0c:	d8c01d87 	ldb	r3,118(sp)
  809b10:	42000204 	addi	r8,r8,8
  809b14:	29000044 	addi	r4,r5,1
  809b18:	1801b31e 	bne	r3,zero,80a1e8 <___vfiprintf_internal_r+0xbc4>
  809b1c:	7001c026 	beq	r14,zero,80a220 <___vfiprintf_internal_r+0xbfc>
  809b20:	d8c01d04 	addi	r3,sp,116
  809b24:	10800084 	addi	r2,r2,2
  809b28:	40c00015 	stw	r3,0(r8)
  809b2c:	00c00084 	movi	r3,2
  809b30:	40c00115 	stw	r3,4(r8)
  809b34:	d8801c15 	stw	r2,112(sp)
  809b38:	d9001b15 	stw	r4,108(sp)
  809b3c:	00c001c4 	movi	r3,7
  809b40:	1902650e 	bge	r3,r4,80a4d8 <___vfiprintf_internal_r+0xeb4>
  809b44:	10029a1e 	bne	r2,zero,80a5b0 <___vfiprintf_internal_r+0xf8c>
  809b48:	00c02004 	movi	r3,128
  809b4c:	01000044 	movi	r4,1
  809b50:	000b883a 	mov	r5,zero
  809b54:	d811883a 	mov	r8,sp
  809b58:	e0c1b31e 	bne	fp,r3,80a228 <___vfiprintf_internal_r+0xc04>
  809b5c:	8cb9c83a 	sub	fp,r17,r18
  809b60:	0701b10e 	bge	zero,fp,80a228 <___vfiprintf_internal_r+0xc04>
  809b64:	01c00404 	movi	r7,16
  809b68:	3f03890e 	bge	r7,fp,80a990 <___vfiprintf_internal_r+0x136c>
  809b6c:	00c02074 	movhi	r3,129
  809b70:	18cd8004 	addi	r3,r3,13824
  809b74:	d8c02415 	stw	r3,144(sp)
  809b78:	8007883a 	mov	r3,r16
  809b7c:	034001c4 	movi	r13,7
  809b80:	e021883a 	mov	r16,fp
  809b84:	da402515 	stw	r9,148(sp)
  809b88:	1839883a 	mov	fp,r3
  809b8c:	00000506 	br	809ba4 <___vfiprintf_internal_r+0x580>
  809b90:	29800084 	addi	r6,r5,2
  809b94:	42000204 	addi	r8,r8,8
  809b98:	180b883a 	mov	r5,r3
  809b9c:	843ffc04 	addi	r16,r16,-16
  809ba0:	3c000d0e 	bge	r7,r16,809bd8 <___vfiprintf_internal_r+0x5b4>
  809ba4:	10800404 	addi	r2,r2,16
  809ba8:	28c00044 	addi	r3,r5,1
  809bac:	45c00015 	stw	r23,0(r8)
  809bb0:	41c00115 	stw	r7,4(r8)
  809bb4:	d8801c15 	stw	r2,112(sp)
  809bb8:	d8c01b15 	stw	r3,108(sp)
  809bbc:	68fff40e 	bge	r13,r3,809b90 <__alt_mem_onchip_mem+0xff789b90>
  809bc0:	1002241e 	bne	r2,zero,80a454 <___vfiprintf_internal_r+0xe30>
  809bc4:	843ffc04 	addi	r16,r16,-16
  809bc8:	01800044 	movi	r6,1
  809bcc:	000b883a 	mov	r5,zero
  809bd0:	d811883a 	mov	r8,sp
  809bd4:	3c3ff316 	blt	r7,r16,809ba4 <__alt_mem_onchip_mem+0xff789ba4>
  809bd8:	da402517 	ldw	r9,148(sp)
  809bdc:	e007883a 	mov	r3,fp
  809be0:	8039883a 	mov	fp,r16
  809be4:	1821883a 	mov	r16,r3
  809be8:	d8c02417 	ldw	r3,144(sp)
  809bec:	1705883a 	add	r2,r2,fp
  809bf0:	47000115 	stw	fp,4(r8)
  809bf4:	40c00015 	stw	r3,0(r8)
  809bf8:	d8801c15 	stw	r2,112(sp)
  809bfc:	d9801b15 	stw	r6,108(sp)
  809c00:	00c001c4 	movi	r3,7
  809c04:	19827616 	blt	r3,r6,80a5e0 <___vfiprintf_internal_r+0xfbc>
  809c08:	4cf9c83a 	sub	fp,r9,r19
  809c0c:	42000204 	addi	r8,r8,8
  809c10:	31000044 	addi	r4,r6,1
  809c14:	300b883a 	mov	r5,r6
  809c18:	07018516 	blt	zero,fp,80a230 <___vfiprintf_internal_r+0xc0c>
  809c1c:	9885883a 	add	r2,r19,r2
  809c20:	45400015 	stw	r21,0(r8)
  809c24:	44c00115 	stw	r19,4(r8)
  809c28:	d8801c15 	stw	r2,112(sp)
  809c2c:	d9001b15 	stw	r4,108(sp)
  809c30:	00c001c4 	movi	r3,7
  809c34:	1901dd0e 	bge	r3,r4,80a3ac <___vfiprintf_internal_r+0xd88>
  809c38:	1002401e 	bne	r2,zero,80a53c <___vfiprintf_internal_r+0xf18>
  809c3c:	d8001b15 	stw	zero,108(sp)
  809c40:	a2c0010c 	andi	r11,r20,4
  809c44:	58000226 	beq	r11,zero,809c50 <___vfiprintf_internal_r+0x62c>
  809c48:	8ca7c83a 	sub	r19,r17,r18
  809c4c:	04c2f216 	blt	zero,r19,80a818 <___vfiprintf_internal_r+0x11f4>
  809c50:	8c80010e 	bge	r17,r18,809c58 <___vfiprintf_internal_r+0x634>
  809c54:	9023883a 	mov	r17,r18
  809c58:	da802317 	ldw	r10,140(sp)
  809c5c:	5455883a 	add	r10,r10,r17
  809c60:	da802315 	stw	r10,140(sp)
  809c64:	d8001b15 	stw	zero,108(sp)
  809c68:	d811883a 	mov	r8,sp
  809c6c:	003ea206 	br	8096f8 <__alt_mem_onchip_mem+0xff7896f8>
  809c70:	a5000814 	ori	r20,r20,32
  809c74:	80c00007 	ldb	r3,0(r16)
  809c78:	003ec906 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  809c7c:	80c00007 	ldb	r3,0(r16)
  809c80:	1b030926 	beq	r3,r12,80a8a8 <___vfiprintf_internal_r+0x1284>
  809c84:	a5000414 	ori	r20,r20,16
  809c88:	003ec506 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  809c8c:	21003fcc 	andi	r4,r4,255
  809c90:	20035e1e 	bne	r4,zero,80aa0c <___vfiprintf_internal_r+0x13e8>
  809c94:	a080080c 	andi	r2,r20,32
  809c98:	1002a526 	beq	r2,zero,80a730 <___vfiprintf_internal_r+0x110c>
  809c9c:	da802217 	ldw	r10,136(sp)
  809ca0:	50800017 	ldw	r2,0(r10)
  809ca4:	da802317 	ldw	r10,140(sp)
  809ca8:	5007d7fa 	srai	r3,r10,31
  809cac:	da802217 	ldw	r10,136(sp)
  809cb0:	10c00115 	stw	r3,4(r2)
  809cb4:	52800104 	addi	r10,r10,4
  809cb8:	da802215 	stw	r10,136(sp)
  809cbc:	da802317 	ldw	r10,140(sp)
  809cc0:	12800015 	stw	r10,0(r2)
  809cc4:	003e8c06 	br	8096f8 <__alt_mem_onchip_mem+0xff7896f8>
  809cc8:	21003fcc 	andi	r4,r4,255
  809ccc:	2003511e 	bne	r4,zero,80aa14 <___vfiprintf_internal_r+0x13f0>
  809cd0:	a080080c 	andi	r2,r20,32
  809cd4:	1000a126 	beq	r2,zero,809f5c <___vfiprintf_internal_r+0x938>
  809cd8:	da802217 	ldw	r10,136(sp)
  809cdc:	d8001d85 	stb	zero,118(sp)
  809ce0:	50800204 	addi	r2,r10,8
  809ce4:	54800017 	ldw	r18,0(r10)
  809ce8:	54c00117 	ldw	r19,4(r10)
  809cec:	4802b416 	blt	r9,zero,80a7c0 <___vfiprintf_internal_r+0x119c>
  809cf0:	013fdfc4 	movi	r4,-129
  809cf4:	94c6b03a 	or	r3,r18,r19
  809cf8:	d8802215 	stw	r2,136(sp)
  809cfc:	a128703a 	and	r20,r20,r4
  809d00:	1800a226 	beq	r3,zero,809f8c <___vfiprintf_internal_r+0x968>
  809d04:	0039883a 	mov	fp,zero
  809d08:	dd401a04 	addi	r21,sp,104
  809d0c:	9006d0fa 	srli	r3,r18,3
  809d10:	9808977a 	slli	r4,r19,29
  809d14:	9826d0fa 	srli	r19,r19,3
  809d18:	948001cc 	andi	r18,r18,7
  809d1c:	90800c04 	addi	r2,r18,48
  809d20:	ad7fffc4 	addi	r21,r21,-1
  809d24:	20e4b03a 	or	r18,r4,r3
  809d28:	a8800005 	stb	r2,0(r21)
  809d2c:	94c6b03a 	or	r3,r18,r19
  809d30:	183ff61e 	bne	r3,zero,809d0c <__alt_mem_onchip_mem+0xff789d0c>
  809d34:	a0c0004c 	andi	r3,r20,1
  809d38:	18005926 	beq	r3,zero,809ea0 <___vfiprintf_internal_r+0x87c>
  809d3c:	10803fcc 	andi	r2,r2,255
  809d40:	1080201c 	xori	r2,r2,128
  809d44:	10bfe004 	addi	r2,r2,-128
  809d48:	00c00c04 	movi	r3,48
  809d4c:	10c05426 	beq	r2,r3,809ea0 <___vfiprintf_internal_r+0x87c>
  809d50:	da801e17 	ldw	r10,120(sp)
  809d54:	a8bfffc4 	addi	r2,r21,-1
  809d58:	a8ffffc5 	stb	r3,-1(r21)
  809d5c:	50a7c83a 	sub	r19,r10,r2
  809d60:	102b883a 	mov	r21,r2
  809d64:	003f2f06 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  809d68:	21003fcc 	andi	r4,r4,255
  809d6c:	2003421e 	bne	r4,zero,80aa78 <___vfiprintf_internal_r+0x1454>
  809d70:	00802074 	movhi	r2,129
  809d74:	108d1f04 	addi	r2,r2,13436
  809d78:	d8802615 	stw	r2,152(sp)
  809d7c:	a080080c 	andi	r2,r20,32
  809d80:	1000aa26 	beq	r2,zero,80a02c <___vfiprintf_internal_r+0xa08>
  809d84:	da802217 	ldw	r10,136(sp)
  809d88:	54800017 	ldw	r18,0(r10)
  809d8c:	54c00117 	ldw	r19,4(r10)
  809d90:	52800204 	addi	r10,r10,8
  809d94:	da802215 	stw	r10,136(sp)
  809d98:	a080004c 	andi	r2,r20,1
  809d9c:	1001d226 	beq	r2,zero,80a4e8 <___vfiprintf_internal_r+0xec4>
  809da0:	94c4b03a 	or	r2,r18,r19
  809da4:	1002351e 	bne	r2,zero,80a67c <___vfiprintf_internal_r+0x1058>
  809da8:	d8001d85 	stb	zero,118(sp)
  809dac:	48022216 	blt	r9,zero,80a638 <___vfiprintf_internal_r+0x1014>
  809db0:	00bfdfc4 	movi	r2,-129
  809db4:	a0a8703a 	and	r20,r20,r2
  809db8:	003f1506 	br	809a10 <__alt_mem_onchip_mem+0xff789a10>
  809dbc:	da802217 	ldw	r10,136(sp)
  809dc0:	04800044 	movi	r18,1
  809dc4:	d8001d85 	stb	zero,118(sp)
  809dc8:	50800017 	ldw	r2,0(r10)
  809dcc:	52800104 	addi	r10,r10,4
  809dd0:	da802215 	stw	r10,136(sp)
  809dd4:	d8801005 	stb	r2,64(sp)
  809dd8:	9027883a 	mov	r19,r18
  809ddc:	dd401004 	addi	r21,sp,64
  809de0:	0013883a 	mov	r9,zero
  809de4:	003f1706 	br	809a44 <__alt_mem_onchip_mem+0xff789a44>
  809de8:	21003fcc 	andi	r4,r4,255
  809dec:	2003201e 	bne	r4,zero,80aa70 <___vfiprintf_internal_r+0x144c>
  809df0:	a080080c 	andi	r2,r20,32
  809df4:	10004b26 	beq	r2,zero,809f24 <___vfiprintf_internal_r+0x900>
  809df8:	da802217 	ldw	r10,136(sp)
  809dfc:	50800117 	ldw	r2,4(r10)
  809e00:	54800017 	ldw	r18,0(r10)
  809e04:	52800204 	addi	r10,r10,8
  809e08:	da802215 	stw	r10,136(sp)
  809e0c:	1027883a 	mov	r19,r2
  809e10:	10022c16 	blt	r2,zero,80a6c4 <___vfiprintf_internal_r+0x10a0>
  809e14:	df001d83 	ldbu	fp,118(sp)
  809e18:	48007216 	blt	r9,zero,809fe4 <___vfiprintf_internal_r+0x9c0>
  809e1c:	00ffdfc4 	movi	r3,-129
  809e20:	94c4b03a 	or	r2,r18,r19
  809e24:	a0e8703a 	and	r20,r20,r3
  809e28:	1000cc26 	beq	r2,zero,80a15c <___vfiprintf_internal_r+0xb38>
  809e2c:	98021026 	beq	r19,zero,80a670 <___vfiprintf_internal_r+0x104c>
  809e30:	dc402415 	stw	r17,144(sp)
  809e34:	dc002515 	stw	r16,148(sp)
  809e38:	9823883a 	mov	r17,r19
  809e3c:	9021883a 	mov	r16,r18
  809e40:	dd401a04 	addi	r21,sp,104
  809e44:	4825883a 	mov	r18,r9
  809e48:	4027883a 	mov	r19,r8
  809e4c:	8009883a 	mov	r4,r16
  809e50:	880b883a 	mov	r5,r17
  809e54:	01800284 	movi	r6,10
  809e58:	000f883a 	mov	r7,zero
  809e5c:	080c5800 	call	80c580 <__umoddi3>
  809e60:	10800c04 	addi	r2,r2,48
  809e64:	ad7fffc4 	addi	r21,r21,-1
  809e68:	8009883a 	mov	r4,r16
  809e6c:	880b883a 	mov	r5,r17
  809e70:	a8800005 	stb	r2,0(r21)
  809e74:	01800284 	movi	r6,10
  809e78:	000f883a 	mov	r7,zero
  809e7c:	080c0080 	call	80c008 <__udivdi3>
  809e80:	1021883a 	mov	r16,r2
  809e84:	10c4b03a 	or	r2,r2,r3
  809e88:	1823883a 	mov	r17,r3
  809e8c:	103fef1e 	bne	r2,zero,809e4c <__alt_mem_onchip_mem+0xff789e4c>
  809e90:	dc402417 	ldw	r17,144(sp)
  809e94:	dc002517 	ldw	r16,148(sp)
  809e98:	9013883a 	mov	r9,r18
  809e9c:	9811883a 	mov	r8,r19
  809ea0:	da801e17 	ldw	r10,120(sp)
  809ea4:	5567c83a 	sub	r19,r10,r21
  809ea8:	003ede06 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  809eac:	38803fcc 	andi	r2,r7,255
  809eb0:	1080201c 	xori	r2,r2,128
  809eb4:	10bfe004 	addi	r2,r2,-128
  809eb8:	1002371e 	bne	r2,zero,80a798 <___vfiprintf_internal_r+0x1174>
  809ebc:	01000044 	movi	r4,1
  809ec0:	01c00804 	movi	r7,32
  809ec4:	80c00007 	ldb	r3,0(r16)
  809ec8:	003e3506 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  809ecc:	a5000054 	ori	r20,r20,1
  809ed0:	80c00007 	ldb	r3,0(r16)
  809ed4:	003e3206 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  809ed8:	a5002014 	ori	r20,r20,128
  809edc:	80c00007 	ldb	r3,0(r16)
  809ee0:	003e2f06 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  809ee4:	8015883a 	mov	r10,r16
  809ee8:	0023883a 	mov	r17,zero
  809eec:	18bff404 	addi	r2,r3,-48
  809ef0:	50c00007 	ldb	r3,0(r10)
  809ef4:	8c4002a4 	muli	r17,r17,10
  809ef8:	84000044 	addi	r16,r16,1
  809efc:	8015883a 	mov	r10,r16
  809f00:	1463883a 	add	r17,r2,r17
  809f04:	18bff404 	addi	r2,r3,-48
  809f08:	30bff92e 	bgeu	r6,r2,809ef0 <__alt_mem_onchip_mem+0xff789ef0>
  809f0c:	003e2506 	br	8097a4 <__alt_mem_onchip_mem+0xff7897a4>
  809f10:	21003fcc 	andi	r4,r4,255
  809f14:	2002d41e 	bne	r4,zero,80aa68 <___vfiprintf_internal_r+0x1444>
  809f18:	a5000414 	ori	r20,r20,16
  809f1c:	a080080c 	andi	r2,r20,32
  809f20:	103fb51e 	bne	r2,zero,809df8 <__alt_mem_onchip_mem+0xff789df8>
  809f24:	a080040c 	andi	r2,r20,16
  809f28:	1001f826 	beq	r2,zero,80a70c <___vfiprintf_internal_r+0x10e8>
  809f2c:	da802217 	ldw	r10,136(sp)
  809f30:	54800017 	ldw	r18,0(r10)
  809f34:	52800104 	addi	r10,r10,4
  809f38:	da802215 	stw	r10,136(sp)
  809f3c:	9027d7fa 	srai	r19,r18,31
  809f40:	9805883a 	mov	r2,r19
  809f44:	003fb206 	br	809e10 <__alt_mem_onchip_mem+0xff789e10>
  809f48:	21003fcc 	andi	r4,r4,255
  809f4c:	2002c41e 	bne	r4,zero,80aa60 <___vfiprintf_internal_r+0x143c>
  809f50:	a5000414 	ori	r20,r20,16
  809f54:	a080080c 	andi	r2,r20,32
  809f58:	103f5f1e 	bne	r2,zero,809cd8 <__alt_mem_onchip_mem+0xff789cd8>
  809f5c:	a080040c 	andi	r2,r20,16
  809f60:	10020f26 	beq	r2,zero,80a7a0 <___vfiprintf_internal_r+0x117c>
  809f64:	da802217 	ldw	r10,136(sp)
  809f68:	d8001d85 	stb	zero,118(sp)
  809f6c:	0027883a 	mov	r19,zero
  809f70:	50800104 	addi	r2,r10,4
  809f74:	54800017 	ldw	r18,0(r10)
  809f78:	48021116 	blt	r9,zero,80a7c0 <___vfiprintf_internal_r+0x119c>
  809f7c:	00ffdfc4 	movi	r3,-129
  809f80:	d8802215 	stw	r2,136(sp)
  809f84:	a0e8703a 	and	r20,r20,r3
  809f88:	903f5e1e 	bne	r18,zero,809d04 <__alt_mem_onchip_mem+0xff789d04>
  809f8c:	0039883a 	mov	fp,zero
  809f90:	4802a626 	beq	r9,zero,80aa2c <___vfiprintf_internal_r+0x1408>
  809f94:	0025883a 	mov	r18,zero
  809f98:	0027883a 	mov	r19,zero
  809f9c:	003f5a06 	br	809d08 <__alt_mem_onchip_mem+0xff789d08>
  809fa0:	21003fcc 	andi	r4,r4,255
  809fa4:	20029f1e 	bne	r4,zero,80aa24 <___vfiprintf_internal_r+0x1400>
  809fa8:	a5000414 	ori	r20,r20,16
  809fac:	a080080c 	andi	r2,r20,32
  809fb0:	10005e1e 	bne	r2,zero,80a12c <___vfiprintf_internal_r+0xb08>
  809fb4:	a080040c 	andi	r2,r20,16
  809fb8:	1001a21e 	bne	r2,zero,80a644 <___vfiprintf_internal_r+0x1020>
  809fbc:	a080100c 	andi	r2,r20,64
  809fc0:	d8001d85 	stb	zero,118(sp)
  809fc4:	da802217 	ldw	r10,136(sp)
  809fc8:	1002231e 	bne	r2,zero,80a858 <___vfiprintf_internal_r+0x1234>
  809fcc:	50800104 	addi	r2,r10,4
  809fd0:	54800017 	ldw	r18,0(r10)
  809fd4:	0027883a 	mov	r19,zero
  809fd8:	4801a00e 	bge	r9,zero,80a65c <___vfiprintf_internal_r+0x1038>
  809fdc:	d8802215 	stw	r2,136(sp)
  809fe0:	0039883a 	mov	fp,zero
  809fe4:	94c4b03a 	or	r2,r18,r19
  809fe8:	103f901e 	bne	r2,zero,809e2c <__alt_mem_onchip_mem+0xff789e2c>
  809fec:	00800044 	movi	r2,1
  809ff0:	10803fcc 	andi	r2,r2,255
  809ff4:	00c00044 	movi	r3,1
  809ff8:	10c05926 	beq	r2,r3,80a160 <___vfiprintf_internal_r+0xb3c>
  809ffc:	00c00084 	movi	r3,2
  80a000:	10ffe41e 	bne	r2,r3,809f94 <__alt_mem_onchip_mem+0xff789f94>
  80a004:	0025883a 	mov	r18,zero
  80a008:	0027883a 	mov	r19,zero
  80a00c:	00013d06 	br	80a504 <___vfiprintf_internal_r+0xee0>
  80a010:	21003fcc 	andi	r4,r4,255
  80a014:	2002811e 	bne	r4,zero,80aa1c <___vfiprintf_internal_r+0x13f8>
  80a018:	00802074 	movhi	r2,129
  80a01c:	108d1a04 	addi	r2,r2,13416
  80a020:	d8802615 	stw	r2,152(sp)
  80a024:	a080080c 	andi	r2,r20,32
  80a028:	103f561e 	bne	r2,zero,809d84 <__alt_mem_onchip_mem+0xff789d84>
  80a02c:	a080040c 	andi	r2,r20,16
  80a030:	1001d126 	beq	r2,zero,80a778 <___vfiprintf_internal_r+0x1154>
  80a034:	da802217 	ldw	r10,136(sp)
  80a038:	0027883a 	mov	r19,zero
  80a03c:	54800017 	ldw	r18,0(r10)
  80a040:	52800104 	addi	r10,r10,4
  80a044:	da802215 	stw	r10,136(sp)
  80a048:	003f5306 	br	809d98 <__alt_mem_onchip_mem+0xff789d98>
  80a04c:	da802217 	ldw	r10,136(sp)
  80a050:	d8001d85 	stb	zero,118(sp)
  80a054:	55400017 	ldw	r21,0(r10)
  80a058:	50c00104 	addi	r3,r10,4
  80a05c:	a8024226 	beq	r21,zero,80a968 <___vfiprintf_internal_r+0x1344>
  80a060:	48021816 	blt	r9,zero,80a8c4 <___vfiprintf_internal_r+0x12a0>
  80a064:	480d883a 	mov	r6,r9
  80a068:	000b883a 	mov	r5,zero
  80a06c:	a809883a 	mov	r4,r21
  80a070:	d8c02a15 	stw	r3,168(sp)
  80a074:	da002b15 	stw	r8,172(sp)
  80a078:	da402c15 	stw	r9,176(sp)
  80a07c:	0807e480 	call	807e48 <memchr>
  80a080:	d8c02a17 	ldw	r3,168(sp)
  80a084:	da002b17 	ldw	r8,172(sp)
  80a088:	da402c17 	ldw	r9,176(sp)
  80a08c:	10024826 	beq	r2,zero,80a9b0 <___vfiprintf_internal_r+0x138c>
  80a090:	1567c83a 	sub	r19,r2,r21
  80a094:	df001d83 	ldbu	fp,118(sp)
  80a098:	d8c02215 	stw	r3,136(sp)
  80a09c:	0013883a 	mov	r9,zero
  80a0a0:	003e6006 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80a0a4:	21003fcc 	andi	r4,r4,255
  80a0a8:	203fc026 	beq	r4,zero,809fac <__alt_mem_onchip_mem+0xff789fac>
  80a0ac:	d9c01d85 	stb	r7,118(sp)
  80a0b0:	003fbe06 	br	809fac <__alt_mem_onchip_mem+0xff789fac>
  80a0b4:	da802217 	ldw	r10,136(sp)
  80a0b8:	54400017 	ldw	r17,0(r10)
  80a0bc:	50800104 	addi	r2,r10,4
  80a0c0:	883e3b16 	blt	r17,zero,8099b0 <__alt_mem_onchip_mem+0xff7899b0>
  80a0c4:	d8802215 	stw	r2,136(sp)
  80a0c8:	80c00007 	ldb	r3,0(r16)
  80a0cc:	003db406 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80a0d0:	01000044 	movi	r4,1
  80a0d4:	01c00ac4 	movi	r7,43
  80a0d8:	80c00007 	ldb	r3,0(r16)
  80a0dc:	003db006 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80a0e0:	80c00007 	ldb	r3,0(r16)
  80a0e4:	82800044 	addi	r10,r16,1
  80a0e8:	1b423c26 	beq	r3,r13,80a9dc <___vfiprintf_internal_r+0x13b8>
  80a0ec:	18bff404 	addi	r2,r3,-48
  80a0f0:	0013883a 	mov	r9,zero
  80a0f4:	30822b36 	bltu	r6,r2,80a9a4 <___vfiprintf_internal_r+0x1380>
  80a0f8:	50c00007 	ldb	r3,0(r10)
  80a0fc:	4a4002a4 	muli	r9,r9,10
  80a100:	54000044 	addi	r16,r10,1
  80a104:	8015883a 	mov	r10,r16
  80a108:	4893883a 	add	r9,r9,r2
  80a10c:	18bff404 	addi	r2,r3,-48
  80a110:	30bff92e 	bgeu	r6,r2,80a0f8 <__alt_mem_onchip_mem+0xff78a0f8>
  80a114:	483da30e 	bge	r9,zero,8097a4 <__alt_mem_onchip_mem+0xff7897a4>
  80a118:	027fffc4 	movi	r9,-1
  80a11c:	003da106 	br	8097a4 <__alt_mem_onchip_mem+0xff7897a4>
  80a120:	a5001014 	ori	r20,r20,64
  80a124:	80c00007 	ldb	r3,0(r16)
  80a128:	003d9d06 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80a12c:	da802217 	ldw	r10,136(sp)
  80a130:	d8001d85 	stb	zero,118(sp)
  80a134:	50c00204 	addi	r3,r10,8
  80a138:	54800017 	ldw	r18,0(r10)
  80a13c:	54c00117 	ldw	r19,4(r10)
  80a140:	4801ca16 	blt	r9,zero,80a86c <___vfiprintf_internal_r+0x1248>
  80a144:	013fdfc4 	movi	r4,-129
  80a148:	94c4b03a 	or	r2,r18,r19
  80a14c:	d8c02215 	stw	r3,136(sp)
  80a150:	a128703a 	and	r20,r20,r4
  80a154:	0039883a 	mov	fp,zero
  80a158:	103f341e 	bne	r2,zero,809e2c <__alt_mem_onchip_mem+0xff789e2c>
  80a15c:	483e2e26 	beq	r9,zero,809a18 <__alt_mem_onchip_mem+0xff789a18>
  80a160:	0025883a 	mov	r18,zero
  80a164:	94800c04 	addi	r18,r18,48
  80a168:	dc8019c5 	stb	r18,103(sp)
  80a16c:	dcc02717 	ldw	r19,156(sp)
  80a170:	dd4019c4 	addi	r21,sp,103
  80a174:	003e2b06 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80a178:	21003fcc 	andi	r4,r4,255
  80a17c:	2002361e 	bne	r4,zero,80aa58 <___vfiprintf_internal_r+0x1434>
  80a180:	1801c126 	beq	r3,zero,80a888 <___vfiprintf_internal_r+0x1264>
  80a184:	04800044 	movi	r18,1
  80a188:	d8c01005 	stb	r3,64(sp)
  80a18c:	d8001d85 	stb	zero,118(sp)
  80a190:	9027883a 	mov	r19,r18
  80a194:	dd401004 	addi	r21,sp,64
  80a198:	003f1106 	br	809de0 <__alt_mem_onchip_mem+0xff789de0>
  80a19c:	d9402117 	ldw	r5,132(sp)
  80a1a0:	d9002017 	ldw	r4,128(sp)
  80a1a4:	d9801a04 	addi	r6,sp,104
  80a1a8:	d9c02b15 	stw	r7,172(sp)
  80a1ac:	dbc02a15 	stw	r15,168(sp)
  80a1b0:	08095100 	call	809510 <__sprint_r.part.0>
  80a1b4:	d9c02b17 	ldw	r7,172(sp)
  80a1b8:	dbc02a17 	ldw	r15,168(sp)
  80a1bc:	10006d1e 	bne	r2,zero,80a374 <___vfiprintf_internal_r+0xd50>
  80a1c0:	d9801b17 	ldw	r6,108(sp)
  80a1c4:	d8801c17 	ldw	r2,112(sp)
  80a1c8:	d811883a 	mov	r8,sp
  80a1cc:	31400044 	addi	r5,r6,1
  80a1d0:	003e3306 	br	809aa0 <__alt_mem_onchip_mem+0xff789aa0>
  80a1d4:	d9401b17 	ldw	r5,108(sp)
  80a1d8:	d8801c17 	ldw	r2,112(sp)
  80a1dc:	29000044 	addi	r4,r5,1
  80a1e0:	d8c01d87 	ldb	r3,118(sp)
  80a1e4:	183e4d26 	beq	r3,zero,809b1c <__alt_mem_onchip_mem+0xff789b1c>
  80a1e8:	00c00044 	movi	r3,1
  80a1ec:	d9401d84 	addi	r5,sp,118
  80a1f0:	10c5883a 	add	r2,r2,r3
  80a1f4:	41400015 	stw	r5,0(r8)
  80a1f8:	40c00115 	stw	r3,4(r8)
  80a1fc:	d8801c15 	stw	r2,112(sp)
  80a200:	d9001b15 	stw	r4,108(sp)
  80a204:	014001c4 	movi	r5,7
  80a208:	2900a90e 	bge	r5,r4,80a4b0 <___vfiprintf_internal_r+0xe8c>
  80a20c:	1000da1e 	bne	r2,zero,80a578 <___vfiprintf_internal_r+0xf54>
  80a210:	7000ab1e 	bne	r14,zero,80a4c0 <___vfiprintf_internal_r+0xe9c>
  80a214:	000b883a 	mov	r5,zero
  80a218:	1809883a 	mov	r4,r3
  80a21c:	d811883a 	mov	r8,sp
  80a220:	00c02004 	movi	r3,128
  80a224:	e0fe4d26 	beq	fp,r3,809b5c <__alt_mem_onchip_mem+0xff789b5c>
  80a228:	4cf9c83a 	sub	fp,r9,r19
  80a22c:	073e7b0e 	bge	zero,fp,809c1c <__alt_mem_onchip_mem+0xff789c1c>
  80a230:	01c00404 	movi	r7,16
  80a234:	3f01900e 	bge	r7,fp,80a878 <___vfiprintf_internal_r+0x1254>
  80a238:	00c02074 	movhi	r3,129
  80a23c:	18cd8004 	addi	r3,r3,13824
  80a240:	d8c02415 	stw	r3,144(sp)
  80a244:	034001c4 	movi	r13,7
  80a248:	00000506 	br	80a260 <___vfiprintf_internal_r+0xc3c>
  80a24c:	29000084 	addi	r4,r5,2
  80a250:	42000204 	addi	r8,r8,8
  80a254:	180b883a 	mov	r5,r3
  80a258:	e73ffc04 	addi	fp,fp,-16
  80a25c:	3f000d0e 	bge	r7,fp,80a294 <___vfiprintf_internal_r+0xc70>
  80a260:	10800404 	addi	r2,r2,16
  80a264:	28c00044 	addi	r3,r5,1
  80a268:	45c00015 	stw	r23,0(r8)
  80a26c:	41c00115 	stw	r7,4(r8)
  80a270:	d8801c15 	stw	r2,112(sp)
  80a274:	d8c01b15 	stw	r3,108(sp)
  80a278:	68fff40e 	bge	r13,r3,80a24c <__alt_mem_onchip_mem+0xff78a24c>
  80a27c:	1000101e 	bne	r2,zero,80a2c0 <___vfiprintf_internal_r+0xc9c>
  80a280:	e73ffc04 	addi	fp,fp,-16
  80a284:	01000044 	movi	r4,1
  80a288:	000b883a 	mov	r5,zero
  80a28c:	d811883a 	mov	r8,sp
  80a290:	3f3ff316 	blt	r7,fp,80a260 <__alt_mem_onchip_mem+0xff78a260>
  80a294:	da802417 	ldw	r10,144(sp)
  80a298:	1705883a 	add	r2,r2,fp
  80a29c:	47000115 	stw	fp,4(r8)
  80a2a0:	42800015 	stw	r10,0(r8)
  80a2a4:	d8801c15 	stw	r2,112(sp)
  80a2a8:	d9001b15 	stw	r4,108(sp)
  80a2ac:	00c001c4 	movi	r3,7
  80a2b0:	19003616 	blt	r3,r4,80a38c <___vfiprintf_internal_r+0xd68>
  80a2b4:	42000204 	addi	r8,r8,8
  80a2b8:	21000044 	addi	r4,r4,1
  80a2bc:	003e5706 	br	809c1c <__alt_mem_onchip_mem+0xff789c1c>
  80a2c0:	d9402117 	ldw	r5,132(sp)
  80a2c4:	d9002017 	ldw	r4,128(sp)
  80a2c8:	d9801a04 	addi	r6,sp,104
  80a2cc:	d9c02b15 	stw	r7,172(sp)
  80a2d0:	db402a15 	stw	r13,168(sp)
  80a2d4:	08095100 	call	809510 <__sprint_r.part.0>
  80a2d8:	d9c02b17 	ldw	r7,172(sp)
  80a2dc:	db402a17 	ldw	r13,168(sp)
  80a2e0:	1000241e 	bne	r2,zero,80a374 <___vfiprintf_internal_r+0xd50>
  80a2e4:	d9401b17 	ldw	r5,108(sp)
  80a2e8:	d8801c17 	ldw	r2,112(sp)
  80a2ec:	d811883a 	mov	r8,sp
  80a2f0:	29000044 	addi	r4,r5,1
  80a2f4:	003fd806 	br	80a258 <__alt_mem_onchip_mem+0xff78a258>
  80a2f8:	d9401b17 	ldw	r5,108(sp)
  80a2fc:	00c02074 	movhi	r3,129
  80a300:	18cd8404 	addi	r3,r3,13840
  80a304:	d8c02415 	stw	r3,144(sp)
  80a308:	29400044 	addi	r5,r5,1
  80a30c:	d8c02417 	ldw	r3,144(sp)
  80a310:	14c5883a 	add	r2,r2,r19
  80a314:	44c00115 	stw	r19,4(r8)
  80a318:	40c00015 	stw	r3,0(r8)
  80a31c:	d8801c15 	stw	r2,112(sp)
  80a320:	d9401b15 	stw	r5,108(sp)
  80a324:	00c001c4 	movi	r3,7
  80a328:	1940070e 	bge	r3,r5,80a348 <___vfiprintf_internal_r+0xd24>
  80a32c:	103e4826 	beq	r2,zero,809c50 <__alt_mem_onchip_mem+0xff789c50>
  80a330:	d9402117 	ldw	r5,132(sp)
  80a334:	d9002017 	ldw	r4,128(sp)
  80a338:	d9801a04 	addi	r6,sp,104
  80a33c:	08095100 	call	809510 <__sprint_r.part.0>
  80a340:	10000c1e 	bne	r2,zero,80a374 <___vfiprintf_internal_r+0xd50>
  80a344:	d8801c17 	ldw	r2,112(sp)
  80a348:	8c80010e 	bge	r17,r18,80a350 <___vfiprintf_internal_r+0xd2c>
  80a34c:	9023883a 	mov	r17,r18
  80a350:	da802317 	ldw	r10,140(sp)
  80a354:	5455883a 	add	r10,r10,r17
  80a358:	da802315 	stw	r10,140(sp)
  80a35c:	103e4126 	beq	r2,zero,809c64 <__alt_mem_onchip_mem+0xff789c64>
  80a360:	d9402117 	ldw	r5,132(sp)
  80a364:	d9002017 	ldw	r4,128(sp)
  80a368:	d9801a04 	addi	r6,sp,104
  80a36c:	08095100 	call	809510 <__sprint_r.part.0>
  80a370:	103e3c26 	beq	r2,zero,809c64 <__alt_mem_onchip_mem+0xff789c64>
  80a374:	dd002117 	ldw	r20,132(sp)
  80a378:	a080030b 	ldhu	r2,12(r20)
  80a37c:	1080100c 	andi	r2,r2,64
  80a380:	1001231e 	bne	r2,zero,80a810 <___vfiprintf_internal_r+0x11ec>
  80a384:	d8802317 	ldw	r2,140(sp)
  80a388:	003d7b06 	br	809978 <__alt_mem_onchip_mem+0xff789978>
  80a38c:	1000991e 	bne	r2,zero,80a5f4 <___vfiprintf_internal_r+0xfd0>
  80a390:	00c00044 	movi	r3,1
  80a394:	9805883a 	mov	r2,r19
  80a398:	dd400015 	stw	r21,0(sp)
  80a39c:	dcc00115 	stw	r19,4(sp)
  80a3a0:	dcc01c15 	stw	r19,112(sp)
  80a3a4:	d8c01b15 	stw	r3,108(sp)
  80a3a8:	d811883a 	mov	r8,sp
  80a3ac:	42000204 	addi	r8,r8,8
  80a3b0:	a2c0010c 	andi	r11,r20,4
  80a3b4:	583fe426 	beq	r11,zero,80a348 <__alt_mem_onchip_mem+0xff78a348>
  80a3b8:	8ca7c83a 	sub	r19,r17,r18
  80a3bc:	04ffe20e 	bge	zero,r19,80a348 <__alt_mem_onchip_mem+0xff78a348>
  80a3c0:	01c00404 	movi	r7,16
  80a3c4:	3cffcc0e 	bge	r7,r19,80a2f8 <__alt_mem_onchip_mem+0xff78a2f8>
  80a3c8:	02802074 	movhi	r10,129
  80a3cc:	528d8404 	addi	r10,r10,13840
  80a3d0:	d9001b17 	ldw	r4,108(sp)
  80a3d4:	da802415 	stw	r10,144(sp)
  80a3d8:	382b883a 	mov	r21,r7
  80a3dc:	050001c4 	movi	r20,7
  80a3e0:	df002017 	ldw	fp,128(sp)
  80a3e4:	00000506 	br	80a3fc <___vfiprintf_internal_r+0xdd8>
  80a3e8:	21400084 	addi	r5,r4,2
  80a3ec:	42000204 	addi	r8,r8,8
  80a3f0:	1809883a 	mov	r4,r3
  80a3f4:	9cfffc04 	addi	r19,r19,-16
  80a3f8:	acffc40e 	bge	r21,r19,80a30c <__alt_mem_onchip_mem+0xff78a30c>
  80a3fc:	10800404 	addi	r2,r2,16
  80a400:	20c00044 	addi	r3,r4,1
  80a404:	45800015 	stw	r22,0(r8)
  80a408:	45400115 	stw	r21,4(r8)
  80a40c:	d8801c15 	stw	r2,112(sp)
  80a410:	d8c01b15 	stw	r3,108(sp)
  80a414:	a0fff40e 	bge	r20,r3,80a3e8 <__alt_mem_onchip_mem+0xff78a3e8>
  80a418:	1000041e 	bne	r2,zero,80a42c <___vfiprintf_internal_r+0xe08>
  80a41c:	01400044 	movi	r5,1
  80a420:	0009883a 	mov	r4,zero
  80a424:	d811883a 	mov	r8,sp
  80a428:	003ff206 	br	80a3f4 <__alt_mem_onchip_mem+0xff78a3f4>
  80a42c:	d9402117 	ldw	r5,132(sp)
  80a430:	d9801a04 	addi	r6,sp,104
  80a434:	e009883a 	mov	r4,fp
  80a438:	08095100 	call	809510 <__sprint_r.part.0>
  80a43c:	103fcd1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a440:	d9001b17 	ldw	r4,108(sp)
  80a444:	d8801c17 	ldw	r2,112(sp)
  80a448:	d811883a 	mov	r8,sp
  80a44c:	21400044 	addi	r5,r4,1
  80a450:	003fe806 	br	80a3f4 <__alt_mem_onchip_mem+0xff78a3f4>
  80a454:	d9402117 	ldw	r5,132(sp)
  80a458:	d9002017 	ldw	r4,128(sp)
  80a45c:	d9801a04 	addi	r6,sp,104
  80a460:	d9c02b15 	stw	r7,172(sp)
  80a464:	db402a15 	stw	r13,168(sp)
  80a468:	08095100 	call	809510 <__sprint_r.part.0>
  80a46c:	d9c02b17 	ldw	r7,172(sp)
  80a470:	db402a17 	ldw	r13,168(sp)
  80a474:	103fbf1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a478:	d9401b17 	ldw	r5,108(sp)
  80a47c:	d8801c17 	ldw	r2,112(sp)
  80a480:	d811883a 	mov	r8,sp
  80a484:	29800044 	addi	r6,r5,1
  80a488:	003dc406 	br	809b9c <__alt_mem_onchip_mem+0xff789b9c>
  80a48c:	1000d21e 	bne	r2,zero,80a7d8 <___vfiprintf_internal_r+0x11b4>
  80a490:	d8c01d87 	ldb	r3,118(sp)
  80a494:	18009526 	beq	r3,zero,80a6ec <___vfiprintf_internal_r+0x10c8>
  80a498:	00800044 	movi	r2,1
  80a49c:	d8c01d84 	addi	r3,sp,118
  80a4a0:	1009883a 	mov	r4,r2
  80a4a4:	d8c00015 	stw	r3,0(sp)
  80a4a8:	d8800115 	stw	r2,4(sp)
  80a4ac:	d811883a 	mov	r8,sp
  80a4b0:	200b883a 	mov	r5,r4
  80a4b4:	42000204 	addi	r8,r8,8
  80a4b8:	21000044 	addi	r4,r4,1
  80a4bc:	003d9706 	br	809b1c <__alt_mem_onchip_mem+0xff789b1c>
  80a4c0:	d9001d04 	addi	r4,sp,116
  80a4c4:	00800084 	movi	r2,2
  80a4c8:	d9000015 	stw	r4,0(sp)
  80a4cc:	d8800115 	stw	r2,4(sp)
  80a4d0:	1809883a 	mov	r4,r3
  80a4d4:	d811883a 	mov	r8,sp
  80a4d8:	200b883a 	mov	r5,r4
  80a4dc:	42000204 	addi	r8,r8,8
  80a4e0:	21000044 	addi	r4,r4,1
  80a4e4:	003f4e06 	br	80a220 <__alt_mem_onchip_mem+0xff78a220>
  80a4e8:	d8001d85 	stb	zero,118(sp)
  80a4ec:	48005016 	blt	r9,zero,80a630 <___vfiprintf_internal_r+0x100c>
  80a4f0:	00ffdfc4 	movi	r3,-129
  80a4f4:	94c4b03a 	or	r2,r18,r19
  80a4f8:	a0e8703a 	and	r20,r20,r3
  80a4fc:	103d4426 	beq	r2,zero,809a10 <__alt_mem_onchip_mem+0xff789a10>
  80a500:	0039883a 	mov	fp,zero
  80a504:	d9002617 	ldw	r4,152(sp)
  80a508:	dd401a04 	addi	r21,sp,104
  80a50c:	908003cc 	andi	r2,r18,15
  80a510:	9806973a 	slli	r3,r19,28
  80a514:	2085883a 	add	r2,r4,r2
  80a518:	9024d13a 	srli	r18,r18,4
  80a51c:	10800003 	ldbu	r2,0(r2)
  80a520:	9826d13a 	srli	r19,r19,4
  80a524:	ad7fffc4 	addi	r21,r21,-1
  80a528:	1ca4b03a 	or	r18,r3,r18
  80a52c:	a8800005 	stb	r2,0(r21)
  80a530:	94c4b03a 	or	r2,r18,r19
  80a534:	103ff51e 	bne	r2,zero,80a50c <__alt_mem_onchip_mem+0xff78a50c>
  80a538:	003e5906 	br	809ea0 <__alt_mem_onchip_mem+0xff789ea0>
  80a53c:	d9402117 	ldw	r5,132(sp)
  80a540:	d9002017 	ldw	r4,128(sp)
  80a544:	d9801a04 	addi	r6,sp,104
  80a548:	08095100 	call	809510 <__sprint_r.part.0>
  80a54c:	103f891e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a550:	d8801c17 	ldw	r2,112(sp)
  80a554:	d811883a 	mov	r8,sp
  80a558:	003f9506 	br	80a3b0 <__alt_mem_onchip_mem+0xff78a3b0>
  80a55c:	d9402117 	ldw	r5,132(sp)
  80a560:	d9002017 	ldw	r4,128(sp)
  80a564:	d9801a04 	addi	r6,sp,104
  80a568:	08095100 	call	809510 <__sprint_r.part.0>
  80a56c:	103f811e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a570:	d811883a 	mov	r8,sp
  80a574:	003ced06 	br	80992c <__alt_mem_onchip_mem+0xff78992c>
  80a578:	d9402117 	ldw	r5,132(sp)
  80a57c:	d9002017 	ldw	r4,128(sp)
  80a580:	d9801a04 	addi	r6,sp,104
  80a584:	da402c15 	stw	r9,176(sp)
  80a588:	db802a15 	stw	r14,168(sp)
  80a58c:	08095100 	call	809510 <__sprint_r.part.0>
  80a590:	da402c17 	ldw	r9,176(sp)
  80a594:	db802a17 	ldw	r14,168(sp)
  80a598:	103f761e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a59c:	d9401b17 	ldw	r5,108(sp)
  80a5a0:	d8801c17 	ldw	r2,112(sp)
  80a5a4:	d811883a 	mov	r8,sp
  80a5a8:	29000044 	addi	r4,r5,1
  80a5ac:	003d5b06 	br	809b1c <__alt_mem_onchip_mem+0xff789b1c>
  80a5b0:	d9402117 	ldw	r5,132(sp)
  80a5b4:	d9002017 	ldw	r4,128(sp)
  80a5b8:	d9801a04 	addi	r6,sp,104
  80a5bc:	da402c15 	stw	r9,176(sp)
  80a5c0:	08095100 	call	809510 <__sprint_r.part.0>
  80a5c4:	da402c17 	ldw	r9,176(sp)
  80a5c8:	103f6a1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a5cc:	d9401b17 	ldw	r5,108(sp)
  80a5d0:	d8801c17 	ldw	r2,112(sp)
  80a5d4:	d811883a 	mov	r8,sp
  80a5d8:	29000044 	addi	r4,r5,1
  80a5dc:	003f1006 	br	80a220 <__alt_mem_onchip_mem+0xff78a220>
  80a5e0:	1000c31e 	bne	r2,zero,80a8f0 <___vfiprintf_internal_r+0x12cc>
  80a5e4:	01000044 	movi	r4,1
  80a5e8:	000b883a 	mov	r5,zero
  80a5ec:	d811883a 	mov	r8,sp
  80a5f0:	003f0d06 	br	80a228 <__alt_mem_onchip_mem+0xff78a228>
  80a5f4:	d9402117 	ldw	r5,132(sp)
  80a5f8:	d9002017 	ldw	r4,128(sp)
  80a5fc:	d9801a04 	addi	r6,sp,104
  80a600:	08095100 	call	809510 <__sprint_r.part.0>
  80a604:	103f5b1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a608:	d9001b17 	ldw	r4,108(sp)
  80a60c:	d8801c17 	ldw	r2,112(sp)
  80a610:	d811883a 	mov	r8,sp
  80a614:	21000044 	addi	r4,r4,1
  80a618:	003d8006 	br	809c1c <__alt_mem_onchip_mem+0xff789c1c>
  80a61c:	01002074 	movhi	r4,129
  80a620:	210d1f04 	addi	r4,r4,13436
  80a624:	d9002615 	stw	r4,152(sp)
  80a628:	d8c02215 	stw	r3,136(sp)
  80a62c:	1029883a 	mov	r20,r2
  80a630:	94c4b03a 	or	r2,r18,r19
  80a634:	103fb21e 	bne	r2,zero,80a500 <__alt_mem_onchip_mem+0xff78a500>
  80a638:	0039883a 	mov	fp,zero
  80a63c:	00800084 	movi	r2,2
  80a640:	003e6b06 	br	809ff0 <__alt_mem_onchip_mem+0xff789ff0>
  80a644:	da802217 	ldw	r10,136(sp)
  80a648:	d8001d85 	stb	zero,118(sp)
  80a64c:	0027883a 	mov	r19,zero
  80a650:	50800104 	addi	r2,r10,4
  80a654:	54800017 	ldw	r18,0(r10)
  80a658:	483e6016 	blt	r9,zero,809fdc <__alt_mem_onchip_mem+0xff789fdc>
  80a65c:	00ffdfc4 	movi	r3,-129
  80a660:	d8802215 	stw	r2,136(sp)
  80a664:	a0e8703a 	and	r20,r20,r3
  80a668:	0039883a 	mov	fp,zero
  80a66c:	903ebb26 	beq	r18,zero,80a15c <__alt_mem_onchip_mem+0xff78a15c>
  80a670:	00800244 	movi	r2,9
  80a674:	14bdee36 	bltu	r2,r18,809e30 <__alt_mem_onchip_mem+0xff789e30>
  80a678:	003eba06 	br	80a164 <__alt_mem_onchip_mem+0xff78a164>
  80a67c:	00800c04 	movi	r2,48
  80a680:	d8c01d45 	stb	r3,117(sp)
  80a684:	d8801d05 	stb	r2,116(sp)
  80a688:	d8001d85 	stb	zero,118(sp)
  80a68c:	a0c00094 	ori	r3,r20,2
  80a690:	4800a916 	blt	r9,zero,80a938 <___vfiprintf_internal_r+0x1314>
  80a694:	00bfdfc4 	movi	r2,-129
  80a698:	a096703a 	and	r11,r20,r2
  80a69c:	5d000094 	ori	r20,r11,2
  80a6a0:	0039883a 	mov	fp,zero
  80a6a4:	003f9706 	br	80a504 <__alt_mem_onchip_mem+0xff78a504>
  80a6a8:	8025883a 	mov	r18,r16
  80a6ac:	003c2e06 	br	809768 <__alt_mem_onchip_mem+0xff789768>
  80a6b0:	00802074 	movhi	r2,129
  80a6b4:	108d1f04 	addi	r2,r2,13436
  80a6b8:	0039883a 	mov	fp,zero
  80a6bc:	d8802615 	stw	r2,152(sp)
  80a6c0:	003f9006 	br	80a504 <__alt_mem_onchip_mem+0xff78a504>
  80a6c4:	04a5c83a 	sub	r18,zero,r18
  80a6c8:	07000b44 	movi	fp,45
  80a6cc:	9004c03a 	cmpne	r2,r18,zero
  80a6d0:	04e7c83a 	sub	r19,zero,r19
  80a6d4:	df001d85 	stb	fp,118(sp)
  80a6d8:	98a7c83a 	sub	r19,r19,r2
  80a6dc:	48009f16 	blt	r9,zero,80a95c <___vfiprintf_internal_r+0x1338>
  80a6e0:	00bfdfc4 	movi	r2,-129
  80a6e4:	a0a8703a 	and	r20,r20,r2
  80a6e8:	003dd006 	br	809e2c <__alt_mem_onchip_mem+0xff789e2c>
  80a6ec:	70004c26 	beq	r14,zero,80a820 <___vfiprintf_internal_r+0x11fc>
  80a6f0:	00800084 	movi	r2,2
  80a6f4:	d8c01d04 	addi	r3,sp,116
  80a6f8:	d8c00015 	stw	r3,0(sp)
  80a6fc:	d8800115 	stw	r2,4(sp)
  80a700:	01000044 	movi	r4,1
  80a704:	d811883a 	mov	r8,sp
  80a708:	003f7306 	br	80a4d8 <__alt_mem_onchip_mem+0xff78a4d8>
  80a70c:	a080100c 	andi	r2,r20,64
  80a710:	da802217 	ldw	r10,136(sp)
  80a714:	103e0626 	beq	r2,zero,809f30 <__alt_mem_onchip_mem+0xff789f30>
  80a718:	5480000f 	ldh	r18,0(r10)
  80a71c:	52800104 	addi	r10,r10,4
  80a720:	da802215 	stw	r10,136(sp)
  80a724:	9027d7fa 	srai	r19,r18,31
  80a728:	9805883a 	mov	r2,r19
  80a72c:	003db806 	br	809e10 <__alt_mem_onchip_mem+0xff789e10>
  80a730:	a080040c 	andi	r2,r20,16
  80a734:	1000091e 	bne	r2,zero,80a75c <___vfiprintf_internal_r+0x1138>
  80a738:	a2c0100c 	andi	r11,r20,64
  80a73c:	58000726 	beq	r11,zero,80a75c <___vfiprintf_internal_r+0x1138>
  80a740:	da802217 	ldw	r10,136(sp)
  80a744:	50800017 	ldw	r2,0(r10)
  80a748:	52800104 	addi	r10,r10,4
  80a74c:	da802215 	stw	r10,136(sp)
  80a750:	da802317 	ldw	r10,140(sp)
  80a754:	1280000d 	sth	r10,0(r2)
  80a758:	003be706 	br	8096f8 <__alt_mem_onchip_mem+0xff7896f8>
  80a75c:	da802217 	ldw	r10,136(sp)
  80a760:	50800017 	ldw	r2,0(r10)
  80a764:	52800104 	addi	r10,r10,4
  80a768:	da802215 	stw	r10,136(sp)
  80a76c:	da802317 	ldw	r10,140(sp)
  80a770:	12800015 	stw	r10,0(r2)
  80a774:	003be006 	br	8096f8 <__alt_mem_onchip_mem+0xff7896f8>
  80a778:	a080100c 	andi	r2,r20,64
  80a77c:	da802217 	ldw	r10,136(sp)
  80a780:	10003026 	beq	r2,zero,80a844 <___vfiprintf_internal_r+0x1220>
  80a784:	5480000b 	ldhu	r18,0(r10)
  80a788:	52800104 	addi	r10,r10,4
  80a78c:	0027883a 	mov	r19,zero
  80a790:	da802215 	stw	r10,136(sp)
  80a794:	003d8006 	br	809d98 <__alt_mem_onchip_mem+0xff789d98>
  80a798:	80c00007 	ldb	r3,0(r16)
  80a79c:	003c0006 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80a7a0:	a080100c 	andi	r2,r20,64
  80a7a4:	d8001d85 	stb	zero,118(sp)
  80a7a8:	da802217 	ldw	r10,136(sp)
  80a7ac:	1000201e 	bne	r2,zero,80a830 <___vfiprintf_internal_r+0x120c>
  80a7b0:	50800104 	addi	r2,r10,4
  80a7b4:	54800017 	ldw	r18,0(r10)
  80a7b8:	0027883a 	mov	r19,zero
  80a7bc:	483def0e 	bge	r9,zero,809f7c <__alt_mem_onchip_mem+0xff789f7c>
  80a7c0:	94c6b03a 	or	r3,r18,r19
  80a7c4:	d8802215 	stw	r2,136(sp)
  80a7c8:	183d4e1e 	bne	r3,zero,809d04 <__alt_mem_onchip_mem+0xff789d04>
  80a7cc:	0039883a 	mov	fp,zero
  80a7d0:	0005883a 	mov	r2,zero
  80a7d4:	003e0606 	br	809ff0 <__alt_mem_onchip_mem+0xff789ff0>
  80a7d8:	d9402117 	ldw	r5,132(sp)
  80a7dc:	d9002017 	ldw	r4,128(sp)
  80a7e0:	d9801a04 	addi	r6,sp,104
  80a7e4:	da402c15 	stw	r9,176(sp)
  80a7e8:	db802a15 	stw	r14,168(sp)
  80a7ec:	08095100 	call	809510 <__sprint_r.part.0>
  80a7f0:	da402c17 	ldw	r9,176(sp)
  80a7f4:	db802a17 	ldw	r14,168(sp)
  80a7f8:	103ede1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a7fc:	d9401b17 	ldw	r5,108(sp)
  80a800:	d8801c17 	ldw	r2,112(sp)
  80a804:	d811883a 	mov	r8,sp
  80a808:	29000044 	addi	r4,r5,1
  80a80c:	003e7406 	br	80a1e0 <__alt_mem_onchip_mem+0xff78a1e0>
  80a810:	00bfffc4 	movi	r2,-1
  80a814:	003c5806 	br	809978 <__alt_mem_onchip_mem+0xff789978>
  80a818:	d811883a 	mov	r8,sp
  80a81c:	003ee806 	br	80a3c0 <__alt_mem_onchip_mem+0xff78a3c0>
  80a820:	000b883a 	mov	r5,zero
  80a824:	01000044 	movi	r4,1
  80a828:	d811883a 	mov	r8,sp
  80a82c:	003e7c06 	br	80a220 <__alt_mem_onchip_mem+0xff78a220>
  80a830:	50800104 	addi	r2,r10,4
  80a834:	5480000b 	ldhu	r18,0(r10)
  80a838:	0027883a 	mov	r19,zero
  80a83c:	483dcf0e 	bge	r9,zero,809f7c <__alt_mem_onchip_mem+0xff789f7c>
  80a840:	003fdf06 	br	80a7c0 <__alt_mem_onchip_mem+0xff78a7c0>
  80a844:	54800017 	ldw	r18,0(r10)
  80a848:	52800104 	addi	r10,r10,4
  80a84c:	0027883a 	mov	r19,zero
  80a850:	da802215 	stw	r10,136(sp)
  80a854:	003d5006 	br	809d98 <__alt_mem_onchip_mem+0xff789d98>
  80a858:	50800104 	addi	r2,r10,4
  80a85c:	5480000b 	ldhu	r18,0(r10)
  80a860:	0027883a 	mov	r19,zero
  80a864:	483f7d0e 	bge	r9,zero,80a65c <__alt_mem_onchip_mem+0xff78a65c>
  80a868:	003ddc06 	br	809fdc <__alt_mem_onchip_mem+0xff789fdc>
  80a86c:	d8c02215 	stw	r3,136(sp)
  80a870:	0039883a 	mov	fp,zero
  80a874:	003ddb06 	br	809fe4 <__alt_mem_onchip_mem+0xff789fe4>
  80a878:	02802074 	movhi	r10,129
  80a87c:	528d8004 	addi	r10,r10,13824
  80a880:	da802415 	stw	r10,144(sp)
  80a884:	003e8306 	br	80a294 <__alt_mem_onchip_mem+0xff78a294>
  80a888:	d8801c17 	ldw	r2,112(sp)
  80a88c:	dd002117 	ldw	r20,132(sp)
  80a890:	103eb926 	beq	r2,zero,80a378 <__alt_mem_onchip_mem+0xff78a378>
  80a894:	d9002017 	ldw	r4,128(sp)
  80a898:	d9801a04 	addi	r6,sp,104
  80a89c:	a00b883a 	mov	r5,r20
  80a8a0:	08095100 	call	809510 <__sprint_r.part.0>
  80a8a4:	003eb406 	br	80a378 <__alt_mem_onchip_mem+0xff78a378>
  80a8a8:	80c00043 	ldbu	r3,1(r16)
  80a8ac:	a5000814 	ori	r20,r20,32
  80a8b0:	84000044 	addi	r16,r16,1
  80a8b4:	18c03fcc 	andi	r3,r3,255
  80a8b8:	18c0201c 	xori	r3,r3,128
  80a8bc:	18ffe004 	addi	r3,r3,-128
  80a8c0:	003bb706 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80a8c4:	a809883a 	mov	r4,r21
  80a8c8:	d8c02a15 	stw	r3,168(sp)
  80a8cc:	da002b15 	stw	r8,172(sp)
  80a8d0:	08094780 	call	809478 <strlen>
  80a8d4:	d8c02a17 	ldw	r3,168(sp)
  80a8d8:	1027883a 	mov	r19,r2
  80a8dc:	df001d83 	ldbu	fp,118(sp)
  80a8e0:	d8c02215 	stw	r3,136(sp)
  80a8e4:	0013883a 	mov	r9,zero
  80a8e8:	da002b17 	ldw	r8,172(sp)
  80a8ec:	003c4d06 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80a8f0:	d9402117 	ldw	r5,132(sp)
  80a8f4:	d9002017 	ldw	r4,128(sp)
  80a8f8:	d9801a04 	addi	r6,sp,104
  80a8fc:	da402c15 	stw	r9,176(sp)
  80a900:	08095100 	call	809510 <__sprint_r.part.0>
  80a904:	da402c17 	ldw	r9,176(sp)
  80a908:	103e9a1e 	bne	r2,zero,80a374 <__alt_mem_onchip_mem+0xff78a374>
  80a90c:	d9401b17 	ldw	r5,108(sp)
  80a910:	d8801c17 	ldw	r2,112(sp)
  80a914:	d811883a 	mov	r8,sp
  80a918:	29000044 	addi	r4,r5,1
  80a91c:	003e4206 	br	80a228 <__alt_mem_onchip_mem+0xff78a228>
  80a920:	d9401b17 	ldw	r5,108(sp)
  80a924:	01002074 	movhi	r4,129
  80a928:	210d8404 	addi	r4,r4,13840
  80a92c:	d9002415 	stw	r4,144(sp)
  80a930:	29400044 	addi	r5,r5,1
  80a934:	003c6d06 	br	809aec <__alt_mem_onchip_mem+0xff789aec>
  80a938:	0039883a 	mov	fp,zero
  80a93c:	00800084 	movi	r2,2
  80a940:	10803fcc 	andi	r2,r2,255
  80a944:	01000044 	movi	r4,1
  80a948:	11001e26 	beq	r2,r4,80a9c4 <___vfiprintf_internal_r+0x13a0>
  80a94c:	01000084 	movi	r4,2
  80a950:	11001e1e 	bne	r2,r4,80a9cc <___vfiprintf_internal_r+0x13a8>
  80a954:	1829883a 	mov	r20,r3
  80a958:	003eea06 	br	80a504 <__alt_mem_onchip_mem+0xff78a504>
  80a95c:	a007883a 	mov	r3,r20
  80a960:	00800044 	movi	r2,1
  80a964:	003ff606 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80a968:	00800184 	movi	r2,6
  80a96c:	1240012e 	bgeu	r2,r9,80a974 <___vfiprintf_internal_r+0x1350>
  80a970:	1013883a 	mov	r9,r2
  80a974:	4827883a 	mov	r19,r9
  80a978:	4825883a 	mov	r18,r9
  80a97c:	48001516 	blt	r9,zero,80a9d4 <___vfiprintf_internal_r+0x13b0>
  80a980:	05402074 	movhi	r21,129
  80a984:	d8c02215 	stw	r3,136(sp)
  80a988:	ad4d2404 	addi	r21,r21,13456
  80a98c:	003d1406 	br	809de0 <__alt_mem_onchip_mem+0xff789de0>
  80a990:	02802074 	movhi	r10,129
  80a994:	528d8004 	addi	r10,r10,13824
  80a998:	da802415 	stw	r10,144(sp)
  80a99c:	200d883a 	mov	r6,r4
  80a9a0:	003c9106 	br	809be8 <__alt_mem_onchip_mem+0xff789be8>
  80a9a4:	5021883a 	mov	r16,r10
  80a9a8:	0013883a 	mov	r9,zero
  80a9ac:	003b7d06 	br	8097a4 <__alt_mem_onchip_mem+0xff7897a4>
  80a9b0:	4827883a 	mov	r19,r9
  80a9b4:	df001d83 	ldbu	fp,118(sp)
  80a9b8:	d8c02215 	stw	r3,136(sp)
  80a9bc:	0013883a 	mov	r9,zero
  80a9c0:	003c1806 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80a9c4:	1829883a 	mov	r20,r3
  80a9c8:	003d1806 	br	809e2c <__alt_mem_onchip_mem+0xff789e2c>
  80a9cc:	1829883a 	mov	r20,r3
  80a9d0:	003ccd06 	br	809d08 <__alt_mem_onchip_mem+0xff789d08>
  80a9d4:	0025883a 	mov	r18,zero
  80a9d8:	003fe906 	br	80a980 <__alt_mem_onchip_mem+0xff78a980>
  80a9dc:	d8802217 	ldw	r2,136(sp)
  80a9e0:	80c00043 	ldbu	r3,1(r16)
  80a9e4:	5021883a 	mov	r16,r10
  80a9e8:	12400017 	ldw	r9,0(r2)
  80a9ec:	10800104 	addi	r2,r2,4
  80a9f0:	d8802215 	stw	r2,136(sp)
  80a9f4:	483faf0e 	bge	r9,zero,80a8b4 <__alt_mem_onchip_mem+0xff78a8b4>
  80a9f8:	18c03fcc 	andi	r3,r3,255
  80a9fc:	18c0201c 	xori	r3,r3,128
  80aa00:	027fffc4 	movi	r9,-1
  80aa04:	18ffe004 	addi	r3,r3,-128
  80aa08:	003b6506 	br	8097a0 <__alt_mem_onchip_mem+0xff7897a0>
  80aa0c:	d9c01d85 	stb	r7,118(sp)
  80aa10:	003ca006 	br	809c94 <__alt_mem_onchip_mem+0xff789c94>
  80aa14:	d9c01d85 	stb	r7,118(sp)
  80aa18:	003cad06 	br	809cd0 <__alt_mem_onchip_mem+0xff789cd0>
  80aa1c:	d9c01d85 	stb	r7,118(sp)
  80aa20:	003d7d06 	br	80a018 <__alt_mem_onchip_mem+0xff78a018>
  80aa24:	d9c01d85 	stb	r7,118(sp)
  80aa28:	003d5f06 	br	809fa8 <__alt_mem_onchip_mem+0xff789fa8>
  80aa2c:	a080004c 	andi	r2,r20,1
  80aa30:	0039883a 	mov	fp,zero
  80aa34:	10000526 	beq	r2,zero,80aa4c <___vfiprintf_internal_r+0x1428>
  80aa38:	00800c04 	movi	r2,48
  80aa3c:	d88019c5 	stb	r2,103(sp)
  80aa40:	dcc02717 	ldw	r19,156(sp)
  80aa44:	dd4019c4 	addi	r21,sp,103
  80aa48:	003bf606 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80aa4c:	0027883a 	mov	r19,zero
  80aa50:	dd401a04 	addi	r21,sp,104
  80aa54:	003bf306 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>
  80aa58:	d9c01d85 	stb	r7,118(sp)
  80aa5c:	003dc806 	br	80a180 <__alt_mem_onchip_mem+0xff78a180>
  80aa60:	d9c01d85 	stb	r7,118(sp)
  80aa64:	003d3a06 	br	809f50 <__alt_mem_onchip_mem+0xff789f50>
  80aa68:	d9c01d85 	stb	r7,118(sp)
  80aa6c:	003d2a06 	br	809f18 <__alt_mem_onchip_mem+0xff789f18>
  80aa70:	d9c01d85 	stb	r7,118(sp)
  80aa74:	003cde06 	br	809df0 <__alt_mem_onchip_mem+0xff789df0>
  80aa78:	d9c01d85 	stb	r7,118(sp)
  80aa7c:	003cbc06 	br	809d70 <__alt_mem_onchip_mem+0xff789d70>

0080aa80 <__vfiprintf_internal>:
  80aa80:	00802074 	movhi	r2,129
  80aa84:	10959e04 	addi	r2,r2,22136
  80aa88:	300f883a 	mov	r7,r6
  80aa8c:	280d883a 	mov	r6,r5
  80aa90:	200b883a 	mov	r5,r4
  80aa94:	11000017 	ldw	r4,0(r2)
  80aa98:	08096241 	jmpi	809624 <___vfiprintf_internal_r>

0080aa9c <__sbprintf>:
  80aa9c:	2880030b 	ldhu	r2,12(r5)
  80aaa0:	2ac01917 	ldw	r11,100(r5)
  80aaa4:	2a80038b 	ldhu	r10,14(r5)
  80aaa8:	2a400717 	ldw	r9,28(r5)
  80aaac:	2a000917 	ldw	r8,36(r5)
  80aab0:	defee204 	addi	sp,sp,-1144
  80aab4:	00c10004 	movi	r3,1024
  80aab8:	dc011a15 	stw	r16,1128(sp)
  80aabc:	10bfff4c 	andi	r2,r2,65533
  80aac0:	2821883a 	mov	r16,r5
  80aac4:	d8cb883a 	add	r5,sp,r3
  80aac8:	dc811c15 	stw	r18,1136(sp)
  80aacc:	dc411b15 	stw	r17,1132(sp)
  80aad0:	dfc11d15 	stw	ra,1140(sp)
  80aad4:	2025883a 	mov	r18,r4
  80aad8:	d881030d 	sth	r2,1036(sp)
  80aadc:	dac11915 	stw	r11,1124(sp)
  80aae0:	da81038d 	sth	r10,1038(sp)
  80aae4:	da410715 	stw	r9,1052(sp)
  80aae8:	da010915 	stw	r8,1060(sp)
  80aaec:	dec10015 	stw	sp,1024(sp)
  80aaf0:	dec10415 	stw	sp,1040(sp)
  80aaf4:	d8c10215 	stw	r3,1032(sp)
  80aaf8:	d8c10515 	stw	r3,1044(sp)
  80aafc:	d8010615 	stw	zero,1048(sp)
  80ab00:	08096240 	call	809624 <___vfiprintf_internal_r>
  80ab04:	1023883a 	mov	r17,r2
  80ab08:	10000416 	blt	r2,zero,80ab1c <__sbprintf+0x80>
  80ab0c:	d9410004 	addi	r5,sp,1024
  80ab10:	9009883a 	mov	r4,r18
  80ab14:	08069bc0 	call	8069bc <_fflush_r>
  80ab18:	10000d1e 	bne	r2,zero,80ab50 <__sbprintf+0xb4>
  80ab1c:	d881030b 	ldhu	r2,1036(sp)
  80ab20:	1080100c 	andi	r2,r2,64
  80ab24:	10000326 	beq	r2,zero,80ab34 <__sbprintf+0x98>
  80ab28:	8080030b 	ldhu	r2,12(r16)
  80ab2c:	10801014 	ori	r2,r2,64
  80ab30:	8080030d 	sth	r2,12(r16)
  80ab34:	8805883a 	mov	r2,r17
  80ab38:	dfc11d17 	ldw	ra,1140(sp)
  80ab3c:	dc811c17 	ldw	r18,1136(sp)
  80ab40:	dc411b17 	ldw	r17,1132(sp)
  80ab44:	dc011a17 	ldw	r16,1128(sp)
  80ab48:	dec11e04 	addi	sp,sp,1144
  80ab4c:	f800283a 	ret
  80ab50:	047fffc4 	movi	r17,-1
  80ab54:	003ff106 	br	80ab1c <__alt_mem_onchip_mem+0xff78ab1c>

0080ab58 <_write_r>:
  80ab58:	defffd04 	addi	sp,sp,-12
  80ab5c:	2805883a 	mov	r2,r5
  80ab60:	dc000015 	stw	r16,0(sp)
  80ab64:	04002074 	movhi	r16,129
  80ab68:	dc400115 	stw	r17,4(sp)
  80ab6c:	300b883a 	mov	r5,r6
  80ab70:	841d3f04 	addi	r16,r16,29948
  80ab74:	2023883a 	mov	r17,r4
  80ab78:	380d883a 	mov	r6,r7
  80ab7c:	1009883a 	mov	r4,r2
  80ab80:	dfc00215 	stw	ra,8(sp)
  80ab84:	80000015 	stw	zero,0(r16)
  80ab88:	080fdf00 	call	80fdf0 <write>
  80ab8c:	00ffffc4 	movi	r3,-1
  80ab90:	10c00526 	beq	r2,r3,80aba8 <_write_r+0x50>
  80ab94:	dfc00217 	ldw	ra,8(sp)
  80ab98:	dc400117 	ldw	r17,4(sp)
  80ab9c:	dc000017 	ldw	r16,0(sp)
  80aba0:	dec00304 	addi	sp,sp,12
  80aba4:	f800283a 	ret
  80aba8:	80c00017 	ldw	r3,0(r16)
  80abac:	183ff926 	beq	r3,zero,80ab94 <__alt_mem_onchip_mem+0xff78ab94>
  80abb0:	88c00015 	stw	r3,0(r17)
  80abb4:	003ff706 	br	80ab94 <__alt_mem_onchip_mem+0xff78ab94>

0080abb8 <_close_r>:
  80abb8:	defffd04 	addi	sp,sp,-12
  80abbc:	dc000015 	stw	r16,0(sp)
  80abc0:	04002074 	movhi	r16,129
  80abc4:	dc400115 	stw	r17,4(sp)
  80abc8:	841d3f04 	addi	r16,r16,29948
  80abcc:	2023883a 	mov	r17,r4
  80abd0:	2809883a 	mov	r4,r5
  80abd4:	dfc00215 	stw	ra,8(sp)
  80abd8:	80000015 	stw	zero,0(r16)
  80abdc:	080f43c0 	call	80f43c <close>
  80abe0:	00ffffc4 	movi	r3,-1
  80abe4:	10c00526 	beq	r2,r3,80abfc <_close_r+0x44>
  80abe8:	dfc00217 	ldw	ra,8(sp)
  80abec:	dc400117 	ldw	r17,4(sp)
  80abf0:	dc000017 	ldw	r16,0(sp)
  80abf4:	dec00304 	addi	sp,sp,12
  80abf8:	f800283a 	ret
  80abfc:	80c00017 	ldw	r3,0(r16)
  80ac00:	183ff926 	beq	r3,zero,80abe8 <__alt_mem_onchip_mem+0xff78abe8>
  80ac04:	88c00015 	stw	r3,0(r17)
  80ac08:	003ff706 	br	80abe8 <__alt_mem_onchip_mem+0xff78abe8>

0080ac0c <_calloc_r>:
  80ac0c:	298b383a 	mul	r5,r5,r6
  80ac10:	defffe04 	addi	sp,sp,-8
  80ac14:	dfc00115 	stw	ra,4(sp)
  80ac18:	dc000015 	stw	r16,0(sp)
  80ac1c:	080763c0 	call	80763c <_malloc_r>
  80ac20:	10002926 	beq	r2,zero,80acc8 <_calloc_r+0xbc>
  80ac24:	11bfff17 	ldw	r6,-4(r2)
  80ac28:	1021883a 	mov	r16,r2
  80ac2c:	00bfff04 	movi	r2,-4
  80ac30:	308c703a 	and	r6,r6,r2
  80ac34:	00c00904 	movi	r3,36
  80ac38:	308d883a 	add	r6,r6,r2
  80ac3c:	19801636 	bltu	r3,r6,80ac98 <_calloc_r+0x8c>
  80ac40:	008004c4 	movi	r2,19
  80ac44:	11800b2e 	bgeu	r2,r6,80ac74 <_calloc_r+0x68>
  80ac48:	80000015 	stw	zero,0(r16)
  80ac4c:	80000115 	stw	zero,4(r16)
  80ac50:	008006c4 	movi	r2,27
  80ac54:	11801a2e 	bgeu	r2,r6,80acc0 <_calloc_r+0xb4>
  80ac58:	80000215 	stw	zero,8(r16)
  80ac5c:	80000315 	stw	zero,12(r16)
  80ac60:	30c0151e 	bne	r6,r3,80acb8 <_calloc_r+0xac>
  80ac64:	80000415 	stw	zero,16(r16)
  80ac68:	80800604 	addi	r2,r16,24
  80ac6c:	80000515 	stw	zero,20(r16)
  80ac70:	00000106 	br	80ac78 <_calloc_r+0x6c>
  80ac74:	8005883a 	mov	r2,r16
  80ac78:	10000015 	stw	zero,0(r2)
  80ac7c:	10000115 	stw	zero,4(r2)
  80ac80:	10000215 	stw	zero,8(r2)
  80ac84:	8005883a 	mov	r2,r16
  80ac88:	dfc00117 	ldw	ra,4(sp)
  80ac8c:	dc000017 	ldw	r16,0(sp)
  80ac90:	dec00204 	addi	sp,sp,8
  80ac94:	f800283a 	ret
  80ac98:	000b883a 	mov	r5,zero
  80ac9c:	8009883a 	mov	r4,r16
  80aca0:	08080740 	call	808074 <memset>
  80aca4:	8005883a 	mov	r2,r16
  80aca8:	dfc00117 	ldw	ra,4(sp)
  80acac:	dc000017 	ldw	r16,0(sp)
  80acb0:	dec00204 	addi	sp,sp,8
  80acb4:	f800283a 	ret
  80acb8:	80800404 	addi	r2,r16,16
  80acbc:	003fee06 	br	80ac78 <__alt_mem_onchip_mem+0xff78ac78>
  80acc0:	80800204 	addi	r2,r16,8
  80acc4:	003fec06 	br	80ac78 <__alt_mem_onchip_mem+0xff78ac78>
  80acc8:	0005883a 	mov	r2,zero
  80accc:	003fee06 	br	80ac88 <__alt_mem_onchip_mem+0xff78ac88>

0080acd0 <_fclose_r>:
  80acd0:	28003926 	beq	r5,zero,80adb8 <_fclose_r+0xe8>
  80acd4:	defffc04 	addi	sp,sp,-16
  80acd8:	dc400115 	stw	r17,4(sp)
  80acdc:	dc000015 	stw	r16,0(sp)
  80ace0:	dfc00315 	stw	ra,12(sp)
  80ace4:	dc800215 	stw	r18,8(sp)
  80ace8:	2023883a 	mov	r17,r4
  80acec:	2821883a 	mov	r16,r5
  80acf0:	20000226 	beq	r4,zero,80acfc <_fclose_r+0x2c>
  80acf4:	20800e17 	ldw	r2,56(r4)
  80acf8:	10002726 	beq	r2,zero,80ad98 <_fclose_r+0xc8>
  80acfc:	8080030f 	ldh	r2,12(r16)
  80ad00:	1000071e 	bne	r2,zero,80ad20 <_fclose_r+0x50>
  80ad04:	0005883a 	mov	r2,zero
  80ad08:	dfc00317 	ldw	ra,12(sp)
  80ad0c:	dc800217 	ldw	r18,8(sp)
  80ad10:	dc400117 	ldw	r17,4(sp)
  80ad14:	dc000017 	ldw	r16,0(sp)
  80ad18:	dec00404 	addi	sp,sp,16
  80ad1c:	f800283a 	ret
  80ad20:	800b883a 	mov	r5,r16
  80ad24:	8809883a 	mov	r4,r17
  80ad28:	08067a00 	call	8067a0 <__sflush_r>
  80ad2c:	1025883a 	mov	r18,r2
  80ad30:	80800b17 	ldw	r2,44(r16)
  80ad34:	10000426 	beq	r2,zero,80ad48 <_fclose_r+0x78>
  80ad38:	81400717 	ldw	r5,28(r16)
  80ad3c:	8809883a 	mov	r4,r17
  80ad40:	103ee83a 	callr	r2
  80ad44:	10001616 	blt	r2,zero,80ada0 <_fclose_r+0xd0>
  80ad48:	8080030b 	ldhu	r2,12(r16)
  80ad4c:	1080200c 	andi	r2,r2,128
  80ad50:	1000151e 	bne	r2,zero,80ada8 <_fclose_r+0xd8>
  80ad54:	81400c17 	ldw	r5,48(r16)
  80ad58:	28000526 	beq	r5,zero,80ad70 <_fclose_r+0xa0>
  80ad5c:	80801004 	addi	r2,r16,64
  80ad60:	28800226 	beq	r5,r2,80ad6c <_fclose_r+0x9c>
  80ad64:	8809883a 	mov	r4,r17
  80ad68:	0806f0c0 	call	806f0c <_free_r>
  80ad6c:	80000c15 	stw	zero,48(r16)
  80ad70:	81401117 	ldw	r5,68(r16)
  80ad74:	28000326 	beq	r5,zero,80ad84 <_fclose_r+0xb4>
  80ad78:	8809883a 	mov	r4,r17
  80ad7c:	0806f0c0 	call	806f0c <_free_r>
  80ad80:	80001115 	stw	zero,68(r16)
  80ad84:	0806da80 	call	806da8 <__sfp_lock_acquire>
  80ad88:	8000030d 	sth	zero,12(r16)
  80ad8c:	0806dac0 	call	806dac <__sfp_lock_release>
  80ad90:	9005883a 	mov	r2,r18
  80ad94:	003fdc06 	br	80ad08 <__alt_mem_onchip_mem+0xff78ad08>
  80ad98:	0806d980 	call	806d98 <__sinit>
  80ad9c:	003fd706 	br	80acfc <__alt_mem_onchip_mem+0xff78acfc>
  80ada0:	04bfffc4 	movi	r18,-1
  80ada4:	003fe806 	br	80ad48 <__alt_mem_onchip_mem+0xff78ad48>
  80ada8:	81400417 	ldw	r5,16(r16)
  80adac:	8809883a 	mov	r4,r17
  80adb0:	0806f0c0 	call	806f0c <_free_r>
  80adb4:	003fe706 	br	80ad54 <__alt_mem_onchip_mem+0xff78ad54>
  80adb8:	0005883a 	mov	r2,zero
  80adbc:	f800283a 	ret

0080adc0 <fclose>:
  80adc0:	00802074 	movhi	r2,129
  80adc4:	10959e04 	addi	r2,r2,22136
  80adc8:	200b883a 	mov	r5,r4
  80adcc:	11000017 	ldw	r4,0(r2)
  80add0:	080acd01 	jmpi	80acd0 <_fclose_r>

0080add4 <__fputwc>:
  80add4:	defff804 	addi	sp,sp,-32
  80add8:	dcc00415 	stw	r19,16(sp)
  80addc:	dc800315 	stw	r18,12(sp)
  80ade0:	dc000115 	stw	r16,4(sp)
  80ade4:	dfc00715 	stw	ra,28(sp)
  80ade8:	dd400615 	stw	r21,24(sp)
  80adec:	dd000515 	stw	r20,20(sp)
  80adf0:	dc400215 	stw	r17,8(sp)
  80adf4:	2027883a 	mov	r19,r4
  80adf8:	2825883a 	mov	r18,r5
  80adfc:	3021883a 	mov	r16,r6
  80ae00:	080742c0 	call	80742c <__locale_mb_cur_max>
  80ae04:	00c00044 	movi	r3,1
  80ae08:	10c03e26 	beq	r2,r3,80af04 <__fputwc+0x130>
  80ae0c:	81c01704 	addi	r7,r16,92
  80ae10:	900d883a 	mov	r6,r18
  80ae14:	d80b883a 	mov	r5,sp
  80ae18:	9809883a 	mov	r4,r19
  80ae1c:	080be200 	call	80be20 <_wcrtomb_r>
  80ae20:	1029883a 	mov	r20,r2
  80ae24:	00bfffc4 	movi	r2,-1
  80ae28:	a0802026 	beq	r20,r2,80aeac <__fputwc+0xd8>
  80ae2c:	d9400003 	ldbu	r5,0(sp)
  80ae30:	a0001c26 	beq	r20,zero,80aea4 <__fputwc+0xd0>
  80ae34:	0023883a 	mov	r17,zero
  80ae38:	05400284 	movi	r21,10
  80ae3c:	00000906 	br	80ae64 <__fputwc+0x90>
  80ae40:	80800017 	ldw	r2,0(r16)
  80ae44:	11400005 	stb	r5,0(r2)
  80ae48:	80c00017 	ldw	r3,0(r16)
  80ae4c:	18c00044 	addi	r3,r3,1
  80ae50:	80c00015 	stw	r3,0(r16)
  80ae54:	8c400044 	addi	r17,r17,1
  80ae58:	dc45883a 	add	r2,sp,r17
  80ae5c:	8d00112e 	bgeu	r17,r20,80aea4 <__fputwc+0xd0>
  80ae60:	11400003 	ldbu	r5,0(r2)
  80ae64:	80c00217 	ldw	r3,8(r16)
  80ae68:	18ffffc4 	addi	r3,r3,-1
  80ae6c:	80c00215 	stw	r3,8(r16)
  80ae70:	183ff30e 	bge	r3,zero,80ae40 <__alt_mem_onchip_mem+0xff78ae40>
  80ae74:	80800617 	ldw	r2,24(r16)
  80ae78:	18801916 	blt	r3,r2,80aee0 <__fputwc+0x10c>
  80ae7c:	80800017 	ldw	r2,0(r16)
  80ae80:	11400005 	stb	r5,0(r2)
  80ae84:	80800017 	ldw	r2,0(r16)
  80ae88:	10c00003 	ldbu	r3,0(r2)
  80ae8c:	10800044 	addi	r2,r2,1
  80ae90:	1d402326 	beq	r3,r21,80af20 <__fputwc+0x14c>
  80ae94:	80800015 	stw	r2,0(r16)
  80ae98:	8c400044 	addi	r17,r17,1
  80ae9c:	dc45883a 	add	r2,sp,r17
  80aea0:	8d3fef36 	bltu	r17,r20,80ae60 <__alt_mem_onchip_mem+0xff78ae60>
  80aea4:	9005883a 	mov	r2,r18
  80aea8:	00000406 	br	80aebc <__fputwc+0xe8>
  80aeac:	80c0030b 	ldhu	r3,12(r16)
  80aeb0:	a005883a 	mov	r2,r20
  80aeb4:	18c01014 	ori	r3,r3,64
  80aeb8:	80c0030d 	sth	r3,12(r16)
  80aebc:	dfc00717 	ldw	ra,28(sp)
  80aec0:	dd400617 	ldw	r21,24(sp)
  80aec4:	dd000517 	ldw	r20,20(sp)
  80aec8:	dcc00417 	ldw	r19,16(sp)
  80aecc:	dc800317 	ldw	r18,12(sp)
  80aed0:	dc400217 	ldw	r17,8(sp)
  80aed4:	dc000117 	ldw	r16,4(sp)
  80aed8:	dec00804 	addi	sp,sp,32
  80aedc:	f800283a 	ret
  80aee0:	800d883a 	mov	r6,r16
  80aee4:	29403fcc 	andi	r5,r5,255
  80aee8:	9809883a 	mov	r4,r19
  80aeec:	080bcc80 	call	80bcc8 <__swbuf_r>
  80aef0:	10bfffe0 	cmpeqi	r2,r2,-1
  80aef4:	10803fcc 	andi	r2,r2,255
  80aef8:	103fd626 	beq	r2,zero,80ae54 <__alt_mem_onchip_mem+0xff78ae54>
  80aefc:	00bfffc4 	movi	r2,-1
  80af00:	003fee06 	br	80aebc <__alt_mem_onchip_mem+0xff78aebc>
  80af04:	90ffffc4 	addi	r3,r18,-1
  80af08:	01003f84 	movi	r4,254
  80af0c:	20ffbf36 	bltu	r4,r3,80ae0c <__alt_mem_onchip_mem+0xff78ae0c>
  80af10:	900b883a 	mov	r5,r18
  80af14:	dc800005 	stb	r18,0(sp)
  80af18:	1029883a 	mov	r20,r2
  80af1c:	003fc506 	br	80ae34 <__alt_mem_onchip_mem+0xff78ae34>
  80af20:	800d883a 	mov	r6,r16
  80af24:	a80b883a 	mov	r5,r21
  80af28:	9809883a 	mov	r4,r19
  80af2c:	080bcc80 	call	80bcc8 <__swbuf_r>
  80af30:	10bfffe0 	cmpeqi	r2,r2,-1
  80af34:	003fef06 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>

0080af38 <_fputwc_r>:
  80af38:	3080030b 	ldhu	r2,12(r6)
  80af3c:	10c8000c 	andi	r3,r2,8192
  80af40:	1800051e 	bne	r3,zero,80af58 <_fputwc_r+0x20>
  80af44:	30c01917 	ldw	r3,100(r6)
  80af48:	10880014 	ori	r2,r2,8192
  80af4c:	3080030d 	sth	r2,12(r6)
  80af50:	18880014 	ori	r2,r3,8192
  80af54:	30801915 	stw	r2,100(r6)
  80af58:	080add41 	jmpi	80add4 <__fputwc>

0080af5c <fputwc>:
  80af5c:	00802074 	movhi	r2,129
  80af60:	defffc04 	addi	sp,sp,-16
  80af64:	10959e04 	addi	r2,r2,22136
  80af68:	dc000115 	stw	r16,4(sp)
  80af6c:	14000017 	ldw	r16,0(r2)
  80af70:	dc400215 	stw	r17,8(sp)
  80af74:	dfc00315 	stw	ra,12(sp)
  80af78:	2023883a 	mov	r17,r4
  80af7c:	80000226 	beq	r16,zero,80af88 <fputwc+0x2c>
  80af80:	80800e17 	ldw	r2,56(r16)
  80af84:	10001026 	beq	r2,zero,80afc8 <fputwc+0x6c>
  80af88:	2880030b 	ldhu	r2,12(r5)
  80af8c:	10c8000c 	andi	r3,r2,8192
  80af90:	1800051e 	bne	r3,zero,80afa8 <fputwc+0x4c>
  80af94:	28c01917 	ldw	r3,100(r5)
  80af98:	10880014 	ori	r2,r2,8192
  80af9c:	2880030d 	sth	r2,12(r5)
  80afa0:	18880014 	ori	r2,r3,8192
  80afa4:	28801915 	stw	r2,100(r5)
  80afa8:	280d883a 	mov	r6,r5
  80afac:	8009883a 	mov	r4,r16
  80afb0:	880b883a 	mov	r5,r17
  80afb4:	dfc00317 	ldw	ra,12(sp)
  80afb8:	dc400217 	ldw	r17,8(sp)
  80afbc:	dc000117 	ldw	r16,4(sp)
  80afc0:	dec00404 	addi	sp,sp,16
  80afc4:	080add41 	jmpi	80add4 <__fputwc>
  80afc8:	8009883a 	mov	r4,r16
  80afcc:	d9400015 	stw	r5,0(sp)
  80afd0:	0806d980 	call	806d98 <__sinit>
  80afd4:	d9400017 	ldw	r5,0(sp)
  80afd8:	003feb06 	br	80af88 <__alt_mem_onchip_mem+0xff78af88>

0080afdc <_fstat_r>:
  80afdc:	defffd04 	addi	sp,sp,-12
  80afe0:	2805883a 	mov	r2,r5
  80afe4:	dc000015 	stw	r16,0(sp)
  80afe8:	04002074 	movhi	r16,129
  80afec:	dc400115 	stw	r17,4(sp)
  80aff0:	841d3f04 	addi	r16,r16,29948
  80aff4:	2023883a 	mov	r17,r4
  80aff8:	300b883a 	mov	r5,r6
  80affc:	1009883a 	mov	r4,r2
  80b000:	dfc00215 	stw	ra,8(sp)
  80b004:	80000015 	stw	zero,0(r16)
  80b008:	080f5740 	call	80f574 <fstat>
  80b00c:	00ffffc4 	movi	r3,-1
  80b010:	10c00526 	beq	r2,r3,80b028 <_fstat_r+0x4c>
  80b014:	dfc00217 	ldw	ra,8(sp)
  80b018:	dc400117 	ldw	r17,4(sp)
  80b01c:	dc000017 	ldw	r16,0(sp)
  80b020:	dec00304 	addi	sp,sp,12
  80b024:	f800283a 	ret
  80b028:	80c00017 	ldw	r3,0(r16)
  80b02c:	183ff926 	beq	r3,zero,80b014 <__alt_mem_onchip_mem+0xff78b014>
  80b030:	88c00015 	stw	r3,0(r17)
  80b034:	003ff706 	br	80b014 <__alt_mem_onchip_mem+0xff78b014>

0080b038 <__sfvwrite_r>:
  80b038:	30800217 	ldw	r2,8(r6)
  80b03c:	10006726 	beq	r2,zero,80b1dc <__sfvwrite_r+0x1a4>
  80b040:	28c0030b 	ldhu	r3,12(r5)
  80b044:	defff404 	addi	sp,sp,-48
  80b048:	dd400715 	stw	r21,28(sp)
  80b04c:	dd000615 	stw	r20,24(sp)
  80b050:	dc000215 	stw	r16,8(sp)
  80b054:	dfc00b15 	stw	ra,44(sp)
  80b058:	df000a15 	stw	fp,40(sp)
  80b05c:	ddc00915 	stw	r23,36(sp)
  80b060:	dd800815 	stw	r22,32(sp)
  80b064:	dcc00515 	stw	r19,20(sp)
  80b068:	dc800415 	stw	r18,16(sp)
  80b06c:	dc400315 	stw	r17,12(sp)
  80b070:	1880020c 	andi	r2,r3,8
  80b074:	2821883a 	mov	r16,r5
  80b078:	202b883a 	mov	r21,r4
  80b07c:	3029883a 	mov	r20,r6
  80b080:	10002726 	beq	r2,zero,80b120 <__sfvwrite_r+0xe8>
  80b084:	28800417 	ldw	r2,16(r5)
  80b088:	10002526 	beq	r2,zero,80b120 <__sfvwrite_r+0xe8>
  80b08c:	1880008c 	andi	r2,r3,2
  80b090:	a4400017 	ldw	r17,0(r20)
  80b094:	10002a26 	beq	r2,zero,80b140 <__sfvwrite_r+0x108>
  80b098:	05a00034 	movhi	r22,32768
  80b09c:	0027883a 	mov	r19,zero
  80b0a0:	0025883a 	mov	r18,zero
  80b0a4:	b5bf0004 	addi	r22,r22,-1024
  80b0a8:	980d883a 	mov	r6,r19
  80b0ac:	a809883a 	mov	r4,r21
  80b0b0:	90004626 	beq	r18,zero,80b1cc <__sfvwrite_r+0x194>
  80b0b4:	900f883a 	mov	r7,r18
  80b0b8:	b480022e 	bgeu	r22,r18,80b0c4 <__sfvwrite_r+0x8c>
  80b0bc:	01e00034 	movhi	r7,32768
  80b0c0:	39ff0004 	addi	r7,r7,-1024
  80b0c4:	80800917 	ldw	r2,36(r16)
  80b0c8:	81400717 	ldw	r5,28(r16)
  80b0cc:	103ee83a 	callr	r2
  80b0d0:	0080570e 	bge	zero,r2,80b230 <__sfvwrite_r+0x1f8>
  80b0d4:	a0c00217 	ldw	r3,8(r20)
  80b0d8:	98a7883a 	add	r19,r19,r2
  80b0dc:	90a5c83a 	sub	r18,r18,r2
  80b0e0:	1885c83a 	sub	r2,r3,r2
  80b0e4:	a0800215 	stw	r2,8(r20)
  80b0e8:	103fef1e 	bne	r2,zero,80b0a8 <__alt_mem_onchip_mem+0xff78b0a8>
  80b0ec:	0005883a 	mov	r2,zero
  80b0f0:	dfc00b17 	ldw	ra,44(sp)
  80b0f4:	df000a17 	ldw	fp,40(sp)
  80b0f8:	ddc00917 	ldw	r23,36(sp)
  80b0fc:	dd800817 	ldw	r22,32(sp)
  80b100:	dd400717 	ldw	r21,28(sp)
  80b104:	dd000617 	ldw	r20,24(sp)
  80b108:	dcc00517 	ldw	r19,20(sp)
  80b10c:	dc800417 	ldw	r18,16(sp)
  80b110:	dc400317 	ldw	r17,12(sp)
  80b114:	dc000217 	ldw	r16,8(sp)
  80b118:	dec00c04 	addi	sp,sp,48
  80b11c:	f800283a 	ret
  80b120:	800b883a 	mov	r5,r16
  80b124:	a809883a 	mov	r4,r21
  80b128:	0804dc40 	call	804dc4 <__swsetup_r>
  80b12c:	1000eb1e 	bne	r2,zero,80b4dc <__sfvwrite_r+0x4a4>
  80b130:	80c0030b 	ldhu	r3,12(r16)
  80b134:	a4400017 	ldw	r17,0(r20)
  80b138:	1880008c 	andi	r2,r3,2
  80b13c:	103fd61e 	bne	r2,zero,80b098 <__alt_mem_onchip_mem+0xff78b098>
  80b140:	1880004c 	andi	r2,r3,1
  80b144:	10003f1e 	bne	r2,zero,80b244 <__sfvwrite_r+0x20c>
  80b148:	0039883a 	mov	fp,zero
  80b14c:	0025883a 	mov	r18,zero
  80b150:	90001a26 	beq	r18,zero,80b1bc <__sfvwrite_r+0x184>
  80b154:	1880800c 	andi	r2,r3,512
  80b158:	84c00217 	ldw	r19,8(r16)
  80b15c:	10002126 	beq	r2,zero,80b1e4 <__sfvwrite_r+0x1ac>
  80b160:	982f883a 	mov	r23,r19
  80b164:	94c09336 	bltu	r18,r19,80b3b4 <__sfvwrite_r+0x37c>
  80b168:	1881200c 	andi	r2,r3,1152
  80b16c:	10009e1e 	bne	r2,zero,80b3e8 <__sfvwrite_r+0x3b0>
  80b170:	81000017 	ldw	r4,0(r16)
  80b174:	b80d883a 	mov	r6,r23
  80b178:	e00b883a 	mov	r5,fp
  80b17c:	080b5a80 	call	80b5a8 <memmove>
  80b180:	80c00217 	ldw	r3,8(r16)
  80b184:	81000017 	ldw	r4,0(r16)
  80b188:	9005883a 	mov	r2,r18
  80b18c:	1ce7c83a 	sub	r19,r3,r19
  80b190:	25cf883a 	add	r7,r4,r23
  80b194:	84c00215 	stw	r19,8(r16)
  80b198:	81c00015 	stw	r7,0(r16)
  80b19c:	a0c00217 	ldw	r3,8(r20)
  80b1a0:	e0b9883a 	add	fp,fp,r2
  80b1a4:	90a5c83a 	sub	r18,r18,r2
  80b1a8:	18a7c83a 	sub	r19,r3,r2
  80b1ac:	a4c00215 	stw	r19,8(r20)
  80b1b0:	983fce26 	beq	r19,zero,80b0ec <__alt_mem_onchip_mem+0xff78b0ec>
  80b1b4:	80c0030b 	ldhu	r3,12(r16)
  80b1b8:	903fe61e 	bne	r18,zero,80b154 <__alt_mem_onchip_mem+0xff78b154>
  80b1bc:	8f000017 	ldw	fp,0(r17)
  80b1c0:	8c800117 	ldw	r18,4(r17)
  80b1c4:	8c400204 	addi	r17,r17,8
  80b1c8:	003fe106 	br	80b150 <__alt_mem_onchip_mem+0xff78b150>
  80b1cc:	8cc00017 	ldw	r19,0(r17)
  80b1d0:	8c800117 	ldw	r18,4(r17)
  80b1d4:	8c400204 	addi	r17,r17,8
  80b1d8:	003fb306 	br	80b0a8 <__alt_mem_onchip_mem+0xff78b0a8>
  80b1dc:	0005883a 	mov	r2,zero
  80b1e0:	f800283a 	ret
  80b1e4:	81000017 	ldw	r4,0(r16)
  80b1e8:	80800417 	ldw	r2,16(r16)
  80b1ec:	11005736 	bltu	r2,r4,80b34c <__sfvwrite_r+0x314>
  80b1f0:	85c00517 	ldw	r23,20(r16)
  80b1f4:	95c05536 	bltu	r18,r23,80b34c <__sfvwrite_r+0x314>
  80b1f8:	00a00034 	movhi	r2,32768
  80b1fc:	10bfffc4 	addi	r2,r2,-1
  80b200:	9009883a 	mov	r4,r18
  80b204:	1480012e 	bgeu	r2,r18,80b20c <__sfvwrite_r+0x1d4>
  80b208:	1009883a 	mov	r4,r2
  80b20c:	b80b883a 	mov	r5,r23
  80b210:	080cab80 	call	80cab8 <__divsi3>
  80b214:	15cf383a 	mul	r7,r2,r23
  80b218:	81400717 	ldw	r5,28(r16)
  80b21c:	80800917 	ldw	r2,36(r16)
  80b220:	e00d883a 	mov	r6,fp
  80b224:	a809883a 	mov	r4,r21
  80b228:	103ee83a 	callr	r2
  80b22c:	00bfdb16 	blt	zero,r2,80b19c <__alt_mem_onchip_mem+0xff78b19c>
  80b230:	8080030b 	ldhu	r2,12(r16)
  80b234:	10801014 	ori	r2,r2,64
  80b238:	8080030d 	sth	r2,12(r16)
  80b23c:	00bfffc4 	movi	r2,-1
  80b240:	003fab06 	br	80b0f0 <__alt_mem_onchip_mem+0xff78b0f0>
  80b244:	0027883a 	mov	r19,zero
  80b248:	0011883a 	mov	r8,zero
  80b24c:	0039883a 	mov	fp,zero
  80b250:	0025883a 	mov	r18,zero
  80b254:	90001f26 	beq	r18,zero,80b2d4 <__sfvwrite_r+0x29c>
  80b258:	40005a26 	beq	r8,zero,80b3c4 <__sfvwrite_r+0x38c>
  80b25c:	982d883a 	mov	r22,r19
  80b260:	94c0012e 	bgeu	r18,r19,80b268 <__sfvwrite_r+0x230>
  80b264:	902d883a 	mov	r22,r18
  80b268:	81000017 	ldw	r4,0(r16)
  80b26c:	80800417 	ldw	r2,16(r16)
  80b270:	b02f883a 	mov	r23,r22
  80b274:	81c00517 	ldw	r7,20(r16)
  80b278:	1100032e 	bgeu	r2,r4,80b288 <__sfvwrite_r+0x250>
  80b27c:	80c00217 	ldw	r3,8(r16)
  80b280:	38c7883a 	add	r3,r7,r3
  80b284:	1d801816 	blt	r3,r22,80b2e8 <__sfvwrite_r+0x2b0>
  80b288:	b1c03e16 	blt	r22,r7,80b384 <__sfvwrite_r+0x34c>
  80b28c:	80800917 	ldw	r2,36(r16)
  80b290:	81400717 	ldw	r5,28(r16)
  80b294:	e00d883a 	mov	r6,fp
  80b298:	da000115 	stw	r8,4(sp)
  80b29c:	a809883a 	mov	r4,r21
  80b2a0:	103ee83a 	callr	r2
  80b2a4:	102f883a 	mov	r23,r2
  80b2a8:	da000117 	ldw	r8,4(sp)
  80b2ac:	00bfe00e 	bge	zero,r2,80b230 <__alt_mem_onchip_mem+0xff78b230>
  80b2b0:	9de7c83a 	sub	r19,r19,r23
  80b2b4:	98001f26 	beq	r19,zero,80b334 <__sfvwrite_r+0x2fc>
  80b2b8:	a0800217 	ldw	r2,8(r20)
  80b2bc:	e5f9883a 	add	fp,fp,r23
  80b2c0:	95e5c83a 	sub	r18,r18,r23
  80b2c4:	15efc83a 	sub	r23,r2,r23
  80b2c8:	a5c00215 	stw	r23,8(r20)
  80b2cc:	b83f8726 	beq	r23,zero,80b0ec <__alt_mem_onchip_mem+0xff78b0ec>
  80b2d0:	903fe11e 	bne	r18,zero,80b258 <__alt_mem_onchip_mem+0xff78b258>
  80b2d4:	8f000017 	ldw	fp,0(r17)
  80b2d8:	8c800117 	ldw	r18,4(r17)
  80b2dc:	0011883a 	mov	r8,zero
  80b2e0:	8c400204 	addi	r17,r17,8
  80b2e4:	003fdb06 	br	80b254 <__alt_mem_onchip_mem+0xff78b254>
  80b2e8:	180d883a 	mov	r6,r3
  80b2ec:	e00b883a 	mov	r5,fp
  80b2f0:	da000115 	stw	r8,4(sp)
  80b2f4:	d8c00015 	stw	r3,0(sp)
  80b2f8:	080b5a80 	call	80b5a8 <memmove>
  80b2fc:	d8c00017 	ldw	r3,0(sp)
  80b300:	80800017 	ldw	r2,0(r16)
  80b304:	800b883a 	mov	r5,r16
  80b308:	a809883a 	mov	r4,r21
  80b30c:	10c5883a 	add	r2,r2,r3
  80b310:	80800015 	stw	r2,0(r16)
  80b314:	d8c00015 	stw	r3,0(sp)
  80b318:	08069bc0 	call	8069bc <_fflush_r>
  80b31c:	d8c00017 	ldw	r3,0(sp)
  80b320:	da000117 	ldw	r8,4(sp)
  80b324:	103fc21e 	bne	r2,zero,80b230 <__alt_mem_onchip_mem+0xff78b230>
  80b328:	182f883a 	mov	r23,r3
  80b32c:	9de7c83a 	sub	r19,r19,r23
  80b330:	983fe11e 	bne	r19,zero,80b2b8 <__alt_mem_onchip_mem+0xff78b2b8>
  80b334:	800b883a 	mov	r5,r16
  80b338:	a809883a 	mov	r4,r21
  80b33c:	08069bc0 	call	8069bc <_fflush_r>
  80b340:	103fbb1e 	bne	r2,zero,80b230 <__alt_mem_onchip_mem+0xff78b230>
  80b344:	0011883a 	mov	r8,zero
  80b348:	003fdb06 	br	80b2b8 <__alt_mem_onchip_mem+0xff78b2b8>
  80b34c:	94c0012e 	bgeu	r18,r19,80b354 <__sfvwrite_r+0x31c>
  80b350:	9027883a 	mov	r19,r18
  80b354:	980d883a 	mov	r6,r19
  80b358:	e00b883a 	mov	r5,fp
  80b35c:	080b5a80 	call	80b5a8 <memmove>
  80b360:	80800217 	ldw	r2,8(r16)
  80b364:	80c00017 	ldw	r3,0(r16)
  80b368:	14c5c83a 	sub	r2,r2,r19
  80b36c:	1cc7883a 	add	r3,r3,r19
  80b370:	80800215 	stw	r2,8(r16)
  80b374:	80c00015 	stw	r3,0(r16)
  80b378:	10004326 	beq	r2,zero,80b488 <__sfvwrite_r+0x450>
  80b37c:	9805883a 	mov	r2,r19
  80b380:	003f8606 	br	80b19c <__alt_mem_onchip_mem+0xff78b19c>
  80b384:	b00d883a 	mov	r6,r22
  80b388:	e00b883a 	mov	r5,fp
  80b38c:	da000115 	stw	r8,4(sp)
  80b390:	080b5a80 	call	80b5a8 <memmove>
  80b394:	80800217 	ldw	r2,8(r16)
  80b398:	80c00017 	ldw	r3,0(r16)
  80b39c:	da000117 	ldw	r8,4(sp)
  80b3a0:	1585c83a 	sub	r2,r2,r22
  80b3a4:	1dad883a 	add	r22,r3,r22
  80b3a8:	80800215 	stw	r2,8(r16)
  80b3ac:	85800015 	stw	r22,0(r16)
  80b3b0:	003fbf06 	br	80b2b0 <__alt_mem_onchip_mem+0xff78b2b0>
  80b3b4:	81000017 	ldw	r4,0(r16)
  80b3b8:	9027883a 	mov	r19,r18
  80b3bc:	902f883a 	mov	r23,r18
  80b3c0:	003f6c06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b3c4:	900d883a 	mov	r6,r18
  80b3c8:	01400284 	movi	r5,10
  80b3cc:	e009883a 	mov	r4,fp
  80b3d0:	0807e480 	call	807e48 <memchr>
  80b3d4:	10003e26 	beq	r2,zero,80b4d0 <__sfvwrite_r+0x498>
  80b3d8:	10800044 	addi	r2,r2,1
  80b3dc:	1727c83a 	sub	r19,r2,fp
  80b3e0:	02000044 	movi	r8,1
  80b3e4:	003f9d06 	br	80b25c <__alt_mem_onchip_mem+0xff78b25c>
  80b3e8:	80800517 	ldw	r2,20(r16)
  80b3ec:	81400417 	ldw	r5,16(r16)
  80b3f0:	81c00017 	ldw	r7,0(r16)
  80b3f4:	10a7883a 	add	r19,r2,r2
  80b3f8:	9885883a 	add	r2,r19,r2
  80b3fc:	1026d7fa 	srli	r19,r2,31
  80b400:	396dc83a 	sub	r22,r7,r5
  80b404:	b1000044 	addi	r4,r22,1
  80b408:	9885883a 	add	r2,r19,r2
  80b40c:	1027d07a 	srai	r19,r2,1
  80b410:	2485883a 	add	r2,r4,r18
  80b414:	980d883a 	mov	r6,r19
  80b418:	9880022e 	bgeu	r19,r2,80b424 <__sfvwrite_r+0x3ec>
  80b41c:	1027883a 	mov	r19,r2
  80b420:	100d883a 	mov	r6,r2
  80b424:	18c1000c 	andi	r3,r3,1024
  80b428:	18001c26 	beq	r3,zero,80b49c <__sfvwrite_r+0x464>
  80b42c:	300b883a 	mov	r5,r6
  80b430:	a809883a 	mov	r4,r21
  80b434:	080763c0 	call	80763c <_malloc_r>
  80b438:	102f883a 	mov	r23,r2
  80b43c:	10002926 	beq	r2,zero,80b4e4 <__sfvwrite_r+0x4ac>
  80b440:	81400417 	ldw	r5,16(r16)
  80b444:	b00d883a 	mov	r6,r22
  80b448:	1009883a 	mov	r4,r2
  80b44c:	0807f2c0 	call	807f2c <memcpy>
  80b450:	8080030b 	ldhu	r2,12(r16)
  80b454:	00fedfc4 	movi	r3,-1153
  80b458:	10c4703a 	and	r2,r2,r3
  80b45c:	10802014 	ori	r2,r2,128
  80b460:	8080030d 	sth	r2,12(r16)
  80b464:	bd89883a 	add	r4,r23,r22
  80b468:	9d8fc83a 	sub	r7,r19,r22
  80b46c:	85c00415 	stw	r23,16(r16)
  80b470:	84c00515 	stw	r19,20(r16)
  80b474:	81000015 	stw	r4,0(r16)
  80b478:	9027883a 	mov	r19,r18
  80b47c:	81c00215 	stw	r7,8(r16)
  80b480:	902f883a 	mov	r23,r18
  80b484:	003f3b06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b488:	800b883a 	mov	r5,r16
  80b48c:	a809883a 	mov	r4,r21
  80b490:	08069bc0 	call	8069bc <_fflush_r>
  80b494:	103fb926 	beq	r2,zero,80b37c <__alt_mem_onchip_mem+0xff78b37c>
  80b498:	003f6506 	br	80b230 <__alt_mem_onchip_mem+0xff78b230>
  80b49c:	a809883a 	mov	r4,r21
  80b4a0:	080b7640 	call	80b764 <_realloc_r>
  80b4a4:	102f883a 	mov	r23,r2
  80b4a8:	103fee1e 	bne	r2,zero,80b464 <__alt_mem_onchip_mem+0xff78b464>
  80b4ac:	81400417 	ldw	r5,16(r16)
  80b4b0:	a809883a 	mov	r4,r21
  80b4b4:	0806f0c0 	call	806f0c <_free_r>
  80b4b8:	8080030b 	ldhu	r2,12(r16)
  80b4bc:	00ffdfc4 	movi	r3,-129
  80b4c0:	1884703a 	and	r2,r3,r2
  80b4c4:	00c00304 	movi	r3,12
  80b4c8:	a8c00015 	stw	r3,0(r21)
  80b4cc:	003f5906 	br	80b234 <__alt_mem_onchip_mem+0xff78b234>
  80b4d0:	94c00044 	addi	r19,r18,1
  80b4d4:	02000044 	movi	r8,1
  80b4d8:	003f6006 	br	80b25c <__alt_mem_onchip_mem+0xff78b25c>
  80b4dc:	00bfffc4 	movi	r2,-1
  80b4e0:	003f0306 	br	80b0f0 <__alt_mem_onchip_mem+0xff78b0f0>
  80b4e4:	00800304 	movi	r2,12
  80b4e8:	a8800015 	stw	r2,0(r21)
  80b4ec:	8080030b 	ldhu	r2,12(r16)
  80b4f0:	003f5006 	br	80b234 <__alt_mem_onchip_mem+0xff78b234>

0080b4f4 <_isatty_r>:
  80b4f4:	defffd04 	addi	sp,sp,-12
  80b4f8:	dc000015 	stw	r16,0(sp)
  80b4fc:	04002074 	movhi	r16,129
  80b500:	dc400115 	stw	r17,4(sp)
  80b504:	841d3f04 	addi	r16,r16,29948
  80b508:	2023883a 	mov	r17,r4
  80b50c:	2809883a 	mov	r4,r5
  80b510:	dfc00215 	stw	ra,8(sp)
  80b514:	80000015 	stw	zero,0(r16)
  80b518:	080f6600 	call	80f660 <isatty>
  80b51c:	00ffffc4 	movi	r3,-1
  80b520:	10c00526 	beq	r2,r3,80b538 <_isatty_r+0x44>
  80b524:	dfc00217 	ldw	ra,8(sp)
  80b528:	dc400117 	ldw	r17,4(sp)
  80b52c:	dc000017 	ldw	r16,0(sp)
  80b530:	dec00304 	addi	sp,sp,12
  80b534:	f800283a 	ret
  80b538:	80c00017 	ldw	r3,0(r16)
  80b53c:	183ff926 	beq	r3,zero,80b524 <__alt_mem_onchip_mem+0xff78b524>
  80b540:	88c00015 	stw	r3,0(r17)
  80b544:	003ff706 	br	80b524 <__alt_mem_onchip_mem+0xff78b524>

0080b548 <_lseek_r>:
  80b548:	defffd04 	addi	sp,sp,-12
  80b54c:	2805883a 	mov	r2,r5
  80b550:	dc000015 	stw	r16,0(sp)
  80b554:	04002074 	movhi	r16,129
  80b558:	dc400115 	stw	r17,4(sp)
  80b55c:	300b883a 	mov	r5,r6
  80b560:	841d3f04 	addi	r16,r16,29948
  80b564:	2023883a 	mov	r17,r4
  80b568:	380d883a 	mov	r6,r7
  80b56c:	1009883a 	mov	r4,r2
  80b570:	dfc00215 	stw	ra,8(sp)
  80b574:	80000015 	stw	zero,0(r16)
  80b578:	080f82c0 	call	80f82c <lseek>
  80b57c:	00ffffc4 	movi	r3,-1
  80b580:	10c00526 	beq	r2,r3,80b598 <_lseek_r+0x50>
  80b584:	dfc00217 	ldw	ra,8(sp)
  80b588:	dc400117 	ldw	r17,4(sp)
  80b58c:	dc000017 	ldw	r16,0(sp)
  80b590:	dec00304 	addi	sp,sp,12
  80b594:	f800283a 	ret
  80b598:	80c00017 	ldw	r3,0(r16)
  80b59c:	183ff926 	beq	r3,zero,80b584 <__alt_mem_onchip_mem+0xff78b584>
  80b5a0:	88c00015 	stw	r3,0(r17)
  80b5a4:	003ff706 	br	80b584 <__alt_mem_onchip_mem+0xff78b584>

0080b5a8 <memmove>:
  80b5a8:	2005883a 	mov	r2,r4
  80b5ac:	29000b2e 	bgeu	r5,r4,80b5dc <memmove+0x34>
  80b5b0:	298f883a 	add	r7,r5,r6
  80b5b4:	21c0092e 	bgeu	r4,r7,80b5dc <memmove+0x34>
  80b5b8:	2187883a 	add	r3,r4,r6
  80b5bc:	198bc83a 	sub	r5,r3,r6
  80b5c0:	30004826 	beq	r6,zero,80b6e4 <memmove+0x13c>
  80b5c4:	39ffffc4 	addi	r7,r7,-1
  80b5c8:	39000003 	ldbu	r4,0(r7)
  80b5cc:	18ffffc4 	addi	r3,r3,-1
  80b5d0:	19000005 	stb	r4,0(r3)
  80b5d4:	28fffb1e 	bne	r5,r3,80b5c4 <__alt_mem_onchip_mem+0xff78b5c4>
  80b5d8:	f800283a 	ret
  80b5dc:	00c003c4 	movi	r3,15
  80b5e0:	1980412e 	bgeu	r3,r6,80b6e8 <memmove+0x140>
  80b5e4:	2886b03a 	or	r3,r5,r2
  80b5e8:	18c000cc 	andi	r3,r3,3
  80b5ec:	1800401e 	bne	r3,zero,80b6f0 <memmove+0x148>
  80b5f0:	33fffc04 	addi	r15,r6,-16
  80b5f4:	781ed13a 	srli	r15,r15,4
  80b5f8:	28c00104 	addi	r3,r5,4
  80b5fc:	13400104 	addi	r13,r2,4
  80b600:	781c913a 	slli	r14,r15,4
  80b604:	2b000204 	addi	r12,r5,8
  80b608:	12c00204 	addi	r11,r2,8
  80b60c:	73800504 	addi	r14,r14,20
  80b610:	2a800304 	addi	r10,r5,12
  80b614:	12400304 	addi	r9,r2,12
  80b618:	2b9d883a 	add	r14,r5,r14
  80b61c:	2811883a 	mov	r8,r5
  80b620:	100f883a 	mov	r7,r2
  80b624:	41000017 	ldw	r4,0(r8)
  80b628:	39c00404 	addi	r7,r7,16
  80b62c:	18c00404 	addi	r3,r3,16
  80b630:	393ffc15 	stw	r4,-16(r7)
  80b634:	193ffc17 	ldw	r4,-16(r3)
  80b638:	6b400404 	addi	r13,r13,16
  80b63c:	5ac00404 	addi	r11,r11,16
  80b640:	693ffc15 	stw	r4,-16(r13)
  80b644:	61000017 	ldw	r4,0(r12)
  80b648:	4a400404 	addi	r9,r9,16
  80b64c:	42000404 	addi	r8,r8,16
  80b650:	593ffc15 	stw	r4,-16(r11)
  80b654:	51000017 	ldw	r4,0(r10)
  80b658:	63000404 	addi	r12,r12,16
  80b65c:	52800404 	addi	r10,r10,16
  80b660:	493ffc15 	stw	r4,-16(r9)
  80b664:	1bbfef1e 	bne	r3,r14,80b624 <__alt_mem_onchip_mem+0xff78b624>
  80b668:	79000044 	addi	r4,r15,1
  80b66c:	2008913a 	slli	r4,r4,4
  80b670:	328003cc 	andi	r10,r6,15
  80b674:	02c000c4 	movi	r11,3
  80b678:	1107883a 	add	r3,r2,r4
  80b67c:	290b883a 	add	r5,r5,r4
  80b680:	5a801e2e 	bgeu	r11,r10,80b6fc <memmove+0x154>
  80b684:	1813883a 	mov	r9,r3
  80b688:	2811883a 	mov	r8,r5
  80b68c:	500f883a 	mov	r7,r10
  80b690:	41000017 	ldw	r4,0(r8)
  80b694:	4a400104 	addi	r9,r9,4
  80b698:	39ffff04 	addi	r7,r7,-4
  80b69c:	493fff15 	stw	r4,-4(r9)
  80b6a0:	42000104 	addi	r8,r8,4
  80b6a4:	59fffa36 	bltu	r11,r7,80b690 <__alt_mem_onchip_mem+0xff78b690>
  80b6a8:	513fff04 	addi	r4,r10,-4
  80b6ac:	2008d0ba 	srli	r4,r4,2
  80b6b0:	318000cc 	andi	r6,r6,3
  80b6b4:	21000044 	addi	r4,r4,1
  80b6b8:	2109883a 	add	r4,r4,r4
  80b6bc:	2109883a 	add	r4,r4,r4
  80b6c0:	1907883a 	add	r3,r3,r4
  80b6c4:	290b883a 	add	r5,r5,r4
  80b6c8:	30000b26 	beq	r6,zero,80b6f8 <memmove+0x150>
  80b6cc:	198d883a 	add	r6,r3,r6
  80b6d0:	29c00003 	ldbu	r7,0(r5)
  80b6d4:	18c00044 	addi	r3,r3,1
  80b6d8:	29400044 	addi	r5,r5,1
  80b6dc:	19ffffc5 	stb	r7,-1(r3)
  80b6e0:	19bffb1e 	bne	r3,r6,80b6d0 <__alt_mem_onchip_mem+0xff78b6d0>
  80b6e4:	f800283a 	ret
  80b6e8:	1007883a 	mov	r3,r2
  80b6ec:	003ff606 	br	80b6c8 <__alt_mem_onchip_mem+0xff78b6c8>
  80b6f0:	1007883a 	mov	r3,r2
  80b6f4:	003ff506 	br	80b6cc <__alt_mem_onchip_mem+0xff78b6cc>
  80b6f8:	f800283a 	ret
  80b6fc:	500d883a 	mov	r6,r10
  80b700:	003ff106 	br	80b6c8 <__alt_mem_onchip_mem+0xff78b6c8>

0080b704 <_read_r>:
  80b704:	defffd04 	addi	sp,sp,-12
  80b708:	2805883a 	mov	r2,r5
  80b70c:	dc000015 	stw	r16,0(sp)
  80b710:	04002074 	movhi	r16,129
  80b714:	dc400115 	stw	r17,4(sp)
  80b718:	300b883a 	mov	r5,r6
  80b71c:	841d3f04 	addi	r16,r16,29948
  80b720:	2023883a 	mov	r17,r4
  80b724:	380d883a 	mov	r6,r7
  80b728:	1009883a 	mov	r4,r2
  80b72c:	dfc00215 	stw	ra,8(sp)
  80b730:	80000015 	stw	zero,0(r16)
  80b734:	080fa000 	call	80fa00 <read>
  80b738:	00ffffc4 	movi	r3,-1
  80b73c:	10c00526 	beq	r2,r3,80b754 <_read_r+0x50>
  80b740:	dfc00217 	ldw	ra,8(sp)
  80b744:	dc400117 	ldw	r17,4(sp)
  80b748:	dc000017 	ldw	r16,0(sp)
  80b74c:	dec00304 	addi	sp,sp,12
  80b750:	f800283a 	ret
  80b754:	80c00017 	ldw	r3,0(r16)
  80b758:	183ff926 	beq	r3,zero,80b740 <__alt_mem_onchip_mem+0xff78b740>
  80b75c:	88c00015 	stw	r3,0(r17)
  80b760:	003ff706 	br	80b740 <__alt_mem_onchip_mem+0xff78b740>

0080b764 <_realloc_r>:
  80b764:	defff604 	addi	sp,sp,-40
  80b768:	dc800215 	stw	r18,8(sp)
  80b76c:	dfc00915 	stw	ra,36(sp)
  80b770:	df000815 	stw	fp,32(sp)
  80b774:	ddc00715 	stw	r23,28(sp)
  80b778:	dd800615 	stw	r22,24(sp)
  80b77c:	dd400515 	stw	r21,20(sp)
  80b780:	dd000415 	stw	r20,16(sp)
  80b784:	dcc00315 	stw	r19,12(sp)
  80b788:	dc400115 	stw	r17,4(sp)
  80b78c:	dc000015 	stw	r16,0(sp)
  80b790:	3025883a 	mov	r18,r6
  80b794:	2800b726 	beq	r5,zero,80ba74 <_realloc_r+0x310>
  80b798:	282b883a 	mov	r21,r5
  80b79c:	2029883a 	mov	r20,r4
  80b7a0:	080f97c0 	call	80f97c <__malloc_lock>
  80b7a4:	a8bfff17 	ldw	r2,-4(r21)
  80b7a8:	043fff04 	movi	r16,-4
  80b7ac:	90c002c4 	addi	r3,r18,11
  80b7b0:	01000584 	movi	r4,22
  80b7b4:	acfffe04 	addi	r19,r21,-8
  80b7b8:	1420703a 	and	r16,r2,r16
  80b7bc:	20c0332e 	bgeu	r4,r3,80b88c <_realloc_r+0x128>
  80b7c0:	047ffe04 	movi	r17,-8
  80b7c4:	1c62703a 	and	r17,r3,r17
  80b7c8:	8807883a 	mov	r3,r17
  80b7cc:	88005816 	blt	r17,zero,80b930 <_realloc_r+0x1cc>
  80b7d0:	8c805736 	bltu	r17,r18,80b930 <_realloc_r+0x1cc>
  80b7d4:	80c0300e 	bge	r16,r3,80b898 <_realloc_r+0x134>
  80b7d8:	07002074 	movhi	fp,129
  80b7dc:	e70fa004 	addi	fp,fp,16000
  80b7e0:	e1c00217 	ldw	r7,8(fp)
  80b7e4:	9c09883a 	add	r4,r19,r16
  80b7e8:	22000117 	ldw	r8,4(r4)
  80b7ec:	21c06326 	beq	r4,r7,80b97c <_realloc_r+0x218>
  80b7f0:	017fff84 	movi	r5,-2
  80b7f4:	414a703a 	and	r5,r8,r5
  80b7f8:	214b883a 	add	r5,r4,r5
  80b7fc:	29800117 	ldw	r6,4(r5)
  80b800:	3180004c 	andi	r6,r6,1
  80b804:	30003f26 	beq	r6,zero,80b904 <_realloc_r+0x1a0>
  80b808:	1080004c 	andi	r2,r2,1
  80b80c:	10008326 	beq	r2,zero,80ba1c <_realloc_r+0x2b8>
  80b810:	900b883a 	mov	r5,r18
  80b814:	a009883a 	mov	r4,r20
  80b818:	080763c0 	call	80763c <_malloc_r>
  80b81c:	1025883a 	mov	r18,r2
  80b820:	10011e26 	beq	r2,zero,80bc9c <_realloc_r+0x538>
  80b824:	a93fff17 	ldw	r4,-4(r21)
  80b828:	10fffe04 	addi	r3,r2,-8
  80b82c:	00bfff84 	movi	r2,-2
  80b830:	2084703a 	and	r2,r4,r2
  80b834:	9885883a 	add	r2,r19,r2
  80b838:	1880ee26 	beq	r3,r2,80bbf4 <_realloc_r+0x490>
  80b83c:	81bfff04 	addi	r6,r16,-4
  80b840:	00800904 	movi	r2,36
  80b844:	1180b836 	bltu	r2,r6,80bb28 <_realloc_r+0x3c4>
  80b848:	00c004c4 	movi	r3,19
  80b84c:	19809636 	bltu	r3,r6,80baa8 <_realloc_r+0x344>
  80b850:	9005883a 	mov	r2,r18
  80b854:	a807883a 	mov	r3,r21
  80b858:	19000017 	ldw	r4,0(r3)
  80b85c:	11000015 	stw	r4,0(r2)
  80b860:	19000117 	ldw	r4,4(r3)
  80b864:	11000115 	stw	r4,4(r2)
  80b868:	18c00217 	ldw	r3,8(r3)
  80b86c:	10c00215 	stw	r3,8(r2)
  80b870:	a80b883a 	mov	r5,r21
  80b874:	a009883a 	mov	r4,r20
  80b878:	0806f0c0 	call	806f0c <_free_r>
  80b87c:	a009883a 	mov	r4,r20
  80b880:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80b884:	9005883a 	mov	r2,r18
  80b888:	00001206 	br	80b8d4 <_realloc_r+0x170>
  80b88c:	00c00404 	movi	r3,16
  80b890:	1823883a 	mov	r17,r3
  80b894:	003fce06 	br	80b7d0 <__alt_mem_onchip_mem+0xff78b7d0>
  80b898:	a825883a 	mov	r18,r21
  80b89c:	8445c83a 	sub	r2,r16,r17
  80b8a0:	00c003c4 	movi	r3,15
  80b8a4:	18802636 	bltu	r3,r2,80b940 <_realloc_r+0x1dc>
  80b8a8:	99800117 	ldw	r6,4(r19)
  80b8ac:	9c07883a 	add	r3,r19,r16
  80b8b0:	3180004c 	andi	r6,r6,1
  80b8b4:	3420b03a 	or	r16,r6,r16
  80b8b8:	9c000115 	stw	r16,4(r19)
  80b8bc:	18800117 	ldw	r2,4(r3)
  80b8c0:	10800054 	ori	r2,r2,1
  80b8c4:	18800115 	stw	r2,4(r3)
  80b8c8:	a009883a 	mov	r4,r20
  80b8cc:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80b8d0:	9005883a 	mov	r2,r18
  80b8d4:	dfc00917 	ldw	ra,36(sp)
  80b8d8:	df000817 	ldw	fp,32(sp)
  80b8dc:	ddc00717 	ldw	r23,28(sp)
  80b8e0:	dd800617 	ldw	r22,24(sp)
  80b8e4:	dd400517 	ldw	r21,20(sp)
  80b8e8:	dd000417 	ldw	r20,16(sp)
  80b8ec:	dcc00317 	ldw	r19,12(sp)
  80b8f0:	dc800217 	ldw	r18,8(sp)
  80b8f4:	dc400117 	ldw	r17,4(sp)
  80b8f8:	dc000017 	ldw	r16,0(sp)
  80b8fc:	dec00a04 	addi	sp,sp,40
  80b900:	f800283a 	ret
  80b904:	017fff04 	movi	r5,-4
  80b908:	414a703a 	and	r5,r8,r5
  80b90c:	814d883a 	add	r6,r16,r5
  80b910:	30c01f16 	blt	r6,r3,80b990 <_realloc_r+0x22c>
  80b914:	20800317 	ldw	r2,12(r4)
  80b918:	20c00217 	ldw	r3,8(r4)
  80b91c:	a825883a 	mov	r18,r21
  80b920:	3021883a 	mov	r16,r6
  80b924:	18800315 	stw	r2,12(r3)
  80b928:	10c00215 	stw	r3,8(r2)
  80b92c:	003fdb06 	br	80b89c <__alt_mem_onchip_mem+0xff78b89c>
  80b930:	00800304 	movi	r2,12
  80b934:	a0800015 	stw	r2,0(r20)
  80b938:	0005883a 	mov	r2,zero
  80b93c:	003fe506 	br	80b8d4 <__alt_mem_onchip_mem+0xff78b8d4>
  80b940:	98c00117 	ldw	r3,4(r19)
  80b944:	9c4b883a 	add	r5,r19,r17
  80b948:	11000054 	ori	r4,r2,1
  80b94c:	18c0004c 	andi	r3,r3,1
  80b950:	1c62b03a 	or	r17,r3,r17
  80b954:	9c400115 	stw	r17,4(r19)
  80b958:	29000115 	stw	r4,4(r5)
  80b95c:	2885883a 	add	r2,r5,r2
  80b960:	10c00117 	ldw	r3,4(r2)
  80b964:	29400204 	addi	r5,r5,8
  80b968:	a009883a 	mov	r4,r20
  80b96c:	18c00054 	ori	r3,r3,1
  80b970:	10c00115 	stw	r3,4(r2)
  80b974:	0806f0c0 	call	806f0c <_free_r>
  80b978:	003fd306 	br	80b8c8 <__alt_mem_onchip_mem+0xff78b8c8>
  80b97c:	017fff04 	movi	r5,-4
  80b980:	414a703a 	and	r5,r8,r5
  80b984:	89800404 	addi	r6,r17,16
  80b988:	8151883a 	add	r8,r16,r5
  80b98c:	4180590e 	bge	r8,r6,80baf4 <_realloc_r+0x390>
  80b990:	1080004c 	andi	r2,r2,1
  80b994:	103f9e1e 	bne	r2,zero,80b810 <__alt_mem_onchip_mem+0xff78b810>
  80b998:	adbffe17 	ldw	r22,-8(r21)
  80b99c:	00bfff04 	movi	r2,-4
  80b9a0:	9dadc83a 	sub	r22,r19,r22
  80b9a4:	b1800117 	ldw	r6,4(r22)
  80b9a8:	3084703a 	and	r2,r6,r2
  80b9ac:	20002026 	beq	r4,zero,80ba30 <_realloc_r+0x2cc>
  80b9b0:	80af883a 	add	r23,r16,r2
  80b9b4:	b96f883a 	add	r23,r23,r5
  80b9b8:	21c05f26 	beq	r4,r7,80bb38 <_realloc_r+0x3d4>
  80b9bc:	b8c01c16 	blt	r23,r3,80ba30 <_realloc_r+0x2cc>
  80b9c0:	20800317 	ldw	r2,12(r4)
  80b9c4:	20c00217 	ldw	r3,8(r4)
  80b9c8:	81bfff04 	addi	r6,r16,-4
  80b9cc:	01000904 	movi	r4,36
  80b9d0:	18800315 	stw	r2,12(r3)
  80b9d4:	10c00215 	stw	r3,8(r2)
  80b9d8:	b0c00217 	ldw	r3,8(r22)
  80b9dc:	b0800317 	ldw	r2,12(r22)
  80b9e0:	b4800204 	addi	r18,r22,8
  80b9e4:	18800315 	stw	r2,12(r3)
  80b9e8:	10c00215 	stw	r3,8(r2)
  80b9ec:	21801b36 	bltu	r4,r6,80ba5c <_realloc_r+0x2f8>
  80b9f0:	008004c4 	movi	r2,19
  80b9f4:	1180352e 	bgeu	r2,r6,80bacc <_realloc_r+0x368>
  80b9f8:	a8800017 	ldw	r2,0(r21)
  80b9fc:	b0800215 	stw	r2,8(r22)
  80ba00:	a8800117 	ldw	r2,4(r21)
  80ba04:	b0800315 	stw	r2,12(r22)
  80ba08:	008006c4 	movi	r2,27
  80ba0c:	11807f36 	bltu	r2,r6,80bc0c <_realloc_r+0x4a8>
  80ba10:	b0800404 	addi	r2,r22,16
  80ba14:	ad400204 	addi	r21,r21,8
  80ba18:	00002d06 	br	80bad0 <_realloc_r+0x36c>
  80ba1c:	adbffe17 	ldw	r22,-8(r21)
  80ba20:	00bfff04 	movi	r2,-4
  80ba24:	9dadc83a 	sub	r22,r19,r22
  80ba28:	b1000117 	ldw	r4,4(r22)
  80ba2c:	2084703a 	and	r2,r4,r2
  80ba30:	b03f7726 	beq	r22,zero,80b810 <__alt_mem_onchip_mem+0xff78b810>
  80ba34:	80af883a 	add	r23,r16,r2
  80ba38:	b8ff7516 	blt	r23,r3,80b810 <__alt_mem_onchip_mem+0xff78b810>
  80ba3c:	b0800317 	ldw	r2,12(r22)
  80ba40:	b0c00217 	ldw	r3,8(r22)
  80ba44:	81bfff04 	addi	r6,r16,-4
  80ba48:	01000904 	movi	r4,36
  80ba4c:	18800315 	stw	r2,12(r3)
  80ba50:	10c00215 	stw	r3,8(r2)
  80ba54:	b4800204 	addi	r18,r22,8
  80ba58:	21bfe52e 	bgeu	r4,r6,80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80ba5c:	a80b883a 	mov	r5,r21
  80ba60:	9009883a 	mov	r4,r18
  80ba64:	080b5a80 	call	80b5a8 <memmove>
  80ba68:	b821883a 	mov	r16,r23
  80ba6c:	b027883a 	mov	r19,r22
  80ba70:	003f8a06 	br	80b89c <__alt_mem_onchip_mem+0xff78b89c>
  80ba74:	300b883a 	mov	r5,r6
  80ba78:	dfc00917 	ldw	ra,36(sp)
  80ba7c:	df000817 	ldw	fp,32(sp)
  80ba80:	ddc00717 	ldw	r23,28(sp)
  80ba84:	dd800617 	ldw	r22,24(sp)
  80ba88:	dd400517 	ldw	r21,20(sp)
  80ba8c:	dd000417 	ldw	r20,16(sp)
  80ba90:	dcc00317 	ldw	r19,12(sp)
  80ba94:	dc800217 	ldw	r18,8(sp)
  80ba98:	dc400117 	ldw	r17,4(sp)
  80ba9c:	dc000017 	ldw	r16,0(sp)
  80baa0:	dec00a04 	addi	sp,sp,40
  80baa4:	080763c1 	jmpi	80763c <_malloc_r>
  80baa8:	a8c00017 	ldw	r3,0(r21)
  80baac:	90c00015 	stw	r3,0(r18)
  80bab0:	a8c00117 	ldw	r3,4(r21)
  80bab4:	90c00115 	stw	r3,4(r18)
  80bab8:	00c006c4 	movi	r3,27
  80babc:	19804536 	bltu	r3,r6,80bbd4 <_realloc_r+0x470>
  80bac0:	90800204 	addi	r2,r18,8
  80bac4:	a8c00204 	addi	r3,r21,8
  80bac8:	003f6306 	br	80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bacc:	9005883a 	mov	r2,r18
  80bad0:	a8c00017 	ldw	r3,0(r21)
  80bad4:	b821883a 	mov	r16,r23
  80bad8:	b027883a 	mov	r19,r22
  80badc:	10c00015 	stw	r3,0(r2)
  80bae0:	a8c00117 	ldw	r3,4(r21)
  80bae4:	10c00115 	stw	r3,4(r2)
  80bae8:	a8c00217 	ldw	r3,8(r21)
  80baec:	10c00215 	stw	r3,8(r2)
  80baf0:	003f6a06 	br	80b89c <__alt_mem_onchip_mem+0xff78b89c>
  80baf4:	9c67883a 	add	r19,r19,r17
  80baf8:	4445c83a 	sub	r2,r8,r17
  80bafc:	e4c00215 	stw	r19,8(fp)
  80bb00:	10800054 	ori	r2,r2,1
  80bb04:	98800115 	stw	r2,4(r19)
  80bb08:	a8bfff17 	ldw	r2,-4(r21)
  80bb0c:	a009883a 	mov	r4,r20
  80bb10:	1080004c 	andi	r2,r2,1
  80bb14:	1462b03a 	or	r17,r2,r17
  80bb18:	ac7fff15 	stw	r17,-4(r21)
  80bb1c:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80bb20:	a805883a 	mov	r2,r21
  80bb24:	003f6b06 	br	80b8d4 <__alt_mem_onchip_mem+0xff78b8d4>
  80bb28:	a80b883a 	mov	r5,r21
  80bb2c:	9009883a 	mov	r4,r18
  80bb30:	080b5a80 	call	80b5a8 <memmove>
  80bb34:	003f4e06 	br	80b870 <__alt_mem_onchip_mem+0xff78b870>
  80bb38:	89000404 	addi	r4,r17,16
  80bb3c:	b93fbc16 	blt	r23,r4,80ba30 <__alt_mem_onchip_mem+0xff78ba30>
  80bb40:	b0800317 	ldw	r2,12(r22)
  80bb44:	b0c00217 	ldw	r3,8(r22)
  80bb48:	81bfff04 	addi	r6,r16,-4
  80bb4c:	01000904 	movi	r4,36
  80bb50:	18800315 	stw	r2,12(r3)
  80bb54:	10c00215 	stw	r3,8(r2)
  80bb58:	b4800204 	addi	r18,r22,8
  80bb5c:	21804336 	bltu	r4,r6,80bc6c <_realloc_r+0x508>
  80bb60:	008004c4 	movi	r2,19
  80bb64:	11803f2e 	bgeu	r2,r6,80bc64 <_realloc_r+0x500>
  80bb68:	a8800017 	ldw	r2,0(r21)
  80bb6c:	b0800215 	stw	r2,8(r22)
  80bb70:	a8800117 	ldw	r2,4(r21)
  80bb74:	b0800315 	stw	r2,12(r22)
  80bb78:	008006c4 	movi	r2,27
  80bb7c:	11803f36 	bltu	r2,r6,80bc7c <_realloc_r+0x518>
  80bb80:	b0800404 	addi	r2,r22,16
  80bb84:	ad400204 	addi	r21,r21,8
  80bb88:	a8c00017 	ldw	r3,0(r21)
  80bb8c:	10c00015 	stw	r3,0(r2)
  80bb90:	a8c00117 	ldw	r3,4(r21)
  80bb94:	10c00115 	stw	r3,4(r2)
  80bb98:	a8c00217 	ldw	r3,8(r21)
  80bb9c:	10c00215 	stw	r3,8(r2)
  80bba0:	b447883a 	add	r3,r22,r17
  80bba4:	bc45c83a 	sub	r2,r23,r17
  80bba8:	e0c00215 	stw	r3,8(fp)
  80bbac:	10800054 	ori	r2,r2,1
  80bbb0:	18800115 	stw	r2,4(r3)
  80bbb4:	b0800117 	ldw	r2,4(r22)
  80bbb8:	a009883a 	mov	r4,r20
  80bbbc:	1080004c 	andi	r2,r2,1
  80bbc0:	1462b03a 	or	r17,r2,r17
  80bbc4:	b4400115 	stw	r17,4(r22)
  80bbc8:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80bbcc:	9005883a 	mov	r2,r18
  80bbd0:	003f4006 	br	80b8d4 <__alt_mem_onchip_mem+0xff78b8d4>
  80bbd4:	a8c00217 	ldw	r3,8(r21)
  80bbd8:	90c00215 	stw	r3,8(r18)
  80bbdc:	a8c00317 	ldw	r3,12(r21)
  80bbe0:	90c00315 	stw	r3,12(r18)
  80bbe4:	30801126 	beq	r6,r2,80bc2c <_realloc_r+0x4c8>
  80bbe8:	90800404 	addi	r2,r18,16
  80bbec:	a8c00404 	addi	r3,r21,16
  80bbf0:	003f1906 	br	80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bbf4:	90ffff17 	ldw	r3,-4(r18)
  80bbf8:	00bfff04 	movi	r2,-4
  80bbfc:	a825883a 	mov	r18,r21
  80bc00:	1884703a 	and	r2,r3,r2
  80bc04:	80a1883a 	add	r16,r16,r2
  80bc08:	003f2406 	br	80b89c <__alt_mem_onchip_mem+0xff78b89c>
  80bc0c:	a8800217 	ldw	r2,8(r21)
  80bc10:	b0800415 	stw	r2,16(r22)
  80bc14:	a8800317 	ldw	r2,12(r21)
  80bc18:	b0800515 	stw	r2,20(r22)
  80bc1c:	31000a26 	beq	r6,r4,80bc48 <_realloc_r+0x4e4>
  80bc20:	b0800604 	addi	r2,r22,24
  80bc24:	ad400404 	addi	r21,r21,16
  80bc28:	003fa906 	br	80bad0 <__alt_mem_onchip_mem+0xff78bad0>
  80bc2c:	a9000417 	ldw	r4,16(r21)
  80bc30:	90800604 	addi	r2,r18,24
  80bc34:	a8c00604 	addi	r3,r21,24
  80bc38:	91000415 	stw	r4,16(r18)
  80bc3c:	a9000517 	ldw	r4,20(r21)
  80bc40:	91000515 	stw	r4,20(r18)
  80bc44:	003f0406 	br	80b858 <__alt_mem_onchip_mem+0xff78b858>
  80bc48:	a8c00417 	ldw	r3,16(r21)
  80bc4c:	ad400604 	addi	r21,r21,24
  80bc50:	b0800804 	addi	r2,r22,32
  80bc54:	b0c00615 	stw	r3,24(r22)
  80bc58:	a8ffff17 	ldw	r3,-4(r21)
  80bc5c:	b0c00715 	stw	r3,28(r22)
  80bc60:	003f9b06 	br	80bad0 <__alt_mem_onchip_mem+0xff78bad0>
  80bc64:	9005883a 	mov	r2,r18
  80bc68:	003fc706 	br	80bb88 <__alt_mem_onchip_mem+0xff78bb88>
  80bc6c:	a80b883a 	mov	r5,r21
  80bc70:	9009883a 	mov	r4,r18
  80bc74:	080b5a80 	call	80b5a8 <memmove>
  80bc78:	003fc906 	br	80bba0 <__alt_mem_onchip_mem+0xff78bba0>
  80bc7c:	a8800217 	ldw	r2,8(r21)
  80bc80:	b0800415 	stw	r2,16(r22)
  80bc84:	a8800317 	ldw	r2,12(r21)
  80bc88:	b0800515 	stw	r2,20(r22)
  80bc8c:	31000726 	beq	r6,r4,80bcac <_realloc_r+0x548>
  80bc90:	b0800604 	addi	r2,r22,24
  80bc94:	ad400404 	addi	r21,r21,16
  80bc98:	003fbb06 	br	80bb88 <__alt_mem_onchip_mem+0xff78bb88>
  80bc9c:	a009883a 	mov	r4,r20
  80bca0:	080f9a00 	call	80f9a0 <__malloc_unlock>
  80bca4:	0005883a 	mov	r2,zero
  80bca8:	003f0a06 	br	80b8d4 <__alt_mem_onchip_mem+0xff78b8d4>
  80bcac:	a8c00417 	ldw	r3,16(r21)
  80bcb0:	ad400604 	addi	r21,r21,24
  80bcb4:	b0800804 	addi	r2,r22,32
  80bcb8:	b0c00615 	stw	r3,24(r22)
  80bcbc:	a8ffff17 	ldw	r3,-4(r21)
  80bcc0:	b0c00715 	stw	r3,28(r22)
  80bcc4:	003fb006 	br	80bb88 <__alt_mem_onchip_mem+0xff78bb88>

0080bcc8 <__swbuf_r>:
  80bcc8:	defffb04 	addi	sp,sp,-20
  80bccc:	dcc00315 	stw	r19,12(sp)
  80bcd0:	dc800215 	stw	r18,8(sp)
  80bcd4:	dc000015 	stw	r16,0(sp)
  80bcd8:	dfc00415 	stw	ra,16(sp)
  80bcdc:	dc400115 	stw	r17,4(sp)
  80bce0:	2025883a 	mov	r18,r4
  80bce4:	2827883a 	mov	r19,r5
  80bce8:	3021883a 	mov	r16,r6
  80bcec:	20000226 	beq	r4,zero,80bcf8 <__swbuf_r+0x30>
  80bcf0:	20800e17 	ldw	r2,56(r4)
  80bcf4:	10004226 	beq	r2,zero,80be00 <__swbuf_r+0x138>
  80bcf8:	80800617 	ldw	r2,24(r16)
  80bcfc:	8100030b 	ldhu	r4,12(r16)
  80bd00:	80800215 	stw	r2,8(r16)
  80bd04:	2080020c 	andi	r2,r4,8
  80bd08:	10003626 	beq	r2,zero,80bde4 <__swbuf_r+0x11c>
  80bd0c:	80c00417 	ldw	r3,16(r16)
  80bd10:	18003426 	beq	r3,zero,80bde4 <__swbuf_r+0x11c>
  80bd14:	2088000c 	andi	r2,r4,8192
  80bd18:	9c403fcc 	andi	r17,r19,255
  80bd1c:	10001a26 	beq	r2,zero,80bd88 <__swbuf_r+0xc0>
  80bd20:	80800017 	ldw	r2,0(r16)
  80bd24:	81000517 	ldw	r4,20(r16)
  80bd28:	10c7c83a 	sub	r3,r2,r3
  80bd2c:	1900200e 	bge	r3,r4,80bdb0 <__swbuf_r+0xe8>
  80bd30:	18c00044 	addi	r3,r3,1
  80bd34:	81000217 	ldw	r4,8(r16)
  80bd38:	11400044 	addi	r5,r2,1
  80bd3c:	81400015 	stw	r5,0(r16)
  80bd40:	213fffc4 	addi	r4,r4,-1
  80bd44:	81000215 	stw	r4,8(r16)
  80bd48:	14c00005 	stb	r19,0(r2)
  80bd4c:	80800517 	ldw	r2,20(r16)
  80bd50:	10c01e26 	beq	r2,r3,80bdcc <__swbuf_r+0x104>
  80bd54:	8080030b 	ldhu	r2,12(r16)
  80bd58:	1080004c 	andi	r2,r2,1
  80bd5c:	10000226 	beq	r2,zero,80bd68 <__swbuf_r+0xa0>
  80bd60:	00800284 	movi	r2,10
  80bd64:	88801926 	beq	r17,r2,80bdcc <__swbuf_r+0x104>
  80bd68:	8805883a 	mov	r2,r17
  80bd6c:	dfc00417 	ldw	ra,16(sp)
  80bd70:	dcc00317 	ldw	r19,12(sp)
  80bd74:	dc800217 	ldw	r18,8(sp)
  80bd78:	dc400117 	ldw	r17,4(sp)
  80bd7c:	dc000017 	ldw	r16,0(sp)
  80bd80:	dec00504 	addi	sp,sp,20
  80bd84:	f800283a 	ret
  80bd88:	81401917 	ldw	r5,100(r16)
  80bd8c:	00b7ffc4 	movi	r2,-8193
  80bd90:	21080014 	ori	r4,r4,8192
  80bd94:	2884703a 	and	r2,r5,r2
  80bd98:	80801915 	stw	r2,100(r16)
  80bd9c:	80800017 	ldw	r2,0(r16)
  80bda0:	8100030d 	sth	r4,12(r16)
  80bda4:	81000517 	ldw	r4,20(r16)
  80bda8:	10c7c83a 	sub	r3,r2,r3
  80bdac:	193fe016 	blt	r3,r4,80bd30 <__alt_mem_onchip_mem+0xff78bd30>
  80bdb0:	800b883a 	mov	r5,r16
  80bdb4:	9009883a 	mov	r4,r18
  80bdb8:	08069bc0 	call	8069bc <_fflush_r>
  80bdbc:	1000071e 	bne	r2,zero,80bddc <__swbuf_r+0x114>
  80bdc0:	80800017 	ldw	r2,0(r16)
  80bdc4:	00c00044 	movi	r3,1
  80bdc8:	003fda06 	br	80bd34 <__alt_mem_onchip_mem+0xff78bd34>
  80bdcc:	800b883a 	mov	r5,r16
  80bdd0:	9009883a 	mov	r4,r18
  80bdd4:	08069bc0 	call	8069bc <_fflush_r>
  80bdd8:	103fe326 	beq	r2,zero,80bd68 <__alt_mem_onchip_mem+0xff78bd68>
  80bddc:	00bfffc4 	movi	r2,-1
  80bde0:	003fe206 	br	80bd6c <__alt_mem_onchip_mem+0xff78bd6c>
  80bde4:	800b883a 	mov	r5,r16
  80bde8:	9009883a 	mov	r4,r18
  80bdec:	0804dc40 	call	804dc4 <__swsetup_r>
  80bdf0:	103ffa1e 	bne	r2,zero,80bddc <__alt_mem_onchip_mem+0xff78bddc>
  80bdf4:	8100030b 	ldhu	r4,12(r16)
  80bdf8:	80c00417 	ldw	r3,16(r16)
  80bdfc:	003fc506 	br	80bd14 <__alt_mem_onchip_mem+0xff78bd14>
  80be00:	0806d980 	call	806d98 <__sinit>
  80be04:	003fbc06 	br	80bcf8 <__alt_mem_onchip_mem+0xff78bcf8>

0080be08 <__swbuf>:
  80be08:	00802074 	movhi	r2,129
  80be0c:	10959e04 	addi	r2,r2,22136
  80be10:	280d883a 	mov	r6,r5
  80be14:	200b883a 	mov	r5,r4
  80be18:	11000017 	ldw	r4,0(r2)
  80be1c:	080bcc81 	jmpi	80bcc8 <__swbuf_r>

0080be20 <_wcrtomb_r>:
  80be20:	defff604 	addi	sp,sp,-40
  80be24:	00802074 	movhi	r2,129
  80be28:	dc800815 	stw	r18,32(sp)
  80be2c:	dc400715 	stw	r17,28(sp)
  80be30:	dc000615 	stw	r16,24(sp)
  80be34:	1095a204 	addi	r2,r2,22152
  80be38:	dfc00915 	stw	ra,36(sp)
  80be3c:	2021883a 	mov	r16,r4
  80be40:	3823883a 	mov	r17,r7
  80be44:	14800017 	ldw	r18,0(r2)
  80be48:	28001426 	beq	r5,zero,80be9c <_wcrtomb_r+0x7c>
  80be4c:	d9400415 	stw	r5,16(sp)
  80be50:	d9800515 	stw	r6,20(sp)
  80be54:	08074200 	call	807420 <__locale_charset>
  80be58:	d9800517 	ldw	r6,20(sp)
  80be5c:	d9400417 	ldw	r5,16(sp)
  80be60:	100f883a 	mov	r7,r2
  80be64:	dc400015 	stw	r17,0(sp)
  80be68:	8009883a 	mov	r4,r16
  80be6c:	903ee83a 	callr	r18
  80be70:	00ffffc4 	movi	r3,-1
  80be74:	10c0031e 	bne	r2,r3,80be84 <_wcrtomb_r+0x64>
  80be78:	88000015 	stw	zero,0(r17)
  80be7c:	00c02284 	movi	r3,138
  80be80:	80c00015 	stw	r3,0(r16)
  80be84:	dfc00917 	ldw	ra,36(sp)
  80be88:	dc800817 	ldw	r18,32(sp)
  80be8c:	dc400717 	ldw	r17,28(sp)
  80be90:	dc000617 	ldw	r16,24(sp)
  80be94:	dec00a04 	addi	sp,sp,40
  80be98:	f800283a 	ret
  80be9c:	08074200 	call	807420 <__locale_charset>
  80bea0:	100f883a 	mov	r7,r2
  80bea4:	dc400015 	stw	r17,0(sp)
  80bea8:	000d883a 	mov	r6,zero
  80beac:	d9400104 	addi	r5,sp,4
  80beb0:	8009883a 	mov	r4,r16
  80beb4:	903ee83a 	callr	r18
  80beb8:	003fed06 	br	80be70 <__alt_mem_onchip_mem+0xff78be70>

0080bebc <wcrtomb>:
  80bebc:	defff604 	addi	sp,sp,-40
  80bec0:	00802074 	movhi	r2,129
  80bec4:	dc800615 	stw	r18,24(sp)
  80bec8:	dc400515 	stw	r17,20(sp)
  80becc:	10959e04 	addi	r2,r2,22136
  80bed0:	dfc00915 	stw	ra,36(sp)
  80bed4:	dd000815 	stw	r20,32(sp)
  80bed8:	dcc00715 	stw	r19,28(sp)
  80bedc:	dc000415 	stw	r16,16(sp)
  80bee0:	3025883a 	mov	r18,r6
  80bee4:	14400017 	ldw	r17,0(r2)
  80bee8:	20001926 	beq	r4,zero,80bf50 <wcrtomb+0x94>
  80beec:	00802074 	movhi	r2,129
  80bef0:	1095a204 	addi	r2,r2,22152
  80bef4:	15000017 	ldw	r20,0(r2)
  80bef8:	2021883a 	mov	r16,r4
  80befc:	2827883a 	mov	r19,r5
  80bf00:	08074200 	call	807420 <__locale_charset>
  80bf04:	100f883a 	mov	r7,r2
  80bf08:	dc800015 	stw	r18,0(sp)
  80bf0c:	980d883a 	mov	r6,r19
  80bf10:	800b883a 	mov	r5,r16
  80bf14:	8809883a 	mov	r4,r17
  80bf18:	a03ee83a 	callr	r20
  80bf1c:	00ffffc4 	movi	r3,-1
  80bf20:	10c0031e 	bne	r2,r3,80bf30 <wcrtomb+0x74>
  80bf24:	90000015 	stw	zero,0(r18)
  80bf28:	00c02284 	movi	r3,138
  80bf2c:	88c00015 	stw	r3,0(r17)
  80bf30:	dfc00917 	ldw	ra,36(sp)
  80bf34:	dd000817 	ldw	r20,32(sp)
  80bf38:	dcc00717 	ldw	r19,28(sp)
  80bf3c:	dc800617 	ldw	r18,24(sp)
  80bf40:	dc400517 	ldw	r17,20(sp)
  80bf44:	dc000417 	ldw	r16,16(sp)
  80bf48:	dec00a04 	addi	sp,sp,40
  80bf4c:	f800283a 	ret
  80bf50:	00802074 	movhi	r2,129
  80bf54:	1095a204 	addi	r2,r2,22152
  80bf58:	14000017 	ldw	r16,0(r2)
  80bf5c:	08074200 	call	807420 <__locale_charset>
  80bf60:	100f883a 	mov	r7,r2
  80bf64:	dc800015 	stw	r18,0(sp)
  80bf68:	000d883a 	mov	r6,zero
  80bf6c:	d9400104 	addi	r5,sp,4
  80bf70:	8809883a 	mov	r4,r17
  80bf74:	803ee83a 	callr	r16
  80bf78:	003fe806 	br	80bf1c <__alt_mem_onchip_mem+0xff78bf1c>

0080bf7c <__ascii_wctomb>:
  80bf7c:	28000526 	beq	r5,zero,80bf94 <__ascii_wctomb+0x18>
  80bf80:	00803fc4 	movi	r2,255
  80bf84:	11800536 	bltu	r2,r6,80bf9c <__ascii_wctomb+0x20>
  80bf88:	29800005 	stb	r6,0(r5)
  80bf8c:	00800044 	movi	r2,1
  80bf90:	f800283a 	ret
  80bf94:	0005883a 	mov	r2,zero
  80bf98:	f800283a 	ret
  80bf9c:	00802284 	movi	r2,138
  80bfa0:	20800015 	stw	r2,0(r4)
  80bfa4:	00bfffc4 	movi	r2,-1
  80bfa8:	f800283a 	ret

0080bfac <_wctomb_r>:
  80bfac:	00802074 	movhi	r2,129
  80bfb0:	defff904 	addi	sp,sp,-28
  80bfb4:	1095a204 	addi	r2,r2,22152
  80bfb8:	dfc00615 	stw	ra,24(sp)
  80bfbc:	dc400515 	stw	r17,20(sp)
  80bfc0:	dc000415 	stw	r16,16(sp)
  80bfc4:	3823883a 	mov	r17,r7
  80bfc8:	14000017 	ldw	r16,0(r2)
  80bfcc:	d9000115 	stw	r4,4(sp)
  80bfd0:	d9400215 	stw	r5,8(sp)
  80bfd4:	d9800315 	stw	r6,12(sp)
  80bfd8:	08074200 	call	807420 <__locale_charset>
  80bfdc:	d9800317 	ldw	r6,12(sp)
  80bfe0:	d9400217 	ldw	r5,8(sp)
  80bfe4:	d9000117 	ldw	r4,4(sp)
  80bfe8:	100f883a 	mov	r7,r2
  80bfec:	dc400015 	stw	r17,0(sp)
  80bff0:	803ee83a 	callr	r16
  80bff4:	dfc00617 	ldw	ra,24(sp)
  80bff8:	dc400517 	ldw	r17,20(sp)
  80bffc:	dc000417 	ldw	r16,16(sp)
  80c000:	dec00704 	addi	sp,sp,28
  80c004:	f800283a 	ret

0080c008 <__udivdi3>:
  80c008:	defff504 	addi	sp,sp,-44
  80c00c:	dcc00415 	stw	r19,16(sp)
  80c010:	dc000115 	stw	r16,4(sp)
  80c014:	dfc00a15 	stw	ra,40(sp)
  80c018:	df000915 	stw	fp,36(sp)
  80c01c:	ddc00815 	stw	r23,32(sp)
  80c020:	dd800715 	stw	r22,28(sp)
  80c024:	dd400615 	stw	r21,24(sp)
  80c028:	dd000515 	stw	r20,20(sp)
  80c02c:	dc800315 	stw	r18,12(sp)
  80c030:	dc400215 	stw	r17,8(sp)
  80c034:	2027883a 	mov	r19,r4
  80c038:	2821883a 	mov	r16,r5
  80c03c:	3800411e 	bne	r7,zero,80c144 <__udivdi3+0x13c>
  80c040:	3023883a 	mov	r17,r6
  80c044:	2025883a 	mov	r18,r4
  80c048:	2980522e 	bgeu	r5,r6,80c194 <__udivdi3+0x18c>
  80c04c:	00bfffd4 	movui	r2,65535
  80c050:	282d883a 	mov	r22,r5
  80c054:	1180a836 	bltu	r2,r6,80c2f8 <__udivdi3+0x2f0>
  80c058:	00803fc4 	movi	r2,255
  80c05c:	1185803a 	cmpltu	r2,r2,r6
  80c060:	100490fa 	slli	r2,r2,3
  80c064:	3086d83a 	srl	r3,r6,r2
  80c068:	01002074 	movhi	r4,129
  80c06c:	210d8804 	addi	r4,r4,13856
  80c070:	20c7883a 	add	r3,r4,r3
  80c074:	18c00003 	ldbu	r3,0(r3)
  80c078:	1885883a 	add	r2,r3,r2
  80c07c:	00c00804 	movi	r3,32
  80c080:	1887c83a 	sub	r3,r3,r2
  80c084:	18000526 	beq	r3,zero,80c09c <__udivdi3+0x94>
  80c088:	80e0983a 	sll	r16,r16,r3
  80c08c:	9884d83a 	srl	r2,r19,r2
  80c090:	30e2983a 	sll	r17,r6,r3
  80c094:	98e4983a 	sll	r18,r19,r3
  80c098:	142cb03a 	or	r22,r2,r16
  80c09c:	882ad43a 	srli	r21,r17,16
  80c0a0:	b009883a 	mov	r4,r22
  80c0a4:	8d3fffcc 	andi	r20,r17,65535
  80c0a8:	a80b883a 	mov	r5,r21
  80c0ac:	080cc140 	call	80cc14 <__umodsi3>
  80c0b0:	b009883a 	mov	r4,r22
  80c0b4:	a80b883a 	mov	r5,r21
  80c0b8:	1027883a 	mov	r19,r2
  80c0bc:	080cbb00 	call	80cbb0 <__udivsi3>
  80c0c0:	102d883a 	mov	r22,r2
  80c0c4:	9826943a 	slli	r19,r19,16
  80c0c8:	9004d43a 	srli	r2,r18,16
  80c0cc:	a5a1383a 	mul	r16,r20,r22
  80c0d0:	14c4b03a 	or	r2,r2,r19
  80c0d4:	1400052e 	bgeu	r2,r16,80c0ec <__udivdi3+0xe4>
  80c0d8:	1445883a 	add	r2,r2,r17
  80c0dc:	b0ffffc4 	addi	r3,r22,-1
  80c0e0:	14400136 	bltu	r2,r17,80c0e8 <__udivdi3+0xe0>
  80c0e4:	14012336 	bltu	r2,r16,80c574 <__udivdi3+0x56c>
  80c0e8:	182d883a 	mov	r22,r3
  80c0ec:	1421c83a 	sub	r16,r2,r16
  80c0f0:	a80b883a 	mov	r5,r21
  80c0f4:	8009883a 	mov	r4,r16
  80c0f8:	080cc140 	call	80cc14 <__umodsi3>
  80c0fc:	1027883a 	mov	r19,r2
  80c100:	a80b883a 	mov	r5,r21
  80c104:	8009883a 	mov	r4,r16
  80c108:	080cbb00 	call	80cbb0 <__udivsi3>
  80c10c:	9826943a 	slli	r19,r19,16
  80c110:	a0a9383a 	mul	r20,r20,r2
  80c114:	94bfffcc 	andi	r18,r18,65535
  80c118:	94e4b03a 	or	r18,r18,r19
  80c11c:	9500052e 	bgeu	r18,r20,80c134 <__udivdi3+0x12c>
  80c120:	8ca5883a 	add	r18,r17,r18
  80c124:	10ffffc4 	addi	r3,r2,-1
  80c128:	9440f136 	bltu	r18,r17,80c4f0 <__udivdi3+0x4e8>
  80c12c:	9500f02e 	bgeu	r18,r20,80c4f0 <__udivdi3+0x4e8>
  80c130:	10bfff84 	addi	r2,r2,-2
  80c134:	b00c943a 	slli	r6,r22,16
  80c138:	0007883a 	mov	r3,zero
  80c13c:	3084b03a 	or	r2,r6,r2
  80c140:	00005906 	br	80c2a8 <__udivdi3+0x2a0>
  80c144:	29c05636 	bltu	r5,r7,80c2a0 <__udivdi3+0x298>
  80c148:	00bfffd4 	movui	r2,65535
  80c14c:	11c0622e 	bgeu	r2,r7,80c2d8 <__udivdi3+0x2d0>
  80c150:	00804034 	movhi	r2,256
  80c154:	10bfffc4 	addi	r2,r2,-1
  80c158:	11c0ee36 	bltu	r2,r7,80c514 <__udivdi3+0x50c>
  80c15c:	00800404 	movi	r2,16
  80c160:	3886d83a 	srl	r3,r7,r2
  80c164:	01002074 	movhi	r4,129
  80c168:	210d8804 	addi	r4,r4,13856
  80c16c:	20c7883a 	add	r3,r4,r3
  80c170:	18c00003 	ldbu	r3,0(r3)
  80c174:	05400804 	movi	r21,32
  80c178:	1885883a 	add	r2,r3,r2
  80c17c:	a8abc83a 	sub	r21,r21,r2
  80c180:	a800621e 	bne	r21,zero,80c30c <__udivdi3+0x304>
  80c184:	3c00e936 	bltu	r7,r16,80c52c <__udivdi3+0x524>
  80c188:	9985403a 	cmpgeu	r2,r19,r6
  80c18c:	0007883a 	mov	r3,zero
  80c190:	00004506 	br	80c2a8 <__udivdi3+0x2a0>
  80c194:	3000041e 	bne	r6,zero,80c1a8 <__udivdi3+0x1a0>
  80c198:	000b883a 	mov	r5,zero
  80c19c:	01000044 	movi	r4,1
  80c1a0:	080cbb00 	call	80cbb0 <__udivsi3>
  80c1a4:	1023883a 	mov	r17,r2
  80c1a8:	00bfffd4 	movui	r2,65535
  80c1ac:	14404e2e 	bgeu	r2,r17,80c2e8 <__udivdi3+0x2e0>
  80c1b0:	00804034 	movhi	r2,256
  80c1b4:	10bfffc4 	addi	r2,r2,-1
  80c1b8:	1440d836 	bltu	r2,r17,80c51c <__udivdi3+0x514>
  80c1bc:	00800404 	movi	r2,16
  80c1c0:	8886d83a 	srl	r3,r17,r2
  80c1c4:	01002074 	movhi	r4,129
  80c1c8:	210d8804 	addi	r4,r4,13856
  80c1cc:	20c7883a 	add	r3,r4,r3
  80c1d0:	18c00003 	ldbu	r3,0(r3)
  80c1d4:	1885883a 	add	r2,r3,r2
  80c1d8:	00c00804 	movi	r3,32
  80c1dc:	1887c83a 	sub	r3,r3,r2
  80c1e0:	18008f1e 	bne	r3,zero,80c420 <__udivdi3+0x418>
  80c1e4:	882ad43a 	srli	r21,r17,16
  80c1e8:	8461c83a 	sub	r16,r16,r17
  80c1ec:	8d3fffcc 	andi	r20,r17,65535
  80c1f0:	00c00044 	movi	r3,1
  80c1f4:	8009883a 	mov	r4,r16
  80c1f8:	a80b883a 	mov	r5,r21
  80c1fc:	d8c00015 	stw	r3,0(sp)
  80c200:	080cc140 	call	80cc14 <__umodsi3>
  80c204:	8009883a 	mov	r4,r16
  80c208:	a80b883a 	mov	r5,r21
  80c20c:	1027883a 	mov	r19,r2
  80c210:	080cbb00 	call	80cbb0 <__udivsi3>
  80c214:	9826943a 	slli	r19,r19,16
  80c218:	9008d43a 	srli	r4,r18,16
  80c21c:	1521383a 	mul	r16,r2,r20
  80c220:	102d883a 	mov	r22,r2
  80c224:	24c8b03a 	or	r4,r4,r19
  80c228:	d8c00017 	ldw	r3,0(sp)
  80c22c:	2400052e 	bgeu	r4,r16,80c244 <__udivdi3+0x23c>
  80c230:	2449883a 	add	r4,r4,r17
  80c234:	b0bfffc4 	addi	r2,r22,-1
  80c238:	24400136 	bltu	r4,r17,80c240 <__udivdi3+0x238>
  80c23c:	2400ca36 	bltu	r4,r16,80c568 <__udivdi3+0x560>
  80c240:	102d883a 	mov	r22,r2
  80c244:	2421c83a 	sub	r16,r4,r16
  80c248:	a80b883a 	mov	r5,r21
  80c24c:	8009883a 	mov	r4,r16
  80c250:	d8c00015 	stw	r3,0(sp)
  80c254:	080cc140 	call	80cc14 <__umodsi3>
  80c258:	1027883a 	mov	r19,r2
  80c25c:	a80b883a 	mov	r5,r21
  80c260:	8009883a 	mov	r4,r16
  80c264:	080cbb00 	call	80cbb0 <__udivsi3>
  80c268:	9826943a 	slli	r19,r19,16
  80c26c:	1529383a 	mul	r20,r2,r20
  80c270:	94bfffcc 	andi	r18,r18,65535
  80c274:	94e4b03a 	or	r18,r18,r19
  80c278:	d8c00017 	ldw	r3,0(sp)
  80c27c:	9500052e 	bgeu	r18,r20,80c294 <__udivdi3+0x28c>
  80c280:	8ca5883a 	add	r18,r17,r18
  80c284:	113fffc4 	addi	r4,r2,-1
  80c288:	94409736 	bltu	r18,r17,80c4e8 <__udivdi3+0x4e0>
  80c28c:	9500962e 	bgeu	r18,r20,80c4e8 <__udivdi3+0x4e0>
  80c290:	10bfff84 	addi	r2,r2,-2
  80c294:	b00c943a 	slli	r6,r22,16
  80c298:	3084b03a 	or	r2,r6,r2
  80c29c:	00000206 	br	80c2a8 <__udivdi3+0x2a0>
  80c2a0:	0007883a 	mov	r3,zero
  80c2a4:	0005883a 	mov	r2,zero
  80c2a8:	dfc00a17 	ldw	ra,40(sp)
  80c2ac:	df000917 	ldw	fp,36(sp)
  80c2b0:	ddc00817 	ldw	r23,32(sp)
  80c2b4:	dd800717 	ldw	r22,28(sp)
  80c2b8:	dd400617 	ldw	r21,24(sp)
  80c2bc:	dd000517 	ldw	r20,20(sp)
  80c2c0:	dcc00417 	ldw	r19,16(sp)
  80c2c4:	dc800317 	ldw	r18,12(sp)
  80c2c8:	dc400217 	ldw	r17,8(sp)
  80c2cc:	dc000117 	ldw	r16,4(sp)
  80c2d0:	dec00b04 	addi	sp,sp,44
  80c2d4:	f800283a 	ret
  80c2d8:	00803fc4 	movi	r2,255
  80c2dc:	11c5803a 	cmpltu	r2,r2,r7
  80c2e0:	100490fa 	slli	r2,r2,3
  80c2e4:	003f9e06 	br	80c160 <__alt_mem_onchip_mem+0xff78c160>
  80c2e8:	00803fc4 	movi	r2,255
  80c2ec:	1445803a 	cmpltu	r2,r2,r17
  80c2f0:	100490fa 	slli	r2,r2,3
  80c2f4:	003fb206 	br	80c1c0 <__alt_mem_onchip_mem+0xff78c1c0>
  80c2f8:	00804034 	movhi	r2,256
  80c2fc:	10bfffc4 	addi	r2,r2,-1
  80c300:	11808836 	bltu	r2,r6,80c524 <__udivdi3+0x51c>
  80c304:	00800404 	movi	r2,16
  80c308:	003f5606 	br	80c064 <__alt_mem_onchip_mem+0xff78c064>
  80c30c:	30aed83a 	srl	r23,r6,r2
  80c310:	3d4e983a 	sll	r7,r7,r21
  80c314:	80acd83a 	srl	r22,r16,r2
  80c318:	9884d83a 	srl	r2,r19,r2
  80c31c:	3deeb03a 	or	r23,r7,r23
  80c320:	b824d43a 	srli	r18,r23,16
  80c324:	8560983a 	sll	r16,r16,r21
  80c328:	b009883a 	mov	r4,r22
  80c32c:	900b883a 	mov	r5,r18
  80c330:	3568983a 	sll	r20,r6,r21
  80c334:	1420b03a 	or	r16,r2,r16
  80c338:	080cc140 	call	80cc14 <__umodsi3>
  80c33c:	b009883a 	mov	r4,r22
  80c340:	900b883a 	mov	r5,r18
  80c344:	1023883a 	mov	r17,r2
  80c348:	080cbb00 	call	80cbb0 <__udivsi3>
  80c34c:	8808943a 	slli	r4,r17,16
  80c350:	bf3fffcc 	andi	fp,r23,65535
  80c354:	8006d43a 	srli	r3,r16,16
  80c358:	e0a3383a 	mul	r17,fp,r2
  80c35c:	100d883a 	mov	r6,r2
  80c360:	1906b03a 	or	r3,r3,r4
  80c364:	1c40042e 	bgeu	r3,r17,80c378 <__udivdi3+0x370>
  80c368:	1dc7883a 	add	r3,r3,r23
  80c36c:	10bfffc4 	addi	r2,r2,-1
  80c370:	1dc0752e 	bgeu	r3,r23,80c548 <__udivdi3+0x540>
  80c374:	100d883a 	mov	r6,r2
  80c378:	1c63c83a 	sub	r17,r3,r17
  80c37c:	900b883a 	mov	r5,r18
  80c380:	8809883a 	mov	r4,r17
  80c384:	d9800015 	stw	r6,0(sp)
  80c388:	080cc140 	call	80cc14 <__umodsi3>
  80c38c:	102d883a 	mov	r22,r2
  80c390:	8809883a 	mov	r4,r17
  80c394:	900b883a 	mov	r5,r18
  80c398:	080cbb00 	call	80cbb0 <__udivsi3>
  80c39c:	b02c943a 	slli	r22,r22,16
  80c3a0:	e089383a 	mul	r4,fp,r2
  80c3a4:	843fffcc 	andi	r16,r16,65535
  80c3a8:	85a0b03a 	or	r16,r16,r22
  80c3ac:	d9800017 	ldw	r6,0(sp)
  80c3b0:	8100042e 	bgeu	r16,r4,80c3c4 <__udivdi3+0x3bc>
  80c3b4:	85e1883a 	add	r16,r16,r23
  80c3b8:	10ffffc4 	addi	r3,r2,-1
  80c3bc:	85c05e2e 	bgeu	r16,r23,80c538 <__udivdi3+0x530>
  80c3c0:	1805883a 	mov	r2,r3
  80c3c4:	300c943a 	slli	r6,r6,16
  80c3c8:	a17fffcc 	andi	r5,r20,65535
  80c3cc:	a028d43a 	srli	r20,r20,16
  80c3d0:	3084b03a 	or	r2,r6,r2
  80c3d4:	10ffffcc 	andi	r3,r2,65535
  80c3d8:	100cd43a 	srli	r6,r2,16
  80c3dc:	194f383a 	mul	r7,r3,r5
  80c3e0:	1d07383a 	mul	r3,r3,r20
  80c3e4:	314b383a 	mul	r5,r6,r5
  80c3e8:	3810d43a 	srli	r8,r7,16
  80c3ec:	8121c83a 	sub	r16,r16,r4
  80c3f0:	1947883a 	add	r3,r3,r5
  80c3f4:	40c7883a 	add	r3,r8,r3
  80c3f8:	350d383a 	mul	r6,r6,r20
  80c3fc:	1940022e 	bgeu	r3,r5,80c408 <__udivdi3+0x400>
  80c400:	01000074 	movhi	r4,1
  80c404:	310d883a 	add	r6,r6,r4
  80c408:	1828d43a 	srli	r20,r3,16
  80c40c:	a18d883a 	add	r6,r20,r6
  80c410:	81803e36 	bltu	r16,r6,80c50c <__udivdi3+0x504>
  80c414:	81803826 	beq	r16,r6,80c4f8 <__udivdi3+0x4f0>
  80c418:	0007883a 	mov	r3,zero
  80c41c:	003fa206 	br	80c2a8 <__alt_mem_onchip_mem+0xff78c2a8>
  80c420:	88e2983a 	sll	r17,r17,r3
  80c424:	80a8d83a 	srl	r20,r16,r2
  80c428:	80e0983a 	sll	r16,r16,r3
  80c42c:	882ad43a 	srli	r21,r17,16
  80c430:	9884d83a 	srl	r2,r19,r2
  80c434:	a009883a 	mov	r4,r20
  80c438:	a80b883a 	mov	r5,r21
  80c43c:	142eb03a 	or	r23,r2,r16
  80c440:	98e4983a 	sll	r18,r19,r3
  80c444:	080cc140 	call	80cc14 <__umodsi3>
  80c448:	a009883a 	mov	r4,r20
  80c44c:	a80b883a 	mov	r5,r21
  80c450:	1021883a 	mov	r16,r2
  80c454:	080cbb00 	call	80cbb0 <__udivsi3>
  80c458:	1039883a 	mov	fp,r2
  80c45c:	8d3fffcc 	andi	r20,r17,65535
  80c460:	8020943a 	slli	r16,r16,16
  80c464:	b804d43a 	srli	r2,r23,16
  80c468:	a72d383a 	mul	r22,r20,fp
  80c46c:	1404b03a 	or	r2,r2,r16
  80c470:	1580062e 	bgeu	r2,r22,80c48c <__udivdi3+0x484>
  80c474:	1445883a 	add	r2,r2,r17
  80c478:	e0ffffc4 	addi	r3,fp,-1
  80c47c:	14403836 	bltu	r2,r17,80c560 <__udivdi3+0x558>
  80c480:	1580372e 	bgeu	r2,r22,80c560 <__udivdi3+0x558>
  80c484:	e73fff84 	addi	fp,fp,-2
  80c488:	1445883a 	add	r2,r2,r17
  80c48c:	15adc83a 	sub	r22,r2,r22
  80c490:	a80b883a 	mov	r5,r21
  80c494:	b009883a 	mov	r4,r22
  80c498:	080cc140 	call	80cc14 <__umodsi3>
  80c49c:	1027883a 	mov	r19,r2
  80c4a0:	b009883a 	mov	r4,r22
  80c4a4:	a80b883a 	mov	r5,r21
  80c4a8:	080cbb00 	call	80cbb0 <__udivsi3>
  80c4ac:	9826943a 	slli	r19,r19,16
  80c4b0:	a0a1383a 	mul	r16,r20,r2
  80c4b4:	b93fffcc 	andi	r4,r23,65535
  80c4b8:	24c8b03a 	or	r4,r4,r19
  80c4bc:	2400062e 	bgeu	r4,r16,80c4d8 <__udivdi3+0x4d0>
  80c4c0:	2449883a 	add	r4,r4,r17
  80c4c4:	10ffffc4 	addi	r3,r2,-1
  80c4c8:	24402336 	bltu	r4,r17,80c558 <__udivdi3+0x550>
  80c4cc:	2400222e 	bgeu	r4,r16,80c558 <__udivdi3+0x550>
  80c4d0:	10bfff84 	addi	r2,r2,-2
  80c4d4:	2449883a 	add	r4,r4,r17
  80c4d8:	e038943a 	slli	fp,fp,16
  80c4dc:	2421c83a 	sub	r16,r4,r16
  80c4e0:	e086b03a 	or	r3,fp,r2
  80c4e4:	003f4306 	br	80c1f4 <__alt_mem_onchip_mem+0xff78c1f4>
  80c4e8:	2005883a 	mov	r2,r4
  80c4ec:	003f6906 	br	80c294 <__alt_mem_onchip_mem+0xff78c294>
  80c4f0:	1805883a 	mov	r2,r3
  80c4f4:	003f0f06 	br	80c134 <__alt_mem_onchip_mem+0xff78c134>
  80c4f8:	1806943a 	slli	r3,r3,16
  80c4fc:	9d66983a 	sll	r19,r19,r21
  80c500:	39ffffcc 	andi	r7,r7,65535
  80c504:	19c7883a 	add	r3,r3,r7
  80c508:	98ffc32e 	bgeu	r19,r3,80c418 <__alt_mem_onchip_mem+0xff78c418>
  80c50c:	10bfffc4 	addi	r2,r2,-1
  80c510:	003fc106 	br	80c418 <__alt_mem_onchip_mem+0xff78c418>
  80c514:	00800604 	movi	r2,24
  80c518:	003f1106 	br	80c160 <__alt_mem_onchip_mem+0xff78c160>
  80c51c:	00800604 	movi	r2,24
  80c520:	003f2706 	br	80c1c0 <__alt_mem_onchip_mem+0xff78c1c0>
  80c524:	00800604 	movi	r2,24
  80c528:	003ece06 	br	80c064 <__alt_mem_onchip_mem+0xff78c064>
  80c52c:	0007883a 	mov	r3,zero
  80c530:	00800044 	movi	r2,1
  80c534:	003f5c06 	br	80c2a8 <__alt_mem_onchip_mem+0xff78c2a8>
  80c538:	813fa12e 	bgeu	r16,r4,80c3c0 <__alt_mem_onchip_mem+0xff78c3c0>
  80c53c:	10bfff84 	addi	r2,r2,-2
  80c540:	85e1883a 	add	r16,r16,r23
  80c544:	003f9f06 	br	80c3c4 <__alt_mem_onchip_mem+0xff78c3c4>
  80c548:	1c7f8a2e 	bgeu	r3,r17,80c374 <__alt_mem_onchip_mem+0xff78c374>
  80c54c:	31bfff84 	addi	r6,r6,-2
  80c550:	1dc7883a 	add	r3,r3,r23
  80c554:	003f8806 	br	80c378 <__alt_mem_onchip_mem+0xff78c378>
  80c558:	1805883a 	mov	r2,r3
  80c55c:	003fde06 	br	80c4d8 <__alt_mem_onchip_mem+0xff78c4d8>
  80c560:	1839883a 	mov	fp,r3
  80c564:	003fc906 	br	80c48c <__alt_mem_onchip_mem+0xff78c48c>
  80c568:	b5bfff84 	addi	r22,r22,-2
  80c56c:	2449883a 	add	r4,r4,r17
  80c570:	003f3406 	br	80c244 <__alt_mem_onchip_mem+0xff78c244>
  80c574:	b5bfff84 	addi	r22,r22,-2
  80c578:	1445883a 	add	r2,r2,r17
  80c57c:	003edb06 	br	80c0ec <__alt_mem_onchip_mem+0xff78c0ec>

0080c580 <__umoddi3>:
  80c580:	defff404 	addi	sp,sp,-48
  80c584:	df000a15 	stw	fp,40(sp)
  80c588:	dc400315 	stw	r17,12(sp)
  80c58c:	dc000215 	stw	r16,8(sp)
  80c590:	dfc00b15 	stw	ra,44(sp)
  80c594:	ddc00915 	stw	r23,36(sp)
  80c598:	dd800815 	stw	r22,32(sp)
  80c59c:	dd400715 	stw	r21,28(sp)
  80c5a0:	dd000615 	stw	r20,24(sp)
  80c5a4:	dcc00515 	stw	r19,20(sp)
  80c5a8:	dc800415 	stw	r18,16(sp)
  80c5ac:	2021883a 	mov	r16,r4
  80c5b0:	2823883a 	mov	r17,r5
  80c5b4:	2839883a 	mov	fp,r5
  80c5b8:	38003c1e 	bne	r7,zero,80c6ac <__umoddi3+0x12c>
  80c5bc:	3027883a 	mov	r19,r6
  80c5c0:	2029883a 	mov	r20,r4
  80c5c4:	2980512e 	bgeu	r5,r6,80c70c <__umoddi3+0x18c>
  80c5c8:	00bfffd4 	movui	r2,65535
  80c5cc:	11809a36 	bltu	r2,r6,80c838 <__umoddi3+0x2b8>
  80c5d0:	01003fc4 	movi	r4,255
  80c5d4:	2189803a 	cmpltu	r4,r4,r6
  80c5d8:	200890fa 	slli	r4,r4,3
  80c5dc:	3104d83a 	srl	r2,r6,r4
  80c5e0:	00c02074 	movhi	r3,129
  80c5e4:	18cd8804 	addi	r3,r3,13856
  80c5e8:	1885883a 	add	r2,r3,r2
  80c5ec:	10c00003 	ldbu	r3,0(r2)
  80c5f0:	00800804 	movi	r2,32
  80c5f4:	1909883a 	add	r4,r3,r4
  80c5f8:	1125c83a 	sub	r18,r2,r4
  80c5fc:	90000526 	beq	r18,zero,80c614 <__umoddi3+0x94>
  80c600:	8ca2983a 	sll	r17,r17,r18
  80c604:	8108d83a 	srl	r4,r16,r4
  80c608:	34a6983a 	sll	r19,r6,r18
  80c60c:	84a8983a 	sll	r20,r16,r18
  80c610:	2478b03a 	or	fp,r4,r17
  80c614:	982ed43a 	srli	r23,r19,16
  80c618:	e009883a 	mov	r4,fp
  80c61c:	9dbfffcc 	andi	r22,r19,65535
  80c620:	b80b883a 	mov	r5,r23
  80c624:	080cc140 	call	80cc14 <__umodsi3>
  80c628:	e009883a 	mov	r4,fp
  80c62c:	b80b883a 	mov	r5,r23
  80c630:	102b883a 	mov	r21,r2
  80c634:	080cbb00 	call	80cbb0 <__udivsi3>
  80c638:	a806943a 	slli	r3,r21,16
  80c63c:	a008d43a 	srli	r4,r20,16
  80c640:	b085383a 	mul	r2,r22,r2
  80c644:	20c8b03a 	or	r4,r4,r3
  80c648:	2080032e 	bgeu	r4,r2,80c658 <__umoddi3+0xd8>
  80c64c:	24c9883a 	add	r4,r4,r19
  80c650:	24c00136 	bltu	r4,r19,80c658 <__umoddi3+0xd8>
  80c654:	20811036 	bltu	r4,r2,80ca98 <__umoddi3+0x518>
  80c658:	20abc83a 	sub	r21,r4,r2
  80c65c:	b80b883a 	mov	r5,r23
  80c660:	a809883a 	mov	r4,r21
  80c664:	080cc140 	call	80cc14 <__umodsi3>
  80c668:	1023883a 	mov	r17,r2
  80c66c:	b80b883a 	mov	r5,r23
  80c670:	a809883a 	mov	r4,r21
  80c674:	080cbb00 	call	80cbb0 <__udivsi3>
  80c678:	8822943a 	slli	r17,r17,16
  80c67c:	b085383a 	mul	r2,r22,r2
  80c680:	a0ffffcc 	andi	r3,r20,65535
  80c684:	1c46b03a 	or	r3,r3,r17
  80c688:	1880042e 	bgeu	r3,r2,80c69c <__umoddi3+0x11c>
  80c68c:	1cc7883a 	add	r3,r3,r19
  80c690:	1cc00236 	bltu	r3,r19,80c69c <__umoddi3+0x11c>
  80c694:	1880012e 	bgeu	r3,r2,80c69c <__umoddi3+0x11c>
  80c698:	1cc7883a 	add	r3,r3,r19
  80c69c:	1885c83a 	sub	r2,r3,r2
  80c6a0:	1484d83a 	srl	r2,r2,r18
  80c6a4:	0007883a 	mov	r3,zero
  80c6a8:	00004f06 	br	80c7e8 <__umoddi3+0x268>
  80c6ac:	29c04c36 	bltu	r5,r7,80c7e0 <__umoddi3+0x260>
  80c6b0:	00bfffd4 	movui	r2,65535
  80c6b4:	11c0582e 	bgeu	r2,r7,80c818 <__umoddi3+0x298>
  80c6b8:	00804034 	movhi	r2,256
  80c6bc:	10bfffc4 	addi	r2,r2,-1
  80c6c0:	11c0e736 	bltu	r2,r7,80ca60 <__umoddi3+0x4e0>
  80c6c4:	01000404 	movi	r4,16
  80c6c8:	3904d83a 	srl	r2,r7,r4
  80c6cc:	00c02074 	movhi	r3,129
  80c6d0:	18cd8804 	addi	r3,r3,13856
  80c6d4:	1885883a 	add	r2,r3,r2
  80c6d8:	14c00003 	ldbu	r19,0(r2)
  80c6dc:	00c00804 	movi	r3,32
  80c6e0:	9927883a 	add	r19,r19,r4
  80c6e4:	1ce9c83a 	sub	r20,r3,r19
  80c6e8:	a000581e 	bne	r20,zero,80c84c <__umoddi3+0x2cc>
  80c6ec:	3c400136 	bltu	r7,r17,80c6f4 <__umoddi3+0x174>
  80c6f0:	8180eb36 	bltu	r16,r6,80caa0 <__umoddi3+0x520>
  80c6f4:	8185c83a 	sub	r2,r16,r6
  80c6f8:	89e3c83a 	sub	r17,r17,r7
  80c6fc:	8089803a 	cmpltu	r4,r16,r2
  80c700:	8939c83a 	sub	fp,r17,r4
  80c704:	e007883a 	mov	r3,fp
  80c708:	00003706 	br	80c7e8 <__umoddi3+0x268>
  80c70c:	3000041e 	bne	r6,zero,80c720 <__umoddi3+0x1a0>
  80c710:	000b883a 	mov	r5,zero
  80c714:	01000044 	movi	r4,1
  80c718:	080cbb00 	call	80cbb0 <__udivsi3>
  80c71c:	1027883a 	mov	r19,r2
  80c720:	00bfffd4 	movui	r2,65535
  80c724:	14c0402e 	bgeu	r2,r19,80c828 <__umoddi3+0x2a8>
  80c728:	00804034 	movhi	r2,256
  80c72c:	10bfffc4 	addi	r2,r2,-1
  80c730:	14c0cd36 	bltu	r2,r19,80ca68 <__umoddi3+0x4e8>
  80c734:	00800404 	movi	r2,16
  80c738:	9886d83a 	srl	r3,r19,r2
  80c73c:	01002074 	movhi	r4,129
  80c740:	210d8804 	addi	r4,r4,13856
  80c744:	20c7883a 	add	r3,r4,r3
  80c748:	18c00003 	ldbu	r3,0(r3)
  80c74c:	1887883a 	add	r3,r3,r2
  80c750:	00800804 	movi	r2,32
  80c754:	10e5c83a 	sub	r18,r2,r3
  80c758:	9000901e 	bne	r18,zero,80c99c <__umoddi3+0x41c>
  80c75c:	982cd43a 	srli	r22,r19,16
  80c760:	8ce3c83a 	sub	r17,r17,r19
  80c764:	9d7fffcc 	andi	r21,r19,65535
  80c768:	b00b883a 	mov	r5,r22
  80c76c:	8809883a 	mov	r4,r17
  80c770:	080cc140 	call	80cc14 <__umodsi3>
  80c774:	8809883a 	mov	r4,r17
  80c778:	b00b883a 	mov	r5,r22
  80c77c:	1021883a 	mov	r16,r2
  80c780:	080cbb00 	call	80cbb0 <__udivsi3>
  80c784:	8006943a 	slli	r3,r16,16
  80c788:	a008d43a 	srli	r4,r20,16
  80c78c:	1545383a 	mul	r2,r2,r21
  80c790:	20c8b03a 	or	r4,r4,r3
  80c794:	2080042e 	bgeu	r4,r2,80c7a8 <__umoddi3+0x228>
  80c798:	24c9883a 	add	r4,r4,r19
  80c79c:	24c00236 	bltu	r4,r19,80c7a8 <__umoddi3+0x228>
  80c7a0:	2080012e 	bgeu	r4,r2,80c7a8 <__umoddi3+0x228>
  80c7a4:	24c9883a 	add	r4,r4,r19
  80c7a8:	20a1c83a 	sub	r16,r4,r2
  80c7ac:	b00b883a 	mov	r5,r22
  80c7b0:	8009883a 	mov	r4,r16
  80c7b4:	080cc140 	call	80cc14 <__umodsi3>
  80c7b8:	1023883a 	mov	r17,r2
  80c7bc:	b00b883a 	mov	r5,r22
  80c7c0:	8009883a 	mov	r4,r16
  80c7c4:	080cbb00 	call	80cbb0 <__udivsi3>
  80c7c8:	8822943a 	slli	r17,r17,16
  80c7cc:	1545383a 	mul	r2,r2,r21
  80c7d0:	a53fffcc 	andi	r20,r20,65535
  80c7d4:	a446b03a 	or	r3,r20,r17
  80c7d8:	18bfb02e 	bgeu	r3,r2,80c69c <__alt_mem_onchip_mem+0xff78c69c>
  80c7dc:	003fab06 	br	80c68c <__alt_mem_onchip_mem+0xff78c68c>
  80c7e0:	2005883a 	mov	r2,r4
  80c7e4:	2807883a 	mov	r3,r5
  80c7e8:	dfc00b17 	ldw	ra,44(sp)
  80c7ec:	df000a17 	ldw	fp,40(sp)
  80c7f0:	ddc00917 	ldw	r23,36(sp)
  80c7f4:	dd800817 	ldw	r22,32(sp)
  80c7f8:	dd400717 	ldw	r21,28(sp)
  80c7fc:	dd000617 	ldw	r20,24(sp)
  80c800:	dcc00517 	ldw	r19,20(sp)
  80c804:	dc800417 	ldw	r18,16(sp)
  80c808:	dc400317 	ldw	r17,12(sp)
  80c80c:	dc000217 	ldw	r16,8(sp)
  80c810:	dec00c04 	addi	sp,sp,48
  80c814:	f800283a 	ret
  80c818:	04c03fc4 	movi	r19,255
  80c81c:	99c9803a 	cmpltu	r4,r19,r7
  80c820:	200890fa 	slli	r4,r4,3
  80c824:	003fa806 	br	80c6c8 <__alt_mem_onchip_mem+0xff78c6c8>
  80c828:	00803fc4 	movi	r2,255
  80c82c:	14c5803a 	cmpltu	r2,r2,r19
  80c830:	100490fa 	slli	r2,r2,3
  80c834:	003fc006 	br	80c738 <__alt_mem_onchip_mem+0xff78c738>
  80c838:	00804034 	movhi	r2,256
  80c83c:	10bfffc4 	addi	r2,r2,-1
  80c840:	11808b36 	bltu	r2,r6,80ca70 <__umoddi3+0x4f0>
  80c844:	01000404 	movi	r4,16
  80c848:	003f6406 	br	80c5dc <__alt_mem_onchip_mem+0xff78c5dc>
  80c84c:	34c4d83a 	srl	r2,r6,r19
  80c850:	3d0e983a 	sll	r7,r7,r20
  80c854:	8cf8d83a 	srl	fp,r17,r19
  80c858:	8d10983a 	sll	r8,r17,r20
  80c85c:	38aab03a 	or	r21,r7,r2
  80c860:	a82cd43a 	srli	r22,r21,16
  80c864:	84e2d83a 	srl	r17,r16,r19
  80c868:	e009883a 	mov	r4,fp
  80c86c:	b00b883a 	mov	r5,r22
  80c870:	8a22b03a 	or	r17,r17,r8
  80c874:	3524983a 	sll	r18,r6,r20
  80c878:	080cc140 	call	80cc14 <__umodsi3>
  80c87c:	e009883a 	mov	r4,fp
  80c880:	b00b883a 	mov	r5,r22
  80c884:	102f883a 	mov	r23,r2
  80c888:	080cbb00 	call	80cbb0 <__udivsi3>
  80c88c:	100d883a 	mov	r6,r2
  80c890:	b808943a 	slli	r4,r23,16
  80c894:	aa3fffcc 	andi	r8,r21,65535
  80c898:	8804d43a 	srli	r2,r17,16
  80c89c:	41af383a 	mul	r23,r8,r6
  80c8a0:	8520983a 	sll	r16,r16,r20
  80c8a4:	1104b03a 	or	r2,r2,r4
  80c8a8:	15c0042e 	bgeu	r2,r23,80c8bc <__umoddi3+0x33c>
  80c8ac:	1545883a 	add	r2,r2,r21
  80c8b0:	30ffffc4 	addi	r3,r6,-1
  80c8b4:	1540742e 	bgeu	r2,r21,80ca88 <__umoddi3+0x508>
  80c8b8:	180d883a 	mov	r6,r3
  80c8bc:	15efc83a 	sub	r23,r2,r23
  80c8c0:	b00b883a 	mov	r5,r22
  80c8c4:	b809883a 	mov	r4,r23
  80c8c8:	d9800115 	stw	r6,4(sp)
  80c8cc:	da000015 	stw	r8,0(sp)
  80c8d0:	080cc140 	call	80cc14 <__umodsi3>
  80c8d4:	b00b883a 	mov	r5,r22
  80c8d8:	b809883a 	mov	r4,r23
  80c8dc:	1039883a 	mov	fp,r2
  80c8e0:	080cbb00 	call	80cbb0 <__udivsi3>
  80c8e4:	da000017 	ldw	r8,0(sp)
  80c8e8:	e038943a 	slli	fp,fp,16
  80c8ec:	100b883a 	mov	r5,r2
  80c8f0:	4089383a 	mul	r4,r8,r2
  80c8f4:	8a3fffcc 	andi	r8,r17,65535
  80c8f8:	4710b03a 	or	r8,r8,fp
  80c8fc:	d9800117 	ldw	r6,4(sp)
  80c900:	4100042e 	bgeu	r8,r4,80c914 <__umoddi3+0x394>
  80c904:	4551883a 	add	r8,r8,r21
  80c908:	10bfffc4 	addi	r2,r2,-1
  80c90c:	45405a2e 	bgeu	r8,r21,80ca78 <__umoddi3+0x4f8>
  80c910:	100b883a 	mov	r5,r2
  80c914:	300c943a 	slli	r6,r6,16
  80c918:	91ffffcc 	andi	r7,r18,65535
  80c91c:	9004d43a 	srli	r2,r18,16
  80c920:	314cb03a 	or	r6,r6,r5
  80c924:	317fffcc 	andi	r5,r6,65535
  80c928:	300cd43a 	srli	r6,r6,16
  80c92c:	29d3383a 	mul	r9,r5,r7
  80c930:	288b383a 	mul	r5,r5,r2
  80c934:	31cf383a 	mul	r7,r6,r7
  80c938:	4806d43a 	srli	r3,r9,16
  80c93c:	4111c83a 	sub	r8,r8,r4
  80c940:	29cb883a 	add	r5,r5,r7
  80c944:	194b883a 	add	r5,r3,r5
  80c948:	3085383a 	mul	r2,r6,r2
  80c94c:	29c0022e 	bgeu	r5,r7,80c958 <__umoddi3+0x3d8>
  80c950:	00c00074 	movhi	r3,1
  80c954:	10c5883a 	add	r2,r2,r3
  80c958:	2808d43a 	srli	r4,r5,16
  80c95c:	280a943a 	slli	r5,r5,16
  80c960:	4a7fffcc 	andi	r9,r9,65535
  80c964:	2085883a 	add	r2,r4,r2
  80c968:	2a4b883a 	add	r5,r5,r9
  80c96c:	40803636 	bltu	r8,r2,80ca48 <__umoddi3+0x4c8>
  80c970:	40804d26 	beq	r8,r2,80caa8 <__umoddi3+0x528>
  80c974:	4089c83a 	sub	r4,r8,r2
  80c978:	280f883a 	mov	r7,r5
  80c97c:	81cfc83a 	sub	r7,r16,r7
  80c980:	81c7803a 	cmpltu	r3,r16,r7
  80c984:	20c7c83a 	sub	r3,r4,r3
  80c988:	1cc4983a 	sll	r2,r3,r19
  80c98c:	3d0ed83a 	srl	r7,r7,r20
  80c990:	1d06d83a 	srl	r3,r3,r20
  80c994:	11c4b03a 	or	r2,r2,r7
  80c998:	003f9306 	br	80c7e8 <__alt_mem_onchip_mem+0xff78c7e8>
  80c99c:	9ca6983a 	sll	r19,r19,r18
  80c9a0:	88e8d83a 	srl	r20,r17,r3
  80c9a4:	80c4d83a 	srl	r2,r16,r3
  80c9a8:	982cd43a 	srli	r22,r19,16
  80c9ac:	8ca2983a 	sll	r17,r17,r18
  80c9b0:	a009883a 	mov	r4,r20
  80c9b4:	b00b883a 	mov	r5,r22
  80c9b8:	1478b03a 	or	fp,r2,r17
  80c9bc:	080cc140 	call	80cc14 <__umodsi3>
  80c9c0:	a009883a 	mov	r4,r20
  80c9c4:	b00b883a 	mov	r5,r22
  80c9c8:	1023883a 	mov	r17,r2
  80c9cc:	080cbb00 	call	80cbb0 <__udivsi3>
  80c9d0:	9d7fffcc 	andi	r21,r19,65535
  80c9d4:	880a943a 	slli	r5,r17,16
  80c9d8:	e008d43a 	srli	r4,fp,16
  80c9dc:	a885383a 	mul	r2,r21,r2
  80c9e0:	84a8983a 	sll	r20,r16,r18
  80c9e4:	2148b03a 	or	r4,r4,r5
  80c9e8:	2080042e 	bgeu	r4,r2,80c9fc <__umoddi3+0x47c>
  80c9ec:	24c9883a 	add	r4,r4,r19
  80c9f0:	24c00236 	bltu	r4,r19,80c9fc <__umoddi3+0x47c>
  80c9f4:	2080012e 	bgeu	r4,r2,80c9fc <__umoddi3+0x47c>
  80c9f8:	24c9883a 	add	r4,r4,r19
  80c9fc:	20a3c83a 	sub	r17,r4,r2
  80ca00:	b00b883a 	mov	r5,r22
  80ca04:	8809883a 	mov	r4,r17
  80ca08:	080cc140 	call	80cc14 <__umodsi3>
  80ca0c:	102f883a 	mov	r23,r2
  80ca10:	8809883a 	mov	r4,r17
  80ca14:	b00b883a 	mov	r5,r22
  80ca18:	080cbb00 	call	80cbb0 <__udivsi3>
  80ca1c:	b82e943a 	slli	r23,r23,16
  80ca20:	a885383a 	mul	r2,r21,r2
  80ca24:	e13fffcc 	andi	r4,fp,65535
  80ca28:	25c8b03a 	or	r4,r4,r23
  80ca2c:	2080042e 	bgeu	r4,r2,80ca40 <__umoddi3+0x4c0>
  80ca30:	24c9883a 	add	r4,r4,r19
  80ca34:	24c00236 	bltu	r4,r19,80ca40 <__umoddi3+0x4c0>
  80ca38:	2080012e 	bgeu	r4,r2,80ca40 <__umoddi3+0x4c0>
  80ca3c:	24c9883a 	add	r4,r4,r19
  80ca40:	20a3c83a 	sub	r17,r4,r2
  80ca44:	003f4806 	br	80c768 <__alt_mem_onchip_mem+0xff78c768>
  80ca48:	2c8fc83a 	sub	r7,r5,r18
  80ca4c:	1545c83a 	sub	r2,r2,r21
  80ca50:	29cb803a 	cmpltu	r5,r5,r7
  80ca54:	1145c83a 	sub	r2,r2,r5
  80ca58:	4089c83a 	sub	r4,r8,r2
  80ca5c:	003fc706 	br	80c97c <__alt_mem_onchip_mem+0xff78c97c>
  80ca60:	01000604 	movi	r4,24
  80ca64:	003f1806 	br	80c6c8 <__alt_mem_onchip_mem+0xff78c6c8>
  80ca68:	00800604 	movi	r2,24
  80ca6c:	003f3206 	br	80c738 <__alt_mem_onchip_mem+0xff78c738>
  80ca70:	01000604 	movi	r4,24
  80ca74:	003ed906 	br	80c5dc <__alt_mem_onchip_mem+0xff78c5dc>
  80ca78:	413fa52e 	bgeu	r8,r4,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80ca7c:	297fff84 	addi	r5,r5,-2
  80ca80:	4551883a 	add	r8,r8,r21
  80ca84:	003fa306 	br	80c914 <__alt_mem_onchip_mem+0xff78c914>
  80ca88:	15ff8b2e 	bgeu	r2,r23,80c8b8 <__alt_mem_onchip_mem+0xff78c8b8>
  80ca8c:	31bfff84 	addi	r6,r6,-2
  80ca90:	1545883a 	add	r2,r2,r21
  80ca94:	003f8906 	br	80c8bc <__alt_mem_onchip_mem+0xff78c8bc>
  80ca98:	24c9883a 	add	r4,r4,r19
  80ca9c:	003eee06 	br	80c658 <__alt_mem_onchip_mem+0xff78c658>
  80caa0:	8005883a 	mov	r2,r16
  80caa4:	003f1706 	br	80c704 <__alt_mem_onchip_mem+0xff78c704>
  80caa8:	817fe736 	bltu	r16,r5,80ca48 <__alt_mem_onchip_mem+0xff78ca48>
  80caac:	280f883a 	mov	r7,r5
  80cab0:	0009883a 	mov	r4,zero
  80cab4:	003fb106 	br	80c97c <__alt_mem_onchip_mem+0xff78c97c>

0080cab8 <__divsi3>:
  80cab8:	20001b16 	blt	r4,zero,80cb28 <__divsi3+0x70>
  80cabc:	000f883a 	mov	r7,zero
  80cac0:	28001616 	blt	r5,zero,80cb1c <__divsi3+0x64>
  80cac4:	200d883a 	mov	r6,r4
  80cac8:	29001a2e 	bgeu	r5,r4,80cb34 <__divsi3+0x7c>
  80cacc:	00800804 	movi	r2,32
  80cad0:	00c00044 	movi	r3,1
  80cad4:	00000106 	br	80cadc <__divsi3+0x24>
  80cad8:	10000d26 	beq	r2,zero,80cb10 <__divsi3+0x58>
  80cadc:	294b883a 	add	r5,r5,r5
  80cae0:	10bfffc4 	addi	r2,r2,-1
  80cae4:	18c7883a 	add	r3,r3,r3
  80cae8:	293ffb36 	bltu	r5,r4,80cad8 <__alt_mem_onchip_mem+0xff78cad8>
  80caec:	0005883a 	mov	r2,zero
  80caf0:	18000726 	beq	r3,zero,80cb10 <__divsi3+0x58>
  80caf4:	0005883a 	mov	r2,zero
  80caf8:	31400236 	bltu	r6,r5,80cb04 <__divsi3+0x4c>
  80cafc:	314dc83a 	sub	r6,r6,r5
  80cb00:	10c4b03a 	or	r2,r2,r3
  80cb04:	1806d07a 	srli	r3,r3,1
  80cb08:	280ad07a 	srli	r5,r5,1
  80cb0c:	183ffa1e 	bne	r3,zero,80caf8 <__alt_mem_onchip_mem+0xff78caf8>
  80cb10:	38000126 	beq	r7,zero,80cb18 <__divsi3+0x60>
  80cb14:	0085c83a 	sub	r2,zero,r2
  80cb18:	f800283a 	ret
  80cb1c:	014bc83a 	sub	r5,zero,r5
  80cb20:	39c0005c 	xori	r7,r7,1
  80cb24:	003fe706 	br	80cac4 <__alt_mem_onchip_mem+0xff78cac4>
  80cb28:	0109c83a 	sub	r4,zero,r4
  80cb2c:	01c00044 	movi	r7,1
  80cb30:	003fe306 	br	80cac0 <__alt_mem_onchip_mem+0xff78cac0>
  80cb34:	00c00044 	movi	r3,1
  80cb38:	003fee06 	br	80caf4 <__alt_mem_onchip_mem+0xff78caf4>

0080cb3c <__modsi3>:
  80cb3c:	20001716 	blt	r4,zero,80cb9c <__modsi3+0x60>
  80cb40:	000f883a 	mov	r7,zero
  80cb44:	2005883a 	mov	r2,r4
  80cb48:	28001216 	blt	r5,zero,80cb94 <__modsi3+0x58>
  80cb4c:	2900162e 	bgeu	r5,r4,80cba8 <__modsi3+0x6c>
  80cb50:	01800804 	movi	r6,32
  80cb54:	00c00044 	movi	r3,1
  80cb58:	00000106 	br	80cb60 <__modsi3+0x24>
  80cb5c:	30000a26 	beq	r6,zero,80cb88 <__modsi3+0x4c>
  80cb60:	294b883a 	add	r5,r5,r5
  80cb64:	31bfffc4 	addi	r6,r6,-1
  80cb68:	18c7883a 	add	r3,r3,r3
  80cb6c:	293ffb36 	bltu	r5,r4,80cb5c <__alt_mem_onchip_mem+0xff78cb5c>
  80cb70:	18000526 	beq	r3,zero,80cb88 <__modsi3+0x4c>
  80cb74:	1806d07a 	srli	r3,r3,1
  80cb78:	11400136 	bltu	r2,r5,80cb80 <__modsi3+0x44>
  80cb7c:	1145c83a 	sub	r2,r2,r5
  80cb80:	280ad07a 	srli	r5,r5,1
  80cb84:	183ffb1e 	bne	r3,zero,80cb74 <__alt_mem_onchip_mem+0xff78cb74>
  80cb88:	38000126 	beq	r7,zero,80cb90 <__modsi3+0x54>
  80cb8c:	0085c83a 	sub	r2,zero,r2
  80cb90:	f800283a 	ret
  80cb94:	014bc83a 	sub	r5,zero,r5
  80cb98:	003fec06 	br	80cb4c <__alt_mem_onchip_mem+0xff78cb4c>
  80cb9c:	0109c83a 	sub	r4,zero,r4
  80cba0:	01c00044 	movi	r7,1
  80cba4:	003fe706 	br	80cb44 <__alt_mem_onchip_mem+0xff78cb44>
  80cba8:	00c00044 	movi	r3,1
  80cbac:	003ff106 	br	80cb74 <__alt_mem_onchip_mem+0xff78cb74>

0080cbb0 <__udivsi3>:
  80cbb0:	200d883a 	mov	r6,r4
  80cbb4:	2900152e 	bgeu	r5,r4,80cc0c <__udivsi3+0x5c>
  80cbb8:	28001416 	blt	r5,zero,80cc0c <__udivsi3+0x5c>
  80cbbc:	00800804 	movi	r2,32
  80cbc0:	00c00044 	movi	r3,1
  80cbc4:	00000206 	br	80cbd0 <__udivsi3+0x20>
  80cbc8:	10000e26 	beq	r2,zero,80cc04 <__udivsi3+0x54>
  80cbcc:	28000516 	blt	r5,zero,80cbe4 <__udivsi3+0x34>
  80cbd0:	294b883a 	add	r5,r5,r5
  80cbd4:	10bfffc4 	addi	r2,r2,-1
  80cbd8:	18c7883a 	add	r3,r3,r3
  80cbdc:	293ffa36 	bltu	r5,r4,80cbc8 <__alt_mem_onchip_mem+0xff78cbc8>
  80cbe0:	18000826 	beq	r3,zero,80cc04 <__udivsi3+0x54>
  80cbe4:	0005883a 	mov	r2,zero
  80cbe8:	31400236 	bltu	r6,r5,80cbf4 <__udivsi3+0x44>
  80cbec:	314dc83a 	sub	r6,r6,r5
  80cbf0:	10c4b03a 	or	r2,r2,r3
  80cbf4:	1806d07a 	srli	r3,r3,1
  80cbf8:	280ad07a 	srli	r5,r5,1
  80cbfc:	183ffa1e 	bne	r3,zero,80cbe8 <__alt_mem_onchip_mem+0xff78cbe8>
  80cc00:	f800283a 	ret
  80cc04:	0005883a 	mov	r2,zero
  80cc08:	f800283a 	ret
  80cc0c:	00c00044 	movi	r3,1
  80cc10:	003ff406 	br	80cbe4 <__alt_mem_onchip_mem+0xff78cbe4>

0080cc14 <__umodsi3>:
  80cc14:	2005883a 	mov	r2,r4
  80cc18:	2900122e 	bgeu	r5,r4,80cc64 <__umodsi3+0x50>
  80cc1c:	28001116 	blt	r5,zero,80cc64 <__umodsi3+0x50>
  80cc20:	01800804 	movi	r6,32
  80cc24:	00c00044 	movi	r3,1
  80cc28:	00000206 	br	80cc34 <__umodsi3+0x20>
  80cc2c:	30000c26 	beq	r6,zero,80cc60 <__umodsi3+0x4c>
  80cc30:	28000516 	blt	r5,zero,80cc48 <__umodsi3+0x34>
  80cc34:	294b883a 	add	r5,r5,r5
  80cc38:	31bfffc4 	addi	r6,r6,-1
  80cc3c:	18c7883a 	add	r3,r3,r3
  80cc40:	293ffa36 	bltu	r5,r4,80cc2c <__alt_mem_onchip_mem+0xff78cc2c>
  80cc44:	18000626 	beq	r3,zero,80cc60 <__umodsi3+0x4c>
  80cc48:	1806d07a 	srli	r3,r3,1
  80cc4c:	11400136 	bltu	r2,r5,80cc54 <__umodsi3+0x40>
  80cc50:	1145c83a 	sub	r2,r2,r5
  80cc54:	280ad07a 	srli	r5,r5,1
  80cc58:	183ffb1e 	bne	r3,zero,80cc48 <__alt_mem_onchip_mem+0xff78cc48>
  80cc5c:	f800283a 	ret
  80cc60:	f800283a 	ret
  80cc64:	00c00044 	movi	r3,1
  80cc68:	003ff706 	br	80cc48 <__alt_mem_onchip_mem+0xff78cc48>

0080cc6c <__adddf3>:
  80cc6c:	02c00434 	movhi	r11,16
  80cc70:	5affffc4 	addi	r11,r11,-1
  80cc74:	2806d7fa 	srli	r3,r5,31
  80cc78:	2ad4703a 	and	r10,r5,r11
  80cc7c:	3ad2703a 	and	r9,r7,r11
  80cc80:	3804d53a 	srli	r2,r7,20
  80cc84:	3018d77a 	srli	r12,r6,29
  80cc88:	280ad53a 	srli	r5,r5,20
  80cc8c:	501490fa 	slli	r10,r10,3
  80cc90:	2010d77a 	srli	r8,r4,29
  80cc94:	481290fa 	slli	r9,r9,3
  80cc98:	380ed7fa 	srli	r7,r7,31
  80cc9c:	defffb04 	addi	sp,sp,-20
  80cca0:	dc800215 	stw	r18,8(sp)
  80cca4:	dc400115 	stw	r17,4(sp)
  80cca8:	dc000015 	stw	r16,0(sp)
  80ccac:	dfc00415 	stw	ra,16(sp)
  80ccb0:	dcc00315 	stw	r19,12(sp)
  80ccb4:	1c803fcc 	andi	r18,r3,255
  80ccb8:	2c01ffcc 	andi	r16,r5,2047
  80ccbc:	5210b03a 	or	r8,r10,r8
  80ccc0:	202290fa 	slli	r17,r4,3
  80ccc4:	1081ffcc 	andi	r2,r2,2047
  80ccc8:	4b12b03a 	or	r9,r9,r12
  80cccc:	300c90fa 	slli	r6,r6,3
  80ccd0:	91c07526 	beq	r18,r7,80cea8 <__adddf3+0x23c>
  80ccd4:	8087c83a 	sub	r3,r16,r2
  80ccd8:	00c0ab0e 	bge	zero,r3,80cf88 <__adddf3+0x31c>
  80ccdc:	10002a1e 	bne	r2,zero,80cd88 <__adddf3+0x11c>
  80cce0:	4984b03a 	or	r2,r9,r6
  80cce4:	1000961e 	bne	r2,zero,80cf40 <__adddf3+0x2d4>
  80cce8:	888001cc 	andi	r2,r17,7
  80ccec:	10000726 	beq	r2,zero,80cd0c <__adddf3+0xa0>
  80ccf0:	888003cc 	andi	r2,r17,15
  80ccf4:	00c00104 	movi	r3,4
  80ccf8:	10c00426 	beq	r2,r3,80cd0c <__adddf3+0xa0>
  80ccfc:	88c7883a 	add	r3,r17,r3
  80cd00:	1c63803a 	cmpltu	r17,r3,r17
  80cd04:	4451883a 	add	r8,r8,r17
  80cd08:	1823883a 	mov	r17,r3
  80cd0c:	4080202c 	andhi	r2,r8,128
  80cd10:	10005926 	beq	r2,zero,80ce78 <__adddf3+0x20c>
  80cd14:	84000044 	addi	r16,r16,1
  80cd18:	0081ffc4 	movi	r2,2047
  80cd1c:	8080ba26 	beq	r16,r2,80d008 <__adddf3+0x39c>
  80cd20:	00bfe034 	movhi	r2,65408
  80cd24:	10bfffc4 	addi	r2,r2,-1
  80cd28:	4090703a 	and	r8,r8,r2
  80cd2c:	4004977a 	slli	r2,r8,29
  80cd30:	4010927a 	slli	r8,r8,9
  80cd34:	8822d0fa 	srli	r17,r17,3
  80cd38:	8401ffcc 	andi	r16,r16,2047
  80cd3c:	4010d33a 	srli	r8,r8,12
  80cd40:	9007883a 	mov	r3,r18
  80cd44:	1444b03a 	or	r2,r2,r17
  80cd48:	8401ffcc 	andi	r16,r16,2047
  80cd4c:	8020953a 	slli	r16,r16,20
  80cd50:	18c03fcc 	andi	r3,r3,255
  80cd54:	01000434 	movhi	r4,16
  80cd58:	213fffc4 	addi	r4,r4,-1
  80cd5c:	180697fa 	slli	r3,r3,31
  80cd60:	4110703a 	and	r8,r8,r4
  80cd64:	4410b03a 	or	r8,r8,r16
  80cd68:	40c6b03a 	or	r3,r8,r3
  80cd6c:	dfc00417 	ldw	ra,16(sp)
  80cd70:	dcc00317 	ldw	r19,12(sp)
  80cd74:	dc800217 	ldw	r18,8(sp)
  80cd78:	dc400117 	ldw	r17,4(sp)
  80cd7c:	dc000017 	ldw	r16,0(sp)
  80cd80:	dec00504 	addi	sp,sp,20
  80cd84:	f800283a 	ret
  80cd88:	0081ffc4 	movi	r2,2047
  80cd8c:	80bfd626 	beq	r16,r2,80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80cd90:	4a402034 	orhi	r9,r9,128
  80cd94:	00800e04 	movi	r2,56
  80cd98:	10c09f16 	blt	r2,r3,80d018 <__adddf3+0x3ac>
  80cd9c:	008007c4 	movi	r2,31
  80cda0:	10c0c216 	blt	r2,r3,80d0ac <__adddf3+0x440>
  80cda4:	00800804 	movi	r2,32
  80cda8:	10c5c83a 	sub	r2,r2,r3
  80cdac:	488a983a 	sll	r5,r9,r2
  80cdb0:	30c8d83a 	srl	r4,r6,r3
  80cdb4:	3084983a 	sll	r2,r6,r2
  80cdb8:	48c6d83a 	srl	r3,r9,r3
  80cdbc:	290cb03a 	or	r6,r5,r4
  80cdc0:	1004c03a 	cmpne	r2,r2,zero
  80cdc4:	308cb03a 	or	r6,r6,r2
  80cdc8:	898dc83a 	sub	r6,r17,r6
  80cdcc:	89a3803a 	cmpltu	r17,r17,r6
  80cdd0:	40d1c83a 	sub	r8,r8,r3
  80cdd4:	4451c83a 	sub	r8,r8,r17
  80cdd8:	3023883a 	mov	r17,r6
  80cddc:	4080202c 	andhi	r2,r8,128
  80cde0:	10002326 	beq	r2,zero,80ce70 <__adddf3+0x204>
  80cde4:	04c02034 	movhi	r19,128
  80cde8:	9cffffc4 	addi	r19,r19,-1
  80cdec:	44e6703a 	and	r19,r8,r19
  80cdf0:	98007626 	beq	r19,zero,80cfcc <__adddf3+0x360>
  80cdf4:	9809883a 	mov	r4,r19
  80cdf8:	080f2700 	call	80f270 <__clzsi2>
  80cdfc:	10fffe04 	addi	r3,r2,-8
  80ce00:	010007c4 	movi	r4,31
  80ce04:	20c07716 	blt	r4,r3,80cfe4 <__adddf3+0x378>
  80ce08:	00800804 	movi	r2,32
  80ce0c:	10c5c83a 	sub	r2,r2,r3
  80ce10:	8884d83a 	srl	r2,r17,r2
  80ce14:	98d0983a 	sll	r8,r19,r3
  80ce18:	88e2983a 	sll	r17,r17,r3
  80ce1c:	1204b03a 	or	r2,r2,r8
  80ce20:	1c007416 	blt	r3,r16,80cff4 <__adddf3+0x388>
  80ce24:	1c21c83a 	sub	r16,r3,r16
  80ce28:	82000044 	addi	r8,r16,1
  80ce2c:	00c007c4 	movi	r3,31
  80ce30:	1a009116 	blt	r3,r8,80d078 <__adddf3+0x40c>
  80ce34:	00c00804 	movi	r3,32
  80ce38:	1a07c83a 	sub	r3,r3,r8
  80ce3c:	8a08d83a 	srl	r4,r17,r8
  80ce40:	88e2983a 	sll	r17,r17,r3
  80ce44:	10c6983a 	sll	r3,r2,r3
  80ce48:	1210d83a 	srl	r8,r2,r8
  80ce4c:	8804c03a 	cmpne	r2,r17,zero
  80ce50:	1906b03a 	or	r3,r3,r4
  80ce54:	18a2b03a 	or	r17,r3,r2
  80ce58:	0021883a 	mov	r16,zero
  80ce5c:	003fa206 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80ce60:	1890b03a 	or	r8,r3,r2
  80ce64:	40017d26 	beq	r8,zero,80d45c <__adddf3+0x7f0>
  80ce68:	1011883a 	mov	r8,r2
  80ce6c:	1823883a 	mov	r17,r3
  80ce70:	888001cc 	andi	r2,r17,7
  80ce74:	103f9e1e 	bne	r2,zero,80ccf0 <__alt_mem_onchip_mem+0xff78ccf0>
  80ce78:	4004977a 	slli	r2,r8,29
  80ce7c:	8822d0fa 	srli	r17,r17,3
  80ce80:	4010d0fa 	srli	r8,r8,3
  80ce84:	9007883a 	mov	r3,r18
  80ce88:	1444b03a 	or	r2,r2,r17
  80ce8c:	0101ffc4 	movi	r4,2047
  80ce90:	81002426 	beq	r16,r4,80cf24 <__adddf3+0x2b8>
  80ce94:	8120703a 	and	r16,r16,r4
  80ce98:	01000434 	movhi	r4,16
  80ce9c:	213fffc4 	addi	r4,r4,-1
  80cea0:	4110703a 	and	r8,r8,r4
  80cea4:	003fa806 	br	80cd48 <__alt_mem_onchip_mem+0xff78cd48>
  80cea8:	8089c83a 	sub	r4,r16,r2
  80ceac:	01005e0e 	bge	zero,r4,80d028 <__adddf3+0x3bc>
  80ceb0:	10002b26 	beq	r2,zero,80cf60 <__adddf3+0x2f4>
  80ceb4:	0081ffc4 	movi	r2,2047
  80ceb8:	80bf8b26 	beq	r16,r2,80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80cebc:	4a402034 	orhi	r9,r9,128
  80cec0:	00800e04 	movi	r2,56
  80cec4:	1100a40e 	bge	r2,r4,80d158 <__adddf3+0x4ec>
  80cec8:	498cb03a 	or	r6,r9,r6
  80cecc:	300ac03a 	cmpne	r5,r6,zero
  80ced0:	0013883a 	mov	r9,zero
  80ced4:	2c4b883a 	add	r5,r5,r17
  80ced8:	2c63803a 	cmpltu	r17,r5,r17
  80cedc:	4a11883a 	add	r8,r9,r8
  80cee0:	8a11883a 	add	r8,r17,r8
  80cee4:	2823883a 	mov	r17,r5
  80cee8:	4080202c 	andhi	r2,r8,128
  80ceec:	103fe026 	beq	r2,zero,80ce70 <__alt_mem_onchip_mem+0xff78ce70>
  80cef0:	84000044 	addi	r16,r16,1
  80cef4:	0081ffc4 	movi	r2,2047
  80cef8:	8080d226 	beq	r16,r2,80d244 <__adddf3+0x5d8>
  80cefc:	00bfe034 	movhi	r2,65408
  80cf00:	10bfffc4 	addi	r2,r2,-1
  80cf04:	4090703a 	and	r8,r8,r2
  80cf08:	880ad07a 	srli	r5,r17,1
  80cf0c:	400897fa 	slli	r4,r8,31
  80cf10:	88c0004c 	andi	r3,r17,1
  80cf14:	28e2b03a 	or	r17,r5,r3
  80cf18:	4010d07a 	srli	r8,r8,1
  80cf1c:	2462b03a 	or	r17,r4,r17
  80cf20:	003f7106 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80cf24:	4088b03a 	or	r4,r8,r2
  80cf28:	20014526 	beq	r4,zero,80d440 <__adddf3+0x7d4>
  80cf2c:	01000434 	movhi	r4,16
  80cf30:	42000234 	orhi	r8,r8,8
  80cf34:	213fffc4 	addi	r4,r4,-1
  80cf38:	4110703a 	and	r8,r8,r4
  80cf3c:	003f8206 	br	80cd48 <__alt_mem_onchip_mem+0xff78cd48>
  80cf40:	18ffffc4 	addi	r3,r3,-1
  80cf44:	1800491e 	bne	r3,zero,80d06c <__adddf3+0x400>
  80cf48:	898bc83a 	sub	r5,r17,r6
  80cf4c:	8963803a 	cmpltu	r17,r17,r5
  80cf50:	4251c83a 	sub	r8,r8,r9
  80cf54:	4451c83a 	sub	r8,r8,r17
  80cf58:	2823883a 	mov	r17,r5
  80cf5c:	003f9f06 	br	80cddc <__alt_mem_onchip_mem+0xff78cddc>
  80cf60:	4984b03a 	or	r2,r9,r6
  80cf64:	103f6026 	beq	r2,zero,80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80cf68:	213fffc4 	addi	r4,r4,-1
  80cf6c:	2000931e 	bne	r4,zero,80d1bc <__adddf3+0x550>
  80cf70:	898d883a 	add	r6,r17,r6
  80cf74:	3463803a 	cmpltu	r17,r6,r17
  80cf78:	4251883a 	add	r8,r8,r9
  80cf7c:	8a11883a 	add	r8,r17,r8
  80cf80:	3023883a 	mov	r17,r6
  80cf84:	003fd806 	br	80cee8 <__alt_mem_onchip_mem+0xff78cee8>
  80cf88:	1800541e 	bne	r3,zero,80d0dc <__adddf3+0x470>
  80cf8c:	80800044 	addi	r2,r16,1
  80cf90:	1081ffcc 	andi	r2,r2,2047
  80cf94:	00c00044 	movi	r3,1
  80cf98:	1880a00e 	bge	r3,r2,80d21c <__adddf3+0x5b0>
  80cf9c:	8989c83a 	sub	r4,r17,r6
  80cfa0:	8905803a 	cmpltu	r2,r17,r4
  80cfa4:	4267c83a 	sub	r19,r8,r9
  80cfa8:	98a7c83a 	sub	r19,r19,r2
  80cfac:	9880202c 	andhi	r2,r19,128
  80cfb0:	10006326 	beq	r2,zero,80d140 <__adddf3+0x4d4>
  80cfb4:	3463c83a 	sub	r17,r6,r17
  80cfb8:	4a07c83a 	sub	r3,r9,r8
  80cfbc:	344d803a 	cmpltu	r6,r6,r17
  80cfc0:	19a7c83a 	sub	r19,r3,r6
  80cfc4:	3825883a 	mov	r18,r7
  80cfc8:	983f8a1e 	bne	r19,zero,80cdf4 <__alt_mem_onchip_mem+0xff78cdf4>
  80cfcc:	8809883a 	mov	r4,r17
  80cfd0:	080f2700 	call	80f270 <__clzsi2>
  80cfd4:	10800804 	addi	r2,r2,32
  80cfd8:	10fffe04 	addi	r3,r2,-8
  80cfdc:	010007c4 	movi	r4,31
  80cfe0:	20ff890e 	bge	r4,r3,80ce08 <__alt_mem_onchip_mem+0xff78ce08>
  80cfe4:	10bff604 	addi	r2,r2,-40
  80cfe8:	8884983a 	sll	r2,r17,r2
  80cfec:	0023883a 	mov	r17,zero
  80cff0:	1c3f8c0e 	bge	r3,r16,80ce24 <__alt_mem_onchip_mem+0xff78ce24>
  80cff4:	023fe034 	movhi	r8,65408
  80cff8:	423fffc4 	addi	r8,r8,-1
  80cffc:	80e1c83a 	sub	r16,r16,r3
  80d000:	1210703a 	and	r8,r2,r8
  80d004:	003f3806 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d008:	9007883a 	mov	r3,r18
  80d00c:	0011883a 	mov	r8,zero
  80d010:	0005883a 	mov	r2,zero
  80d014:	003f4c06 	br	80cd48 <__alt_mem_onchip_mem+0xff78cd48>
  80d018:	498cb03a 	or	r6,r9,r6
  80d01c:	300cc03a 	cmpne	r6,r6,zero
  80d020:	0007883a 	mov	r3,zero
  80d024:	003f6806 	br	80cdc8 <__alt_mem_onchip_mem+0xff78cdc8>
  80d028:	20009c1e 	bne	r4,zero,80d29c <__adddf3+0x630>
  80d02c:	80800044 	addi	r2,r16,1
  80d030:	1141ffcc 	andi	r5,r2,2047
  80d034:	01000044 	movi	r4,1
  80d038:	2140670e 	bge	r4,r5,80d1d8 <__adddf3+0x56c>
  80d03c:	0101ffc4 	movi	r4,2047
  80d040:	11007f26 	beq	r2,r4,80d240 <__adddf3+0x5d4>
  80d044:	898d883a 	add	r6,r17,r6
  80d048:	4247883a 	add	r3,r8,r9
  80d04c:	3451803a 	cmpltu	r8,r6,r17
  80d050:	40d1883a 	add	r8,r8,r3
  80d054:	402297fa 	slli	r17,r8,31
  80d058:	300cd07a 	srli	r6,r6,1
  80d05c:	4010d07a 	srli	r8,r8,1
  80d060:	1021883a 	mov	r16,r2
  80d064:	89a2b03a 	or	r17,r17,r6
  80d068:	003f1f06 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d06c:	0081ffc4 	movi	r2,2047
  80d070:	80bf481e 	bne	r16,r2,80cd94 <__alt_mem_onchip_mem+0xff78cd94>
  80d074:	003f1c06 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d078:	843ff844 	addi	r16,r16,-31
  80d07c:	01000804 	movi	r4,32
  80d080:	1406d83a 	srl	r3,r2,r16
  80d084:	41005026 	beq	r8,r4,80d1c8 <__adddf3+0x55c>
  80d088:	01001004 	movi	r4,64
  80d08c:	2211c83a 	sub	r8,r4,r8
  80d090:	1204983a 	sll	r2,r2,r8
  80d094:	88a2b03a 	or	r17,r17,r2
  80d098:	8822c03a 	cmpne	r17,r17,zero
  80d09c:	1c62b03a 	or	r17,r3,r17
  80d0a0:	0011883a 	mov	r8,zero
  80d0a4:	0021883a 	mov	r16,zero
  80d0a8:	003f7106 	br	80ce70 <__alt_mem_onchip_mem+0xff78ce70>
  80d0ac:	193ff804 	addi	r4,r3,-32
  80d0b0:	00800804 	movi	r2,32
  80d0b4:	4908d83a 	srl	r4,r9,r4
  80d0b8:	18804526 	beq	r3,r2,80d1d0 <__adddf3+0x564>
  80d0bc:	00801004 	movi	r2,64
  80d0c0:	10c5c83a 	sub	r2,r2,r3
  80d0c4:	4886983a 	sll	r3,r9,r2
  80d0c8:	198cb03a 	or	r6,r3,r6
  80d0cc:	300cc03a 	cmpne	r6,r6,zero
  80d0d0:	218cb03a 	or	r6,r4,r6
  80d0d4:	0007883a 	mov	r3,zero
  80d0d8:	003f3b06 	br	80cdc8 <__alt_mem_onchip_mem+0xff78cdc8>
  80d0dc:	80002a26 	beq	r16,zero,80d188 <__adddf3+0x51c>
  80d0e0:	0101ffc4 	movi	r4,2047
  80d0e4:	11006826 	beq	r2,r4,80d288 <__adddf3+0x61c>
  80d0e8:	00c7c83a 	sub	r3,zero,r3
  80d0ec:	42002034 	orhi	r8,r8,128
  80d0f0:	01000e04 	movi	r4,56
  80d0f4:	20c07c16 	blt	r4,r3,80d2e8 <__adddf3+0x67c>
  80d0f8:	010007c4 	movi	r4,31
  80d0fc:	20c0da16 	blt	r4,r3,80d468 <__adddf3+0x7fc>
  80d100:	01000804 	movi	r4,32
  80d104:	20c9c83a 	sub	r4,r4,r3
  80d108:	4114983a 	sll	r10,r8,r4
  80d10c:	88cad83a 	srl	r5,r17,r3
  80d110:	8908983a 	sll	r4,r17,r4
  80d114:	40c6d83a 	srl	r3,r8,r3
  80d118:	5162b03a 	or	r17,r10,r5
  80d11c:	2008c03a 	cmpne	r4,r4,zero
  80d120:	8922b03a 	or	r17,r17,r4
  80d124:	3463c83a 	sub	r17,r6,r17
  80d128:	48c7c83a 	sub	r3,r9,r3
  80d12c:	344d803a 	cmpltu	r6,r6,r17
  80d130:	1991c83a 	sub	r8,r3,r6
  80d134:	1021883a 	mov	r16,r2
  80d138:	3825883a 	mov	r18,r7
  80d13c:	003f2706 	br	80cddc <__alt_mem_onchip_mem+0xff78cddc>
  80d140:	24d0b03a 	or	r8,r4,r19
  80d144:	40001b1e 	bne	r8,zero,80d1b4 <__adddf3+0x548>
  80d148:	0005883a 	mov	r2,zero
  80d14c:	0007883a 	mov	r3,zero
  80d150:	0021883a 	mov	r16,zero
  80d154:	003f4d06 	br	80ce8c <__alt_mem_onchip_mem+0xff78ce8c>
  80d158:	008007c4 	movi	r2,31
  80d15c:	11003c16 	blt	r2,r4,80d250 <__adddf3+0x5e4>
  80d160:	00800804 	movi	r2,32
  80d164:	1105c83a 	sub	r2,r2,r4
  80d168:	488e983a 	sll	r7,r9,r2
  80d16c:	310ad83a 	srl	r5,r6,r4
  80d170:	3084983a 	sll	r2,r6,r2
  80d174:	4912d83a 	srl	r9,r9,r4
  80d178:	394ab03a 	or	r5,r7,r5
  80d17c:	1004c03a 	cmpne	r2,r2,zero
  80d180:	288ab03a 	or	r5,r5,r2
  80d184:	003f5306 	br	80ced4 <__alt_mem_onchip_mem+0xff78ced4>
  80d188:	4448b03a 	or	r4,r8,r17
  80d18c:	20003e26 	beq	r4,zero,80d288 <__adddf3+0x61c>
  80d190:	00c6303a 	nor	r3,zero,r3
  80d194:	18003a1e 	bne	r3,zero,80d280 <__adddf3+0x614>
  80d198:	3463c83a 	sub	r17,r6,r17
  80d19c:	4a07c83a 	sub	r3,r9,r8
  80d1a0:	344d803a 	cmpltu	r6,r6,r17
  80d1a4:	1991c83a 	sub	r8,r3,r6
  80d1a8:	1021883a 	mov	r16,r2
  80d1ac:	3825883a 	mov	r18,r7
  80d1b0:	003f0a06 	br	80cddc <__alt_mem_onchip_mem+0xff78cddc>
  80d1b4:	2023883a 	mov	r17,r4
  80d1b8:	003f0d06 	br	80cdf0 <__alt_mem_onchip_mem+0xff78cdf0>
  80d1bc:	0081ffc4 	movi	r2,2047
  80d1c0:	80bf3f1e 	bne	r16,r2,80cec0 <__alt_mem_onchip_mem+0xff78cec0>
  80d1c4:	003ec806 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d1c8:	0005883a 	mov	r2,zero
  80d1cc:	003fb106 	br	80d094 <__alt_mem_onchip_mem+0xff78d094>
  80d1d0:	0007883a 	mov	r3,zero
  80d1d4:	003fbc06 	br	80d0c8 <__alt_mem_onchip_mem+0xff78d0c8>
  80d1d8:	4444b03a 	or	r2,r8,r17
  80d1dc:	8000871e 	bne	r16,zero,80d3fc <__adddf3+0x790>
  80d1e0:	1000ba26 	beq	r2,zero,80d4cc <__adddf3+0x860>
  80d1e4:	4984b03a 	or	r2,r9,r6
  80d1e8:	103ebf26 	beq	r2,zero,80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d1ec:	8985883a 	add	r2,r17,r6
  80d1f0:	4247883a 	add	r3,r8,r9
  80d1f4:	1451803a 	cmpltu	r8,r2,r17
  80d1f8:	40d1883a 	add	r8,r8,r3
  80d1fc:	40c0202c 	andhi	r3,r8,128
  80d200:	1023883a 	mov	r17,r2
  80d204:	183f1a26 	beq	r3,zero,80ce70 <__alt_mem_onchip_mem+0xff78ce70>
  80d208:	00bfe034 	movhi	r2,65408
  80d20c:	10bfffc4 	addi	r2,r2,-1
  80d210:	2021883a 	mov	r16,r4
  80d214:	4090703a 	and	r8,r8,r2
  80d218:	003eb306 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d21c:	4444b03a 	or	r2,r8,r17
  80d220:	8000291e 	bne	r16,zero,80d2c8 <__adddf3+0x65c>
  80d224:	10004b1e 	bne	r2,zero,80d354 <__adddf3+0x6e8>
  80d228:	4990b03a 	or	r8,r9,r6
  80d22c:	40008b26 	beq	r8,zero,80d45c <__adddf3+0x7f0>
  80d230:	4811883a 	mov	r8,r9
  80d234:	3023883a 	mov	r17,r6
  80d238:	3825883a 	mov	r18,r7
  80d23c:	003eaa06 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d240:	1021883a 	mov	r16,r2
  80d244:	0011883a 	mov	r8,zero
  80d248:	0005883a 	mov	r2,zero
  80d24c:	003f0f06 	br	80ce8c <__alt_mem_onchip_mem+0xff78ce8c>
  80d250:	217ff804 	addi	r5,r4,-32
  80d254:	00800804 	movi	r2,32
  80d258:	494ad83a 	srl	r5,r9,r5
  80d25c:	20807d26 	beq	r4,r2,80d454 <__adddf3+0x7e8>
  80d260:	00801004 	movi	r2,64
  80d264:	1109c83a 	sub	r4,r2,r4
  80d268:	4912983a 	sll	r9,r9,r4
  80d26c:	498cb03a 	or	r6,r9,r6
  80d270:	300cc03a 	cmpne	r6,r6,zero
  80d274:	298ab03a 	or	r5,r5,r6
  80d278:	0013883a 	mov	r9,zero
  80d27c:	003f1506 	br	80ced4 <__alt_mem_onchip_mem+0xff78ced4>
  80d280:	0101ffc4 	movi	r4,2047
  80d284:	113f9a1e 	bne	r2,r4,80d0f0 <__alt_mem_onchip_mem+0xff78d0f0>
  80d288:	4811883a 	mov	r8,r9
  80d28c:	3023883a 	mov	r17,r6
  80d290:	1021883a 	mov	r16,r2
  80d294:	3825883a 	mov	r18,r7
  80d298:	003e9306 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d29c:	8000161e 	bne	r16,zero,80d2f8 <__adddf3+0x68c>
  80d2a0:	444ab03a 	or	r5,r8,r17
  80d2a4:	28005126 	beq	r5,zero,80d3ec <__adddf3+0x780>
  80d2a8:	0108303a 	nor	r4,zero,r4
  80d2ac:	20004d1e 	bne	r4,zero,80d3e4 <__adddf3+0x778>
  80d2b0:	89a3883a 	add	r17,r17,r6
  80d2b4:	4253883a 	add	r9,r8,r9
  80d2b8:	898d803a 	cmpltu	r6,r17,r6
  80d2bc:	3251883a 	add	r8,r6,r9
  80d2c0:	1021883a 	mov	r16,r2
  80d2c4:	003f0806 	br	80cee8 <__alt_mem_onchip_mem+0xff78cee8>
  80d2c8:	1000301e 	bne	r2,zero,80d38c <__adddf3+0x720>
  80d2cc:	4984b03a 	or	r2,r9,r6
  80d2d0:	10007126 	beq	r2,zero,80d498 <__adddf3+0x82c>
  80d2d4:	4811883a 	mov	r8,r9
  80d2d8:	3023883a 	mov	r17,r6
  80d2dc:	3825883a 	mov	r18,r7
  80d2e0:	0401ffc4 	movi	r16,2047
  80d2e4:	003e8006 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d2e8:	4462b03a 	or	r17,r8,r17
  80d2ec:	8822c03a 	cmpne	r17,r17,zero
  80d2f0:	0007883a 	mov	r3,zero
  80d2f4:	003f8b06 	br	80d124 <__alt_mem_onchip_mem+0xff78d124>
  80d2f8:	0141ffc4 	movi	r5,2047
  80d2fc:	11403b26 	beq	r2,r5,80d3ec <__adddf3+0x780>
  80d300:	0109c83a 	sub	r4,zero,r4
  80d304:	42002034 	orhi	r8,r8,128
  80d308:	01400e04 	movi	r5,56
  80d30c:	29006716 	blt	r5,r4,80d4ac <__adddf3+0x840>
  80d310:	014007c4 	movi	r5,31
  80d314:	29007016 	blt	r5,r4,80d4d8 <__adddf3+0x86c>
  80d318:	01400804 	movi	r5,32
  80d31c:	290bc83a 	sub	r5,r5,r4
  80d320:	4154983a 	sll	r10,r8,r5
  80d324:	890ed83a 	srl	r7,r17,r4
  80d328:	894a983a 	sll	r5,r17,r5
  80d32c:	4108d83a 	srl	r4,r8,r4
  80d330:	51e2b03a 	or	r17,r10,r7
  80d334:	280ac03a 	cmpne	r5,r5,zero
  80d338:	8962b03a 	or	r17,r17,r5
  80d33c:	89a3883a 	add	r17,r17,r6
  80d340:	2253883a 	add	r9,r4,r9
  80d344:	898d803a 	cmpltu	r6,r17,r6
  80d348:	3251883a 	add	r8,r6,r9
  80d34c:	1021883a 	mov	r16,r2
  80d350:	003ee506 	br	80cee8 <__alt_mem_onchip_mem+0xff78cee8>
  80d354:	4984b03a 	or	r2,r9,r6
  80d358:	103e6326 	beq	r2,zero,80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d35c:	8987c83a 	sub	r3,r17,r6
  80d360:	88c9803a 	cmpltu	r4,r17,r3
  80d364:	4245c83a 	sub	r2,r8,r9
  80d368:	1105c83a 	sub	r2,r2,r4
  80d36c:	1100202c 	andhi	r4,r2,128
  80d370:	203ebb26 	beq	r4,zero,80ce60 <__alt_mem_onchip_mem+0xff78ce60>
  80d374:	3463c83a 	sub	r17,r6,r17
  80d378:	4a07c83a 	sub	r3,r9,r8
  80d37c:	344d803a 	cmpltu	r6,r6,r17
  80d380:	1991c83a 	sub	r8,r3,r6
  80d384:	3825883a 	mov	r18,r7
  80d388:	003e5706 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d38c:	4984b03a 	or	r2,r9,r6
  80d390:	10002e26 	beq	r2,zero,80d44c <__adddf3+0x7e0>
  80d394:	4004d0fa 	srli	r2,r8,3
  80d398:	8822d0fa 	srli	r17,r17,3
  80d39c:	4010977a 	slli	r8,r8,29
  80d3a0:	10c0022c 	andhi	r3,r2,8
  80d3a4:	4462b03a 	or	r17,r8,r17
  80d3a8:	18000826 	beq	r3,zero,80d3cc <__adddf3+0x760>
  80d3ac:	4808d0fa 	srli	r4,r9,3
  80d3b0:	20c0022c 	andhi	r3,r4,8
  80d3b4:	1800051e 	bne	r3,zero,80d3cc <__adddf3+0x760>
  80d3b8:	300cd0fa 	srli	r6,r6,3
  80d3bc:	4806977a 	slli	r3,r9,29
  80d3c0:	2005883a 	mov	r2,r4
  80d3c4:	3825883a 	mov	r18,r7
  80d3c8:	19a2b03a 	or	r17,r3,r6
  80d3cc:	8810d77a 	srli	r8,r17,29
  80d3d0:	100490fa 	slli	r2,r2,3
  80d3d4:	882290fa 	slli	r17,r17,3
  80d3d8:	0401ffc4 	movi	r16,2047
  80d3dc:	4090b03a 	or	r8,r8,r2
  80d3e0:	003e4106 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d3e4:	0141ffc4 	movi	r5,2047
  80d3e8:	117fc71e 	bne	r2,r5,80d308 <__alt_mem_onchip_mem+0xff78d308>
  80d3ec:	4811883a 	mov	r8,r9
  80d3f0:	3023883a 	mov	r17,r6
  80d3f4:	1021883a 	mov	r16,r2
  80d3f8:	003e3b06 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d3fc:	10002f26 	beq	r2,zero,80d4bc <__adddf3+0x850>
  80d400:	4984b03a 	or	r2,r9,r6
  80d404:	10001126 	beq	r2,zero,80d44c <__adddf3+0x7e0>
  80d408:	4004d0fa 	srli	r2,r8,3
  80d40c:	8822d0fa 	srli	r17,r17,3
  80d410:	4010977a 	slli	r8,r8,29
  80d414:	10c0022c 	andhi	r3,r2,8
  80d418:	4462b03a 	or	r17,r8,r17
  80d41c:	183feb26 	beq	r3,zero,80d3cc <__alt_mem_onchip_mem+0xff78d3cc>
  80d420:	4808d0fa 	srli	r4,r9,3
  80d424:	20c0022c 	andhi	r3,r4,8
  80d428:	183fe81e 	bne	r3,zero,80d3cc <__alt_mem_onchip_mem+0xff78d3cc>
  80d42c:	300cd0fa 	srli	r6,r6,3
  80d430:	4806977a 	slli	r3,r9,29
  80d434:	2005883a 	mov	r2,r4
  80d438:	19a2b03a 	or	r17,r3,r6
  80d43c:	003fe306 	br	80d3cc <__alt_mem_onchip_mem+0xff78d3cc>
  80d440:	0011883a 	mov	r8,zero
  80d444:	0005883a 	mov	r2,zero
  80d448:	003e3f06 	br	80cd48 <__alt_mem_onchip_mem+0xff78cd48>
  80d44c:	0401ffc4 	movi	r16,2047
  80d450:	003e2506 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d454:	0013883a 	mov	r9,zero
  80d458:	003f8406 	br	80d26c <__alt_mem_onchip_mem+0xff78d26c>
  80d45c:	0005883a 	mov	r2,zero
  80d460:	0007883a 	mov	r3,zero
  80d464:	003e8906 	br	80ce8c <__alt_mem_onchip_mem+0xff78ce8c>
  80d468:	197ff804 	addi	r5,r3,-32
  80d46c:	01000804 	movi	r4,32
  80d470:	414ad83a 	srl	r5,r8,r5
  80d474:	19002426 	beq	r3,r4,80d508 <__adddf3+0x89c>
  80d478:	01001004 	movi	r4,64
  80d47c:	20c7c83a 	sub	r3,r4,r3
  80d480:	40c6983a 	sll	r3,r8,r3
  80d484:	1c46b03a 	or	r3,r3,r17
  80d488:	1806c03a 	cmpne	r3,r3,zero
  80d48c:	28e2b03a 	or	r17,r5,r3
  80d490:	0007883a 	mov	r3,zero
  80d494:	003f2306 	br	80d124 <__alt_mem_onchip_mem+0xff78d124>
  80d498:	0007883a 	mov	r3,zero
  80d49c:	5811883a 	mov	r8,r11
  80d4a0:	00bfffc4 	movi	r2,-1
  80d4a4:	0401ffc4 	movi	r16,2047
  80d4a8:	003e7806 	br	80ce8c <__alt_mem_onchip_mem+0xff78ce8c>
  80d4ac:	4462b03a 	or	r17,r8,r17
  80d4b0:	8822c03a 	cmpne	r17,r17,zero
  80d4b4:	0009883a 	mov	r4,zero
  80d4b8:	003fa006 	br	80d33c <__alt_mem_onchip_mem+0xff78d33c>
  80d4bc:	4811883a 	mov	r8,r9
  80d4c0:	3023883a 	mov	r17,r6
  80d4c4:	0401ffc4 	movi	r16,2047
  80d4c8:	003e0706 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d4cc:	4811883a 	mov	r8,r9
  80d4d0:	3023883a 	mov	r17,r6
  80d4d4:	003e0406 	br	80cce8 <__alt_mem_onchip_mem+0xff78cce8>
  80d4d8:	21fff804 	addi	r7,r4,-32
  80d4dc:	01400804 	movi	r5,32
  80d4e0:	41ced83a 	srl	r7,r8,r7
  80d4e4:	21400a26 	beq	r4,r5,80d510 <__adddf3+0x8a4>
  80d4e8:	01401004 	movi	r5,64
  80d4ec:	2909c83a 	sub	r4,r5,r4
  80d4f0:	4108983a 	sll	r4,r8,r4
  80d4f4:	2448b03a 	or	r4,r4,r17
  80d4f8:	2008c03a 	cmpne	r4,r4,zero
  80d4fc:	3922b03a 	or	r17,r7,r4
  80d500:	0009883a 	mov	r4,zero
  80d504:	003f8d06 	br	80d33c <__alt_mem_onchip_mem+0xff78d33c>
  80d508:	0007883a 	mov	r3,zero
  80d50c:	003fdd06 	br	80d484 <__alt_mem_onchip_mem+0xff78d484>
  80d510:	0009883a 	mov	r4,zero
  80d514:	003ff706 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>

0080d518 <__divdf3>:
  80d518:	defff204 	addi	sp,sp,-56
  80d51c:	dd400915 	stw	r21,36(sp)
  80d520:	282ad53a 	srli	r21,r5,20
  80d524:	dd000815 	stw	r20,32(sp)
  80d528:	2828d7fa 	srli	r20,r5,31
  80d52c:	dc000415 	stw	r16,16(sp)
  80d530:	04000434 	movhi	r16,16
  80d534:	df000c15 	stw	fp,48(sp)
  80d538:	843fffc4 	addi	r16,r16,-1
  80d53c:	dfc00d15 	stw	ra,52(sp)
  80d540:	ddc00b15 	stw	r23,44(sp)
  80d544:	dd800a15 	stw	r22,40(sp)
  80d548:	dcc00715 	stw	r19,28(sp)
  80d54c:	dc800615 	stw	r18,24(sp)
  80d550:	dc400515 	stw	r17,20(sp)
  80d554:	ad41ffcc 	andi	r21,r21,2047
  80d558:	2c20703a 	and	r16,r5,r16
  80d55c:	a7003fcc 	andi	fp,r20,255
  80d560:	a8006126 	beq	r21,zero,80d6e8 <__divdf3+0x1d0>
  80d564:	0081ffc4 	movi	r2,2047
  80d568:	2025883a 	mov	r18,r4
  80d56c:	a8803726 	beq	r21,r2,80d64c <__divdf3+0x134>
  80d570:	80800434 	orhi	r2,r16,16
  80d574:	100490fa 	slli	r2,r2,3
  80d578:	2020d77a 	srli	r16,r4,29
  80d57c:	202490fa 	slli	r18,r4,3
  80d580:	ad7f0044 	addi	r21,r21,-1023
  80d584:	80a0b03a 	or	r16,r16,r2
  80d588:	0027883a 	mov	r19,zero
  80d58c:	0013883a 	mov	r9,zero
  80d590:	3804d53a 	srli	r2,r7,20
  80d594:	382cd7fa 	srli	r22,r7,31
  80d598:	04400434 	movhi	r17,16
  80d59c:	8c7fffc4 	addi	r17,r17,-1
  80d5a0:	1081ffcc 	andi	r2,r2,2047
  80d5a4:	3011883a 	mov	r8,r6
  80d5a8:	3c62703a 	and	r17,r7,r17
  80d5ac:	b5c03fcc 	andi	r23,r22,255
  80d5b0:	10006c26 	beq	r2,zero,80d764 <__divdf3+0x24c>
  80d5b4:	00c1ffc4 	movi	r3,2047
  80d5b8:	10c06426 	beq	r2,r3,80d74c <__divdf3+0x234>
  80d5bc:	88c00434 	orhi	r3,r17,16
  80d5c0:	180690fa 	slli	r3,r3,3
  80d5c4:	3022d77a 	srli	r17,r6,29
  80d5c8:	301090fa 	slli	r8,r6,3
  80d5cc:	10bf0044 	addi	r2,r2,-1023
  80d5d0:	88e2b03a 	or	r17,r17,r3
  80d5d4:	000f883a 	mov	r7,zero
  80d5d8:	a58cf03a 	xor	r6,r20,r22
  80d5dc:	3cc8b03a 	or	r4,r7,r19
  80d5e0:	a8abc83a 	sub	r21,r21,r2
  80d5e4:	008003c4 	movi	r2,15
  80d5e8:	3007883a 	mov	r3,r6
  80d5ec:	34c03fcc 	andi	r19,r6,255
  80d5f0:	11009036 	bltu	r2,r4,80d834 <__divdf3+0x31c>
  80d5f4:	200890ba 	slli	r4,r4,2
  80d5f8:	00802074 	movhi	r2,129
  80d5fc:	10b58304 	addi	r2,r2,-10740
  80d600:	2089883a 	add	r4,r4,r2
  80d604:	20800017 	ldw	r2,0(r4)
  80d608:	1000683a 	jmp	r2
  80d60c:	0080d834 	movhi	r2,864
  80d610:	0080d684 	movi	r2,858
  80d614:	0080d824 	muli	r2,zero,864
  80d618:	0080d678 	rdprs	r2,zero,857
  80d61c:	0080d824 	muli	r2,zero,864
  80d620:	0080d7f8 	rdprs	r2,zero,863
  80d624:	0080d824 	muli	r2,zero,864
  80d628:	0080d678 	rdprs	r2,zero,857
  80d62c:	0080d684 	movi	r2,858
  80d630:	0080d684 	movi	r2,858
  80d634:	0080d7f8 	rdprs	r2,zero,863
  80d638:	0080d678 	rdprs	r2,zero,857
  80d63c:	0080d668 	cmpgeui	r2,zero,857
  80d640:	0080d668 	cmpgeui	r2,zero,857
  80d644:	0080d668 	cmpgeui	r2,zero,857
  80d648:	0080db18 	cmpnei	r2,zero,876
  80d64c:	2404b03a 	or	r2,r4,r16
  80d650:	1000661e 	bne	r2,zero,80d7ec <__divdf3+0x2d4>
  80d654:	04c00204 	movi	r19,8
  80d658:	0021883a 	mov	r16,zero
  80d65c:	0025883a 	mov	r18,zero
  80d660:	02400084 	movi	r9,2
  80d664:	003fca06 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d668:	8023883a 	mov	r17,r16
  80d66c:	9011883a 	mov	r8,r18
  80d670:	e02f883a 	mov	r23,fp
  80d674:	480f883a 	mov	r7,r9
  80d678:	00800084 	movi	r2,2
  80d67c:	3881311e 	bne	r7,r2,80db44 <__divdf3+0x62c>
  80d680:	b827883a 	mov	r19,r23
  80d684:	98c0004c 	andi	r3,r19,1
  80d688:	0081ffc4 	movi	r2,2047
  80d68c:	000b883a 	mov	r5,zero
  80d690:	0025883a 	mov	r18,zero
  80d694:	1004953a 	slli	r2,r2,20
  80d698:	18c03fcc 	andi	r3,r3,255
  80d69c:	04400434 	movhi	r17,16
  80d6a0:	8c7fffc4 	addi	r17,r17,-1
  80d6a4:	180697fa 	slli	r3,r3,31
  80d6a8:	2c4a703a 	and	r5,r5,r17
  80d6ac:	288ab03a 	or	r5,r5,r2
  80d6b0:	28c6b03a 	or	r3,r5,r3
  80d6b4:	9005883a 	mov	r2,r18
  80d6b8:	dfc00d17 	ldw	ra,52(sp)
  80d6bc:	df000c17 	ldw	fp,48(sp)
  80d6c0:	ddc00b17 	ldw	r23,44(sp)
  80d6c4:	dd800a17 	ldw	r22,40(sp)
  80d6c8:	dd400917 	ldw	r21,36(sp)
  80d6cc:	dd000817 	ldw	r20,32(sp)
  80d6d0:	dcc00717 	ldw	r19,28(sp)
  80d6d4:	dc800617 	ldw	r18,24(sp)
  80d6d8:	dc400517 	ldw	r17,20(sp)
  80d6dc:	dc000417 	ldw	r16,16(sp)
  80d6e0:	dec00e04 	addi	sp,sp,56
  80d6e4:	f800283a 	ret
  80d6e8:	2404b03a 	or	r2,r4,r16
  80d6ec:	2027883a 	mov	r19,r4
  80d6f0:	10003926 	beq	r2,zero,80d7d8 <__divdf3+0x2c0>
  80d6f4:	80012e26 	beq	r16,zero,80dbb0 <__divdf3+0x698>
  80d6f8:	8009883a 	mov	r4,r16
  80d6fc:	d9800315 	stw	r6,12(sp)
  80d700:	d9c00215 	stw	r7,8(sp)
  80d704:	080f2700 	call	80f270 <__clzsi2>
  80d708:	d9800317 	ldw	r6,12(sp)
  80d70c:	d9c00217 	ldw	r7,8(sp)
  80d710:	113ffd44 	addi	r4,r2,-11
  80d714:	00c00704 	movi	r3,28
  80d718:	19012116 	blt	r3,r4,80dba0 <__divdf3+0x688>
  80d71c:	00c00744 	movi	r3,29
  80d720:	147ffe04 	addi	r17,r2,-8
  80d724:	1907c83a 	sub	r3,r3,r4
  80d728:	8460983a 	sll	r16,r16,r17
  80d72c:	98c6d83a 	srl	r3,r19,r3
  80d730:	9c64983a 	sll	r18,r19,r17
  80d734:	1c20b03a 	or	r16,r3,r16
  80d738:	1080fcc4 	addi	r2,r2,1011
  80d73c:	00abc83a 	sub	r21,zero,r2
  80d740:	0027883a 	mov	r19,zero
  80d744:	0013883a 	mov	r9,zero
  80d748:	003f9106 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d74c:	3446b03a 	or	r3,r6,r17
  80d750:	18001f1e 	bne	r3,zero,80d7d0 <__divdf3+0x2b8>
  80d754:	0023883a 	mov	r17,zero
  80d758:	0011883a 	mov	r8,zero
  80d75c:	01c00084 	movi	r7,2
  80d760:	003f9d06 	br	80d5d8 <__alt_mem_onchip_mem+0xff78d5d8>
  80d764:	3446b03a 	or	r3,r6,r17
  80d768:	18001526 	beq	r3,zero,80d7c0 <__divdf3+0x2a8>
  80d76c:	88011b26 	beq	r17,zero,80dbdc <__divdf3+0x6c4>
  80d770:	8809883a 	mov	r4,r17
  80d774:	d9800315 	stw	r6,12(sp)
  80d778:	da400115 	stw	r9,4(sp)
  80d77c:	080f2700 	call	80f270 <__clzsi2>
  80d780:	d9800317 	ldw	r6,12(sp)
  80d784:	da400117 	ldw	r9,4(sp)
  80d788:	113ffd44 	addi	r4,r2,-11
  80d78c:	00c00704 	movi	r3,28
  80d790:	19010e16 	blt	r3,r4,80dbcc <__divdf3+0x6b4>
  80d794:	00c00744 	movi	r3,29
  80d798:	123ffe04 	addi	r8,r2,-8
  80d79c:	1907c83a 	sub	r3,r3,r4
  80d7a0:	8a22983a 	sll	r17,r17,r8
  80d7a4:	30c6d83a 	srl	r3,r6,r3
  80d7a8:	3210983a 	sll	r8,r6,r8
  80d7ac:	1c62b03a 	or	r17,r3,r17
  80d7b0:	1080fcc4 	addi	r2,r2,1011
  80d7b4:	0085c83a 	sub	r2,zero,r2
  80d7b8:	000f883a 	mov	r7,zero
  80d7bc:	003f8606 	br	80d5d8 <__alt_mem_onchip_mem+0xff78d5d8>
  80d7c0:	0023883a 	mov	r17,zero
  80d7c4:	0011883a 	mov	r8,zero
  80d7c8:	01c00044 	movi	r7,1
  80d7cc:	003f8206 	br	80d5d8 <__alt_mem_onchip_mem+0xff78d5d8>
  80d7d0:	01c000c4 	movi	r7,3
  80d7d4:	003f8006 	br	80d5d8 <__alt_mem_onchip_mem+0xff78d5d8>
  80d7d8:	04c00104 	movi	r19,4
  80d7dc:	0021883a 	mov	r16,zero
  80d7e0:	0025883a 	mov	r18,zero
  80d7e4:	02400044 	movi	r9,1
  80d7e8:	003f6906 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d7ec:	04c00304 	movi	r19,12
  80d7f0:	024000c4 	movi	r9,3
  80d7f4:	003f6606 	br	80d590 <__alt_mem_onchip_mem+0xff78d590>
  80d7f8:	01400434 	movhi	r5,16
  80d7fc:	0007883a 	mov	r3,zero
  80d800:	297fffc4 	addi	r5,r5,-1
  80d804:	04bfffc4 	movi	r18,-1
  80d808:	0081ffc4 	movi	r2,2047
  80d80c:	003fa106 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80d810:	00c00044 	movi	r3,1
  80d814:	1887c83a 	sub	r3,r3,r2
  80d818:	01000e04 	movi	r4,56
  80d81c:	20c1210e 	bge	r4,r3,80dca4 <__divdf3+0x78c>
  80d820:	98c0004c 	andi	r3,r19,1
  80d824:	0005883a 	mov	r2,zero
  80d828:	000b883a 	mov	r5,zero
  80d82c:	0025883a 	mov	r18,zero
  80d830:	003f9806 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80d834:	8c00fd36 	bltu	r17,r16,80dc2c <__divdf3+0x714>
  80d838:	8440fb26 	beq	r16,r17,80dc28 <__divdf3+0x710>
  80d83c:	8007883a 	mov	r3,r16
  80d840:	ad7fffc4 	addi	r21,r21,-1
  80d844:	0021883a 	mov	r16,zero
  80d848:	4004d63a 	srli	r2,r8,24
  80d84c:	8822923a 	slli	r17,r17,8
  80d850:	1809883a 	mov	r4,r3
  80d854:	402c923a 	slli	r22,r8,8
  80d858:	88b8b03a 	or	fp,r17,r2
  80d85c:	e028d43a 	srli	r20,fp,16
  80d860:	d8c00015 	stw	r3,0(sp)
  80d864:	e5ffffcc 	andi	r23,fp,65535
  80d868:	a00b883a 	mov	r5,r20
  80d86c:	080cbb00 	call	80cbb0 <__udivsi3>
  80d870:	d8c00017 	ldw	r3,0(sp)
  80d874:	a00b883a 	mov	r5,r20
  80d878:	d8800315 	stw	r2,12(sp)
  80d87c:	1809883a 	mov	r4,r3
  80d880:	080cc140 	call	80cc14 <__umodsi3>
  80d884:	d9800317 	ldw	r6,12(sp)
  80d888:	1006943a 	slli	r3,r2,16
  80d88c:	9004d43a 	srli	r2,r18,16
  80d890:	b9a3383a 	mul	r17,r23,r6
  80d894:	10c4b03a 	or	r2,r2,r3
  80d898:	1440062e 	bgeu	r2,r17,80d8b4 <__divdf3+0x39c>
  80d89c:	1705883a 	add	r2,r2,fp
  80d8a0:	30ffffc4 	addi	r3,r6,-1
  80d8a4:	1700ee36 	bltu	r2,fp,80dc60 <__divdf3+0x748>
  80d8a8:	1440ed2e 	bgeu	r2,r17,80dc60 <__divdf3+0x748>
  80d8ac:	31bfff84 	addi	r6,r6,-2
  80d8b0:	1705883a 	add	r2,r2,fp
  80d8b4:	1463c83a 	sub	r17,r2,r17
  80d8b8:	a00b883a 	mov	r5,r20
  80d8bc:	8809883a 	mov	r4,r17
  80d8c0:	d9800315 	stw	r6,12(sp)
  80d8c4:	080cbb00 	call	80cbb0 <__udivsi3>
  80d8c8:	a00b883a 	mov	r5,r20
  80d8cc:	8809883a 	mov	r4,r17
  80d8d0:	d8800215 	stw	r2,8(sp)
  80d8d4:	080cc140 	call	80cc14 <__umodsi3>
  80d8d8:	d9c00217 	ldw	r7,8(sp)
  80d8dc:	1004943a 	slli	r2,r2,16
  80d8e0:	94bfffcc 	andi	r18,r18,65535
  80d8e4:	b9d1383a 	mul	r8,r23,r7
  80d8e8:	90a4b03a 	or	r18,r18,r2
  80d8ec:	d9800317 	ldw	r6,12(sp)
  80d8f0:	9200062e 	bgeu	r18,r8,80d90c <__divdf3+0x3f4>
  80d8f4:	9725883a 	add	r18,r18,fp
  80d8f8:	38bfffc4 	addi	r2,r7,-1
  80d8fc:	9700d636 	bltu	r18,fp,80dc58 <__divdf3+0x740>
  80d900:	9200d52e 	bgeu	r18,r8,80dc58 <__divdf3+0x740>
  80d904:	39ffff84 	addi	r7,r7,-2
  80d908:	9725883a 	add	r18,r18,fp
  80d90c:	3004943a 	slli	r2,r6,16
  80d910:	b012d43a 	srli	r9,r22,16
  80d914:	b1bfffcc 	andi	r6,r22,65535
  80d918:	11e2b03a 	or	r17,r2,r7
  80d91c:	8806d43a 	srli	r3,r17,16
  80d920:	893fffcc 	andi	r4,r17,65535
  80d924:	218b383a 	mul	r5,r4,r6
  80d928:	30c5383a 	mul	r2,r6,r3
  80d92c:	2249383a 	mul	r4,r4,r9
  80d930:	280ed43a 	srli	r7,r5,16
  80d934:	9225c83a 	sub	r18,r18,r8
  80d938:	2089883a 	add	r4,r4,r2
  80d93c:	3909883a 	add	r4,r7,r4
  80d940:	1a47383a 	mul	r3,r3,r9
  80d944:	2080022e 	bgeu	r4,r2,80d950 <__divdf3+0x438>
  80d948:	00800074 	movhi	r2,1
  80d94c:	1887883a 	add	r3,r3,r2
  80d950:	2004d43a 	srli	r2,r4,16
  80d954:	2008943a 	slli	r4,r4,16
  80d958:	297fffcc 	andi	r5,r5,65535
  80d95c:	10c7883a 	add	r3,r2,r3
  80d960:	2149883a 	add	r4,r4,r5
  80d964:	90c0a536 	bltu	r18,r3,80dbfc <__divdf3+0x6e4>
  80d968:	90c0bf26 	beq	r18,r3,80dc68 <__divdf3+0x750>
  80d96c:	90c7c83a 	sub	r3,r18,r3
  80d970:	810fc83a 	sub	r7,r16,r4
  80d974:	81e5803a 	cmpltu	r18,r16,r7
  80d978:	1ca5c83a 	sub	r18,r3,r18
  80d97c:	e480c126 	beq	fp,r18,80dc84 <__divdf3+0x76c>
  80d980:	a00b883a 	mov	r5,r20
  80d984:	9009883a 	mov	r4,r18
  80d988:	d9800315 	stw	r6,12(sp)
  80d98c:	d9c00215 	stw	r7,8(sp)
  80d990:	da400115 	stw	r9,4(sp)
  80d994:	080cbb00 	call	80cbb0 <__udivsi3>
  80d998:	a00b883a 	mov	r5,r20
  80d99c:	9009883a 	mov	r4,r18
  80d9a0:	d8800015 	stw	r2,0(sp)
  80d9a4:	080cc140 	call	80cc14 <__umodsi3>
  80d9a8:	d9c00217 	ldw	r7,8(sp)
  80d9ac:	da000017 	ldw	r8,0(sp)
  80d9b0:	1006943a 	slli	r3,r2,16
  80d9b4:	3804d43a 	srli	r2,r7,16
  80d9b8:	ba21383a 	mul	r16,r23,r8
  80d9bc:	d9800317 	ldw	r6,12(sp)
  80d9c0:	10c4b03a 	or	r2,r2,r3
  80d9c4:	da400117 	ldw	r9,4(sp)
  80d9c8:	1400062e 	bgeu	r2,r16,80d9e4 <__divdf3+0x4cc>
  80d9cc:	1705883a 	add	r2,r2,fp
  80d9d0:	40ffffc4 	addi	r3,r8,-1
  80d9d4:	1700ad36 	bltu	r2,fp,80dc8c <__divdf3+0x774>
  80d9d8:	1400ac2e 	bgeu	r2,r16,80dc8c <__divdf3+0x774>
  80d9dc:	423fff84 	addi	r8,r8,-2
  80d9e0:	1705883a 	add	r2,r2,fp
  80d9e4:	1421c83a 	sub	r16,r2,r16
  80d9e8:	a00b883a 	mov	r5,r20
  80d9ec:	8009883a 	mov	r4,r16
  80d9f0:	d9800315 	stw	r6,12(sp)
  80d9f4:	d9c00215 	stw	r7,8(sp)
  80d9f8:	da000015 	stw	r8,0(sp)
  80d9fc:	da400115 	stw	r9,4(sp)
  80da00:	080cbb00 	call	80cbb0 <__udivsi3>
  80da04:	8009883a 	mov	r4,r16
  80da08:	a00b883a 	mov	r5,r20
  80da0c:	1025883a 	mov	r18,r2
  80da10:	080cc140 	call	80cc14 <__umodsi3>
  80da14:	d9c00217 	ldw	r7,8(sp)
  80da18:	1004943a 	slli	r2,r2,16
  80da1c:	bcaf383a 	mul	r23,r23,r18
  80da20:	393fffcc 	andi	r4,r7,65535
  80da24:	2088b03a 	or	r4,r4,r2
  80da28:	d9800317 	ldw	r6,12(sp)
  80da2c:	da000017 	ldw	r8,0(sp)
  80da30:	da400117 	ldw	r9,4(sp)
  80da34:	25c0062e 	bgeu	r4,r23,80da50 <__divdf3+0x538>
  80da38:	2709883a 	add	r4,r4,fp
  80da3c:	90bfffc4 	addi	r2,r18,-1
  80da40:	27009436 	bltu	r4,fp,80dc94 <__divdf3+0x77c>
  80da44:	25c0932e 	bgeu	r4,r23,80dc94 <__divdf3+0x77c>
  80da48:	94bfff84 	addi	r18,r18,-2
  80da4c:	2709883a 	add	r4,r4,fp
  80da50:	4004943a 	slli	r2,r8,16
  80da54:	25efc83a 	sub	r23,r4,r23
  80da58:	1490b03a 	or	r8,r2,r18
  80da5c:	4008d43a 	srli	r4,r8,16
  80da60:	40ffffcc 	andi	r3,r8,65535
  80da64:	30c5383a 	mul	r2,r6,r3
  80da68:	1a47383a 	mul	r3,r3,r9
  80da6c:	310d383a 	mul	r6,r6,r4
  80da70:	100ad43a 	srli	r5,r2,16
  80da74:	4913383a 	mul	r9,r9,r4
  80da78:	1987883a 	add	r3,r3,r6
  80da7c:	28c7883a 	add	r3,r5,r3
  80da80:	1980022e 	bgeu	r3,r6,80da8c <__divdf3+0x574>
  80da84:	01000074 	movhi	r4,1
  80da88:	4913883a 	add	r9,r9,r4
  80da8c:	1808d43a 	srli	r4,r3,16
  80da90:	1806943a 	slli	r3,r3,16
  80da94:	10bfffcc 	andi	r2,r2,65535
  80da98:	2253883a 	add	r9,r4,r9
  80da9c:	1887883a 	add	r3,r3,r2
  80daa0:	ba403836 	bltu	r23,r9,80db84 <__divdf3+0x66c>
  80daa4:	ba403626 	beq	r23,r9,80db80 <__divdf3+0x668>
  80daa8:	42000054 	ori	r8,r8,1
  80daac:	a880ffc4 	addi	r2,r21,1023
  80dab0:	00bf570e 	bge	zero,r2,80d810 <__alt_mem_onchip_mem+0xff78d810>
  80dab4:	40c001cc 	andi	r3,r8,7
  80dab8:	18000726 	beq	r3,zero,80dad8 <__divdf3+0x5c0>
  80dabc:	40c003cc 	andi	r3,r8,15
  80dac0:	01000104 	movi	r4,4
  80dac4:	19000426 	beq	r3,r4,80dad8 <__divdf3+0x5c0>
  80dac8:	4107883a 	add	r3,r8,r4
  80dacc:	1a11803a 	cmpltu	r8,r3,r8
  80dad0:	8a23883a 	add	r17,r17,r8
  80dad4:	1811883a 	mov	r8,r3
  80dad8:	88c0402c 	andhi	r3,r17,256
  80dadc:	18000426 	beq	r3,zero,80daf0 <__divdf3+0x5d8>
  80dae0:	00ffc034 	movhi	r3,65280
  80dae4:	18ffffc4 	addi	r3,r3,-1
  80dae8:	a8810004 	addi	r2,r21,1024
  80daec:	88e2703a 	and	r17,r17,r3
  80daf0:	00c1ff84 	movi	r3,2046
  80daf4:	18bee316 	blt	r3,r2,80d684 <__alt_mem_onchip_mem+0xff78d684>
  80daf8:	8824977a 	slli	r18,r17,29
  80dafc:	4010d0fa 	srli	r8,r8,3
  80db00:	8822927a 	slli	r17,r17,9
  80db04:	1081ffcc 	andi	r2,r2,2047
  80db08:	9224b03a 	or	r18,r18,r8
  80db0c:	880ad33a 	srli	r5,r17,12
  80db10:	98c0004c 	andi	r3,r19,1
  80db14:	003edf06 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80db18:	8080022c 	andhi	r2,r16,8
  80db1c:	10001226 	beq	r2,zero,80db68 <__divdf3+0x650>
  80db20:	8880022c 	andhi	r2,r17,8
  80db24:	1000101e 	bne	r2,zero,80db68 <__divdf3+0x650>
  80db28:	00800434 	movhi	r2,16
  80db2c:	89400234 	orhi	r5,r17,8
  80db30:	10bfffc4 	addi	r2,r2,-1
  80db34:	b007883a 	mov	r3,r22
  80db38:	288a703a 	and	r5,r5,r2
  80db3c:	4025883a 	mov	r18,r8
  80db40:	003f3106 	br	80d808 <__alt_mem_onchip_mem+0xff78d808>
  80db44:	008000c4 	movi	r2,3
  80db48:	3880a626 	beq	r7,r2,80dde4 <__divdf3+0x8cc>
  80db4c:	00800044 	movi	r2,1
  80db50:	3880521e 	bne	r7,r2,80dc9c <__divdf3+0x784>
  80db54:	b807883a 	mov	r3,r23
  80db58:	0005883a 	mov	r2,zero
  80db5c:	000b883a 	mov	r5,zero
  80db60:	0025883a 	mov	r18,zero
  80db64:	003ecb06 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80db68:	00800434 	movhi	r2,16
  80db6c:	81400234 	orhi	r5,r16,8
  80db70:	10bfffc4 	addi	r2,r2,-1
  80db74:	a007883a 	mov	r3,r20
  80db78:	288a703a 	and	r5,r5,r2
  80db7c:	003f2206 	br	80d808 <__alt_mem_onchip_mem+0xff78d808>
  80db80:	183fca26 	beq	r3,zero,80daac <__alt_mem_onchip_mem+0xff78daac>
  80db84:	e5ef883a 	add	r23,fp,r23
  80db88:	40bfffc4 	addi	r2,r8,-1
  80db8c:	bf00392e 	bgeu	r23,fp,80dc74 <__divdf3+0x75c>
  80db90:	1011883a 	mov	r8,r2
  80db94:	ba7fc41e 	bne	r23,r9,80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80db98:	b0ffc31e 	bne	r22,r3,80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80db9c:	003fc306 	br	80daac <__alt_mem_onchip_mem+0xff78daac>
  80dba0:	143ff604 	addi	r16,r2,-40
  80dba4:	9c20983a 	sll	r16,r19,r16
  80dba8:	0025883a 	mov	r18,zero
  80dbac:	003ee206 	br	80d738 <__alt_mem_onchip_mem+0xff78d738>
  80dbb0:	d9800315 	stw	r6,12(sp)
  80dbb4:	d9c00215 	stw	r7,8(sp)
  80dbb8:	080f2700 	call	80f270 <__clzsi2>
  80dbbc:	10800804 	addi	r2,r2,32
  80dbc0:	d9c00217 	ldw	r7,8(sp)
  80dbc4:	d9800317 	ldw	r6,12(sp)
  80dbc8:	003ed106 	br	80d710 <__alt_mem_onchip_mem+0xff78d710>
  80dbcc:	147ff604 	addi	r17,r2,-40
  80dbd0:	3462983a 	sll	r17,r6,r17
  80dbd4:	0011883a 	mov	r8,zero
  80dbd8:	003ef506 	br	80d7b0 <__alt_mem_onchip_mem+0xff78d7b0>
  80dbdc:	3009883a 	mov	r4,r6
  80dbe0:	d9800315 	stw	r6,12(sp)
  80dbe4:	da400115 	stw	r9,4(sp)
  80dbe8:	080f2700 	call	80f270 <__clzsi2>
  80dbec:	10800804 	addi	r2,r2,32
  80dbf0:	da400117 	ldw	r9,4(sp)
  80dbf4:	d9800317 	ldw	r6,12(sp)
  80dbf8:	003ee306 	br	80d788 <__alt_mem_onchip_mem+0xff78d788>
  80dbfc:	85a1883a 	add	r16,r16,r22
  80dc00:	8585803a 	cmpltu	r2,r16,r22
  80dc04:	1705883a 	add	r2,r2,fp
  80dc08:	14a5883a 	add	r18,r2,r18
  80dc0c:	88bfffc4 	addi	r2,r17,-1
  80dc10:	e4800c2e 	bgeu	fp,r18,80dc44 <__divdf3+0x72c>
  80dc14:	90c03e36 	bltu	r18,r3,80dd10 <__divdf3+0x7f8>
  80dc18:	1c806926 	beq	r3,r18,80ddc0 <__divdf3+0x8a8>
  80dc1c:	90c7c83a 	sub	r3,r18,r3
  80dc20:	1023883a 	mov	r17,r2
  80dc24:	003f5206 	br	80d970 <__alt_mem_onchip_mem+0xff78d970>
  80dc28:	923f0436 	bltu	r18,r8,80d83c <__alt_mem_onchip_mem+0xff78d83c>
  80dc2c:	800897fa 	slli	r4,r16,31
  80dc30:	9004d07a 	srli	r2,r18,1
  80dc34:	8006d07a 	srli	r3,r16,1
  80dc38:	902097fa 	slli	r16,r18,31
  80dc3c:	20a4b03a 	or	r18,r4,r2
  80dc40:	003f0106 	br	80d848 <__alt_mem_onchip_mem+0xff78d848>
  80dc44:	e4bff51e 	bne	fp,r18,80dc1c <__alt_mem_onchip_mem+0xff78dc1c>
  80dc48:	85bff22e 	bgeu	r16,r22,80dc14 <__alt_mem_onchip_mem+0xff78dc14>
  80dc4c:	e0c7c83a 	sub	r3,fp,r3
  80dc50:	1023883a 	mov	r17,r2
  80dc54:	003f4606 	br	80d970 <__alt_mem_onchip_mem+0xff78d970>
  80dc58:	100f883a 	mov	r7,r2
  80dc5c:	003f2b06 	br	80d90c <__alt_mem_onchip_mem+0xff78d90c>
  80dc60:	180d883a 	mov	r6,r3
  80dc64:	003f1306 	br	80d8b4 <__alt_mem_onchip_mem+0xff78d8b4>
  80dc68:	813fe436 	bltu	r16,r4,80dbfc <__alt_mem_onchip_mem+0xff78dbfc>
  80dc6c:	0007883a 	mov	r3,zero
  80dc70:	003f3f06 	br	80d970 <__alt_mem_onchip_mem+0xff78d970>
  80dc74:	ba402c36 	bltu	r23,r9,80dd28 <__divdf3+0x810>
  80dc78:	4dc05426 	beq	r9,r23,80ddcc <__divdf3+0x8b4>
  80dc7c:	1011883a 	mov	r8,r2
  80dc80:	003f8906 	br	80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80dc84:	023fffc4 	movi	r8,-1
  80dc88:	003f8806 	br	80daac <__alt_mem_onchip_mem+0xff78daac>
  80dc8c:	1811883a 	mov	r8,r3
  80dc90:	003f5406 	br	80d9e4 <__alt_mem_onchip_mem+0xff78d9e4>
  80dc94:	1025883a 	mov	r18,r2
  80dc98:	003f6d06 	br	80da50 <__alt_mem_onchip_mem+0xff78da50>
  80dc9c:	b827883a 	mov	r19,r23
  80dca0:	003f8206 	br	80daac <__alt_mem_onchip_mem+0xff78daac>
  80dca4:	010007c4 	movi	r4,31
  80dca8:	20c02616 	blt	r4,r3,80dd44 <__divdf3+0x82c>
  80dcac:	00800804 	movi	r2,32
  80dcb0:	10c5c83a 	sub	r2,r2,r3
  80dcb4:	888a983a 	sll	r5,r17,r2
  80dcb8:	40c8d83a 	srl	r4,r8,r3
  80dcbc:	4084983a 	sll	r2,r8,r2
  80dcc0:	88e2d83a 	srl	r17,r17,r3
  80dcc4:	2906b03a 	or	r3,r5,r4
  80dcc8:	1004c03a 	cmpne	r2,r2,zero
  80dccc:	1886b03a 	or	r3,r3,r2
  80dcd0:	188001cc 	andi	r2,r3,7
  80dcd4:	10000726 	beq	r2,zero,80dcf4 <__divdf3+0x7dc>
  80dcd8:	188003cc 	andi	r2,r3,15
  80dcdc:	01000104 	movi	r4,4
  80dce0:	11000426 	beq	r2,r4,80dcf4 <__divdf3+0x7dc>
  80dce4:	1805883a 	mov	r2,r3
  80dce8:	10c00104 	addi	r3,r2,4
  80dcec:	1885803a 	cmpltu	r2,r3,r2
  80dcf0:	88a3883a 	add	r17,r17,r2
  80dcf4:	8880202c 	andhi	r2,r17,128
  80dcf8:	10002726 	beq	r2,zero,80dd98 <__divdf3+0x880>
  80dcfc:	98c0004c 	andi	r3,r19,1
  80dd00:	00800044 	movi	r2,1
  80dd04:	000b883a 	mov	r5,zero
  80dd08:	0025883a 	mov	r18,zero
  80dd0c:	003e6106 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80dd10:	85a1883a 	add	r16,r16,r22
  80dd14:	8585803a 	cmpltu	r2,r16,r22
  80dd18:	1705883a 	add	r2,r2,fp
  80dd1c:	14a5883a 	add	r18,r2,r18
  80dd20:	8c7fff84 	addi	r17,r17,-2
  80dd24:	003f1106 	br	80d96c <__alt_mem_onchip_mem+0xff78d96c>
  80dd28:	b589883a 	add	r4,r22,r22
  80dd2c:	25ad803a 	cmpltu	r22,r4,r22
  80dd30:	b739883a 	add	fp,r22,fp
  80dd34:	40bfff84 	addi	r2,r8,-2
  80dd38:	bf2f883a 	add	r23,r23,fp
  80dd3c:	202d883a 	mov	r22,r4
  80dd40:	003f9306 	br	80db90 <__alt_mem_onchip_mem+0xff78db90>
  80dd44:	013ff844 	movi	r4,-31
  80dd48:	2085c83a 	sub	r2,r4,r2
  80dd4c:	8888d83a 	srl	r4,r17,r2
  80dd50:	00800804 	movi	r2,32
  80dd54:	18802126 	beq	r3,r2,80dddc <__divdf3+0x8c4>
  80dd58:	00801004 	movi	r2,64
  80dd5c:	10c5c83a 	sub	r2,r2,r3
  80dd60:	8884983a 	sll	r2,r17,r2
  80dd64:	1204b03a 	or	r2,r2,r8
  80dd68:	1004c03a 	cmpne	r2,r2,zero
  80dd6c:	2084b03a 	or	r2,r4,r2
  80dd70:	144001cc 	andi	r17,r2,7
  80dd74:	88000d1e 	bne	r17,zero,80ddac <__divdf3+0x894>
  80dd78:	000b883a 	mov	r5,zero
  80dd7c:	1024d0fa 	srli	r18,r2,3
  80dd80:	98c0004c 	andi	r3,r19,1
  80dd84:	0005883a 	mov	r2,zero
  80dd88:	9464b03a 	or	r18,r18,r17
  80dd8c:	003e4106 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80dd90:	1007883a 	mov	r3,r2
  80dd94:	0023883a 	mov	r17,zero
  80dd98:	880a927a 	slli	r5,r17,9
  80dd9c:	1805883a 	mov	r2,r3
  80dda0:	8822977a 	slli	r17,r17,29
  80dda4:	280ad33a 	srli	r5,r5,12
  80dda8:	003ff406 	br	80dd7c <__alt_mem_onchip_mem+0xff78dd7c>
  80ddac:	10c003cc 	andi	r3,r2,15
  80ddb0:	01000104 	movi	r4,4
  80ddb4:	193ff626 	beq	r3,r4,80dd90 <__alt_mem_onchip_mem+0xff78dd90>
  80ddb8:	0023883a 	mov	r17,zero
  80ddbc:	003fca06 	br	80dce8 <__alt_mem_onchip_mem+0xff78dce8>
  80ddc0:	813fd336 	bltu	r16,r4,80dd10 <__alt_mem_onchip_mem+0xff78dd10>
  80ddc4:	1023883a 	mov	r17,r2
  80ddc8:	003fa806 	br	80dc6c <__alt_mem_onchip_mem+0xff78dc6c>
  80ddcc:	b0ffd636 	bltu	r22,r3,80dd28 <__alt_mem_onchip_mem+0xff78dd28>
  80ddd0:	1011883a 	mov	r8,r2
  80ddd4:	b0ff341e 	bne	r22,r3,80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80ddd8:	003f3406 	br	80daac <__alt_mem_onchip_mem+0xff78daac>
  80dddc:	0005883a 	mov	r2,zero
  80dde0:	003fe006 	br	80dd64 <__alt_mem_onchip_mem+0xff78dd64>
  80dde4:	00800434 	movhi	r2,16
  80dde8:	89400234 	orhi	r5,r17,8
  80ddec:	10bfffc4 	addi	r2,r2,-1
  80ddf0:	b807883a 	mov	r3,r23
  80ddf4:	288a703a 	and	r5,r5,r2
  80ddf8:	4025883a 	mov	r18,r8
  80ddfc:	003e8206 	br	80d808 <__alt_mem_onchip_mem+0xff78d808>

0080de00 <__eqdf2>:
  80de00:	2804d53a 	srli	r2,r5,20
  80de04:	3806d53a 	srli	r3,r7,20
  80de08:	02000434 	movhi	r8,16
  80de0c:	423fffc4 	addi	r8,r8,-1
  80de10:	1081ffcc 	andi	r2,r2,2047
  80de14:	0281ffc4 	movi	r10,2047
  80de18:	2a12703a 	and	r9,r5,r8
  80de1c:	18c1ffcc 	andi	r3,r3,2047
  80de20:	3a10703a 	and	r8,r7,r8
  80de24:	280ad7fa 	srli	r5,r5,31
  80de28:	380ed7fa 	srli	r7,r7,31
  80de2c:	12801026 	beq	r2,r10,80de70 <__eqdf2+0x70>
  80de30:	0281ffc4 	movi	r10,2047
  80de34:	1a800a26 	beq	r3,r10,80de60 <__eqdf2+0x60>
  80de38:	10c00226 	beq	r2,r3,80de44 <__eqdf2+0x44>
  80de3c:	00800044 	movi	r2,1
  80de40:	f800283a 	ret
  80de44:	4a3ffd1e 	bne	r9,r8,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de48:	21bffc1e 	bne	r4,r6,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de4c:	29c00c26 	beq	r5,r7,80de80 <__eqdf2+0x80>
  80de50:	103ffa1e 	bne	r2,zero,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de54:	2244b03a 	or	r2,r4,r9
  80de58:	1004c03a 	cmpne	r2,r2,zero
  80de5c:	f800283a 	ret
  80de60:	3214b03a 	or	r10,r6,r8
  80de64:	503ff426 	beq	r10,zero,80de38 <__alt_mem_onchip_mem+0xff78de38>
  80de68:	00800044 	movi	r2,1
  80de6c:	f800283a 	ret
  80de70:	2254b03a 	or	r10,r4,r9
  80de74:	503fee26 	beq	r10,zero,80de30 <__alt_mem_onchip_mem+0xff78de30>
  80de78:	00800044 	movi	r2,1
  80de7c:	f800283a 	ret
  80de80:	0005883a 	mov	r2,zero
  80de84:	f800283a 	ret

0080de88 <__gedf2>:
  80de88:	2804d53a 	srli	r2,r5,20
  80de8c:	3806d53a 	srli	r3,r7,20
  80de90:	02000434 	movhi	r8,16
  80de94:	423fffc4 	addi	r8,r8,-1
  80de98:	1081ffcc 	andi	r2,r2,2047
  80de9c:	0241ffc4 	movi	r9,2047
  80dea0:	2a14703a 	and	r10,r5,r8
  80dea4:	18c1ffcc 	andi	r3,r3,2047
  80dea8:	3a10703a 	and	r8,r7,r8
  80deac:	280ad7fa 	srli	r5,r5,31
  80deb0:	380ed7fa 	srli	r7,r7,31
  80deb4:	12401d26 	beq	r2,r9,80df2c <__gedf2+0xa4>
  80deb8:	0241ffc4 	movi	r9,2047
  80debc:	1a401226 	beq	r3,r9,80df08 <__gedf2+0x80>
  80dec0:	1000081e 	bne	r2,zero,80dee4 <__gedf2+0x5c>
  80dec4:	2296b03a 	or	r11,r4,r10
  80dec8:	5813003a 	cmpeq	r9,r11,zero
  80decc:	1800091e 	bne	r3,zero,80def4 <__gedf2+0x6c>
  80ded0:	3218b03a 	or	r12,r6,r8
  80ded4:	6000071e 	bne	r12,zero,80def4 <__gedf2+0x6c>
  80ded8:	0005883a 	mov	r2,zero
  80dedc:	5800101e 	bne	r11,zero,80df20 <__gedf2+0x98>
  80dee0:	f800283a 	ret
  80dee4:	18000c1e 	bne	r3,zero,80df18 <__gedf2+0x90>
  80dee8:	3212b03a 	or	r9,r6,r8
  80deec:	48000c26 	beq	r9,zero,80df20 <__gedf2+0x98>
  80def0:	0013883a 	mov	r9,zero
  80def4:	39c03fcc 	andi	r7,r7,255
  80def8:	48000826 	beq	r9,zero,80df1c <__gedf2+0x94>
  80defc:	38000926 	beq	r7,zero,80df24 <__gedf2+0x9c>
  80df00:	00800044 	movi	r2,1
  80df04:	f800283a 	ret
  80df08:	3212b03a 	or	r9,r6,r8
  80df0c:	483fec26 	beq	r9,zero,80dec0 <__alt_mem_onchip_mem+0xff78dec0>
  80df10:	00bfff84 	movi	r2,-2
  80df14:	f800283a 	ret
  80df18:	39c03fcc 	andi	r7,r7,255
  80df1c:	29c00626 	beq	r5,r7,80df38 <__gedf2+0xb0>
  80df20:	283ff726 	beq	r5,zero,80df00 <__alt_mem_onchip_mem+0xff78df00>
  80df24:	00bfffc4 	movi	r2,-1
  80df28:	f800283a 	ret
  80df2c:	2292b03a 	or	r9,r4,r10
  80df30:	483fe126 	beq	r9,zero,80deb8 <__alt_mem_onchip_mem+0xff78deb8>
  80df34:	003ff606 	br	80df10 <__alt_mem_onchip_mem+0xff78df10>
  80df38:	18bff916 	blt	r3,r2,80df20 <__alt_mem_onchip_mem+0xff78df20>
  80df3c:	10c00316 	blt	r2,r3,80df4c <__gedf2+0xc4>
  80df40:	42bff736 	bltu	r8,r10,80df20 <__alt_mem_onchip_mem+0xff78df20>
  80df44:	52000326 	beq	r10,r8,80df54 <__gedf2+0xcc>
  80df48:	5200042e 	bgeu	r10,r8,80df5c <__gedf2+0xd4>
  80df4c:	283fec1e 	bne	r5,zero,80df00 <__alt_mem_onchip_mem+0xff78df00>
  80df50:	003ff406 	br	80df24 <__alt_mem_onchip_mem+0xff78df24>
  80df54:	313ff236 	bltu	r6,r4,80df20 <__alt_mem_onchip_mem+0xff78df20>
  80df58:	21bffc36 	bltu	r4,r6,80df4c <__alt_mem_onchip_mem+0xff78df4c>
  80df5c:	0005883a 	mov	r2,zero
  80df60:	f800283a 	ret

0080df64 <__ledf2>:
  80df64:	2804d53a 	srli	r2,r5,20
  80df68:	3810d53a 	srli	r8,r7,20
  80df6c:	00c00434 	movhi	r3,16
  80df70:	18ffffc4 	addi	r3,r3,-1
  80df74:	1081ffcc 	andi	r2,r2,2047
  80df78:	0241ffc4 	movi	r9,2047
  80df7c:	28d4703a 	and	r10,r5,r3
  80df80:	4201ffcc 	andi	r8,r8,2047
  80df84:	38c6703a 	and	r3,r7,r3
  80df88:	280ad7fa 	srli	r5,r5,31
  80df8c:	380ed7fa 	srli	r7,r7,31
  80df90:	12401f26 	beq	r2,r9,80e010 <__ledf2+0xac>
  80df94:	0241ffc4 	movi	r9,2047
  80df98:	42401426 	beq	r8,r9,80dfec <__ledf2+0x88>
  80df9c:	1000091e 	bne	r2,zero,80dfc4 <__ledf2+0x60>
  80dfa0:	2296b03a 	or	r11,r4,r10
  80dfa4:	5813003a 	cmpeq	r9,r11,zero
  80dfa8:	29403fcc 	andi	r5,r5,255
  80dfac:	40000a1e 	bne	r8,zero,80dfd8 <__ledf2+0x74>
  80dfb0:	30d8b03a 	or	r12,r6,r3
  80dfb4:	6000081e 	bne	r12,zero,80dfd8 <__ledf2+0x74>
  80dfb8:	0005883a 	mov	r2,zero
  80dfbc:	5800111e 	bne	r11,zero,80e004 <__ledf2+0xa0>
  80dfc0:	f800283a 	ret
  80dfc4:	29403fcc 	andi	r5,r5,255
  80dfc8:	40000c1e 	bne	r8,zero,80dffc <__ledf2+0x98>
  80dfcc:	30d2b03a 	or	r9,r6,r3
  80dfd0:	48000c26 	beq	r9,zero,80e004 <__ledf2+0xa0>
  80dfd4:	0013883a 	mov	r9,zero
  80dfd8:	39c03fcc 	andi	r7,r7,255
  80dfdc:	48000826 	beq	r9,zero,80e000 <__ledf2+0x9c>
  80dfe0:	38001126 	beq	r7,zero,80e028 <__ledf2+0xc4>
  80dfe4:	00800044 	movi	r2,1
  80dfe8:	f800283a 	ret
  80dfec:	30d2b03a 	or	r9,r6,r3
  80dff0:	483fea26 	beq	r9,zero,80df9c <__alt_mem_onchip_mem+0xff78df9c>
  80dff4:	00800084 	movi	r2,2
  80dff8:	f800283a 	ret
  80dffc:	39c03fcc 	andi	r7,r7,255
  80e000:	39400726 	beq	r7,r5,80e020 <__ledf2+0xbc>
  80e004:	2800081e 	bne	r5,zero,80e028 <__ledf2+0xc4>
  80e008:	00800044 	movi	r2,1
  80e00c:	f800283a 	ret
  80e010:	2292b03a 	or	r9,r4,r10
  80e014:	483fdf26 	beq	r9,zero,80df94 <__alt_mem_onchip_mem+0xff78df94>
  80e018:	00800084 	movi	r2,2
  80e01c:	f800283a 	ret
  80e020:	4080030e 	bge	r8,r2,80e030 <__ledf2+0xcc>
  80e024:	383fef26 	beq	r7,zero,80dfe4 <__alt_mem_onchip_mem+0xff78dfe4>
  80e028:	00bfffc4 	movi	r2,-1
  80e02c:	f800283a 	ret
  80e030:	123feb16 	blt	r2,r8,80dfe0 <__alt_mem_onchip_mem+0xff78dfe0>
  80e034:	1abff336 	bltu	r3,r10,80e004 <__alt_mem_onchip_mem+0xff78e004>
  80e038:	50c00326 	beq	r10,r3,80e048 <__ledf2+0xe4>
  80e03c:	50c0042e 	bgeu	r10,r3,80e050 <__ledf2+0xec>
  80e040:	283fe81e 	bne	r5,zero,80dfe4 <__alt_mem_onchip_mem+0xff78dfe4>
  80e044:	003ff806 	br	80e028 <__alt_mem_onchip_mem+0xff78e028>
  80e048:	313fee36 	bltu	r6,r4,80e004 <__alt_mem_onchip_mem+0xff78e004>
  80e04c:	21bffc36 	bltu	r4,r6,80e040 <__alt_mem_onchip_mem+0xff78e040>
  80e050:	0005883a 	mov	r2,zero
  80e054:	f800283a 	ret

0080e058 <__muldf3>:
  80e058:	defff304 	addi	sp,sp,-52
  80e05c:	2804d53a 	srli	r2,r5,20
  80e060:	dd800915 	stw	r22,36(sp)
  80e064:	282cd7fa 	srli	r22,r5,31
  80e068:	dc000315 	stw	r16,12(sp)
  80e06c:	04000434 	movhi	r16,16
  80e070:	dd400815 	stw	r21,32(sp)
  80e074:	dc800515 	stw	r18,20(sp)
  80e078:	843fffc4 	addi	r16,r16,-1
  80e07c:	dfc00c15 	stw	ra,48(sp)
  80e080:	df000b15 	stw	fp,44(sp)
  80e084:	ddc00a15 	stw	r23,40(sp)
  80e088:	dd000715 	stw	r20,28(sp)
  80e08c:	dcc00615 	stw	r19,24(sp)
  80e090:	dc400415 	stw	r17,16(sp)
  80e094:	1481ffcc 	andi	r18,r2,2047
  80e098:	2c20703a 	and	r16,r5,r16
  80e09c:	b02b883a 	mov	r21,r22
  80e0a0:	b2403fcc 	andi	r9,r22,255
  80e0a4:	90006026 	beq	r18,zero,80e228 <__muldf3+0x1d0>
  80e0a8:	0081ffc4 	movi	r2,2047
  80e0ac:	2029883a 	mov	r20,r4
  80e0b0:	90803626 	beq	r18,r2,80e18c <__muldf3+0x134>
  80e0b4:	80800434 	orhi	r2,r16,16
  80e0b8:	100490fa 	slli	r2,r2,3
  80e0bc:	2020d77a 	srli	r16,r4,29
  80e0c0:	202890fa 	slli	r20,r4,3
  80e0c4:	94bf0044 	addi	r18,r18,-1023
  80e0c8:	80a0b03a 	or	r16,r16,r2
  80e0cc:	0027883a 	mov	r19,zero
  80e0d0:	0039883a 	mov	fp,zero
  80e0d4:	3804d53a 	srli	r2,r7,20
  80e0d8:	382ed7fa 	srli	r23,r7,31
  80e0dc:	04400434 	movhi	r17,16
  80e0e0:	8c7fffc4 	addi	r17,r17,-1
  80e0e4:	1081ffcc 	andi	r2,r2,2047
  80e0e8:	3011883a 	mov	r8,r6
  80e0ec:	3c62703a 	and	r17,r7,r17
  80e0f0:	ba803fcc 	andi	r10,r23,255
  80e0f4:	10006d26 	beq	r2,zero,80e2ac <__muldf3+0x254>
  80e0f8:	00c1ffc4 	movi	r3,2047
  80e0fc:	10c06526 	beq	r2,r3,80e294 <__muldf3+0x23c>
  80e100:	88c00434 	orhi	r3,r17,16
  80e104:	180690fa 	slli	r3,r3,3
  80e108:	3022d77a 	srli	r17,r6,29
  80e10c:	301090fa 	slli	r8,r6,3
  80e110:	10bf0044 	addi	r2,r2,-1023
  80e114:	88e2b03a 	or	r17,r17,r3
  80e118:	000b883a 	mov	r5,zero
  80e11c:	9085883a 	add	r2,r18,r2
  80e120:	2cc8b03a 	or	r4,r5,r19
  80e124:	00c003c4 	movi	r3,15
  80e128:	bdacf03a 	xor	r22,r23,r22
  80e12c:	12c00044 	addi	r11,r2,1
  80e130:	19009936 	bltu	r3,r4,80e398 <__muldf3+0x340>
  80e134:	200890ba 	slli	r4,r4,2
  80e138:	00c02074 	movhi	r3,129
  80e13c:	18f85304 	addi	r3,r3,-7860
  80e140:	20c9883a 	add	r4,r4,r3
  80e144:	20c00017 	ldw	r3,0(r4)
  80e148:	1800683a 	jmp	r3
  80e14c:	0080e398 	cmpnei	r2,zero,910
  80e150:	0080e1ac 	andhi	r2,zero,902
  80e154:	0080e1ac 	andhi	r2,zero,902
  80e158:	0080e1a8 	cmpgeui	r2,zero,902
  80e15c:	0080e374 	movhi	r2,909
  80e160:	0080e374 	movhi	r2,909
  80e164:	0080e35c 	xori	r2,zero,909
  80e168:	0080e1a8 	cmpgeui	r2,zero,902
  80e16c:	0080e374 	movhi	r2,909
  80e170:	0080e35c 	xori	r2,zero,909
  80e174:	0080e374 	movhi	r2,909
  80e178:	0080e1a8 	cmpgeui	r2,zero,902
  80e17c:	0080e384 	movi	r2,910
  80e180:	0080e384 	movi	r2,910
  80e184:	0080e384 	movi	r2,910
  80e188:	0080e5a0 	cmpeqi	r2,zero,918
  80e18c:	2404b03a 	or	r2,r4,r16
  80e190:	10006f1e 	bne	r2,zero,80e350 <__muldf3+0x2f8>
  80e194:	04c00204 	movi	r19,8
  80e198:	0021883a 	mov	r16,zero
  80e19c:	0029883a 	mov	r20,zero
  80e1a0:	07000084 	movi	fp,2
  80e1a4:	003fcb06 	br	80e0d4 <__alt_mem_onchip_mem+0xff78e0d4>
  80e1a8:	502d883a 	mov	r22,r10
  80e1ac:	00800084 	movi	r2,2
  80e1b0:	28805726 	beq	r5,r2,80e310 <__muldf3+0x2b8>
  80e1b4:	008000c4 	movi	r2,3
  80e1b8:	28816626 	beq	r5,r2,80e754 <__muldf3+0x6fc>
  80e1bc:	00800044 	movi	r2,1
  80e1c0:	2881411e 	bne	r5,r2,80e6c8 <__muldf3+0x670>
  80e1c4:	b02b883a 	mov	r21,r22
  80e1c8:	0005883a 	mov	r2,zero
  80e1cc:	000b883a 	mov	r5,zero
  80e1d0:	0029883a 	mov	r20,zero
  80e1d4:	1004953a 	slli	r2,r2,20
  80e1d8:	a8c03fcc 	andi	r3,r21,255
  80e1dc:	04400434 	movhi	r17,16
  80e1e0:	8c7fffc4 	addi	r17,r17,-1
  80e1e4:	180697fa 	slli	r3,r3,31
  80e1e8:	2c4a703a 	and	r5,r5,r17
  80e1ec:	288ab03a 	or	r5,r5,r2
  80e1f0:	28c6b03a 	or	r3,r5,r3
  80e1f4:	a005883a 	mov	r2,r20
  80e1f8:	dfc00c17 	ldw	ra,48(sp)
  80e1fc:	df000b17 	ldw	fp,44(sp)
  80e200:	ddc00a17 	ldw	r23,40(sp)
  80e204:	dd800917 	ldw	r22,36(sp)
  80e208:	dd400817 	ldw	r21,32(sp)
  80e20c:	dd000717 	ldw	r20,28(sp)
  80e210:	dcc00617 	ldw	r19,24(sp)
  80e214:	dc800517 	ldw	r18,20(sp)
  80e218:	dc400417 	ldw	r17,16(sp)
  80e21c:	dc000317 	ldw	r16,12(sp)
  80e220:	dec00d04 	addi	sp,sp,52
  80e224:	f800283a 	ret
  80e228:	2404b03a 	or	r2,r4,r16
  80e22c:	2027883a 	mov	r19,r4
  80e230:	10004226 	beq	r2,zero,80e33c <__muldf3+0x2e4>
  80e234:	8000fc26 	beq	r16,zero,80e628 <__muldf3+0x5d0>
  80e238:	8009883a 	mov	r4,r16
  80e23c:	d9800215 	stw	r6,8(sp)
  80e240:	d9c00015 	stw	r7,0(sp)
  80e244:	da400115 	stw	r9,4(sp)
  80e248:	080f2700 	call	80f270 <__clzsi2>
  80e24c:	d9800217 	ldw	r6,8(sp)
  80e250:	d9c00017 	ldw	r7,0(sp)
  80e254:	da400117 	ldw	r9,4(sp)
  80e258:	113ffd44 	addi	r4,r2,-11
  80e25c:	00c00704 	movi	r3,28
  80e260:	1900ed16 	blt	r3,r4,80e618 <__muldf3+0x5c0>
  80e264:	00c00744 	movi	r3,29
  80e268:	147ffe04 	addi	r17,r2,-8
  80e26c:	1907c83a 	sub	r3,r3,r4
  80e270:	8460983a 	sll	r16,r16,r17
  80e274:	98c6d83a 	srl	r3,r19,r3
  80e278:	9c68983a 	sll	r20,r19,r17
  80e27c:	1c20b03a 	or	r16,r3,r16
  80e280:	1080fcc4 	addi	r2,r2,1011
  80e284:	00a5c83a 	sub	r18,zero,r2
  80e288:	0027883a 	mov	r19,zero
  80e28c:	0039883a 	mov	fp,zero
  80e290:	003f9006 	br	80e0d4 <__alt_mem_onchip_mem+0xff78e0d4>
  80e294:	3446b03a 	or	r3,r6,r17
  80e298:	1800261e 	bne	r3,zero,80e334 <__muldf3+0x2dc>
  80e29c:	0023883a 	mov	r17,zero
  80e2a0:	0011883a 	mov	r8,zero
  80e2a4:	01400084 	movi	r5,2
  80e2a8:	003f9c06 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e2ac:	3446b03a 	or	r3,r6,r17
  80e2b0:	18001c26 	beq	r3,zero,80e324 <__muldf3+0x2cc>
  80e2b4:	8800ce26 	beq	r17,zero,80e5f0 <__muldf3+0x598>
  80e2b8:	8809883a 	mov	r4,r17
  80e2bc:	d9800215 	stw	r6,8(sp)
  80e2c0:	da400115 	stw	r9,4(sp)
  80e2c4:	da800015 	stw	r10,0(sp)
  80e2c8:	080f2700 	call	80f270 <__clzsi2>
  80e2cc:	d9800217 	ldw	r6,8(sp)
  80e2d0:	da400117 	ldw	r9,4(sp)
  80e2d4:	da800017 	ldw	r10,0(sp)
  80e2d8:	113ffd44 	addi	r4,r2,-11
  80e2dc:	00c00704 	movi	r3,28
  80e2e0:	1900bf16 	blt	r3,r4,80e5e0 <__muldf3+0x588>
  80e2e4:	00c00744 	movi	r3,29
  80e2e8:	123ffe04 	addi	r8,r2,-8
  80e2ec:	1907c83a 	sub	r3,r3,r4
  80e2f0:	8a22983a 	sll	r17,r17,r8
  80e2f4:	30c6d83a 	srl	r3,r6,r3
  80e2f8:	3210983a 	sll	r8,r6,r8
  80e2fc:	1c62b03a 	or	r17,r3,r17
  80e300:	1080fcc4 	addi	r2,r2,1011
  80e304:	0085c83a 	sub	r2,zero,r2
  80e308:	000b883a 	mov	r5,zero
  80e30c:	003f8306 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e310:	b02b883a 	mov	r21,r22
  80e314:	0081ffc4 	movi	r2,2047
  80e318:	000b883a 	mov	r5,zero
  80e31c:	0029883a 	mov	r20,zero
  80e320:	003fac06 	br	80e1d4 <__alt_mem_onchip_mem+0xff78e1d4>
  80e324:	0023883a 	mov	r17,zero
  80e328:	0011883a 	mov	r8,zero
  80e32c:	01400044 	movi	r5,1
  80e330:	003f7a06 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e334:	014000c4 	movi	r5,3
  80e338:	003f7806 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e33c:	04c00104 	movi	r19,4
  80e340:	0021883a 	mov	r16,zero
  80e344:	0029883a 	mov	r20,zero
  80e348:	07000044 	movi	fp,1
  80e34c:	003f6106 	br	80e0d4 <__alt_mem_onchip_mem+0xff78e0d4>
  80e350:	04c00304 	movi	r19,12
  80e354:	070000c4 	movi	fp,3
  80e358:	003f5e06 	br	80e0d4 <__alt_mem_onchip_mem+0xff78e0d4>
  80e35c:	01400434 	movhi	r5,16
  80e360:	002b883a 	mov	r21,zero
  80e364:	297fffc4 	addi	r5,r5,-1
  80e368:	053fffc4 	movi	r20,-1
  80e36c:	0081ffc4 	movi	r2,2047
  80e370:	003f9806 	br	80e1d4 <__alt_mem_onchip_mem+0xff78e1d4>
  80e374:	8023883a 	mov	r17,r16
  80e378:	a011883a 	mov	r8,r20
  80e37c:	e00b883a 	mov	r5,fp
  80e380:	003f8a06 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e384:	8023883a 	mov	r17,r16
  80e388:	a011883a 	mov	r8,r20
  80e38c:	482d883a 	mov	r22,r9
  80e390:	e00b883a 	mov	r5,fp
  80e394:	003f8506 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e398:	a00ad43a 	srli	r5,r20,16
  80e39c:	401ad43a 	srli	r13,r8,16
  80e3a0:	a53fffcc 	andi	r20,r20,65535
  80e3a4:	423fffcc 	andi	r8,r8,65535
  80e3a8:	4519383a 	mul	r12,r8,r20
  80e3ac:	4147383a 	mul	r3,r8,r5
  80e3b0:	6d09383a 	mul	r4,r13,r20
  80e3b4:	600cd43a 	srli	r6,r12,16
  80e3b8:	2b5d383a 	mul	r14,r5,r13
  80e3bc:	20c9883a 	add	r4,r4,r3
  80e3c0:	310d883a 	add	r6,r6,r4
  80e3c4:	30c0022e 	bgeu	r6,r3,80e3d0 <__muldf3+0x378>
  80e3c8:	00c00074 	movhi	r3,1
  80e3cc:	70dd883a 	add	r14,r14,r3
  80e3d0:	8826d43a 	srli	r19,r17,16
  80e3d4:	8bffffcc 	andi	r15,r17,65535
  80e3d8:	7d23383a 	mul	r17,r15,r20
  80e3dc:	7949383a 	mul	r4,r15,r5
  80e3e0:	9d29383a 	mul	r20,r19,r20
  80e3e4:	8814d43a 	srli	r10,r17,16
  80e3e8:	3012943a 	slli	r9,r6,16
  80e3ec:	a129883a 	add	r20,r20,r4
  80e3f0:	633fffcc 	andi	r12,r12,65535
  80e3f4:	5515883a 	add	r10,r10,r20
  80e3f8:	3006d43a 	srli	r3,r6,16
  80e3fc:	4b13883a 	add	r9,r9,r12
  80e400:	2ccb383a 	mul	r5,r5,r19
  80e404:	5100022e 	bgeu	r10,r4,80e410 <__muldf3+0x3b8>
  80e408:	01000074 	movhi	r4,1
  80e40c:	290b883a 	add	r5,r5,r4
  80e410:	802ad43a 	srli	r21,r16,16
  80e414:	843fffcc 	andi	r16,r16,65535
  80e418:	440d383a 	mul	r6,r8,r16
  80e41c:	4565383a 	mul	r18,r8,r21
  80e420:	8349383a 	mul	r4,r16,r13
  80e424:	500e943a 	slli	r7,r10,16
  80e428:	3010d43a 	srli	r8,r6,16
  80e42c:	5028d43a 	srli	r20,r10,16
  80e430:	2489883a 	add	r4,r4,r18
  80e434:	8abfffcc 	andi	r10,r17,65535
  80e438:	3a95883a 	add	r10,r7,r10
  80e43c:	4119883a 	add	r12,r8,r4
  80e440:	a169883a 	add	r20,r20,r5
  80e444:	1a87883a 	add	r3,r3,r10
  80e448:	6d5b383a 	mul	r13,r13,r21
  80e44c:	6480022e 	bgeu	r12,r18,80e458 <__muldf3+0x400>
  80e450:	01000074 	movhi	r4,1
  80e454:	691b883a 	add	r13,r13,r4
  80e458:	7c25383a 	mul	r18,r15,r16
  80e45c:	7d4b383a 	mul	r5,r15,r21
  80e460:	84cf383a 	mul	r7,r16,r19
  80e464:	901ed43a 	srli	r15,r18,16
  80e468:	6008d43a 	srli	r4,r12,16
  80e46c:	6010943a 	slli	r8,r12,16
  80e470:	394f883a 	add	r7,r7,r5
  80e474:	333fffcc 	andi	r12,r6,65535
  80e478:	79df883a 	add	r15,r15,r7
  80e47c:	235b883a 	add	r13,r4,r13
  80e480:	9d63383a 	mul	r17,r19,r21
  80e484:	4309883a 	add	r4,r8,r12
  80e488:	7940022e 	bgeu	r15,r5,80e494 <__muldf3+0x43c>
  80e48c:	01400074 	movhi	r5,1
  80e490:	8963883a 	add	r17,r17,r5
  80e494:	780a943a 	slli	r5,r15,16
  80e498:	91bfffcc 	andi	r6,r18,65535
  80e49c:	70c7883a 	add	r3,r14,r3
  80e4a0:	298d883a 	add	r6,r5,r6
  80e4a4:	1a8f803a 	cmpltu	r7,r3,r10
  80e4a8:	350b883a 	add	r5,r6,r20
  80e4ac:	20c7883a 	add	r3,r4,r3
  80e4b0:	3955883a 	add	r10,r7,r5
  80e4b4:	1909803a 	cmpltu	r4,r3,r4
  80e4b8:	6a91883a 	add	r8,r13,r10
  80e4bc:	780cd43a 	srli	r6,r15,16
  80e4c0:	2219883a 	add	r12,r4,r8
  80e4c4:	2d0b803a 	cmpltu	r5,r5,r20
  80e4c8:	51cf803a 	cmpltu	r7,r10,r7
  80e4cc:	29ceb03a 	or	r7,r5,r7
  80e4d0:	4351803a 	cmpltu	r8,r8,r13
  80e4d4:	610b803a 	cmpltu	r5,r12,r4
  80e4d8:	4148b03a 	or	r4,r8,r5
  80e4dc:	398f883a 	add	r7,r7,r6
  80e4e0:	3909883a 	add	r4,r7,r4
  80e4e4:	1810927a 	slli	r8,r3,9
  80e4e8:	2449883a 	add	r4,r4,r17
  80e4ec:	2008927a 	slli	r4,r4,9
  80e4f0:	6022d5fa 	srli	r17,r12,23
  80e4f4:	1806d5fa 	srli	r3,r3,23
  80e4f8:	4252b03a 	or	r9,r8,r9
  80e4fc:	600a927a 	slli	r5,r12,9
  80e500:	4810c03a 	cmpne	r8,r9,zero
  80e504:	2462b03a 	or	r17,r4,r17
  80e508:	40c6b03a 	or	r3,r8,r3
  80e50c:	8900402c 	andhi	r4,r17,256
  80e510:	1950b03a 	or	r8,r3,r5
  80e514:	20000726 	beq	r4,zero,80e534 <__muldf3+0x4dc>
  80e518:	4006d07a 	srli	r3,r8,1
  80e51c:	880497fa 	slli	r2,r17,31
  80e520:	4200004c 	andi	r8,r8,1
  80e524:	8822d07a 	srli	r17,r17,1
  80e528:	1a10b03a 	or	r8,r3,r8
  80e52c:	1210b03a 	or	r8,r2,r8
  80e530:	5805883a 	mov	r2,r11
  80e534:	1140ffc4 	addi	r5,r2,1023
  80e538:	0140440e 	bge	zero,r5,80e64c <__muldf3+0x5f4>
  80e53c:	40c001cc 	andi	r3,r8,7
  80e540:	18000726 	beq	r3,zero,80e560 <__muldf3+0x508>
  80e544:	40c003cc 	andi	r3,r8,15
  80e548:	01000104 	movi	r4,4
  80e54c:	19000426 	beq	r3,r4,80e560 <__muldf3+0x508>
  80e550:	4107883a 	add	r3,r8,r4
  80e554:	1a11803a 	cmpltu	r8,r3,r8
  80e558:	8a23883a 	add	r17,r17,r8
  80e55c:	1811883a 	mov	r8,r3
  80e560:	88c0402c 	andhi	r3,r17,256
  80e564:	18000426 	beq	r3,zero,80e578 <__muldf3+0x520>
  80e568:	11410004 	addi	r5,r2,1024
  80e56c:	00bfc034 	movhi	r2,65280
  80e570:	10bfffc4 	addi	r2,r2,-1
  80e574:	88a2703a 	and	r17,r17,r2
  80e578:	0081ff84 	movi	r2,2046
  80e57c:	117f6416 	blt	r2,r5,80e310 <__alt_mem_onchip_mem+0xff78e310>
  80e580:	8828977a 	slli	r20,r17,29
  80e584:	4010d0fa 	srli	r8,r8,3
  80e588:	8822927a 	slli	r17,r17,9
  80e58c:	2881ffcc 	andi	r2,r5,2047
  80e590:	a228b03a 	or	r20,r20,r8
  80e594:	880ad33a 	srli	r5,r17,12
  80e598:	b02b883a 	mov	r21,r22
  80e59c:	003f0d06 	br	80e1d4 <__alt_mem_onchip_mem+0xff78e1d4>
  80e5a0:	8080022c 	andhi	r2,r16,8
  80e5a4:	10000926 	beq	r2,zero,80e5cc <__muldf3+0x574>
  80e5a8:	8880022c 	andhi	r2,r17,8
  80e5ac:	1000071e 	bne	r2,zero,80e5cc <__muldf3+0x574>
  80e5b0:	00800434 	movhi	r2,16
  80e5b4:	89400234 	orhi	r5,r17,8
  80e5b8:	10bfffc4 	addi	r2,r2,-1
  80e5bc:	b82b883a 	mov	r21,r23
  80e5c0:	288a703a 	and	r5,r5,r2
  80e5c4:	4029883a 	mov	r20,r8
  80e5c8:	003f6806 	br	80e36c <__alt_mem_onchip_mem+0xff78e36c>
  80e5cc:	00800434 	movhi	r2,16
  80e5d0:	81400234 	orhi	r5,r16,8
  80e5d4:	10bfffc4 	addi	r2,r2,-1
  80e5d8:	288a703a 	and	r5,r5,r2
  80e5dc:	003f6306 	br	80e36c <__alt_mem_onchip_mem+0xff78e36c>
  80e5e0:	147ff604 	addi	r17,r2,-40
  80e5e4:	3462983a 	sll	r17,r6,r17
  80e5e8:	0011883a 	mov	r8,zero
  80e5ec:	003f4406 	br	80e300 <__alt_mem_onchip_mem+0xff78e300>
  80e5f0:	3009883a 	mov	r4,r6
  80e5f4:	d9800215 	stw	r6,8(sp)
  80e5f8:	da400115 	stw	r9,4(sp)
  80e5fc:	da800015 	stw	r10,0(sp)
  80e600:	080f2700 	call	80f270 <__clzsi2>
  80e604:	10800804 	addi	r2,r2,32
  80e608:	da800017 	ldw	r10,0(sp)
  80e60c:	da400117 	ldw	r9,4(sp)
  80e610:	d9800217 	ldw	r6,8(sp)
  80e614:	003f3006 	br	80e2d8 <__alt_mem_onchip_mem+0xff78e2d8>
  80e618:	143ff604 	addi	r16,r2,-40
  80e61c:	9c20983a 	sll	r16,r19,r16
  80e620:	0029883a 	mov	r20,zero
  80e624:	003f1606 	br	80e280 <__alt_mem_onchip_mem+0xff78e280>
  80e628:	d9800215 	stw	r6,8(sp)
  80e62c:	d9c00015 	stw	r7,0(sp)
  80e630:	da400115 	stw	r9,4(sp)
  80e634:	080f2700 	call	80f270 <__clzsi2>
  80e638:	10800804 	addi	r2,r2,32
  80e63c:	da400117 	ldw	r9,4(sp)
  80e640:	d9c00017 	ldw	r7,0(sp)
  80e644:	d9800217 	ldw	r6,8(sp)
  80e648:	003f0306 	br	80e258 <__alt_mem_onchip_mem+0xff78e258>
  80e64c:	00c00044 	movi	r3,1
  80e650:	1947c83a 	sub	r3,r3,r5
  80e654:	00800e04 	movi	r2,56
  80e658:	10feda16 	blt	r2,r3,80e1c4 <__alt_mem_onchip_mem+0xff78e1c4>
  80e65c:	008007c4 	movi	r2,31
  80e660:	10c01b16 	blt	r2,r3,80e6d0 <__muldf3+0x678>
  80e664:	00800804 	movi	r2,32
  80e668:	10c5c83a 	sub	r2,r2,r3
  80e66c:	888a983a 	sll	r5,r17,r2
  80e670:	40c8d83a 	srl	r4,r8,r3
  80e674:	4084983a 	sll	r2,r8,r2
  80e678:	88e2d83a 	srl	r17,r17,r3
  80e67c:	2906b03a 	or	r3,r5,r4
  80e680:	1004c03a 	cmpne	r2,r2,zero
  80e684:	1886b03a 	or	r3,r3,r2
  80e688:	188001cc 	andi	r2,r3,7
  80e68c:	10000726 	beq	r2,zero,80e6ac <__muldf3+0x654>
  80e690:	188003cc 	andi	r2,r3,15
  80e694:	01000104 	movi	r4,4
  80e698:	11000426 	beq	r2,r4,80e6ac <__muldf3+0x654>
  80e69c:	1805883a 	mov	r2,r3
  80e6a0:	10c00104 	addi	r3,r2,4
  80e6a4:	1885803a 	cmpltu	r2,r3,r2
  80e6a8:	88a3883a 	add	r17,r17,r2
  80e6ac:	8880202c 	andhi	r2,r17,128
  80e6b0:	10001c26 	beq	r2,zero,80e724 <__muldf3+0x6cc>
  80e6b4:	b02b883a 	mov	r21,r22
  80e6b8:	00800044 	movi	r2,1
  80e6bc:	000b883a 	mov	r5,zero
  80e6c0:	0029883a 	mov	r20,zero
  80e6c4:	003ec306 	br	80e1d4 <__alt_mem_onchip_mem+0xff78e1d4>
  80e6c8:	5805883a 	mov	r2,r11
  80e6cc:	003f9906 	br	80e534 <__alt_mem_onchip_mem+0xff78e534>
  80e6d0:	00bff844 	movi	r2,-31
  80e6d4:	1145c83a 	sub	r2,r2,r5
  80e6d8:	8888d83a 	srl	r4,r17,r2
  80e6dc:	00800804 	movi	r2,32
  80e6e0:	18801a26 	beq	r3,r2,80e74c <__muldf3+0x6f4>
  80e6e4:	00801004 	movi	r2,64
  80e6e8:	10c5c83a 	sub	r2,r2,r3
  80e6ec:	8884983a 	sll	r2,r17,r2
  80e6f0:	1204b03a 	or	r2,r2,r8
  80e6f4:	1004c03a 	cmpne	r2,r2,zero
  80e6f8:	2084b03a 	or	r2,r4,r2
  80e6fc:	144001cc 	andi	r17,r2,7
  80e700:	88000d1e 	bne	r17,zero,80e738 <__muldf3+0x6e0>
  80e704:	000b883a 	mov	r5,zero
  80e708:	1028d0fa 	srli	r20,r2,3
  80e70c:	b02b883a 	mov	r21,r22
  80e710:	0005883a 	mov	r2,zero
  80e714:	a468b03a 	or	r20,r20,r17
  80e718:	003eae06 	br	80e1d4 <__alt_mem_onchip_mem+0xff78e1d4>
  80e71c:	1007883a 	mov	r3,r2
  80e720:	0023883a 	mov	r17,zero
  80e724:	880a927a 	slli	r5,r17,9
  80e728:	1805883a 	mov	r2,r3
  80e72c:	8822977a 	slli	r17,r17,29
  80e730:	280ad33a 	srli	r5,r5,12
  80e734:	003ff406 	br	80e708 <__alt_mem_onchip_mem+0xff78e708>
  80e738:	10c003cc 	andi	r3,r2,15
  80e73c:	01000104 	movi	r4,4
  80e740:	193ff626 	beq	r3,r4,80e71c <__alt_mem_onchip_mem+0xff78e71c>
  80e744:	0023883a 	mov	r17,zero
  80e748:	003fd506 	br	80e6a0 <__alt_mem_onchip_mem+0xff78e6a0>
  80e74c:	0005883a 	mov	r2,zero
  80e750:	003fe706 	br	80e6f0 <__alt_mem_onchip_mem+0xff78e6f0>
  80e754:	00800434 	movhi	r2,16
  80e758:	89400234 	orhi	r5,r17,8
  80e75c:	10bfffc4 	addi	r2,r2,-1
  80e760:	b02b883a 	mov	r21,r22
  80e764:	288a703a 	and	r5,r5,r2
  80e768:	4029883a 	mov	r20,r8
  80e76c:	003eff06 	br	80e36c <__alt_mem_onchip_mem+0xff78e36c>

0080e770 <__subdf3>:
  80e770:	02000434 	movhi	r8,16
  80e774:	423fffc4 	addi	r8,r8,-1
  80e778:	defffb04 	addi	sp,sp,-20
  80e77c:	2a14703a 	and	r10,r5,r8
  80e780:	3812d53a 	srli	r9,r7,20
  80e784:	3a10703a 	and	r8,r7,r8
  80e788:	2006d77a 	srli	r3,r4,29
  80e78c:	3004d77a 	srli	r2,r6,29
  80e790:	dc000015 	stw	r16,0(sp)
  80e794:	501490fa 	slli	r10,r10,3
  80e798:	2820d53a 	srli	r16,r5,20
  80e79c:	401090fa 	slli	r8,r8,3
  80e7a0:	dc800215 	stw	r18,8(sp)
  80e7a4:	dc400115 	stw	r17,4(sp)
  80e7a8:	dfc00415 	stw	ra,16(sp)
  80e7ac:	202290fa 	slli	r17,r4,3
  80e7b0:	dcc00315 	stw	r19,12(sp)
  80e7b4:	4a41ffcc 	andi	r9,r9,2047
  80e7b8:	0101ffc4 	movi	r4,2047
  80e7bc:	2824d7fa 	srli	r18,r5,31
  80e7c0:	8401ffcc 	andi	r16,r16,2047
  80e7c4:	50c6b03a 	or	r3,r10,r3
  80e7c8:	380ed7fa 	srli	r7,r7,31
  80e7cc:	408ab03a 	or	r5,r8,r2
  80e7d0:	300c90fa 	slli	r6,r6,3
  80e7d4:	49009626 	beq	r9,r4,80ea30 <__subdf3+0x2c0>
  80e7d8:	39c0005c 	xori	r7,r7,1
  80e7dc:	8245c83a 	sub	r2,r16,r9
  80e7e0:	3c807426 	beq	r7,r18,80e9b4 <__subdf3+0x244>
  80e7e4:	0080af0e 	bge	zero,r2,80eaa4 <__subdf3+0x334>
  80e7e8:	48002a1e 	bne	r9,zero,80e894 <__subdf3+0x124>
  80e7ec:	2988b03a 	or	r4,r5,r6
  80e7f0:	20009a1e 	bne	r4,zero,80ea5c <__subdf3+0x2ec>
  80e7f4:	888001cc 	andi	r2,r17,7
  80e7f8:	10000726 	beq	r2,zero,80e818 <__subdf3+0xa8>
  80e7fc:	888003cc 	andi	r2,r17,15
  80e800:	01000104 	movi	r4,4
  80e804:	11000426 	beq	r2,r4,80e818 <__subdf3+0xa8>
  80e808:	890b883a 	add	r5,r17,r4
  80e80c:	2c63803a 	cmpltu	r17,r5,r17
  80e810:	1c47883a 	add	r3,r3,r17
  80e814:	2823883a 	mov	r17,r5
  80e818:	1880202c 	andhi	r2,r3,128
  80e81c:	10005926 	beq	r2,zero,80e984 <__subdf3+0x214>
  80e820:	84000044 	addi	r16,r16,1
  80e824:	0081ffc4 	movi	r2,2047
  80e828:	8080be26 	beq	r16,r2,80eb24 <__subdf3+0x3b4>
  80e82c:	017fe034 	movhi	r5,65408
  80e830:	297fffc4 	addi	r5,r5,-1
  80e834:	1946703a 	and	r3,r3,r5
  80e838:	1804977a 	slli	r2,r3,29
  80e83c:	1806927a 	slli	r3,r3,9
  80e840:	8822d0fa 	srli	r17,r17,3
  80e844:	8401ffcc 	andi	r16,r16,2047
  80e848:	180ad33a 	srli	r5,r3,12
  80e84c:	9100004c 	andi	r4,r18,1
  80e850:	1444b03a 	or	r2,r2,r17
  80e854:	80c1ffcc 	andi	r3,r16,2047
  80e858:	1820953a 	slli	r16,r3,20
  80e85c:	20c03fcc 	andi	r3,r4,255
  80e860:	180897fa 	slli	r4,r3,31
  80e864:	00c00434 	movhi	r3,16
  80e868:	18ffffc4 	addi	r3,r3,-1
  80e86c:	28c6703a 	and	r3,r5,r3
  80e870:	1c06b03a 	or	r3,r3,r16
  80e874:	1906b03a 	or	r3,r3,r4
  80e878:	dfc00417 	ldw	ra,16(sp)
  80e87c:	dcc00317 	ldw	r19,12(sp)
  80e880:	dc800217 	ldw	r18,8(sp)
  80e884:	dc400117 	ldw	r17,4(sp)
  80e888:	dc000017 	ldw	r16,0(sp)
  80e88c:	dec00504 	addi	sp,sp,20
  80e890:	f800283a 	ret
  80e894:	0101ffc4 	movi	r4,2047
  80e898:	813fd626 	beq	r16,r4,80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80e89c:	29402034 	orhi	r5,r5,128
  80e8a0:	01000e04 	movi	r4,56
  80e8a4:	2080a316 	blt	r4,r2,80eb34 <__subdf3+0x3c4>
  80e8a8:	010007c4 	movi	r4,31
  80e8ac:	2080c616 	blt	r4,r2,80ebc8 <__subdf3+0x458>
  80e8b0:	01000804 	movi	r4,32
  80e8b4:	2089c83a 	sub	r4,r4,r2
  80e8b8:	2910983a 	sll	r8,r5,r4
  80e8bc:	308ed83a 	srl	r7,r6,r2
  80e8c0:	3108983a 	sll	r4,r6,r4
  80e8c4:	2884d83a 	srl	r2,r5,r2
  80e8c8:	41ccb03a 	or	r6,r8,r7
  80e8cc:	2008c03a 	cmpne	r4,r4,zero
  80e8d0:	310cb03a 	or	r6,r6,r4
  80e8d4:	898dc83a 	sub	r6,r17,r6
  80e8d8:	89a3803a 	cmpltu	r17,r17,r6
  80e8dc:	1887c83a 	sub	r3,r3,r2
  80e8e0:	1c47c83a 	sub	r3,r3,r17
  80e8e4:	3023883a 	mov	r17,r6
  80e8e8:	1880202c 	andhi	r2,r3,128
  80e8ec:	10002326 	beq	r2,zero,80e97c <__subdf3+0x20c>
  80e8f0:	04c02034 	movhi	r19,128
  80e8f4:	9cffffc4 	addi	r19,r19,-1
  80e8f8:	1ce6703a 	and	r19,r3,r19
  80e8fc:	98007a26 	beq	r19,zero,80eae8 <__subdf3+0x378>
  80e900:	9809883a 	mov	r4,r19
  80e904:	080f2700 	call	80f270 <__clzsi2>
  80e908:	113ffe04 	addi	r4,r2,-8
  80e90c:	00c007c4 	movi	r3,31
  80e910:	19007b16 	blt	r3,r4,80eb00 <__subdf3+0x390>
  80e914:	00800804 	movi	r2,32
  80e918:	1105c83a 	sub	r2,r2,r4
  80e91c:	8884d83a 	srl	r2,r17,r2
  80e920:	9906983a 	sll	r3,r19,r4
  80e924:	8922983a 	sll	r17,r17,r4
  80e928:	10c4b03a 	or	r2,r2,r3
  80e92c:	24007816 	blt	r4,r16,80eb10 <__subdf3+0x3a0>
  80e930:	2421c83a 	sub	r16,r4,r16
  80e934:	80c00044 	addi	r3,r16,1
  80e938:	010007c4 	movi	r4,31
  80e93c:	20c09516 	blt	r4,r3,80eb94 <__subdf3+0x424>
  80e940:	01400804 	movi	r5,32
  80e944:	28cbc83a 	sub	r5,r5,r3
  80e948:	88c8d83a 	srl	r4,r17,r3
  80e94c:	8962983a 	sll	r17,r17,r5
  80e950:	114a983a 	sll	r5,r2,r5
  80e954:	10c6d83a 	srl	r3,r2,r3
  80e958:	8804c03a 	cmpne	r2,r17,zero
  80e95c:	290ab03a 	or	r5,r5,r4
  80e960:	28a2b03a 	or	r17,r5,r2
  80e964:	0021883a 	mov	r16,zero
  80e968:	003fa206 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80e96c:	2090b03a 	or	r8,r4,r2
  80e970:	40018e26 	beq	r8,zero,80efac <__subdf3+0x83c>
  80e974:	1007883a 	mov	r3,r2
  80e978:	2023883a 	mov	r17,r4
  80e97c:	888001cc 	andi	r2,r17,7
  80e980:	103f9e1e 	bne	r2,zero,80e7fc <__alt_mem_onchip_mem+0xff78e7fc>
  80e984:	1804977a 	slli	r2,r3,29
  80e988:	8822d0fa 	srli	r17,r17,3
  80e98c:	1810d0fa 	srli	r8,r3,3
  80e990:	9100004c 	andi	r4,r18,1
  80e994:	1444b03a 	or	r2,r2,r17
  80e998:	00c1ffc4 	movi	r3,2047
  80e99c:	80c02826 	beq	r16,r3,80ea40 <__subdf3+0x2d0>
  80e9a0:	01400434 	movhi	r5,16
  80e9a4:	297fffc4 	addi	r5,r5,-1
  80e9a8:	80e0703a 	and	r16,r16,r3
  80e9ac:	414a703a 	and	r5,r8,r5
  80e9b0:	003fa806 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80e9b4:	0080630e 	bge	zero,r2,80eb44 <__subdf3+0x3d4>
  80e9b8:	48003026 	beq	r9,zero,80ea7c <__subdf3+0x30c>
  80e9bc:	0101ffc4 	movi	r4,2047
  80e9c0:	813f8c26 	beq	r16,r4,80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80e9c4:	29402034 	orhi	r5,r5,128
  80e9c8:	01000e04 	movi	r4,56
  80e9cc:	2080a90e 	bge	r4,r2,80ec74 <__subdf3+0x504>
  80e9d0:	298cb03a 	or	r6,r5,r6
  80e9d4:	3012c03a 	cmpne	r9,r6,zero
  80e9d8:	0005883a 	mov	r2,zero
  80e9dc:	4c53883a 	add	r9,r9,r17
  80e9e0:	4c63803a 	cmpltu	r17,r9,r17
  80e9e4:	10c7883a 	add	r3,r2,r3
  80e9e8:	88c7883a 	add	r3,r17,r3
  80e9ec:	4823883a 	mov	r17,r9
  80e9f0:	1880202c 	andhi	r2,r3,128
  80e9f4:	1000d026 	beq	r2,zero,80ed38 <__subdf3+0x5c8>
  80e9f8:	84000044 	addi	r16,r16,1
  80e9fc:	0081ffc4 	movi	r2,2047
  80ea00:	8080fe26 	beq	r16,r2,80edfc <__subdf3+0x68c>
  80ea04:	00bfe034 	movhi	r2,65408
  80ea08:	10bfffc4 	addi	r2,r2,-1
  80ea0c:	1886703a 	and	r3,r3,r2
  80ea10:	880ad07a 	srli	r5,r17,1
  80ea14:	180497fa 	slli	r2,r3,31
  80ea18:	8900004c 	andi	r4,r17,1
  80ea1c:	2922b03a 	or	r17,r5,r4
  80ea20:	1806d07a 	srli	r3,r3,1
  80ea24:	1462b03a 	or	r17,r2,r17
  80ea28:	3825883a 	mov	r18,r7
  80ea2c:	003f7106 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ea30:	2984b03a 	or	r2,r5,r6
  80ea34:	103f6826 	beq	r2,zero,80e7d8 <__alt_mem_onchip_mem+0xff78e7d8>
  80ea38:	39c03fcc 	andi	r7,r7,255
  80ea3c:	003f6706 	br	80e7dc <__alt_mem_onchip_mem+0xff78e7dc>
  80ea40:	4086b03a 	or	r3,r8,r2
  80ea44:	18015226 	beq	r3,zero,80ef90 <__subdf3+0x820>
  80ea48:	00c00434 	movhi	r3,16
  80ea4c:	41400234 	orhi	r5,r8,8
  80ea50:	18ffffc4 	addi	r3,r3,-1
  80ea54:	28ca703a 	and	r5,r5,r3
  80ea58:	003f7e06 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80ea5c:	10bfffc4 	addi	r2,r2,-1
  80ea60:	1000491e 	bne	r2,zero,80eb88 <__subdf3+0x418>
  80ea64:	898fc83a 	sub	r7,r17,r6
  80ea68:	89e3803a 	cmpltu	r17,r17,r7
  80ea6c:	1947c83a 	sub	r3,r3,r5
  80ea70:	1c47c83a 	sub	r3,r3,r17
  80ea74:	3823883a 	mov	r17,r7
  80ea78:	003f9b06 	br	80e8e8 <__alt_mem_onchip_mem+0xff78e8e8>
  80ea7c:	2988b03a 	or	r4,r5,r6
  80ea80:	203f5c26 	beq	r4,zero,80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ea84:	10bfffc4 	addi	r2,r2,-1
  80ea88:	1000931e 	bne	r2,zero,80ecd8 <__subdf3+0x568>
  80ea8c:	898d883a 	add	r6,r17,r6
  80ea90:	3463803a 	cmpltu	r17,r6,r17
  80ea94:	1947883a 	add	r3,r3,r5
  80ea98:	88c7883a 	add	r3,r17,r3
  80ea9c:	3023883a 	mov	r17,r6
  80eaa0:	003fd306 	br	80e9f0 <__alt_mem_onchip_mem+0xff78e9f0>
  80eaa4:	1000541e 	bne	r2,zero,80ebf8 <__subdf3+0x488>
  80eaa8:	80800044 	addi	r2,r16,1
  80eaac:	1081ffcc 	andi	r2,r2,2047
  80eab0:	01000044 	movi	r4,1
  80eab4:	2080a20e 	bge	r4,r2,80ed40 <__subdf3+0x5d0>
  80eab8:	8989c83a 	sub	r4,r17,r6
  80eabc:	8905803a 	cmpltu	r2,r17,r4
  80eac0:	1967c83a 	sub	r19,r3,r5
  80eac4:	98a7c83a 	sub	r19,r19,r2
  80eac8:	9880202c 	andhi	r2,r19,128
  80eacc:	10006326 	beq	r2,zero,80ec5c <__subdf3+0x4ec>
  80ead0:	3463c83a 	sub	r17,r6,r17
  80ead4:	28c7c83a 	sub	r3,r5,r3
  80ead8:	344d803a 	cmpltu	r6,r6,r17
  80eadc:	19a7c83a 	sub	r19,r3,r6
  80eae0:	3825883a 	mov	r18,r7
  80eae4:	983f861e 	bne	r19,zero,80e900 <__alt_mem_onchip_mem+0xff78e900>
  80eae8:	8809883a 	mov	r4,r17
  80eaec:	080f2700 	call	80f270 <__clzsi2>
  80eaf0:	10800804 	addi	r2,r2,32
  80eaf4:	113ffe04 	addi	r4,r2,-8
  80eaf8:	00c007c4 	movi	r3,31
  80eafc:	193f850e 	bge	r3,r4,80e914 <__alt_mem_onchip_mem+0xff78e914>
  80eb00:	10bff604 	addi	r2,r2,-40
  80eb04:	8884983a 	sll	r2,r17,r2
  80eb08:	0023883a 	mov	r17,zero
  80eb0c:	243f880e 	bge	r4,r16,80e930 <__alt_mem_onchip_mem+0xff78e930>
  80eb10:	00ffe034 	movhi	r3,65408
  80eb14:	18ffffc4 	addi	r3,r3,-1
  80eb18:	8121c83a 	sub	r16,r16,r4
  80eb1c:	10c6703a 	and	r3,r2,r3
  80eb20:	003f3406 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80eb24:	9100004c 	andi	r4,r18,1
  80eb28:	000b883a 	mov	r5,zero
  80eb2c:	0005883a 	mov	r2,zero
  80eb30:	003f4806 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80eb34:	298cb03a 	or	r6,r5,r6
  80eb38:	300cc03a 	cmpne	r6,r6,zero
  80eb3c:	0005883a 	mov	r2,zero
  80eb40:	003f6406 	br	80e8d4 <__alt_mem_onchip_mem+0xff78e8d4>
  80eb44:	10009a1e 	bne	r2,zero,80edb0 <__subdf3+0x640>
  80eb48:	82400044 	addi	r9,r16,1
  80eb4c:	4881ffcc 	andi	r2,r9,2047
  80eb50:	02800044 	movi	r10,1
  80eb54:	5080670e 	bge	r10,r2,80ecf4 <__subdf3+0x584>
  80eb58:	0081ffc4 	movi	r2,2047
  80eb5c:	4880af26 	beq	r9,r2,80ee1c <__subdf3+0x6ac>
  80eb60:	898d883a 	add	r6,r17,r6
  80eb64:	1945883a 	add	r2,r3,r5
  80eb68:	3447803a 	cmpltu	r3,r6,r17
  80eb6c:	1887883a 	add	r3,r3,r2
  80eb70:	182297fa 	slli	r17,r3,31
  80eb74:	300cd07a 	srli	r6,r6,1
  80eb78:	1806d07a 	srli	r3,r3,1
  80eb7c:	4821883a 	mov	r16,r9
  80eb80:	89a2b03a 	or	r17,r17,r6
  80eb84:	003f1b06 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80eb88:	0101ffc4 	movi	r4,2047
  80eb8c:	813f441e 	bne	r16,r4,80e8a0 <__alt_mem_onchip_mem+0xff78e8a0>
  80eb90:	003f1806 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80eb94:	843ff844 	addi	r16,r16,-31
  80eb98:	01400804 	movi	r5,32
  80eb9c:	1408d83a 	srl	r4,r2,r16
  80eba0:	19405026 	beq	r3,r5,80ece4 <__subdf3+0x574>
  80eba4:	01401004 	movi	r5,64
  80eba8:	28c7c83a 	sub	r3,r5,r3
  80ebac:	10c4983a 	sll	r2,r2,r3
  80ebb0:	88a2b03a 	or	r17,r17,r2
  80ebb4:	8822c03a 	cmpne	r17,r17,zero
  80ebb8:	2462b03a 	or	r17,r4,r17
  80ebbc:	0007883a 	mov	r3,zero
  80ebc0:	0021883a 	mov	r16,zero
  80ebc4:	003f6d06 	br	80e97c <__alt_mem_onchip_mem+0xff78e97c>
  80ebc8:	11fff804 	addi	r7,r2,-32
  80ebcc:	01000804 	movi	r4,32
  80ebd0:	29ced83a 	srl	r7,r5,r7
  80ebd4:	11004526 	beq	r2,r4,80ecec <__subdf3+0x57c>
  80ebd8:	01001004 	movi	r4,64
  80ebdc:	2089c83a 	sub	r4,r4,r2
  80ebe0:	2904983a 	sll	r2,r5,r4
  80ebe4:	118cb03a 	or	r6,r2,r6
  80ebe8:	300cc03a 	cmpne	r6,r6,zero
  80ebec:	398cb03a 	or	r6,r7,r6
  80ebf0:	0005883a 	mov	r2,zero
  80ebf4:	003f3706 	br	80e8d4 <__alt_mem_onchip_mem+0xff78e8d4>
  80ebf8:	80002a26 	beq	r16,zero,80eca4 <__subdf3+0x534>
  80ebfc:	0101ffc4 	movi	r4,2047
  80ec00:	49006626 	beq	r9,r4,80ed9c <__subdf3+0x62c>
  80ec04:	0085c83a 	sub	r2,zero,r2
  80ec08:	18c02034 	orhi	r3,r3,128
  80ec0c:	01000e04 	movi	r4,56
  80ec10:	20807e16 	blt	r4,r2,80ee0c <__subdf3+0x69c>
  80ec14:	010007c4 	movi	r4,31
  80ec18:	2080e716 	blt	r4,r2,80efb8 <__subdf3+0x848>
  80ec1c:	01000804 	movi	r4,32
  80ec20:	2089c83a 	sub	r4,r4,r2
  80ec24:	1914983a 	sll	r10,r3,r4
  80ec28:	8890d83a 	srl	r8,r17,r2
  80ec2c:	8908983a 	sll	r4,r17,r4
  80ec30:	1884d83a 	srl	r2,r3,r2
  80ec34:	5222b03a 	or	r17,r10,r8
  80ec38:	2006c03a 	cmpne	r3,r4,zero
  80ec3c:	88e2b03a 	or	r17,r17,r3
  80ec40:	3463c83a 	sub	r17,r6,r17
  80ec44:	2885c83a 	sub	r2,r5,r2
  80ec48:	344d803a 	cmpltu	r6,r6,r17
  80ec4c:	1187c83a 	sub	r3,r2,r6
  80ec50:	4821883a 	mov	r16,r9
  80ec54:	3825883a 	mov	r18,r7
  80ec58:	003f2306 	br	80e8e8 <__alt_mem_onchip_mem+0xff78e8e8>
  80ec5c:	24d0b03a 	or	r8,r4,r19
  80ec60:	40001b1e 	bne	r8,zero,80ecd0 <__subdf3+0x560>
  80ec64:	0005883a 	mov	r2,zero
  80ec68:	0009883a 	mov	r4,zero
  80ec6c:	0021883a 	mov	r16,zero
  80ec70:	003f4906 	br	80e998 <__alt_mem_onchip_mem+0xff78e998>
  80ec74:	010007c4 	movi	r4,31
  80ec78:	20803a16 	blt	r4,r2,80ed64 <__subdf3+0x5f4>
  80ec7c:	01000804 	movi	r4,32
  80ec80:	2089c83a 	sub	r4,r4,r2
  80ec84:	2912983a 	sll	r9,r5,r4
  80ec88:	3090d83a 	srl	r8,r6,r2
  80ec8c:	3108983a 	sll	r4,r6,r4
  80ec90:	2884d83a 	srl	r2,r5,r2
  80ec94:	4a12b03a 	or	r9,r9,r8
  80ec98:	2008c03a 	cmpne	r4,r4,zero
  80ec9c:	4912b03a 	or	r9,r9,r4
  80eca0:	003f4e06 	br	80e9dc <__alt_mem_onchip_mem+0xff78e9dc>
  80eca4:	1c48b03a 	or	r4,r3,r17
  80eca8:	20003c26 	beq	r4,zero,80ed9c <__subdf3+0x62c>
  80ecac:	0084303a 	nor	r2,zero,r2
  80ecb0:	1000381e 	bne	r2,zero,80ed94 <__subdf3+0x624>
  80ecb4:	3463c83a 	sub	r17,r6,r17
  80ecb8:	28c5c83a 	sub	r2,r5,r3
  80ecbc:	344d803a 	cmpltu	r6,r6,r17
  80ecc0:	1187c83a 	sub	r3,r2,r6
  80ecc4:	4821883a 	mov	r16,r9
  80ecc8:	3825883a 	mov	r18,r7
  80eccc:	003f0606 	br	80e8e8 <__alt_mem_onchip_mem+0xff78e8e8>
  80ecd0:	2023883a 	mov	r17,r4
  80ecd4:	003f0906 	br	80e8fc <__alt_mem_onchip_mem+0xff78e8fc>
  80ecd8:	0101ffc4 	movi	r4,2047
  80ecdc:	813f3a1e 	bne	r16,r4,80e9c8 <__alt_mem_onchip_mem+0xff78e9c8>
  80ece0:	003ec406 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ece4:	0005883a 	mov	r2,zero
  80ece8:	003fb106 	br	80ebb0 <__alt_mem_onchip_mem+0xff78ebb0>
  80ecec:	0005883a 	mov	r2,zero
  80ecf0:	003fbc06 	br	80ebe4 <__alt_mem_onchip_mem+0xff78ebe4>
  80ecf4:	1c44b03a 	or	r2,r3,r17
  80ecf8:	80008e1e 	bne	r16,zero,80ef34 <__subdf3+0x7c4>
  80ecfc:	1000c826 	beq	r2,zero,80f020 <__subdf3+0x8b0>
  80ed00:	2984b03a 	or	r2,r5,r6
  80ed04:	103ebb26 	beq	r2,zero,80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ed08:	8989883a 	add	r4,r17,r6
  80ed0c:	1945883a 	add	r2,r3,r5
  80ed10:	2447803a 	cmpltu	r3,r4,r17
  80ed14:	1887883a 	add	r3,r3,r2
  80ed18:	1880202c 	andhi	r2,r3,128
  80ed1c:	2023883a 	mov	r17,r4
  80ed20:	103f1626 	beq	r2,zero,80e97c <__alt_mem_onchip_mem+0xff78e97c>
  80ed24:	00bfe034 	movhi	r2,65408
  80ed28:	10bfffc4 	addi	r2,r2,-1
  80ed2c:	5021883a 	mov	r16,r10
  80ed30:	1886703a 	and	r3,r3,r2
  80ed34:	003eaf06 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ed38:	3825883a 	mov	r18,r7
  80ed3c:	003f0f06 	br	80e97c <__alt_mem_onchip_mem+0xff78e97c>
  80ed40:	1c44b03a 	or	r2,r3,r17
  80ed44:	8000251e 	bne	r16,zero,80eddc <__subdf3+0x66c>
  80ed48:	1000661e 	bne	r2,zero,80eee4 <__subdf3+0x774>
  80ed4c:	2990b03a 	or	r8,r5,r6
  80ed50:	40009626 	beq	r8,zero,80efac <__subdf3+0x83c>
  80ed54:	2807883a 	mov	r3,r5
  80ed58:	3023883a 	mov	r17,r6
  80ed5c:	3825883a 	mov	r18,r7
  80ed60:	003ea406 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ed64:	127ff804 	addi	r9,r2,-32
  80ed68:	01000804 	movi	r4,32
  80ed6c:	2a52d83a 	srl	r9,r5,r9
  80ed70:	11008c26 	beq	r2,r4,80efa4 <__subdf3+0x834>
  80ed74:	01001004 	movi	r4,64
  80ed78:	2085c83a 	sub	r2,r4,r2
  80ed7c:	2884983a 	sll	r2,r5,r2
  80ed80:	118cb03a 	or	r6,r2,r6
  80ed84:	300cc03a 	cmpne	r6,r6,zero
  80ed88:	4992b03a 	or	r9,r9,r6
  80ed8c:	0005883a 	mov	r2,zero
  80ed90:	003f1206 	br	80e9dc <__alt_mem_onchip_mem+0xff78e9dc>
  80ed94:	0101ffc4 	movi	r4,2047
  80ed98:	493f9c1e 	bne	r9,r4,80ec0c <__alt_mem_onchip_mem+0xff78ec0c>
  80ed9c:	2807883a 	mov	r3,r5
  80eda0:	3023883a 	mov	r17,r6
  80eda4:	4821883a 	mov	r16,r9
  80eda8:	3825883a 	mov	r18,r7
  80edac:	003e9106 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80edb0:	80001f1e 	bne	r16,zero,80ee30 <__subdf3+0x6c0>
  80edb4:	1c48b03a 	or	r4,r3,r17
  80edb8:	20005a26 	beq	r4,zero,80ef24 <__subdf3+0x7b4>
  80edbc:	0084303a 	nor	r2,zero,r2
  80edc0:	1000561e 	bne	r2,zero,80ef1c <__subdf3+0x7ac>
  80edc4:	89a3883a 	add	r17,r17,r6
  80edc8:	1945883a 	add	r2,r3,r5
  80edcc:	898d803a 	cmpltu	r6,r17,r6
  80edd0:	3087883a 	add	r3,r6,r2
  80edd4:	4821883a 	mov	r16,r9
  80edd8:	003f0506 	br	80e9f0 <__alt_mem_onchip_mem+0xff78e9f0>
  80eddc:	10002b1e 	bne	r2,zero,80ee8c <__subdf3+0x71c>
  80ede0:	2984b03a 	or	r2,r5,r6
  80ede4:	10008026 	beq	r2,zero,80efe8 <__subdf3+0x878>
  80ede8:	2807883a 	mov	r3,r5
  80edec:	3023883a 	mov	r17,r6
  80edf0:	3825883a 	mov	r18,r7
  80edf4:	0401ffc4 	movi	r16,2047
  80edf8:	003e7e06 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80edfc:	3809883a 	mov	r4,r7
  80ee00:	0011883a 	mov	r8,zero
  80ee04:	0005883a 	mov	r2,zero
  80ee08:	003ee306 	br	80e998 <__alt_mem_onchip_mem+0xff78e998>
  80ee0c:	1c62b03a 	or	r17,r3,r17
  80ee10:	8822c03a 	cmpne	r17,r17,zero
  80ee14:	0005883a 	mov	r2,zero
  80ee18:	003f8906 	br	80ec40 <__alt_mem_onchip_mem+0xff78ec40>
  80ee1c:	3809883a 	mov	r4,r7
  80ee20:	4821883a 	mov	r16,r9
  80ee24:	0011883a 	mov	r8,zero
  80ee28:	0005883a 	mov	r2,zero
  80ee2c:	003eda06 	br	80e998 <__alt_mem_onchip_mem+0xff78e998>
  80ee30:	0101ffc4 	movi	r4,2047
  80ee34:	49003b26 	beq	r9,r4,80ef24 <__subdf3+0x7b4>
  80ee38:	0085c83a 	sub	r2,zero,r2
  80ee3c:	18c02034 	orhi	r3,r3,128
  80ee40:	01000e04 	movi	r4,56
  80ee44:	20806e16 	blt	r4,r2,80f000 <__subdf3+0x890>
  80ee48:	010007c4 	movi	r4,31
  80ee4c:	20807716 	blt	r4,r2,80f02c <__subdf3+0x8bc>
  80ee50:	01000804 	movi	r4,32
  80ee54:	2089c83a 	sub	r4,r4,r2
  80ee58:	1914983a 	sll	r10,r3,r4
  80ee5c:	8890d83a 	srl	r8,r17,r2
  80ee60:	8908983a 	sll	r4,r17,r4
  80ee64:	1884d83a 	srl	r2,r3,r2
  80ee68:	5222b03a 	or	r17,r10,r8
  80ee6c:	2006c03a 	cmpne	r3,r4,zero
  80ee70:	88e2b03a 	or	r17,r17,r3
  80ee74:	89a3883a 	add	r17,r17,r6
  80ee78:	1145883a 	add	r2,r2,r5
  80ee7c:	898d803a 	cmpltu	r6,r17,r6
  80ee80:	3087883a 	add	r3,r6,r2
  80ee84:	4821883a 	mov	r16,r9
  80ee88:	003ed906 	br	80e9f0 <__alt_mem_onchip_mem+0xff78e9f0>
  80ee8c:	2984b03a 	or	r2,r5,r6
  80ee90:	10004226 	beq	r2,zero,80ef9c <__subdf3+0x82c>
  80ee94:	1808d0fa 	srli	r4,r3,3
  80ee98:	8822d0fa 	srli	r17,r17,3
  80ee9c:	1806977a 	slli	r3,r3,29
  80eea0:	2080022c 	andhi	r2,r4,8
  80eea4:	1c62b03a 	or	r17,r3,r17
  80eea8:	10000826 	beq	r2,zero,80eecc <__subdf3+0x75c>
  80eeac:	2812d0fa 	srli	r9,r5,3
  80eeb0:	4880022c 	andhi	r2,r9,8
  80eeb4:	1000051e 	bne	r2,zero,80eecc <__subdf3+0x75c>
  80eeb8:	300cd0fa 	srli	r6,r6,3
  80eebc:	2804977a 	slli	r2,r5,29
  80eec0:	4809883a 	mov	r4,r9
  80eec4:	3825883a 	mov	r18,r7
  80eec8:	11a2b03a 	or	r17,r2,r6
  80eecc:	8806d77a 	srli	r3,r17,29
  80eed0:	200890fa 	slli	r4,r4,3
  80eed4:	882290fa 	slli	r17,r17,3
  80eed8:	0401ffc4 	movi	r16,2047
  80eedc:	1906b03a 	or	r3,r3,r4
  80eee0:	003e4406 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80eee4:	2984b03a 	or	r2,r5,r6
  80eee8:	103e4226 	beq	r2,zero,80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80eeec:	8989c83a 	sub	r4,r17,r6
  80eef0:	8911803a 	cmpltu	r8,r17,r4
  80eef4:	1945c83a 	sub	r2,r3,r5
  80eef8:	1205c83a 	sub	r2,r2,r8
  80eefc:	1200202c 	andhi	r8,r2,128
  80ef00:	403e9a26 	beq	r8,zero,80e96c <__alt_mem_onchip_mem+0xff78e96c>
  80ef04:	3463c83a 	sub	r17,r6,r17
  80ef08:	28c5c83a 	sub	r2,r5,r3
  80ef0c:	344d803a 	cmpltu	r6,r6,r17
  80ef10:	1187c83a 	sub	r3,r2,r6
  80ef14:	3825883a 	mov	r18,r7
  80ef18:	003e3606 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ef1c:	0101ffc4 	movi	r4,2047
  80ef20:	493fc71e 	bne	r9,r4,80ee40 <__alt_mem_onchip_mem+0xff78ee40>
  80ef24:	2807883a 	mov	r3,r5
  80ef28:	3023883a 	mov	r17,r6
  80ef2c:	4821883a 	mov	r16,r9
  80ef30:	003e3006 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ef34:	10003626 	beq	r2,zero,80f010 <__subdf3+0x8a0>
  80ef38:	2984b03a 	or	r2,r5,r6
  80ef3c:	10001726 	beq	r2,zero,80ef9c <__subdf3+0x82c>
  80ef40:	1808d0fa 	srli	r4,r3,3
  80ef44:	8822d0fa 	srli	r17,r17,3
  80ef48:	1806977a 	slli	r3,r3,29
  80ef4c:	2080022c 	andhi	r2,r4,8
  80ef50:	1c62b03a 	or	r17,r3,r17
  80ef54:	10000726 	beq	r2,zero,80ef74 <__subdf3+0x804>
  80ef58:	2812d0fa 	srli	r9,r5,3
  80ef5c:	4880022c 	andhi	r2,r9,8
  80ef60:	1000041e 	bne	r2,zero,80ef74 <__subdf3+0x804>
  80ef64:	300cd0fa 	srli	r6,r6,3
  80ef68:	2804977a 	slli	r2,r5,29
  80ef6c:	4809883a 	mov	r4,r9
  80ef70:	11a2b03a 	or	r17,r2,r6
  80ef74:	8806d77a 	srli	r3,r17,29
  80ef78:	200890fa 	slli	r4,r4,3
  80ef7c:	882290fa 	slli	r17,r17,3
  80ef80:	3825883a 	mov	r18,r7
  80ef84:	1906b03a 	or	r3,r3,r4
  80ef88:	0401ffc4 	movi	r16,2047
  80ef8c:	003e1906 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80ef90:	000b883a 	mov	r5,zero
  80ef94:	0005883a 	mov	r2,zero
  80ef98:	003e2e06 	br	80e854 <__alt_mem_onchip_mem+0xff78e854>
  80ef9c:	0401ffc4 	movi	r16,2047
  80efa0:	003e1406 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80efa4:	0005883a 	mov	r2,zero
  80efa8:	003f7506 	br	80ed80 <__alt_mem_onchip_mem+0xff78ed80>
  80efac:	0005883a 	mov	r2,zero
  80efb0:	0009883a 	mov	r4,zero
  80efb4:	003e7806 	br	80e998 <__alt_mem_onchip_mem+0xff78e998>
  80efb8:	123ff804 	addi	r8,r2,-32
  80efbc:	01000804 	movi	r4,32
  80efc0:	1a10d83a 	srl	r8,r3,r8
  80efc4:	11002526 	beq	r2,r4,80f05c <__subdf3+0x8ec>
  80efc8:	01001004 	movi	r4,64
  80efcc:	2085c83a 	sub	r2,r4,r2
  80efd0:	1884983a 	sll	r2,r3,r2
  80efd4:	1444b03a 	or	r2,r2,r17
  80efd8:	1004c03a 	cmpne	r2,r2,zero
  80efdc:	40a2b03a 	or	r17,r8,r2
  80efe0:	0005883a 	mov	r2,zero
  80efe4:	003f1606 	br	80ec40 <__alt_mem_onchip_mem+0xff78ec40>
  80efe8:	02000434 	movhi	r8,16
  80efec:	0009883a 	mov	r4,zero
  80eff0:	423fffc4 	addi	r8,r8,-1
  80eff4:	00bfffc4 	movi	r2,-1
  80eff8:	0401ffc4 	movi	r16,2047
  80effc:	003e6606 	br	80e998 <__alt_mem_onchip_mem+0xff78e998>
  80f000:	1c62b03a 	or	r17,r3,r17
  80f004:	8822c03a 	cmpne	r17,r17,zero
  80f008:	0005883a 	mov	r2,zero
  80f00c:	003f9906 	br	80ee74 <__alt_mem_onchip_mem+0xff78ee74>
  80f010:	2807883a 	mov	r3,r5
  80f014:	3023883a 	mov	r17,r6
  80f018:	0401ffc4 	movi	r16,2047
  80f01c:	003df506 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80f020:	2807883a 	mov	r3,r5
  80f024:	3023883a 	mov	r17,r6
  80f028:	003df206 	br	80e7f4 <__alt_mem_onchip_mem+0xff78e7f4>
  80f02c:	123ff804 	addi	r8,r2,-32
  80f030:	01000804 	movi	r4,32
  80f034:	1a10d83a 	srl	r8,r3,r8
  80f038:	11000a26 	beq	r2,r4,80f064 <__subdf3+0x8f4>
  80f03c:	01001004 	movi	r4,64
  80f040:	2085c83a 	sub	r2,r4,r2
  80f044:	1884983a 	sll	r2,r3,r2
  80f048:	1444b03a 	or	r2,r2,r17
  80f04c:	1004c03a 	cmpne	r2,r2,zero
  80f050:	40a2b03a 	or	r17,r8,r2
  80f054:	0005883a 	mov	r2,zero
  80f058:	003f8606 	br	80ee74 <__alt_mem_onchip_mem+0xff78ee74>
  80f05c:	0005883a 	mov	r2,zero
  80f060:	003fdc06 	br	80efd4 <__alt_mem_onchip_mem+0xff78efd4>
  80f064:	0005883a 	mov	r2,zero
  80f068:	003ff706 	br	80f048 <__alt_mem_onchip_mem+0xff78f048>

0080f06c <__fixdfsi>:
  80f06c:	280cd53a 	srli	r6,r5,20
  80f070:	00c00434 	movhi	r3,16
  80f074:	18ffffc4 	addi	r3,r3,-1
  80f078:	3181ffcc 	andi	r6,r6,2047
  80f07c:	01c0ff84 	movi	r7,1022
  80f080:	28c6703a 	and	r3,r5,r3
  80f084:	280ad7fa 	srli	r5,r5,31
  80f088:	3980120e 	bge	r7,r6,80f0d4 <__fixdfsi+0x68>
  80f08c:	00810744 	movi	r2,1053
  80f090:	11800c16 	blt	r2,r6,80f0c4 <__fixdfsi+0x58>
  80f094:	00810cc4 	movi	r2,1075
  80f098:	1185c83a 	sub	r2,r2,r6
  80f09c:	01c007c4 	movi	r7,31
  80f0a0:	18c00434 	orhi	r3,r3,16
  80f0a4:	38800d16 	blt	r7,r2,80f0dc <__fixdfsi+0x70>
  80f0a8:	31befb44 	addi	r6,r6,-1043
  80f0ac:	2084d83a 	srl	r2,r4,r2
  80f0b0:	1986983a 	sll	r3,r3,r6
  80f0b4:	1884b03a 	or	r2,r3,r2
  80f0b8:	28000726 	beq	r5,zero,80f0d8 <__fixdfsi+0x6c>
  80f0bc:	0085c83a 	sub	r2,zero,r2
  80f0c0:	f800283a 	ret
  80f0c4:	00a00034 	movhi	r2,32768
  80f0c8:	10bfffc4 	addi	r2,r2,-1
  80f0cc:	2885883a 	add	r2,r5,r2
  80f0d0:	f800283a 	ret
  80f0d4:	0005883a 	mov	r2,zero
  80f0d8:	f800283a 	ret
  80f0dc:	008104c4 	movi	r2,1043
  80f0e0:	1185c83a 	sub	r2,r2,r6
  80f0e4:	1884d83a 	srl	r2,r3,r2
  80f0e8:	003ff306 	br	80f0b8 <__alt_mem_onchip_mem+0xff78f0b8>

0080f0ec <__floatsidf>:
  80f0ec:	defffd04 	addi	sp,sp,-12
  80f0f0:	dfc00215 	stw	ra,8(sp)
  80f0f4:	dc400115 	stw	r17,4(sp)
  80f0f8:	dc000015 	stw	r16,0(sp)
  80f0fc:	20002b26 	beq	r4,zero,80f1ac <__floatsidf+0xc0>
  80f100:	2023883a 	mov	r17,r4
  80f104:	2020d7fa 	srli	r16,r4,31
  80f108:	20002d16 	blt	r4,zero,80f1c0 <__floatsidf+0xd4>
  80f10c:	8809883a 	mov	r4,r17
  80f110:	080f2700 	call	80f270 <__clzsi2>
  80f114:	01410784 	movi	r5,1054
  80f118:	288bc83a 	sub	r5,r5,r2
  80f11c:	01010cc4 	movi	r4,1075
  80f120:	2149c83a 	sub	r4,r4,r5
  80f124:	00c007c4 	movi	r3,31
  80f128:	1900160e 	bge	r3,r4,80f184 <__floatsidf+0x98>
  80f12c:	00c104c4 	movi	r3,1043
  80f130:	1947c83a 	sub	r3,r3,r5
  80f134:	88c6983a 	sll	r3,r17,r3
  80f138:	00800434 	movhi	r2,16
  80f13c:	10bfffc4 	addi	r2,r2,-1
  80f140:	1886703a 	and	r3,r3,r2
  80f144:	2941ffcc 	andi	r5,r5,2047
  80f148:	800d883a 	mov	r6,r16
  80f14c:	0005883a 	mov	r2,zero
  80f150:	280a953a 	slli	r5,r5,20
  80f154:	31803fcc 	andi	r6,r6,255
  80f158:	01000434 	movhi	r4,16
  80f15c:	300c97fa 	slli	r6,r6,31
  80f160:	213fffc4 	addi	r4,r4,-1
  80f164:	1906703a 	and	r3,r3,r4
  80f168:	1946b03a 	or	r3,r3,r5
  80f16c:	1986b03a 	or	r3,r3,r6
  80f170:	dfc00217 	ldw	ra,8(sp)
  80f174:	dc400117 	ldw	r17,4(sp)
  80f178:	dc000017 	ldw	r16,0(sp)
  80f17c:	dec00304 	addi	sp,sp,12
  80f180:	f800283a 	ret
  80f184:	00c002c4 	movi	r3,11
  80f188:	1887c83a 	sub	r3,r3,r2
  80f18c:	88c6d83a 	srl	r3,r17,r3
  80f190:	8904983a 	sll	r2,r17,r4
  80f194:	01000434 	movhi	r4,16
  80f198:	213fffc4 	addi	r4,r4,-1
  80f19c:	2941ffcc 	andi	r5,r5,2047
  80f1a0:	1906703a 	and	r3,r3,r4
  80f1a4:	800d883a 	mov	r6,r16
  80f1a8:	003fe906 	br	80f150 <__alt_mem_onchip_mem+0xff78f150>
  80f1ac:	000d883a 	mov	r6,zero
  80f1b0:	000b883a 	mov	r5,zero
  80f1b4:	0007883a 	mov	r3,zero
  80f1b8:	0005883a 	mov	r2,zero
  80f1bc:	003fe406 	br	80f150 <__alt_mem_onchip_mem+0xff78f150>
  80f1c0:	0123c83a 	sub	r17,zero,r4
  80f1c4:	003fd106 	br	80f10c <__alt_mem_onchip_mem+0xff78f10c>

0080f1c8 <__floatunsidf>:
  80f1c8:	defffe04 	addi	sp,sp,-8
  80f1cc:	dc000015 	stw	r16,0(sp)
  80f1d0:	dfc00115 	stw	ra,4(sp)
  80f1d4:	2021883a 	mov	r16,r4
  80f1d8:	20002226 	beq	r4,zero,80f264 <__floatunsidf+0x9c>
  80f1dc:	080f2700 	call	80f270 <__clzsi2>
  80f1e0:	01010784 	movi	r4,1054
  80f1e4:	2089c83a 	sub	r4,r4,r2
  80f1e8:	01810cc4 	movi	r6,1075
  80f1ec:	310dc83a 	sub	r6,r6,r4
  80f1f0:	00c007c4 	movi	r3,31
  80f1f4:	1980120e 	bge	r3,r6,80f240 <__floatunsidf+0x78>
  80f1f8:	00c104c4 	movi	r3,1043
  80f1fc:	1907c83a 	sub	r3,r3,r4
  80f200:	80ca983a 	sll	r5,r16,r3
  80f204:	00800434 	movhi	r2,16
  80f208:	10bfffc4 	addi	r2,r2,-1
  80f20c:	2101ffcc 	andi	r4,r4,2047
  80f210:	0021883a 	mov	r16,zero
  80f214:	288a703a 	and	r5,r5,r2
  80f218:	2008953a 	slli	r4,r4,20
  80f21c:	00c00434 	movhi	r3,16
  80f220:	18ffffc4 	addi	r3,r3,-1
  80f224:	28c6703a 	and	r3,r5,r3
  80f228:	8005883a 	mov	r2,r16
  80f22c:	1906b03a 	or	r3,r3,r4
  80f230:	dfc00117 	ldw	ra,4(sp)
  80f234:	dc000017 	ldw	r16,0(sp)
  80f238:	dec00204 	addi	sp,sp,8
  80f23c:	f800283a 	ret
  80f240:	00c002c4 	movi	r3,11
  80f244:	188bc83a 	sub	r5,r3,r2
  80f248:	814ad83a 	srl	r5,r16,r5
  80f24c:	00c00434 	movhi	r3,16
  80f250:	18ffffc4 	addi	r3,r3,-1
  80f254:	81a0983a 	sll	r16,r16,r6
  80f258:	2101ffcc 	andi	r4,r4,2047
  80f25c:	28ca703a 	and	r5,r5,r3
  80f260:	003fed06 	br	80f218 <__alt_mem_onchip_mem+0xff78f218>
  80f264:	0009883a 	mov	r4,zero
  80f268:	000b883a 	mov	r5,zero
  80f26c:	003fea06 	br	80f218 <__alt_mem_onchip_mem+0xff78f218>

0080f270 <__clzsi2>:
  80f270:	00bfffd4 	movui	r2,65535
  80f274:	11000536 	bltu	r2,r4,80f28c <__clzsi2+0x1c>
  80f278:	00803fc4 	movi	r2,255
  80f27c:	11000f36 	bltu	r2,r4,80f2bc <__clzsi2+0x4c>
  80f280:	00800804 	movi	r2,32
  80f284:	0007883a 	mov	r3,zero
  80f288:	00000506 	br	80f2a0 <__clzsi2+0x30>
  80f28c:	00804034 	movhi	r2,256
  80f290:	10bfffc4 	addi	r2,r2,-1
  80f294:	11000c2e 	bgeu	r2,r4,80f2c8 <__clzsi2+0x58>
  80f298:	00800204 	movi	r2,8
  80f29c:	00c00604 	movi	r3,24
  80f2a0:	20c8d83a 	srl	r4,r4,r3
  80f2a4:	00c02074 	movhi	r3,129
  80f2a8:	18cd8804 	addi	r3,r3,13856
  80f2ac:	1909883a 	add	r4,r3,r4
  80f2b0:	20c00003 	ldbu	r3,0(r4)
  80f2b4:	10c5c83a 	sub	r2,r2,r3
  80f2b8:	f800283a 	ret
  80f2bc:	00800604 	movi	r2,24
  80f2c0:	00c00204 	movi	r3,8
  80f2c4:	003ff606 	br	80f2a0 <__alt_mem_onchip_mem+0xff78f2a0>
  80f2c8:	00800404 	movi	r2,16
  80f2cc:	1007883a 	mov	r3,r2
  80f2d0:	003ff306 	br	80f2a0 <__alt_mem_onchip_mem+0xff78f2a0>

0080f2d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f2d4:	defff504 	addi	sp,sp,-44
  80f2d8:	df000a15 	stw	fp,40(sp)
  80f2dc:	df000a04 	addi	fp,sp,40
  80f2e0:	e13ffc15 	stw	r4,-16(fp)
  80f2e4:	e17ffd15 	stw	r5,-12(fp)
  80f2e8:	e1bffe15 	stw	r6,-8(fp)
  80f2ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f2f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f2f4:	d0a7a617 	ldw	r2,-24936(gp)
  
  if (alt_ticks_per_second ())
  80f2f8:	10003c26 	beq	r2,zero,80f3ec <alt_alarm_start+0x118>
  {
    if (alarm)
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	10003826 	beq	r2,zero,80f3e4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f304:	e0bffc17 	ldw	r2,-16(fp)
  80f308:	e0fffe17 	ldw	r3,-8(fp)
  80f30c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f310:	e0bffc17 	ldw	r2,-16(fp)
  80f314:	e0ffff17 	ldw	r3,-4(fp)
  80f318:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f31c:	0005303a 	rdctl	r2,status
  80f320:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f324:	e0fff917 	ldw	r3,-28(fp)
  80f328:	00bfff84 	movi	r2,-2
  80f32c:	1884703a 	and	r2,r3,r2
  80f330:	1001703a 	wrctl	status,r2
  
  return context;
  80f334:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f338:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f33c:	d0a7a717 	ldw	r2,-24932(gp)
      
      current_nticks = alt_nticks();
  80f340:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f344:	e0fffd17 	ldw	r3,-12(fp)
  80f348:	e0bff617 	ldw	r2,-40(fp)
  80f34c:	1885883a 	add	r2,r3,r2
  80f350:	10c00044 	addi	r3,r2,1
  80f354:	e0bffc17 	ldw	r2,-16(fp)
  80f358:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f35c:	e0bffc17 	ldw	r2,-16(fp)
  80f360:	10c00217 	ldw	r3,8(r2)
  80f364:	e0bff617 	ldw	r2,-40(fp)
  80f368:	1880042e 	bgeu	r3,r2,80f37c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80f36c:	e0bffc17 	ldw	r2,-16(fp)
  80f370:	00c00044 	movi	r3,1
  80f374:	10c00405 	stb	r3,16(r2)
  80f378:	00000206 	br	80f384 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f37c:	e0bffc17 	ldw	r2,-16(fp)
  80f380:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f384:	e0bffc17 	ldw	r2,-16(fp)
  80f388:	d0e00d04 	addi	r3,gp,-32716
  80f38c:	e0fffa15 	stw	r3,-24(fp)
  80f390:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f394:	e0bffb17 	ldw	r2,-20(fp)
  80f398:	e0fffa17 	ldw	r3,-24(fp)
  80f39c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f3a0:	e0bffa17 	ldw	r2,-24(fp)
  80f3a4:	10c00017 	ldw	r3,0(r2)
  80f3a8:	e0bffb17 	ldw	r2,-20(fp)
  80f3ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f3b0:	e0bffa17 	ldw	r2,-24(fp)
  80f3b4:	10800017 	ldw	r2,0(r2)
  80f3b8:	e0fffb17 	ldw	r3,-20(fp)
  80f3bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f3c0:	e0bffa17 	ldw	r2,-24(fp)
  80f3c4:	e0fffb17 	ldw	r3,-20(fp)
  80f3c8:	10c00015 	stw	r3,0(r2)
  80f3cc:	e0bff817 	ldw	r2,-32(fp)
  80f3d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3d4:	e0bff717 	ldw	r2,-36(fp)
  80f3d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f3dc:	0005883a 	mov	r2,zero
  80f3e0:	00000306 	br	80f3f0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80f3e4:	00bffa84 	movi	r2,-22
  80f3e8:	00000106 	br	80f3f0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80f3ec:	00bfde84 	movi	r2,-134
  }
}
  80f3f0:	e037883a 	mov	sp,fp
  80f3f4:	df000017 	ldw	fp,0(sp)
  80f3f8:	dec00104 	addi	sp,sp,4
  80f3fc:	f800283a 	ret

0080f400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f400:	defffe04 	addi	sp,sp,-8
  80f404:	dfc00115 	stw	ra,4(sp)
  80f408:	df000015 	stw	fp,0(sp)
  80f40c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f410:	d0a00b17 	ldw	r2,-32724(gp)
  80f414:	10000326 	beq	r2,zero,80f424 <alt_get_errno+0x24>
  80f418:	d0a00b17 	ldw	r2,-32724(gp)
  80f41c:	103ee83a 	callr	r2
  80f420:	00000106 	br	80f428 <alt_get_errno+0x28>
  80f424:	d0a7a204 	addi	r2,gp,-24952
}
  80f428:	e037883a 	mov	sp,fp
  80f42c:	dfc00117 	ldw	ra,4(sp)
  80f430:	df000017 	ldw	fp,0(sp)
  80f434:	dec00204 	addi	sp,sp,8
  80f438:	f800283a 	ret

0080f43c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80f43c:	defffb04 	addi	sp,sp,-20
  80f440:	dfc00415 	stw	ra,16(sp)
  80f444:	df000315 	stw	fp,12(sp)
  80f448:	df000304 	addi	fp,sp,12
  80f44c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80f450:	e0bfff17 	ldw	r2,-4(fp)
  80f454:	10000616 	blt	r2,zero,80f470 <close+0x34>
  80f458:	e0bfff17 	ldw	r2,-4(fp)
  80f45c:	10c00324 	muli	r3,r2,12
  80f460:	00802074 	movhi	r2,129
  80f464:	1090ac04 	addi	r2,r2,17072
  80f468:	1885883a 	add	r2,r3,r2
  80f46c:	00000106 	br	80f474 <close+0x38>
  80f470:	0005883a 	mov	r2,zero
  80f474:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80f478:	e0bffd17 	ldw	r2,-12(fp)
  80f47c:	10001926 	beq	r2,zero,80f4e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80f480:	e0bffd17 	ldw	r2,-12(fp)
  80f484:	10800017 	ldw	r2,0(r2)
  80f488:	10800417 	ldw	r2,16(r2)
  80f48c:	10000626 	beq	r2,zero,80f4a8 <close+0x6c>
  80f490:	e0bffd17 	ldw	r2,-12(fp)
  80f494:	10800017 	ldw	r2,0(r2)
  80f498:	10800417 	ldw	r2,16(r2)
  80f49c:	e13ffd17 	ldw	r4,-12(fp)
  80f4a0:	103ee83a 	callr	r2
  80f4a4:	00000106 	br	80f4ac <close+0x70>
  80f4a8:	0005883a 	mov	r2,zero
  80f4ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80f4b0:	e13fff17 	ldw	r4,-4(fp)
  80f4b4:	080fafc0 	call	80fafc <alt_release_fd>
    if (rval < 0)
  80f4b8:	e0bffe17 	ldw	r2,-8(fp)
  80f4bc:	1000070e 	bge	r2,zero,80f4dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80f4c0:	080f4000 	call	80f400 <alt_get_errno>
  80f4c4:	1007883a 	mov	r3,r2
  80f4c8:	e0bffe17 	ldw	r2,-8(fp)
  80f4cc:	0085c83a 	sub	r2,zero,r2
  80f4d0:	18800015 	stw	r2,0(r3)
      return -1;
  80f4d4:	00bfffc4 	movi	r2,-1
  80f4d8:	00000706 	br	80f4f8 <close+0xbc>
    }
    return 0;
  80f4dc:	0005883a 	mov	r2,zero
  80f4e0:	00000506 	br	80f4f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f4e4:	080f4000 	call	80f400 <alt_get_errno>
  80f4e8:	1007883a 	mov	r3,r2
  80f4ec:	00801444 	movi	r2,81
  80f4f0:	18800015 	stw	r2,0(r3)
    return -1;
  80f4f4:	00bfffc4 	movi	r2,-1
  }
}
  80f4f8:	e037883a 	mov	sp,fp
  80f4fc:	dfc00117 	ldw	ra,4(sp)
  80f500:	df000017 	ldw	fp,0(sp)
  80f504:	dec00204 	addi	sp,sp,8
  80f508:	f800283a 	ret

0080f50c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80f50c:	defffc04 	addi	sp,sp,-16
  80f510:	df000315 	stw	fp,12(sp)
  80f514:	df000304 	addi	fp,sp,12
  80f518:	e13ffd15 	stw	r4,-12(fp)
  80f51c:	e17ffe15 	stw	r5,-8(fp)
  80f520:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80f524:	e0bfff17 	ldw	r2,-4(fp)
}
  80f528:	e037883a 	mov	sp,fp
  80f52c:	df000017 	ldw	fp,0(sp)
  80f530:	dec00104 	addi	sp,sp,4
  80f534:	f800283a 	ret

0080f538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f538:	defffe04 	addi	sp,sp,-8
  80f53c:	dfc00115 	stw	ra,4(sp)
  80f540:	df000015 	stw	fp,0(sp)
  80f544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f548:	d0a00b17 	ldw	r2,-32724(gp)
  80f54c:	10000326 	beq	r2,zero,80f55c <alt_get_errno+0x24>
  80f550:	d0a00b17 	ldw	r2,-32724(gp)
  80f554:	103ee83a 	callr	r2
  80f558:	00000106 	br	80f560 <alt_get_errno+0x28>
  80f55c:	d0a7a204 	addi	r2,gp,-24952
}
  80f560:	e037883a 	mov	sp,fp
  80f564:	dfc00117 	ldw	ra,4(sp)
  80f568:	df000017 	ldw	fp,0(sp)
  80f56c:	dec00204 	addi	sp,sp,8
  80f570:	f800283a 	ret

0080f574 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80f574:	defffb04 	addi	sp,sp,-20
  80f578:	dfc00415 	stw	ra,16(sp)
  80f57c:	df000315 	stw	fp,12(sp)
  80f580:	df000304 	addi	fp,sp,12
  80f584:	e13ffe15 	stw	r4,-8(fp)
  80f588:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f58c:	e0bffe17 	ldw	r2,-8(fp)
  80f590:	10000616 	blt	r2,zero,80f5ac <fstat+0x38>
  80f594:	e0bffe17 	ldw	r2,-8(fp)
  80f598:	10c00324 	muli	r3,r2,12
  80f59c:	00802074 	movhi	r2,129
  80f5a0:	1090ac04 	addi	r2,r2,17072
  80f5a4:	1885883a 	add	r2,r3,r2
  80f5a8:	00000106 	br	80f5b0 <fstat+0x3c>
  80f5ac:	0005883a 	mov	r2,zero
  80f5b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80f5b4:	e0bffd17 	ldw	r2,-12(fp)
  80f5b8:	10001026 	beq	r2,zero,80f5fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80f5bc:	e0bffd17 	ldw	r2,-12(fp)
  80f5c0:	10800017 	ldw	r2,0(r2)
  80f5c4:	10800817 	ldw	r2,32(r2)
  80f5c8:	10000726 	beq	r2,zero,80f5e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80f5cc:	e0bffd17 	ldw	r2,-12(fp)
  80f5d0:	10800017 	ldw	r2,0(r2)
  80f5d4:	10800817 	ldw	r2,32(r2)
  80f5d8:	e17fff17 	ldw	r5,-4(fp)
  80f5dc:	e13ffd17 	ldw	r4,-12(fp)
  80f5e0:	103ee83a 	callr	r2
  80f5e4:	00000a06 	br	80f610 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80f5e8:	e0bfff17 	ldw	r2,-4(fp)
  80f5ec:	00c80004 	movi	r3,8192
  80f5f0:	10c00115 	stw	r3,4(r2)
      return 0;
  80f5f4:	0005883a 	mov	r2,zero
  80f5f8:	00000506 	br	80f610 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f5fc:	080f5380 	call	80f538 <alt_get_errno>
  80f600:	1007883a 	mov	r3,r2
  80f604:	00801444 	movi	r2,81
  80f608:	18800015 	stw	r2,0(r3)
    return -1;
  80f60c:	00bfffc4 	movi	r2,-1
  }
}
  80f610:	e037883a 	mov	sp,fp
  80f614:	dfc00117 	ldw	ra,4(sp)
  80f618:	df000017 	ldw	fp,0(sp)
  80f61c:	dec00204 	addi	sp,sp,8
  80f620:	f800283a 	ret

0080f624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f624:	defffe04 	addi	sp,sp,-8
  80f628:	dfc00115 	stw	ra,4(sp)
  80f62c:	df000015 	stw	fp,0(sp)
  80f630:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f634:	d0a00b17 	ldw	r2,-32724(gp)
  80f638:	10000326 	beq	r2,zero,80f648 <alt_get_errno+0x24>
  80f63c:	d0a00b17 	ldw	r2,-32724(gp)
  80f640:	103ee83a 	callr	r2
  80f644:	00000106 	br	80f64c <alt_get_errno+0x28>
  80f648:	d0a7a204 	addi	r2,gp,-24952
}
  80f64c:	e037883a 	mov	sp,fp
  80f650:	dfc00117 	ldw	ra,4(sp)
  80f654:	df000017 	ldw	fp,0(sp)
  80f658:	dec00204 	addi	sp,sp,8
  80f65c:	f800283a 	ret

0080f660 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f660:	deffed04 	addi	sp,sp,-76
  80f664:	dfc01215 	stw	ra,72(sp)
  80f668:	df001115 	stw	fp,68(sp)
  80f66c:	df001104 	addi	fp,sp,68
  80f670:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f674:	e0bfff17 	ldw	r2,-4(fp)
  80f678:	10000616 	blt	r2,zero,80f694 <isatty+0x34>
  80f67c:	e0bfff17 	ldw	r2,-4(fp)
  80f680:	10c00324 	muli	r3,r2,12
  80f684:	00802074 	movhi	r2,129
  80f688:	1090ac04 	addi	r2,r2,17072
  80f68c:	1885883a 	add	r2,r3,r2
  80f690:	00000106 	br	80f698 <isatty+0x38>
  80f694:	0005883a 	mov	r2,zero
  80f698:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f69c:	e0bfef17 	ldw	r2,-68(fp)
  80f6a0:	10000e26 	beq	r2,zero,80f6dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f6a4:	e0bfef17 	ldw	r2,-68(fp)
  80f6a8:	10800017 	ldw	r2,0(r2)
  80f6ac:	10800817 	ldw	r2,32(r2)
  80f6b0:	1000021e 	bne	r2,zero,80f6bc <isatty+0x5c>
    {
      return 1;
  80f6b4:	00800044 	movi	r2,1
  80f6b8:	00000d06 	br	80f6f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f6bc:	e0bff004 	addi	r2,fp,-64
  80f6c0:	100b883a 	mov	r5,r2
  80f6c4:	e13fff17 	ldw	r4,-4(fp)
  80f6c8:	080f5740 	call	80f574 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f6cc:	e0bff117 	ldw	r2,-60(fp)
  80f6d0:	10880020 	cmpeqi	r2,r2,8192
  80f6d4:	10803fcc 	andi	r2,r2,255
  80f6d8:	00000506 	br	80f6f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f6dc:	080f6240 	call	80f624 <alt_get_errno>
  80f6e0:	1007883a 	mov	r3,r2
  80f6e4:	00801444 	movi	r2,81
  80f6e8:	18800015 	stw	r2,0(r3)
    return 0;
  80f6ec:	0005883a 	mov	r2,zero
  }
}
  80f6f0:	e037883a 	mov	sp,fp
  80f6f4:	dfc00117 	ldw	ra,4(sp)
  80f6f8:	df000017 	ldw	fp,0(sp)
  80f6fc:	dec00204 	addi	sp,sp,8
  80f700:	f800283a 	ret

0080f704 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f704:	defffc04 	addi	sp,sp,-16
  80f708:	df000315 	stw	fp,12(sp)
  80f70c:	df000304 	addi	fp,sp,12
  80f710:	e13ffd15 	stw	r4,-12(fp)
  80f714:	e17ffe15 	stw	r5,-8(fp)
  80f718:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f71c:	e0fffe17 	ldw	r3,-8(fp)
  80f720:	e0bffd17 	ldw	r2,-12(fp)
  80f724:	18800c26 	beq	r3,r2,80f758 <alt_load_section+0x54>
  {
    while( to != end )
  80f728:	00000806 	br	80f74c <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f72c:	e0bffe17 	ldw	r2,-8(fp)
  80f730:	10c00104 	addi	r3,r2,4
  80f734:	e0fffe15 	stw	r3,-8(fp)
  80f738:	e0fffd17 	ldw	r3,-12(fp)
  80f73c:	19000104 	addi	r4,r3,4
  80f740:	e13ffd15 	stw	r4,-12(fp)
  80f744:	18c00017 	ldw	r3,0(r3)
  80f748:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f74c:	e0fffe17 	ldw	r3,-8(fp)
  80f750:	e0bfff17 	ldw	r2,-4(fp)
  80f754:	18bff51e 	bne	r3,r2,80f72c <__alt_mem_onchip_mem+0xff78f72c>
    {
      *to++ = *from++;
    }
  }
}
  80f758:	0001883a 	nop
  80f75c:	e037883a 	mov	sp,fp
  80f760:	df000017 	ldw	fp,0(sp)
  80f764:	dec00104 	addi	sp,sp,4
  80f768:	f800283a 	ret

0080f76c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f76c:	defffe04 	addi	sp,sp,-8
  80f770:	dfc00115 	stw	ra,4(sp)
  80f774:	df000015 	stw	fp,0(sp)
  80f778:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f77c:	01802074 	movhi	r6,129
  80f780:	3195af04 	addi	r6,r6,22204
  80f784:	01402074 	movhi	r5,129
  80f788:	294e7904 	addi	r5,r5,14820
  80f78c:	01002074 	movhi	r4,129
  80f790:	2115af04 	addi	r4,r4,22204
  80f794:	080f7040 	call	80f704 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f798:	01802034 	movhi	r6,128
  80f79c:	31809104 	addi	r6,r6,580
  80f7a0:	01402034 	movhi	r5,128
  80f7a4:	29400804 	addi	r5,r5,32
  80f7a8:	01002034 	movhi	r4,128
  80f7ac:	21000804 	addi	r4,r4,32
  80f7b0:	080f7040 	call	80f704 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f7b4:	01802074 	movhi	r6,129
  80f7b8:	318e7904 	addi	r6,r6,14820
  80f7bc:	01402074 	movhi	r5,129
  80f7c0:	294cfe04 	addi	r5,r5,13304
  80f7c4:	01002074 	movhi	r4,129
  80f7c8:	210cfe04 	addi	r4,r4,13304
  80f7cc:	080f7040 	call	80f704 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f7d0:	08123000 	call	812300 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f7d4:	08124e80 	call	8124e8 <alt_icache_flush_all>
}
  80f7d8:	0001883a 	nop
  80f7dc:	e037883a 	mov	sp,fp
  80f7e0:	dfc00117 	ldw	ra,4(sp)
  80f7e4:	df000017 	ldw	fp,0(sp)
  80f7e8:	dec00204 	addi	sp,sp,8
  80f7ec:	f800283a 	ret

0080f7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f7f0:	defffe04 	addi	sp,sp,-8
  80f7f4:	dfc00115 	stw	ra,4(sp)
  80f7f8:	df000015 	stw	fp,0(sp)
  80f7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f800:	d0a00b17 	ldw	r2,-32724(gp)
  80f804:	10000326 	beq	r2,zero,80f814 <alt_get_errno+0x24>
  80f808:	d0a00b17 	ldw	r2,-32724(gp)
  80f80c:	103ee83a 	callr	r2
  80f810:	00000106 	br	80f818 <alt_get_errno+0x28>
  80f814:	d0a7a204 	addi	r2,gp,-24952
}
  80f818:	e037883a 	mov	sp,fp
  80f81c:	dfc00117 	ldw	ra,4(sp)
  80f820:	df000017 	ldw	fp,0(sp)
  80f824:	dec00204 	addi	sp,sp,8
  80f828:	f800283a 	ret

0080f82c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f82c:	defff904 	addi	sp,sp,-28
  80f830:	dfc00615 	stw	ra,24(sp)
  80f834:	df000515 	stw	fp,20(sp)
  80f838:	df000504 	addi	fp,sp,20
  80f83c:	e13ffd15 	stw	r4,-12(fp)
  80f840:	e17ffe15 	stw	r5,-8(fp)
  80f844:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f848:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f84c:	e0bffd17 	ldw	r2,-12(fp)
  80f850:	10000616 	blt	r2,zero,80f86c <lseek+0x40>
  80f854:	e0bffd17 	ldw	r2,-12(fp)
  80f858:	10c00324 	muli	r3,r2,12
  80f85c:	00802074 	movhi	r2,129
  80f860:	1090ac04 	addi	r2,r2,17072
  80f864:	1885883a 	add	r2,r3,r2
  80f868:	00000106 	br	80f870 <lseek+0x44>
  80f86c:	0005883a 	mov	r2,zero
  80f870:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f874:	e0bffc17 	ldw	r2,-16(fp)
  80f878:	10001026 	beq	r2,zero,80f8bc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f87c:	e0bffc17 	ldw	r2,-16(fp)
  80f880:	10800017 	ldw	r2,0(r2)
  80f884:	10800717 	ldw	r2,28(r2)
  80f888:	10000926 	beq	r2,zero,80f8b0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f88c:	e0bffc17 	ldw	r2,-16(fp)
  80f890:	10800017 	ldw	r2,0(r2)
  80f894:	10800717 	ldw	r2,28(r2)
  80f898:	e1bfff17 	ldw	r6,-4(fp)
  80f89c:	e17ffe17 	ldw	r5,-8(fp)
  80f8a0:	e13ffc17 	ldw	r4,-16(fp)
  80f8a4:	103ee83a 	callr	r2
  80f8a8:	e0bffb15 	stw	r2,-20(fp)
  80f8ac:	00000506 	br	80f8c4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f8b0:	00bfde84 	movi	r2,-134
  80f8b4:	e0bffb15 	stw	r2,-20(fp)
  80f8b8:	00000206 	br	80f8c4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f8bc:	00bfebc4 	movi	r2,-81
  80f8c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f8c4:	e0bffb17 	ldw	r2,-20(fp)
  80f8c8:	1000070e 	bge	r2,zero,80f8e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f8cc:	080f7f00 	call	80f7f0 <alt_get_errno>
  80f8d0:	1007883a 	mov	r3,r2
  80f8d4:	e0bffb17 	ldw	r2,-20(fp)
  80f8d8:	0085c83a 	sub	r2,zero,r2
  80f8dc:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f8e0:	00bfffc4 	movi	r2,-1
  80f8e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f8e8:	e0bffb17 	ldw	r2,-20(fp)
}
  80f8ec:	e037883a 	mov	sp,fp
  80f8f0:	dfc00117 	ldw	ra,4(sp)
  80f8f4:	df000017 	ldw	fp,0(sp)
  80f8f8:	dec00204 	addi	sp,sp,8
  80f8fc:	f800283a 	ret

0080f900 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f900:	defffd04 	addi	sp,sp,-12
  80f904:	dfc00215 	stw	ra,8(sp)
  80f908:	df000115 	stw	fp,4(sp)
  80f90c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f910:	0009883a 	mov	r4,zero
  80f914:	080ff1c0 	call	80ff1c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f918:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f91c:	080ff540 	call	80ff54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f920:	01802074 	movhi	r6,129
  80f924:	318dcb04 	addi	r6,r6,14124
  80f928:	01402074 	movhi	r5,129
  80f92c:	294dcb04 	addi	r5,r5,14124
  80f930:	01002074 	movhi	r4,129
  80f934:	210dcb04 	addi	r4,r4,14124
  80f938:	08128800 	call	812880 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f93c:	08124280 	call	812428 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f940:	01002074 	movhi	r4,129
  80f944:	21092204 	addi	r4,r4,9352
  80f948:	08130640 	call	813064 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f94c:	d0a7a317 	ldw	r2,-24948(gp)
  80f950:	d0e7a417 	ldw	r3,-24944(gp)
  80f954:	d127a517 	ldw	r4,-24940(gp)
  80f958:	200d883a 	mov	r6,r4
  80f95c:	180b883a 	mov	r5,r3
  80f960:	1009883a 	mov	r4,r2
  80f964:	080078c0 	call	80078c <main>
  80f968:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f96c:	01000044 	movi	r4,1
  80f970:	080f43c0 	call	80f43c <close>
  exit (result);
  80f974:	e13fff17 	ldw	r4,-4(fp)
  80f978:	08130780 	call	813078 <exit>

0080f97c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f97c:	defffe04 	addi	sp,sp,-8
  80f980:	df000115 	stw	fp,4(sp)
  80f984:	df000104 	addi	fp,sp,4
  80f988:	e13fff15 	stw	r4,-4(fp)
}
  80f98c:	0001883a 	nop
  80f990:	e037883a 	mov	sp,fp
  80f994:	df000017 	ldw	fp,0(sp)
  80f998:	dec00104 	addi	sp,sp,4
  80f99c:	f800283a 	ret

0080f9a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f9a0:	defffe04 	addi	sp,sp,-8
  80f9a4:	df000115 	stw	fp,4(sp)
  80f9a8:	df000104 	addi	fp,sp,4
  80f9ac:	e13fff15 	stw	r4,-4(fp)
}
  80f9b0:	0001883a 	nop
  80f9b4:	e037883a 	mov	sp,fp
  80f9b8:	df000017 	ldw	fp,0(sp)
  80f9bc:	dec00104 	addi	sp,sp,4
  80f9c0:	f800283a 	ret

0080f9c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f9c4:	defffe04 	addi	sp,sp,-8
  80f9c8:	dfc00115 	stw	ra,4(sp)
  80f9cc:	df000015 	stw	fp,0(sp)
  80f9d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f9d4:	d0a00b17 	ldw	r2,-32724(gp)
  80f9d8:	10000326 	beq	r2,zero,80f9e8 <alt_get_errno+0x24>
  80f9dc:	d0a00b17 	ldw	r2,-32724(gp)
  80f9e0:	103ee83a 	callr	r2
  80f9e4:	00000106 	br	80f9ec <alt_get_errno+0x28>
  80f9e8:	d0a7a204 	addi	r2,gp,-24952
}
  80f9ec:	e037883a 	mov	sp,fp
  80f9f0:	dfc00117 	ldw	ra,4(sp)
  80f9f4:	df000017 	ldw	fp,0(sp)
  80f9f8:	dec00204 	addi	sp,sp,8
  80f9fc:	f800283a 	ret

0080fa00 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80fa00:	defff904 	addi	sp,sp,-28
  80fa04:	dfc00615 	stw	ra,24(sp)
  80fa08:	df000515 	stw	fp,20(sp)
  80fa0c:	df000504 	addi	fp,sp,20
  80fa10:	e13ffd15 	stw	r4,-12(fp)
  80fa14:	e17ffe15 	stw	r5,-8(fp)
  80fa18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fa1c:	e0bffd17 	ldw	r2,-12(fp)
  80fa20:	10000616 	blt	r2,zero,80fa3c <read+0x3c>
  80fa24:	e0bffd17 	ldw	r2,-12(fp)
  80fa28:	10c00324 	muli	r3,r2,12
  80fa2c:	00802074 	movhi	r2,129
  80fa30:	1090ac04 	addi	r2,r2,17072
  80fa34:	1885883a 	add	r2,r3,r2
  80fa38:	00000106 	br	80fa40 <read+0x40>
  80fa3c:	0005883a 	mov	r2,zero
  80fa40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fa44:	e0bffb17 	ldw	r2,-20(fp)
  80fa48:	10002226 	beq	r2,zero,80fad4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80fa4c:	e0bffb17 	ldw	r2,-20(fp)
  80fa50:	10800217 	ldw	r2,8(r2)
  80fa54:	108000cc 	andi	r2,r2,3
  80fa58:	10800060 	cmpeqi	r2,r2,1
  80fa5c:	1000181e 	bne	r2,zero,80fac0 <read+0xc0>
        (fd->dev->read))
  80fa60:	e0bffb17 	ldw	r2,-20(fp)
  80fa64:	10800017 	ldw	r2,0(r2)
  80fa68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80fa6c:	10001426 	beq	r2,zero,80fac0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80fa70:	e0bffb17 	ldw	r2,-20(fp)
  80fa74:	10800017 	ldw	r2,0(r2)
  80fa78:	10800517 	ldw	r2,20(r2)
  80fa7c:	e0ffff17 	ldw	r3,-4(fp)
  80fa80:	180d883a 	mov	r6,r3
  80fa84:	e17ffe17 	ldw	r5,-8(fp)
  80fa88:	e13ffb17 	ldw	r4,-20(fp)
  80fa8c:	103ee83a 	callr	r2
  80fa90:	e0bffc15 	stw	r2,-16(fp)
  80fa94:	e0bffc17 	ldw	r2,-16(fp)
  80fa98:	1000070e 	bge	r2,zero,80fab8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80fa9c:	080f9c40 	call	80f9c4 <alt_get_errno>
  80faa0:	1007883a 	mov	r3,r2
  80faa4:	e0bffc17 	ldw	r2,-16(fp)
  80faa8:	0085c83a 	sub	r2,zero,r2
  80faac:	18800015 	stw	r2,0(r3)
          return -1;
  80fab0:	00bfffc4 	movi	r2,-1
  80fab4:	00000c06 	br	80fae8 <read+0xe8>
        }
        return rval;
  80fab8:	e0bffc17 	ldw	r2,-16(fp)
  80fabc:	00000a06 	br	80fae8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80fac0:	080f9c40 	call	80f9c4 <alt_get_errno>
  80fac4:	1007883a 	mov	r3,r2
  80fac8:	00800344 	movi	r2,13
  80facc:	18800015 	stw	r2,0(r3)
  80fad0:	00000406 	br	80fae4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80fad4:	080f9c40 	call	80f9c4 <alt_get_errno>
  80fad8:	1007883a 	mov	r3,r2
  80fadc:	00801444 	movi	r2,81
  80fae0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fae4:	00bfffc4 	movi	r2,-1
}
  80fae8:	e037883a 	mov	sp,fp
  80faec:	dfc00117 	ldw	ra,4(sp)
  80faf0:	df000017 	ldw	fp,0(sp)
  80faf4:	dec00204 	addi	sp,sp,8
  80faf8:	f800283a 	ret

0080fafc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80fafc:	defffe04 	addi	sp,sp,-8
  80fb00:	df000115 	stw	fp,4(sp)
  80fb04:	df000104 	addi	fp,sp,4
  80fb08:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80fb0c:	e0bfff17 	ldw	r2,-4(fp)
  80fb10:	108000d0 	cmplti	r2,r2,3
  80fb14:	10000d1e 	bne	r2,zero,80fb4c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80fb18:	00802074 	movhi	r2,129
  80fb1c:	1090ac04 	addi	r2,r2,17072
  80fb20:	e0ffff17 	ldw	r3,-4(fp)
  80fb24:	18c00324 	muli	r3,r3,12
  80fb28:	10c5883a 	add	r2,r2,r3
  80fb2c:	10800204 	addi	r2,r2,8
  80fb30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80fb34:	00802074 	movhi	r2,129
  80fb38:	1090ac04 	addi	r2,r2,17072
  80fb3c:	e0ffff17 	ldw	r3,-4(fp)
  80fb40:	18c00324 	muli	r3,r3,12
  80fb44:	10c5883a 	add	r2,r2,r3
  80fb48:	10000015 	stw	zero,0(r2)
  }
}
  80fb4c:	0001883a 	nop
  80fb50:	e037883a 	mov	sp,fp
  80fb54:	df000017 	ldw	fp,0(sp)
  80fb58:	dec00104 	addi	sp,sp,4
  80fb5c:	f800283a 	ret

0080fb60 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80fb60:	defff904 	addi	sp,sp,-28
  80fb64:	df000615 	stw	fp,24(sp)
  80fb68:	df000604 	addi	fp,sp,24
  80fb6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb70:	0005303a 	rdctl	r2,status
  80fb74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb78:	e0fffe17 	ldw	r3,-8(fp)
  80fb7c:	00bfff84 	movi	r2,-2
  80fb80:	1884703a 	and	r2,r3,r2
  80fb84:	1001703a 	wrctl	status,r2
  
  return context;
  80fb88:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80fb8c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80fb90:	d0a00c17 	ldw	r2,-32720(gp)
  80fb94:	10c000c4 	addi	r3,r2,3
  80fb98:	00bfff04 	movi	r2,-4
  80fb9c:	1884703a 	and	r2,r3,r2
  80fba0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80fba4:	d0e00c17 	ldw	r3,-32720(gp)
  80fba8:	e0bfff17 	ldw	r2,-4(fp)
  80fbac:	1887883a 	add	r3,r3,r2
  80fbb0:	00804034 	movhi	r2,256
  80fbb4:	10800004 	addi	r2,r2,0
  80fbb8:	10c0062e 	bgeu	r2,r3,80fbd4 <sbrk+0x74>
  80fbbc:	e0bffb17 	ldw	r2,-20(fp)
  80fbc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbc4:	e0bffa17 	ldw	r2,-24(fp)
  80fbc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80fbcc:	00bfffc4 	movi	r2,-1
  80fbd0:	00000b06 	br	80fc00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80fbd4:	d0a00c17 	ldw	r2,-32720(gp)
  80fbd8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80fbdc:	d0e00c17 	ldw	r3,-32720(gp)
  80fbe0:	e0bfff17 	ldw	r2,-4(fp)
  80fbe4:	1885883a 	add	r2,r3,r2
  80fbe8:	d0a00c15 	stw	r2,-32720(gp)
  80fbec:	e0bffb17 	ldw	r2,-20(fp)
  80fbf0:	e0bffc15 	stw	r2,-16(fp)
  80fbf4:	e0bffc17 	ldw	r2,-16(fp)
  80fbf8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80fbfc:	e0bffd17 	ldw	r2,-12(fp)
} 
  80fc00:	e037883a 	mov	sp,fp
  80fc04:	df000017 	ldw	fp,0(sp)
  80fc08:	dec00104 	addi	sp,sp,4
  80fc0c:	f800283a 	ret

0080fc10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fc10:	defffa04 	addi	sp,sp,-24
  80fc14:	df000515 	stw	fp,20(sp)
  80fc18:	df000504 	addi	fp,sp,20
  80fc1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc20:	0005303a 	rdctl	r2,status
  80fc24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc28:	e0fffc17 	ldw	r3,-16(fp)
  80fc2c:	00bfff84 	movi	r2,-2
  80fc30:	1884703a 	and	r2,r3,r2
  80fc34:	1001703a 	wrctl	status,r2
  
  return context;
  80fc38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80fc3c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80fc40:	e0bfff17 	ldw	r2,-4(fp)
  80fc44:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80fc48:	e0bffd17 	ldw	r2,-12(fp)
  80fc4c:	10800017 	ldw	r2,0(r2)
  80fc50:	e0fffd17 	ldw	r3,-12(fp)
  80fc54:	18c00117 	ldw	r3,4(r3)
  80fc58:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80fc5c:	e0bffd17 	ldw	r2,-12(fp)
  80fc60:	10800117 	ldw	r2,4(r2)
  80fc64:	e0fffd17 	ldw	r3,-12(fp)
  80fc68:	18c00017 	ldw	r3,0(r3)
  80fc6c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80fc70:	e0bffd17 	ldw	r2,-12(fp)
  80fc74:	e0fffd17 	ldw	r3,-12(fp)
  80fc78:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80fc7c:	e0bffd17 	ldw	r2,-12(fp)
  80fc80:	e0fffd17 	ldw	r3,-12(fp)
  80fc84:	10c00015 	stw	r3,0(r2)
  80fc88:	e0bffb17 	ldw	r2,-20(fp)
  80fc8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc90:	e0bffe17 	ldw	r2,-8(fp)
  80fc94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80fc98:	0001883a 	nop
  80fc9c:	e037883a 	mov	sp,fp
  80fca0:	df000017 	ldw	fp,0(sp)
  80fca4:	dec00104 	addi	sp,sp,4
  80fca8:	f800283a 	ret

0080fcac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fcac:	defffb04 	addi	sp,sp,-20
  80fcb0:	dfc00415 	stw	ra,16(sp)
  80fcb4:	df000315 	stw	fp,12(sp)
  80fcb8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80fcbc:	d0a00d17 	ldw	r2,-32716(gp)
  80fcc0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80fcc4:	d0a7a717 	ldw	r2,-24932(gp)
  80fcc8:	10800044 	addi	r2,r2,1
  80fccc:	d0a7a715 	stw	r2,-24932(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fcd0:	00002e06 	br	80fd8c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fcd4:	e0bffd17 	ldw	r2,-12(fp)
  80fcd8:	10800017 	ldw	r2,0(r2)
  80fcdc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fce0:	e0bffd17 	ldw	r2,-12(fp)
  80fce4:	10800403 	ldbu	r2,16(r2)
  80fce8:	10803fcc 	andi	r2,r2,255
  80fcec:	10000426 	beq	r2,zero,80fd00 <alt_tick+0x54>
  80fcf0:	d0a7a717 	ldw	r2,-24932(gp)
  80fcf4:	1000021e 	bne	r2,zero,80fd00 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80fcf8:	e0bffd17 	ldw	r2,-12(fp)
  80fcfc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fd00:	e0bffd17 	ldw	r2,-12(fp)
  80fd04:	10800217 	ldw	r2,8(r2)
  80fd08:	d0e7a717 	ldw	r3,-24932(gp)
  80fd0c:	18801d36 	bltu	r3,r2,80fd84 <alt_tick+0xd8>
  80fd10:	e0bffd17 	ldw	r2,-12(fp)
  80fd14:	10800403 	ldbu	r2,16(r2)
  80fd18:	10803fcc 	andi	r2,r2,255
  80fd1c:	1000191e 	bne	r2,zero,80fd84 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fd20:	e0bffd17 	ldw	r2,-12(fp)
  80fd24:	10800317 	ldw	r2,12(r2)
  80fd28:	e0fffd17 	ldw	r3,-12(fp)
  80fd2c:	18c00517 	ldw	r3,20(r3)
  80fd30:	1809883a 	mov	r4,r3
  80fd34:	103ee83a 	callr	r2
  80fd38:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fd3c:	e0bfff17 	ldw	r2,-4(fp)
  80fd40:	1000031e 	bne	r2,zero,80fd50 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fd44:	e13ffd17 	ldw	r4,-12(fp)
  80fd48:	080fc100 	call	80fc10 <alt_alarm_stop>
  80fd4c:	00000d06 	br	80fd84 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fd50:	e0bffd17 	ldw	r2,-12(fp)
  80fd54:	10c00217 	ldw	r3,8(r2)
  80fd58:	e0bfff17 	ldw	r2,-4(fp)
  80fd5c:	1887883a 	add	r3,r3,r2
  80fd60:	e0bffd17 	ldw	r2,-12(fp)
  80fd64:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fd68:	e0bffd17 	ldw	r2,-12(fp)
  80fd6c:	10c00217 	ldw	r3,8(r2)
  80fd70:	d0a7a717 	ldw	r2,-24932(gp)
  80fd74:	1880032e 	bgeu	r3,r2,80fd84 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fd78:	e0bffd17 	ldw	r2,-12(fp)
  80fd7c:	00c00044 	movi	r3,1
  80fd80:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fd84:	e0bffe17 	ldw	r2,-8(fp)
  80fd88:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fd8c:	e0fffd17 	ldw	r3,-12(fp)
  80fd90:	d0a00d04 	addi	r2,gp,-32716
  80fd94:	18bfcf1e 	bne	r3,r2,80fcd4 <__alt_mem_onchip_mem+0xff78fcd4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fd98:	0001883a 	nop
}
  80fd9c:	0001883a 	nop
  80fda0:	e037883a 	mov	sp,fp
  80fda4:	dfc00117 	ldw	ra,4(sp)
  80fda8:	df000017 	ldw	fp,0(sp)
  80fdac:	dec00204 	addi	sp,sp,8
  80fdb0:	f800283a 	ret

0080fdb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fdb4:	defffe04 	addi	sp,sp,-8
  80fdb8:	dfc00115 	stw	ra,4(sp)
  80fdbc:	df000015 	stw	fp,0(sp)
  80fdc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fdc4:	d0a00b17 	ldw	r2,-32724(gp)
  80fdc8:	10000326 	beq	r2,zero,80fdd8 <alt_get_errno+0x24>
  80fdcc:	d0a00b17 	ldw	r2,-32724(gp)
  80fdd0:	103ee83a 	callr	r2
  80fdd4:	00000106 	br	80fddc <alt_get_errno+0x28>
  80fdd8:	d0a7a204 	addi	r2,gp,-24952
}
  80fddc:	e037883a 	mov	sp,fp
  80fde0:	dfc00117 	ldw	ra,4(sp)
  80fde4:	df000017 	ldw	fp,0(sp)
  80fde8:	dec00204 	addi	sp,sp,8
  80fdec:	f800283a 	ret

0080fdf0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fdf0:	defff904 	addi	sp,sp,-28
  80fdf4:	dfc00615 	stw	ra,24(sp)
  80fdf8:	df000515 	stw	fp,20(sp)
  80fdfc:	df000504 	addi	fp,sp,20
  80fe00:	e13ffd15 	stw	r4,-12(fp)
  80fe04:	e17ffe15 	stw	r5,-8(fp)
  80fe08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fe0c:	e0bffd17 	ldw	r2,-12(fp)
  80fe10:	10000616 	blt	r2,zero,80fe2c <write+0x3c>
  80fe14:	e0bffd17 	ldw	r2,-12(fp)
  80fe18:	10c00324 	muli	r3,r2,12
  80fe1c:	00802074 	movhi	r2,129
  80fe20:	1090ac04 	addi	r2,r2,17072
  80fe24:	1885883a 	add	r2,r3,r2
  80fe28:	00000106 	br	80fe30 <write+0x40>
  80fe2c:	0005883a 	mov	r2,zero
  80fe30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fe34:	e0bffb17 	ldw	r2,-20(fp)
  80fe38:	10002126 	beq	r2,zero,80fec0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fe3c:	e0bffb17 	ldw	r2,-20(fp)
  80fe40:	10800217 	ldw	r2,8(r2)
  80fe44:	108000cc 	andi	r2,r2,3
  80fe48:	10001826 	beq	r2,zero,80feac <write+0xbc>
  80fe4c:	e0bffb17 	ldw	r2,-20(fp)
  80fe50:	10800017 	ldw	r2,0(r2)
  80fe54:	10800617 	ldw	r2,24(r2)
  80fe58:	10001426 	beq	r2,zero,80feac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fe5c:	e0bffb17 	ldw	r2,-20(fp)
  80fe60:	10800017 	ldw	r2,0(r2)
  80fe64:	10800617 	ldw	r2,24(r2)
  80fe68:	e0ffff17 	ldw	r3,-4(fp)
  80fe6c:	180d883a 	mov	r6,r3
  80fe70:	e17ffe17 	ldw	r5,-8(fp)
  80fe74:	e13ffb17 	ldw	r4,-20(fp)
  80fe78:	103ee83a 	callr	r2
  80fe7c:	e0bffc15 	stw	r2,-16(fp)
  80fe80:	e0bffc17 	ldw	r2,-16(fp)
  80fe84:	1000070e 	bge	r2,zero,80fea4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80fe88:	080fdb40 	call	80fdb4 <alt_get_errno>
  80fe8c:	1007883a 	mov	r3,r2
  80fe90:	e0bffc17 	ldw	r2,-16(fp)
  80fe94:	0085c83a 	sub	r2,zero,r2
  80fe98:	18800015 	stw	r2,0(r3)
        return -1;
  80fe9c:	00bfffc4 	movi	r2,-1
  80fea0:	00000c06 	br	80fed4 <write+0xe4>
      }
      return rval;
  80fea4:	e0bffc17 	ldw	r2,-16(fp)
  80fea8:	00000a06 	br	80fed4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80feac:	080fdb40 	call	80fdb4 <alt_get_errno>
  80feb0:	1007883a 	mov	r3,r2
  80feb4:	00800344 	movi	r2,13
  80feb8:	18800015 	stw	r2,0(r3)
  80febc:	00000406 	br	80fed0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fec0:	080fdb40 	call	80fdb4 <alt_get_errno>
  80fec4:	1007883a 	mov	r3,r2
  80fec8:	00801444 	movi	r2,81
  80fecc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fed0:	00bfffc4 	movi	r2,-1
}
  80fed4:	e037883a 	mov	sp,fp
  80fed8:	dfc00117 	ldw	ra,4(sp)
  80fedc:	df000017 	ldw	fp,0(sp)
  80fee0:	dec00204 	addi	sp,sp,8
  80fee4:	f800283a 	ret

0080fee8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fee8:	defffd04 	addi	sp,sp,-12
  80feec:	dfc00215 	stw	ra,8(sp)
  80fef0:	df000115 	stw	fp,4(sp)
  80fef4:	df000104 	addi	fp,sp,4
  80fef8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fefc:	d1600804 	addi	r5,gp,-32736
  80ff00:	e13fff17 	ldw	r4,-4(fp)
  80ff04:	08123840 	call	812384 <alt_dev_llist_insert>
}
  80ff08:	e037883a 	mov	sp,fp
  80ff0c:	dfc00117 	ldw	ra,4(sp)
  80ff10:	df000017 	ldw	fp,0(sp)
  80ff14:	dec00204 	addi	sp,sp,8
  80ff18:	f800283a 	ret

0080ff1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ff1c:	defffd04 	addi	sp,sp,-12
  80ff20:	dfc00215 	stw	ra,8(sp)
  80ff24:	df000115 	stw	fp,4(sp)
  80ff28:	df000104 	addi	fp,sp,4
  80ff2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80ff30:	0812b800 	call	812b80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ff34:	00800044 	movi	r2,1
  80ff38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ff3c:	0001883a 	nop
  80ff40:	e037883a 	mov	sp,fp
  80ff44:	dfc00117 	ldw	ra,4(sp)
  80ff48:	df000017 	ldw	fp,0(sp)
  80ff4c:	dec00204 	addi	sp,sp,8
  80ff50:	f800283a 	ret

0080ff54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ff54:	defffe04 	addi	sp,sp,-8
  80ff58:	dfc00115 	stw	ra,4(sp)
  80ff5c:	df000015 	stw	fp,0(sp)
  80ff60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80ff64:	01c0fa04 	movi	r7,1000
  80ff68:	01800084 	movi	r6,2
  80ff6c:	000b883a 	mov	r5,zero
  80ff70:	01004434 	movhi	r4,272
  80ff74:	21040804 	addi	r4,r4,4128
  80ff78:	08119ac0 	call	8119ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80ff7c:	01800044 	movi	r6,1
  80ff80:	000b883a 	mov	r5,zero
  80ff84:	01002074 	movhi	r4,129
  80ff88:	21111604 	addi	r4,r4,17496
  80ff8c:	08101540 	call	810154 <altera_avalon_jtag_uart_init>
  80ff90:	01002074 	movhi	r4,129
  80ff94:	21110c04 	addi	r4,r4,17456
  80ff98:	080fee80 	call	80fee8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80ff9c:	01002074 	movhi	r4,129
  80ffa0:	21152e04 	addi	r4,r4,21688
  80ffa4:	08117a00 	call	8117a0 <altera_avalon_lcd_16207_init>
  80ffa8:	01002074 	movhi	r4,129
  80ffac:	21152404 	addi	r4,r4,21648
  80ffb0:	080fee80 	call	80fee8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  80ffb4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80ffb8:	000d883a 	mov	r6,zero
  80ffbc:	000b883a 	mov	r5,zero
  80ffc0:	01002074 	movhi	r4,129
  80ffc4:	21157604 	addi	r4,r4,21976
  80ffc8:	0811b380 	call	811b38 <altera_avalon_uart_init>
  80ffcc:	01002074 	movhi	r4,129
  80ffd0:	21156c04 	addi	r4,r4,21936
  80ffd4:	080fee80 	call	80fee8 <alt_dev_reg>
}
  80ffd8:	0001883a 	nop
  80ffdc:	e037883a 	mov	sp,fp
  80ffe0:	dfc00117 	ldw	ra,4(sp)
  80ffe4:	df000017 	ldw	fp,0(sp)
  80ffe8:	dec00204 	addi	sp,sp,8
  80ffec:	f800283a 	ret

0080fff0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80fff0:	defffa04 	addi	sp,sp,-24
  80fff4:	dfc00515 	stw	ra,20(sp)
  80fff8:	df000415 	stw	fp,16(sp)
  80fffc:	df000404 	addi	fp,sp,16
  810000:	e13ffd15 	stw	r4,-12(fp)
  810004:	e17ffe15 	stw	r5,-8(fp)
  810008:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81000c:	e0bffd17 	ldw	r2,-12(fp)
  810010:	10800017 	ldw	r2,0(r2)
  810014:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810018:	e0bffc17 	ldw	r2,-16(fp)
  81001c:	10c00a04 	addi	r3,r2,40
  810020:	e0bffd17 	ldw	r2,-12(fp)
  810024:	10800217 	ldw	r2,8(r2)
  810028:	100f883a 	mov	r7,r2
  81002c:	e1bfff17 	ldw	r6,-4(fp)
  810030:	e17ffe17 	ldw	r5,-8(fp)
  810034:	1809883a 	mov	r4,r3
  810038:	08106180 	call	810618 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81003c:	e037883a 	mov	sp,fp
  810040:	dfc00117 	ldw	ra,4(sp)
  810044:	df000017 	ldw	fp,0(sp)
  810048:	dec00204 	addi	sp,sp,8
  81004c:	f800283a 	ret

00810050 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810050:	defffa04 	addi	sp,sp,-24
  810054:	dfc00515 	stw	ra,20(sp)
  810058:	df000415 	stw	fp,16(sp)
  81005c:	df000404 	addi	fp,sp,16
  810060:	e13ffd15 	stw	r4,-12(fp)
  810064:	e17ffe15 	stw	r5,-8(fp)
  810068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81006c:	e0bffd17 	ldw	r2,-12(fp)
  810070:	10800017 	ldw	r2,0(r2)
  810074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810078:	e0bffc17 	ldw	r2,-16(fp)
  81007c:	10c00a04 	addi	r3,r2,40
  810080:	e0bffd17 	ldw	r2,-12(fp)
  810084:	10800217 	ldw	r2,8(r2)
  810088:	100f883a 	mov	r7,r2
  81008c:	e1bfff17 	ldw	r6,-4(fp)
  810090:	e17ffe17 	ldw	r5,-8(fp)
  810094:	1809883a 	mov	r4,r3
  810098:	08108340 	call	810834 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81009c:	e037883a 	mov	sp,fp
  8100a0:	dfc00117 	ldw	ra,4(sp)
  8100a4:	df000017 	ldw	fp,0(sp)
  8100a8:	dec00204 	addi	sp,sp,8
  8100ac:	f800283a 	ret

008100b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8100b0:	defffc04 	addi	sp,sp,-16
  8100b4:	dfc00315 	stw	ra,12(sp)
  8100b8:	df000215 	stw	fp,8(sp)
  8100bc:	df000204 	addi	fp,sp,8
  8100c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8100c4:	e0bfff17 	ldw	r2,-4(fp)
  8100c8:	10800017 	ldw	r2,0(r2)
  8100cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8100d0:	e0bffe17 	ldw	r2,-8(fp)
  8100d4:	10c00a04 	addi	r3,r2,40
  8100d8:	e0bfff17 	ldw	r2,-4(fp)
  8100dc:	10800217 	ldw	r2,8(r2)
  8100e0:	100b883a 	mov	r5,r2
  8100e4:	1809883a 	mov	r4,r3
  8100e8:	08104c00 	call	8104c0 <altera_avalon_jtag_uart_close>
}
  8100ec:	e037883a 	mov	sp,fp
  8100f0:	dfc00117 	ldw	ra,4(sp)
  8100f4:	df000017 	ldw	fp,0(sp)
  8100f8:	dec00204 	addi	sp,sp,8
  8100fc:	f800283a 	ret

00810100 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810100:	defffa04 	addi	sp,sp,-24
  810104:	dfc00515 	stw	ra,20(sp)
  810108:	df000415 	stw	fp,16(sp)
  81010c:	df000404 	addi	fp,sp,16
  810110:	e13ffd15 	stw	r4,-12(fp)
  810114:	e17ffe15 	stw	r5,-8(fp)
  810118:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81011c:	e0bffd17 	ldw	r2,-12(fp)
  810120:	10800017 	ldw	r2,0(r2)
  810124:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810128:	e0bffc17 	ldw	r2,-16(fp)
  81012c:	10800a04 	addi	r2,r2,40
  810130:	e1bfff17 	ldw	r6,-4(fp)
  810134:	e17ffe17 	ldw	r5,-8(fp)
  810138:	1009883a 	mov	r4,r2
  81013c:	08105280 	call	810528 <altera_avalon_jtag_uart_ioctl>
}
  810140:	e037883a 	mov	sp,fp
  810144:	dfc00117 	ldw	ra,4(sp)
  810148:	df000017 	ldw	fp,0(sp)
  81014c:	dec00204 	addi	sp,sp,8
  810150:	f800283a 	ret

00810154 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810154:	defffa04 	addi	sp,sp,-24
  810158:	dfc00515 	stw	ra,20(sp)
  81015c:	df000415 	stw	fp,16(sp)
  810160:	df000404 	addi	fp,sp,16
  810164:	e13ffd15 	stw	r4,-12(fp)
  810168:	e17ffe15 	stw	r5,-8(fp)
  81016c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810170:	e0bffd17 	ldw	r2,-12(fp)
  810174:	00c00044 	movi	r3,1
  810178:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81017c:	e0bffd17 	ldw	r2,-12(fp)
  810180:	10800017 	ldw	r2,0(r2)
  810184:	10800104 	addi	r2,r2,4
  810188:	1007883a 	mov	r3,r2
  81018c:	e0bffd17 	ldw	r2,-12(fp)
  810190:	10800817 	ldw	r2,32(r2)
  810194:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810198:	e0bffe17 	ldw	r2,-8(fp)
  81019c:	e0ffff17 	ldw	r3,-4(fp)
  8101a0:	d8000015 	stw	zero,0(sp)
  8101a4:	e1fffd17 	ldw	r7,-12(fp)
  8101a8:	01802074 	movhi	r6,129
  8101ac:	31808504 	addi	r6,r6,532
  8101b0:	180b883a 	mov	r5,r3
  8101b4:	1009883a 	mov	r4,r2
  8101b8:	081251c0 	call	81251c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8101bc:	e0bffd17 	ldw	r2,-12(fp)
  8101c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8101c4:	e0bffd17 	ldw	r2,-12(fp)
  8101c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8101cc:	d0e7a617 	ldw	r3,-24936(gp)
  8101d0:	e1fffd17 	ldw	r7,-12(fp)
  8101d4:	01802074 	movhi	r6,129
  8101d8:	31810804 	addi	r6,r6,1056
  8101dc:	180b883a 	mov	r5,r3
  8101e0:	1009883a 	mov	r4,r2
  8101e4:	080f2d40 	call	80f2d4 <alt_alarm_start>
  8101e8:	1000040e 	bge	r2,zero,8101fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8101ec:	e0fffd17 	ldw	r3,-12(fp)
  8101f0:	00a00034 	movhi	r2,32768
  8101f4:	10bfffc4 	addi	r2,r2,-1
  8101f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8101fc:	0001883a 	nop
  810200:	e037883a 	mov	sp,fp
  810204:	dfc00117 	ldw	ra,4(sp)
  810208:	df000017 	ldw	fp,0(sp)
  81020c:	dec00204 	addi	sp,sp,8
  810210:	f800283a 	ret

00810214 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810214:	defff804 	addi	sp,sp,-32
  810218:	df000715 	stw	fp,28(sp)
  81021c:	df000704 	addi	fp,sp,28
  810220:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810224:	e0bfff17 	ldw	r2,-4(fp)
  810228:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  81022c:	e0bffb17 	ldw	r2,-20(fp)
  810230:	10800017 	ldw	r2,0(r2)
  810234:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810238:	e0bffc17 	ldw	r2,-16(fp)
  81023c:	10800104 	addi	r2,r2,4
  810240:	10800037 	ldwio	r2,0(r2)
  810244:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810248:	e0bffd17 	ldw	r2,-12(fp)
  81024c:	1080c00c 	andi	r2,r2,768
  810250:	10006d26 	beq	r2,zero,810408 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810254:	e0bffd17 	ldw	r2,-12(fp)
  810258:	1080400c 	andi	r2,r2,256
  81025c:	10003526 	beq	r2,zero,810334 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810260:	00800074 	movhi	r2,1
  810264:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810268:	e0bffb17 	ldw	r2,-20(fp)
  81026c:	10800a17 	ldw	r2,40(r2)
  810270:	10800044 	addi	r2,r2,1
  810274:	1081ffcc 	andi	r2,r2,2047
  810278:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  81027c:	e0bffb17 	ldw	r2,-20(fp)
  810280:	10c00b17 	ldw	r3,44(r2)
  810284:	e0bffe17 	ldw	r2,-8(fp)
  810288:	18801526 	beq	r3,r2,8102e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  81028c:	e0bffc17 	ldw	r2,-16(fp)
  810290:	10800037 	ldwio	r2,0(r2)
  810294:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810298:	e0bff917 	ldw	r2,-28(fp)
  81029c:	10a0000c 	andi	r2,r2,32768
  8102a0:	10001126 	beq	r2,zero,8102e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8102a4:	e0bffb17 	ldw	r2,-20(fp)
  8102a8:	10800a17 	ldw	r2,40(r2)
  8102ac:	e0fff917 	ldw	r3,-28(fp)
  8102b0:	1809883a 	mov	r4,r3
  8102b4:	e0fffb17 	ldw	r3,-20(fp)
  8102b8:	1885883a 	add	r2,r3,r2
  8102bc:	10800e04 	addi	r2,r2,56
  8102c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8102c4:	e0bffb17 	ldw	r2,-20(fp)
  8102c8:	10800a17 	ldw	r2,40(r2)
  8102cc:	10800044 	addi	r2,r2,1
  8102d0:	10c1ffcc 	andi	r3,r2,2047
  8102d4:	e0bffb17 	ldw	r2,-20(fp)
  8102d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8102dc:	003fe206 	br	810268 <__alt_mem_onchip_mem+0xff790268>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  8102e0:	0001883a 	nop
  8102e4:	00000106 	br	8102ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  8102e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8102ec:	e0bff917 	ldw	r2,-28(fp)
  8102f0:	10bfffec 	andhi	r2,r2,65535
  8102f4:	10000f26 	beq	r2,zero,810334 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8102f8:	e0bffb17 	ldw	r2,-20(fp)
  8102fc:	10c00817 	ldw	r3,32(r2)
  810300:	00bfff84 	movi	r2,-2
  810304:	1886703a 	and	r3,r3,r2
  810308:	e0bffb17 	ldw	r2,-20(fp)
  81030c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810310:	e0bffc17 	ldw	r2,-16(fp)
  810314:	10800104 	addi	r2,r2,4
  810318:	1007883a 	mov	r3,r2
  81031c:	e0bffb17 	ldw	r2,-20(fp)
  810320:	10800817 	ldw	r2,32(r2)
  810324:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810328:	e0bffc17 	ldw	r2,-16(fp)
  81032c:	10800104 	addi	r2,r2,4
  810330:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810334:	e0bffd17 	ldw	r2,-12(fp)
  810338:	1080800c 	andi	r2,r2,512
  81033c:	103fbe26 	beq	r2,zero,810238 <__alt_mem_onchip_mem+0xff790238>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810340:	e0bffd17 	ldw	r2,-12(fp)
  810344:	1004d43a 	srli	r2,r2,16
  810348:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81034c:	00001406 	br	8103a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810350:	e0bffc17 	ldw	r2,-16(fp)
  810354:	e0fffb17 	ldw	r3,-20(fp)
  810358:	18c00d17 	ldw	r3,52(r3)
  81035c:	e13ffb17 	ldw	r4,-20(fp)
  810360:	20c7883a 	add	r3,r4,r3
  810364:	18c20e04 	addi	r3,r3,2104
  810368:	18c00003 	ldbu	r3,0(r3)
  81036c:	18c03fcc 	andi	r3,r3,255
  810370:	18c0201c 	xori	r3,r3,128
  810374:	18ffe004 	addi	r3,r3,-128
  810378:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81037c:	e0bffb17 	ldw	r2,-20(fp)
  810380:	10800d17 	ldw	r2,52(r2)
  810384:	10800044 	addi	r2,r2,1
  810388:	10c1ffcc 	andi	r3,r2,2047
  81038c:	e0bffb17 	ldw	r2,-20(fp)
  810390:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810394:	e0bffa17 	ldw	r2,-24(fp)
  810398:	10bfffc4 	addi	r2,r2,-1
  81039c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8103a0:	e0bffa17 	ldw	r2,-24(fp)
  8103a4:	10000526 	beq	r2,zero,8103bc <altera_avalon_jtag_uart_irq+0x1a8>
  8103a8:	e0bffb17 	ldw	r2,-20(fp)
  8103ac:	10c00d17 	ldw	r3,52(r2)
  8103b0:	e0bffb17 	ldw	r2,-20(fp)
  8103b4:	10800c17 	ldw	r2,48(r2)
  8103b8:	18bfe51e 	bne	r3,r2,810350 <__alt_mem_onchip_mem+0xff790350>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8103bc:	e0bffa17 	ldw	r2,-24(fp)
  8103c0:	103f9d26 	beq	r2,zero,810238 <__alt_mem_onchip_mem+0xff790238>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8103c4:	e0bffb17 	ldw	r2,-20(fp)
  8103c8:	10c00817 	ldw	r3,32(r2)
  8103cc:	00bfff44 	movi	r2,-3
  8103d0:	1886703a 	and	r3,r3,r2
  8103d4:	e0bffb17 	ldw	r2,-20(fp)
  8103d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8103dc:	e0bffb17 	ldw	r2,-20(fp)
  8103e0:	10800017 	ldw	r2,0(r2)
  8103e4:	10800104 	addi	r2,r2,4
  8103e8:	1007883a 	mov	r3,r2
  8103ec:	e0bffb17 	ldw	r2,-20(fp)
  8103f0:	10800817 	ldw	r2,32(r2)
  8103f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8103f8:	e0bffc17 	ldw	r2,-16(fp)
  8103fc:	10800104 	addi	r2,r2,4
  810400:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810404:	003f8c06 	br	810238 <__alt_mem_onchip_mem+0xff790238>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810408:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  81040c:	0001883a 	nop
  810410:	e037883a 	mov	sp,fp
  810414:	df000017 	ldw	fp,0(sp)
  810418:	dec00104 	addi	sp,sp,4
  81041c:	f800283a 	ret

00810420 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810420:	defff804 	addi	sp,sp,-32
  810424:	df000715 	stw	fp,28(sp)
  810428:	df000704 	addi	fp,sp,28
  81042c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810430:	e0bffb17 	ldw	r2,-20(fp)
  810434:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810438:	e0bff917 	ldw	r2,-28(fp)
  81043c:	10800017 	ldw	r2,0(r2)
  810440:	10800104 	addi	r2,r2,4
  810444:	10800037 	ldwio	r2,0(r2)
  810448:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81044c:	e0bffa17 	ldw	r2,-24(fp)
  810450:	1081000c 	andi	r2,r2,1024
  810454:	10000b26 	beq	r2,zero,810484 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810458:	e0bff917 	ldw	r2,-28(fp)
  81045c:	10800017 	ldw	r2,0(r2)
  810460:	10800104 	addi	r2,r2,4
  810464:	1007883a 	mov	r3,r2
  810468:	e0bff917 	ldw	r2,-28(fp)
  81046c:	10800817 	ldw	r2,32(r2)
  810470:	10810014 	ori	r2,r2,1024
  810474:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810478:	e0bff917 	ldw	r2,-28(fp)
  81047c:	10000915 	stw	zero,36(r2)
  810480:	00000a06 	br	8104ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810484:	e0bff917 	ldw	r2,-28(fp)
  810488:	10c00917 	ldw	r3,36(r2)
  81048c:	00a00034 	movhi	r2,32768
  810490:	10bfff04 	addi	r2,r2,-4
  810494:	10c00536 	bltu	r2,r3,8104ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810498:	e0bff917 	ldw	r2,-28(fp)
  81049c:	10800917 	ldw	r2,36(r2)
  8104a0:	10c00044 	addi	r3,r2,1
  8104a4:	e0bff917 	ldw	r2,-28(fp)
  8104a8:	10c00915 	stw	r3,36(r2)
  8104ac:	d0a7a617 	ldw	r2,-24936(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8104b0:	e037883a 	mov	sp,fp
  8104b4:	df000017 	ldw	fp,0(sp)
  8104b8:	dec00104 	addi	sp,sp,4
  8104bc:	f800283a 	ret

008104c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8104c0:	defffd04 	addi	sp,sp,-12
  8104c4:	df000215 	stw	fp,8(sp)
  8104c8:	df000204 	addi	fp,sp,8
  8104cc:	e13ffe15 	stw	r4,-8(fp)
  8104d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8104d4:	00000506 	br	8104ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8104d8:	e0bfff17 	ldw	r2,-4(fp)
  8104dc:	1090000c 	andi	r2,r2,16384
  8104e0:	10000226 	beq	r2,zero,8104ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8104e4:	00bffd44 	movi	r2,-11
  8104e8:	00000b06 	br	810518 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8104ec:	e0bffe17 	ldw	r2,-8(fp)
  8104f0:	10c00d17 	ldw	r3,52(r2)
  8104f4:	e0bffe17 	ldw	r2,-8(fp)
  8104f8:	10800c17 	ldw	r2,48(r2)
  8104fc:	18800526 	beq	r3,r2,810514 <altera_avalon_jtag_uart_close+0x54>
  810500:	e0bffe17 	ldw	r2,-8(fp)
  810504:	10c00917 	ldw	r3,36(r2)
  810508:	e0bffe17 	ldw	r2,-8(fp)
  81050c:	10800117 	ldw	r2,4(r2)
  810510:	18bff136 	bltu	r3,r2,8104d8 <__alt_mem_onchip_mem+0xff7904d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810514:	0005883a 	mov	r2,zero
}
  810518:	e037883a 	mov	sp,fp
  81051c:	df000017 	ldw	fp,0(sp)
  810520:	dec00104 	addi	sp,sp,4
  810524:	f800283a 	ret

00810528 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810528:	defffa04 	addi	sp,sp,-24
  81052c:	df000515 	stw	fp,20(sp)
  810530:	df000504 	addi	fp,sp,20
  810534:	e13ffd15 	stw	r4,-12(fp)
  810538:	e17ffe15 	stw	r5,-8(fp)
  81053c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  810540:	00bff9c4 	movi	r2,-25
  810544:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810548:	e0bffe17 	ldw	r2,-8(fp)
  81054c:	10da8060 	cmpeqi	r3,r2,27137
  810550:	1800031e 	bne	r3,zero,810560 <altera_avalon_jtag_uart_ioctl+0x38>
  810554:	109a80a0 	cmpeqi	r2,r2,27138
  810558:	1000181e 	bne	r2,zero,8105bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  81055c:	00002906 	br	810604 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  810560:	e0bffd17 	ldw	r2,-12(fp)
  810564:	10c00117 	ldw	r3,4(r2)
  810568:	00a00034 	movhi	r2,32768
  81056c:	10bfffc4 	addi	r2,r2,-1
  810570:	18802126 	beq	r3,r2,8105f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810574:	e0bfff17 	ldw	r2,-4(fp)
  810578:	10800017 	ldw	r2,0(r2)
  81057c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  810580:	e0bffc17 	ldw	r2,-16(fp)
  810584:	10800090 	cmplti	r2,r2,2
  810588:	1000061e 	bne	r2,zero,8105a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  81058c:	e0fffc17 	ldw	r3,-16(fp)
  810590:	00a00034 	movhi	r2,32768
  810594:	10bfffc4 	addi	r2,r2,-1
  810598:	18800226 	beq	r3,r2,8105a4 <altera_avalon_jtag_uart_ioctl+0x7c>
  81059c:	e0bffc17 	ldw	r2,-16(fp)
  8105a0:	00000206 	br	8105ac <altera_avalon_jtag_uart_ioctl+0x84>
  8105a4:	00a00034 	movhi	r2,32768
  8105a8:	10bfff84 	addi	r2,r2,-2
  8105ac:	e0fffd17 	ldw	r3,-12(fp)
  8105b0:	18800115 	stw	r2,4(r3)
      rc = 0;
  8105b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8105b8:	00000f06 	br	8105f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8105bc:	e0bffd17 	ldw	r2,-12(fp)
  8105c0:	10c00117 	ldw	r3,4(r2)
  8105c4:	00a00034 	movhi	r2,32768
  8105c8:	10bfffc4 	addi	r2,r2,-1
  8105cc:	18800c26 	beq	r3,r2,810600 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8105d0:	e0bffd17 	ldw	r2,-12(fp)
  8105d4:	10c00917 	ldw	r3,36(r2)
  8105d8:	e0bffd17 	ldw	r2,-12(fp)
  8105dc:	10800117 	ldw	r2,4(r2)
  8105e0:	1885803a 	cmpltu	r2,r3,r2
  8105e4:	10c03fcc 	andi	r3,r2,255
  8105e8:	e0bfff17 	ldw	r2,-4(fp)
  8105ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
  8105f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8105f4:	00000206 	br	810600 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  8105f8:	0001883a 	nop
  8105fc:	00000106 	br	810604 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  810600:	0001883a 	nop

  default:
    break;
  }

  return rc;
  810604:	e0bffb17 	ldw	r2,-20(fp)
}
  810608:	e037883a 	mov	sp,fp
  81060c:	df000017 	ldw	fp,0(sp)
  810610:	dec00104 	addi	sp,sp,4
  810614:	f800283a 	ret

00810618 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810618:	defff304 	addi	sp,sp,-52
  81061c:	dfc00c15 	stw	ra,48(sp)
  810620:	df000b15 	stw	fp,44(sp)
  810624:	df000b04 	addi	fp,sp,44
  810628:	e13ffc15 	stw	r4,-16(fp)
  81062c:	e17ffd15 	stw	r5,-12(fp)
  810630:	e1bffe15 	stw	r6,-8(fp)
  810634:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810638:	e0bffd17 	ldw	r2,-12(fp)
  81063c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810640:	00004706 	br	810760 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810644:	e0bffc17 	ldw	r2,-16(fp)
  810648:	10800a17 	ldw	r2,40(r2)
  81064c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  810650:	e0bffc17 	ldw	r2,-16(fp)
  810654:	10800b17 	ldw	r2,44(r2)
  810658:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  81065c:	e0fff717 	ldw	r3,-36(fp)
  810660:	e0bff817 	ldw	r2,-32(fp)
  810664:	18800536 	bltu	r3,r2,81067c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810668:	e0fff717 	ldw	r3,-36(fp)
  81066c:	e0bff817 	ldw	r2,-32(fp)
  810670:	1885c83a 	sub	r2,r3,r2
  810674:	e0bff615 	stw	r2,-40(fp)
  810678:	00000406 	br	81068c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81067c:	00c20004 	movi	r3,2048
  810680:	e0bff817 	ldw	r2,-32(fp)
  810684:	1885c83a 	sub	r2,r3,r2
  810688:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  81068c:	e0bff617 	ldw	r2,-40(fp)
  810690:	10001e26 	beq	r2,zero,81070c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  810694:	e0fffe17 	ldw	r3,-8(fp)
  810698:	e0bff617 	ldw	r2,-40(fp)
  81069c:	1880022e 	bgeu	r3,r2,8106a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8106a0:	e0bffe17 	ldw	r2,-8(fp)
  8106a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8106a8:	e0bffc17 	ldw	r2,-16(fp)
  8106ac:	10c00e04 	addi	r3,r2,56
  8106b0:	e0bff817 	ldw	r2,-32(fp)
  8106b4:	1885883a 	add	r2,r3,r2
  8106b8:	e1bff617 	ldw	r6,-40(fp)
  8106bc:	100b883a 	mov	r5,r2
  8106c0:	e13ff517 	ldw	r4,-44(fp)
  8106c4:	0807f2c0 	call	807f2c <memcpy>
      ptr   += n;
  8106c8:	e0fff517 	ldw	r3,-44(fp)
  8106cc:	e0bff617 	ldw	r2,-40(fp)
  8106d0:	1885883a 	add	r2,r3,r2
  8106d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8106d8:	e0fffe17 	ldw	r3,-8(fp)
  8106dc:	e0bff617 	ldw	r2,-40(fp)
  8106e0:	1885c83a 	sub	r2,r3,r2
  8106e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8106e8:	e0fff817 	ldw	r3,-32(fp)
  8106ec:	e0bff617 	ldw	r2,-40(fp)
  8106f0:	1885883a 	add	r2,r3,r2
  8106f4:	10c1ffcc 	andi	r3,r2,2047
  8106f8:	e0bffc17 	ldw	r2,-16(fp)
  8106fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  810700:	e0bffe17 	ldw	r2,-8(fp)
  810704:	00bfcf16 	blt	zero,r2,810644 <__alt_mem_onchip_mem+0xff790644>
  810708:	00000106 	br	810710 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  81070c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  810710:	e0fff517 	ldw	r3,-44(fp)
  810714:	e0bffd17 	ldw	r2,-12(fp)
  810718:	1880141e 	bne	r3,r2,81076c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81071c:	e0bfff17 	ldw	r2,-4(fp)
  810720:	1090000c 	andi	r2,r2,16384
  810724:	1000131e 	bne	r2,zero,810774 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810728:	0001883a 	nop
  81072c:	e0bffc17 	ldw	r2,-16(fp)
  810730:	10c00a17 	ldw	r3,40(r2)
  810734:	e0bff717 	ldw	r2,-36(fp)
  810738:	1880051e 	bne	r3,r2,810750 <altera_avalon_jtag_uart_read+0x138>
  81073c:	e0bffc17 	ldw	r2,-16(fp)
  810740:	10c00917 	ldw	r3,36(r2)
  810744:	e0bffc17 	ldw	r2,-16(fp)
  810748:	10800117 	ldw	r2,4(r2)
  81074c:	18bff736 	bltu	r3,r2,81072c <__alt_mem_onchip_mem+0xff79072c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  810750:	e0bffc17 	ldw	r2,-16(fp)
  810754:	10c00a17 	ldw	r3,40(r2)
  810758:	e0bff717 	ldw	r2,-36(fp)
  81075c:	18800726 	beq	r3,r2,81077c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  810760:	e0bffe17 	ldw	r2,-8(fp)
  810764:	00bfb716 	blt	zero,r2,810644 <__alt_mem_onchip_mem+0xff790644>
  810768:	00000506 	br	810780 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  81076c:	0001883a 	nop
  810770:	00000306 	br	810780 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  810774:	0001883a 	nop
  810778:	00000106 	br	810780 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  81077c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  810780:	e0fff517 	ldw	r3,-44(fp)
  810784:	e0bffd17 	ldw	r2,-12(fp)
  810788:	18801826 	beq	r3,r2,8107ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81078c:	0005303a 	rdctl	r2,status
  810790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810794:	e0fffb17 	ldw	r3,-20(fp)
  810798:	00bfff84 	movi	r2,-2
  81079c:	1884703a 	and	r2,r3,r2
  8107a0:	1001703a 	wrctl	status,r2
  
  return context;
  8107a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8107a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8107ac:	e0bffc17 	ldw	r2,-16(fp)
  8107b0:	10800817 	ldw	r2,32(r2)
  8107b4:	10c00054 	ori	r3,r2,1
  8107b8:	e0bffc17 	ldw	r2,-16(fp)
  8107bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8107c0:	e0bffc17 	ldw	r2,-16(fp)
  8107c4:	10800017 	ldw	r2,0(r2)
  8107c8:	10800104 	addi	r2,r2,4
  8107cc:	1007883a 	mov	r3,r2
  8107d0:	e0bffc17 	ldw	r2,-16(fp)
  8107d4:	10800817 	ldw	r2,32(r2)
  8107d8:	18800035 	stwio	r2,0(r3)
  8107dc:	e0bffa17 	ldw	r2,-24(fp)
  8107e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107e4:	e0bff917 	ldw	r2,-28(fp)
  8107e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8107ec:	e0fff517 	ldw	r3,-44(fp)
  8107f0:	e0bffd17 	ldw	r2,-12(fp)
  8107f4:	18800426 	beq	r3,r2,810808 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  8107f8:	e0fff517 	ldw	r3,-44(fp)
  8107fc:	e0bffd17 	ldw	r2,-12(fp)
  810800:	1885c83a 	sub	r2,r3,r2
  810804:	00000606 	br	810820 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  810808:	e0bfff17 	ldw	r2,-4(fp)
  81080c:	1090000c 	andi	r2,r2,16384
  810810:	10000226 	beq	r2,zero,81081c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  810814:	00bffd44 	movi	r2,-11
  810818:	00000106 	br	810820 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  81081c:	00bffec4 	movi	r2,-5
}
  810820:	e037883a 	mov	sp,fp
  810824:	dfc00117 	ldw	ra,4(sp)
  810828:	df000017 	ldw	fp,0(sp)
  81082c:	dec00204 	addi	sp,sp,8
  810830:	f800283a 	ret

00810834 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810834:	defff304 	addi	sp,sp,-52
  810838:	dfc00c15 	stw	ra,48(sp)
  81083c:	df000b15 	stw	fp,44(sp)
  810840:	df000b04 	addi	fp,sp,44
  810844:	e13ffc15 	stw	r4,-16(fp)
  810848:	e17ffd15 	stw	r5,-12(fp)
  81084c:	e1bffe15 	stw	r6,-8(fp)
  810850:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810854:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810858:	e0bffd17 	ldw	r2,-12(fp)
  81085c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810860:	00003706 	br	810940 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810864:	e0bffc17 	ldw	r2,-16(fp)
  810868:	10800c17 	ldw	r2,48(r2)
  81086c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  810870:	e0bffc17 	ldw	r2,-16(fp)
  810874:	10800d17 	ldw	r2,52(r2)
  810878:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  81087c:	e0fff917 	ldw	r3,-28(fp)
  810880:	e0bff517 	ldw	r2,-44(fp)
  810884:	1880062e 	bgeu	r3,r2,8108a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  810888:	e0fff517 	ldw	r3,-44(fp)
  81088c:	e0bff917 	ldw	r2,-28(fp)
  810890:	1885c83a 	sub	r2,r3,r2
  810894:	10bfffc4 	addi	r2,r2,-1
  810898:	e0bff615 	stw	r2,-40(fp)
  81089c:	00000b06 	br	8108cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8108a0:	e0bff517 	ldw	r2,-44(fp)
  8108a4:	10000526 	beq	r2,zero,8108bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8108a8:	00c20004 	movi	r3,2048
  8108ac:	e0bff917 	ldw	r2,-28(fp)
  8108b0:	1885c83a 	sub	r2,r3,r2
  8108b4:	e0bff615 	stw	r2,-40(fp)
  8108b8:	00000406 	br	8108cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8108bc:	00c1ffc4 	movi	r3,2047
  8108c0:	e0bff917 	ldw	r2,-28(fp)
  8108c4:	1885c83a 	sub	r2,r3,r2
  8108c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8108cc:	e0bff617 	ldw	r2,-40(fp)
  8108d0:	10001e26 	beq	r2,zero,81094c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8108d4:	e0fffe17 	ldw	r3,-8(fp)
  8108d8:	e0bff617 	ldw	r2,-40(fp)
  8108dc:	1880022e 	bgeu	r3,r2,8108e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8108e0:	e0bffe17 	ldw	r2,-8(fp)
  8108e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8108e8:	e0bffc17 	ldw	r2,-16(fp)
  8108ec:	10c20e04 	addi	r3,r2,2104
  8108f0:	e0bff917 	ldw	r2,-28(fp)
  8108f4:	1885883a 	add	r2,r3,r2
  8108f8:	e1bff617 	ldw	r6,-40(fp)
  8108fc:	e17ffd17 	ldw	r5,-12(fp)
  810900:	1009883a 	mov	r4,r2
  810904:	0807f2c0 	call	807f2c <memcpy>
      ptr   += n;
  810908:	e0fffd17 	ldw	r3,-12(fp)
  81090c:	e0bff617 	ldw	r2,-40(fp)
  810910:	1885883a 	add	r2,r3,r2
  810914:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810918:	e0fffe17 	ldw	r3,-8(fp)
  81091c:	e0bff617 	ldw	r2,-40(fp)
  810920:	1885c83a 	sub	r2,r3,r2
  810924:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810928:	e0fff917 	ldw	r3,-28(fp)
  81092c:	e0bff617 	ldw	r2,-40(fp)
  810930:	1885883a 	add	r2,r3,r2
  810934:	10c1ffcc 	andi	r3,r2,2047
  810938:	e0bffc17 	ldw	r2,-16(fp)
  81093c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810940:	e0bffe17 	ldw	r2,-8(fp)
  810944:	00bfc716 	blt	zero,r2,810864 <__alt_mem_onchip_mem+0xff790864>
  810948:	00000106 	br	810950 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  81094c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810950:	0005303a 	rdctl	r2,status
  810954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810958:	e0fffb17 	ldw	r3,-20(fp)
  81095c:	00bfff84 	movi	r2,-2
  810960:	1884703a 	and	r2,r3,r2
  810964:	1001703a 	wrctl	status,r2
  
  return context;
  810968:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81096c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810970:	e0bffc17 	ldw	r2,-16(fp)
  810974:	10800817 	ldw	r2,32(r2)
  810978:	10c00094 	ori	r3,r2,2
  81097c:	e0bffc17 	ldw	r2,-16(fp)
  810980:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810984:	e0bffc17 	ldw	r2,-16(fp)
  810988:	10800017 	ldw	r2,0(r2)
  81098c:	10800104 	addi	r2,r2,4
  810990:	1007883a 	mov	r3,r2
  810994:	e0bffc17 	ldw	r2,-16(fp)
  810998:	10800817 	ldw	r2,32(r2)
  81099c:	18800035 	stwio	r2,0(r3)
  8109a0:	e0bffa17 	ldw	r2,-24(fp)
  8109a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8109a8:	e0bff817 	ldw	r2,-32(fp)
  8109ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8109b0:	e0bffe17 	ldw	r2,-8(fp)
  8109b4:	0080100e 	bge	zero,r2,8109f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8109b8:	e0bfff17 	ldw	r2,-4(fp)
  8109bc:	1090000c 	andi	r2,r2,16384
  8109c0:	1000101e 	bne	r2,zero,810a04 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8109c4:	0001883a 	nop
  8109c8:	e0bffc17 	ldw	r2,-16(fp)
  8109cc:	10c00d17 	ldw	r3,52(r2)
  8109d0:	e0bff517 	ldw	r2,-44(fp)
  8109d4:	1880051e 	bne	r3,r2,8109ec <altera_avalon_jtag_uart_write+0x1b8>
  8109d8:	e0bffc17 	ldw	r2,-16(fp)
  8109dc:	10c00917 	ldw	r3,36(r2)
  8109e0:	e0bffc17 	ldw	r2,-16(fp)
  8109e4:	10800117 	ldw	r2,4(r2)
  8109e8:	18bff736 	bltu	r3,r2,8109c8 <__alt_mem_onchip_mem+0xff7909c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  8109ec:	e0bffc17 	ldw	r2,-16(fp)
  8109f0:	10800917 	ldw	r2,36(r2)
  8109f4:	1000051e 	bne	r2,zero,810a0c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  8109f8:	e0bffe17 	ldw	r2,-8(fp)
  8109fc:	00bfd016 	blt	zero,r2,810940 <__alt_mem_onchip_mem+0xff790940>
  810a00:	00000306 	br	810a10 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  810a04:	0001883a 	nop
  810a08:	00000106 	br	810a10 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  810a0c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810a10:	e0fffd17 	ldw	r3,-12(fp)
  810a14:	e0bff717 	ldw	r2,-36(fp)
  810a18:	18800426 	beq	r3,r2,810a2c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  810a1c:	e0fffd17 	ldw	r3,-12(fp)
  810a20:	e0bff717 	ldw	r2,-36(fp)
  810a24:	1885c83a 	sub	r2,r3,r2
  810a28:	00000606 	br	810a44 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810a2c:	e0bfff17 	ldw	r2,-4(fp)
  810a30:	1090000c 	andi	r2,r2,16384
  810a34:	10000226 	beq	r2,zero,810a40 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810a38:	00bffd44 	movi	r2,-11
  810a3c:	00000106 	br	810a44 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810a40:	00bffec4 	movi	r2,-5
}
  810a44:	e037883a 	mov	sp,fp
  810a48:	dfc00117 	ldw	ra,4(sp)
  810a4c:	df000017 	ldw	fp,0(sp)
  810a50:	dec00204 	addi	sp,sp,8
  810a54:	f800283a 	ret

00810a58 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810a58:	defffa04 	addi	sp,sp,-24
  810a5c:	dfc00515 	stw	ra,20(sp)
  810a60:	df000415 	stw	fp,16(sp)
  810a64:	df000404 	addi	fp,sp,16
  810a68:	e13ffe15 	stw	r4,-8(fp)
  810a6c:	2805883a 	mov	r2,r5
  810a70:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810a74:	e0bffe17 	ldw	r2,-8(fp)
  810a78:	10800017 	ldw	r2,0(r2)
  810a7c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810a80:	008003f4 	movhi	r2,15
  810a84:	10909004 	addi	r2,r2,16960
  810a88:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810a8c:	e0bffe17 	ldw	r2,-8(fp)
  810a90:	10800803 	ldbu	r2,32(r2)
  810a94:	10803fcc 	andi	r2,r2,255
  810a98:	1080201c 	xori	r2,r2,128
  810a9c:	10bfe004 	addi	r2,r2,-128
  810aa0:	1000151e 	bne	r2,zero,810af8 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810aa4:	00000906 	br	810acc <lcd_write_command+0x74>
    if (--i == 0)
  810aa8:	e0bffc17 	ldw	r2,-16(fp)
  810aac:	10bfffc4 	addi	r2,r2,-1
  810ab0:	e0bffc15 	stw	r2,-16(fp)
  810ab4:	e0bffc17 	ldw	r2,-16(fp)
  810ab8:	1000041e 	bne	r2,zero,810acc <lcd_write_command+0x74>
    {
      sp->broken = 1;
  810abc:	e0bffe17 	ldw	r2,-8(fp)
  810ac0:	00c00044 	movi	r3,1
  810ac4:	10c00805 	stb	r3,32(r2)
      return;
  810ac8:	00000c06 	br	810afc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810acc:	e0bffd17 	ldw	r2,-12(fp)
  810ad0:	10800104 	addi	r2,r2,4
  810ad4:	10800037 	ldwio	r2,0(r2)
  810ad8:	1080200c 	andi	r2,r2,128
  810adc:	103ff21e 	bne	r2,zero,810aa8 <__alt_mem_onchip_mem+0xff790aa8>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810ae0:	01001904 	movi	r4,100
  810ae4:	0812b500 	call	812b50 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  810ae8:	e0bffd17 	ldw	r2,-12(fp)
  810aec:	e0ffff03 	ldbu	r3,-4(fp)
  810af0:	10c00035 	stwio	r3,0(r2)
  810af4:	00000106 	br	810afc <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810af8:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  810afc:	e037883a 	mov	sp,fp
  810b00:	dfc00117 	ldw	ra,4(sp)
  810b04:	df000017 	ldw	fp,0(sp)
  810b08:	dec00204 	addi	sp,sp,8
  810b0c:	f800283a 	ret

00810b10 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  810b10:	defffa04 	addi	sp,sp,-24
  810b14:	dfc00515 	stw	ra,20(sp)
  810b18:	df000415 	stw	fp,16(sp)
  810b1c:	df000404 	addi	fp,sp,16
  810b20:	e13ffe15 	stw	r4,-8(fp)
  810b24:	2805883a 	mov	r2,r5
  810b28:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810b2c:	e0bffe17 	ldw	r2,-8(fp)
  810b30:	10800017 	ldw	r2,0(r2)
  810b34:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810b38:	008003f4 	movhi	r2,15
  810b3c:	10909004 	addi	r2,r2,16960
  810b40:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810b44:	e0bffe17 	ldw	r2,-8(fp)
  810b48:	10800803 	ldbu	r2,32(r2)
  810b4c:	10803fcc 	andi	r2,r2,255
  810b50:	1080201c 	xori	r2,r2,128
  810b54:	10bfe004 	addi	r2,r2,-128
  810b58:	10001d1e 	bne	r2,zero,810bd0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810b5c:	00000906 	br	810b84 <lcd_write_data+0x74>
    if (--i == 0)
  810b60:	e0bffc17 	ldw	r2,-16(fp)
  810b64:	10bfffc4 	addi	r2,r2,-1
  810b68:	e0bffc15 	stw	r2,-16(fp)
  810b6c:	e0bffc17 	ldw	r2,-16(fp)
  810b70:	1000041e 	bne	r2,zero,810b84 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  810b74:	e0bffe17 	ldw	r2,-8(fp)
  810b78:	00c00044 	movi	r3,1
  810b7c:	10c00805 	stb	r3,32(r2)
      return;
  810b80:	00001406 	br	810bd4 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810b84:	e0bffd17 	ldw	r2,-12(fp)
  810b88:	10800104 	addi	r2,r2,4
  810b8c:	10800037 	ldwio	r2,0(r2)
  810b90:	1080200c 	andi	r2,r2,128
  810b94:	103ff21e 	bne	r2,zero,810b60 <__alt_mem_onchip_mem+0xff790b60>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810b98:	01001904 	movi	r4,100
  810b9c:	0812b500 	call	812b50 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810ba0:	e0bffd17 	ldw	r2,-12(fp)
  810ba4:	10800204 	addi	r2,r2,8
  810ba8:	1007883a 	mov	r3,r2
  810bac:	e0bfff03 	ldbu	r2,-4(fp)
  810bb0:	18800035 	stwio	r2,0(r3)

  sp->address++;
  810bb4:	e0bffe17 	ldw	r2,-8(fp)
  810bb8:	108008c3 	ldbu	r2,35(r2)
  810bbc:	10800044 	addi	r2,r2,1
  810bc0:	1007883a 	mov	r3,r2
  810bc4:	e0bffe17 	ldw	r2,-8(fp)
  810bc8:	10c008c5 	stb	r3,35(r2)
  810bcc:	00000106 	br	810bd4 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810bd0:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  810bd4:	e037883a 	mov	sp,fp
  810bd8:	dfc00117 	ldw	ra,4(sp)
  810bdc:	df000017 	ldw	fp,0(sp)
  810be0:	dec00204 	addi	sp,sp,8
  810be4:	f800283a 	ret

00810be8 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  810be8:	defffc04 	addi	sp,sp,-16
  810bec:	dfc00315 	stw	ra,12(sp)
  810bf0:	df000215 	stw	fp,8(sp)
  810bf4:	df000204 	addi	fp,sp,8
  810bf8:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  810bfc:	01400044 	movi	r5,1
  810c00:	e13fff17 	ldw	r4,-4(fp)
  810c04:	0810a580 	call	810a58 <lcd_write_command>

  sp->x = 0;
  810c08:	e0bfff17 	ldw	r2,-4(fp)
  810c0c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  810c10:	e0bfff17 	ldw	r2,-4(fp)
  810c14:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  810c18:	e0bfff17 	ldw	r2,-4(fp)
  810c1c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810c20:	e03ffe15 	stw	zero,-8(fp)
  810c24:	00001b06 	br	810c94 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810c28:	e0bffe17 	ldw	r2,-8(fp)
  810c2c:	108018e4 	muli	r2,r2,99
  810c30:	10801004 	addi	r2,r2,64
  810c34:	e0ffff17 	ldw	r3,-4(fp)
  810c38:	1885883a 	add	r2,r3,r2
  810c3c:	01801444 	movi	r6,81
  810c40:	01400804 	movi	r5,32
  810c44:	1009883a 	mov	r4,r2
  810c48:	08080740 	call	808074 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810c4c:	e0bffe17 	ldw	r2,-8(fp)
  810c50:	108018e4 	muli	r2,r2,99
  810c54:	10800c04 	addi	r2,r2,48
  810c58:	e0ffff17 	ldw	r3,-4(fp)
  810c5c:	1885883a 	add	r2,r3,r2
  810c60:	01800404 	movi	r6,16
  810c64:	01400804 	movi	r5,32
  810c68:	1009883a 	mov	r4,r2
  810c6c:	08080740 	call	808074 <memset>
    sp->line[y].width = 0;
  810c70:	e0ffff17 	ldw	r3,-4(fp)
  810c74:	e0bffe17 	ldw	r2,-8(fp)
  810c78:	108018e4 	muli	r2,r2,99
  810c7c:	1885883a 	add	r2,r3,r2
  810c80:	10802444 	addi	r2,r2,145
  810c84:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	10800044 	addi	r2,r2,1
  810c90:	e0bffe15 	stw	r2,-8(fp)
  810c94:	e0bffe17 	ldw	r2,-8(fp)
  810c98:	10800090 	cmplti	r2,r2,2
  810c9c:	103fe21e 	bne	r2,zero,810c28 <__alt_mem_onchip_mem+0xff790c28>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  810ca0:	0001883a 	nop
  810ca4:	e037883a 	mov	sp,fp
  810ca8:	dfc00117 	ldw	ra,4(sp)
  810cac:	df000017 	ldw	fp,0(sp)
  810cb0:	dec00204 	addi	sp,sp,8
  810cb4:	f800283a 	ret

00810cb8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810cb8:	defff704 	addi	sp,sp,-36
  810cbc:	dfc00815 	stw	ra,32(sp)
  810cc0:	df000715 	stw	fp,28(sp)
  810cc4:	df000704 	addi	fp,sp,28
  810cc8:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  810ccc:	e0bfff17 	ldw	r2,-4(fp)
  810cd0:	10800943 	ldbu	r2,37(r2)
  810cd4:	10803fcc 	andi	r2,r2,255
  810cd8:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810cdc:	e03ff915 	stw	zero,-28(fp)
  810ce0:	00006706 	br	810e80 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  810ce4:	e0ffff17 	ldw	r3,-4(fp)
  810ce8:	e0bff917 	ldw	r2,-28(fp)
  810cec:	108018e4 	muli	r2,r2,99
  810cf0:	1885883a 	add	r2,r3,r2
  810cf4:	10802444 	addi	r2,r2,145
  810cf8:	10800003 	ldbu	r2,0(r2)
  810cfc:	10803fcc 	andi	r2,r2,255
  810d00:	1080201c 	xori	r2,r2,128
  810d04:	10bfe004 	addi	r2,r2,-128
  810d08:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  810d0c:	e0ffff17 	ldw	r3,-4(fp)
  810d10:	e0bff917 	ldw	r2,-28(fp)
  810d14:	108018e4 	muli	r2,r2,99
  810d18:	1885883a 	add	r2,r3,r2
  810d1c:	10802484 	addi	r2,r2,146
  810d20:	10800003 	ldbu	r2,0(r2)
  810d24:	10c03fcc 	andi	r3,r2,255
  810d28:	e0bffc17 	ldw	r2,-16(fp)
  810d2c:	1885383a 	mul	r2,r3,r2
  810d30:	1005d23a 	srai	r2,r2,8
  810d34:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810d38:	e0fffb17 	ldw	r3,-20(fp)
  810d3c:	e0bffd17 	ldw	r2,-12(fp)
  810d40:	18800116 	blt	r3,r2,810d48 <lcd_repaint_screen+0x90>
      offset = 0;
  810d44:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810d48:	e03ffa15 	stw	zero,-24(fp)
  810d4c:	00004606 	br	810e68 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810d50:	e0fffa17 	ldw	r3,-24(fp)
  810d54:	e0bffb17 	ldw	r2,-20(fp)
  810d58:	1885883a 	add	r2,r3,r2
  810d5c:	e17ffd17 	ldw	r5,-12(fp)
  810d60:	1009883a 	mov	r4,r2
  810d64:	080cb3c0 	call	80cb3c <__modsi3>
  810d68:	1009883a 	mov	r4,r2
  810d6c:	e0ffff17 	ldw	r3,-4(fp)
  810d70:	e0bff917 	ldw	r2,-28(fp)
  810d74:	108018e4 	muli	r2,r2,99
  810d78:	1885883a 	add	r2,r3,r2
  810d7c:	1105883a 	add	r2,r2,r4
  810d80:	10801004 	addi	r2,r2,64
  810d84:	10800003 	ldbu	r2,0(r2)
  810d88:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810d8c:	e0ffff17 	ldw	r3,-4(fp)
  810d90:	e0bff917 	ldw	r2,-28(fp)
  810d94:	108018e4 	muli	r2,r2,99
  810d98:	1887883a 	add	r3,r3,r2
  810d9c:	e0bffa17 	ldw	r2,-24(fp)
  810da0:	1885883a 	add	r2,r3,r2
  810da4:	10800c04 	addi	r2,r2,48
  810da8:	10800003 	ldbu	r2,0(r2)
  810dac:	10c03fcc 	andi	r3,r2,255
  810db0:	18c0201c 	xori	r3,r3,128
  810db4:	18ffe004 	addi	r3,r3,-128
  810db8:	e0bffe07 	ldb	r2,-8(fp)
  810dbc:	18802726 	beq	r3,r2,810e5c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  810dc0:	e0fff917 	ldw	r3,-28(fp)
  810dc4:	d0a00f04 	addi	r2,gp,-32708
  810dc8:	1885883a 	add	r2,r3,r2
  810dcc:	10800003 	ldbu	r2,0(r2)
  810dd0:	1007883a 	mov	r3,r2
  810dd4:	e0bffa17 	ldw	r2,-24(fp)
  810dd8:	1885883a 	add	r2,r3,r2
  810ddc:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  810de0:	e0fffe43 	ldbu	r3,-7(fp)
  810de4:	e0bfff17 	ldw	r2,-4(fp)
  810de8:	108008c3 	ldbu	r2,35(r2)
  810dec:	10803fcc 	andi	r2,r2,255
  810df0:	1080201c 	xori	r2,r2,128
  810df4:	10bfe004 	addi	r2,r2,-128
  810df8:	18800a26 	beq	r3,r2,810e24 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810dfc:	e0fffe43 	ldbu	r3,-7(fp)
  810e00:	00bfe004 	movi	r2,-128
  810e04:	1884b03a 	or	r2,r3,r2
  810e08:	10803fcc 	andi	r2,r2,255
  810e0c:	100b883a 	mov	r5,r2
  810e10:	e13fff17 	ldw	r4,-4(fp)
  810e14:	0810a580 	call	810a58 <lcd_write_command>
          sp->address = address;
  810e18:	e0fffe43 	ldbu	r3,-7(fp)
  810e1c:	e0bfff17 	ldw	r2,-4(fp)
  810e20:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810e24:	e0bffe03 	ldbu	r2,-8(fp)
  810e28:	10803fcc 	andi	r2,r2,255
  810e2c:	100b883a 	mov	r5,r2
  810e30:	e13fff17 	ldw	r4,-4(fp)
  810e34:	0810b100 	call	810b10 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810e38:	e0ffff17 	ldw	r3,-4(fp)
  810e3c:	e0bff917 	ldw	r2,-28(fp)
  810e40:	108018e4 	muli	r2,r2,99
  810e44:	1887883a 	add	r3,r3,r2
  810e48:	e0bffa17 	ldw	r2,-24(fp)
  810e4c:	1885883a 	add	r2,r3,r2
  810e50:	10800c04 	addi	r2,r2,48
  810e54:	e0fffe03 	ldbu	r3,-8(fp)
  810e58:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810e5c:	e0bffa17 	ldw	r2,-24(fp)
  810e60:	10800044 	addi	r2,r2,1
  810e64:	e0bffa15 	stw	r2,-24(fp)
  810e68:	e0bffa17 	ldw	r2,-24(fp)
  810e6c:	10800410 	cmplti	r2,r2,16
  810e70:	103fb71e 	bne	r2,zero,810d50 <__alt_mem_onchip_mem+0xff790d50>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810e74:	e0bff917 	ldw	r2,-28(fp)
  810e78:	10800044 	addi	r2,r2,1
  810e7c:	e0bff915 	stw	r2,-28(fp)
  810e80:	e0bff917 	ldw	r2,-28(fp)
  810e84:	10800090 	cmplti	r2,r2,2
  810e88:	103f961e 	bne	r2,zero,810ce4 <__alt_mem_onchip_mem+0xff790ce4>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810e8c:	0001883a 	nop
  810e90:	e037883a 	mov	sp,fp
  810e94:	dfc00117 	ldw	ra,4(sp)
  810e98:	df000017 	ldw	fp,0(sp)
  810e9c:	dec00204 	addi	sp,sp,8
  810ea0:	f800283a 	ret

00810ea4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810ea4:	defffc04 	addi	sp,sp,-16
  810ea8:	dfc00315 	stw	ra,12(sp)
  810eac:	df000215 	stw	fp,8(sp)
  810eb0:	df000204 	addi	fp,sp,8
  810eb4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810eb8:	e03ffe15 	stw	zero,-8(fp)
  810ebc:	00001d06 	br	810f34 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810ec0:	e0bffe17 	ldw	r2,-8(fp)
  810ec4:	00800f16 	blt	zero,r2,810f04 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810ec8:	e0bffe17 	ldw	r2,-8(fp)
  810ecc:	108018e4 	muli	r2,r2,99
  810ed0:	10801004 	addi	r2,r2,64
  810ed4:	e0ffff17 	ldw	r3,-4(fp)
  810ed8:	1889883a 	add	r4,r3,r2
  810edc:	e0bffe17 	ldw	r2,-8(fp)
  810ee0:	10800044 	addi	r2,r2,1
  810ee4:	108018e4 	muli	r2,r2,99
  810ee8:	10801004 	addi	r2,r2,64
  810eec:	e0ffff17 	ldw	r3,-4(fp)
  810ef0:	1885883a 	add	r2,r3,r2
  810ef4:	01801404 	movi	r6,80
  810ef8:	100b883a 	mov	r5,r2
  810efc:	0807f2c0 	call	807f2c <memcpy>
  810f00:	00000906 	br	810f28 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810f04:	e0bffe17 	ldw	r2,-8(fp)
  810f08:	108018e4 	muli	r2,r2,99
  810f0c:	10801004 	addi	r2,r2,64
  810f10:	e0ffff17 	ldw	r3,-4(fp)
  810f14:	1885883a 	add	r2,r3,r2
  810f18:	01801404 	movi	r6,80
  810f1c:	01400804 	movi	r5,32
  810f20:	1009883a 	mov	r4,r2
  810f24:	08080740 	call	808074 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810f28:	e0bffe17 	ldw	r2,-8(fp)
  810f2c:	10800044 	addi	r2,r2,1
  810f30:	e0bffe15 	stw	r2,-8(fp)
  810f34:	e0bffe17 	ldw	r2,-8(fp)
  810f38:	10800090 	cmplti	r2,r2,2
  810f3c:	103fe01e 	bne	r2,zero,810ec0 <__alt_mem_onchip_mem+0xff790ec0>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810f40:	e0bfff17 	ldw	r2,-4(fp)
  810f44:	10800883 	ldbu	r2,34(r2)
  810f48:	10bfffc4 	addi	r2,r2,-1
  810f4c:	1007883a 	mov	r3,r2
  810f50:	e0bfff17 	ldw	r2,-4(fp)
  810f54:	10c00885 	stb	r3,34(r2)
}
  810f58:	0001883a 	nop
  810f5c:	e037883a 	mov	sp,fp
  810f60:	dfc00117 	ldw	ra,4(sp)
  810f64:	df000017 	ldw	fp,0(sp)
  810f68:	dec00204 	addi	sp,sp,8
  810f6c:	f800283a 	ret

00810f70 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810f70:	defff904 	addi	sp,sp,-28
  810f74:	dfc00615 	stw	ra,24(sp)
  810f78:	df000515 	stw	fp,20(sp)
  810f7c:	df000504 	addi	fp,sp,20
  810f80:	e13ffe15 	stw	r4,-8(fp)
  810f84:	2805883a 	mov	r2,r5
  810f88:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810f8c:	e03ffb15 	stw	zero,-20(fp)
  810f90:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810f94:	e0bffe17 	ldw	r2,-8(fp)
  810f98:	10800a03 	ldbu	r2,40(r2)
  810f9c:	10803fcc 	andi	r2,r2,255
  810fa0:	1080201c 	xori	r2,r2,128
  810fa4:	10bfe004 	addi	r2,r2,-128
  810fa8:	108016d8 	cmpnei	r2,r2,91
  810fac:	1000411e 	bne	r2,zero,8110b4 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810fb0:	e0bffe17 	ldw	r2,-8(fp)
  810fb4:	10800a04 	addi	r2,r2,40
  810fb8:	10800044 	addi	r2,r2,1
  810fbc:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810fc0:	00000c06 	br	810ff4 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810fc4:	e0bffb17 	ldw	r2,-20(fp)
  810fc8:	10c002a4 	muli	r3,r2,10
  810fcc:	e0bffd17 	ldw	r2,-12(fp)
  810fd0:	11000044 	addi	r4,r2,1
  810fd4:	e13ffd15 	stw	r4,-12(fp)
  810fd8:	10800003 	ldbu	r2,0(r2)
  810fdc:	10803fcc 	andi	r2,r2,255
  810fe0:	1080201c 	xori	r2,r2,128
  810fe4:	10bfe004 	addi	r2,r2,-128
  810fe8:	10bff404 	addi	r2,r2,-48
  810fec:	1885883a 	add	r2,r3,r2
  810ff0:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810ff4:	d0e01117 	ldw	r3,-32700(gp)
  810ff8:	e0bffd17 	ldw	r2,-12(fp)
  810ffc:	10800003 	ldbu	r2,0(r2)
  811000:	10803fcc 	andi	r2,r2,255
  811004:	1080201c 	xori	r2,r2,128
  811008:	10bfe004 	addi	r2,r2,-128
  81100c:	10800044 	addi	r2,r2,1
  811010:	1885883a 	add	r2,r3,r2
  811014:	10800003 	ldbu	r2,0(r2)
  811018:	10803fcc 	andi	r2,r2,255
  81101c:	1080010c 	andi	r2,r2,4
  811020:	103fe81e 	bne	r2,zero,810fc4 <__alt_mem_onchip_mem+0xff790fc4>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  811024:	e0bffd17 	ldw	r2,-12(fp)
  811028:	10800003 	ldbu	r2,0(r2)
  81102c:	10803fcc 	andi	r2,r2,255
  811030:	1080201c 	xori	r2,r2,128
  811034:	10bfe004 	addi	r2,r2,-128
  811038:	10800ed8 	cmpnei	r2,r2,59
  81103c:	10001f1e 	bne	r2,zero,8110bc <lcd_handle_escape+0x14c>
    {
      ptr++;
  811040:	e0bffd17 	ldw	r2,-12(fp)
  811044:	10800044 	addi	r2,r2,1
  811048:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  81104c:	00000c06 	br	811080 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  811050:	e0bffc17 	ldw	r2,-16(fp)
  811054:	10c002a4 	muli	r3,r2,10
  811058:	e0bffd17 	ldw	r2,-12(fp)
  81105c:	11000044 	addi	r4,r2,1
  811060:	e13ffd15 	stw	r4,-12(fp)
  811064:	10800003 	ldbu	r2,0(r2)
  811068:	10803fcc 	andi	r2,r2,255
  81106c:	1080201c 	xori	r2,r2,128
  811070:	10bfe004 	addi	r2,r2,-128
  811074:	10bff404 	addi	r2,r2,-48
  811078:	1885883a 	add	r2,r3,r2
  81107c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  811080:	d0e01117 	ldw	r3,-32700(gp)
  811084:	e0bffd17 	ldw	r2,-12(fp)
  811088:	10800003 	ldbu	r2,0(r2)
  81108c:	10803fcc 	andi	r2,r2,255
  811090:	1080201c 	xori	r2,r2,128
  811094:	10bfe004 	addi	r2,r2,-128
  811098:	10800044 	addi	r2,r2,1
  81109c:	1885883a 	add	r2,r3,r2
  8110a0:	10800003 	ldbu	r2,0(r2)
  8110a4:	10803fcc 	andi	r2,r2,255
  8110a8:	1080010c 	andi	r2,r2,4
  8110ac:	103fe81e 	bne	r2,zero,811050 <__alt_mem_onchip_mem+0xff791050>
  8110b0:	00000206 	br	8110bc <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8110b4:	00bfffc4 	movi	r2,-1
  8110b8:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8110bc:	e0bfff07 	ldb	r2,-4(fp)
  8110c0:	10c012a0 	cmpeqi	r3,r2,74
  8110c4:	1800291e 	bne	r3,zero,81116c <lcd_handle_escape+0x1fc>
  8110c8:	10c012c8 	cmpgei	r3,r2,75
  8110cc:	1800031e 	bne	r3,zero,8110dc <lcd_handle_escape+0x16c>
  8110d0:	10801220 	cmpeqi	r2,r2,72
  8110d4:	1000061e 	bne	r2,zero,8110f0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8110d8:	00004a06 	br	811204 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8110dc:	10c012e0 	cmpeqi	r3,r2,75
  8110e0:	1800281e 	bne	r3,zero,811184 <lcd_handle_escape+0x214>
  8110e4:	108019a0 	cmpeqi	r2,r2,102
  8110e8:	1000011e 	bne	r2,zero,8110f0 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8110ec:	00004506 	br	811204 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8110f0:	e0bffc17 	ldw	r2,-16(fp)
  8110f4:	0080050e 	bge	zero,r2,81110c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  8110f8:	e0bffc17 	ldw	r2,-16(fp)
  8110fc:	10bfffc4 	addi	r2,r2,-1
  811100:	1007883a 	mov	r3,r2
  811104:	e0bffe17 	ldw	r2,-8(fp)
  811108:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  81110c:	e0bffb17 	ldw	r2,-20(fp)
  811110:	0080370e 	bge	zero,r2,8111f0 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811114:	e0bffb17 	ldw	r2,-20(fp)
  811118:	10bfffc4 	addi	r2,r2,-1
  81111c:	1007883a 	mov	r3,r2
  811120:	e0bffe17 	ldw	r2,-8(fp)
  811124:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811128:	e0bffe17 	ldw	r2,-8(fp)
  81112c:	10800883 	ldbu	r2,34(r2)
  811130:	10803fcc 	andi	r2,r2,255
  811134:	10800170 	cmpltui	r2,r2,5
  811138:	1000061e 	bne	r2,zero,811154 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  81113c:	e0bffe17 	ldw	r2,-8(fp)
  811140:	00c00104 	movi	r3,4
  811144:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  811148:	00000206 	br	811154 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  81114c:	e13ffe17 	ldw	r4,-8(fp)
  811150:	0810ea40 	call	810ea4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  811154:	e0bffe17 	ldw	r2,-8(fp)
  811158:	10800883 	ldbu	r2,34(r2)
  81115c:	10803fcc 	andi	r2,r2,255
  811160:	108000e8 	cmpgeui	r2,r2,3
  811164:	103ff91e 	bne	r2,zero,81114c <__alt_mem_onchip_mem+0xff79114c>
        lcd_scroll_up(sp);
    }
    break;
  811168:	00002106 	br	8111f0 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  81116c:	e0bffb17 	ldw	r2,-20(fp)
  811170:	10800098 	cmpnei	r2,r2,2
  811174:	1000201e 	bne	r2,zero,8111f8 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811178:	e13ffe17 	ldw	r4,-8(fp)
  81117c:	0810be80 	call	810be8 <lcd_clear_screen>
    break;
  811180:	00001d06 	br	8111f8 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  811184:	e0bffb17 	ldw	r2,-20(fp)
  811188:	00801d16 	blt	zero,r2,811200 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  81118c:	e0bffe17 	ldw	r2,-8(fp)
  811190:	10800843 	ldbu	r2,33(r2)
  811194:	10803fcc 	andi	r2,r2,255
  811198:	10801428 	cmpgeui	r2,r2,80
  81119c:	1000181e 	bne	r2,zero,811200 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8111a0:	e0bffe17 	ldw	r2,-8(fp)
  8111a4:	10800883 	ldbu	r2,34(r2)
  8111a8:	10803fcc 	andi	r2,r2,255
  8111ac:	108018e4 	muli	r2,r2,99
  8111b0:	10801004 	addi	r2,r2,64
  8111b4:	e0fffe17 	ldw	r3,-8(fp)
  8111b8:	1887883a 	add	r3,r3,r2
  8111bc:	e0bffe17 	ldw	r2,-8(fp)
  8111c0:	10800843 	ldbu	r2,33(r2)
  8111c4:	10803fcc 	andi	r2,r2,255
  8111c8:	1889883a 	add	r4,r3,r2
  8111cc:	e0bffe17 	ldw	r2,-8(fp)
  8111d0:	10800843 	ldbu	r2,33(r2)
  8111d4:	10803fcc 	andi	r2,r2,255
  8111d8:	00c01404 	movi	r3,80
  8111dc:	1885c83a 	sub	r2,r3,r2
  8111e0:	100d883a 	mov	r6,r2
  8111e4:	01400804 	movi	r5,32
  8111e8:	08080740 	call	808074 <memset>
    }
    break;
  8111ec:	00000406 	br	811200 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  8111f0:	0001883a 	nop
  8111f4:	00000306 	br	811204 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8111f8:	0001883a 	nop
  8111fc:	00000106 	br	811204 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  811200:	0001883a 	nop
  }
}
  811204:	0001883a 	nop
  811208:	e037883a 	mov	sp,fp
  81120c:	dfc00117 	ldw	ra,4(sp)
  811210:	df000017 	ldw	fp,0(sp)
  811214:	dec00204 	addi	sp,sp,8
  811218:	f800283a 	ret

0081121c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  81121c:	defff304 	addi	sp,sp,-52
  811220:	dfc00c15 	stw	ra,48(sp)
  811224:	df000b15 	stw	fp,44(sp)
  811228:	df000b04 	addi	fp,sp,44
  81122c:	e13ffc15 	stw	r4,-16(fp)
  811230:	e17ffd15 	stw	r5,-12(fp)
  811234:	e1bffe15 	stw	r6,-8(fp)
  811238:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  81123c:	e0bffe17 	ldw	r2,-8(fp)
  811240:	e0fffd17 	ldw	r3,-12(fp)
  811244:	1885883a 	add	r2,r3,r2
  811248:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81124c:	e0bffc17 	ldw	r2,-16(fp)
  811250:	00c00044 	movi	r3,1
  811254:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811258:	00009906 	br	8114c0 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  81125c:	e0bffd17 	ldw	r2,-12(fp)
  811260:	10800003 	ldbu	r2,0(r2)
  811264:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811268:	e0bffc17 	ldw	r2,-16(fp)
  81126c:	10800903 	ldbu	r2,36(r2)
  811270:	10803fcc 	andi	r2,r2,255
  811274:	1080201c 	xori	r2,r2,128
  811278:	10bfe004 	addi	r2,r2,-128
  81127c:	10003716 	blt	r2,zero,81135c <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  811280:	e0bffc17 	ldw	r2,-16(fp)
  811284:	10800903 	ldbu	r2,36(r2)
  811288:	10803fcc 	andi	r2,r2,255
  81128c:	1080201c 	xori	r2,r2,128
  811290:	10bfe004 	addi	r2,r2,-128
  811294:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811298:	e0bffa17 	ldw	r2,-24(fp)
  81129c:	1000031e 	bne	r2,zero,8112ac <altera_avalon_lcd_16207_write+0x90>
  8112a0:	e0bff907 	ldb	r2,-28(fp)
  8112a4:	108016d8 	cmpnei	r2,r2,91
  8112a8:	10000d1e 	bne	r2,zero,8112e0 <altera_avalon_lcd_16207_write+0xc4>
  8112ac:	e0bffa17 	ldw	r2,-24(fp)
  8112b0:	10001826 	beq	r2,zero,811314 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8112b4:	d0e01117 	ldw	r3,-32700(gp)
  8112b8:	e0bff907 	ldb	r2,-28(fp)
  8112bc:	10800044 	addi	r2,r2,1
  8112c0:	1885883a 	add	r2,r3,r2
  8112c4:	10800003 	ldbu	r2,0(r2)
  8112c8:	10803fcc 	andi	r2,r2,255
  8112cc:	1080010c 	andi	r2,r2,4
  8112d0:	1000101e 	bne	r2,zero,811314 <altera_avalon_lcd_16207_write+0xf8>
  8112d4:	e0bff907 	ldb	r2,-28(fp)
  8112d8:	10800ee0 	cmpeqi	r2,r2,59
  8112dc:	10000d1e 	bne	r2,zero,811314 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8112e0:	e0fffc17 	ldw	r3,-16(fp)
  8112e4:	e0bffa17 	ldw	r2,-24(fp)
  8112e8:	1885883a 	add	r2,r3,r2
  8112ec:	10800a04 	addi	r2,r2,40
  8112f0:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8112f4:	e0bff907 	ldb	r2,-28(fp)
  8112f8:	100b883a 	mov	r5,r2
  8112fc:	e13ffc17 	ldw	r4,-16(fp)
  811300:	0810f700 	call	810f70 <lcd_handle_escape>

        sp->esccount = -1;
  811304:	e0bffc17 	ldw	r2,-16(fp)
  811308:	00ffffc4 	movi	r3,-1
  81130c:	10c00905 	stb	r3,36(r2)
  811310:	00006806 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811314:	e0bffc17 	ldw	r2,-16(fp)
  811318:	10800903 	ldbu	r2,36(r2)
  81131c:	10803fcc 	andi	r2,r2,255
  811320:	108001e8 	cmpgeui	r2,r2,7
  811324:	1000631e 	bne	r2,zero,8114b4 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811328:	e0fffc17 	ldw	r3,-16(fp)
  81132c:	e0bffa17 	ldw	r2,-24(fp)
  811330:	1885883a 	add	r2,r3,r2
  811334:	10800a04 	addi	r2,r2,40
  811338:	e0fff903 	ldbu	r3,-28(fp)
  81133c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811340:	e0bffc17 	ldw	r2,-16(fp)
  811344:	10800903 	ldbu	r2,36(r2)
  811348:	10800044 	addi	r2,r2,1
  81134c:	1007883a 	mov	r3,r2
  811350:	e0bffc17 	ldw	r2,-16(fp)
  811354:	10c00905 	stb	r3,36(r2)
  811358:	00005606 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  81135c:	e0bff907 	ldb	r2,-28(fp)
  811360:	108006d8 	cmpnei	r2,r2,27
  811364:	1000031e 	bne	r2,zero,811374 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811368:	e0bffc17 	ldw	r2,-16(fp)
  81136c:	10000905 	stb	zero,36(r2)
  811370:	00005006 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811374:	e0bff907 	ldb	r2,-28(fp)
  811378:	10800358 	cmpnei	r2,r2,13
  81137c:	1000031e 	bne	r2,zero,81138c <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811380:	e0bffc17 	ldw	r2,-16(fp)
  811384:	10000845 	stb	zero,33(r2)
  811388:	00004a06 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  81138c:	e0bff907 	ldb	r2,-28(fp)
  811390:	10800298 	cmpnei	r2,r2,10
  811394:	1000101e 	bne	r2,zero,8113d8 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811398:	e0bffc17 	ldw	r2,-16(fp)
  81139c:	10000845 	stb	zero,33(r2)
      sp->y++;
  8113a0:	e0bffc17 	ldw	r2,-16(fp)
  8113a4:	10800883 	ldbu	r2,34(r2)
  8113a8:	10800044 	addi	r2,r2,1
  8113ac:	1007883a 	mov	r3,r2
  8113b0:	e0bffc17 	ldw	r2,-16(fp)
  8113b4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8113b8:	e0bffc17 	ldw	r2,-16(fp)
  8113bc:	10800883 	ldbu	r2,34(r2)
  8113c0:	10803fcc 	andi	r2,r2,255
  8113c4:	108000f0 	cmpltui	r2,r2,3
  8113c8:	10003a1e 	bne	r2,zero,8114b4 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8113cc:	e13ffc17 	ldw	r4,-16(fp)
  8113d0:	0810ea40 	call	810ea4 <lcd_scroll_up>
  8113d4:	00003706 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8113d8:	e0bff907 	ldb	r2,-28(fp)
  8113dc:	10800218 	cmpnei	r2,r2,8
  8113e0:	10000b1e 	bne	r2,zero,811410 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8113e4:	e0bffc17 	ldw	r2,-16(fp)
  8113e8:	10800843 	ldbu	r2,33(r2)
  8113ec:	10803fcc 	andi	r2,r2,255
  8113f0:	10003026 	beq	r2,zero,8114b4 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8113f4:	e0bffc17 	ldw	r2,-16(fp)
  8113f8:	10800843 	ldbu	r2,33(r2)
  8113fc:	10bfffc4 	addi	r2,r2,-1
  811400:	1007883a 	mov	r3,r2
  811404:	e0bffc17 	ldw	r2,-16(fp)
  811408:	10c00845 	stb	r3,33(r2)
  81140c:	00002906 	br	8114b4 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811410:	d0e01117 	ldw	r3,-32700(gp)
  811414:	e0bff907 	ldb	r2,-28(fp)
  811418:	10800044 	addi	r2,r2,1
  81141c:	1885883a 	add	r2,r3,r2
  811420:	10800003 	ldbu	r2,0(r2)
  811424:	10803fcc 	andi	r2,r2,255
  811428:	1080201c 	xori	r2,r2,128
  81142c:	10bfe004 	addi	r2,r2,-128
  811430:	108025cc 	andi	r2,r2,151
  811434:	10001f26 	beq	r2,zero,8114b4 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811438:	e0bffc17 	ldw	r2,-16(fp)
  81143c:	10800883 	ldbu	r2,34(r2)
  811440:	10803fcc 	andi	r2,r2,255
  811444:	108000b0 	cmpltui	r2,r2,2
  811448:	1000021e 	bne	r2,zero,811454 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  81144c:	e13ffc17 	ldw	r4,-16(fp)
  811450:	0810ea40 	call	810ea4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811454:	e0bffc17 	ldw	r2,-16(fp)
  811458:	10800843 	ldbu	r2,33(r2)
  81145c:	10803fcc 	andi	r2,r2,255
  811460:	10801428 	cmpgeui	r2,r2,80
  811464:	10000d1e 	bne	r2,zero,81149c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811468:	e0bffc17 	ldw	r2,-16(fp)
  81146c:	10800883 	ldbu	r2,34(r2)
  811470:	10c03fcc 	andi	r3,r2,255
  811474:	e0bffc17 	ldw	r2,-16(fp)
  811478:	10800843 	ldbu	r2,33(r2)
  81147c:	10803fcc 	andi	r2,r2,255
  811480:	e13ffc17 	ldw	r4,-16(fp)
  811484:	18c018e4 	muli	r3,r3,99
  811488:	20c7883a 	add	r3,r4,r3
  81148c:	1885883a 	add	r2,r3,r2
  811490:	10801004 	addi	r2,r2,64
  811494:	e0fff903 	ldbu	r3,-28(fp)
  811498:	10c00005 	stb	r3,0(r2)

      sp->x++;
  81149c:	e0bffc17 	ldw	r2,-16(fp)
  8114a0:	10800843 	ldbu	r2,33(r2)
  8114a4:	10800044 	addi	r2,r2,1
  8114a8:	1007883a 	mov	r3,r2
  8114ac:	e0bffc17 	ldw	r2,-16(fp)
  8114b0:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8114b4:	e0bffd17 	ldw	r2,-12(fp)
  8114b8:	10800044 	addi	r2,r2,1
  8114bc:	e0bffd15 	stw	r2,-12(fp)
  8114c0:	e0fffd17 	ldw	r3,-12(fp)
  8114c4:	e0bff817 	ldw	r2,-32(fp)
  8114c8:	18bf6436 	bltu	r3,r2,81125c <__alt_mem_onchip_mem+0xff79125c>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8114cc:	00800404 	movi	r2,16
  8114d0:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8114d4:	e03ff515 	stw	zero,-44(fp)
  8114d8:	00003706 	br	8115b8 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8114dc:	00801404 	movi	r2,80
  8114e0:	e0bff715 	stw	r2,-36(fp)
  8114e4:	00001106 	br	81152c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  8114e8:	e0bff717 	ldw	r2,-36(fp)
  8114ec:	10bfffc4 	addi	r2,r2,-1
  8114f0:	e13ffc17 	ldw	r4,-16(fp)
  8114f4:	e0fff517 	ldw	r3,-44(fp)
  8114f8:	18c018e4 	muli	r3,r3,99
  8114fc:	20c7883a 	add	r3,r4,r3
  811500:	1885883a 	add	r2,r3,r2
  811504:	10801004 	addi	r2,r2,64
  811508:	10800003 	ldbu	r2,0(r2)
  81150c:	10803fcc 	andi	r2,r2,255
  811510:	1080201c 	xori	r2,r2,128
  811514:	10bfe004 	addi	r2,r2,-128
  811518:	10800820 	cmpeqi	r2,r2,32
  81151c:	10000626 	beq	r2,zero,811538 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  811520:	e0bff717 	ldw	r2,-36(fp)
  811524:	10bfffc4 	addi	r2,r2,-1
  811528:	e0bff715 	stw	r2,-36(fp)
  81152c:	e0bff717 	ldw	r2,-36(fp)
  811530:	00bfed16 	blt	zero,r2,8114e8 <__alt_mem_onchip_mem+0xff7914e8>
  811534:	00000106 	br	81153c <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811538:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81153c:	e0bff717 	ldw	r2,-36(fp)
  811540:	10800448 	cmpgei	r2,r2,17
  811544:	1000031e 	bne	r2,zero,811554 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811548:	00800404 	movi	r2,16
  81154c:	e0bff715 	stw	r2,-36(fp)
  811550:	00000306 	br	811560 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811554:	e0bff717 	ldw	r2,-36(fp)
  811558:	10800044 	addi	r2,r2,1
  81155c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  811560:	e0bff717 	ldw	r2,-36(fp)
  811564:	1009883a 	mov	r4,r2
  811568:	e0fffc17 	ldw	r3,-16(fp)
  81156c:	e0bff517 	ldw	r2,-44(fp)
  811570:	108018e4 	muli	r2,r2,99
  811574:	1885883a 	add	r2,r3,r2
  811578:	10802444 	addi	r2,r2,145
  81157c:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  811580:	e0fff617 	ldw	r3,-40(fp)
  811584:	e0bff717 	ldw	r2,-36(fp)
  811588:	1880020e 	bge	r3,r2,811594 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  81158c:	e0bff717 	ldw	r2,-36(fp)
  811590:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  811594:	e0fffc17 	ldw	r3,-16(fp)
  811598:	e0bff517 	ldw	r2,-44(fp)
  81159c:	108018e4 	muli	r2,r2,99
  8115a0:	1885883a 	add	r2,r3,r2
  8115a4:	10802484 	addi	r2,r2,146
  8115a8:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8115ac:	e0bff517 	ldw	r2,-44(fp)
  8115b0:	10800044 	addi	r2,r2,1
  8115b4:	e0bff515 	stw	r2,-44(fp)
  8115b8:	e0bff517 	ldw	r2,-44(fp)
  8115bc:	10800090 	cmplti	r2,r2,2
  8115c0:	103fc61e 	bne	r2,zero,8114dc <__alt_mem_onchip_mem+0xff7914dc>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8115c4:	e0bff617 	ldw	r2,-40(fp)
  8115c8:	10800448 	cmpgei	r2,r2,17
  8115cc:	1000031e 	bne	r2,zero,8115dc <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	10000985 	stb	zero,38(r2)
  8115d8:	00002e06 	br	811694 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8115dc:	e0bff617 	ldw	r2,-40(fp)
  8115e0:	1085883a 	add	r2,r2,r2
  8115e4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  8115e8:	e0bff617 	ldw	r2,-40(fp)
  8115ec:	1007883a 	mov	r3,r2
  8115f0:	e0bffc17 	ldw	r2,-16(fp)
  8115f4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8115f8:	e03ff515 	stw	zero,-44(fp)
  8115fc:	00002206 	br	811688 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  811600:	e0fffc17 	ldw	r3,-16(fp)
  811604:	e0bff517 	ldw	r2,-44(fp)
  811608:	108018e4 	muli	r2,r2,99
  81160c:	1885883a 	add	r2,r3,r2
  811610:	10802444 	addi	r2,r2,145
  811614:	10800003 	ldbu	r2,0(r2)
  811618:	10803fcc 	andi	r2,r2,255
  81161c:	1080201c 	xori	r2,r2,128
  811620:	10bfe004 	addi	r2,r2,-128
  811624:	10800450 	cmplti	r2,r2,17
  811628:	1000141e 	bne	r2,zero,81167c <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81162c:	e0fffc17 	ldw	r3,-16(fp)
  811630:	e0bff517 	ldw	r2,-44(fp)
  811634:	108018e4 	muli	r2,r2,99
  811638:	1885883a 	add	r2,r3,r2
  81163c:	10802444 	addi	r2,r2,145
  811640:	10800003 	ldbu	r2,0(r2)
  811644:	10803fcc 	andi	r2,r2,255
  811648:	1080201c 	xori	r2,r2,128
  81164c:	10bfe004 	addi	r2,r2,-128
  811650:	1004923a 	slli	r2,r2,8
  811654:	e17ff617 	ldw	r5,-40(fp)
  811658:	1009883a 	mov	r4,r2
  81165c:	080cab80 	call	80cab8 <__divsi3>
  811660:	1009883a 	mov	r4,r2
  811664:	e0fffc17 	ldw	r3,-16(fp)
  811668:	e0bff517 	ldw	r2,-44(fp)
  81166c:	108018e4 	muli	r2,r2,99
  811670:	1885883a 	add	r2,r3,r2
  811674:	10802484 	addi	r2,r2,146
  811678:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81167c:	e0bff517 	ldw	r2,-44(fp)
  811680:	10800044 	addi	r2,r2,1
  811684:	e0bff515 	stw	r2,-44(fp)
  811688:	e0bff517 	ldw	r2,-44(fp)
  81168c:	10800090 	cmplti	r2,r2,2
  811690:	103fdb1e 	bne	r2,zero,811600 <__alt_mem_onchip_mem+0xff791600>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  811694:	e0bffc17 	ldw	r2,-16(fp)
  811698:	10800943 	ldbu	r2,37(r2)
  81169c:	10803fcc 	andi	r2,r2,255
  8116a0:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8116a4:	e13ffc17 	ldw	r4,-16(fp)
  8116a8:	0810cb80 	call	810cb8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8116ac:	e0bffc17 	ldw	r2,-16(fp)
  8116b0:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8116b4:	e0bffc17 	ldw	r2,-16(fp)
  8116b8:	10800943 	ldbu	r2,37(r2)
  8116bc:	10c03fcc 	andi	r3,r2,255
  8116c0:	e0bffb17 	ldw	r2,-20(fp)
  8116c4:	18800426 	beq	r3,r2,8116d8 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8116c8:	e0bffc17 	ldw	r2,-16(fp)
  8116cc:	00c00044 	movi	r3,1
  8116d0:	10c009c5 	stb	r3,39(r2)
  }
  8116d4:	003fef06 	br	811694 <__alt_mem_onchip_mem+0xff791694>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8116d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8116dc:	e0bffe17 	ldw	r2,-8(fp)
}
  8116e0:	e037883a 	mov	sp,fp
  8116e4:	dfc00117 	ldw	ra,4(sp)
  8116e8:	df000017 	ldw	fp,0(sp)
  8116ec:	dec00204 	addi	sp,sp,8
  8116f0:	f800283a 	ret

008116f4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  8116f4:	defffc04 	addi	sp,sp,-16
  8116f8:	dfc00315 	stw	ra,12(sp)
  8116fc:	df000215 	stw	fp,8(sp)
  811700:	df000204 	addi	fp,sp,8
  811704:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  811708:	e0bfff17 	ldw	r2,-4(fp)
  81170c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  811710:	e0bffe17 	ldw	r2,-8(fp)
  811714:	10800943 	ldbu	r2,37(r2)
  811718:	10803fcc 	andi	r2,r2,255
  81171c:	10c00044 	addi	r3,r2,1
  811720:	e0bffe17 	ldw	r2,-8(fp)
  811724:	10800983 	ldbu	r2,38(r2)
  811728:	10803fcc 	andi	r2,r2,255
  81172c:	18800316 	blt	r3,r2,81173c <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  811730:	e0bffe17 	ldw	r2,-8(fp)
  811734:	10000945 	stb	zero,37(r2)
  811738:	00000606 	br	811754 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  81173c:	e0bffe17 	ldw	r2,-8(fp)
  811740:	10800943 	ldbu	r2,37(r2)
  811744:	10800044 	addi	r2,r2,1
  811748:	1007883a 	mov	r3,r2
  81174c:	e0bffe17 	ldw	r2,-8(fp)
  811750:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  811754:	e0bffe17 	ldw	r2,-8(fp)
  811758:	10800983 	ldbu	r2,38(r2)
  81175c:	10803fcc 	andi	r2,r2,255
  811760:	10000826 	beq	r2,zero,811784 <alt_lcd_16207_timeout+0x90>
  811764:	e0bffe17 	ldw	r2,-8(fp)
  811768:	108009c3 	ldbu	r2,39(r2)
  81176c:	10803fcc 	andi	r2,r2,255
  811770:	1080201c 	xori	r2,r2,128
  811774:	10bfe004 	addi	r2,r2,-128
  811778:	1000021e 	bne	r2,zero,811784 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  81177c:	e13ffe17 	ldw	r4,-8(fp)
  811780:	0810cb80 	call	810cb8 <lcd_repaint_screen>

  return sp->period;
  811784:	e0bffe17 	ldw	r2,-8(fp)
  811788:	10800717 	ldw	r2,28(r2)
}
  81178c:	e037883a 	mov	sp,fp
  811790:	dfc00117 	ldw	ra,4(sp)
  811794:	df000017 	ldw	fp,0(sp)
  811798:	dec00204 	addi	sp,sp,8
  81179c:	f800283a 	ret

008117a0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8117a0:	defffc04 	addi	sp,sp,-16
  8117a4:	dfc00315 	stw	ra,12(sp)
  8117a8:	df000215 	stw	fp,8(sp)
  8117ac:	df000204 	addi	fp,sp,8
  8117b0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8117b4:	e0bfff17 	ldw	r2,-4(fp)
  8117b8:	10800017 	ldw	r2,0(r2)
  8117bc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8117c0:	e0bfff17 	ldw	r2,-4(fp)
  8117c4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8117c8:	010ea604 	movi	r4,15000
  8117cc:	0812b500 	call	812b50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8117d0:	e0bffe17 	ldw	r2,-8(fp)
  8117d4:	00c00c04 	movi	r3,48
  8117d8:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8117dc:	01040104 	movi	r4,4100
  8117e0:	0812b500 	call	812b50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8117e4:	e0bffe17 	ldw	r2,-8(fp)
  8117e8:	00c00c04 	movi	r3,48
  8117ec:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  8117f0:	0100fa04 	movi	r4,1000
  8117f4:	0812b500 	call	812b50 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8117f8:	e0bffe17 	ldw	r2,-8(fp)
  8117fc:	00c00c04 	movi	r3,48
  811800:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  811804:	01400e04 	movi	r5,56
  811808:	e13fff17 	ldw	r4,-4(fp)
  81180c:	0810a580 	call	810a58 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  811810:	01400204 	movi	r5,8
  811814:	e13fff17 	ldw	r4,-4(fp)
  811818:	0810a580 	call	810a58 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81181c:	e13fff17 	ldw	r4,-4(fp)
  811820:	0810be80 	call	810be8 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  811824:	01400184 	movi	r5,6
  811828:	e13fff17 	ldw	r4,-4(fp)
  81182c:	0810a580 	call	810a58 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  811830:	01400304 	movi	r5,12
  811834:	e13fff17 	ldw	r4,-4(fp)
  811838:	0810a580 	call	810a58 <lcd_write_command>

  sp->esccount = -1;
  81183c:	e0bfff17 	ldw	r2,-4(fp)
  811840:	00ffffc4 	movi	r3,-1
  811844:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811848:	e0bfff17 	ldw	r2,-4(fp)
  81184c:	10800a04 	addi	r2,r2,40
  811850:	01800204 	movi	r6,8
  811854:	000b883a 	mov	r5,zero
  811858:	1009883a 	mov	r4,r2
  81185c:	08080740 	call	808074 <memset>

  sp->scrollpos = 0;
  811860:	e0bfff17 	ldw	r2,-4(fp)
  811864:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811868:	e0bfff17 	ldw	r2,-4(fp)
  81186c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  811870:	e0bfff17 	ldw	r2,-4(fp)
  811874:	100009c5 	stb	zero,39(r2)
  811878:	d0a7a617 	ldw	r2,-24936(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  81187c:	01400284 	movi	r5,10
  811880:	1009883a 	mov	r4,r2
  811884:	080cbb00 	call	80cbb0 <__udivsi3>
  811888:	1007883a 	mov	r3,r2
  81188c:	e0bfff17 	ldw	r2,-4(fp)
  811890:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  811894:	e0bfff17 	ldw	r2,-4(fp)
  811898:	10c00104 	addi	r3,r2,4
  81189c:	e0bfff17 	ldw	r2,-4(fp)
  8118a0:	10800717 	ldw	r2,28(r2)
  8118a4:	e1ffff17 	ldw	r7,-4(fp)
  8118a8:	01802074 	movhi	r6,129
  8118ac:	3185bd04 	addi	r6,r6,5876
  8118b0:	100b883a 	mov	r5,r2
  8118b4:	1809883a 	mov	r4,r3
  8118b8:	080f2d40 	call	80f2d4 <alt_alarm_start>
}
  8118bc:	0001883a 	nop
  8118c0:	e037883a 	mov	sp,fp
  8118c4:	dfc00117 	ldw	ra,4(sp)
  8118c8:	df000017 	ldw	fp,0(sp)
  8118cc:	dec00204 	addi	sp,sp,8
  8118d0:	f800283a 	ret

008118d4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8118d4:	defffa04 	addi	sp,sp,-24
  8118d8:	dfc00515 	stw	ra,20(sp)
  8118dc:	df000415 	stw	fp,16(sp)
  8118e0:	df000404 	addi	fp,sp,16
  8118e4:	e13ffd15 	stw	r4,-12(fp)
  8118e8:	e17ffe15 	stw	r5,-8(fp)
  8118ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  8118f0:	e0bffd17 	ldw	r2,-12(fp)
  8118f4:	10800017 	ldw	r2,0(r2)
  8118f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8118fc:	e0bffc17 	ldw	r2,-16(fp)
  811900:	10c00a04 	addi	r3,r2,40
  811904:	e0bffd17 	ldw	r2,-12(fp)
  811908:	10800217 	ldw	r2,8(r2)
  81190c:	100f883a 	mov	r7,r2
  811910:	e1bfff17 	ldw	r6,-4(fp)
  811914:	e17ffe17 	ldw	r5,-8(fp)
  811918:	1809883a 	mov	r4,r3
  81191c:	081121c0 	call	81121c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  811920:	e037883a 	mov	sp,fp
  811924:	dfc00117 	ldw	ra,4(sp)
  811928:	df000017 	ldw	fp,0(sp)
  81192c:	dec00204 	addi	sp,sp,8
  811930:	f800283a 	ret

00811934 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811934:	defffa04 	addi	sp,sp,-24
  811938:	dfc00515 	stw	ra,20(sp)
  81193c:	df000415 	stw	fp,16(sp)
  811940:	df000404 	addi	fp,sp,16
  811944:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811948:	0007883a 	mov	r3,zero
  81194c:	e0bfff17 	ldw	r2,-4(fp)
  811950:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811954:	e0bfff17 	ldw	r2,-4(fp)
  811958:	10800104 	addi	r2,r2,4
  81195c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811960:	0005303a 	rdctl	r2,status
  811964:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811968:	e0fffd17 	ldw	r3,-12(fp)
  81196c:	00bfff84 	movi	r2,-2
  811970:	1884703a 	and	r2,r3,r2
  811974:	1001703a 	wrctl	status,r2
  
  return context;
  811978:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81197c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  811980:	080fcac0 	call	80fcac <alt_tick>
  811984:	e0bffc17 	ldw	r2,-16(fp)
  811988:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81198c:	e0bffe17 	ldw	r2,-8(fp)
  811990:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  811994:	0001883a 	nop
  811998:	e037883a 	mov	sp,fp
  81199c:	dfc00117 	ldw	ra,4(sp)
  8119a0:	df000017 	ldw	fp,0(sp)
  8119a4:	dec00204 	addi	sp,sp,8
  8119a8:	f800283a 	ret

008119ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8119ac:	defff804 	addi	sp,sp,-32
  8119b0:	dfc00715 	stw	ra,28(sp)
  8119b4:	df000615 	stw	fp,24(sp)
  8119b8:	df000604 	addi	fp,sp,24
  8119bc:	e13ffc15 	stw	r4,-16(fp)
  8119c0:	e17ffd15 	stw	r5,-12(fp)
  8119c4:	e1bffe15 	stw	r6,-8(fp)
  8119c8:	e1ffff15 	stw	r7,-4(fp)
  8119cc:	e0bfff17 	ldw	r2,-4(fp)
  8119d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8119d4:	d0a7a617 	ldw	r2,-24936(gp)
  8119d8:	1000021e 	bne	r2,zero,8119e4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8119dc:	e0bffb17 	ldw	r2,-20(fp)
  8119e0:	d0a7a615 	stw	r2,-24936(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	10800104 	addi	r2,r2,4
  8119ec:	00c001c4 	movi	r3,7
  8119f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8119f4:	d8000015 	stw	zero,0(sp)
  8119f8:	e1fffc17 	ldw	r7,-16(fp)
  8119fc:	01802074 	movhi	r6,129
  811a00:	31864d04 	addi	r6,r6,6452
  811a04:	e17ffe17 	ldw	r5,-8(fp)
  811a08:	e13ffd17 	ldw	r4,-12(fp)
  811a0c:	081251c0 	call	81251c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  811a10:	0001883a 	nop
  811a14:	e037883a 	mov	sp,fp
  811a18:	dfc00117 	ldw	ra,4(sp)
  811a1c:	df000017 	ldw	fp,0(sp)
  811a20:	dec00204 	addi	sp,sp,8
  811a24:	f800283a 	ret

00811a28 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811a28:	defffa04 	addi	sp,sp,-24
  811a2c:	dfc00515 	stw	ra,20(sp)
  811a30:	df000415 	stw	fp,16(sp)
  811a34:	df000404 	addi	fp,sp,16
  811a38:	e13ffd15 	stw	r4,-12(fp)
  811a3c:	e17ffe15 	stw	r5,-8(fp)
  811a40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811a44:	e0bffd17 	ldw	r2,-12(fp)
  811a48:	10800017 	ldw	r2,0(r2)
  811a4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811a50:	e0bffc17 	ldw	r2,-16(fp)
  811a54:	10c00a04 	addi	r3,r2,40
  811a58:	e0bffd17 	ldw	r2,-12(fp)
  811a5c:	10800217 	ldw	r2,8(r2)
  811a60:	100f883a 	mov	r7,r2
  811a64:	e1bfff17 	ldw	r6,-4(fp)
  811a68:	e17ffe17 	ldw	r5,-8(fp)
  811a6c:	1809883a 	mov	r4,r3
  811a70:	0811f3c0 	call	811f3c <altera_avalon_uart_read>
      fd->fd_flags);
}
  811a74:	e037883a 	mov	sp,fp
  811a78:	dfc00117 	ldw	ra,4(sp)
  811a7c:	df000017 	ldw	fp,0(sp)
  811a80:	dec00204 	addi	sp,sp,8
  811a84:	f800283a 	ret

00811a88 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811a88:	defffa04 	addi	sp,sp,-24
  811a8c:	dfc00515 	stw	ra,20(sp)
  811a90:	df000415 	stw	fp,16(sp)
  811a94:	df000404 	addi	fp,sp,16
  811a98:	e13ffd15 	stw	r4,-12(fp)
  811a9c:	e17ffe15 	stw	r5,-8(fp)
  811aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811aa4:	e0bffd17 	ldw	r2,-12(fp)
  811aa8:	10800017 	ldw	r2,0(r2)
  811aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  811ab0:	e0bffc17 	ldw	r2,-16(fp)
  811ab4:	10c00a04 	addi	r3,r2,40
  811ab8:	e0bffd17 	ldw	r2,-12(fp)
  811abc:	10800217 	ldw	r2,8(r2)
  811ac0:	100f883a 	mov	r7,r2
  811ac4:	e1bfff17 	ldw	r6,-4(fp)
  811ac8:	e17ffe17 	ldw	r5,-8(fp)
  811acc:	1809883a 	mov	r4,r3
  811ad0:	08121540 	call	812154 <altera_avalon_uart_write>
      fd->fd_flags);
}
  811ad4:	e037883a 	mov	sp,fp
  811ad8:	dfc00117 	ldw	ra,4(sp)
  811adc:	df000017 	ldw	fp,0(sp)
  811ae0:	dec00204 	addi	sp,sp,8
  811ae4:	f800283a 	ret

00811ae8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  811ae8:	defffc04 	addi	sp,sp,-16
  811aec:	dfc00315 	stw	ra,12(sp)
  811af0:	df000215 	stw	fp,8(sp)
  811af4:	df000204 	addi	fp,sp,8
  811af8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811afc:	e0bfff17 	ldw	r2,-4(fp)
  811b00:	10800017 	ldw	r2,0(r2)
  811b04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  811b08:	e0bffe17 	ldw	r2,-8(fp)
  811b0c:	10c00a04 	addi	r3,r2,40
  811b10:	e0bfff17 	ldw	r2,-4(fp)
  811b14:	10800217 	ldw	r2,8(r2)
  811b18:	100b883a 	mov	r5,r2
  811b1c:	1809883a 	mov	r4,r3
  811b20:	0811eac0 	call	811eac <altera_avalon_uart_close>
}
  811b24:	e037883a 	mov	sp,fp
  811b28:	dfc00117 	ldw	ra,4(sp)
  811b2c:	df000017 	ldw	fp,0(sp)
  811b30:	dec00204 	addi	sp,sp,8
  811b34:	f800283a 	ret

00811b38 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811b38:	defff804 	addi	sp,sp,-32
  811b3c:	dfc00715 	stw	ra,28(sp)
  811b40:	df000615 	stw	fp,24(sp)
  811b44:	df000604 	addi	fp,sp,24
  811b48:	e13ffd15 	stw	r4,-12(fp)
  811b4c:	e17ffe15 	stw	r5,-8(fp)
  811b50:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  811b54:	e0bffd17 	ldw	r2,-12(fp)
  811b58:	10800017 	ldw	r2,0(r2)
  811b5c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811b60:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811b64:	1000041e 	bne	r2,zero,811b78 <altera_avalon_uart_init+0x40>
  811b68:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811b6c:	1000021e 	bne	r2,zero,811b78 <altera_avalon_uart_init+0x40>
  811b70:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811b74:	10000226 	beq	r2,zero,811b80 <altera_avalon_uart_init+0x48>
  811b78:	00800044 	movi	r2,1
  811b7c:	00000106 	br	811b84 <altera_avalon_uart_init+0x4c>
  811b80:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811b84:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811b88:	e0bffc17 	ldw	r2,-16(fp)
  811b8c:	10000f1e 	bne	r2,zero,811bcc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811b90:	e0bffd17 	ldw	r2,-12(fp)
  811b94:	00c32004 	movi	r3,3200
  811b98:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  811b9c:	e0bffb17 	ldw	r2,-20(fp)
  811ba0:	10800304 	addi	r2,r2,12
  811ba4:	e0fffd17 	ldw	r3,-12(fp)
  811ba8:	18c00117 	ldw	r3,4(r3)
  811bac:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811bb0:	d8000015 	stw	zero,0(sp)
  811bb4:	e1fffd17 	ldw	r7,-12(fp)
  811bb8:	01802074 	movhi	r6,129
  811bbc:	3186f904 	addi	r6,r6,7140
  811bc0:	e17fff17 	ldw	r5,-4(fp)
  811bc4:	e13ffe17 	ldw	r4,-8(fp)
  811bc8:	081251c0 	call	81251c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  811bcc:	0001883a 	nop
  811bd0:	e037883a 	mov	sp,fp
  811bd4:	dfc00117 	ldw	ra,4(sp)
  811bd8:	df000017 	ldw	fp,0(sp)
  811bdc:	dec00204 	addi	sp,sp,8
  811be0:	f800283a 	ret

00811be4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  811be4:	defffa04 	addi	sp,sp,-24
  811be8:	dfc00515 	stw	ra,20(sp)
  811bec:	df000415 	stw	fp,16(sp)
  811bf0:	df000404 	addi	fp,sp,16
  811bf4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  811bf8:	e0bfff17 	ldw	r2,-4(fp)
  811bfc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  811c00:	e0bffc17 	ldw	r2,-16(fp)
  811c04:	10800017 	ldw	r2,0(r2)
  811c08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  811c0c:	e0bffd17 	ldw	r2,-12(fp)
  811c10:	10800204 	addi	r2,r2,8
  811c14:	10800037 	ldwio	r2,0(r2)
  811c18:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  811c1c:	e0bffd17 	ldw	r2,-12(fp)
  811c20:	10800204 	addi	r2,r2,8
  811c24:	0007883a 	mov	r3,zero
  811c28:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811c2c:	e0bffd17 	ldw	r2,-12(fp)
  811c30:	10800204 	addi	r2,r2,8
  811c34:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811c38:	e0bffe17 	ldw	r2,-8(fp)
  811c3c:	1080200c 	andi	r2,r2,128
  811c40:	10000326 	beq	r2,zero,811c50 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811c44:	e17ffe17 	ldw	r5,-8(fp)
  811c48:	e13ffc17 	ldw	r4,-16(fp)
  811c4c:	0811c800 	call	811c80 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	1081100c 	andi	r2,r2,1088
  811c58:	10000326 	beq	r2,zero,811c68 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811c5c:	e17ffe17 	ldw	r5,-8(fp)
  811c60:	e13ffc17 	ldw	r4,-16(fp)
  811c64:	0811d640 	call	811d64 <altera_avalon_uart_txirq>
  }
  

}
  811c68:	0001883a 	nop
  811c6c:	e037883a 	mov	sp,fp
  811c70:	dfc00117 	ldw	ra,4(sp)
  811c74:	df000017 	ldw	fp,0(sp)
  811c78:	dec00204 	addi	sp,sp,8
  811c7c:	f800283a 	ret

00811c80 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811c80:	defffc04 	addi	sp,sp,-16
  811c84:	df000315 	stw	fp,12(sp)
  811c88:	df000304 	addi	fp,sp,12
  811c8c:	e13ffe15 	stw	r4,-8(fp)
  811c90:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811c94:	e0bfff17 	ldw	r2,-4(fp)
  811c98:	108000cc 	andi	r2,r2,3
  811c9c:	10002c1e 	bne	r2,zero,811d50 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811ca0:	e0bffe17 	ldw	r2,-8(fp)
  811ca4:	10800317 	ldw	r2,12(r2)
  811ca8:	e0bffe17 	ldw	r2,-8(fp)
  811cac:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811cb0:	e0bffe17 	ldw	r2,-8(fp)
  811cb4:	10800317 	ldw	r2,12(r2)
  811cb8:	10800044 	addi	r2,r2,1
  811cbc:	10800fcc 	andi	r2,r2,63
  811cc0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  811cc4:	e0bffe17 	ldw	r2,-8(fp)
  811cc8:	10800317 	ldw	r2,12(r2)
  811ccc:	e0fffe17 	ldw	r3,-8(fp)
  811cd0:	18c00017 	ldw	r3,0(r3)
  811cd4:	18c00037 	ldwio	r3,0(r3)
  811cd8:	1809883a 	mov	r4,r3
  811cdc:	e0fffe17 	ldw	r3,-8(fp)
  811ce0:	1885883a 	add	r2,r3,r2
  811ce4:	10800704 	addi	r2,r2,28
  811ce8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  811cec:	e0bffe17 	ldw	r2,-8(fp)
  811cf0:	e0fffd17 	ldw	r3,-12(fp)
  811cf4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811cf8:	e0bffe17 	ldw	r2,-8(fp)
  811cfc:	10800317 	ldw	r2,12(r2)
  811d00:	10800044 	addi	r2,r2,1
  811d04:	10800fcc 	andi	r2,r2,63
  811d08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  811d0c:	e0bffe17 	ldw	r2,-8(fp)
  811d10:	10c00217 	ldw	r3,8(r2)
  811d14:	e0bffd17 	ldw	r2,-12(fp)
  811d18:	18800e1e 	bne	r3,r2,811d54 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811d1c:	e0bffe17 	ldw	r2,-8(fp)
  811d20:	10c00117 	ldw	r3,4(r2)
  811d24:	00bfdfc4 	movi	r2,-129
  811d28:	1886703a 	and	r3,r3,r2
  811d2c:	e0bffe17 	ldw	r2,-8(fp)
  811d30:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811d34:	e0bffe17 	ldw	r2,-8(fp)
  811d38:	10800017 	ldw	r2,0(r2)
  811d3c:	10800304 	addi	r2,r2,12
  811d40:	e0fffe17 	ldw	r3,-8(fp)
  811d44:	18c00117 	ldw	r3,4(r3)
  811d48:	10c00035 	stwio	r3,0(r2)
  811d4c:	00000106 	br	811d54 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811d50:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811d54:	e037883a 	mov	sp,fp
  811d58:	df000017 	ldw	fp,0(sp)
  811d5c:	dec00104 	addi	sp,sp,4
  811d60:	f800283a 	ret

00811d64 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811d64:	defffb04 	addi	sp,sp,-20
  811d68:	df000415 	stw	fp,16(sp)
  811d6c:	df000404 	addi	fp,sp,16
  811d70:	e13ffc15 	stw	r4,-16(fp)
  811d74:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811d78:	e0bffc17 	ldw	r2,-16(fp)
  811d7c:	10c00417 	ldw	r3,16(r2)
  811d80:	e0bffc17 	ldw	r2,-16(fp)
  811d84:	10800517 	ldw	r2,20(r2)
  811d88:	18803226 	beq	r3,r2,811e54 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811d8c:	e0bffc17 	ldw	r2,-16(fp)
  811d90:	10800617 	ldw	r2,24(r2)
  811d94:	1080008c 	andi	r2,r2,2
  811d98:	10000326 	beq	r2,zero,811da8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811d9c:	e0bffd17 	ldw	r2,-12(fp)
  811da0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811da4:	10001d26 	beq	r2,zero,811e1c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	10800417 	ldw	r2,16(r2)
  811db0:	e0bffc17 	ldw	r2,-16(fp)
  811db4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811db8:	e0bffc17 	ldw	r2,-16(fp)
  811dbc:	10800017 	ldw	r2,0(r2)
  811dc0:	10800104 	addi	r2,r2,4
  811dc4:	e0fffc17 	ldw	r3,-16(fp)
  811dc8:	18c00417 	ldw	r3,16(r3)
  811dcc:	e13ffc17 	ldw	r4,-16(fp)
  811dd0:	20c7883a 	add	r3,r4,r3
  811dd4:	18c01704 	addi	r3,r3,92
  811dd8:	18c00003 	ldbu	r3,0(r3)
  811ddc:	18c03fcc 	andi	r3,r3,255
  811de0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811de4:	e0bffc17 	ldw	r2,-16(fp)
  811de8:	10800417 	ldw	r2,16(r2)
  811dec:	10800044 	addi	r2,r2,1
  811df0:	e0fffc17 	ldw	r3,-16(fp)
  811df4:	18800415 	stw	r2,16(r3)
  811df8:	10c00fcc 	andi	r3,r2,63
  811dfc:	e0bffc17 	ldw	r2,-16(fp)
  811e00:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811e04:	e0bffc17 	ldw	r2,-16(fp)
  811e08:	10800117 	ldw	r2,4(r2)
  811e0c:	10c01014 	ori	r3,r2,64
  811e10:	e0bffc17 	ldw	r2,-16(fp)
  811e14:	10c00115 	stw	r3,4(r2)
  811e18:	00000e06 	br	811e54 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811e1c:	e0bffc17 	ldw	r2,-16(fp)
  811e20:	10800017 	ldw	r2,0(r2)
  811e24:	10800204 	addi	r2,r2,8
  811e28:	10800037 	ldwio	r2,0(r2)
  811e2c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811e30:	e0bffd17 	ldw	r2,-12(fp)
  811e34:	1082000c 	andi	r2,r2,2048
  811e38:	1000061e 	bne	r2,zero,811e54 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811e3c:	e0bffc17 	ldw	r2,-16(fp)
  811e40:	10c00117 	ldw	r3,4(r2)
  811e44:	00bfefc4 	movi	r2,-65
  811e48:	1886703a 	and	r3,r3,r2
  811e4c:	e0bffc17 	ldw	r2,-16(fp)
  811e50:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811e54:	e0bffc17 	ldw	r2,-16(fp)
  811e58:	10c00417 	ldw	r3,16(r2)
  811e5c:	e0bffc17 	ldw	r2,-16(fp)
  811e60:	10800517 	ldw	r2,20(r2)
  811e64:	1880061e 	bne	r3,r2,811e80 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811e68:	e0bffc17 	ldw	r2,-16(fp)
  811e6c:	10c00117 	ldw	r3,4(r2)
  811e70:	00beefc4 	movi	r2,-1089
  811e74:	1886703a 	and	r3,r3,r2
  811e78:	e0bffc17 	ldw	r2,-16(fp)
  811e7c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811e80:	e0bffc17 	ldw	r2,-16(fp)
  811e84:	10800017 	ldw	r2,0(r2)
  811e88:	10800304 	addi	r2,r2,12
  811e8c:	e0fffc17 	ldw	r3,-16(fp)
  811e90:	18c00117 	ldw	r3,4(r3)
  811e94:	10c00035 	stwio	r3,0(r2)
}
  811e98:	0001883a 	nop
  811e9c:	e037883a 	mov	sp,fp
  811ea0:	df000017 	ldw	fp,0(sp)
  811ea4:	dec00104 	addi	sp,sp,4
  811ea8:	f800283a 	ret

00811eac <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811eac:	defffd04 	addi	sp,sp,-12
  811eb0:	df000215 	stw	fp,8(sp)
  811eb4:	df000204 	addi	fp,sp,8
  811eb8:	e13ffe15 	stw	r4,-8(fp)
  811ebc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811ec0:	00000506 	br	811ed8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811ec4:	e0bfff17 	ldw	r2,-4(fp)
  811ec8:	1090000c 	andi	r2,r2,16384
  811ecc:	10000226 	beq	r2,zero,811ed8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811ed0:	00bffd44 	movi	r2,-11
  811ed4:	00000606 	br	811ef0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811ed8:	e0bffe17 	ldw	r2,-8(fp)
  811edc:	10c00417 	ldw	r3,16(r2)
  811ee0:	e0bffe17 	ldw	r2,-8(fp)
  811ee4:	10800517 	ldw	r2,20(r2)
  811ee8:	18bff61e 	bne	r3,r2,811ec4 <__alt_mem_onchip_mem+0xff791ec4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811eec:	0005883a 	mov	r2,zero
}
  811ef0:	e037883a 	mov	sp,fp
  811ef4:	df000017 	ldw	fp,0(sp)
  811ef8:	dec00104 	addi	sp,sp,4
  811efc:	f800283a 	ret

00811f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811f00:	defffe04 	addi	sp,sp,-8
  811f04:	dfc00115 	stw	ra,4(sp)
  811f08:	df000015 	stw	fp,0(sp)
  811f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811f10:	d0a00b17 	ldw	r2,-32724(gp)
  811f14:	10000326 	beq	r2,zero,811f24 <alt_get_errno+0x24>
  811f18:	d0a00b17 	ldw	r2,-32724(gp)
  811f1c:	103ee83a 	callr	r2
  811f20:	00000106 	br	811f28 <alt_get_errno+0x28>
  811f24:	d0a7a204 	addi	r2,gp,-24952
}
  811f28:	e037883a 	mov	sp,fp
  811f2c:	dfc00117 	ldw	ra,4(sp)
  811f30:	df000017 	ldw	fp,0(sp)
  811f34:	dec00204 	addi	sp,sp,8
  811f38:	f800283a 	ret

00811f3c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811f3c:	defff204 	addi	sp,sp,-56
  811f40:	dfc00d15 	stw	ra,52(sp)
  811f44:	df000c15 	stw	fp,48(sp)
  811f48:	df000c04 	addi	fp,sp,48
  811f4c:	e13ffc15 	stw	r4,-16(fp)
  811f50:	e17ffd15 	stw	r5,-12(fp)
  811f54:	e1bffe15 	stw	r6,-8(fp)
  811f58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811f5c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811f60:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811f64:	e0bfff17 	ldw	r2,-4(fp)
  811f68:	1090000c 	andi	r2,r2,16384
  811f6c:	1005003a 	cmpeq	r2,r2,zero
  811f70:	10803fcc 	andi	r2,r2,255
  811f74:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811f78:	00001306 	br	811fc8 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811f7c:	e0bff517 	ldw	r2,-44(fp)
  811f80:	10800044 	addi	r2,r2,1
  811f84:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811f88:	e0bffd17 	ldw	r2,-12(fp)
  811f8c:	10c00044 	addi	r3,r2,1
  811f90:	e0fffd15 	stw	r3,-12(fp)
  811f94:	e0fffc17 	ldw	r3,-16(fp)
  811f98:	18c00217 	ldw	r3,8(r3)
  811f9c:	e13ffc17 	ldw	r4,-16(fp)
  811fa0:	20c7883a 	add	r3,r4,r3
  811fa4:	18c00704 	addi	r3,r3,28
  811fa8:	18c00003 	ldbu	r3,0(r3)
  811fac:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811fb0:	e0bffc17 	ldw	r2,-16(fp)
  811fb4:	10800217 	ldw	r2,8(r2)
  811fb8:	10800044 	addi	r2,r2,1
  811fbc:	10c00fcc 	andi	r3,r2,63
  811fc0:	e0bffc17 	ldw	r2,-16(fp)
  811fc4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811fc8:	e0fff517 	ldw	r3,-44(fp)
  811fcc:	e0bffe17 	ldw	r2,-8(fp)
  811fd0:	1880050e 	bge	r3,r2,811fe8 <altera_avalon_uart_read+0xac>
  811fd4:	e0bffc17 	ldw	r2,-16(fp)
  811fd8:	10c00217 	ldw	r3,8(r2)
  811fdc:	e0bffc17 	ldw	r2,-16(fp)
  811fe0:	10800317 	ldw	r2,12(r2)
  811fe4:	18bfe51e 	bne	r3,r2,811f7c <__alt_mem_onchip_mem+0xff791f7c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811fe8:	e0bff517 	ldw	r2,-44(fp)
  811fec:	1000251e 	bne	r2,zero,812084 <altera_avalon_uart_read+0x148>
  811ff0:	e0bffc17 	ldw	r2,-16(fp)
  811ff4:	10c00217 	ldw	r3,8(r2)
  811ff8:	e0bffc17 	ldw	r2,-16(fp)
  811ffc:	10800317 	ldw	r2,12(r2)
  812000:	1880201e 	bne	r3,r2,812084 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  812004:	e0bff617 	ldw	r2,-40(fp)
  812008:	1000071e 	bne	r2,zero,812028 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  81200c:	0811f000 	call	811f00 <alt_get_errno>
  812010:	1007883a 	mov	r3,r2
  812014:	008002c4 	movi	r2,11
  812018:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  81201c:	00800044 	movi	r2,1
  812020:	e0bff405 	stb	r2,-48(fp)
        break;
  812024:	00001b06 	br	812094 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812028:	0005303a 	rdctl	r2,status
  81202c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812030:	e0fff917 	ldw	r3,-28(fp)
  812034:	00bfff84 	movi	r2,-2
  812038:	1884703a 	and	r2,r3,r2
  81203c:	1001703a 	wrctl	status,r2
  
  return context;
  812040:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  812044:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812048:	e0bffc17 	ldw	r2,-16(fp)
  81204c:	10800117 	ldw	r2,4(r2)
  812050:	10c02014 	ori	r3,r2,128
  812054:	e0bffc17 	ldw	r2,-16(fp)
  812058:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81205c:	e0bffc17 	ldw	r2,-16(fp)
  812060:	10800017 	ldw	r2,0(r2)
  812064:	10800304 	addi	r2,r2,12
  812068:	e0fffc17 	ldw	r3,-16(fp)
  81206c:	18c00117 	ldw	r3,4(r3)
  812070:	10c00035 	stwio	r3,0(r2)
  812074:	e0bff817 	ldw	r2,-32(fp)
  812078:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81207c:	e0bffa17 	ldw	r2,-24(fp)
  812080:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  812084:	e0bff517 	ldw	r2,-44(fp)
  812088:	1000021e 	bne	r2,zero,812094 <altera_avalon_uart_read+0x158>
  81208c:	e0bffe17 	ldw	r2,-8(fp)
  812090:	103fcd1e 	bne	r2,zero,811fc8 <__alt_mem_onchip_mem+0xff791fc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812094:	0005303a 	rdctl	r2,status
  812098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81209c:	e0fffb17 	ldw	r3,-20(fp)
  8120a0:	00bfff84 	movi	r2,-2
  8120a4:	1884703a 	and	r2,r3,r2
  8120a8:	1001703a 	wrctl	status,r2
  
  return context;
  8120ac:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8120b0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8120b4:	e0bffc17 	ldw	r2,-16(fp)
  8120b8:	10800117 	ldw	r2,4(r2)
  8120bc:	10c02014 	ori	r3,r2,128
  8120c0:	e0bffc17 	ldw	r2,-16(fp)
  8120c4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8120c8:	e0bffc17 	ldw	r2,-16(fp)
  8120cc:	10800017 	ldw	r2,0(r2)
  8120d0:	10800304 	addi	r2,r2,12
  8120d4:	e0fffc17 	ldw	r3,-16(fp)
  8120d8:	18c00117 	ldw	r3,4(r3)
  8120dc:	10c00035 	stwio	r3,0(r2)
  8120e0:	e0bff817 	ldw	r2,-32(fp)
  8120e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120e8:	e0bff717 	ldw	r2,-36(fp)
  8120ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8120f0:	e0bff403 	ldbu	r2,-48(fp)
  8120f4:	10000226 	beq	r2,zero,812100 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8120f8:	00bffd44 	movi	r2,-11
  8120fc:	00000106 	br	812104 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  812100:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812104:	e037883a 	mov	sp,fp
  812108:	dfc00117 	ldw	ra,4(sp)
  81210c:	df000017 	ldw	fp,0(sp)
  812110:	dec00204 	addi	sp,sp,8
  812114:	f800283a 	ret

00812118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812118:	defffe04 	addi	sp,sp,-8
  81211c:	dfc00115 	stw	ra,4(sp)
  812120:	df000015 	stw	fp,0(sp)
  812124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812128:	d0a00b17 	ldw	r2,-32724(gp)
  81212c:	10000326 	beq	r2,zero,81213c <alt_get_errno+0x24>
  812130:	d0a00b17 	ldw	r2,-32724(gp)
  812134:	103ee83a 	callr	r2
  812138:	00000106 	br	812140 <alt_get_errno+0x28>
  81213c:	d0a7a204 	addi	r2,gp,-24952
}
  812140:	e037883a 	mov	sp,fp
  812144:	dfc00117 	ldw	ra,4(sp)
  812148:	df000017 	ldw	fp,0(sp)
  81214c:	dec00204 	addi	sp,sp,8
  812150:	f800283a 	ret

00812154 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  812154:	defff204 	addi	sp,sp,-56
  812158:	dfc00d15 	stw	ra,52(sp)
  81215c:	df000c15 	stw	fp,48(sp)
  812160:	df000c04 	addi	fp,sp,48
  812164:	e13ffc15 	stw	r4,-16(fp)
  812168:	e17ffd15 	stw	r5,-12(fp)
  81216c:	e1bffe15 	stw	r6,-8(fp)
  812170:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  812174:	e0bffe17 	ldw	r2,-8(fp)
  812178:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  81217c:	e0bfff17 	ldw	r2,-4(fp)
  812180:	1090000c 	andi	r2,r2,16384
  812184:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812188:	00003c06 	br	81227c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81218c:	e0bffc17 	ldw	r2,-16(fp)
  812190:	10800517 	ldw	r2,20(r2)
  812194:	10800044 	addi	r2,r2,1
  812198:	10800fcc 	andi	r2,r2,63
  81219c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8121a0:	e0bffc17 	ldw	r2,-16(fp)
  8121a4:	10c00417 	ldw	r3,16(r2)
  8121a8:	e0bff717 	ldw	r2,-36(fp)
  8121ac:	1880221e 	bne	r3,r2,812238 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8121b0:	e0bff517 	ldw	r2,-44(fp)
  8121b4:	10000526 	beq	r2,zero,8121cc <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8121b8:	08121180 	call	812118 <alt_get_errno>
  8121bc:	1007883a 	mov	r3,r2
  8121c0:	008002c4 	movi	r2,11
  8121c4:	18800015 	stw	r2,0(r3)
        break;
  8121c8:	00002e06 	br	812284 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8121cc:	0005303a 	rdctl	r2,status
  8121d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8121d4:	e0fff917 	ldw	r3,-28(fp)
  8121d8:	00bfff84 	movi	r2,-2
  8121dc:	1884703a 	and	r2,r3,r2
  8121e0:	1001703a 	wrctl	status,r2
  
  return context;
  8121e4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8121e8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8121ec:	e0bffc17 	ldw	r2,-16(fp)
  8121f0:	10800117 	ldw	r2,4(r2)
  8121f4:	10c11014 	ori	r3,r2,1088
  8121f8:	e0bffc17 	ldw	r2,-16(fp)
  8121fc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812200:	e0bffc17 	ldw	r2,-16(fp)
  812204:	10800017 	ldw	r2,0(r2)
  812208:	10800304 	addi	r2,r2,12
  81220c:	e0fffc17 	ldw	r3,-16(fp)
  812210:	18c00117 	ldw	r3,4(r3)
  812214:	10c00035 	stwio	r3,0(r2)
  812218:	e0bff817 	ldw	r2,-32(fp)
  81221c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812220:	e0bff617 	ldw	r2,-40(fp)
  812224:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812228:	e0bffc17 	ldw	r2,-16(fp)
  81222c:	10c00417 	ldw	r3,16(r2)
  812230:	e0bff717 	ldw	r2,-36(fp)
  812234:	18bffc26 	beq	r3,r2,812228 <__alt_mem_onchip_mem+0xff792228>
      }
    }

    count--;
  812238:	e0bff417 	ldw	r2,-48(fp)
  81223c:	10bfffc4 	addi	r2,r2,-1
  812240:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  812244:	e0bffc17 	ldw	r2,-16(fp)
  812248:	10c00517 	ldw	r3,20(r2)
  81224c:	e0bffd17 	ldw	r2,-12(fp)
  812250:	11000044 	addi	r4,r2,1
  812254:	e13ffd15 	stw	r4,-12(fp)
  812258:	10800003 	ldbu	r2,0(r2)
  81225c:	1009883a 	mov	r4,r2
  812260:	e0bffc17 	ldw	r2,-16(fp)
  812264:	10c5883a 	add	r2,r2,r3
  812268:	10801704 	addi	r2,r2,92
  81226c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  812270:	e0bffc17 	ldw	r2,-16(fp)
  812274:	e0fff717 	ldw	r3,-36(fp)
  812278:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81227c:	e0bff417 	ldw	r2,-48(fp)
  812280:	103fc21e 	bne	r2,zero,81218c <__alt_mem_onchip_mem+0xff79218c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812284:	0005303a 	rdctl	r2,status
  812288:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81228c:	e0fffb17 	ldw	r3,-20(fp)
  812290:	00bfff84 	movi	r2,-2
  812294:	1884703a 	and	r2,r3,r2
  812298:	1001703a 	wrctl	status,r2
  
  return context;
  81229c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8122a0:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8122a4:	e0bffc17 	ldw	r2,-16(fp)
  8122a8:	10800117 	ldw	r2,4(r2)
  8122ac:	10c11014 	ori	r3,r2,1088
  8122b0:	e0bffc17 	ldw	r2,-16(fp)
  8122b4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8122b8:	e0bffc17 	ldw	r2,-16(fp)
  8122bc:	10800017 	ldw	r2,0(r2)
  8122c0:	10800304 	addi	r2,r2,12
  8122c4:	e0fffc17 	ldw	r3,-16(fp)
  8122c8:	18c00117 	ldw	r3,4(r3)
  8122cc:	10c00035 	stwio	r3,0(r2)
  8122d0:	e0bff817 	ldw	r2,-32(fp)
  8122d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122d8:	e0bffa17 	ldw	r2,-24(fp)
  8122dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8122e0:	e0fffe17 	ldw	r3,-8(fp)
  8122e4:	e0bff417 	ldw	r2,-48(fp)
  8122e8:	1885c83a 	sub	r2,r3,r2
}
  8122ec:	e037883a 	mov	sp,fp
  8122f0:	dfc00117 	ldw	ra,4(sp)
  8122f4:	df000017 	ldw	fp,0(sp)
  8122f8:	dec00204 	addi	sp,sp,8
  8122fc:	f800283a 	ret

00812300 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812300:	defffe04 	addi	sp,sp,-8
  812304:	df000115 	stw	fp,4(sp)
  812308:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81230c:	e03fff15 	stw	zero,-4(fp)
  812310:	00000506 	br	812328 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812314:	e0bfff17 	ldw	r2,-4(fp)
  812318:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81231c:	e0bfff17 	ldw	r2,-4(fp)
  812320:	10800804 	addi	r2,r2,32
  812324:	e0bfff15 	stw	r2,-4(fp)
  812328:	e0bfff17 	ldw	r2,-4(fp)
  81232c:	10820030 	cmpltui	r2,r2,2048
  812330:	103ff81e 	bne	r2,zero,812314 <__alt_mem_onchip_mem+0xff792314>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812334:	0001883a 	nop
  812338:	e037883a 	mov	sp,fp
  81233c:	df000017 	ldw	fp,0(sp)
  812340:	dec00104 	addi	sp,sp,4
  812344:	f800283a 	ret

00812348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812348:	defffe04 	addi	sp,sp,-8
  81234c:	dfc00115 	stw	ra,4(sp)
  812350:	df000015 	stw	fp,0(sp)
  812354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812358:	d0a00b17 	ldw	r2,-32724(gp)
  81235c:	10000326 	beq	r2,zero,81236c <alt_get_errno+0x24>
  812360:	d0a00b17 	ldw	r2,-32724(gp)
  812364:	103ee83a 	callr	r2
  812368:	00000106 	br	812370 <alt_get_errno+0x28>
  81236c:	d0a7a204 	addi	r2,gp,-24952
}
  812370:	e037883a 	mov	sp,fp
  812374:	dfc00117 	ldw	ra,4(sp)
  812378:	df000017 	ldw	fp,0(sp)
  81237c:	dec00204 	addi	sp,sp,8
  812380:	f800283a 	ret

00812384 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812384:	defffa04 	addi	sp,sp,-24
  812388:	dfc00515 	stw	ra,20(sp)
  81238c:	df000415 	stw	fp,16(sp)
  812390:	df000404 	addi	fp,sp,16
  812394:	e13ffe15 	stw	r4,-8(fp)
  812398:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  81239c:	e0bffe17 	ldw	r2,-8(fp)
  8123a0:	10000326 	beq	r2,zero,8123b0 <alt_dev_llist_insert+0x2c>
  8123a4:	e0bffe17 	ldw	r2,-8(fp)
  8123a8:	10800217 	ldw	r2,8(r2)
  8123ac:	1000061e 	bne	r2,zero,8123c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8123b0:	08123480 	call	812348 <alt_get_errno>
  8123b4:	1007883a 	mov	r3,r2
  8123b8:	00800584 	movi	r2,22
  8123bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8123c0:	00bffa84 	movi	r2,-22
  8123c4:	00001306 	br	812414 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8123c8:	e0bffe17 	ldw	r2,-8(fp)
  8123cc:	e0ffff17 	ldw	r3,-4(fp)
  8123d0:	e0fffc15 	stw	r3,-16(fp)
  8123d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8123d8:	e0bffd17 	ldw	r2,-12(fp)
  8123dc:	e0fffc17 	ldw	r3,-16(fp)
  8123e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8123e4:	e0bffc17 	ldw	r2,-16(fp)
  8123e8:	10c00017 	ldw	r3,0(r2)
  8123ec:	e0bffd17 	ldw	r2,-12(fp)
  8123f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8123f4:	e0bffc17 	ldw	r2,-16(fp)
  8123f8:	10800017 	ldw	r2,0(r2)
  8123fc:	e0fffd17 	ldw	r3,-12(fp)
  812400:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812404:	e0bffc17 	ldw	r2,-16(fp)
  812408:	e0fffd17 	ldw	r3,-12(fp)
  81240c:	10c00015 	stw	r3,0(r2)

  return 0;  
  812410:	0005883a 	mov	r2,zero
}
  812414:	e037883a 	mov	sp,fp
  812418:	dfc00117 	ldw	ra,4(sp)
  81241c:	df000017 	ldw	fp,0(sp)
  812420:	dec00204 	addi	sp,sp,8
  812424:	f800283a 	ret

00812428 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812428:	defffd04 	addi	sp,sp,-12
  81242c:	dfc00215 	stw	ra,8(sp)
  812430:	df000115 	stw	fp,4(sp)
  812434:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812438:	00802074 	movhi	r2,129
  81243c:	108cfd04 	addi	r2,r2,13300
  812440:	e0bfff15 	stw	r2,-4(fp)
  812444:	00000606 	br	812460 <_do_ctors+0x38>
        (*ctor) (); 
  812448:	e0bfff17 	ldw	r2,-4(fp)
  81244c:	10800017 	ldw	r2,0(r2)
  812450:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812454:	e0bfff17 	ldw	r2,-4(fp)
  812458:	10bfff04 	addi	r2,r2,-4
  81245c:	e0bfff15 	stw	r2,-4(fp)
  812460:	e0ffff17 	ldw	r3,-4(fp)
  812464:	00802074 	movhi	r2,129
  812468:	108cfe04 	addi	r2,r2,13304
  81246c:	18bff62e 	bgeu	r3,r2,812448 <__alt_mem_onchip_mem+0xff792448>
        (*ctor) (); 
}
  812470:	0001883a 	nop
  812474:	e037883a 	mov	sp,fp
  812478:	dfc00117 	ldw	ra,4(sp)
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00204 	addi	sp,sp,8
  812484:	f800283a 	ret

00812488 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812488:	defffd04 	addi	sp,sp,-12
  81248c:	dfc00215 	stw	ra,8(sp)
  812490:	df000115 	stw	fp,4(sp)
  812494:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812498:	00802074 	movhi	r2,129
  81249c:	108cfd04 	addi	r2,r2,13300
  8124a0:	e0bfff15 	stw	r2,-4(fp)
  8124a4:	00000606 	br	8124c0 <_do_dtors+0x38>
        (*dtor) (); 
  8124a8:	e0bfff17 	ldw	r2,-4(fp)
  8124ac:	10800017 	ldw	r2,0(r2)
  8124b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8124b4:	e0bfff17 	ldw	r2,-4(fp)
  8124b8:	10bfff04 	addi	r2,r2,-4
  8124bc:	e0bfff15 	stw	r2,-4(fp)
  8124c0:	e0ffff17 	ldw	r3,-4(fp)
  8124c4:	00802074 	movhi	r2,129
  8124c8:	108cfe04 	addi	r2,r2,13304
  8124cc:	18bff62e 	bgeu	r3,r2,8124a8 <__alt_mem_onchip_mem+0xff7924a8>
        (*dtor) (); 
}
  8124d0:	0001883a 	nop
  8124d4:	e037883a 	mov	sp,fp
  8124d8:	dfc00117 	ldw	ra,4(sp)
  8124dc:	df000017 	ldw	fp,0(sp)
  8124e0:	dec00204 	addi	sp,sp,8
  8124e4:	f800283a 	ret

008124e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8124e8:	defffe04 	addi	sp,sp,-8
  8124ec:	dfc00115 	stw	ra,4(sp)
  8124f0:	df000015 	stw	fp,0(sp)
  8124f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8124f8:	01440004 	movi	r5,4096
  8124fc:	0009883a 	mov	r4,zero
  812500:	0812f380 	call	812f38 <alt_icache_flush>
#endif
}
  812504:	0001883a 	nop
  812508:	e037883a 	mov	sp,fp
  81250c:	dfc00117 	ldw	ra,4(sp)
  812510:	df000017 	ldw	fp,0(sp)
  812514:	dec00204 	addi	sp,sp,8
  812518:	f800283a 	ret

0081251c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81251c:	defff904 	addi	sp,sp,-28
  812520:	dfc00615 	stw	ra,24(sp)
  812524:	df000515 	stw	fp,20(sp)
  812528:	df000504 	addi	fp,sp,20
  81252c:	e13ffc15 	stw	r4,-16(fp)
  812530:	e17ffd15 	stw	r5,-12(fp)
  812534:	e1bffe15 	stw	r6,-8(fp)
  812538:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81253c:	e0800217 	ldw	r2,8(fp)
  812540:	d8800015 	stw	r2,0(sp)
  812544:	e1ffff17 	ldw	r7,-4(fp)
  812548:	e1bffe17 	ldw	r6,-8(fp)
  81254c:	e17ffd17 	ldw	r5,-12(fp)
  812550:	e13ffc17 	ldw	r4,-16(fp)
  812554:	08126cc0 	call	8126cc <alt_iic_isr_register>
}  
  812558:	e037883a 	mov	sp,fp
  81255c:	dfc00117 	ldw	ra,4(sp)
  812560:	df000017 	ldw	fp,0(sp)
  812564:	dec00204 	addi	sp,sp,8
  812568:	f800283a 	ret

0081256c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81256c:	defff904 	addi	sp,sp,-28
  812570:	df000615 	stw	fp,24(sp)
  812574:	df000604 	addi	fp,sp,24
  812578:	e13ffe15 	stw	r4,-8(fp)
  81257c:	e17fff15 	stw	r5,-4(fp)
  812580:	e0bfff17 	ldw	r2,-4(fp)
  812584:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812588:	0005303a 	rdctl	r2,status
  81258c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812590:	e0fffb17 	ldw	r3,-20(fp)
  812594:	00bfff84 	movi	r2,-2
  812598:	1884703a 	and	r2,r3,r2
  81259c:	1001703a 	wrctl	status,r2
  
  return context;
  8125a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8125a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8125a8:	00c00044 	movi	r3,1
  8125ac:	e0bffa17 	ldw	r2,-24(fp)
  8125b0:	1884983a 	sll	r2,r3,r2
  8125b4:	1007883a 	mov	r3,r2
  8125b8:	d0a7a817 	ldw	r2,-24928(gp)
  8125bc:	1884b03a 	or	r2,r3,r2
  8125c0:	d0a7a815 	stw	r2,-24928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8125c4:	d0a7a817 	ldw	r2,-24928(gp)
  8125c8:	100170fa 	wrctl	ienable,r2
  8125cc:	e0bffc17 	ldw	r2,-16(fp)
  8125d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125d4:	e0bffd17 	ldw	r2,-12(fp)
  8125d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8125dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8125e0:	0001883a 	nop
}
  8125e4:	e037883a 	mov	sp,fp
  8125e8:	df000017 	ldw	fp,0(sp)
  8125ec:	dec00104 	addi	sp,sp,4
  8125f0:	f800283a 	ret

008125f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  8125f4:	defff904 	addi	sp,sp,-28
  8125f8:	df000615 	stw	fp,24(sp)
  8125fc:	df000604 	addi	fp,sp,24
  812600:	e13ffe15 	stw	r4,-8(fp)
  812604:	e17fff15 	stw	r5,-4(fp)
  812608:	e0bfff17 	ldw	r2,-4(fp)
  81260c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812610:	0005303a 	rdctl	r2,status
  812614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812618:	e0fffb17 	ldw	r3,-20(fp)
  81261c:	00bfff84 	movi	r2,-2
  812620:	1884703a 	and	r2,r3,r2
  812624:	1001703a 	wrctl	status,r2
  
  return context;
  812628:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81262c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  812630:	00c00044 	movi	r3,1
  812634:	e0bffa17 	ldw	r2,-24(fp)
  812638:	1884983a 	sll	r2,r3,r2
  81263c:	0084303a 	nor	r2,zero,r2
  812640:	1007883a 	mov	r3,r2
  812644:	d0a7a817 	ldw	r2,-24928(gp)
  812648:	1884703a 	and	r2,r3,r2
  81264c:	d0a7a815 	stw	r2,-24928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812650:	d0a7a817 	ldw	r2,-24928(gp)
  812654:	100170fa 	wrctl	ienable,r2
  812658:	e0bffc17 	ldw	r2,-16(fp)
  81265c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812660:	e0bffd17 	ldw	r2,-12(fp)
  812664:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812668:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  81266c:	0001883a 	nop
}
  812670:	e037883a 	mov	sp,fp
  812674:	df000017 	ldw	fp,0(sp)
  812678:	dec00104 	addi	sp,sp,4
  81267c:	f800283a 	ret

00812680 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  812680:	defffc04 	addi	sp,sp,-16
  812684:	df000315 	stw	fp,12(sp)
  812688:	df000304 	addi	fp,sp,12
  81268c:	e13ffe15 	stw	r4,-8(fp)
  812690:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812694:	000530fa 	rdctl	r2,ienable
  812698:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  81269c:	00c00044 	movi	r3,1
  8126a0:	e0bfff17 	ldw	r2,-4(fp)
  8126a4:	1884983a 	sll	r2,r3,r2
  8126a8:	1007883a 	mov	r3,r2
  8126ac:	e0bffd17 	ldw	r2,-12(fp)
  8126b0:	1884703a 	and	r2,r3,r2
  8126b4:	1004c03a 	cmpne	r2,r2,zero
  8126b8:	10803fcc 	andi	r2,r2,255
}
  8126bc:	e037883a 	mov	sp,fp
  8126c0:	df000017 	ldw	fp,0(sp)
  8126c4:	dec00104 	addi	sp,sp,4
  8126c8:	f800283a 	ret

008126cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8126cc:	defff504 	addi	sp,sp,-44
  8126d0:	dfc00a15 	stw	ra,40(sp)
  8126d4:	df000915 	stw	fp,36(sp)
  8126d8:	df000904 	addi	fp,sp,36
  8126dc:	e13ffc15 	stw	r4,-16(fp)
  8126e0:	e17ffd15 	stw	r5,-12(fp)
  8126e4:	e1bffe15 	stw	r6,-8(fp)
  8126e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8126ec:	00bffa84 	movi	r2,-22
  8126f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  8126f4:	e0bffd17 	ldw	r2,-12(fp)
  8126f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  8126fc:	e0bff817 	ldw	r2,-32(fp)
  812700:	10800808 	cmpgei	r2,r2,32
  812704:	1000271e 	bne	r2,zero,8127a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812708:	0005303a 	rdctl	r2,status
  81270c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812710:	e0fffb17 	ldw	r3,-20(fp)
  812714:	00bfff84 	movi	r2,-2
  812718:	1884703a 	and	r2,r3,r2
  81271c:	1001703a 	wrctl	status,r2
  
  return context;
  812720:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812724:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812728:	00802074 	movhi	r2,129
  81272c:	109d8104 	addi	r2,r2,30212
  812730:	e0fff817 	ldw	r3,-32(fp)
  812734:	180690fa 	slli	r3,r3,3
  812738:	10c5883a 	add	r2,r2,r3
  81273c:	e0fffe17 	ldw	r3,-8(fp)
  812740:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812744:	00802074 	movhi	r2,129
  812748:	109d8104 	addi	r2,r2,30212
  81274c:	e0fff817 	ldw	r3,-32(fp)
  812750:	180690fa 	slli	r3,r3,3
  812754:	10c5883a 	add	r2,r2,r3
  812758:	10800104 	addi	r2,r2,4
  81275c:	e0ffff17 	ldw	r3,-4(fp)
  812760:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812764:	e0bffe17 	ldw	r2,-8(fp)
  812768:	10000526 	beq	r2,zero,812780 <alt_iic_isr_register+0xb4>
  81276c:	e0bff817 	ldw	r2,-32(fp)
  812770:	100b883a 	mov	r5,r2
  812774:	e13ffc17 	ldw	r4,-16(fp)
  812778:	081256c0 	call	81256c <alt_ic_irq_enable>
  81277c:	00000406 	br	812790 <alt_iic_isr_register+0xc4>
  812780:	e0bff817 	ldw	r2,-32(fp)
  812784:	100b883a 	mov	r5,r2
  812788:	e13ffc17 	ldw	r4,-16(fp)
  81278c:	08125f40 	call	8125f4 <alt_ic_irq_disable>
  812790:	e0bff715 	stw	r2,-36(fp)
  812794:	e0bffa17 	ldw	r2,-24(fp)
  812798:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81279c:	e0bff917 	ldw	r2,-28(fp)
  8127a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8127a4:	e0bff717 	ldw	r2,-36(fp)
}
  8127a8:	e037883a 	mov	sp,fp
  8127ac:	dfc00117 	ldw	ra,4(sp)
  8127b0:	df000017 	ldw	fp,0(sp)
  8127b4:	dec00204 	addi	sp,sp,8
  8127b8:	f800283a 	ret

008127bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8127bc:	defff904 	addi	sp,sp,-28
  8127c0:	dfc00615 	stw	ra,24(sp)
  8127c4:	df000515 	stw	fp,20(sp)
  8127c8:	df000504 	addi	fp,sp,20
  8127cc:	e13ffc15 	stw	r4,-16(fp)
  8127d0:	e17ffd15 	stw	r5,-12(fp)
  8127d4:	e1bffe15 	stw	r6,-8(fp)
  8127d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8127dc:	e1bfff17 	ldw	r6,-4(fp)
  8127e0:	e17ffe17 	ldw	r5,-8(fp)
  8127e4:	e13ffd17 	ldw	r4,-12(fp)
  8127e8:	08129fc0 	call	8129fc <open>
  8127ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8127f0:	e0bffb17 	ldw	r2,-20(fp)
  8127f4:	10001c16 	blt	r2,zero,812868 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8127f8:	00802074 	movhi	r2,129
  8127fc:	1090ac04 	addi	r2,r2,17072
  812800:	e0fffb17 	ldw	r3,-20(fp)
  812804:	18c00324 	muli	r3,r3,12
  812808:	10c5883a 	add	r2,r2,r3
  81280c:	10c00017 	ldw	r3,0(r2)
  812810:	e0bffc17 	ldw	r2,-16(fp)
  812814:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812818:	00802074 	movhi	r2,129
  81281c:	1090ac04 	addi	r2,r2,17072
  812820:	e0fffb17 	ldw	r3,-20(fp)
  812824:	18c00324 	muli	r3,r3,12
  812828:	10c5883a 	add	r2,r2,r3
  81282c:	10800104 	addi	r2,r2,4
  812830:	10c00017 	ldw	r3,0(r2)
  812834:	e0bffc17 	ldw	r2,-16(fp)
  812838:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81283c:	00802074 	movhi	r2,129
  812840:	1090ac04 	addi	r2,r2,17072
  812844:	e0fffb17 	ldw	r3,-20(fp)
  812848:	18c00324 	muli	r3,r3,12
  81284c:	10c5883a 	add	r2,r2,r3
  812850:	10800204 	addi	r2,r2,8
  812854:	10c00017 	ldw	r3,0(r2)
  812858:	e0bffc17 	ldw	r2,-16(fp)
  81285c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812860:	e13ffb17 	ldw	r4,-20(fp)
  812864:	080fafc0 	call	80fafc <alt_release_fd>
  }
} 
  812868:	0001883a 	nop
  81286c:	e037883a 	mov	sp,fp
  812870:	dfc00117 	ldw	ra,4(sp)
  812874:	df000017 	ldw	fp,0(sp)
  812878:	dec00204 	addi	sp,sp,8
  81287c:	f800283a 	ret

00812880 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  812880:	defffb04 	addi	sp,sp,-20
  812884:	dfc00415 	stw	ra,16(sp)
  812888:	df000315 	stw	fp,12(sp)
  81288c:	df000304 	addi	fp,sp,12
  812890:	e13ffd15 	stw	r4,-12(fp)
  812894:	e17ffe15 	stw	r5,-8(fp)
  812898:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81289c:	01c07fc4 	movi	r7,511
  8128a0:	01800044 	movi	r6,1
  8128a4:	e17ffd17 	ldw	r5,-12(fp)
  8128a8:	01002074 	movhi	r4,129
  8128ac:	2110af04 	addi	r4,r4,17084
  8128b0:	08127bc0 	call	8127bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8128b4:	01c07fc4 	movi	r7,511
  8128b8:	000d883a 	mov	r6,zero
  8128bc:	e17ffe17 	ldw	r5,-8(fp)
  8128c0:	01002074 	movhi	r4,129
  8128c4:	2110ac04 	addi	r4,r4,17072
  8128c8:	08127bc0 	call	8127bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8128cc:	01c07fc4 	movi	r7,511
  8128d0:	01800044 	movi	r6,1
  8128d4:	e17fff17 	ldw	r5,-4(fp)
  8128d8:	01002074 	movhi	r4,129
  8128dc:	2110b204 	addi	r4,r4,17096
  8128e0:	08127bc0 	call	8127bc <alt_open_fd>
}  
  8128e4:	0001883a 	nop
  8128e8:	e037883a 	mov	sp,fp
  8128ec:	dfc00117 	ldw	ra,4(sp)
  8128f0:	df000017 	ldw	fp,0(sp)
  8128f4:	dec00204 	addi	sp,sp,8
  8128f8:	f800283a 	ret

008128fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8128fc:	defffe04 	addi	sp,sp,-8
  812900:	dfc00115 	stw	ra,4(sp)
  812904:	df000015 	stw	fp,0(sp)
  812908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81290c:	d0a00b17 	ldw	r2,-32724(gp)
  812910:	10000326 	beq	r2,zero,812920 <alt_get_errno+0x24>
  812914:	d0a00b17 	ldw	r2,-32724(gp)
  812918:	103ee83a 	callr	r2
  81291c:	00000106 	br	812924 <alt_get_errno+0x28>
  812920:	d0a7a204 	addi	r2,gp,-24952
}
  812924:	e037883a 	mov	sp,fp
  812928:	dfc00117 	ldw	ra,4(sp)
  81292c:	df000017 	ldw	fp,0(sp)
  812930:	dec00204 	addi	sp,sp,8
  812934:	f800283a 	ret

00812938 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812938:	defffd04 	addi	sp,sp,-12
  81293c:	df000215 	stw	fp,8(sp)
  812940:	df000204 	addi	fp,sp,8
  812944:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812948:	e0bfff17 	ldw	r2,-4(fp)
  81294c:	10800217 	ldw	r2,8(r2)
  812950:	10d00034 	orhi	r3,r2,16384
  812954:	e0bfff17 	ldw	r2,-4(fp)
  812958:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81295c:	e03ffe15 	stw	zero,-8(fp)
  812960:	00001d06 	br	8129d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  812964:	00802074 	movhi	r2,129
  812968:	1090ac04 	addi	r2,r2,17072
  81296c:	e0fffe17 	ldw	r3,-8(fp)
  812970:	18c00324 	muli	r3,r3,12
  812974:	10c5883a 	add	r2,r2,r3
  812978:	10c00017 	ldw	r3,0(r2)
  81297c:	e0bfff17 	ldw	r2,-4(fp)
  812980:	10800017 	ldw	r2,0(r2)
  812984:	1880111e 	bne	r3,r2,8129cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  812988:	00802074 	movhi	r2,129
  81298c:	1090ac04 	addi	r2,r2,17072
  812990:	e0fffe17 	ldw	r3,-8(fp)
  812994:	18c00324 	muli	r3,r3,12
  812998:	10c5883a 	add	r2,r2,r3
  81299c:	10800204 	addi	r2,r2,8
  8129a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8129a4:	1000090e 	bge	r2,zero,8129cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8129a8:	e0bffe17 	ldw	r2,-8(fp)
  8129ac:	10c00324 	muli	r3,r2,12
  8129b0:	00802074 	movhi	r2,129
  8129b4:	1090ac04 	addi	r2,r2,17072
  8129b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8129bc:	e0bfff17 	ldw	r2,-4(fp)
  8129c0:	18800226 	beq	r3,r2,8129cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8129c4:	00bffcc4 	movi	r2,-13
  8129c8:	00000806 	br	8129ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8129cc:	e0bffe17 	ldw	r2,-8(fp)
  8129d0:	10800044 	addi	r2,r2,1
  8129d4:	e0bffe15 	stw	r2,-8(fp)
  8129d8:	d0a00a17 	ldw	r2,-32728(gp)
  8129dc:	1007883a 	mov	r3,r2
  8129e0:	e0bffe17 	ldw	r2,-8(fp)
  8129e4:	18bfdf2e 	bgeu	r3,r2,812964 <__alt_mem_onchip_mem+0xff792964>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8129e8:	0005883a 	mov	r2,zero
}
  8129ec:	e037883a 	mov	sp,fp
  8129f0:	df000017 	ldw	fp,0(sp)
  8129f4:	dec00104 	addi	sp,sp,4
  8129f8:	f800283a 	ret

008129fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8129fc:	defff604 	addi	sp,sp,-40
  812a00:	dfc00915 	stw	ra,36(sp)
  812a04:	df000815 	stw	fp,32(sp)
  812a08:	df000804 	addi	fp,sp,32
  812a0c:	e13ffd15 	stw	r4,-12(fp)
  812a10:	e17ffe15 	stw	r5,-8(fp)
  812a14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  812a18:	00bfffc4 	movi	r2,-1
  812a1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  812a20:	00bffb44 	movi	r2,-19
  812a24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  812a28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812a2c:	d1600804 	addi	r5,gp,-32736
  812a30:	e13ffd17 	ldw	r4,-12(fp)
  812a34:	0812cfc0 	call	812cfc <alt_find_dev>
  812a38:	e0bff815 	stw	r2,-32(fp)
  812a3c:	e0bff817 	ldw	r2,-32(fp)
  812a40:	1000051e 	bne	r2,zero,812a58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  812a44:	e13ffd17 	ldw	r4,-12(fp)
  812a48:	0812d8c0 	call	812d8c <alt_find_file>
  812a4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  812a50:	00800044 	movi	r2,1
  812a54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  812a58:	e0bff817 	ldw	r2,-32(fp)
  812a5c:	10002926 	beq	r2,zero,812b04 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  812a60:	e13ff817 	ldw	r4,-32(fp)
  812a64:	0812e940 	call	812e94 <alt_get_fd>
  812a68:	e0bff915 	stw	r2,-28(fp)
  812a6c:	e0bff917 	ldw	r2,-28(fp)
  812a70:	1000030e 	bge	r2,zero,812a80 <open+0x84>
    {
      status = index;
  812a74:	e0bff917 	ldw	r2,-28(fp)
  812a78:	e0bffa15 	stw	r2,-24(fp)
  812a7c:	00002306 	br	812b0c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  812a80:	e0bff917 	ldw	r2,-28(fp)
  812a84:	10c00324 	muli	r3,r2,12
  812a88:	00802074 	movhi	r2,129
  812a8c:	1090ac04 	addi	r2,r2,17072
  812a90:	1885883a 	add	r2,r3,r2
  812a94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  812a98:	e0fffe17 	ldw	r3,-8(fp)
  812a9c:	00900034 	movhi	r2,16384
  812aa0:	10bfffc4 	addi	r2,r2,-1
  812aa4:	1886703a 	and	r3,r3,r2
  812aa8:	e0bffc17 	ldw	r2,-16(fp)
  812aac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  812ab0:	e0bffb17 	ldw	r2,-20(fp)
  812ab4:	1000051e 	bne	r2,zero,812acc <open+0xd0>
  812ab8:	e13ffc17 	ldw	r4,-16(fp)
  812abc:	08129380 	call	812938 <alt_file_locked>
  812ac0:	e0bffa15 	stw	r2,-24(fp)
  812ac4:	e0bffa17 	ldw	r2,-24(fp)
  812ac8:	10001016 	blt	r2,zero,812b0c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  812acc:	e0bff817 	ldw	r2,-32(fp)
  812ad0:	10800317 	ldw	r2,12(r2)
  812ad4:	10000826 	beq	r2,zero,812af8 <open+0xfc>
  812ad8:	e0bff817 	ldw	r2,-32(fp)
  812adc:	10800317 	ldw	r2,12(r2)
  812ae0:	e1ffff17 	ldw	r7,-4(fp)
  812ae4:	e1bffe17 	ldw	r6,-8(fp)
  812ae8:	e17ffd17 	ldw	r5,-12(fp)
  812aec:	e13ffc17 	ldw	r4,-16(fp)
  812af0:	103ee83a 	callr	r2
  812af4:	00000106 	br	812afc <open+0x100>
  812af8:	0005883a 	mov	r2,zero
  812afc:	e0bffa15 	stw	r2,-24(fp)
  812b00:	00000206 	br	812b0c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812b04:	00bffb44 	movi	r2,-19
  812b08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  812b0c:	e0bffa17 	ldw	r2,-24(fp)
  812b10:	1000090e 	bge	r2,zero,812b38 <open+0x13c>
  {
    alt_release_fd (index);  
  812b14:	e13ff917 	ldw	r4,-28(fp)
  812b18:	080fafc0 	call	80fafc <alt_release_fd>
    ALT_ERRNO = -status;
  812b1c:	08128fc0 	call	8128fc <alt_get_errno>
  812b20:	1007883a 	mov	r3,r2
  812b24:	e0bffa17 	ldw	r2,-24(fp)
  812b28:	0085c83a 	sub	r2,zero,r2
  812b2c:	18800015 	stw	r2,0(r3)
    return -1;
  812b30:	00bfffc4 	movi	r2,-1
  812b34:	00000106 	br	812b3c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  812b38:	e0bff917 	ldw	r2,-28(fp)
}
  812b3c:	e037883a 	mov	sp,fp
  812b40:	dfc00117 	ldw	ra,4(sp)
  812b44:	df000017 	ldw	fp,0(sp)
  812b48:	dec00204 	addi	sp,sp,8
  812b4c:	f800283a 	ret

00812b50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812b50:	defffd04 	addi	sp,sp,-12
  812b54:	dfc00215 	stw	ra,8(sp)
  812b58:	df000115 	stw	fp,4(sp)
  812b5c:	df000104 	addi	fp,sp,4
  812b60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812b64:	e13fff17 	ldw	r4,-4(fp)
  812b68:	0812ba40 	call	812ba4 <alt_busy_sleep>
}
  812b6c:	e037883a 	mov	sp,fp
  812b70:	dfc00117 	ldw	ra,4(sp)
  812b74:	df000017 	ldw	fp,0(sp)
  812b78:	dec00204 	addi	sp,sp,8
  812b7c:	f800283a 	ret

00812b80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812b80:	deffff04 	addi	sp,sp,-4
  812b84:	df000015 	stw	fp,0(sp)
  812b88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812b8c:	000170fa 	wrctl	ienable,zero
}
  812b90:	0001883a 	nop
  812b94:	e037883a 	mov	sp,fp
  812b98:	df000017 	ldw	fp,0(sp)
  812b9c:	dec00104 	addi	sp,sp,4
  812ba0:	f800283a 	ret

00812ba4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812ba4:	defffa04 	addi	sp,sp,-24
  812ba8:	dfc00515 	stw	ra,20(sp)
  812bac:	df000415 	stw	fp,16(sp)
  812bb0:	df000404 	addi	fp,sp,16
  812bb4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812bb8:	008000c4 	movi	r2,3
  812bbc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812bc0:	e0fffd17 	ldw	r3,-12(fp)
  812bc4:	008003f4 	movhi	r2,15
  812bc8:	10909004 	addi	r2,r2,16960
  812bcc:	1885383a 	mul	r2,r3,r2
  812bd0:	100b883a 	mov	r5,r2
  812bd4:	0100bef4 	movhi	r4,763
  812bd8:	213c2004 	addi	r4,r4,-3968
  812bdc:	080cbb00 	call	80cbb0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812be0:	100b883a 	mov	r5,r2
  812be4:	01200034 	movhi	r4,32768
  812be8:	213fffc4 	addi	r4,r4,-1
  812bec:	080cbb00 	call	80cbb0 <__udivsi3>
  812bf0:	100b883a 	mov	r5,r2
  812bf4:	e13fff17 	ldw	r4,-4(fp)
  812bf8:	080cbb00 	call	80cbb0 <__udivsi3>
  812bfc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812c00:	e0bffe17 	ldw	r2,-8(fp)
  812c04:	10002a26 	beq	r2,zero,812cb0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  812c08:	e03ffc15 	stw	zero,-16(fp)
  812c0c:	00001706 	br	812c6c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  812c10:	00a00034 	movhi	r2,32768
  812c14:	10bfffc4 	addi	r2,r2,-1
  812c18:	10bfffc4 	addi	r2,r2,-1
  812c1c:	103ffe1e 	bne	r2,zero,812c18 <__alt_mem_onchip_mem+0xff792c18>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  812c20:	e0fffd17 	ldw	r3,-12(fp)
  812c24:	008003f4 	movhi	r2,15
  812c28:	10909004 	addi	r2,r2,16960
  812c2c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812c30:	100b883a 	mov	r5,r2
  812c34:	0100bef4 	movhi	r4,763
  812c38:	213c2004 	addi	r4,r4,-3968
  812c3c:	080cbb00 	call	80cbb0 <__udivsi3>
  812c40:	100b883a 	mov	r5,r2
  812c44:	01200034 	movhi	r4,32768
  812c48:	213fffc4 	addi	r4,r4,-1
  812c4c:	080cbb00 	call	80cbb0 <__udivsi3>
  812c50:	1007883a 	mov	r3,r2
  812c54:	e0bfff17 	ldw	r2,-4(fp)
  812c58:	10c5c83a 	sub	r2,r2,r3
  812c5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812c60:	e0bffc17 	ldw	r2,-16(fp)
  812c64:	10800044 	addi	r2,r2,1
  812c68:	e0bffc15 	stw	r2,-16(fp)
  812c6c:	e0fffc17 	ldw	r3,-16(fp)
  812c70:	e0bffe17 	ldw	r2,-8(fp)
  812c74:	18bfe616 	blt	r3,r2,812c10 <__alt_mem_onchip_mem+0xff792c10>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812c78:	e0fffd17 	ldw	r3,-12(fp)
  812c7c:	008003f4 	movhi	r2,15
  812c80:	10909004 	addi	r2,r2,16960
  812c84:	1885383a 	mul	r2,r3,r2
  812c88:	100b883a 	mov	r5,r2
  812c8c:	0100bef4 	movhi	r4,763
  812c90:	213c2004 	addi	r4,r4,-3968
  812c94:	080cbb00 	call	80cbb0 <__udivsi3>
  812c98:	1007883a 	mov	r3,r2
  812c9c:	e0bfff17 	ldw	r2,-4(fp)
  812ca0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812ca4:	10bfffc4 	addi	r2,r2,-1
  812ca8:	103ffe1e 	bne	r2,zero,812ca4 <__alt_mem_onchip_mem+0xff792ca4>
  812cac:	00000d06 	br	812ce4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812cb0:	e0fffd17 	ldw	r3,-12(fp)
  812cb4:	008003f4 	movhi	r2,15
  812cb8:	10909004 	addi	r2,r2,16960
  812cbc:	1885383a 	mul	r2,r3,r2
  812cc0:	100b883a 	mov	r5,r2
  812cc4:	0100bef4 	movhi	r4,763
  812cc8:	213c2004 	addi	r4,r4,-3968
  812ccc:	080cbb00 	call	80cbb0 <__udivsi3>
  812cd0:	1007883a 	mov	r3,r2
  812cd4:	e0bfff17 	ldw	r2,-4(fp)
  812cd8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812cdc:	10bfffc4 	addi	r2,r2,-1
  812ce0:	00bffe16 	blt	zero,r2,812cdc <__alt_mem_onchip_mem+0xff792cdc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812ce4:	0005883a 	mov	r2,zero
}
  812ce8:	e037883a 	mov	sp,fp
  812cec:	dfc00117 	ldw	ra,4(sp)
  812cf0:	df000017 	ldw	fp,0(sp)
  812cf4:	dec00204 	addi	sp,sp,8
  812cf8:	f800283a 	ret

00812cfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812cfc:	defffa04 	addi	sp,sp,-24
  812d00:	dfc00515 	stw	ra,20(sp)
  812d04:	df000415 	stw	fp,16(sp)
  812d08:	df000404 	addi	fp,sp,16
  812d0c:	e13ffe15 	stw	r4,-8(fp)
  812d10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812d14:	e0bfff17 	ldw	r2,-4(fp)
  812d18:	10800017 	ldw	r2,0(r2)
  812d1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812d20:	e13ffe17 	ldw	r4,-8(fp)
  812d24:	08094780 	call	809478 <strlen>
  812d28:	10800044 	addi	r2,r2,1
  812d2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d30:	00000d06 	br	812d68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812d34:	e0bffc17 	ldw	r2,-16(fp)
  812d38:	10800217 	ldw	r2,8(r2)
  812d3c:	e0fffd17 	ldw	r3,-12(fp)
  812d40:	180d883a 	mov	r6,r3
  812d44:	e17ffe17 	ldw	r5,-8(fp)
  812d48:	1009883a 	mov	r4,r2
  812d4c:	08130b00 	call	8130b0 <memcmp>
  812d50:	1000021e 	bne	r2,zero,812d5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812d54:	e0bffc17 	ldw	r2,-16(fp)
  812d58:	00000706 	br	812d78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812d5c:	e0bffc17 	ldw	r2,-16(fp)
  812d60:	10800017 	ldw	r2,0(r2)
  812d64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812d68:	e0fffc17 	ldw	r3,-16(fp)
  812d6c:	e0bfff17 	ldw	r2,-4(fp)
  812d70:	18bff01e 	bne	r3,r2,812d34 <__alt_mem_onchip_mem+0xff792d34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812d74:	0005883a 	mov	r2,zero
}
  812d78:	e037883a 	mov	sp,fp
  812d7c:	dfc00117 	ldw	ra,4(sp)
  812d80:	df000017 	ldw	fp,0(sp)
  812d84:	dec00204 	addi	sp,sp,8
  812d88:	f800283a 	ret

00812d8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812d8c:	defffb04 	addi	sp,sp,-20
  812d90:	dfc00415 	stw	ra,16(sp)
  812d94:	df000315 	stw	fp,12(sp)
  812d98:	df000304 	addi	fp,sp,12
  812d9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812da0:	d0a00617 	ldw	r2,-32744(gp)
  812da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812da8:	00003106 	br	812e70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812dac:	e0bffd17 	ldw	r2,-12(fp)
  812db0:	10800217 	ldw	r2,8(r2)
  812db4:	1009883a 	mov	r4,r2
  812db8:	08094780 	call	809478 <strlen>
  812dbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812dc0:	e0bffd17 	ldw	r2,-12(fp)
  812dc4:	10c00217 	ldw	r3,8(r2)
  812dc8:	e0bffe17 	ldw	r2,-8(fp)
  812dcc:	10bfffc4 	addi	r2,r2,-1
  812dd0:	1885883a 	add	r2,r3,r2
  812dd4:	10800003 	ldbu	r2,0(r2)
  812dd8:	10803fcc 	andi	r2,r2,255
  812ddc:	1080201c 	xori	r2,r2,128
  812de0:	10bfe004 	addi	r2,r2,-128
  812de4:	10800bd8 	cmpnei	r2,r2,47
  812de8:	1000031e 	bne	r2,zero,812df8 <alt_find_file+0x6c>
    {
      len -= 1;
  812dec:	e0bffe17 	ldw	r2,-8(fp)
  812df0:	10bfffc4 	addi	r2,r2,-1
  812df4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812df8:	e0bffe17 	ldw	r2,-8(fp)
  812dfc:	e0ffff17 	ldw	r3,-4(fp)
  812e00:	1885883a 	add	r2,r3,r2
  812e04:	10800003 	ldbu	r2,0(r2)
  812e08:	10803fcc 	andi	r2,r2,255
  812e0c:	1080201c 	xori	r2,r2,128
  812e10:	10bfe004 	addi	r2,r2,-128
  812e14:	10800be0 	cmpeqi	r2,r2,47
  812e18:	1000081e 	bne	r2,zero,812e3c <alt_find_file+0xb0>
  812e1c:	e0bffe17 	ldw	r2,-8(fp)
  812e20:	e0ffff17 	ldw	r3,-4(fp)
  812e24:	1885883a 	add	r2,r3,r2
  812e28:	10800003 	ldbu	r2,0(r2)
  812e2c:	10803fcc 	andi	r2,r2,255
  812e30:	1080201c 	xori	r2,r2,128
  812e34:	10bfe004 	addi	r2,r2,-128
  812e38:	10000a1e 	bne	r2,zero,812e64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812e3c:	e0bffd17 	ldw	r2,-12(fp)
  812e40:	10800217 	ldw	r2,8(r2)
  812e44:	e0fffe17 	ldw	r3,-8(fp)
  812e48:	180d883a 	mov	r6,r3
  812e4c:	e17fff17 	ldw	r5,-4(fp)
  812e50:	1009883a 	mov	r4,r2
  812e54:	08130b00 	call	8130b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812e58:	1000021e 	bne	r2,zero,812e64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  812e5c:	e0bffd17 	ldw	r2,-12(fp)
  812e60:	00000706 	br	812e80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  812e64:	e0bffd17 	ldw	r2,-12(fp)
  812e68:	10800017 	ldw	r2,0(r2)
  812e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812e70:	e0fffd17 	ldw	r3,-12(fp)
  812e74:	d0a00604 	addi	r2,gp,-32744
  812e78:	18bfcc1e 	bne	r3,r2,812dac <__alt_mem_onchip_mem+0xff792dac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  812e7c:	0005883a 	mov	r2,zero
}
  812e80:	e037883a 	mov	sp,fp
  812e84:	dfc00117 	ldw	ra,4(sp)
  812e88:	df000017 	ldw	fp,0(sp)
  812e8c:	dec00204 	addi	sp,sp,8
  812e90:	f800283a 	ret

00812e94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  812e94:	defffc04 	addi	sp,sp,-16
  812e98:	df000315 	stw	fp,12(sp)
  812e9c:	df000304 	addi	fp,sp,12
  812ea0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  812ea4:	00bffa04 	movi	r2,-24
  812ea8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812eac:	e03ffd15 	stw	zero,-12(fp)
  812eb0:	00001906 	br	812f18 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  812eb4:	00802074 	movhi	r2,129
  812eb8:	1090ac04 	addi	r2,r2,17072
  812ebc:	e0fffd17 	ldw	r3,-12(fp)
  812ec0:	18c00324 	muli	r3,r3,12
  812ec4:	10c5883a 	add	r2,r2,r3
  812ec8:	10800017 	ldw	r2,0(r2)
  812ecc:	10000f1e 	bne	r2,zero,812f0c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  812ed0:	00802074 	movhi	r2,129
  812ed4:	1090ac04 	addi	r2,r2,17072
  812ed8:	e0fffd17 	ldw	r3,-12(fp)
  812edc:	18c00324 	muli	r3,r3,12
  812ee0:	10c5883a 	add	r2,r2,r3
  812ee4:	e0ffff17 	ldw	r3,-4(fp)
  812ee8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  812eec:	d0e00a17 	ldw	r3,-32728(gp)
  812ef0:	e0bffd17 	ldw	r2,-12(fp)
  812ef4:	1880020e 	bge	r3,r2,812f00 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  812ef8:	e0bffd17 	ldw	r2,-12(fp)
  812efc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  812f00:	e0bffd17 	ldw	r2,-12(fp)
  812f04:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  812f08:	00000606 	br	812f24 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812f0c:	e0bffd17 	ldw	r2,-12(fp)
  812f10:	10800044 	addi	r2,r2,1
  812f14:	e0bffd15 	stw	r2,-12(fp)
  812f18:	e0bffd17 	ldw	r2,-12(fp)
  812f1c:	10800810 	cmplti	r2,r2,32
  812f20:	103fe41e 	bne	r2,zero,812eb4 <__alt_mem_onchip_mem+0xff792eb4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  812f24:	e0bffe17 	ldw	r2,-8(fp)
}
  812f28:	e037883a 	mov	sp,fp
  812f2c:	df000017 	ldw	fp,0(sp)
  812f30:	dec00104 	addi	sp,sp,4
  812f34:	f800283a 	ret

00812f38 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  812f38:	defffb04 	addi	sp,sp,-20
  812f3c:	df000415 	stw	fp,16(sp)
  812f40:	df000404 	addi	fp,sp,16
  812f44:	e13ffe15 	stw	r4,-8(fp)
  812f48:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  812f4c:	e0bfff17 	ldw	r2,-4(fp)
  812f50:	10840070 	cmpltui	r2,r2,4097
  812f54:	1000021e 	bne	r2,zero,812f60 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  812f58:	00840004 	movi	r2,4096
  812f5c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  812f60:	e0fffe17 	ldw	r3,-8(fp)
  812f64:	e0bfff17 	ldw	r2,-4(fp)
  812f68:	1885883a 	add	r2,r3,r2
  812f6c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812f70:	e0bffe17 	ldw	r2,-8(fp)
  812f74:	e0bffc15 	stw	r2,-16(fp)
  812f78:	00000506 	br	812f90 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812f7c:	e0bffc17 	ldw	r2,-16(fp)
  812f80:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812f84:	e0bffc17 	ldw	r2,-16(fp)
  812f88:	10800804 	addi	r2,r2,32
  812f8c:	e0bffc15 	stw	r2,-16(fp)
  812f90:	e0fffc17 	ldw	r3,-16(fp)
  812f94:	e0bffd17 	ldw	r2,-12(fp)
  812f98:	18bff836 	bltu	r3,r2,812f7c <__alt_mem_onchip_mem+0xff792f7c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812f9c:	e0bffe17 	ldw	r2,-8(fp)
  812fa0:	108007cc 	andi	r2,r2,31
  812fa4:	10000226 	beq	r2,zero,812fb0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812fa8:	e0bffc17 	ldw	r2,-16(fp)
  812fac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812fb0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812fb4:	0001883a 	nop
  812fb8:	e037883a 	mov	sp,fp
  812fbc:	df000017 	ldw	fp,0(sp)
  812fc0:	dec00104 	addi	sp,sp,4
  812fc4:	f800283a 	ret

00812fc8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812fc8:	defffe04 	addi	sp,sp,-8
  812fcc:	df000115 	stw	fp,4(sp)
  812fd0:	df000104 	addi	fp,sp,4
  812fd4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812fd8:	e0bfff17 	ldw	r2,-4(fp)
  812fdc:	10bffe84 	addi	r2,r2,-6
  812fe0:	10c00428 	cmpgeui	r3,r2,16
  812fe4:	18001a1e 	bne	r3,zero,813050 <alt_exception_cause_generated_bad_addr+0x88>
  812fe8:	100690ba 	slli	r3,r2,2
  812fec:	00802074 	movhi	r2,129
  812ff0:	108c0004 	addi	r2,r2,12288
  812ff4:	1885883a 	add	r2,r3,r2
  812ff8:	10800017 	ldw	r2,0(r2)
  812ffc:	1000683a 	jmp	r2
  813000:	00813040 	call	81304 <__reset-0x77ecfc>
  813004:	00813040 	call	81304 <__reset-0x77ecfc>
  813008:	00813050 	cmplti	r2,zero,1217
  81300c:	00813050 	cmplti	r2,zero,1217
  813010:	00813050 	cmplti	r2,zero,1217
  813014:	00813040 	call	81304 <__reset-0x77ecfc>
  813018:	00813048 	cmpgei	r2,zero,1217
  81301c:	00813050 	cmplti	r2,zero,1217
  813020:	00813040 	call	81304 <__reset-0x77ecfc>
  813024:	00813040 	call	81304 <__reset-0x77ecfc>
  813028:	00813050 	cmplti	r2,zero,1217
  81302c:	00813040 	call	81304 <__reset-0x77ecfc>
  813030:	00813048 	cmpgei	r2,zero,1217
  813034:	00813050 	cmplti	r2,zero,1217
  813038:	00813050 	cmplti	r2,zero,1217
  81303c:	00813040 	call	81304 <__reset-0x77ecfc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  813040:	00800044 	movi	r2,1
  813044:	00000306 	br	813054 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  813048:	0005883a 	mov	r2,zero
  81304c:	00000106 	br	813054 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  813050:	0005883a 	mov	r2,zero
  }
}
  813054:	e037883a 	mov	sp,fp
  813058:	df000017 	ldw	fp,0(sp)
  81305c:	dec00104 	addi	sp,sp,4
  813060:	f800283a 	ret

00813064 <atexit>:
  813064:	200b883a 	mov	r5,r4
  813068:	000f883a 	mov	r7,zero
  81306c:	000d883a 	mov	r6,zero
  813070:	0009883a 	mov	r4,zero
  813074:	081312c1 	jmpi	81312c <__register_exitproc>

00813078 <exit>:
  813078:	defffe04 	addi	sp,sp,-8
  81307c:	000b883a 	mov	r5,zero
  813080:	dc000015 	stw	r16,0(sp)
  813084:	dfc00115 	stw	ra,4(sp)
  813088:	2021883a 	mov	r16,r4
  81308c:	08132440 	call	813244 <__call_exitprocs>
  813090:	00802074 	movhi	r2,129
  813094:	10959d04 	addi	r2,r2,22132
  813098:	11000017 	ldw	r4,0(r2)
  81309c:	20800f17 	ldw	r2,60(r4)
  8130a0:	10000126 	beq	r2,zero,8130a8 <exit+0x30>
  8130a4:	103ee83a 	callr	r2
  8130a8:	8009883a 	mov	r4,r16
  8130ac:	08133c40 	call	8133c4 <_exit>

008130b0 <memcmp>:
  8130b0:	01c000c4 	movi	r7,3
  8130b4:	3980192e 	bgeu	r7,r6,81311c <memcmp+0x6c>
  8130b8:	2144b03a 	or	r2,r4,r5
  8130bc:	11c4703a 	and	r2,r2,r7
  8130c0:	10000f26 	beq	r2,zero,813100 <memcmp+0x50>
  8130c4:	20800003 	ldbu	r2,0(r4)
  8130c8:	28c00003 	ldbu	r3,0(r5)
  8130cc:	10c0151e 	bne	r2,r3,813124 <memcmp+0x74>
  8130d0:	31bfff84 	addi	r6,r6,-2
  8130d4:	01ffffc4 	movi	r7,-1
  8130d8:	00000406 	br	8130ec <memcmp+0x3c>
  8130dc:	20800003 	ldbu	r2,0(r4)
  8130e0:	28c00003 	ldbu	r3,0(r5)
  8130e4:	31bfffc4 	addi	r6,r6,-1
  8130e8:	10c00e1e 	bne	r2,r3,813124 <memcmp+0x74>
  8130ec:	21000044 	addi	r4,r4,1
  8130f0:	29400044 	addi	r5,r5,1
  8130f4:	31fff91e 	bne	r6,r7,8130dc <__alt_mem_onchip_mem+0xff7930dc>
  8130f8:	0005883a 	mov	r2,zero
  8130fc:	f800283a 	ret
  813100:	20c00017 	ldw	r3,0(r4)
  813104:	28800017 	ldw	r2,0(r5)
  813108:	18bfee1e 	bne	r3,r2,8130c4 <__alt_mem_onchip_mem+0xff7930c4>
  81310c:	31bfff04 	addi	r6,r6,-4
  813110:	21000104 	addi	r4,r4,4
  813114:	29400104 	addi	r5,r5,4
  813118:	39bff936 	bltu	r7,r6,813100 <__alt_mem_onchip_mem+0xff793100>
  81311c:	303fe91e 	bne	r6,zero,8130c4 <__alt_mem_onchip_mem+0xff7930c4>
  813120:	003ff506 	br	8130f8 <__alt_mem_onchip_mem+0xff7930f8>
  813124:	10c5c83a 	sub	r2,r2,r3
  813128:	f800283a 	ret

0081312c <__register_exitproc>:
  81312c:	defffa04 	addi	sp,sp,-24
  813130:	dc000315 	stw	r16,12(sp)
  813134:	04002074 	movhi	r16,129
  813138:	84159d04 	addi	r16,r16,22132
  81313c:	80c00017 	ldw	r3,0(r16)
  813140:	dc400415 	stw	r17,16(sp)
  813144:	dfc00515 	stw	ra,20(sp)
  813148:	18805217 	ldw	r2,328(r3)
  81314c:	2023883a 	mov	r17,r4
  813150:	10003726 	beq	r2,zero,813230 <__register_exitproc+0x104>
  813154:	10c00117 	ldw	r3,4(r2)
  813158:	010007c4 	movi	r4,31
  81315c:	20c00e16 	blt	r4,r3,813198 <__register_exitproc+0x6c>
  813160:	1a000044 	addi	r8,r3,1
  813164:	8800221e 	bne	r17,zero,8131f0 <__register_exitproc+0xc4>
  813168:	18c00084 	addi	r3,r3,2
  81316c:	18c7883a 	add	r3,r3,r3
  813170:	18c7883a 	add	r3,r3,r3
  813174:	12000115 	stw	r8,4(r2)
  813178:	10c7883a 	add	r3,r2,r3
  81317c:	19400015 	stw	r5,0(r3)
  813180:	0005883a 	mov	r2,zero
  813184:	dfc00517 	ldw	ra,20(sp)
  813188:	dc400417 	ldw	r17,16(sp)
  81318c:	dc000317 	ldw	r16,12(sp)
  813190:	dec00604 	addi	sp,sp,24
  813194:	f800283a 	ret
  813198:	00800034 	movhi	r2,0
  81319c:	10800004 	addi	r2,r2,0
  8131a0:	10002626 	beq	r2,zero,81323c <__register_exitproc+0x110>
  8131a4:	01006404 	movi	r4,400
  8131a8:	d9400015 	stw	r5,0(sp)
  8131ac:	d9800115 	stw	r6,4(sp)
  8131b0:	d9c00215 	stw	r7,8(sp)
  8131b4:	00000000 	call	0 <__reset-0x800000>
  8131b8:	d9400017 	ldw	r5,0(sp)
  8131bc:	d9800117 	ldw	r6,4(sp)
  8131c0:	d9c00217 	ldw	r7,8(sp)
  8131c4:	10001d26 	beq	r2,zero,81323c <__register_exitproc+0x110>
  8131c8:	81000017 	ldw	r4,0(r16)
  8131cc:	10000115 	stw	zero,4(r2)
  8131d0:	02000044 	movi	r8,1
  8131d4:	22405217 	ldw	r9,328(r4)
  8131d8:	0007883a 	mov	r3,zero
  8131dc:	12400015 	stw	r9,0(r2)
  8131e0:	20805215 	stw	r2,328(r4)
  8131e4:	10006215 	stw	zero,392(r2)
  8131e8:	10006315 	stw	zero,396(r2)
  8131ec:	883fde26 	beq	r17,zero,813168 <__alt_mem_onchip_mem+0xff793168>
  8131f0:	18c9883a 	add	r4,r3,r3
  8131f4:	2109883a 	add	r4,r4,r4
  8131f8:	1109883a 	add	r4,r2,r4
  8131fc:	21802215 	stw	r6,136(r4)
  813200:	01800044 	movi	r6,1
  813204:	12406217 	ldw	r9,392(r2)
  813208:	30cc983a 	sll	r6,r6,r3
  81320c:	4992b03a 	or	r9,r9,r6
  813210:	12406215 	stw	r9,392(r2)
  813214:	21c04215 	stw	r7,264(r4)
  813218:	01000084 	movi	r4,2
  81321c:	893fd21e 	bne	r17,r4,813168 <__alt_mem_onchip_mem+0xff793168>
  813220:	11006317 	ldw	r4,396(r2)
  813224:	218cb03a 	or	r6,r4,r6
  813228:	11806315 	stw	r6,396(r2)
  81322c:	003fce06 	br	813168 <__alt_mem_onchip_mem+0xff793168>
  813230:	18805304 	addi	r2,r3,332
  813234:	18805215 	stw	r2,328(r3)
  813238:	003fc606 	br	813154 <__alt_mem_onchip_mem+0xff793154>
  81323c:	00bfffc4 	movi	r2,-1
  813240:	003fd006 	br	813184 <__alt_mem_onchip_mem+0xff793184>

00813244 <__call_exitprocs>:
  813244:	defff504 	addi	sp,sp,-44
  813248:	df000915 	stw	fp,36(sp)
  81324c:	dd400615 	stw	r21,24(sp)
  813250:	dc800315 	stw	r18,12(sp)
  813254:	dfc00a15 	stw	ra,40(sp)
  813258:	ddc00815 	stw	r23,32(sp)
  81325c:	dd800715 	stw	r22,28(sp)
  813260:	dd000515 	stw	r20,20(sp)
  813264:	dcc00415 	stw	r19,16(sp)
  813268:	dc400215 	stw	r17,8(sp)
  81326c:	dc000115 	stw	r16,4(sp)
  813270:	d9000015 	stw	r4,0(sp)
  813274:	2839883a 	mov	fp,r5
  813278:	04800044 	movi	r18,1
  81327c:	057fffc4 	movi	r21,-1
  813280:	00802074 	movhi	r2,129
  813284:	10959d04 	addi	r2,r2,22132
  813288:	12000017 	ldw	r8,0(r2)
  81328c:	45005217 	ldw	r20,328(r8)
  813290:	44c05204 	addi	r19,r8,328
  813294:	a0001c26 	beq	r20,zero,813308 <__call_exitprocs+0xc4>
  813298:	a0800117 	ldw	r2,4(r20)
  81329c:	15ffffc4 	addi	r23,r2,-1
  8132a0:	b8000d16 	blt	r23,zero,8132d8 <__call_exitprocs+0x94>
  8132a4:	14000044 	addi	r16,r2,1
  8132a8:	8421883a 	add	r16,r16,r16
  8132ac:	8421883a 	add	r16,r16,r16
  8132b0:	84402004 	addi	r17,r16,128
  8132b4:	a463883a 	add	r17,r20,r17
  8132b8:	a421883a 	add	r16,r20,r16
  8132bc:	e0001e26 	beq	fp,zero,813338 <__call_exitprocs+0xf4>
  8132c0:	80804017 	ldw	r2,256(r16)
  8132c4:	e0801c26 	beq	fp,r2,813338 <__call_exitprocs+0xf4>
  8132c8:	bdffffc4 	addi	r23,r23,-1
  8132cc:	843fff04 	addi	r16,r16,-4
  8132d0:	8c7fff04 	addi	r17,r17,-4
  8132d4:	bd7ff91e 	bne	r23,r21,8132bc <__alt_mem_onchip_mem+0xff7932bc>
  8132d8:	00800034 	movhi	r2,0
  8132dc:	10800004 	addi	r2,r2,0
  8132e0:	10000926 	beq	r2,zero,813308 <__call_exitprocs+0xc4>
  8132e4:	a0800117 	ldw	r2,4(r20)
  8132e8:	1000301e 	bne	r2,zero,8133ac <__call_exitprocs+0x168>
  8132ec:	a0800017 	ldw	r2,0(r20)
  8132f0:	10003226 	beq	r2,zero,8133bc <__call_exitprocs+0x178>
  8132f4:	a009883a 	mov	r4,r20
  8132f8:	98800015 	stw	r2,0(r19)
  8132fc:	00000000 	call	0 <__reset-0x800000>
  813300:	9d000017 	ldw	r20,0(r19)
  813304:	a03fe41e 	bne	r20,zero,813298 <__alt_mem_onchip_mem+0xff793298>
  813308:	dfc00a17 	ldw	ra,40(sp)
  81330c:	df000917 	ldw	fp,36(sp)
  813310:	ddc00817 	ldw	r23,32(sp)
  813314:	dd800717 	ldw	r22,28(sp)
  813318:	dd400617 	ldw	r21,24(sp)
  81331c:	dd000517 	ldw	r20,20(sp)
  813320:	dcc00417 	ldw	r19,16(sp)
  813324:	dc800317 	ldw	r18,12(sp)
  813328:	dc400217 	ldw	r17,8(sp)
  81332c:	dc000117 	ldw	r16,4(sp)
  813330:	dec00b04 	addi	sp,sp,44
  813334:	f800283a 	ret
  813338:	a0800117 	ldw	r2,4(r20)
  81333c:	80c00017 	ldw	r3,0(r16)
  813340:	10bfffc4 	addi	r2,r2,-1
  813344:	15c01426 	beq	r2,r23,813398 <__call_exitprocs+0x154>
  813348:	80000015 	stw	zero,0(r16)
  81334c:	183fde26 	beq	r3,zero,8132c8 <__alt_mem_onchip_mem+0xff7932c8>
  813350:	95c8983a 	sll	r4,r18,r23
  813354:	a0806217 	ldw	r2,392(r20)
  813358:	a5800117 	ldw	r22,4(r20)
  81335c:	2084703a 	and	r2,r4,r2
  813360:	10000b26 	beq	r2,zero,813390 <__call_exitprocs+0x14c>
  813364:	a0806317 	ldw	r2,396(r20)
  813368:	2088703a 	and	r4,r4,r2
  81336c:	20000c1e 	bne	r4,zero,8133a0 <__call_exitprocs+0x15c>
  813370:	89400017 	ldw	r5,0(r17)
  813374:	d9000017 	ldw	r4,0(sp)
  813378:	183ee83a 	callr	r3
  81337c:	a0800117 	ldw	r2,4(r20)
  813380:	15bfbf1e 	bne	r2,r22,813280 <__alt_mem_onchip_mem+0xff793280>
  813384:	98800017 	ldw	r2,0(r19)
  813388:	153fcf26 	beq	r2,r20,8132c8 <__alt_mem_onchip_mem+0xff7932c8>
  81338c:	003fbc06 	br	813280 <__alt_mem_onchip_mem+0xff793280>
  813390:	183ee83a 	callr	r3
  813394:	003ff906 	br	81337c <__alt_mem_onchip_mem+0xff79337c>
  813398:	a5c00115 	stw	r23,4(r20)
  81339c:	003feb06 	br	81334c <__alt_mem_onchip_mem+0xff79334c>
  8133a0:	89000017 	ldw	r4,0(r17)
  8133a4:	183ee83a 	callr	r3
  8133a8:	003ff406 	br	81337c <__alt_mem_onchip_mem+0xff79337c>
  8133ac:	a0800017 	ldw	r2,0(r20)
  8133b0:	a027883a 	mov	r19,r20
  8133b4:	1029883a 	mov	r20,r2
  8133b8:	003fb606 	br	813294 <__alt_mem_onchip_mem+0xff793294>
  8133bc:	0005883a 	mov	r2,zero
  8133c0:	003ffb06 	br	8133b0 <__alt_mem_onchip_mem+0xff7933b0>

008133c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8133c4:	defffd04 	addi	sp,sp,-12
  8133c8:	df000215 	stw	fp,8(sp)
  8133cc:	df000204 	addi	fp,sp,8
  8133d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8133d4:	0001883a 	nop
  8133d8:	e0bfff17 	ldw	r2,-4(fp)
  8133dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8133e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8133e4:	10000226 	beq	r2,zero,8133f0 <_exit+0x2c>
    ALT_SIM_FAIL();
  8133e8:	002af070 	cmpltui	zero,zero,43969
  8133ec:	00000106 	br	8133f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8133f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8133f4:	003fff06 	br	8133f4 <__alt_mem_onchip_mem+0xff7933f4>
