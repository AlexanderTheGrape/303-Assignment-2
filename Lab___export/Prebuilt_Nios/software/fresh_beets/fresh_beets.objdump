
fresh_beets.elf:     file format elf32-littlenios2
fresh_beets.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000138f0 memsz 0x000138f0 flags r-x
    LOAD off    0x00014910 vaddr 0x00813910 paddr 0x008155e8 align 2**12
         filesz 0x00001cd8 memsz 0x00001cd8 flags rw-
    LOAD off    0x000172c0 vaddr 0x008172c0 paddr 0x008172c0 align 2**12
         filesz 0x00000000 memsz 0x00000338 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000130d0  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005fc  00813314  00813314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cd8  00813910  008155e8  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000338  008172c0  008172c0  000172c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008175f8  008175f8  000165e8  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000165e8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000165e8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc8  00000000  00000000  00016610  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025e42  00000000  00000000  000175d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000098cf  00000000  00000000  0003d41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ccf9  00000000  00000000  00046ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002610  00000000  00000000  000539e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004577  00000000  00000000  00055ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  0005a56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00071cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a8  00000000  00000000  00071d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007871d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00078720  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00078723  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00078724  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00078725  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00078729  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007872d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00078731  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007873a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00078743  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0007874c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  00078758  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006ef27  00000000  00000000  00078786  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813314 l    d  .rodata	00000000 .rodata
00813910 l    d  .rwdata	00000000 .rwdata
008172c0 l    d  .bss	00000000 .bss
008175f8 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../fresh_beets_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
008133c6 l     O .rodata	00000010 zeroes.4404
00804c24 l     F .text	000000bc __sbprintf
008133d6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00804e34 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806964 l     F .text	00000008 __fp_unlock
00806978 l     F .text	0000019c __sinit.part.1
00806b14 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00813910 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00813d54 l     O .rwdata	00000020 lc_ctype_charset
00813d34 l     O .rwdata	00000020 lc_message_charset
00813d74 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00813408 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080942c l     F .text	000000fc __sprint_r.part.0
0081353c l     O .rodata	00000010 blanks.4348
0081352c l     O .rodata	00000010 zeroes.4349
0080a9b8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080f31c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080f428 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080f454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f540 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080f620 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f70c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080f8e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008155d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080fcd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fe04 l     F .text	00000034 alt_dev_reg
0081435c l     O .rwdata	00001060 jtag_uart
008153bc l     O .rwdata	00000120 lcd
008154dc l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810130 l     F .text	0000020c altera_avalon_jtag_uart_irq
0081033c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008155dc l     O .rwdata	00000004 colstart
00810974 l     F .text	000000b8 lcd_write_command
00810a2c l     F .text	000000d8 lcd_write_data
00810b04 l     F .text	000000d0 lcd_clear_screen
00810bd4 l     F .text	000001ec lcd_repaint_screen
00810dc0 l     F .text	000000cc lcd_scroll_up
00810e8c l     F .text	000002ac lcd_handle_escape
00811610 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00811850 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00811b00 l     F .text	0000009c altera_avalon_uart_irq
00811b9c l     F .text	000000e4 altera_avalon_uart_rxirq
00811c80 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811e1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812034 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008126d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00812818 l     F .text	0000003c alt_get_errno
00812854 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081378f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008172f0 g     O .bss	00000001 _cg42
0081743c g     O .bss	00000004 alt_instruction_exception_handler
008172f1 g     O .bss	00000001 _Pacemaker1_local_AVI_start
008172f2 g     O .bss	00000001 g83
008172f3 g     O .bss	00000001 g40
00808f3c g     F .text	00000074 _mprec_log10
008172f4 g     O .bss	00000001 g87_e9
00809028 g     F .text	0000008c __any_on
0080b410 g     F .text	00000054 _isatty_r
00813414 g     O .rodata	00000028 __mprec_tinytens
008172f5 g     O .bss	00000001 g91
008172e4 g     O .bss	00000004 maskedButton1
0080f81c g     F .text	0000007c alt_main
008172f6 g     O .bss	00000001 APace
008174f8 g     O .bss	00000100 alt_irq
0080b464 g     F .text	00000060 _lseek_r
008172f7 g     O .bss	00000001 g4
008155e8 g       *ABS*	00000000 __flash_rwdata_start
008172f8 g     O .bss	00000001 g108
008172f9 g     O .bss	00000001 g19
008172fa g     O .bss	00000001 g111
0080dd1c g     F .text	00000088 .hidden __eqdf2
008175f8 g       *ABS*	00000000 __alt_heap_start
008029d4 g     F .text	0000003c printf
0080bd3c g     F .text	0000009c _wcrtomb_r
00800350 g     F .text	00000040 AEI_timer_ISR
00809254 g     F .text	0000005c __sseek
00806cb4 g     F .text	00000010 __sinit
0080bbe4 g     F .text	00000140 __swbuf_r
008172fb g     O .bss	00000001 g55
008172fc g     O .bss	00000001 _cg59
008172fd g     O .bss	00000001 g27
008072c0 g     F .text	0000007c _setlocale_r
00806b1c g     F .text	00000068 __sfmoreglue
0080f8bc g     F .text	00000024 __malloc_unlock
008172fe g     O .bss	00000001 _Pacemaker1_local__pre_AVI_ex21
008172ff g     O .bss	00000001 g112
00817300 g     O .bss	00000001 g44b
00817301 g     O .bss	00000001 _Pacemaker1_local_VRP_start
00817302 g     O .bss	00000001 g3
00817303 g     O .bss	00000001 g76b
00817304 g     O .bss	00000001 g31b
00817305 g     O .bss	00000001 _Pacemaker1_local_LRI_start
0080b4c4 g     F .text	0000015c memmove
00817306 g     O .bss	00000001 g103
00817307 g     O .bss	00000001 PRE_g27
00817308 g     O .bss	00000001 g47
00817309 g     O .bss	00000001 g85
0081730a g     O .bss	00000001 g42
00806c9c g     F .text	00000018 _cleanup
0081730b g     O .bss	00000001 PRE_g114
008080b8 g     F .text	000000a8 _Balloc
0081730c g     O .bss	00000001 g9
0081730d g     O .bss	00000001 LRITO
0081730e g     O .bss	00000001 g114b
00817310 g     O .bss	00000004 _PRE_GO
00817314 g     O .bss	00000001 PRE_g3
00817315 g     O .bss	00000001 g102
0080dda4 g     F .text	000000dc .hidden __gtdf2
00812a9c g     F .text	00000024 altera_nios2_gen2_irq_init
00817316 g     O .bss	00000001 g115
00817317 g     O .bss	00000001 AVI_start
00800000 g     F .entry	0000001c __reset
00817318 g     O .bss	00000001 _cg15
00817319 g     O .bss	00000001 PRE_g56
0081731a g     O .bss	00000001 PRE_g13
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080aef8 g     F .text	0000005c _fstat_r
0081731b g     O .bss	00000001 PRE_g72
00817420 g     O .bss	00000004 errno
0081731c g     O .bss	00000001 PRE_g75
0081731d g     O .bss	00000001 PRE_g32
0081731e g     O .bss	00000001 _cg73
0081731f g     O .bss	00000001 g87
00817320 g     O .bss	00000001 g44
008091d0 g     F .text	00000008 __seofread
00817428 g     O .bss	00000004 alt_argv
0081d5a0 g       *ABS*	00000000 _gp
00812a6c g     F .text	00000030 usleep
00817321 g     O .bss	00000001 _cg84
00817322 g     O .bss	00000001 _cg45
008006f0 g     F .text	000000a4 reset
00817323 g     O .bss	00000001 _Pacemaker1_local_PVARP_start
00817324 g     O .bss	00000001 PRE_g65
00817325 g     O .bss	00000001 AVI_stop
00817326 g     O .bss	00000001 g25_e3
00817327 g     O .bss	00000001 g92
00817328 g     O .bss	00000001 g1
00817329 g     O .bss	00000001 g61
008141dc g     O .rwdata	00000180 alt_fd_list
0081732a g     O .bss	00000001 g71
0081732b g     O .bss	00000001 g50b
00812c18 g     F .text	00000090 alt_find_dev
00807e48 g     F .text	00000148 memcpy
0080696c g     F .text	0000000c _cleanup_r
0080f008 g     F .text	000000dc .hidden __floatsidf
0081732c g     O .bss	00000001 g82
0081279c g     F .text	0000007c alt_io_redirect
0080de80 g     F .text	000000f4 .hidden __ltdf2
0081732d g     O .bss	00000001 _cg33
00813314 g       *ABS*	00000000 __DTOR_END__
0081732e g     O .bss	00000001 _cg98
0081732f g     O .bss	00000001 g12
00812ee4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00817330 g     O .bss	00000001 g97
00817331 g     O .bss	00000001 g52
00817332 g     O .bss	00000001 _Pacemaker1_local_URI_stop
008090b4 g     F .text	00000074 __fpclassifyd
00808e98 g     F .text	000000a4 __ratio
0080a99c g     F .text	0000001c __vfiprintf_internal
00817333 g     O .bss	00000001 _cg85
00810534 g     F .text	0000021c altera_avalon_jtag_uart_read
008029a4 g     F .text	00000030 _printf_r
0080cacc g     F .text	00000064 .hidden __udivsi3
0080f57c g     F .text	000000a4 isatty
00817334 g     O .bss	00000001 g17
00817335 g     O .bss	00000001 g117_e1_fix_fix
00813464 g     O .rodata	000000c8 __mprec_tens
0080733c g     F .text	0000000c __locale_charset
00817336 g     O .bss	00000001 g76
00817337 g     O .bss	00000001 g31
00812e54 g     F .text	00000090 alt_icache_flush
00817338 g     O .bss	00000001 g37
00800498 g     F .text	000000f8 heartLEDs
0081741c g     O .bss	00000004 __malloc_top_pad
008155a8 g     O .rwdata	00000004 __mb_cur_max
0080736c g     F .text	0000000c _localeconv_r
00817339 g     O .bss	00000001 g62
0081733a g     O .bss	00000001 g117_fix4
0080af54 g     F .text	000004bc __sfvwrite_r
008084c4 g     F .text	0000003c __i2b
00817468 g     O .bss	00000018 PVARP_timer
00809128 g     F .text	00000054 _sbrk_r
0081733b g     O .bss	00000001 g84
0081733c g     O .bss	00000001 g41
0081733d g     O .bss	00000001 g118
0080b620 g     F .text	00000060 _read_r
0081733e g     O .bss	00000001 PRE_g49
008155c8 g     O .rwdata	00000004 alt_max_fd
008003d0 g     F .text	00000040 URI_timer_ISR
0081733f g     O .bss	00000001 g121_e2
0080abec g     F .text	000000f0 _fclose_r
00817340 g     O .bss	00000001 g8_e1
00817341 g     O .bss	00000001 _Pacemaker1_local_AEI_start
00806934 g     F .text	00000030 fflush
00800290 g     F .text	00000040 AVI_timer_ISR
00817418 g     O .bss	00000004 __malloc_max_sbrked_mem
00817342 g     O .bss	00000001 g18
00817343 g     O .bss	00000001 PRE_g81
00817344 g     O .bss	00000001 g117_fix0
00817345 g     O .bss	00000001 ASense
00817480 g     O .bss	00000018 VRP_timer
0080cb88 g     F .text	000008ac .hidden __adddf3
00817346 g     O .bss	00000001 PRE_g104
00817347 g     O .bss	00000001 PRE_g10
00808c40 g     F .text	0000010c __b2d
0080c49c g     F .text	00000538 .hidden __umoddi3
0080f748 g     F .text	000000d4 lseek
008155a0 g     O .rwdata	00000004 _global_impure_ptr
00817348 g     O .bss	00000001 g48
00817349 g     O .bss	00000001 PRE_g35
0080b680 g     F .text	00000564 _realloc_r
008175f8 g       *ABS*	00000000 __bss_end
008125e8 g     F .text	000000f0 alt_iic_isr_register
0081734a g     O .bss	00000001 _Pacemaker1_local_VRP_ex
0080fbc8 g     F .text	00000108 alt_tick
008172ec g     O .bss	00000004 button1_pressed
0080bf24 g     F .text	00000578 .hidden __udivdi3
0080ae54 g     F .text	00000024 _fputwc_r
0081343c g     O .rodata	00000028 __mprec_bigtens
008082a8 g     F .text	00000104 __s2b
0080f0e4 g     F .text	000000a8 .hidden __floatunsidf
0081734b g     O .bss	00000001 g38
0081734c g     O .bss	00000001 _Pacemaker1_local__reg_FilteredVSense21
0081734d g     O .bss	00000001 g105
00808980 g     F .text	00000060 __mcmp
00811a54 g     F .text	000000ac altera_avalon_uart_init
00806cd4 g     F .text	00000018 __fp_lock_all
0081259c g     F .text	0000004c alt_ic_irq_enabled
0080fb2c g     F .text	0000009c alt_alarm_stop
00817438 g     O .bss	00000004 alt_irq_active
0081734e g     O .bss	00000001 g117
0081734f g     O .bss	00000001 _cg20
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008141b4 g     O .rwdata	00000028 alt_dev_null
00817350 g     O .bss	00000001 _cg76
00817351 g     O .bss	00000001 g112_e13
00817352 g     O .bss	00000001 g42b
00817353 g     O .bss	00000001 _cg82
0081221c g     F .text	00000048 alt_dcache_flush_all
008083ac g     F .text	00000068 __hi0bits
00817354 g     O .bss	00000001 g22b
00817355 g     O .bss	00000001 g14b
00817356 g     O .bss	00000001 _cg28
0080ef88 g     F .text	00000080 .hidden __fixdfsi
00817357 g     O .bss	00000001 g64
00817358 g     O .bss	00000001 g21
00817359 g     O .bss	00000001 g39_e4
0081735a g     O .bss	00000001 _cg107
0081735b g     O .bss	00000001 _cg14
008172e8 g     O .bss	00000004 button0_pressed
0081735c g     O .bss	00000001 _cg68
0081735d g     O .bss	00000001 g79
0081735e g     O .bss	00000001 g34
008155e8 g       *ABS*	00000000 __ram_rwdata_end
0081735f g     O .bss	00000001 g5
00817360 g     O .bss	00000001 g17_e2
00817361 g     O .bss	00000001 _Pacemaker1_local__reg_AVI_ex21
008155c0 g     O .rwdata	00000008 alt_dev_list
00817362 g     O .bss	00000001 g94
00817363 g     O .bss	00000001 g110
00817364 g     O .bss	00000001 g49
0080fd0c g     F .text	000000f8 write
00817365 g     O .bss	00000001 _Pacemaker1_local_PVARP_ex
00817366 g     O .bss	00000001 g70_e7
00817367 g     O .bss	00000001 g2
00817368 g     O .bss	00000001 g7
00817369 g     O .bss	00000001 _cg90
0081736a g     O .bss	00000001 _cg53
00813910 g       *ABS*	00000000 __ram_rodata_end
0080f490 g     F .text	000000b0 fstat
0080de80 g     F .text	000000f4 .hidden __ledf2
0081736b g     O .bss	00000001 g80
008172dc g     O .bss	00000004 uiButton
008086f8 g     F .text	00000140 __pow5mult
00809540 g     F .text	0000145c ___vfiprintf_internal_r
00817410 g     O .bss	00000004 __nlocale_changed
0080cb30 g     F .text	00000058 .hidden __umodsi3
008175f8 g       *ABS*	00000000 end
0081736c g     O .bss	00000001 g100
00811138 g     F .text	000004d8 altera_avalon_lcd_16207_write
0081736d g     O .bss	00000001 g59
0081736e g     O .bss	00000001 g99
0081736f g     O .bss	00000001 g54
00812070 g     F .text	000001ac altera_avalon_uart_write
00817370 g     O .bss	00000001 g66
00817371 g     O .bss	00000001 g23
00817372 g     O .bss	00000001 g117_fix3
00810070 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00817373 g     O .bss	00000001 _cg44
00813314 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008172d0 g     O .bss	00000004 LRI_timeout
008118c8 g     F .text	0000007c alt_avalon_timer_sc_init
008119a4 g     F .text	00000060 altera_avalon_uart_write_fd
0080f18c g     F .text	00000064 .hidden __clzsi2
00811a04 g     F .text	00000050 altera_avalon_uart_close_fd
00810750 g     F .text	00000224 altera_avalon_jtag_uart_write
00806cc4 g     F .text	00000004 __sfp_lock_acquire
00807d64 g     F .text	000000e4 memchr
00817374 g     O .bss	00000001 g14
00802a10 g     F .text	000021f8 ___vfprintf_internal_r
00817375 g     O .bss	00000001 g117_fix1
00806e28 g     F .text	00000310 _free_r
00817376 g     O .bss	00000001 g63_e6
00807348 g     F .text	00000010 __locale_mb_cur_max
00817377 g     O .bss	00000001 _cg6
00813160 g     F .text	00000180 __call_exitprocs
00817378 g     O .bss	00000001 g108_e12
00817379 g     O .bss	00000001 g101
0081737a g     O .bss	00000001 _Pacemaker1_local_AEI_ex
0081737b g     O .bss	00000001 _Pacemaker1_local__pre_FilteredVSense21
0081740c g     O .bss	00000004 __mlocale_changed
0081737c g     O .bss	00000001 _Pacemaker1_local_FilteredVSense
008155ac g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081737d g     O .bss	00000001 _cg100
0081737e g     O .bss	00000001 g114
00817430 g     O .bss	00000004 _alt_tick_rate
0081737f g     O .bss	00000001 g56
00817380 g     O .bss	00000001 PRE_g52
00808838 g     F .text	00000148 __lshift
00817381 g     O .bss	00000001 VSense
00817434 g     O .bss	00000004 _alt_nticks
0080f91c g     F .text	000000fc read
0080fe70 g     F .text	0000009c alt_sys_init
00817382 g     O .bss	00000001 g78
00817383 g     O .bss	00000001 g33
00813048 g     F .text	00000118 __register_exitproc
00817384 g     O .bss	00000001 PRE_g119
008172e0 g     O .bss	00000004 maskedButton0
00817385 g     O .bss	00000001 g92b
00817386 g     O .bss	00000001 _Pacemaker1_local_LRI_stop
00817387 g     O .bss	00000001 g122
00800310 g     F .text	00000040 VRP_timer_ISR
00808500 g     F .text	000001f8 __multiply
008103dc g     F .text	00000068 altera_avalon_jtag_uart_close
00817388 g     O .bss	00000001 _Pacemaker1_local_LRI_ex
00817389 g     O .bss	00000001 PRE_g67
00813910 g       *ABS*	00000000 __ram_rwdata_start
00813314 g       *ABS*	00000000 __ram_rodata_start
00817440 g     O .bss	00000028 __malloc_current_mallinfo
0081738a g     O .bss	00000001 g117_e1_fix
0081738b g     O .bss	00000001 _Pacemaker1_local_FilteredASense
00808d4c g     F .text	0000014c __d2b
0081738c g     O .bss	00000001 _cg60
0081738d g     O .bss	00000001 PRE_g83
00817498 g     O .bss	00000018 AVI_timer
0081738e g     O .bss	00000001 PRE_g106
008172d4 g     O .bss	00000004 URI_timeout
008174b0 g     O .bss	00000018 LRI_timer
0080ff0c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081738f g     O .bss	00000001 g35
00812db0 g     F .text	000000a4 alt_get_fd
00812ac0 g     F .text	00000158 alt_busy_sleep
00817390 g     O .bss	00000001 g15
0080aad4 g     F .text	00000054 _close_r
00817391 g     O .bss	00000001 g90
00817392 g     O .bss	00000001 _GO
00812fcc g     F .text	0000007c memcmp
00817393 g     O .bss	00000001 URITO
0080ffcc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00817394 g     O .bss	00000001 VRPTO
008175f8 g       *ABS*	00000000 __alt_stack_base
0081001c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00817395 g     O .bss	00000001 PRE_g91
00804ce0 g     F .text	00000154 __swsetup_r
00800794 g     F .text	00002210 tick
0080d434 g     F .text	000008e8 .hidden __divdf3
00806b84 g     F .text	00000118 __sfp
00817396 g     O .bss	00000001 g63
00817397 g     O .bss	00000001 g20
00808fb0 g     F .text	00000078 __copybits
00817398 g     O .bss	00000001 AVITO
00817399 g     O .bss	00000001 g60
00813dac g     O .rwdata	00000408 __malloc_av_
00806cd0 g     F .text	00000004 __sinit_lock_release
0080df74 g     F .text	00000718 .hidden __muldf3
0081739a g     O .bss	00000001 PRE_g19
0080917c g     F .text	00000054 __sread
008174c8 g     O .bss	00000018 AEI_timer
0081739b g     O .bss	00000001 g66b
00812ca8 g     F .text	00000108 alt_find_file
0081739c g     O .bss	00000001 g93
008122a0 g     F .text	000000a4 alt_dev_llist_insert
0080f898 g     F .text	00000024 __malloc_lock
0080fa7c g     F .text	000000b0 sbrk
0081739d g     O .bss	00000001 _cg22
0081739e g     O .bss	00000001 g119
008068d8 g     F .text	0000005c _fflush_r
0080ab28 g     F .text	000000c4 _calloc_r
0081739f g     O .bss	00000001 g84b
008173a0 g     O .bss	00000001 PRE_g97
008173a1 g     O .bss	00000001 g107b
008172c0 g       *ABS*	00000000 __bss_start
008173a2 g     O .bss	00000001 g86
008173a3 g     O .bss	00000001 g43
00807f90 g     F .text	00000128 memset
008006a8 g     F .text	00000048 main
0081742c g     O .bss	00000004 alt_envp
00817414 g     O .bss	00000004 __malloc_max_total_mem
008173a4 g     O .bss	00000001 PRE_g43
008173a5 g     O .bss	00000001 _cg11
008173a6 g     O .bss	00000001 _Pacemaker1_local_AVI_ex
008173a7 g     O .bss	00000001 g11b
0080ff6c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
008173a8 g     O .bss	00000001 g98b
008173a9 g     O .bss	00000001 g53b
008173aa g     O .bss	00000001 PVARPTO
0080bd24 g     F .text	00000018 __swbuf
008173ab g     O .bss	00000001 g36
008116bc g     F .text	00000134 altera_avalon_lcd_16207_init
008173ac g     O .bss	00000001 _Pacemaker1_local_URI_start
008174e0 g     O .bss	00000018 URI_timer
008173ad g     O .bss	00000001 g89
008173ae g     O .bss	00000001 g46
008092b0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008173af g     O .bss	00000001 g47_e5
0080acdc g     F .text	00000014 fclose
00805034 g     F .text	00001688 _dtoa_r
00807558 g     F .text	0000080c _malloc_r
0080be98 g     F .text	00000030 __ascii_wctomb
008173b0 g     O .bss	00000001 g57b
008155cc g     O .rwdata	00000004 alt_errno
00807138 g     F .text	000000c4 _fwalk
008173b1 g     O .bss	00000001 g95
008173b2 g     O .bss	00000001 g50
00800390 g     F .text	00000040 LRI_timer_ISR
008173b3 g     O .bss	00000001 g96
008173b4 g     O .bss	00000001 g51
0080c9d4 g     F .text	00000084 .hidden __divsi3
008172c4 g     O .bss	00000004 PVARP_timeout
00806d04 g     F .text	00000124 _malloc_trim_r
00813314 g       *ABS*	00000000 __CTOR_END__
008092b8 g     F .text	000000dc strcmp
008173b5 g     O .bss	00000001 _cg37
008173b6 g     O .bss	00000001 g107
00813314 g       *ABS*	00000000 __flash_rodata_start
008173b7 g     O .bss	00000001 g113
00813314 g       *ABS*	00000000 __DTOR_LIST__
008002d0 g     F .text	00000040 PVARP_timer_ISR
0080dd1c g     F .text	00000088 .hidden __nedf2
0080fe38 g     F .text	00000038 alt_irq_init
0080fa18 g     F .text	00000064 alt_release_fd
008173b8 g     O .bss	00000001 g104
008173b9 g     O .bss	00000001 g73b
008173ba g     O .bss	00000001 g13
0081354c g     O .rodata	00000100 .hidden __clz_tab
00817408 g     O .bss	00000004 _PathLocale
008173bb g     O .bss	00000001 PRE_g41
008173bc g     O .bss	00000001 g98
008173bd g     O .bss	00000001 g53
008173be g     O .bss	00000001 g8
008173bf g     O .bss	00000001 g57
008173c0 g     O .bss	00000001 PRE_g89
00812f80 g     F .text	00000014 atexit
0080aa74 g     F .text	00000060 _write_r
008172c8 g     O .bss	00000004 VRP_timeout
008173c1 g     O .bss	00000001 g70
008173c2 g     O .bss	00000001 _cg66
008173c3 g     O .bss	00000001 g102_e11
00807378 g     F .text	00000018 setlocale
008172cc g     O .bss	00000004 AEI_timeout
008173c4 g     O .bss	00000001 g36b
008173c5 g     O .bss	00000001 _Pacemaker1_local_AVI_stop
008173c6 g     O .bss	00000001 g116
008155a4 g     O .rwdata	00000004 _impure_ptr
00817424 g     O .bss	00000004 alt_argc
008173c7 g     O .bss	00000001 g6
008066bc g     F .text	0000021c __sflush_r
008173c8 g     O .bss	00000001 _cg93
008123a4 g     F .text	00000060 _do_dtors
00807364 g     F .text	00000008 __locale_cjk_lang
008173c9 g     O .bss	00000001 _Pacemaker1_local_URI_ex
008173ca g     O .bss	00000001 g82b
008173cb g     O .bss	00000001 g72
008173cc g     O .bss	00000001 g81
00800020 g       .exceptions	00000000 alt_irq_entry
008173cd g     O .bss	00000001 PRE_g110
00808bdc g     F .text	00000064 __ulp
00806cec g     F .text	00000018 __fp_unlock_all
008117f0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008173ce g     O .bss	00000001 _cg50
008173cf g     O .bss	00000001 PRE_g99
008155b8 g     O .rwdata	00000008 alt_fs_list
008173d0 g     O .bss	00000001 g0
00800410 g     F .text	00000088 pollButtons
008172d8 g     O .bss	00000004 LEDbits
008173d1 g     O .bss	00000001 g75
008173d2 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807390 g     F .text	0000000c localeconv
008173d3 g     O .bss	00000001 g79_e8
008173d4 g     O .bss	00000001 PRE_g21
008173d5 g     O .bss	00000001 g16
008173d6 g     O .bss	00000001 g105b
00812438 g     F .text	00000050 alt_ic_isr_register
008173d7 g     O .bss	00000001 g58
008173d8 g     O .bss	00000001 _cg77
008173d9 g     O .bss	00000001 _cg57
008173da g     O .bss	00000001 g68
008173db g     O .bss	00000001 g25
008173dc g     O .bss	00000001 g90b
008155e8 g       *ABS*	00000000 _edata
00811944 g     F .text	00000060 altera_avalon_uart_read_fd
008175f8 g       *ABS*	00000000 _end
008173dd g     O .bss	00000001 g11
0080acf0 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
008173de g     O .bss	00000001 g95_e10
00810444 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008173df g     O .bss	00000001 g65
008173e0 g     O .bss	00000001 g22
008173e1 g     O .bss	00000001 g28
008173e2 g     O .bss	00000001 g73
00812510 g     F .text	0000008c alt_ic_irq_disable
008173e3 g     O .bss	00000001 g117_e1
008091d8 g     F .text	0000007c __swrite
008155b0 g     O .rwdata	00000004 __malloc_trim_threshold
00807358 g     F .text	0000000c __locale_msgcharset
00812f94 g     F .text	00000038 exit
008071fc g     F .text	000000c4 _fwalk_reent
008089e0 g     F .text	000001fc __mdiff
008173e4 g     O .bss	00000001 g77
008173e5 g     O .bss	00000001 g32
008173e6 g     O .bss	00000001 _Pacemaker1_local_VRP_stop
0080ca58 g     F .text	00000074 .hidden __modsi3
008155e4 g     O .rwdata	00000004 __ctype_ptr__
008173e7 g     O .bss	00000001 g20b
008173e8 g     O .bss	00000001 g88
008173e9 g     O .bss	00000001 g45
008173ea g     O .bss	00000001 _Pacemaker1_local_PVARP_stop
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00806cc8 g     F .text	00000004 __sfp_lock_release
008173eb g     O .bss	00000001 _cg23
00800000 g       *ABS*	00000000 __alt_mem_sdram
008173ec g     O .bss	00000001 _cg92
008173ed g     O .bss	00000001 _cg55
0081368e g     O .rodata	00000101 _ctype_
008173ee g     O .bss	00000001 PRE_g5
008172c0 g     O .bss	00000004 AVI_timeout
00811dc8 g     F .text	00000054 altera_avalon_uart_close
008173ef g     O .bss	00000001 PRE_g30
008132e0 g     F .text	00000034 _exit
0080f1f0 g     F .text	0000012c alt_alarm_start
008173f0 g     O .bss	00000001 g121
00800590 g     F .text	00000118 startTimers
0080739c g     F .text	000001bc __smakebuf_r
008173f1 g     O .bss	00000001 VPace
00809394 g     F .text	00000098 strlen
008173f2 g     O .bss	00000001 g39
00812918 g     F .text	00000154 open
0080dda4 g     F .text	000000dc .hidden __gedf2
008173f3 g     O .bss	00000001 g120
008173f4 g     O .bss	00000001 g117_fix2
008155b4 g     O .rwdata	00000004 __wctomb
00809528 g     F .text	00000018 __sprint_r
00812404 g     F .text	00000034 alt_icache_flush_all
008173f5 g     O .bss	00000001 g29
008173f6 g     O .bss	00000001 _cg4
008173f7 g     O .bss	00000001 g67
008173f8 g     O .bss	00000001 g24
008155e0 g     O .rwdata	00000004 alt_priority_mask
008173f9 g     O .bss	00000001 g109
00812488 g     F .text	00000088 alt_ic_irq_enable
00804c08 g     F .text	0000001c __vfprintf_internal
00811e58 g     F .text	000001dc altera_avalon_uart_read
0080bec8 g     F .text	0000005c _wctomb_r
008173fa g     O .bss	00000001 g4b
0080e68c g     F .text	000008fc .hidden __subdf3
008173fb g     O .bss	00000001 g106
00808414 g     F .text	000000b0 __lo0bits
008173fc g     O .bss	00000001 _cg31
008173fd g     O .bss	00000001 g10
008155d4 g     O .rwdata	00000008 alt_alarm_list
008173fe g     O .bss	00000001 _cg62
00812344 g     F .text	00000060 _do_ctors
0080bdd8 g     F .text	000000c0 wcrtomb
008173ff g     O .bss	00000001 AEITO
00817400 g     O .bss	00000001 g69
00817401 g     O .bss	00000001 g26
0080f358 g     F .text	000000d0 close
00817402 g     O .bss	00000001 g116_e14
00817403 g     O .bss	00000001 _Pacemaker1_local_AEI_stop
0080f688 g     F .text	00000084 alt_load
0080ae78 g     F .text	00000080 fputwc
00806ccc g     F .text	00000004 __sinit_lock_acquire
00817404 g     O .bss	00000001 _cg105
00808188 g     F .text	00000120 __multadd
00808160 g     F .text	00000028 _Bfree
00817405 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109d3e04 	addi	r2,r2,29944
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109d3e04 	addi	r2,r2,29944
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7a717 	ldw	r2,-24932(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7a717 	ldw	r2,-24932(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b56814 	ori	gp,gp,54688
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109cb014 	ori	r2,r2,29376

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18dd7e14 	ori	r3,r3,30200

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080f6880 	call	80f688 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080f81c0 	call	80f81c <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <AVI_timer_ISR>:
unsigned int button1_pressed = 0;



alt_u32 AVI_timer_ISR(void* context)
{
  800290:	defffd04 	addi	sp,sp,-12
  800294:	dfc00215 	stw	ra,8(sp)
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
  8002a0:	e13fff15 	stw	r4,-4(fp)
	AVITO = 1;
  8002a4:	00800044 	movi	r2,1
  8002a8:	d0a77e05 	stb	r2,-25096(gp)
	printf("AVI timed out");
  8002ac:	01002074 	movhi	r4,129
  8002b0:	210cc504 	addi	r4,r4,13076
  8002b4:	08029d40 	call	8029d4 <printf>
	return 0;
  8002b8:	0005883a 	mov	r2,zero
}
  8002bc:	e037883a 	mov	sp,fp
  8002c0:	dfc00117 	ldw	ra,4(sp)
  8002c4:	df000017 	ldw	fp,0(sp)
  8002c8:	dec00204 	addi	sp,sp,8
  8002cc:	f800283a 	ret

008002d0 <PVARP_timer_ISR>:

alt_u32 PVARP_timer_ISR(void* context)
{
  8002d0:	defffd04 	addi	sp,sp,-12
  8002d4:	dfc00215 	stw	ra,8(sp)
  8002d8:	df000115 	stw	fp,4(sp)
  8002dc:	df000104 	addi	fp,sp,4
  8002e0:	e13fff15 	stw	r4,-4(fp)
	PVARPTO = 1;
  8002e4:	00800044 	movi	r2,1
  8002e8:	d0a78285 	stb	r2,-25078(gp)
	printf("PVARP timed out");
  8002ec:	01002074 	movhi	r4,129
  8002f0:	210cc904 	addi	r4,r4,13092
  8002f4:	08029d40 	call	8029d4 <printf>
	return 0;
  8002f8:	0005883a 	mov	r2,zero
}
  8002fc:	e037883a 	mov	sp,fp
  800300:	dfc00117 	ldw	ra,4(sp)
  800304:	df000017 	ldw	fp,0(sp)
  800308:	dec00204 	addi	sp,sp,8
  80030c:	f800283a 	ret

00800310 <VRP_timer_ISR>:

alt_u32 VRP_timer_ISR(void* context)
{
  800310:	defffd04 	addi	sp,sp,-12
  800314:	dfc00215 	stw	ra,8(sp)
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
	VRPTO = 1;
  800324:	00800044 	movi	r2,1
  800328:	d0a77d05 	stb	r2,-25100(gp)
	printf("VRP timed out");
  80032c:	01002074 	movhi	r4,129
  800330:	210ccd04 	addi	r4,r4,13108
  800334:	08029d40 	call	8029d4 <printf>
	return 0;
  800338:	0005883a 	mov	r2,zero
}
  80033c:	e037883a 	mov	sp,fp
  800340:	dfc00117 	ldw	ra,4(sp)
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00204 	addi	sp,sp,8
  80034c:	f800283a 	ret

00800350 <AEI_timer_ISR>:

alt_u32 AEI_timer_ISR(void* context)
{
  800350:	defffd04 	addi	sp,sp,-12
  800354:	dfc00215 	stw	ra,8(sp)
  800358:	df000115 	stw	fp,4(sp)
  80035c:	df000104 	addi	fp,sp,4
  800360:	e13fff15 	stw	r4,-4(fp)
	AEITO = 1;
  800364:	00800044 	movi	r2,1
  800368:	d0a797c5 	stb	r2,-24993(gp)
	printf("AEI timed out");
  80036c:	01002074 	movhi	r4,129
  800370:	210cd104 	addi	r4,r4,13124
  800374:	08029d40 	call	8029d4 <printf>
	return 0;
  800378:	0005883a 	mov	r2,zero
}
  80037c:	e037883a 	mov	sp,fp
  800380:	dfc00117 	ldw	ra,4(sp)
  800384:	df000017 	ldw	fp,0(sp)
  800388:	dec00204 	addi	sp,sp,8
  80038c:	f800283a 	ret

00800390 <LRI_timer_ISR>:

alt_u32 LRI_timer_ISR(void* context)
{
  800390:	defffd04 	addi	sp,sp,-12
  800394:	dfc00215 	stw	ra,8(sp)
  800398:	df000115 	stw	fp,4(sp)
  80039c:	df000104 	addi	fp,sp,4
  8003a0:	e13fff15 	stw	r4,-4(fp)
	LRITO = 1;
  8003a4:	00800044 	movi	r2,1
  8003a8:	d0a75b45 	stb	r2,-25235(gp)
	printf("LRI timed out");
  8003ac:	01002074 	movhi	r4,129
  8003b0:	210cd504 	addi	r4,r4,13140
  8003b4:	08029d40 	call	8029d4 <printf>
	return 0;
  8003b8:	0005883a 	mov	r2,zero
}
  8003bc:	e037883a 	mov	sp,fp
  8003c0:	dfc00117 	ldw	ra,4(sp)
  8003c4:	df000017 	ldw	fp,0(sp)
  8003c8:	dec00204 	addi	sp,sp,8
  8003cc:	f800283a 	ret

008003d0 <URI_timer_ISR>:

alt_u32 URI_timer_ISR(void* context)
{
  8003d0:	defffd04 	addi	sp,sp,-12
  8003d4:	dfc00215 	stw	ra,8(sp)
  8003d8:	df000115 	stw	fp,4(sp)
  8003dc:	df000104 	addi	fp,sp,4
  8003e0:	e13fff15 	stw	r4,-4(fp)
	URITO = 1;
  8003e4:	00800044 	movi	r2,1
  8003e8:	d0a77cc5 	stb	r2,-25101(gp)
	printf("URI timed out");
  8003ec:	01002074 	movhi	r4,129
  8003f0:	210cd904 	addi	r4,r4,13156
  8003f4:	08029d40 	call	8029d4 <printf>
	return 0;
  8003f8:	0005883a 	mov	r2,zero
}
  8003fc:	e037883a 	mov	sp,fp
  800400:	dfc00117 	ldw	ra,4(sp)
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00204 	addi	sp,sp,8
  80040c:	f800283a 	ret

00800410 <pollButtons>:

void pollButtons()
{
  800410:	defffd04 	addi	sp,sp,-12
  800414:	df000215 	stw	fp,8(sp)
  800418:	df000204 	addi	fp,sp,8
	// Poll buttons
	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  80041c:	00804434 	movhi	r2,272
  800420:	10842804 	addi	r2,r2,4256
  800424:	10800037 	ldwio	r2,0(r2)
  800428:	d0a74f15 	stw	r2,-25284(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// clear the edge capture register
  80042c:	0007883a 	mov	r3,zero
  800430:	00804434 	movhi	r2,272
  800434:	10842b04 	addi	r2,r2,4268
  800438:	10c00035 	stwio	r3,0(r2)
	int maskedButton0 = uiButton & (1 << 0);
  80043c:	d0a74f17 	ldw	r2,-25284(gp)
  800440:	1080004c 	andi	r2,r2,1
  800444:	e0bffe15 	stw	r2,-8(fp)
	int maskedButton1 = uiButton & (1 << 1);
  800448:	d0a74f17 	ldw	r2,-25284(gp)
  80044c:	1080008c 	andi	r2,r2,2
  800450:	e0bfff15 	stw	r2,-4(fp)

	if (maskedButton0 > 0){
  800454:	e0bffe17 	ldw	r2,-8(fp)
  800458:	0080030e 	bge	zero,r2,800468 <pollButtons+0x58>
		ASense = 1;
  80045c:	00800044 	movi	r2,1
  800460:	d0a76945 	stb	r2,-25179(gp)
  800464:	00000106 	br	80046c <pollButtons+0x5c>
	} else {
		ASense = 0;
  800468:	d0276945 	stb	zero,-25179(gp)
	}
	if (maskedButton1 > 0){
  80046c:	e0bfff17 	ldw	r2,-4(fp)
  800470:	0080030e 	bge	zero,r2,800480 <pollButtons+0x70>
		VSense = 1;
  800474:	00800044 	movi	r2,1
  800478:	d0a77845 	stb	r2,-25119(gp)
	} else {
		VSense = 0;
	}
}
  80047c:	00000106 	br	800484 <pollButtons+0x74>
		ASense = 0;
	}
	if (maskedButton1 > 0){
		VSense = 1;
	} else {
		VSense = 0;
  800480:	d0277845 	stb	zero,-25119(gp)
	}
}
  800484:	0001883a 	nop
  800488:	e037883a 	mov	sp,fp
  80048c:	df000017 	ldw	fp,0(sp)
  800490:	dec00104 	addi	sp,sp,4
  800494:	f800283a 	ret

00800498 <heartLEDs>:

void heartLEDs()
{
  800498:	defffc04 	addi	sp,sp,-16
  80049c:	dfc00315 	stw	ra,12(sp)
  8004a0:	df000215 	stw	fp,8(sp)
  8004a4:	df000204 	addi	fp,sp,8
	LEDbits = 0;
  8004a8:	d0274e15 	stw	zero,-25288(gp)
	unsigned int A_LED = ASense || APace;
  8004ac:	d0a76943 	ldbu	r2,-25179(gp)
  8004b0:	10803fcc 	andi	r2,r2,255
  8004b4:	1080201c 	xori	r2,r2,128
  8004b8:	10bfe004 	addi	r2,r2,-128
  8004bc:	1000051e 	bne	r2,zero,8004d4 <heartLEDs+0x3c>
  8004c0:	d0a75583 	ldbu	r2,-25258(gp)
  8004c4:	10803fcc 	andi	r2,r2,255
  8004c8:	1080201c 	xori	r2,r2,128
  8004cc:	10bfe004 	addi	r2,r2,-128
  8004d0:	10000226 	beq	r2,zero,8004dc <heartLEDs+0x44>
  8004d4:	00800044 	movi	r2,1
  8004d8:	00000106 	br	8004e0 <heartLEDs+0x48>
  8004dc:	0005883a 	mov	r2,zero
  8004e0:	e0bffe15 	stw	r2,-8(fp)
	unsigned int V_LED = VSense || VPace;
  8004e4:	d0a77843 	ldbu	r2,-25119(gp)
  8004e8:	10803fcc 	andi	r2,r2,255
  8004ec:	1080201c 	xori	r2,r2,128
  8004f0:	10bfe004 	addi	r2,r2,-128
  8004f4:	1000051e 	bne	r2,zero,80050c <heartLEDs+0x74>
  8004f8:	d0a79443 	ldbu	r2,-25007(gp)
  8004fc:	10803fcc 	andi	r2,r2,255
  800500:	1080201c 	xori	r2,r2,128
  800504:	10bfe004 	addi	r2,r2,-128
  800508:	10000226 	beq	r2,zero,800514 <heartLEDs+0x7c>
  80050c:	00800044 	movi	r2,1
  800510:	00000106 	br	800518 <heartLEDs+0x80>
  800514:	0005883a 	mov	r2,zero
  800518:	e0bfff15 	stw	r2,-4(fp)
//	printf("Test text");
	printf("A_LED %d", A_LED);
  80051c:	e17ffe17 	ldw	r5,-8(fp)
  800520:	01002074 	movhi	r4,129
  800524:	210cdd04 	addi	r4,r4,13172
  800528:	08029d40 	call	8029d4 <printf>
	printf("%d", V_LED);
  80052c:	e17fff17 	ldw	r5,-4(fp)
  800530:	01002074 	movhi	r4,129
  800534:	210ce004 	addi	r4,r4,13184
  800538:	08029d40 	call	8029d4 <printf>

	LEDbits = LEDbits | (A_LED << 0);
  80053c:	d0e74e17 	ldw	r3,-25288(gp)
  800540:	e0bffe17 	ldw	r2,-8(fp)
  800544:	1884b03a 	or	r2,r3,r2
  800548:	d0a74e15 	stw	r2,-25288(gp)
	LEDbits = LEDbits | (V_LED << 1);
  80054c:	e0bfff17 	ldw	r2,-4(fp)
  800550:	1085883a 	add	r2,r2,r2
  800554:	1007883a 	mov	r3,r2
  800558:	d0a74e17 	ldw	r2,-25288(gp)
  80055c:	1884b03a 	or	r2,r3,r2
  800560:	d0a74e15 	stw	r2,-25288(gp)

//	unsigned int allON = 0b00001111;

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits);
  800564:	d0a74e17 	ldw	r2,-25288(gp)
  800568:	1007883a 	mov	r3,r2
  80056c:	00804434 	movhi	r2,272
  800570:	10841c04 	addi	r2,r2,4208
  800574:	10c00035 	stwio	r3,0(r2)
}
  800578:	0001883a 	nop
  80057c:	e037883a 	mov	sp,fp
  800580:	dfc00117 	ldw	ra,4(sp)
  800584:	df000017 	ldw	fp,0(sp)
  800588:	dec00204 	addi	sp,sp,8
  80058c:	f800283a 	ret

00800590 <startTimers>:

void startTimers()
{
  800590:	defffe04 	addi	sp,sp,-8
  800594:	dfc00115 	stw	ra,4(sp)
  800598:	df000015 	stw	fp,0(sp)
  80059c:	d839883a 	mov	fp,sp
	if (AVI_stop == 1)
  8005a0:	d0a76143 	ldbu	r2,-25211(gp)
  8005a4:	10803fcc 	andi	r2,r2,255
  8005a8:	1080201c 	xori	r2,r2,128
  8005ac:	10bfe004 	addi	r2,r2,-128
  8005b0:	10800058 	cmpnei	r2,r2,1
  8005b4:	1000231e 	bne	r2,zero,800644 <startTimers+0xb4>
	{
		alt_alarm_start(&AVI_timer, PVARP_Value, PVARP_timer_ISR, NULL);
  8005b8:	000f883a 	mov	r7,zero
  8005bc:	01802034 	movhi	r6,128
  8005c0:	3180b404 	addi	r6,r6,720
  8005c4:	01400c84 	movi	r5,50
  8005c8:	01002074 	movhi	r4,129
  8005cc:	211d2604 	addi	r4,r4,29848
  8005d0:	080f1f00 	call	80f1f0 <alt_alarm_start>
		alt_alarm_start(&AVI_timer, VRP_Value, VRP_timer_ISR, NULL);
  8005d4:	000f883a 	mov	r7,zero
  8005d8:	01802034 	movhi	r6,128
  8005dc:	3180c404 	addi	r6,r6,784
  8005e0:	01402584 	movi	r5,150
  8005e4:	01002074 	movhi	r4,129
  8005e8:	211d2604 	addi	r4,r4,29848
  8005ec:	080f1f00 	call	80f1f0 <alt_alarm_start>
		alt_alarm_start(&AVI_timer, AEI_Value, AEI_timer_ISR, NULL);
  8005f0:	000f883a 	mov	r7,zero
  8005f4:	01802034 	movhi	r6,128
  8005f8:	3180d404 	addi	r6,r6,848
  8005fc:	0140c804 	movi	r5,800
  800600:	01002074 	movhi	r4,129
  800604:	211d2604 	addi	r4,r4,29848
  800608:	080f1f00 	call	80f1f0 <alt_alarm_start>
		alt_alarm_start(&AVI_timer, LRI_Value, LRI_timer_ISR, NULL);
  80060c:	000f883a 	mov	r7,zero
  800610:	01802034 	movhi	r6,128
  800614:	3180e404 	addi	r6,r6,912
  800618:	0140ed84 	movi	r5,950
  80061c:	01002074 	movhi	r4,129
  800620:	211d2604 	addi	r4,r4,29848
  800624:	080f1f00 	call	80f1f0 <alt_alarm_start>
		alt_alarm_start(&AVI_timer, URI_Value, URI_timer_ISR, NULL);
  800628:	000f883a 	mov	r7,zero
  80062c:	01802034 	movhi	r6,128
  800630:	3180f404 	addi	r6,r6,976
  800634:	0140e104 	movi	r5,900
  800638:	01002074 	movhi	r4,129
  80063c:	211d2604 	addi	r4,r4,29848
  800640:	080f1f00 	call	80f1f0 <alt_alarm_start>
	}
	if (AVI_start == 1)
  800644:	d0a75dc3 	ldbu	r2,-25225(gp)
  800648:	10803fcc 	andi	r2,r2,255
  80064c:	1080201c 	xori	r2,r2,128
  800650:	10bfe004 	addi	r2,r2,-128
  800654:	10800058 	cmpnei	r2,r2,1
  800658:	1000071e 	bne	r2,zero,800678 <startTimers+0xe8>
	{
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  80065c:	000f883a 	mov	r7,zero
  800660:	01802034 	movhi	r6,128
  800664:	3180a404 	addi	r6,r6,656
  800668:	01404b04 	movi	r5,300
  80066c:	01002074 	movhi	r4,129
  800670:	211d2604 	addi	r4,r4,29848
  800674:	080f1f00 	call	80f1f0 <alt_alarm_start>
	}

	AVI_timeout = 0;
  800678:	d0274815 	stw	zero,-25312(gp)
	PVARP_timeout = 0;
  80067c:	d0274915 	stw	zero,-25308(gp)
	VRP_timeout = 0;
  800680:	d0274a15 	stw	zero,-25304(gp)
	AEI_timeout = 0;
  800684:	d0274b15 	stw	zero,-25300(gp)
	LRI_timeout = 0;
  800688:	d0274c15 	stw	zero,-25296(gp)
	URI_timeout = 0;
  80068c:	d0274d15 	stw	zero,-25292(gp)
}
  800690:	0001883a 	nop
  800694:	e037883a 	mov	sp,fp
  800698:	dfc00117 	ldw	ra,4(sp)
  80069c:	df000017 	ldw	fp,0(sp)
  8006a0:	dec00204 	addi	sp,sp,8
  8006a4:	f800283a 	ret

008006a8 <main>:

int main()
{
  8006a8:	defffe04 	addi	sp,sp,-8
  8006ac:	dfc00115 	stw	ra,4(sp)
  8006b0:	df000015 	stw	fp,0(sp)
  8006b4:	d839883a 	mov	fp,sp
	// Reset the scc
	reset();
  8006b8:	08006f00 	call	8006f0 <reset>



	// Start the AVI timer
	AVI_timeout = 0;
  8006bc:	d0274815 	stw	zero,-25312(gp)
	alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
  8006c0:	000f883a 	mov	r7,zero
  8006c4:	01802034 	movhi	r6,128
  8006c8:	3180a404 	addi	r6,r6,656
  8006cc:	01404b04 	movi	r5,300
  8006d0:	01002074 	movhi	r4,129
  8006d4:	211d2604 	addi	r4,r4,29848
  8006d8:	080f1f00 	call	80f1f0 <alt_alarm_start>

	while(1) // Main loop
	{
		tick();
  8006dc:	08007940 	call	800794 <tick>
		startTimers();
  8006e0:	08005900 	call	800590 <startTimers>
		pollButtons();
  8006e4:	08004100 	call	800410 <pollButtons>
		heartLEDs();
  8006e8:	08004980 	call	800498 <heartLEDs>
	}
  8006ec:	003ffb06 	br	8006dc <__alt_mem_onchip_mem+0xff7806dc>

008006f0 <reset>:
char g117_e1_fix_fix;
char g117_e1_fix;
char g117_e1;
char g121_e2;
int _PRE_GO;
void reset(){
  8006f0:	deffff04 	addi	sp,sp,-4
  8006f4:	df000015 	stw	fp,0(sp)
  8006f8:	d839883a 	mov	fp,sp
   _GO = 1;
  8006fc:	00800044 	movi	r2,1
  800700:	d0a77c85 	stb	r2,-25102(gp)
   _PRE_GO = 0;
  800704:	d0275c15 	stw	zero,-25232(gp)
   PRE_g3 = 0;
  800708:	d0275d05 	stb	zero,-25228(gp)
   PRE_g5 = 0;
  80070c:	d0279385 	stb	zero,-25010(gp)
   PRE_g10 = 0;
  800710:	d02769c5 	stb	zero,-25177(gp)
   PRE_g13 = 0;
  800714:	d0275e85 	stb	zero,-25222(gp)
   PRE_g19 = 0;
  800718:	d0277e85 	stb	zero,-25094(gp)
   PRE_g21 = 0;
  80071c:	d0278d05 	stb	zero,-25036(gp)
   PRE_g27 = 0;
  800720:	d02759c5 	stb	zero,-25241(gp)
   PRE_g30 = 0;
  800724:	d02793c5 	stb	zero,-25009(gp)
   PRE_g32 = 0;
  800728:	d0275f45 	stb	zero,-25219(gp)
   PRE_g35 = 0;
  80072c:	d0276a45 	stb	zero,-25175(gp)
   PRE_g41 = 0;
  800730:	d02786c5 	stb	zero,-25061(gp)
   PRE_g43 = 0;
  800734:	d0278105 	stb	zero,-25084(gp)
   PRE_g49 = 0;
  800738:	d0276785 	stb	zero,-25186(gp)
   PRE_g52 = 0;
  80073c:	d0277805 	stb	zero,-25120(gp)
   PRE_g56 = 0;
  800740:	d0275e45 	stb	zero,-25223(gp)
   PRE_g65 = 0;
  800744:	d0276105 	stb	zero,-25212(gp)
   PRE_g67 = 0;
  800748:	d0277a45 	stb	zero,-25111(gp)
   PRE_g72 = 0;
  80074c:	d0275ec5 	stb	zero,-25221(gp)
   PRE_g75 = 0;
  800750:	d0275f05 	stb	zero,-25220(gp)
   PRE_g81 = 0;
  800754:	d02768c5 	stb	zero,-25181(gp)
   PRE_g83 = 0;
  800758:	d0277b45 	stb	zero,-25107(gp)
   PRE_g89 = 0;
  80075c:	d0278805 	stb	zero,-25056(gp)
   PRE_g91 = 0;
  800760:	d0277d45 	stb	zero,-25099(gp)
   PRE_g97 = 0;
  800764:	d0278005 	stb	zero,-25088(gp)
   PRE_g99 = 0;
  800768:	d0278bc5 	stb	zero,-25041(gp)
   PRE_g104 = 0;
  80076c:	d0276985 	stb	zero,-25178(gp)
   PRE_g106 = 0;
  800770:	d0277b85 	stb	zero,-25106(gp)
   PRE_g110 = 0;
  800774:	d0278b45 	stb	zero,-25043(gp)
   PRE_g114 = 0;
  800778:	d0275ac5 	stb	zero,-25237(gp)
   PRE_g119 = 0;
  80077c:	d0277905 	stb	zero,-25116(gp)
   return;
  800780:	0001883a 	nop
}
  800784:	e037883a 	mov	sp,fp
  800788:	df000017 	ldw	fp,0(sp)
  80078c:	dec00104 	addi	sp,sp,4
  800790:	f800283a 	ret

00800794 <tick>:
void tick(){
  800794:	deffff04 	addi	sp,sp,-4
  800798:	df000015 	stw	fp,0(sp)
  80079c:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  8007a0:	d0a75c17 	ldw	r2,-25232(gp)
  8007a4:	10800058 	cmpnei	r2,r2,1
  8007a8:	1000011e 	bne	r2,zero,8007b0 <tick+0x1c>
      _GO = 0;
  8007ac:	d0277c85 	stb	zero,-25102(gp)
   }
   {
      g0 = _GO;
  8007b0:	d0a77c83 	ldbu	r2,-25102(gp)
  8007b4:	d0a78c05 	stb	r2,-25040(gp)
      g1 = g0;
  8007b8:	d0a78c03 	ldbu	r2,-25040(gp)
  8007bc:	d0a76205 	stb	r2,-25208(gp)
      g2 = g1;
  8007c0:	d0a76203 	ldbu	r2,-25208(gp)
  8007c4:	d0a771c5 	stb	r2,-25145(gp)
      g111 =(PRE_g110);
  8007c8:	d0a78b43 	ldbu	r2,-25043(gp)
  8007cc:	d0a75685 	stb	r2,-25254(gp)
      g109 = g1;
  8007d0:	d0a76203 	ldbu	r2,-25208(gp)
  8007d4:	d0a79645 	stb	r2,-24999(gp)
      g110 =(g111||g109);
  8007d8:	d0a75683 	ldbu	r2,-25254(gp)
  8007dc:	10803fcc 	andi	r2,r2,255
  8007e0:	1080201c 	xori	r2,r2,128
  8007e4:	10bfe004 	addi	r2,r2,-128
  8007e8:	1000051e 	bne	r2,zero,800800 <tick+0x6c>
  8007ec:	d0a79643 	ldbu	r2,-24999(gp)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	1080201c 	xori	r2,r2,128
  8007f8:	10bfe004 	addi	r2,r2,-128
  8007fc:	10000226 	beq	r2,zero,800808 <tick+0x74>
  800800:	00800044 	movi	r2,1
  800804:	00000106 	br	80080c <tick+0x78>
  800808:	0005883a 	mov	r2,zero
  80080c:	d0a770c5 	stb	r2,-25149(gp)
      if(g110){
  800810:	d0a770c3 	ldbu	r2,-25149(gp)
  800814:	10803fcc 	andi	r2,r2,255
  800818:	1080201c 	xori	r2,r2,128
  80081c:	10bfe004 	addi	r2,r2,-128
  800820:	10001426 	beq	r2,zero,800874 <tick+0xe0>
         _Pacemaker1_local_LRI_start = 0;
  800824:	d0275945 	stb	zero,-25243(gp)
         _Pacemaker1_local_LRI_ex = 0;
  800828:	d0277a05 	stb	zero,-25112(gp)
         _Pacemaker1_local_LRI_stop = 0;
  80082c:	d0277985 	stb	zero,-25114(gp)
         _Pacemaker1_local_VRP_start = 0;
  800830:	d0275845 	stb	zero,-25247(gp)
         _Pacemaker1_local_VRP_stop = 0;
  800834:	d0279185 	stb	zero,-25018(gp)
         _Pacemaker1_local_VRP_ex = 0;
  800838:	d0276a85 	stb	zero,-25174(gp)
         _Pacemaker1_local_AVI_start = 0;
  80083c:	d0275445 	stb	zero,-25263(gp)
         _Pacemaker1_local_AVI_ex = 0;
  800840:	d0278185 	stb	zero,-25082(gp)
         _Pacemaker1_local_AVI_stop = 0;
  800844:	d0278945 	stb	zero,-25051(gp)
         _Pacemaker1_local_PVARP_start = 0;
  800848:	d02760c5 	stb	zero,-25213(gp)
         _Pacemaker1_local_PVARP_stop = 0;
  80084c:	d0279285 	stb	zero,-25014(gp)
         _Pacemaker1_local_PVARP_ex = 0;
  800850:	d0277145 	stb	zero,-25147(gp)
         _Pacemaker1_local_AEI_start = 0;
  800854:	d0276845 	stb	zero,-25183(gp)
         _Pacemaker1_local_AEI_stop = 0;
  800858:	d02798c5 	stb	zero,-24989(gp)
         _Pacemaker1_local_AEI_ex = 0;
  80085c:	d0277685 	stb	zero,-25126(gp)
         _Pacemaker1_local_URI_start = 0;
  800860:	d0278305 	stb	zero,-25076(gp)
         _Pacemaker1_local_URI_stop = 0;
  800864:	d0276485 	stb	zero,-25198(gp)
         _Pacemaker1_local_URI_ex = 0;
  800868:	d0278a45 	stb	zero,-25047(gp)
         _Pacemaker1_local_FilteredASense = 0;
  80086c:	d0277ac5 	stb	zero,-25109(gp)
         _Pacemaker1_local_FilteredVSense = 0;
  800870:	d0277705 	stb	zero,-25124(gp)
      }
      g6 =(PRE_g5);
  800874:	d0a79383 	ldbu	r2,-25010(gp)
  800878:	d0a789c5 	stb	r2,-25049(gp)
      _cg6 = VRPTO;
  80087c:	d0a77d03 	ldbu	r2,-25100(gp)
  800880:	d0a775c5 	stb	r2,-25129(gp)
      g7 =(g6&&_cg6);
  800884:	d0a789c3 	ldbu	r2,-25049(gp)
  800888:	10803fcc 	andi	r2,r2,255
  80088c:	1080201c 	xori	r2,r2,128
  800890:	10bfe004 	addi	r2,r2,-128
  800894:	10000726 	beq	r2,zero,8008b4 <tick+0x120>
  800898:	d0a775c3 	ldbu	r2,-25129(gp)
  80089c:	10803fcc 	andi	r2,r2,255
  8008a0:	1080201c 	xori	r2,r2,128
  8008a4:	10bfe004 	addi	r2,r2,-128
  8008a8:	10000226 	beq	r2,zero,8008b4 <tick+0x120>
  8008ac:	00800044 	movi	r2,1
  8008b0:	00000106 	br	8008b8 <tick+0x124>
  8008b4:	0005883a 	mov	r2,zero
  8008b8:	d0a77205 	stb	r2,-25144(gp)
      if(g7){
  8008bc:	d0a77203 	ldbu	r2,-25144(gp)
  8008c0:	10803fcc 	andi	r2,r2,255
  8008c4:	1080201c 	xori	r2,r2,128
  8008c8:	10bfe004 	addi	r2,r2,-128
  8008cc:	10000226 	beq	r2,zero,8008d8 <tick+0x144>
         _Pacemaker1_local_VRP_ex =(_Pacemaker1_local_VRP_ex||1);
  8008d0:	00800044 	movi	r2,1
  8008d4:	d0a76a85 	stb	r2,-25174(gp)
      }
      g120 =(PRE_g119);
  8008d8:	d0a77903 	ldbu	r2,-25116(gp)
  8008dc:	d0a794c5 	stb	r2,-25005(gp)
      g118 = g0;
  8008e0:	d0a78c03 	ldbu	r2,-25040(gp)
  8008e4:	d0a76745 	stb	r2,-25187(gp)
      g119 =(g120||g118);
  8008e8:	d0a794c3 	ldbu	r2,-25005(gp)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	1000051e 	bne	r2,zero,800910 <tick+0x17c>
  8008fc:	d0a76743 	ldbu	r2,-25187(gp)
  800900:	10803fcc 	andi	r2,r2,255
  800904:	1080201c 	xori	r2,r2,128
  800908:	10bfe004 	addi	r2,r2,-128
  80090c:	10000226 	beq	r2,zero,800918 <tick+0x184>
  800910:	00800044 	movi	r2,1
  800914:	00000106 	br	80091c <tick+0x188>
  800918:	0005883a 	mov	r2,zero
  80091c:	d0a77f85 	stb	r2,-25090(gp)
      if(g119){
  800920:	d0a77f83 	ldbu	r2,-25090(gp)
  800924:	10803fcc 	andi	r2,r2,255
  800928:	1080201c 	xori	r2,r2,128
  80092c:	10bfe004 	addi	r2,r2,-128
  800930:	10000426 	beq	r2,zero,800944 <tick+0x1b0>
         VPace = 0;
  800934:	d0279445 	stb	zero,-25007(gp)
         APace = 0;
  800938:	d0275585 	stb	zero,-25258(gp)
         AVI_stop = 0;
  80093c:	d0276145 	stb	zero,-25211(gp)
         AVI_start = 0;
  800940:	d0275dc5 	stb	zero,-25225(gp)
      }
      g33 =(PRE_g32);
  800944:	d0a75f43 	ldbu	r2,-25219(gp)
  800948:	d0a778c5 	stb	r2,-25117(gp)
      _cg33 = VSense;
  80094c:	d0a77843 	ldbu	r2,-25119(gp)
  800950:	d0a76345 	stb	r2,-25203(gp)
      g34 =(g33&&_cg33);
  800954:	d0a778c3 	ldbu	r2,-25117(gp)
  800958:	10803fcc 	andi	r2,r2,255
  80095c:	1080201c 	xori	r2,r2,128
  800960:	10bfe004 	addi	r2,r2,-128
  800964:	10000726 	beq	r2,zero,800984 <tick+0x1f0>
  800968:	d0a76343 	ldbu	r2,-25203(gp)
  80096c:	10803fcc 	andi	r2,r2,255
  800970:	1080201c 	xori	r2,r2,128
  800974:	10bfe004 	addi	r2,r2,-128
  800978:	10000226 	beq	r2,zero,800984 <tick+0x1f0>
  80097c:	00800044 	movi	r2,1
  800980:	00000106 	br	800988 <tick+0x1f4>
  800984:	0005883a 	mov	r2,zero
  800988:	d0a76f85 	stb	r2,-25154(gp)
      if(g34){
  80098c:	d0a76f83 	ldbu	r2,-25154(gp)
  800990:	10803fcc 	andi	r2,r2,255
  800994:	1080201c 	xori	r2,r2,128
  800998:	10bfe004 	addi	r2,r2,-128
  80099c:	10000226 	beq	r2,zero,8009a8 <tick+0x214>
         _Pacemaker1_local_LRI_stop =(_Pacemaker1_local_LRI_stop||1);
  8009a0:	00800044 	movi	r2,1
  8009a4:	d0a77985 	stb	r2,-25114(gp)
      }
      g22 =(PRE_g21);
  8009a8:	d0a78d03 	ldbu	r2,-25036(gp)
  8009ac:	d0a79005 	stb	r2,-25024(gp)
      g22b = g22;
  8009b0:	d0a79003 	ldbu	r2,-25024(gp)
  8009b4:	d0a76d05 	stb	r2,-25164(gp)
      _cg22 = _Pacemaker1_local_LRI_stop;
  8009b8:	d0a77983 	ldbu	r2,-25114(gp)
  8009bc:	d0a77f45 	stb	r2,-25091(gp)
      g23 =(g22b&&(!(_cg22)));
  8009c0:	d0a76d03 	ldbu	r2,-25164(gp)
  8009c4:	10803fcc 	andi	r2,r2,255
  8009c8:	1080201c 	xori	r2,r2,128
  8009cc:	10bfe004 	addi	r2,r2,-128
  8009d0:	10000726 	beq	r2,zero,8009f0 <tick+0x25c>
  8009d4:	d0a77f43 	ldbu	r2,-25091(gp)
  8009d8:	10803fcc 	andi	r2,r2,255
  8009dc:	1080201c 	xori	r2,r2,128
  8009e0:	10bfe004 	addi	r2,r2,-128
  8009e4:	1000021e 	bne	r2,zero,8009f0 <tick+0x25c>
  8009e8:	00800044 	movi	r2,1
  8009ec:	00000106 	br	8009f4 <tick+0x260>
  8009f0:	0005883a 	mov	r2,zero
  8009f4:	d0a77445 	stb	r2,-25135(gp)
      _cg23 = LRITO;
  8009f8:	d0a75b43 	ldbu	r2,-25235(gp)
  8009fc:	d0a792c5 	stb	r2,-25013(gp)
      g24 =(g23&&_cg23);
  800a00:	d0a77443 	ldbu	r2,-25135(gp)
  800a04:	10803fcc 	andi	r2,r2,255
  800a08:	1080201c 	xori	r2,r2,128
  800a0c:	10bfe004 	addi	r2,r2,-128
  800a10:	10000726 	beq	r2,zero,800a30 <tick+0x29c>
  800a14:	d0a792c3 	ldbu	r2,-25013(gp)
  800a18:	10803fcc 	andi	r2,r2,255
  800a1c:	1080201c 	xori	r2,r2,128
  800a20:	10bfe004 	addi	r2,r2,-128
  800a24:	10000226 	beq	r2,zero,800a30 <tick+0x29c>
  800a28:	00800044 	movi	r2,1
  800a2c:	00000106 	br	800a34 <tick+0x2a0>
  800a30:	0005883a 	mov	r2,zero
  800a34:	d0a79605 	stb	r2,-25000(gp)
      if(g24){
  800a38:	d0a79603 	ldbu	r2,-25000(gp)
  800a3c:	10803fcc 	andi	r2,r2,255
  800a40:	1080201c 	xori	r2,r2,128
  800a44:	10bfe004 	addi	r2,r2,-128
  800a48:	10000226 	beq	r2,zero,800a54 <tick+0x2c0>
         _Pacemaker1_local_LRI_ex =(_Pacemaker1_local_LRI_ex||1);
  800a4c:	00800044 	movi	r2,1
  800a50:	d0a77a05 	stb	r2,-25112(gp)
      }
      g37 =(g33&&(!(_cg33)));
  800a54:	d0a778c3 	ldbu	r2,-25117(gp)
  800a58:	10803fcc 	andi	r2,r2,255
  800a5c:	1080201c 	xori	r2,r2,128
  800a60:	10bfe004 	addi	r2,r2,-128
  800a64:	10000726 	beq	r2,zero,800a84 <tick+0x2f0>
  800a68:	d0a76343 	ldbu	r2,-25203(gp)
  800a6c:	10803fcc 	andi	r2,r2,255
  800a70:	1080201c 	xori	r2,r2,128
  800a74:	10bfe004 	addi	r2,r2,-128
  800a78:	1000021e 	bne	r2,zero,800a84 <tick+0x2f0>
  800a7c:	00800044 	movi	r2,1
  800a80:	00000106 	br	800a88 <tick+0x2f4>
  800a84:	0005883a 	mov	r2,zero
  800a88:	d0a76605 	stb	r2,-25192(gp)
      _cg37 = _Pacemaker1_local_LRI_ex;
  800a8c:	d0a77a03 	ldbu	r2,-25112(gp)
  800a90:	d0a78545 	stb	r2,-25067(gp)
      g38 =(g37&&_cg37);
  800a94:	d0a76603 	ldbu	r2,-25192(gp)
  800a98:	10803fcc 	andi	r2,r2,255
  800a9c:	1080201c 	xori	r2,r2,128
  800aa0:	10bfe004 	addi	r2,r2,-128
  800aa4:	10000726 	beq	r2,zero,800ac4 <tick+0x330>
  800aa8:	d0a78543 	ldbu	r2,-25067(gp)
  800aac:	10803fcc 	andi	r2,r2,255
  800ab0:	1080201c 	xori	r2,r2,128
  800ab4:	10bfe004 	addi	r2,r2,-128
  800ab8:	10000226 	beq	r2,zero,800ac4 <tick+0x330>
  800abc:	00800044 	movi	r2,1
  800ac0:	00000106 	br	800ac8 <tick+0x334>
  800ac4:	0005883a 	mov	r2,zero
  800ac8:	d0a76ac5 	stb	r2,-25173(gp)
      if(g38){
  800acc:	d0a76ac3 	ldbu	r2,-25173(gp)
  800ad0:	10803fcc 	andi	r2,r2,255
  800ad4:	1080201c 	xori	r2,r2,128
  800ad8:	10bfe004 	addi	r2,r2,-128
  800adc:	10000226 	beq	r2,zero,800ae8 <tick+0x354>
         VPace =(VPace||1);
  800ae0:	00800044 	movi	r2,1
  800ae4:	d0a79445 	stb	r2,-25007(gp)
      }
      g115 =(PRE_g114);
  800ae8:	d0a75ac3 	ldbu	r2,-25237(gp)
  800aec:	d0a75d85 	stb	r2,-25226(gp)
      if(g115){
  800af0:	d0a75d83 	ldbu	r2,-25226(gp)
  800af4:	10803fcc 	andi	r2,r2,255
  800af8:	1080201c 	xori	r2,r2,128
  800afc:	10bfe004 	addi	r2,r2,-128
  800b00:	10000426 	beq	r2,zero,800b14 <tick+0x380>
         _Pacemaker1_local__pre_FilteredVSense21 = _Pacemaker1_local__reg_FilteredVSense21;
  800b04:	d0a76b03 	ldbu	r2,-25172(gp)
  800b08:	d0a776c5 	stb	r2,-25125(gp)
         _Pacemaker1_local__pre_AVI_ex21 = _Pacemaker1_local__reg_AVI_ex21;
  800b0c:	d0a77043 	ldbu	r2,-25151(gp)
  800b10:	d0a75785 	stb	r2,-25250(gp)
      }
      g57 =(PRE_g56);
  800b14:	d0a75e43 	ldbu	r2,-25223(gp)
  800b18:	d0a787c5 	stb	r2,-25057(gp)
      g57b = g57;
  800b1c:	d0a787c3 	ldbu	r2,-25057(gp)
  800b20:	d0a78405 	stb	r2,-25072(gp)
      _cg57 = _Pacemaker1_local__pre_FilteredVSense21;
  800b24:	d0a776c3 	ldbu	r2,-25125(gp)
  800b28:	d0a78e45 	stb	r2,-25031(gp)
      g59 =(g57b&&(!(_cg57)));
  800b2c:	d0a78403 	ldbu	r2,-25072(gp)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	10000726 	beq	r2,zero,800b5c <tick+0x3c8>
  800b40:	d0a78e43 	ldbu	r2,-25031(gp)
  800b44:	10803fcc 	andi	r2,r2,255
  800b48:	1080201c 	xori	r2,r2,128
  800b4c:	10bfe004 	addi	r2,r2,-128
  800b50:	1000021e 	bne	r2,zero,800b5c <tick+0x3c8>
  800b54:	00800044 	movi	r2,1
  800b58:	00000106 	br	800b60 <tick+0x3cc>
  800b5c:	0005883a 	mov	r2,zero
  800b60:	d0a77345 	stb	r2,-25139(gp)
      _cg59 = VPace;
  800b64:	d0a79443 	ldbu	r2,-25007(gp)
  800b68:	d0a75705 	stb	r2,-25252(gp)
      g60 =(g59&&(!(_cg59)));
  800b6c:	d0a77343 	ldbu	r2,-25139(gp)
  800b70:	10803fcc 	andi	r2,r2,255
  800b74:	1080201c 	xori	r2,r2,128
  800b78:	10bfe004 	addi	r2,r2,-128
  800b7c:	10000726 	beq	r2,zero,800b9c <tick+0x408>
  800b80:	d0a75703 	ldbu	r2,-25252(gp)
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1080201c 	xori	r2,r2,128
  800b8c:	10bfe004 	addi	r2,r2,-128
  800b90:	1000021e 	bne	r2,zero,800b9c <tick+0x408>
  800b94:	00800044 	movi	r2,1
  800b98:	00000106 	br	800ba0 <tick+0x40c>
  800b9c:	0005883a 	mov	r2,zero
  800ba0:	d0a77e45 	stb	r2,-25095(gp)
      _cg60 = _Pacemaker1_local__pre_AVI_ex21;
  800ba4:	d0a75783 	ldbu	r2,-25250(gp)
  800ba8:	d0a77b05 	stb	r2,-25108(gp)
      g61 =(g60&&_cg60);
  800bac:	d0a77e43 	ldbu	r2,-25095(gp)
  800bb0:	10803fcc 	andi	r2,r2,255
  800bb4:	1080201c 	xori	r2,r2,128
  800bb8:	10bfe004 	addi	r2,r2,-128
  800bbc:	10000726 	beq	r2,zero,800bdc <tick+0x448>
  800bc0:	d0a77b03 	ldbu	r2,-25108(gp)
  800bc4:	10803fcc 	andi	r2,r2,255
  800bc8:	1080201c 	xori	r2,r2,128
  800bcc:	10bfe004 	addi	r2,r2,-128
  800bd0:	10000226 	beq	r2,zero,800bdc <tick+0x448>
  800bd4:	00800044 	movi	r2,1
  800bd8:	00000106 	br	800be0 <tick+0x44c>
  800bdc:	0005883a 	mov	r2,zero
  800be0:	d0a76245 	stb	r2,-25207(gp)
      if(g61){
  800be4:	d0a76243 	ldbu	r2,-25207(gp)
  800be8:	10803fcc 	andi	r2,r2,255
  800bec:	1080201c 	xori	r2,r2,128
  800bf0:	10bfe004 	addi	r2,r2,-128
  800bf4:	10000226 	beq	r2,zero,800c00 <tick+0x46c>
         VPace =(VPace||1);
  800bf8:	00800044 	movi	r2,1
  800bfc:	d0a79445 	stb	r2,-25007(gp)
      }
      g58 =((g59&&_cg59)||g61||(g57b&&_cg57));
  800c00:	d0a77343 	ldbu	r2,-25139(gp)
  800c04:	10803fcc 	andi	r2,r2,255
  800c08:	1080201c 	xori	r2,r2,128
  800c0c:	10bfe004 	addi	r2,r2,-128
  800c10:	10000526 	beq	r2,zero,800c28 <tick+0x494>
  800c14:	d0a75703 	ldbu	r2,-25252(gp)
  800c18:	10803fcc 	andi	r2,r2,255
  800c1c:	1080201c 	xori	r2,r2,128
  800c20:	10bfe004 	addi	r2,r2,-128
  800c24:	10000f1e 	bne	r2,zero,800c64 <tick+0x4d0>
  800c28:	d0a76243 	ldbu	r2,-25207(gp)
  800c2c:	10803fcc 	andi	r2,r2,255
  800c30:	1080201c 	xori	r2,r2,128
  800c34:	10bfe004 	addi	r2,r2,-128
  800c38:	10000a1e 	bne	r2,zero,800c64 <tick+0x4d0>
  800c3c:	d0a78403 	ldbu	r2,-25072(gp)
  800c40:	10803fcc 	andi	r2,r2,255
  800c44:	1080201c 	xori	r2,r2,128
  800c48:	10bfe004 	addi	r2,r2,-128
  800c4c:	10000726 	beq	r2,zero,800c6c <tick+0x4d8>
  800c50:	d0a78e43 	ldbu	r2,-25031(gp)
  800c54:	10803fcc 	andi	r2,r2,255
  800c58:	1080201c 	xori	r2,r2,128
  800c5c:	10bfe004 	addi	r2,r2,-128
  800c60:	10000226 	beq	r2,zero,800c6c <tick+0x4d8>
  800c64:	00800044 	movi	r2,1
  800c68:	00000106 	br	800c70 <tick+0x4dc>
  800c6c:	0005883a 	mov	r2,zero
  800c70:	d0a78dc5 	stb	r2,-25033(gp)
      if(g58){
  800c74:	d0a78dc3 	ldbu	r2,-25033(gp)
  800c78:	10803fcc 	andi	r2,r2,255
  800c7c:	1080201c 	xori	r2,r2,128
  800c80:	10bfe004 	addi	r2,r2,-128
  800c84:	10000226 	beq	r2,zero,800c90 <tick+0x4fc>
         _Pacemaker1_local_AVI_stop =(_Pacemaker1_local_AVI_stop||1);
  800c88:	00800044 	movi	r2,1
  800c8c:	d0a78945 	stb	r2,-25051(gp)
      }
      g53 =(PRE_g52);
  800c90:	d0a77803 	ldbu	r2,-25120(gp)
  800c94:	d0a78745 	stb	r2,-25059(gp)
      g53b = g53;
  800c98:	d0a78743 	ldbu	r2,-25059(gp)
  800c9c:	d0a78245 	stb	r2,-25079(gp)
      _cg53 = _Pacemaker1_local__pre_FilteredVSense21;
  800ca0:	d0a776c3 	ldbu	r2,-25125(gp)
  800ca4:	d0a77285 	stb	r2,-25142(gp)
      g54 =(g53b&&_cg53);
  800ca8:	d0a78243 	ldbu	r2,-25079(gp)
  800cac:	10803fcc 	andi	r2,r2,255
  800cb0:	1080201c 	xori	r2,r2,128
  800cb4:	10bfe004 	addi	r2,r2,-128
  800cb8:	10000726 	beq	r2,zero,800cd8 <tick+0x544>
  800cbc:	d0a77283 	ldbu	r2,-25142(gp)
  800cc0:	10803fcc 	andi	r2,r2,255
  800cc4:	1080201c 	xori	r2,r2,128
  800cc8:	10bfe004 	addi	r2,r2,-128
  800ccc:	10000226 	beq	r2,zero,800cd8 <tick+0x544>
  800cd0:	00800044 	movi	r2,1
  800cd4:	00000106 	br	800cdc <tick+0x548>
  800cd8:	0005883a 	mov	r2,zero
  800cdc:	d0a773c5 	stb	r2,-25137(gp)
      if(g54){
  800ce0:	d0a773c3 	ldbu	r2,-25137(gp)
  800ce4:	10803fcc 	andi	r2,r2,255
  800ce8:	1080201c 	xori	r2,r2,128
  800cec:	10bfe004 	addi	r2,r2,-128
  800cf0:	10000226 	beq	r2,zero,800cfc <tick+0x568>
         _Pacemaker1_local_AVI_stop =(_Pacemaker1_local_AVI_stop||1);
  800cf4:	00800044 	movi	r2,1
  800cf8:	d0a78945 	stb	r2,-25051(gp)
      }
      g4 =(PRE_g3);
  800cfc:	d0a75d03 	ldbu	r2,-25228(gp)
  800d00:	d0a755c5 	stb	r2,-25257(gp)
      g4b = g4;
  800d04:	d0a755c3 	ldbu	r2,-25257(gp)
  800d08:	d0a79685 	stb	r2,-24998(gp)
      _cg4 = _Pacemaker1_local_AVI_stop;
  800d0c:	d0a78943 	ldbu	r2,-25051(gp)
  800d10:	d0a79585 	stb	r2,-25002(gp)
      g3 =(g7||g2||(g4b&&(!(_cg4))));
  800d14:	d0a77203 	ldbu	r2,-25144(gp)
  800d18:	10803fcc 	andi	r2,r2,255
  800d1c:	1080201c 	xori	r2,r2,128
  800d20:	10bfe004 	addi	r2,r2,-128
  800d24:	10000f1e 	bne	r2,zero,800d64 <tick+0x5d0>
  800d28:	d0a771c3 	ldbu	r2,-25145(gp)
  800d2c:	10803fcc 	andi	r2,r2,255
  800d30:	1080201c 	xori	r2,r2,128
  800d34:	10bfe004 	addi	r2,r2,-128
  800d38:	10000a1e 	bne	r2,zero,800d64 <tick+0x5d0>
  800d3c:	d0a79683 	ldbu	r2,-24998(gp)
  800d40:	10803fcc 	andi	r2,r2,255
  800d44:	1080201c 	xori	r2,r2,128
  800d48:	10bfe004 	addi	r2,r2,-128
  800d4c:	10000726 	beq	r2,zero,800d6c <tick+0x5d8>
  800d50:	d0a79583 	ldbu	r2,-25002(gp)
  800d54:	10803fcc 	andi	r2,r2,255
  800d58:	1080201c 	xori	r2,r2,128
  800d5c:	10bfe004 	addi	r2,r2,-128
  800d60:	1000021e 	bne	r2,zero,800d6c <tick+0x5d8>
  800d64:	00800044 	movi	r2,1
  800d68:	00000106 	br	800d70 <tick+0x5dc>
  800d6c:	0005883a 	mov	r2,zero
  800d70:	d0a75885 	stb	r2,-25246(gp)
      g5 =((g6&&(!(_cg6)))||(g4b&&_cg4));
  800d74:	d0a789c3 	ldbu	r2,-25049(gp)
  800d78:	10803fcc 	andi	r2,r2,255
  800d7c:	1080201c 	xori	r2,r2,128
  800d80:	10bfe004 	addi	r2,r2,-128
  800d84:	10000526 	beq	r2,zero,800d9c <tick+0x608>
  800d88:	d0a775c3 	ldbu	r2,-25129(gp)
  800d8c:	10803fcc 	andi	r2,r2,255
  800d90:	1080201c 	xori	r2,r2,128
  800d94:	10bfe004 	addi	r2,r2,-128
  800d98:	10000a26 	beq	r2,zero,800dc4 <tick+0x630>
  800d9c:	d0a79683 	ldbu	r2,-24998(gp)
  800da0:	10803fcc 	andi	r2,r2,255
  800da4:	1080201c 	xori	r2,r2,128
  800da8:	10bfe004 	addi	r2,r2,-128
  800dac:	10000726 	beq	r2,zero,800dcc <tick+0x638>
  800db0:	d0a79583 	ldbu	r2,-25002(gp)
  800db4:	10803fcc 	andi	r2,r2,255
  800db8:	1080201c 	xori	r2,r2,128
  800dbc:	10bfe004 	addi	r2,r2,-128
  800dc0:	10000226 	beq	r2,zero,800dcc <tick+0x638>
  800dc4:	00800044 	movi	r2,1
  800dc8:	00000106 	br	800dd0 <tick+0x63c>
  800dcc:	0005883a 	mov	r2,zero
  800dd0:	d0a76fc5 	stb	r2,-25153(gp)
      g9 = g1;
  800dd4:	d0a76203 	ldbu	r2,-25208(gp)
  800dd8:	d0a75b05 	stb	r2,-25236(gp)
      g11 =(PRE_g10);
  800ddc:	d0a769c3 	ldbu	r2,-25177(gp)
  800de0:	d0a78f45 	stb	r2,-25027(gp)
      g11b = g11;
  800de4:	d0a78f43 	ldbu	r2,-25027(gp)
  800de8:	d0a781c5 	stb	r2,-25081(gp)
      _cg11 = _Pacemaker1_local_AVI_stop;
  800dec:	d0a78943 	ldbu	r2,-25051(gp)
  800df0:	d0a78145 	stb	r2,-25083(gp)
      g15 =(g11b&&(!(_cg11)));
  800df4:	d0a781c3 	ldbu	r2,-25081(gp)
  800df8:	10803fcc 	andi	r2,r2,255
  800dfc:	1080201c 	xori	r2,r2,128
  800e00:	10bfe004 	addi	r2,r2,-128
  800e04:	10000726 	beq	r2,zero,800e24 <tick+0x690>
  800e08:	d0a78143 	ldbu	r2,-25083(gp)
  800e0c:	10803fcc 	andi	r2,r2,255
  800e10:	1080201c 	xori	r2,r2,128
  800e14:	10bfe004 	addi	r2,r2,-128
  800e18:	1000021e 	bne	r2,zero,800e24 <tick+0x690>
  800e1c:	00800044 	movi	r2,1
  800e20:	00000106 	br	800e28 <tick+0x694>
  800e24:	0005883a 	mov	r2,zero
  800e28:	d0a77c05 	stb	r2,-25104(gp)
      _cg15 = VSense;
  800e2c:	d0a77843 	ldbu	r2,-25119(gp)
  800e30:	d0a75e05 	stb	r2,-25224(gp)
      g14 =(PRE_g13);
  800e34:	d0a75e83 	ldbu	r2,-25222(gp)
  800e38:	d0a77505 	stb	r2,-25132(gp)
      g14b = g14;
  800e3c:	d0a77503 	ldbu	r2,-25132(gp)
  800e40:	d0a76d45 	stb	r2,-25163(gp)
      _cg14 = _Pacemaker1_local_VRP_ex;
  800e44:	d0a76a83 	ldbu	r2,-25174(gp)
  800e48:	d0a76ec5 	stb	r2,-25157(gp)
      g16 =(g15&&_cg15);
  800e4c:	d0a77c03 	ldbu	r2,-25104(gp)
  800e50:	10803fcc 	andi	r2,r2,255
  800e54:	1080201c 	xori	r2,r2,128
  800e58:	10bfe004 	addi	r2,r2,-128
  800e5c:	10000726 	beq	r2,zero,800e7c <tick+0x6e8>
  800e60:	d0a75e03 	ldbu	r2,-25224(gp)
  800e64:	10803fcc 	andi	r2,r2,255
  800e68:	1080201c 	xori	r2,r2,128
  800e6c:	10bfe004 	addi	r2,r2,-128
  800e70:	10000226 	beq	r2,zero,800e7c <tick+0x6e8>
  800e74:	00800044 	movi	r2,1
  800e78:	00000106 	br	800e80 <tick+0x6ec>
  800e7c:	0005883a 	mov	r2,zero
  800e80:	d0a78d45 	stb	r2,-25035(gp)
      if(g16){
  800e84:	d0a78d43 	ldbu	r2,-25035(gp)
  800e88:	10803fcc 	andi	r2,r2,255
  800e8c:	1080201c 	xori	r2,r2,128
  800e90:	10bfe004 	addi	r2,r2,-128
  800e94:	10000226 	beq	r2,zero,800ea0 <tick+0x70c>
         _Pacemaker1_local_FilteredVSense =(_Pacemaker1_local_FilteredVSense||1);
  800e98:	00800044 	movi	r2,1
  800e9c:	d0a77705 	stb	r2,-25124(gp)
      }
      g10 =((g15&&(!(_cg15)))||(g14b&&_cg14)||g9||g16);
  800ea0:	d0a77c03 	ldbu	r2,-25104(gp)
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1080201c 	xori	r2,r2,128
  800eac:	10bfe004 	addi	r2,r2,-128
  800eb0:	10000526 	beq	r2,zero,800ec8 <tick+0x734>
  800eb4:	d0a75e03 	ldbu	r2,-25224(gp)
  800eb8:	10803fcc 	andi	r2,r2,255
  800ebc:	1080201c 	xori	r2,r2,128
  800ec0:	10bfe004 	addi	r2,r2,-128
  800ec4:	10001426 	beq	r2,zero,800f18 <tick+0x784>
  800ec8:	d0a76d43 	ldbu	r2,-25163(gp)
  800ecc:	10803fcc 	andi	r2,r2,255
  800ed0:	1080201c 	xori	r2,r2,128
  800ed4:	10bfe004 	addi	r2,r2,-128
  800ed8:	10000526 	beq	r2,zero,800ef0 <tick+0x75c>
  800edc:	d0a76ec3 	ldbu	r2,-25157(gp)
  800ee0:	10803fcc 	andi	r2,r2,255
  800ee4:	1080201c 	xori	r2,r2,128
  800ee8:	10bfe004 	addi	r2,r2,-128
  800eec:	10000a1e 	bne	r2,zero,800f18 <tick+0x784>
  800ef0:	d0a75b03 	ldbu	r2,-25236(gp)
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	1080201c 	xori	r2,r2,128
  800efc:	10bfe004 	addi	r2,r2,-128
  800f00:	1000051e 	bne	r2,zero,800f18 <tick+0x784>
  800f04:	d0a78d43 	ldbu	r2,-25035(gp)
  800f08:	10803fcc 	andi	r2,r2,255
  800f0c:	1080201c 	xori	r2,r2,128
  800f10:	10bfe004 	addi	r2,r2,-128
  800f14:	10000226 	beq	r2,zero,800f20 <tick+0x78c>
  800f18:	00800044 	movi	r2,1
  800f1c:	00000106 	br	800f24 <tick+0x790>
  800f20:	0005883a 	mov	r2,zero
  800f24:	d0a79745 	stb	r2,-24995(gp)
      g12 =(g11b&&_cg11);
  800f28:	d0a781c3 	ldbu	r2,-25081(gp)
  800f2c:	10803fcc 	andi	r2,r2,255
  800f30:	1080201c 	xori	r2,r2,128
  800f34:	10bfe004 	addi	r2,r2,-128
  800f38:	10000726 	beq	r2,zero,800f58 <tick+0x7c4>
  800f3c:	d0a78143 	ldbu	r2,-25083(gp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	10000226 	beq	r2,zero,800f58 <tick+0x7c4>
  800f50:	00800044 	movi	r2,1
  800f54:	00000106 	br	800f5c <tick+0x7c8>
  800f58:	0005883a 	mov	r2,zero
  800f5c:	d0a763c5 	stb	r2,-25201(gp)
      if(g12){
  800f60:	d0a763c3 	ldbu	r2,-25201(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000226 	beq	r2,zero,800f7c <tick+0x7e8>
         _Pacemaker1_local_VRP_start =(_Pacemaker1_local_VRP_start||1);
  800f74:	00800044 	movi	r2,1
  800f78:	d0a75845 	stb	r2,-25247(gp)
      }
      g13 =(g12||(g14b&&(!(_cg14))));
  800f7c:	d0a763c3 	ldbu	r2,-25201(gp)
  800f80:	10803fcc 	andi	r2,r2,255
  800f84:	1080201c 	xori	r2,r2,128
  800f88:	10bfe004 	addi	r2,r2,-128
  800f8c:	10000a1e 	bne	r2,zero,800fb8 <tick+0x824>
  800f90:	d0a76d43 	ldbu	r2,-25163(gp)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080201c 	xori	r2,r2,128
  800f9c:	10bfe004 	addi	r2,r2,-128
  800fa0:	10000726 	beq	r2,zero,800fc0 <tick+0x82c>
  800fa4:	d0a76ec3 	ldbu	r2,-25157(gp)
  800fa8:	10803fcc 	andi	r2,r2,255
  800fac:	1080201c 	xori	r2,r2,128
  800fb0:	10bfe004 	addi	r2,r2,-128
  800fb4:	1000021e 	bne	r2,zero,800fc0 <tick+0x82c>
  800fb8:	00800044 	movi	r2,1
  800fbc:	00000106 	br	800fc4 <tick+0x830>
  800fc0:	0005883a 	mov	r2,zero
  800fc4:	d0a78685 	stb	r2,-25062(gp)
      g18 = g1;
  800fc8:	d0a76203 	ldbu	r2,-25208(gp)
  800fcc:	d0a76885 	stb	r2,-25182(gp)
      g20 =(PRE_g19);
  800fd0:	d0a77e83 	ldbu	r2,-25094(gp)
  800fd4:	d0a77dc5 	stb	r2,-25097(gp)
      g20b = g20;
  800fd8:	d0a77dc3 	ldbu	r2,-25097(gp)
  800fdc:	d0a791c5 	stb	r2,-25017(gp)
      _cg20 = _Pacemaker1_local_AVI_stop;
  800fe0:	d0a78943 	ldbu	r2,-25051(gp)
  800fe4:	d0a76bc5 	stb	r2,-25169(gp)
      g19 =(g18||(g20b&&(!(_cg20)))||(g22b&&_cg22)||g24);
  800fe8:	d0a76883 	ldbu	r2,-25182(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	1000191e 	bne	r2,zero,801060 <tick+0x8cc>
  800ffc:	d0a791c3 	ldbu	r2,-25017(gp)
  801000:	10803fcc 	andi	r2,r2,255
  801004:	1080201c 	xori	r2,r2,128
  801008:	10bfe004 	addi	r2,r2,-128
  80100c:	10000526 	beq	r2,zero,801024 <tick+0x890>
  801010:	d0a76bc3 	ldbu	r2,-25169(gp)
  801014:	10803fcc 	andi	r2,r2,255
  801018:	1080201c 	xori	r2,r2,128
  80101c:	10bfe004 	addi	r2,r2,-128
  801020:	10000f26 	beq	r2,zero,801060 <tick+0x8cc>
  801024:	d0a76d03 	ldbu	r2,-25164(gp)
  801028:	10803fcc 	andi	r2,r2,255
  80102c:	1080201c 	xori	r2,r2,128
  801030:	10bfe004 	addi	r2,r2,-128
  801034:	10000526 	beq	r2,zero,80104c <tick+0x8b8>
  801038:	d0a77f43 	ldbu	r2,-25091(gp)
  80103c:	10803fcc 	andi	r2,r2,255
  801040:	1080201c 	xori	r2,r2,128
  801044:	10bfe004 	addi	r2,r2,-128
  801048:	1000051e 	bne	r2,zero,801060 <tick+0x8cc>
  80104c:	d0a79603 	ldbu	r2,-25000(gp)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	10000226 	beq	r2,zero,801068 <tick+0x8d4>
  801060:	00800044 	movi	r2,1
  801064:	00000106 	br	80106c <tick+0x8d8>
  801068:	0005883a 	mov	r2,zero
  80106c:	d0a75645 	stb	r2,-25255(gp)
      g21 =((g20b&&_cg20)||(g23&&(!(_cg23))));
  801070:	d0a791c3 	ldbu	r2,-25017(gp)
  801074:	10803fcc 	andi	r2,r2,255
  801078:	1080201c 	xori	r2,r2,128
  80107c:	10bfe004 	addi	r2,r2,-128
  801080:	10000526 	beq	r2,zero,801098 <tick+0x904>
  801084:	d0a76bc3 	ldbu	r2,-25169(gp)
  801088:	10803fcc 	andi	r2,r2,255
  80108c:	1080201c 	xori	r2,r2,128
  801090:	10bfe004 	addi	r2,r2,-128
  801094:	10000a1e 	bne	r2,zero,8010c0 <tick+0x92c>
  801098:	d0a77443 	ldbu	r2,-25135(gp)
  80109c:	10803fcc 	andi	r2,r2,255
  8010a0:	1080201c 	xori	r2,r2,128
  8010a4:	10bfe004 	addi	r2,r2,-128
  8010a8:	10000726 	beq	r2,zero,8010c8 <tick+0x934>
  8010ac:	d0a792c3 	ldbu	r2,-25013(gp)
  8010b0:	10803fcc 	andi	r2,r2,255
  8010b4:	1080201c 	xori	r2,r2,128
  8010b8:	10bfe004 	addi	r2,r2,-128
  8010bc:	1000021e 	bne	r2,zero,8010c8 <tick+0x934>
  8010c0:	00800044 	movi	r2,1
  8010c4:	00000106 	br	8010cc <tick+0x938>
  8010c8:	0005883a 	mov	r2,zero
  8010cc:	d0a76e05 	stb	r2,-25160(gp)
      g26 = g1;
  8010d0:	d0a76203 	ldbu	r2,-25208(gp)
  8010d4:	d0a79845 	stb	r2,-24991(gp)
      g28 =(PRE_g27);
  8010d8:	d0a759c3 	ldbu	r2,-25241(gp)
  8010dc:	d0a79045 	stb	r2,-25023(gp)
      _cg28 = VSense;
  8010e0:	d0a77843 	ldbu	r2,-25119(gp)
  8010e4:	d0a76d85 	stb	r2,-25162(gp)
      g27 =((g28&&(!(_cg28)))||g26);
  8010e8:	d0a79043 	ldbu	r2,-25023(gp)
  8010ec:	10803fcc 	andi	r2,r2,255
  8010f0:	1080201c 	xori	r2,r2,128
  8010f4:	10bfe004 	addi	r2,r2,-128
  8010f8:	10000526 	beq	r2,zero,801110 <tick+0x97c>
  8010fc:	d0a76d83 	ldbu	r2,-25162(gp)
  801100:	10803fcc 	andi	r2,r2,255
  801104:	1080201c 	xori	r2,r2,128
  801108:	10bfe004 	addi	r2,r2,-128
  80110c:	10000526 	beq	r2,zero,801124 <tick+0x990>
  801110:	d0a79843 	ldbu	r2,-24991(gp)
  801114:	10803fcc 	andi	r2,r2,255
  801118:	1080201c 	xori	r2,r2,128
  80111c:	10bfe004 	addi	r2,r2,-128
  801120:	10000226 	beq	r2,zero,80112c <tick+0x998>
  801124:	00800044 	movi	r2,1
  801128:	00000106 	br	801130 <tick+0x99c>
  80112c:	0005883a 	mov	r2,zero
  801130:	d0a75745 	stb	r2,-25251(gp)
      g29 =(g28&&_cg28);
  801134:	d0a79043 	ldbu	r2,-25023(gp)
  801138:	10803fcc 	andi	r2,r2,255
  80113c:	1080201c 	xori	r2,r2,128
  801140:	10bfe004 	addi	r2,r2,-128
  801144:	10000726 	beq	r2,zero,801164 <tick+0x9d0>
  801148:	d0a76d83 	ldbu	r2,-25162(gp)
  80114c:	10803fcc 	andi	r2,r2,255
  801150:	1080201c 	xori	r2,r2,128
  801154:	10bfe004 	addi	r2,r2,-128
  801158:	10000226 	beq	r2,zero,801164 <tick+0x9d0>
  80115c:	00800044 	movi	r2,1
  801160:	00000106 	br	801168 <tick+0x9d4>
  801164:	0005883a 	mov	r2,zero
  801168:	d0a79545 	stb	r2,-25003(gp)
      if(g29){
  80116c:	d0a79543 	ldbu	r2,-25003(gp)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	10000226 	beq	r2,zero,801188 <tick+0x9f4>
         _Pacemaker1_local_LRI_start =(_Pacemaker1_local_LRI_start||1);
  801180:	00800044 	movi	r2,1
  801184:	d0a75945 	stb	r2,-25243(gp)
      }
      g36 =(PRE_g35);
  801188:	d0a76a43 	ldbu	r2,-25175(gp)
  80118c:	d0a782c5 	stb	r2,-25077(gp)
      g36b = g36;
  801190:	d0a782c3 	ldbu	r2,-25077(gp)
  801194:	d0a78905 	stb	r2,-25052(gp)
      if(g36b){
  801198:	d0a78903 	ldbu	r2,-25052(gp)
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	1080201c 	xori	r2,r2,128
  8011a4:	10bfe004 	addi	r2,r2,-128
  8011a8:	10000226 	beq	r2,zero,8011b4 <tick+0xa20>
         _Pacemaker1_local_LRI_start =(_Pacemaker1_local_LRI_start||1);
  8011ac:	00800044 	movi	r2,1
  8011b0:	d0a75945 	stb	r2,-25243(gp)
      }
      g31 =(PRE_g30);
  8011b4:	d0a793c3 	ldbu	r2,-25009(gp)
  8011b8:	d0a765c5 	stb	r2,-25193(gp)
      g31b = g31;
  8011bc:	d0a765c3 	ldbu	r2,-25193(gp)
  8011c0:	d0a75905 	stb	r2,-25244(gp)
      _cg31 = _Pacemaker1_local_VRP_ex;
  8011c4:	d0a76a83 	ldbu	r2,-25174(gp)
  8011c8:	d0a79705 	stb	r2,-24996(gp)
      g30 =(g29||g36b||(g31b&&(!(_cg31))));
  8011cc:	d0a79543 	ldbu	r2,-25003(gp)
  8011d0:	10803fcc 	andi	r2,r2,255
  8011d4:	1080201c 	xori	r2,r2,128
  8011d8:	10bfe004 	addi	r2,r2,-128
  8011dc:	10000f1e 	bne	r2,zero,80121c <tick+0xa88>
  8011e0:	d0a78903 	ldbu	r2,-25052(gp)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	1080201c 	xori	r2,r2,128
  8011ec:	10bfe004 	addi	r2,r2,-128
  8011f0:	10000a1e 	bne	r2,zero,80121c <tick+0xa88>
  8011f4:	d0a75903 	ldbu	r2,-25244(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	10000726 	beq	r2,zero,801224 <tick+0xa90>
  801208:	d0a79703 	ldbu	r2,-24996(gp)
  80120c:	10803fcc 	andi	r2,r2,255
  801210:	1080201c 	xori	r2,r2,128
  801214:	10bfe004 	addi	r2,r2,-128
  801218:	1000021e 	bne	r2,zero,801224 <tick+0xa90>
  80121c:	00800044 	movi	r2,1
  801220:	00000106 	br	801228 <tick+0xa94>
  801224:	0005883a 	mov	r2,zero
  801228:	d0a78c85 	stb	r2,-25038(gp)
      g32 =((g31b&&_cg31)||(g37&&(!(_cg37))));
  80122c:	d0a75903 	ldbu	r2,-25244(gp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	10000526 	beq	r2,zero,801254 <tick+0xac0>
  801240:	d0a79703 	ldbu	r2,-24996(gp)
  801244:	10803fcc 	andi	r2,r2,255
  801248:	1080201c 	xori	r2,r2,128
  80124c:	10bfe004 	addi	r2,r2,-128
  801250:	10000a1e 	bne	r2,zero,80127c <tick+0xae8>
  801254:	d0a76603 	ldbu	r2,-25192(gp)
  801258:	10803fcc 	andi	r2,r2,255
  80125c:	1080201c 	xori	r2,r2,128
  801260:	10bfe004 	addi	r2,r2,-128
  801264:	10000726 	beq	r2,zero,801284 <tick+0xaf0>
  801268:	d0a78543 	ldbu	r2,-25067(gp)
  80126c:	10803fcc 	andi	r2,r2,255
  801270:	1080201c 	xori	r2,r2,128
  801274:	10bfe004 	addi	r2,r2,-128
  801278:	1000021e 	bne	r2,zero,801284 <tick+0xaf0>
  80127c:	00800044 	movi	r2,1
  801280:	00000106 	br	801288 <tick+0xaf4>
  801284:	0005883a 	mov	r2,zero
  801288:	d0a79145 	stb	r2,-25019(gp)
      g35 =(g38||g34);
  80128c:	d0a76ac3 	ldbu	r2,-25173(gp)
  801290:	10803fcc 	andi	r2,r2,255
  801294:	1080201c 	xori	r2,r2,128
  801298:	10bfe004 	addi	r2,r2,-128
  80129c:	1000051e 	bne	r2,zero,8012b4 <tick+0xb20>
  8012a0:	d0a76f83 	ldbu	r2,-25154(gp)
  8012a4:	10803fcc 	andi	r2,r2,255
  8012a8:	1080201c 	xori	r2,r2,128
  8012ac:	10bfe004 	addi	r2,r2,-128
  8012b0:	10000226 	beq	r2,zero,8012bc <tick+0xb28>
  8012b4:	00800044 	movi	r2,1
  8012b8:	00000106 	br	8012c0 <tick+0xb2c>
  8012bc:	0005883a 	mov	r2,zero
  8012c0:	d0a77bc5 	stb	r2,-25105(gp)
      g40 = g1;
  8012c4:	d0a76203 	ldbu	r2,-25208(gp)
  8012c8:	d0a754c5 	stb	r2,-25261(gp)
      g44 =(PRE_g43);
  8012cc:	d0a78103 	ldbu	r2,-25084(gp)
  8012d0:	d0a76005 	stb	r2,-25216(gp)
      g44b = g44;
  8012d4:	d0a76003 	ldbu	r2,-25216(gp)
  8012d8:	d0a75805 	stb	r2,-25248(gp)
      _cg44 = _Pacemaker1_local_AVI_stop;
  8012dc:	d0a78943 	ldbu	r2,-25051(gp)
  8012e0:	d0a774c5 	stb	r2,-25133(gp)
      g45 =(g44b&&(!(_cg44)));
  8012e4:	d0a75803 	ldbu	r2,-25248(gp)
  8012e8:	10803fcc 	andi	r2,r2,255
  8012ec:	1080201c 	xori	r2,r2,128
  8012f0:	10bfe004 	addi	r2,r2,-128
  8012f4:	10000726 	beq	r2,zero,801314 <tick+0xb80>
  8012f8:	d0a774c3 	ldbu	r2,-25133(gp)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	1000021e 	bne	r2,zero,801314 <tick+0xb80>
  80130c:	00800044 	movi	r2,1
  801310:	00000106 	br	801318 <tick+0xb84>
  801314:	0005883a 	mov	r2,zero
  801318:	d0a79245 	stb	r2,-25015(gp)
      _cg45 = AVITO;
  80131c:	d0a77e03 	ldbu	r2,-25096(gp)
  801320:	d0a76085 	stb	r2,-25214(gp)
      g46 =(g45&&_cg45);
  801324:	d0a79243 	ldbu	r2,-25015(gp)
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	1080201c 	xori	r2,r2,128
  801330:	10bfe004 	addi	r2,r2,-128
  801334:	10000726 	beq	r2,zero,801354 <tick+0xbc0>
  801338:	d0a76083 	ldbu	r2,-25214(gp)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080201c 	xori	r2,r2,128
  801344:	10bfe004 	addi	r2,r2,-128
  801348:	10000226 	beq	r2,zero,801354 <tick+0xbc0>
  80134c:	00800044 	movi	r2,1
  801350:	00000106 	br	801358 <tick+0xbc4>
  801354:	0005883a 	mov	r2,zero
  801358:	d0a78385 	stb	r2,-25074(gp)
      if(g46){
  80135c:	d0a78383 	ldbu	r2,-25074(gp)
  801360:	10803fcc 	andi	r2,r2,255
  801364:	1080201c 	xori	r2,r2,128
  801368:	10bfe004 	addi	r2,r2,-128
  80136c:	10000226 	beq	r2,zero,801378 <tick+0xbe4>
         _Pacemaker1_local_AVI_ex =(_Pacemaker1_local_AVI_ex||1);
  801370:	00800044 	movi	r2,1
  801374:	d0a78185 	stb	r2,-25082(gp)
      }
      g84 =(PRE_g83);
  801378:	d0a77b43 	ldbu	r2,-25107(gp)
  80137c:	d0a766c5 	stb	r2,-25189(gp)
      g84b = g84;
  801380:	d0a766c3 	ldbu	r2,-25189(gp)
  801384:	d0a77fc5 	stb	r2,-25089(gp)
      _cg84 = _Pacemaker1_local_AEI_stop;
  801388:	d0a798c3 	ldbu	r2,-24989(gp)
  80138c:	d0a76045 	stb	r2,-25215(gp)
      g85 =(g84b&&(!(_cg84)));
  801390:	d0a77fc3 	ldbu	r2,-25089(gp)
  801394:	10803fcc 	andi	r2,r2,255
  801398:	1080201c 	xori	r2,r2,128
  80139c:	10bfe004 	addi	r2,r2,-128
  8013a0:	10000726 	beq	r2,zero,8013c0 <tick+0xc2c>
  8013a4:	d0a76043 	ldbu	r2,-25215(gp)
  8013a8:	10803fcc 	andi	r2,r2,255
  8013ac:	1080201c 	xori	r2,r2,128
  8013b0:	10bfe004 	addi	r2,r2,-128
  8013b4:	1000021e 	bne	r2,zero,8013c0 <tick+0xc2c>
  8013b8:	00800044 	movi	r2,1
  8013bc:	00000106 	br	8013c4 <tick+0xc30>
  8013c0:	0005883a 	mov	r2,zero
  8013c4:	d0a75a45 	stb	r2,-25239(gp)
      _cg85 = AEITO;
  8013c8:	d0a797c3 	ldbu	r2,-24993(gp)
  8013cc:	d0a764c5 	stb	r2,-25197(gp)
      g86 =(g85&&_cg85);
  8013d0:	d0a75a43 	ldbu	r2,-25239(gp)
  8013d4:	10803fcc 	andi	r2,r2,255
  8013d8:	1080201c 	xori	r2,r2,128
  8013dc:	10bfe004 	addi	r2,r2,-128
  8013e0:	10000726 	beq	r2,zero,801400 <tick+0xc6c>
  8013e4:	d0a764c3 	ldbu	r2,-25197(gp)
  8013e8:	10803fcc 	andi	r2,r2,255
  8013ec:	1080201c 	xori	r2,r2,128
  8013f0:	10bfe004 	addi	r2,r2,-128
  8013f4:	10000226 	beq	r2,zero,801400 <tick+0xc6c>
  8013f8:	00800044 	movi	r2,1
  8013fc:	00000106 	br	801404 <tick+0xc70>
  801400:	0005883a 	mov	r2,zero
  801404:	d0a78085 	stb	r2,-25086(gp)
      if(g86){
  801408:	d0a78083 	ldbu	r2,-25086(gp)
  80140c:	10803fcc 	andi	r2,r2,255
  801410:	1080201c 	xori	r2,r2,128
  801414:	10bfe004 	addi	r2,r2,-128
  801418:	10000226 	beq	r2,zero,801424 <tick+0xc90>
         _Pacemaker1_local_AEI_ex =(_Pacemaker1_local_AEI_ex||1);
  80141c:	00800044 	movi	r2,1
  801420:	d0a77685 	stb	r2,-25126(gp)
      }
      g73 =(PRE_g72);
  801424:	d0a75ec3 	ldbu	r2,-25221(gp)
  801428:	d0a79085 	stb	r2,-25022(gp)
      g73b = g73;
  80142c:	d0a79083 	ldbu	r2,-25022(gp)
  801430:	d0a78645 	stb	r2,-25063(gp)
      _cg73 = _Pacemaker1_local_AVI_stop;
  801434:	d0a78943 	ldbu	r2,-25051(gp)
  801438:	d0a75f85 	stb	r2,-25218(gp)
      g77 =(g73b&&(!(_cg73)));
  80143c:	d0a78643 	ldbu	r2,-25063(gp)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000726 	beq	r2,zero,80146c <tick+0xcd8>
  801450:	d0a75f83 	ldbu	r2,-25218(gp)
  801454:	10803fcc 	andi	r2,r2,255
  801458:	1080201c 	xori	r2,r2,128
  80145c:	10bfe004 	addi	r2,r2,-128
  801460:	1000021e 	bne	r2,zero,80146c <tick+0xcd8>
  801464:	00800044 	movi	r2,1
  801468:	00000106 	br	801470 <tick+0xcdc>
  80146c:	0005883a 	mov	r2,zero
  801470:	d0a79105 	stb	r2,-25020(gp)
      _cg77 = ASense;
  801474:	d0a76943 	ldbu	r2,-25179(gp)
  801478:	d0a78e05 	stb	r2,-25032(gp)
      g78 =(g77&&_cg77);
  80147c:	d0a79103 	ldbu	r2,-25020(gp)
  801480:	10803fcc 	andi	r2,r2,255
  801484:	1080201c 	xori	r2,r2,128
  801488:	10bfe004 	addi	r2,r2,-128
  80148c:	10000726 	beq	r2,zero,8014ac <tick+0xd18>
  801490:	d0a78e03 	ldbu	r2,-25032(gp)
  801494:	10803fcc 	andi	r2,r2,255
  801498:	1080201c 	xori	r2,r2,128
  80149c:	10bfe004 	addi	r2,r2,-128
  8014a0:	10000226 	beq	r2,zero,8014ac <tick+0xd18>
  8014a4:	00800044 	movi	r2,1
  8014a8:	00000106 	br	8014b0 <tick+0xd1c>
  8014ac:	0005883a 	mov	r2,zero
  8014b0:	d0a77885 	stb	r2,-25118(gp)
      if(g78){
  8014b4:	d0a77883 	ldbu	r2,-25118(gp)
  8014b8:	10803fcc 	andi	r2,r2,255
  8014bc:	1080201c 	xori	r2,r2,128
  8014c0:	10bfe004 	addi	r2,r2,-128
  8014c4:	10000226 	beq	r2,zero,8014d0 <tick+0xd3c>
         _Pacemaker1_local_FilteredASense =(_Pacemaker1_local_FilteredASense||1);
  8014c8:	00800044 	movi	r2,1
  8014cc:	d0a77ac5 	stb	r2,-25109(gp)
      }
      g92 =(PRE_g91);
  8014d0:	d0a77d43 	ldbu	r2,-25099(gp)
  8014d4:	d0a761c5 	stb	r2,-25209(gp)
      g92b = g92;
  8014d8:	d0a761c3 	ldbu	r2,-25209(gp)
  8014dc:	d0a77945 	stb	r2,-25115(gp)
      _cg92 = _Pacemaker1_local_FilteredASense;
  8014e0:	d0a77ac3 	ldbu	r2,-25109(gp)
  8014e4:	d0a79305 	stb	r2,-25012(gp)
      g93 =(g92b&&(!(_cg92)));
  8014e8:	d0a77943 	ldbu	r2,-25115(gp)
  8014ec:	10803fcc 	andi	r2,r2,255
  8014f0:	1080201c 	xori	r2,r2,128
  8014f4:	10bfe004 	addi	r2,r2,-128
  8014f8:	10000726 	beq	r2,zero,801518 <tick+0xd84>
  8014fc:	d0a79303 	ldbu	r2,-25012(gp)
  801500:	10803fcc 	andi	r2,r2,255
  801504:	1080201c 	xori	r2,r2,128
  801508:	10bfe004 	addi	r2,r2,-128
  80150c:	1000021e 	bne	r2,zero,801518 <tick+0xd84>
  801510:	00800044 	movi	r2,1
  801514:	00000106 	br	80151c <tick+0xd88>
  801518:	0005883a 	mov	r2,zero
  80151c:	d0a77f05 	stb	r2,-25092(gp)
      _cg93 = _Pacemaker1_local_AEI_ex;
  801520:	d0a77683 	ldbu	r2,-25126(gp)
  801524:	d0a78a05 	stb	r2,-25048(gp)
      g94 =(g93&&_cg93);
  801528:	d0a77f03 	ldbu	r2,-25092(gp)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	10000726 	beq	r2,zero,801558 <tick+0xdc4>
  80153c:	d0a78a03 	ldbu	r2,-25048(gp)
  801540:	10803fcc 	andi	r2,r2,255
  801544:	1080201c 	xori	r2,r2,128
  801548:	10bfe004 	addi	r2,r2,-128
  80154c:	10000226 	beq	r2,zero,801558 <tick+0xdc4>
  801550:	00800044 	movi	r2,1
  801554:	00000106 	br	80155c <tick+0xdc8>
  801558:	0005883a 	mov	r2,zero
  80155c:	d0a77085 	stb	r2,-25150(gp)
      if(g94){
  801560:	d0a77083 	ldbu	r2,-25150(gp)
  801564:	10803fcc 	andi	r2,r2,255
  801568:	1080201c 	xori	r2,r2,128
  80156c:	10bfe004 	addi	r2,r2,-128
  801570:	10000226 	beq	r2,zero,80157c <tick+0xde8>
         APace =(APace||1);
  801574:	00800044 	movi	r2,1
  801578:	d0a75585 	stb	r2,-25258(gp)
      }
      g50 =(PRE_g49);
  80157c:	d0a76783 	ldbu	r2,-25186(gp)
  801580:	d0a78485 	stb	r2,-25070(gp)
      g50b = g50;
  801584:	d0a78483 	ldbu	r2,-25070(gp)
  801588:	d0a762c5 	stb	r2,-25205(gp)
      _cg50 = _Pacemaker1_local_FilteredASense;
  80158c:	d0a77ac3 	ldbu	r2,-25109(gp)
  801590:	d0a78b85 	stb	r2,-25042(gp)
      g62 =(g50b&&(!(_cg50)));
  801594:	d0a762c3 	ldbu	r2,-25205(gp)
  801598:	10803fcc 	andi	r2,r2,255
  80159c:	1080201c 	xori	r2,r2,128
  8015a0:	10bfe004 	addi	r2,r2,-128
  8015a4:	10000726 	beq	r2,zero,8015c4 <tick+0xe30>
  8015a8:	d0a78b83 	ldbu	r2,-25042(gp)
  8015ac:	10803fcc 	andi	r2,r2,255
  8015b0:	1080201c 	xori	r2,r2,128
  8015b4:	10bfe004 	addi	r2,r2,-128
  8015b8:	1000021e 	bne	r2,zero,8015c4 <tick+0xe30>
  8015bc:	00800044 	movi	r2,1
  8015c0:	00000106 	br	8015c8 <tick+0xe34>
  8015c4:	0005883a 	mov	r2,zero
  8015c8:	d0a76645 	stb	r2,-25191(gp)
      _cg62 = APace;
  8015cc:	d0a75583 	ldbu	r2,-25258(gp)
  8015d0:	d0a79785 	stb	r2,-24994(gp)
      g51 =((g62&&_cg62)||(g50b&&_cg50));
  8015d4:	d0a76643 	ldbu	r2,-25191(gp)
  8015d8:	10803fcc 	andi	r2,r2,255
  8015dc:	1080201c 	xori	r2,r2,128
  8015e0:	10bfe004 	addi	r2,r2,-128
  8015e4:	10000526 	beq	r2,zero,8015fc <tick+0xe68>
  8015e8:	d0a79783 	ldbu	r2,-24994(gp)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	10000a1e 	bne	r2,zero,801624 <tick+0xe90>
  8015fc:	d0a762c3 	ldbu	r2,-25205(gp)
  801600:	10803fcc 	andi	r2,r2,255
  801604:	1080201c 	xori	r2,r2,128
  801608:	10bfe004 	addi	r2,r2,-128
  80160c:	10000726 	beq	r2,zero,80162c <tick+0xe98>
  801610:	d0a78b83 	ldbu	r2,-25042(gp)
  801614:	10803fcc 	andi	r2,r2,255
  801618:	1080201c 	xori	r2,r2,128
  80161c:	10bfe004 	addi	r2,r2,-128
  801620:	10000226 	beq	r2,zero,80162c <tick+0xe98>
  801624:	00800044 	movi	r2,1
  801628:	00000106 	br	801630 <tick+0xe9c>
  80162c:	0005883a 	mov	r2,zero
  801630:	d0a78505 	stb	r2,-25068(gp)
      if(g51){
  801634:	d0a78503 	ldbu	r2,-25068(gp)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000226 	beq	r2,zero,801650 <tick+0xebc>
         _Pacemaker1_local_AVI_start =(_Pacemaker1_local_AVI_start||1);
  801648:	00800044 	movi	r2,1
  80164c:	d0a75445 	stb	r2,-25263(gp)
      }
      g42 =(PRE_g41);
  801650:	d0a786c3 	ldbu	r2,-25061(gp)
  801654:	d0a75a85 	stb	r2,-25238(gp)
      g42b = g42;
  801658:	d0a75a83 	ldbu	r2,-25238(gp)
  80165c:	d0a76c85 	stb	r2,-25166(gp)
      _cg42 = _Pacemaker1_local_AVI_start;
  801660:	d0a75443 	ldbu	r2,-25263(gp)
  801664:	d0a75405 	stb	r2,-25264(gp)
      g41 =((g44b&&_cg44)||g46||g40||(g42b&&(!(_cg42))));
  801668:	d0a75803 	ldbu	r2,-25248(gp)
  80166c:	10803fcc 	andi	r2,r2,255
  801670:	1080201c 	xori	r2,r2,128
  801674:	10bfe004 	addi	r2,r2,-128
  801678:	10000526 	beq	r2,zero,801690 <tick+0xefc>
  80167c:	d0a774c3 	ldbu	r2,-25133(gp)
  801680:	10803fcc 	andi	r2,r2,255
  801684:	1080201c 	xori	r2,r2,128
  801688:	10bfe004 	addi	r2,r2,-128
  80168c:	1000141e 	bne	r2,zero,8016e0 <tick+0xf4c>
  801690:	d0a78383 	ldbu	r2,-25074(gp)
  801694:	10803fcc 	andi	r2,r2,255
  801698:	1080201c 	xori	r2,r2,128
  80169c:	10bfe004 	addi	r2,r2,-128
  8016a0:	10000f1e 	bne	r2,zero,8016e0 <tick+0xf4c>
  8016a4:	d0a754c3 	ldbu	r2,-25261(gp)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	1080201c 	xori	r2,r2,128
  8016b0:	10bfe004 	addi	r2,r2,-128
  8016b4:	10000a1e 	bne	r2,zero,8016e0 <tick+0xf4c>
  8016b8:	d0a76c83 	ldbu	r2,-25166(gp)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10000726 	beq	r2,zero,8016e8 <tick+0xf54>
  8016cc:	d0a75403 	ldbu	r2,-25264(gp)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	1000021e 	bne	r2,zero,8016e8 <tick+0xf54>
  8016e0:	00800044 	movi	r2,1
  8016e4:	00000106 	br	8016ec <tick+0xf58>
  8016e8:	0005883a 	mov	r2,zero
  8016ec:	d0a76705 	stb	r2,-25188(gp)
      g43 =((g42b&&_cg42)||(g45&&(!(_cg45))));
  8016f0:	d0a76c83 	ldbu	r2,-25166(gp)
  8016f4:	10803fcc 	andi	r2,r2,255
  8016f8:	1080201c 	xori	r2,r2,128
  8016fc:	10bfe004 	addi	r2,r2,-128
  801700:	10000526 	beq	r2,zero,801718 <tick+0xf84>
  801704:	d0a75403 	ldbu	r2,-25264(gp)
  801708:	10803fcc 	andi	r2,r2,255
  80170c:	1080201c 	xori	r2,r2,128
  801710:	10bfe004 	addi	r2,r2,-128
  801714:	10000a1e 	bne	r2,zero,801740 <tick+0xfac>
  801718:	d0a79243 	ldbu	r2,-25015(gp)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1080201c 	xori	r2,r2,128
  801724:	10bfe004 	addi	r2,r2,-128
  801728:	10000726 	beq	r2,zero,801748 <tick+0xfb4>
  80172c:	d0a76083 	ldbu	r2,-25214(gp)
  801730:	10803fcc 	andi	r2,r2,255
  801734:	1080201c 	xori	r2,r2,128
  801738:	10bfe004 	addi	r2,r2,-128
  80173c:	1000021e 	bne	r2,zero,801748 <tick+0xfb4>
  801740:	00800044 	movi	r2,1
  801744:	00000106 	br	80174c <tick+0xfb8>
  801748:	0005883a 	mov	r2,zero
  80174c:	d0a780c5 	stb	r2,-25085(gp)
      g48 = g1;
  801750:	d0a76203 	ldbu	r2,-25208(gp)
  801754:	d0a76a05 	stb	r2,-25176(gp)
      g49 =(g58||(g62&&(!(_cg62)))||g48||g54);
  801758:	d0a78dc3 	ldbu	r2,-25033(gp)
  80175c:	10803fcc 	andi	r2,r2,255
  801760:	1080201c 	xori	r2,r2,128
  801764:	10bfe004 	addi	r2,r2,-128
  801768:	1000141e 	bne	r2,zero,8017bc <tick+0x1028>
  80176c:	d0a76643 	ldbu	r2,-25191(gp)
  801770:	10803fcc 	andi	r2,r2,255
  801774:	1080201c 	xori	r2,r2,128
  801778:	10bfe004 	addi	r2,r2,-128
  80177c:	10000526 	beq	r2,zero,801794 <tick+0x1000>
  801780:	d0a79783 	ldbu	r2,-24994(gp)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1080201c 	xori	r2,r2,128
  80178c:	10bfe004 	addi	r2,r2,-128
  801790:	10000a26 	beq	r2,zero,8017bc <tick+0x1028>
  801794:	d0a76a03 	ldbu	r2,-25176(gp)
  801798:	10803fcc 	andi	r2,r2,255
  80179c:	1080201c 	xori	r2,r2,128
  8017a0:	10bfe004 	addi	r2,r2,-128
  8017a4:	1000051e 	bne	r2,zero,8017bc <tick+0x1028>
  8017a8:	d0a773c3 	ldbu	r2,-25137(gp)
  8017ac:	10803fcc 	andi	r2,r2,255
  8017b0:	1080201c 	xori	r2,r2,128
  8017b4:	10bfe004 	addi	r2,r2,-128
  8017b8:	10000226 	beq	r2,zero,8017c4 <tick+0x1030>
  8017bc:	00800044 	movi	r2,1
  8017c0:	00000106 	br	8017c8 <tick+0x1034>
  8017c4:	0005883a 	mov	r2,zero
  8017c8:	d0a77105 	stb	r2,-25148(gp)
      g100 =(PRE_g99);
  8017cc:	d0a78bc3 	ldbu	r2,-25041(gp)
  8017d0:	d0a77305 	stb	r2,-25140(gp)
      _cg100 = URITO;
  8017d4:	d0a77cc3 	ldbu	r2,-25101(gp)
  8017d8:	d0a77745 	stb	r2,-25123(gp)
      g101 =(g100&&_cg100);
  8017dc:	d0a77303 	ldbu	r2,-25140(gp)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10000726 	beq	r2,zero,80180c <tick+0x1078>
  8017f0:	d0a77743 	ldbu	r2,-25123(gp)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	10000226 	beq	r2,zero,80180c <tick+0x1078>
  801804:	00800044 	movi	r2,1
  801808:	00000106 	br	801810 <tick+0x107c>
  80180c:	0005883a 	mov	r2,zero
  801810:	d0a77645 	stb	r2,-25127(gp)
      if(g101){
  801814:	d0a77643 	ldbu	r2,-25127(gp)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	1080201c 	xori	r2,r2,128
  801820:	10bfe004 	addi	r2,r2,-128
  801824:	10000226 	beq	r2,zero,801830 <tick+0x109c>
         _Pacemaker1_local_URI_ex =(_Pacemaker1_local_URI_ex||1);
  801828:	00800044 	movi	r2,1
  80182c:	d0a78a45 	stb	r2,-25047(gp)
      }
      g55 =(g53b&&(!(_cg53)));
  801830:	d0a78243 	ldbu	r2,-25079(gp)
  801834:	10803fcc 	andi	r2,r2,255
  801838:	1080201c 	xori	r2,r2,128
  80183c:	10bfe004 	addi	r2,r2,-128
  801840:	10000726 	beq	r2,zero,801860 <tick+0x10cc>
  801844:	d0a77283 	ldbu	r2,-25142(gp)
  801848:	10803fcc 	andi	r2,r2,255
  80184c:	1080201c 	xori	r2,r2,128
  801850:	10bfe004 	addi	r2,r2,-128
  801854:	1000021e 	bne	r2,zero,801860 <tick+0x10cc>
  801858:	00800044 	movi	r2,1
  80185c:	00000106 	br	801864 <tick+0x10d0>
  801860:	0005883a 	mov	r2,zero
  801864:	d0a756c5 	stb	r2,-25253(gp)
      _cg55 = _Pacemaker1_local_URI_ex;
  801868:	d0a78a43 	ldbu	r2,-25047(gp)
  80186c:	d0a79345 	stb	r2,-25011(gp)
      g52 =(g51||(g55&&(!(_cg55))));
  801870:	d0a78503 	ldbu	r2,-25068(gp)
  801874:	10803fcc 	andi	r2,r2,255
  801878:	1080201c 	xori	r2,r2,128
  80187c:	10bfe004 	addi	r2,r2,-128
  801880:	10000a1e 	bne	r2,zero,8018ac <tick+0x1118>
  801884:	d0a756c3 	ldbu	r2,-25253(gp)
  801888:	10803fcc 	andi	r2,r2,255
  80188c:	1080201c 	xori	r2,r2,128
  801890:	10bfe004 	addi	r2,r2,-128
  801894:	10000726 	beq	r2,zero,8018b4 <tick+0x1120>
  801898:	d0a79343 	ldbu	r2,-25011(gp)
  80189c:	10803fcc 	andi	r2,r2,255
  8018a0:	1080201c 	xori	r2,r2,128
  8018a4:	10bfe004 	addi	r2,r2,-128
  8018a8:	1000021e 	bne	r2,zero,8018b4 <tick+0x1120>
  8018ac:	00800044 	movi	r2,1
  8018b0:	00000106 	br	8018b8 <tick+0x1124>
  8018b4:	0005883a 	mov	r2,zero
  8018b8:	d0a76445 	stb	r2,-25199(gp)
      g56 =((g60&&(!(_cg60)))||(g55&&_cg55));
  8018bc:	d0a77e43 	ldbu	r2,-25095(gp)
  8018c0:	10803fcc 	andi	r2,r2,255
  8018c4:	1080201c 	xori	r2,r2,128
  8018c8:	10bfe004 	addi	r2,r2,-128
  8018cc:	10000526 	beq	r2,zero,8018e4 <tick+0x1150>
  8018d0:	d0a77b03 	ldbu	r2,-25108(gp)
  8018d4:	10803fcc 	andi	r2,r2,255
  8018d8:	1080201c 	xori	r2,r2,128
  8018dc:	10bfe004 	addi	r2,r2,-128
  8018e0:	10000a26 	beq	r2,zero,80190c <tick+0x1178>
  8018e4:	d0a756c3 	ldbu	r2,-25253(gp)
  8018e8:	10803fcc 	andi	r2,r2,255
  8018ec:	1080201c 	xori	r2,r2,128
  8018f0:	10bfe004 	addi	r2,r2,-128
  8018f4:	10000726 	beq	r2,zero,801914 <tick+0x1180>
  8018f8:	d0a79343 	ldbu	r2,-25011(gp)
  8018fc:	10803fcc 	andi	r2,r2,255
  801900:	1080201c 	xori	r2,r2,128
  801904:	10bfe004 	addi	r2,r2,-128
  801908:	10000226 	beq	r2,zero,801914 <tick+0x1180>
  80190c:	00800044 	movi	r2,1
  801910:	00000106 	br	801918 <tick+0x1184>
  801914:	0005883a 	mov	r2,zero
  801918:	d0a777c5 	stb	r2,-25121(gp)
      g64 = g1;
  80191c:	d0a76203 	ldbu	r2,-25208(gp)
  801920:	d0a76dc5 	stb	r2,-25161(gp)
      g68 =(PRE_g67);
  801924:	d0a77a43 	ldbu	r2,-25111(gp)
  801928:	d0a78e85 	stb	r2,-25030(gp)
      _cg68 = PVARPTO;
  80192c:	d0a78283 	ldbu	r2,-25078(gp)
  801930:	d0a76f05 	stb	r2,-25156(gp)
      g69 =(g68&&_cg68);
  801934:	d0a78e83 	ldbu	r2,-25030(gp)
  801938:	10803fcc 	andi	r2,r2,255
  80193c:	1080201c 	xori	r2,r2,128
  801940:	10bfe004 	addi	r2,r2,-128
  801944:	10000726 	beq	r2,zero,801964 <tick+0x11d0>
  801948:	d0a76f03 	ldbu	r2,-25156(gp)
  80194c:	10803fcc 	andi	r2,r2,255
  801950:	1080201c 	xori	r2,r2,128
  801954:	10bfe004 	addi	r2,r2,-128
  801958:	10000226 	beq	r2,zero,801964 <tick+0x11d0>
  80195c:	00800044 	movi	r2,1
  801960:	00000106 	br	801968 <tick+0x11d4>
  801964:	0005883a 	mov	r2,zero
  801968:	d0a79805 	stb	r2,-24992(gp)
      if(g69){
  80196c:	d0a79803 	ldbu	r2,-24992(gp)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1080201c 	xori	r2,r2,128
  801978:	10bfe004 	addi	r2,r2,-128
  80197c:	10000226 	beq	r2,zero,801988 <tick+0x11f4>
         _Pacemaker1_local_PVARP_ex =(_Pacemaker1_local_PVARP_ex||1);
  801980:	00800044 	movi	r2,1
  801984:	d0a77145 	stb	r2,-25147(gp)
      }
      g66 =(PRE_g65);
  801988:	d0a76103 	ldbu	r2,-25212(gp)
  80198c:	d0a77405 	stb	r2,-25136(gp)
      g66b = g66;
  801990:	d0a77403 	ldbu	r2,-25136(gp)
  801994:	d0a77ec5 	stb	r2,-25093(gp)
      _cg66 = _Pacemaker1_local_AVI_stop;
  801998:	d0a78943 	ldbu	r2,-25051(gp)
  80199c:	d0a78885 	stb	r2,-25054(gp)
      g65 =(g69||g64||(g66b&&(!(_cg66))));
  8019a0:	d0a79803 	ldbu	r2,-24992(gp)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	1080201c 	xori	r2,r2,128
  8019ac:	10bfe004 	addi	r2,r2,-128
  8019b0:	10000f1e 	bne	r2,zero,8019f0 <tick+0x125c>
  8019b4:	d0a76dc3 	ldbu	r2,-25161(gp)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	10000a1e 	bne	r2,zero,8019f0 <tick+0x125c>
  8019c8:	d0a77ec3 	ldbu	r2,-25093(gp)
  8019cc:	10803fcc 	andi	r2,r2,255
  8019d0:	1080201c 	xori	r2,r2,128
  8019d4:	10bfe004 	addi	r2,r2,-128
  8019d8:	10000726 	beq	r2,zero,8019f8 <tick+0x1264>
  8019dc:	d0a78883 	ldbu	r2,-25054(gp)
  8019e0:	10803fcc 	andi	r2,r2,255
  8019e4:	1080201c 	xori	r2,r2,128
  8019e8:	10bfe004 	addi	r2,r2,-128
  8019ec:	1000021e 	bne	r2,zero,8019f8 <tick+0x1264>
  8019f0:	00800044 	movi	r2,1
  8019f4:	00000106 	br	8019fc <tick+0x1268>
  8019f8:	0005883a 	mov	r2,zero
  8019fc:	d0a78fc5 	stb	r2,-25025(gp)
      g67 =((g66b&&_cg66)||(g68&&(!(_cg68))));
  801a00:	d0a77ec3 	ldbu	r2,-25093(gp)
  801a04:	10803fcc 	andi	r2,r2,255
  801a08:	1080201c 	xori	r2,r2,128
  801a0c:	10bfe004 	addi	r2,r2,-128
  801a10:	10000526 	beq	r2,zero,801a28 <tick+0x1294>
  801a14:	d0a78883 	ldbu	r2,-25054(gp)
  801a18:	10803fcc 	andi	r2,r2,255
  801a1c:	1080201c 	xori	r2,r2,128
  801a20:	10bfe004 	addi	r2,r2,-128
  801a24:	10000a1e 	bne	r2,zero,801a50 <tick+0x12bc>
  801a28:	d0a78e83 	ldbu	r2,-25030(gp)
  801a2c:	10803fcc 	andi	r2,r2,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	10000726 	beq	r2,zero,801a58 <tick+0x12c4>
  801a3c:	d0a76f03 	ldbu	r2,-25156(gp)
  801a40:	10803fcc 	andi	r2,r2,255
  801a44:	1080201c 	xori	r2,r2,128
  801a48:	10bfe004 	addi	r2,r2,-128
  801a4c:	1000021e 	bne	r2,zero,801a58 <tick+0x12c4>
  801a50:	00800044 	movi	r2,1
  801a54:	00000106 	br	801a5c <tick+0x12c8>
  801a58:	0005883a 	mov	r2,zero
  801a5c:	d0a795c5 	stb	r2,-25001(gp)
      g71 = g1;
  801a60:	d0a76203 	ldbu	r2,-25208(gp)
  801a64:	d0a76285 	stb	r2,-25206(gp)
      g76 =(PRE_g75);
  801a68:	d0a75f03 	ldbu	r2,-25220(gp)
  801a6c:	d0a76585 	stb	r2,-25194(gp)
      g76b = g76;
  801a70:	d0a76583 	ldbu	r2,-25194(gp)
  801a74:	d0a758c5 	stb	r2,-25245(gp)
      _cg76 = _Pacemaker1_local_PVARP_ex;
  801a78:	d0a77143 	ldbu	r2,-25147(gp)
  801a7c:	d0a76c05 	stb	r2,-25168(gp)
      g72 =(g78||g71||(g76b&&_cg76)||(g77&&(!(_cg77))));
  801a80:	d0a77883 	ldbu	r2,-25118(gp)
  801a84:	10803fcc 	andi	r2,r2,255
  801a88:	1080201c 	xori	r2,r2,128
  801a8c:	10bfe004 	addi	r2,r2,-128
  801a90:	1000191e 	bne	r2,zero,801af8 <tick+0x1364>
  801a94:	d0a76283 	ldbu	r2,-25206(gp)
  801a98:	10803fcc 	andi	r2,r2,255
  801a9c:	1080201c 	xori	r2,r2,128
  801aa0:	10bfe004 	addi	r2,r2,-128
  801aa4:	1000141e 	bne	r2,zero,801af8 <tick+0x1364>
  801aa8:	d0a758c3 	ldbu	r2,-25245(gp)
  801aac:	10803fcc 	andi	r2,r2,255
  801ab0:	1080201c 	xori	r2,r2,128
  801ab4:	10bfe004 	addi	r2,r2,-128
  801ab8:	10000526 	beq	r2,zero,801ad0 <tick+0x133c>
  801abc:	d0a76c03 	ldbu	r2,-25168(gp)
  801ac0:	10803fcc 	andi	r2,r2,255
  801ac4:	1080201c 	xori	r2,r2,128
  801ac8:	10bfe004 	addi	r2,r2,-128
  801acc:	10000a1e 	bne	r2,zero,801af8 <tick+0x1364>
  801ad0:	d0a79103 	ldbu	r2,-25020(gp)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	10000726 	beq	r2,zero,801b00 <tick+0x136c>
  801ae4:	d0a78e03 	ldbu	r2,-25032(gp)
  801ae8:	10803fcc 	andi	r2,r2,255
  801aec:	1080201c 	xori	r2,r2,128
  801af0:	10bfe004 	addi	r2,r2,-128
  801af4:	1000021e 	bne	r2,zero,801b00 <tick+0x136c>
  801af8:	00800044 	movi	r2,1
  801afc:	00000106 	br	801b04 <tick+0x1370>
  801b00:	0005883a 	mov	r2,zero
  801b04:	d0a78ac5 	stb	r2,-25045(gp)
      g74 =(g73b&&_cg73);
  801b08:	d0a78643 	ldbu	r2,-25063(gp)
  801b0c:	10803fcc 	andi	r2,r2,255
  801b10:	1080201c 	xori	r2,r2,128
  801b14:	10bfe004 	addi	r2,r2,-128
  801b18:	10000726 	beq	r2,zero,801b38 <tick+0x13a4>
  801b1c:	d0a75f83 	ldbu	r2,-25218(gp)
  801b20:	10803fcc 	andi	r2,r2,255
  801b24:	1080201c 	xori	r2,r2,128
  801b28:	10bfe004 	addi	r2,r2,-128
  801b2c:	10000226 	beq	r2,zero,801b38 <tick+0x13a4>
  801b30:	00800044 	movi	r2,1
  801b34:	00000106 	br	801b3c <tick+0x13a8>
  801b38:	0005883a 	mov	r2,zero
  801b3c:	d0a79945 	stb	r2,-24987(gp)
      if(g74){
  801b40:	d0a79943 	ldbu	r2,-24987(gp)
  801b44:	10803fcc 	andi	r2,r2,255
  801b48:	1080201c 	xori	r2,r2,128
  801b4c:	10bfe004 	addi	r2,r2,-128
  801b50:	10000226 	beq	r2,zero,801b5c <tick+0x13c8>
         _Pacemaker1_local_PVARP_start =(_Pacemaker1_local_PVARP_start||1);
  801b54:	00800044 	movi	r2,1
  801b58:	d0a760c5 	stb	r2,-25213(gp)
      }
      g75 =((g76b&&(!(_cg76)))||g74);
  801b5c:	d0a758c3 	ldbu	r2,-25245(gp)
  801b60:	10803fcc 	andi	r2,r2,255
  801b64:	1080201c 	xori	r2,r2,128
  801b68:	10bfe004 	addi	r2,r2,-128
  801b6c:	10000526 	beq	r2,zero,801b84 <tick+0x13f0>
  801b70:	d0a76c03 	ldbu	r2,-25168(gp)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	1080201c 	xori	r2,r2,128
  801b7c:	10bfe004 	addi	r2,r2,-128
  801b80:	10000526 	beq	r2,zero,801b98 <tick+0x1404>
  801b84:	d0a79943 	ldbu	r2,-24987(gp)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	1080201c 	xori	r2,r2,128
  801b90:	10bfe004 	addi	r2,r2,-128
  801b94:	10000226 	beq	r2,zero,801ba0 <tick+0x140c>
  801b98:	00800044 	movi	r2,1
  801b9c:	00000106 	br	801ba4 <tick+0x1410>
  801ba0:	0005883a 	mov	r2,zero
  801ba4:	d0a78c45 	stb	r2,-25039(gp)
      g80 = g1;
  801ba8:	d0a76203 	ldbu	r2,-25208(gp)
  801bac:	d0a772c5 	stb	r2,-25141(gp)
      g82 =(PRE_g81);
  801bb0:	d0a768c3 	ldbu	r2,-25181(gp)
  801bb4:	d0a76305 	stb	r2,-25204(gp)
      g82b = g82;
  801bb8:	d0a76303 	ldbu	r2,-25204(gp)
  801bbc:	d0a78a85 	stb	r2,-25046(gp)
      _cg82 = _Pacemaker1_local_AVI_stop;
  801bc0:	d0a78943 	ldbu	r2,-25051(gp)
  801bc4:	d0a76cc5 	stb	r2,-25165(gp)
      g81 =(g86||(g82b&&(!(_cg82)))||(g84b&&_cg84)||g80);
  801bc8:	d0a78083 	ldbu	r2,-25086(gp)
  801bcc:	10803fcc 	andi	r2,r2,255
  801bd0:	1080201c 	xori	r2,r2,128
  801bd4:	10bfe004 	addi	r2,r2,-128
  801bd8:	1000191e 	bne	r2,zero,801c40 <tick+0x14ac>
  801bdc:	d0a78a83 	ldbu	r2,-25046(gp)
  801be0:	10803fcc 	andi	r2,r2,255
  801be4:	1080201c 	xori	r2,r2,128
  801be8:	10bfe004 	addi	r2,r2,-128
  801bec:	10000526 	beq	r2,zero,801c04 <tick+0x1470>
  801bf0:	d0a76cc3 	ldbu	r2,-25165(gp)
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	1080201c 	xori	r2,r2,128
  801bfc:	10bfe004 	addi	r2,r2,-128
  801c00:	10000f26 	beq	r2,zero,801c40 <tick+0x14ac>
  801c04:	d0a77fc3 	ldbu	r2,-25089(gp)
  801c08:	10803fcc 	andi	r2,r2,255
  801c0c:	1080201c 	xori	r2,r2,128
  801c10:	10bfe004 	addi	r2,r2,-128
  801c14:	10000526 	beq	r2,zero,801c2c <tick+0x1498>
  801c18:	d0a76043 	ldbu	r2,-25215(gp)
  801c1c:	10803fcc 	andi	r2,r2,255
  801c20:	1080201c 	xori	r2,r2,128
  801c24:	10bfe004 	addi	r2,r2,-128
  801c28:	1000051e 	bne	r2,zero,801c40 <tick+0x14ac>
  801c2c:	d0a772c3 	ldbu	r2,-25141(gp)
  801c30:	10803fcc 	andi	r2,r2,255
  801c34:	1080201c 	xori	r2,r2,128
  801c38:	10bfe004 	addi	r2,r2,-128
  801c3c:	10000226 	beq	r2,zero,801c48 <tick+0x14b4>
  801c40:	00800044 	movi	r2,1
  801c44:	00000106 	br	801c4c <tick+0x14b8>
  801c48:	0005883a 	mov	r2,zero
  801c4c:	d0a78b05 	stb	r2,-25044(gp)
      g83 =((g82b&&_cg82)||(g85&&(!(_cg85))));
  801c50:	d0a78a83 	ldbu	r2,-25046(gp)
  801c54:	10803fcc 	andi	r2,r2,255
  801c58:	1080201c 	xori	r2,r2,128
  801c5c:	10bfe004 	addi	r2,r2,-128
  801c60:	10000526 	beq	r2,zero,801c78 <tick+0x14e4>
  801c64:	d0a76cc3 	ldbu	r2,-25165(gp)
  801c68:	10803fcc 	andi	r2,r2,255
  801c6c:	1080201c 	xori	r2,r2,128
  801c70:	10bfe004 	addi	r2,r2,-128
  801c74:	10000a1e 	bne	r2,zero,801ca0 <tick+0x150c>
  801c78:	d0a75a43 	ldbu	r2,-25239(gp)
  801c7c:	10803fcc 	andi	r2,r2,255
  801c80:	1080201c 	xori	r2,r2,128
  801c84:	10bfe004 	addi	r2,r2,-128
  801c88:	10000726 	beq	r2,zero,801ca8 <tick+0x1514>
  801c8c:	d0a764c3 	ldbu	r2,-25197(gp)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1080201c 	xori	r2,r2,128
  801c98:	10bfe004 	addi	r2,r2,-128
  801c9c:	1000021e 	bne	r2,zero,801ca8 <tick+0x1514>
  801ca0:	00800044 	movi	r2,1
  801ca4:	00000106 	br	801cac <tick+0x1518>
  801ca8:	0005883a 	mov	r2,zero
  801cac:	d0a75485 	stb	r2,-25262(gp)
      g88 = g1;
  801cb0:	d0a76203 	ldbu	r2,-25208(gp)
  801cb4:	d0a79205 	stb	r2,-25016(gp)
      g90 =(PRE_g89);
  801cb8:	d0a78803 	ldbu	r2,-25056(gp)
  801cbc:	d0a77c45 	stb	r2,-25103(gp)
      g90b = g90;
  801cc0:	d0a77c43 	ldbu	r2,-25103(gp)
  801cc4:	d0a78f05 	stb	r2,-25028(gp)
      _cg90 = _Pacemaker1_local_AVI_stop;
  801cc8:	d0a78943 	ldbu	r2,-25051(gp)
  801ccc:	d0a77245 	stb	r2,-25143(gp)
      g89 =((g90b&&(!(_cg90)))||g88||(g92b&&_cg92)||g94);
  801cd0:	d0a78f03 	ldbu	r2,-25028(gp)
  801cd4:	10803fcc 	andi	r2,r2,255
  801cd8:	1080201c 	xori	r2,r2,128
  801cdc:	10bfe004 	addi	r2,r2,-128
  801ce0:	10000526 	beq	r2,zero,801cf8 <tick+0x1564>
  801ce4:	d0a77243 	ldbu	r2,-25143(gp)
  801ce8:	10803fcc 	andi	r2,r2,255
  801cec:	1080201c 	xori	r2,r2,128
  801cf0:	10bfe004 	addi	r2,r2,-128
  801cf4:	10001426 	beq	r2,zero,801d48 <tick+0x15b4>
  801cf8:	d0a79203 	ldbu	r2,-25016(gp)
  801cfc:	10803fcc 	andi	r2,r2,255
  801d00:	1080201c 	xori	r2,r2,128
  801d04:	10bfe004 	addi	r2,r2,-128
  801d08:	10000f1e 	bne	r2,zero,801d48 <tick+0x15b4>
  801d0c:	d0a77943 	ldbu	r2,-25115(gp)
  801d10:	10803fcc 	andi	r2,r2,255
  801d14:	1080201c 	xori	r2,r2,128
  801d18:	10bfe004 	addi	r2,r2,-128
  801d1c:	10000526 	beq	r2,zero,801d34 <tick+0x15a0>
  801d20:	d0a79303 	ldbu	r2,-25012(gp)
  801d24:	10803fcc 	andi	r2,r2,255
  801d28:	1080201c 	xori	r2,r2,128
  801d2c:	10bfe004 	addi	r2,r2,-128
  801d30:	1000051e 	bne	r2,zero,801d48 <tick+0x15b4>
  801d34:	d0a77083 	ldbu	r2,-25150(gp)
  801d38:	10803fcc 	andi	r2,r2,255
  801d3c:	1080201c 	xori	r2,r2,128
  801d40:	10bfe004 	addi	r2,r2,-128
  801d44:	10000226 	beq	r2,zero,801d50 <tick+0x15bc>
  801d48:	00800044 	movi	r2,1
  801d4c:	00000106 	br	801d54 <tick+0x15c0>
  801d50:	0005883a 	mov	r2,zero
  801d54:	d0a78345 	stb	r2,-25075(gp)
      g91 =((g90b&&_cg90)||(g93&&(!(_cg93))));
  801d58:	d0a78f03 	ldbu	r2,-25028(gp)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1080201c 	xori	r2,r2,128
  801d64:	10bfe004 	addi	r2,r2,-128
  801d68:	10000526 	beq	r2,zero,801d80 <tick+0x15ec>
  801d6c:	d0a77243 	ldbu	r2,-25143(gp)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000a1e 	bne	r2,zero,801da8 <tick+0x1614>
  801d80:	d0a77f03 	ldbu	r2,-25092(gp)
  801d84:	10803fcc 	andi	r2,r2,255
  801d88:	1080201c 	xori	r2,r2,128
  801d8c:	10bfe004 	addi	r2,r2,-128
  801d90:	10000726 	beq	r2,zero,801db0 <tick+0x161c>
  801d94:	d0a78a03 	ldbu	r2,-25048(gp)
  801d98:	10803fcc 	andi	r2,r2,255
  801d9c:	1080201c 	xori	r2,r2,128
  801da0:	10bfe004 	addi	r2,r2,-128
  801da4:	1000021e 	bne	r2,zero,801db0 <tick+0x161c>
  801da8:	00800044 	movi	r2,1
  801dac:	00000106 	br	801db4 <tick+0x1620>
  801db0:	0005883a 	mov	r2,zero
  801db4:	d0a75545 	stb	r2,-25259(gp)
      g96 = g1;
  801db8:	d0a76203 	ldbu	r2,-25208(gp)
  801dbc:	d0a784c5 	stb	r2,-25069(gp)
      g98 =(PRE_g97);
  801dc0:	d0a78003 	ldbu	r2,-25088(gp)
  801dc4:	d0a78705 	stb	r2,-25060(gp)
      g98b = g98;
  801dc8:	d0a78703 	ldbu	r2,-25060(gp)
  801dcc:	d0a78205 	stb	r2,-25080(gp)
      _cg98 = _Pacemaker1_local_AVI_stop;
  801dd0:	d0a78943 	ldbu	r2,-25051(gp)
  801dd4:	d0a76385 	stb	r2,-25202(gp)
      g97 =(g96||g101||(g98b&&(!(_cg98))));
  801dd8:	d0a784c3 	ldbu	r2,-25069(gp)
  801ddc:	10803fcc 	andi	r2,r2,255
  801de0:	1080201c 	xori	r2,r2,128
  801de4:	10bfe004 	addi	r2,r2,-128
  801de8:	10000f1e 	bne	r2,zero,801e28 <tick+0x1694>
  801dec:	d0a77643 	ldbu	r2,-25127(gp)
  801df0:	10803fcc 	andi	r2,r2,255
  801df4:	1080201c 	xori	r2,r2,128
  801df8:	10bfe004 	addi	r2,r2,-128
  801dfc:	10000a1e 	bne	r2,zero,801e28 <tick+0x1694>
  801e00:	d0a78203 	ldbu	r2,-25080(gp)
  801e04:	10803fcc 	andi	r2,r2,255
  801e08:	1080201c 	xori	r2,r2,128
  801e0c:	10bfe004 	addi	r2,r2,-128
  801e10:	10000726 	beq	r2,zero,801e30 <tick+0x169c>
  801e14:	d0a76383 	ldbu	r2,-25202(gp)
  801e18:	10803fcc 	andi	r2,r2,255
  801e1c:	1080201c 	xori	r2,r2,128
  801e20:	10bfe004 	addi	r2,r2,-128
  801e24:	1000021e 	bne	r2,zero,801e30 <tick+0x169c>
  801e28:	00800044 	movi	r2,1
  801e2c:	00000106 	br	801e34 <tick+0x16a0>
  801e30:	0005883a 	mov	r2,zero
  801e34:	d0a76405 	stb	r2,-25200(gp)
      g99 =((g98b&&_cg98)||(g100&&(!(_cg100))));
  801e38:	d0a78203 	ldbu	r2,-25080(gp)
  801e3c:	10803fcc 	andi	r2,r2,255
  801e40:	1080201c 	xori	r2,r2,128
  801e44:	10bfe004 	addi	r2,r2,-128
  801e48:	10000526 	beq	r2,zero,801e60 <tick+0x16cc>
  801e4c:	d0a76383 	ldbu	r2,-25202(gp)
  801e50:	10803fcc 	andi	r2,r2,255
  801e54:	1080201c 	xori	r2,r2,128
  801e58:	10bfe004 	addi	r2,r2,-128
  801e5c:	10000a1e 	bne	r2,zero,801e88 <tick+0x16f4>
  801e60:	d0a77303 	ldbu	r2,-25140(gp)
  801e64:	10803fcc 	andi	r2,r2,255
  801e68:	1080201c 	xori	r2,r2,128
  801e6c:	10bfe004 	addi	r2,r2,-128
  801e70:	10000726 	beq	r2,zero,801e90 <tick+0x16fc>
  801e74:	d0a77743 	ldbu	r2,-25123(gp)
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	1000021e 	bne	r2,zero,801e90 <tick+0x16fc>
  801e88:	00800044 	movi	r2,1
  801e8c:	00000106 	br	801e94 <tick+0x1700>
  801e90:	0005883a 	mov	r2,zero
  801e94:	d0a77385 	stb	r2,-25138(gp)
      g103 = g1;
  801e98:	d0a76203 	ldbu	r2,-25208(gp)
  801e9c:	d0a75985 	stb	r2,-25242(gp)
      g107 =(PRE_g106);
  801ea0:	d0a77b83 	ldbu	r2,-25106(gp)
  801ea4:	d0a78585 	stb	r2,-25066(gp)
      g107b = g107;
  801ea8:	d0a78583 	ldbu	r2,-25066(gp)
  801eac:	d0a78045 	stb	r2,-25087(gp)
      _cg107 = _Pacemaker1_local_URI_ex;
  801eb0:	d0a78a43 	ldbu	r2,-25047(gp)
  801eb4:	d0a76e85 	stb	r2,-25158(gp)
      g105 =(PRE_g104);
  801eb8:	d0a76983 	ldbu	r2,-25178(gp)
  801ebc:	d0a76b45 	stb	r2,-25171(gp)
      g105b = g105;
  801ec0:	d0a76b43 	ldbu	r2,-25171(gp)
  801ec4:	d0a78d85 	stb	r2,-25034(gp)
      _cg105 = _Pacemaker1_local_AVI_stop;
  801ec8:	d0a78943 	ldbu	r2,-25051(gp)
  801ecc:	d0a79905 	stb	r2,-24988(gp)
      g104 =(g103||(g107b&&_cg107)||(g105b&&(!(_cg105))));
  801ed0:	d0a75983 	ldbu	r2,-25242(gp)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	1080201c 	xori	r2,r2,128
  801edc:	10bfe004 	addi	r2,r2,-128
  801ee0:	1000141e 	bne	r2,zero,801f34 <tick+0x17a0>
  801ee4:	d0a78043 	ldbu	r2,-25087(gp)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	10000526 	beq	r2,zero,801f0c <tick+0x1778>
  801ef8:	d0a76e83 	ldbu	r2,-25158(gp)
  801efc:	10803fcc 	andi	r2,r2,255
  801f00:	1080201c 	xori	r2,r2,128
  801f04:	10bfe004 	addi	r2,r2,-128
  801f08:	10000a1e 	bne	r2,zero,801f34 <tick+0x17a0>
  801f0c:	d0a78d83 	ldbu	r2,-25034(gp)
  801f10:	10803fcc 	andi	r2,r2,255
  801f14:	1080201c 	xori	r2,r2,128
  801f18:	10bfe004 	addi	r2,r2,-128
  801f1c:	10000726 	beq	r2,zero,801f3c <tick+0x17a8>
  801f20:	d0a79903 	ldbu	r2,-24988(gp)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	1000021e 	bne	r2,zero,801f3c <tick+0x17a8>
  801f34:	00800044 	movi	r2,1
  801f38:	00000106 	br	801f40 <tick+0x17ac>
  801f3c:	0005883a 	mov	r2,zero
  801f40:	d0a78605 	stb	r2,-25064(gp)
      g106 =((g105b&&_cg105)||(g107b&&(!(_cg107))));
  801f44:	d0a78d83 	ldbu	r2,-25034(gp)
  801f48:	10803fcc 	andi	r2,r2,255
  801f4c:	1080201c 	xori	r2,r2,128
  801f50:	10bfe004 	addi	r2,r2,-128
  801f54:	10000526 	beq	r2,zero,801f6c <tick+0x17d8>
  801f58:	d0a79903 	ldbu	r2,-24988(gp)
  801f5c:	10803fcc 	andi	r2,r2,255
  801f60:	1080201c 	xori	r2,r2,128
  801f64:	10bfe004 	addi	r2,r2,-128
  801f68:	10000a1e 	bne	r2,zero,801f94 <tick+0x1800>
  801f6c:	d0a78043 	ldbu	r2,-25087(gp)
  801f70:	10803fcc 	andi	r2,r2,255
  801f74:	1080201c 	xori	r2,r2,128
  801f78:	10bfe004 	addi	r2,r2,-128
  801f7c:	10000726 	beq	r2,zero,801f9c <tick+0x1808>
  801f80:	d0a76e83 	ldbu	r2,-25158(gp)
  801f84:	10803fcc 	andi	r2,r2,255
  801f88:	1080201c 	xori	r2,r2,128
  801f8c:	10bfe004 	addi	r2,r2,-128
  801f90:	1000021e 	bne	r2,zero,801f9c <tick+0x1808>
  801f94:	00800044 	movi	r2,1
  801f98:	00000106 	br	801fa0 <tick+0x180c>
  801f9c:	0005883a 	mov	r2,zero
  801fa0:	d0a796c5 	stb	r2,-24997(gp)
      g113 = g1;
  801fa4:	d0a76203 	ldbu	r2,-25208(gp)
  801fa8:	d0a785c5 	stb	r2,-25065(gp)
      g114 =(g113||g115);
  801fac:	d0a785c3 	ldbu	r2,-25065(gp)
  801fb0:	10803fcc 	andi	r2,r2,255
  801fb4:	1080201c 	xori	r2,r2,128
  801fb8:	10bfe004 	addi	r2,r2,-128
  801fbc:	1000051e 	bne	r2,zero,801fd4 <tick+0x1840>
  801fc0:	d0a75d83 	ldbu	r2,-25226(gp)
  801fc4:	10803fcc 	andi	r2,r2,255
  801fc8:	1080201c 	xori	r2,r2,128
  801fcc:	10bfe004 	addi	r2,r2,-128
  801fd0:	10000226 	beq	r2,zero,801fdc <tick+0x1848>
  801fd4:	00800044 	movi	r2,1
  801fd8:	00000106 	br	801fe0 <tick+0x184c>
  801fdc:	0005883a 	mov	r2,zero
  801fe0:	d0a77785 	stb	r2,-25122(gp)
      if(g114){
  801fe4:	d0a77783 	ldbu	r2,-25122(gp)
  801fe8:	10803fcc 	andi	r2,r2,255
  801fec:	1080201c 	xori	r2,r2,128
  801ff0:	10bfe004 	addi	r2,r2,-128
  801ff4:	10000226 	beq	r2,zero,802000 <tick+0x186c>
         _Pacemaker1_local__reg_FilteredVSense21 = _Pacemaker1_local_FilteredVSense;
  801ff8:	d0a77703 	ldbu	r2,-25124(gp)
  801ffc:	d0a76b05 	stb	r2,-25172(gp)
      }
      g114b = g114;
  802000:	d0a77783 	ldbu	r2,-25122(gp)
  802004:	d0a75b85 	stb	r2,-25234(gp)
      if(g114b){
  802008:	d0a75b83 	ldbu	r2,-25234(gp)
  80200c:	10803fcc 	andi	r2,r2,255
  802010:	1080201c 	xori	r2,r2,128
  802014:	10bfe004 	addi	r2,r2,-128
  802018:	10000226 	beq	r2,zero,802024 <tick+0x1890>
         _Pacemaker1_local__reg_AVI_ex21 = _Pacemaker1_local_AVI_ex;
  80201c:	d0a78183 	ldbu	r2,-25082(gp)
  802020:	d0a77045 	stb	r2,-25151(gp)
      }
      g8_e1 =(!((g4||g6)));
  802024:	d0a755c3 	ldbu	r2,-25257(gp)
  802028:	10803fcc 	andi	r2,r2,255
  80202c:	1080201c 	xori	r2,r2,128
  802030:	10bfe004 	addi	r2,r2,-128
  802034:	1000071e 	bne	r2,zero,802054 <tick+0x18c0>
  802038:	d0a789c3 	ldbu	r2,-25049(gp)
  80203c:	10803fcc 	andi	r2,r2,255
  802040:	1080201c 	xori	r2,r2,128
  802044:	10bfe004 	addi	r2,r2,-128
  802048:	1000021e 	bne	r2,zero,802054 <tick+0x18c0>
  80204c:	00800044 	movi	r2,1
  802050:	00000106 	br	802058 <tick+0x18c4>
  802054:	0005883a 	mov	r2,zero
  802058:	d0a76805 	stb	r2,-25184(gp)
      g17_e2 =(!((g11||g14)));
  80205c:	d0a78f43 	ldbu	r2,-25027(gp)
  802060:	10803fcc 	andi	r2,r2,255
  802064:	1080201c 	xori	r2,r2,128
  802068:	10bfe004 	addi	r2,r2,-128
  80206c:	1000071e 	bne	r2,zero,80208c <tick+0x18f8>
  802070:	d0a77503 	ldbu	r2,-25132(gp)
  802074:	10803fcc 	andi	r2,r2,255
  802078:	1080201c 	xori	r2,r2,128
  80207c:	10bfe004 	addi	r2,r2,-128
  802080:	1000021e 	bne	r2,zero,80208c <tick+0x18f8>
  802084:	00800044 	movi	r2,1
  802088:	00000106 	br	802090 <tick+0x18fc>
  80208c:	0005883a 	mov	r2,zero
  802090:	d0a77005 	stb	r2,-25152(gp)
      g25_e3 =(!((g20||g22)));
  802094:	d0a77dc3 	ldbu	r2,-25097(gp)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	1000071e 	bne	r2,zero,8020c4 <tick+0x1930>
  8020a8:	d0a79003 	ldbu	r2,-25024(gp)
  8020ac:	10803fcc 	andi	r2,r2,255
  8020b0:	1080201c 	xori	r2,r2,128
  8020b4:	10bfe004 	addi	r2,r2,-128
  8020b8:	1000021e 	bne	r2,zero,8020c4 <tick+0x1930>
  8020bc:	00800044 	movi	r2,1
  8020c0:	00000106 	br	8020c8 <tick+0x1934>
  8020c4:	0005883a 	mov	r2,zero
  8020c8:	d0a76185 	stb	r2,-25210(gp)
      g39_e4 =(!((g28||g31||g33||g36)));
  8020cc:	d0a79043 	ldbu	r2,-25023(gp)
  8020d0:	10803fcc 	andi	r2,r2,255
  8020d4:	1080201c 	xori	r2,r2,128
  8020d8:	10bfe004 	addi	r2,r2,-128
  8020dc:	1000111e 	bne	r2,zero,802124 <tick+0x1990>
  8020e0:	d0a765c3 	ldbu	r2,-25193(gp)
  8020e4:	10803fcc 	andi	r2,r2,255
  8020e8:	1080201c 	xori	r2,r2,128
  8020ec:	10bfe004 	addi	r2,r2,-128
  8020f0:	10000c1e 	bne	r2,zero,802124 <tick+0x1990>
  8020f4:	d0a778c3 	ldbu	r2,-25117(gp)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	1000071e 	bne	r2,zero,802124 <tick+0x1990>
  802108:	d0a782c3 	ldbu	r2,-25077(gp)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	1000021e 	bne	r2,zero,802124 <tick+0x1990>
  80211c:	00800044 	movi	r2,1
  802120:	00000106 	br	802128 <tick+0x1994>
  802124:	0005883a 	mov	r2,zero
  802128:	d0a76e45 	stb	r2,-25159(gp)
      g47_e5 =(!((g42||g44)));
  80212c:	d0a75a83 	ldbu	r2,-25238(gp)
  802130:	10803fcc 	andi	r2,r2,255
  802134:	1080201c 	xori	r2,r2,128
  802138:	10bfe004 	addi	r2,r2,-128
  80213c:	1000071e 	bne	r2,zero,80215c <tick+0x19c8>
  802140:	d0a76003 	ldbu	r2,-25216(gp)
  802144:	10803fcc 	andi	r2,r2,255
  802148:	1080201c 	xori	r2,r2,128
  80214c:	10bfe004 	addi	r2,r2,-128
  802150:	1000021e 	bne	r2,zero,80215c <tick+0x19c8>
  802154:	00800044 	movi	r2,1
  802158:	00000106 	br	802160 <tick+0x19cc>
  80215c:	0005883a 	mov	r2,zero
  802160:	d0a783c5 	stb	r2,-25073(gp)
      g63_e6 =(!((g50||g53||g57)));
  802164:	d0a78483 	ldbu	r2,-25070(gp)
  802168:	10803fcc 	andi	r2,r2,255
  80216c:	1080201c 	xori	r2,r2,128
  802170:	10bfe004 	addi	r2,r2,-128
  802174:	10000c1e 	bne	r2,zero,8021a8 <tick+0x1a14>
  802178:	d0a78743 	ldbu	r2,-25059(gp)
  80217c:	10803fcc 	andi	r2,r2,255
  802180:	1080201c 	xori	r2,r2,128
  802184:	10bfe004 	addi	r2,r2,-128
  802188:	1000071e 	bne	r2,zero,8021a8 <tick+0x1a14>
  80218c:	d0a787c3 	ldbu	r2,-25057(gp)
  802190:	10803fcc 	andi	r2,r2,255
  802194:	1080201c 	xori	r2,r2,128
  802198:	10bfe004 	addi	r2,r2,-128
  80219c:	1000021e 	bne	r2,zero,8021a8 <tick+0x1a14>
  8021a0:	00800044 	movi	r2,1
  8021a4:	00000106 	br	8021ac <tick+0x1a18>
  8021a8:	0005883a 	mov	r2,zero
  8021ac:	d0a77585 	stb	r2,-25130(gp)
      g70_e7 =(!((g66||g68)));
  8021b0:	d0a77403 	ldbu	r2,-25136(gp)
  8021b4:	10803fcc 	andi	r2,r2,255
  8021b8:	1080201c 	xori	r2,r2,128
  8021bc:	10bfe004 	addi	r2,r2,-128
  8021c0:	1000071e 	bne	r2,zero,8021e0 <tick+0x1a4c>
  8021c4:	d0a78e83 	ldbu	r2,-25030(gp)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	1000021e 	bne	r2,zero,8021e0 <tick+0x1a4c>
  8021d8:	00800044 	movi	r2,1
  8021dc:	00000106 	br	8021e4 <tick+0x1a50>
  8021e0:	0005883a 	mov	r2,zero
  8021e4:	d0a77185 	stb	r2,-25146(gp)
      g79_e8 =(!((g73||g76)));
  8021e8:	d0a79083 	ldbu	r2,-25022(gp)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	1080201c 	xori	r2,r2,128
  8021f4:	10bfe004 	addi	r2,r2,-128
  8021f8:	1000071e 	bne	r2,zero,802218 <tick+0x1a84>
  8021fc:	d0a76583 	ldbu	r2,-25194(gp)
  802200:	10803fcc 	andi	r2,r2,255
  802204:	1080201c 	xori	r2,r2,128
  802208:	10bfe004 	addi	r2,r2,-128
  80220c:	1000021e 	bne	r2,zero,802218 <tick+0x1a84>
  802210:	00800044 	movi	r2,1
  802214:	00000106 	br	80221c <tick+0x1a88>
  802218:	0005883a 	mov	r2,zero
  80221c:	d0a78cc5 	stb	r2,-25037(gp)
      g87_e9 =(!((g82||g84)));
  802220:	d0a76303 	ldbu	r2,-25204(gp)
  802224:	10803fcc 	andi	r2,r2,255
  802228:	1080201c 	xori	r2,r2,128
  80222c:	10bfe004 	addi	r2,r2,-128
  802230:	1000071e 	bne	r2,zero,802250 <tick+0x1abc>
  802234:	d0a766c3 	ldbu	r2,-25189(gp)
  802238:	10803fcc 	andi	r2,r2,255
  80223c:	1080201c 	xori	r2,r2,128
  802240:	10bfe004 	addi	r2,r2,-128
  802244:	1000021e 	bne	r2,zero,802250 <tick+0x1abc>
  802248:	00800044 	movi	r2,1
  80224c:	00000106 	br	802254 <tick+0x1ac0>
  802250:	0005883a 	mov	r2,zero
  802254:	d0a75505 	stb	r2,-25260(gp)
      g95_e10 =(!((g90||g92)));
  802258:	d0a77c43 	ldbu	r2,-25103(gp)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	1000071e 	bne	r2,zero,802288 <tick+0x1af4>
  80226c:	d0a761c3 	ldbu	r2,-25209(gp)
  802270:	10803fcc 	andi	r2,r2,255
  802274:	1080201c 	xori	r2,r2,128
  802278:	10bfe004 	addi	r2,r2,-128
  80227c:	1000021e 	bne	r2,zero,802288 <tick+0x1af4>
  802280:	00800044 	movi	r2,1
  802284:	00000106 	br	80228c <tick+0x1af8>
  802288:	0005883a 	mov	r2,zero
  80228c:	d0a78f85 	stb	r2,-25026(gp)
      g102_e11 =(!((g98||g100)));
  802290:	d0a78703 	ldbu	r2,-25060(gp)
  802294:	10803fcc 	andi	r2,r2,255
  802298:	1080201c 	xori	r2,r2,128
  80229c:	10bfe004 	addi	r2,r2,-128
  8022a0:	1000071e 	bne	r2,zero,8022c0 <tick+0x1b2c>
  8022a4:	d0a77303 	ldbu	r2,-25140(gp)
  8022a8:	10803fcc 	andi	r2,r2,255
  8022ac:	1080201c 	xori	r2,r2,128
  8022b0:	10bfe004 	addi	r2,r2,-128
  8022b4:	1000021e 	bne	r2,zero,8022c0 <tick+0x1b2c>
  8022b8:	00800044 	movi	r2,1
  8022bc:	00000106 	br	8022c4 <tick+0x1b30>
  8022c0:	0005883a 	mov	r2,zero
  8022c4:	d0a788c5 	stb	r2,-25053(gp)
      g108_e12 =(!((g105||g107)));
  8022c8:	d0a76b43 	ldbu	r2,-25171(gp)
  8022cc:	10803fcc 	andi	r2,r2,255
  8022d0:	1080201c 	xori	r2,r2,128
  8022d4:	10bfe004 	addi	r2,r2,-128
  8022d8:	1000071e 	bne	r2,zero,8022f8 <tick+0x1b64>
  8022dc:	d0a78583 	ldbu	r2,-25066(gp)
  8022e0:	10803fcc 	andi	r2,r2,255
  8022e4:	1080201c 	xori	r2,r2,128
  8022e8:	10bfe004 	addi	r2,r2,-128
  8022ec:	1000021e 	bne	r2,zero,8022f8 <tick+0x1b64>
  8022f0:	00800044 	movi	r2,1
  8022f4:	00000106 	br	8022fc <tick+0x1b68>
  8022f8:	0005883a 	mov	r2,zero
  8022fc:	d0a77605 	stb	r2,-25128(gp)
      g112_e13 =(!(g111));
  802300:	d0a75683 	ldbu	r2,-25254(gp)
  802304:	10803fcc 	andi	r2,r2,255
  802308:	1080201c 	xori	r2,r2,128
  80230c:	10bfe004 	addi	r2,r2,-128
  802310:	1005003a 	cmpeq	r2,r2,zero
  802314:	d0a76c45 	stb	r2,-25167(gp)
      g116_e14 =(!(g115));
  802318:	d0a75d83 	ldbu	r2,-25226(gp)
  80231c:	10803fcc 	andi	r2,r2,255
  802320:	1080201c 	xori	r2,r2,128
  802324:	10bfe004 	addi	r2,r2,-128
  802328:	1005003a 	cmpeq	r2,r2,zero
  80232c:	d0a79885 	stb	r2,-24990(gp)
      g117_fix0 =((g8_e1||g8)&&(g17_e2||g17)&&(g25_e3||g25)&&(g39_e4||g39));
  802330:	d0a76803 	ldbu	r2,-25184(gp)
  802334:	10803fcc 	andi	r2,r2,255
  802338:	1080201c 	xori	r2,r2,128
  80233c:	10bfe004 	addi	r2,r2,-128
  802340:	1000051e 	bne	r2,zero,802358 <tick+0x1bc4>
  802344:	d0a78783 	ldbu	r2,-25058(gp)
  802348:	10803fcc 	andi	r2,r2,255
  80234c:	1080201c 	xori	r2,r2,128
  802350:	10bfe004 	addi	r2,r2,-128
  802354:	10002026 	beq	r2,zero,8023d8 <tick+0x1c44>
  802358:	d0a77003 	ldbu	r2,-25152(gp)
  80235c:	10803fcc 	andi	r2,r2,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	1000051e 	bne	r2,zero,802380 <tick+0x1bec>
  80236c:	d0a76503 	ldbu	r2,-25196(gp)
  802370:	10803fcc 	andi	r2,r2,255
  802374:	1080201c 	xori	r2,r2,128
  802378:	10bfe004 	addi	r2,r2,-128
  80237c:	10001626 	beq	r2,zero,8023d8 <tick+0x1c44>
  802380:	d0a76183 	ldbu	r2,-25210(gp)
  802384:	10803fcc 	andi	r2,r2,255
  802388:	1080201c 	xori	r2,r2,128
  80238c:	10bfe004 	addi	r2,r2,-128
  802390:	1000051e 	bne	r2,zero,8023a8 <tick+0x1c14>
  802394:	d0a78ec3 	ldbu	r2,-25029(gp)
  802398:	10803fcc 	andi	r2,r2,255
  80239c:	1080201c 	xori	r2,r2,128
  8023a0:	10bfe004 	addi	r2,r2,-128
  8023a4:	10000c26 	beq	r2,zero,8023d8 <tick+0x1c44>
  8023a8:	d0a76e43 	ldbu	r2,-25159(gp)
  8023ac:	10803fcc 	andi	r2,r2,255
  8023b0:	1080201c 	xori	r2,r2,128
  8023b4:	10bfe004 	addi	r2,r2,-128
  8023b8:	1000051e 	bne	r2,zero,8023d0 <tick+0x1c3c>
  8023bc:	d0a79483 	ldbu	r2,-25006(gp)
  8023c0:	10803fcc 	andi	r2,r2,255
  8023c4:	1080201c 	xori	r2,r2,128
  8023c8:	10bfe004 	addi	r2,r2,-128
  8023cc:	10000226 	beq	r2,zero,8023d8 <tick+0x1c44>
  8023d0:	00800044 	movi	r2,1
  8023d4:	00000106 	br	8023dc <tick+0x1c48>
  8023d8:	0005883a 	mov	r2,zero
  8023dc:	d0a76905 	stb	r2,-25180(gp)
      g117_fix1 =(g117_fix0&&(g47_e5||g47)&&(g63_e6||g63)&&(g70_e7||g70));
  8023e0:	d0a76903 	ldbu	r2,-25180(gp)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	10002026 	beq	r2,zero,802474 <tick+0x1ce0>
  8023f4:	d0a783c3 	ldbu	r2,-25073(gp)
  8023f8:	10803fcc 	andi	r2,r2,255
  8023fc:	1080201c 	xori	r2,r2,128
  802400:	10bfe004 	addi	r2,r2,-128
  802404:	1000051e 	bne	r2,zero,80241c <tick+0x1c88>
  802408:	d0a75a03 	ldbu	r2,-25240(gp)
  80240c:	10803fcc 	andi	r2,r2,255
  802410:	1080201c 	xori	r2,r2,128
  802414:	10bfe004 	addi	r2,r2,-128
  802418:	10001626 	beq	r2,zero,802474 <tick+0x1ce0>
  80241c:	d0a77583 	ldbu	r2,-25130(gp)
  802420:	10803fcc 	andi	r2,r2,255
  802424:	1080201c 	xori	r2,r2,128
  802428:	10bfe004 	addi	r2,r2,-128
  80242c:	1000051e 	bne	r2,zero,802444 <tick+0x1cb0>
  802430:	d0a77d83 	ldbu	r2,-25098(gp)
  802434:	10803fcc 	andi	r2,r2,255
  802438:	1080201c 	xori	r2,r2,128
  80243c:	10bfe004 	addi	r2,r2,-128
  802440:	10000c26 	beq	r2,zero,802474 <tick+0x1ce0>
  802444:	d0a77183 	ldbu	r2,-25146(gp)
  802448:	10803fcc 	andi	r2,r2,255
  80244c:	1080201c 	xori	r2,r2,128
  802450:	10bfe004 	addi	r2,r2,-128
  802454:	1000051e 	bne	r2,zero,80246c <tick+0x1cd8>
  802458:	d0a78843 	ldbu	r2,-25055(gp)
  80245c:	10803fcc 	andi	r2,r2,255
  802460:	1080201c 	xori	r2,r2,128
  802464:	10bfe004 	addi	r2,r2,-128
  802468:	10000226 	beq	r2,zero,802474 <tick+0x1ce0>
  80246c:	00800044 	movi	r2,1
  802470:	00000106 	br	802478 <tick+0x1ce4>
  802474:	0005883a 	mov	r2,zero
  802478:	d0a77545 	stb	r2,-25131(gp)
      g117_fix2 =(g117_fix1&&(g79_e8||g79)&&(g87_e9||g87)&&(g95_e10||g95));
  80247c:	d0a77543 	ldbu	r2,-25131(gp)
  802480:	10803fcc 	andi	r2,r2,255
  802484:	1080201c 	xori	r2,r2,128
  802488:	10bfe004 	addi	r2,r2,-128
  80248c:	10002026 	beq	r2,zero,802510 <tick+0x1d7c>
  802490:	d0a78cc3 	ldbu	r2,-25037(gp)
  802494:	10803fcc 	andi	r2,r2,255
  802498:	1080201c 	xori	r2,r2,128
  80249c:	10bfe004 	addi	r2,r2,-128
  8024a0:	1000051e 	bne	r2,zero,8024b8 <tick+0x1d24>
  8024a4:	d0a76f43 	ldbu	r2,-25155(gp)
  8024a8:	10803fcc 	andi	r2,r2,255
  8024ac:	1080201c 	xori	r2,r2,128
  8024b0:	10bfe004 	addi	r2,r2,-128
  8024b4:	10001626 	beq	r2,zero,802510 <tick+0x1d7c>
  8024b8:	d0a75503 	ldbu	r2,-25260(gp)
  8024bc:	10803fcc 	andi	r2,r2,255
  8024c0:	1080201c 	xori	r2,r2,128
  8024c4:	10bfe004 	addi	r2,r2,-128
  8024c8:	1000051e 	bne	r2,zero,8024e0 <tick+0x1d4c>
  8024cc:	d0a75fc3 	ldbu	r2,-25217(gp)
  8024d0:	10803fcc 	andi	r2,r2,255
  8024d4:	1080201c 	xori	r2,r2,128
  8024d8:	10bfe004 	addi	r2,r2,-128
  8024dc:	10000c26 	beq	r2,zero,802510 <tick+0x1d7c>
  8024e0:	d0a78f83 	ldbu	r2,-25026(gp)
  8024e4:	10803fcc 	andi	r2,r2,255
  8024e8:	1080201c 	xori	r2,r2,128
  8024ec:	10bfe004 	addi	r2,r2,-128
  8024f0:	1000051e 	bne	r2,zero,802508 <tick+0x1d74>
  8024f4:	d0a78443 	ldbu	r2,-25071(gp)
  8024f8:	10803fcc 	andi	r2,r2,255
  8024fc:	1080201c 	xori	r2,r2,128
  802500:	10bfe004 	addi	r2,r2,-128
  802504:	10000226 	beq	r2,zero,802510 <tick+0x1d7c>
  802508:	00800044 	movi	r2,1
  80250c:	00000106 	br	802514 <tick+0x1d80>
  802510:	0005883a 	mov	r2,zero
  802514:	d0a79505 	stb	r2,-25004(gp)
      g117_fix3 =(g8||g17||g25||g39);
  802518:	d0a78783 	ldbu	r2,-25058(gp)
  80251c:	10803fcc 	andi	r2,r2,255
  802520:	1080201c 	xori	r2,r2,128
  802524:	10bfe004 	addi	r2,r2,-128
  802528:	10000f1e 	bne	r2,zero,802568 <tick+0x1dd4>
  80252c:	d0a76503 	ldbu	r2,-25196(gp)
  802530:	10803fcc 	andi	r2,r2,255
  802534:	1080201c 	xori	r2,r2,128
  802538:	10bfe004 	addi	r2,r2,-128
  80253c:	10000a1e 	bne	r2,zero,802568 <tick+0x1dd4>
  802540:	d0a78ec3 	ldbu	r2,-25029(gp)
  802544:	10803fcc 	andi	r2,r2,255
  802548:	1080201c 	xori	r2,r2,128
  80254c:	10bfe004 	addi	r2,r2,-128
  802550:	1000051e 	bne	r2,zero,802568 <tick+0x1dd4>
  802554:	d0a79483 	ldbu	r2,-25006(gp)
  802558:	10803fcc 	andi	r2,r2,255
  80255c:	1080201c 	xori	r2,r2,128
  802560:	10bfe004 	addi	r2,r2,-128
  802564:	10000226 	beq	r2,zero,802570 <tick+0x1ddc>
  802568:	00800044 	movi	r2,1
  80256c:	00000106 	br	802574 <tick+0x1de0>
  802570:	0005883a 	mov	r2,zero
  802574:	d0a77485 	stb	r2,-25134(gp)
      g117_fix4 =(g117_fix3||g47||g63||g70);
  802578:	d0a77483 	ldbu	r2,-25134(gp)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	1080201c 	xori	r2,r2,128
  802584:	10bfe004 	addi	r2,r2,-128
  802588:	10000f1e 	bne	r2,zero,8025c8 <tick+0x1e34>
  80258c:	d0a75a03 	ldbu	r2,-25240(gp)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10000a1e 	bne	r2,zero,8025c8 <tick+0x1e34>
  8025a0:	d0a77d83 	ldbu	r2,-25098(gp)
  8025a4:	10803fcc 	andi	r2,r2,255
  8025a8:	1080201c 	xori	r2,r2,128
  8025ac:	10bfe004 	addi	r2,r2,-128
  8025b0:	1000051e 	bne	r2,zero,8025c8 <tick+0x1e34>
  8025b4:	d0a78843 	ldbu	r2,-25055(gp)
  8025b8:	10803fcc 	andi	r2,r2,255
  8025bc:	1080201c 	xori	r2,r2,128
  8025c0:	10bfe004 	addi	r2,r2,-128
  8025c4:	10000226 	beq	r2,zero,8025d0 <tick+0x1e3c>
  8025c8:	00800044 	movi	r2,1
  8025cc:	00000106 	br	8025d4 <tick+0x1e40>
  8025d0:	0005883a 	mov	r2,zero
  8025d4:	d0a76685 	stb	r2,-25190(gp)
      g117_e1_fix_fix =(g84||g92||g100||g107||g115||g14||g31||g53||g76||g33||g57);
  8025d8:	d0a766c3 	ldbu	r2,-25189(gp)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	1000321e 	bne	r2,zero,8026b4 <tick+0x1f20>
  8025ec:	d0a761c3 	ldbu	r2,-25209(gp)
  8025f0:	10803fcc 	andi	r2,r2,255
  8025f4:	1080201c 	xori	r2,r2,128
  8025f8:	10bfe004 	addi	r2,r2,-128
  8025fc:	10002d1e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802600:	d0a77303 	ldbu	r2,-25140(gp)
  802604:	10803fcc 	andi	r2,r2,255
  802608:	1080201c 	xori	r2,r2,128
  80260c:	10bfe004 	addi	r2,r2,-128
  802610:	1000281e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802614:	d0a78583 	ldbu	r2,-25066(gp)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	1080201c 	xori	r2,r2,128
  802620:	10bfe004 	addi	r2,r2,-128
  802624:	1000231e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802628:	d0a75d83 	ldbu	r2,-25226(gp)
  80262c:	10803fcc 	andi	r2,r2,255
  802630:	1080201c 	xori	r2,r2,128
  802634:	10bfe004 	addi	r2,r2,-128
  802638:	10001e1e 	bne	r2,zero,8026b4 <tick+0x1f20>
  80263c:	d0a77503 	ldbu	r2,-25132(gp)
  802640:	10803fcc 	andi	r2,r2,255
  802644:	1080201c 	xori	r2,r2,128
  802648:	10bfe004 	addi	r2,r2,-128
  80264c:	1000191e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802650:	d0a765c3 	ldbu	r2,-25193(gp)
  802654:	10803fcc 	andi	r2,r2,255
  802658:	1080201c 	xori	r2,r2,128
  80265c:	10bfe004 	addi	r2,r2,-128
  802660:	1000141e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802664:	d0a78743 	ldbu	r2,-25059(gp)
  802668:	10803fcc 	andi	r2,r2,255
  80266c:	1080201c 	xori	r2,r2,128
  802670:	10bfe004 	addi	r2,r2,-128
  802674:	10000f1e 	bne	r2,zero,8026b4 <tick+0x1f20>
  802678:	d0a76583 	ldbu	r2,-25194(gp)
  80267c:	10803fcc 	andi	r2,r2,255
  802680:	1080201c 	xori	r2,r2,128
  802684:	10bfe004 	addi	r2,r2,-128
  802688:	10000a1e 	bne	r2,zero,8026b4 <tick+0x1f20>
  80268c:	d0a778c3 	ldbu	r2,-25117(gp)
  802690:	10803fcc 	andi	r2,r2,255
  802694:	1080201c 	xori	r2,r2,128
  802698:	10bfe004 	addi	r2,r2,-128
  80269c:	1000051e 	bne	r2,zero,8026b4 <tick+0x1f20>
  8026a0:	d0a787c3 	ldbu	r2,-25057(gp)
  8026a4:	10803fcc 	andi	r2,r2,255
  8026a8:	1080201c 	xori	r2,r2,128
  8026ac:	10bfe004 	addi	r2,r2,-128
  8026b0:	10000226 	beq	r2,zero,8026bc <tick+0x1f28>
  8026b4:	00800044 	movi	r2,1
  8026b8:	00000106 	br	8026c0 <tick+0x1f2c>
  8026bc:	0005883a 	mov	r2,zero
  8026c0:	d0a76545 	stb	r2,-25195(gp)
      g117_e1_fix =(g82||g90||g98||g105||g6||g22||g44||g68||g36||g117_e1_fix_fix);
  8026c4:	d0a76303 	ldbu	r2,-25204(gp)
  8026c8:	10803fcc 	andi	r2,r2,255
  8026cc:	1080201c 	xori	r2,r2,128
  8026d0:	10bfe004 	addi	r2,r2,-128
  8026d4:	10002d1e 	bne	r2,zero,80278c <tick+0x1ff8>
  8026d8:	d0a77c43 	ldbu	r2,-25103(gp)
  8026dc:	10803fcc 	andi	r2,r2,255
  8026e0:	1080201c 	xori	r2,r2,128
  8026e4:	10bfe004 	addi	r2,r2,-128
  8026e8:	1000281e 	bne	r2,zero,80278c <tick+0x1ff8>
  8026ec:	d0a78703 	ldbu	r2,-25060(gp)
  8026f0:	10803fcc 	andi	r2,r2,255
  8026f4:	1080201c 	xori	r2,r2,128
  8026f8:	10bfe004 	addi	r2,r2,-128
  8026fc:	1000231e 	bne	r2,zero,80278c <tick+0x1ff8>
  802700:	d0a76b43 	ldbu	r2,-25171(gp)
  802704:	10803fcc 	andi	r2,r2,255
  802708:	1080201c 	xori	r2,r2,128
  80270c:	10bfe004 	addi	r2,r2,-128
  802710:	10001e1e 	bne	r2,zero,80278c <tick+0x1ff8>
  802714:	d0a789c3 	ldbu	r2,-25049(gp)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	1000191e 	bne	r2,zero,80278c <tick+0x1ff8>
  802728:	d0a79003 	ldbu	r2,-25024(gp)
  80272c:	10803fcc 	andi	r2,r2,255
  802730:	1080201c 	xori	r2,r2,128
  802734:	10bfe004 	addi	r2,r2,-128
  802738:	1000141e 	bne	r2,zero,80278c <tick+0x1ff8>
  80273c:	d0a76003 	ldbu	r2,-25216(gp)
  802740:	10803fcc 	andi	r2,r2,255
  802744:	1080201c 	xori	r2,r2,128
  802748:	10bfe004 	addi	r2,r2,-128
  80274c:	10000f1e 	bne	r2,zero,80278c <tick+0x1ff8>
  802750:	d0a78e83 	ldbu	r2,-25030(gp)
  802754:	10803fcc 	andi	r2,r2,255
  802758:	1080201c 	xori	r2,r2,128
  80275c:	10bfe004 	addi	r2,r2,-128
  802760:	10000a1e 	bne	r2,zero,80278c <tick+0x1ff8>
  802764:	d0a782c3 	ldbu	r2,-25077(gp)
  802768:	10803fcc 	andi	r2,r2,255
  80276c:	1080201c 	xori	r2,r2,128
  802770:	10bfe004 	addi	r2,r2,-128
  802774:	1000051e 	bne	r2,zero,80278c <tick+0x1ff8>
  802778:	d0a76543 	ldbu	r2,-25195(gp)
  80277c:	10803fcc 	andi	r2,r2,255
  802780:	1080201c 	xori	r2,r2,128
  802784:	10bfe004 	addi	r2,r2,-128
  802788:	10000226 	beq	r2,zero,802794 <tick+0x2000>
  80278c:	00800044 	movi	r2,1
  802790:	00000106 	br	802798 <tick+0x2004>
  802794:	0005883a 	mov	r2,zero
  802798:	d0a77a85 	stb	r2,-25110(gp)
      g117_e1 =(!((g4||g11||g20||g28||g42||g50||g66||g73||g111||g117_e1_fix)));
  80279c:	d0a755c3 	ldbu	r2,-25257(gp)
  8027a0:	10803fcc 	andi	r2,r2,255
  8027a4:	1080201c 	xori	r2,r2,128
  8027a8:	10bfe004 	addi	r2,r2,-128
  8027ac:	10002f1e 	bne	r2,zero,80286c <tick+0x20d8>
  8027b0:	d0a78f43 	ldbu	r2,-25027(gp)
  8027b4:	10803fcc 	andi	r2,r2,255
  8027b8:	1080201c 	xori	r2,r2,128
  8027bc:	10bfe004 	addi	r2,r2,-128
  8027c0:	10002a1e 	bne	r2,zero,80286c <tick+0x20d8>
  8027c4:	d0a77dc3 	ldbu	r2,-25097(gp)
  8027c8:	10803fcc 	andi	r2,r2,255
  8027cc:	1080201c 	xori	r2,r2,128
  8027d0:	10bfe004 	addi	r2,r2,-128
  8027d4:	1000251e 	bne	r2,zero,80286c <tick+0x20d8>
  8027d8:	d0a79043 	ldbu	r2,-25023(gp)
  8027dc:	10803fcc 	andi	r2,r2,255
  8027e0:	1080201c 	xori	r2,r2,128
  8027e4:	10bfe004 	addi	r2,r2,-128
  8027e8:	1000201e 	bne	r2,zero,80286c <tick+0x20d8>
  8027ec:	d0a75a83 	ldbu	r2,-25238(gp)
  8027f0:	10803fcc 	andi	r2,r2,255
  8027f4:	1080201c 	xori	r2,r2,128
  8027f8:	10bfe004 	addi	r2,r2,-128
  8027fc:	10001b1e 	bne	r2,zero,80286c <tick+0x20d8>
  802800:	d0a78483 	ldbu	r2,-25070(gp)
  802804:	10803fcc 	andi	r2,r2,255
  802808:	1080201c 	xori	r2,r2,128
  80280c:	10bfe004 	addi	r2,r2,-128
  802810:	1000161e 	bne	r2,zero,80286c <tick+0x20d8>
  802814:	d0a77403 	ldbu	r2,-25136(gp)
  802818:	10803fcc 	andi	r2,r2,255
  80281c:	1080201c 	xori	r2,r2,128
  802820:	10bfe004 	addi	r2,r2,-128
  802824:	1000111e 	bne	r2,zero,80286c <tick+0x20d8>
  802828:	d0a79083 	ldbu	r2,-25022(gp)
  80282c:	10803fcc 	andi	r2,r2,255
  802830:	1080201c 	xori	r2,r2,128
  802834:	10bfe004 	addi	r2,r2,-128
  802838:	10000c1e 	bne	r2,zero,80286c <tick+0x20d8>
  80283c:	d0a75683 	ldbu	r2,-25254(gp)
  802840:	10803fcc 	andi	r2,r2,255
  802844:	1080201c 	xori	r2,r2,128
  802848:	10bfe004 	addi	r2,r2,-128
  80284c:	1000071e 	bne	r2,zero,80286c <tick+0x20d8>
  802850:	d0a77a83 	ldbu	r2,-25110(gp)
  802854:	10803fcc 	andi	r2,r2,255
  802858:	1080201c 	xori	r2,r2,128
  80285c:	10bfe004 	addi	r2,r2,-128
  802860:	1000021e 	bne	r2,zero,80286c <tick+0x20d8>
  802864:	00800044 	movi	r2,1
  802868:	00000106 	br	802870 <tick+0x20dc>
  80286c:	0005883a 	mov	r2,zero
  802870:	d0a790c5 	stb	r2,-25021(gp)
      g121_e2 =(!(g120));
  802874:	d0a794c3 	ldbu	r2,-25005(gp)
  802878:	10803fcc 	andi	r2,r2,255
  80287c:	1080201c 	xori	r2,r2,128
  802880:	10bfe004 	addi	r2,r2,-128
  802884:	1005003a 	cmpeq	r2,r2,zero
  802888:	d0a767c5 	stb	r2,-25185(gp)
   }
   PRE_g3 = g3;
  80288c:	d0a75883 	ldbu	r2,-25246(gp)
  802890:	d0a75d05 	stb	r2,-25228(gp)
   PRE_g5 = g5;
  802894:	d0a76fc3 	ldbu	r2,-25153(gp)
  802898:	d0a79385 	stb	r2,-25010(gp)
   PRE_g10 = g10;
  80289c:	d0a79743 	ldbu	r2,-24995(gp)
  8028a0:	d0a769c5 	stb	r2,-25177(gp)
   PRE_g13 = g13;
  8028a4:	d0a78683 	ldbu	r2,-25062(gp)
  8028a8:	d0a75e85 	stb	r2,-25222(gp)
   PRE_g19 = g19;
  8028ac:	d0a75643 	ldbu	r2,-25255(gp)
  8028b0:	d0a77e85 	stb	r2,-25094(gp)
   PRE_g21 = g21;
  8028b4:	d0a76e03 	ldbu	r2,-25160(gp)
  8028b8:	d0a78d05 	stb	r2,-25036(gp)
   PRE_g27 = g27;
  8028bc:	d0a75743 	ldbu	r2,-25251(gp)
  8028c0:	d0a759c5 	stb	r2,-25241(gp)
   PRE_g30 = g30;
  8028c4:	d0a78c83 	ldbu	r2,-25038(gp)
  8028c8:	d0a793c5 	stb	r2,-25009(gp)
   PRE_g32 = g32;
  8028cc:	d0a79143 	ldbu	r2,-25019(gp)
  8028d0:	d0a75f45 	stb	r2,-25219(gp)
   PRE_g35 = g35;
  8028d4:	d0a77bc3 	ldbu	r2,-25105(gp)
  8028d8:	d0a76a45 	stb	r2,-25175(gp)
   PRE_g41 = g41;
  8028dc:	d0a76703 	ldbu	r2,-25188(gp)
  8028e0:	d0a786c5 	stb	r2,-25061(gp)
   PRE_g43 = g43;
  8028e4:	d0a780c3 	ldbu	r2,-25085(gp)
  8028e8:	d0a78105 	stb	r2,-25084(gp)
   PRE_g49 = g49;
  8028ec:	d0a77103 	ldbu	r2,-25148(gp)
  8028f0:	d0a76785 	stb	r2,-25186(gp)
   PRE_g52 = g52;
  8028f4:	d0a76443 	ldbu	r2,-25199(gp)
  8028f8:	d0a77805 	stb	r2,-25120(gp)
   PRE_g56 = g56;
  8028fc:	d0a777c3 	ldbu	r2,-25121(gp)
  802900:	d0a75e45 	stb	r2,-25223(gp)
   PRE_g65 = g65;
  802904:	d0a78fc3 	ldbu	r2,-25025(gp)
  802908:	d0a76105 	stb	r2,-25212(gp)
   PRE_g67 = g67;
  80290c:	d0a795c3 	ldbu	r2,-25001(gp)
  802910:	d0a77a45 	stb	r2,-25111(gp)
   PRE_g72 = g72;
  802914:	d0a78ac3 	ldbu	r2,-25045(gp)
  802918:	d0a75ec5 	stb	r2,-25221(gp)
   PRE_g75 = g75;
  80291c:	d0a78c43 	ldbu	r2,-25039(gp)
  802920:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g81 = g81;
  802924:	d0a78b03 	ldbu	r2,-25044(gp)
  802928:	d0a768c5 	stb	r2,-25181(gp)
   PRE_g83 = g83;
  80292c:	d0a75483 	ldbu	r2,-25262(gp)
  802930:	d0a77b45 	stb	r2,-25107(gp)
   PRE_g89 = g89;
  802934:	d0a78343 	ldbu	r2,-25075(gp)
  802938:	d0a78805 	stb	r2,-25056(gp)
   PRE_g91 = g91;
  80293c:	d0a75543 	ldbu	r2,-25259(gp)
  802940:	d0a77d45 	stb	r2,-25099(gp)
   PRE_g97 = g97;
  802944:	d0a76403 	ldbu	r2,-25200(gp)
  802948:	d0a78005 	stb	r2,-25088(gp)
   PRE_g99 = g99;
  80294c:	d0a77383 	ldbu	r2,-25138(gp)
  802950:	d0a78bc5 	stb	r2,-25041(gp)
   PRE_g104 = g104;
  802954:	d0a78603 	ldbu	r2,-25064(gp)
  802958:	d0a76985 	stb	r2,-25178(gp)
   PRE_g106 = g106;
  80295c:	d0a796c3 	ldbu	r2,-24997(gp)
  802960:	d0a77b85 	stb	r2,-25106(gp)
   PRE_g110 = g110;
  802964:	d0a770c3 	ldbu	r2,-25149(gp)
  802968:	d0a78b45 	stb	r2,-25043(gp)
   PRE_g114 = g114;
  80296c:	d0a77783 	ldbu	r2,-25122(gp)
  802970:	d0a75ac5 	stb	r2,-25237(gp)
   PRE_g119 = g119;
  802974:	d0a77f83 	ldbu	r2,-25090(gp)
  802978:	d0a77905 	stb	r2,-25116(gp)
   _PRE_GO = _GO;
  80297c:	d0a77c83 	ldbu	r2,-25102(gp)
  802980:	10803fcc 	andi	r2,r2,255
  802984:	1080201c 	xori	r2,r2,128
  802988:	10bfe004 	addi	r2,r2,-128
  80298c:	d0a75c15 	stw	r2,-25232(gp)
   return;
  802990:	0001883a 	nop
}
  802994:	e037883a 	mov	sp,fp
  802998:	df000017 	ldw	fp,0(sp)
  80299c:	dec00104 	addi	sp,sp,4
  8029a0:	f800283a 	ret

008029a4 <_printf_r>:
  8029a4:	defffd04 	addi	sp,sp,-12
  8029a8:	2805883a 	mov	r2,r5
  8029ac:	dfc00015 	stw	ra,0(sp)
  8029b0:	d9800115 	stw	r6,4(sp)
  8029b4:	d9c00215 	stw	r7,8(sp)
  8029b8:	21400217 	ldw	r5,8(r4)
  8029bc:	d9c00104 	addi	r7,sp,4
  8029c0:	100d883a 	mov	r6,r2
  8029c4:	0802a100 	call	802a10 <___vfprintf_internal_r>
  8029c8:	dfc00017 	ldw	ra,0(sp)
  8029cc:	dec00304 	addi	sp,sp,12
  8029d0:	f800283a 	ret

008029d4 <printf>:
  8029d4:	defffc04 	addi	sp,sp,-16
  8029d8:	dfc00015 	stw	ra,0(sp)
  8029dc:	d9400115 	stw	r5,4(sp)
  8029e0:	d9800215 	stw	r6,8(sp)
  8029e4:	d9c00315 	stw	r7,12(sp)
  8029e8:	00802074 	movhi	r2,129
  8029ec:	10956904 	addi	r2,r2,21924
  8029f0:	10800017 	ldw	r2,0(r2)
  8029f4:	200b883a 	mov	r5,r4
  8029f8:	d9800104 	addi	r6,sp,4
  8029fc:	11000217 	ldw	r4,8(r2)
  802a00:	0804c080 	call	804c08 <__vfprintf_internal>
  802a04:	dfc00017 	ldw	ra,0(sp)
  802a08:	dec00404 	addi	sp,sp,16
  802a0c:	f800283a 	ret

00802a10 <___vfprintf_internal_r>:
  802a10:	deffb804 	addi	sp,sp,-288
  802a14:	dfc04715 	stw	ra,284(sp)
  802a18:	ddc04515 	stw	r23,276(sp)
  802a1c:	dd404315 	stw	r21,268(sp)
  802a20:	d9002c15 	stw	r4,176(sp)
  802a24:	282f883a 	mov	r23,r5
  802a28:	302b883a 	mov	r21,r6
  802a2c:	d9c02d15 	stw	r7,180(sp)
  802a30:	df004615 	stw	fp,280(sp)
  802a34:	dd804415 	stw	r22,272(sp)
  802a38:	dd004215 	stw	r20,264(sp)
  802a3c:	dcc04115 	stw	r19,260(sp)
  802a40:	dc804015 	stw	r18,256(sp)
  802a44:	dc403f15 	stw	r17,252(sp)
  802a48:	dc003e15 	stw	r16,248(sp)
  802a4c:	080736c0 	call	80736c <_localeconv_r>
  802a50:	10800017 	ldw	r2,0(r2)
  802a54:	1009883a 	mov	r4,r2
  802a58:	d8803415 	stw	r2,208(sp)
  802a5c:	08093940 	call	809394 <strlen>
  802a60:	d8803715 	stw	r2,220(sp)
  802a64:	d8802c17 	ldw	r2,176(sp)
  802a68:	10000226 	beq	r2,zero,802a74 <___vfprintf_internal_r+0x64>
  802a6c:	10800e17 	ldw	r2,56(r2)
  802a70:	1000f926 	beq	r2,zero,802e58 <___vfprintf_internal_r+0x448>
  802a74:	b880030b 	ldhu	r2,12(r23)
  802a78:	10c8000c 	andi	r3,r2,8192
  802a7c:	1800061e 	bne	r3,zero,802a98 <___vfprintf_internal_r+0x88>
  802a80:	b9001917 	ldw	r4,100(r23)
  802a84:	00f7ffc4 	movi	r3,-8193
  802a88:	10880014 	ori	r2,r2,8192
  802a8c:	20c6703a 	and	r3,r4,r3
  802a90:	b880030d 	sth	r2,12(r23)
  802a94:	b8c01915 	stw	r3,100(r23)
  802a98:	10c0020c 	andi	r3,r2,8
  802a9c:	1800c126 	beq	r3,zero,802da4 <___vfprintf_internal_r+0x394>
  802aa0:	b8c00417 	ldw	r3,16(r23)
  802aa4:	1800bf26 	beq	r3,zero,802da4 <___vfprintf_internal_r+0x394>
  802aa8:	1080068c 	andi	r2,r2,26
  802aac:	00c00284 	movi	r3,10
  802ab0:	10c0c426 	beq	r2,r3,802dc4 <___vfprintf_internal_r+0x3b4>
  802ab4:	d8c00404 	addi	r3,sp,16
  802ab8:	05002074 	movhi	r20,129
  802abc:	d9001e04 	addi	r4,sp,120
  802ac0:	a50cf184 	addi	r20,r20,13254
  802ac4:	d8c01e15 	stw	r3,120(sp)
  802ac8:	d8002015 	stw	zero,128(sp)
  802acc:	d8001f15 	stw	zero,124(sp)
  802ad0:	d8003315 	stw	zero,204(sp)
  802ad4:	d8003615 	stw	zero,216(sp)
  802ad8:	d8003815 	stw	zero,224(sp)
  802adc:	1811883a 	mov	r8,r3
  802ae0:	d8003915 	stw	zero,228(sp)
  802ae4:	d8003a15 	stw	zero,232(sp)
  802ae8:	d8002f15 	stw	zero,188(sp)
  802aec:	d9002815 	stw	r4,160(sp)
  802af0:	a8800007 	ldb	r2,0(r21)
  802af4:	10027b26 	beq	r2,zero,8034e4 <___vfprintf_internal_r+0xad4>
  802af8:	00c00944 	movi	r3,37
  802afc:	a821883a 	mov	r16,r21
  802b00:	10c0021e 	bne	r2,r3,802b0c <___vfprintf_internal_r+0xfc>
  802b04:	00001406 	br	802b58 <___vfprintf_internal_r+0x148>
  802b08:	10c00326 	beq	r2,r3,802b18 <___vfprintf_internal_r+0x108>
  802b0c:	84000044 	addi	r16,r16,1
  802b10:	80800007 	ldb	r2,0(r16)
  802b14:	103ffc1e 	bne	r2,zero,802b08 <__alt_mem_onchip_mem+0xff782b08>
  802b18:	8563c83a 	sub	r17,r16,r21
  802b1c:	88000e26 	beq	r17,zero,802b58 <___vfprintf_internal_r+0x148>
  802b20:	d8c02017 	ldw	r3,128(sp)
  802b24:	d8801f17 	ldw	r2,124(sp)
  802b28:	45400015 	stw	r21,0(r8)
  802b2c:	1c47883a 	add	r3,r3,r17
  802b30:	10800044 	addi	r2,r2,1
  802b34:	d8c02015 	stw	r3,128(sp)
  802b38:	44400115 	stw	r17,4(r8)
  802b3c:	d8801f15 	stw	r2,124(sp)
  802b40:	00c001c4 	movi	r3,7
  802b44:	1880a716 	blt	r3,r2,802de4 <___vfprintf_internal_r+0x3d4>
  802b48:	42000204 	addi	r8,r8,8
  802b4c:	d9402f17 	ldw	r5,188(sp)
  802b50:	2c4b883a 	add	r5,r5,r17
  802b54:	d9402f15 	stw	r5,188(sp)
  802b58:	80800007 	ldb	r2,0(r16)
  802b5c:	1000a826 	beq	r2,zero,802e00 <___vfprintf_internal_r+0x3f0>
  802b60:	84400047 	ldb	r17,1(r16)
  802b64:	00bfffc4 	movi	r2,-1
  802b68:	85400044 	addi	r21,r16,1
  802b6c:	d8002785 	stb	zero,158(sp)
  802b70:	0007883a 	mov	r3,zero
  802b74:	000f883a 	mov	r7,zero
  802b78:	d8802915 	stw	r2,164(sp)
  802b7c:	d8003115 	stw	zero,196(sp)
  802b80:	0025883a 	mov	r18,zero
  802b84:	01401604 	movi	r5,88
  802b88:	01800244 	movi	r6,9
  802b8c:	02800a84 	movi	r10,42
  802b90:	02401b04 	movi	r9,108
  802b94:	ad400044 	addi	r21,r21,1
  802b98:	88bff804 	addi	r2,r17,-32
  802b9c:	28830436 	bltu	r5,r2,8037b0 <___vfprintf_internal_r+0xda0>
  802ba0:	100490ba 	slli	r2,r2,2
  802ba4:	01002034 	movhi	r4,128
  802ba8:	210aee04 	addi	r4,r4,11192
  802bac:	1105883a 	add	r2,r2,r4
  802bb0:	10800017 	ldw	r2,0(r2)
  802bb4:	1000683a 	jmp	r2
  802bb8:	008036d0 	cmplti	r2,zero,219
  802bbc:	008037b0 	cmpltui	r2,zero,222
  802bc0:	008037b0 	cmpltui	r2,zero,222
  802bc4:	008036f0 	cmpltui	r2,zero,219
  802bc8:	008037b0 	cmpltui	r2,zero,222
  802bcc:	008037b0 	cmpltui	r2,zero,222
  802bd0:	008037b0 	cmpltui	r2,zero,222
  802bd4:	008037b0 	cmpltui	r2,zero,222
  802bd8:	008037b0 	cmpltui	r2,zero,222
  802bdc:	008037b0 	cmpltui	r2,zero,222
  802be0:	00802e64 	muli	r2,zero,185
  802be4:	0080360c 	andi	r2,zero,216
  802be8:	008037b0 	cmpltui	r2,zero,222
  802bec:	00802d2c 	andhi	r2,zero,180
  802bf0:	00802e8c 	andi	r2,zero,186
  802bf4:	008037b0 	cmpltui	r2,zero,222
  802bf8:	00802ecc 	andi	r2,zero,187
  802bfc:	00802ed8 	cmpnei	r2,zero,187
  802c00:	00802ed8 	cmpnei	r2,zero,187
  802c04:	00802ed8 	cmpnei	r2,zero,187
  802c08:	00802ed8 	cmpnei	r2,zero,187
  802c0c:	00802ed8 	cmpnei	r2,zero,187
  802c10:	00802ed8 	cmpnei	r2,zero,187
  802c14:	00802ed8 	cmpnei	r2,zero,187
  802c18:	00802ed8 	cmpnei	r2,zero,187
  802c1c:	00802ed8 	cmpnei	r2,zero,187
  802c20:	008037b0 	cmpltui	r2,zero,222
  802c24:	008037b0 	cmpltui	r2,zero,222
  802c28:	008037b0 	cmpltui	r2,zero,222
  802c2c:	008037b0 	cmpltui	r2,zero,222
  802c30:	008037b0 	cmpltui	r2,zero,222
  802c34:	008037b0 	cmpltui	r2,zero,222
  802c38:	008037b0 	cmpltui	r2,zero,222
  802c3c:	008037b0 	cmpltui	r2,zero,222
  802c40:	008037b0 	cmpltui	r2,zero,222
  802c44:	008037b0 	cmpltui	r2,zero,222
  802c48:	00802f0c 	andi	r2,zero,188
  802c4c:	00802fc8 	cmpgei	r2,zero,191
  802c50:	008037b0 	cmpltui	r2,zero,222
  802c54:	00802fc8 	cmpgei	r2,zero,191
  802c58:	008037b0 	cmpltui	r2,zero,222
  802c5c:	008037b0 	cmpltui	r2,zero,222
  802c60:	008037b0 	cmpltui	r2,zero,222
  802c64:	008037b0 	cmpltui	r2,zero,222
  802c68:	00803068 	cmpgeui	r2,zero,193
  802c6c:	008037b0 	cmpltui	r2,zero,222
  802c70:	008037b0 	cmpltui	r2,zero,222
  802c74:	00803074 	movhi	r2,193
  802c78:	008037b0 	cmpltui	r2,zero,222
  802c7c:	008037b0 	cmpltui	r2,zero,222
  802c80:	008037b0 	cmpltui	r2,zero,222
  802c84:	008037b0 	cmpltui	r2,zero,222
  802c88:	008037b0 	cmpltui	r2,zero,222
  802c8c:	008034ec 	andhi	r2,zero,211
  802c90:	008037b0 	cmpltui	r2,zero,222
  802c94:	008037b0 	cmpltui	r2,zero,222
  802c98:	0080354c 	andi	r2,zero,213
  802c9c:	008037b0 	cmpltui	r2,zero,222
  802ca0:	008037b0 	cmpltui	r2,zero,222
  802ca4:	008037b0 	cmpltui	r2,zero,222
  802ca8:	008037b0 	cmpltui	r2,zero,222
  802cac:	008037b0 	cmpltui	r2,zero,222
  802cb0:	008037b0 	cmpltui	r2,zero,222
  802cb4:	008037b0 	cmpltui	r2,zero,222
  802cb8:	008037b0 	cmpltui	r2,zero,222
  802cbc:	008037b0 	cmpltui	r2,zero,222
  802cc0:	008037b0 	cmpltui	r2,zero,222
  802cc4:	0080375c 	xori	r2,zero,221
  802cc8:	008036fc 	xorhi	r2,zero,219
  802ccc:	00802fc8 	cmpgei	r2,zero,191
  802cd0:	00802fc8 	cmpgei	r2,zero,191
  802cd4:	00802fc8 	cmpgei	r2,zero,191
  802cd8:	0080370c 	andi	r2,zero,220
  802cdc:	008036fc 	xorhi	r2,zero,219
  802ce0:	008037b0 	cmpltui	r2,zero,222
  802ce4:	008037b0 	cmpltui	r2,zero,222
  802ce8:	00803718 	cmpnei	r2,zero,220
  802cec:	008037b0 	cmpltui	r2,zero,222
  802cf0:	00803728 	cmpgeui	r2,zero,220
  802cf4:	008035fc 	xorhi	r2,zero,215
  802cf8:	00802d38 	rdprs	r2,zero,180
  802cfc:	0080361c 	xori	r2,zero,216
  802d00:	008037b0 	cmpltui	r2,zero,222
  802d04:	00803628 	cmpgeui	r2,zero,216
  802d08:	008037b0 	cmpltui	r2,zero,222
  802d0c:	00803684 	movi	r2,218
  802d10:	008037b0 	cmpltui	r2,zero,222
  802d14:	008037b0 	cmpltui	r2,zero,222
  802d18:	00803694 	movui	r2,218
  802d1c:	d9003117 	ldw	r4,196(sp)
  802d20:	d8802d15 	stw	r2,180(sp)
  802d24:	0109c83a 	sub	r4,zero,r4
  802d28:	d9003115 	stw	r4,196(sp)
  802d2c:	94800114 	ori	r18,r18,4
  802d30:	ac400007 	ldb	r17,0(r21)
  802d34:	003f9706 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  802d38:	00800c04 	movi	r2,48
  802d3c:	d9002d17 	ldw	r4,180(sp)
  802d40:	d9402917 	ldw	r5,164(sp)
  802d44:	d8802705 	stb	r2,156(sp)
  802d48:	00801e04 	movi	r2,120
  802d4c:	d8802745 	stb	r2,157(sp)
  802d50:	d8002785 	stb	zero,158(sp)
  802d54:	20c00104 	addi	r3,r4,4
  802d58:	24c00017 	ldw	r19,0(r4)
  802d5c:	002d883a 	mov	r22,zero
  802d60:	90800094 	ori	r2,r18,2
  802d64:	28029a16 	blt	r5,zero,8037d0 <___vfprintf_internal_r+0xdc0>
  802d68:	00bfdfc4 	movi	r2,-129
  802d6c:	90a4703a 	and	r18,r18,r2
  802d70:	d8c02d15 	stw	r3,180(sp)
  802d74:	94800094 	ori	r18,r18,2
  802d78:	9802871e 	bne	r19,zero,803798 <___vfprintf_internal_r+0xd88>
  802d7c:	00802074 	movhi	r2,129
  802d80:	108cea04 	addi	r2,r2,13224
  802d84:	d8803915 	stw	r2,228(sp)
  802d88:	04401e04 	movi	r17,120
  802d8c:	d8802917 	ldw	r2,164(sp)
  802d90:	0039883a 	mov	fp,zero
  802d94:	1001e926 	beq	r2,zero,80353c <___vfprintf_internal_r+0xb2c>
  802d98:	0027883a 	mov	r19,zero
  802d9c:	002d883a 	mov	r22,zero
  802da0:	00020506 	br	8035b8 <___vfprintf_internal_r+0xba8>
  802da4:	d9002c17 	ldw	r4,176(sp)
  802da8:	b80b883a 	mov	r5,r23
  802dac:	0804ce00 	call	804ce0 <__swsetup_r>
  802db0:	1005ac1e 	bne	r2,zero,804464 <___vfprintf_internal_r+0x1a54>
  802db4:	b880030b 	ldhu	r2,12(r23)
  802db8:	00c00284 	movi	r3,10
  802dbc:	1080068c 	andi	r2,r2,26
  802dc0:	10ff3c1e 	bne	r2,r3,802ab4 <__alt_mem_onchip_mem+0xff782ab4>
  802dc4:	b880038f 	ldh	r2,14(r23)
  802dc8:	103f3a16 	blt	r2,zero,802ab4 <__alt_mem_onchip_mem+0xff782ab4>
  802dcc:	d9c02d17 	ldw	r7,180(sp)
  802dd0:	d9002c17 	ldw	r4,176(sp)
  802dd4:	a80d883a 	mov	r6,r21
  802dd8:	b80b883a 	mov	r5,r23
  802ddc:	0804c240 	call	804c24 <__sbprintf>
  802de0:	00001106 	br	802e28 <___vfprintf_internal_r+0x418>
  802de4:	d9002c17 	ldw	r4,176(sp)
  802de8:	d9801e04 	addi	r6,sp,120
  802dec:	b80b883a 	mov	r5,r23
  802df0:	08095280 	call	809528 <__sprint_r>
  802df4:	1000081e 	bne	r2,zero,802e18 <___vfprintf_internal_r+0x408>
  802df8:	da000404 	addi	r8,sp,16
  802dfc:	003f5306 	br	802b4c <__alt_mem_onchip_mem+0xff782b4c>
  802e00:	d8802017 	ldw	r2,128(sp)
  802e04:	10000426 	beq	r2,zero,802e18 <___vfprintf_internal_r+0x408>
  802e08:	d9002c17 	ldw	r4,176(sp)
  802e0c:	d9801e04 	addi	r6,sp,120
  802e10:	b80b883a 	mov	r5,r23
  802e14:	08095280 	call	809528 <__sprint_r>
  802e18:	b880030b 	ldhu	r2,12(r23)
  802e1c:	1080100c 	andi	r2,r2,64
  802e20:	1005901e 	bne	r2,zero,804464 <___vfprintf_internal_r+0x1a54>
  802e24:	d8802f17 	ldw	r2,188(sp)
  802e28:	dfc04717 	ldw	ra,284(sp)
  802e2c:	df004617 	ldw	fp,280(sp)
  802e30:	ddc04517 	ldw	r23,276(sp)
  802e34:	dd804417 	ldw	r22,272(sp)
  802e38:	dd404317 	ldw	r21,268(sp)
  802e3c:	dd004217 	ldw	r20,264(sp)
  802e40:	dcc04117 	ldw	r19,260(sp)
  802e44:	dc804017 	ldw	r18,256(sp)
  802e48:	dc403f17 	ldw	r17,252(sp)
  802e4c:	dc003e17 	ldw	r16,248(sp)
  802e50:	dec04804 	addi	sp,sp,288
  802e54:	f800283a 	ret
  802e58:	d9002c17 	ldw	r4,176(sp)
  802e5c:	0806cb40 	call	806cb4 <__sinit>
  802e60:	003f0406 	br	802a74 <__alt_mem_onchip_mem+0xff782a74>
  802e64:	d8802d17 	ldw	r2,180(sp)
  802e68:	d9002d17 	ldw	r4,180(sp)
  802e6c:	10800017 	ldw	r2,0(r2)
  802e70:	d8803115 	stw	r2,196(sp)
  802e74:	20800104 	addi	r2,r4,4
  802e78:	d9003117 	ldw	r4,196(sp)
  802e7c:	203fa716 	blt	r4,zero,802d1c <__alt_mem_onchip_mem+0xff782d1c>
  802e80:	d8802d15 	stw	r2,180(sp)
  802e84:	ac400007 	ldb	r17,0(r21)
  802e88:	003f4206 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  802e8c:	ac400007 	ldb	r17,0(r21)
  802e90:	aac00044 	addi	r11,r21,1
  802e94:	8a872826 	beq	r17,r10,804b38 <___vfprintf_internal_r+0x2128>
  802e98:	88bff404 	addi	r2,r17,-48
  802e9c:	0009883a 	mov	r4,zero
  802ea0:	30867d36 	bltu	r6,r2,804898 <___vfprintf_internal_r+0x1e88>
  802ea4:	5c400007 	ldb	r17,0(r11)
  802ea8:	210002a4 	muli	r4,r4,10
  802eac:	5d400044 	addi	r21,r11,1
  802eb0:	a817883a 	mov	r11,r21
  802eb4:	2089883a 	add	r4,r4,r2
  802eb8:	88bff404 	addi	r2,r17,-48
  802ebc:	30bff92e 	bgeu	r6,r2,802ea4 <__alt_mem_onchip_mem+0xff782ea4>
  802ec0:	2005c916 	blt	r4,zero,8045e8 <___vfprintf_internal_r+0x1bd8>
  802ec4:	d9002915 	stw	r4,164(sp)
  802ec8:	003f3306 	br	802b98 <__alt_mem_onchip_mem+0xff782b98>
  802ecc:	94802014 	ori	r18,r18,128
  802ed0:	ac400007 	ldb	r17,0(r21)
  802ed4:	003f2f06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  802ed8:	a809883a 	mov	r4,r21
  802edc:	d8003115 	stw	zero,196(sp)
  802ee0:	88bff404 	addi	r2,r17,-48
  802ee4:	0017883a 	mov	r11,zero
  802ee8:	24400007 	ldb	r17,0(r4)
  802eec:	5ac002a4 	muli	r11,r11,10
  802ef0:	ad400044 	addi	r21,r21,1
  802ef4:	a809883a 	mov	r4,r21
  802ef8:	12d7883a 	add	r11,r2,r11
  802efc:	88bff404 	addi	r2,r17,-48
  802f00:	30bff92e 	bgeu	r6,r2,802ee8 <__alt_mem_onchip_mem+0xff782ee8>
  802f04:	dac03115 	stw	r11,196(sp)
  802f08:	003f2306 	br	802b98 <__alt_mem_onchip_mem+0xff782b98>
  802f0c:	18c03fcc 	andi	r3,r3,255
  802f10:	18072b1e 	bne	r3,zero,804bc0 <___vfprintf_internal_r+0x21b0>
  802f14:	94800414 	ori	r18,r18,16
  802f18:	9080080c 	andi	r2,r18,32
  802f1c:	10037b26 	beq	r2,zero,803d0c <___vfprintf_internal_r+0x12fc>
  802f20:	d9402d17 	ldw	r5,180(sp)
  802f24:	28800117 	ldw	r2,4(r5)
  802f28:	2cc00017 	ldw	r19,0(r5)
  802f2c:	29400204 	addi	r5,r5,8
  802f30:	d9402d15 	stw	r5,180(sp)
  802f34:	102d883a 	mov	r22,r2
  802f38:	10044b16 	blt	r2,zero,804068 <___vfprintf_internal_r+0x1658>
  802f3c:	d9402917 	ldw	r5,164(sp)
  802f40:	df002783 	ldbu	fp,158(sp)
  802f44:	2803bc16 	blt	r5,zero,803e38 <___vfprintf_internal_r+0x1428>
  802f48:	00ffdfc4 	movi	r3,-129
  802f4c:	9d84b03a 	or	r2,r19,r22
  802f50:	90e4703a 	and	r18,r18,r3
  802f54:	10017726 	beq	r2,zero,803534 <___vfprintf_internal_r+0xb24>
  802f58:	b0038326 	beq	r22,zero,803d68 <___vfprintf_internal_r+0x1358>
  802f5c:	dc402a15 	stw	r17,168(sp)
  802f60:	dc001e04 	addi	r16,sp,120
  802f64:	b023883a 	mov	r17,r22
  802f68:	402d883a 	mov	r22,r8
  802f6c:	9809883a 	mov	r4,r19
  802f70:	880b883a 	mov	r5,r17
  802f74:	01800284 	movi	r6,10
  802f78:	000f883a 	mov	r7,zero
  802f7c:	080c49c0 	call	80c49c <__umoddi3>
  802f80:	10800c04 	addi	r2,r2,48
  802f84:	843fffc4 	addi	r16,r16,-1
  802f88:	9809883a 	mov	r4,r19
  802f8c:	880b883a 	mov	r5,r17
  802f90:	80800005 	stb	r2,0(r16)
  802f94:	01800284 	movi	r6,10
  802f98:	000f883a 	mov	r7,zero
  802f9c:	080bf240 	call	80bf24 <__udivdi3>
  802fa0:	1027883a 	mov	r19,r2
  802fa4:	10c4b03a 	or	r2,r2,r3
  802fa8:	1823883a 	mov	r17,r3
  802fac:	103fef1e 	bne	r2,zero,802f6c <__alt_mem_onchip_mem+0xff782f6c>
  802fb0:	d8c02817 	ldw	r3,160(sp)
  802fb4:	dc402a17 	ldw	r17,168(sp)
  802fb8:	b011883a 	mov	r8,r22
  802fbc:	1c07c83a 	sub	r3,r3,r16
  802fc0:	d8c02e15 	stw	r3,184(sp)
  802fc4:	00005906 	br	80312c <___vfprintf_internal_r+0x71c>
  802fc8:	18c03fcc 	andi	r3,r3,255
  802fcc:	1806fa1e 	bne	r3,zero,804bb8 <___vfprintf_internal_r+0x21a8>
  802fd0:	9080020c 	andi	r2,r18,8
  802fd4:	10048a26 	beq	r2,zero,804200 <___vfprintf_internal_r+0x17f0>
  802fd8:	d8c02d17 	ldw	r3,180(sp)
  802fdc:	d9002d17 	ldw	r4,180(sp)
  802fe0:	d9402d17 	ldw	r5,180(sp)
  802fe4:	18c00017 	ldw	r3,0(r3)
  802fe8:	21000117 	ldw	r4,4(r4)
  802fec:	29400204 	addi	r5,r5,8
  802ff0:	d8c03615 	stw	r3,216(sp)
  802ff4:	d9003815 	stw	r4,224(sp)
  802ff8:	d9402d15 	stw	r5,180(sp)
  802ffc:	d9003617 	ldw	r4,216(sp)
  803000:	d9403817 	ldw	r5,224(sp)
  803004:	da003d15 	stw	r8,244(sp)
  803008:	04000044 	movi	r16,1
  80300c:	08090b40 	call	8090b4 <__fpclassifyd>
  803010:	da003d17 	ldw	r8,244(sp)
  803014:	14041f1e 	bne	r2,r16,804094 <___vfprintf_internal_r+0x1684>
  803018:	d9003617 	ldw	r4,216(sp)
  80301c:	d9403817 	ldw	r5,224(sp)
  803020:	000d883a 	mov	r6,zero
  803024:	000f883a 	mov	r7,zero
  803028:	080de800 	call	80de80 <__ledf2>
  80302c:	da003d17 	ldw	r8,244(sp)
  803030:	1005be16 	blt	r2,zero,80472c <___vfprintf_internal_r+0x1d1c>
  803034:	df002783 	ldbu	fp,158(sp)
  803038:	008011c4 	movi	r2,71
  80303c:	1445330e 	bge	r2,r17,80450c <___vfprintf_internal_r+0x1afc>
  803040:	04002074 	movhi	r16,129
  803044:	840ce204 	addi	r16,r16,13192
  803048:	00c000c4 	movi	r3,3
  80304c:	00bfdfc4 	movi	r2,-129
  803050:	d8c02a15 	stw	r3,168(sp)
  803054:	90a4703a 	and	r18,r18,r2
  803058:	d8c02e15 	stw	r3,184(sp)
  80305c:	d8002915 	stw	zero,164(sp)
  803060:	d8003215 	stw	zero,200(sp)
  803064:	00003706 	br	803144 <___vfprintf_internal_r+0x734>
  803068:	94800214 	ori	r18,r18,8
  80306c:	ac400007 	ldb	r17,0(r21)
  803070:	003ec806 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  803074:	18c03fcc 	andi	r3,r3,255
  803078:	1806db1e 	bne	r3,zero,804be8 <___vfprintf_internal_r+0x21d8>
  80307c:	94800414 	ori	r18,r18,16
  803080:	9080080c 	andi	r2,r18,32
  803084:	1002d826 	beq	r2,zero,803be8 <___vfprintf_internal_r+0x11d8>
  803088:	d9402d17 	ldw	r5,180(sp)
  80308c:	d8c02917 	ldw	r3,164(sp)
  803090:	d8002785 	stb	zero,158(sp)
  803094:	28800204 	addi	r2,r5,8
  803098:	2cc00017 	ldw	r19,0(r5)
  80309c:	2d800117 	ldw	r22,4(r5)
  8030a0:	18048f16 	blt	r3,zero,8042e0 <___vfprintf_internal_r+0x18d0>
  8030a4:	013fdfc4 	movi	r4,-129
  8030a8:	9d86b03a 	or	r3,r19,r22
  8030ac:	d8802d15 	stw	r2,180(sp)
  8030b0:	9124703a 	and	r18,r18,r4
  8030b4:	1802d91e 	bne	r3,zero,803c1c <___vfprintf_internal_r+0x120c>
  8030b8:	d8c02917 	ldw	r3,164(sp)
  8030bc:	0039883a 	mov	fp,zero
  8030c0:	1805c326 	beq	r3,zero,8047d0 <___vfprintf_internal_r+0x1dc0>
  8030c4:	0027883a 	mov	r19,zero
  8030c8:	002d883a 	mov	r22,zero
  8030cc:	dc001e04 	addi	r16,sp,120
  8030d0:	9806d0fa 	srli	r3,r19,3
  8030d4:	b008977a 	slli	r4,r22,29
  8030d8:	b02cd0fa 	srli	r22,r22,3
  8030dc:	9cc001cc 	andi	r19,r19,7
  8030e0:	98800c04 	addi	r2,r19,48
  8030e4:	843fffc4 	addi	r16,r16,-1
  8030e8:	20e6b03a 	or	r19,r4,r3
  8030ec:	80800005 	stb	r2,0(r16)
  8030f0:	9d86b03a 	or	r3,r19,r22
  8030f4:	183ff61e 	bne	r3,zero,8030d0 <__alt_mem_onchip_mem+0xff7830d0>
  8030f8:	90c0004c 	andi	r3,r18,1
  8030fc:	18013b26 	beq	r3,zero,8035ec <___vfprintf_internal_r+0xbdc>
  803100:	10803fcc 	andi	r2,r2,255
  803104:	1080201c 	xori	r2,r2,128
  803108:	10bfe004 	addi	r2,r2,-128
  80310c:	00c00c04 	movi	r3,48
  803110:	10c13626 	beq	r2,r3,8035ec <___vfprintf_internal_r+0xbdc>
  803114:	80ffffc5 	stb	r3,-1(r16)
  803118:	d8c02817 	ldw	r3,160(sp)
  80311c:	80bfffc4 	addi	r2,r16,-1
  803120:	1021883a 	mov	r16,r2
  803124:	1887c83a 	sub	r3,r3,r2
  803128:	d8c02e15 	stw	r3,184(sp)
  80312c:	d8802e17 	ldw	r2,184(sp)
  803130:	d9002917 	ldw	r4,164(sp)
  803134:	1100010e 	bge	r2,r4,80313c <___vfprintf_internal_r+0x72c>
  803138:	2005883a 	mov	r2,r4
  80313c:	d8802a15 	stw	r2,168(sp)
  803140:	d8003215 	stw	zero,200(sp)
  803144:	e7003fcc 	andi	fp,fp,255
  803148:	e700201c 	xori	fp,fp,128
  80314c:	e73fe004 	addi	fp,fp,-128
  803150:	e0000326 	beq	fp,zero,803160 <___vfprintf_internal_r+0x750>
  803154:	d8c02a17 	ldw	r3,168(sp)
  803158:	18c00044 	addi	r3,r3,1
  80315c:	d8c02a15 	stw	r3,168(sp)
  803160:	90c0008c 	andi	r3,r18,2
  803164:	d8c02b15 	stw	r3,172(sp)
  803168:	18000326 	beq	r3,zero,803178 <___vfprintf_internal_r+0x768>
  80316c:	d8c02a17 	ldw	r3,168(sp)
  803170:	18c00084 	addi	r3,r3,2
  803174:	d8c02a15 	stw	r3,168(sp)
  803178:	90c0210c 	andi	r3,r18,132
  80317c:	d8c03015 	stw	r3,192(sp)
  803180:	1801a31e 	bne	r3,zero,803810 <___vfprintf_internal_r+0xe00>
  803184:	d9003117 	ldw	r4,196(sp)
  803188:	d8c02a17 	ldw	r3,168(sp)
  80318c:	20e7c83a 	sub	r19,r4,r3
  803190:	04c19f0e 	bge	zero,r19,803810 <___vfprintf_internal_r+0xe00>
  803194:	02400404 	movi	r9,16
  803198:	d8c02017 	ldw	r3,128(sp)
  80319c:	d8801f17 	ldw	r2,124(sp)
  8031a0:	4cc50d0e 	bge	r9,r19,8045d8 <___vfprintf_internal_r+0x1bc8>
  8031a4:	01402074 	movhi	r5,129
  8031a8:	294cf584 	addi	r5,r5,13270
  8031ac:	dc403b15 	stw	r17,236(sp)
  8031b0:	d9403515 	stw	r5,212(sp)
  8031b4:	9823883a 	mov	r17,r19
  8031b8:	482d883a 	mov	r22,r9
  8031bc:	9027883a 	mov	r19,r18
  8031c0:	070001c4 	movi	fp,7
  8031c4:	8025883a 	mov	r18,r16
  8031c8:	dc002c17 	ldw	r16,176(sp)
  8031cc:	00000306 	br	8031dc <___vfprintf_internal_r+0x7cc>
  8031d0:	8c7ffc04 	addi	r17,r17,-16
  8031d4:	42000204 	addi	r8,r8,8
  8031d8:	b440130e 	bge	r22,r17,803228 <___vfprintf_internal_r+0x818>
  8031dc:	01002074 	movhi	r4,129
  8031e0:	18c00404 	addi	r3,r3,16
  8031e4:	10800044 	addi	r2,r2,1
  8031e8:	210cf584 	addi	r4,r4,13270
  8031ec:	41000015 	stw	r4,0(r8)
  8031f0:	45800115 	stw	r22,4(r8)
  8031f4:	d8c02015 	stw	r3,128(sp)
  8031f8:	d8801f15 	stw	r2,124(sp)
  8031fc:	e0bff40e 	bge	fp,r2,8031d0 <__alt_mem_onchip_mem+0xff7831d0>
  803200:	d9801e04 	addi	r6,sp,120
  803204:	b80b883a 	mov	r5,r23
  803208:	8009883a 	mov	r4,r16
  80320c:	08095280 	call	809528 <__sprint_r>
  803210:	103f011e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803214:	8c7ffc04 	addi	r17,r17,-16
  803218:	d8c02017 	ldw	r3,128(sp)
  80321c:	d8801f17 	ldw	r2,124(sp)
  803220:	da000404 	addi	r8,sp,16
  803224:	b47fed16 	blt	r22,r17,8031dc <__alt_mem_onchip_mem+0xff7831dc>
  803228:	9021883a 	mov	r16,r18
  80322c:	9825883a 	mov	r18,r19
  803230:	8827883a 	mov	r19,r17
  803234:	dc403b17 	ldw	r17,236(sp)
  803238:	d9403517 	ldw	r5,212(sp)
  80323c:	98c7883a 	add	r3,r19,r3
  803240:	10800044 	addi	r2,r2,1
  803244:	41400015 	stw	r5,0(r8)
  803248:	44c00115 	stw	r19,4(r8)
  80324c:	d8c02015 	stw	r3,128(sp)
  803250:	d8801f15 	stw	r2,124(sp)
  803254:	010001c4 	movi	r4,7
  803258:	2082a316 	blt	r4,r2,803ce8 <___vfprintf_internal_r+0x12d8>
  80325c:	df002787 	ldb	fp,158(sp)
  803260:	42000204 	addi	r8,r8,8
  803264:	e0000c26 	beq	fp,zero,803298 <___vfprintf_internal_r+0x888>
  803268:	d8801f17 	ldw	r2,124(sp)
  80326c:	d9002784 	addi	r4,sp,158
  803270:	18c00044 	addi	r3,r3,1
  803274:	10800044 	addi	r2,r2,1
  803278:	41000015 	stw	r4,0(r8)
  80327c:	01000044 	movi	r4,1
  803280:	41000115 	stw	r4,4(r8)
  803284:	d8c02015 	stw	r3,128(sp)
  803288:	d8801f15 	stw	r2,124(sp)
  80328c:	010001c4 	movi	r4,7
  803290:	20823c16 	blt	r4,r2,803b84 <___vfprintf_internal_r+0x1174>
  803294:	42000204 	addi	r8,r8,8
  803298:	d8802b17 	ldw	r2,172(sp)
  80329c:	10000c26 	beq	r2,zero,8032d0 <___vfprintf_internal_r+0x8c0>
  8032a0:	d8801f17 	ldw	r2,124(sp)
  8032a4:	d9002704 	addi	r4,sp,156
  8032a8:	18c00084 	addi	r3,r3,2
  8032ac:	10800044 	addi	r2,r2,1
  8032b0:	41000015 	stw	r4,0(r8)
  8032b4:	01000084 	movi	r4,2
  8032b8:	41000115 	stw	r4,4(r8)
  8032bc:	d8c02015 	stw	r3,128(sp)
  8032c0:	d8801f15 	stw	r2,124(sp)
  8032c4:	010001c4 	movi	r4,7
  8032c8:	20823616 	blt	r4,r2,803ba4 <___vfprintf_internal_r+0x1194>
  8032cc:	42000204 	addi	r8,r8,8
  8032d0:	d9003017 	ldw	r4,192(sp)
  8032d4:	00802004 	movi	r2,128
  8032d8:	20819926 	beq	r4,r2,803940 <___vfprintf_internal_r+0xf30>
  8032dc:	d9402917 	ldw	r5,164(sp)
  8032e0:	d8802e17 	ldw	r2,184(sp)
  8032e4:	28adc83a 	sub	r22,r5,r2
  8032e8:	0580310e 	bge	zero,r22,8033b0 <___vfprintf_internal_r+0x9a0>
  8032ec:	07000404 	movi	fp,16
  8032f0:	d8801f17 	ldw	r2,124(sp)
  8032f4:	e584140e 	bge	fp,r22,804348 <___vfprintf_internal_r+0x1938>
  8032f8:	01402074 	movhi	r5,129
  8032fc:	294cf184 	addi	r5,r5,13254
  803300:	dc402915 	stw	r17,164(sp)
  803304:	d9402b15 	stw	r5,172(sp)
  803308:	b023883a 	mov	r17,r22
  80330c:	04c001c4 	movi	r19,7
  803310:	a82d883a 	mov	r22,r21
  803314:	902b883a 	mov	r21,r18
  803318:	8025883a 	mov	r18,r16
  80331c:	dc002c17 	ldw	r16,176(sp)
  803320:	00000306 	br	803330 <___vfprintf_internal_r+0x920>
  803324:	8c7ffc04 	addi	r17,r17,-16
  803328:	42000204 	addi	r8,r8,8
  80332c:	e440110e 	bge	fp,r17,803374 <___vfprintf_internal_r+0x964>
  803330:	18c00404 	addi	r3,r3,16
  803334:	10800044 	addi	r2,r2,1
  803338:	45000015 	stw	r20,0(r8)
  80333c:	47000115 	stw	fp,4(r8)
  803340:	d8c02015 	stw	r3,128(sp)
  803344:	d8801f15 	stw	r2,124(sp)
  803348:	98bff60e 	bge	r19,r2,803324 <__alt_mem_onchip_mem+0xff783324>
  80334c:	d9801e04 	addi	r6,sp,120
  803350:	b80b883a 	mov	r5,r23
  803354:	8009883a 	mov	r4,r16
  803358:	08095280 	call	809528 <__sprint_r>
  80335c:	103eae1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803360:	8c7ffc04 	addi	r17,r17,-16
  803364:	d8c02017 	ldw	r3,128(sp)
  803368:	d8801f17 	ldw	r2,124(sp)
  80336c:	da000404 	addi	r8,sp,16
  803370:	e47fef16 	blt	fp,r17,803330 <__alt_mem_onchip_mem+0xff783330>
  803374:	9021883a 	mov	r16,r18
  803378:	a825883a 	mov	r18,r21
  80337c:	b02b883a 	mov	r21,r22
  803380:	882d883a 	mov	r22,r17
  803384:	dc402917 	ldw	r17,164(sp)
  803388:	d9002b17 	ldw	r4,172(sp)
  80338c:	1d87883a 	add	r3,r3,r22
  803390:	10800044 	addi	r2,r2,1
  803394:	41000015 	stw	r4,0(r8)
  803398:	45800115 	stw	r22,4(r8)
  80339c:	d8c02015 	stw	r3,128(sp)
  8033a0:	d8801f15 	stw	r2,124(sp)
  8033a4:	010001c4 	movi	r4,7
  8033a8:	2081ee16 	blt	r4,r2,803b64 <___vfprintf_internal_r+0x1154>
  8033ac:	42000204 	addi	r8,r8,8
  8033b0:	9080400c 	andi	r2,r18,256
  8033b4:	1001181e 	bne	r2,zero,803818 <___vfprintf_internal_r+0xe08>
  8033b8:	d9402e17 	ldw	r5,184(sp)
  8033bc:	d8801f17 	ldw	r2,124(sp)
  8033c0:	44000015 	stw	r16,0(r8)
  8033c4:	1947883a 	add	r3,r3,r5
  8033c8:	10800044 	addi	r2,r2,1
  8033cc:	41400115 	stw	r5,4(r8)
  8033d0:	d8c02015 	stw	r3,128(sp)
  8033d4:	d8801f15 	stw	r2,124(sp)
  8033d8:	010001c4 	movi	r4,7
  8033dc:	2081d316 	blt	r4,r2,803b2c <___vfprintf_internal_r+0x111c>
  8033e0:	42000204 	addi	r8,r8,8
  8033e4:	9480010c 	andi	r18,r18,4
  8033e8:	90003226 	beq	r18,zero,8034b4 <___vfprintf_internal_r+0xaa4>
  8033ec:	d9403117 	ldw	r5,196(sp)
  8033f0:	d8802a17 	ldw	r2,168(sp)
  8033f4:	28a1c83a 	sub	r16,r5,r2
  8033f8:	04002e0e 	bge	zero,r16,8034b4 <___vfprintf_internal_r+0xaa4>
  8033fc:	04400404 	movi	r17,16
  803400:	d8801f17 	ldw	r2,124(sp)
  803404:	8c04a20e 	bge	r17,r16,804690 <___vfprintf_internal_r+0x1c80>
  803408:	01402074 	movhi	r5,129
  80340c:	294cf584 	addi	r5,r5,13270
  803410:	d9403515 	stw	r5,212(sp)
  803414:	048001c4 	movi	r18,7
  803418:	dcc02c17 	ldw	r19,176(sp)
  80341c:	00000306 	br	80342c <___vfprintf_internal_r+0xa1c>
  803420:	843ffc04 	addi	r16,r16,-16
  803424:	42000204 	addi	r8,r8,8
  803428:	8c00130e 	bge	r17,r16,803478 <___vfprintf_internal_r+0xa68>
  80342c:	01002074 	movhi	r4,129
  803430:	18c00404 	addi	r3,r3,16
  803434:	10800044 	addi	r2,r2,1
  803438:	210cf584 	addi	r4,r4,13270
  80343c:	41000015 	stw	r4,0(r8)
  803440:	44400115 	stw	r17,4(r8)
  803444:	d8c02015 	stw	r3,128(sp)
  803448:	d8801f15 	stw	r2,124(sp)
  80344c:	90bff40e 	bge	r18,r2,803420 <__alt_mem_onchip_mem+0xff783420>
  803450:	d9801e04 	addi	r6,sp,120
  803454:	b80b883a 	mov	r5,r23
  803458:	9809883a 	mov	r4,r19
  80345c:	08095280 	call	809528 <__sprint_r>
  803460:	103e6d1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803464:	843ffc04 	addi	r16,r16,-16
  803468:	d8c02017 	ldw	r3,128(sp)
  80346c:	d8801f17 	ldw	r2,124(sp)
  803470:	da000404 	addi	r8,sp,16
  803474:	8c3fed16 	blt	r17,r16,80342c <__alt_mem_onchip_mem+0xff78342c>
  803478:	d9403517 	ldw	r5,212(sp)
  80347c:	1c07883a 	add	r3,r3,r16
  803480:	10800044 	addi	r2,r2,1
  803484:	41400015 	stw	r5,0(r8)
  803488:	44000115 	stw	r16,4(r8)
  80348c:	d8c02015 	stw	r3,128(sp)
  803490:	d8801f15 	stw	r2,124(sp)
  803494:	010001c4 	movi	r4,7
  803498:	2080060e 	bge	r4,r2,8034b4 <___vfprintf_internal_r+0xaa4>
  80349c:	d9002c17 	ldw	r4,176(sp)
  8034a0:	d9801e04 	addi	r6,sp,120
  8034a4:	b80b883a 	mov	r5,r23
  8034a8:	08095280 	call	809528 <__sprint_r>
  8034ac:	103e5a1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  8034b0:	d8c02017 	ldw	r3,128(sp)
  8034b4:	d8803117 	ldw	r2,196(sp)
  8034b8:	d9002a17 	ldw	r4,168(sp)
  8034bc:	1100010e 	bge	r2,r4,8034c4 <___vfprintf_internal_r+0xab4>
  8034c0:	2005883a 	mov	r2,r4
  8034c4:	d9402f17 	ldw	r5,188(sp)
  8034c8:	288b883a 	add	r5,r5,r2
  8034cc:	d9402f15 	stw	r5,188(sp)
  8034d0:	18019e1e 	bne	r3,zero,803b4c <___vfprintf_internal_r+0x113c>
  8034d4:	a8800007 	ldb	r2,0(r21)
  8034d8:	d8001f15 	stw	zero,124(sp)
  8034dc:	da000404 	addi	r8,sp,16
  8034e0:	103d851e 	bne	r2,zero,802af8 <__alt_mem_onchip_mem+0xff782af8>
  8034e4:	a821883a 	mov	r16,r21
  8034e8:	003d9b06 	br	802b58 <__alt_mem_onchip_mem+0xff782b58>
  8034ec:	18c03fcc 	andi	r3,r3,255
  8034f0:	1805c11e 	bne	r3,zero,804bf8 <___vfprintf_internal_r+0x21e8>
  8034f4:	94800414 	ori	r18,r18,16
  8034f8:	9080080c 	andi	r2,r18,32
  8034fc:	10020c26 	beq	r2,zero,803d30 <___vfprintf_internal_r+0x1320>
  803500:	d8802d17 	ldw	r2,180(sp)
  803504:	d9002917 	ldw	r4,164(sp)
  803508:	d8002785 	stb	zero,158(sp)
  80350c:	10c00204 	addi	r3,r2,8
  803510:	14c00017 	ldw	r19,0(r2)
  803514:	15800117 	ldw	r22,4(r2)
  803518:	20040f16 	blt	r4,zero,804558 <___vfprintf_internal_r+0x1b48>
  80351c:	013fdfc4 	movi	r4,-129
  803520:	9d84b03a 	or	r2,r19,r22
  803524:	d8c02d15 	stw	r3,180(sp)
  803528:	9124703a 	and	r18,r18,r4
  80352c:	0039883a 	mov	fp,zero
  803530:	103e891e 	bne	r2,zero,802f58 <__alt_mem_onchip_mem+0xff782f58>
  803534:	d9002917 	ldw	r4,164(sp)
  803538:	2002c11e 	bne	r4,zero,804040 <___vfprintf_internal_r+0x1630>
  80353c:	d8002915 	stw	zero,164(sp)
  803540:	d8002e15 	stw	zero,184(sp)
  803544:	dc001e04 	addi	r16,sp,120
  803548:	003ef806 	br	80312c <__alt_mem_onchip_mem+0xff78312c>
  80354c:	18c03fcc 	andi	r3,r3,255
  803550:	18059d1e 	bne	r3,zero,804bc8 <___vfprintf_internal_r+0x21b8>
  803554:	01402074 	movhi	r5,129
  803558:	294ce504 	addi	r5,r5,13204
  80355c:	d9403915 	stw	r5,228(sp)
  803560:	9080080c 	andi	r2,r18,32
  803564:	10005226 	beq	r2,zero,8036b0 <___vfprintf_internal_r+0xca0>
  803568:	d8802d17 	ldw	r2,180(sp)
  80356c:	14c00017 	ldw	r19,0(r2)
  803570:	15800117 	ldw	r22,4(r2)
  803574:	10800204 	addi	r2,r2,8
  803578:	d8802d15 	stw	r2,180(sp)
  80357c:	9080004c 	andi	r2,r18,1
  803580:	10019026 	beq	r2,zero,803bc4 <___vfprintf_internal_r+0x11b4>
  803584:	9d84b03a 	or	r2,r19,r22
  803588:	10036926 	beq	r2,zero,804330 <___vfprintf_internal_r+0x1920>
  80358c:	d8c02917 	ldw	r3,164(sp)
  803590:	00800c04 	movi	r2,48
  803594:	d8802705 	stb	r2,156(sp)
  803598:	dc402745 	stb	r17,157(sp)
  80359c:	d8002785 	stb	zero,158(sp)
  8035a0:	90800094 	ori	r2,r18,2
  8035a4:	18045d16 	blt	r3,zero,80471c <___vfprintf_internal_r+0x1d0c>
  8035a8:	00bfdfc4 	movi	r2,-129
  8035ac:	90a4703a 	and	r18,r18,r2
  8035b0:	94800094 	ori	r18,r18,2
  8035b4:	0039883a 	mov	fp,zero
  8035b8:	d9003917 	ldw	r4,228(sp)
  8035bc:	dc001e04 	addi	r16,sp,120
  8035c0:	988003cc 	andi	r2,r19,15
  8035c4:	b006973a 	slli	r3,r22,28
  8035c8:	2085883a 	add	r2,r4,r2
  8035cc:	9826d13a 	srli	r19,r19,4
  8035d0:	10800003 	ldbu	r2,0(r2)
  8035d4:	b02cd13a 	srli	r22,r22,4
  8035d8:	843fffc4 	addi	r16,r16,-1
  8035dc:	1ce6b03a 	or	r19,r3,r19
  8035e0:	80800005 	stb	r2,0(r16)
  8035e4:	9d84b03a 	or	r2,r19,r22
  8035e8:	103ff51e 	bne	r2,zero,8035c0 <__alt_mem_onchip_mem+0xff7835c0>
  8035ec:	d8c02817 	ldw	r3,160(sp)
  8035f0:	1c07c83a 	sub	r3,r3,r16
  8035f4:	d8c02e15 	stw	r3,184(sp)
  8035f8:	003ecc06 	br	80312c <__alt_mem_onchip_mem+0xff78312c>
  8035fc:	18c03fcc 	andi	r3,r3,255
  803600:	183e9f26 	beq	r3,zero,803080 <__alt_mem_onchip_mem+0xff783080>
  803604:	d9c02785 	stb	r7,158(sp)
  803608:	003e9d06 	br	803080 <__alt_mem_onchip_mem+0xff783080>
  80360c:	00c00044 	movi	r3,1
  803610:	01c00ac4 	movi	r7,43
  803614:	ac400007 	ldb	r17,0(r21)
  803618:	003d5e06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  80361c:	94800814 	ori	r18,r18,32
  803620:	ac400007 	ldb	r17,0(r21)
  803624:	003d5b06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  803628:	d8c02d17 	ldw	r3,180(sp)
  80362c:	d8002785 	stb	zero,158(sp)
  803630:	1c000017 	ldw	r16,0(r3)
  803634:	1cc00104 	addi	r19,r3,4
  803638:	80041926 	beq	r16,zero,8046a0 <___vfprintf_internal_r+0x1c90>
  80363c:	d9002917 	ldw	r4,164(sp)
  803640:	2003d016 	blt	r4,zero,804584 <___vfprintf_internal_r+0x1b74>
  803644:	200d883a 	mov	r6,r4
  803648:	000b883a 	mov	r5,zero
  80364c:	8009883a 	mov	r4,r16
  803650:	da003d15 	stw	r8,244(sp)
  803654:	0807d640 	call	807d64 <memchr>
  803658:	da003d17 	ldw	r8,244(sp)
  80365c:	10045426 	beq	r2,zero,8047b0 <___vfprintf_internal_r+0x1da0>
  803660:	1405c83a 	sub	r2,r2,r16
  803664:	d8802e15 	stw	r2,184(sp)
  803668:	1003cc16 	blt	r2,zero,80459c <___vfprintf_internal_r+0x1b8c>
  80366c:	df002783 	ldbu	fp,158(sp)
  803670:	d8802a15 	stw	r2,168(sp)
  803674:	dcc02d15 	stw	r19,180(sp)
  803678:	d8002915 	stw	zero,164(sp)
  80367c:	d8003215 	stw	zero,200(sp)
  803680:	003eb006 	br	803144 <__alt_mem_onchip_mem+0xff783144>
  803684:	18c03fcc 	andi	r3,r3,255
  803688:	183f9b26 	beq	r3,zero,8034f8 <__alt_mem_onchip_mem+0xff7834f8>
  80368c:	d9c02785 	stb	r7,158(sp)
  803690:	003f9906 	br	8034f8 <__alt_mem_onchip_mem+0xff7834f8>
  803694:	18c03fcc 	andi	r3,r3,255
  803698:	1805551e 	bne	r3,zero,804bf0 <___vfprintf_internal_r+0x21e0>
  80369c:	01402074 	movhi	r5,129
  8036a0:	294cea04 	addi	r5,r5,13224
  8036a4:	d9403915 	stw	r5,228(sp)
  8036a8:	9080080c 	andi	r2,r18,32
  8036ac:	103fae1e 	bne	r2,zero,803568 <__alt_mem_onchip_mem+0xff783568>
  8036b0:	9080040c 	andi	r2,r18,16
  8036b4:	1002de26 	beq	r2,zero,804230 <___vfprintf_internal_r+0x1820>
  8036b8:	d8c02d17 	ldw	r3,180(sp)
  8036bc:	002d883a 	mov	r22,zero
  8036c0:	1cc00017 	ldw	r19,0(r3)
  8036c4:	18c00104 	addi	r3,r3,4
  8036c8:	d8c02d15 	stw	r3,180(sp)
  8036cc:	003fab06 	br	80357c <__alt_mem_onchip_mem+0xff78357c>
  8036d0:	38803fcc 	andi	r2,r7,255
  8036d4:	1080201c 	xori	r2,r2,128
  8036d8:	10bfe004 	addi	r2,r2,-128
  8036dc:	1002d21e 	bne	r2,zero,804228 <___vfprintf_internal_r+0x1818>
  8036e0:	00c00044 	movi	r3,1
  8036e4:	01c00804 	movi	r7,32
  8036e8:	ac400007 	ldb	r17,0(r21)
  8036ec:	003d2906 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  8036f0:	94800054 	ori	r18,r18,1
  8036f4:	ac400007 	ldb	r17,0(r21)
  8036f8:	003d2606 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  8036fc:	18c03fcc 	andi	r3,r3,255
  803700:	183e0526 	beq	r3,zero,802f18 <__alt_mem_onchip_mem+0xff782f18>
  803704:	d9c02785 	stb	r7,158(sp)
  803708:	003e0306 	br	802f18 <__alt_mem_onchip_mem+0xff782f18>
  80370c:	94801014 	ori	r18,r18,64
  803710:	ac400007 	ldb	r17,0(r21)
  803714:	003d1f06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  803718:	ac400007 	ldb	r17,0(r21)
  80371c:	8a438726 	beq	r17,r9,80453c <___vfprintf_internal_r+0x1b2c>
  803720:	94800414 	ori	r18,r18,16
  803724:	003d1b06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  803728:	18c03fcc 	andi	r3,r3,255
  80372c:	1805341e 	bne	r3,zero,804c00 <___vfprintf_internal_r+0x21f0>
  803730:	9080080c 	andi	r2,r18,32
  803734:	1002cd26 	beq	r2,zero,80426c <___vfprintf_internal_r+0x185c>
  803738:	d9402d17 	ldw	r5,180(sp)
  80373c:	d9002f17 	ldw	r4,188(sp)
  803740:	28800017 	ldw	r2,0(r5)
  803744:	2007d7fa 	srai	r3,r4,31
  803748:	29400104 	addi	r5,r5,4
  80374c:	d9402d15 	stw	r5,180(sp)
  803750:	11000015 	stw	r4,0(r2)
  803754:	10c00115 	stw	r3,4(r2)
  803758:	003ce506 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  80375c:	d8c02d17 	ldw	r3,180(sp)
  803760:	d9002d17 	ldw	r4,180(sp)
  803764:	d8002785 	stb	zero,158(sp)
  803768:	18800017 	ldw	r2,0(r3)
  80376c:	21000104 	addi	r4,r4,4
  803770:	00c00044 	movi	r3,1
  803774:	d8c02a15 	stw	r3,168(sp)
  803778:	d8801405 	stb	r2,80(sp)
  80377c:	d9002d15 	stw	r4,180(sp)
  803780:	d8c02e15 	stw	r3,184(sp)
  803784:	d8002915 	stw	zero,164(sp)
  803788:	d8003215 	stw	zero,200(sp)
  80378c:	dc001404 	addi	r16,sp,80
  803790:	0039883a 	mov	fp,zero
  803794:	003e7206 	br	803160 <__alt_mem_onchip_mem+0xff783160>
  803798:	01002074 	movhi	r4,129
  80379c:	210cea04 	addi	r4,r4,13224
  8037a0:	0039883a 	mov	fp,zero
  8037a4:	d9003915 	stw	r4,228(sp)
  8037a8:	04401e04 	movi	r17,120
  8037ac:	003f8206 	br	8035b8 <__alt_mem_onchip_mem+0xff7835b8>
  8037b0:	18c03fcc 	andi	r3,r3,255
  8037b4:	1805061e 	bne	r3,zero,804bd0 <___vfprintf_internal_r+0x21c0>
  8037b8:	883d9126 	beq	r17,zero,802e00 <__alt_mem_onchip_mem+0xff782e00>
  8037bc:	00c00044 	movi	r3,1
  8037c0:	d8c02a15 	stw	r3,168(sp)
  8037c4:	dc401405 	stb	r17,80(sp)
  8037c8:	d8002785 	stb	zero,158(sp)
  8037cc:	003fec06 	br	803780 <__alt_mem_onchip_mem+0xff783780>
  8037d0:	01402074 	movhi	r5,129
  8037d4:	294cea04 	addi	r5,r5,13224
  8037d8:	d9403915 	stw	r5,228(sp)
  8037dc:	d8c02d15 	stw	r3,180(sp)
  8037e0:	1025883a 	mov	r18,r2
  8037e4:	04401e04 	movi	r17,120
  8037e8:	9d84b03a 	or	r2,r19,r22
  8037ec:	1000fc1e 	bne	r2,zero,803be0 <___vfprintf_internal_r+0x11d0>
  8037f0:	0039883a 	mov	fp,zero
  8037f4:	00800084 	movi	r2,2
  8037f8:	10803fcc 	andi	r2,r2,255
  8037fc:	00c00044 	movi	r3,1
  803800:	10c20f26 	beq	r2,r3,804040 <___vfprintf_internal_r+0x1630>
  803804:	00c00084 	movi	r3,2
  803808:	10fd6326 	beq	r2,r3,802d98 <__alt_mem_onchip_mem+0xff782d98>
  80380c:	003e2d06 	br	8030c4 <__alt_mem_onchip_mem+0xff7830c4>
  803810:	d8c02017 	ldw	r3,128(sp)
  803814:	003e9306 	br	803264 <__alt_mem_onchip_mem+0xff783264>
  803818:	00801944 	movi	r2,101
  80381c:	14407e0e 	bge	r2,r17,803a18 <___vfprintf_internal_r+0x1008>
  803820:	d9003617 	ldw	r4,216(sp)
  803824:	d9403817 	ldw	r5,224(sp)
  803828:	000d883a 	mov	r6,zero
  80382c:	000f883a 	mov	r7,zero
  803830:	d8c03c15 	stw	r3,240(sp)
  803834:	da003d15 	stw	r8,244(sp)
  803838:	080dd1c0 	call	80dd1c <__eqdf2>
  80383c:	d8c03c17 	ldw	r3,240(sp)
  803840:	da003d17 	ldw	r8,244(sp)
  803844:	1000f71e 	bne	r2,zero,803c24 <___vfprintf_internal_r+0x1214>
  803848:	d8801f17 	ldw	r2,124(sp)
  80384c:	01002074 	movhi	r4,129
  803850:	210cf104 	addi	r4,r4,13252
  803854:	18c00044 	addi	r3,r3,1
  803858:	10800044 	addi	r2,r2,1
  80385c:	41000015 	stw	r4,0(r8)
  803860:	01000044 	movi	r4,1
  803864:	41000115 	stw	r4,4(r8)
  803868:	d8c02015 	stw	r3,128(sp)
  80386c:	d8801f15 	stw	r2,124(sp)
  803870:	010001c4 	movi	r4,7
  803874:	2082b816 	blt	r4,r2,804358 <___vfprintf_internal_r+0x1948>
  803878:	42000204 	addi	r8,r8,8
  80387c:	d8802617 	ldw	r2,152(sp)
  803880:	d9403317 	ldw	r5,204(sp)
  803884:	11400216 	blt	r2,r5,803890 <___vfprintf_internal_r+0xe80>
  803888:	9080004c 	andi	r2,r18,1
  80388c:	103ed526 	beq	r2,zero,8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  803890:	d8803717 	ldw	r2,220(sp)
  803894:	d9003417 	ldw	r4,208(sp)
  803898:	d9403717 	ldw	r5,220(sp)
  80389c:	1887883a 	add	r3,r3,r2
  8038a0:	d8801f17 	ldw	r2,124(sp)
  8038a4:	41000015 	stw	r4,0(r8)
  8038a8:	41400115 	stw	r5,4(r8)
  8038ac:	10800044 	addi	r2,r2,1
  8038b0:	d8c02015 	stw	r3,128(sp)
  8038b4:	d8801f15 	stw	r2,124(sp)
  8038b8:	010001c4 	movi	r4,7
  8038bc:	20832916 	blt	r4,r2,804564 <___vfprintf_internal_r+0x1b54>
  8038c0:	42000204 	addi	r8,r8,8
  8038c4:	d8803317 	ldw	r2,204(sp)
  8038c8:	143fffc4 	addi	r16,r2,-1
  8038cc:	043ec50e 	bge	zero,r16,8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  8038d0:	04400404 	movi	r17,16
  8038d4:	d8801f17 	ldw	r2,124(sp)
  8038d8:	8c00880e 	bge	r17,r16,803afc <___vfprintf_internal_r+0x10ec>
  8038dc:	01402074 	movhi	r5,129
  8038e0:	294cf184 	addi	r5,r5,13254
  8038e4:	d9402b15 	stw	r5,172(sp)
  8038e8:	058001c4 	movi	r22,7
  8038ec:	dcc02c17 	ldw	r19,176(sp)
  8038f0:	00000306 	br	803900 <___vfprintf_internal_r+0xef0>
  8038f4:	42000204 	addi	r8,r8,8
  8038f8:	843ffc04 	addi	r16,r16,-16
  8038fc:	8c00820e 	bge	r17,r16,803b08 <___vfprintf_internal_r+0x10f8>
  803900:	18c00404 	addi	r3,r3,16
  803904:	10800044 	addi	r2,r2,1
  803908:	45000015 	stw	r20,0(r8)
  80390c:	44400115 	stw	r17,4(r8)
  803910:	d8c02015 	stw	r3,128(sp)
  803914:	d8801f15 	stw	r2,124(sp)
  803918:	b0bff60e 	bge	r22,r2,8038f4 <__alt_mem_onchip_mem+0xff7838f4>
  80391c:	d9801e04 	addi	r6,sp,120
  803920:	b80b883a 	mov	r5,r23
  803924:	9809883a 	mov	r4,r19
  803928:	08095280 	call	809528 <__sprint_r>
  80392c:	103d3a1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803930:	d8c02017 	ldw	r3,128(sp)
  803934:	d8801f17 	ldw	r2,124(sp)
  803938:	da000404 	addi	r8,sp,16
  80393c:	003fee06 	br	8038f8 <__alt_mem_onchip_mem+0xff7838f8>
  803940:	d9403117 	ldw	r5,196(sp)
  803944:	d8802a17 	ldw	r2,168(sp)
  803948:	28adc83a 	sub	r22,r5,r2
  80394c:	05be630e 	bge	zero,r22,8032dc <__alt_mem_onchip_mem+0xff7832dc>
  803950:	07000404 	movi	fp,16
  803954:	d8801f17 	ldw	r2,124(sp)
  803958:	e5838f0e 	bge	fp,r22,804798 <___vfprintf_internal_r+0x1d88>
  80395c:	01402074 	movhi	r5,129
  803960:	294cf184 	addi	r5,r5,13254
  803964:	dc403015 	stw	r17,192(sp)
  803968:	d9402b15 	stw	r5,172(sp)
  80396c:	b023883a 	mov	r17,r22
  803970:	04c001c4 	movi	r19,7
  803974:	a82d883a 	mov	r22,r21
  803978:	902b883a 	mov	r21,r18
  80397c:	8025883a 	mov	r18,r16
  803980:	dc002c17 	ldw	r16,176(sp)
  803984:	00000306 	br	803994 <___vfprintf_internal_r+0xf84>
  803988:	8c7ffc04 	addi	r17,r17,-16
  80398c:	42000204 	addi	r8,r8,8
  803990:	e440110e 	bge	fp,r17,8039d8 <___vfprintf_internal_r+0xfc8>
  803994:	18c00404 	addi	r3,r3,16
  803998:	10800044 	addi	r2,r2,1
  80399c:	45000015 	stw	r20,0(r8)
  8039a0:	47000115 	stw	fp,4(r8)
  8039a4:	d8c02015 	stw	r3,128(sp)
  8039a8:	d8801f15 	stw	r2,124(sp)
  8039ac:	98bff60e 	bge	r19,r2,803988 <__alt_mem_onchip_mem+0xff783988>
  8039b0:	d9801e04 	addi	r6,sp,120
  8039b4:	b80b883a 	mov	r5,r23
  8039b8:	8009883a 	mov	r4,r16
  8039bc:	08095280 	call	809528 <__sprint_r>
  8039c0:	103d151e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  8039c4:	8c7ffc04 	addi	r17,r17,-16
  8039c8:	d8c02017 	ldw	r3,128(sp)
  8039cc:	d8801f17 	ldw	r2,124(sp)
  8039d0:	da000404 	addi	r8,sp,16
  8039d4:	e47fef16 	blt	fp,r17,803994 <__alt_mem_onchip_mem+0xff783994>
  8039d8:	9021883a 	mov	r16,r18
  8039dc:	a825883a 	mov	r18,r21
  8039e0:	b02b883a 	mov	r21,r22
  8039e4:	882d883a 	mov	r22,r17
  8039e8:	dc403017 	ldw	r17,192(sp)
  8039ec:	d9002b17 	ldw	r4,172(sp)
  8039f0:	1d87883a 	add	r3,r3,r22
  8039f4:	10800044 	addi	r2,r2,1
  8039f8:	41000015 	stw	r4,0(r8)
  8039fc:	45800115 	stw	r22,4(r8)
  803a00:	d8c02015 	stw	r3,128(sp)
  803a04:	d8801f15 	stw	r2,124(sp)
  803a08:	010001c4 	movi	r4,7
  803a0c:	20818e16 	blt	r4,r2,804048 <___vfprintf_internal_r+0x1638>
  803a10:	42000204 	addi	r8,r8,8
  803a14:	003e3106 	br	8032dc <__alt_mem_onchip_mem+0xff7832dc>
  803a18:	d9403317 	ldw	r5,204(sp)
  803a1c:	00800044 	movi	r2,1
  803a20:	18c00044 	addi	r3,r3,1
  803a24:	1141530e 	bge	r2,r5,803f74 <___vfprintf_internal_r+0x1564>
  803a28:	dc401f17 	ldw	r17,124(sp)
  803a2c:	00800044 	movi	r2,1
  803a30:	40800115 	stw	r2,4(r8)
  803a34:	8c400044 	addi	r17,r17,1
  803a38:	44000015 	stw	r16,0(r8)
  803a3c:	d8c02015 	stw	r3,128(sp)
  803a40:	dc401f15 	stw	r17,124(sp)
  803a44:	008001c4 	movi	r2,7
  803a48:	14416b16 	blt	r2,r17,803ff8 <___vfprintf_internal_r+0x15e8>
  803a4c:	42000204 	addi	r8,r8,8
  803a50:	d8803717 	ldw	r2,220(sp)
  803a54:	d9003417 	ldw	r4,208(sp)
  803a58:	8c400044 	addi	r17,r17,1
  803a5c:	10c7883a 	add	r3,r2,r3
  803a60:	40800115 	stw	r2,4(r8)
  803a64:	41000015 	stw	r4,0(r8)
  803a68:	d8c02015 	stw	r3,128(sp)
  803a6c:	dc401f15 	stw	r17,124(sp)
  803a70:	008001c4 	movi	r2,7
  803a74:	14416916 	blt	r2,r17,80401c <___vfprintf_internal_r+0x160c>
  803a78:	45800204 	addi	r22,r8,8
  803a7c:	d9003617 	ldw	r4,216(sp)
  803a80:	d9403817 	ldw	r5,224(sp)
  803a84:	000d883a 	mov	r6,zero
  803a88:	000f883a 	mov	r7,zero
  803a8c:	d8c03c15 	stw	r3,240(sp)
  803a90:	080dd1c0 	call	80dd1c <__eqdf2>
  803a94:	d8c03c17 	ldw	r3,240(sp)
  803a98:	1000bc26 	beq	r2,zero,803d8c <___vfprintf_internal_r+0x137c>
  803a9c:	d9403317 	ldw	r5,204(sp)
  803aa0:	84000044 	addi	r16,r16,1
  803aa4:	8c400044 	addi	r17,r17,1
  803aa8:	28bfffc4 	addi	r2,r5,-1
  803aac:	1887883a 	add	r3,r3,r2
  803ab0:	b0800115 	stw	r2,4(r22)
  803ab4:	b4000015 	stw	r16,0(r22)
  803ab8:	d8c02015 	stw	r3,128(sp)
  803abc:	dc401f15 	stw	r17,124(sp)
  803ac0:	008001c4 	movi	r2,7
  803ac4:	14414316 	blt	r2,r17,803fd4 <___vfprintf_internal_r+0x15c4>
  803ac8:	b5800204 	addi	r22,r22,8
  803acc:	d9003a17 	ldw	r4,232(sp)
  803ad0:	df0022c4 	addi	fp,sp,139
  803ad4:	8c400044 	addi	r17,r17,1
  803ad8:	20c7883a 	add	r3,r4,r3
  803adc:	b7000015 	stw	fp,0(r22)
  803ae0:	b1000115 	stw	r4,4(r22)
  803ae4:	d8c02015 	stw	r3,128(sp)
  803ae8:	dc401f15 	stw	r17,124(sp)
  803aec:	008001c4 	movi	r2,7
  803af0:	14400e16 	blt	r2,r17,803b2c <___vfprintf_internal_r+0x111c>
  803af4:	b2000204 	addi	r8,r22,8
  803af8:	003e3a06 	br	8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  803afc:	01002074 	movhi	r4,129
  803b00:	210cf184 	addi	r4,r4,13254
  803b04:	d9002b15 	stw	r4,172(sp)
  803b08:	d9002b17 	ldw	r4,172(sp)
  803b0c:	1c07883a 	add	r3,r3,r16
  803b10:	44000115 	stw	r16,4(r8)
  803b14:	41000015 	stw	r4,0(r8)
  803b18:	10800044 	addi	r2,r2,1
  803b1c:	d8c02015 	stw	r3,128(sp)
  803b20:	d8801f15 	stw	r2,124(sp)
  803b24:	010001c4 	movi	r4,7
  803b28:	20be2d0e 	bge	r4,r2,8033e0 <__alt_mem_onchip_mem+0xff7833e0>
  803b2c:	d9002c17 	ldw	r4,176(sp)
  803b30:	d9801e04 	addi	r6,sp,120
  803b34:	b80b883a 	mov	r5,r23
  803b38:	08095280 	call	809528 <__sprint_r>
  803b3c:	103cb61e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803b40:	d8c02017 	ldw	r3,128(sp)
  803b44:	da000404 	addi	r8,sp,16
  803b48:	003e2606 	br	8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  803b4c:	d9002c17 	ldw	r4,176(sp)
  803b50:	d9801e04 	addi	r6,sp,120
  803b54:	b80b883a 	mov	r5,r23
  803b58:	08095280 	call	809528 <__sprint_r>
  803b5c:	103e5d26 	beq	r2,zero,8034d4 <__alt_mem_onchip_mem+0xff7834d4>
  803b60:	003cad06 	br	802e18 <__alt_mem_onchip_mem+0xff782e18>
  803b64:	d9002c17 	ldw	r4,176(sp)
  803b68:	d9801e04 	addi	r6,sp,120
  803b6c:	b80b883a 	mov	r5,r23
  803b70:	08095280 	call	809528 <__sprint_r>
  803b74:	103ca81e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803b78:	d8c02017 	ldw	r3,128(sp)
  803b7c:	da000404 	addi	r8,sp,16
  803b80:	003e0b06 	br	8033b0 <__alt_mem_onchip_mem+0xff7833b0>
  803b84:	d9002c17 	ldw	r4,176(sp)
  803b88:	d9801e04 	addi	r6,sp,120
  803b8c:	b80b883a 	mov	r5,r23
  803b90:	08095280 	call	809528 <__sprint_r>
  803b94:	103ca01e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803b98:	d8c02017 	ldw	r3,128(sp)
  803b9c:	da000404 	addi	r8,sp,16
  803ba0:	003dbd06 	br	803298 <__alt_mem_onchip_mem+0xff783298>
  803ba4:	d9002c17 	ldw	r4,176(sp)
  803ba8:	d9801e04 	addi	r6,sp,120
  803bac:	b80b883a 	mov	r5,r23
  803bb0:	08095280 	call	809528 <__sprint_r>
  803bb4:	103c981e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803bb8:	d8c02017 	ldw	r3,128(sp)
  803bbc:	da000404 	addi	r8,sp,16
  803bc0:	003dc306 	br	8032d0 <__alt_mem_onchip_mem+0xff7832d0>
  803bc4:	d8802917 	ldw	r2,164(sp)
  803bc8:	d8002785 	stb	zero,158(sp)
  803bcc:	103f0616 	blt	r2,zero,8037e8 <__alt_mem_onchip_mem+0xff7837e8>
  803bd0:	00ffdfc4 	movi	r3,-129
  803bd4:	9d84b03a 	or	r2,r19,r22
  803bd8:	90e4703a 	and	r18,r18,r3
  803bdc:	103c6b26 	beq	r2,zero,802d8c <__alt_mem_onchip_mem+0xff782d8c>
  803be0:	0039883a 	mov	fp,zero
  803be4:	003e7406 	br	8035b8 <__alt_mem_onchip_mem+0xff7835b8>
  803be8:	9080040c 	andi	r2,r18,16
  803bec:	1001b326 	beq	r2,zero,8042bc <___vfprintf_internal_r+0x18ac>
  803bf0:	d9002d17 	ldw	r4,180(sp)
  803bf4:	d9402917 	ldw	r5,164(sp)
  803bf8:	d8002785 	stb	zero,158(sp)
  803bfc:	20800104 	addi	r2,r4,4
  803c00:	24c00017 	ldw	r19,0(r4)
  803c04:	002d883a 	mov	r22,zero
  803c08:	2801b516 	blt	r5,zero,8042e0 <___vfprintf_internal_r+0x18d0>
  803c0c:	00ffdfc4 	movi	r3,-129
  803c10:	d8802d15 	stw	r2,180(sp)
  803c14:	90e4703a 	and	r18,r18,r3
  803c18:	983d2726 	beq	r19,zero,8030b8 <__alt_mem_onchip_mem+0xff7830b8>
  803c1c:	0039883a 	mov	fp,zero
  803c20:	003d2a06 	br	8030cc <__alt_mem_onchip_mem+0xff7830cc>
  803c24:	dc402617 	ldw	r17,152(sp)
  803c28:	0441d30e 	bge	zero,r17,804378 <___vfprintf_internal_r+0x1968>
  803c2c:	dc403217 	ldw	r17,200(sp)
  803c30:	d8803317 	ldw	r2,204(sp)
  803c34:	1440010e 	bge	r2,r17,803c3c <___vfprintf_internal_r+0x122c>
  803c38:	1023883a 	mov	r17,r2
  803c3c:	04400a0e 	bge	zero,r17,803c68 <___vfprintf_internal_r+0x1258>
  803c40:	d8801f17 	ldw	r2,124(sp)
  803c44:	1c47883a 	add	r3,r3,r17
  803c48:	44000015 	stw	r16,0(r8)
  803c4c:	10800044 	addi	r2,r2,1
  803c50:	44400115 	stw	r17,4(r8)
  803c54:	d8c02015 	stw	r3,128(sp)
  803c58:	d8801f15 	stw	r2,124(sp)
  803c5c:	010001c4 	movi	r4,7
  803c60:	20826516 	blt	r4,r2,8045f8 <___vfprintf_internal_r+0x1be8>
  803c64:	42000204 	addi	r8,r8,8
  803c68:	88026116 	blt	r17,zero,8045f0 <___vfprintf_internal_r+0x1be0>
  803c6c:	d9003217 	ldw	r4,200(sp)
  803c70:	2463c83a 	sub	r17,r4,r17
  803c74:	04407b0e 	bge	zero,r17,803e64 <___vfprintf_internal_r+0x1454>
  803c78:	05800404 	movi	r22,16
  803c7c:	d8801f17 	ldw	r2,124(sp)
  803c80:	b4419d0e 	bge	r22,r17,8042f8 <___vfprintf_internal_r+0x18e8>
  803c84:	01002074 	movhi	r4,129
  803c88:	210cf184 	addi	r4,r4,13254
  803c8c:	d9002b15 	stw	r4,172(sp)
  803c90:	070001c4 	movi	fp,7
  803c94:	dcc02c17 	ldw	r19,176(sp)
  803c98:	00000306 	br	803ca8 <___vfprintf_internal_r+0x1298>
  803c9c:	42000204 	addi	r8,r8,8
  803ca0:	8c7ffc04 	addi	r17,r17,-16
  803ca4:	b441970e 	bge	r22,r17,804304 <___vfprintf_internal_r+0x18f4>
  803ca8:	18c00404 	addi	r3,r3,16
  803cac:	10800044 	addi	r2,r2,1
  803cb0:	45000015 	stw	r20,0(r8)
  803cb4:	45800115 	stw	r22,4(r8)
  803cb8:	d8c02015 	stw	r3,128(sp)
  803cbc:	d8801f15 	stw	r2,124(sp)
  803cc0:	e0bff60e 	bge	fp,r2,803c9c <__alt_mem_onchip_mem+0xff783c9c>
  803cc4:	d9801e04 	addi	r6,sp,120
  803cc8:	b80b883a 	mov	r5,r23
  803ccc:	9809883a 	mov	r4,r19
  803cd0:	08095280 	call	809528 <__sprint_r>
  803cd4:	103c501e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803cd8:	d8c02017 	ldw	r3,128(sp)
  803cdc:	d8801f17 	ldw	r2,124(sp)
  803ce0:	da000404 	addi	r8,sp,16
  803ce4:	003fee06 	br	803ca0 <__alt_mem_onchip_mem+0xff783ca0>
  803ce8:	d9002c17 	ldw	r4,176(sp)
  803cec:	d9801e04 	addi	r6,sp,120
  803cf0:	b80b883a 	mov	r5,r23
  803cf4:	08095280 	call	809528 <__sprint_r>
  803cf8:	103c471e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803cfc:	d8c02017 	ldw	r3,128(sp)
  803d00:	df002787 	ldb	fp,158(sp)
  803d04:	da000404 	addi	r8,sp,16
  803d08:	003d5606 	br	803264 <__alt_mem_onchip_mem+0xff783264>
  803d0c:	9080040c 	andi	r2,r18,16
  803d10:	10016126 	beq	r2,zero,804298 <___vfprintf_internal_r+0x1888>
  803d14:	d8802d17 	ldw	r2,180(sp)
  803d18:	14c00017 	ldw	r19,0(r2)
  803d1c:	10800104 	addi	r2,r2,4
  803d20:	d8802d15 	stw	r2,180(sp)
  803d24:	982dd7fa 	srai	r22,r19,31
  803d28:	b005883a 	mov	r2,r22
  803d2c:	003c8206 	br	802f38 <__alt_mem_onchip_mem+0xff782f38>
  803d30:	9080040c 	andi	r2,r18,16
  803d34:	10003526 	beq	r2,zero,803e0c <___vfprintf_internal_r+0x13fc>
  803d38:	d9402d17 	ldw	r5,180(sp)
  803d3c:	d8c02917 	ldw	r3,164(sp)
  803d40:	d8002785 	stb	zero,158(sp)
  803d44:	28800104 	addi	r2,r5,4
  803d48:	2cc00017 	ldw	r19,0(r5)
  803d4c:	002d883a 	mov	r22,zero
  803d50:	18003716 	blt	r3,zero,803e30 <___vfprintf_internal_r+0x1420>
  803d54:	00ffdfc4 	movi	r3,-129
  803d58:	d8802d15 	stw	r2,180(sp)
  803d5c:	90e4703a 	and	r18,r18,r3
  803d60:	0039883a 	mov	fp,zero
  803d64:	983df326 	beq	r19,zero,803534 <__alt_mem_onchip_mem+0xff783534>
  803d68:	00800244 	movi	r2,9
  803d6c:	14fc7b36 	bltu	r2,r19,802f5c <__alt_mem_onchip_mem+0xff782f5c>
  803d70:	d8c02817 	ldw	r3,160(sp)
  803d74:	dc001dc4 	addi	r16,sp,119
  803d78:	9cc00c04 	addi	r19,r19,48
  803d7c:	1c07c83a 	sub	r3,r3,r16
  803d80:	dcc01dc5 	stb	r19,119(sp)
  803d84:	d8c02e15 	stw	r3,184(sp)
  803d88:	003ce806 	br	80312c <__alt_mem_onchip_mem+0xff78312c>
  803d8c:	d8803317 	ldw	r2,204(sp)
  803d90:	143fffc4 	addi	r16,r2,-1
  803d94:	043f4d0e 	bge	zero,r16,803acc <__alt_mem_onchip_mem+0xff783acc>
  803d98:	07000404 	movi	fp,16
  803d9c:	e400810e 	bge	fp,r16,803fa4 <___vfprintf_internal_r+0x1594>
  803da0:	01402074 	movhi	r5,129
  803da4:	294cf184 	addi	r5,r5,13254
  803da8:	d9402b15 	stw	r5,172(sp)
  803dac:	01c001c4 	movi	r7,7
  803db0:	dcc02c17 	ldw	r19,176(sp)
  803db4:	00000306 	br	803dc4 <___vfprintf_internal_r+0x13b4>
  803db8:	b5800204 	addi	r22,r22,8
  803dbc:	843ffc04 	addi	r16,r16,-16
  803dc0:	e4007b0e 	bge	fp,r16,803fb0 <___vfprintf_internal_r+0x15a0>
  803dc4:	18c00404 	addi	r3,r3,16
  803dc8:	8c400044 	addi	r17,r17,1
  803dcc:	b5000015 	stw	r20,0(r22)
  803dd0:	b7000115 	stw	fp,4(r22)
  803dd4:	d8c02015 	stw	r3,128(sp)
  803dd8:	dc401f15 	stw	r17,124(sp)
  803ddc:	3c7ff60e 	bge	r7,r17,803db8 <__alt_mem_onchip_mem+0xff783db8>
  803de0:	d9801e04 	addi	r6,sp,120
  803de4:	b80b883a 	mov	r5,r23
  803de8:	9809883a 	mov	r4,r19
  803dec:	d9c03c15 	stw	r7,240(sp)
  803df0:	08095280 	call	809528 <__sprint_r>
  803df4:	d9c03c17 	ldw	r7,240(sp)
  803df8:	103c071e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803dfc:	d8c02017 	ldw	r3,128(sp)
  803e00:	dc401f17 	ldw	r17,124(sp)
  803e04:	dd800404 	addi	r22,sp,16
  803e08:	003fec06 	br	803dbc <__alt_mem_onchip_mem+0xff783dbc>
  803e0c:	9080100c 	andi	r2,r18,64
  803e10:	d8002785 	stb	zero,158(sp)
  803e14:	10010e26 	beq	r2,zero,804250 <___vfprintf_internal_r+0x1840>
  803e18:	d9002d17 	ldw	r4,180(sp)
  803e1c:	d9402917 	ldw	r5,164(sp)
  803e20:	002d883a 	mov	r22,zero
  803e24:	20800104 	addi	r2,r4,4
  803e28:	24c0000b 	ldhu	r19,0(r4)
  803e2c:	283fc90e 	bge	r5,zero,803d54 <__alt_mem_onchip_mem+0xff783d54>
  803e30:	d8802d15 	stw	r2,180(sp)
  803e34:	0039883a 	mov	fp,zero
  803e38:	9d84b03a 	or	r2,r19,r22
  803e3c:	103c461e 	bne	r2,zero,802f58 <__alt_mem_onchip_mem+0xff782f58>
  803e40:	00800044 	movi	r2,1
  803e44:	003e6c06 	br	8037f8 <__alt_mem_onchip_mem+0xff7837f8>
  803e48:	d9002c17 	ldw	r4,176(sp)
  803e4c:	d9801e04 	addi	r6,sp,120
  803e50:	b80b883a 	mov	r5,r23
  803e54:	08095280 	call	809528 <__sprint_r>
  803e58:	103bef1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803e5c:	d8c02017 	ldw	r3,128(sp)
  803e60:	da000404 	addi	r8,sp,16
  803e64:	d9003217 	ldw	r4,200(sp)
  803e68:	d8802617 	ldw	r2,152(sp)
  803e6c:	d9403317 	ldw	r5,204(sp)
  803e70:	8123883a 	add	r17,r16,r4
  803e74:	11400216 	blt	r2,r5,803e80 <___vfprintf_internal_r+0x1470>
  803e78:	9100004c 	andi	r4,r18,1
  803e7c:	20000d26 	beq	r4,zero,803eb4 <___vfprintf_internal_r+0x14a4>
  803e80:	d9003717 	ldw	r4,220(sp)
  803e84:	d9403417 	ldw	r5,208(sp)
  803e88:	1907883a 	add	r3,r3,r4
  803e8c:	d9001f17 	ldw	r4,124(sp)
  803e90:	41400015 	stw	r5,0(r8)
  803e94:	d9403717 	ldw	r5,220(sp)
  803e98:	21000044 	addi	r4,r4,1
  803e9c:	d8c02015 	stw	r3,128(sp)
  803ea0:	41400115 	stw	r5,4(r8)
  803ea4:	d9001f15 	stw	r4,124(sp)
  803ea8:	014001c4 	movi	r5,7
  803eac:	2901e816 	blt	r5,r4,804650 <___vfprintf_internal_r+0x1c40>
  803eb0:	42000204 	addi	r8,r8,8
  803eb4:	d9003317 	ldw	r4,204(sp)
  803eb8:	8121883a 	add	r16,r16,r4
  803ebc:	2085c83a 	sub	r2,r4,r2
  803ec0:	8461c83a 	sub	r16,r16,r17
  803ec4:	1400010e 	bge	r2,r16,803ecc <___vfprintf_internal_r+0x14bc>
  803ec8:	1021883a 	mov	r16,r2
  803ecc:	04000a0e 	bge	zero,r16,803ef8 <___vfprintf_internal_r+0x14e8>
  803ed0:	d9001f17 	ldw	r4,124(sp)
  803ed4:	1c07883a 	add	r3,r3,r16
  803ed8:	44400015 	stw	r17,0(r8)
  803edc:	21000044 	addi	r4,r4,1
  803ee0:	44000115 	stw	r16,4(r8)
  803ee4:	d8c02015 	stw	r3,128(sp)
  803ee8:	d9001f15 	stw	r4,124(sp)
  803eec:	014001c4 	movi	r5,7
  803ef0:	2901fb16 	blt	r5,r4,8046e0 <___vfprintf_internal_r+0x1cd0>
  803ef4:	42000204 	addi	r8,r8,8
  803ef8:	8001f716 	blt	r16,zero,8046d8 <___vfprintf_internal_r+0x1cc8>
  803efc:	1421c83a 	sub	r16,r2,r16
  803f00:	043d380e 	bge	zero,r16,8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  803f04:	04400404 	movi	r17,16
  803f08:	d8801f17 	ldw	r2,124(sp)
  803f0c:	8c3efb0e 	bge	r17,r16,803afc <__alt_mem_onchip_mem+0xff783afc>
  803f10:	01402074 	movhi	r5,129
  803f14:	294cf184 	addi	r5,r5,13254
  803f18:	d9402b15 	stw	r5,172(sp)
  803f1c:	058001c4 	movi	r22,7
  803f20:	dcc02c17 	ldw	r19,176(sp)
  803f24:	00000306 	br	803f34 <___vfprintf_internal_r+0x1524>
  803f28:	42000204 	addi	r8,r8,8
  803f2c:	843ffc04 	addi	r16,r16,-16
  803f30:	8c3ef50e 	bge	r17,r16,803b08 <__alt_mem_onchip_mem+0xff783b08>
  803f34:	18c00404 	addi	r3,r3,16
  803f38:	10800044 	addi	r2,r2,1
  803f3c:	45000015 	stw	r20,0(r8)
  803f40:	44400115 	stw	r17,4(r8)
  803f44:	d8c02015 	stw	r3,128(sp)
  803f48:	d8801f15 	stw	r2,124(sp)
  803f4c:	b0bff60e 	bge	r22,r2,803f28 <__alt_mem_onchip_mem+0xff783f28>
  803f50:	d9801e04 	addi	r6,sp,120
  803f54:	b80b883a 	mov	r5,r23
  803f58:	9809883a 	mov	r4,r19
  803f5c:	08095280 	call	809528 <__sprint_r>
  803f60:	103bad1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803f64:	d8c02017 	ldw	r3,128(sp)
  803f68:	d8801f17 	ldw	r2,124(sp)
  803f6c:	da000404 	addi	r8,sp,16
  803f70:	003fee06 	br	803f2c <__alt_mem_onchip_mem+0xff783f2c>
  803f74:	9088703a 	and	r4,r18,r2
  803f78:	203eab1e 	bne	r4,zero,803a28 <__alt_mem_onchip_mem+0xff783a28>
  803f7c:	dc401f17 	ldw	r17,124(sp)
  803f80:	40800115 	stw	r2,4(r8)
  803f84:	44000015 	stw	r16,0(r8)
  803f88:	8c400044 	addi	r17,r17,1
  803f8c:	d8c02015 	stw	r3,128(sp)
  803f90:	dc401f15 	stw	r17,124(sp)
  803f94:	008001c4 	movi	r2,7
  803f98:	14400e16 	blt	r2,r17,803fd4 <___vfprintf_internal_r+0x15c4>
  803f9c:	45800204 	addi	r22,r8,8
  803fa0:	003eca06 	br	803acc <__alt_mem_onchip_mem+0xff783acc>
  803fa4:	01002074 	movhi	r4,129
  803fa8:	210cf184 	addi	r4,r4,13254
  803fac:	d9002b15 	stw	r4,172(sp)
  803fb0:	d8802b17 	ldw	r2,172(sp)
  803fb4:	1c07883a 	add	r3,r3,r16
  803fb8:	8c400044 	addi	r17,r17,1
  803fbc:	b0800015 	stw	r2,0(r22)
  803fc0:	b4000115 	stw	r16,4(r22)
  803fc4:	d8c02015 	stw	r3,128(sp)
  803fc8:	dc401f15 	stw	r17,124(sp)
  803fcc:	008001c4 	movi	r2,7
  803fd0:	147ebd0e 	bge	r2,r17,803ac8 <__alt_mem_onchip_mem+0xff783ac8>
  803fd4:	d9002c17 	ldw	r4,176(sp)
  803fd8:	d9801e04 	addi	r6,sp,120
  803fdc:	b80b883a 	mov	r5,r23
  803fe0:	08095280 	call	809528 <__sprint_r>
  803fe4:	103b8c1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  803fe8:	d8c02017 	ldw	r3,128(sp)
  803fec:	dc401f17 	ldw	r17,124(sp)
  803ff0:	dd800404 	addi	r22,sp,16
  803ff4:	003eb506 	br	803acc <__alt_mem_onchip_mem+0xff783acc>
  803ff8:	d9002c17 	ldw	r4,176(sp)
  803ffc:	d9801e04 	addi	r6,sp,120
  804000:	b80b883a 	mov	r5,r23
  804004:	08095280 	call	809528 <__sprint_r>
  804008:	103b831e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  80400c:	d8c02017 	ldw	r3,128(sp)
  804010:	dc401f17 	ldw	r17,124(sp)
  804014:	da000404 	addi	r8,sp,16
  804018:	003e8d06 	br	803a50 <__alt_mem_onchip_mem+0xff783a50>
  80401c:	d9002c17 	ldw	r4,176(sp)
  804020:	d9801e04 	addi	r6,sp,120
  804024:	b80b883a 	mov	r5,r23
  804028:	08095280 	call	809528 <__sprint_r>
  80402c:	103b7a1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  804030:	d8c02017 	ldw	r3,128(sp)
  804034:	dc401f17 	ldw	r17,124(sp)
  804038:	dd800404 	addi	r22,sp,16
  80403c:	003e8f06 	br	803a7c <__alt_mem_onchip_mem+0xff783a7c>
  804040:	0027883a 	mov	r19,zero
  804044:	003f4a06 	br	803d70 <__alt_mem_onchip_mem+0xff783d70>
  804048:	d9002c17 	ldw	r4,176(sp)
  80404c:	d9801e04 	addi	r6,sp,120
  804050:	b80b883a 	mov	r5,r23
  804054:	08095280 	call	809528 <__sprint_r>
  804058:	103b6f1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  80405c:	d8c02017 	ldw	r3,128(sp)
  804060:	da000404 	addi	r8,sp,16
  804064:	003c9d06 	br	8032dc <__alt_mem_onchip_mem+0xff7832dc>
  804068:	04e7c83a 	sub	r19,zero,r19
  80406c:	9804c03a 	cmpne	r2,r19,zero
  804070:	05adc83a 	sub	r22,zero,r22
  804074:	b0adc83a 	sub	r22,r22,r2
  804078:	d8802917 	ldw	r2,164(sp)
  80407c:	07000b44 	movi	fp,45
  804080:	df002785 	stb	fp,158(sp)
  804084:	10017b16 	blt	r2,zero,804674 <___vfprintf_internal_r+0x1c64>
  804088:	00bfdfc4 	movi	r2,-129
  80408c:	90a4703a 	and	r18,r18,r2
  804090:	003bb106 	br	802f58 <__alt_mem_onchip_mem+0xff782f58>
  804094:	d9003617 	ldw	r4,216(sp)
  804098:	d9403817 	ldw	r5,224(sp)
  80409c:	da003d15 	stw	r8,244(sp)
  8040a0:	08090b40 	call	8090b4 <__fpclassifyd>
  8040a4:	da003d17 	ldw	r8,244(sp)
  8040a8:	1000f026 	beq	r2,zero,80446c <___vfprintf_internal_r+0x1a5c>
  8040ac:	d9002917 	ldw	r4,164(sp)
  8040b0:	05bff7c4 	movi	r22,-33
  8040b4:	00bfffc4 	movi	r2,-1
  8040b8:	8dac703a 	and	r22,r17,r22
  8040bc:	20820026 	beq	r4,r2,8048c0 <___vfprintf_internal_r+0x1eb0>
  8040c0:	008011c4 	movi	r2,71
  8040c4:	b081f726 	beq	r22,r2,8048a4 <___vfprintf_internal_r+0x1e94>
  8040c8:	d9003817 	ldw	r4,224(sp)
  8040cc:	90c04014 	ori	r3,r18,256
  8040d0:	d8c02b15 	stw	r3,172(sp)
  8040d4:	20021516 	blt	r4,zero,80492c <___vfprintf_internal_r+0x1f1c>
  8040d8:	dcc03817 	ldw	r19,224(sp)
  8040dc:	d8002a05 	stb	zero,168(sp)
  8040e0:	00801984 	movi	r2,102
  8040e4:	8881f926 	beq	r17,r2,8048cc <___vfprintf_internal_r+0x1ebc>
  8040e8:	00801184 	movi	r2,70
  8040ec:	88821c26 	beq	r17,r2,804960 <___vfprintf_internal_r+0x1f50>
  8040f0:	00801144 	movi	r2,69
  8040f4:	b081ef26 	beq	r22,r2,8048b4 <___vfprintf_internal_r+0x1ea4>
  8040f8:	d8c02917 	ldw	r3,164(sp)
  8040fc:	d8802104 	addi	r2,sp,132
  804100:	d8800315 	stw	r2,12(sp)
  804104:	d9403617 	ldw	r5,216(sp)
  804108:	d8802504 	addi	r2,sp,148
  80410c:	d9002c17 	ldw	r4,176(sp)
  804110:	d8800215 	stw	r2,8(sp)
  804114:	d8802604 	addi	r2,sp,152
  804118:	d8c00015 	stw	r3,0(sp)
  80411c:	d8800115 	stw	r2,4(sp)
  804120:	01c00084 	movi	r7,2
  804124:	980d883a 	mov	r6,r19
  804128:	d8c03c15 	stw	r3,240(sp)
  80412c:	da003d15 	stw	r8,244(sp)
  804130:	08050340 	call	805034 <_dtoa_r>
  804134:	1021883a 	mov	r16,r2
  804138:	008019c4 	movi	r2,103
  80413c:	d8c03c17 	ldw	r3,240(sp)
  804140:	da003d17 	ldw	r8,244(sp)
  804144:	88817126 	beq	r17,r2,80470c <___vfprintf_internal_r+0x1cfc>
  804148:	008011c4 	movi	r2,71
  80414c:	88829226 	beq	r17,r2,804b98 <___vfprintf_internal_r+0x2188>
  804150:	80f9883a 	add	fp,r16,r3
  804154:	d9003617 	ldw	r4,216(sp)
  804158:	000d883a 	mov	r6,zero
  80415c:	000f883a 	mov	r7,zero
  804160:	980b883a 	mov	r5,r19
  804164:	da003d15 	stw	r8,244(sp)
  804168:	080dd1c0 	call	80dd1c <__eqdf2>
  80416c:	da003d17 	ldw	r8,244(sp)
  804170:	10018d26 	beq	r2,zero,8047a8 <___vfprintf_internal_r+0x1d98>
  804174:	d8802117 	ldw	r2,132(sp)
  804178:	1700062e 	bgeu	r2,fp,804194 <___vfprintf_internal_r+0x1784>
  80417c:	01000c04 	movi	r4,48
  804180:	10c00044 	addi	r3,r2,1
  804184:	d8c02115 	stw	r3,132(sp)
  804188:	11000005 	stb	r4,0(r2)
  80418c:	d8802117 	ldw	r2,132(sp)
  804190:	173ffb36 	bltu	r2,fp,804180 <__alt_mem_onchip_mem+0xff784180>
  804194:	1405c83a 	sub	r2,r2,r16
  804198:	d8803315 	stw	r2,204(sp)
  80419c:	008011c4 	movi	r2,71
  8041a0:	b0817626 	beq	r22,r2,80477c <___vfprintf_internal_r+0x1d6c>
  8041a4:	00801944 	movi	r2,101
  8041a8:	1442810e 	bge	r2,r17,804bb0 <___vfprintf_internal_r+0x21a0>
  8041ac:	d8c02617 	ldw	r3,152(sp)
  8041b0:	00801984 	movi	r2,102
  8041b4:	d8c03215 	stw	r3,200(sp)
  8041b8:	8881fe26 	beq	r17,r2,8049b4 <___vfprintf_internal_r+0x1fa4>
  8041bc:	d8c03217 	ldw	r3,200(sp)
  8041c0:	d9003317 	ldw	r4,204(sp)
  8041c4:	1901dd16 	blt	r3,r4,80493c <___vfprintf_internal_r+0x1f2c>
  8041c8:	9480004c 	andi	r18,r18,1
  8041cc:	90022b1e 	bne	r18,zero,804a7c <___vfprintf_internal_r+0x206c>
  8041d0:	1805883a 	mov	r2,r3
  8041d4:	18028016 	blt	r3,zero,804bd8 <___vfprintf_internal_r+0x21c8>
  8041d8:	d8c03217 	ldw	r3,200(sp)
  8041dc:	044019c4 	movi	r17,103
  8041e0:	d8c02e15 	stw	r3,184(sp)
  8041e4:	df002a07 	ldb	fp,168(sp)
  8041e8:	e001531e 	bne	fp,zero,804738 <___vfprintf_internal_r+0x1d28>
  8041ec:	df002783 	ldbu	fp,158(sp)
  8041f0:	d8802a15 	stw	r2,168(sp)
  8041f4:	dc802b17 	ldw	r18,172(sp)
  8041f8:	d8002915 	stw	zero,164(sp)
  8041fc:	003bd106 	br	803144 <__alt_mem_onchip_mem+0xff783144>
  804200:	d8802d17 	ldw	r2,180(sp)
  804204:	d8c02d17 	ldw	r3,180(sp)
  804208:	d9002d17 	ldw	r4,180(sp)
  80420c:	10800017 	ldw	r2,0(r2)
  804210:	18c00117 	ldw	r3,4(r3)
  804214:	21000204 	addi	r4,r4,8
  804218:	d8803615 	stw	r2,216(sp)
  80421c:	d8c03815 	stw	r3,224(sp)
  804220:	d9002d15 	stw	r4,180(sp)
  804224:	003b7506 	br	802ffc <__alt_mem_onchip_mem+0xff782ffc>
  804228:	ac400007 	ldb	r17,0(r21)
  80422c:	003a5906 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  804230:	9080100c 	andi	r2,r18,64
  804234:	1000a826 	beq	r2,zero,8044d8 <___vfprintf_internal_r+0x1ac8>
  804238:	d9002d17 	ldw	r4,180(sp)
  80423c:	002d883a 	mov	r22,zero
  804240:	24c0000b 	ldhu	r19,0(r4)
  804244:	21000104 	addi	r4,r4,4
  804248:	d9002d15 	stw	r4,180(sp)
  80424c:	003ccb06 	br	80357c <__alt_mem_onchip_mem+0xff78357c>
  804250:	d8c02d17 	ldw	r3,180(sp)
  804254:	d9002917 	ldw	r4,164(sp)
  804258:	002d883a 	mov	r22,zero
  80425c:	18800104 	addi	r2,r3,4
  804260:	1cc00017 	ldw	r19,0(r3)
  804264:	203ebb0e 	bge	r4,zero,803d54 <__alt_mem_onchip_mem+0xff783d54>
  804268:	003ef106 	br	803e30 <__alt_mem_onchip_mem+0xff783e30>
  80426c:	9080040c 	andi	r2,r18,16
  804270:	1000921e 	bne	r2,zero,8044bc <___vfprintf_internal_r+0x1aac>
  804274:	9480100c 	andi	r18,r18,64
  804278:	90013926 	beq	r18,zero,804760 <___vfprintf_internal_r+0x1d50>
  80427c:	d9002d17 	ldw	r4,180(sp)
  804280:	d9402f17 	ldw	r5,188(sp)
  804284:	20800017 	ldw	r2,0(r4)
  804288:	21000104 	addi	r4,r4,4
  80428c:	d9002d15 	stw	r4,180(sp)
  804290:	1140000d 	sth	r5,0(r2)
  804294:	003a1606 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  804298:	9080100c 	andi	r2,r18,64
  80429c:	10008026 	beq	r2,zero,8044a0 <___vfprintf_internal_r+0x1a90>
  8042a0:	d8c02d17 	ldw	r3,180(sp)
  8042a4:	1cc0000f 	ldh	r19,0(r3)
  8042a8:	18c00104 	addi	r3,r3,4
  8042ac:	d8c02d15 	stw	r3,180(sp)
  8042b0:	982dd7fa 	srai	r22,r19,31
  8042b4:	b005883a 	mov	r2,r22
  8042b8:	003b1f06 	br	802f38 <__alt_mem_onchip_mem+0xff782f38>
  8042bc:	9080100c 	andi	r2,r18,64
  8042c0:	d8002785 	stb	zero,158(sp)
  8042c4:	10008a1e 	bne	r2,zero,8044f0 <___vfprintf_internal_r+0x1ae0>
  8042c8:	d9402d17 	ldw	r5,180(sp)
  8042cc:	d8c02917 	ldw	r3,164(sp)
  8042d0:	002d883a 	mov	r22,zero
  8042d4:	28800104 	addi	r2,r5,4
  8042d8:	2cc00017 	ldw	r19,0(r5)
  8042dc:	183e4b0e 	bge	r3,zero,803c0c <__alt_mem_onchip_mem+0xff783c0c>
  8042e0:	9d86b03a 	or	r3,r19,r22
  8042e4:	d8802d15 	stw	r2,180(sp)
  8042e8:	183e4c1e 	bne	r3,zero,803c1c <__alt_mem_onchip_mem+0xff783c1c>
  8042ec:	0039883a 	mov	fp,zero
  8042f0:	0005883a 	mov	r2,zero
  8042f4:	003d4006 	br	8037f8 <__alt_mem_onchip_mem+0xff7837f8>
  8042f8:	01402074 	movhi	r5,129
  8042fc:	294cf184 	addi	r5,r5,13254
  804300:	d9402b15 	stw	r5,172(sp)
  804304:	d9402b17 	ldw	r5,172(sp)
  804308:	1c47883a 	add	r3,r3,r17
  80430c:	10800044 	addi	r2,r2,1
  804310:	41400015 	stw	r5,0(r8)
  804314:	44400115 	stw	r17,4(r8)
  804318:	d8c02015 	stw	r3,128(sp)
  80431c:	d8801f15 	stw	r2,124(sp)
  804320:	010001c4 	movi	r4,7
  804324:	20bec816 	blt	r4,r2,803e48 <__alt_mem_onchip_mem+0xff783e48>
  804328:	42000204 	addi	r8,r8,8
  80432c:	003ecd06 	br	803e64 <__alt_mem_onchip_mem+0xff783e64>
  804330:	d9002917 	ldw	r4,164(sp)
  804334:	d8002785 	stb	zero,158(sp)
  804338:	203d2d16 	blt	r4,zero,8037f0 <__alt_mem_onchip_mem+0xff7837f0>
  80433c:	00bfdfc4 	movi	r2,-129
  804340:	90a4703a 	and	r18,r18,r2
  804344:	003a9106 	br	802d8c <__alt_mem_onchip_mem+0xff782d8c>
  804348:	01002074 	movhi	r4,129
  80434c:	210cf184 	addi	r4,r4,13254
  804350:	d9002b15 	stw	r4,172(sp)
  804354:	003c0c06 	br	803388 <__alt_mem_onchip_mem+0xff783388>
  804358:	d9002c17 	ldw	r4,176(sp)
  80435c:	d9801e04 	addi	r6,sp,120
  804360:	b80b883a 	mov	r5,r23
  804364:	08095280 	call	809528 <__sprint_r>
  804368:	103aab1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  80436c:	d8c02017 	ldw	r3,128(sp)
  804370:	da000404 	addi	r8,sp,16
  804374:	003d4106 	br	80387c <__alt_mem_onchip_mem+0xff78387c>
  804378:	d8801f17 	ldw	r2,124(sp)
  80437c:	01402074 	movhi	r5,129
  804380:	01000044 	movi	r4,1
  804384:	18c00044 	addi	r3,r3,1
  804388:	10800044 	addi	r2,r2,1
  80438c:	294cf104 	addi	r5,r5,13252
  804390:	41000115 	stw	r4,4(r8)
  804394:	41400015 	stw	r5,0(r8)
  804398:	d8c02015 	stw	r3,128(sp)
  80439c:	d8801f15 	stw	r2,124(sp)
  8043a0:	010001c4 	movi	r4,7
  8043a4:	20805c16 	blt	r4,r2,804518 <___vfprintf_internal_r+0x1b08>
  8043a8:	42000204 	addi	r8,r8,8
  8043ac:	8800041e 	bne	r17,zero,8043c0 <___vfprintf_internal_r+0x19b0>
  8043b0:	d8803317 	ldw	r2,204(sp)
  8043b4:	1000021e 	bne	r2,zero,8043c0 <___vfprintf_internal_r+0x19b0>
  8043b8:	9080004c 	andi	r2,r18,1
  8043bc:	103c0926 	beq	r2,zero,8033e4 <__alt_mem_onchip_mem+0xff7833e4>
  8043c0:	d9003717 	ldw	r4,220(sp)
  8043c4:	d8801f17 	ldw	r2,124(sp)
  8043c8:	d9403417 	ldw	r5,208(sp)
  8043cc:	20c7883a 	add	r3,r4,r3
  8043d0:	10800044 	addi	r2,r2,1
  8043d4:	41000115 	stw	r4,4(r8)
  8043d8:	41400015 	stw	r5,0(r8)
  8043dc:	d8c02015 	stw	r3,128(sp)
  8043e0:	d8801f15 	stw	r2,124(sp)
  8043e4:	010001c4 	movi	r4,7
  8043e8:	20812116 	blt	r4,r2,804870 <___vfprintf_internal_r+0x1e60>
  8043ec:	42000204 	addi	r8,r8,8
  8043f0:	0463c83a 	sub	r17,zero,r17
  8043f4:	0440730e 	bge	zero,r17,8045c4 <___vfprintf_internal_r+0x1bb4>
  8043f8:	05800404 	movi	r22,16
  8043fc:	b440860e 	bge	r22,r17,804618 <___vfprintf_internal_r+0x1c08>
  804400:	01402074 	movhi	r5,129
  804404:	294cf184 	addi	r5,r5,13254
  804408:	d9402b15 	stw	r5,172(sp)
  80440c:	070001c4 	movi	fp,7
  804410:	dcc02c17 	ldw	r19,176(sp)
  804414:	00000306 	br	804424 <___vfprintf_internal_r+0x1a14>
  804418:	42000204 	addi	r8,r8,8
  80441c:	8c7ffc04 	addi	r17,r17,-16
  804420:	b440800e 	bge	r22,r17,804624 <___vfprintf_internal_r+0x1c14>
  804424:	18c00404 	addi	r3,r3,16
  804428:	10800044 	addi	r2,r2,1
  80442c:	45000015 	stw	r20,0(r8)
  804430:	45800115 	stw	r22,4(r8)
  804434:	d8c02015 	stw	r3,128(sp)
  804438:	d8801f15 	stw	r2,124(sp)
  80443c:	e0bff60e 	bge	fp,r2,804418 <__alt_mem_onchip_mem+0xff784418>
  804440:	d9801e04 	addi	r6,sp,120
  804444:	b80b883a 	mov	r5,r23
  804448:	9809883a 	mov	r4,r19
  80444c:	08095280 	call	809528 <__sprint_r>
  804450:	103a711e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  804454:	d8c02017 	ldw	r3,128(sp)
  804458:	d8801f17 	ldw	r2,124(sp)
  80445c:	da000404 	addi	r8,sp,16
  804460:	003fee06 	br	80441c <__alt_mem_onchip_mem+0xff78441c>
  804464:	00bfffc4 	movi	r2,-1
  804468:	003a6f06 	br	802e28 <__alt_mem_onchip_mem+0xff782e28>
  80446c:	008011c4 	movi	r2,71
  804470:	1440b816 	blt	r2,r17,804754 <___vfprintf_internal_r+0x1d44>
  804474:	04002074 	movhi	r16,129
  804478:	840ce304 	addi	r16,r16,13196
  80447c:	00c000c4 	movi	r3,3
  804480:	00bfdfc4 	movi	r2,-129
  804484:	d8c02a15 	stw	r3,168(sp)
  804488:	90a4703a 	and	r18,r18,r2
  80448c:	df002783 	ldbu	fp,158(sp)
  804490:	d8c02e15 	stw	r3,184(sp)
  804494:	d8002915 	stw	zero,164(sp)
  804498:	d8003215 	stw	zero,200(sp)
  80449c:	003b2906 	br	803144 <__alt_mem_onchip_mem+0xff783144>
  8044a0:	d9002d17 	ldw	r4,180(sp)
  8044a4:	24c00017 	ldw	r19,0(r4)
  8044a8:	21000104 	addi	r4,r4,4
  8044ac:	d9002d15 	stw	r4,180(sp)
  8044b0:	982dd7fa 	srai	r22,r19,31
  8044b4:	b005883a 	mov	r2,r22
  8044b8:	003a9f06 	br	802f38 <__alt_mem_onchip_mem+0xff782f38>
  8044bc:	d9402d17 	ldw	r5,180(sp)
  8044c0:	d8c02f17 	ldw	r3,188(sp)
  8044c4:	28800017 	ldw	r2,0(r5)
  8044c8:	29400104 	addi	r5,r5,4
  8044cc:	d9402d15 	stw	r5,180(sp)
  8044d0:	10c00015 	stw	r3,0(r2)
  8044d4:	00398606 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  8044d8:	d9402d17 	ldw	r5,180(sp)
  8044dc:	002d883a 	mov	r22,zero
  8044e0:	2cc00017 	ldw	r19,0(r5)
  8044e4:	29400104 	addi	r5,r5,4
  8044e8:	d9402d15 	stw	r5,180(sp)
  8044ec:	003c2306 	br	80357c <__alt_mem_onchip_mem+0xff78357c>
  8044f0:	d8c02d17 	ldw	r3,180(sp)
  8044f4:	d9002917 	ldw	r4,164(sp)
  8044f8:	002d883a 	mov	r22,zero
  8044fc:	18800104 	addi	r2,r3,4
  804500:	1cc0000b 	ldhu	r19,0(r3)
  804504:	203dc10e 	bge	r4,zero,803c0c <__alt_mem_onchip_mem+0xff783c0c>
  804508:	003f7506 	br	8042e0 <__alt_mem_onchip_mem+0xff7842e0>
  80450c:	04002074 	movhi	r16,129
  804510:	840ce104 	addi	r16,r16,13188
  804514:	003acc06 	br	803048 <__alt_mem_onchip_mem+0xff783048>
  804518:	d9002c17 	ldw	r4,176(sp)
  80451c:	d9801e04 	addi	r6,sp,120
  804520:	b80b883a 	mov	r5,r23
  804524:	08095280 	call	809528 <__sprint_r>
  804528:	103a3b1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  80452c:	dc402617 	ldw	r17,152(sp)
  804530:	d8c02017 	ldw	r3,128(sp)
  804534:	da000404 	addi	r8,sp,16
  804538:	003f9c06 	br	8043ac <__alt_mem_onchip_mem+0xff7843ac>
  80453c:	ac400043 	ldbu	r17,1(r21)
  804540:	94800814 	ori	r18,r18,32
  804544:	ad400044 	addi	r21,r21,1
  804548:	8c403fcc 	andi	r17,r17,255
  80454c:	8c40201c 	xori	r17,r17,128
  804550:	8c7fe004 	addi	r17,r17,-128
  804554:	00398f06 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  804558:	d8c02d15 	stw	r3,180(sp)
  80455c:	0039883a 	mov	fp,zero
  804560:	003e3506 	br	803e38 <__alt_mem_onchip_mem+0xff783e38>
  804564:	d9002c17 	ldw	r4,176(sp)
  804568:	d9801e04 	addi	r6,sp,120
  80456c:	b80b883a 	mov	r5,r23
  804570:	08095280 	call	809528 <__sprint_r>
  804574:	103a281e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  804578:	d8c02017 	ldw	r3,128(sp)
  80457c:	da000404 	addi	r8,sp,16
  804580:	003cd006 	br	8038c4 <__alt_mem_onchip_mem+0xff7838c4>
  804584:	8009883a 	mov	r4,r16
  804588:	da003d15 	stw	r8,244(sp)
  80458c:	08093940 	call	809394 <strlen>
  804590:	d8802e15 	stw	r2,184(sp)
  804594:	da003d17 	ldw	r8,244(sp)
  804598:	103c340e 	bge	r2,zero,80366c <__alt_mem_onchip_mem+0xff78366c>
  80459c:	0005883a 	mov	r2,zero
  8045a0:	003c3206 	br	80366c <__alt_mem_onchip_mem+0xff78366c>
  8045a4:	d9002c17 	ldw	r4,176(sp)
  8045a8:	d9801e04 	addi	r6,sp,120
  8045ac:	b80b883a 	mov	r5,r23
  8045b0:	08095280 	call	809528 <__sprint_r>
  8045b4:	103a181e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  8045b8:	d8c02017 	ldw	r3,128(sp)
  8045bc:	d8801f17 	ldw	r2,124(sp)
  8045c0:	da000404 	addi	r8,sp,16
  8045c4:	d9403317 	ldw	r5,204(sp)
  8045c8:	10800044 	addi	r2,r2,1
  8045cc:	44000015 	stw	r16,0(r8)
  8045d0:	28c7883a 	add	r3,r5,r3
  8045d4:	003b7d06 	br	8033cc <__alt_mem_onchip_mem+0xff7833cc>
  8045d8:	01002074 	movhi	r4,129
  8045dc:	210cf584 	addi	r4,r4,13270
  8045e0:	d9003515 	stw	r4,212(sp)
  8045e4:	003b1406 	br	803238 <__alt_mem_onchip_mem+0xff783238>
  8045e8:	013fffc4 	movi	r4,-1
  8045ec:	003a3506 	br	802ec4 <__alt_mem_onchip_mem+0xff782ec4>
  8045f0:	0023883a 	mov	r17,zero
  8045f4:	003d9d06 	br	803c6c <__alt_mem_onchip_mem+0xff783c6c>
  8045f8:	d9002c17 	ldw	r4,176(sp)
  8045fc:	d9801e04 	addi	r6,sp,120
  804600:	b80b883a 	mov	r5,r23
  804604:	08095280 	call	809528 <__sprint_r>
  804608:	103a031e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  80460c:	d8c02017 	ldw	r3,128(sp)
  804610:	da000404 	addi	r8,sp,16
  804614:	003d9406 	br	803c68 <__alt_mem_onchip_mem+0xff783c68>
  804618:	01002074 	movhi	r4,129
  80461c:	210cf184 	addi	r4,r4,13254
  804620:	d9002b15 	stw	r4,172(sp)
  804624:	d9002b17 	ldw	r4,172(sp)
  804628:	1c47883a 	add	r3,r3,r17
  80462c:	10800044 	addi	r2,r2,1
  804630:	41000015 	stw	r4,0(r8)
  804634:	44400115 	stw	r17,4(r8)
  804638:	d8c02015 	stw	r3,128(sp)
  80463c:	d8801f15 	stw	r2,124(sp)
  804640:	010001c4 	movi	r4,7
  804644:	20bfd716 	blt	r4,r2,8045a4 <__alt_mem_onchip_mem+0xff7845a4>
  804648:	42000204 	addi	r8,r8,8
  80464c:	003fdd06 	br	8045c4 <__alt_mem_onchip_mem+0xff7845c4>
  804650:	d9002c17 	ldw	r4,176(sp)
  804654:	d9801e04 	addi	r6,sp,120
  804658:	b80b883a 	mov	r5,r23
  80465c:	08095280 	call	809528 <__sprint_r>
  804660:	1039ed1e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  804664:	d8802617 	ldw	r2,152(sp)
  804668:	d8c02017 	ldw	r3,128(sp)
  80466c:	da000404 	addi	r8,sp,16
  804670:	003e1006 	br	803eb4 <__alt_mem_onchip_mem+0xff783eb4>
  804674:	00800044 	movi	r2,1
  804678:	10803fcc 	andi	r2,r2,255
  80467c:	00c00044 	movi	r3,1
  804680:	10fa3526 	beq	r2,r3,802f58 <__alt_mem_onchip_mem+0xff782f58>
  804684:	00c00084 	movi	r3,2
  804688:	10fbcb26 	beq	r2,r3,8035b8 <__alt_mem_onchip_mem+0xff7835b8>
  80468c:	003a8f06 	br	8030cc <__alt_mem_onchip_mem+0xff7830cc>
  804690:	01002074 	movhi	r4,129
  804694:	210cf584 	addi	r4,r4,13270
  804698:	d9003515 	stw	r4,212(sp)
  80469c:	003b7606 	br	803478 <__alt_mem_onchip_mem+0xff783478>
  8046a0:	d8802917 	ldw	r2,164(sp)
  8046a4:	00c00184 	movi	r3,6
  8046a8:	1880012e 	bgeu	r3,r2,8046b0 <___vfprintf_internal_r+0x1ca0>
  8046ac:	1805883a 	mov	r2,r3
  8046b0:	d8802e15 	stw	r2,184(sp)
  8046b4:	1000ef16 	blt	r2,zero,804a74 <___vfprintf_internal_r+0x2064>
  8046b8:	04002074 	movhi	r16,129
  8046bc:	d8802a15 	stw	r2,168(sp)
  8046c0:	dcc02d15 	stw	r19,180(sp)
  8046c4:	d8002915 	stw	zero,164(sp)
  8046c8:	d8003215 	stw	zero,200(sp)
  8046cc:	840cef04 	addi	r16,r16,13244
  8046d0:	0039883a 	mov	fp,zero
  8046d4:	003aa206 	br	803160 <__alt_mem_onchip_mem+0xff783160>
  8046d8:	0021883a 	mov	r16,zero
  8046dc:	003e0706 	br	803efc <__alt_mem_onchip_mem+0xff783efc>
  8046e0:	d9002c17 	ldw	r4,176(sp)
  8046e4:	d9801e04 	addi	r6,sp,120
  8046e8:	b80b883a 	mov	r5,r23
  8046ec:	08095280 	call	809528 <__sprint_r>
  8046f0:	1039c91e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  8046f4:	d8802617 	ldw	r2,152(sp)
  8046f8:	d9403317 	ldw	r5,204(sp)
  8046fc:	d8c02017 	ldw	r3,128(sp)
  804700:	da000404 	addi	r8,sp,16
  804704:	2885c83a 	sub	r2,r5,r2
  804708:	003dfb06 	br	803ef8 <__alt_mem_onchip_mem+0xff783ef8>
  80470c:	9080004c 	andi	r2,r18,1
  804710:	103e8f1e 	bne	r2,zero,804150 <__alt_mem_onchip_mem+0xff784150>
  804714:	d8802117 	ldw	r2,132(sp)
  804718:	003e9e06 	br	804194 <__alt_mem_onchip_mem+0xff784194>
  80471c:	1025883a 	mov	r18,r2
  804720:	0039883a 	mov	fp,zero
  804724:	00800084 	movi	r2,2
  804728:	003fd306 	br	804678 <__alt_mem_onchip_mem+0xff784678>
  80472c:	07000b44 	movi	fp,45
  804730:	df002785 	stb	fp,158(sp)
  804734:	003a4006 	br	803038 <__alt_mem_onchip_mem+0xff783038>
  804738:	00c00b44 	movi	r3,45
  80473c:	d8c02785 	stb	r3,158(sp)
  804740:	d8802a15 	stw	r2,168(sp)
  804744:	dc802b17 	ldw	r18,172(sp)
  804748:	d8002915 	stw	zero,164(sp)
  80474c:	07000b44 	movi	fp,45
  804750:	003a8006 	br	803154 <__alt_mem_onchip_mem+0xff783154>
  804754:	04002074 	movhi	r16,129
  804758:	840ce404 	addi	r16,r16,13200
  80475c:	003f4706 	br	80447c <__alt_mem_onchip_mem+0xff78447c>
  804760:	d8c02d17 	ldw	r3,180(sp)
  804764:	d9002f17 	ldw	r4,188(sp)
  804768:	18800017 	ldw	r2,0(r3)
  80476c:	18c00104 	addi	r3,r3,4
  804770:	d8c02d15 	stw	r3,180(sp)
  804774:	11000015 	stw	r4,0(r2)
  804778:	0038dd06 	br	802af0 <__alt_mem_onchip_mem+0xff782af0>
  80477c:	dd802617 	ldw	r22,152(sp)
  804780:	00bfff44 	movi	r2,-3
  804784:	b0801c16 	blt	r22,r2,8047f8 <___vfprintf_internal_r+0x1de8>
  804788:	d9402917 	ldw	r5,164(sp)
  80478c:	2d801a16 	blt	r5,r22,8047f8 <___vfprintf_internal_r+0x1de8>
  804790:	dd803215 	stw	r22,200(sp)
  804794:	003e8906 	br	8041bc <__alt_mem_onchip_mem+0xff7841bc>
  804798:	01002074 	movhi	r4,129
  80479c:	210cf184 	addi	r4,r4,13254
  8047a0:	d9002b15 	stw	r4,172(sp)
  8047a4:	003c9106 	br	8039ec <__alt_mem_onchip_mem+0xff7839ec>
  8047a8:	e005883a 	mov	r2,fp
  8047ac:	003e7906 	br	804194 <__alt_mem_onchip_mem+0xff784194>
  8047b0:	d9402917 	ldw	r5,164(sp)
  8047b4:	df002783 	ldbu	fp,158(sp)
  8047b8:	dcc02d15 	stw	r19,180(sp)
  8047bc:	d9402a15 	stw	r5,168(sp)
  8047c0:	d9402e15 	stw	r5,184(sp)
  8047c4:	d8002915 	stw	zero,164(sp)
  8047c8:	d8003215 	stw	zero,200(sp)
  8047cc:	003a5d06 	br	803144 <__alt_mem_onchip_mem+0xff783144>
  8047d0:	9080004c 	andi	r2,r18,1
  8047d4:	0039883a 	mov	fp,zero
  8047d8:	10000426 	beq	r2,zero,8047ec <___vfprintf_internal_r+0x1ddc>
  8047dc:	00800c04 	movi	r2,48
  8047e0:	dc001dc4 	addi	r16,sp,119
  8047e4:	d8801dc5 	stb	r2,119(sp)
  8047e8:	003b8006 	br	8035ec <__alt_mem_onchip_mem+0xff7835ec>
  8047ec:	d8002e15 	stw	zero,184(sp)
  8047f0:	dc001e04 	addi	r16,sp,120
  8047f4:	003a4d06 	br	80312c <__alt_mem_onchip_mem+0xff78312c>
  8047f8:	8c7fff84 	addi	r17,r17,-2
  8047fc:	b5bfffc4 	addi	r22,r22,-1
  804800:	dd802615 	stw	r22,152(sp)
  804804:	dc4022c5 	stb	r17,139(sp)
  804808:	b000bf16 	blt	r22,zero,804b08 <___vfprintf_internal_r+0x20f8>
  80480c:	00800ac4 	movi	r2,43
  804810:	d8802305 	stb	r2,140(sp)
  804814:	00800244 	movi	r2,9
  804818:	15807016 	blt	r2,r22,8049dc <___vfprintf_internal_r+0x1fcc>
  80481c:	00800c04 	movi	r2,48
  804820:	b5800c04 	addi	r22,r22,48
  804824:	d8802345 	stb	r2,141(sp)
  804828:	dd802385 	stb	r22,142(sp)
  80482c:	d88023c4 	addi	r2,sp,143
  804830:	df0022c4 	addi	fp,sp,139
  804834:	d8c03317 	ldw	r3,204(sp)
  804838:	1739c83a 	sub	fp,r2,fp
  80483c:	d9003317 	ldw	r4,204(sp)
  804840:	e0c7883a 	add	r3,fp,r3
  804844:	df003a15 	stw	fp,232(sp)
  804848:	d8c02e15 	stw	r3,184(sp)
  80484c:	00800044 	movi	r2,1
  804850:	1100b30e 	bge	r2,r4,804b20 <___vfprintf_internal_r+0x2110>
  804854:	d8c02e17 	ldw	r3,184(sp)
  804858:	18c00044 	addi	r3,r3,1
  80485c:	d8c02e15 	stw	r3,184(sp)
  804860:	1805883a 	mov	r2,r3
  804864:	1800ac16 	blt	r3,zero,804b18 <___vfprintf_internal_r+0x2108>
  804868:	d8003215 	stw	zero,200(sp)
  80486c:	003e5d06 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804870:	d9002c17 	ldw	r4,176(sp)
  804874:	d9801e04 	addi	r6,sp,120
  804878:	b80b883a 	mov	r5,r23
  80487c:	08095280 	call	809528 <__sprint_r>
  804880:	1039651e 	bne	r2,zero,802e18 <__alt_mem_onchip_mem+0xff782e18>
  804884:	dc402617 	ldw	r17,152(sp)
  804888:	d8c02017 	ldw	r3,128(sp)
  80488c:	d8801f17 	ldw	r2,124(sp)
  804890:	da000404 	addi	r8,sp,16
  804894:	003ed606 	br	8043f0 <__alt_mem_onchip_mem+0xff7843f0>
  804898:	582b883a 	mov	r21,r11
  80489c:	d8002915 	stw	zero,164(sp)
  8048a0:	0038bd06 	br	802b98 <__alt_mem_onchip_mem+0xff782b98>
  8048a4:	d8802917 	ldw	r2,164(sp)
  8048a8:	103e071e 	bne	r2,zero,8040c8 <__alt_mem_onchip_mem+0xff7840c8>
  8048ac:	dc002915 	stw	r16,164(sp)
  8048b0:	003e0506 	br	8040c8 <__alt_mem_onchip_mem+0xff7840c8>
  8048b4:	d9002917 	ldw	r4,164(sp)
  8048b8:	20c00044 	addi	r3,r4,1
  8048bc:	003e0f06 	br	8040fc <__alt_mem_onchip_mem+0xff7840fc>
  8048c0:	01400184 	movi	r5,6
  8048c4:	d9402915 	stw	r5,164(sp)
  8048c8:	003dff06 	br	8040c8 <__alt_mem_onchip_mem+0xff7840c8>
  8048cc:	d8802104 	addi	r2,sp,132
  8048d0:	d8800315 	stw	r2,12(sp)
  8048d4:	d8802504 	addi	r2,sp,148
  8048d8:	d8800215 	stw	r2,8(sp)
  8048dc:	d8802604 	addi	r2,sp,152
  8048e0:	d8800115 	stw	r2,4(sp)
  8048e4:	d8802917 	ldw	r2,164(sp)
  8048e8:	d9403617 	ldw	r5,216(sp)
  8048ec:	d9002c17 	ldw	r4,176(sp)
  8048f0:	d8800015 	stw	r2,0(sp)
  8048f4:	01c000c4 	movi	r7,3
  8048f8:	980d883a 	mov	r6,r19
  8048fc:	da003d15 	stw	r8,244(sp)
  804900:	08050340 	call	805034 <_dtoa_r>
  804904:	d8c02917 	ldw	r3,164(sp)
  804908:	da003d17 	ldw	r8,244(sp)
  80490c:	1021883a 	mov	r16,r2
  804910:	10f9883a 	add	fp,r2,r3
  804914:	81000007 	ldb	r4,0(r16)
  804918:	00800c04 	movi	r2,48
  80491c:	20805e26 	beq	r4,r2,804a98 <___vfprintf_internal_r+0x2088>
  804920:	d8c02617 	ldw	r3,152(sp)
  804924:	e0f9883a 	add	fp,fp,r3
  804928:	003e0a06 	br	804154 <__alt_mem_onchip_mem+0xff784154>
  80492c:	00c00b44 	movi	r3,45
  804930:	24e0003c 	xorhi	r19,r4,32768
  804934:	d8c02a05 	stb	r3,168(sp)
  804938:	003de906 	br	8040e0 <__alt_mem_onchip_mem+0xff7840e0>
  80493c:	d8c03217 	ldw	r3,200(sp)
  804940:	00c07a0e 	bge	zero,r3,804b2c <___vfprintf_internal_r+0x211c>
  804944:	00800044 	movi	r2,1
  804948:	d9003317 	ldw	r4,204(sp)
  80494c:	1105883a 	add	r2,r2,r4
  804950:	d8802e15 	stw	r2,184(sp)
  804954:	10004e16 	blt	r2,zero,804a90 <___vfprintf_internal_r+0x2080>
  804958:	044019c4 	movi	r17,103
  80495c:	003e2106 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804960:	d9002917 	ldw	r4,164(sp)
  804964:	d8802104 	addi	r2,sp,132
  804968:	d8800315 	stw	r2,12(sp)
  80496c:	d9000015 	stw	r4,0(sp)
  804970:	d8802504 	addi	r2,sp,148
  804974:	d9403617 	ldw	r5,216(sp)
  804978:	d9002c17 	ldw	r4,176(sp)
  80497c:	d8800215 	stw	r2,8(sp)
  804980:	d8802604 	addi	r2,sp,152
  804984:	d8800115 	stw	r2,4(sp)
  804988:	01c000c4 	movi	r7,3
  80498c:	980d883a 	mov	r6,r19
  804990:	da003d15 	stw	r8,244(sp)
  804994:	08050340 	call	805034 <_dtoa_r>
  804998:	d8c02917 	ldw	r3,164(sp)
  80499c:	da003d17 	ldw	r8,244(sp)
  8049a0:	1021883a 	mov	r16,r2
  8049a4:	00801184 	movi	r2,70
  8049a8:	80f9883a 	add	fp,r16,r3
  8049ac:	88bfd926 	beq	r17,r2,804914 <__alt_mem_onchip_mem+0xff784914>
  8049b0:	003de806 	br	804154 <__alt_mem_onchip_mem+0xff784154>
  8049b4:	d9002917 	ldw	r4,164(sp)
  8049b8:	00c04d0e 	bge	zero,r3,804af0 <___vfprintf_internal_r+0x20e0>
  8049bc:	2000441e 	bne	r4,zero,804ad0 <___vfprintf_internal_r+0x20c0>
  8049c0:	9480004c 	andi	r18,r18,1
  8049c4:	9000421e 	bne	r18,zero,804ad0 <___vfprintf_internal_r+0x20c0>
  8049c8:	1805883a 	mov	r2,r3
  8049cc:	18007016 	blt	r3,zero,804b90 <___vfprintf_internal_r+0x2180>
  8049d0:	d8c03217 	ldw	r3,200(sp)
  8049d4:	d8c02e15 	stw	r3,184(sp)
  8049d8:	003e0206 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  8049dc:	df0022c4 	addi	fp,sp,139
  8049e0:	dc002915 	stw	r16,164(sp)
  8049e4:	4027883a 	mov	r19,r8
  8049e8:	e021883a 	mov	r16,fp
  8049ec:	b009883a 	mov	r4,r22
  8049f0:	01400284 	movi	r5,10
  8049f4:	080ca580 	call	80ca58 <__modsi3>
  8049f8:	10800c04 	addi	r2,r2,48
  8049fc:	843fffc4 	addi	r16,r16,-1
  804a00:	b009883a 	mov	r4,r22
  804a04:	01400284 	movi	r5,10
  804a08:	80800005 	stb	r2,0(r16)
  804a0c:	080c9d40 	call	80c9d4 <__divsi3>
  804a10:	102d883a 	mov	r22,r2
  804a14:	00800244 	movi	r2,9
  804a18:	15bff416 	blt	r2,r22,8049ec <__alt_mem_onchip_mem+0xff7849ec>
  804a1c:	9811883a 	mov	r8,r19
  804a20:	b0800c04 	addi	r2,r22,48
  804a24:	8027883a 	mov	r19,r16
  804a28:	997fffc4 	addi	r5,r19,-1
  804a2c:	98bfffc5 	stb	r2,-1(r19)
  804a30:	dc002917 	ldw	r16,164(sp)
  804a34:	2f006a2e 	bgeu	r5,fp,804be0 <___vfprintf_internal_r+0x21d0>
  804a38:	d9c02384 	addi	r7,sp,142
  804a3c:	3ccfc83a 	sub	r7,r7,r19
  804a40:	d9002344 	addi	r4,sp,141
  804a44:	e1cf883a 	add	r7,fp,r7
  804a48:	00000106 	br	804a50 <___vfprintf_internal_r+0x2040>
  804a4c:	28800003 	ldbu	r2,0(r5)
  804a50:	20800005 	stb	r2,0(r4)
  804a54:	21000044 	addi	r4,r4,1
  804a58:	29400044 	addi	r5,r5,1
  804a5c:	393ffb1e 	bne	r7,r4,804a4c <__alt_mem_onchip_mem+0xff784a4c>
  804a60:	d8802304 	addi	r2,sp,140
  804a64:	14c5c83a 	sub	r2,r2,r19
  804a68:	d8c02344 	addi	r3,sp,141
  804a6c:	1885883a 	add	r2,r3,r2
  804a70:	003f7006 	br	804834 <__alt_mem_onchip_mem+0xff784834>
  804a74:	0005883a 	mov	r2,zero
  804a78:	003f0f06 	br	8046b8 <__alt_mem_onchip_mem+0xff7846b8>
  804a7c:	d8c03217 	ldw	r3,200(sp)
  804a80:	18c00044 	addi	r3,r3,1
  804a84:	d8c02e15 	stw	r3,184(sp)
  804a88:	1805883a 	mov	r2,r3
  804a8c:	183fb20e 	bge	r3,zero,804958 <__alt_mem_onchip_mem+0xff784958>
  804a90:	0005883a 	mov	r2,zero
  804a94:	003fb006 	br	804958 <__alt_mem_onchip_mem+0xff784958>
  804a98:	d9003617 	ldw	r4,216(sp)
  804a9c:	000d883a 	mov	r6,zero
  804aa0:	000f883a 	mov	r7,zero
  804aa4:	980b883a 	mov	r5,r19
  804aa8:	d8c03c15 	stw	r3,240(sp)
  804aac:	da003d15 	stw	r8,244(sp)
  804ab0:	080dd1c0 	call	80dd1c <__eqdf2>
  804ab4:	d8c03c17 	ldw	r3,240(sp)
  804ab8:	da003d17 	ldw	r8,244(sp)
  804abc:	103f9826 	beq	r2,zero,804920 <__alt_mem_onchip_mem+0xff784920>
  804ac0:	00800044 	movi	r2,1
  804ac4:	10c7c83a 	sub	r3,r2,r3
  804ac8:	d8c02615 	stw	r3,152(sp)
  804acc:	003f9506 	br	804924 <__alt_mem_onchip_mem+0xff784924>
  804ad0:	d9002917 	ldw	r4,164(sp)
  804ad4:	d8c03217 	ldw	r3,200(sp)
  804ad8:	20800044 	addi	r2,r4,1
  804adc:	1885883a 	add	r2,r3,r2
  804ae0:	d8802e15 	stw	r2,184(sp)
  804ae4:	103dbf0e 	bge	r2,zero,8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804ae8:	0005883a 	mov	r2,zero
  804aec:	003dbd06 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804af0:	2000211e 	bne	r4,zero,804b78 <___vfprintf_internal_r+0x2168>
  804af4:	9480004c 	andi	r18,r18,1
  804af8:	90001f1e 	bne	r18,zero,804b78 <___vfprintf_internal_r+0x2168>
  804afc:	00800044 	movi	r2,1
  804b00:	d8802e15 	stw	r2,184(sp)
  804b04:	003db706 	br	8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804b08:	00800b44 	movi	r2,45
  804b0c:	05adc83a 	sub	r22,zero,r22
  804b10:	d8802305 	stb	r2,140(sp)
  804b14:	003f3f06 	br	804814 <__alt_mem_onchip_mem+0xff784814>
  804b18:	0005883a 	mov	r2,zero
  804b1c:	003f5206 	br	804868 <__alt_mem_onchip_mem+0xff784868>
  804b20:	90a4703a 	and	r18,r18,r2
  804b24:	903f4e26 	beq	r18,zero,804860 <__alt_mem_onchip_mem+0xff784860>
  804b28:	003f4a06 	br	804854 <__alt_mem_onchip_mem+0xff784854>
  804b2c:	00800084 	movi	r2,2
  804b30:	10c5c83a 	sub	r2,r2,r3
  804b34:	003f8406 	br	804948 <__alt_mem_onchip_mem+0xff784948>
  804b38:	d8802d17 	ldw	r2,180(sp)
  804b3c:	d9002d17 	ldw	r4,180(sp)
  804b40:	ac400043 	ldbu	r17,1(r21)
  804b44:	10800017 	ldw	r2,0(r2)
  804b48:	582b883a 	mov	r21,r11
  804b4c:	d8802915 	stw	r2,164(sp)
  804b50:	20800104 	addi	r2,r4,4
  804b54:	d9002917 	ldw	r4,164(sp)
  804b58:	d8802d15 	stw	r2,180(sp)
  804b5c:	203e7a0e 	bge	r4,zero,804548 <__alt_mem_onchip_mem+0xff784548>
  804b60:	8c403fcc 	andi	r17,r17,255
  804b64:	00bfffc4 	movi	r2,-1
  804b68:	8c40201c 	xori	r17,r17,128
  804b6c:	d8802915 	stw	r2,164(sp)
  804b70:	8c7fe004 	addi	r17,r17,-128
  804b74:	00380706 	br	802b94 <__alt_mem_onchip_mem+0xff782b94>
  804b78:	d8c02917 	ldw	r3,164(sp)
  804b7c:	18c00084 	addi	r3,r3,2
  804b80:	d8c02e15 	stw	r3,184(sp)
  804b84:	1805883a 	mov	r2,r3
  804b88:	183d960e 	bge	r3,zero,8041e4 <__alt_mem_onchip_mem+0xff7841e4>
  804b8c:	003fd606 	br	804ae8 <__alt_mem_onchip_mem+0xff784ae8>
  804b90:	0005883a 	mov	r2,zero
  804b94:	003f8e06 	br	8049d0 <__alt_mem_onchip_mem+0xff7849d0>
  804b98:	9080004c 	andi	r2,r18,1
  804b9c:	103f811e 	bne	r2,zero,8049a4 <__alt_mem_onchip_mem+0xff7849a4>
  804ba0:	d8802117 	ldw	r2,132(sp)
  804ba4:	1405c83a 	sub	r2,r2,r16
  804ba8:	d8803315 	stw	r2,204(sp)
  804bac:	b47ef326 	beq	r22,r17,80477c <__alt_mem_onchip_mem+0xff78477c>
  804bb0:	dd802617 	ldw	r22,152(sp)
  804bb4:	003f1106 	br	8047fc <__alt_mem_onchip_mem+0xff7847fc>
  804bb8:	d9c02785 	stb	r7,158(sp)
  804bbc:	00390406 	br	802fd0 <__alt_mem_onchip_mem+0xff782fd0>
  804bc0:	d9c02785 	stb	r7,158(sp)
  804bc4:	0038d306 	br	802f14 <__alt_mem_onchip_mem+0xff782f14>
  804bc8:	d9c02785 	stb	r7,158(sp)
  804bcc:	003a6106 	br	803554 <__alt_mem_onchip_mem+0xff783554>
  804bd0:	d9c02785 	stb	r7,158(sp)
  804bd4:	003af806 	br	8037b8 <__alt_mem_onchip_mem+0xff7837b8>
  804bd8:	0005883a 	mov	r2,zero
  804bdc:	003d7e06 	br	8041d8 <__alt_mem_onchip_mem+0xff7841d8>
  804be0:	d8802344 	addi	r2,sp,141
  804be4:	003f1306 	br	804834 <__alt_mem_onchip_mem+0xff784834>
  804be8:	d9c02785 	stb	r7,158(sp)
  804bec:	00392306 	br	80307c <__alt_mem_onchip_mem+0xff78307c>
  804bf0:	d9c02785 	stb	r7,158(sp)
  804bf4:	003aa906 	br	80369c <__alt_mem_onchip_mem+0xff78369c>
  804bf8:	d9c02785 	stb	r7,158(sp)
  804bfc:	003a3d06 	br	8034f4 <__alt_mem_onchip_mem+0xff7834f4>
  804c00:	d9c02785 	stb	r7,158(sp)
  804c04:	003aca06 	br	803730 <__alt_mem_onchip_mem+0xff783730>

00804c08 <__vfprintf_internal>:
  804c08:	00802074 	movhi	r2,129
  804c0c:	10956904 	addi	r2,r2,21924
  804c10:	300f883a 	mov	r7,r6
  804c14:	280d883a 	mov	r6,r5
  804c18:	200b883a 	mov	r5,r4
  804c1c:	11000017 	ldw	r4,0(r2)
  804c20:	0802a101 	jmpi	802a10 <___vfprintf_internal_r>

00804c24 <__sbprintf>:
  804c24:	2880030b 	ldhu	r2,12(r5)
  804c28:	2ac01917 	ldw	r11,100(r5)
  804c2c:	2a80038b 	ldhu	r10,14(r5)
  804c30:	2a400717 	ldw	r9,28(r5)
  804c34:	2a000917 	ldw	r8,36(r5)
  804c38:	defee204 	addi	sp,sp,-1144
  804c3c:	00c10004 	movi	r3,1024
  804c40:	dc011a15 	stw	r16,1128(sp)
  804c44:	10bfff4c 	andi	r2,r2,65533
  804c48:	2821883a 	mov	r16,r5
  804c4c:	d8cb883a 	add	r5,sp,r3
  804c50:	dc811c15 	stw	r18,1136(sp)
  804c54:	dc411b15 	stw	r17,1132(sp)
  804c58:	dfc11d15 	stw	ra,1140(sp)
  804c5c:	2025883a 	mov	r18,r4
  804c60:	d881030d 	sth	r2,1036(sp)
  804c64:	dac11915 	stw	r11,1124(sp)
  804c68:	da81038d 	sth	r10,1038(sp)
  804c6c:	da410715 	stw	r9,1052(sp)
  804c70:	da010915 	stw	r8,1060(sp)
  804c74:	dec10015 	stw	sp,1024(sp)
  804c78:	dec10415 	stw	sp,1040(sp)
  804c7c:	d8c10215 	stw	r3,1032(sp)
  804c80:	d8c10515 	stw	r3,1044(sp)
  804c84:	d8010615 	stw	zero,1048(sp)
  804c88:	0802a100 	call	802a10 <___vfprintf_internal_r>
  804c8c:	1023883a 	mov	r17,r2
  804c90:	10000416 	blt	r2,zero,804ca4 <__sbprintf+0x80>
  804c94:	d9410004 	addi	r5,sp,1024
  804c98:	9009883a 	mov	r4,r18
  804c9c:	08068d80 	call	8068d8 <_fflush_r>
  804ca0:	10000d1e 	bne	r2,zero,804cd8 <__sbprintf+0xb4>
  804ca4:	d881030b 	ldhu	r2,1036(sp)
  804ca8:	1080100c 	andi	r2,r2,64
  804cac:	10000326 	beq	r2,zero,804cbc <__sbprintf+0x98>
  804cb0:	8080030b 	ldhu	r2,12(r16)
  804cb4:	10801014 	ori	r2,r2,64
  804cb8:	8080030d 	sth	r2,12(r16)
  804cbc:	8805883a 	mov	r2,r17
  804cc0:	dfc11d17 	ldw	ra,1140(sp)
  804cc4:	dc811c17 	ldw	r18,1136(sp)
  804cc8:	dc411b17 	ldw	r17,1132(sp)
  804ccc:	dc011a17 	ldw	r16,1128(sp)
  804cd0:	dec11e04 	addi	sp,sp,1144
  804cd4:	f800283a 	ret
  804cd8:	047fffc4 	movi	r17,-1
  804cdc:	003ff106 	br	804ca4 <__alt_mem_onchip_mem+0xff784ca4>

00804ce0 <__swsetup_r>:
  804ce0:	00802074 	movhi	r2,129
  804ce4:	defffd04 	addi	sp,sp,-12
  804ce8:	10956904 	addi	r2,r2,21924
  804cec:	dc400115 	stw	r17,4(sp)
  804cf0:	2023883a 	mov	r17,r4
  804cf4:	11000017 	ldw	r4,0(r2)
  804cf8:	dc000015 	stw	r16,0(sp)
  804cfc:	dfc00215 	stw	ra,8(sp)
  804d00:	2821883a 	mov	r16,r5
  804d04:	20000226 	beq	r4,zero,804d10 <__swsetup_r+0x30>
  804d08:	20800e17 	ldw	r2,56(r4)
  804d0c:	10003126 	beq	r2,zero,804dd4 <__swsetup_r+0xf4>
  804d10:	8080030b 	ldhu	r2,12(r16)
  804d14:	10c0020c 	andi	r3,r2,8
  804d18:	1009883a 	mov	r4,r2
  804d1c:	18000f26 	beq	r3,zero,804d5c <__swsetup_r+0x7c>
  804d20:	80c00417 	ldw	r3,16(r16)
  804d24:	18001526 	beq	r3,zero,804d7c <__swsetup_r+0x9c>
  804d28:	1100004c 	andi	r4,r2,1
  804d2c:	20001c1e 	bne	r4,zero,804da0 <__swsetup_r+0xc0>
  804d30:	1080008c 	andi	r2,r2,2
  804d34:	1000291e 	bne	r2,zero,804ddc <__swsetup_r+0xfc>
  804d38:	80800517 	ldw	r2,20(r16)
  804d3c:	80800215 	stw	r2,8(r16)
  804d40:	18001c26 	beq	r3,zero,804db4 <__swsetup_r+0xd4>
  804d44:	0005883a 	mov	r2,zero
  804d48:	dfc00217 	ldw	ra,8(sp)
  804d4c:	dc400117 	ldw	r17,4(sp)
  804d50:	dc000017 	ldw	r16,0(sp)
  804d54:	dec00304 	addi	sp,sp,12
  804d58:	f800283a 	ret
  804d5c:	2080040c 	andi	r2,r4,16
  804d60:	10002e26 	beq	r2,zero,804e1c <__swsetup_r+0x13c>
  804d64:	2080010c 	andi	r2,r4,4
  804d68:	10001e1e 	bne	r2,zero,804de4 <__swsetup_r+0x104>
  804d6c:	80c00417 	ldw	r3,16(r16)
  804d70:	20800214 	ori	r2,r4,8
  804d74:	8080030d 	sth	r2,12(r16)
  804d78:	183feb1e 	bne	r3,zero,804d28 <__alt_mem_onchip_mem+0xff784d28>
  804d7c:	1100a00c 	andi	r4,r2,640
  804d80:	01408004 	movi	r5,512
  804d84:	217fe826 	beq	r4,r5,804d28 <__alt_mem_onchip_mem+0xff784d28>
  804d88:	800b883a 	mov	r5,r16
  804d8c:	8809883a 	mov	r4,r17
  804d90:	080739c0 	call	80739c <__smakebuf_r>
  804d94:	8080030b 	ldhu	r2,12(r16)
  804d98:	80c00417 	ldw	r3,16(r16)
  804d9c:	003fe206 	br	804d28 <__alt_mem_onchip_mem+0xff784d28>
  804da0:	80800517 	ldw	r2,20(r16)
  804da4:	80000215 	stw	zero,8(r16)
  804da8:	0085c83a 	sub	r2,zero,r2
  804dac:	80800615 	stw	r2,24(r16)
  804db0:	183fe41e 	bne	r3,zero,804d44 <__alt_mem_onchip_mem+0xff784d44>
  804db4:	80c0030b 	ldhu	r3,12(r16)
  804db8:	0005883a 	mov	r2,zero
  804dbc:	1900200c 	andi	r4,r3,128
  804dc0:	203fe126 	beq	r4,zero,804d48 <__alt_mem_onchip_mem+0xff784d48>
  804dc4:	18c01014 	ori	r3,r3,64
  804dc8:	80c0030d 	sth	r3,12(r16)
  804dcc:	00bfffc4 	movi	r2,-1
  804dd0:	003fdd06 	br	804d48 <__alt_mem_onchip_mem+0xff784d48>
  804dd4:	0806cb40 	call	806cb4 <__sinit>
  804dd8:	003fcd06 	br	804d10 <__alt_mem_onchip_mem+0xff784d10>
  804ddc:	0005883a 	mov	r2,zero
  804de0:	003fd606 	br	804d3c <__alt_mem_onchip_mem+0xff784d3c>
  804de4:	81400c17 	ldw	r5,48(r16)
  804de8:	28000626 	beq	r5,zero,804e04 <__swsetup_r+0x124>
  804dec:	80801004 	addi	r2,r16,64
  804df0:	28800326 	beq	r5,r2,804e00 <__swsetup_r+0x120>
  804df4:	8809883a 	mov	r4,r17
  804df8:	0806e280 	call	806e28 <_free_r>
  804dfc:	8100030b 	ldhu	r4,12(r16)
  804e00:	80000c15 	stw	zero,48(r16)
  804e04:	80c00417 	ldw	r3,16(r16)
  804e08:	00bff6c4 	movi	r2,-37
  804e0c:	1108703a 	and	r4,r2,r4
  804e10:	80000115 	stw	zero,4(r16)
  804e14:	80c00015 	stw	r3,0(r16)
  804e18:	003fd506 	br	804d70 <__alt_mem_onchip_mem+0xff784d70>
  804e1c:	00800244 	movi	r2,9
  804e20:	88800015 	stw	r2,0(r17)
  804e24:	20801014 	ori	r2,r4,64
  804e28:	8080030d 	sth	r2,12(r16)
  804e2c:	00bfffc4 	movi	r2,-1
  804e30:	003fc506 	br	804d48 <__alt_mem_onchip_mem+0xff784d48>

00804e34 <quorem>:
  804e34:	defff704 	addi	sp,sp,-36
  804e38:	dc800215 	stw	r18,8(sp)
  804e3c:	20800417 	ldw	r2,16(r4)
  804e40:	2c800417 	ldw	r18,16(r5)
  804e44:	dfc00815 	stw	ra,32(sp)
  804e48:	ddc00715 	stw	r23,28(sp)
  804e4c:	dd800615 	stw	r22,24(sp)
  804e50:	dd400515 	stw	r21,20(sp)
  804e54:	dd000415 	stw	r20,16(sp)
  804e58:	dcc00315 	stw	r19,12(sp)
  804e5c:	dc400115 	stw	r17,4(sp)
  804e60:	dc000015 	stw	r16,0(sp)
  804e64:	14807116 	blt	r2,r18,80502c <quorem+0x1f8>
  804e68:	94bfffc4 	addi	r18,r18,-1
  804e6c:	94ad883a 	add	r22,r18,r18
  804e70:	b5ad883a 	add	r22,r22,r22
  804e74:	2c400504 	addi	r17,r5,20
  804e78:	8da9883a 	add	r20,r17,r22
  804e7c:	25400504 	addi	r21,r4,20
  804e80:	282f883a 	mov	r23,r5
  804e84:	adad883a 	add	r22,r21,r22
  804e88:	a1400017 	ldw	r5,0(r20)
  804e8c:	2021883a 	mov	r16,r4
  804e90:	b1000017 	ldw	r4,0(r22)
  804e94:	29400044 	addi	r5,r5,1
  804e98:	080cacc0 	call	80cacc <__udivsi3>
  804e9c:	1027883a 	mov	r19,r2
  804ea0:	10002c26 	beq	r2,zero,804f54 <quorem+0x120>
  804ea4:	a813883a 	mov	r9,r21
  804ea8:	880b883a 	mov	r5,r17
  804eac:	0009883a 	mov	r4,zero
  804eb0:	000d883a 	mov	r6,zero
  804eb4:	2a000017 	ldw	r8,0(r5)
  804eb8:	49c00017 	ldw	r7,0(r9)
  804ebc:	29400104 	addi	r5,r5,4
  804ec0:	40bfffcc 	andi	r2,r8,65535
  804ec4:	14c5383a 	mul	r2,r2,r19
  804ec8:	4010d43a 	srli	r8,r8,16
  804ecc:	38ffffcc 	andi	r3,r7,65535
  804ed0:	1105883a 	add	r2,r2,r4
  804ed4:	1008d43a 	srli	r4,r2,16
  804ed8:	44d1383a 	mul	r8,r8,r19
  804edc:	198d883a 	add	r6,r3,r6
  804ee0:	10ffffcc 	andi	r3,r2,65535
  804ee4:	30c7c83a 	sub	r3,r6,r3
  804ee8:	380ed43a 	srli	r7,r7,16
  804eec:	4105883a 	add	r2,r8,r4
  804ef0:	180dd43a 	srai	r6,r3,16
  804ef4:	113fffcc 	andi	r4,r2,65535
  804ef8:	390fc83a 	sub	r7,r7,r4
  804efc:	398d883a 	add	r6,r7,r6
  804f00:	300e943a 	slli	r7,r6,16
  804f04:	18ffffcc 	andi	r3,r3,65535
  804f08:	1008d43a 	srli	r4,r2,16
  804f0c:	38ceb03a 	or	r7,r7,r3
  804f10:	49c00015 	stw	r7,0(r9)
  804f14:	300dd43a 	srai	r6,r6,16
  804f18:	4a400104 	addi	r9,r9,4
  804f1c:	a17fe52e 	bgeu	r20,r5,804eb4 <__alt_mem_onchip_mem+0xff784eb4>
  804f20:	b0800017 	ldw	r2,0(r22)
  804f24:	10000b1e 	bne	r2,zero,804f54 <quorem+0x120>
  804f28:	b0bfff04 	addi	r2,r22,-4
  804f2c:	a880082e 	bgeu	r21,r2,804f50 <quorem+0x11c>
  804f30:	b0ffff17 	ldw	r3,-4(r22)
  804f34:	18000326 	beq	r3,zero,804f44 <quorem+0x110>
  804f38:	00000506 	br	804f50 <quorem+0x11c>
  804f3c:	10c00017 	ldw	r3,0(r2)
  804f40:	1800031e 	bne	r3,zero,804f50 <quorem+0x11c>
  804f44:	10bfff04 	addi	r2,r2,-4
  804f48:	94bfffc4 	addi	r18,r18,-1
  804f4c:	a8bffb36 	bltu	r21,r2,804f3c <__alt_mem_onchip_mem+0xff784f3c>
  804f50:	84800415 	stw	r18,16(r16)
  804f54:	b80b883a 	mov	r5,r23
  804f58:	8009883a 	mov	r4,r16
  804f5c:	08089800 	call	808980 <__mcmp>
  804f60:	10002616 	blt	r2,zero,804ffc <quorem+0x1c8>
  804f64:	9cc00044 	addi	r19,r19,1
  804f68:	a805883a 	mov	r2,r21
  804f6c:	000b883a 	mov	r5,zero
  804f70:	11000017 	ldw	r4,0(r2)
  804f74:	89800017 	ldw	r6,0(r17)
  804f78:	10800104 	addi	r2,r2,4
  804f7c:	20ffffcc 	andi	r3,r4,65535
  804f80:	194b883a 	add	r5,r3,r5
  804f84:	30ffffcc 	andi	r3,r6,65535
  804f88:	28c7c83a 	sub	r3,r5,r3
  804f8c:	300cd43a 	srli	r6,r6,16
  804f90:	2008d43a 	srli	r4,r4,16
  804f94:	180bd43a 	srai	r5,r3,16
  804f98:	18ffffcc 	andi	r3,r3,65535
  804f9c:	2189c83a 	sub	r4,r4,r6
  804fa0:	2149883a 	add	r4,r4,r5
  804fa4:	200c943a 	slli	r6,r4,16
  804fa8:	8c400104 	addi	r17,r17,4
  804fac:	200bd43a 	srai	r5,r4,16
  804fb0:	30c6b03a 	or	r3,r6,r3
  804fb4:	10ffff15 	stw	r3,-4(r2)
  804fb8:	a47fed2e 	bgeu	r20,r17,804f70 <__alt_mem_onchip_mem+0xff784f70>
  804fbc:	9485883a 	add	r2,r18,r18
  804fc0:	1085883a 	add	r2,r2,r2
  804fc4:	a887883a 	add	r3,r21,r2
  804fc8:	18800017 	ldw	r2,0(r3)
  804fcc:	10000b1e 	bne	r2,zero,804ffc <quorem+0x1c8>
  804fd0:	18bfff04 	addi	r2,r3,-4
  804fd4:	a880082e 	bgeu	r21,r2,804ff8 <quorem+0x1c4>
  804fd8:	18ffff17 	ldw	r3,-4(r3)
  804fdc:	18000326 	beq	r3,zero,804fec <quorem+0x1b8>
  804fe0:	00000506 	br	804ff8 <quorem+0x1c4>
  804fe4:	10c00017 	ldw	r3,0(r2)
  804fe8:	1800031e 	bne	r3,zero,804ff8 <quorem+0x1c4>
  804fec:	10bfff04 	addi	r2,r2,-4
  804ff0:	94bfffc4 	addi	r18,r18,-1
  804ff4:	a8bffb36 	bltu	r21,r2,804fe4 <__alt_mem_onchip_mem+0xff784fe4>
  804ff8:	84800415 	stw	r18,16(r16)
  804ffc:	9805883a 	mov	r2,r19
  805000:	dfc00817 	ldw	ra,32(sp)
  805004:	ddc00717 	ldw	r23,28(sp)
  805008:	dd800617 	ldw	r22,24(sp)
  80500c:	dd400517 	ldw	r21,20(sp)
  805010:	dd000417 	ldw	r20,16(sp)
  805014:	dcc00317 	ldw	r19,12(sp)
  805018:	dc800217 	ldw	r18,8(sp)
  80501c:	dc400117 	ldw	r17,4(sp)
  805020:	dc000017 	ldw	r16,0(sp)
  805024:	dec00904 	addi	sp,sp,36
  805028:	f800283a 	ret
  80502c:	0005883a 	mov	r2,zero
  805030:	003ff306 	br	805000 <__alt_mem_onchip_mem+0xff785000>

00805034 <_dtoa_r>:
  805034:	20801017 	ldw	r2,64(r4)
  805038:	deffde04 	addi	sp,sp,-136
  80503c:	df002015 	stw	fp,128(sp)
  805040:	dcc01b15 	stw	r19,108(sp)
  805044:	dc801a15 	stw	r18,104(sp)
  805048:	dc401915 	stw	r17,100(sp)
  80504c:	dc001815 	stw	r16,96(sp)
  805050:	dfc02115 	stw	ra,132(sp)
  805054:	ddc01f15 	stw	r23,124(sp)
  805058:	dd801e15 	stw	r22,120(sp)
  80505c:	dd401d15 	stw	r21,116(sp)
  805060:	dd001c15 	stw	r20,112(sp)
  805064:	d9c00315 	stw	r7,12(sp)
  805068:	2039883a 	mov	fp,r4
  80506c:	3023883a 	mov	r17,r6
  805070:	2825883a 	mov	r18,r5
  805074:	dc002417 	ldw	r16,144(sp)
  805078:	3027883a 	mov	r19,r6
  80507c:	10000826 	beq	r2,zero,8050a0 <_dtoa_r+0x6c>
  805080:	21801117 	ldw	r6,68(r4)
  805084:	00c00044 	movi	r3,1
  805088:	100b883a 	mov	r5,r2
  80508c:	1986983a 	sll	r3,r3,r6
  805090:	11800115 	stw	r6,4(r2)
  805094:	10c00215 	stw	r3,8(r2)
  805098:	08081600 	call	808160 <_Bfree>
  80509c:	e0001015 	stw	zero,64(fp)
  8050a0:	88002e16 	blt	r17,zero,80515c <_dtoa_r+0x128>
  8050a4:	80000015 	stw	zero,0(r16)
  8050a8:	889ffc2c 	andhi	r2,r17,32752
  8050ac:	00dffc34 	movhi	r3,32752
  8050b0:	10c01c26 	beq	r2,r3,805124 <_dtoa_r+0xf0>
  8050b4:	000d883a 	mov	r6,zero
  8050b8:	000f883a 	mov	r7,zero
  8050bc:	9009883a 	mov	r4,r18
  8050c0:	980b883a 	mov	r5,r19
  8050c4:	080dd1c0 	call	80dd1c <__eqdf2>
  8050c8:	10002b1e 	bne	r2,zero,805178 <_dtoa_r+0x144>
  8050cc:	d9c02317 	ldw	r7,140(sp)
  8050d0:	00800044 	movi	r2,1
  8050d4:	38800015 	stw	r2,0(r7)
  8050d8:	d8802517 	ldw	r2,148(sp)
  8050dc:	10019e26 	beq	r2,zero,805758 <_dtoa_r+0x724>
  8050e0:	d8c02517 	ldw	r3,148(sp)
  8050e4:	00802074 	movhi	r2,129
  8050e8:	108cf144 	addi	r2,r2,13253
  8050ec:	18800015 	stw	r2,0(r3)
  8050f0:	10bfffc4 	addi	r2,r2,-1
  8050f4:	dfc02117 	ldw	ra,132(sp)
  8050f8:	df002017 	ldw	fp,128(sp)
  8050fc:	ddc01f17 	ldw	r23,124(sp)
  805100:	dd801e17 	ldw	r22,120(sp)
  805104:	dd401d17 	ldw	r21,116(sp)
  805108:	dd001c17 	ldw	r20,112(sp)
  80510c:	dcc01b17 	ldw	r19,108(sp)
  805110:	dc801a17 	ldw	r18,104(sp)
  805114:	dc401917 	ldw	r17,100(sp)
  805118:	dc001817 	ldw	r16,96(sp)
  80511c:	dec02204 	addi	sp,sp,136
  805120:	f800283a 	ret
  805124:	d8c02317 	ldw	r3,140(sp)
  805128:	0089c3c4 	movi	r2,9999
  80512c:	18800015 	stw	r2,0(r3)
  805130:	90017726 	beq	r18,zero,805710 <_dtoa_r+0x6dc>
  805134:	00802074 	movhi	r2,129
  805138:	108cfd04 	addi	r2,r2,13300
  80513c:	d9002517 	ldw	r4,148(sp)
  805140:	203fec26 	beq	r4,zero,8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  805144:	10c000c7 	ldb	r3,3(r2)
  805148:	1801781e 	bne	r3,zero,80572c <_dtoa_r+0x6f8>
  80514c:	10c000c4 	addi	r3,r2,3
  805150:	d9802517 	ldw	r6,148(sp)
  805154:	30c00015 	stw	r3,0(r6)
  805158:	003fe606 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  80515c:	04e00034 	movhi	r19,32768
  805160:	9cffffc4 	addi	r19,r19,-1
  805164:	00800044 	movi	r2,1
  805168:	8ce6703a 	and	r19,r17,r19
  80516c:	80800015 	stw	r2,0(r16)
  805170:	9823883a 	mov	r17,r19
  805174:	003fcc06 	br	8050a8 <__alt_mem_onchip_mem+0xff7850a8>
  805178:	d8800204 	addi	r2,sp,8
  80517c:	d8800015 	stw	r2,0(sp)
  805180:	d9c00104 	addi	r7,sp,4
  805184:	900b883a 	mov	r5,r18
  805188:	980d883a 	mov	r6,r19
  80518c:	e009883a 	mov	r4,fp
  805190:	8820d53a 	srli	r16,r17,20
  805194:	0808d4c0 	call	808d4c <__d2b>
  805198:	d8800915 	stw	r2,36(sp)
  80519c:	8001651e 	bne	r16,zero,805734 <_dtoa_r+0x700>
  8051a0:	dd800217 	ldw	r22,8(sp)
  8051a4:	dc000117 	ldw	r16,4(sp)
  8051a8:	00800804 	movi	r2,32
  8051ac:	b421883a 	add	r16,r22,r16
  8051b0:	80c10c84 	addi	r3,r16,1074
  8051b4:	10c2d10e 	bge	r2,r3,805cfc <_dtoa_r+0xcc8>
  8051b8:	00801004 	movi	r2,64
  8051bc:	81010484 	addi	r4,r16,1042
  8051c0:	10c7c83a 	sub	r3,r2,r3
  8051c4:	9108d83a 	srl	r4,r18,r4
  8051c8:	88e2983a 	sll	r17,r17,r3
  8051cc:	2448b03a 	or	r4,r4,r17
  8051d0:	080f0e40 	call	80f0e4 <__floatunsidf>
  8051d4:	017f8434 	movhi	r5,65040
  8051d8:	01800044 	movi	r6,1
  8051dc:	1009883a 	mov	r4,r2
  8051e0:	194b883a 	add	r5,r3,r5
  8051e4:	843fffc4 	addi	r16,r16,-1
  8051e8:	d9801115 	stw	r6,68(sp)
  8051ec:	000d883a 	mov	r6,zero
  8051f0:	01cffe34 	movhi	r7,16376
  8051f4:	080e68c0 	call	80e68c <__subdf3>
  8051f8:	0198dbf4 	movhi	r6,25455
  8051fc:	01cff4f4 	movhi	r7,16339
  805200:	3190d844 	addi	r6,r6,17249
  805204:	39e1e9c4 	addi	r7,r7,-30809
  805208:	1009883a 	mov	r4,r2
  80520c:	180b883a 	mov	r5,r3
  805210:	080df740 	call	80df74 <__muldf3>
  805214:	01a2d874 	movhi	r6,35681
  805218:	01cff1f4 	movhi	r7,16327
  80521c:	31b22cc4 	addi	r6,r6,-14157
  805220:	39e28a04 	addi	r7,r7,-30168
  805224:	180b883a 	mov	r5,r3
  805228:	1009883a 	mov	r4,r2
  80522c:	080cb880 	call	80cb88 <__adddf3>
  805230:	8009883a 	mov	r4,r16
  805234:	1029883a 	mov	r20,r2
  805238:	1823883a 	mov	r17,r3
  80523c:	080f0080 	call	80f008 <__floatsidf>
  805240:	019427f4 	movhi	r6,20639
  805244:	01cff4f4 	movhi	r7,16339
  805248:	319e7ec4 	addi	r6,r6,31227
  80524c:	39d104c4 	addi	r7,r7,17427
  805250:	1009883a 	mov	r4,r2
  805254:	180b883a 	mov	r5,r3
  805258:	080df740 	call	80df74 <__muldf3>
  80525c:	100d883a 	mov	r6,r2
  805260:	180f883a 	mov	r7,r3
  805264:	a009883a 	mov	r4,r20
  805268:	880b883a 	mov	r5,r17
  80526c:	080cb880 	call	80cb88 <__adddf3>
  805270:	1009883a 	mov	r4,r2
  805274:	180b883a 	mov	r5,r3
  805278:	1029883a 	mov	r20,r2
  80527c:	1823883a 	mov	r17,r3
  805280:	080ef880 	call	80ef88 <__fixdfsi>
  805284:	000d883a 	mov	r6,zero
  805288:	000f883a 	mov	r7,zero
  80528c:	a009883a 	mov	r4,r20
  805290:	880b883a 	mov	r5,r17
  805294:	d8800515 	stw	r2,20(sp)
  805298:	080de800 	call	80de80 <__ledf2>
  80529c:	10028716 	blt	r2,zero,805cbc <_dtoa_r+0xc88>
  8052a0:	d8c00517 	ldw	r3,20(sp)
  8052a4:	00800584 	movi	r2,22
  8052a8:	10c27536 	bltu	r2,r3,805c80 <_dtoa_r+0xc4c>
  8052ac:	180490fa 	slli	r2,r3,3
  8052b0:	00c02074 	movhi	r3,129
  8052b4:	18cd1904 	addi	r3,r3,13412
  8052b8:	1885883a 	add	r2,r3,r2
  8052bc:	11000017 	ldw	r4,0(r2)
  8052c0:	11400117 	ldw	r5,4(r2)
  8052c4:	900d883a 	mov	r6,r18
  8052c8:	980f883a 	mov	r7,r19
  8052cc:	080dda40 	call	80dda4 <__gedf2>
  8052d0:	00828d0e 	bge	zero,r2,805d08 <_dtoa_r+0xcd4>
  8052d4:	d9000517 	ldw	r4,20(sp)
  8052d8:	d8000e15 	stw	zero,56(sp)
  8052dc:	213fffc4 	addi	r4,r4,-1
  8052e0:	d9000515 	stw	r4,20(sp)
  8052e4:	b42dc83a 	sub	r22,r22,r16
  8052e8:	b5bfffc4 	addi	r22,r22,-1
  8052ec:	b0026f16 	blt	r22,zero,805cac <_dtoa_r+0xc78>
  8052f0:	d8000815 	stw	zero,32(sp)
  8052f4:	d9c00517 	ldw	r7,20(sp)
  8052f8:	38026416 	blt	r7,zero,805c8c <_dtoa_r+0xc58>
  8052fc:	b1ed883a 	add	r22,r22,r7
  805300:	d9c00d15 	stw	r7,52(sp)
  805304:	d8000a15 	stw	zero,40(sp)
  805308:	d9800317 	ldw	r6,12(sp)
  80530c:	00800244 	movi	r2,9
  805310:	11811436 	bltu	r2,r6,805764 <_dtoa_r+0x730>
  805314:	00800144 	movi	r2,5
  805318:	1184e10e 	bge	r2,r6,8066a0 <_dtoa_r+0x166c>
  80531c:	31bfff04 	addi	r6,r6,-4
  805320:	d9800315 	stw	r6,12(sp)
  805324:	0023883a 	mov	r17,zero
  805328:	d9800317 	ldw	r6,12(sp)
  80532c:	008000c4 	movi	r2,3
  805330:	30836726 	beq	r6,r2,8060d0 <_dtoa_r+0x109c>
  805334:	1183410e 	bge	r2,r6,80603c <_dtoa_r+0x1008>
  805338:	d9c00317 	ldw	r7,12(sp)
  80533c:	00800104 	movi	r2,4
  805340:	38827c26 	beq	r7,r2,805d34 <_dtoa_r+0xd00>
  805344:	00800144 	movi	r2,5
  805348:	3884c41e 	bne	r7,r2,80665c <_dtoa_r+0x1628>
  80534c:	00800044 	movi	r2,1
  805350:	d8800b15 	stw	r2,44(sp)
  805354:	d8c00517 	ldw	r3,20(sp)
  805358:	d9002217 	ldw	r4,136(sp)
  80535c:	1907883a 	add	r3,r3,r4
  805360:	19800044 	addi	r6,r3,1
  805364:	d8c00c15 	stw	r3,48(sp)
  805368:	d9800615 	stw	r6,24(sp)
  80536c:	0183a40e 	bge	zero,r6,806200 <_dtoa_r+0x11cc>
  805370:	d9800617 	ldw	r6,24(sp)
  805374:	3021883a 	mov	r16,r6
  805378:	e0001115 	stw	zero,68(fp)
  80537c:	008005c4 	movi	r2,23
  805380:	1184c92e 	bgeu	r2,r6,8066a8 <_dtoa_r+0x1674>
  805384:	00c00044 	movi	r3,1
  805388:	00800104 	movi	r2,4
  80538c:	1085883a 	add	r2,r2,r2
  805390:	11000504 	addi	r4,r2,20
  805394:	180b883a 	mov	r5,r3
  805398:	18c00044 	addi	r3,r3,1
  80539c:	313ffb2e 	bgeu	r6,r4,80538c <__alt_mem_onchip_mem+0xff78538c>
  8053a0:	e1401115 	stw	r5,68(fp)
  8053a4:	e009883a 	mov	r4,fp
  8053a8:	08080b80 	call	8080b8 <_Balloc>
  8053ac:	d8800715 	stw	r2,28(sp)
  8053b0:	e0801015 	stw	r2,64(fp)
  8053b4:	00800384 	movi	r2,14
  8053b8:	1400f736 	bltu	r2,r16,805798 <_dtoa_r+0x764>
  8053bc:	8800f626 	beq	r17,zero,805798 <_dtoa_r+0x764>
  8053c0:	d9c00517 	ldw	r7,20(sp)
  8053c4:	01c39a0e 	bge	zero,r7,806230 <_dtoa_r+0x11fc>
  8053c8:	388003cc 	andi	r2,r7,15
  8053cc:	100490fa 	slli	r2,r2,3
  8053d0:	382bd13a 	srai	r21,r7,4
  8053d4:	00c02074 	movhi	r3,129
  8053d8:	18cd1904 	addi	r3,r3,13412
  8053dc:	1885883a 	add	r2,r3,r2
  8053e0:	a8c0040c 	andi	r3,r21,16
  8053e4:	12400017 	ldw	r9,0(r2)
  8053e8:	12000117 	ldw	r8,4(r2)
  8053ec:	18037926 	beq	r3,zero,8061d4 <_dtoa_r+0x11a0>
  8053f0:	00802074 	movhi	r2,129
  8053f4:	108d0f04 	addi	r2,r2,13372
  8053f8:	11800817 	ldw	r6,32(r2)
  8053fc:	11c00917 	ldw	r7,36(r2)
  805400:	9009883a 	mov	r4,r18
  805404:	980b883a 	mov	r5,r19
  805408:	da001715 	stw	r8,92(sp)
  80540c:	da401615 	stw	r9,88(sp)
  805410:	080d4340 	call	80d434 <__divdf3>
  805414:	da001717 	ldw	r8,92(sp)
  805418:	da401617 	ldw	r9,88(sp)
  80541c:	ad4003cc 	andi	r21,r21,15
  805420:	040000c4 	movi	r16,3
  805424:	1023883a 	mov	r17,r2
  805428:	1829883a 	mov	r20,r3
  80542c:	a8001126 	beq	r21,zero,805474 <_dtoa_r+0x440>
  805430:	05c02074 	movhi	r23,129
  805434:	bdcd0f04 	addi	r23,r23,13372
  805438:	4805883a 	mov	r2,r9
  80543c:	4007883a 	mov	r3,r8
  805440:	a980004c 	andi	r6,r21,1
  805444:	1009883a 	mov	r4,r2
  805448:	a82bd07a 	srai	r21,r21,1
  80544c:	180b883a 	mov	r5,r3
  805450:	30000426 	beq	r6,zero,805464 <_dtoa_r+0x430>
  805454:	b9800017 	ldw	r6,0(r23)
  805458:	b9c00117 	ldw	r7,4(r23)
  80545c:	84000044 	addi	r16,r16,1
  805460:	080df740 	call	80df74 <__muldf3>
  805464:	bdc00204 	addi	r23,r23,8
  805468:	a83ff51e 	bne	r21,zero,805440 <__alt_mem_onchip_mem+0xff785440>
  80546c:	1013883a 	mov	r9,r2
  805470:	1811883a 	mov	r8,r3
  805474:	480d883a 	mov	r6,r9
  805478:	400f883a 	mov	r7,r8
  80547c:	8809883a 	mov	r4,r17
  805480:	a00b883a 	mov	r5,r20
  805484:	080d4340 	call	80d434 <__divdf3>
  805488:	d8800f15 	stw	r2,60(sp)
  80548c:	d8c01015 	stw	r3,64(sp)
  805490:	d8c00e17 	ldw	r3,56(sp)
  805494:	18000626 	beq	r3,zero,8054b0 <_dtoa_r+0x47c>
  805498:	d9000f17 	ldw	r4,60(sp)
  80549c:	d9401017 	ldw	r5,64(sp)
  8054a0:	000d883a 	mov	r6,zero
  8054a4:	01cffc34 	movhi	r7,16368
  8054a8:	080de800 	call	80de80 <__ledf2>
  8054ac:	10040b16 	blt	r2,zero,8064dc <_dtoa_r+0x14a8>
  8054b0:	8009883a 	mov	r4,r16
  8054b4:	080f0080 	call	80f008 <__floatsidf>
  8054b8:	d9800f17 	ldw	r6,60(sp)
  8054bc:	d9c01017 	ldw	r7,64(sp)
  8054c0:	1009883a 	mov	r4,r2
  8054c4:	180b883a 	mov	r5,r3
  8054c8:	080df740 	call	80df74 <__muldf3>
  8054cc:	000d883a 	mov	r6,zero
  8054d0:	01d00734 	movhi	r7,16412
  8054d4:	1009883a 	mov	r4,r2
  8054d8:	180b883a 	mov	r5,r3
  8054dc:	080cb880 	call	80cb88 <__adddf3>
  8054e0:	1021883a 	mov	r16,r2
  8054e4:	d8800617 	ldw	r2,24(sp)
  8054e8:	047f3034 	movhi	r17,64704
  8054ec:	1c63883a 	add	r17,r3,r17
  8054f0:	10031826 	beq	r2,zero,806154 <_dtoa_r+0x1120>
  8054f4:	d8c00517 	ldw	r3,20(sp)
  8054f8:	db000617 	ldw	r12,24(sp)
  8054fc:	d8c01315 	stw	r3,76(sp)
  805500:	d9000b17 	ldw	r4,44(sp)
  805504:	20038f26 	beq	r4,zero,806344 <_dtoa_r+0x1310>
  805508:	60bfffc4 	addi	r2,r12,-1
  80550c:	100490fa 	slli	r2,r2,3
  805510:	00c02074 	movhi	r3,129
  805514:	18cd1904 	addi	r3,r3,13412
  805518:	1885883a 	add	r2,r3,r2
  80551c:	11800017 	ldw	r6,0(r2)
  805520:	11c00117 	ldw	r7,4(r2)
  805524:	d8800717 	ldw	r2,28(sp)
  805528:	0009883a 	mov	r4,zero
  80552c:	014ff834 	movhi	r5,16352
  805530:	db001615 	stw	r12,88(sp)
  805534:	15c00044 	addi	r23,r2,1
  805538:	080d4340 	call	80d434 <__divdf3>
  80553c:	800d883a 	mov	r6,r16
  805540:	880f883a 	mov	r7,r17
  805544:	1009883a 	mov	r4,r2
  805548:	180b883a 	mov	r5,r3
  80554c:	080e68c0 	call	80e68c <__subdf3>
  805550:	d9401017 	ldw	r5,64(sp)
  805554:	d9000f17 	ldw	r4,60(sp)
  805558:	102b883a 	mov	r21,r2
  80555c:	d8c01215 	stw	r3,72(sp)
  805560:	080ef880 	call	80ef88 <__fixdfsi>
  805564:	1009883a 	mov	r4,r2
  805568:	1029883a 	mov	r20,r2
  80556c:	080f0080 	call	80f008 <__floatsidf>
  805570:	d9000f17 	ldw	r4,60(sp)
  805574:	d9401017 	ldw	r5,64(sp)
  805578:	100d883a 	mov	r6,r2
  80557c:	180f883a 	mov	r7,r3
  805580:	080e68c0 	call	80e68c <__subdf3>
  805584:	1823883a 	mov	r17,r3
  805588:	d8c00717 	ldw	r3,28(sp)
  80558c:	d9401217 	ldw	r5,72(sp)
  805590:	a2000c04 	addi	r8,r20,48
  805594:	1021883a 	mov	r16,r2
  805598:	1a000005 	stb	r8,0(r3)
  80559c:	800d883a 	mov	r6,r16
  8055a0:	880f883a 	mov	r7,r17
  8055a4:	a809883a 	mov	r4,r21
  8055a8:	4029883a 	mov	r20,r8
  8055ac:	080dda40 	call	80dda4 <__gedf2>
  8055b0:	00841d16 	blt	zero,r2,806628 <_dtoa_r+0x15f4>
  8055b4:	800d883a 	mov	r6,r16
  8055b8:	880f883a 	mov	r7,r17
  8055bc:	0009883a 	mov	r4,zero
  8055c0:	014ffc34 	movhi	r5,16368
  8055c4:	080e68c0 	call	80e68c <__subdf3>
  8055c8:	d9401217 	ldw	r5,72(sp)
  8055cc:	100d883a 	mov	r6,r2
  8055d0:	180f883a 	mov	r7,r3
  8055d4:	a809883a 	mov	r4,r21
  8055d8:	080dda40 	call	80dda4 <__gedf2>
  8055dc:	db001617 	ldw	r12,88(sp)
  8055e0:	00840e16 	blt	zero,r2,80661c <_dtoa_r+0x15e8>
  8055e4:	00800044 	movi	r2,1
  8055e8:	13006b0e 	bge	r2,r12,805798 <_dtoa_r+0x764>
  8055ec:	d9000717 	ldw	r4,28(sp)
  8055f0:	dd800f15 	stw	r22,60(sp)
  8055f4:	dcc01015 	stw	r19,64(sp)
  8055f8:	2319883a 	add	r12,r4,r12
  8055fc:	dcc01217 	ldw	r19,72(sp)
  805600:	602d883a 	mov	r22,r12
  805604:	dc801215 	stw	r18,72(sp)
  805608:	b825883a 	mov	r18,r23
  80560c:	00000906 	br	805634 <_dtoa_r+0x600>
  805610:	080e68c0 	call	80e68c <__subdf3>
  805614:	a80d883a 	mov	r6,r21
  805618:	980f883a 	mov	r7,r19
  80561c:	1009883a 	mov	r4,r2
  805620:	180b883a 	mov	r5,r3
  805624:	080de800 	call	80de80 <__ledf2>
  805628:	1003e816 	blt	r2,zero,8065cc <_dtoa_r+0x1598>
  80562c:	b825883a 	mov	r18,r23
  805630:	bd83e926 	beq	r23,r22,8065d8 <_dtoa_r+0x15a4>
  805634:	a809883a 	mov	r4,r21
  805638:	980b883a 	mov	r5,r19
  80563c:	000d883a 	mov	r6,zero
  805640:	01d00934 	movhi	r7,16420
  805644:	080df740 	call	80df74 <__muldf3>
  805648:	000d883a 	mov	r6,zero
  80564c:	01d00934 	movhi	r7,16420
  805650:	8009883a 	mov	r4,r16
  805654:	880b883a 	mov	r5,r17
  805658:	102b883a 	mov	r21,r2
  80565c:	1827883a 	mov	r19,r3
  805660:	080df740 	call	80df74 <__muldf3>
  805664:	180b883a 	mov	r5,r3
  805668:	1009883a 	mov	r4,r2
  80566c:	1821883a 	mov	r16,r3
  805670:	1023883a 	mov	r17,r2
  805674:	080ef880 	call	80ef88 <__fixdfsi>
  805678:	1009883a 	mov	r4,r2
  80567c:	1029883a 	mov	r20,r2
  805680:	080f0080 	call	80f008 <__floatsidf>
  805684:	8809883a 	mov	r4,r17
  805688:	800b883a 	mov	r5,r16
  80568c:	100d883a 	mov	r6,r2
  805690:	180f883a 	mov	r7,r3
  805694:	080e68c0 	call	80e68c <__subdf3>
  805698:	a5000c04 	addi	r20,r20,48
  80569c:	a80d883a 	mov	r6,r21
  8056a0:	980f883a 	mov	r7,r19
  8056a4:	1009883a 	mov	r4,r2
  8056a8:	180b883a 	mov	r5,r3
  8056ac:	95000005 	stb	r20,0(r18)
  8056b0:	1021883a 	mov	r16,r2
  8056b4:	1823883a 	mov	r17,r3
  8056b8:	080de800 	call	80de80 <__ledf2>
  8056bc:	bdc00044 	addi	r23,r23,1
  8056c0:	800d883a 	mov	r6,r16
  8056c4:	880f883a 	mov	r7,r17
  8056c8:	0009883a 	mov	r4,zero
  8056cc:	014ffc34 	movhi	r5,16368
  8056d0:	103fcf0e 	bge	r2,zero,805610 <__alt_mem_onchip_mem+0xff785610>
  8056d4:	d8c01317 	ldw	r3,76(sp)
  8056d8:	d8c00515 	stw	r3,20(sp)
  8056dc:	d9400917 	ldw	r5,36(sp)
  8056e0:	e009883a 	mov	r4,fp
  8056e4:	08081600 	call	808160 <_Bfree>
  8056e8:	d9000517 	ldw	r4,20(sp)
  8056ec:	d9802317 	ldw	r6,140(sp)
  8056f0:	d9c02517 	ldw	r7,148(sp)
  8056f4:	b8000005 	stb	zero,0(r23)
  8056f8:	20800044 	addi	r2,r4,1
  8056fc:	30800015 	stw	r2,0(r6)
  805700:	3802aa26 	beq	r7,zero,8061ac <_dtoa_r+0x1178>
  805704:	3dc00015 	stw	r23,0(r7)
  805708:	d8800717 	ldw	r2,28(sp)
  80570c:	003e7906 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  805710:	00800434 	movhi	r2,16
  805714:	10bfffc4 	addi	r2,r2,-1
  805718:	88a2703a 	and	r17,r17,r2
  80571c:	883e851e 	bne	r17,zero,805134 <__alt_mem_onchip_mem+0xff785134>
  805720:	00802074 	movhi	r2,129
  805724:	108cfa04 	addi	r2,r2,13288
  805728:	003e8406 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  80572c:	10c00204 	addi	r3,r2,8
  805730:	003e8706 	br	805150 <__alt_mem_onchip_mem+0xff785150>
  805734:	01400434 	movhi	r5,16
  805738:	297fffc4 	addi	r5,r5,-1
  80573c:	994a703a 	and	r5,r19,r5
  805740:	9009883a 	mov	r4,r18
  805744:	843f0044 	addi	r16,r16,-1023
  805748:	294ffc34 	orhi	r5,r5,16368
  80574c:	dd800217 	ldw	r22,8(sp)
  805750:	d8001115 	stw	zero,68(sp)
  805754:	003ea506 	br	8051ec <__alt_mem_onchip_mem+0xff7851ec>
  805758:	00802074 	movhi	r2,129
  80575c:	108cf104 	addi	r2,r2,13252
  805760:	003e6406 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  805764:	e0001115 	stw	zero,68(fp)
  805768:	000b883a 	mov	r5,zero
  80576c:	e009883a 	mov	r4,fp
  805770:	08080b80 	call	8080b8 <_Balloc>
  805774:	01bfffc4 	movi	r6,-1
  805778:	01c00044 	movi	r7,1
  80577c:	d8800715 	stw	r2,28(sp)
  805780:	d9800c15 	stw	r6,48(sp)
  805784:	e0801015 	stw	r2,64(fp)
  805788:	d8000315 	stw	zero,12(sp)
  80578c:	d9c00b15 	stw	r7,44(sp)
  805790:	d9800615 	stw	r6,24(sp)
  805794:	d8002215 	stw	zero,136(sp)
  805798:	d8800117 	ldw	r2,4(sp)
  80579c:	10008916 	blt	r2,zero,8059c4 <_dtoa_r+0x990>
  8057a0:	d9000517 	ldw	r4,20(sp)
  8057a4:	00c00384 	movi	r3,14
  8057a8:	19008616 	blt	r3,r4,8059c4 <_dtoa_r+0x990>
  8057ac:	200490fa 	slli	r2,r4,3
  8057b0:	00c02074 	movhi	r3,129
  8057b4:	d9802217 	ldw	r6,136(sp)
  8057b8:	18cd1904 	addi	r3,r3,13412
  8057bc:	1885883a 	add	r2,r3,r2
  8057c0:	14000017 	ldw	r16,0(r2)
  8057c4:	14400117 	ldw	r17,4(r2)
  8057c8:	30016316 	blt	r6,zero,805d58 <_dtoa_r+0xd24>
  8057cc:	800d883a 	mov	r6,r16
  8057d0:	880f883a 	mov	r7,r17
  8057d4:	9009883a 	mov	r4,r18
  8057d8:	980b883a 	mov	r5,r19
  8057dc:	080d4340 	call	80d434 <__divdf3>
  8057e0:	180b883a 	mov	r5,r3
  8057e4:	1009883a 	mov	r4,r2
  8057e8:	080ef880 	call	80ef88 <__fixdfsi>
  8057ec:	1009883a 	mov	r4,r2
  8057f0:	102b883a 	mov	r21,r2
  8057f4:	080f0080 	call	80f008 <__floatsidf>
  8057f8:	800d883a 	mov	r6,r16
  8057fc:	880f883a 	mov	r7,r17
  805800:	1009883a 	mov	r4,r2
  805804:	180b883a 	mov	r5,r3
  805808:	080df740 	call	80df74 <__muldf3>
  80580c:	100d883a 	mov	r6,r2
  805810:	180f883a 	mov	r7,r3
  805814:	9009883a 	mov	r4,r18
  805818:	980b883a 	mov	r5,r19
  80581c:	080e68c0 	call	80e68c <__subdf3>
  805820:	d9c00717 	ldw	r7,28(sp)
  805824:	1009883a 	mov	r4,r2
  805828:	a8800c04 	addi	r2,r21,48
  80582c:	38800005 	stb	r2,0(r7)
  805830:	3dc00044 	addi	r23,r7,1
  805834:	d9c00617 	ldw	r7,24(sp)
  805838:	01800044 	movi	r6,1
  80583c:	180b883a 	mov	r5,r3
  805840:	2005883a 	mov	r2,r4
  805844:	39803826 	beq	r7,r6,805928 <_dtoa_r+0x8f4>
  805848:	000d883a 	mov	r6,zero
  80584c:	01d00934 	movhi	r7,16420
  805850:	080df740 	call	80df74 <__muldf3>
  805854:	000d883a 	mov	r6,zero
  805858:	000f883a 	mov	r7,zero
  80585c:	1009883a 	mov	r4,r2
  805860:	180b883a 	mov	r5,r3
  805864:	1025883a 	mov	r18,r2
  805868:	1827883a 	mov	r19,r3
  80586c:	080dd1c0 	call	80dd1c <__eqdf2>
  805870:	103f9a26 	beq	r2,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  805874:	d9c00617 	ldw	r7,24(sp)
  805878:	d8c00717 	ldw	r3,28(sp)
  80587c:	b829883a 	mov	r20,r23
  805880:	38bfffc4 	addi	r2,r7,-1
  805884:	18ad883a 	add	r22,r3,r2
  805888:	00000a06 	br	8058b4 <_dtoa_r+0x880>
  80588c:	080df740 	call	80df74 <__muldf3>
  805890:	000d883a 	mov	r6,zero
  805894:	000f883a 	mov	r7,zero
  805898:	1009883a 	mov	r4,r2
  80589c:	180b883a 	mov	r5,r3
  8058a0:	1025883a 	mov	r18,r2
  8058a4:	1827883a 	mov	r19,r3
  8058a8:	b829883a 	mov	r20,r23
  8058ac:	080dd1c0 	call	80dd1c <__eqdf2>
  8058b0:	103f8a26 	beq	r2,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  8058b4:	800d883a 	mov	r6,r16
  8058b8:	880f883a 	mov	r7,r17
  8058bc:	9009883a 	mov	r4,r18
  8058c0:	980b883a 	mov	r5,r19
  8058c4:	080d4340 	call	80d434 <__divdf3>
  8058c8:	180b883a 	mov	r5,r3
  8058cc:	1009883a 	mov	r4,r2
  8058d0:	080ef880 	call	80ef88 <__fixdfsi>
  8058d4:	1009883a 	mov	r4,r2
  8058d8:	102b883a 	mov	r21,r2
  8058dc:	080f0080 	call	80f008 <__floatsidf>
  8058e0:	800d883a 	mov	r6,r16
  8058e4:	880f883a 	mov	r7,r17
  8058e8:	1009883a 	mov	r4,r2
  8058ec:	180b883a 	mov	r5,r3
  8058f0:	080df740 	call	80df74 <__muldf3>
  8058f4:	100d883a 	mov	r6,r2
  8058f8:	180f883a 	mov	r7,r3
  8058fc:	9009883a 	mov	r4,r18
  805900:	980b883a 	mov	r5,r19
  805904:	080e68c0 	call	80e68c <__subdf3>
  805908:	aa000c04 	addi	r8,r21,48
  80590c:	a2000005 	stb	r8,0(r20)
  805910:	000d883a 	mov	r6,zero
  805914:	01d00934 	movhi	r7,16420
  805918:	1009883a 	mov	r4,r2
  80591c:	180b883a 	mov	r5,r3
  805920:	a5c00044 	addi	r23,r20,1
  805924:	b53fd91e 	bne	r22,r20,80588c <__alt_mem_onchip_mem+0xff78588c>
  805928:	100d883a 	mov	r6,r2
  80592c:	180f883a 	mov	r7,r3
  805930:	1009883a 	mov	r4,r2
  805934:	180b883a 	mov	r5,r3
  805938:	080cb880 	call	80cb88 <__adddf3>
  80593c:	100d883a 	mov	r6,r2
  805940:	180f883a 	mov	r7,r3
  805944:	8009883a 	mov	r4,r16
  805948:	880b883a 	mov	r5,r17
  80594c:	1027883a 	mov	r19,r2
  805950:	1825883a 	mov	r18,r3
  805954:	080de800 	call	80de80 <__ledf2>
  805958:	10000816 	blt	r2,zero,80597c <_dtoa_r+0x948>
  80595c:	980d883a 	mov	r6,r19
  805960:	900f883a 	mov	r7,r18
  805964:	8009883a 	mov	r4,r16
  805968:	880b883a 	mov	r5,r17
  80596c:	080dd1c0 	call	80dd1c <__eqdf2>
  805970:	103f5a1e 	bne	r2,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  805974:	ad40004c 	andi	r21,r21,1
  805978:	a83f5826 	beq	r21,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  80597c:	bd3fffc3 	ldbu	r20,-1(r23)
  805980:	b8bfffc4 	addi	r2,r23,-1
  805984:	1007883a 	mov	r3,r2
  805988:	01400e44 	movi	r5,57
  80598c:	d9800717 	ldw	r6,28(sp)
  805990:	00000506 	br	8059a8 <_dtoa_r+0x974>
  805994:	18ffffc4 	addi	r3,r3,-1
  805998:	11824726 	beq	r2,r6,8062b8 <_dtoa_r+0x1284>
  80599c:	1d000003 	ldbu	r20,0(r3)
  8059a0:	102f883a 	mov	r23,r2
  8059a4:	10bfffc4 	addi	r2,r2,-1
  8059a8:	a1003fcc 	andi	r4,r20,255
  8059ac:	2100201c 	xori	r4,r4,128
  8059b0:	213fe004 	addi	r4,r4,-128
  8059b4:	217ff726 	beq	r4,r5,805994 <__alt_mem_onchip_mem+0xff785994>
  8059b8:	a2000044 	addi	r8,r20,1
  8059bc:	12000005 	stb	r8,0(r2)
  8059c0:	003f4606 	br	8056dc <__alt_mem_onchip_mem+0xff7856dc>
  8059c4:	d9000b17 	ldw	r4,44(sp)
  8059c8:	2000c826 	beq	r4,zero,805cec <_dtoa_r+0xcb8>
  8059cc:	d9800317 	ldw	r6,12(sp)
  8059d0:	00c00044 	movi	r3,1
  8059d4:	1980f90e 	bge	r3,r6,805dbc <_dtoa_r+0xd88>
  8059d8:	d8800617 	ldw	r2,24(sp)
  8059dc:	d8c00a17 	ldw	r3,40(sp)
  8059e0:	157fffc4 	addi	r21,r2,-1
  8059e4:	1d41f316 	blt	r3,r21,8061b4 <_dtoa_r+0x1180>
  8059e8:	1d6bc83a 	sub	r21,r3,r21
  8059ec:	d9c00617 	ldw	r7,24(sp)
  8059f0:	3802aa16 	blt	r7,zero,80649c <_dtoa_r+0x1468>
  8059f4:	dd000817 	ldw	r20,32(sp)
  8059f8:	d8800617 	ldw	r2,24(sp)
  8059fc:	d8c00817 	ldw	r3,32(sp)
  805a00:	01400044 	movi	r5,1
  805a04:	e009883a 	mov	r4,fp
  805a08:	1887883a 	add	r3,r3,r2
  805a0c:	d8c00815 	stw	r3,32(sp)
  805a10:	b0ad883a 	add	r22,r22,r2
  805a14:	08084c40 	call	8084c4 <__i2b>
  805a18:	1023883a 	mov	r17,r2
  805a1c:	a0000826 	beq	r20,zero,805a40 <_dtoa_r+0xa0c>
  805a20:	0580070e 	bge	zero,r22,805a40 <_dtoa_r+0xa0c>
  805a24:	a005883a 	mov	r2,r20
  805a28:	b500b916 	blt	r22,r20,805d10 <_dtoa_r+0xcdc>
  805a2c:	d9000817 	ldw	r4,32(sp)
  805a30:	a0a9c83a 	sub	r20,r20,r2
  805a34:	b0adc83a 	sub	r22,r22,r2
  805a38:	2089c83a 	sub	r4,r4,r2
  805a3c:	d9000815 	stw	r4,32(sp)
  805a40:	d9800a17 	ldw	r6,40(sp)
  805a44:	0181810e 	bge	zero,r6,80604c <_dtoa_r+0x1018>
  805a48:	d9c00b17 	ldw	r7,44(sp)
  805a4c:	3800b326 	beq	r7,zero,805d1c <_dtoa_r+0xce8>
  805a50:	a800b226 	beq	r21,zero,805d1c <_dtoa_r+0xce8>
  805a54:	880b883a 	mov	r5,r17
  805a58:	a80d883a 	mov	r6,r21
  805a5c:	e009883a 	mov	r4,fp
  805a60:	08086f80 	call	8086f8 <__pow5mult>
  805a64:	d9800917 	ldw	r6,36(sp)
  805a68:	100b883a 	mov	r5,r2
  805a6c:	e009883a 	mov	r4,fp
  805a70:	1023883a 	mov	r17,r2
  805a74:	08085000 	call	808500 <__multiply>
  805a78:	1021883a 	mov	r16,r2
  805a7c:	d8800a17 	ldw	r2,40(sp)
  805a80:	d9400917 	ldw	r5,36(sp)
  805a84:	e009883a 	mov	r4,fp
  805a88:	1545c83a 	sub	r2,r2,r21
  805a8c:	d8800a15 	stw	r2,40(sp)
  805a90:	08081600 	call	808160 <_Bfree>
  805a94:	d8c00a17 	ldw	r3,40(sp)
  805a98:	18009f1e 	bne	r3,zero,805d18 <_dtoa_r+0xce4>
  805a9c:	05c00044 	movi	r23,1
  805aa0:	e009883a 	mov	r4,fp
  805aa4:	b80b883a 	mov	r5,r23
  805aa8:	08084c40 	call	8084c4 <__i2b>
  805aac:	d9000d17 	ldw	r4,52(sp)
  805ab0:	102b883a 	mov	r21,r2
  805ab4:	2000ce26 	beq	r4,zero,805df0 <_dtoa_r+0xdbc>
  805ab8:	200d883a 	mov	r6,r4
  805abc:	100b883a 	mov	r5,r2
  805ac0:	e009883a 	mov	r4,fp
  805ac4:	08086f80 	call	8086f8 <__pow5mult>
  805ac8:	d9800317 	ldw	r6,12(sp)
  805acc:	102b883a 	mov	r21,r2
  805ad0:	b981810e 	bge	r23,r6,8060d8 <_dtoa_r+0x10a4>
  805ad4:	0027883a 	mov	r19,zero
  805ad8:	a8800417 	ldw	r2,16(r21)
  805adc:	05c00804 	movi	r23,32
  805ae0:	10800104 	addi	r2,r2,4
  805ae4:	1085883a 	add	r2,r2,r2
  805ae8:	1085883a 	add	r2,r2,r2
  805aec:	a885883a 	add	r2,r21,r2
  805af0:	11000017 	ldw	r4,0(r2)
  805af4:	08083ac0 	call	8083ac <__hi0bits>
  805af8:	b885c83a 	sub	r2,r23,r2
  805afc:	1585883a 	add	r2,r2,r22
  805b00:	108007cc 	andi	r2,r2,31
  805b04:	1000b326 	beq	r2,zero,805dd4 <_dtoa_r+0xda0>
  805b08:	00c00804 	movi	r3,32
  805b0c:	1887c83a 	sub	r3,r3,r2
  805b10:	01000104 	movi	r4,4
  805b14:	20c2cd0e 	bge	r4,r3,80664c <_dtoa_r+0x1618>
  805b18:	00c00704 	movi	r3,28
  805b1c:	1885c83a 	sub	r2,r3,r2
  805b20:	d8c00817 	ldw	r3,32(sp)
  805b24:	a0a9883a 	add	r20,r20,r2
  805b28:	b0ad883a 	add	r22,r22,r2
  805b2c:	1887883a 	add	r3,r3,r2
  805b30:	d8c00815 	stw	r3,32(sp)
  805b34:	d9800817 	ldw	r6,32(sp)
  805b38:	0180040e 	bge	zero,r6,805b4c <_dtoa_r+0xb18>
  805b3c:	800b883a 	mov	r5,r16
  805b40:	e009883a 	mov	r4,fp
  805b44:	08088380 	call	808838 <__lshift>
  805b48:	1021883a 	mov	r16,r2
  805b4c:	0580050e 	bge	zero,r22,805b64 <_dtoa_r+0xb30>
  805b50:	a80b883a 	mov	r5,r21
  805b54:	b00d883a 	mov	r6,r22
  805b58:	e009883a 	mov	r4,fp
  805b5c:	08088380 	call	808838 <__lshift>
  805b60:	102b883a 	mov	r21,r2
  805b64:	d9c00e17 	ldw	r7,56(sp)
  805b68:	3801211e 	bne	r7,zero,805ff0 <_dtoa_r+0xfbc>
  805b6c:	d9800617 	ldw	r6,24(sp)
  805b70:	0181380e 	bge	zero,r6,806054 <_dtoa_r+0x1020>
  805b74:	d8c00b17 	ldw	r3,44(sp)
  805b78:	1800ab1e 	bne	r3,zero,805e28 <_dtoa_r+0xdf4>
  805b7c:	dc800717 	ldw	r18,28(sp)
  805b80:	dcc00617 	ldw	r19,24(sp)
  805b84:	9029883a 	mov	r20,r18
  805b88:	00000206 	br	805b94 <_dtoa_r+0xb60>
  805b8c:	08081880 	call	808188 <__multadd>
  805b90:	1021883a 	mov	r16,r2
  805b94:	a80b883a 	mov	r5,r21
  805b98:	8009883a 	mov	r4,r16
  805b9c:	0804e340 	call	804e34 <quorem>
  805ba0:	10800c04 	addi	r2,r2,48
  805ba4:	90800005 	stb	r2,0(r18)
  805ba8:	94800044 	addi	r18,r18,1
  805bac:	9507c83a 	sub	r3,r18,r20
  805bb0:	000f883a 	mov	r7,zero
  805bb4:	01800284 	movi	r6,10
  805bb8:	800b883a 	mov	r5,r16
  805bbc:	e009883a 	mov	r4,fp
  805bc0:	1cfff216 	blt	r3,r19,805b8c <__alt_mem_onchip_mem+0xff785b8c>
  805bc4:	1011883a 	mov	r8,r2
  805bc8:	d8800617 	ldw	r2,24(sp)
  805bcc:	0082370e 	bge	zero,r2,8064ac <_dtoa_r+0x1478>
  805bd0:	d9000717 	ldw	r4,28(sp)
  805bd4:	0025883a 	mov	r18,zero
  805bd8:	20af883a 	add	r23,r4,r2
  805bdc:	01800044 	movi	r6,1
  805be0:	800b883a 	mov	r5,r16
  805be4:	e009883a 	mov	r4,fp
  805be8:	da001715 	stw	r8,92(sp)
  805bec:	08088380 	call	808838 <__lshift>
  805bf0:	a80b883a 	mov	r5,r21
  805bf4:	1009883a 	mov	r4,r2
  805bf8:	d8800915 	stw	r2,36(sp)
  805bfc:	08089800 	call	808980 <__mcmp>
  805c00:	da001717 	ldw	r8,92(sp)
  805c04:	0081800e 	bge	zero,r2,806208 <_dtoa_r+0x11d4>
  805c08:	b93fffc3 	ldbu	r4,-1(r23)
  805c0c:	b8bfffc4 	addi	r2,r23,-1
  805c10:	1007883a 	mov	r3,r2
  805c14:	01800e44 	movi	r6,57
  805c18:	d9c00717 	ldw	r7,28(sp)
  805c1c:	00000506 	br	805c34 <_dtoa_r+0xc00>
  805c20:	18ffffc4 	addi	r3,r3,-1
  805c24:	11c12326 	beq	r2,r7,8060b4 <_dtoa_r+0x1080>
  805c28:	19000003 	ldbu	r4,0(r3)
  805c2c:	102f883a 	mov	r23,r2
  805c30:	10bfffc4 	addi	r2,r2,-1
  805c34:	21403fcc 	andi	r5,r4,255
  805c38:	2940201c 	xori	r5,r5,128
  805c3c:	297fe004 	addi	r5,r5,-128
  805c40:	29bff726 	beq	r5,r6,805c20 <__alt_mem_onchip_mem+0xff785c20>
  805c44:	21000044 	addi	r4,r4,1
  805c48:	11000005 	stb	r4,0(r2)
  805c4c:	a80b883a 	mov	r5,r21
  805c50:	e009883a 	mov	r4,fp
  805c54:	08081600 	call	808160 <_Bfree>
  805c58:	883ea026 	beq	r17,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  805c5c:	90000426 	beq	r18,zero,805c70 <_dtoa_r+0xc3c>
  805c60:	94400326 	beq	r18,r17,805c70 <_dtoa_r+0xc3c>
  805c64:	900b883a 	mov	r5,r18
  805c68:	e009883a 	mov	r4,fp
  805c6c:	08081600 	call	808160 <_Bfree>
  805c70:	880b883a 	mov	r5,r17
  805c74:	e009883a 	mov	r4,fp
  805c78:	08081600 	call	808160 <_Bfree>
  805c7c:	003e9706 	br	8056dc <__alt_mem_onchip_mem+0xff7856dc>
  805c80:	01800044 	movi	r6,1
  805c84:	d9800e15 	stw	r6,56(sp)
  805c88:	003d9606 	br	8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  805c8c:	d8800817 	ldw	r2,32(sp)
  805c90:	d8c00517 	ldw	r3,20(sp)
  805c94:	d8000d15 	stw	zero,52(sp)
  805c98:	10c5c83a 	sub	r2,r2,r3
  805c9c:	00c9c83a 	sub	r4,zero,r3
  805ca0:	d8800815 	stw	r2,32(sp)
  805ca4:	d9000a15 	stw	r4,40(sp)
  805ca8:	003d9706 	br	805308 <__alt_mem_onchip_mem+0xff785308>
  805cac:	05adc83a 	sub	r22,zero,r22
  805cb0:	dd800815 	stw	r22,32(sp)
  805cb4:	002d883a 	mov	r22,zero
  805cb8:	003d8e06 	br	8052f4 <__alt_mem_onchip_mem+0xff7852f4>
  805cbc:	d9000517 	ldw	r4,20(sp)
  805cc0:	080f0080 	call	80f008 <__floatsidf>
  805cc4:	100d883a 	mov	r6,r2
  805cc8:	180f883a 	mov	r7,r3
  805ccc:	a009883a 	mov	r4,r20
  805cd0:	880b883a 	mov	r5,r17
  805cd4:	080dd1c0 	call	80dd1c <__eqdf2>
  805cd8:	103d7126 	beq	r2,zero,8052a0 <__alt_mem_onchip_mem+0xff7852a0>
  805cdc:	d9c00517 	ldw	r7,20(sp)
  805ce0:	39ffffc4 	addi	r7,r7,-1
  805ce4:	d9c00515 	stw	r7,20(sp)
  805ce8:	003d6d06 	br	8052a0 <__alt_mem_onchip_mem+0xff7852a0>
  805cec:	dd400a17 	ldw	r21,40(sp)
  805cf0:	dd000817 	ldw	r20,32(sp)
  805cf4:	0023883a 	mov	r17,zero
  805cf8:	003f4806 	br	805a1c <__alt_mem_onchip_mem+0xff785a1c>
  805cfc:	10e3c83a 	sub	r17,r2,r3
  805d00:	9448983a 	sll	r4,r18,r17
  805d04:	003d3206 	br	8051d0 <__alt_mem_onchip_mem+0xff7851d0>
  805d08:	d8000e15 	stw	zero,56(sp)
  805d0c:	003d7506 	br	8052e4 <__alt_mem_onchip_mem+0xff7852e4>
  805d10:	b005883a 	mov	r2,r22
  805d14:	003f4506 	br	805a2c <__alt_mem_onchip_mem+0xff785a2c>
  805d18:	dc000915 	stw	r16,36(sp)
  805d1c:	d9800a17 	ldw	r6,40(sp)
  805d20:	d9400917 	ldw	r5,36(sp)
  805d24:	e009883a 	mov	r4,fp
  805d28:	08086f80 	call	8086f8 <__pow5mult>
  805d2c:	1021883a 	mov	r16,r2
  805d30:	003f5a06 	br	805a9c <__alt_mem_onchip_mem+0xff785a9c>
  805d34:	01c00044 	movi	r7,1
  805d38:	d9c00b15 	stw	r7,44(sp)
  805d3c:	d8802217 	ldw	r2,136(sp)
  805d40:	0081280e 	bge	zero,r2,8061e4 <_dtoa_r+0x11b0>
  805d44:	100d883a 	mov	r6,r2
  805d48:	1021883a 	mov	r16,r2
  805d4c:	d8800c15 	stw	r2,48(sp)
  805d50:	d8800615 	stw	r2,24(sp)
  805d54:	003d8806 	br	805378 <__alt_mem_onchip_mem+0xff785378>
  805d58:	d8800617 	ldw	r2,24(sp)
  805d5c:	00be9b16 	blt	zero,r2,8057cc <__alt_mem_onchip_mem+0xff7857cc>
  805d60:	10010f1e 	bne	r2,zero,8061a0 <_dtoa_r+0x116c>
  805d64:	880b883a 	mov	r5,r17
  805d68:	000d883a 	mov	r6,zero
  805d6c:	01d00534 	movhi	r7,16404
  805d70:	8009883a 	mov	r4,r16
  805d74:	080df740 	call	80df74 <__muldf3>
  805d78:	900d883a 	mov	r6,r18
  805d7c:	980f883a 	mov	r7,r19
  805d80:	1009883a 	mov	r4,r2
  805d84:	180b883a 	mov	r5,r3
  805d88:	080dda40 	call	80dda4 <__gedf2>
  805d8c:	002b883a 	mov	r21,zero
  805d90:	0023883a 	mov	r17,zero
  805d94:	1000bf16 	blt	r2,zero,806094 <_dtoa_r+0x1060>
  805d98:	d9802217 	ldw	r6,136(sp)
  805d9c:	ddc00717 	ldw	r23,28(sp)
  805da0:	018c303a 	nor	r6,zero,r6
  805da4:	d9800515 	stw	r6,20(sp)
  805da8:	a80b883a 	mov	r5,r21
  805dac:	e009883a 	mov	r4,fp
  805db0:	08081600 	call	808160 <_Bfree>
  805db4:	883e4926 	beq	r17,zero,8056dc <__alt_mem_onchip_mem+0xff7856dc>
  805db8:	003fad06 	br	805c70 <__alt_mem_onchip_mem+0xff785c70>
  805dbc:	d9c01117 	ldw	r7,68(sp)
  805dc0:	3801bc26 	beq	r7,zero,8064b4 <_dtoa_r+0x1480>
  805dc4:	10810cc4 	addi	r2,r2,1075
  805dc8:	dd400a17 	ldw	r21,40(sp)
  805dcc:	dd000817 	ldw	r20,32(sp)
  805dd0:	003f0a06 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  805dd4:	00800704 	movi	r2,28
  805dd8:	d9000817 	ldw	r4,32(sp)
  805ddc:	a0a9883a 	add	r20,r20,r2
  805de0:	b0ad883a 	add	r22,r22,r2
  805de4:	2089883a 	add	r4,r4,r2
  805de8:	d9000815 	stw	r4,32(sp)
  805dec:	003f5106 	br	805b34 <__alt_mem_onchip_mem+0xff785b34>
  805df0:	d8c00317 	ldw	r3,12(sp)
  805df4:	b8c1fc0e 	bge	r23,r3,8065e8 <_dtoa_r+0x15b4>
  805df8:	0027883a 	mov	r19,zero
  805dfc:	b805883a 	mov	r2,r23
  805e00:	003f3e06 	br	805afc <__alt_mem_onchip_mem+0xff785afc>
  805e04:	880b883a 	mov	r5,r17
  805e08:	e009883a 	mov	r4,fp
  805e0c:	000f883a 	mov	r7,zero
  805e10:	01800284 	movi	r6,10
  805e14:	08081880 	call	808188 <__multadd>
  805e18:	d9000c17 	ldw	r4,48(sp)
  805e1c:	1023883a 	mov	r17,r2
  805e20:	0102040e 	bge	zero,r4,806634 <_dtoa_r+0x1600>
  805e24:	d9000615 	stw	r4,24(sp)
  805e28:	0500050e 	bge	zero,r20,805e40 <_dtoa_r+0xe0c>
  805e2c:	880b883a 	mov	r5,r17
  805e30:	a00d883a 	mov	r6,r20
  805e34:	e009883a 	mov	r4,fp
  805e38:	08088380 	call	808838 <__lshift>
  805e3c:	1023883a 	mov	r17,r2
  805e40:	9801241e 	bne	r19,zero,8062d4 <_dtoa_r+0x12a0>
  805e44:	8829883a 	mov	r20,r17
  805e48:	d9000617 	ldw	r4,24(sp)
  805e4c:	dcc00717 	ldw	r19,28(sp)
  805e50:	9480004c 	andi	r18,r18,1
  805e54:	20bfffc4 	addi	r2,r4,-1
  805e58:	9885883a 	add	r2,r19,r2
  805e5c:	d8800415 	stw	r2,16(sp)
  805e60:	dc800615 	stw	r18,24(sp)
  805e64:	a80b883a 	mov	r5,r21
  805e68:	8009883a 	mov	r4,r16
  805e6c:	0804e340 	call	804e34 <quorem>
  805e70:	880b883a 	mov	r5,r17
  805e74:	8009883a 	mov	r4,r16
  805e78:	102f883a 	mov	r23,r2
  805e7c:	08089800 	call	808980 <__mcmp>
  805e80:	a80b883a 	mov	r5,r21
  805e84:	a00d883a 	mov	r6,r20
  805e88:	e009883a 	mov	r4,fp
  805e8c:	102d883a 	mov	r22,r2
  805e90:	08089e00 	call	8089e0 <__mdiff>
  805e94:	1007883a 	mov	r3,r2
  805e98:	10800317 	ldw	r2,12(r2)
  805e9c:	bc800c04 	addi	r18,r23,48
  805ea0:	180b883a 	mov	r5,r3
  805ea4:	10004e1e 	bne	r2,zero,805fe0 <_dtoa_r+0xfac>
  805ea8:	8009883a 	mov	r4,r16
  805eac:	d8c01615 	stw	r3,88(sp)
  805eb0:	08089800 	call	808980 <__mcmp>
  805eb4:	d8c01617 	ldw	r3,88(sp)
  805eb8:	e009883a 	mov	r4,fp
  805ebc:	d8801615 	stw	r2,88(sp)
  805ec0:	180b883a 	mov	r5,r3
  805ec4:	08081600 	call	808160 <_Bfree>
  805ec8:	d8801617 	ldw	r2,88(sp)
  805ecc:	1000041e 	bne	r2,zero,805ee0 <_dtoa_r+0xeac>
  805ed0:	d9800317 	ldw	r6,12(sp)
  805ed4:	3000021e 	bne	r6,zero,805ee0 <_dtoa_r+0xeac>
  805ed8:	d8c00617 	ldw	r3,24(sp)
  805edc:	18003726 	beq	r3,zero,805fbc <_dtoa_r+0xf88>
  805ee0:	b0002016 	blt	r22,zero,805f64 <_dtoa_r+0xf30>
  805ee4:	b000041e 	bne	r22,zero,805ef8 <_dtoa_r+0xec4>
  805ee8:	d9000317 	ldw	r4,12(sp)
  805eec:	2000021e 	bne	r4,zero,805ef8 <_dtoa_r+0xec4>
  805ef0:	d8c00617 	ldw	r3,24(sp)
  805ef4:	18001b26 	beq	r3,zero,805f64 <_dtoa_r+0xf30>
  805ef8:	00810716 	blt	zero,r2,806318 <_dtoa_r+0x12e4>
  805efc:	d8c00417 	ldw	r3,16(sp)
  805f00:	9d800044 	addi	r22,r19,1
  805f04:	9c800005 	stb	r18,0(r19)
  805f08:	b02f883a 	mov	r23,r22
  805f0c:	98c10626 	beq	r19,r3,806328 <_dtoa_r+0x12f4>
  805f10:	800b883a 	mov	r5,r16
  805f14:	000f883a 	mov	r7,zero
  805f18:	01800284 	movi	r6,10
  805f1c:	e009883a 	mov	r4,fp
  805f20:	08081880 	call	808188 <__multadd>
  805f24:	1021883a 	mov	r16,r2
  805f28:	000f883a 	mov	r7,zero
  805f2c:	01800284 	movi	r6,10
  805f30:	880b883a 	mov	r5,r17
  805f34:	e009883a 	mov	r4,fp
  805f38:	8d002526 	beq	r17,r20,805fd0 <_dtoa_r+0xf9c>
  805f3c:	08081880 	call	808188 <__multadd>
  805f40:	a00b883a 	mov	r5,r20
  805f44:	000f883a 	mov	r7,zero
  805f48:	01800284 	movi	r6,10
  805f4c:	e009883a 	mov	r4,fp
  805f50:	1023883a 	mov	r17,r2
  805f54:	08081880 	call	808188 <__multadd>
  805f58:	1029883a 	mov	r20,r2
  805f5c:	b027883a 	mov	r19,r22
  805f60:	003fc006 	br	805e64 <__alt_mem_onchip_mem+0xff785e64>
  805f64:	9011883a 	mov	r8,r18
  805f68:	00800e0e 	bge	zero,r2,805fa4 <_dtoa_r+0xf70>
  805f6c:	800b883a 	mov	r5,r16
  805f70:	01800044 	movi	r6,1
  805f74:	e009883a 	mov	r4,fp
  805f78:	da001715 	stw	r8,92(sp)
  805f7c:	08088380 	call	808838 <__lshift>
  805f80:	a80b883a 	mov	r5,r21
  805f84:	1009883a 	mov	r4,r2
  805f88:	1021883a 	mov	r16,r2
  805f8c:	08089800 	call	808980 <__mcmp>
  805f90:	da001717 	ldw	r8,92(sp)
  805f94:	0081960e 	bge	zero,r2,8065f0 <_dtoa_r+0x15bc>
  805f98:	00800e44 	movi	r2,57
  805f9c:	40817026 	beq	r8,r2,806560 <_dtoa_r+0x152c>
  805fa0:	ba000c44 	addi	r8,r23,49
  805fa4:	8825883a 	mov	r18,r17
  805fa8:	9dc00044 	addi	r23,r19,1
  805fac:	9a000005 	stb	r8,0(r19)
  805fb0:	a023883a 	mov	r17,r20
  805fb4:	dc000915 	stw	r16,36(sp)
  805fb8:	003f2406 	br	805c4c <__alt_mem_onchip_mem+0xff785c4c>
  805fbc:	00800e44 	movi	r2,57
  805fc0:	9011883a 	mov	r8,r18
  805fc4:	90816626 	beq	r18,r2,806560 <_dtoa_r+0x152c>
  805fc8:	05bff516 	blt	zero,r22,805fa0 <__alt_mem_onchip_mem+0xff785fa0>
  805fcc:	003ff506 	br	805fa4 <__alt_mem_onchip_mem+0xff785fa4>
  805fd0:	08081880 	call	808188 <__multadd>
  805fd4:	1023883a 	mov	r17,r2
  805fd8:	1029883a 	mov	r20,r2
  805fdc:	003fdf06 	br	805f5c <__alt_mem_onchip_mem+0xff785f5c>
  805fe0:	e009883a 	mov	r4,fp
  805fe4:	08081600 	call	808160 <_Bfree>
  805fe8:	00800044 	movi	r2,1
  805fec:	003fbc06 	br	805ee0 <__alt_mem_onchip_mem+0xff785ee0>
  805ff0:	a80b883a 	mov	r5,r21
  805ff4:	8009883a 	mov	r4,r16
  805ff8:	08089800 	call	808980 <__mcmp>
  805ffc:	103edb0e 	bge	r2,zero,805b6c <__alt_mem_onchip_mem+0xff785b6c>
  806000:	800b883a 	mov	r5,r16
  806004:	000f883a 	mov	r7,zero
  806008:	01800284 	movi	r6,10
  80600c:	e009883a 	mov	r4,fp
  806010:	08081880 	call	808188 <__multadd>
  806014:	1021883a 	mov	r16,r2
  806018:	d8800517 	ldw	r2,20(sp)
  80601c:	d8c00b17 	ldw	r3,44(sp)
  806020:	10bfffc4 	addi	r2,r2,-1
  806024:	d8800515 	stw	r2,20(sp)
  806028:	183f761e 	bne	r3,zero,805e04 <__alt_mem_onchip_mem+0xff785e04>
  80602c:	d9000c17 	ldw	r4,48(sp)
  806030:	0101730e 	bge	zero,r4,806600 <_dtoa_r+0x15cc>
  806034:	d9000615 	stw	r4,24(sp)
  806038:	003ed006 	br	805b7c <__alt_mem_onchip_mem+0xff785b7c>
  80603c:	00800084 	movi	r2,2
  806040:	3081861e 	bne	r6,r2,80665c <_dtoa_r+0x1628>
  806044:	d8000b15 	stw	zero,44(sp)
  806048:	003f3c06 	br	805d3c <__alt_mem_onchip_mem+0xff785d3c>
  80604c:	dc000917 	ldw	r16,36(sp)
  806050:	003e9206 	br	805a9c <__alt_mem_onchip_mem+0xff785a9c>
  806054:	d9c00317 	ldw	r7,12(sp)
  806058:	00800084 	movi	r2,2
  80605c:	11fec50e 	bge	r2,r7,805b74 <__alt_mem_onchip_mem+0xff785b74>
  806060:	d9000617 	ldw	r4,24(sp)
  806064:	20013c1e 	bne	r4,zero,806558 <_dtoa_r+0x1524>
  806068:	a80b883a 	mov	r5,r21
  80606c:	000f883a 	mov	r7,zero
  806070:	01800144 	movi	r6,5
  806074:	e009883a 	mov	r4,fp
  806078:	08081880 	call	808188 <__multadd>
  80607c:	100b883a 	mov	r5,r2
  806080:	8009883a 	mov	r4,r16
  806084:	102b883a 	mov	r21,r2
  806088:	08089800 	call	808980 <__mcmp>
  80608c:	dc000915 	stw	r16,36(sp)
  806090:	00bf410e 	bge	zero,r2,805d98 <__alt_mem_onchip_mem+0xff785d98>
  806094:	d9c00717 	ldw	r7,28(sp)
  806098:	00800c44 	movi	r2,49
  80609c:	38800005 	stb	r2,0(r7)
  8060a0:	d8800517 	ldw	r2,20(sp)
  8060a4:	3dc00044 	addi	r23,r7,1
  8060a8:	10800044 	addi	r2,r2,1
  8060ac:	d8800515 	stw	r2,20(sp)
  8060b0:	003f3d06 	br	805da8 <__alt_mem_onchip_mem+0xff785da8>
  8060b4:	d9800517 	ldw	r6,20(sp)
  8060b8:	d9c00717 	ldw	r7,28(sp)
  8060bc:	00800c44 	movi	r2,49
  8060c0:	31800044 	addi	r6,r6,1
  8060c4:	d9800515 	stw	r6,20(sp)
  8060c8:	38800005 	stb	r2,0(r7)
  8060cc:	003edf06 	br	805c4c <__alt_mem_onchip_mem+0xff785c4c>
  8060d0:	d8000b15 	stw	zero,44(sp)
  8060d4:	003c9f06 	br	805354 <__alt_mem_onchip_mem+0xff785354>
  8060d8:	903e7e1e 	bne	r18,zero,805ad4 <__alt_mem_onchip_mem+0xff785ad4>
  8060dc:	00800434 	movhi	r2,16
  8060e0:	10bfffc4 	addi	r2,r2,-1
  8060e4:	9884703a 	and	r2,r19,r2
  8060e8:	1000ea1e 	bne	r2,zero,806494 <_dtoa_r+0x1460>
  8060ec:	9cdffc2c 	andhi	r19,r19,32752
  8060f0:	9800e826 	beq	r19,zero,806494 <_dtoa_r+0x1460>
  8060f4:	d9c00817 	ldw	r7,32(sp)
  8060f8:	b5800044 	addi	r22,r22,1
  8060fc:	04c00044 	movi	r19,1
  806100:	39c00044 	addi	r7,r7,1
  806104:	d9c00815 	stw	r7,32(sp)
  806108:	d8800d17 	ldw	r2,52(sp)
  80610c:	103e721e 	bne	r2,zero,805ad8 <__alt_mem_onchip_mem+0xff785ad8>
  806110:	00800044 	movi	r2,1
  806114:	003e7906 	br	805afc <__alt_mem_onchip_mem+0xff785afc>
  806118:	8009883a 	mov	r4,r16
  80611c:	080f0080 	call	80f008 <__floatsidf>
  806120:	d9800f17 	ldw	r6,60(sp)
  806124:	d9c01017 	ldw	r7,64(sp)
  806128:	1009883a 	mov	r4,r2
  80612c:	180b883a 	mov	r5,r3
  806130:	080df740 	call	80df74 <__muldf3>
  806134:	000d883a 	mov	r6,zero
  806138:	01d00734 	movhi	r7,16412
  80613c:	1009883a 	mov	r4,r2
  806140:	180b883a 	mov	r5,r3
  806144:	080cb880 	call	80cb88 <__adddf3>
  806148:	047f3034 	movhi	r17,64704
  80614c:	1021883a 	mov	r16,r2
  806150:	1c63883a 	add	r17,r3,r17
  806154:	d9000f17 	ldw	r4,60(sp)
  806158:	d9401017 	ldw	r5,64(sp)
  80615c:	000d883a 	mov	r6,zero
  806160:	01d00534 	movhi	r7,16404
  806164:	080e68c0 	call	80e68c <__subdf3>
  806168:	800d883a 	mov	r6,r16
  80616c:	880f883a 	mov	r7,r17
  806170:	1009883a 	mov	r4,r2
  806174:	180b883a 	mov	r5,r3
  806178:	102b883a 	mov	r21,r2
  80617c:	1829883a 	mov	r20,r3
  806180:	080dda40 	call	80dda4 <__gedf2>
  806184:	00806c16 	blt	zero,r2,806338 <_dtoa_r+0x1304>
  806188:	89e0003c 	xorhi	r7,r17,32768
  80618c:	800d883a 	mov	r6,r16
  806190:	a809883a 	mov	r4,r21
  806194:	a00b883a 	mov	r5,r20
  806198:	080de800 	call	80de80 <__ledf2>
  80619c:	103d7e0e 	bge	r2,zero,805798 <__alt_mem_onchip_mem+0xff785798>
  8061a0:	002b883a 	mov	r21,zero
  8061a4:	0023883a 	mov	r17,zero
  8061a8:	003efb06 	br	805d98 <__alt_mem_onchip_mem+0xff785d98>
  8061ac:	d8800717 	ldw	r2,28(sp)
  8061b0:	003bd006 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  8061b4:	d9000a17 	ldw	r4,40(sp)
  8061b8:	d9800d17 	ldw	r6,52(sp)
  8061bc:	dd400a15 	stw	r21,40(sp)
  8061c0:	a905c83a 	sub	r2,r21,r4
  8061c4:	308d883a 	add	r6,r6,r2
  8061c8:	d9800d15 	stw	r6,52(sp)
  8061cc:	002b883a 	mov	r21,zero
  8061d0:	003e0606 	br	8059ec <__alt_mem_onchip_mem+0xff7859ec>
  8061d4:	9023883a 	mov	r17,r18
  8061d8:	9829883a 	mov	r20,r19
  8061dc:	04000084 	movi	r16,2
  8061e0:	003c9206 	br	80542c <__alt_mem_onchip_mem+0xff78542c>
  8061e4:	04000044 	movi	r16,1
  8061e8:	dc000c15 	stw	r16,48(sp)
  8061ec:	dc000615 	stw	r16,24(sp)
  8061f0:	dc002215 	stw	r16,136(sp)
  8061f4:	e0001115 	stw	zero,68(fp)
  8061f8:	000b883a 	mov	r5,zero
  8061fc:	003c6906 	br	8053a4 <__alt_mem_onchip_mem+0xff7853a4>
  806200:	3021883a 	mov	r16,r6
  806204:	003ffb06 	br	8061f4 <__alt_mem_onchip_mem+0xff7861f4>
  806208:	1000021e 	bne	r2,zero,806214 <_dtoa_r+0x11e0>
  80620c:	4200004c 	andi	r8,r8,1
  806210:	403e7d1e 	bne	r8,zero,805c08 <__alt_mem_onchip_mem+0xff785c08>
  806214:	01000c04 	movi	r4,48
  806218:	00000106 	br	806220 <_dtoa_r+0x11ec>
  80621c:	102f883a 	mov	r23,r2
  806220:	b8bfffc4 	addi	r2,r23,-1
  806224:	10c00007 	ldb	r3,0(r2)
  806228:	193ffc26 	beq	r3,r4,80621c <__alt_mem_onchip_mem+0xff78621c>
  80622c:	003e8706 	br	805c4c <__alt_mem_onchip_mem+0xff785c4c>
  806230:	d8800517 	ldw	r2,20(sp)
  806234:	00a3c83a 	sub	r17,zero,r2
  806238:	8800a426 	beq	r17,zero,8064cc <_dtoa_r+0x1498>
  80623c:	888003cc 	andi	r2,r17,15
  806240:	100490fa 	slli	r2,r2,3
  806244:	00c02074 	movhi	r3,129
  806248:	18cd1904 	addi	r3,r3,13412
  80624c:	1885883a 	add	r2,r3,r2
  806250:	11800017 	ldw	r6,0(r2)
  806254:	11c00117 	ldw	r7,4(r2)
  806258:	9009883a 	mov	r4,r18
  80625c:	980b883a 	mov	r5,r19
  806260:	8823d13a 	srai	r17,r17,4
  806264:	080df740 	call	80df74 <__muldf3>
  806268:	d8800f15 	stw	r2,60(sp)
  80626c:	d8c01015 	stw	r3,64(sp)
  806270:	8800e826 	beq	r17,zero,806614 <_dtoa_r+0x15e0>
  806274:	05002074 	movhi	r20,129
  806278:	a50d0f04 	addi	r20,r20,13372
  80627c:	04000084 	movi	r16,2
  806280:	8980004c 	andi	r6,r17,1
  806284:	1009883a 	mov	r4,r2
  806288:	8823d07a 	srai	r17,r17,1
  80628c:	180b883a 	mov	r5,r3
  806290:	30000426 	beq	r6,zero,8062a4 <_dtoa_r+0x1270>
  806294:	a1800017 	ldw	r6,0(r20)
  806298:	a1c00117 	ldw	r7,4(r20)
  80629c:	84000044 	addi	r16,r16,1
  8062a0:	080df740 	call	80df74 <__muldf3>
  8062a4:	a5000204 	addi	r20,r20,8
  8062a8:	883ff51e 	bne	r17,zero,806280 <__alt_mem_onchip_mem+0xff786280>
  8062ac:	d8800f15 	stw	r2,60(sp)
  8062b0:	d8c01015 	stw	r3,64(sp)
  8062b4:	003c7606 	br	805490 <__alt_mem_onchip_mem+0xff785490>
  8062b8:	00c00c04 	movi	r3,48
  8062bc:	10c00005 	stb	r3,0(r2)
  8062c0:	d8c00517 	ldw	r3,20(sp)
  8062c4:	bd3fffc3 	ldbu	r20,-1(r23)
  8062c8:	18c00044 	addi	r3,r3,1
  8062cc:	d8c00515 	stw	r3,20(sp)
  8062d0:	003db906 	br	8059b8 <__alt_mem_onchip_mem+0xff7859b8>
  8062d4:	89400117 	ldw	r5,4(r17)
  8062d8:	e009883a 	mov	r4,fp
  8062dc:	08080b80 	call	8080b8 <_Balloc>
  8062e0:	89800417 	ldw	r6,16(r17)
  8062e4:	89400304 	addi	r5,r17,12
  8062e8:	11000304 	addi	r4,r2,12
  8062ec:	31800084 	addi	r6,r6,2
  8062f0:	318d883a 	add	r6,r6,r6
  8062f4:	318d883a 	add	r6,r6,r6
  8062f8:	1027883a 	mov	r19,r2
  8062fc:	0807e480 	call	807e48 <memcpy>
  806300:	01800044 	movi	r6,1
  806304:	980b883a 	mov	r5,r19
  806308:	e009883a 	mov	r4,fp
  80630c:	08088380 	call	808838 <__lshift>
  806310:	1029883a 	mov	r20,r2
  806314:	003ecc06 	br	805e48 <__alt_mem_onchip_mem+0xff785e48>
  806318:	00800e44 	movi	r2,57
  80631c:	90809026 	beq	r18,r2,806560 <_dtoa_r+0x152c>
  806320:	92000044 	addi	r8,r18,1
  806324:	003f1f06 	br	805fa4 <__alt_mem_onchip_mem+0xff785fa4>
  806328:	9011883a 	mov	r8,r18
  80632c:	8825883a 	mov	r18,r17
  806330:	a023883a 	mov	r17,r20
  806334:	003e2906 	br	805bdc <__alt_mem_onchip_mem+0xff785bdc>
  806338:	002b883a 	mov	r21,zero
  80633c:	0023883a 	mov	r17,zero
  806340:	003f5406 	br	806094 <__alt_mem_onchip_mem+0xff786094>
  806344:	61bfffc4 	addi	r6,r12,-1
  806348:	300490fa 	slli	r2,r6,3
  80634c:	00c02074 	movhi	r3,129
  806350:	18cd1904 	addi	r3,r3,13412
  806354:	1885883a 	add	r2,r3,r2
  806358:	11000017 	ldw	r4,0(r2)
  80635c:	11400117 	ldw	r5,4(r2)
  806360:	d8800717 	ldw	r2,28(sp)
  806364:	880f883a 	mov	r7,r17
  806368:	d9801215 	stw	r6,72(sp)
  80636c:	800d883a 	mov	r6,r16
  806370:	db001615 	stw	r12,88(sp)
  806374:	15c00044 	addi	r23,r2,1
  806378:	080df740 	call	80df74 <__muldf3>
  80637c:	d9401017 	ldw	r5,64(sp)
  806380:	d9000f17 	ldw	r4,60(sp)
  806384:	d8c01515 	stw	r3,84(sp)
  806388:	d8801415 	stw	r2,80(sp)
  80638c:	080ef880 	call	80ef88 <__fixdfsi>
  806390:	1009883a 	mov	r4,r2
  806394:	1021883a 	mov	r16,r2
  806398:	080f0080 	call	80f008 <__floatsidf>
  80639c:	d9000f17 	ldw	r4,60(sp)
  8063a0:	d9401017 	ldw	r5,64(sp)
  8063a4:	100d883a 	mov	r6,r2
  8063a8:	180f883a 	mov	r7,r3
  8063ac:	080e68c0 	call	80e68c <__subdf3>
  8063b0:	1829883a 	mov	r20,r3
  8063b4:	d8c00717 	ldw	r3,28(sp)
  8063b8:	84000c04 	addi	r16,r16,48
  8063bc:	1023883a 	mov	r17,r2
  8063c0:	1c000005 	stb	r16,0(r3)
  8063c4:	db001617 	ldw	r12,88(sp)
  8063c8:	00800044 	movi	r2,1
  8063cc:	60802226 	beq	r12,r2,806458 <_dtoa_r+0x1424>
  8063d0:	d9c00717 	ldw	r7,28(sp)
  8063d4:	8805883a 	mov	r2,r17
  8063d8:	b82b883a 	mov	r21,r23
  8063dc:	3b19883a 	add	r12,r7,r12
  8063e0:	6023883a 	mov	r17,r12
  8063e4:	a007883a 	mov	r3,r20
  8063e8:	dc800f15 	stw	r18,60(sp)
  8063ec:	000d883a 	mov	r6,zero
  8063f0:	01d00934 	movhi	r7,16420
  8063f4:	1009883a 	mov	r4,r2
  8063f8:	180b883a 	mov	r5,r3
  8063fc:	080df740 	call	80df74 <__muldf3>
  806400:	180b883a 	mov	r5,r3
  806404:	1009883a 	mov	r4,r2
  806408:	1829883a 	mov	r20,r3
  80640c:	1025883a 	mov	r18,r2
  806410:	080ef880 	call	80ef88 <__fixdfsi>
  806414:	1009883a 	mov	r4,r2
  806418:	1021883a 	mov	r16,r2
  80641c:	080f0080 	call	80f008 <__floatsidf>
  806420:	100d883a 	mov	r6,r2
  806424:	180f883a 	mov	r7,r3
  806428:	9009883a 	mov	r4,r18
  80642c:	a00b883a 	mov	r5,r20
  806430:	84000c04 	addi	r16,r16,48
  806434:	080e68c0 	call	80e68c <__subdf3>
  806438:	ad400044 	addi	r21,r21,1
  80643c:	ac3fffc5 	stb	r16,-1(r21)
  806440:	ac7fea1e 	bne	r21,r17,8063ec <__alt_mem_onchip_mem+0xff7863ec>
  806444:	1023883a 	mov	r17,r2
  806448:	d8801217 	ldw	r2,72(sp)
  80644c:	dc800f17 	ldw	r18,60(sp)
  806450:	1829883a 	mov	r20,r3
  806454:	b8af883a 	add	r23,r23,r2
  806458:	d9001417 	ldw	r4,80(sp)
  80645c:	d9401517 	ldw	r5,84(sp)
  806460:	000d883a 	mov	r6,zero
  806464:	01cff834 	movhi	r7,16352
  806468:	080cb880 	call	80cb88 <__adddf3>
  80646c:	880d883a 	mov	r6,r17
  806470:	a00f883a 	mov	r7,r20
  806474:	1009883a 	mov	r4,r2
  806478:	180b883a 	mov	r5,r3
  80647c:	080de800 	call	80de80 <__ledf2>
  806480:	10003e0e 	bge	r2,zero,80657c <_dtoa_r+0x1548>
  806484:	d9001317 	ldw	r4,76(sp)
  806488:	bd3fffc3 	ldbu	r20,-1(r23)
  80648c:	d9000515 	stw	r4,20(sp)
  806490:	003d3b06 	br	805980 <__alt_mem_onchip_mem+0xff785980>
  806494:	0027883a 	mov	r19,zero
  806498:	003f1b06 	br	806108 <__alt_mem_onchip_mem+0xff786108>
  80649c:	d8800817 	ldw	r2,32(sp)
  8064a0:	11e9c83a 	sub	r20,r2,r7
  8064a4:	0005883a 	mov	r2,zero
  8064a8:	003d5406 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  8064ac:	00800044 	movi	r2,1
  8064b0:	003dc706 	br	805bd0 <__alt_mem_onchip_mem+0xff785bd0>
  8064b4:	d8c00217 	ldw	r3,8(sp)
  8064b8:	00800d84 	movi	r2,54
  8064bc:	dd400a17 	ldw	r21,40(sp)
  8064c0:	10c5c83a 	sub	r2,r2,r3
  8064c4:	dd000817 	ldw	r20,32(sp)
  8064c8:	003d4c06 	br	8059fc <__alt_mem_onchip_mem+0xff7859fc>
  8064cc:	dc800f15 	stw	r18,60(sp)
  8064d0:	dcc01015 	stw	r19,64(sp)
  8064d4:	04000084 	movi	r16,2
  8064d8:	003bed06 	br	805490 <__alt_mem_onchip_mem+0xff785490>
  8064dc:	d9000617 	ldw	r4,24(sp)
  8064e0:	203f0d26 	beq	r4,zero,806118 <__alt_mem_onchip_mem+0xff786118>
  8064e4:	d9800c17 	ldw	r6,48(sp)
  8064e8:	01bcab0e 	bge	zero,r6,805798 <__alt_mem_onchip_mem+0xff785798>
  8064ec:	d9401017 	ldw	r5,64(sp)
  8064f0:	d9000f17 	ldw	r4,60(sp)
  8064f4:	000d883a 	mov	r6,zero
  8064f8:	01d00934 	movhi	r7,16420
  8064fc:	080df740 	call	80df74 <__muldf3>
  806500:	81000044 	addi	r4,r16,1
  806504:	d8800f15 	stw	r2,60(sp)
  806508:	d8c01015 	stw	r3,64(sp)
  80650c:	080f0080 	call	80f008 <__floatsidf>
  806510:	d9800f17 	ldw	r6,60(sp)
  806514:	d9c01017 	ldw	r7,64(sp)
  806518:	1009883a 	mov	r4,r2
  80651c:	180b883a 	mov	r5,r3
  806520:	080df740 	call	80df74 <__muldf3>
  806524:	01d00734 	movhi	r7,16412
  806528:	000d883a 	mov	r6,zero
  80652c:	1009883a 	mov	r4,r2
  806530:	180b883a 	mov	r5,r3
  806534:	080cb880 	call	80cb88 <__adddf3>
  806538:	d9c00517 	ldw	r7,20(sp)
  80653c:	047f3034 	movhi	r17,64704
  806540:	1021883a 	mov	r16,r2
  806544:	39ffffc4 	addi	r7,r7,-1
  806548:	d9c01315 	stw	r7,76(sp)
  80654c:	1c63883a 	add	r17,r3,r17
  806550:	db000c17 	ldw	r12,48(sp)
  806554:	003bea06 	br	805500 <__alt_mem_onchip_mem+0xff785500>
  806558:	dc000915 	stw	r16,36(sp)
  80655c:	003e0e06 	br	805d98 <__alt_mem_onchip_mem+0xff785d98>
  806560:	01000e44 	movi	r4,57
  806564:	8825883a 	mov	r18,r17
  806568:	9dc00044 	addi	r23,r19,1
  80656c:	99000005 	stb	r4,0(r19)
  806570:	a023883a 	mov	r17,r20
  806574:	dc000915 	stw	r16,36(sp)
  806578:	003da406 	br	805c0c <__alt_mem_onchip_mem+0xff785c0c>
  80657c:	d9801417 	ldw	r6,80(sp)
  806580:	d9c01517 	ldw	r7,84(sp)
  806584:	0009883a 	mov	r4,zero
  806588:	014ff834 	movhi	r5,16352
  80658c:	080e68c0 	call	80e68c <__subdf3>
  806590:	880d883a 	mov	r6,r17
  806594:	a00f883a 	mov	r7,r20
  806598:	1009883a 	mov	r4,r2
  80659c:	180b883a 	mov	r5,r3
  8065a0:	080dda40 	call	80dda4 <__gedf2>
  8065a4:	00bc7c0e 	bge	zero,r2,805798 <__alt_mem_onchip_mem+0xff785798>
  8065a8:	01000c04 	movi	r4,48
  8065ac:	00000106 	br	8065b4 <_dtoa_r+0x1580>
  8065b0:	102f883a 	mov	r23,r2
  8065b4:	b8bfffc4 	addi	r2,r23,-1
  8065b8:	10c00007 	ldb	r3,0(r2)
  8065bc:	193ffc26 	beq	r3,r4,8065b0 <__alt_mem_onchip_mem+0xff7865b0>
  8065c0:	d9801317 	ldw	r6,76(sp)
  8065c4:	d9800515 	stw	r6,20(sp)
  8065c8:	003c4406 	br	8056dc <__alt_mem_onchip_mem+0xff7856dc>
  8065cc:	d9801317 	ldw	r6,76(sp)
  8065d0:	d9800515 	stw	r6,20(sp)
  8065d4:	003cea06 	br	805980 <__alt_mem_onchip_mem+0xff785980>
  8065d8:	dd800f17 	ldw	r22,60(sp)
  8065dc:	dcc01017 	ldw	r19,64(sp)
  8065e0:	dc801217 	ldw	r18,72(sp)
  8065e4:	003c6c06 	br	805798 <__alt_mem_onchip_mem+0xff785798>
  8065e8:	903e031e 	bne	r18,zero,805df8 <__alt_mem_onchip_mem+0xff785df8>
  8065ec:	003ebb06 	br	8060dc <__alt_mem_onchip_mem+0xff7860dc>
  8065f0:	103e6c1e 	bne	r2,zero,805fa4 <__alt_mem_onchip_mem+0xff785fa4>
  8065f4:	4080004c 	andi	r2,r8,1
  8065f8:	103e6a26 	beq	r2,zero,805fa4 <__alt_mem_onchip_mem+0xff785fa4>
  8065fc:	003e6606 	br	805f98 <__alt_mem_onchip_mem+0xff785f98>
  806600:	d8c00317 	ldw	r3,12(sp)
  806604:	00800084 	movi	r2,2
  806608:	10c02916 	blt	r2,r3,8066b0 <_dtoa_r+0x167c>
  80660c:	d9000c17 	ldw	r4,48(sp)
  806610:	003e8806 	br	806034 <__alt_mem_onchip_mem+0xff786034>
  806614:	04000084 	movi	r16,2
  806618:	003b9d06 	br	805490 <__alt_mem_onchip_mem+0xff785490>
  80661c:	d9001317 	ldw	r4,76(sp)
  806620:	d9000515 	stw	r4,20(sp)
  806624:	003cd606 	br	805980 <__alt_mem_onchip_mem+0xff785980>
  806628:	d8801317 	ldw	r2,76(sp)
  80662c:	d8800515 	stw	r2,20(sp)
  806630:	003c2a06 	br	8056dc <__alt_mem_onchip_mem+0xff7856dc>
  806634:	d9800317 	ldw	r6,12(sp)
  806638:	00800084 	movi	r2,2
  80663c:	11801516 	blt	r2,r6,806694 <_dtoa_r+0x1660>
  806640:	d9c00c17 	ldw	r7,48(sp)
  806644:	d9c00615 	stw	r7,24(sp)
  806648:	003df706 	br	805e28 <__alt_mem_onchip_mem+0xff785e28>
  80664c:	193d3926 	beq	r3,r4,805b34 <__alt_mem_onchip_mem+0xff785b34>
  806650:	00c00f04 	movi	r3,60
  806654:	1885c83a 	sub	r2,r3,r2
  806658:	003ddf06 	br	805dd8 <__alt_mem_onchip_mem+0xff785dd8>
  80665c:	e009883a 	mov	r4,fp
  806660:	e0001115 	stw	zero,68(fp)
  806664:	000b883a 	mov	r5,zero
  806668:	08080b80 	call	8080b8 <_Balloc>
  80666c:	d8800715 	stw	r2,28(sp)
  806670:	d8c00717 	ldw	r3,28(sp)
  806674:	00bfffc4 	movi	r2,-1
  806678:	01000044 	movi	r4,1
  80667c:	d8800c15 	stw	r2,48(sp)
  806680:	e0c01015 	stw	r3,64(fp)
  806684:	d9000b15 	stw	r4,44(sp)
  806688:	d8800615 	stw	r2,24(sp)
  80668c:	d8002215 	stw	zero,136(sp)
  806690:	003c4106 	br	805798 <__alt_mem_onchip_mem+0xff785798>
  806694:	d8c00c17 	ldw	r3,48(sp)
  806698:	d8c00615 	stw	r3,24(sp)
  80669c:	003e7006 	br	806060 <__alt_mem_onchip_mem+0xff786060>
  8066a0:	04400044 	movi	r17,1
  8066a4:	003b2006 	br	805328 <__alt_mem_onchip_mem+0xff785328>
  8066a8:	000b883a 	mov	r5,zero
  8066ac:	003b3d06 	br	8053a4 <__alt_mem_onchip_mem+0xff7853a4>
  8066b0:	d8800c17 	ldw	r2,48(sp)
  8066b4:	d8800615 	stw	r2,24(sp)
  8066b8:	003e6906 	br	806060 <__alt_mem_onchip_mem+0xff786060>

008066bc <__sflush_r>:
  8066bc:	2880030b 	ldhu	r2,12(r5)
  8066c0:	defffb04 	addi	sp,sp,-20
  8066c4:	dcc00315 	stw	r19,12(sp)
  8066c8:	dc400115 	stw	r17,4(sp)
  8066cc:	dfc00415 	stw	ra,16(sp)
  8066d0:	dc800215 	stw	r18,8(sp)
  8066d4:	dc000015 	stw	r16,0(sp)
  8066d8:	10c0020c 	andi	r3,r2,8
  8066dc:	2823883a 	mov	r17,r5
  8066e0:	2027883a 	mov	r19,r4
  8066e4:	1800311e 	bne	r3,zero,8067ac <__sflush_r+0xf0>
  8066e8:	28c00117 	ldw	r3,4(r5)
  8066ec:	10820014 	ori	r2,r2,2048
  8066f0:	2880030d 	sth	r2,12(r5)
  8066f4:	00c04b0e 	bge	zero,r3,806824 <__sflush_r+0x168>
  8066f8:	8a000a17 	ldw	r8,40(r17)
  8066fc:	40002326 	beq	r8,zero,80678c <__sflush_r+0xd0>
  806700:	9c000017 	ldw	r16,0(r19)
  806704:	10c4000c 	andi	r3,r2,4096
  806708:	98000015 	stw	zero,0(r19)
  80670c:	18004826 	beq	r3,zero,806830 <__sflush_r+0x174>
  806710:	89801417 	ldw	r6,80(r17)
  806714:	10c0010c 	andi	r3,r2,4
  806718:	18000626 	beq	r3,zero,806734 <__sflush_r+0x78>
  80671c:	88c00117 	ldw	r3,4(r17)
  806720:	88800c17 	ldw	r2,48(r17)
  806724:	30cdc83a 	sub	r6,r6,r3
  806728:	10000226 	beq	r2,zero,806734 <__sflush_r+0x78>
  80672c:	88800f17 	ldw	r2,60(r17)
  806730:	308dc83a 	sub	r6,r6,r2
  806734:	89400717 	ldw	r5,28(r17)
  806738:	000f883a 	mov	r7,zero
  80673c:	9809883a 	mov	r4,r19
  806740:	403ee83a 	callr	r8
  806744:	00ffffc4 	movi	r3,-1
  806748:	10c04426 	beq	r2,r3,80685c <__sflush_r+0x1a0>
  80674c:	88c0030b 	ldhu	r3,12(r17)
  806750:	89000417 	ldw	r4,16(r17)
  806754:	88000115 	stw	zero,4(r17)
  806758:	197dffcc 	andi	r5,r3,63487
  80675c:	8940030d 	sth	r5,12(r17)
  806760:	89000015 	stw	r4,0(r17)
  806764:	18c4000c 	andi	r3,r3,4096
  806768:	18002c1e 	bne	r3,zero,80681c <__sflush_r+0x160>
  80676c:	89400c17 	ldw	r5,48(r17)
  806770:	9c000015 	stw	r16,0(r19)
  806774:	28000526 	beq	r5,zero,80678c <__sflush_r+0xd0>
  806778:	88801004 	addi	r2,r17,64
  80677c:	28800226 	beq	r5,r2,806788 <__sflush_r+0xcc>
  806780:	9809883a 	mov	r4,r19
  806784:	0806e280 	call	806e28 <_free_r>
  806788:	88000c15 	stw	zero,48(r17)
  80678c:	0005883a 	mov	r2,zero
  806790:	dfc00417 	ldw	ra,16(sp)
  806794:	dcc00317 	ldw	r19,12(sp)
  806798:	dc800217 	ldw	r18,8(sp)
  80679c:	dc400117 	ldw	r17,4(sp)
  8067a0:	dc000017 	ldw	r16,0(sp)
  8067a4:	dec00504 	addi	sp,sp,20
  8067a8:	f800283a 	ret
  8067ac:	2c800417 	ldw	r18,16(r5)
  8067b0:	903ff626 	beq	r18,zero,80678c <__alt_mem_onchip_mem+0xff78678c>
  8067b4:	2c000017 	ldw	r16,0(r5)
  8067b8:	108000cc 	andi	r2,r2,3
  8067bc:	2c800015 	stw	r18,0(r5)
  8067c0:	84a1c83a 	sub	r16,r16,r18
  8067c4:	1000131e 	bne	r2,zero,806814 <__sflush_r+0x158>
  8067c8:	28800517 	ldw	r2,20(r5)
  8067cc:	88800215 	stw	r2,8(r17)
  8067d0:	04000316 	blt	zero,r16,8067e0 <__sflush_r+0x124>
  8067d4:	003fed06 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  8067d8:	90a5883a 	add	r18,r18,r2
  8067dc:	043feb0e 	bge	zero,r16,80678c <__alt_mem_onchip_mem+0xff78678c>
  8067e0:	88800917 	ldw	r2,36(r17)
  8067e4:	89400717 	ldw	r5,28(r17)
  8067e8:	800f883a 	mov	r7,r16
  8067ec:	900d883a 	mov	r6,r18
  8067f0:	9809883a 	mov	r4,r19
  8067f4:	103ee83a 	callr	r2
  8067f8:	80a1c83a 	sub	r16,r16,r2
  8067fc:	00bff616 	blt	zero,r2,8067d8 <__alt_mem_onchip_mem+0xff7867d8>
  806800:	88c0030b 	ldhu	r3,12(r17)
  806804:	00bfffc4 	movi	r2,-1
  806808:	18c01014 	ori	r3,r3,64
  80680c:	88c0030d 	sth	r3,12(r17)
  806810:	003fdf06 	br	806790 <__alt_mem_onchip_mem+0xff786790>
  806814:	0005883a 	mov	r2,zero
  806818:	003fec06 	br	8067cc <__alt_mem_onchip_mem+0xff7867cc>
  80681c:	88801415 	stw	r2,80(r17)
  806820:	003fd206 	br	80676c <__alt_mem_onchip_mem+0xff78676c>
  806824:	28c00f17 	ldw	r3,60(r5)
  806828:	00ffb316 	blt	zero,r3,8066f8 <__alt_mem_onchip_mem+0xff7866f8>
  80682c:	003fd706 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  806830:	89400717 	ldw	r5,28(r17)
  806834:	000d883a 	mov	r6,zero
  806838:	01c00044 	movi	r7,1
  80683c:	9809883a 	mov	r4,r19
  806840:	403ee83a 	callr	r8
  806844:	100d883a 	mov	r6,r2
  806848:	00bfffc4 	movi	r2,-1
  80684c:	30801426 	beq	r6,r2,8068a0 <__sflush_r+0x1e4>
  806850:	8880030b 	ldhu	r2,12(r17)
  806854:	8a000a17 	ldw	r8,40(r17)
  806858:	003fae06 	br	806714 <__alt_mem_onchip_mem+0xff786714>
  80685c:	98c00017 	ldw	r3,0(r19)
  806860:	183fba26 	beq	r3,zero,80674c <__alt_mem_onchip_mem+0xff78674c>
  806864:	01000744 	movi	r4,29
  806868:	19000626 	beq	r3,r4,806884 <__sflush_r+0x1c8>
  80686c:	01000584 	movi	r4,22
  806870:	19000426 	beq	r3,r4,806884 <__sflush_r+0x1c8>
  806874:	88c0030b 	ldhu	r3,12(r17)
  806878:	18c01014 	ori	r3,r3,64
  80687c:	88c0030d 	sth	r3,12(r17)
  806880:	003fc306 	br	806790 <__alt_mem_onchip_mem+0xff786790>
  806884:	8880030b 	ldhu	r2,12(r17)
  806888:	88c00417 	ldw	r3,16(r17)
  80688c:	88000115 	stw	zero,4(r17)
  806890:	10bdffcc 	andi	r2,r2,63487
  806894:	8880030d 	sth	r2,12(r17)
  806898:	88c00015 	stw	r3,0(r17)
  80689c:	003fb306 	br	80676c <__alt_mem_onchip_mem+0xff78676c>
  8068a0:	98800017 	ldw	r2,0(r19)
  8068a4:	103fea26 	beq	r2,zero,806850 <__alt_mem_onchip_mem+0xff786850>
  8068a8:	00c00744 	movi	r3,29
  8068ac:	10c00226 	beq	r2,r3,8068b8 <__sflush_r+0x1fc>
  8068b0:	00c00584 	movi	r3,22
  8068b4:	10c0031e 	bne	r2,r3,8068c4 <__sflush_r+0x208>
  8068b8:	9c000015 	stw	r16,0(r19)
  8068bc:	0005883a 	mov	r2,zero
  8068c0:	003fb306 	br	806790 <__alt_mem_onchip_mem+0xff786790>
  8068c4:	88c0030b 	ldhu	r3,12(r17)
  8068c8:	3005883a 	mov	r2,r6
  8068cc:	18c01014 	ori	r3,r3,64
  8068d0:	88c0030d 	sth	r3,12(r17)
  8068d4:	003fae06 	br	806790 <__alt_mem_onchip_mem+0xff786790>

008068d8 <_fflush_r>:
  8068d8:	defffd04 	addi	sp,sp,-12
  8068dc:	dc000115 	stw	r16,4(sp)
  8068e0:	dfc00215 	stw	ra,8(sp)
  8068e4:	2021883a 	mov	r16,r4
  8068e8:	20000226 	beq	r4,zero,8068f4 <_fflush_r+0x1c>
  8068ec:	20800e17 	ldw	r2,56(r4)
  8068f0:	10000c26 	beq	r2,zero,806924 <_fflush_r+0x4c>
  8068f4:	2880030f 	ldh	r2,12(r5)
  8068f8:	1000051e 	bne	r2,zero,806910 <_fflush_r+0x38>
  8068fc:	0005883a 	mov	r2,zero
  806900:	dfc00217 	ldw	ra,8(sp)
  806904:	dc000117 	ldw	r16,4(sp)
  806908:	dec00304 	addi	sp,sp,12
  80690c:	f800283a 	ret
  806910:	8009883a 	mov	r4,r16
  806914:	dfc00217 	ldw	ra,8(sp)
  806918:	dc000117 	ldw	r16,4(sp)
  80691c:	dec00304 	addi	sp,sp,12
  806920:	08066bc1 	jmpi	8066bc <__sflush_r>
  806924:	d9400015 	stw	r5,0(sp)
  806928:	0806cb40 	call	806cb4 <__sinit>
  80692c:	d9400017 	ldw	r5,0(sp)
  806930:	003ff006 	br	8068f4 <__alt_mem_onchip_mem+0xff7868f4>

00806934 <fflush>:
  806934:	20000526 	beq	r4,zero,80694c <fflush+0x18>
  806938:	00802074 	movhi	r2,129
  80693c:	10956904 	addi	r2,r2,21924
  806940:	200b883a 	mov	r5,r4
  806944:	11000017 	ldw	r4,0(r2)
  806948:	08068d81 	jmpi	8068d8 <_fflush_r>
  80694c:	00802074 	movhi	r2,129
  806950:	10956804 	addi	r2,r2,21920
  806954:	11000017 	ldw	r4,0(r2)
  806958:	01402034 	movhi	r5,128
  80695c:	295a3604 	addi	r5,r5,26840
  806960:	08071fc1 	jmpi	8071fc <_fwalk_reent>

00806964 <__fp_unlock>:
  806964:	0005883a 	mov	r2,zero
  806968:	f800283a 	ret

0080696c <_cleanup_r>:
  80696c:	01402074 	movhi	r5,129
  806970:	296afb04 	addi	r5,r5,-21524
  806974:	08071fc1 	jmpi	8071fc <_fwalk_reent>

00806978 <__sinit.part.1>:
  806978:	defff704 	addi	sp,sp,-36
  80697c:	00c02034 	movhi	r3,128
  806980:	dfc00815 	stw	ra,32(sp)
  806984:	ddc00715 	stw	r23,28(sp)
  806988:	dd800615 	stw	r22,24(sp)
  80698c:	dd400515 	stw	r21,20(sp)
  806990:	dd000415 	stw	r20,16(sp)
  806994:	dcc00315 	stw	r19,12(sp)
  806998:	dc800215 	stw	r18,8(sp)
  80699c:	dc400115 	stw	r17,4(sp)
  8069a0:	dc000015 	stw	r16,0(sp)
  8069a4:	18da5b04 	addi	r3,r3,26988
  8069a8:	24000117 	ldw	r16,4(r4)
  8069ac:	20c00f15 	stw	r3,60(r4)
  8069b0:	2080bb04 	addi	r2,r4,748
  8069b4:	00c000c4 	movi	r3,3
  8069b8:	20c0b915 	stw	r3,740(r4)
  8069bc:	2080ba15 	stw	r2,744(r4)
  8069c0:	2000b815 	stw	zero,736(r4)
  8069c4:	05c00204 	movi	r23,8
  8069c8:	00800104 	movi	r2,4
  8069cc:	2025883a 	mov	r18,r4
  8069d0:	b80d883a 	mov	r6,r23
  8069d4:	81001704 	addi	r4,r16,92
  8069d8:	000b883a 	mov	r5,zero
  8069dc:	80000015 	stw	zero,0(r16)
  8069e0:	80000115 	stw	zero,4(r16)
  8069e4:	80000215 	stw	zero,8(r16)
  8069e8:	8080030d 	sth	r2,12(r16)
  8069ec:	80001915 	stw	zero,100(r16)
  8069f0:	8000038d 	sth	zero,14(r16)
  8069f4:	80000415 	stw	zero,16(r16)
  8069f8:	80000515 	stw	zero,20(r16)
  8069fc:	80000615 	stw	zero,24(r16)
  806a00:	0807f900 	call	807f90 <memset>
  806a04:	05802074 	movhi	r22,129
  806a08:	94400217 	ldw	r17,8(r18)
  806a0c:	05402074 	movhi	r21,129
  806a10:	05002074 	movhi	r20,129
  806a14:	04c02074 	movhi	r19,129
  806a18:	b5a45f04 	addi	r22,r22,-28292
  806a1c:	ad647604 	addi	r21,r21,-28200
  806a20:	a5249504 	addi	r20,r20,-28076
  806a24:	9ce4ac04 	addi	r19,r19,-27984
  806a28:	85800815 	stw	r22,32(r16)
  806a2c:	85400915 	stw	r21,36(r16)
  806a30:	85000a15 	stw	r20,40(r16)
  806a34:	84c00b15 	stw	r19,44(r16)
  806a38:	84000715 	stw	r16,28(r16)
  806a3c:	00800284 	movi	r2,10
  806a40:	8880030d 	sth	r2,12(r17)
  806a44:	00800044 	movi	r2,1
  806a48:	b80d883a 	mov	r6,r23
  806a4c:	89001704 	addi	r4,r17,92
  806a50:	000b883a 	mov	r5,zero
  806a54:	88000015 	stw	zero,0(r17)
  806a58:	88000115 	stw	zero,4(r17)
  806a5c:	88000215 	stw	zero,8(r17)
  806a60:	88001915 	stw	zero,100(r17)
  806a64:	8880038d 	sth	r2,14(r17)
  806a68:	88000415 	stw	zero,16(r17)
  806a6c:	88000515 	stw	zero,20(r17)
  806a70:	88000615 	stw	zero,24(r17)
  806a74:	0807f900 	call	807f90 <memset>
  806a78:	94000317 	ldw	r16,12(r18)
  806a7c:	00800484 	movi	r2,18
  806a80:	8c400715 	stw	r17,28(r17)
  806a84:	8d800815 	stw	r22,32(r17)
  806a88:	8d400915 	stw	r21,36(r17)
  806a8c:	8d000a15 	stw	r20,40(r17)
  806a90:	8cc00b15 	stw	r19,44(r17)
  806a94:	8080030d 	sth	r2,12(r16)
  806a98:	00800084 	movi	r2,2
  806a9c:	80000015 	stw	zero,0(r16)
  806aa0:	80000115 	stw	zero,4(r16)
  806aa4:	80000215 	stw	zero,8(r16)
  806aa8:	80001915 	stw	zero,100(r16)
  806aac:	8080038d 	sth	r2,14(r16)
  806ab0:	80000415 	stw	zero,16(r16)
  806ab4:	80000515 	stw	zero,20(r16)
  806ab8:	80000615 	stw	zero,24(r16)
  806abc:	b80d883a 	mov	r6,r23
  806ac0:	000b883a 	mov	r5,zero
  806ac4:	81001704 	addi	r4,r16,92
  806ac8:	0807f900 	call	807f90 <memset>
  806acc:	00800044 	movi	r2,1
  806ad0:	84000715 	stw	r16,28(r16)
  806ad4:	85800815 	stw	r22,32(r16)
  806ad8:	85400915 	stw	r21,36(r16)
  806adc:	85000a15 	stw	r20,40(r16)
  806ae0:	84c00b15 	stw	r19,44(r16)
  806ae4:	90800e15 	stw	r2,56(r18)
  806ae8:	dfc00817 	ldw	ra,32(sp)
  806aec:	ddc00717 	ldw	r23,28(sp)
  806af0:	dd800617 	ldw	r22,24(sp)
  806af4:	dd400517 	ldw	r21,20(sp)
  806af8:	dd000417 	ldw	r20,16(sp)
  806afc:	dcc00317 	ldw	r19,12(sp)
  806b00:	dc800217 	ldw	r18,8(sp)
  806b04:	dc400117 	ldw	r17,4(sp)
  806b08:	dc000017 	ldw	r16,0(sp)
  806b0c:	dec00904 	addi	sp,sp,36
  806b10:	f800283a 	ret

00806b14 <__fp_lock>:
  806b14:	0005883a 	mov	r2,zero
  806b18:	f800283a 	ret

00806b1c <__sfmoreglue>:
  806b1c:	defffc04 	addi	sp,sp,-16
  806b20:	dc400115 	stw	r17,4(sp)
  806b24:	2c7fffc4 	addi	r17,r5,-1
  806b28:	8c401a24 	muli	r17,r17,104
  806b2c:	dc800215 	stw	r18,8(sp)
  806b30:	2825883a 	mov	r18,r5
  806b34:	89401d04 	addi	r5,r17,116
  806b38:	dc000015 	stw	r16,0(sp)
  806b3c:	dfc00315 	stw	ra,12(sp)
  806b40:	08075580 	call	807558 <_malloc_r>
  806b44:	1021883a 	mov	r16,r2
  806b48:	10000726 	beq	r2,zero,806b68 <__sfmoreglue+0x4c>
  806b4c:	11000304 	addi	r4,r2,12
  806b50:	10000015 	stw	zero,0(r2)
  806b54:	14800115 	stw	r18,4(r2)
  806b58:	11000215 	stw	r4,8(r2)
  806b5c:	89801a04 	addi	r6,r17,104
  806b60:	000b883a 	mov	r5,zero
  806b64:	0807f900 	call	807f90 <memset>
  806b68:	8005883a 	mov	r2,r16
  806b6c:	dfc00317 	ldw	ra,12(sp)
  806b70:	dc800217 	ldw	r18,8(sp)
  806b74:	dc400117 	ldw	r17,4(sp)
  806b78:	dc000017 	ldw	r16,0(sp)
  806b7c:	dec00404 	addi	sp,sp,16
  806b80:	f800283a 	ret

00806b84 <__sfp>:
  806b84:	defffb04 	addi	sp,sp,-20
  806b88:	dc000015 	stw	r16,0(sp)
  806b8c:	04002074 	movhi	r16,129
  806b90:	84156804 	addi	r16,r16,21920
  806b94:	dcc00315 	stw	r19,12(sp)
  806b98:	2027883a 	mov	r19,r4
  806b9c:	81000017 	ldw	r4,0(r16)
  806ba0:	dfc00415 	stw	ra,16(sp)
  806ba4:	dc800215 	stw	r18,8(sp)
  806ba8:	20800e17 	ldw	r2,56(r4)
  806bac:	dc400115 	stw	r17,4(sp)
  806bb0:	1000021e 	bne	r2,zero,806bbc <__sfp+0x38>
  806bb4:	08069780 	call	806978 <__sinit.part.1>
  806bb8:	81000017 	ldw	r4,0(r16)
  806bbc:	2480b804 	addi	r18,r4,736
  806bc0:	047fffc4 	movi	r17,-1
  806bc4:	91000117 	ldw	r4,4(r18)
  806bc8:	94000217 	ldw	r16,8(r18)
  806bcc:	213fffc4 	addi	r4,r4,-1
  806bd0:	20000a16 	blt	r4,zero,806bfc <__sfp+0x78>
  806bd4:	8080030f 	ldh	r2,12(r16)
  806bd8:	10000c26 	beq	r2,zero,806c0c <__sfp+0x88>
  806bdc:	80c01d04 	addi	r3,r16,116
  806be0:	00000206 	br	806bec <__sfp+0x68>
  806be4:	18bfe60f 	ldh	r2,-104(r3)
  806be8:	10000826 	beq	r2,zero,806c0c <__sfp+0x88>
  806bec:	213fffc4 	addi	r4,r4,-1
  806bf0:	1c3ffd04 	addi	r16,r3,-12
  806bf4:	18c01a04 	addi	r3,r3,104
  806bf8:	247ffa1e 	bne	r4,r17,806be4 <__alt_mem_onchip_mem+0xff786be4>
  806bfc:	90800017 	ldw	r2,0(r18)
  806c00:	10001d26 	beq	r2,zero,806c78 <__sfp+0xf4>
  806c04:	1025883a 	mov	r18,r2
  806c08:	003fee06 	br	806bc4 <__alt_mem_onchip_mem+0xff786bc4>
  806c0c:	00bfffc4 	movi	r2,-1
  806c10:	8080038d 	sth	r2,14(r16)
  806c14:	00800044 	movi	r2,1
  806c18:	8080030d 	sth	r2,12(r16)
  806c1c:	80001915 	stw	zero,100(r16)
  806c20:	80000015 	stw	zero,0(r16)
  806c24:	80000215 	stw	zero,8(r16)
  806c28:	80000115 	stw	zero,4(r16)
  806c2c:	80000415 	stw	zero,16(r16)
  806c30:	80000515 	stw	zero,20(r16)
  806c34:	80000615 	stw	zero,24(r16)
  806c38:	01800204 	movi	r6,8
  806c3c:	000b883a 	mov	r5,zero
  806c40:	81001704 	addi	r4,r16,92
  806c44:	0807f900 	call	807f90 <memset>
  806c48:	8005883a 	mov	r2,r16
  806c4c:	80000c15 	stw	zero,48(r16)
  806c50:	80000d15 	stw	zero,52(r16)
  806c54:	80001115 	stw	zero,68(r16)
  806c58:	80001215 	stw	zero,72(r16)
  806c5c:	dfc00417 	ldw	ra,16(sp)
  806c60:	dcc00317 	ldw	r19,12(sp)
  806c64:	dc800217 	ldw	r18,8(sp)
  806c68:	dc400117 	ldw	r17,4(sp)
  806c6c:	dc000017 	ldw	r16,0(sp)
  806c70:	dec00504 	addi	sp,sp,20
  806c74:	f800283a 	ret
  806c78:	01400104 	movi	r5,4
  806c7c:	9809883a 	mov	r4,r19
  806c80:	0806b1c0 	call	806b1c <__sfmoreglue>
  806c84:	90800015 	stw	r2,0(r18)
  806c88:	103fde1e 	bne	r2,zero,806c04 <__alt_mem_onchip_mem+0xff786c04>
  806c8c:	00800304 	movi	r2,12
  806c90:	98800015 	stw	r2,0(r19)
  806c94:	0005883a 	mov	r2,zero
  806c98:	003ff006 	br	806c5c <__alt_mem_onchip_mem+0xff786c5c>

00806c9c <_cleanup>:
  806c9c:	00802074 	movhi	r2,129
  806ca0:	10956804 	addi	r2,r2,21920
  806ca4:	11000017 	ldw	r4,0(r2)
  806ca8:	01402074 	movhi	r5,129
  806cac:	296afb04 	addi	r5,r5,-21524
  806cb0:	08071fc1 	jmpi	8071fc <_fwalk_reent>

00806cb4 <__sinit>:
  806cb4:	20800e17 	ldw	r2,56(r4)
  806cb8:	10000126 	beq	r2,zero,806cc0 <__sinit+0xc>
  806cbc:	f800283a 	ret
  806cc0:	08069781 	jmpi	806978 <__sinit.part.1>

00806cc4 <__sfp_lock_acquire>:
  806cc4:	f800283a 	ret

00806cc8 <__sfp_lock_release>:
  806cc8:	f800283a 	ret

00806ccc <__sinit_lock_acquire>:
  806ccc:	f800283a 	ret

00806cd0 <__sinit_lock_release>:
  806cd0:	f800283a 	ret

00806cd4 <__fp_lock_all>:
  806cd4:	00802074 	movhi	r2,129
  806cd8:	10956904 	addi	r2,r2,21924
  806cdc:	11000017 	ldw	r4,0(r2)
  806ce0:	01402034 	movhi	r5,128
  806ce4:	295ac504 	addi	r5,r5,27412
  806ce8:	08071381 	jmpi	807138 <_fwalk>

00806cec <__fp_unlock_all>:
  806cec:	00802074 	movhi	r2,129
  806cf0:	10956904 	addi	r2,r2,21924
  806cf4:	11000017 	ldw	r4,0(r2)
  806cf8:	01402034 	movhi	r5,128
  806cfc:	295a5904 	addi	r5,r5,26980
  806d00:	08071381 	jmpi	807138 <_fwalk>

00806d04 <_malloc_trim_r>:
  806d04:	defffb04 	addi	sp,sp,-20
  806d08:	dcc00315 	stw	r19,12(sp)
  806d0c:	04c02074 	movhi	r19,129
  806d10:	dc800215 	stw	r18,8(sp)
  806d14:	dc400115 	stw	r17,4(sp)
  806d18:	dc000015 	stw	r16,0(sp)
  806d1c:	dfc00415 	stw	ra,16(sp)
  806d20:	2821883a 	mov	r16,r5
  806d24:	9ccf6b04 	addi	r19,r19,15788
  806d28:	2025883a 	mov	r18,r4
  806d2c:	080f8980 	call	80f898 <__malloc_lock>
  806d30:	98800217 	ldw	r2,8(r19)
  806d34:	14400117 	ldw	r17,4(r2)
  806d38:	00bfff04 	movi	r2,-4
  806d3c:	88a2703a 	and	r17,r17,r2
  806d40:	8c21c83a 	sub	r16,r17,r16
  806d44:	8403fbc4 	addi	r16,r16,4079
  806d48:	8020d33a 	srli	r16,r16,12
  806d4c:	0083ffc4 	movi	r2,4095
  806d50:	843fffc4 	addi	r16,r16,-1
  806d54:	8020933a 	slli	r16,r16,12
  806d58:	1400060e 	bge	r2,r16,806d74 <_malloc_trim_r+0x70>
  806d5c:	000b883a 	mov	r5,zero
  806d60:	9009883a 	mov	r4,r18
  806d64:	08091280 	call	809128 <_sbrk_r>
  806d68:	98c00217 	ldw	r3,8(r19)
  806d6c:	1c47883a 	add	r3,r3,r17
  806d70:	10c00a26 	beq	r2,r3,806d9c <_malloc_trim_r+0x98>
  806d74:	9009883a 	mov	r4,r18
  806d78:	080f8bc0 	call	80f8bc <__malloc_unlock>
  806d7c:	0005883a 	mov	r2,zero
  806d80:	dfc00417 	ldw	ra,16(sp)
  806d84:	dcc00317 	ldw	r19,12(sp)
  806d88:	dc800217 	ldw	r18,8(sp)
  806d8c:	dc400117 	ldw	r17,4(sp)
  806d90:	dc000017 	ldw	r16,0(sp)
  806d94:	dec00504 	addi	sp,sp,20
  806d98:	f800283a 	ret
  806d9c:	040bc83a 	sub	r5,zero,r16
  806da0:	9009883a 	mov	r4,r18
  806da4:	08091280 	call	809128 <_sbrk_r>
  806da8:	00ffffc4 	movi	r3,-1
  806dac:	10c00d26 	beq	r2,r3,806de4 <_malloc_trim_r+0xe0>
  806db0:	00c02074 	movhi	r3,129
  806db4:	18dd1004 	addi	r3,r3,29760
  806db8:	18800017 	ldw	r2,0(r3)
  806dbc:	99000217 	ldw	r4,8(r19)
  806dc0:	8c23c83a 	sub	r17,r17,r16
  806dc4:	8c400054 	ori	r17,r17,1
  806dc8:	1421c83a 	sub	r16,r2,r16
  806dcc:	24400115 	stw	r17,4(r4)
  806dd0:	9009883a 	mov	r4,r18
  806dd4:	1c000015 	stw	r16,0(r3)
  806dd8:	080f8bc0 	call	80f8bc <__malloc_unlock>
  806ddc:	00800044 	movi	r2,1
  806de0:	003fe706 	br	806d80 <__alt_mem_onchip_mem+0xff786d80>
  806de4:	000b883a 	mov	r5,zero
  806de8:	9009883a 	mov	r4,r18
  806dec:	08091280 	call	809128 <_sbrk_r>
  806df0:	99000217 	ldw	r4,8(r19)
  806df4:	014003c4 	movi	r5,15
  806df8:	1107c83a 	sub	r3,r2,r4
  806dfc:	28ffdd0e 	bge	r5,r3,806d74 <__alt_mem_onchip_mem+0xff786d74>
  806e00:	01402074 	movhi	r5,129
  806e04:	29556b04 	addi	r5,r5,21932
  806e08:	29400017 	ldw	r5,0(r5)
  806e0c:	18c00054 	ori	r3,r3,1
  806e10:	20c00115 	stw	r3,4(r4)
  806e14:	00c02074 	movhi	r3,129
  806e18:	1145c83a 	sub	r2,r2,r5
  806e1c:	18dd1004 	addi	r3,r3,29760
  806e20:	18800015 	stw	r2,0(r3)
  806e24:	003fd306 	br	806d74 <__alt_mem_onchip_mem+0xff786d74>

00806e28 <_free_r>:
  806e28:	28004126 	beq	r5,zero,806f30 <_free_r+0x108>
  806e2c:	defffd04 	addi	sp,sp,-12
  806e30:	dc400115 	stw	r17,4(sp)
  806e34:	dc000015 	stw	r16,0(sp)
  806e38:	2023883a 	mov	r17,r4
  806e3c:	2821883a 	mov	r16,r5
  806e40:	dfc00215 	stw	ra,8(sp)
  806e44:	080f8980 	call	80f898 <__malloc_lock>
  806e48:	81ffff17 	ldw	r7,-4(r16)
  806e4c:	00bfff84 	movi	r2,-2
  806e50:	01002074 	movhi	r4,129
  806e54:	81bffe04 	addi	r6,r16,-8
  806e58:	3884703a 	and	r2,r7,r2
  806e5c:	210f6b04 	addi	r4,r4,15788
  806e60:	308b883a 	add	r5,r6,r2
  806e64:	2a400117 	ldw	r9,4(r5)
  806e68:	22000217 	ldw	r8,8(r4)
  806e6c:	00ffff04 	movi	r3,-4
  806e70:	48c6703a 	and	r3,r9,r3
  806e74:	2a005726 	beq	r5,r8,806fd4 <_free_r+0x1ac>
  806e78:	28c00115 	stw	r3,4(r5)
  806e7c:	39c0004c 	andi	r7,r7,1
  806e80:	3800091e 	bne	r7,zero,806ea8 <_free_r+0x80>
  806e84:	823ffe17 	ldw	r8,-8(r16)
  806e88:	22400204 	addi	r9,r4,8
  806e8c:	320dc83a 	sub	r6,r6,r8
  806e90:	31c00217 	ldw	r7,8(r6)
  806e94:	1205883a 	add	r2,r2,r8
  806e98:	3a406526 	beq	r7,r9,807030 <_free_r+0x208>
  806e9c:	32000317 	ldw	r8,12(r6)
  806ea0:	3a000315 	stw	r8,12(r7)
  806ea4:	41c00215 	stw	r7,8(r8)
  806ea8:	28cf883a 	add	r7,r5,r3
  806eac:	39c00117 	ldw	r7,4(r7)
  806eb0:	39c0004c 	andi	r7,r7,1
  806eb4:	38003a26 	beq	r7,zero,806fa0 <_free_r+0x178>
  806eb8:	10c00054 	ori	r3,r2,1
  806ebc:	30c00115 	stw	r3,4(r6)
  806ec0:	3087883a 	add	r3,r6,r2
  806ec4:	18800015 	stw	r2,0(r3)
  806ec8:	00c07fc4 	movi	r3,511
  806ecc:	18801936 	bltu	r3,r2,806f34 <_free_r+0x10c>
  806ed0:	1004d0fa 	srli	r2,r2,3
  806ed4:	01c00044 	movi	r7,1
  806ed8:	21400117 	ldw	r5,4(r4)
  806edc:	10c00044 	addi	r3,r2,1
  806ee0:	18c7883a 	add	r3,r3,r3
  806ee4:	1005d0ba 	srai	r2,r2,2
  806ee8:	18c7883a 	add	r3,r3,r3
  806eec:	18c7883a 	add	r3,r3,r3
  806ef0:	1907883a 	add	r3,r3,r4
  806ef4:	3884983a 	sll	r2,r7,r2
  806ef8:	19c00017 	ldw	r7,0(r3)
  806efc:	1a3ffe04 	addi	r8,r3,-8
  806f00:	1144b03a 	or	r2,r2,r5
  806f04:	32000315 	stw	r8,12(r6)
  806f08:	31c00215 	stw	r7,8(r6)
  806f0c:	20800115 	stw	r2,4(r4)
  806f10:	19800015 	stw	r6,0(r3)
  806f14:	39800315 	stw	r6,12(r7)
  806f18:	8809883a 	mov	r4,r17
  806f1c:	dfc00217 	ldw	ra,8(sp)
  806f20:	dc400117 	ldw	r17,4(sp)
  806f24:	dc000017 	ldw	r16,0(sp)
  806f28:	dec00304 	addi	sp,sp,12
  806f2c:	080f8bc1 	jmpi	80f8bc <__malloc_unlock>
  806f30:	f800283a 	ret
  806f34:	100ad27a 	srli	r5,r2,9
  806f38:	00c00104 	movi	r3,4
  806f3c:	19404a36 	bltu	r3,r5,807068 <_free_r+0x240>
  806f40:	100ad1ba 	srli	r5,r2,6
  806f44:	28c00e44 	addi	r3,r5,57
  806f48:	18c7883a 	add	r3,r3,r3
  806f4c:	29400e04 	addi	r5,r5,56
  806f50:	18c7883a 	add	r3,r3,r3
  806f54:	18c7883a 	add	r3,r3,r3
  806f58:	1909883a 	add	r4,r3,r4
  806f5c:	20c00017 	ldw	r3,0(r4)
  806f60:	01c02074 	movhi	r7,129
  806f64:	213ffe04 	addi	r4,r4,-8
  806f68:	39cf6b04 	addi	r7,r7,15788
  806f6c:	20c04426 	beq	r4,r3,807080 <_free_r+0x258>
  806f70:	01ffff04 	movi	r7,-4
  806f74:	19400117 	ldw	r5,4(r3)
  806f78:	29ca703a 	and	r5,r5,r7
  806f7c:	1140022e 	bgeu	r2,r5,806f88 <_free_r+0x160>
  806f80:	18c00217 	ldw	r3,8(r3)
  806f84:	20fffb1e 	bne	r4,r3,806f74 <__alt_mem_onchip_mem+0xff786f74>
  806f88:	19000317 	ldw	r4,12(r3)
  806f8c:	31000315 	stw	r4,12(r6)
  806f90:	30c00215 	stw	r3,8(r6)
  806f94:	21800215 	stw	r6,8(r4)
  806f98:	19800315 	stw	r6,12(r3)
  806f9c:	003fde06 	br	806f18 <__alt_mem_onchip_mem+0xff786f18>
  806fa0:	29c00217 	ldw	r7,8(r5)
  806fa4:	10c5883a 	add	r2,r2,r3
  806fa8:	00c02074 	movhi	r3,129
  806fac:	18cf6d04 	addi	r3,r3,15796
  806fb0:	38c03b26 	beq	r7,r3,8070a0 <_free_r+0x278>
  806fb4:	2a000317 	ldw	r8,12(r5)
  806fb8:	11400054 	ori	r5,r2,1
  806fbc:	3087883a 	add	r3,r6,r2
  806fc0:	3a000315 	stw	r8,12(r7)
  806fc4:	41c00215 	stw	r7,8(r8)
  806fc8:	31400115 	stw	r5,4(r6)
  806fcc:	18800015 	stw	r2,0(r3)
  806fd0:	003fbd06 	br	806ec8 <__alt_mem_onchip_mem+0xff786ec8>
  806fd4:	39c0004c 	andi	r7,r7,1
  806fd8:	10c5883a 	add	r2,r2,r3
  806fdc:	3800071e 	bne	r7,zero,806ffc <_free_r+0x1d4>
  806fe0:	81fffe17 	ldw	r7,-8(r16)
  806fe4:	31cdc83a 	sub	r6,r6,r7
  806fe8:	30c00317 	ldw	r3,12(r6)
  806fec:	31400217 	ldw	r5,8(r6)
  806ff0:	11c5883a 	add	r2,r2,r7
  806ff4:	28c00315 	stw	r3,12(r5)
  806ff8:	19400215 	stw	r5,8(r3)
  806ffc:	10c00054 	ori	r3,r2,1
  807000:	30c00115 	stw	r3,4(r6)
  807004:	00c02074 	movhi	r3,129
  807008:	18d56c04 	addi	r3,r3,21936
  80700c:	18c00017 	ldw	r3,0(r3)
  807010:	21800215 	stw	r6,8(r4)
  807014:	10ffc036 	bltu	r2,r3,806f18 <__alt_mem_onchip_mem+0xff786f18>
  807018:	00802074 	movhi	r2,129
  80701c:	109d0704 	addi	r2,r2,29724
  807020:	11400017 	ldw	r5,0(r2)
  807024:	8809883a 	mov	r4,r17
  807028:	0806d040 	call	806d04 <_malloc_trim_r>
  80702c:	003fba06 	br	806f18 <__alt_mem_onchip_mem+0xff786f18>
  807030:	28c9883a 	add	r4,r5,r3
  807034:	21000117 	ldw	r4,4(r4)
  807038:	2100004c 	andi	r4,r4,1
  80703c:	2000391e 	bne	r4,zero,807124 <_free_r+0x2fc>
  807040:	29c00217 	ldw	r7,8(r5)
  807044:	29000317 	ldw	r4,12(r5)
  807048:	1885883a 	add	r2,r3,r2
  80704c:	10c00054 	ori	r3,r2,1
  807050:	39000315 	stw	r4,12(r7)
  807054:	21c00215 	stw	r7,8(r4)
  807058:	30c00115 	stw	r3,4(r6)
  80705c:	308d883a 	add	r6,r6,r2
  807060:	30800015 	stw	r2,0(r6)
  807064:	003fac06 	br	806f18 <__alt_mem_onchip_mem+0xff786f18>
  807068:	00c00504 	movi	r3,20
  80706c:	19401536 	bltu	r3,r5,8070c4 <_free_r+0x29c>
  807070:	28c01704 	addi	r3,r5,92
  807074:	18c7883a 	add	r3,r3,r3
  807078:	294016c4 	addi	r5,r5,91
  80707c:	003fb406 	br	806f50 <__alt_mem_onchip_mem+0xff786f50>
  807080:	280bd0ba 	srai	r5,r5,2
  807084:	00c00044 	movi	r3,1
  807088:	38800117 	ldw	r2,4(r7)
  80708c:	194a983a 	sll	r5,r3,r5
  807090:	2007883a 	mov	r3,r4
  807094:	2884b03a 	or	r2,r5,r2
  807098:	38800115 	stw	r2,4(r7)
  80709c:	003fbb06 	br	806f8c <__alt_mem_onchip_mem+0xff786f8c>
  8070a0:	21800515 	stw	r6,20(r4)
  8070a4:	21800415 	stw	r6,16(r4)
  8070a8:	10c00054 	ori	r3,r2,1
  8070ac:	31c00315 	stw	r7,12(r6)
  8070b0:	31c00215 	stw	r7,8(r6)
  8070b4:	30c00115 	stw	r3,4(r6)
  8070b8:	308d883a 	add	r6,r6,r2
  8070bc:	30800015 	stw	r2,0(r6)
  8070c0:	003f9506 	br	806f18 <__alt_mem_onchip_mem+0xff786f18>
  8070c4:	00c01504 	movi	r3,84
  8070c8:	19400536 	bltu	r3,r5,8070e0 <_free_r+0x2b8>
  8070cc:	100ad33a 	srli	r5,r2,12
  8070d0:	28c01bc4 	addi	r3,r5,111
  8070d4:	18c7883a 	add	r3,r3,r3
  8070d8:	29401b84 	addi	r5,r5,110
  8070dc:	003f9c06 	br	806f50 <__alt_mem_onchip_mem+0xff786f50>
  8070e0:	00c05504 	movi	r3,340
  8070e4:	19400536 	bltu	r3,r5,8070fc <_free_r+0x2d4>
  8070e8:	100ad3fa 	srli	r5,r2,15
  8070ec:	28c01e04 	addi	r3,r5,120
  8070f0:	18c7883a 	add	r3,r3,r3
  8070f4:	29401dc4 	addi	r5,r5,119
  8070f8:	003f9506 	br	806f50 <__alt_mem_onchip_mem+0xff786f50>
  8070fc:	00c15504 	movi	r3,1364
  807100:	19400536 	bltu	r3,r5,807118 <_free_r+0x2f0>
  807104:	100ad4ba 	srli	r5,r2,18
  807108:	28c01f44 	addi	r3,r5,125
  80710c:	18c7883a 	add	r3,r3,r3
  807110:	29401f04 	addi	r5,r5,124
  807114:	003f8e06 	br	806f50 <__alt_mem_onchip_mem+0xff786f50>
  807118:	00c03f84 	movi	r3,254
  80711c:	01401f84 	movi	r5,126
  807120:	003f8b06 	br	806f50 <__alt_mem_onchip_mem+0xff786f50>
  807124:	10c00054 	ori	r3,r2,1
  807128:	30c00115 	stw	r3,4(r6)
  80712c:	308d883a 	add	r6,r6,r2
  807130:	30800015 	stw	r2,0(r6)
  807134:	003f7806 	br	806f18 <__alt_mem_onchip_mem+0xff786f18>

00807138 <_fwalk>:
  807138:	defff704 	addi	sp,sp,-36
  80713c:	dd000415 	stw	r20,16(sp)
  807140:	dfc00815 	stw	ra,32(sp)
  807144:	ddc00715 	stw	r23,28(sp)
  807148:	dd800615 	stw	r22,24(sp)
  80714c:	dd400515 	stw	r21,20(sp)
  807150:	dcc00315 	stw	r19,12(sp)
  807154:	dc800215 	stw	r18,8(sp)
  807158:	dc400115 	stw	r17,4(sp)
  80715c:	dc000015 	stw	r16,0(sp)
  807160:	2500b804 	addi	r20,r4,736
  807164:	a0002326 	beq	r20,zero,8071f4 <_fwalk+0xbc>
  807168:	282b883a 	mov	r21,r5
  80716c:	002f883a 	mov	r23,zero
  807170:	05800044 	movi	r22,1
  807174:	04ffffc4 	movi	r19,-1
  807178:	a4400117 	ldw	r17,4(r20)
  80717c:	a4800217 	ldw	r18,8(r20)
  807180:	8c7fffc4 	addi	r17,r17,-1
  807184:	88000d16 	blt	r17,zero,8071bc <_fwalk+0x84>
  807188:	94000304 	addi	r16,r18,12
  80718c:	94800384 	addi	r18,r18,14
  807190:	8080000b 	ldhu	r2,0(r16)
  807194:	8c7fffc4 	addi	r17,r17,-1
  807198:	813ffd04 	addi	r4,r16,-12
  80719c:	b080042e 	bgeu	r22,r2,8071b0 <_fwalk+0x78>
  8071a0:	9080000f 	ldh	r2,0(r18)
  8071a4:	14c00226 	beq	r2,r19,8071b0 <_fwalk+0x78>
  8071a8:	a83ee83a 	callr	r21
  8071ac:	b8aeb03a 	or	r23,r23,r2
  8071b0:	84001a04 	addi	r16,r16,104
  8071b4:	94801a04 	addi	r18,r18,104
  8071b8:	8cfff51e 	bne	r17,r19,807190 <__alt_mem_onchip_mem+0xff787190>
  8071bc:	a5000017 	ldw	r20,0(r20)
  8071c0:	a03fed1e 	bne	r20,zero,807178 <__alt_mem_onchip_mem+0xff787178>
  8071c4:	b805883a 	mov	r2,r23
  8071c8:	dfc00817 	ldw	ra,32(sp)
  8071cc:	ddc00717 	ldw	r23,28(sp)
  8071d0:	dd800617 	ldw	r22,24(sp)
  8071d4:	dd400517 	ldw	r21,20(sp)
  8071d8:	dd000417 	ldw	r20,16(sp)
  8071dc:	dcc00317 	ldw	r19,12(sp)
  8071e0:	dc800217 	ldw	r18,8(sp)
  8071e4:	dc400117 	ldw	r17,4(sp)
  8071e8:	dc000017 	ldw	r16,0(sp)
  8071ec:	dec00904 	addi	sp,sp,36
  8071f0:	f800283a 	ret
  8071f4:	002f883a 	mov	r23,zero
  8071f8:	003ff206 	br	8071c4 <__alt_mem_onchip_mem+0xff7871c4>

008071fc <_fwalk_reent>:
  8071fc:	defff704 	addi	sp,sp,-36
  807200:	dd000415 	stw	r20,16(sp)
  807204:	dfc00815 	stw	ra,32(sp)
  807208:	ddc00715 	stw	r23,28(sp)
  80720c:	dd800615 	stw	r22,24(sp)
  807210:	dd400515 	stw	r21,20(sp)
  807214:	dcc00315 	stw	r19,12(sp)
  807218:	dc800215 	stw	r18,8(sp)
  80721c:	dc400115 	stw	r17,4(sp)
  807220:	dc000015 	stw	r16,0(sp)
  807224:	2500b804 	addi	r20,r4,736
  807228:	a0002326 	beq	r20,zero,8072b8 <_fwalk_reent+0xbc>
  80722c:	282b883a 	mov	r21,r5
  807230:	2027883a 	mov	r19,r4
  807234:	002f883a 	mov	r23,zero
  807238:	05800044 	movi	r22,1
  80723c:	04bfffc4 	movi	r18,-1
  807240:	a4400117 	ldw	r17,4(r20)
  807244:	a4000217 	ldw	r16,8(r20)
  807248:	8c7fffc4 	addi	r17,r17,-1
  80724c:	88000c16 	blt	r17,zero,807280 <_fwalk_reent+0x84>
  807250:	84000304 	addi	r16,r16,12
  807254:	8080000b 	ldhu	r2,0(r16)
  807258:	8c7fffc4 	addi	r17,r17,-1
  80725c:	817ffd04 	addi	r5,r16,-12
  807260:	b080052e 	bgeu	r22,r2,807278 <_fwalk_reent+0x7c>
  807264:	8080008f 	ldh	r2,2(r16)
  807268:	9809883a 	mov	r4,r19
  80726c:	14800226 	beq	r2,r18,807278 <_fwalk_reent+0x7c>
  807270:	a83ee83a 	callr	r21
  807274:	b8aeb03a 	or	r23,r23,r2
  807278:	84001a04 	addi	r16,r16,104
  80727c:	8cbff51e 	bne	r17,r18,807254 <__alt_mem_onchip_mem+0xff787254>
  807280:	a5000017 	ldw	r20,0(r20)
  807284:	a03fee1e 	bne	r20,zero,807240 <__alt_mem_onchip_mem+0xff787240>
  807288:	b805883a 	mov	r2,r23
  80728c:	dfc00817 	ldw	ra,32(sp)
  807290:	ddc00717 	ldw	r23,28(sp)
  807294:	dd800617 	ldw	r22,24(sp)
  807298:	dd400517 	ldw	r21,20(sp)
  80729c:	dd000417 	ldw	r20,16(sp)
  8072a0:	dcc00317 	ldw	r19,12(sp)
  8072a4:	dc800217 	ldw	r18,8(sp)
  8072a8:	dc400117 	ldw	r17,4(sp)
  8072ac:	dc000017 	ldw	r16,0(sp)
  8072b0:	dec00904 	addi	sp,sp,36
  8072b4:	f800283a 	ret
  8072b8:	002f883a 	mov	r23,zero
  8072bc:	003ff206 	br	807288 <__alt_mem_onchip_mem+0xff787288>

008072c0 <_setlocale_r>:
  8072c0:	30001b26 	beq	r6,zero,807330 <_setlocale_r+0x70>
  8072c4:	01402074 	movhi	r5,129
  8072c8:	defffe04 	addi	sp,sp,-8
  8072cc:	294cff04 	addi	r5,r5,13308
  8072d0:	3009883a 	mov	r4,r6
  8072d4:	dc000015 	stw	r16,0(sp)
  8072d8:	dfc00115 	stw	ra,4(sp)
  8072dc:	3021883a 	mov	r16,r6
  8072e0:	08092b80 	call	8092b8 <strcmp>
  8072e4:	1000061e 	bne	r2,zero,807300 <_setlocale_r+0x40>
  8072e8:	00802074 	movhi	r2,129
  8072ec:	108cfe04 	addi	r2,r2,13304
  8072f0:	dfc00117 	ldw	ra,4(sp)
  8072f4:	dc000017 	ldw	r16,0(sp)
  8072f8:	dec00204 	addi	sp,sp,8
  8072fc:	f800283a 	ret
  807300:	01402074 	movhi	r5,129
  807304:	294cfe04 	addi	r5,r5,13304
  807308:	8009883a 	mov	r4,r16
  80730c:	08092b80 	call	8092b8 <strcmp>
  807310:	103ff526 	beq	r2,zero,8072e8 <__alt_mem_onchip_mem+0xff7872e8>
  807314:	01402074 	movhi	r5,129
  807318:	294ce904 	addi	r5,r5,13220
  80731c:	8009883a 	mov	r4,r16
  807320:	08092b80 	call	8092b8 <strcmp>
  807324:	103ff026 	beq	r2,zero,8072e8 <__alt_mem_onchip_mem+0xff7872e8>
  807328:	0005883a 	mov	r2,zero
  80732c:	003ff006 	br	8072f0 <__alt_mem_onchip_mem+0xff7872f0>
  807330:	00802074 	movhi	r2,129
  807334:	108cfe04 	addi	r2,r2,13304
  807338:	f800283a 	ret

0080733c <__locale_charset>:
  80733c:	00802074 	movhi	r2,129
  807340:	108f5504 	addi	r2,r2,15700
  807344:	f800283a 	ret

00807348 <__locale_mb_cur_max>:
  807348:	00802074 	movhi	r2,129
  80734c:	10956a04 	addi	r2,r2,21928
  807350:	10800017 	ldw	r2,0(r2)
  807354:	f800283a 	ret

00807358 <__locale_msgcharset>:
  807358:	00802074 	movhi	r2,129
  80735c:	108f4d04 	addi	r2,r2,15668
  807360:	f800283a 	ret

00807364 <__locale_cjk_lang>:
  807364:	0005883a 	mov	r2,zero
  807368:	f800283a 	ret

0080736c <_localeconv_r>:
  80736c:	00802074 	movhi	r2,129
  807370:	108f5d04 	addi	r2,r2,15732
  807374:	f800283a 	ret

00807378 <setlocale>:
  807378:	00802074 	movhi	r2,129
  80737c:	10956904 	addi	r2,r2,21924
  807380:	280d883a 	mov	r6,r5
  807384:	200b883a 	mov	r5,r4
  807388:	11000017 	ldw	r4,0(r2)
  80738c:	08072c01 	jmpi	8072c0 <_setlocale_r>

00807390 <localeconv>:
  807390:	00802074 	movhi	r2,129
  807394:	108f5d04 	addi	r2,r2,15732
  807398:	f800283a 	ret

0080739c <__smakebuf_r>:
  80739c:	2880030b 	ldhu	r2,12(r5)
  8073a0:	10c0008c 	andi	r3,r2,2
  8073a4:	1800411e 	bne	r3,zero,8074ac <__smakebuf_r+0x110>
  8073a8:	deffec04 	addi	sp,sp,-80
  8073ac:	dc000f15 	stw	r16,60(sp)
  8073b0:	2821883a 	mov	r16,r5
  8073b4:	2940038f 	ldh	r5,14(r5)
  8073b8:	dc401015 	stw	r17,64(sp)
  8073bc:	dfc01315 	stw	ra,76(sp)
  8073c0:	dcc01215 	stw	r19,72(sp)
  8073c4:	dc801115 	stw	r18,68(sp)
  8073c8:	2023883a 	mov	r17,r4
  8073cc:	28001c16 	blt	r5,zero,807440 <__smakebuf_r+0xa4>
  8073d0:	d80d883a 	mov	r6,sp
  8073d4:	080aef80 	call	80aef8 <_fstat_r>
  8073d8:	10001816 	blt	r2,zero,80743c <__smakebuf_r+0xa0>
  8073dc:	d8800117 	ldw	r2,4(sp)
  8073e0:	00e00014 	movui	r3,32768
  8073e4:	10bc000c 	andi	r2,r2,61440
  8073e8:	14c80020 	cmpeqi	r19,r2,8192
  8073ec:	10c03726 	beq	r2,r3,8074cc <__smakebuf_r+0x130>
  8073f0:	80c0030b 	ldhu	r3,12(r16)
  8073f4:	18c20014 	ori	r3,r3,2048
  8073f8:	80c0030d 	sth	r3,12(r16)
  8073fc:	00c80004 	movi	r3,8192
  807400:	10c0521e 	bne	r2,r3,80754c <__smakebuf_r+0x1b0>
  807404:	8140038f 	ldh	r5,14(r16)
  807408:	8809883a 	mov	r4,r17
  80740c:	080b4100 	call	80b410 <_isatty_r>
  807410:	10004c26 	beq	r2,zero,807544 <__smakebuf_r+0x1a8>
  807414:	8080030b 	ldhu	r2,12(r16)
  807418:	80c010c4 	addi	r3,r16,67
  80741c:	80c00015 	stw	r3,0(r16)
  807420:	10800054 	ori	r2,r2,1
  807424:	8080030d 	sth	r2,12(r16)
  807428:	00800044 	movi	r2,1
  80742c:	80c00415 	stw	r3,16(r16)
  807430:	80800515 	stw	r2,20(r16)
  807434:	04810004 	movi	r18,1024
  807438:	00000706 	br	807458 <__smakebuf_r+0xbc>
  80743c:	8080030b 	ldhu	r2,12(r16)
  807440:	10c0200c 	andi	r3,r2,128
  807444:	18001f1e 	bne	r3,zero,8074c4 <__smakebuf_r+0x128>
  807448:	04810004 	movi	r18,1024
  80744c:	10820014 	ori	r2,r2,2048
  807450:	8080030d 	sth	r2,12(r16)
  807454:	0027883a 	mov	r19,zero
  807458:	900b883a 	mov	r5,r18
  80745c:	8809883a 	mov	r4,r17
  807460:	08075580 	call	807558 <_malloc_r>
  807464:	10002c26 	beq	r2,zero,807518 <__smakebuf_r+0x17c>
  807468:	80c0030b 	ldhu	r3,12(r16)
  80746c:	01002034 	movhi	r4,128
  807470:	211a5b04 	addi	r4,r4,26988
  807474:	89000f15 	stw	r4,60(r17)
  807478:	18c02014 	ori	r3,r3,128
  80747c:	80c0030d 	sth	r3,12(r16)
  807480:	80800015 	stw	r2,0(r16)
  807484:	80800415 	stw	r2,16(r16)
  807488:	84800515 	stw	r18,20(r16)
  80748c:	98001a1e 	bne	r19,zero,8074f8 <__smakebuf_r+0x15c>
  807490:	dfc01317 	ldw	ra,76(sp)
  807494:	dcc01217 	ldw	r19,72(sp)
  807498:	dc801117 	ldw	r18,68(sp)
  80749c:	dc401017 	ldw	r17,64(sp)
  8074a0:	dc000f17 	ldw	r16,60(sp)
  8074a4:	dec01404 	addi	sp,sp,80
  8074a8:	f800283a 	ret
  8074ac:	288010c4 	addi	r2,r5,67
  8074b0:	28800015 	stw	r2,0(r5)
  8074b4:	28800415 	stw	r2,16(r5)
  8074b8:	00800044 	movi	r2,1
  8074bc:	28800515 	stw	r2,20(r5)
  8074c0:	f800283a 	ret
  8074c4:	04801004 	movi	r18,64
  8074c8:	003fe006 	br	80744c <__alt_mem_onchip_mem+0xff78744c>
  8074cc:	81000a17 	ldw	r4,40(r16)
  8074d0:	00c02074 	movhi	r3,129
  8074d4:	18e49504 	addi	r3,r3,-28076
  8074d8:	20ffc51e 	bne	r4,r3,8073f0 <__alt_mem_onchip_mem+0xff7873f0>
  8074dc:	8080030b 	ldhu	r2,12(r16)
  8074e0:	04810004 	movi	r18,1024
  8074e4:	84801315 	stw	r18,76(r16)
  8074e8:	1484b03a 	or	r2,r2,r18
  8074ec:	8080030d 	sth	r2,12(r16)
  8074f0:	0027883a 	mov	r19,zero
  8074f4:	003fd806 	br	807458 <__alt_mem_onchip_mem+0xff787458>
  8074f8:	8140038f 	ldh	r5,14(r16)
  8074fc:	8809883a 	mov	r4,r17
  807500:	080b4100 	call	80b410 <_isatty_r>
  807504:	103fe226 	beq	r2,zero,807490 <__alt_mem_onchip_mem+0xff787490>
  807508:	8080030b 	ldhu	r2,12(r16)
  80750c:	10800054 	ori	r2,r2,1
  807510:	8080030d 	sth	r2,12(r16)
  807514:	003fde06 	br	807490 <__alt_mem_onchip_mem+0xff787490>
  807518:	8080030b 	ldhu	r2,12(r16)
  80751c:	10c0800c 	andi	r3,r2,512
  807520:	183fdb1e 	bne	r3,zero,807490 <__alt_mem_onchip_mem+0xff787490>
  807524:	10800094 	ori	r2,r2,2
  807528:	80c010c4 	addi	r3,r16,67
  80752c:	8080030d 	sth	r2,12(r16)
  807530:	00800044 	movi	r2,1
  807534:	80c00015 	stw	r3,0(r16)
  807538:	80c00415 	stw	r3,16(r16)
  80753c:	80800515 	stw	r2,20(r16)
  807540:	003fd306 	br	807490 <__alt_mem_onchip_mem+0xff787490>
  807544:	04810004 	movi	r18,1024
  807548:	003fc306 	br	807458 <__alt_mem_onchip_mem+0xff787458>
  80754c:	0027883a 	mov	r19,zero
  807550:	04810004 	movi	r18,1024
  807554:	003fc006 	br	807458 <__alt_mem_onchip_mem+0xff787458>

00807558 <_malloc_r>:
  807558:	defff504 	addi	sp,sp,-44
  80755c:	dc800315 	stw	r18,12(sp)
  807560:	dfc00a15 	stw	ra,40(sp)
  807564:	df000915 	stw	fp,36(sp)
  807568:	ddc00815 	stw	r23,32(sp)
  80756c:	dd800715 	stw	r22,28(sp)
  807570:	dd400615 	stw	r21,24(sp)
  807574:	dd000515 	stw	r20,20(sp)
  807578:	dcc00415 	stw	r19,16(sp)
  80757c:	dc400215 	stw	r17,8(sp)
  807580:	dc000115 	stw	r16,4(sp)
  807584:	288002c4 	addi	r2,r5,11
  807588:	00c00584 	movi	r3,22
  80758c:	2025883a 	mov	r18,r4
  807590:	18807f2e 	bgeu	r3,r2,807790 <_malloc_r+0x238>
  807594:	047ffe04 	movi	r17,-8
  807598:	1462703a 	and	r17,r2,r17
  80759c:	8800a316 	blt	r17,zero,80782c <_malloc_r+0x2d4>
  8075a0:	8940a236 	bltu	r17,r5,80782c <_malloc_r+0x2d4>
  8075a4:	080f8980 	call	80f898 <__malloc_lock>
  8075a8:	00807dc4 	movi	r2,503
  8075ac:	1441e92e 	bgeu	r2,r17,807d54 <_malloc_r+0x7fc>
  8075b0:	8804d27a 	srli	r2,r17,9
  8075b4:	1000a126 	beq	r2,zero,80783c <_malloc_r+0x2e4>
  8075b8:	00c00104 	movi	r3,4
  8075bc:	18811e36 	bltu	r3,r2,807a38 <_malloc_r+0x4e0>
  8075c0:	8804d1ba 	srli	r2,r17,6
  8075c4:	12000e44 	addi	r8,r2,57
  8075c8:	11c00e04 	addi	r7,r2,56
  8075cc:	4209883a 	add	r4,r8,r8
  8075d0:	04c02074 	movhi	r19,129
  8075d4:	2109883a 	add	r4,r4,r4
  8075d8:	9ccf6b04 	addi	r19,r19,15788
  8075dc:	2109883a 	add	r4,r4,r4
  8075e0:	9909883a 	add	r4,r19,r4
  8075e4:	24000117 	ldw	r16,4(r4)
  8075e8:	213ffe04 	addi	r4,r4,-8
  8075ec:	24009726 	beq	r4,r16,80784c <_malloc_r+0x2f4>
  8075f0:	80800117 	ldw	r2,4(r16)
  8075f4:	01bfff04 	movi	r6,-4
  8075f8:	014003c4 	movi	r5,15
  8075fc:	1184703a 	and	r2,r2,r6
  807600:	1447c83a 	sub	r3,r2,r17
  807604:	28c00716 	blt	r5,r3,807624 <_malloc_r+0xcc>
  807608:	1800920e 	bge	r3,zero,807854 <_malloc_r+0x2fc>
  80760c:	84000317 	ldw	r16,12(r16)
  807610:	24008e26 	beq	r4,r16,80784c <_malloc_r+0x2f4>
  807614:	80800117 	ldw	r2,4(r16)
  807618:	1184703a 	and	r2,r2,r6
  80761c:	1447c83a 	sub	r3,r2,r17
  807620:	28fff90e 	bge	r5,r3,807608 <__alt_mem_onchip_mem+0xff787608>
  807624:	3809883a 	mov	r4,r7
  807628:	01802074 	movhi	r6,129
  80762c:	9c000417 	ldw	r16,16(r19)
  807630:	318f6b04 	addi	r6,r6,15788
  807634:	32000204 	addi	r8,r6,8
  807638:	82013426 	beq	r16,r8,807b0c <_malloc_r+0x5b4>
  80763c:	80c00117 	ldw	r3,4(r16)
  807640:	00bfff04 	movi	r2,-4
  807644:	188e703a 	and	r7,r3,r2
  807648:	3c45c83a 	sub	r2,r7,r17
  80764c:	00c003c4 	movi	r3,15
  807650:	18811f16 	blt	r3,r2,807ad0 <_malloc_r+0x578>
  807654:	32000515 	stw	r8,20(r6)
  807658:	32000415 	stw	r8,16(r6)
  80765c:	10007f0e 	bge	r2,zero,80785c <_malloc_r+0x304>
  807660:	00807fc4 	movi	r2,511
  807664:	11c0fd36 	bltu	r2,r7,807a5c <_malloc_r+0x504>
  807668:	3806d0fa 	srli	r3,r7,3
  80766c:	01c00044 	movi	r7,1
  807670:	30800117 	ldw	r2,4(r6)
  807674:	19400044 	addi	r5,r3,1
  807678:	294b883a 	add	r5,r5,r5
  80767c:	1807d0ba 	srai	r3,r3,2
  807680:	294b883a 	add	r5,r5,r5
  807684:	294b883a 	add	r5,r5,r5
  807688:	298b883a 	add	r5,r5,r6
  80768c:	38c6983a 	sll	r3,r7,r3
  807690:	29c00017 	ldw	r7,0(r5)
  807694:	2a7ffe04 	addi	r9,r5,-8
  807698:	1886b03a 	or	r3,r3,r2
  80769c:	82400315 	stw	r9,12(r16)
  8076a0:	81c00215 	stw	r7,8(r16)
  8076a4:	30c00115 	stw	r3,4(r6)
  8076a8:	2c000015 	stw	r16,0(r5)
  8076ac:	3c000315 	stw	r16,12(r7)
  8076b0:	2005d0ba 	srai	r2,r4,2
  8076b4:	01400044 	movi	r5,1
  8076b8:	288a983a 	sll	r5,r5,r2
  8076bc:	19406f36 	bltu	r3,r5,80787c <_malloc_r+0x324>
  8076c0:	28c4703a 	and	r2,r5,r3
  8076c4:	10000a1e 	bne	r2,zero,8076f0 <_malloc_r+0x198>
  8076c8:	00bfff04 	movi	r2,-4
  8076cc:	294b883a 	add	r5,r5,r5
  8076d0:	2088703a 	and	r4,r4,r2
  8076d4:	28c4703a 	and	r2,r5,r3
  8076d8:	21000104 	addi	r4,r4,4
  8076dc:	1000041e 	bne	r2,zero,8076f0 <_malloc_r+0x198>
  8076e0:	294b883a 	add	r5,r5,r5
  8076e4:	28c4703a 	and	r2,r5,r3
  8076e8:	21000104 	addi	r4,r4,4
  8076ec:	103ffc26 	beq	r2,zero,8076e0 <__alt_mem_onchip_mem+0xff7876e0>
  8076f0:	02bfff04 	movi	r10,-4
  8076f4:	024003c4 	movi	r9,15
  8076f8:	21800044 	addi	r6,r4,1
  8076fc:	318d883a 	add	r6,r6,r6
  807700:	318d883a 	add	r6,r6,r6
  807704:	318d883a 	add	r6,r6,r6
  807708:	998d883a 	add	r6,r19,r6
  80770c:	333ffe04 	addi	r12,r6,-8
  807710:	2017883a 	mov	r11,r4
  807714:	31800104 	addi	r6,r6,4
  807718:	34000017 	ldw	r16,0(r6)
  80771c:	31fffd04 	addi	r7,r6,-12
  807720:	81c0041e 	bne	r16,r7,807734 <_malloc_r+0x1dc>
  807724:	0000fb06 	br	807b14 <_malloc_r+0x5bc>
  807728:	1801030e 	bge	r3,zero,807b38 <_malloc_r+0x5e0>
  80772c:	84000317 	ldw	r16,12(r16)
  807730:	81c0f826 	beq	r16,r7,807b14 <_malloc_r+0x5bc>
  807734:	80800117 	ldw	r2,4(r16)
  807738:	1284703a 	and	r2,r2,r10
  80773c:	1447c83a 	sub	r3,r2,r17
  807740:	48fff90e 	bge	r9,r3,807728 <__alt_mem_onchip_mem+0xff787728>
  807744:	80800317 	ldw	r2,12(r16)
  807748:	81000217 	ldw	r4,8(r16)
  80774c:	89400054 	ori	r5,r17,1
  807750:	81400115 	stw	r5,4(r16)
  807754:	20800315 	stw	r2,12(r4)
  807758:	11000215 	stw	r4,8(r2)
  80775c:	8463883a 	add	r17,r16,r17
  807760:	9c400515 	stw	r17,20(r19)
  807764:	9c400415 	stw	r17,16(r19)
  807768:	18800054 	ori	r2,r3,1
  80776c:	88800115 	stw	r2,4(r17)
  807770:	8a000315 	stw	r8,12(r17)
  807774:	8a000215 	stw	r8,8(r17)
  807778:	88e3883a 	add	r17,r17,r3
  80777c:	88c00015 	stw	r3,0(r17)
  807780:	9009883a 	mov	r4,r18
  807784:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807788:	80800204 	addi	r2,r16,8
  80778c:	00001b06 	br	8077fc <_malloc_r+0x2a4>
  807790:	04400404 	movi	r17,16
  807794:	89402536 	bltu	r17,r5,80782c <_malloc_r+0x2d4>
  807798:	080f8980 	call	80f898 <__malloc_lock>
  80779c:	00800184 	movi	r2,6
  8077a0:	01000084 	movi	r4,2
  8077a4:	04c02074 	movhi	r19,129
  8077a8:	1085883a 	add	r2,r2,r2
  8077ac:	9ccf6b04 	addi	r19,r19,15788
  8077b0:	1085883a 	add	r2,r2,r2
  8077b4:	9885883a 	add	r2,r19,r2
  8077b8:	14000117 	ldw	r16,4(r2)
  8077bc:	10fffe04 	addi	r3,r2,-8
  8077c0:	80c0d926 	beq	r16,r3,807b28 <_malloc_r+0x5d0>
  8077c4:	80c00117 	ldw	r3,4(r16)
  8077c8:	81000317 	ldw	r4,12(r16)
  8077cc:	00bfff04 	movi	r2,-4
  8077d0:	1884703a 	and	r2,r3,r2
  8077d4:	81400217 	ldw	r5,8(r16)
  8077d8:	8085883a 	add	r2,r16,r2
  8077dc:	10c00117 	ldw	r3,4(r2)
  8077e0:	29000315 	stw	r4,12(r5)
  8077e4:	21400215 	stw	r5,8(r4)
  8077e8:	18c00054 	ori	r3,r3,1
  8077ec:	10c00115 	stw	r3,4(r2)
  8077f0:	9009883a 	mov	r4,r18
  8077f4:	080f8bc0 	call	80f8bc <__malloc_unlock>
  8077f8:	80800204 	addi	r2,r16,8
  8077fc:	dfc00a17 	ldw	ra,40(sp)
  807800:	df000917 	ldw	fp,36(sp)
  807804:	ddc00817 	ldw	r23,32(sp)
  807808:	dd800717 	ldw	r22,28(sp)
  80780c:	dd400617 	ldw	r21,24(sp)
  807810:	dd000517 	ldw	r20,20(sp)
  807814:	dcc00417 	ldw	r19,16(sp)
  807818:	dc800317 	ldw	r18,12(sp)
  80781c:	dc400217 	ldw	r17,8(sp)
  807820:	dc000117 	ldw	r16,4(sp)
  807824:	dec00b04 	addi	sp,sp,44
  807828:	f800283a 	ret
  80782c:	00800304 	movi	r2,12
  807830:	90800015 	stw	r2,0(r18)
  807834:	0005883a 	mov	r2,zero
  807838:	003ff006 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  80783c:	01002004 	movi	r4,128
  807840:	02001004 	movi	r8,64
  807844:	01c00fc4 	movi	r7,63
  807848:	003f6106 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  80784c:	4009883a 	mov	r4,r8
  807850:	003f7506 	br	807628 <__alt_mem_onchip_mem+0xff787628>
  807854:	81000317 	ldw	r4,12(r16)
  807858:	003fde06 	br	8077d4 <__alt_mem_onchip_mem+0xff7877d4>
  80785c:	81c5883a 	add	r2,r16,r7
  807860:	11400117 	ldw	r5,4(r2)
  807864:	9009883a 	mov	r4,r18
  807868:	29400054 	ori	r5,r5,1
  80786c:	11400115 	stw	r5,4(r2)
  807870:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807874:	80800204 	addi	r2,r16,8
  807878:	003fe006 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  80787c:	9c000217 	ldw	r16,8(r19)
  807880:	00bfff04 	movi	r2,-4
  807884:	85800117 	ldw	r22,4(r16)
  807888:	b0ac703a 	and	r22,r22,r2
  80788c:	b4400336 	bltu	r22,r17,80789c <_malloc_r+0x344>
  807890:	b445c83a 	sub	r2,r22,r17
  807894:	00c003c4 	movi	r3,15
  807898:	18805d16 	blt	r3,r2,807a10 <_malloc_r+0x4b8>
  80789c:	05c02074 	movhi	r23,129
  8078a0:	00802074 	movhi	r2,129
  8078a4:	109d0704 	addi	r2,r2,29724
  8078a8:	bdd56b04 	addi	r23,r23,21932
  8078ac:	15400017 	ldw	r21,0(r2)
  8078b0:	b8c00017 	ldw	r3,0(r23)
  8078b4:	00bfffc4 	movi	r2,-1
  8078b8:	858d883a 	add	r6,r16,r22
  8078bc:	8d6b883a 	add	r21,r17,r21
  8078c0:	1880ea26 	beq	r3,r2,807c6c <_malloc_r+0x714>
  8078c4:	ad4403c4 	addi	r21,r21,4111
  8078c8:	00bc0004 	movi	r2,-4096
  8078cc:	a8aa703a 	and	r21,r21,r2
  8078d0:	a80b883a 	mov	r5,r21
  8078d4:	9009883a 	mov	r4,r18
  8078d8:	d9800015 	stw	r6,0(sp)
  8078dc:	08091280 	call	809128 <_sbrk_r>
  8078e0:	1029883a 	mov	r20,r2
  8078e4:	00bfffc4 	movi	r2,-1
  8078e8:	d9800017 	ldw	r6,0(sp)
  8078ec:	a080e826 	beq	r20,r2,807c90 <_malloc_r+0x738>
  8078f0:	a180a636 	bltu	r20,r6,807b8c <_malloc_r+0x634>
  8078f4:	07002074 	movhi	fp,129
  8078f8:	e71d1004 	addi	fp,fp,29760
  8078fc:	e0800017 	ldw	r2,0(fp)
  807900:	a887883a 	add	r3,r21,r2
  807904:	e0c00015 	stw	r3,0(fp)
  807908:	3500e626 	beq	r6,r20,807ca4 <_malloc_r+0x74c>
  80790c:	b9000017 	ldw	r4,0(r23)
  807910:	00bfffc4 	movi	r2,-1
  807914:	2080ee26 	beq	r4,r2,807cd0 <_malloc_r+0x778>
  807918:	a185c83a 	sub	r2,r20,r6
  80791c:	10c5883a 	add	r2,r2,r3
  807920:	e0800015 	stw	r2,0(fp)
  807924:	a0c001cc 	andi	r3,r20,7
  807928:	1800bc26 	beq	r3,zero,807c1c <_malloc_r+0x6c4>
  80792c:	a0e9c83a 	sub	r20,r20,r3
  807930:	00840204 	movi	r2,4104
  807934:	a5000204 	addi	r20,r20,8
  807938:	10c7c83a 	sub	r3,r2,r3
  80793c:	a545883a 	add	r2,r20,r21
  807940:	1083ffcc 	andi	r2,r2,4095
  807944:	18abc83a 	sub	r21,r3,r2
  807948:	a80b883a 	mov	r5,r21
  80794c:	9009883a 	mov	r4,r18
  807950:	08091280 	call	809128 <_sbrk_r>
  807954:	00ffffc4 	movi	r3,-1
  807958:	10c0e126 	beq	r2,r3,807ce0 <_malloc_r+0x788>
  80795c:	1505c83a 	sub	r2,r2,r20
  807960:	1545883a 	add	r2,r2,r21
  807964:	10800054 	ori	r2,r2,1
  807968:	e0c00017 	ldw	r3,0(fp)
  80796c:	9d000215 	stw	r20,8(r19)
  807970:	a0800115 	stw	r2,4(r20)
  807974:	a8c7883a 	add	r3,r21,r3
  807978:	e0c00015 	stw	r3,0(fp)
  80797c:	84c00e26 	beq	r16,r19,8079b8 <_malloc_r+0x460>
  807980:	018003c4 	movi	r6,15
  807984:	3580a72e 	bgeu	r6,r22,807c24 <_malloc_r+0x6cc>
  807988:	81400117 	ldw	r5,4(r16)
  80798c:	013ffe04 	movi	r4,-8
  807990:	b0bffd04 	addi	r2,r22,-12
  807994:	1104703a 	and	r2,r2,r4
  807998:	2900004c 	andi	r4,r5,1
  80799c:	2088b03a 	or	r4,r4,r2
  8079a0:	81000115 	stw	r4,4(r16)
  8079a4:	01400144 	movi	r5,5
  8079a8:	8089883a 	add	r4,r16,r2
  8079ac:	21400115 	stw	r5,4(r4)
  8079b0:	21400215 	stw	r5,8(r4)
  8079b4:	3080cd36 	bltu	r6,r2,807cec <_malloc_r+0x794>
  8079b8:	00802074 	movhi	r2,129
  8079bc:	109d0604 	addi	r2,r2,29720
  8079c0:	11000017 	ldw	r4,0(r2)
  8079c4:	20c0012e 	bgeu	r4,r3,8079cc <_malloc_r+0x474>
  8079c8:	10c00015 	stw	r3,0(r2)
  8079cc:	00802074 	movhi	r2,129
  8079d0:	109d0504 	addi	r2,r2,29716
  8079d4:	11000017 	ldw	r4,0(r2)
  8079d8:	9c000217 	ldw	r16,8(r19)
  8079dc:	20c0012e 	bgeu	r4,r3,8079e4 <_malloc_r+0x48c>
  8079e0:	10c00015 	stw	r3,0(r2)
  8079e4:	80c00117 	ldw	r3,4(r16)
  8079e8:	00bfff04 	movi	r2,-4
  8079ec:	1886703a 	and	r3,r3,r2
  8079f0:	1c45c83a 	sub	r2,r3,r17
  8079f4:	1c400236 	bltu	r3,r17,807a00 <_malloc_r+0x4a8>
  8079f8:	00c003c4 	movi	r3,15
  8079fc:	18800416 	blt	r3,r2,807a10 <_malloc_r+0x4b8>
  807a00:	9009883a 	mov	r4,r18
  807a04:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807a08:	0005883a 	mov	r2,zero
  807a0c:	003f7b06 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807a10:	88c00054 	ori	r3,r17,1
  807a14:	80c00115 	stw	r3,4(r16)
  807a18:	8463883a 	add	r17,r16,r17
  807a1c:	10800054 	ori	r2,r2,1
  807a20:	9c400215 	stw	r17,8(r19)
  807a24:	88800115 	stw	r2,4(r17)
  807a28:	9009883a 	mov	r4,r18
  807a2c:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807a30:	80800204 	addi	r2,r16,8
  807a34:	003f7106 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807a38:	00c00504 	movi	r3,20
  807a3c:	18804a2e 	bgeu	r3,r2,807b68 <_malloc_r+0x610>
  807a40:	00c01504 	movi	r3,84
  807a44:	18806e36 	bltu	r3,r2,807c00 <_malloc_r+0x6a8>
  807a48:	8804d33a 	srli	r2,r17,12
  807a4c:	12001bc4 	addi	r8,r2,111
  807a50:	11c01b84 	addi	r7,r2,110
  807a54:	4209883a 	add	r4,r8,r8
  807a58:	003edd06 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  807a5c:	3804d27a 	srli	r2,r7,9
  807a60:	00c00104 	movi	r3,4
  807a64:	1880442e 	bgeu	r3,r2,807b78 <_malloc_r+0x620>
  807a68:	00c00504 	movi	r3,20
  807a6c:	18808136 	bltu	r3,r2,807c74 <_malloc_r+0x71c>
  807a70:	11401704 	addi	r5,r2,92
  807a74:	10c016c4 	addi	r3,r2,91
  807a78:	294b883a 	add	r5,r5,r5
  807a7c:	294b883a 	add	r5,r5,r5
  807a80:	294b883a 	add	r5,r5,r5
  807a84:	994b883a 	add	r5,r19,r5
  807a88:	28800017 	ldw	r2,0(r5)
  807a8c:	01802074 	movhi	r6,129
  807a90:	297ffe04 	addi	r5,r5,-8
  807a94:	318f6b04 	addi	r6,r6,15788
  807a98:	28806526 	beq	r5,r2,807c30 <_malloc_r+0x6d8>
  807a9c:	01bfff04 	movi	r6,-4
  807aa0:	10c00117 	ldw	r3,4(r2)
  807aa4:	1986703a 	and	r3,r3,r6
  807aa8:	38c0022e 	bgeu	r7,r3,807ab4 <_malloc_r+0x55c>
  807aac:	10800217 	ldw	r2,8(r2)
  807ab0:	28bffb1e 	bne	r5,r2,807aa0 <__alt_mem_onchip_mem+0xff787aa0>
  807ab4:	11400317 	ldw	r5,12(r2)
  807ab8:	98c00117 	ldw	r3,4(r19)
  807abc:	81400315 	stw	r5,12(r16)
  807ac0:	80800215 	stw	r2,8(r16)
  807ac4:	2c000215 	stw	r16,8(r5)
  807ac8:	14000315 	stw	r16,12(r2)
  807acc:	003ef806 	br	8076b0 <__alt_mem_onchip_mem+0xff7876b0>
  807ad0:	88c00054 	ori	r3,r17,1
  807ad4:	80c00115 	stw	r3,4(r16)
  807ad8:	8463883a 	add	r17,r16,r17
  807adc:	34400515 	stw	r17,20(r6)
  807ae0:	34400415 	stw	r17,16(r6)
  807ae4:	10c00054 	ori	r3,r2,1
  807ae8:	8a000315 	stw	r8,12(r17)
  807aec:	8a000215 	stw	r8,8(r17)
  807af0:	88c00115 	stw	r3,4(r17)
  807af4:	88a3883a 	add	r17,r17,r2
  807af8:	88800015 	stw	r2,0(r17)
  807afc:	9009883a 	mov	r4,r18
  807b00:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807b04:	80800204 	addi	r2,r16,8
  807b08:	003f3c06 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807b0c:	30c00117 	ldw	r3,4(r6)
  807b10:	003ee706 	br	8076b0 <__alt_mem_onchip_mem+0xff7876b0>
  807b14:	5ac00044 	addi	r11,r11,1
  807b18:	588000cc 	andi	r2,r11,3
  807b1c:	31800204 	addi	r6,r6,8
  807b20:	103efd1e 	bne	r2,zero,807718 <__alt_mem_onchip_mem+0xff787718>
  807b24:	00002406 	br	807bb8 <_malloc_r+0x660>
  807b28:	14000317 	ldw	r16,12(r2)
  807b2c:	143f251e 	bne	r2,r16,8077c4 <__alt_mem_onchip_mem+0xff7877c4>
  807b30:	21000084 	addi	r4,r4,2
  807b34:	003ebc06 	br	807628 <__alt_mem_onchip_mem+0xff787628>
  807b38:	8085883a 	add	r2,r16,r2
  807b3c:	10c00117 	ldw	r3,4(r2)
  807b40:	81000317 	ldw	r4,12(r16)
  807b44:	81400217 	ldw	r5,8(r16)
  807b48:	18c00054 	ori	r3,r3,1
  807b4c:	10c00115 	stw	r3,4(r2)
  807b50:	29000315 	stw	r4,12(r5)
  807b54:	21400215 	stw	r5,8(r4)
  807b58:	9009883a 	mov	r4,r18
  807b5c:	080f8bc0 	call	80f8bc <__malloc_unlock>
  807b60:	80800204 	addi	r2,r16,8
  807b64:	003f2506 	br	8077fc <__alt_mem_onchip_mem+0xff7877fc>
  807b68:	12001704 	addi	r8,r2,92
  807b6c:	11c016c4 	addi	r7,r2,91
  807b70:	4209883a 	add	r4,r8,r8
  807b74:	003e9606 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  807b78:	3804d1ba 	srli	r2,r7,6
  807b7c:	11400e44 	addi	r5,r2,57
  807b80:	10c00e04 	addi	r3,r2,56
  807b84:	294b883a 	add	r5,r5,r5
  807b88:	003fbc06 	br	807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807b8c:	84ff5926 	beq	r16,r19,8078f4 <__alt_mem_onchip_mem+0xff7878f4>
  807b90:	00802074 	movhi	r2,129
  807b94:	108f6b04 	addi	r2,r2,15788
  807b98:	14000217 	ldw	r16,8(r2)
  807b9c:	00bfff04 	movi	r2,-4
  807ba0:	80c00117 	ldw	r3,4(r16)
  807ba4:	1886703a 	and	r3,r3,r2
  807ba8:	003f9106 	br	8079f0 <__alt_mem_onchip_mem+0xff7879f0>
  807bac:	60800217 	ldw	r2,8(r12)
  807bb0:	213fffc4 	addi	r4,r4,-1
  807bb4:	1300651e 	bne	r2,r12,807d4c <_malloc_r+0x7f4>
  807bb8:	208000cc 	andi	r2,r4,3
  807bbc:	633ffe04 	addi	r12,r12,-8
  807bc0:	103ffa1e 	bne	r2,zero,807bac <__alt_mem_onchip_mem+0xff787bac>
  807bc4:	98800117 	ldw	r2,4(r19)
  807bc8:	0146303a 	nor	r3,zero,r5
  807bcc:	1884703a 	and	r2,r3,r2
  807bd0:	98800115 	stw	r2,4(r19)
  807bd4:	294b883a 	add	r5,r5,r5
  807bd8:	117f2836 	bltu	r2,r5,80787c <__alt_mem_onchip_mem+0xff78787c>
  807bdc:	283f2726 	beq	r5,zero,80787c <__alt_mem_onchip_mem+0xff78787c>
  807be0:	2886703a 	and	r3,r5,r2
  807be4:	5809883a 	mov	r4,r11
  807be8:	183ec31e 	bne	r3,zero,8076f8 <__alt_mem_onchip_mem+0xff7876f8>
  807bec:	294b883a 	add	r5,r5,r5
  807bf0:	2886703a 	and	r3,r5,r2
  807bf4:	21000104 	addi	r4,r4,4
  807bf8:	183ffc26 	beq	r3,zero,807bec <__alt_mem_onchip_mem+0xff787bec>
  807bfc:	003ebe06 	br	8076f8 <__alt_mem_onchip_mem+0xff7876f8>
  807c00:	00c05504 	movi	r3,340
  807c04:	18801236 	bltu	r3,r2,807c50 <_malloc_r+0x6f8>
  807c08:	8804d3fa 	srli	r2,r17,15
  807c0c:	12001e04 	addi	r8,r2,120
  807c10:	11c01dc4 	addi	r7,r2,119
  807c14:	4209883a 	add	r4,r8,r8
  807c18:	003e6d06 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  807c1c:	00c40004 	movi	r3,4096
  807c20:	003f4606 	br	80793c <__alt_mem_onchip_mem+0xff78793c>
  807c24:	00800044 	movi	r2,1
  807c28:	a0800115 	stw	r2,4(r20)
  807c2c:	003f7406 	br	807a00 <__alt_mem_onchip_mem+0xff787a00>
  807c30:	1805d0ba 	srai	r2,r3,2
  807c34:	01c00044 	movi	r7,1
  807c38:	30c00117 	ldw	r3,4(r6)
  807c3c:	388e983a 	sll	r7,r7,r2
  807c40:	2805883a 	mov	r2,r5
  807c44:	38c6b03a 	or	r3,r7,r3
  807c48:	30c00115 	stw	r3,4(r6)
  807c4c:	003f9b06 	br	807abc <__alt_mem_onchip_mem+0xff787abc>
  807c50:	00c15504 	movi	r3,1364
  807c54:	18801a36 	bltu	r3,r2,807cc0 <_malloc_r+0x768>
  807c58:	8804d4ba 	srli	r2,r17,18
  807c5c:	12001f44 	addi	r8,r2,125
  807c60:	11c01f04 	addi	r7,r2,124
  807c64:	4209883a 	add	r4,r8,r8
  807c68:	003e5906 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  807c6c:	ad400404 	addi	r21,r21,16
  807c70:	003f1706 	br	8078d0 <__alt_mem_onchip_mem+0xff7878d0>
  807c74:	00c01504 	movi	r3,84
  807c78:	18802336 	bltu	r3,r2,807d08 <_malloc_r+0x7b0>
  807c7c:	3804d33a 	srli	r2,r7,12
  807c80:	11401bc4 	addi	r5,r2,111
  807c84:	10c01b84 	addi	r3,r2,110
  807c88:	294b883a 	add	r5,r5,r5
  807c8c:	003f7b06 	br	807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807c90:	9c000217 	ldw	r16,8(r19)
  807c94:	00bfff04 	movi	r2,-4
  807c98:	80c00117 	ldw	r3,4(r16)
  807c9c:	1886703a 	and	r3,r3,r2
  807ca0:	003f5306 	br	8079f0 <__alt_mem_onchip_mem+0xff7879f0>
  807ca4:	3083ffcc 	andi	r2,r6,4095
  807ca8:	103f181e 	bne	r2,zero,80790c <__alt_mem_onchip_mem+0xff78790c>
  807cac:	99000217 	ldw	r4,8(r19)
  807cb0:	b545883a 	add	r2,r22,r21
  807cb4:	10800054 	ori	r2,r2,1
  807cb8:	20800115 	stw	r2,4(r4)
  807cbc:	003f3e06 	br	8079b8 <__alt_mem_onchip_mem+0xff7879b8>
  807cc0:	01003f84 	movi	r4,254
  807cc4:	02001fc4 	movi	r8,127
  807cc8:	01c01f84 	movi	r7,126
  807ccc:	003e4006 	br	8075d0 <__alt_mem_onchip_mem+0xff7875d0>
  807cd0:	00802074 	movhi	r2,129
  807cd4:	10956b04 	addi	r2,r2,21932
  807cd8:	15000015 	stw	r20,0(r2)
  807cdc:	003f1106 	br	807924 <__alt_mem_onchip_mem+0xff787924>
  807ce0:	00800044 	movi	r2,1
  807ce4:	002b883a 	mov	r21,zero
  807ce8:	003f1f06 	br	807968 <__alt_mem_onchip_mem+0xff787968>
  807cec:	81400204 	addi	r5,r16,8
  807cf0:	9009883a 	mov	r4,r18
  807cf4:	0806e280 	call	806e28 <_free_r>
  807cf8:	00802074 	movhi	r2,129
  807cfc:	109d1004 	addi	r2,r2,29760
  807d00:	10c00017 	ldw	r3,0(r2)
  807d04:	003f2c06 	br	8079b8 <__alt_mem_onchip_mem+0xff7879b8>
  807d08:	00c05504 	movi	r3,340
  807d0c:	18800536 	bltu	r3,r2,807d24 <_malloc_r+0x7cc>
  807d10:	3804d3fa 	srli	r2,r7,15
  807d14:	11401e04 	addi	r5,r2,120
  807d18:	10c01dc4 	addi	r3,r2,119
  807d1c:	294b883a 	add	r5,r5,r5
  807d20:	003f5606 	br	807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807d24:	00c15504 	movi	r3,1364
  807d28:	18800536 	bltu	r3,r2,807d40 <_malloc_r+0x7e8>
  807d2c:	3804d4ba 	srli	r2,r7,18
  807d30:	11401f44 	addi	r5,r2,125
  807d34:	10c01f04 	addi	r3,r2,124
  807d38:	294b883a 	add	r5,r5,r5
  807d3c:	003f4f06 	br	807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807d40:	01403f84 	movi	r5,254
  807d44:	00c01f84 	movi	r3,126
  807d48:	003f4c06 	br	807a7c <__alt_mem_onchip_mem+0xff787a7c>
  807d4c:	98800117 	ldw	r2,4(r19)
  807d50:	003fa006 	br	807bd4 <__alt_mem_onchip_mem+0xff787bd4>
  807d54:	8808d0fa 	srli	r4,r17,3
  807d58:	20800044 	addi	r2,r4,1
  807d5c:	1085883a 	add	r2,r2,r2
  807d60:	003e9006 	br	8077a4 <__alt_mem_onchip_mem+0xff7877a4>

00807d64 <memchr>:
  807d64:	208000cc 	andi	r2,r4,3
  807d68:	280f883a 	mov	r7,r5
  807d6c:	10003426 	beq	r2,zero,807e40 <memchr+0xdc>
  807d70:	30bfffc4 	addi	r2,r6,-1
  807d74:	30001a26 	beq	r6,zero,807de0 <memchr+0x7c>
  807d78:	20c00003 	ldbu	r3,0(r4)
  807d7c:	29803fcc 	andi	r6,r5,255
  807d80:	30c0051e 	bne	r6,r3,807d98 <memchr+0x34>
  807d84:	00001806 	br	807de8 <memchr+0x84>
  807d88:	10001526 	beq	r2,zero,807de0 <memchr+0x7c>
  807d8c:	20c00003 	ldbu	r3,0(r4)
  807d90:	10bfffc4 	addi	r2,r2,-1
  807d94:	30c01426 	beq	r6,r3,807de8 <memchr+0x84>
  807d98:	21000044 	addi	r4,r4,1
  807d9c:	20c000cc 	andi	r3,r4,3
  807da0:	183ff91e 	bne	r3,zero,807d88 <__alt_mem_onchip_mem+0xff787d88>
  807da4:	020000c4 	movi	r8,3
  807da8:	40801136 	bltu	r8,r2,807df0 <memchr+0x8c>
  807dac:	10000c26 	beq	r2,zero,807de0 <memchr+0x7c>
  807db0:	20c00003 	ldbu	r3,0(r4)
  807db4:	29403fcc 	andi	r5,r5,255
  807db8:	28c00b26 	beq	r5,r3,807de8 <memchr+0x84>
  807dbc:	20c00044 	addi	r3,r4,1
  807dc0:	39803fcc 	andi	r6,r7,255
  807dc4:	2089883a 	add	r4,r4,r2
  807dc8:	00000306 	br	807dd8 <memchr+0x74>
  807dcc:	18c00044 	addi	r3,r3,1
  807dd0:	197fffc3 	ldbu	r5,-1(r3)
  807dd4:	31400526 	beq	r6,r5,807dec <memchr+0x88>
  807dd8:	1805883a 	mov	r2,r3
  807ddc:	20fffb1e 	bne	r4,r3,807dcc <__alt_mem_onchip_mem+0xff787dcc>
  807de0:	0005883a 	mov	r2,zero
  807de4:	f800283a 	ret
  807de8:	2005883a 	mov	r2,r4
  807dec:	f800283a 	ret
  807df0:	28c03fcc 	andi	r3,r5,255
  807df4:	1812923a 	slli	r9,r3,8
  807df8:	02ffbff4 	movhi	r11,65279
  807dfc:	02a02074 	movhi	r10,32897
  807e00:	48d2b03a 	or	r9,r9,r3
  807e04:	4806943a 	slli	r3,r9,16
  807e08:	5affbfc4 	addi	r11,r11,-257
  807e0c:	52a02004 	addi	r10,r10,-32640
  807e10:	48d2b03a 	or	r9,r9,r3
  807e14:	20c00017 	ldw	r3,0(r4)
  807e18:	48c6f03a 	xor	r3,r9,r3
  807e1c:	1acd883a 	add	r6,r3,r11
  807e20:	00c6303a 	nor	r3,zero,r3
  807e24:	30c6703a 	and	r3,r6,r3
  807e28:	1a86703a 	and	r3,r3,r10
  807e2c:	183fe01e 	bne	r3,zero,807db0 <__alt_mem_onchip_mem+0xff787db0>
  807e30:	10bfff04 	addi	r2,r2,-4
  807e34:	21000104 	addi	r4,r4,4
  807e38:	40bff636 	bltu	r8,r2,807e14 <__alt_mem_onchip_mem+0xff787e14>
  807e3c:	003fdb06 	br	807dac <__alt_mem_onchip_mem+0xff787dac>
  807e40:	3005883a 	mov	r2,r6
  807e44:	003fd706 	br	807da4 <__alt_mem_onchip_mem+0xff787da4>

00807e48 <memcpy>:
  807e48:	defffd04 	addi	sp,sp,-12
  807e4c:	dfc00215 	stw	ra,8(sp)
  807e50:	dc400115 	stw	r17,4(sp)
  807e54:	dc000015 	stw	r16,0(sp)
  807e58:	00c003c4 	movi	r3,15
  807e5c:	2005883a 	mov	r2,r4
  807e60:	1980452e 	bgeu	r3,r6,807f78 <memcpy+0x130>
  807e64:	2906b03a 	or	r3,r5,r4
  807e68:	18c000cc 	andi	r3,r3,3
  807e6c:	1800441e 	bne	r3,zero,807f80 <memcpy+0x138>
  807e70:	347ffc04 	addi	r17,r6,-16
  807e74:	8822d13a 	srli	r17,r17,4
  807e78:	28c00104 	addi	r3,r5,4
  807e7c:	23400104 	addi	r13,r4,4
  807e80:	8820913a 	slli	r16,r17,4
  807e84:	2b000204 	addi	r12,r5,8
  807e88:	22c00204 	addi	r11,r4,8
  807e8c:	84000504 	addi	r16,r16,20
  807e90:	2a800304 	addi	r10,r5,12
  807e94:	22400304 	addi	r9,r4,12
  807e98:	2c21883a 	add	r16,r5,r16
  807e9c:	2811883a 	mov	r8,r5
  807ea0:	200f883a 	mov	r7,r4
  807ea4:	41000017 	ldw	r4,0(r8)
  807ea8:	1fc00017 	ldw	ra,0(r3)
  807eac:	63c00017 	ldw	r15,0(r12)
  807eb0:	39000015 	stw	r4,0(r7)
  807eb4:	53800017 	ldw	r14,0(r10)
  807eb8:	6fc00015 	stw	ra,0(r13)
  807ebc:	5bc00015 	stw	r15,0(r11)
  807ec0:	4b800015 	stw	r14,0(r9)
  807ec4:	18c00404 	addi	r3,r3,16
  807ec8:	39c00404 	addi	r7,r7,16
  807ecc:	42000404 	addi	r8,r8,16
  807ed0:	6b400404 	addi	r13,r13,16
  807ed4:	63000404 	addi	r12,r12,16
  807ed8:	5ac00404 	addi	r11,r11,16
  807edc:	52800404 	addi	r10,r10,16
  807ee0:	4a400404 	addi	r9,r9,16
  807ee4:	1c3fef1e 	bne	r3,r16,807ea4 <__alt_mem_onchip_mem+0xff787ea4>
  807ee8:	89c00044 	addi	r7,r17,1
  807eec:	380e913a 	slli	r7,r7,4
  807ef0:	310003cc 	andi	r4,r6,15
  807ef4:	02c000c4 	movi	r11,3
  807ef8:	11c7883a 	add	r3,r2,r7
  807efc:	29cb883a 	add	r5,r5,r7
  807f00:	5900212e 	bgeu	r11,r4,807f88 <memcpy+0x140>
  807f04:	1813883a 	mov	r9,r3
  807f08:	2811883a 	mov	r8,r5
  807f0c:	200f883a 	mov	r7,r4
  807f10:	42800017 	ldw	r10,0(r8)
  807f14:	4a400104 	addi	r9,r9,4
  807f18:	39ffff04 	addi	r7,r7,-4
  807f1c:	4abfff15 	stw	r10,-4(r9)
  807f20:	42000104 	addi	r8,r8,4
  807f24:	59fffa36 	bltu	r11,r7,807f10 <__alt_mem_onchip_mem+0xff787f10>
  807f28:	213fff04 	addi	r4,r4,-4
  807f2c:	2008d0ba 	srli	r4,r4,2
  807f30:	318000cc 	andi	r6,r6,3
  807f34:	21000044 	addi	r4,r4,1
  807f38:	2109883a 	add	r4,r4,r4
  807f3c:	2109883a 	add	r4,r4,r4
  807f40:	1907883a 	add	r3,r3,r4
  807f44:	290b883a 	add	r5,r5,r4
  807f48:	30000626 	beq	r6,zero,807f64 <memcpy+0x11c>
  807f4c:	198d883a 	add	r6,r3,r6
  807f50:	29c00003 	ldbu	r7,0(r5)
  807f54:	18c00044 	addi	r3,r3,1
  807f58:	29400044 	addi	r5,r5,1
  807f5c:	19ffffc5 	stb	r7,-1(r3)
  807f60:	19bffb1e 	bne	r3,r6,807f50 <__alt_mem_onchip_mem+0xff787f50>
  807f64:	dfc00217 	ldw	ra,8(sp)
  807f68:	dc400117 	ldw	r17,4(sp)
  807f6c:	dc000017 	ldw	r16,0(sp)
  807f70:	dec00304 	addi	sp,sp,12
  807f74:	f800283a 	ret
  807f78:	2007883a 	mov	r3,r4
  807f7c:	003ff206 	br	807f48 <__alt_mem_onchip_mem+0xff787f48>
  807f80:	2007883a 	mov	r3,r4
  807f84:	003ff106 	br	807f4c <__alt_mem_onchip_mem+0xff787f4c>
  807f88:	200d883a 	mov	r6,r4
  807f8c:	003fee06 	br	807f48 <__alt_mem_onchip_mem+0xff787f48>

00807f90 <memset>:
  807f90:	20c000cc 	andi	r3,r4,3
  807f94:	2005883a 	mov	r2,r4
  807f98:	18004426 	beq	r3,zero,8080ac <memset+0x11c>
  807f9c:	31ffffc4 	addi	r7,r6,-1
  807fa0:	30004026 	beq	r6,zero,8080a4 <memset+0x114>
  807fa4:	2813883a 	mov	r9,r5
  807fa8:	200d883a 	mov	r6,r4
  807fac:	2007883a 	mov	r3,r4
  807fb0:	00000406 	br	807fc4 <memset+0x34>
  807fb4:	3a3fffc4 	addi	r8,r7,-1
  807fb8:	31800044 	addi	r6,r6,1
  807fbc:	38003926 	beq	r7,zero,8080a4 <memset+0x114>
  807fc0:	400f883a 	mov	r7,r8
  807fc4:	18c00044 	addi	r3,r3,1
  807fc8:	32400005 	stb	r9,0(r6)
  807fcc:	1a0000cc 	andi	r8,r3,3
  807fd0:	403ff81e 	bne	r8,zero,807fb4 <__alt_mem_onchip_mem+0xff787fb4>
  807fd4:	010000c4 	movi	r4,3
  807fd8:	21c02d2e 	bgeu	r4,r7,808090 <memset+0x100>
  807fdc:	29003fcc 	andi	r4,r5,255
  807fe0:	200c923a 	slli	r6,r4,8
  807fe4:	3108b03a 	or	r4,r6,r4
  807fe8:	200c943a 	slli	r6,r4,16
  807fec:	218cb03a 	or	r6,r4,r6
  807ff0:	010003c4 	movi	r4,15
  807ff4:	21c0182e 	bgeu	r4,r7,808058 <memset+0xc8>
  807ff8:	3b3ffc04 	addi	r12,r7,-16
  807ffc:	6018d13a 	srli	r12,r12,4
  808000:	1a000104 	addi	r8,r3,4
  808004:	1ac00204 	addi	r11,r3,8
  808008:	6008913a 	slli	r4,r12,4
  80800c:	1a800304 	addi	r10,r3,12
  808010:	1813883a 	mov	r9,r3
  808014:	21000504 	addi	r4,r4,20
  808018:	1909883a 	add	r4,r3,r4
  80801c:	49800015 	stw	r6,0(r9)
  808020:	41800015 	stw	r6,0(r8)
  808024:	59800015 	stw	r6,0(r11)
  808028:	51800015 	stw	r6,0(r10)
  80802c:	42000404 	addi	r8,r8,16
  808030:	4a400404 	addi	r9,r9,16
  808034:	5ac00404 	addi	r11,r11,16
  808038:	52800404 	addi	r10,r10,16
  80803c:	413ff71e 	bne	r8,r4,80801c <__alt_mem_onchip_mem+0xff78801c>
  808040:	63000044 	addi	r12,r12,1
  808044:	6018913a 	slli	r12,r12,4
  808048:	39c003cc 	andi	r7,r7,15
  80804c:	010000c4 	movi	r4,3
  808050:	1b07883a 	add	r3,r3,r12
  808054:	21c00e2e 	bgeu	r4,r7,808090 <memset+0x100>
  808058:	1813883a 	mov	r9,r3
  80805c:	3811883a 	mov	r8,r7
  808060:	010000c4 	movi	r4,3
  808064:	49800015 	stw	r6,0(r9)
  808068:	423fff04 	addi	r8,r8,-4
  80806c:	4a400104 	addi	r9,r9,4
  808070:	223ffc36 	bltu	r4,r8,808064 <__alt_mem_onchip_mem+0xff788064>
  808074:	393fff04 	addi	r4,r7,-4
  808078:	2008d0ba 	srli	r4,r4,2
  80807c:	39c000cc 	andi	r7,r7,3
  808080:	21000044 	addi	r4,r4,1
  808084:	2109883a 	add	r4,r4,r4
  808088:	2109883a 	add	r4,r4,r4
  80808c:	1907883a 	add	r3,r3,r4
  808090:	38000526 	beq	r7,zero,8080a8 <memset+0x118>
  808094:	19cf883a 	add	r7,r3,r7
  808098:	19400005 	stb	r5,0(r3)
  80809c:	18c00044 	addi	r3,r3,1
  8080a0:	38fffd1e 	bne	r7,r3,808098 <__alt_mem_onchip_mem+0xff788098>
  8080a4:	f800283a 	ret
  8080a8:	f800283a 	ret
  8080ac:	2007883a 	mov	r3,r4
  8080b0:	300f883a 	mov	r7,r6
  8080b4:	003fc706 	br	807fd4 <__alt_mem_onchip_mem+0xff787fd4>

008080b8 <_Balloc>:
  8080b8:	20801317 	ldw	r2,76(r4)
  8080bc:	defffc04 	addi	sp,sp,-16
  8080c0:	dc400115 	stw	r17,4(sp)
  8080c4:	dc000015 	stw	r16,0(sp)
  8080c8:	dfc00315 	stw	ra,12(sp)
  8080cc:	dc800215 	stw	r18,8(sp)
  8080d0:	2023883a 	mov	r17,r4
  8080d4:	2821883a 	mov	r16,r5
  8080d8:	10000f26 	beq	r2,zero,808118 <_Balloc+0x60>
  8080dc:	8407883a 	add	r3,r16,r16
  8080e0:	18c7883a 	add	r3,r3,r3
  8080e4:	10c7883a 	add	r3,r2,r3
  8080e8:	18800017 	ldw	r2,0(r3)
  8080ec:	10001126 	beq	r2,zero,808134 <_Balloc+0x7c>
  8080f0:	11000017 	ldw	r4,0(r2)
  8080f4:	19000015 	stw	r4,0(r3)
  8080f8:	10000415 	stw	zero,16(r2)
  8080fc:	10000315 	stw	zero,12(r2)
  808100:	dfc00317 	ldw	ra,12(sp)
  808104:	dc800217 	ldw	r18,8(sp)
  808108:	dc400117 	ldw	r17,4(sp)
  80810c:	dc000017 	ldw	r16,0(sp)
  808110:	dec00404 	addi	sp,sp,16
  808114:	f800283a 	ret
  808118:	01800844 	movi	r6,33
  80811c:	01400104 	movi	r5,4
  808120:	080ab280 	call	80ab28 <_calloc_r>
  808124:	88801315 	stw	r2,76(r17)
  808128:	103fec1e 	bne	r2,zero,8080dc <__alt_mem_onchip_mem+0xff7880dc>
  80812c:	0005883a 	mov	r2,zero
  808130:	003ff306 	br	808100 <__alt_mem_onchip_mem+0xff788100>
  808134:	01400044 	movi	r5,1
  808138:	2c24983a 	sll	r18,r5,r16
  80813c:	8809883a 	mov	r4,r17
  808140:	91800144 	addi	r6,r18,5
  808144:	318d883a 	add	r6,r6,r6
  808148:	318d883a 	add	r6,r6,r6
  80814c:	080ab280 	call	80ab28 <_calloc_r>
  808150:	103ff626 	beq	r2,zero,80812c <__alt_mem_onchip_mem+0xff78812c>
  808154:	14000115 	stw	r16,4(r2)
  808158:	14800215 	stw	r18,8(r2)
  80815c:	003fe606 	br	8080f8 <__alt_mem_onchip_mem+0xff7880f8>

00808160 <_Bfree>:
  808160:	28000826 	beq	r5,zero,808184 <_Bfree+0x24>
  808164:	28c00117 	ldw	r3,4(r5)
  808168:	20801317 	ldw	r2,76(r4)
  80816c:	18c7883a 	add	r3,r3,r3
  808170:	18c7883a 	add	r3,r3,r3
  808174:	10c5883a 	add	r2,r2,r3
  808178:	10c00017 	ldw	r3,0(r2)
  80817c:	28c00015 	stw	r3,0(r5)
  808180:	11400015 	stw	r5,0(r2)
  808184:	f800283a 	ret

00808188 <__multadd>:
  808188:	defffa04 	addi	sp,sp,-24
  80818c:	dc800315 	stw	r18,12(sp)
  808190:	dc400215 	stw	r17,8(sp)
  808194:	dc000115 	stw	r16,4(sp)
  808198:	2823883a 	mov	r17,r5
  80819c:	2c000417 	ldw	r16,16(r5)
  8081a0:	dfc00515 	stw	ra,20(sp)
  8081a4:	dcc00415 	stw	r19,16(sp)
  8081a8:	2025883a 	mov	r18,r4
  8081ac:	29400504 	addi	r5,r5,20
  8081b0:	0011883a 	mov	r8,zero
  8081b4:	28c00017 	ldw	r3,0(r5)
  8081b8:	29400104 	addi	r5,r5,4
  8081bc:	42000044 	addi	r8,r8,1
  8081c0:	18bfffcc 	andi	r2,r3,65535
  8081c4:	1185383a 	mul	r2,r2,r6
  8081c8:	1806d43a 	srli	r3,r3,16
  8081cc:	11cf883a 	add	r7,r2,r7
  8081d0:	3808d43a 	srli	r4,r7,16
  8081d4:	1987383a 	mul	r3,r3,r6
  8081d8:	38bfffcc 	andi	r2,r7,65535
  8081dc:	1907883a 	add	r3,r3,r4
  8081e0:	1808943a 	slli	r4,r3,16
  8081e4:	180ed43a 	srli	r7,r3,16
  8081e8:	2085883a 	add	r2,r4,r2
  8081ec:	28bfff15 	stw	r2,-4(r5)
  8081f0:	443ff016 	blt	r8,r16,8081b4 <__alt_mem_onchip_mem+0xff7881b4>
  8081f4:	38000926 	beq	r7,zero,80821c <__multadd+0x94>
  8081f8:	88800217 	ldw	r2,8(r17)
  8081fc:	80800f0e 	bge	r16,r2,80823c <__multadd+0xb4>
  808200:	80800144 	addi	r2,r16,5
  808204:	1085883a 	add	r2,r2,r2
  808208:	1085883a 	add	r2,r2,r2
  80820c:	8885883a 	add	r2,r17,r2
  808210:	11c00015 	stw	r7,0(r2)
  808214:	84000044 	addi	r16,r16,1
  808218:	8c000415 	stw	r16,16(r17)
  80821c:	8805883a 	mov	r2,r17
  808220:	dfc00517 	ldw	ra,20(sp)
  808224:	dcc00417 	ldw	r19,16(sp)
  808228:	dc800317 	ldw	r18,12(sp)
  80822c:	dc400217 	ldw	r17,8(sp)
  808230:	dc000117 	ldw	r16,4(sp)
  808234:	dec00604 	addi	sp,sp,24
  808238:	f800283a 	ret
  80823c:	89400117 	ldw	r5,4(r17)
  808240:	9009883a 	mov	r4,r18
  808244:	d9c00015 	stw	r7,0(sp)
  808248:	29400044 	addi	r5,r5,1
  80824c:	08080b80 	call	8080b8 <_Balloc>
  808250:	89800417 	ldw	r6,16(r17)
  808254:	89400304 	addi	r5,r17,12
  808258:	11000304 	addi	r4,r2,12
  80825c:	31800084 	addi	r6,r6,2
  808260:	318d883a 	add	r6,r6,r6
  808264:	318d883a 	add	r6,r6,r6
  808268:	1027883a 	mov	r19,r2
  80826c:	0807e480 	call	807e48 <memcpy>
  808270:	d9c00017 	ldw	r7,0(sp)
  808274:	88000a26 	beq	r17,zero,8082a0 <__multadd+0x118>
  808278:	88c00117 	ldw	r3,4(r17)
  80827c:	90801317 	ldw	r2,76(r18)
  808280:	18c7883a 	add	r3,r3,r3
  808284:	18c7883a 	add	r3,r3,r3
  808288:	10c5883a 	add	r2,r2,r3
  80828c:	10c00017 	ldw	r3,0(r2)
  808290:	88c00015 	stw	r3,0(r17)
  808294:	14400015 	stw	r17,0(r2)
  808298:	9823883a 	mov	r17,r19
  80829c:	003fd806 	br	808200 <__alt_mem_onchip_mem+0xff788200>
  8082a0:	9823883a 	mov	r17,r19
  8082a4:	003fd606 	br	808200 <__alt_mem_onchip_mem+0xff788200>

008082a8 <__s2b>:
  8082a8:	defff904 	addi	sp,sp,-28
  8082ac:	dc400115 	stw	r17,4(sp)
  8082b0:	dc000015 	stw	r16,0(sp)
  8082b4:	2023883a 	mov	r17,r4
  8082b8:	2821883a 	mov	r16,r5
  8082bc:	39000204 	addi	r4,r7,8
  8082c0:	01400244 	movi	r5,9
  8082c4:	dcc00315 	stw	r19,12(sp)
  8082c8:	dc800215 	stw	r18,8(sp)
  8082cc:	dfc00615 	stw	ra,24(sp)
  8082d0:	dd400515 	stw	r21,20(sp)
  8082d4:	dd000415 	stw	r20,16(sp)
  8082d8:	3825883a 	mov	r18,r7
  8082dc:	3027883a 	mov	r19,r6
  8082e0:	080c9d40 	call	80c9d4 <__divsi3>
  8082e4:	00c00044 	movi	r3,1
  8082e8:	000b883a 	mov	r5,zero
  8082ec:	1880030e 	bge	r3,r2,8082fc <__s2b+0x54>
  8082f0:	18c7883a 	add	r3,r3,r3
  8082f4:	29400044 	addi	r5,r5,1
  8082f8:	18bffd16 	blt	r3,r2,8082f0 <__alt_mem_onchip_mem+0xff7882f0>
  8082fc:	8809883a 	mov	r4,r17
  808300:	08080b80 	call	8080b8 <_Balloc>
  808304:	d8c00717 	ldw	r3,28(sp)
  808308:	10c00515 	stw	r3,20(r2)
  80830c:	00c00044 	movi	r3,1
  808310:	10c00415 	stw	r3,16(r2)
  808314:	00c00244 	movi	r3,9
  808318:	1cc0210e 	bge	r3,r19,8083a0 <__s2b+0xf8>
  80831c:	80eb883a 	add	r21,r16,r3
  808320:	a829883a 	mov	r20,r21
  808324:	84e1883a 	add	r16,r16,r19
  808328:	a1c00007 	ldb	r7,0(r20)
  80832c:	01800284 	movi	r6,10
  808330:	a5000044 	addi	r20,r20,1
  808334:	100b883a 	mov	r5,r2
  808338:	39fff404 	addi	r7,r7,-48
  80833c:	8809883a 	mov	r4,r17
  808340:	08081880 	call	808188 <__multadd>
  808344:	a43ff81e 	bne	r20,r16,808328 <__alt_mem_onchip_mem+0xff788328>
  808348:	ace1883a 	add	r16,r21,r19
  80834c:	843ffe04 	addi	r16,r16,-8
  808350:	9c800a0e 	bge	r19,r18,80837c <__s2b+0xd4>
  808354:	94e5c83a 	sub	r18,r18,r19
  808358:	84a5883a 	add	r18,r16,r18
  80835c:	81c00007 	ldb	r7,0(r16)
  808360:	01800284 	movi	r6,10
  808364:	84000044 	addi	r16,r16,1
  808368:	100b883a 	mov	r5,r2
  80836c:	39fff404 	addi	r7,r7,-48
  808370:	8809883a 	mov	r4,r17
  808374:	08081880 	call	808188 <__multadd>
  808378:	84bff81e 	bne	r16,r18,80835c <__alt_mem_onchip_mem+0xff78835c>
  80837c:	dfc00617 	ldw	ra,24(sp)
  808380:	dd400517 	ldw	r21,20(sp)
  808384:	dd000417 	ldw	r20,16(sp)
  808388:	dcc00317 	ldw	r19,12(sp)
  80838c:	dc800217 	ldw	r18,8(sp)
  808390:	dc400117 	ldw	r17,4(sp)
  808394:	dc000017 	ldw	r16,0(sp)
  808398:	dec00704 	addi	sp,sp,28
  80839c:	f800283a 	ret
  8083a0:	84000284 	addi	r16,r16,10
  8083a4:	1827883a 	mov	r19,r3
  8083a8:	003fe906 	br	808350 <__alt_mem_onchip_mem+0xff788350>

008083ac <__hi0bits>:
  8083ac:	20bfffec 	andhi	r2,r4,65535
  8083b0:	1000141e 	bne	r2,zero,808404 <__hi0bits+0x58>
  8083b4:	2008943a 	slli	r4,r4,16
  8083b8:	00800404 	movi	r2,16
  8083bc:	20ffc02c 	andhi	r3,r4,65280
  8083c0:	1800021e 	bne	r3,zero,8083cc <__hi0bits+0x20>
  8083c4:	2008923a 	slli	r4,r4,8
  8083c8:	10800204 	addi	r2,r2,8
  8083cc:	20fc002c 	andhi	r3,r4,61440
  8083d0:	1800021e 	bne	r3,zero,8083dc <__hi0bits+0x30>
  8083d4:	2008913a 	slli	r4,r4,4
  8083d8:	10800104 	addi	r2,r2,4
  8083dc:	20f0002c 	andhi	r3,r4,49152
  8083e0:	1800031e 	bne	r3,zero,8083f0 <__hi0bits+0x44>
  8083e4:	2109883a 	add	r4,r4,r4
  8083e8:	10800084 	addi	r2,r2,2
  8083ec:	2109883a 	add	r4,r4,r4
  8083f0:	20000316 	blt	r4,zero,808400 <__hi0bits+0x54>
  8083f4:	2110002c 	andhi	r4,r4,16384
  8083f8:	2000041e 	bne	r4,zero,80840c <__hi0bits+0x60>
  8083fc:	00800804 	movi	r2,32
  808400:	f800283a 	ret
  808404:	0005883a 	mov	r2,zero
  808408:	003fec06 	br	8083bc <__alt_mem_onchip_mem+0xff7883bc>
  80840c:	10800044 	addi	r2,r2,1
  808410:	f800283a 	ret

00808414 <__lo0bits>:
  808414:	20c00017 	ldw	r3,0(r4)
  808418:	188001cc 	andi	r2,r3,7
  80841c:	10000826 	beq	r2,zero,808440 <__lo0bits+0x2c>
  808420:	1880004c 	andi	r2,r3,1
  808424:	1000211e 	bne	r2,zero,8084ac <__lo0bits+0x98>
  808428:	1880008c 	andi	r2,r3,2
  80842c:	1000211e 	bne	r2,zero,8084b4 <__lo0bits+0xa0>
  808430:	1806d0ba 	srli	r3,r3,2
  808434:	00800084 	movi	r2,2
  808438:	20c00015 	stw	r3,0(r4)
  80843c:	f800283a 	ret
  808440:	18bfffcc 	andi	r2,r3,65535
  808444:	10001326 	beq	r2,zero,808494 <__lo0bits+0x80>
  808448:	0005883a 	mov	r2,zero
  80844c:	19403fcc 	andi	r5,r3,255
  808450:	2800021e 	bne	r5,zero,80845c <__lo0bits+0x48>
  808454:	1806d23a 	srli	r3,r3,8
  808458:	10800204 	addi	r2,r2,8
  80845c:	194003cc 	andi	r5,r3,15
  808460:	2800021e 	bne	r5,zero,80846c <__lo0bits+0x58>
  808464:	1806d13a 	srli	r3,r3,4
  808468:	10800104 	addi	r2,r2,4
  80846c:	194000cc 	andi	r5,r3,3
  808470:	2800021e 	bne	r5,zero,80847c <__lo0bits+0x68>
  808474:	1806d0ba 	srli	r3,r3,2
  808478:	10800084 	addi	r2,r2,2
  80847c:	1940004c 	andi	r5,r3,1
  808480:	2800081e 	bne	r5,zero,8084a4 <__lo0bits+0x90>
  808484:	1806d07a 	srli	r3,r3,1
  808488:	1800051e 	bne	r3,zero,8084a0 <__lo0bits+0x8c>
  80848c:	00800804 	movi	r2,32
  808490:	f800283a 	ret
  808494:	1806d43a 	srli	r3,r3,16
  808498:	00800404 	movi	r2,16
  80849c:	003feb06 	br	80844c <__alt_mem_onchip_mem+0xff78844c>
  8084a0:	10800044 	addi	r2,r2,1
  8084a4:	20c00015 	stw	r3,0(r4)
  8084a8:	f800283a 	ret
  8084ac:	0005883a 	mov	r2,zero
  8084b0:	f800283a 	ret
  8084b4:	1806d07a 	srli	r3,r3,1
  8084b8:	00800044 	movi	r2,1
  8084bc:	20c00015 	stw	r3,0(r4)
  8084c0:	f800283a 	ret

008084c4 <__i2b>:
  8084c4:	defffd04 	addi	sp,sp,-12
  8084c8:	dc000015 	stw	r16,0(sp)
  8084cc:	04000044 	movi	r16,1
  8084d0:	dc400115 	stw	r17,4(sp)
  8084d4:	2823883a 	mov	r17,r5
  8084d8:	800b883a 	mov	r5,r16
  8084dc:	dfc00215 	stw	ra,8(sp)
  8084e0:	08080b80 	call	8080b8 <_Balloc>
  8084e4:	14400515 	stw	r17,20(r2)
  8084e8:	14000415 	stw	r16,16(r2)
  8084ec:	dfc00217 	ldw	ra,8(sp)
  8084f0:	dc400117 	ldw	r17,4(sp)
  8084f4:	dc000017 	ldw	r16,0(sp)
  8084f8:	dec00304 	addi	sp,sp,12
  8084fc:	f800283a 	ret

00808500 <__multiply>:
  808500:	defffa04 	addi	sp,sp,-24
  808504:	dcc00315 	stw	r19,12(sp)
  808508:	dc800215 	stw	r18,8(sp)
  80850c:	34c00417 	ldw	r19,16(r6)
  808510:	2c800417 	ldw	r18,16(r5)
  808514:	dd000415 	stw	r20,16(sp)
  808518:	dc400115 	stw	r17,4(sp)
  80851c:	dfc00515 	stw	ra,20(sp)
  808520:	dc000015 	stw	r16,0(sp)
  808524:	2829883a 	mov	r20,r5
  808528:	3023883a 	mov	r17,r6
  80852c:	94c0050e 	bge	r18,r19,808544 <__multiply+0x44>
  808530:	9007883a 	mov	r3,r18
  808534:	3029883a 	mov	r20,r6
  808538:	9825883a 	mov	r18,r19
  80853c:	2823883a 	mov	r17,r5
  808540:	1827883a 	mov	r19,r3
  808544:	a0800217 	ldw	r2,8(r20)
  808548:	94e1883a 	add	r16,r18,r19
  80854c:	a1400117 	ldw	r5,4(r20)
  808550:	1400010e 	bge	r2,r16,808558 <__multiply+0x58>
  808554:	29400044 	addi	r5,r5,1
  808558:	08080b80 	call	8080b8 <_Balloc>
  80855c:	8415883a 	add	r10,r16,r16
  808560:	12c00504 	addi	r11,r2,20
  808564:	5295883a 	add	r10,r10,r10
  808568:	5a95883a 	add	r10,r11,r10
  80856c:	5807883a 	mov	r3,r11
  808570:	5a80032e 	bgeu	r11,r10,808580 <__multiply+0x80>
  808574:	18000015 	stw	zero,0(r3)
  808578:	18c00104 	addi	r3,r3,4
  80857c:	1abffd36 	bltu	r3,r10,808574 <__alt_mem_onchip_mem+0xff788574>
  808580:	9ce7883a 	add	r19,r19,r19
  808584:	94a5883a 	add	r18,r18,r18
  808588:	89800504 	addi	r6,r17,20
  80858c:	9ce7883a 	add	r19,r19,r19
  808590:	a3400504 	addi	r13,r20,20
  808594:	94a5883a 	add	r18,r18,r18
  808598:	34d9883a 	add	r12,r6,r19
  80859c:	6c93883a 	add	r9,r13,r18
  8085a0:	3300422e 	bgeu	r6,r12,8086ac <__multiply+0x1ac>
  8085a4:	37c00017 	ldw	ra,0(r6)
  8085a8:	fbffffcc 	andi	r15,ra,65535
  8085ac:	78001b26 	beq	r15,zero,80861c <__multiply+0x11c>
  8085b0:	5811883a 	mov	r8,r11
  8085b4:	681d883a 	mov	r14,r13
  8085b8:	000f883a 	mov	r7,zero
  8085bc:	71000017 	ldw	r4,0(r14)
  8085c0:	40c00017 	ldw	r3,0(r8)
  8085c4:	73800104 	addi	r14,r14,4
  8085c8:	217fffcc 	andi	r5,r4,65535
  8085cc:	2bcb383a 	mul	r5,r5,r15
  8085d0:	2008d43a 	srli	r4,r4,16
  8085d4:	1c7fffcc 	andi	r17,r3,65535
  8085d8:	2c4b883a 	add	r5,r5,r17
  8085dc:	29cb883a 	add	r5,r5,r7
  8085e0:	23c9383a 	mul	r4,r4,r15
  8085e4:	1806d43a 	srli	r3,r3,16
  8085e8:	280ed43a 	srli	r7,r5,16
  8085ec:	297fffcc 	andi	r5,r5,65535
  8085f0:	20c7883a 	add	r3,r4,r3
  8085f4:	19c7883a 	add	r3,r3,r7
  8085f8:	1808943a 	slli	r4,r3,16
  8085fc:	4023883a 	mov	r17,r8
  808600:	180ed43a 	srli	r7,r3,16
  808604:	214ab03a 	or	r5,r4,r5
  808608:	41400015 	stw	r5,0(r8)
  80860c:	42000104 	addi	r8,r8,4
  808610:	727fea36 	bltu	r14,r9,8085bc <__alt_mem_onchip_mem+0xff7885bc>
  808614:	89c00115 	stw	r7,4(r17)
  808618:	37c00017 	ldw	ra,0(r6)
  80861c:	f83ed43a 	srli	ra,ra,16
  808620:	f8001f26 	beq	ra,zero,8086a0 <__multiply+0x1a0>
  808624:	58c00017 	ldw	r3,0(r11)
  808628:	681d883a 	mov	r14,r13
  80862c:	581f883a 	mov	r15,r11
  808630:	1811883a 	mov	r8,r3
  808634:	5825883a 	mov	r18,r11
  808638:	000f883a 	mov	r7,zero
  80863c:	00000106 	br	808644 <__multiply+0x144>
  808640:	8825883a 	mov	r18,r17
  808644:	7140000b 	ldhu	r5,0(r14)
  808648:	4010d43a 	srli	r8,r8,16
  80864c:	193fffcc 	andi	r4,r3,65535
  808650:	2fcb383a 	mul	r5,r5,ra
  808654:	7bc00104 	addi	r15,r15,4
  808658:	73800104 	addi	r14,r14,4
  80865c:	2a0b883a 	add	r5,r5,r8
  808660:	29cb883a 	add	r5,r5,r7
  808664:	2806943a 	slli	r3,r5,16
  808668:	94400104 	addi	r17,r18,4
  80866c:	280ad43a 	srli	r5,r5,16
  808670:	1908b03a 	or	r4,r3,r4
  808674:	793fff15 	stw	r4,-4(r15)
  808678:	70ffff17 	ldw	r3,-4(r14)
  80867c:	8a000017 	ldw	r8,0(r17)
  808680:	1806d43a 	srli	r3,r3,16
  808684:	413fffcc 	andi	r4,r8,65535
  808688:	1fc7383a 	mul	r3,r3,ra
  80868c:	1907883a 	add	r3,r3,r4
  808690:	1947883a 	add	r3,r3,r5
  808694:	180ed43a 	srli	r7,r3,16
  808698:	727fe936 	bltu	r14,r9,808640 <__alt_mem_onchip_mem+0xff788640>
  80869c:	90c00115 	stw	r3,4(r18)
  8086a0:	31800104 	addi	r6,r6,4
  8086a4:	5ac00104 	addi	r11,r11,4
  8086a8:	333fbe36 	bltu	r6,r12,8085a4 <__alt_mem_onchip_mem+0xff7885a4>
  8086ac:	0400090e 	bge	zero,r16,8086d4 <__multiply+0x1d4>
  8086b0:	50ffff17 	ldw	r3,-4(r10)
  8086b4:	52bfff04 	addi	r10,r10,-4
  8086b8:	18000326 	beq	r3,zero,8086c8 <__multiply+0x1c8>
  8086bc:	00000506 	br	8086d4 <__multiply+0x1d4>
  8086c0:	50c00017 	ldw	r3,0(r10)
  8086c4:	1800031e 	bne	r3,zero,8086d4 <__multiply+0x1d4>
  8086c8:	843fffc4 	addi	r16,r16,-1
  8086cc:	52bfff04 	addi	r10,r10,-4
  8086d0:	803ffb1e 	bne	r16,zero,8086c0 <__alt_mem_onchip_mem+0xff7886c0>
  8086d4:	14000415 	stw	r16,16(r2)
  8086d8:	dfc00517 	ldw	ra,20(sp)
  8086dc:	dd000417 	ldw	r20,16(sp)
  8086e0:	dcc00317 	ldw	r19,12(sp)
  8086e4:	dc800217 	ldw	r18,8(sp)
  8086e8:	dc400117 	ldw	r17,4(sp)
  8086ec:	dc000017 	ldw	r16,0(sp)
  8086f0:	dec00604 	addi	sp,sp,24
  8086f4:	f800283a 	ret

008086f8 <__pow5mult>:
  8086f8:	defffa04 	addi	sp,sp,-24
  8086fc:	dcc00315 	stw	r19,12(sp)
  808700:	dc000015 	stw	r16,0(sp)
  808704:	dfc00515 	stw	ra,20(sp)
  808708:	dd000415 	stw	r20,16(sp)
  80870c:	dc800215 	stw	r18,8(sp)
  808710:	dc400115 	stw	r17,4(sp)
  808714:	308000cc 	andi	r2,r6,3
  808718:	3021883a 	mov	r16,r6
  80871c:	2027883a 	mov	r19,r4
  808720:	10002f1e 	bne	r2,zero,8087e0 <__pow5mult+0xe8>
  808724:	2825883a 	mov	r18,r5
  808728:	8021d0ba 	srai	r16,r16,2
  80872c:	80001a26 	beq	r16,zero,808798 <__pow5mult+0xa0>
  808730:	9c401217 	ldw	r17,72(r19)
  808734:	8800061e 	bne	r17,zero,808750 <__pow5mult+0x58>
  808738:	00003406 	br	80880c <__pow5mult+0x114>
  80873c:	8021d07a 	srai	r16,r16,1
  808740:	80001526 	beq	r16,zero,808798 <__pow5mult+0xa0>
  808744:	88800017 	ldw	r2,0(r17)
  808748:	10001c26 	beq	r2,zero,8087bc <__pow5mult+0xc4>
  80874c:	1023883a 	mov	r17,r2
  808750:	8080004c 	andi	r2,r16,1
  808754:	103ff926 	beq	r2,zero,80873c <__alt_mem_onchip_mem+0xff78873c>
  808758:	880d883a 	mov	r6,r17
  80875c:	900b883a 	mov	r5,r18
  808760:	9809883a 	mov	r4,r19
  808764:	08085000 	call	808500 <__multiply>
  808768:	90001b26 	beq	r18,zero,8087d8 <__pow5mult+0xe0>
  80876c:	91000117 	ldw	r4,4(r18)
  808770:	98c01317 	ldw	r3,76(r19)
  808774:	8021d07a 	srai	r16,r16,1
  808778:	2109883a 	add	r4,r4,r4
  80877c:	2109883a 	add	r4,r4,r4
  808780:	1907883a 	add	r3,r3,r4
  808784:	19000017 	ldw	r4,0(r3)
  808788:	91000015 	stw	r4,0(r18)
  80878c:	1c800015 	stw	r18,0(r3)
  808790:	1025883a 	mov	r18,r2
  808794:	803feb1e 	bne	r16,zero,808744 <__alt_mem_onchip_mem+0xff788744>
  808798:	9005883a 	mov	r2,r18
  80879c:	dfc00517 	ldw	ra,20(sp)
  8087a0:	dd000417 	ldw	r20,16(sp)
  8087a4:	dcc00317 	ldw	r19,12(sp)
  8087a8:	dc800217 	ldw	r18,8(sp)
  8087ac:	dc400117 	ldw	r17,4(sp)
  8087b0:	dc000017 	ldw	r16,0(sp)
  8087b4:	dec00604 	addi	sp,sp,24
  8087b8:	f800283a 	ret
  8087bc:	880d883a 	mov	r6,r17
  8087c0:	880b883a 	mov	r5,r17
  8087c4:	9809883a 	mov	r4,r19
  8087c8:	08085000 	call	808500 <__multiply>
  8087cc:	88800015 	stw	r2,0(r17)
  8087d0:	10000015 	stw	zero,0(r2)
  8087d4:	003fdd06 	br	80874c <__alt_mem_onchip_mem+0xff78874c>
  8087d8:	1025883a 	mov	r18,r2
  8087dc:	003fd706 	br	80873c <__alt_mem_onchip_mem+0xff78873c>
  8087e0:	10bfffc4 	addi	r2,r2,-1
  8087e4:	1085883a 	add	r2,r2,r2
  8087e8:	00c02074 	movhi	r3,129
  8087ec:	18cd0204 	addi	r3,r3,13320
  8087f0:	1085883a 	add	r2,r2,r2
  8087f4:	1885883a 	add	r2,r3,r2
  8087f8:	11800017 	ldw	r6,0(r2)
  8087fc:	000f883a 	mov	r7,zero
  808800:	08081880 	call	808188 <__multadd>
  808804:	1025883a 	mov	r18,r2
  808808:	003fc706 	br	808728 <__alt_mem_onchip_mem+0xff788728>
  80880c:	05000044 	movi	r20,1
  808810:	a00b883a 	mov	r5,r20
  808814:	9809883a 	mov	r4,r19
  808818:	08080b80 	call	8080b8 <_Balloc>
  80881c:	1023883a 	mov	r17,r2
  808820:	00809c44 	movi	r2,625
  808824:	88800515 	stw	r2,20(r17)
  808828:	8d000415 	stw	r20,16(r17)
  80882c:	9c401215 	stw	r17,72(r19)
  808830:	88000015 	stw	zero,0(r17)
  808834:	003fc606 	br	808750 <__alt_mem_onchip_mem+0xff788750>

00808838 <__lshift>:
  808838:	defff904 	addi	sp,sp,-28
  80883c:	dd400515 	stw	r21,20(sp)
  808840:	dcc00315 	stw	r19,12(sp)
  808844:	302bd17a 	srai	r21,r6,5
  808848:	2cc00417 	ldw	r19,16(r5)
  80884c:	28800217 	ldw	r2,8(r5)
  808850:	dd000415 	stw	r20,16(sp)
  808854:	ace7883a 	add	r19,r21,r19
  808858:	dc800215 	stw	r18,8(sp)
  80885c:	dc400115 	stw	r17,4(sp)
  808860:	dc000015 	stw	r16,0(sp)
  808864:	dfc00615 	stw	ra,24(sp)
  808868:	9c000044 	addi	r16,r19,1
  80886c:	2823883a 	mov	r17,r5
  808870:	3029883a 	mov	r20,r6
  808874:	2025883a 	mov	r18,r4
  808878:	29400117 	ldw	r5,4(r5)
  80887c:	1400030e 	bge	r2,r16,80888c <__lshift+0x54>
  808880:	1085883a 	add	r2,r2,r2
  808884:	29400044 	addi	r5,r5,1
  808888:	143ffd16 	blt	r2,r16,808880 <__alt_mem_onchip_mem+0xff788880>
  80888c:	9009883a 	mov	r4,r18
  808890:	08080b80 	call	8080b8 <_Balloc>
  808894:	10c00504 	addi	r3,r2,20
  808898:	0540070e 	bge	zero,r21,8088b8 <__lshift+0x80>
  80889c:	ad6b883a 	add	r21,r21,r21
  8088a0:	ad6b883a 	add	r21,r21,r21
  8088a4:	1809883a 	mov	r4,r3
  8088a8:	1d47883a 	add	r3,r3,r21
  8088ac:	20000015 	stw	zero,0(r4)
  8088b0:	21000104 	addi	r4,r4,4
  8088b4:	193ffd1e 	bne	r3,r4,8088ac <__alt_mem_onchip_mem+0xff7888ac>
  8088b8:	8a000417 	ldw	r8,16(r17)
  8088bc:	89000504 	addi	r4,r17,20
  8088c0:	a18007cc 	andi	r6,r20,31
  8088c4:	4211883a 	add	r8,r8,r8
  8088c8:	4211883a 	add	r8,r8,r8
  8088cc:	2211883a 	add	r8,r4,r8
  8088d0:	30002326 	beq	r6,zero,808960 <__lshift+0x128>
  8088d4:	02400804 	movi	r9,32
  8088d8:	4993c83a 	sub	r9,r9,r6
  8088dc:	000b883a 	mov	r5,zero
  8088e0:	21c00017 	ldw	r7,0(r4)
  8088e4:	1815883a 	mov	r10,r3
  8088e8:	18c00104 	addi	r3,r3,4
  8088ec:	398e983a 	sll	r7,r7,r6
  8088f0:	21000104 	addi	r4,r4,4
  8088f4:	394ab03a 	or	r5,r7,r5
  8088f8:	197fff15 	stw	r5,-4(r3)
  8088fc:	217fff17 	ldw	r5,-4(r4)
  808900:	2a4ad83a 	srl	r5,r5,r9
  808904:	223ff636 	bltu	r4,r8,8088e0 <__alt_mem_onchip_mem+0xff7888e0>
  808908:	51400115 	stw	r5,4(r10)
  80890c:	28001a1e 	bne	r5,zero,808978 <__lshift+0x140>
  808910:	843fffc4 	addi	r16,r16,-1
  808914:	14000415 	stw	r16,16(r2)
  808918:	88000826 	beq	r17,zero,80893c <__lshift+0x104>
  80891c:	89000117 	ldw	r4,4(r17)
  808920:	90c01317 	ldw	r3,76(r18)
  808924:	2109883a 	add	r4,r4,r4
  808928:	2109883a 	add	r4,r4,r4
  80892c:	1907883a 	add	r3,r3,r4
  808930:	19000017 	ldw	r4,0(r3)
  808934:	89000015 	stw	r4,0(r17)
  808938:	1c400015 	stw	r17,0(r3)
  80893c:	dfc00617 	ldw	ra,24(sp)
  808940:	dd400517 	ldw	r21,20(sp)
  808944:	dd000417 	ldw	r20,16(sp)
  808948:	dcc00317 	ldw	r19,12(sp)
  80894c:	dc800217 	ldw	r18,8(sp)
  808950:	dc400117 	ldw	r17,4(sp)
  808954:	dc000017 	ldw	r16,0(sp)
  808958:	dec00704 	addi	sp,sp,28
  80895c:	f800283a 	ret
  808960:	21400017 	ldw	r5,0(r4)
  808964:	18c00104 	addi	r3,r3,4
  808968:	21000104 	addi	r4,r4,4
  80896c:	197fff15 	stw	r5,-4(r3)
  808970:	223ffb36 	bltu	r4,r8,808960 <__alt_mem_onchip_mem+0xff788960>
  808974:	003fe606 	br	808910 <__alt_mem_onchip_mem+0xff788910>
  808978:	9c000084 	addi	r16,r19,2
  80897c:	003fe406 	br	808910 <__alt_mem_onchip_mem+0xff788910>

00808980 <__mcmp>:
  808980:	20800417 	ldw	r2,16(r4)
  808984:	28c00417 	ldw	r3,16(r5)
  808988:	10c5c83a 	sub	r2,r2,r3
  80898c:	1000111e 	bne	r2,zero,8089d4 <__mcmp+0x54>
  808990:	18c7883a 	add	r3,r3,r3
  808994:	18c7883a 	add	r3,r3,r3
  808998:	21000504 	addi	r4,r4,20
  80899c:	29400504 	addi	r5,r5,20
  8089a0:	20c5883a 	add	r2,r4,r3
  8089a4:	28cb883a 	add	r5,r5,r3
  8089a8:	00000106 	br	8089b0 <__mcmp+0x30>
  8089ac:	20800a2e 	bgeu	r4,r2,8089d8 <__mcmp+0x58>
  8089b0:	10bfff04 	addi	r2,r2,-4
  8089b4:	297fff04 	addi	r5,r5,-4
  8089b8:	11800017 	ldw	r6,0(r2)
  8089bc:	28c00017 	ldw	r3,0(r5)
  8089c0:	30fffa26 	beq	r6,r3,8089ac <__alt_mem_onchip_mem+0xff7889ac>
  8089c4:	30c00236 	bltu	r6,r3,8089d0 <__mcmp+0x50>
  8089c8:	00800044 	movi	r2,1
  8089cc:	f800283a 	ret
  8089d0:	00bfffc4 	movi	r2,-1
  8089d4:	f800283a 	ret
  8089d8:	0005883a 	mov	r2,zero
  8089dc:	f800283a 	ret

008089e0 <__mdiff>:
  8089e0:	28c00417 	ldw	r3,16(r5)
  8089e4:	30800417 	ldw	r2,16(r6)
  8089e8:	defffa04 	addi	sp,sp,-24
  8089ec:	dcc00315 	stw	r19,12(sp)
  8089f0:	dc800215 	stw	r18,8(sp)
  8089f4:	dfc00515 	stw	ra,20(sp)
  8089f8:	dd000415 	stw	r20,16(sp)
  8089fc:	dc400115 	stw	r17,4(sp)
  808a00:	dc000015 	stw	r16,0(sp)
  808a04:	1887c83a 	sub	r3,r3,r2
  808a08:	2825883a 	mov	r18,r5
  808a0c:	3027883a 	mov	r19,r6
  808a10:	1800141e 	bne	r3,zero,808a64 <__mdiff+0x84>
  808a14:	1085883a 	add	r2,r2,r2
  808a18:	1085883a 	add	r2,r2,r2
  808a1c:	2a000504 	addi	r8,r5,20
  808a20:	34000504 	addi	r16,r6,20
  808a24:	4087883a 	add	r3,r8,r2
  808a28:	8085883a 	add	r2,r16,r2
  808a2c:	00000106 	br	808a34 <__mdiff+0x54>
  808a30:	40c0592e 	bgeu	r8,r3,808b98 <__mdiff+0x1b8>
  808a34:	18ffff04 	addi	r3,r3,-4
  808a38:	10bfff04 	addi	r2,r2,-4
  808a3c:	19c00017 	ldw	r7,0(r3)
  808a40:	11400017 	ldw	r5,0(r2)
  808a44:	397ffa26 	beq	r7,r5,808a30 <__alt_mem_onchip_mem+0xff788a30>
  808a48:	3940592e 	bgeu	r7,r5,808bb0 <__mdiff+0x1d0>
  808a4c:	9005883a 	mov	r2,r18
  808a50:	4023883a 	mov	r17,r8
  808a54:	9825883a 	mov	r18,r19
  808a58:	05000044 	movi	r20,1
  808a5c:	1027883a 	mov	r19,r2
  808a60:	00000406 	br	808a74 <__mdiff+0x94>
  808a64:	18005616 	blt	r3,zero,808bc0 <__mdiff+0x1e0>
  808a68:	34400504 	addi	r17,r6,20
  808a6c:	2c000504 	addi	r16,r5,20
  808a70:	0029883a 	mov	r20,zero
  808a74:	91400117 	ldw	r5,4(r18)
  808a78:	08080b80 	call	8080b8 <_Balloc>
  808a7c:	92400417 	ldw	r9,16(r18)
  808a80:	9b000417 	ldw	r12,16(r19)
  808a84:	12c00504 	addi	r11,r2,20
  808a88:	4a51883a 	add	r8,r9,r9
  808a8c:	6319883a 	add	r12,r12,r12
  808a90:	4211883a 	add	r8,r8,r8
  808a94:	6319883a 	add	r12,r12,r12
  808a98:	15000315 	stw	r20,12(r2)
  808a9c:	8211883a 	add	r8,r16,r8
  808aa0:	8b19883a 	add	r12,r17,r12
  808aa4:	0007883a 	mov	r3,zero
  808aa8:	81400017 	ldw	r5,0(r16)
  808aac:	89c00017 	ldw	r7,0(r17)
  808ab0:	59800104 	addi	r6,r11,4
  808ab4:	293fffcc 	andi	r4,r5,65535
  808ab8:	20c7883a 	add	r3,r4,r3
  808abc:	393fffcc 	andi	r4,r7,65535
  808ac0:	1909c83a 	sub	r4,r3,r4
  808ac4:	280ad43a 	srli	r5,r5,16
  808ac8:	380ed43a 	srli	r7,r7,16
  808acc:	2007d43a 	srai	r3,r4,16
  808ad0:	213fffcc 	andi	r4,r4,65535
  808ad4:	29cbc83a 	sub	r5,r5,r7
  808ad8:	28c7883a 	add	r3,r5,r3
  808adc:	180a943a 	slli	r5,r3,16
  808ae0:	8c400104 	addi	r17,r17,4
  808ae4:	84000104 	addi	r16,r16,4
  808ae8:	2908b03a 	or	r4,r5,r4
  808aec:	59000015 	stw	r4,0(r11)
  808af0:	1807d43a 	srai	r3,r3,16
  808af4:	3015883a 	mov	r10,r6
  808af8:	3017883a 	mov	r11,r6
  808afc:	8b3fea36 	bltu	r17,r12,808aa8 <__alt_mem_onchip_mem+0xff788aa8>
  808b00:	8200162e 	bgeu	r16,r8,808b5c <__mdiff+0x17c>
  808b04:	8017883a 	mov	r11,r16
  808b08:	59400017 	ldw	r5,0(r11)
  808b0c:	31800104 	addi	r6,r6,4
  808b10:	5ac00104 	addi	r11,r11,4
  808b14:	293fffcc 	andi	r4,r5,65535
  808b18:	20c7883a 	add	r3,r4,r3
  808b1c:	280ed43a 	srli	r7,r5,16
  808b20:	180bd43a 	srai	r5,r3,16
  808b24:	193fffcc 	andi	r4,r3,65535
  808b28:	3947883a 	add	r3,r7,r5
  808b2c:	180a943a 	slli	r5,r3,16
  808b30:	1807d43a 	srai	r3,r3,16
  808b34:	2908b03a 	or	r4,r5,r4
  808b38:	313fff15 	stw	r4,-4(r6)
  808b3c:	5a3ff236 	bltu	r11,r8,808b08 <__alt_mem_onchip_mem+0xff788b08>
  808b40:	0406303a 	nor	r3,zero,r16
  808b44:	1a07883a 	add	r3,r3,r8
  808b48:	1806d0ba 	srli	r3,r3,2
  808b4c:	18c00044 	addi	r3,r3,1
  808b50:	18c7883a 	add	r3,r3,r3
  808b54:	18c7883a 	add	r3,r3,r3
  808b58:	50d5883a 	add	r10,r10,r3
  808b5c:	50ffff04 	addi	r3,r10,-4
  808b60:	2000041e 	bne	r4,zero,808b74 <__mdiff+0x194>
  808b64:	18ffff04 	addi	r3,r3,-4
  808b68:	19000017 	ldw	r4,0(r3)
  808b6c:	4a7fffc4 	addi	r9,r9,-1
  808b70:	203ffc26 	beq	r4,zero,808b64 <__alt_mem_onchip_mem+0xff788b64>
  808b74:	12400415 	stw	r9,16(r2)
  808b78:	dfc00517 	ldw	ra,20(sp)
  808b7c:	dd000417 	ldw	r20,16(sp)
  808b80:	dcc00317 	ldw	r19,12(sp)
  808b84:	dc800217 	ldw	r18,8(sp)
  808b88:	dc400117 	ldw	r17,4(sp)
  808b8c:	dc000017 	ldw	r16,0(sp)
  808b90:	dec00604 	addi	sp,sp,24
  808b94:	f800283a 	ret
  808b98:	000b883a 	mov	r5,zero
  808b9c:	08080b80 	call	8080b8 <_Balloc>
  808ba0:	00c00044 	movi	r3,1
  808ba4:	10c00415 	stw	r3,16(r2)
  808ba8:	10000515 	stw	zero,20(r2)
  808bac:	003ff206 	br	808b78 <__alt_mem_onchip_mem+0xff788b78>
  808bb0:	8023883a 	mov	r17,r16
  808bb4:	0029883a 	mov	r20,zero
  808bb8:	4021883a 	mov	r16,r8
  808bbc:	003fad06 	br	808a74 <__alt_mem_onchip_mem+0xff788a74>
  808bc0:	9005883a 	mov	r2,r18
  808bc4:	94400504 	addi	r17,r18,20
  808bc8:	9c000504 	addi	r16,r19,20
  808bcc:	9825883a 	mov	r18,r19
  808bd0:	05000044 	movi	r20,1
  808bd4:	1027883a 	mov	r19,r2
  808bd8:	003fa606 	br	808a74 <__alt_mem_onchip_mem+0xff788a74>

00808bdc <__ulp>:
  808bdc:	295ffc2c 	andhi	r5,r5,32752
  808be0:	00bf3034 	movhi	r2,64704
  808be4:	2887883a 	add	r3,r5,r2
  808be8:	00c0020e 	bge	zero,r3,808bf4 <__ulp+0x18>
  808bec:	0005883a 	mov	r2,zero
  808bf0:	f800283a 	ret
  808bf4:	00c7c83a 	sub	r3,zero,r3
  808bf8:	1807d53a 	srai	r3,r3,20
  808bfc:	008004c4 	movi	r2,19
  808c00:	10c00b0e 	bge	r2,r3,808c30 <__ulp+0x54>
  808c04:	18bffb04 	addi	r2,r3,-20
  808c08:	01000784 	movi	r4,30
  808c0c:	0007883a 	mov	r3,zero
  808c10:	20800516 	blt	r4,r2,808c28 <__ulp+0x4c>
  808c14:	010007c4 	movi	r4,31
  808c18:	2089c83a 	sub	r4,r4,r2
  808c1c:	00800044 	movi	r2,1
  808c20:	1104983a 	sll	r2,r2,r4
  808c24:	f800283a 	ret
  808c28:	00800044 	movi	r2,1
  808c2c:	f800283a 	ret
  808c30:	01400234 	movhi	r5,8
  808c34:	28c7d83a 	sra	r3,r5,r3
  808c38:	0005883a 	mov	r2,zero
  808c3c:	f800283a 	ret

00808c40 <__b2d>:
  808c40:	defffa04 	addi	sp,sp,-24
  808c44:	dc000015 	stw	r16,0(sp)
  808c48:	24000417 	ldw	r16,16(r4)
  808c4c:	dc400115 	stw	r17,4(sp)
  808c50:	24400504 	addi	r17,r4,20
  808c54:	8421883a 	add	r16,r16,r16
  808c58:	8421883a 	add	r16,r16,r16
  808c5c:	8c21883a 	add	r16,r17,r16
  808c60:	dc800215 	stw	r18,8(sp)
  808c64:	84bfff17 	ldw	r18,-4(r16)
  808c68:	dd000415 	stw	r20,16(sp)
  808c6c:	dcc00315 	stw	r19,12(sp)
  808c70:	9009883a 	mov	r4,r18
  808c74:	2829883a 	mov	r20,r5
  808c78:	dfc00515 	stw	ra,20(sp)
  808c7c:	08083ac0 	call	8083ac <__hi0bits>
  808c80:	00c00804 	movi	r3,32
  808c84:	1889c83a 	sub	r4,r3,r2
  808c88:	a1000015 	stw	r4,0(r20)
  808c8c:	01000284 	movi	r4,10
  808c90:	84ffff04 	addi	r19,r16,-4
  808c94:	20801216 	blt	r4,r2,808ce0 <__b2d+0xa0>
  808c98:	018002c4 	movi	r6,11
  808c9c:	308dc83a 	sub	r6,r6,r2
  808ca0:	9186d83a 	srl	r3,r18,r6
  808ca4:	18cffc34 	orhi	r3,r3,16368
  808ca8:	8cc0212e 	bgeu	r17,r19,808d30 <__b2d+0xf0>
  808cac:	813ffe17 	ldw	r4,-8(r16)
  808cb0:	218cd83a 	srl	r6,r4,r6
  808cb4:	10800544 	addi	r2,r2,21
  808cb8:	9084983a 	sll	r2,r18,r2
  808cbc:	1184b03a 	or	r2,r2,r6
  808cc0:	dfc00517 	ldw	ra,20(sp)
  808cc4:	dd000417 	ldw	r20,16(sp)
  808cc8:	dcc00317 	ldw	r19,12(sp)
  808ccc:	dc800217 	ldw	r18,8(sp)
  808cd0:	dc400117 	ldw	r17,4(sp)
  808cd4:	dc000017 	ldw	r16,0(sp)
  808cd8:	dec00604 	addi	sp,sp,24
  808cdc:	f800283a 	ret
  808ce0:	8cc00f2e 	bgeu	r17,r19,808d20 <__b2d+0xe0>
  808ce4:	117ffd44 	addi	r5,r2,-11
  808ce8:	80bffe17 	ldw	r2,-8(r16)
  808cec:	28000e26 	beq	r5,zero,808d28 <__b2d+0xe8>
  808cf0:	1949c83a 	sub	r4,r3,r5
  808cf4:	9164983a 	sll	r18,r18,r5
  808cf8:	1106d83a 	srl	r3,r2,r4
  808cfc:	81bffe04 	addi	r6,r16,-8
  808d00:	948ffc34 	orhi	r18,r18,16368
  808d04:	90c6b03a 	or	r3,r18,r3
  808d08:	89800e2e 	bgeu	r17,r6,808d44 <__b2d+0x104>
  808d0c:	81bffd17 	ldw	r6,-12(r16)
  808d10:	1144983a 	sll	r2,r2,r5
  808d14:	310ad83a 	srl	r5,r6,r4
  808d18:	2884b03a 	or	r2,r5,r2
  808d1c:	003fe806 	br	808cc0 <__alt_mem_onchip_mem+0xff788cc0>
  808d20:	10bffd44 	addi	r2,r2,-11
  808d24:	1000041e 	bne	r2,zero,808d38 <__b2d+0xf8>
  808d28:	90cffc34 	orhi	r3,r18,16368
  808d2c:	003fe406 	br	808cc0 <__alt_mem_onchip_mem+0xff788cc0>
  808d30:	000d883a 	mov	r6,zero
  808d34:	003fdf06 	br	808cb4 <__alt_mem_onchip_mem+0xff788cb4>
  808d38:	90a4983a 	sll	r18,r18,r2
  808d3c:	0005883a 	mov	r2,zero
  808d40:	003ff906 	br	808d28 <__alt_mem_onchip_mem+0xff788d28>
  808d44:	1144983a 	sll	r2,r2,r5
  808d48:	003fdd06 	br	808cc0 <__alt_mem_onchip_mem+0xff788cc0>

00808d4c <__d2b>:
  808d4c:	defff804 	addi	sp,sp,-32
  808d50:	dc000215 	stw	r16,8(sp)
  808d54:	3021883a 	mov	r16,r6
  808d58:	dc400315 	stw	r17,12(sp)
  808d5c:	8022907a 	slli	r17,r16,1
  808d60:	dd000615 	stw	r20,24(sp)
  808d64:	2829883a 	mov	r20,r5
  808d68:	01400044 	movi	r5,1
  808d6c:	dcc00515 	stw	r19,20(sp)
  808d70:	dc800415 	stw	r18,16(sp)
  808d74:	dfc00715 	stw	ra,28(sp)
  808d78:	3825883a 	mov	r18,r7
  808d7c:	8822d57a 	srli	r17,r17,21
  808d80:	08080b80 	call	8080b8 <_Balloc>
  808d84:	1027883a 	mov	r19,r2
  808d88:	00800434 	movhi	r2,16
  808d8c:	10bfffc4 	addi	r2,r2,-1
  808d90:	808c703a 	and	r6,r16,r2
  808d94:	88000126 	beq	r17,zero,808d9c <__d2b+0x50>
  808d98:	31800434 	orhi	r6,r6,16
  808d9c:	d9800015 	stw	r6,0(sp)
  808da0:	a0002426 	beq	r20,zero,808e34 <__d2b+0xe8>
  808da4:	d9000104 	addi	r4,sp,4
  808da8:	dd000115 	stw	r20,4(sp)
  808dac:	08084140 	call	808414 <__lo0bits>
  808db0:	d8c00017 	ldw	r3,0(sp)
  808db4:	10002f1e 	bne	r2,zero,808e74 <__d2b+0x128>
  808db8:	d9000117 	ldw	r4,4(sp)
  808dbc:	99000515 	stw	r4,20(r19)
  808dc0:	1821003a 	cmpeq	r16,r3,zero
  808dc4:	01000084 	movi	r4,2
  808dc8:	2421c83a 	sub	r16,r4,r16
  808dcc:	98c00615 	stw	r3,24(r19)
  808dd0:	9c000415 	stw	r16,16(r19)
  808dd4:	88001f1e 	bne	r17,zero,808e54 <__d2b+0x108>
  808dd8:	10bef384 	addi	r2,r2,-1074
  808ddc:	90800015 	stw	r2,0(r18)
  808de0:	00900034 	movhi	r2,16384
  808de4:	10bfffc4 	addi	r2,r2,-1
  808de8:	8085883a 	add	r2,r16,r2
  808dec:	1085883a 	add	r2,r2,r2
  808df0:	1085883a 	add	r2,r2,r2
  808df4:	9885883a 	add	r2,r19,r2
  808df8:	11000517 	ldw	r4,20(r2)
  808dfc:	8020917a 	slli	r16,r16,5
  808e00:	08083ac0 	call	8083ac <__hi0bits>
  808e04:	d8c00817 	ldw	r3,32(sp)
  808e08:	8085c83a 	sub	r2,r16,r2
  808e0c:	18800015 	stw	r2,0(r3)
  808e10:	9805883a 	mov	r2,r19
  808e14:	dfc00717 	ldw	ra,28(sp)
  808e18:	dd000617 	ldw	r20,24(sp)
  808e1c:	dcc00517 	ldw	r19,20(sp)
  808e20:	dc800417 	ldw	r18,16(sp)
  808e24:	dc400317 	ldw	r17,12(sp)
  808e28:	dc000217 	ldw	r16,8(sp)
  808e2c:	dec00804 	addi	sp,sp,32
  808e30:	f800283a 	ret
  808e34:	d809883a 	mov	r4,sp
  808e38:	08084140 	call	808414 <__lo0bits>
  808e3c:	d8c00017 	ldw	r3,0(sp)
  808e40:	04000044 	movi	r16,1
  808e44:	9c000415 	stw	r16,16(r19)
  808e48:	98c00515 	stw	r3,20(r19)
  808e4c:	10800804 	addi	r2,r2,32
  808e50:	883fe126 	beq	r17,zero,808dd8 <__alt_mem_onchip_mem+0xff788dd8>
  808e54:	00c00d44 	movi	r3,53
  808e58:	8c7ef344 	addi	r17,r17,-1075
  808e5c:	88a3883a 	add	r17,r17,r2
  808e60:	1885c83a 	sub	r2,r3,r2
  808e64:	d8c00817 	ldw	r3,32(sp)
  808e68:	94400015 	stw	r17,0(r18)
  808e6c:	18800015 	stw	r2,0(r3)
  808e70:	003fe706 	br	808e10 <__alt_mem_onchip_mem+0xff788e10>
  808e74:	01000804 	movi	r4,32
  808e78:	2089c83a 	sub	r4,r4,r2
  808e7c:	1908983a 	sll	r4,r3,r4
  808e80:	d9400117 	ldw	r5,4(sp)
  808e84:	1886d83a 	srl	r3,r3,r2
  808e88:	2148b03a 	or	r4,r4,r5
  808e8c:	99000515 	stw	r4,20(r19)
  808e90:	d8c00015 	stw	r3,0(sp)
  808e94:	003fca06 	br	808dc0 <__alt_mem_onchip_mem+0xff788dc0>

00808e98 <__ratio>:
  808e98:	defff904 	addi	sp,sp,-28
  808e9c:	dc400315 	stw	r17,12(sp)
  808ea0:	2823883a 	mov	r17,r5
  808ea4:	d9400104 	addi	r5,sp,4
  808ea8:	dfc00615 	stw	ra,24(sp)
  808eac:	dcc00515 	stw	r19,20(sp)
  808eb0:	dc800415 	stw	r18,16(sp)
  808eb4:	2027883a 	mov	r19,r4
  808eb8:	dc000215 	stw	r16,8(sp)
  808ebc:	0808c400 	call	808c40 <__b2d>
  808ec0:	d80b883a 	mov	r5,sp
  808ec4:	8809883a 	mov	r4,r17
  808ec8:	1025883a 	mov	r18,r2
  808ecc:	1821883a 	mov	r16,r3
  808ed0:	0808c400 	call	808c40 <__b2d>
  808ed4:	8a000417 	ldw	r8,16(r17)
  808ed8:	99000417 	ldw	r4,16(r19)
  808edc:	d9400117 	ldw	r5,4(sp)
  808ee0:	2209c83a 	sub	r4,r4,r8
  808ee4:	2010917a 	slli	r8,r4,5
  808ee8:	d9000017 	ldw	r4,0(sp)
  808eec:	2909c83a 	sub	r4,r5,r4
  808ef0:	4109883a 	add	r4,r8,r4
  808ef4:	01000e0e 	bge	zero,r4,808f30 <__ratio+0x98>
  808ef8:	2008953a 	slli	r4,r4,20
  808efc:	2421883a 	add	r16,r4,r16
  808f00:	100d883a 	mov	r6,r2
  808f04:	180f883a 	mov	r7,r3
  808f08:	9009883a 	mov	r4,r18
  808f0c:	800b883a 	mov	r5,r16
  808f10:	080d4340 	call	80d434 <__divdf3>
  808f14:	dfc00617 	ldw	ra,24(sp)
  808f18:	dcc00517 	ldw	r19,20(sp)
  808f1c:	dc800417 	ldw	r18,16(sp)
  808f20:	dc400317 	ldw	r17,12(sp)
  808f24:	dc000217 	ldw	r16,8(sp)
  808f28:	dec00704 	addi	sp,sp,28
  808f2c:	f800283a 	ret
  808f30:	2008953a 	slli	r4,r4,20
  808f34:	1907c83a 	sub	r3,r3,r4
  808f38:	003ff106 	br	808f00 <__alt_mem_onchip_mem+0xff788f00>

00808f3c <_mprec_log10>:
  808f3c:	defffe04 	addi	sp,sp,-8
  808f40:	dc000015 	stw	r16,0(sp)
  808f44:	dfc00115 	stw	ra,4(sp)
  808f48:	008005c4 	movi	r2,23
  808f4c:	2021883a 	mov	r16,r4
  808f50:	11000d0e 	bge	r2,r4,808f88 <_mprec_log10+0x4c>
  808f54:	0005883a 	mov	r2,zero
  808f58:	00cffc34 	movhi	r3,16368
  808f5c:	843fffc4 	addi	r16,r16,-1
  808f60:	000d883a 	mov	r6,zero
  808f64:	01d00934 	movhi	r7,16420
  808f68:	1009883a 	mov	r4,r2
  808f6c:	180b883a 	mov	r5,r3
  808f70:	080df740 	call	80df74 <__muldf3>
  808f74:	803ff91e 	bne	r16,zero,808f5c <__alt_mem_onchip_mem+0xff788f5c>
  808f78:	dfc00117 	ldw	ra,4(sp)
  808f7c:	dc000017 	ldw	r16,0(sp)
  808f80:	dec00204 	addi	sp,sp,8
  808f84:	f800283a 	ret
  808f88:	202090fa 	slli	r16,r4,3
  808f8c:	00802074 	movhi	r2,129
  808f90:	108d1904 	addi	r2,r2,13412
  808f94:	1421883a 	add	r16,r2,r16
  808f98:	80800017 	ldw	r2,0(r16)
  808f9c:	80c00117 	ldw	r3,4(r16)
  808fa0:	dfc00117 	ldw	ra,4(sp)
  808fa4:	dc000017 	ldw	r16,0(sp)
  808fa8:	dec00204 	addi	sp,sp,8
  808fac:	f800283a 	ret

00808fb0 <__copybits>:
  808fb0:	297fffc4 	addi	r5,r5,-1
  808fb4:	280fd17a 	srai	r7,r5,5
  808fb8:	30c00417 	ldw	r3,16(r6)
  808fbc:	30800504 	addi	r2,r6,20
  808fc0:	39c00044 	addi	r7,r7,1
  808fc4:	18c7883a 	add	r3,r3,r3
  808fc8:	39cf883a 	add	r7,r7,r7
  808fcc:	18c7883a 	add	r3,r3,r3
  808fd0:	39cf883a 	add	r7,r7,r7
  808fd4:	10c7883a 	add	r3,r2,r3
  808fd8:	21cf883a 	add	r7,r4,r7
  808fdc:	10c00d2e 	bgeu	r2,r3,809014 <__copybits+0x64>
  808fe0:	200b883a 	mov	r5,r4
  808fe4:	12000017 	ldw	r8,0(r2)
  808fe8:	29400104 	addi	r5,r5,4
  808fec:	10800104 	addi	r2,r2,4
  808ff0:	2a3fff15 	stw	r8,-4(r5)
  808ff4:	10fffb36 	bltu	r2,r3,808fe4 <__alt_mem_onchip_mem+0xff788fe4>
  808ff8:	1985c83a 	sub	r2,r3,r6
  808ffc:	10bffac4 	addi	r2,r2,-21
  809000:	1004d0ba 	srli	r2,r2,2
  809004:	10800044 	addi	r2,r2,1
  809008:	1085883a 	add	r2,r2,r2
  80900c:	1085883a 	add	r2,r2,r2
  809010:	2089883a 	add	r4,r4,r2
  809014:	21c0032e 	bgeu	r4,r7,809024 <__copybits+0x74>
  809018:	20000015 	stw	zero,0(r4)
  80901c:	21000104 	addi	r4,r4,4
  809020:	21fffd36 	bltu	r4,r7,809018 <__alt_mem_onchip_mem+0xff789018>
  809024:	f800283a 	ret

00809028 <__any_on>:
  809028:	20c00417 	ldw	r3,16(r4)
  80902c:	2805d17a 	srai	r2,r5,5
  809030:	21000504 	addi	r4,r4,20
  809034:	18800d0e 	bge	r3,r2,80906c <__any_on+0x44>
  809038:	18c7883a 	add	r3,r3,r3
  80903c:	18c7883a 	add	r3,r3,r3
  809040:	20c7883a 	add	r3,r4,r3
  809044:	20c0192e 	bgeu	r4,r3,8090ac <__any_on+0x84>
  809048:	18bfff17 	ldw	r2,-4(r3)
  80904c:	18ffff04 	addi	r3,r3,-4
  809050:	1000041e 	bne	r2,zero,809064 <__any_on+0x3c>
  809054:	20c0142e 	bgeu	r4,r3,8090a8 <__any_on+0x80>
  809058:	18ffff04 	addi	r3,r3,-4
  80905c:	19400017 	ldw	r5,0(r3)
  809060:	283ffc26 	beq	r5,zero,809054 <__alt_mem_onchip_mem+0xff789054>
  809064:	00800044 	movi	r2,1
  809068:	f800283a 	ret
  80906c:	10c00a0e 	bge	r2,r3,809098 <__any_on+0x70>
  809070:	1085883a 	add	r2,r2,r2
  809074:	1085883a 	add	r2,r2,r2
  809078:	294007cc 	andi	r5,r5,31
  80907c:	2087883a 	add	r3,r4,r2
  809080:	283ff026 	beq	r5,zero,809044 <__alt_mem_onchip_mem+0xff789044>
  809084:	19800017 	ldw	r6,0(r3)
  809088:	3144d83a 	srl	r2,r6,r5
  80908c:	114a983a 	sll	r5,r2,r5
  809090:	317ff41e 	bne	r6,r5,809064 <__alt_mem_onchip_mem+0xff789064>
  809094:	003feb06 	br	809044 <__alt_mem_onchip_mem+0xff789044>
  809098:	1085883a 	add	r2,r2,r2
  80909c:	1085883a 	add	r2,r2,r2
  8090a0:	2087883a 	add	r3,r4,r2
  8090a4:	003fe706 	br	809044 <__alt_mem_onchip_mem+0xff789044>
  8090a8:	f800283a 	ret
  8090ac:	0005883a 	mov	r2,zero
  8090b0:	f800283a 	ret

008090b4 <__fpclassifyd>:
  8090b4:	00a00034 	movhi	r2,32768
  8090b8:	10bfffc4 	addi	r2,r2,-1
  8090bc:	2884703a 	and	r2,r5,r2
  8090c0:	10000726 	beq	r2,zero,8090e0 <__fpclassifyd+0x2c>
  8090c4:	00fffc34 	movhi	r3,65520
  8090c8:	019ff834 	movhi	r6,32736
  8090cc:	28c7883a 	add	r3,r5,r3
  8090d0:	31bfffc4 	addi	r6,r6,-1
  8090d4:	30c00536 	bltu	r6,r3,8090ec <__fpclassifyd+0x38>
  8090d8:	00800104 	movi	r2,4
  8090dc:	f800283a 	ret
  8090e0:	2000021e 	bne	r4,zero,8090ec <__fpclassifyd+0x38>
  8090e4:	00800084 	movi	r2,2
  8090e8:	f800283a 	ret
  8090ec:	00dffc34 	movhi	r3,32752
  8090f0:	019ff834 	movhi	r6,32736
  8090f4:	28cb883a 	add	r5,r5,r3
  8090f8:	31bfffc4 	addi	r6,r6,-1
  8090fc:	317ff62e 	bgeu	r6,r5,8090d8 <__alt_mem_onchip_mem+0xff7890d8>
  809100:	01400434 	movhi	r5,16
  809104:	297fffc4 	addi	r5,r5,-1
  809108:	28800236 	bltu	r5,r2,809114 <__fpclassifyd+0x60>
  80910c:	008000c4 	movi	r2,3
  809110:	f800283a 	ret
  809114:	10c00226 	beq	r2,r3,809120 <__fpclassifyd+0x6c>
  809118:	0005883a 	mov	r2,zero
  80911c:	f800283a 	ret
  809120:	2005003a 	cmpeq	r2,r4,zero
  809124:	f800283a 	ret

00809128 <_sbrk_r>:
  809128:	defffd04 	addi	sp,sp,-12
  80912c:	dc000015 	stw	r16,0(sp)
  809130:	04002074 	movhi	r16,129
  809134:	dc400115 	stw	r17,4(sp)
  809138:	841d0804 	addi	r16,r16,29728
  80913c:	2023883a 	mov	r17,r4
  809140:	2809883a 	mov	r4,r5
  809144:	dfc00215 	stw	ra,8(sp)
  809148:	80000015 	stw	zero,0(r16)
  80914c:	080fa7c0 	call	80fa7c <sbrk>
  809150:	00ffffc4 	movi	r3,-1
  809154:	10c00526 	beq	r2,r3,80916c <_sbrk_r+0x44>
  809158:	dfc00217 	ldw	ra,8(sp)
  80915c:	dc400117 	ldw	r17,4(sp)
  809160:	dc000017 	ldw	r16,0(sp)
  809164:	dec00304 	addi	sp,sp,12
  809168:	f800283a 	ret
  80916c:	80c00017 	ldw	r3,0(r16)
  809170:	183ff926 	beq	r3,zero,809158 <__alt_mem_onchip_mem+0xff789158>
  809174:	88c00015 	stw	r3,0(r17)
  809178:	003ff706 	br	809158 <__alt_mem_onchip_mem+0xff789158>

0080917c <__sread>:
  80917c:	defffe04 	addi	sp,sp,-8
  809180:	dc000015 	stw	r16,0(sp)
  809184:	2821883a 	mov	r16,r5
  809188:	2940038f 	ldh	r5,14(r5)
  80918c:	dfc00115 	stw	ra,4(sp)
  809190:	080b6200 	call	80b620 <_read_r>
  809194:	10000716 	blt	r2,zero,8091b4 <__sread+0x38>
  809198:	80c01417 	ldw	r3,80(r16)
  80919c:	1887883a 	add	r3,r3,r2
  8091a0:	80c01415 	stw	r3,80(r16)
  8091a4:	dfc00117 	ldw	ra,4(sp)
  8091a8:	dc000017 	ldw	r16,0(sp)
  8091ac:	dec00204 	addi	sp,sp,8
  8091b0:	f800283a 	ret
  8091b4:	80c0030b 	ldhu	r3,12(r16)
  8091b8:	18fbffcc 	andi	r3,r3,61439
  8091bc:	80c0030d 	sth	r3,12(r16)
  8091c0:	dfc00117 	ldw	ra,4(sp)
  8091c4:	dc000017 	ldw	r16,0(sp)
  8091c8:	dec00204 	addi	sp,sp,8
  8091cc:	f800283a 	ret

008091d0 <__seofread>:
  8091d0:	0005883a 	mov	r2,zero
  8091d4:	f800283a 	ret

008091d8 <__swrite>:
  8091d8:	2880030b 	ldhu	r2,12(r5)
  8091dc:	defffb04 	addi	sp,sp,-20
  8091e0:	dcc00315 	stw	r19,12(sp)
  8091e4:	dc800215 	stw	r18,8(sp)
  8091e8:	dc400115 	stw	r17,4(sp)
  8091ec:	dc000015 	stw	r16,0(sp)
  8091f0:	dfc00415 	stw	ra,16(sp)
  8091f4:	10c0400c 	andi	r3,r2,256
  8091f8:	2821883a 	mov	r16,r5
  8091fc:	2023883a 	mov	r17,r4
  809200:	3025883a 	mov	r18,r6
  809204:	3827883a 	mov	r19,r7
  809208:	18000526 	beq	r3,zero,809220 <__swrite+0x48>
  80920c:	2940038f 	ldh	r5,14(r5)
  809210:	01c00084 	movi	r7,2
  809214:	000d883a 	mov	r6,zero
  809218:	080b4640 	call	80b464 <_lseek_r>
  80921c:	8080030b 	ldhu	r2,12(r16)
  809220:	8140038f 	ldh	r5,14(r16)
  809224:	10bbffcc 	andi	r2,r2,61439
  809228:	980f883a 	mov	r7,r19
  80922c:	900d883a 	mov	r6,r18
  809230:	8809883a 	mov	r4,r17
  809234:	8080030d 	sth	r2,12(r16)
  809238:	dfc00417 	ldw	ra,16(sp)
  80923c:	dcc00317 	ldw	r19,12(sp)
  809240:	dc800217 	ldw	r18,8(sp)
  809244:	dc400117 	ldw	r17,4(sp)
  809248:	dc000017 	ldw	r16,0(sp)
  80924c:	dec00504 	addi	sp,sp,20
  809250:	080aa741 	jmpi	80aa74 <_write_r>

00809254 <__sseek>:
  809254:	defffe04 	addi	sp,sp,-8
  809258:	dc000015 	stw	r16,0(sp)
  80925c:	2821883a 	mov	r16,r5
  809260:	2940038f 	ldh	r5,14(r5)
  809264:	dfc00115 	stw	ra,4(sp)
  809268:	080b4640 	call	80b464 <_lseek_r>
  80926c:	00ffffc4 	movi	r3,-1
  809270:	10c00826 	beq	r2,r3,809294 <__sseek+0x40>
  809274:	80c0030b 	ldhu	r3,12(r16)
  809278:	80801415 	stw	r2,80(r16)
  80927c:	18c40014 	ori	r3,r3,4096
  809280:	80c0030d 	sth	r3,12(r16)
  809284:	dfc00117 	ldw	ra,4(sp)
  809288:	dc000017 	ldw	r16,0(sp)
  80928c:	dec00204 	addi	sp,sp,8
  809290:	f800283a 	ret
  809294:	80c0030b 	ldhu	r3,12(r16)
  809298:	18fbffcc 	andi	r3,r3,61439
  80929c:	80c0030d 	sth	r3,12(r16)
  8092a0:	dfc00117 	ldw	ra,4(sp)
  8092a4:	dc000017 	ldw	r16,0(sp)
  8092a8:	dec00204 	addi	sp,sp,8
  8092ac:	f800283a 	ret

008092b0 <__sclose>:
  8092b0:	2940038f 	ldh	r5,14(r5)
  8092b4:	080aad41 	jmpi	80aad4 <_close_r>

008092b8 <strcmp>:
  8092b8:	2144b03a 	or	r2,r4,r5
  8092bc:	108000cc 	andi	r2,r2,3
  8092c0:	1000171e 	bne	r2,zero,809320 <strcmp+0x68>
  8092c4:	20800017 	ldw	r2,0(r4)
  8092c8:	28c00017 	ldw	r3,0(r5)
  8092cc:	10c0141e 	bne	r2,r3,809320 <strcmp+0x68>
  8092d0:	027fbff4 	movhi	r9,65279
  8092d4:	4a7fbfc4 	addi	r9,r9,-257
  8092d8:	0086303a 	nor	r3,zero,r2
  8092dc:	02202074 	movhi	r8,32897
  8092e0:	1245883a 	add	r2,r2,r9
  8092e4:	42202004 	addi	r8,r8,-32640
  8092e8:	10c4703a 	and	r2,r2,r3
  8092ec:	1204703a 	and	r2,r2,r8
  8092f0:	10000226 	beq	r2,zero,8092fc <strcmp+0x44>
  8092f4:	00002306 	br	809384 <strcmp+0xcc>
  8092f8:	1000221e 	bne	r2,zero,809384 <strcmp+0xcc>
  8092fc:	21000104 	addi	r4,r4,4
  809300:	20c00017 	ldw	r3,0(r4)
  809304:	29400104 	addi	r5,r5,4
  809308:	29800017 	ldw	r6,0(r5)
  80930c:	1a4f883a 	add	r7,r3,r9
  809310:	00c4303a 	nor	r2,zero,r3
  809314:	3884703a 	and	r2,r7,r2
  809318:	1204703a 	and	r2,r2,r8
  80931c:	19bff626 	beq	r3,r6,8092f8 <__alt_mem_onchip_mem+0xff7892f8>
  809320:	20800003 	ldbu	r2,0(r4)
  809324:	10c03fcc 	andi	r3,r2,255
  809328:	18c0201c 	xori	r3,r3,128
  80932c:	18ffe004 	addi	r3,r3,-128
  809330:	18000c26 	beq	r3,zero,809364 <strcmp+0xac>
  809334:	29800007 	ldb	r6,0(r5)
  809338:	19800326 	beq	r3,r6,809348 <strcmp+0x90>
  80933c:	00001306 	br	80938c <strcmp+0xd4>
  809340:	29800007 	ldb	r6,0(r5)
  809344:	11800b1e 	bne	r2,r6,809374 <strcmp+0xbc>
  809348:	21000044 	addi	r4,r4,1
  80934c:	20c00003 	ldbu	r3,0(r4)
  809350:	29400044 	addi	r5,r5,1
  809354:	18803fcc 	andi	r2,r3,255
  809358:	1080201c 	xori	r2,r2,128
  80935c:	10bfe004 	addi	r2,r2,-128
  809360:	103ff71e 	bne	r2,zero,809340 <__alt_mem_onchip_mem+0xff789340>
  809364:	0007883a 	mov	r3,zero
  809368:	28800003 	ldbu	r2,0(r5)
  80936c:	1885c83a 	sub	r2,r3,r2
  809370:	f800283a 	ret
  809374:	28800003 	ldbu	r2,0(r5)
  809378:	18c03fcc 	andi	r3,r3,255
  80937c:	1885c83a 	sub	r2,r3,r2
  809380:	f800283a 	ret
  809384:	0005883a 	mov	r2,zero
  809388:	f800283a 	ret
  80938c:	10c03fcc 	andi	r3,r2,255
  809390:	003ff506 	br	809368 <__alt_mem_onchip_mem+0xff789368>

00809394 <strlen>:
  809394:	208000cc 	andi	r2,r4,3
  809398:	10002026 	beq	r2,zero,80941c <strlen+0x88>
  80939c:	20800007 	ldb	r2,0(r4)
  8093a0:	10002026 	beq	r2,zero,809424 <strlen+0x90>
  8093a4:	2005883a 	mov	r2,r4
  8093a8:	00000206 	br	8093b4 <strlen+0x20>
  8093ac:	10c00007 	ldb	r3,0(r2)
  8093b0:	18001826 	beq	r3,zero,809414 <strlen+0x80>
  8093b4:	10800044 	addi	r2,r2,1
  8093b8:	10c000cc 	andi	r3,r2,3
  8093bc:	183ffb1e 	bne	r3,zero,8093ac <__alt_mem_onchip_mem+0xff7893ac>
  8093c0:	10c00017 	ldw	r3,0(r2)
  8093c4:	01ffbff4 	movhi	r7,65279
  8093c8:	39ffbfc4 	addi	r7,r7,-257
  8093cc:	00ca303a 	nor	r5,zero,r3
  8093d0:	01a02074 	movhi	r6,32897
  8093d4:	19c7883a 	add	r3,r3,r7
  8093d8:	31a02004 	addi	r6,r6,-32640
  8093dc:	1946703a 	and	r3,r3,r5
  8093e0:	1986703a 	and	r3,r3,r6
  8093e4:	1800091e 	bne	r3,zero,80940c <strlen+0x78>
  8093e8:	10800104 	addi	r2,r2,4
  8093ec:	10c00017 	ldw	r3,0(r2)
  8093f0:	19cb883a 	add	r5,r3,r7
  8093f4:	00c6303a 	nor	r3,zero,r3
  8093f8:	28c6703a 	and	r3,r5,r3
  8093fc:	1986703a 	and	r3,r3,r6
  809400:	183ff926 	beq	r3,zero,8093e8 <__alt_mem_onchip_mem+0xff7893e8>
  809404:	00000106 	br	80940c <strlen+0x78>
  809408:	10800044 	addi	r2,r2,1
  80940c:	10c00007 	ldb	r3,0(r2)
  809410:	183ffd1e 	bne	r3,zero,809408 <__alt_mem_onchip_mem+0xff789408>
  809414:	1105c83a 	sub	r2,r2,r4
  809418:	f800283a 	ret
  80941c:	2005883a 	mov	r2,r4
  809420:	003fe706 	br	8093c0 <__alt_mem_onchip_mem+0xff7893c0>
  809424:	0005883a 	mov	r2,zero
  809428:	f800283a 	ret

0080942c <__sprint_r.part.0>:
  80942c:	28801917 	ldw	r2,100(r5)
  809430:	defff604 	addi	sp,sp,-40
  809434:	dd400515 	stw	r21,20(sp)
  809438:	dfc00915 	stw	ra,36(sp)
  80943c:	df000815 	stw	fp,32(sp)
  809440:	ddc00715 	stw	r23,28(sp)
  809444:	dd800615 	stw	r22,24(sp)
  809448:	dd000415 	stw	r20,16(sp)
  80944c:	dcc00315 	stw	r19,12(sp)
  809450:	dc800215 	stw	r18,8(sp)
  809454:	dc400115 	stw	r17,4(sp)
  809458:	dc000015 	stw	r16,0(sp)
  80945c:	1088000c 	andi	r2,r2,8192
  809460:	302b883a 	mov	r21,r6
  809464:	10002e26 	beq	r2,zero,809520 <__sprint_r.part.0+0xf4>
  809468:	30800217 	ldw	r2,8(r6)
  80946c:	35800017 	ldw	r22,0(r6)
  809470:	10002926 	beq	r2,zero,809518 <__sprint_r.part.0+0xec>
  809474:	2827883a 	mov	r19,r5
  809478:	2029883a 	mov	r20,r4
  80947c:	b5c00104 	addi	r23,r22,4
  809480:	04bfffc4 	movi	r18,-1
  809484:	bc400017 	ldw	r17,0(r23)
  809488:	b4000017 	ldw	r16,0(r22)
  80948c:	0039883a 	mov	fp,zero
  809490:	8822d0ba 	srli	r17,r17,2
  809494:	8800031e 	bne	r17,zero,8094a4 <__sprint_r.part.0+0x78>
  809498:	00001806 	br	8094fc <__sprint_r.part.0+0xd0>
  80949c:	84000104 	addi	r16,r16,4
  8094a0:	8f001526 	beq	r17,fp,8094f8 <__sprint_r.part.0+0xcc>
  8094a4:	81400017 	ldw	r5,0(r16)
  8094a8:	980d883a 	mov	r6,r19
  8094ac:	a009883a 	mov	r4,r20
  8094b0:	080ae540 	call	80ae54 <_fputwc_r>
  8094b4:	e7000044 	addi	fp,fp,1
  8094b8:	14bff81e 	bne	r2,r18,80949c <__alt_mem_onchip_mem+0xff78949c>
  8094bc:	9005883a 	mov	r2,r18
  8094c0:	a8000215 	stw	zero,8(r21)
  8094c4:	a8000115 	stw	zero,4(r21)
  8094c8:	dfc00917 	ldw	ra,36(sp)
  8094cc:	df000817 	ldw	fp,32(sp)
  8094d0:	ddc00717 	ldw	r23,28(sp)
  8094d4:	dd800617 	ldw	r22,24(sp)
  8094d8:	dd400517 	ldw	r21,20(sp)
  8094dc:	dd000417 	ldw	r20,16(sp)
  8094e0:	dcc00317 	ldw	r19,12(sp)
  8094e4:	dc800217 	ldw	r18,8(sp)
  8094e8:	dc400117 	ldw	r17,4(sp)
  8094ec:	dc000017 	ldw	r16,0(sp)
  8094f0:	dec00a04 	addi	sp,sp,40
  8094f4:	f800283a 	ret
  8094f8:	a8800217 	ldw	r2,8(r21)
  8094fc:	8c63883a 	add	r17,r17,r17
  809500:	8c63883a 	add	r17,r17,r17
  809504:	1445c83a 	sub	r2,r2,r17
  809508:	a8800215 	stw	r2,8(r21)
  80950c:	b5800204 	addi	r22,r22,8
  809510:	bdc00204 	addi	r23,r23,8
  809514:	103fdb1e 	bne	r2,zero,809484 <__alt_mem_onchip_mem+0xff789484>
  809518:	0005883a 	mov	r2,zero
  80951c:	003fe806 	br	8094c0 <__alt_mem_onchip_mem+0xff7894c0>
  809520:	080af540 	call	80af54 <__sfvwrite_r>
  809524:	003fe606 	br	8094c0 <__alt_mem_onchip_mem+0xff7894c0>

00809528 <__sprint_r>:
  809528:	30c00217 	ldw	r3,8(r6)
  80952c:	18000126 	beq	r3,zero,809534 <__sprint_r+0xc>
  809530:	080942c1 	jmpi	80942c <__sprint_r.part.0>
  809534:	30000115 	stw	zero,4(r6)
  809538:	0005883a 	mov	r2,zero
  80953c:	f800283a 	ret

00809540 <___vfiprintf_internal_r>:
  809540:	deffc904 	addi	sp,sp,-220
  809544:	df003515 	stw	fp,212(sp)
  809548:	dd003115 	stw	r20,196(sp)
  80954c:	dfc03615 	stw	ra,216(sp)
  809550:	ddc03415 	stw	r23,208(sp)
  809554:	dd803315 	stw	r22,204(sp)
  809558:	dd403215 	stw	r21,200(sp)
  80955c:	dcc03015 	stw	r19,192(sp)
  809560:	dc802f15 	stw	r18,188(sp)
  809564:	dc402e15 	stw	r17,184(sp)
  809568:	dc002d15 	stw	r16,180(sp)
  80956c:	d9002015 	stw	r4,128(sp)
  809570:	d9c02215 	stw	r7,136(sp)
  809574:	2829883a 	mov	r20,r5
  809578:	3039883a 	mov	fp,r6
  80957c:	20000226 	beq	r4,zero,809588 <___vfiprintf_internal_r+0x48>
  809580:	20800e17 	ldw	r2,56(r4)
  809584:	1000cf26 	beq	r2,zero,8098c4 <___vfiprintf_internal_r+0x384>
  809588:	a080030b 	ldhu	r2,12(r20)
  80958c:	10c8000c 	andi	r3,r2,8192
  809590:	1800061e 	bne	r3,zero,8095ac <___vfiprintf_internal_r+0x6c>
  809594:	a1001917 	ldw	r4,100(r20)
  809598:	00f7ffc4 	movi	r3,-8193
  80959c:	10880014 	ori	r2,r2,8192
  8095a0:	20c6703a 	and	r3,r4,r3
  8095a4:	a080030d 	sth	r2,12(r20)
  8095a8:	a0c01915 	stw	r3,100(r20)
  8095ac:	10c0020c 	andi	r3,r2,8
  8095b0:	1800a926 	beq	r3,zero,809858 <___vfiprintf_internal_r+0x318>
  8095b4:	a0c00417 	ldw	r3,16(r20)
  8095b8:	1800a726 	beq	r3,zero,809858 <___vfiprintf_internal_r+0x318>
  8095bc:	1080068c 	andi	r2,r2,26
  8095c0:	00c00284 	movi	r3,10
  8095c4:	10c0ac26 	beq	r2,r3,809878 <___vfiprintf_internal_r+0x338>
  8095c8:	da801a04 	addi	r10,sp,104
  8095cc:	da801e15 	stw	r10,120(sp)
  8095d0:	d8801e17 	ldw	r2,120(sp)
  8095d4:	da8019c4 	addi	r10,sp,103
  8095d8:	05802074 	movhi	r22,129
  8095dc:	05c02074 	movhi	r23,129
  8095e0:	da801f15 	stw	r10,124(sp)
  8095e4:	1295c83a 	sub	r10,r2,r10
  8095e8:	b58d4f04 	addi	r22,r22,13628
  8095ec:	bdcd4b04 	addi	r23,r23,13612
  8095f0:	dec01a15 	stw	sp,104(sp)
  8095f4:	d8001c15 	stw	zero,112(sp)
  8095f8:	d8001b15 	stw	zero,108(sp)
  8095fc:	d8002615 	stw	zero,152(sp)
  809600:	d8002315 	stw	zero,140(sp)
  809604:	da802715 	stw	r10,156(sp)
  809608:	d811883a 	mov	r8,sp
  80960c:	dd002115 	stw	r20,132(sp)
  809610:	e021883a 	mov	r16,fp
  809614:	80800007 	ldb	r2,0(r16)
  809618:	1003ea26 	beq	r2,zero,80a5c4 <___vfiprintf_internal_r+0x1084>
  80961c:	00c00944 	movi	r3,37
  809620:	8025883a 	mov	r18,r16
  809624:	10c0021e 	bne	r2,r3,809630 <___vfiprintf_internal_r+0xf0>
  809628:	00001606 	br	809684 <___vfiprintf_internal_r+0x144>
  80962c:	10c00326 	beq	r2,r3,80963c <___vfiprintf_internal_r+0xfc>
  809630:	94800044 	addi	r18,r18,1
  809634:	90800007 	ldb	r2,0(r18)
  809638:	103ffc1e 	bne	r2,zero,80962c <__alt_mem_onchip_mem+0xff78962c>
  80963c:	9423c83a 	sub	r17,r18,r16
  809640:	88001026 	beq	r17,zero,809684 <___vfiprintf_internal_r+0x144>
  809644:	d8c01c17 	ldw	r3,112(sp)
  809648:	d8801b17 	ldw	r2,108(sp)
  80964c:	44000015 	stw	r16,0(r8)
  809650:	88c7883a 	add	r3,r17,r3
  809654:	10800044 	addi	r2,r2,1
  809658:	44400115 	stw	r17,4(r8)
  80965c:	d8c01c15 	stw	r3,112(sp)
  809660:	d8801b15 	stw	r2,108(sp)
  809664:	010001c4 	movi	r4,7
  809668:	2080760e 	bge	r4,r2,809844 <___vfiprintf_internal_r+0x304>
  80966c:	1803821e 	bne	r3,zero,80a478 <___vfiprintf_internal_r+0xf38>
  809670:	da802317 	ldw	r10,140(sp)
  809674:	d8001b15 	stw	zero,108(sp)
  809678:	d811883a 	mov	r8,sp
  80967c:	5455883a 	add	r10,r10,r17
  809680:	da802315 	stw	r10,140(sp)
  809684:	90800007 	ldb	r2,0(r18)
  809688:	10044626 	beq	r2,zero,80a7a4 <___vfiprintf_internal_r+0x1264>
  80968c:	90c00047 	ldb	r3,1(r18)
  809690:	94000044 	addi	r16,r18,1
  809694:	d8001d85 	stb	zero,118(sp)
  809698:	0009883a 	mov	r4,zero
  80969c:	000f883a 	mov	r7,zero
  8096a0:	027fffc4 	movi	r9,-1
  8096a4:	0023883a 	mov	r17,zero
  8096a8:	0029883a 	mov	r20,zero
  8096ac:	01401604 	movi	r5,88
  8096b0:	01800244 	movi	r6,9
  8096b4:	03400a84 	movi	r13,42
  8096b8:	03001b04 	movi	r12,108
  8096bc:	84000044 	addi	r16,r16,1
  8096c0:	18bff804 	addi	r2,r3,-32
  8096c4:	28827336 	bltu	r5,r2,80a094 <___vfiprintf_internal_r+0xb54>
  8096c8:	100490ba 	slli	r2,r2,2
  8096cc:	02802074 	movhi	r10,129
  8096d0:	52a5b804 	addi	r10,r10,-26912
  8096d4:	1285883a 	add	r2,r2,r10
  8096d8:	10800017 	ldw	r2,0(r2)
  8096dc:	1000683a 	jmp	r2
  8096e0:	00809dc8 	cmpgei	r2,zero,631
  8096e4:	0080a094 	movui	r2,642
  8096e8:	0080a094 	movui	r2,642
  8096ec:	00809de8 	cmpgeui	r2,zero,631
  8096f0:	0080a094 	movui	r2,642
  8096f4:	0080a094 	movui	r2,642
  8096f8:	0080a094 	movui	r2,642
  8096fc:	0080a094 	movui	r2,642
  809700:	0080a094 	movui	r2,642
  809704:	0080a094 	movui	r2,642
  809708:	00809fd0 	cmplti	r2,zero,639
  80970c:	00809fec 	andhi	r2,zero,639
  809710:	0080a094 	movui	r2,642
  809714:	008098d4 	movui	r2,611
  809718:	00809ffc 	xorhi	r2,zero,639
  80971c:	0080a094 	movui	r2,642
  809720:	00809df4 	movhi	r2,631
  809724:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809728:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  80972c:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809730:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809734:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809738:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  80973c:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809740:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809744:	00809e00 	call	809e0 <__alt_mem_sdram-0x77f620>
  809748:	0080a094 	movui	r2,642
  80974c:	0080a094 	movui	r2,642
  809750:	0080a094 	movui	r2,642
  809754:	0080a094 	movui	r2,642
  809758:	0080a094 	movui	r2,642
  80975c:	0080a094 	movui	r2,642
  809760:	0080a094 	movui	r2,642
  809764:	0080a094 	movui	r2,642
  809768:	0080a094 	movui	r2,642
  80976c:	0080a094 	movui	r2,642
  809770:	00809e2c 	andhi	r2,zero,632
  809774:	0080a094 	movui	r2,642
  809778:	0080a094 	movui	r2,642
  80977c:	0080a094 	movui	r2,642
  809780:	0080a094 	movui	r2,642
  809784:	0080a094 	movui	r2,642
  809788:	0080a094 	movui	r2,642
  80978c:	0080a094 	movui	r2,642
  809790:	0080a094 	movui	r2,642
  809794:	0080a094 	movui	r2,642
  809798:	0080a094 	movui	r2,642
  80979c:	00809e64 	muli	r2,zero,633
  8097a0:	0080a094 	movui	r2,642
  8097a4:	0080a094 	movui	r2,642
  8097a8:	0080a094 	movui	r2,642
  8097ac:	0080a094 	movui	r2,642
  8097b0:	0080a094 	movui	r2,642
  8097b4:	00809ebc 	xorhi	r2,zero,634
  8097b8:	0080a094 	movui	r2,642
  8097bc:	0080a094 	movui	r2,642
  8097c0:	00809f2c 	andhi	r2,zero,636
  8097c4:	0080a094 	movui	r2,642
  8097c8:	0080a094 	movui	r2,642
  8097cc:	0080a094 	movui	r2,642
  8097d0:	0080a094 	movui	r2,642
  8097d4:	0080a094 	movui	r2,642
  8097d8:	0080a094 	movui	r2,642
  8097dc:	0080a094 	movui	r2,642
  8097e0:	0080a094 	movui	r2,642
  8097e4:	0080a094 	movui	r2,642
  8097e8:	0080a094 	movui	r2,642
  8097ec:	00809cd8 	cmpnei	r2,zero,627
  8097f0:	00809d04 	movi	r2,628
  8097f4:	0080a094 	movui	r2,642
  8097f8:	0080a094 	movui	r2,642
  8097fc:	0080a094 	movui	r2,642
  809800:	0080a03c 	xorhi	r2,zero,640
  809804:	00809d04 	movi	r2,628
  809808:	0080a094 	movui	r2,642
  80980c:	0080a094 	movui	r2,642
  809810:	00809b98 	cmpnei	r2,zero,622
  809814:	0080a094 	movui	r2,642
  809818:	00809ba8 	cmpgeui	r2,zero,622
  80981c:	00809be4 	muli	r2,zero,623
  809820:	008098e0 	cmpeqi	r2,zero,611
  809824:	00809b8c 	andi	r2,zero,622
  809828:	0080a094 	movui	r2,642
  80982c:	00809f68 	cmpgeui	r2,zero,637
  809830:	0080a094 	movui	r2,642
  809834:	00809fc0 	call	809fc <__alt_mem_sdram-0x77f604>
  809838:	0080a094 	movui	r2,642
  80983c:	0080a094 	movui	r2,642
  809840:	00809c84 	movi	r2,626
  809844:	42000204 	addi	r8,r8,8
  809848:	da802317 	ldw	r10,140(sp)
  80984c:	5455883a 	add	r10,r10,r17
  809850:	da802315 	stw	r10,140(sp)
  809854:	003f8b06 	br	809684 <__alt_mem_onchip_mem+0xff789684>
  809858:	d9002017 	ldw	r4,128(sp)
  80985c:	a00b883a 	mov	r5,r20
  809860:	0804ce00 	call	804ce0 <__swsetup_r>
  809864:	1003b11e 	bne	r2,zero,80a72c <___vfiprintf_internal_r+0x11ec>
  809868:	a080030b 	ldhu	r2,12(r20)
  80986c:	00c00284 	movi	r3,10
  809870:	1080068c 	andi	r2,r2,26
  809874:	10ff541e 	bne	r2,r3,8095c8 <__alt_mem_onchip_mem+0xff7895c8>
  809878:	a080038f 	ldh	r2,14(r20)
  80987c:	103f5216 	blt	r2,zero,8095c8 <__alt_mem_onchip_mem+0xff7895c8>
  809880:	d9c02217 	ldw	r7,136(sp)
  809884:	d9002017 	ldw	r4,128(sp)
  809888:	e00d883a 	mov	r6,fp
  80988c:	a00b883a 	mov	r5,r20
  809890:	080a9b80 	call	80a9b8 <__sbprintf>
  809894:	dfc03617 	ldw	ra,216(sp)
  809898:	df003517 	ldw	fp,212(sp)
  80989c:	ddc03417 	ldw	r23,208(sp)
  8098a0:	dd803317 	ldw	r22,204(sp)
  8098a4:	dd403217 	ldw	r21,200(sp)
  8098a8:	dd003117 	ldw	r20,196(sp)
  8098ac:	dcc03017 	ldw	r19,192(sp)
  8098b0:	dc802f17 	ldw	r18,188(sp)
  8098b4:	dc402e17 	ldw	r17,184(sp)
  8098b8:	dc002d17 	ldw	r16,180(sp)
  8098bc:	dec03704 	addi	sp,sp,220
  8098c0:	f800283a 	ret
  8098c4:	0806cb40 	call	806cb4 <__sinit>
  8098c8:	003f2f06 	br	809588 <__alt_mem_onchip_mem+0xff789588>
  8098cc:	0463c83a 	sub	r17,zero,r17
  8098d0:	d8802215 	stw	r2,136(sp)
  8098d4:	a5000114 	ori	r20,r20,4
  8098d8:	80c00007 	ldb	r3,0(r16)
  8098dc:	003f7706 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  8098e0:	00800c04 	movi	r2,48
  8098e4:	da802217 	ldw	r10,136(sp)
  8098e8:	d8801d05 	stb	r2,116(sp)
  8098ec:	00801e04 	movi	r2,120
  8098f0:	d8801d45 	stb	r2,117(sp)
  8098f4:	d8001d85 	stb	zero,118(sp)
  8098f8:	50c00104 	addi	r3,r10,4
  8098fc:	54800017 	ldw	r18,0(r10)
  809900:	0027883a 	mov	r19,zero
  809904:	a0800094 	ori	r2,r20,2
  809908:	48030b16 	blt	r9,zero,80a538 <___vfiprintf_internal_r+0xff8>
  80990c:	00bfdfc4 	movi	r2,-129
  809910:	a096703a 	and	r11,r20,r2
  809914:	d8c02215 	stw	r3,136(sp)
  809918:	5d000094 	ori	r20,r11,2
  80991c:	90032b1e 	bne	r18,zero,80a5cc <___vfiprintf_internal_r+0x108c>
  809920:	00802074 	movhi	r2,129
  809924:	108cea04 	addi	r2,r2,13224
  809928:	d8802615 	stw	r2,152(sp)
  80992c:	0039883a 	mov	fp,zero
  809930:	48017b1e 	bne	r9,zero,809f20 <___vfiprintf_internal_r+0x9e0>
  809934:	0013883a 	mov	r9,zero
  809938:	0027883a 	mov	r19,zero
  80993c:	dd401a04 	addi	r21,sp,104
  809940:	4825883a 	mov	r18,r9
  809944:	4cc0010e 	bge	r9,r19,80994c <___vfiprintf_internal_r+0x40c>
  809948:	9825883a 	mov	r18,r19
  80994c:	e7003fcc 	andi	fp,fp,255
  809950:	e700201c 	xori	fp,fp,128
  809954:	e73fe004 	addi	fp,fp,-128
  809958:	e0000126 	beq	fp,zero,809960 <___vfiprintf_internal_r+0x420>
  80995c:	94800044 	addi	r18,r18,1
  809960:	a380008c 	andi	r14,r20,2
  809964:	70000126 	beq	r14,zero,80996c <___vfiprintf_internal_r+0x42c>
  809968:	94800084 	addi	r18,r18,2
  80996c:	a700210c 	andi	fp,r20,132
  809970:	e001df1e 	bne	fp,zero,80a0f0 <___vfiprintf_internal_r+0xbb0>
  809974:	8c87c83a 	sub	r3,r17,r18
  809978:	00c1dd0e 	bge	zero,r3,80a0f0 <___vfiprintf_internal_r+0xbb0>
  80997c:	01c00404 	movi	r7,16
  809980:	d8801c17 	ldw	r2,112(sp)
  809984:	38c3ad0e 	bge	r7,r3,80a83c <___vfiprintf_internal_r+0x12fc>
  809988:	02802074 	movhi	r10,129
  80998c:	528d4f04 	addi	r10,r10,13628
  809990:	dc002915 	stw	r16,164(sp)
  809994:	d9801b17 	ldw	r6,108(sp)
  809998:	da802415 	stw	r10,144(sp)
  80999c:	03c001c4 	movi	r15,7
  8099a0:	da402515 	stw	r9,148(sp)
  8099a4:	db802815 	stw	r14,160(sp)
  8099a8:	1821883a 	mov	r16,r3
  8099ac:	00000506 	br	8099c4 <___vfiprintf_internal_r+0x484>
  8099b0:	31400084 	addi	r5,r6,2
  8099b4:	42000204 	addi	r8,r8,8
  8099b8:	200d883a 	mov	r6,r4
  8099bc:	843ffc04 	addi	r16,r16,-16
  8099c0:	3c000d0e 	bge	r7,r16,8099f8 <___vfiprintf_internal_r+0x4b8>
  8099c4:	10800404 	addi	r2,r2,16
  8099c8:	31000044 	addi	r4,r6,1
  8099cc:	45800015 	stw	r22,0(r8)
  8099d0:	41c00115 	stw	r7,4(r8)
  8099d4:	d8801c15 	stw	r2,112(sp)
  8099d8:	d9001b15 	stw	r4,108(sp)
  8099dc:	793ff40e 	bge	r15,r4,8099b0 <__alt_mem_onchip_mem+0xff7899b0>
  8099e0:	1001b51e 	bne	r2,zero,80a0b8 <___vfiprintf_internal_r+0xb78>
  8099e4:	843ffc04 	addi	r16,r16,-16
  8099e8:	000d883a 	mov	r6,zero
  8099ec:	01400044 	movi	r5,1
  8099f0:	d811883a 	mov	r8,sp
  8099f4:	3c3ff316 	blt	r7,r16,8099c4 <__alt_mem_onchip_mem+0xff7899c4>
  8099f8:	8007883a 	mov	r3,r16
  8099fc:	da402517 	ldw	r9,148(sp)
  809a00:	db802817 	ldw	r14,160(sp)
  809a04:	dc002917 	ldw	r16,164(sp)
  809a08:	da802417 	ldw	r10,144(sp)
  809a0c:	1885883a 	add	r2,r3,r2
  809a10:	40c00115 	stw	r3,4(r8)
  809a14:	42800015 	stw	r10,0(r8)
  809a18:	d8801c15 	stw	r2,112(sp)
  809a1c:	d9401b15 	stw	r5,108(sp)
  809a20:	00c001c4 	movi	r3,7
  809a24:	19426016 	blt	r3,r5,80a3a8 <___vfiprintf_internal_r+0xe68>
  809a28:	d8c01d87 	ldb	r3,118(sp)
  809a2c:	42000204 	addi	r8,r8,8
  809a30:	29000044 	addi	r4,r5,1
  809a34:	1801b31e 	bne	r3,zero,80a104 <___vfiprintf_internal_r+0xbc4>
  809a38:	7001c026 	beq	r14,zero,80a13c <___vfiprintf_internal_r+0xbfc>
  809a3c:	d8c01d04 	addi	r3,sp,116
  809a40:	10800084 	addi	r2,r2,2
  809a44:	40c00015 	stw	r3,0(r8)
  809a48:	00c00084 	movi	r3,2
  809a4c:	40c00115 	stw	r3,4(r8)
  809a50:	d8801c15 	stw	r2,112(sp)
  809a54:	d9001b15 	stw	r4,108(sp)
  809a58:	00c001c4 	movi	r3,7
  809a5c:	1902650e 	bge	r3,r4,80a3f4 <___vfiprintf_internal_r+0xeb4>
  809a60:	10029a1e 	bne	r2,zero,80a4cc <___vfiprintf_internal_r+0xf8c>
  809a64:	00c02004 	movi	r3,128
  809a68:	01000044 	movi	r4,1
  809a6c:	000b883a 	mov	r5,zero
  809a70:	d811883a 	mov	r8,sp
  809a74:	e0c1b31e 	bne	fp,r3,80a144 <___vfiprintf_internal_r+0xc04>
  809a78:	8cb9c83a 	sub	fp,r17,r18
  809a7c:	0701b10e 	bge	zero,fp,80a144 <___vfiprintf_internal_r+0xc04>
  809a80:	01c00404 	movi	r7,16
  809a84:	3f03890e 	bge	r7,fp,80a8ac <___vfiprintf_internal_r+0x136c>
  809a88:	00c02074 	movhi	r3,129
  809a8c:	18cd4b04 	addi	r3,r3,13612
  809a90:	d8c02415 	stw	r3,144(sp)
  809a94:	8007883a 	mov	r3,r16
  809a98:	034001c4 	movi	r13,7
  809a9c:	e021883a 	mov	r16,fp
  809aa0:	da402515 	stw	r9,148(sp)
  809aa4:	1839883a 	mov	fp,r3
  809aa8:	00000506 	br	809ac0 <___vfiprintf_internal_r+0x580>
  809aac:	29800084 	addi	r6,r5,2
  809ab0:	42000204 	addi	r8,r8,8
  809ab4:	180b883a 	mov	r5,r3
  809ab8:	843ffc04 	addi	r16,r16,-16
  809abc:	3c000d0e 	bge	r7,r16,809af4 <___vfiprintf_internal_r+0x5b4>
  809ac0:	10800404 	addi	r2,r2,16
  809ac4:	28c00044 	addi	r3,r5,1
  809ac8:	45c00015 	stw	r23,0(r8)
  809acc:	41c00115 	stw	r7,4(r8)
  809ad0:	d8801c15 	stw	r2,112(sp)
  809ad4:	d8c01b15 	stw	r3,108(sp)
  809ad8:	68fff40e 	bge	r13,r3,809aac <__alt_mem_onchip_mem+0xff789aac>
  809adc:	1002241e 	bne	r2,zero,80a370 <___vfiprintf_internal_r+0xe30>
  809ae0:	843ffc04 	addi	r16,r16,-16
  809ae4:	01800044 	movi	r6,1
  809ae8:	000b883a 	mov	r5,zero
  809aec:	d811883a 	mov	r8,sp
  809af0:	3c3ff316 	blt	r7,r16,809ac0 <__alt_mem_onchip_mem+0xff789ac0>
  809af4:	da402517 	ldw	r9,148(sp)
  809af8:	e007883a 	mov	r3,fp
  809afc:	8039883a 	mov	fp,r16
  809b00:	1821883a 	mov	r16,r3
  809b04:	d8c02417 	ldw	r3,144(sp)
  809b08:	1705883a 	add	r2,r2,fp
  809b0c:	47000115 	stw	fp,4(r8)
  809b10:	40c00015 	stw	r3,0(r8)
  809b14:	d8801c15 	stw	r2,112(sp)
  809b18:	d9801b15 	stw	r6,108(sp)
  809b1c:	00c001c4 	movi	r3,7
  809b20:	19827616 	blt	r3,r6,80a4fc <___vfiprintf_internal_r+0xfbc>
  809b24:	4cf9c83a 	sub	fp,r9,r19
  809b28:	42000204 	addi	r8,r8,8
  809b2c:	31000044 	addi	r4,r6,1
  809b30:	300b883a 	mov	r5,r6
  809b34:	07018516 	blt	zero,fp,80a14c <___vfiprintf_internal_r+0xc0c>
  809b38:	9885883a 	add	r2,r19,r2
  809b3c:	45400015 	stw	r21,0(r8)
  809b40:	44c00115 	stw	r19,4(r8)
  809b44:	d8801c15 	stw	r2,112(sp)
  809b48:	d9001b15 	stw	r4,108(sp)
  809b4c:	00c001c4 	movi	r3,7
  809b50:	1901dd0e 	bge	r3,r4,80a2c8 <___vfiprintf_internal_r+0xd88>
  809b54:	1002401e 	bne	r2,zero,80a458 <___vfiprintf_internal_r+0xf18>
  809b58:	d8001b15 	stw	zero,108(sp)
  809b5c:	a2c0010c 	andi	r11,r20,4
  809b60:	58000226 	beq	r11,zero,809b6c <___vfiprintf_internal_r+0x62c>
  809b64:	8ca7c83a 	sub	r19,r17,r18
  809b68:	04c2f216 	blt	zero,r19,80a734 <___vfiprintf_internal_r+0x11f4>
  809b6c:	8c80010e 	bge	r17,r18,809b74 <___vfiprintf_internal_r+0x634>
  809b70:	9023883a 	mov	r17,r18
  809b74:	da802317 	ldw	r10,140(sp)
  809b78:	5455883a 	add	r10,r10,r17
  809b7c:	da802315 	stw	r10,140(sp)
  809b80:	d8001b15 	stw	zero,108(sp)
  809b84:	d811883a 	mov	r8,sp
  809b88:	003ea206 	br	809614 <__alt_mem_onchip_mem+0xff789614>
  809b8c:	a5000814 	ori	r20,r20,32
  809b90:	80c00007 	ldb	r3,0(r16)
  809b94:	003ec906 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809b98:	80c00007 	ldb	r3,0(r16)
  809b9c:	1b030926 	beq	r3,r12,80a7c4 <___vfiprintf_internal_r+0x1284>
  809ba0:	a5000414 	ori	r20,r20,16
  809ba4:	003ec506 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809ba8:	21003fcc 	andi	r4,r4,255
  809bac:	20035e1e 	bne	r4,zero,80a928 <___vfiprintf_internal_r+0x13e8>
  809bb0:	a080080c 	andi	r2,r20,32
  809bb4:	1002a526 	beq	r2,zero,80a64c <___vfiprintf_internal_r+0x110c>
  809bb8:	da802217 	ldw	r10,136(sp)
  809bbc:	50800017 	ldw	r2,0(r10)
  809bc0:	da802317 	ldw	r10,140(sp)
  809bc4:	5007d7fa 	srai	r3,r10,31
  809bc8:	da802217 	ldw	r10,136(sp)
  809bcc:	10c00115 	stw	r3,4(r2)
  809bd0:	52800104 	addi	r10,r10,4
  809bd4:	da802215 	stw	r10,136(sp)
  809bd8:	da802317 	ldw	r10,140(sp)
  809bdc:	12800015 	stw	r10,0(r2)
  809be0:	003e8c06 	br	809614 <__alt_mem_onchip_mem+0xff789614>
  809be4:	21003fcc 	andi	r4,r4,255
  809be8:	2003511e 	bne	r4,zero,80a930 <___vfiprintf_internal_r+0x13f0>
  809bec:	a080080c 	andi	r2,r20,32
  809bf0:	1000a126 	beq	r2,zero,809e78 <___vfiprintf_internal_r+0x938>
  809bf4:	da802217 	ldw	r10,136(sp)
  809bf8:	d8001d85 	stb	zero,118(sp)
  809bfc:	50800204 	addi	r2,r10,8
  809c00:	54800017 	ldw	r18,0(r10)
  809c04:	54c00117 	ldw	r19,4(r10)
  809c08:	4802b416 	blt	r9,zero,80a6dc <___vfiprintf_internal_r+0x119c>
  809c0c:	013fdfc4 	movi	r4,-129
  809c10:	94c6b03a 	or	r3,r18,r19
  809c14:	d8802215 	stw	r2,136(sp)
  809c18:	a128703a 	and	r20,r20,r4
  809c1c:	1800a226 	beq	r3,zero,809ea8 <___vfiprintf_internal_r+0x968>
  809c20:	0039883a 	mov	fp,zero
  809c24:	dd401a04 	addi	r21,sp,104
  809c28:	9006d0fa 	srli	r3,r18,3
  809c2c:	9808977a 	slli	r4,r19,29
  809c30:	9826d0fa 	srli	r19,r19,3
  809c34:	948001cc 	andi	r18,r18,7
  809c38:	90800c04 	addi	r2,r18,48
  809c3c:	ad7fffc4 	addi	r21,r21,-1
  809c40:	20e4b03a 	or	r18,r4,r3
  809c44:	a8800005 	stb	r2,0(r21)
  809c48:	94c6b03a 	or	r3,r18,r19
  809c4c:	183ff61e 	bne	r3,zero,809c28 <__alt_mem_onchip_mem+0xff789c28>
  809c50:	a0c0004c 	andi	r3,r20,1
  809c54:	18005926 	beq	r3,zero,809dbc <___vfiprintf_internal_r+0x87c>
  809c58:	10803fcc 	andi	r2,r2,255
  809c5c:	1080201c 	xori	r2,r2,128
  809c60:	10bfe004 	addi	r2,r2,-128
  809c64:	00c00c04 	movi	r3,48
  809c68:	10c05426 	beq	r2,r3,809dbc <___vfiprintf_internal_r+0x87c>
  809c6c:	da801e17 	ldw	r10,120(sp)
  809c70:	a8bfffc4 	addi	r2,r21,-1
  809c74:	a8ffffc5 	stb	r3,-1(r21)
  809c78:	50a7c83a 	sub	r19,r10,r2
  809c7c:	102b883a 	mov	r21,r2
  809c80:	003f2f06 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  809c84:	21003fcc 	andi	r4,r4,255
  809c88:	2003421e 	bne	r4,zero,80a994 <___vfiprintf_internal_r+0x1454>
  809c8c:	00802074 	movhi	r2,129
  809c90:	108cea04 	addi	r2,r2,13224
  809c94:	d8802615 	stw	r2,152(sp)
  809c98:	a080080c 	andi	r2,r20,32
  809c9c:	1000aa26 	beq	r2,zero,809f48 <___vfiprintf_internal_r+0xa08>
  809ca0:	da802217 	ldw	r10,136(sp)
  809ca4:	54800017 	ldw	r18,0(r10)
  809ca8:	54c00117 	ldw	r19,4(r10)
  809cac:	52800204 	addi	r10,r10,8
  809cb0:	da802215 	stw	r10,136(sp)
  809cb4:	a080004c 	andi	r2,r20,1
  809cb8:	1001d226 	beq	r2,zero,80a404 <___vfiprintf_internal_r+0xec4>
  809cbc:	94c4b03a 	or	r2,r18,r19
  809cc0:	1002351e 	bne	r2,zero,80a598 <___vfiprintf_internal_r+0x1058>
  809cc4:	d8001d85 	stb	zero,118(sp)
  809cc8:	48022216 	blt	r9,zero,80a554 <___vfiprintf_internal_r+0x1014>
  809ccc:	00bfdfc4 	movi	r2,-129
  809cd0:	a0a8703a 	and	r20,r20,r2
  809cd4:	003f1506 	br	80992c <__alt_mem_onchip_mem+0xff78992c>
  809cd8:	da802217 	ldw	r10,136(sp)
  809cdc:	04800044 	movi	r18,1
  809ce0:	d8001d85 	stb	zero,118(sp)
  809ce4:	50800017 	ldw	r2,0(r10)
  809ce8:	52800104 	addi	r10,r10,4
  809cec:	da802215 	stw	r10,136(sp)
  809cf0:	d8801005 	stb	r2,64(sp)
  809cf4:	9027883a 	mov	r19,r18
  809cf8:	dd401004 	addi	r21,sp,64
  809cfc:	0013883a 	mov	r9,zero
  809d00:	003f1706 	br	809960 <__alt_mem_onchip_mem+0xff789960>
  809d04:	21003fcc 	andi	r4,r4,255
  809d08:	2003201e 	bne	r4,zero,80a98c <___vfiprintf_internal_r+0x144c>
  809d0c:	a080080c 	andi	r2,r20,32
  809d10:	10004b26 	beq	r2,zero,809e40 <___vfiprintf_internal_r+0x900>
  809d14:	da802217 	ldw	r10,136(sp)
  809d18:	50800117 	ldw	r2,4(r10)
  809d1c:	54800017 	ldw	r18,0(r10)
  809d20:	52800204 	addi	r10,r10,8
  809d24:	da802215 	stw	r10,136(sp)
  809d28:	1027883a 	mov	r19,r2
  809d2c:	10022c16 	blt	r2,zero,80a5e0 <___vfiprintf_internal_r+0x10a0>
  809d30:	df001d83 	ldbu	fp,118(sp)
  809d34:	48007216 	blt	r9,zero,809f00 <___vfiprintf_internal_r+0x9c0>
  809d38:	00ffdfc4 	movi	r3,-129
  809d3c:	94c4b03a 	or	r2,r18,r19
  809d40:	a0e8703a 	and	r20,r20,r3
  809d44:	1000cc26 	beq	r2,zero,80a078 <___vfiprintf_internal_r+0xb38>
  809d48:	98021026 	beq	r19,zero,80a58c <___vfiprintf_internal_r+0x104c>
  809d4c:	dc402415 	stw	r17,144(sp)
  809d50:	dc002515 	stw	r16,148(sp)
  809d54:	9823883a 	mov	r17,r19
  809d58:	9021883a 	mov	r16,r18
  809d5c:	dd401a04 	addi	r21,sp,104
  809d60:	4825883a 	mov	r18,r9
  809d64:	4027883a 	mov	r19,r8
  809d68:	8009883a 	mov	r4,r16
  809d6c:	880b883a 	mov	r5,r17
  809d70:	01800284 	movi	r6,10
  809d74:	000f883a 	mov	r7,zero
  809d78:	080c49c0 	call	80c49c <__umoddi3>
  809d7c:	10800c04 	addi	r2,r2,48
  809d80:	ad7fffc4 	addi	r21,r21,-1
  809d84:	8009883a 	mov	r4,r16
  809d88:	880b883a 	mov	r5,r17
  809d8c:	a8800005 	stb	r2,0(r21)
  809d90:	01800284 	movi	r6,10
  809d94:	000f883a 	mov	r7,zero
  809d98:	080bf240 	call	80bf24 <__udivdi3>
  809d9c:	1021883a 	mov	r16,r2
  809da0:	10c4b03a 	or	r2,r2,r3
  809da4:	1823883a 	mov	r17,r3
  809da8:	103fef1e 	bne	r2,zero,809d68 <__alt_mem_onchip_mem+0xff789d68>
  809dac:	dc402417 	ldw	r17,144(sp)
  809db0:	dc002517 	ldw	r16,148(sp)
  809db4:	9013883a 	mov	r9,r18
  809db8:	9811883a 	mov	r8,r19
  809dbc:	da801e17 	ldw	r10,120(sp)
  809dc0:	5567c83a 	sub	r19,r10,r21
  809dc4:	003ede06 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  809dc8:	38803fcc 	andi	r2,r7,255
  809dcc:	1080201c 	xori	r2,r2,128
  809dd0:	10bfe004 	addi	r2,r2,-128
  809dd4:	1002371e 	bne	r2,zero,80a6b4 <___vfiprintf_internal_r+0x1174>
  809dd8:	01000044 	movi	r4,1
  809ddc:	01c00804 	movi	r7,32
  809de0:	80c00007 	ldb	r3,0(r16)
  809de4:	003e3506 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809de8:	a5000054 	ori	r20,r20,1
  809dec:	80c00007 	ldb	r3,0(r16)
  809df0:	003e3206 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809df4:	a5002014 	ori	r20,r20,128
  809df8:	80c00007 	ldb	r3,0(r16)
  809dfc:	003e2f06 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809e00:	8015883a 	mov	r10,r16
  809e04:	0023883a 	mov	r17,zero
  809e08:	18bff404 	addi	r2,r3,-48
  809e0c:	50c00007 	ldb	r3,0(r10)
  809e10:	8c4002a4 	muli	r17,r17,10
  809e14:	84000044 	addi	r16,r16,1
  809e18:	8015883a 	mov	r10,r16
  809e1c:	1463883a 	add	r17,r2,r17
  809e20:	18bff404 	addi	r2,r3,-48
  809e24:	30bff92e 	bgeu	r6,r2,809e0c <__alt_mem_onchip_mem+0xff789e0c>
  809e28:	003e2506 	br	8096c0 <__alt_mem_onchip_mem+0xff7896c0>
  809e2c:	21003fcc 	andi	r4,r4,255
  809e30:	2002d41e 	bne	r4,zero,80a984 <___vfiprintf_internal_r+0x1444>
  809e34:	a5000414 	ori	r20,r20,16
  809e38:	a080080c 	andi	r2,r20,32
  809e3c:	103fb51e 	bne	r2,zero,809d14 <__alt_mem_onchip_mem+0xff789d14>
  809e40:	a080040c 	andi	r2,r20,16
  809e44:	1001f826 	beq	r2,zero,80a628 <___vfiprintf_internal_r+0x10e8>
  809e48:	da802217 	ldw	r10,136(sp)
  809e4c:	54800017 	ldw	r18,0(r10)
  809e50:	52800104 	addi	r10,r10,4
  809e54:	da802215 	stw	r10,136(sp)
  809e58:	9027d7fa 	srai	r19,r18,31
  809e5c:	9805883a 	mov	r2,r19
  809e60:	003fb206 	br	809d2c <__alt_mem_onchip_mem+0xff789d2c>
  809e64:	21003fcc 	andi	r4,r4,255
  809e68:	2002c41e 	bne	r4,zero,80a97c <___vfiprintf_internal_r+0x143c>
  809e6c:	a5000414 	ori	r20,r20,16
  809e70:	a080080c 	andi	r2,r20,32
  809e74:	103f5f1e 	bne	r2,zero,809bf4 <__alt_mem_onchip_mem+0xff789bf4>
  809e78:	a080040c 	andi	r2,r20,16
  809e7c:	10020f26 	beq	r2,zero,80a6bc <___vfiprintf_internal_r+0x117c>
  809e80:	da802217 	ldw	r10,136(sp)
  809e84:	d8001d85 	stb	zero,118(sp)
  809e88:	0027883a 	mov	r19,zero
  809e8c:	50800104 	addi	r2,r10,4
  809e90:	54800017 	ldw	r18,0(r10)
  809e94:	48021116 	blt	r9,zero,80a6dc <___vfiprintf_internal_r+0x119c>
  809e98:	00ffdfc4 	movi	r3,-129
  809e9c:	d8802215 	stw	r2,136(sp)
  809ea0:	a0e8703a 	and	r20,r20,r3
  809ea4:	903f5e1e 	bne	r18,zero,809c20 <__alt_mem_onchip_mem+0xff789c20>
  809ea8:	0039883a 	mov	fp,zero
  809eac:	4802a626 	beq	r9,zero,80a948 <___vfiprintf_internal_r+0x1408>
  809eb0:	0025883a 	mov	r18,zero
  809eb4:	0027883a 	mov	r19,zero
  809eb8:	003f5a06 	br	809c24 <__alt_mem_onchip_mem+0xff789c24>
  809ebc:	21003fcc 	andi	r4,r4,255
  809ec0:	20029f1e 	bne	r4,zero,80a940 <___vfiprintf_internal_r+0x1400>
  809ec4:	a5000414 	ori	r20,r20,16
  809ec8:	a080080c 	andi	r2,r20,32
  809ecc:	10005e1e 	bne	r2,zero,80a048 <___vfiprintf_internal_r+0xb08>
  809ed0:	a080040c 	andi	r2,r20,16
  809ed4:	1001a21e 	bne	r2,zero,80a560 <___vfiprintf_internal_r+0x1020>
  809ed8:	a080100c 	andi	r2,r20,64
  809edc:	d8001d85 	stb	zero,118(sp)
  809ee0:	da802217 	ldw	r10,136(sp)
  809ee4:	1002231e 	bne	r2,zero,80a774 <___vfiprintf_internal_r+0x1234>
  809ee8:	50800104 	addi	r2,r10,4
  809eec:	54800017 	ldw	r18,0(r10)
  809ef0:	0027883a 	mov	r19,zero
  809ef4:	4801a00e 	bge	r9,zero,80a578 <___vfiprintf_internal_r+0x1038>
  809ef8:	d8802215 	stw	r2,136(sp)
  809efc:	0039883a 	mov	fp,zero
  809f00:	94c4b03a 	or	r2,r18,r19
  809f04:	103f901e 	bne	r2,zero,809d48 <__alt_mem_onchip_mem+0xff789d48>
  809f08:	00800044 	movi	r2,1
  809f0c:	10803fcc 	andi	r2,r2,255
  809f10:	00c00044 	movi	r3,1
  809f14:	10c05926 	beq	r2,r3,80a07c <___vfiprintf_internal_r+0xb3c>
  809f18:	00c00084 	movi	r3,2
  809f1c:	10ffe41e 	bne	r2,r3,809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  809f20:	0025883a 	mov	r18,zero
  809f24:	0027883a 	mov	r19,zero
  809f28:	00013d06 	br	80a420 <___vfiprintf_internal_r+0xee0>
  809f2c:	21003fcc 	andi	r4,r4,255
  809f30:	2002811e 	bne	r4,zero,80a938 <___vfiprintf_internal_r+0x13f8>
  809f34:	00802074 	movhi	r2,129
  809f38:	108ce504 	addi	r2,r2,13204
  809f3c:	d8802615 	stw	r2,152(sp)
  809f40:	a080080c 	andi	r2,r20,32
  809f44:	103f561e 	bne	r2,zero,809ca0 <__alt_mem_onchip_mem+0xff789ca0>
  809f48:	a080040c 	andi	r2,r20,16
  809f4c:	1001d126 	beq	r2,zero,80a694 <___vfiprintf_internal_r+0x1154>
  809f50:	da802217 	ldw	r10,136(sp)
  809f54:	0027883a 	mov	r19,zero
  809f58:	54800017 	ldw	r18,0(r10)
  809f5c:	52800104 	addi	r10,r10,4
  809f60:	da802215 	stw	r10,136(sp)
  809f64:	003f5306 	br	809cb4 <__alt_mem_onchip_mem+0xff789cb4>
  809f68:	da802217 	ldw	r10,136(sp)
  809f6c:	d8001d85 	stb	zero,118(sp)
  809f70:	55400017 	ldw	r21,0(r10)
  809f74:	50c00104 	addi	r3,r10,4
  809f78:	a8024226 	beq	r21,zero,80a884 <___vfiprintf_internal_r+0x1344>
  809f7c:	48021816 	blt	r9,zero,80a7e0 <___vfiprintf_internal_r+0x12a0>
  809f80:	480d883a 	mov	r6,r9
  809f84:	000b883a 	mov	r5,zero
  809f88:	a809883a 	mov	r4,r21
  809f8c:	d8c02a15 	stw	r3,168(sp)
  809f90:	da002b15 	stw	r8,172(sp)
  809f94:	da402c15 	stw	r9,176(sp)
  809f98:	0807d640 	call	807d64 <memchr>
  809f9c:	d8c02a17 	ldw	r3,168(sp)
  809fa0:	da002b17 	ldw	r8,172(sp)
  809fa4:	da402c17 	ldw	r9,176(sp)
  809fa8:	10024826 	beq	r2,zero,80a8cc <___vfiprintf_internal_r+0x138c>
  809fac:	1567c83a 	sub	r19,r2,r21
  809fb0:	df001d83 	ldbu	fp,118(sp)
  809fb4:	d8c02215 	stw	r3,136(sp)
  809fb8:	0013883a 	mov	r9,zero
  809fbc:	003e6006 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  809fc0:	21003fcc 	andi	r4,r4,255
  809fc4:	203fc026 	beq	r4,zero,809ec8 <__alt_mem_onchip_mem+0xff789ec8>
  809fc8:	d9c01d85 	stb	r7,118(sp)
  809fcc:	003fbe06 	br	809ec8 <__alt_mem_onchip_mem+0xff789ec8>
  809fd0:	da802217 	ldw	r10,136(sp)
  809fd4:	54400017 	ldw	r17,0(r10)
  809fd8:	50800104 	addi	r2,r10,4
  809fdc:	883e3b16 	blt	r17,zero,8098cc <__alt_mem_onchip_mem+0xff7898cc>
  809fe0:	d8802215 	stw	r2,136(sp)
  809fe4:	80c00007 	ldb	r3,0(r16)
  809fe8:	003db406 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809fec:	01000044 	movi	r4,1
  809ff0:	01c00ac4 	movi	r7,43
  809ff4:	80c00007 	ldb	r3,0(r16)
  809ff8:	003db006 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  809ffc:	80c00007 	ldb	r3,0(r16)
  80a000:	82800044 	addi	r10,r16,1
  80a004:	1b423c26 	beq	r3,r13,80a8f8 <___vfiprintf_internal_r+0x13b8>
  80a008:	18bff404 	addi	r2,r3,-48
  80a00c:	0013883a 	mov	r9,zero
  80a010:	30822b36 	bltu	r6,r2,80a8c0 <___vfiprintf_internal_r+0x1380>
  80a014:	50c00007 	ldb	r3,0(r10)
  80a018:	4a4002a4 	muli	r9,r9,10
  80a01c:	54000044 	addi	r16,r10,1
  80a020:	8015883a 	mov	r10,r16
  80a024:	4893883a 	add	r9,r9,r2
  80a028:	18bff404 	addi	r2,r3,-48
  80a02c:	30bff92e 	bgeu	r6,r2,80a014 <__alt_mem_onchip_mem+0xff78a014>
  80a030:	483da30e 	bge	r9,zero,8096c0 <__alt_mem_onchip_mem+0xff7896c0>
  80a034:	027fffc4 	movi	r9,-1
  80a038:	003da106 	br	8096c0 <__alt_mem_onchip_mem+0xff7896c0>
  80a03c:	a5001014 	ori	r20,r20,64
  80a040:	80c00007 	ldb	r3,0(r16)
  80a044:	003d9d06 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  80a048:	da802217 	ldw	r10,136(sp)
  80a04c:	d8001d85 	stb	zero,118(sp)
  80a050:	50c00204 	addi	r3,r10,8
  80a054:	54800017 	ldw	r18,0(r10)
  80a058:	54c00117 	ldw	r19,4(r10)
  80a05c:	4801ca16 	blt	r9,zero,80a788 <___vfiprintf_internal_r+0x1248>
  80a060:	013fdfc4 	movi	r4,-129
  80a064:	94c4b03a 	or	r2,r18,r19
  80a068:	d8c02215 	stw	r3,136(sp)
  80a06c:	a128703a 	and	r20,r20,r4
  80a070:	0039883a 	mov	fp,zero
  80a074:	103f341e 	bne	r2,zero,809d48 <__alt_mem_onchip_mem+0xff789d48>
  80a078:	483e2e26 	beq	r9,zero,809934 <__alt_mem_onchip_mem+0xff789934>
  80a07c:	0025883a 	mov	r18,zero
  80a080:	94800c04 	addi	r18,r18,48
  80a084:	dc8019c5 	stb	r18,103(sp)
  80a088:	dcc02717 	ldw	r19,156(sp)
  80a08c:	dd4019c4 	addi	r21,sp,103
  80a090:	003e2b06 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  80a094:	21003fcc 	andi	r4,r4,255
  80a098:	2002361e 	bne	r4,zero,80a974 <___vfiprintf_internal_r+0x1434>
  80a09c:	1801c126 	beq	r3,zero,80a7a4 <___vfiprintf_internal_r+0x1264>
  80a0a0:	04800044 	movi	r18,1
  80a0a4:	d8c01005 	stb	r3,64(sp)
  80a0a8:	d8001d85 	stb	zero,118(sp)
  80a0ac:	9027883a 	mov	r19,r18
  80a0b0:	dd401004 	addi	r21,sp,64
  80a0b4:	003f1106 	br	809cfc <__alt_mem_onchip_mem+0xff789cfc>
  80a0b8:	d9402117 	ldw	r5,132(sp)
  80a0bc:	d9002017 	ldw	r4,128(sp)
  80a0c0:	d9801a04 	addi	r6,sp,104
  80a0c4:	d9c02b15 	stw	r7,172(sp)
  80a0c8:	dbc02a15 	stw	r15,168(sp)
  80a0cc:	080942c0 	call	80942c <__sprint_r.part.0>
  80a0d0:	d9c02b17 	ldw	r7,172(sp)
  80a0d4:	dbc02a17 	ldw	r15,168(sp)
  80a0d8:	10006d1e 	bne	r2,zero,80a290 <___vfiprintf_internal_r+0xd50>
  80a0dc:	d9801b17 	ldw	r6,108(sp)
  80a0e0:	d8801c17 	ldw	r2,112(sp)
  80a0e4:	d811883a 	mov	r8,sp
  80a0e8:	31400044 	addi	r5,r6,1
  80a0ec:	003e3306 	br	8099bc <__alt_mem_onchip_mem+0xff7899bc>
  80a0f0:	d9401b17 	ldw	r5,108(sp)
  80a0f4:	d8801c17 	ldw	r2,112(sp)
  80a0f8:	29000044 	addi	r4,r5,1
  80a0fc:	d8c01d87 	ldb	r3,118(sp)
  80a100:	183e4d26 	beq	r3,zero,809a38 <__alt_mem_onchip_mem+0xff789a38>
  80a104:	00c00044 	movi	r3,1
  80a108:	d9401d84 	addi	r5,sp,118
  80a10c:	10c5883a 	add	r2,r2,r3
  80a110:	41400015 	stw	r5,0(r8)
  80a114:	40c00115 	stw	r3,4(r8)
  80a118:	d8801c15 	stw	r2,112(sp)
  80a11c:	d9001b15 	stw	r4,108(sp)
  80a120:	014001c4 	movi	r5,7
  80a124:	2900a90e 	bge	r5,r4,80a3cc <___vfiprintf_internal_r+0xe8c>
  80a128:	1000da1e 	bne	r2,zero,80a494 <___vfiprintf_internal_r+0xf54>
  80a12c:	7000ab1e 	bne	r14,zero,80a3dc <___vfiprintf_internal_r+0xe9c>
  80a130:	000b883a 	mov	r5,zero
  80a134:	1809883a 	mov	r4,r3
  80a138:	d811883a 	mov	r8,sp
  80a13c:	00c02004 	movi	r3,128
  80a140:	e0fe4d26 	beq	fp,r3,809a78 <__alt_mem_onchip_mem+0xff789a78>
  80a144:	4cf9c83a 	sub	fp,r9,r19
  80a148:	073e7b0e 	bge	zero,fp,809b38 <__alt_mem_onchip_mem+0xff789b38>
  80a14c:	01c00404 	movi	r7,16
  80a150:	3f01900e 	bge	r7,fp,80a794 <___vfiprintf_internal_r+0x1254>
  80a154:	00c02074 	movhi	r3,129
  80a158:	18cd4b04 	addi	r3,r3,13612
  80a15c:	d8c02415 	stw	r3,144(sp)
  80a160:	034001c4 	movi	r13,7
  80a164:	00000506 	br	80a17c <___vfiprintf_internal_r+0xc3c>
  80a168:	29000084 	addi	r4,r5,2
  80a16c:	42000204 	addi	r8,r8,8
  80a170:	180b883a 	mov	r5,r3
  80a174:	e73ffc04 	addi	fp,fp,-16
  80a178:	3f000d0e 	bge	r7,fp,80a1b0 <___vfiprintf_internal_r+0xc70>
  80a17c:	10800404 	addi	r2,r2,16
  80a180:	28c00044 	addi	r3,r5,1
  80a184:	45c00015 	stw	r23,0(r8)
  80a188:	41c00115 	stw	r7,4(r8)
  80a18c:	d8801c15 	stw	r2,112(sp)
  80a190:	d8c01b15 	stw	r3,108(sp)
  80a194:	68fff40e 	bge	r13,r3,80a168 <__alt_mem_onchip_mem+0xff78a168>
  80a198:	1000101e 	bne	r2,zero,80a1dc <___vfiprintf_internal_r+0xc9c>
  80a19c:	e73ffc04 	addi	fp,fp,-16
  80a1a0:	01000044 	movi	r4,1
  80a1a4:	000b883a 	mov	r5,zero
  80a1a8:	d811883a 	mov	r8,sp
  80a1ac:	3f3ff316 	blt	r7,fp,80a17c <__alt_mem_onchip_mem+0xff78a17c>
  80a1b0:	da802417 	ldw	r10,144(sp)
  80a1b4:	1705883a 	add	r2,r2,fp
  80a1b8:	47000115 	stw	fp,4(r8)
  80a1bc:	42800015 	stw	r10,0(r8)
  80a1c0:	d8801c15 	stw	r2,112(sp)
  80a1c4:	d9001b15 	stw	r4,108(sp)
  80a1c8:	00c001c4 	movi	r3,7
  80a1cc:	19003616 	blt	r3,r4,80a2a8 <___vfiprintf_internal_r+0xd68>
  80a1d0:	42000204 	addi	r8,r8,8
  80a1d4:	21000044 	addi	r4,r4,1
  80a1d8:	003e5706 	br	809b38 <__alt_mem_onchip_mem+0xff789b38>
  80a1dc:	d9402117 	ldw	r5,132(sp)
  80a1e0:	d9002017 	ldw	r4,128(sp)
  80a1e4:	d9801a04 	addi	r6,sp,104
  80a1e8:	d9c02b15 	stw	r7,172(sp)
  80a1ec:	db402a15 	stw	r13,168(sp)
  80a1f0:	080942c0 	call	80942c <__sprint_r.part.0>
  80a1f4:	d9c02b17 	ldw	r7,172(sp)
  80a1f8:	db402a17 	ldw	r13,168(sp)
  80a1fc:	1000241e 	bne	r2,zero,80a290 <___vfiprintf_internal_r+0xd50>
  80a200:	d9401b17 	ldw	r5,108(sp)
  80a204:	d8801c17 	ldw	r2,112(sp)
  80a208:	d811883a 	mov	r8,sp
  80a20c:	29000044 	addi	r4,r5,1
  80a210:	003fd806 	br	80a174 <__alt_mem_onchip_mem+0xff78a174>
  80a214:	d9401b17 	ldw	r5,108(sp)
  80a218:	00c02074 	movhi	r3,129
  80a21c:	18cd4f04 	addi	r3,r3,13628
  80a220:	d8c02415 	stw	r3,144(sp)
  80a224:	29400044 	addi	r5,r5,1
  80a228:	d8c02417 	ldw	r3,144(sp)
  80a22c:	14c5883a 	add	r2,r2,r19
  80a230:	44c00115 	stw	r19,4(r8)
  80a234:	40c00015 	stw	r3,0(r8)
  80a238:	d8801c15 	stw	r2,112(sp)
  80a23c:	d9401b15 	stw	r5,108(sp)
  80a240:	00c001c4 	movi	r3,7
  80a244:	1940070e 	bge	r3,r5,80a264 <___vfiprintf_internal_r+0xd24>
  80a248:	103e4826 	beq	r2,zero,809b6c <__alt_mem_onchip_mem+0xff789b6c>
  80a24c:	d9402117 	ldw	r5,132(sp)
  80a250:	d9002017 	ldw	r4,128(sp)
  80a254:	d9801a04 	addi	r6,sp,104
  80a258:	080942c0 	call	80942c <__sprint_r.part.0>
  80a25c:	10000c1e 	bne	r2,zero,80a290 <___vfiprintf_internal_r+0xd50>
  80a260:	d8801c17 	ldw	r2,112(sp)
  80a264:	8c80010e 	bge	r17,r18,80a26c <___vfiprintf_internal_r+0xd2c>
  80a268:	9023883a 	mov	r17,r18
  80a26c:	da802317 	ldw	r10,140(sp)
  80a270:	5455883a 	add	r10,r10,r17
  80a274:	da802315 	stw	r10,140(sp)
  80a278:	103e4126 	beq	r2,zero,809b80 <__alt_mem_onchip_mem+0xff789b80>
  80a27c:	d9402117 	ldw	r5,132(sp)
  80a280:	d9002017 	ldw	r4,128(sp)
  80a284:	d9801a04 	addi	r6,sp,104
  80a288:	080942c0 	call	80942c <__sprint_r.part.0>
  80a28c:	103e3c26 	beq	r2,zero,809b80 <__alt_mem_onchip_mem+0xff789b80>
  80a290:	dd002117 	ldw	r20,132(sp)
  80a294:	a080030b 	ldhu	r2,12(r20)
  80a298:	1080100c 	andi	r2,r2,64
  80a29c:	1001231e 	bne	r2,zero,80a72c <___vfiprintf_internal_r+0x11ec>
  80a2a0:	d8802317 	ldw	r2,140(sp)
  80a2a4:	003d7b06 	br	809894 <__alt_mem_onchip_mem+0xff789894>
  80a2a8:	1000991e 	bne	r2,zero,80a510 <___vfiprintf_internal_r+0xfd0>
  80a2ac:	00c00044 	movi	r3,1
  80a2b0:	9805883a 	mov	r2,r19
  80a2b4:	dd400015 	stw	r21,0(sp)
  80a2b8:	dcc00115 	stw	r19,4(sp)
  80a2bc:	dcc01c15 	stw	r19,112(sp)
  80a2c0:	d8c01b15 	stw	r3,108(sp)
  80a2c4:	d811883a 	mov	r8,sp
  80a2c8:	42000204 	addi	r8,r8,8
  80a2cc:	a2c0010c 	andi	r11,r20,4
  80a2d0:	583fe426 	beq	r11,zero,80a264 <__alt_mem_onchip_mem+0xff78a264>
  80a2d4:	8ca7c83a 	sub	r19,r17,r18
  80a2d8:	04ffe20e 	bge	zero,r19,80a264 <__alt_mem_onchip_mem+0xff78a264>
  80a2dc:	01c00404 	movi	r7,16
  80a2e0:	3cffcc0e 	bge	r7,r19,80a214 <__alt_mem_onchip_mem+0xff78a214>
  80a2e4:	02802074 	movhi	r10,129
  80a2e8:	528d4f04 	addi	r10,r10,13628
  80a2ec:	d9001b17 	ldw	r4,108(sp)
  80a2f0:	da802415 	stw	r10,144(sp)
  80a2f4:	382b883a 	mov	r21,r7
  80a2f8:	050001c4 	movi	r20,7
  80a2fc:	df002017 	ldw	fp,128(sp)
  80a300:	00000506 	br	80a318 <___vfiprintf_internal_r+0xdd8>
  80a304:	21400084 	addi	r5,r4,2
  80a308:	42000204 	addi	r8,r8,8
  80a30c:	1809883a 	mov	r4,r3
  80a310:	9cfffc04 	addi	r19,r19,-16
  80a314:	acffc40e 	bge	r21,r19,80a228 <__alt_mem_onchip_mem+0xff78a228>
  80a318:	10800404 	addi	r2,r2,16
  80a31c:	20c00044 	addi	r3,r4,1
  80a320:	45800015 	stw	r22,0(r8)
  80a324:	45400115 	stw	r21,4(r8)
  80a328:	d8801c15 	stw	r2,112(sp)
  80a32c:	d8c01b15 	stw	r3,108(sp)
  80a330:	a0fff40e 	bge	r20,r3,80a304 <__alt_mem_onchip_mem+0xff78a304>
  80a334:	1000041e 	bne	r2,zero,80a348 <___vfiprintf_internal_r+0xe08>
  80a338:	01400044 	movi	r5,1
  80a33c:	0009883a 	mov	r4,zero
  80a340:	d811883a 	mov	r8,sp
  80a344:	003ff206 	br	80a310 <__alt_mem_onchip_mem+0xff78a310>
  80a348:	d9402117 	ldw	r5,132(sp)
  80a34c:	d9801a04 	addi	r6,sp,104
  80a350:	e009883a 	mov	r4,fp
  80a354:	080942c0 	call	80942c <__sprint_r.part.0>
  80a358:	103fcd1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a35c:	d9001b17 	ldw	r4,108(sp)
  80a360:	d8801c17 	ldw	r2,112(sp)
  80a364:	d811883a 	mov	r8,sp
  80a368:	21400044 	addi	r5,r4,1
  80a36c:	003fe806 	br	80a310 <__alt_mem_onchip_mem+0xff78a310>
  80a370:	d9402117 	ldw	r5,132(sp)
  80a374:	d9002017 	ldw	r4,128(sp)
  80a378:	d9801a04 	addi	r6,sp,104
  80a37c:	d9c02b15 	stw	r7,172(sp)
  80a380:	db402a15 	stw	r13,168(sp)
  80a384:	080942c0 	call	80942c <__sprint_r.part.0>
  80a388:	d9c02b17 	ldw	r7,172(sp)
  80a38c:	db402a17 	ldw	r13,168(sp)
  80a390:	103fbf1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a394:	d9401b17 	ldw	r5,108(sp)
  80a398:	d8801c17 	ldw	r2,112(sp)
  80a39c:	d811883a 	mov	r8,sp
  80a3a0:	29800044 	addi	r6,r5,1
  80a3a4:	003dc406 	br	809ab8 <__alt_mem_onchip_mem+0xff789ab8>
  80a3a8:	1000d21e 	bne	r2,zero,80a6f4 <___vfiprintf_internal_r+0x11b4>
  80a3ac:	d8c01d87 	ldb	r3,118(sp)
  80a3b0:	18009526 	beq	r3,zero,80a608 <___vfiprintf_internal_r+0x10c8>
  80a3b4:	00800044 	movi	r2,1
  80a3b8:	d8c01d84 	addi	r3,sp,118
  80a3bc:	1009883a 	mov	r4,r2
  80a3c0:	d8c00015 	stw	r3,0(sp)
  80a3c4:	d8800115 	stw	r2,4(sp)
  80a3c8:	d811883a 	mov	r8,sp
  80a3cc:	200b883a 	mov	r5,r4
  80a3d0:	42000204 	addi	r8,r8,8
  80a3d4:	21000044 	addi	r4,r4,1
  80a3d8:	003d9706 	br	809a38 <__alt_mem_onchip_mem+0xff789a38>
  80a3dc:	d9001d04 	addi	r4,sp,116
  80a3e0:	00800084 	movi	r2,2
  80a3e4:	d9000015 	stw	r4,0(sp)
  80a3e8:	d8800115 	stw	r2,4(sp)
  80a3ec:	1809883a 	mov	r4,r3
  80a3f0:	d811883a 	mov	r8,sp
  80a3f4:	200b883a 	mov	r5,r4
  80a3f8:	42000204 	addi	r8,r8,8
  80a3fc:	21000044 	addi	r4,r4,1
  80a400:	003f4e06 	br	80a13c <__alt_mem_onchip_mem+0xff78a13c>
  80a404:	d8001d85 	stb	zero,118(sp)
  80a408:	48005016 	blt	r9,zero,80a54c <___vfiprintf_internal_r+0x100c>
  80a40c:	00ffdfc4 	movi	r3,-129
  80a410:	94c4b03a 	or	r2,r18,r19
  80a414:	a0e8703a 	and	r20,r20,r3
  80a418:	103d4426 	beq	r2,zero,80992c <__alt_mem_onchip_mem+0xff78992c>
  80a41c:	0039883a 	mov	fp,zero
  80a420:	d9002617 	ldw	r4,152(sp)
  80a424:	dd401a04 	addi	r21,sp,104
  80a428:	908003cc 	andi	r2,r18,15
  80a42c:	9806973a 	slli	r3,r19,28
  80a430:	2085883a 	add	r2,r4,r2
  80a434:	9024d13a 	srli	r18,r18,4
  80a438:	10800003 	ldbu	r2,0(r2)
  80a43c:	9826d13a 	srli	r19,r19,4
  80a440:	ad7fffc4 	addi	r21,r21,-1
  80a444:	1ca4b03a 	or	r18,r3,r18
  80a448:	a8800005 	stb	r2,0(r21)
  80a44c:	94c4b03a 	or	r2,r18,r19
  80a450:	103ff51e 	bne	r2,zero,80a428 <__alt_mem_onchip_mem+0xff78a428>
  80a454:	003e5906 	br	809dbc <__alt_mem_onchip_mem+0xff789dbc>
  80a458:	d9402117 	ldw	r5,132(sp)
  80a45c:	d9002017 	ldw	r4,128(sp)
  80a460:	d9801a04 	addi	r6,sp,104
  80a464:	080942c0 	call	80942c <__sprint_r.part.0>
  80a468:	103f891e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a46c:	d8801c17 	ldw	r2,112(sp)
  80a470:	d811883a 	mov	r8,sp
  80a474:	003f9506 	br	80a2cc <__alt_mem_onchip_mem+0xff78a2cc>
  80a478:	d9402117 	ldw	r5,132(sp)
  80a47c:	d9002017 	ldw	r4,128(sp)
  80a480:	d9801a04 	addi	r6,sp,104
  80a484:	080942c0 	call	80942c <__sprint_r.part.0>
  80a488:	103f811e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a48c:	d811883a 	mov	r8,sp
  80a490:	003ced06 	br	809848 <__alt_mem_onchip_mem+0xff789848>
  80a494:	d9402117 	ldw	r5,132(sp)
  80a498:	d9002017 	ldw	r4,128(sp)
  80a49c:	d9801a04 	addi	r6,sp,104
  80a4a0:	da402c15 	stw	r9,176(sp)
  80a4a4:	db802a15 	stw	r14,168(sp)
  80a4a8:	080942c0 	call	80942c <__sprint_r.part.0>
  80a4ac:	da402c17 	ldw	r9,176(sp)
  80a4b0:	db802a17 	ldw	r14,168(sp)
  80a4b4:	103f761e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a4b8:	d9401b17 	ldw	r5,108(sp)
  80a4bc:	d8801c17 	ldw	r2,112(sp)
  80a4c0:	d811883a 	mov	r8,sp
  80a4c4:	29000044 	addi	r4,r5,1
  80a4c8:	003d5b06 	br	809a38 <__alt_mem_onchip_mem+0xff789a38>
  80a4cc:	d9402117 	ldw	r5,132(sp)
  80a4d0:	d9002017 	ldw	r4,128(sp)
  80a4d4:	d9801a04 	addi	r6,sp,104
  80a4d8:	da402c15 	stw	r9,176(sp)
  80a4dc:	080942c0 	call	80942c <__sprint_r.part.0>
  80a4e0:	da402c17 	ldw	r9,176(sp)
  80a4e4:	103f6a1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a4e8:	d9401b17 	ldw	r5,108(sp)
  80a4ec:	d8801c17 	ldw	r2,112(sp)
  80a4f0:	d811883a 	mov	r8,sp
  80a4f4:	29000044 	addi	r4,r5,1
  80a4f8:	003f1006 	br	80a13c <__alt_mem_onchip_mem+0xff78a13c>
  80a4fc:	1000c31e 	bne	r2,zero,80a80c <___vfiprintf_internal_r+0x12cc>
  80a500:	01000044 	movi	r4,1
  80a504:	000b883a 	mov	r5,zero
  80a508:	d811883a 	mov	r8,sp
  80a50c:	003f0d06 	br	80a144 <__alt_mem_onchip_mem+0xff78a144>
  80a510:	d9402117 	ldw	r5,132(sp)
  80a514:	d9002017 	ldw	r4,128(sp)
  80a518:	d9801a04 	addi	r6,sp,104
  80a51c:	080942c0 	call	80942c <__sprint_r.part.0>
  80a520:	103f5b1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a524:	d9001b17 	ldw	r4,108(sp)
  80a528:	d8801c17 	ldw	r2,112(sp)
  80a52c:	d811883a 	mov	r8,sp
  80a530:	21000044 	addi	r4,r4,1
  80a534:	003d8006 	br	809b38 <__alt_mem_onchip_mem+0xff789b38>
  80a538:	01002074 	movhi	r4,129
  80a53c:	210cea04 	addi	r4,r4,13224
  80a540:	d9002615 	stw	r4,152(sp)
  80a544:	d8c02215 	stw	r3,136(sp)
  80a548:	1029883a 	mov	r20,r2
  80a54c:	94c4b03a 	or	r2,r18,r19
  80a550:	103fb21e 	bne	r2,zero,80a41c <__alt_mem_onchip_mem+0xff78a41c>
  80a554:	0039883a 	mov	fp,zero
  80a558:	00800084 	movi	r2,2
  80a55c:	003e6b06 	br	809f0c <__alt_mem_onchip_mem+0xff789f0c>
  80a560:	da802217 	ldw	r10,136(sp)
  80a564:	d8001d85 	stb	zero,118(sp)
  80a568:	0027883a 	mov	r19,zero
  80a56c:	50800104 	addi	r2,r10,4
  80a570:	54800017 	ldw	r18,0(r10)
  80a574:	483e6016 	blt	r9,zero,809ef8 <__alt_mem_onchip_mem+0xff789ef8>
  80a578:	00ffdfc4 	movi	r3,-129
  80a57c:	d8802215 	stw	r2,136(sp)
  80a580:	a0e8703a 	and	r20,r20,r3
  80a584:	0039883a 	mov	fp,zero
  80a588:	903ebb26 	beq	r18,zero,80a078 <__alt_mem_onchip_mem+0xff78a078>
  80a58c:	00800244 	movi	r2,9
  80a590:	14bdee36 	bltu	r2,r18,809d4c <__alt_mem_onchip_mem+0xff789d4c>
  80a594:	003eba06 	br	80a080 <__alt_mem_onchip_mem+0xff78a080>
  80a598:	00800c04 	movi	r2,48
  80a59c:	d8c01d45 	stb	r3,117(sp)
  80a5a0:	d8801d05 	stb	r2,116(sp)
  80a5a4:	d8001d85 	stb	zero,118(sp)
  80a5a8:	a0c00094 	ori	r3,r20,2
  80a5ac:	4800a916 	blt	r9,zero,80a854 <___vfiprintf_internal_r+0x1314>
  80a5b0:	00bfdfc4 	movi	r2,-129
  80a5b4:	a096703a 	and	r11,r20,r2
  80a5b8:	5d000094 	ori	r20,r11,2
  80a5bc:	0039883a 	mov	fp,zero
  80a5c0:	003f9706 	br	80a420 <__alt_mem_onchip_mem+0xff78a420>
  80a5c4:	8025883a 	mov	r18,r16
  80a5c8:	003c2e06 	br	809684 <__alt_mem_onchip_mem+0xff789684>
  80a5cc:	00802074 	movhi	r2,129
  80a5d0:	108cea04 	addi	r2,r2,13224
  80a5d4:	0039883a 	mov	fp,zero
  80a5d8:	d8802615 	stw	r2,152(sp)
  80a5dc:	003f9006 	br	80a420 <__alt_mem_onchip_mem+0xff78a420>
  80a5e0:	04a5c83a 	sub	r18,zero,r18
  80a5e4:	07000b44 	movi	fp,45
  80a5e8:	9004c03a 	cmpne	r2,r18,zero
  80a5ec:	04e7c83a 	sub	r19,zero,r19
  80a5f0:	df001d85 	stb	fp,118(sp)
  80a5f4:	98a7c83a 	sub	r19,r19,r2
  80a5f8:	48009f16 	blt	r9,zero,80a878 <___vfiprintf_internal_r+0x1338>
  80a5fc:	00bfdfc4 	movi	r2,-129
  80a600:	a0a8703a 	and	r20,r20,r2
  80a604:	003dd006 	br	809d48 <__alt_mem_onchip_mem+0xff789d48>
  80a608:	70004c26 	beq	r14,zero,80a73c <___vfiprintf_internal_r+0x11fc>
  80a60c:	00800084 	movi	r2,2
  80a610:	d8c01d04 	addi	r3,sp,116
  80a614:	d8c00015 	stw	r3,0(sp)
  80a618:	d8800115 	stw	r2,4(sp)
  80a61c:	01000044 	movi	r4,1
  80a620:	d811883a 	mov	r8,sp
  80a624:	003f7306 	br	80a3f4 <__alt_mem_onchip_mem+0xff78a3f4>
  80a628:	a080100c 	andi	r2,r20,64
  80a62c:	da802217 	ldw	r10,136(sp)
  80a630:	103e0626 	beq	r2,zero,809e4c <__alt_mem_onchip_mem+0xff789e4c>
  80a634:	5480000f 	ldh	r18,0(r10)
  80a638:	52800104 	addi	r10,r10,4
  80a63c:	da802215 	stw	r10,136(sp)
  80a640:	9027d7fa 	srai	r19,r18,31
  80a644:	9805883a 	mov	r2,r19
  80a648:	003db806 	br	809d2c <__alt_mem_onchip_mem+0xff789d2c>
  80a64c:	a080040c 	andi	r2,r20,16
  80a650:	1000091e 	bne	r2,zero,80a678 <___vfiprintf_internal_r+0x1138>
  80a654:	a2c0100c 	andi	r11,r20,64
  80a658:	58000726 	beq	r11,zero,80a678 <___vfiprintf_internal_r+0x1138>
  80a65c:	da802217 	ldw	r10,136(sp)
  80a660:	50800017 	ldw	r2,0(r10)
  80a664:	52800104 	addi	r10,r10,4
  80a668:	da802215 	stw	r10,136(sp)
  80a66c:	da802317 	ldw	r10,140(sp)
  80a670:	1280000d 	sth	r10,0(r2)
  80a674:	003be706 	br	809614 <__alt_mem_onchip_mem+0xff789614>
  80a678:	da802217 	ldw	r10,136(sp)
  80a67c:	50800017 	ldw	r2,0(r10)
  80a680:	52800104 	addi	r10,r10,4
  80a684:	da802215 	stw	r10,136(sp)
  80a688:	da802317 	ldw	r10,140(sp)
  80a68c:	12800015 	stw	r10,0(r2)
  80a690:	003be006 	br	809614 <__alt_mem_onchip_mem+0xff789614>
  80a694:	a080100c 	andi	r2,r20,64
  80a698:	da802217 	ldw	r10,136(sp)
  80a69c:	10003026 	beq	r2,zero,80a760 <___vfiprintf_internal_r+0x1220>
  80a6a0:	5480000b 	ldhu	r18,0(r10)
  80a6a4:	52800104 	addi	r10,r10,4
  80a6a8:	0027883a 	mov	r19,zero
  80a6ac:	da802215 	stw	r10,136(sp)
  80a6b0:	003d8006 	br	809cb4 <__alt_mem_onchip_mem+0xff789cb4>
  80a6b4:	80c00007 	ldb	r3,0(r16)
  80a6b8:	003c0006 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  80a6bc:	a080100c 	andi	r2,r20,64
  80a6c0:	d8001d85 	stb	zero,118(sp)
  80a6c4:	da802217 	ldw	r10,136(sp)
  80a6c8:	1000201e 	bne	r2,zero,80a74c <___vfiprintf_internal_r+0x120c>
  80a6cc:	50800104 	addi	r2,r10,4
  80a6d0:	54800017 	ldw	r18,0(r10)
  80a6d4:	0027883a 	mov	r19,zero
  80a6d8:	483def0e 	bge	r9,zero,809e98 <__alt_mem_onchip_mem+0xff789e98>
  80a6dc:	94c6b03a 	or	r3,r18,r19
  80a6e0:	d8802215 	stw	r2,136(sp)
  80a6e4:	183d4e1e 	bne	r3,zero,809c20 <__alt_mem_onchip_mem+0xff789c20>
  80a6e8:	0039883a 	mov	fp,zero
  80a6ec:	0005883a 	mov	r2,zero
  80a6f0:	003e0606 	br	809f0c <__alt_mem_onchip_mem+0xff789f0c>
  80a6f4:	d9402117 	ldw	r5,132(sp)
  80a6f8:	d9002017 	ldw	r4,128(sp)
  80a6fc:	d9801a04 	addi	r6,sp,104
  80a700:	da402c15 	stw	r9,176(sp)
  80a704:	db802a15 	stw	r14,168(sp)
  80a708:	080942c0 	call	80942c <__sprint_r.part.0>
  80a70c:	da402c17 	ldw	r9,176(sp)
  80a710:	db802a17 	ldw	r14,168(sp)
  80a714:	103ede1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a718:	d9401b17 	ldw	r5,108(sp)
  80a71c:	d8801c17 	ldw	r2,112(sp)
  80a720:	d811883a 	mov	r8,sp
  80a724:	29000044 	addi	r4,r5,1
  80a728:	003e7406 	br	80a0fc <__alt_mem_onchip_mem+0xff78a0fc>
  80a72c:	00bfffc4 	movi	r2,-1
  80a730:	003c5806 	br	809894 <__alt_mem_onchip_mem+0xff789894>
  80a734:	d811883a 	mov	r8,sp
  80a738:	003ee806 	br	80a2dc <__alt_mem_onchip_mem+0xff78a2dc>
  80a73c:	000b883a 	mov	r5,zero
  80a740:	01000044 	movi	r4,1
  80a744:	d811883a 	mov	r8,sp
  80a748:	003e7c06 	br	80a13c <__alt_mem_onchip_mem+0xff78a13c>
  80a74c:	50800104 	addi	r2,r10,4
  80a750:	5480000b 	ldhu	r18,0(r10)
  80a754:	0027883a 	mov	r19,zero
  80a758:	483dcf0e 	bge	r9,zero,809e98 <__alt_mem_onchip_mem+0xff789e98>
  80a75c:	003fdf06 	br	80a6dc <__alt_mem_onchip_mem+0xff78a6dc>
  80a760:	54800017 	ldw	r18,0(r10)
  80a764:	52800104 	addi	r10,r10,4
  80a768:	0027883a 	mov	r19,zero
  80a76c:	da802215 	stw	r10,136(sp)
  80a770:	003d5006 	br	809cb4 <__alt_mem_onchip_mem+0xff789cb4>
  80a774:	50800104 	addi	r2,r10,4
  80a778:	5480000b 	ldhu	r18,0(r10)
  80a77c:	0027883a 	mov	r19,zero
  80a780:	483f7d0e 	bge	r9,zero,80a578 <__alt_mem_onchip_mem+0xff78a578>
  80a784:	003ddc06 	br	809ef8 <__alt_mem_onchip_mem+0xff789ef8>
  80a788:	d8c02215 	stw	r3,136(sp)
  80a78c:	0039883a 	mov	fp,zero
  80a790:	003ddb06 	br	809f00 <__alt_mem_onchip_mem+0xff789f00>
  80a794:	02802074 	movhi	r10,129
  80a798:	528d4b04 	addi	r10,r10,13612
  80a79c:	da802415 	stw	r10,144(sp)
  80a7a0:	003e8306 	br	80a1b0 <__alt_mem_onchip_mem+0xff78a1b0>
  80a7a4:	d8801c17 	ldw	r2,112(sp)
  80a7a8:	dd002117 	ldw	r20,132(sp)
  80a7ac:	103eb926 	beq	r2,zero,80a294 <__alt_mem_onchip_mem+0xff78a294>
  80a7b0:	d9002017 	ldw	r4,128(sp)
  80a7b4:	d9801a04 	addi	r6,sp,104
  80a7b8:	a00b883a 	mov	r5,r20
  80a7bc:	080942c0 	call	80942c <__sprint_r.part.0>
  80a7c0:	003eb406 	br	80a294 <__alt_mem_onchip_mem+0xff78a294>
  80a7c4:	80c00043 	ldbu	r3,1(r16)
  80a7c8:	a5000814 	ori	r20,r20,32
  80a7cc:	84000044 	addi	r16,r16,1
  80a7d0:	18c03fcc 	andi	r3,r3,255
  80a7d4:	18c0201c 	xori	r3,r3,128
  80a7d8:	18ffe004 	addi	r3,r3,-128
  80a7dc:	003bb706 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  80a7e0:	a809883a 	mov	r4,r21
  80a7e4:	d8c02a15 	stw	r3,168(sp)
  80a7e8:	da002b15 	stw	r8,172(sp)
  80a7ec:	08093940 	call	809394 <strlen>
  80a7f0:	d8c02a17 	ldw	r3,168(sp)
  80a7f4:	1027883a 	mov	r19,r2
  80a7f8:	df001d83 	ldbu	fp,118(sp)
  80a7fc:	d8c02215 	stw	r3,136(sp)
  80a800:	0013883a 	mov	r9,zero
  80a804:	da002b17 	ldw	r8,172(sp)
  80a808:	003c4d06 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  80a80c:	d9402117 	ldw	r5,132(sp)
  80a810:	d9002017 	ldw	r4,128(sp)
  80a814:	d9801a04 	addi	r6,sp,104
  80a818:	da402c15 	stw	r9,176(sp)
  80a81c:	080942c0 	call	80942c <__sprint_r.part.0>
  80a820:	da402c17 	ldw	r9,176(sp)
  80a824:	103e9a1e 	bne	r2,zero,80a290 <__alt_mem_onchip_mem+0xff78a290>
  80a828:	d9401b17 	ldw	r5,108(sp)
  80a82c:	d8801c17 	ldw	r2,112(sp)
  80a830:	d811883a 	mov	r8,sp
  80a834:	29000044 	addi	r4,r5,1
  80a838:	003e4206 	br	80a144 <__alt_mem_onchip_mem+0xff78a144>
  80a83c:	d9401b17 	ldw	r5,108(sp)
  80a840:	01002074 	movhi	r4,129
  80a844:	210d4f04 	addi	r4,r4,13628
  80a848:	d9002415 	stw	r4,144(sp)
  80a84c:	29400044 	addi	r5,r5,1
  80a850:	003c6d06 	br	809a08 <__alt_mem_onchip_mem+0xff789a08>
  80a854:	0039883a 	mov	fp,zero
  80a858:	00800084 	movi	r2,2
  80a85c:	10803fcc 	andi	r2,r2,255
  80a860:	01000044 	movi	r4,1
  80a864:	11001e26 	beq	r2,r4,80a8e0 <___vfiprintf_internal_r+0x13a0>
  80a868:	01000084 	movi	r4,2
  80a86c:	11001e1e 	bne	r2,r4,80a8e8 <___vfiprintf_internal_r+0x13a8>
  80a870:	1829883a 	mov	r20,r3
  80a874:	003eea06 	br	80a420 <__alt_mem_onchip_mem+0xff78a420>
  80a878:	a007883a 	mov	r3,r20
  80a87c:	00800044 	movi	r2,1
  80a880:	003ff606 	br	80a85c <__alt_mem_onchip_mem+0xff78a85c>
  80a884:	00800184 	movi	r2,6
  80a888:	1240012e 	bgeu	r2,r9,80a890 <___vfiprintf_internal_r+0x1350>
  80a88c:	1013883a 	mov	r9,r2
  80a890:	4827883a 	mov	r19,r9
  80a894:	4825883a 	mov	r18,r9
  80a898:	48001516 	blt	r9,zero,80a8f0 <___vfiprintf_internal_r+0x13b0>
  80a89c:	05402074 	movhi	r21,129
  80a8a0:	d8c02215 	stw	r3,136(sp)
  80a8a4:	ad4cef04 	addi	r21,r21,13244
  80a8a8:	003d1406 	br	809cfc <__alt_mem_onchip_mem+0xff789cfc>
  80a8ac:	02802074 	movhi	r10,129
  80a8b0:	528d4b04 	addi	r10,r10,13612
  80a8b4:	da802415 	stw	r10,144(sp)
  80a8b8:	200d883a 	mov	r6,r4
  80a8bc:	003c9106 	br	809b04 <__alt_mem_onchip_mem+0xff789b04>
  80a8c0:	5021883a 	mov	r16,r10
  80a8c4:	0013883a 	mov	r9,zero
  80a8c8:	003b7d06 	br	8096c0 <__alt_mem_onchip_mem+0xff7896c0>
  80a8cc:	4827883a 	mov	r19,r9
  80a8d0:	df001d83 	ldbu	fp,118(sp)
  80a8d4:	d8c02215 	stw	r3,136(sp)
  80a8d8:	0013883a 	mov	r9,zero
  80a8dc:	003c1806 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  80a8e0:	1829883a 	mov	r20,r3
  80a8e4:	003d1806 	br	809d48 <__alt_mem_onchip_mem+0xff789d48>
  80a8e8:	1829883a 	mov	r20,r3
  80a8ec:	003ccd06 	br	809c24 <__alt_mem_onchip_mem+0xff789c24>
  80a8f0:	0025883a 	mov	r18,zero
  80a8f4:	003fe906 	br	80a89c <__alt_mem_onchip_mem+0xff78a89c>
  80a8f8:	d8802217 	ldw	r2,136(sp)
  80a8fc:	80c00043 	ldbu	r3,1(r16)
  80a900:	5021883a 	mov	r16,r10
  80a904:	12400017 	ldw	r9,0(r2)
  80a908:	10800104 	addi	r2,r2,4
  80a90c:	d8802215 	stw	r2,136(sp)
  80a910:	483faf0e 	bge	r9,zero,80a7d0 <__alt_mem_onchip_mem+0xff78a7d0>
  80a914:	18c03fcc 	andi	r3,r3,255
  80a918:	18c0201c 	xori	r3,r3,128
  80a91c:	027fffc4 	movi	r9,-1
  80a920:	18ffe004 	addi	r3,r3,-128
  80a924:	003b6506 	br	8096bc <__alt_mem_onchip_mem+0xff7896bc>
  80a928:	d9c01d85 	stb	r7,118(sp)
  80a92c:	003ca006 	br	809bb0 <__alt_mem_onchip_mem+0xff789bb0>
  80a930:	d9c01d85 	stb	r7,118(sp)
  80a934:	003cad06 	br	809bec <__alt_mem_onchip_mem+0xff789bec>
  80a938:	d9c01d85 	stb	r7,118(sp)
  80a93c:	003d7d06 	br	809f34 <__alt_mem_onchip_mem+0xff789f34>
  80a940:	d9c01d85 	stb	r7,118(sp)
  80a944:	003d5f06 	br	809ec4 <__alt_mem_onchip_mem+0xff789ec4>
  80a948:	a080004c 	andi	r2,r20,1
  80a94c:	0039883a 	mov	fp,zero
  80a950:	10000526 	beq	r2,zero,80a968 <___vfiprintf_internal_r+0x1428>
  80a954:	00800c04 	movi	r2,48
  80a958:	d88019c5 	stb	r2,103(sp)
  80a95c:	dcc02717 	ldw	r19,156(sp)
  80a960:	dd4019c4 	addi	r21,sp,103
  80a964:	003bf606 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  80a968:	0027883a 	mov	r19,zero
  80a96c:	dd401a04 	addi	r21,sp,104
  80a970:	003bf306 	br	809940 <__alt_mem_onchip_mem+0xff789940>
  80a974:	d9c01d85 	stb	r7,118(sp)
  80a978:	003dc806 	br	80a09c <__alt_mem_onchip_mem+0xff78a09c>
  80a97c:	d9c01d85 	stb	r7,118(sp)
  80a980:	003d3a06 	br	809e6c <__alt_mem_onchip_mem+0xff789e6c>
  80a984:	d9c01d85 	stb	r7,118(sp)
  80a988:	003d2a06 	br	809e34 <__alt_mem_onchip_mem+0xff789e34>
  80a98c:	d9c01d85 	stb	r7,118(sp)
  80a990:	003cde06 	br	809d0c <__alt_mem_onchip_mem+0xff789d0c>
  80a994:	d9c01d85 	stb	r7,118(sp)
  80a998:	003cbc06 	br	809c8c <__alt_mem_onchip_mem+0xff789c8c>

0080a99c <__vfiprintf_internal>:
  80a99c:	00802074 	movhi	r2,129
  80a9a0:	10956904 	addi	r2,r2,21924
  80a9a4:	300f883a 	mov	r7,r6
  80a9a8:	280d883a 	mov	r6,r5
  80a9ac:	200b883a 	mov	r5,r4
  80a9b0:	11000017 	ldw	r4,0(r2)
  80a9b4:	08095401 	jmpi	809540 <___vfiprintf_internal_r>

0080a9b8 <__sbprintf>:
  80a9b8:	2880030b 	ldhu	r2,12(r5)
  80a9bc:	2ac01917 	ldw	r11,100(r5)
  80a9c0:	2a80038b 	ldhu	r10,14(r5)
  80a9c4:	2a400717 	ldw	r9,28(r5)
  80a9c8:	2a000917 	ldw	r8,36(r5)
  80a9cc:	defee204 	addi	sp,sp,-1144
  80a9d0:	00c10004 	movi	r3,1024
  80a9d4:	dc011a15 	stw	r16,1128(sp)
  80a9d8:	10bfff4c 	andi	r2,r2,65533
  80a9dc:	2821883a 	mov	r16,r5
  80a9e0:	d8cb883a 	add	r5,sp,r3
  80a9e4:	dc811c15 	stw	r18,1136(sp)
  80a9e8:	dc411b15 	stw	r17,1132(sp)
  80a9ec:	dfc11d15 	stw	ra,1140(sp)
  80a9f0:	2025883a 	mov	r18,r4
  80a9f4:	d881030d 	sth	r2,1036(sp)
  80a9f8:	dac11915 	stw	r11,1124(sp)
  80a9fc:	da81038d 	sth	r10,1038(sp)
  80aa00:	da410715 	stw	r9,1052(sp)
  80aa04:	da010915 	stw	r8,1060(sp)
  80aa08:	dec10015 	stw	sp,1024(sp)
  80aa0c:	dec10415 	stw	sp,1040(sp)
  80aa10:	d8c10215 	stw	r3,1032(sp)
  80aa14:	d8c10515 	stw	r3,1044(sp)
  80aa18:	d8010615 	stw	zero,1048(sp)
  80aa1c:	08095400 	call	809540 <___vfiprintf_internal_r>
  80aa20:	1023883a 	mov	r17,r2
  80aa24:	10000416 	blt	r2,zero,80aa38 <__sbprintf+0x80>
  80aa28:	d9410004 	addi	r5,sp,1024
  80aa2c:	9009883a 	mov	r4,r18
  80aa30:	08068d80 	call	8068d8 <_fflush_r>
  80aa34:	10000d1e 	bne	r2,zero,80aa6c <__sbprintf+0xb4>
  80aa38:	d881030b 	ldhu	r2,1036(sp)
  80aa3c:	1080100c 	andi	r2,r2,64
  80aa40:	10000326 	beq	r2,zero,80aa50 <__sbprintf+0x98>
  80aa44:	8080030b 	ldhu	r2,12(r16)
  80aa48:	10801014 	ori	r2,r2,64
  80aa4c:	8080030d 	sth	r2,12(r16)
  80aa50:	8805883a 	mov	r2,r17
  80aa54:	dfc11d17 	ldw	ra,1140(sp)
  80aa58:	dc811c17 	ldw	r18,1136(sp)
  80aa5c:	dc411b17 	ldw	r17,1132(sp)
  80aa60:	dc011a17 	ldw	r16,1128(sp)
  80aa64:	dec11e04 	addi	sp,sp,1144
  80aa68:	f800283a 	ret
  80aa6c:	047fffc4 	movi	r17,-1
  80aa70:	003ff106 	br	80aa38 <__alt_mem_onchip_mem+0xff78aa38>

0080aa74 <_write_r>:
  80aa74:	defffd04 	addi	sp,sp,-12
  80aa78:	2805883a 	mov	r2,r5
  80aa7c:	dc000015 	stw	r16,0(sp)
  80aa80:	04002074 	movhi	r16,129
  80aa84:	dc400115 	stw	r17,4(sp)
  80aa88:	300b883a 	mov	r5,r6
  80aa8c:	841d0804 	addi	r16,r16,29728
  80aa90:	2023883a 	mov	r17,r4
  80aa94:	380d883a 	mov	r6,r7
  80aa98:	1009883a 	mov	r4,r2
  80aa9c:	dfc00215 	stw	ra,8(sp)
  80aaa0:	80000015 	stw	zero,0(r16)
  80aaa4:	080fd0c0 	call	80fd0c <write>
  80aaa8:	00ffffc4 	movi	r3,-1
  80aaac:	10c00526 	beq	r2,r3,80aac4 <_write_r+0x50>
  80aab0:	dfc00217 	ldw	ra,8(sp)
  80aab4:	dc400117 	ldw	r17,4(sp)
  80aab8:	dc000017 	ldw	r16,0(sp)
  80aabc:	dec00304 	addi	sp,sp,12
  80aac0:	f800283a 	ret
  80aac4:	80c00017 	ldw	r3,0(r16)
  80aac8:	183ff926 	beq	r3,zero,80aab0 <__alt_mem_onchip_mem+0xff78aab0>
  80aacc:	88c00015 	stw	r3,0(r17)
  80aad0:	003ff706 	br	80aab0 <__alt_mem_onchip_mem+0xff78aab0>

0080aad4 <_close_r>:
  80aad4:	defffd04 	addi	sp,sp,-12
  80aad8:	dc000015 	stw	r16,0(sp)
  80aadc:	04002074 	movhi	r16,129
  80aae0:	dc400115 	stw	r17,4(sp)
  80aae4:	841d0804 	addi	r16,r16,29728
  80aae8:	2023883a 	mov	r17,r4
  80aaec:	2809883a 	mov	r4,r5
  80aaf0:	dfc00215 	stw	ra,8(sp)
  80aaf4:	80000015 	stw	zero,0(r16)
  80aaf8:	080f3580 	call	80f358 <close>
  80aafc:	00ffffc4 	movi	r3,-1
  80ab00:	10c00526 	beq	r2,r3,80ab18 <_close_r+0x44>
  80ab04:	dfc00217 	ldw	ra,8(sp)
  80ab08:	dc400117 	ldw	r17,4(sp)
  80ab0c:	dc000017 	ldw	r16,0(sp)
  80ab10:	dec00304 	addi	sp,sp,12
  80ab14:	f800283a 	ret
  80ab18:	80c00017 	ldw	r3,0(r16)
  80ab1c:	183ff926 	beq	r3,zero,80ab04 <__alt_mem_onchip_mem+0xff78ab04>
  80ab20:	88c00015 	stw	r3,0(r17)
  80ab24:	003ff706 	br	80ab04 <__alt_mem_onchip_mem+0xff78ab04>

0080ab28 <_calloc_r>:
  80ab28:	298b383a 	mul	r5,r5,r6
  80ab2c:	defffe04 	addi	sp,sp,-8
  80ab30:	dfc00115 	stw	ra,4(sp)
  80ab34:	dc000015 	stw	r16,0(sp)
  80ab38:	08075580 	call	807558 <_malloc_r>
  80ab3c:	10002926 	beq	r2,zero,80abe4 <_calloc_r+0xbc>
  80ab40:	11bfff17 	ldw	r6,-4(r2)
  80ab44:	1021883a 	mov	r16,r2
  80ab48:	00bfff04 	movi	r2,-4
  80ab4c:	308c703a 	and	r6,r6,r2
  80ab50:	00c00904 	movi	r3,36
  80ab54:	308d883a 	add	r6,r6,r2
  80ab58:	19801636 	bltu	r3,r6,80abb4 <_calloc_r+0x8c>
  80ab5c:	008004c4 	movi	r2,19
  80ab60:	11800b2e 	bgeu	r2,r6,80ab90 <_calloc_r+0x68>
  80ab64:	80000015 	stw	zero,0(r16)
  80ab68:	80000115 	stw	zero,4(r16)
  80ab6c:	008006c4 	movi	r2,27
  80ab70:	11801a2e 	bgeu	r2,r6,80abdc <_calloc_r+0xb4>
  80ab74:	80000215 	stw	zero,8(r16)
  80ab78:	80000315 	stw	zero,12(r16)
  80ab7c:	30c0151e 	bne	r6,r3,80abd4 <_calloc_r+0xac>
  80ab80:	80000415 	stw	zero,16(r16)
  80ab84:	80800604 	addi	r2,r16,24
  80ab88:	80000515 	stw	zero,20(r16)
  80ab8c:	00000106 	br	80ab94 <_calloc_r+0x6c>
  80ab90:	8005883a 	mov	r2,r16
  80ab94:	10000015 	stw	zero,0(r2)
  80ab98:	10000115 	stw	zero,4(r2)
  80ab9c:	10000215 	stw	zero,8(r2)
  80aba0:	8005883a 	mov	r2,r16
  80aba4:	dfc00117 	ldw	ra,4(sp)
  80aba8:	dc000017 	ldw	r16,0(sp)
  80abac:	dec00204 	addi	sp,sp,8
  80abb0:	f800283a 	ret
  80abb4:	000b883a 	mov	r5,zero
  80abb8:	8009883a 	mov	r4,r16
  80abbc:	0807f900 	call	807f90 <memset>
  80abc0:	8005883a 	mov	r2,r16
  80abc4:	dfc00117 	ldw	ra,4(sp)
  80abc8:	dc000017 	ldw	r16,0(sp)
  80abcc:	dec00204 	addi	sp,sp,8
  80abd0:	f800283a 	ret
  80abd4:	80800404 	addi	r2,r16,16
  80abd8:	003fee06 	br	80ab94 <__alt_mem_onchip_mem+0xff78ab94>
  80abdc:	80800204 	addi	r2,r16,8
  80abe0:	003fec06 	br	80ab94 <__alt_mem_onchip_mem+0xff78ab94>
  80abe4:	0005883a 	mov	r2,zero
  80abe8:	003fee06 	br	80aba4 <__alt_mem_onchip_mem+0xff78aba4>

0080abec <_fclose_r>:
  80abec:	28003926 	beq	r5,zero,80acd4 <_fclose_r+0xe8>
  80abf0:	defffc04 	addi	sp,sp,-16
  80abf4:	dc400115 	stw	r17,4(sp)
  80abf8:	dc000015 	stw	r16,0(sp)
  80abfc:	dfc00315 	stw	ra,12(sp)
  80ac00:	dc800215 	stw	r18,8(sp)
  80ac04:	2023883a 	mov	r17,r4
  80ac08:	2821883a 	mov	r16,r5
  80ac0c:	20000226 	beq	r4,zero,80ac18 <_fclose_r+0x2c>
  80ac10:	20800e17 	ldw	r2,56(r4)
  80ac14:	10002726 	beq	r2,zero,80acb4 <_fclose_r+0xc8>
  80ac18:	8080030f 	ldh	r2,12(r16)
  80ac1c:	1000071e 	bne	r2,zero,80ac3c <_fclose_r+0x50>
  80ac20:	0005883a 	mov	r2,zero
  80ac24:	dfc00317 	ldw	ra,12(sp)
  80ac28:	dc800217 	ldw	r18,8(sp)
  80ac2c:	dc400117 	ldw	r17,4(sp)
  80ac30:	dc000017 	ldw	r16,0(sp)
  80ac34:	dec00404 	addi	sp,sp,16
  80ac38:	f800283a 	ret
  80ac3c:	800b883a 	mov	r5,r16
  80ac40:	8809883a 	mov	r4,r17
  80ac44:	08066bc0 	call	8066bc <__sflush_r>
  80ac48:	1025883a 	mov	r18,r2
  80ac4c:	80800b17 	ldw	r2,44(r16)
  80ac50:	10000426 	beq	r2,zero,80ac64 <_fclose_r+0x78>
  80ac54:	81400717 	ldw	r5,28(r16)
  80ac58:	8809883a 	mov	r4,r17
  80ac5c:	103ee83a 	callr	r2
  80ac60:	10001616 	blt	r2,zero,80acbc <_fclose_r+0xd0>
  80ac64:	8080030b 	ldhu	r2,12(r16)
  80ac68:	1080200c 	andi	r2,r2,128
  80ac6c:	1000151e 	bne	r2,zero,80acc4 <_fclose_r+0xd8>
  80ac70:	81400c17 	ldw	r5,48(r16)
  80ac74:	28000526 	beq	r5,zero,80ac8c <_fclose_r+0xa0>
  80ac78:	80801004 	addi	r2,r16,64
  80ac7c:	28800226 	beq	r5,r2,80ac88 <_fclose_r+0x9c>
  80ac80:	8809883a 	mov	r4,r17
  80ac84:	0806e280 	call	806e28 <_free_r>
  80ac88:	80000c15 	stw	zero,48(r16)
  80ac8c:	81401117 	ldw	r5,68(r16)
  80ac90:	28000326 	beq	r5,zero,80aca0 <_fclose_r+0xb4>
  80ac94:	8809883a 	mov	r4,r17
  80ac98:	0806e280 	call	806e28 <_free_r>
  80ac9c:	80001115 	stw	zero,68(r16)
  80aca0:	0806cc40 	call	806cc4 <__sfp_lock_acquire>
  80aca4:	8000030d 	sth	zero,12(r16)
  80aca8:	0806cc80 	call	806cc8 <__sfp_lock_release>
  80acac:	9005883a 	mov	r2,r18
  80acb0:	003fdc06 	br	80ac24 <__alt_mem_onchip_mem+0xff78ac24>
  80acb4:	0806cb40 	call	806cb4 <__sinit>
  80acb8:	003fd706 	br	80ac18 <__alt_mem_onchip_mem+0xff78ac18>
  80acbc:	04bfffc4 	movi	r18,-1
  80acc0:	003fe806 	br	80ac64 <__alt_mem_onchip_mem+0xff78ac64>
  80acc4:	81400417 	ldw	r5,16(r16)
  80acc8:	8809883a 	mov	r4,r17
  80accc:	0806e280 	call	806e28 <_free_r>
  80acd0:	003fe706 	br	80ac70 <__alt_mem_onchip_mem+0xff78ac70>
  80acd4:	0005883a 	mov	r2,zero
  80acd8:	f800283a 	ret

0080acdc <fclose>:
  80acdc:	00802074 	movhi	r2,129
  80ace0:	10956904 	addi	r2,r2,21924
  80ace4:	200b883a 	mov	r5,r4
  80ace8:	11000017 	ldw	r4,0(r2)
  80acec:	080abec1 	jmpi	80abec <_fclose_r>

0080acf0 <__fputwc>:
  80acf0:	defff804 	addi	sp,sp,-32
  80acf4:	dcc00415 	stw	r19,16(sp)
  80acf8:	dc800315 	stw	r18,12(sp)
  80acfc:	dc000115 	stw	r16,4(sp)
  80ad00:	dfc00715 	stw	ra,28(sp)
  80ad04:	dd400615 	stw	r21,24(sp)
  80ad08:	dd000515 	stw	r20,20(sp)
  80ad0c:	dc400215 	stw	r17,8(sp)
  80ad10:	2027883a 	mov	r19,r4
  80ad14:	2825883a 	mov	r18,r5
  80ad18:	3021883a 	mov	r16,r6
  80ad1c:	08073480 	call	807348 <__locale_mb_cur_max>
  80ad20:	00c00044 	movi	r3,1
  80ad24:	10c03e26 	beq	r2,r3,80ae20 <__fputwc+0x130>
  80ad28:	81c01704 	addi	r7,r16,92
  80ad2c:	900d883a 	mov	r6,r18
  80ad30:	d80b883a 	mov	r5,sp
  80ad34:	9809883a 	mov	r4,r19
  80ad38:	080bd3c0 	call	80bd3c <_wcrtomb_r>
  80ad3c:	1029883a 	mov	r20,r2
  80ad40:	00bfffc4 	movi	r2,-1
  80ad44:	a0802026 	beq	r20,r2,80adc8 <__fputwc+0xd8>
  80ad48:	d9400003 	ldbu	r5,0(sp)
  80ad4c:	a0001c26 	beq	r20,zero,80adc0 <__fputwc+0xd0>
  80ad50:	0023883a 	mov	r17,zero
  80ad54:	05400284 	movi	r21,10
  80ad58:	00000906 	br	80ad80 <__fputwc+0x90>
  80ad5c:	80800017 	ldw	r2,0(r16)
  80ad60:	11400005 	stb	r5,0(r2)
  80ad64:	80c00017 	ldw	r3,0(r16)
  80ad68:	18c00044 	addi	r3,r3,1
  80ad6c:	80c00015 	stw	r3,0(r16)
  80ad70:	8c400044 	addi	r17,r17,1
  80ad74:	dc45883a 	add	r2,sp,r17
  80ad78:	8d00112e 	bgeu	r17,r20,80adc0 <__fputwc+0xd0>
  80ad7c:	11400003 	ldbu	r5,0(r2)
  80ad80:	80c00217 	ldw	r3,8(r16)
  80ad84:	18ffffc4 	addi	r3,r3,-1
  80ad88:	80c00215 	stw	r3,8(r16)
  80ad8c:	183ff30e 	bge	r3,zero,80ad5c <__alt_mem_onchip_mem+0xff78ad5c>
  80ad90:	80800617 	ldw	r2,24(r16)
  80ad94:	18801916 	blt	r3,r2,80adfc <__fputwc+0x10c>
  80ad98:	80800017 	ldw	r2,0(r16)
  80ad9c:	11400005 	stb	r5,0(r2)
  80ada0:	80800017 	ldw	r2,0(r16)
  80ada4:	10c00003 	ldbu	r3,0(r2)
  80ada8:	10800044 	addi	r2,r2,1
  80adac:	1d402326 	beq	r3,r21,80ae3c <__fputwc+0x14c>
  80adb0:	80800015 	stw	r2,0(r16)
  80adb4:	8c400044 	addi	r17,r17,1
  80adb8:	dc45883a 	add	r2,sp,r17
  80adbc:	8d3fef36 	bltu	r17,r20,80ad7c <__alt_mem_onchip_mem+0xff78ad7c>
  80adc0:	9005883a 	mov	r2,r18
  80adc4:	00000406 	br	80add8 <__fputwc+0xe8>
  80adc8:	80c0030b 	ldhu	r3,12(r16)
  80adcc:	a005883a 	mov	r2,r20
  80add0:	18c01014 	ori	r3,r3,64
  80add4:	80c0030d 	sth	r3,12(r16)
  80add8:	dfc00717 	ldw	ra,28(sp)
  80addc:	dd400617 	ldw	r21,24(sp)
  80ade0:	dd000517 	ldw	r20,20(sp)
  80ade4:	dcc00417 	ldw	r19,16(sp)
  80ade8:	dc800317 	ldw	r18,12(sp)
  80adec:	dc400217 	ldw	r17,8(sp)
  80adf0:	dc000117 	ldw	r16,4(sp)
  80adf4:	dec00804 	addi	sp,sp,32
  80adf8:	f800283a 	ret
  80adfc:	800d883a 	mov	r6,r16
  80ae00:	29403fcc 	andi	r5,r5,255
  80ae04:	9809883a 	mov	r4,r19
  80ae08:	080bbe40 	call	80bbe4 <__swbuf_r>
  80ae0c:	10bfffe0 	cmpeqi	r2,r2,-1
  80ae10:	10803fcc 	andi	r2,r2,255
  80ae14:	103fd626 	beq	r2,zero,80ad70 <__alt_mem_onchip_mem+0xff78ad70>
  80ae18:	00bfffc4 	movi	r2,-1
  80ae1c:	003fee06 	br	80add8 <__alt_mem_onchip_mem+0xff78add8>
  80ae20:	90ffffc4 	addi	r3,r18,-1
  80ae24:	01003f84 	movi	r4,254
  80ae28:	20ffbf36 	bltu	r4,r3,80ad28 <__alt_mem_onchip_mem+0xff78ad28>
  80ae2c:	900b883a 	mov	r5,r18
  80ae30:	dc800005 	stb	r18,0(sp)
  80ae34:	1029883a 	mov	r20,r2
  80ae38:	003fc506 	br	80ad50 <__alt_mem_onchip_mem+0xff78ad50>
  80ae3c:	800d883a 	mov	r6,r16
  80ae40:	a80b883a 	mov	r5,r21
  80ae44:	9809883a 	mov	r4,r19
  80ae48:	080bbe40 	call	80bbe4 <__swbuf_r>
  80ae4c:	10bfffe0 	cmpeqi	r2,r2,-1
  80ae50:	003fef06 	br	80ae10 <__alt_mem_onchip_mem+0xff78ae10>

0080ae54 <_fputwc_r>:
  80ae54:	3080030b 	ldhu	r2,12(r6)
  80ae58:	10c8000c 	andi	r3,r2,8192
  80ae5c:	1800051e 	bne	r3,zero,80ae74 <_fputwc_r+0x20>
  80ae60:	30c01917 	ldw	r3,100(r6)
  80ae64:	10880014 	ori	r2,r2,8192
  80ae68:	3080030d 	sth	r2,12(r6)
  80ae6c:	18880014 	ori	r2,r3,8192
  80ae70:	30801915 	stw	r2,100(r6)
  80ae74:	080acf01 	jmpi	80acf0 <__fputwc>

0080ae78 <fputwc>:
  80ae78:	00802074 	movhi	r2,129
  80ae7c:	defffc04 	addi	sp,sp,-16
  80ae80:	10956904 	addi	r2,r2,21924
  80ae84:	dc000115 	stw	r16,4(sp)
  80ae88:	14000017 	ldw	r16,0(r2)
  80ae8c:	dc400215 	stw	r17,8(sp)
  80ae90:	dfc00315 	stw	ra,12(sp)
  80ae94:	2023883a 	mov	r17,r4
  80ae98:	80000226 	beq	r16,zero,80aea4 <fputwc+0x2c>
  80ae9c:	80800e17 	ldw	r2,56(r16)
  80aea0:	10001026 	beq	r2,zero,80aee4 <fputwc+0x6c>
  80aea4:	2880030b 	ldhu	r2,12(r5)
  80aea8:	10c8000c 	andi	r3,r2,8192
  80aeac:	1800051e 	bne	r3,zero,80aec4 <fputwc+0x4c>
  80aeb0:	28c01917 	ldw	r3,100(r5)
  80aeb4:	10880014 	ori	r2,r2,8192
  80aeb8:	2880030d 	sth	r2,12(r5)
  80aebc:	18880014 	ori	r2,r3,8192
  80aec0:	28801915 	stw	r2,100(r5)
  80aec4:	280d883a 	mov	r6,r5
  80aec8:	8009883a 	mov	r4,r16
  80aecc:	880b883a 	mov	r5,r17
  80aed0:	dfc00317 	ldw	ra,12(sp)
  80aed4:	dc400217 	ldw	r17,8(sp)
  80aed8:	dc000117 	ldw	r16,4(sp)
  80aedc:	dec00404 	addi	sp,sp,16
  80aee0:	080acf01 	jmpi	80acf0 <__fputwc>
  80aee4:	8009883a 	mov	r4,r16
  80aee8:	d9400015 	stw	r5,0(sp)
  80aeec:	0806cb40 	call	806cb4 <__sinit>
  80aef0:	d9400017 	ldw	r5,0(sp)
  80aef4:	003feb06 	br	80aea4 <__alt_mem_onchip_mem+0xff78aea4>

0080aef8 <_fstat_r>:
  80aef8:	defffd04 	addi	sp,sp,-12
  80aefc:	2805883a 	mov	r2,r5
  80af00:	dc000015 	stw	r16,0(sp)
  80af04:	04002074 	movhi	r16,129
  80af08:	dc400115 	stw	r17,4(sp)
  80af0c:	841d0804 	addi	r16,r16,29728
  80af10:	2023883a 	mov	r17,r4
  80af14:	300b883a 	mov	r5,r6
  80af18:	1009883a 	mov	r4,r2
  80af1c:	dfc00215 	stw	ra,8(sp)
  80af20:	80000015 	stw	zero,0(r16)
  80af24:	080f4900 	call	80f490 <fstat>
  80af28:	00ffffc4 	movi	r3,-1
  80af2c:	10c00526 	beq	r2,r3,80af44 <_fstat_r+0x4c>
  80af30:	dfc00217 	ldw	ra,8(sp)
  80af34:	dc400117 	ldw	r17,4(sp)
  80af38:	dc000017 	ldw	r16,0(sp)
  80af3c:	dec00304 	addi	sp,sp,12
  80af40:	f800283a 	ret
  80af44:	80c00017 	ldw	r3,0(r16)
  80af48:	183ff926 	beq	r3,zero,80af30 <__alt_mem_onchip_mem+0xff78af30>
  80af4c:	88c00015 	stw	r3,0(r17)
  80af50:	003ff706 	br	80af30 <__alt_mem_onchip_mem+0xff78af30>

0080af54 <__sfvwrite_r>:
  80af54:	30800217 	ldw	r2,8(r6)
  80af58:	10006726 	beq	r2,zero,80b0f8 <__sfvwrite_r+0x1a4>
  80af5c:	28c0030b 	ldhu	r3,12(r5)
  80af60:	defff404 	addi	sp,sp,-48
  80af64:	dd400715 	stw	r21,28(sp)
  80af68:	dd000615 	stw	r20,24(sp)
  80af6c:	dc000215 	stw	r16,8(sp)
  80af70:	dfc00b15 	stw	ra,44(sp)
  80af74:	df000a15 	stw	fp,40(sp)
  80af78:	ddc00915 	stw	r23,36(sp)
  80af7c:	dd800815 	stw	r22,32(sp)
  80af80:	dcc00515 	stw	r19,20(sp)
  80af84:	dc800415 	stw	r18,16(sp)
  80af88:	dc400315 	stw	r17,12(sp)
  80af8c:	1880020c 	andi	r2,r3,8
  80af90:	2821883a 	mov	r16,r5
  80af94:	202b883a 	mov	r21,r4
  80af98:	3029883a 	mov	r20,r6
  80af9c:	10002726 	beq	r2,zero,80b03c <__sfvwrite_r+0xe8>
  80afa0:	28800417 	ldw	r2,16(r5)
  80afa4:	10002526 	beq	r2,zero,80b03c <__sfvwrite_r+0xe8>
  80afa8:	1880008c 	andi	r2,r3,2
  80afac:	a4400017 	ldw	r17,0(r20)
  80afb0:	10002a26 	beq	r2,zero,80b05c <__sfvwrite_r+0x108>
  80afb4:	05a00034 	movhi	r22,32768
  80afb8:	0027883a 	mov	r19,zero
  80afbc:	0025883a 	mov	r18,zero
  80afc0:	b5bf0004 	addi	r22,r22,-1024
  80afc4:	980d883a 	mov	r6,r19
  80afc8:	a809883a 	mov	r4,r21
  80afcc:	90004626 	beq	r18,zero,80b0e8 <__sfvwrite_r+0x194>
  80afd0:	900f883a 	mov	r7,r18
  80afd4:	b480022e 	bgeu	r22,r18,80afe0 <__sfvwrite_r+0x8c>
  80afd8:	01e00034 	movhi	r7,32768
  80afdc:	39ff0004 	addi	r7,r7,-1024
  80afe0:	80800917 	ldw	r2,36(r16)
  80afe4:	81400717 	ldw	r5,28(r16)
  80afe8:	103ee83a 	callr	r2
  80afec:	0080570e 	bge	zero,r2,80b14c <__sfvwrite_r+0x1f8>
  80aff0:	a0c00217 	ldw	r3,8(r20)
  80aff4:	98a7883a 	add	r19,r19,r2
  80aff8:	90a5c83a 	sub	r18,r18,r2
  80affc:	1885c83a 	sub	r2,r3,r2
  80b000:	a0800215 	stw	r2,8(r20)
  80b004:	103fef1e 	bne	r2,zero,80afc4 <__alt_mem_onchip_mem+0xff78afc4>
  80b008:	0005883a 	mov	r2,zero
  80b00c:	dfc00b17 	ldw	ra,44(sp)
  80b010:	df000a17 	ldw	fp,40(sp)
  80b014:	ddc00917 	ldw	r23,36(sp)
  80b018:	dd800817 	ldw	r22,32(sp)
  80b01c:	dd400717 	ldw	r21,28(sp)
  80b020:	dd000617 	ldw	r20,24(sp)
  80b024:	dcc00517 	ldw	r19,20(sp)
  80b028:	dc800417 	ldw	r18,16(sp)
  80b02c:	dc400317 	ldw	r17,12(sp)
  80b030:	dc000217 	ldw	r16,8(sp)
  80b034:	dec00c04 	addi	sp,sp,48
  80b038:	f800283a 	ret
  80b03c:	800b883a 	mov	r5,r16
  80b040:	a809883a 	mov	r4,r21
  80b044:	0804ce00 	call	804ce0 <__swsetup_r>
  80b048:	1000eb1e 	bne	r2,zero,80b3f8 <__sfvwrite_r+0x4a4>
  80b04c:	80c0030b 	ldhu	r3,12(r16)
  80b050:	a4400017 	ldw	r17,0(r20)
  80b054:	1880008c 	andi	r2,r3,2
  80b058:	103fd61e 	bne	r2,zero,80afb4 <__alt_mem_onchip_mem+0xff78afb4>
  80b05c:	1880004c 	andi	r2,r3,1
  80b060:	10003f1e 	bne	r2,zero,80b160 <__sfvwrite_r+0x20c>
  80b064:	0039883a 	mov	fp,zero
  80b068:	0025883a 	mov	r18,zero
  80b06c:	90001a26 	beq	r18,zero,80b0d8 <__sfvwrite_r+0x184>
  80b070:	1880800c 	andi	r2,r3,512
  80b074:	84c00217 	ldw	r19,8(r16)
  80b078:	10002126 	beq	r2,zero,80b100 <__sfvwrite_r+0x1ac>
  80b07c:	982f883a 	mov	r23,r19
  80b080:	94c09336 	bltu	r18,r19,80b2d0 <__sfvwrite_r+0x37c>
  80b084:	1881200c 	andi	r2,r3,1152
  80b088:	10009e1e 	bne	r2,zero,80b304 <__sfvwrite_r+0x3b0>
  80b08c:	81000017 	ldw	r4,0(r16)
  80b090:	b80d883a 	mov	r6,r23
  80b094:	e00b883a 	mov	r5,fp
  80b098:	080b4c40 	call	80b4c4 <memmove>
  80b09c:	80c00217 	ldw	r3,8(r16)
  80b0a0:	81000017 	ldw	r4,0(r16)
  80b0a4:	9005883a 	mov	r2,r18
  80b0a8:	1ce7c83a 	sub	r19,r3,r19
  80b0ac:	25cf883a 	add	r7,r4,r23
  80b0b0:	84c00215 	stw	r19,8(r16)
  80b0b4:	81c00015 	stw	r7,0(r16)
  80b0b8:	a0c00217 	ldw	r3,8(r20)
  80b0bc:	e0b9883a 	add	fp,fp,r2
  80b0c0:	90a5c83a 	sub	r18,r18,r2
  80b0c4:	18a7c83a 	sub	r19,r3,r2
  80b0c8:	a4c00215 	stw	r19,8(r20)
  80b0cc:	983fce26 	beq	r19,zero,80b008 <__alt_mem_onchip_mem+0xff78b008>
  80b0d0:	80c0030b 	ldhu	r3,12(r16)
  80b0d4:	903fe61e 	bne	r18,zero,80b070 <__alt_mem_onchip_mem+0xff78b070>
  80b0d8:	8f000017 	ldw	fp,0(r17)
  80b0dc:	8c800117 	ldw	r18,4(r17)
  80b0e0:	8c400204 	addi	r17,r17,8
  80b0e4:	003fe106 	br	80b06c <__alt_mem_onchip_mem+0xff78b06c>
  80b0e8:	8cc00017 	ldw	r19,0(r17)
  80b0ec:	8c800117 	ldw	r18,4(r17)
  80b0f0:	8c400204 	addi	r17,r17,8
  80b0f4:	003fb306 	br	80afc4 <__alt_mem_onchip_mem+0xff78afc4>
  80b0f8:	0005883a 	mov	r2,zero
  80b0fc:	f800283a 	ret
  80b100:	81000017 	ldw	r4,0(r16)
  80b104:	80800417 	ldw	r2,16(r16)
  80b108:	11005736 	bltu	r2,r4,80b268 <__sfvwrite_r+0x314>
  80b10c:	85c00517 	ldw	r23,20(r16)
  80b110:	95c05536 	bltu	r18,r23,80b268 <__sfvwrite_r+0x314>
  80b114:	00a00034 	movhi	r2,32768
  80b118:	10bfffc4 	addi	r2,r2,-1
  80b11c:	9009883a 	mov	r4,r18
  80b120:	1480012e 	bgeu	r2,r18,80b128 <__sfvwrite_r+0x1d4>
  80b124:	1009883a 	mov	r4,r2
  80b128:	b80b883a 	mov	r5,r23
  80b12c:	080c9d40 	call	80c9d4 <__divsi3>
  80b130:	15cf383a 	mul	r7,r2,r23
  80b134:	81400717 	ldw	r5,28(r16)
  80b138:	80800917 	ldw	r2,36(r16)
  80b13c:	e00d883a 	mov	r6,fp
  80b140:	a809883a 	mov	r4,r21
  80b144:	103ee83a 	callr	r2
  80b148:	00bfdb16 	blt	zero,r2,80b0b8 <__alt_mem_onchip_mem+0xff78b0b8>
  80b14c:	8080030b 	ldhu	r2,12(r16)
  80b150:	10801014 	ori	r2,r2,64
  80b154:	8080030d 	sth	r2,12(r16)
  80b158:	00bfffc4 	movi	r2,-1
  80b15c:	003fab06 	br	80b00c <__alt_mem_onchip_mem+0xff78b00c>
  80b160:	0027883a 	mov	r19,zero
  80b164:	0011883a 	mov	r8,zero
  80b168:	0039883a 	mov	fp,zero
  80b16c:	0025883a 	mov	r18,zero
  80b170:	90001f26 	beq	r18,zero,80b1f0 <__sfvwrite_r+0x29c>
  80b174:	40005a26 	beq	r8,zero,80b2e0 <__sfvwrite_r+0x38c>
  80b178:	982d883a 	mov	r22,r19
  80b17c:	94c0012e 	bgeu	r18,r19,80b184 <__sfvwrite_r+0x230>
  80b180:	902d883a 	mov	r22,r18
  80b184:	81000017 	ldw	r4,0(r16)
  80b188:	80800417 	ldw	r2,16(r16)
  80b18c:	b02f883a 	mov	r23,r22
  80b190:	81c00517 	ldw	r7,20(r16)
  80b194:	1100032e 	bgeu	r2,r4,80b1a4 <__sfvwrite_r+0x250>
  80b198:	80c00217 	ldw	r3,8(r16)
  80b19c:	38c7883a 	add	r3,r7,r3
  80b1a0:	1d801816 	blt	r3,r22,80b204 <__sfvwrite_r+0x2b0>
  80b1a4:	b1c03e16 	blt	r22,r7,80b2a0 <__sfvwrite_r+0x34c>
  80b1a8:	80800917 	ldw	r2,36(r16)
  80b1ac:	81400717 	ldw	r5,28(r16)
  80b1b0:	e00d883a 	mov	r6,fp
  80b1b4:	da000115 	stw	r8,4(sp)
  80b1b8:	a809883a 	mov	r4,r21
  80b1bc:	103ee83a 	callr	r2
  80b1c0:	102f883a 	mov	r23,r2
  80b1c4:	da000117 	ldw	r8,4(sp)
  80b1c8:	00bfe00e 	bge	zero,r2,80b14c <__alt_mem_onchip_mem+0xff78b14c>
  80b1cc:	9de7c83a 	sub	r19,r19,r23
  80b1d0:	98001f26 	beq	r19,zero,80b250 <__sfvwrite_r+0x2fc>
  80b1d4:	a0800217 	ldw	r2,8(r20)
  80b1d8:	e5f9883a 	add	fp,fp,r23
  80b1dc:	95e5c83a 	sub	r18,r18,r23
  80b1e0:	15efc83a 	sub	r23,r2,r23
  80b1e4:	a5c00215 	stw	r23,8(r20)
  80b1e8:	b83f8726 	beq	r23,zero,80b008 <__alt_mem_onchip_mem+0xff78b008>
  80b1ec:	903fe11e 	bne	r18,zero,80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b1f0:	8f000017 	ldw	fp,0(r17)
  80b1f4:	8c800117 	ldw	r18,4(r17)
  80b1f8:	0011883a 	mov	r8,zero
  80b1fc:	8c400204 	addi	r17,r17,8
  80b200:	003fdb06 	br	80b170 <__alt_mem_onchip_mem+0xff78b170>
  80b204:	180d883a 	mov	r6,r3
  80b208:	e00b883a 	mov	r5,fp
  80b20c:	da000115 	stw	r8,4(sp)
  80b210:	d8c00015 	stw	r3,0(sp)
  80b214:	080b4c40 	call	80b4c4 <memmove>
  80b218:	d8c00017 	ldw	r3,0(sp)
  80b21c:	80800017 	ldw	r2,0(r16)
  80b220:	800b883a 	mov	r5,r16
  80b224:	a809883a 	mov	r4,r21
  80b228:	10c5883a 	add	r2,r2,r3
  80b22c:	80800015 	stw	r2,0(r16)
  80b230:	d8c00015 	stw	r3,0(sp)
  80b234:	08068d80 	call	8068d8 <_fflush_r>
  80b238:	d8c00017 	ldw	r3,0(sp)
  80b23c:	da000117 	ldw	r8,4(sp)
  80b240:	103fc21e 	bne	r2,zero,80b14c <__alt_mem_onchip_mem+0xff78b14c>
  80b244:	182f883a 	mov	r23,r3
  80b248:	9de7c83a 	sub	r19,r19,r23
  80b24c:	983fe11e 	bne	r19,zero,80b1d4 <__alt_mem_onchip_mem+0xff78b1d4>
  80b250:	800b883a 	mov	r5,r16
  80b254:	a809883a 	mov	r4,r21
  80b258:	08068d80 	call	8068d8 <_fflush_r>
  80b25c:	103fbb1e 	bne	r2,zero,80b14c <__alt_mem_onchip_mem+0xff78b14c>
  80b260:	0011883a 	mov	r8,zero
  80b264:	003fdb06 	br	80b1d4 <__alt_mem_onchip_mem+0xff78b1d4>
  80b268:	94c0012e 	bgeu	r18,r19,80b270 <__sfvwrite_r+0x31c>
  80b26c:	9027883a 	mov	r19,r18
  80b270:	980d883a 	mov	r6,r19
  80b274:	e00b883a 	mov	r5,fp
  80b278:	080b4c40 	call	80b4c4 <memmove>
  80b27c:	80800217 	ldw	r2,8(r16)
  80b280:	80c00017 	ldw	r3,0(r16)
  80b284:	14c5c83a 	sub	r2,r2,r19
  80b288:	1cc7883a 	add	r3,r3,r19
  80b28c:	80800215 	stw	r2,8(r16)
  80b290:	80c00015 	stw	r3,0(r16)
  80b294:	10004326 	beq	r2,zero,80b3a4 <__sfvwrite_r+0x450>
  80b298:	9805883a 	mov	r2,r19
  80b29c:	003f8606 	br	80b0b8 <__alt_mem_onchip_mem+0xff78b0b8>
  80b2a0:	b00d883a 	mov	r6,r22
  80b2a4:	e00b883a 	mov	r5,fp
  80b2a8:	da000115 	stw	r8,4(sp)
  80b2ac:	080b4c40 	call	80b4c4 <memmove>
  80b2b0:	80800217 	ldw	r2,8(r16)
  80b2b4:	80c00017 	ldw	r3,0(r16)
  80b2b8:	da000117 	ldw	r8,4(sp)
  80b2bc:	1585c83a 	sub	r2,r2,r22
  80b2c0:	1dad883a 	add	r22,r3,r22
  80b2c4:	80800215 	stw	r2,8(r16)
  80b2c8:	85800015 	stw	r22,0(r16)
  80b2cc:	003fbf06 	br	80b1cc <__alt_mem_onchip_mem+0xff78b1cc>
  80b2d0:	81000017 	ldw	r4,0(r16)
  80b2d4:	9027883a 	mov	r19,r18
  80b2d8:	902f883a 	mov	r23,r18
  80b2dc:	003f6c06 	br	80b090 <__alt_mem_onchip_mem+0xff78b090>
  80b2e0:	900d883a 	mov	r6,r18
  80b2e4:	01400284 	movi	r5,10
  80b2e8:	e009883a 	mov	r4,fp
  80b2ec:	0807d640 	call	807d64 <memchr>
  80b2f0:	10003e26 	beq	r2,zero,80b3ec <__sfvwrite_r+0x498>
  80b2f4:	10800044 	addi	r2,r2,1
  80b2f8:	1727c83a 	sub	r19,r2,fp
  80b2fc:	02000044 	movi	r8,1
  80b300:	003f9d06 	br	80b178 <__alt_mem_onchip_mem+0xff78b178>
  80b304:	80800517 	ldw	r2,20(r16)
  80b308:	81400417 	ldw	r5,16(r16)
  80b30c:	81c00017 	ldw	r7,0(r16)
  80b310:	10a7883a 	add	r19,r2,r2
  80b314:	9885883a 	add	r2,r19,r2
  80b318:	1026d7fa 	srli	r19,r2,31
  80b31c:	396dc83a 	sub	r22,r7,r5
  80b320:	b1000044 	addi	r4,r22,1
  80b324:	9885883a 	add	r2,r19,r2
  80b328:	1027d07a 	srai	r19,r2,1
  80b32c:	2485883a 	add	r2,r4,r18
  80b330:	980d883a 	mov	r6,r19
  80b334:	9880022e 	bgeu	r19,r2,80b340 <__sfvwrite_r+0x3ec>
  80b338:	1027883a 	mov	r19,r2
  80b33c:	100d883a 	mov	r6,r2
  80b340:	18c1000c 	andi	r3,r3,1024
  80b344:	18001c26 	beq	r3,zero,80b3b8 <__sfvwrite_r+0x464>
  80b348:	300b883a 	mov	r5,r6
  80b34c:	a809883a 	mov	r4,r21
  80b350:	08075580 	call	807558 <_malloc_r>
  80b354:	102f883a 	mov	r23,r2
  80b358:	10002926 	beq	r2,zero,80b400 <__sfvwrite_r+0x4ac>
  80b35c:	81400417 	ldw	r5,16(r16)
  80b360:	b00d883a 	mov	r6,r22
  80b364:	1009883a 	mov	r4,r2
  80b368:	0807e480 	call	807e48 <memcpy>
  80b36c:	8080030b 	ldhu	r2,12(r16)
  80b370:	00fedfc4 	movi	r3,-1153
  80b374:	10c4703a 	and	r2,r2,r3
  80b378:	10802014 	ori	r2,r2,128
  80b37c:	8080030d 	sth	r2,12(r16)
  80b380:	bd89883a 	add	r4,r23,r22
  80b384:	9d8fc83a 	sub	r7,r19,r22
  80b388:	85c00415 	stw	r23,16(r16)
  80b38c:	84c00515 	stw	r19,20(r16)
  80b390:	81000015 	stw	r4,0(r16)
  80b394:	9027883a 	mov	r19,r18
  80b398:	81c00215 	stw	r7,8(r16)
  80b39c:	902f883a 	mov	r23,r18
  80b3a0:	003f3b06 	br	80b090 <__alt_mem_onchip_mem+0xff78b090>
  80b3a4:	800b883a 	mov	r5,r16
  80b3a8:	a809883a 	mov	r4,r21
  80b3ac:	08068d80 	call	8068d8 <_fflush_r>
  80b3b0:	103fb926 	beq	r2,zero,80b298 <__alt_mem_onchip_mem+0xff78b298>
  80b3b4:	003f6506 	br	80b14c <__alt_mem_onchip_mem+0xff78b14c>
  80b3b8:	a809883a 	mov	r4,r21
  80b3bc:	080b6800 	call	80b680 <_realloc_r>
  80b3c0:	102f883a 	mov	r23,r2
  80b3c4:	103fee1e 	bne	r2,zero,80b380 <__alt_mem_onchip_mem+0xff78b380>
  80b3c8:	81400417 	ldw	r5,16(r16)
  80b3cc:	a809883a 	mov	r4,r21
  80b3d0:	0806e280 	call	806e28 <_free_r>
  80b3d4:	8080030b 	ldhu	r2,12(r16)
  80b3d8:	00ffdfc4 	movi	r3,-129
  80b3dc:	1884703a 	and	r2,r3,r2
  80b3e0:	00c00304 	movi	r3,12
  80b3e4:	a8c00015 	stw	r3,0(r21)
  80b3e8:	003f5906 	br	80b150 <__alt_mem_onchip_mem+0xff78b150>
  80b3ec:	94c00044 	addi	r19,r18,1
  80b3f0:	02000044 	movi	r8,1
  80b3f4:	003f6006 	br	80b178 <__alt_mem_onchip_mem+0xff78b178>
  80b3f8:	00bfffc4 	movi	r2,-1
  80b3fc:	003f0306 	br	80b00c <__alt_mem_onchip_mem+0xff78b00c>
  80b400:	00800304 	movi	r2,12
  80b404:	a8800015 	stw	r2,0(r21)
  80b408:	8080030b 	ldhu	r2,12(r16)
  80b40c:	003f5006 	br	80b150 <__alt_mem_onchip_mem+0xff78b150>

0080b410 <_isatty_r>:
  80b410:	defffd04 	addi	sp,sp,-12
  80b414:	dc000015 	stw	r16,0(sp)
  80b418:	04002074 	movhi	r16,129
  80b41c:	dc400115 	stw	r17,4(sp)
  80b420:	841d0804 	addi	r16,r16,29728
  80b424:	2023883a 	mov	r17,r4
  80b428:	2809883a 	mov	r4,r5
  80b42c:	dfc00215 	stw	ra,8(sp)
  80b430:	80000015 	stw	zero,0(r16)
  80b434:	080f57c0 	call	80f57c <isatty>
  80b438:	00ffffc4 	movi	r3,-1
  80b43c:	10c00526 	beq	r2,r3,80b454 <_isatty_r+0x44>
  80b440:	dfc00217 	ldw	ra,8(sp)
  80b444:	dc400117 	ldw	r17,4(sp)
  80b448:	dc000017 	ldw	r16,0(sp)
  80b44c:	dec00304 	addi	sp,sp,12
  80b450:	f800283a 	ret
  80b454:	80c00017 	ldw	r3,0(r16)
  80b458:	183ff926 	beq	r3,zero,80b440 <__alt_mem_onchip_mem+0xff78b440>
  80b45c:	88c00015 	stw	r3,0(r17)
  80b460:	003ff706 	br	80b440 <__alt_mem_onchip_mem+0xff78b440>

0080b464 <_lseek_r>:
  80b464:	defffd04 	addi	sp,sp,-12
  80b468:	2805883a 	mov	r2,r5
  80b46c:	dc000015 	stw	r16,0(sp)
  80b470:	04002074 	movhi	r16,129
  80b474:	dc400115 	stw	r17,4(sp)
  80b478:	300b883a 	mov	r5,r6
  80b47c:	841d0804 	addi	r16,r16,29728
  80b480:	2023883a 	mov	r17,r4
  80b484:	380d883a 	mov	r6,r7
  80b488:	1009883a 	mov	r4,r2
  80b48c:	dfc00215 	stw	ra,8(sp)
  80b490:	80000015 	stw	zero,0(r16)
  80b494:	080f7480 	call	80f748 <lseek>
  80b498:	00ffffc4 	movi	r3,-1
  80b49c:	10c00526 	beq	r2,r3,80b4b4 <_lseek_r+0x50>
  80b4a0:	dfc00217 	ldw	ra,8(sp)
  80b4a4:	dc400117 	ldw	r17,4(sp)
  80b4a8:	dc000017 	ldw	r16,0(sp)
  80b4ac:	dec00304 	addi	sp,sp,12
  80b4b0:	f800283a 	ret
  80b4b4:	80c00017 	ldw	r3,0(r16)
  80b4b8:	183ff926 	beq	r3,zero,80b4a0 <__alt_mem_onchip_mem+0xff78b4a0>
  80b4bc:	88c00015 	stw	r3,0(r17)
  80b4c0:	003ff706 	br	80b4a0 <__alt_mem_onchip_mem+0xff78b4a0>

0080b4c4 <memmove>:
  80b4c4:	2005883a 	mov	r2,r4
  80b4c8:	29000b2e 	bgeu	r5,r4,80b4f8 <memmove+0x34>
  80b4cc:	298f883a 	add	r7,r5,r6
  80b4d0:	21c0092e 	bgeu	r4,r7,80b4f8 <memmove+0x34>
  80b4d4:	2187883a 	add	r3,r4,r6
  80b4d8:	198bc83a 	sub	r5,r3,r6
  80b4dc:	30004826 	beq	r6,zero,80b600 <memmove+0x13c>
  80b4e0:	39ffffc4 	addi	r7,r7,-1
  80b4e4:	39000003 	ldbu	r4,0(r7)
  80b4e8:	18ffffc4 	addi	r3,r3,-1
  80b4ec:	19000005 	stb	r4,0(r3)
  80b4f0:	28fffb1e 	bne	r5,r3,80b4e0 <__alt_mem_onchip_mem+0xff78b4e0>
  80b4f4:	f800283a 	ret
  80b4f8:	00c003c4 	movi	r3,15
  80b4fc:	1980412e 	bgeu	r3,r6,80b604 <memmove+0x140>
  80b500:	2886b03a 	or	r3,r5,r2
  80b504:	18c000cc 	andi	r3,r3,3
  80b508:	1800401e 	bne	r3,zero,80b60c <memmove+0x148>
  80b50c:	33fffc04 	addi	r15,r6,-16
  80b510:	781ed13a 	srli	r15,r15,4
  80b514:	28c00104 	addi	r3,r5,4
  80b518:	13400104 	addi	r13,r2,4
  80b51c:	781c913a 	slli	r14,r15,4
  80b520:	2b000204 	addi	r12,r5,8
  80b524:	12c00204 	addi	r11,r2,8
  80b528:	73800504 	addi	r14,r14,20
  80b52c:	2a800304 	addi	r10,r5,12
  80b530:	12400304 	addi	r9,r2,12
  80b534:	2b9d883a 	add	r14,r5,r14
  80b538:	2811883a 	mov	r8,r5
  80b53c:	100f883a 	mov	r7,r2
  80b540:	41000017 	ldw	r4,0(r8)
  80b544:	39c00404 	addi	r7,r7,16
  80b548:	18c00404 	addi	r3,r3,16
  80b54c:	393ffc15 	stw	r4,-16(r7)
  80b550:	193ffc17 	ldw	r4,-16(r3)
  80b554:	6b400404 	addi	r13,r13,16
  80b558:	5ac00404 	addi	r11,r11,16
  80b55c:	693ffc15 	stw	r4,-16(r13)
  80b560:	61000017 	ldw	r4,0(r12)
  80b564:	4a400404 	addi	r9,r9,16
  80b568:	42000404 	addi	r8,r8,16
  80b56c:	593ffc15 	stw	r4,-16(r11)
  80b570:	51000017 	ldw	r4,0(r10)
  80b574:	63000404 	addi	r12,r12,16
  80b578:	52800404 	addi	r10,r10,16
  80b57c:	493ffc15 	stw	r4,-16(r9)
  80b580:	1bbfef1e 	bne	r3,r14,80b540 <__alt_mem_onchip_mem+0xff78b540>
  80b584:	79000044 	addi	r4,r15,1
  80b588:	2008913a 	slli	r4,r4,4
  80b58c:	328003cc 	andi	r10,r6,15
  80b590:	02c000c4 	movi	r11,3
  80b594:	1107883a 	add	r3,r2,r4
  80b598:	290b883a 	add	r5,r5,r4
  80b59c:	5a801e2e 	bgeu	r11,r10,80b618 <memmove+0x154>
  80b5a0:	1813883a 	mov	r9,r3
  80b5a4:	2811883a 	mov	r8,r5
  80b5a8:	500f883a 	mov	r7,r10
  80b5ac:	41000017 	ldw	r4,0(r8)
  80b5b0:	4a400104 	addi	r9,r9,4
  80b5b4:	39ffff04 	addi	r7,r7,-4
  80b5b8:	493fff15 	stw	r4,-4(r9)
  80b5bc:	42000104 	addi	r8,r8,4
  80b5c0:	59fffa36 	bltu	r11,r7,80b5ac <__alt_mem_onchip_mem+0xff78b5ac>
  80b5c4:	513fff04 	addi	r4,r10,-4
  80b5c8:	2008d0ba 	srli	r4,r4,2
  80b5cc:	318000cc 	andi	r6,r6,3
  80b5d0:	21000044 	addi	r4,r4,1
  80b5d4:	2109883a 	add	r4,r4,r4
  80b5d8:	2109883a 	add	r4,r4,r4
  80b5dc:	1907883a 	add	r3,r3,r4
  80b5e0:	290b883a 	add	r5,r5,r4
  80b5e4:	30000b26 	beq	r6,zero,80b614 <memmove+0x150>
  80b5e8:	198d883a 	add	r6,r3,r6
  80b5ec:	29c00003 	ldbu	r7,0(r5)
  80b5f0:	18c00044 	addi	r3,r3,1
  80b5f4:	29400044 	addi	r5,r5,1
  80b5f8:	19ffffc5 	stb	r7,-1(r3)
  80b5fc:	19bffb1e 	bne	r3,r6,80b5ec <__alt_mem_onchip_mem+0xff78b5ec>
  80b600:	f800283a 	ret
  80b604:	1007883a 	mov	r3,r2
  80b608:	003ff606 	br	80b5e4 <__alt_mem_onchip_mem+0xff78b5e4>
  80b60c:	1007883a 	mov	r3,r2
  80b610:	003ff506 	br	80b5e8 <__alt_mem_onchip_mem+0xff78b5e8>
  80b614:	f800283a 	ret
  80b618:	500d883a 	mov	r6,r10
  80b61c:	003ff106 	br	80b5e4 <__alt_mem_onchip_mem+0xff78b5e4>

0080b620 <_read_r>:
  80b620:	defffd04 	addi	sp,sp,-12
  80b624:	2805883a 	mov	r2,r5
  80b628:	dc000015 	stw	r16,0(sp)
  80b62c:	04002074 	movhi	r16,129
  80b630:	dc400115 	stw	r17,4(sp)
  80b634:	300b883a 	mov	r5,r6
  80b638:	841d0804 	addi	r16,r16,29728
  80b63c:	2023883a 	mov	r17,r4
  80b640:	380d883a 	mov	r6,r7
  80b644:	1009883a 	mov	r4,r2
  80b648:	dfc00215 	stw	ra,8(sp)
  80b64c:	80000015 	stw	zero,0(r16)
  80b650:	080f91c0 	call	80f91c <read>
  80b654:	00ffffc4 	movi	r3,-1
  80b658:	10c00526 	beq	r2,r3,80b670 <_read_r+0x50>
  80b65c:	dfc00217 	ldw	ra,8(sp)
  80b660:	dc400117 	ldw	r17,4(sp)
  80b664:	dc000017 	ldw	r16,0(sp)
  80b668:	dec00304 	addi	sp,sp,12
  80b66c:	f800283a 	ret
  80b670:	80c00017 	ldw	r3,0(r16)
  80b674:	183ff926 	beq	r3,zero,80b65c <__alt_mem_onchip_mem+0xff78b65c>
  80b678:	88c00015 	stw	r3,0(r17)
  80b67c:	003ff706 	br	80b65c <__alt_mem_onchip_mem+0xff78b65c>

0080b680 <_realloc_r>:
  80b680:	defff604 	addi	sp,sp,-40
  80b684:	dc800215 	stw	r18,8(sp)
  80b688:	dfc00915 	stw	ra,36(sp)
  80b68c:	df000815 	stw	fp,32(sp)
  80b690:	ddc00715 	stw	r23,28(sp)
  80b694:	dd800615 	stw	r22,24(sp)
  80b698:	dd400515 	stw	r21,20(sp)
  80b69c:	dd000415 	stw	r20,16(sp)
  80b6a0:	dcc00315 	stw	r19,12(sp)
  80b6a4:	dc400115 	stw	r17,4(sp)
  80b6a8:	dc000015 	stw	r16,0(sp)
  80b6ac:	3025883a 	mov	r18,r6
  80b6b0:	2800b726 	beq	r5,zero,80b990 <_realloc_r+0x310>
  80b6b4:	282b883a 	mov	r21,r5
  80b6b8:	2029883a 	mov	r20,r4
  80b6bc:	080f8980 	call	80f898 <__malloc_lock>
  80b6c0:	a8bfff17 	ldw	r2,-4(r21)
  80b6c4:	043fff04 	movi	r16,-4
  80b6c8:	90c002c4 	addi	r3,r18,11
  80b6cc:	01000584 	movi	r4,22
  80b6d0:	acfffe04 	addi	r19,r21,-8
  80b6d4:	1420703a 	and	r16,r2,r16
  80b6d8:	20c0332e 	bgeu	r4,r3,80b7a8 <_realloc_r+0x128>
  80b6dc:	047ffe04 	movi	r17,-8
  80b6e0:	1c62703a 	and	r17,r3,r17
  80b6e4:	8807883a 	mov	r3,r17
  80b6e8:	88005816 	blt	r17,zero,80b84c <_realloc_r+0x1cc>
  80b6ec:	8c805736 	bltu	r17,r18,80b84c <_realloc_r+0x1cc>
  80b6f0:	80c0300e 	bge	r16,r3,80b7b4 <_realloc_r+0x134>
  80b6f4:	07002074 	movhi	fp,129
  80b6f8:	e70f6b04 	addi	fp,fp,15788
  80b6fc:	e1c00217 	ldw	r7,8(fp)
  80b700:	9c09883a 	add	r4,r19,r16
  80b704:	22000117 	ldw	r8,4(r4)
  80b708:	21c06326 	beq	r4,r7,80b898 <_realloc_r+0x218>
  80b70c:	017fff84 	movi	r5,-2
  80b710:	414a703a 	and	r5,r8,r5
  80b714:	214b883a 	add	r5,r4,r5
  80b718:	29800117 	ldw	r6,4(r5)
  80b71c:	3180004c 	andi	r6,r6,1
  80b720:	30003f26 	beq	r6,zero,80b820 <_realloc_r+0x1a0>
  80b724:	1080004c 	andi	r2,r2,1
  80b728:	10008326 	beq	r2,zero,80b938 <_realloc_r+0x2b8>
  80b72c:	900b883a 	mov	r5,r18
  80b730:	a009883a 	mov	r4,r20
  80b734:	08075580 	call	807558 <_malloc_r>
  80b738:	1025883a 	mov	r18,r2
  80b73c:	10011e26 	beq	r2,zero,80bbb8 <_realloc_r+0x538>
  80b740:	a93fff17 	ldw	r4,-4(r21)
  80b744:	10fffe04 	addi	r3,r2,-8
  80b748:	00bfff84 	movi	r2,-2
  80b74c:	2084703a 	and	r2,r4,r2
  80b750:	9885883a 	add	r2,r19,r2
  80b754:	1880ee26 	beq	r3,r2,80bb10 <_realloc_r+0x490>
  80b758:	81bfff04 	addi	r6,r16,-4
  80b75c:	00800904 	movi	r2,36
  80b760:	1180b836 	bltu	r2,r6,80ba44 <_realloc_r+0x3c4>
  80b764:	00c004c4 	movi	r3,19
  80b768:	19809636 	bltu	r3,r6,80b9c4 <_realloc_r+0x344>
  80b76c:	9005883a 	mov	r2,r18
  80b770:	a807883a 	mov	r3,r21
  80b774:	19000017 	ldw	r4,0(r3)
  80b778:	11000015 	stw	r4,0(r2)
  80b77c:	19000117 	ldw	r4,4(r3)
  80b780:	11000115 	stw	r4,4(r2)
  80b784:	18c00217 	ldw	r3,8(r3)
  80b788:	10c00215 	stw	r3,8(r2)
  80b78c:	a80b883a 	mov	r5,r21
  80b790:	a009883a 	mov	r4,r20
  80b794:	0806e280 	call	806e28 <_free_r>
  80b798:	a009883a 	mov	r4,r20
  80b79c:	080f8bc0 	call	80f8bc <__malloc_unlock>
  80b7a0:	9005883a 	mov	r2,r18
  80b7a4:	00001206 	br	80b7f0 <_realloc_r+0x170>
  80b7a8:	00c00404 	movi	r3,16
  80b7ac:	1823883a 	mov	r17,r3
  80b7b0:	003fce06 	br	80b6ec <__alt_mem_onchip_mem+0xff78b6ec>
  80b7b4:	a825883a 	mov	r18,r21
  80b7b8:	8445c83a 	sub	r2,r16,r17
  80b7bc:	00c003c4 	movi	r3,15
  80b7c0:	18802636 	bltu	r3,r2,80b85c <_realloc_r+0x1dc>
  80b7c4:	99800117 	ldw	r6,4(r19)
  80b7c8:	9c07883a 	add	r3,r19,r16
  80b7cc:	3180004c 	andi	r6,r6,1
  80b7d0:	3420b03a 	or	r16,r6,r16
  80b7d4:	9c000115 	stw	r16,4(r19)
  80b7d8:	18800117 	ldw	r2,4(r3)
  80b7dc:	10800054 	ori	r2,r2,1
  80b7e0:	18800115 	stw	r2,4(r3)
  80b7e4:	a009883a 	mov	r4,r20
  80b7e8:	080f8bc0 	call	80f8bc <__malloc_unlock>
  80b7ec:	9005883a 	mov	r2,r18
  80b7f0:	dfc00917 	ldw	ra,36(sp)
  80b7f4:	df000817 	ldw	fp,32(sp)
  80b7f8:	ddc00717 	ldw	r23,28(sp)
  80b7fc:	dd800617 	ldw	r22,24(sp)
  80b800:	dd400517 	ldw	r21,20(sp)
  80b804:	dd000417 	ldw	r20,16(sp)
  80b808:	dcc00317 	ldw	r19,12(sp)
  80b80c:	dc800217 	ldw	r18,8(sp)
  80b810:	dc400117 	ldw	r17,4(sp)
  80b814:	dc000017 	ldw	r16,0(sp)
  80b818:	dec00a04 	addi	sp,sp,40
  80b81c:	f800283a 	ret
  80b820:	017fff04 	movi	r5,-4
  80b824:	414a703a 	and	r5,r8,r5
  80b828:	814d883a 	add	r6,r16,r5
  80b82c:	30c01f16 	blt	r6,r3,80b8ac <_realloc_r+0x22c>
  80b830:	20800317 	ldw	r2,12(r4)
  80b834:	20c00217 	ldw	r3,8(r4)
  80b838:	a825883a 	mov	r18,r21
  80b83c:	3021883a 	mov	r16,r6
  80b840:	18800315 	stw	r2,12(r3)
  80b844:	10c00215 	stw	r3,8(r2)
  80b848:	003fdb06 	br	80b7b8 <__alt_mem_onchip_mem+0xff78b7b8>
  80b84c:	00800304 	movi	r2,12
  80b850:	a0800015 	stw	r2,0(r20)
  80b854:	0005883a 	mov	r2,zero
  80b858:	003fe506 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80b85c:	98c00117 	ldw	r3,4(r19)
  80b860:	9c4b883a 	add	r5,r19,r17
  80b864:	11000054 	ori	r4,r2,1
  80b868:	18c0004c 	andi	r3,r3,1
  80b86c:	1c62b03a 	or	r17,r3,r17
  80b870:	9c400115 	stw	r17,4(r19)
  80b874:	29000115 	stw	r4,4(r5)
  80b878:	2885883a 	add	r2,r5,r2
  80b87c:	10c00117 	ldw	r3,4(r2)
  80b880:	29400204 	addi	r5,r5,8
  80b884:	a009883a 	mov	r4,r20
  80b888:	18c00054 	ori	r3,r3,1
  80b88c:	10c00115 	stw	r3,4(r2)
  80b890:	0806e280 	call	806e28 <_free_r>
  80b894:	003fd306 	br	80b7e4 <__alt_mem_onchip_mem+0xff78b7e4>
  80b898:	017fff04 	movi	r5,-4
  80b89c:	414a703a 	and	r5,r8,r5
  80b8a0:	89800404 	addi	r6,r17,16
  80b8a4:	8151883a 	add	r8,r16,r5
  80b8a8:	4180590e 	bge	r8,r6,80ba10 <_realloc_r+0x390>
  80b8ac:	1080004c 	andi	r2,r2,1
  80b8b0:	103f9e1e 	bne	r2,zero,80b72c <__alt_mem_onchip_mem+0xff78b72c>
  80b8b4:	adbffe17 	ldw	r22,-8(r21)
  80b8b8:	00bfff04 	movi	r2,-4
  80b8bc:	9dadc83a 	sub	r22,r19,r22
  80b8c0:	b1800117 	ldw	r6,4(r22)
  80b8c4:	3084703a 	and	r2,r6,r2
  80b8c8:	20002026 	beq	r4,zero,80b94c <_realloc_r+0x2cc>
  80b8cc:	80af883a 	add	r23,r16,r2
  80b8d0:	b96f883a 	add	r23,r23,r5
  80b8d4:	21c05f26 	beq	r4,r7,80ba54 <_realloc_r+0x3d4>
  80b8d8:	b8c01c16 	blt	r23,r3,80b94c <_realloc_r+0x2cc>
  80b8dc:	20800317 	ldw	r2,12(r4)
  80b8e0:	20c00217 	ldw	r3,8(r4)
  80b8e4:	81bfff04 	addi	r6,r16,-4
  80b8e8:	01000904 	movi	r4,36
  80b8ec:	18800315 	stw	r2,12(r3)
  80b8f0:	10c00215 	stw	r3,8(r2)
  80b8f4:	b0c00217 	ldw	r3,8(r22)
  80b8f8:	b0800317 	ldw	r2,12(r22)
  80b8fc:	b4800204 	addi	r18,r22,8
  80b900:	18800315 	stw	r2,12(r3)
  80b904:	10c00215 	stw	r3,8(r2)
  80b908:	21801b36 	bltu	r4,r6,80b978 <_realloc_r+0x2f8>
  80b90c:	008004c4 	movi	r2,19
  80b910:	1180352e 	bgeu	r2,r6,80b9e8 <_realloc_r+0x368>
  80b914:	a8800017 	ldw	r2,0(r21)
  80b918:	b0800215 	stw	r2,8(r22)
  80b91c:	a8800117 	ldw	r2,4(r21)
  80b920:	b0800315 	stw	r2,12(r22)
  80b924:	008006c4 	movi	r2,27
  80b928:	11807f36 	bltu	r2,r6,80bb28 <_realloc_r+0x4a8>
  80b92c:	b0800404 	addi	r2,r22,16
  80b930:	ad400204 	addi	r21,r21,8
  80b934:	00002d06 	br	80b9ec <_realloc_r+0x36c>
  80b938:	adbffe17 	ldw	r22,-8(r21)
  80b93c:	00bfff04 	movi	r2,-4
  80b940:	9dadc83a 	sub	r22,r19,r22
  80b944:	b1000117 	ldw	r4,4(r22)
  80b948:	2084703a 	and	r2,r4,r2
  80b94c:	b03f7726 	beq	r22,zero,80b72c <__alt_mem_onchip_mem+0xff78b72c>
  80b950:	80af883a 	add	r23,r16,r2
  80b954:	b8ff7516 	blt	r23,r3,80b72c <__alt_mem_onchip_mem+0xff78b72c>
  80b958:	b0800317 	ldw	r2,12(r22)
  80b95c:	b0c00217 	ldw	r3,8(r22)
  80b960:	81bfff04 	addi	r6,r16,-4
  80b964:	01000904 	movi	r4,36
  80b968:	18800315 	stw	r2,12(r3)
  80b96c:	10c00215 	stw	r3,8(r2)
  80b970:	b4800204 	addi	r18,r22,8
  80b974:	21bfe52e 	bgeu	r4,r6,80b90c <__alt_mem_onchip_mem+0xff78b90c>
  80b978:	a80b883a 	mov	r5,r21
  80b97c:	9009883a 	mov	r4,r18
  80b980:	080b4c40 	call	80b4c4 <memmove>
  80b984:	b821883a 	mov	r16,r23
  80b988:	b027883a 	mov	r19,r22
  80b98c:	003f8a06 	br	80b7b8 <__alt_mem_onchip_mem+0xff78b7b8>
  80b990:	300b883a 	mov	r5,r6
  80b994:	dfc00917 	ldw	ra,36(sp)
  80b998:	df000817 	ldw	fp,32(sp)
  80b99c:	ddc00717 	ldw	r23,28(sp)
  80b9a0:	dd800617 	ldw	r22,24(sp)
  80b9a4:	dd400517 	ldw	r21,20(sp)
  80b9a8:	dd000417 	ldw	r20,16(sp)
  80b9ac:	dcc00317 	ldw	r19,12(sp)
  80b9b0:	dc800217 	ldw	r18,8(sp)
  80b9b4:	dc400117 	ldw	r17,4(sp)
  80b9b8:	dc000017 	ldw	r16,0(sp)
  80b9bc:	dec00a04 	addi	sp,sp,40
  80b9c0:	08075581 	jmpi	807558 <_malloc_r>
  80b9c4:	a8c00017 	ldw	r3,0(r21)
  80b9c8:	90c00015 	stw	r3,0(r18)
  80b9cc:	a8c00117 	ldw	r3,4(r21)
  80b9d0:	90c00115 	stw	r3,4(r18)
  80b9d4:	00c006c4 	movi	r3,27
  80b9d8:	19804536 	bltu	r3,r6,80baf0 <_realloc_r+0x470>
  80b9dc:	90800204 	addi	r2,r18,8
  80b9e0:	a8c00204 	addi	r3,r21,8
  80b9e4:	003f6306 	br	80b774 <__alt_mem_onchip_mem+0xff78b774>
  80b9e8:	9005883a 	mov	r2,r18
  80b9ec:	a8c00017 	ldw	r3,0(r21)
  80b9f0:	b821883a 	mov	r16,r23
  80b9f4:	b027883a 	mov	r19,r22
  80b9f8:	10c00015 	stw	r3,0(r2)
  80b9fc:	a8c00117 	ldw	r3,4(r21)
  80ba00:	10c00115 	stw	r3,4(r2)
  80ba04:	a8c00217 	ldw	r3,8(r21)
  80ba08:	10c00215 	stw	r3,8(r2)
  80ba0c:	003f6a06 	br	80b7b8 <__alt_mem_onchip_mem+0xff78b7b8>
  80ba10:	9c67883a 	add	r19,r19,r17
  80ba14:	4445c83a 	sub	r2,r8,r17
  80ba18:	e4c00215 	stw	r19,8(fp)
  80ba1c:	10800054 	ori	r2,r2,1
  80ba20:	98800115 	stw	r2,4(r19)
  80ba24:	a8bfff17 	ldw	r2,-4(r21)
  80ba28:	a009883a 	mov	r4,r20
  80ba2c:	1080004c 	andi	r2,r2,1
  80ba30:	1462b03a 	or	r17,r2,r17
  80ba34:	ac7fff15 	stw	r17,-4(r21)
  80ba38:	080f8bc0 	call	80f8bc <__malloc_unlock>
  80ba3c:	a805883a 	mov	r2,r21
  80ba40:	003f6b06 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80ba44:	a80b883a 	mov	r5,r21
  80ba48:	9009883a 	mov	r4,r18
  80ba4c:	080b4c40 	call	80b4c4 <memmove>
  80ba50:	003f4e06 	br	80b78c <__alt_mem_onchip_mem+0xff78b78c>
  80ba54:	89000404 	addi	r4,r17,16
  80ba58:	b93fbc16 	blt	r23,r4,80b94c <__alt_mem_onchip_mem+0xff78b94c>
  80ba5c:	b0800317 	ldw	r2,12(r22)
  80ba60:	b0c00217 	ldw	r3,8(r22)
  80ba64:	81bfff04 	addi	r6,r16,-4
  80ba68:	01000904 	movi	r4,36
  80ba6c:	18800315 	stw	r2,12(r3)
  80ba70:	10c00215 	stw	r3,8(r2)
  80ba74:	b4800204 	addi	r18,r22,8
  80ba78:	21804336 	bltu	r4,r6,80bb88 <_realloc_r+0x508>
  80ba7c:	008004c4 	movi	r2,19
  80ba80:	11803f2e 	bgeu	r2,r6,80bb80 <_realloc_r+0x500>
  80ba84:	a8800017 	ldw	r2,0(r21)
  80ba88:	b0800215 	stw	r2,8(r22)
  80ba8c:	a8800117 	ldw	r2,4(r21)
  80ba90:	b0800315 	stw	r2,12(r22)
  80ba94:	008006c4 	movi	r2,27
  80ba98:	11803f36 	bltu	r2,r6,80bb98 <_realloc_r+0x518>
  80ba9c:	b0800404 	addi	r2,r22,16
  80baa0:	ad400204 	addi	r21,r21,8
  80baa4:	a8c00017 	ldw	r3,0(r21)
  80baa8:	10c00015 	stw	r3,0(r2)
  80baac:	a8c00117 	ldw	r3,4(r21)
  80bab0:	10c00115 	stw	r3,4(r2)
  80bab4:	a8c00217 	ldw	r3,8(r21)
  80bab8:	10c00215 	stw	r3,8(r2)
  80babc:	b447883a 	add	r3,r22,r17
  80bac0:	bc45c83a 	sub	r2,r23,r17
  80bac4:	e0c00215 	stw	r3,8(fp)
  80bac8:	10800054 	ori	r2,r2,1
  80bacc:	18800115 	stw	r2,4(r3)
  80bad0:	b0800117 	ldw	r2,4(r22)
  80bad4:	a009883a 	mov	r4,r20
  80bad8:	1080004c 	andi	r2,r2,1
  80badc:	1462b03a 	or	r17,r2,r17
  80bae0:	b4400115 	stw	r17,4(r22)
  80bae4:	080f8bc0 	call	80f8bc <__malloc_unlock>
  80bae8:	9005883a 	mov	r2,r18
  80baec:	003f4006 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80baf0:	a8c00217 	ldw	r3,8(r21)
  80baf4:	90c00215 	stw	r3,8(r18)
  80baf8:	a8c00317 	ldw	r3,12(r21)
  80bafc:	90c00315 	stw	r3,12(r18)
  80bb00:	30801126 	beq	r6,r2,80bb48 <_realloc_r+0x4c8>
  80bb04:	90800404 	addi	r2,r18,16
  80bb08:	a8c00404 	addi	r3,r21,16
  80bb0c:	003f1906 	br	80b774 <__alt_mem_onchip_mem+0xff78b774>
  80bb10:	90ffff17 	ldw	r3,-4(r18)
  80bb14:	00bfff04 	movi	r2,-4
  80bb18:	a825883a 	mov	r18,r21
  80bb1c:	1884703a 	and	r2,r3,r2
  80bb20:	80a1883a 	add	r16,r16,r2
  80bb24:	003f2406 	br	80b7b8 <__alt_mem_onchip_mem+0xff78b7b8>
  80bb28:	a8800217 	ldw	r2,8(r21)
  80bb2c:	b0800415 	stw	r2,16(r22)
  80bb30:	a8800317 	ldw	r2,12(r21)
  80bb34:	b0800515 	stw	r2,20(r22)
  80bb38:	31000a26 	beq	r6,r4,80bb64 <_realloc_r+0x4e4>
  80bb3c:	b0800604 	addi	r2,r22,24
  80bb40:	ad400404 	addi	r21,r21,16
  80bb44:	003fa906 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80bb48:	a9000417 	ldw	r4,16(r21)
  80bb4c:	90800604 	addi	r2,r18,24
  80bb50:	a8c00604 	addi	r3,r21,24
  80bb54:	91000415 	stw	r4,16(r18)
  80bb58:	a9000517 	ldw	r4,20(r21)
  80bb5c:	91000515 	stw	r4,20(r18)
  80bb60:	003f0406 	br	80b774 <__alt_mem_onchip_mem+0xff78b774>
  80bb64:	a8c00417 	ldw	r3,16(r21)
  80bb68:	ad400604 	addi	r21,r21,24
  80bb6c:	b0800804 	addi	r2,r22,32
  80bb70:	b0c00615 	stw	r3,24(r22)
  80bb74:	a8ffff17 	ldw	r3,-4(r21)
  80bb78:	b0c00715 	stw	r3,28(r22)
  80bb7c:	003f9b06 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80bb80:	9005883a 	mov	r2,r18
  80bb84:	003fc706 	br	80baa4 <__alt_mem_onchip_mem+0xff78baa4>
  80bb88:	a80b883a 	mov	r5,r21
  80bb8c:	9009883a 	mov	r4,r18
  80bb90:	080b4c40 	call	80b4c4 <memmove>
  80bb94:	003fc906 	br	80babc <__alt_mem_onchip_mem+0xff78babc>
  80bb98:	a8800217 	ldw	r2,8(r21)
  80bb9c:	b0800415 	stw	r2,16(r22)
  80bba0:	a8800317 	ldw	r2,12(r21)
  80bba4:	b0800515 	stw	r2,20(r22)
  80bba8:	31000726 	beq	r6,r4,80bbc8 <_realloc_r+0x548>
  80bbac:	b0800604 	addi	r2,r22,24
  80bbb0:	ad400404 	addi	r21,r21,16
  80bbb4:	003fbb06 	br	80baa4 <__alt_mem_onchip_mem+0xff78baa4>
  80bbb8:	a009883a 	mov	r4,r20
  80bbbc:	080f8bc0 	call	80f8bc <__malloc_unlock>
  80bbc0:	0005883a 	mov	r2,zero
  80bbc4:	003f0a06 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80bbc8:	a8c00417 	ldw	r3,16(r21)
  80bbcc:	ad400604 	addi	r21,r21,24
  80bbd0:	b0800804 	addi	r2,r22,32
  80bbd4:	b0c00615 	stw	r3,24(r22)
  80bbd8:	a8ffff17 	ldw	r3,-4(r21)
  80bbdc:	b0c00715 	stw	r3,28(r22)
  80bbe0:	003fb006 	br	80baa4 <__alt_mem_onchip_mem+0xff78baa4>

0080bbe4 <__swbuf_r>:
  80bbe4:	defffb04 	addi	sp,sp,-20
  80bbe8:	dcc00315 	stw	r19,12(sp)
  80bbec:	dc800215 	stw	r18,8(sp)
  80bbf0:	dc000015 	stw	r16,0(sp)
  80bbf4:	dfc00415 	stw	ra,16(sp)
  80bbf8:	dc400115 	stw	r17,4(sp)
  80bbfc:	2025883a 	mov	r18,r4
  80bc00:	2827883a 	mov	r19,r5
  80bc04:	3021883a 	mov	r16,r6
  80bc08:	20000226 	beq	r4,zero,80bc14 <__swbuf_r+0x30>
  80bc0c:	20800e17 	ldw	r2,56(r4)
  80bc10:	10004226 	beq	r2,zero,80bd1c <__swbuf_r+0x138>
  80bc14:	80800617 	ldw	r2,24(r16)
  80bc18:	8100030b 	ldhu	r4,12(r16)
  80bc1c:	80800215 	stw	r2,8(r16)
  80bc20:	2080020c 	andi	r2,r4,8
  80bc24:	10003626 	beq	r2,zero,80bd00 <__swbuf_r+0x11c>
  80bc28:	80c00417 	ldw	r3,16(r16)
  80bc2c:	18003426 	beq	r3,zero,80bd00 <__swbuf_r+0x11c>
  80bc30:	2088000c 	andi	r2,r4,8192
  80bc34:	9c403fcc 	andi	r17,r19,255
  80bc38:	10001a26 	beq	r2,zero,80bca4 <__swbuf_r+0xc0>
  80bc3c:	80800017 	ldw	r2,0(r16)
  80bc40:	81000517 	ldw	r4,20(r16)
  80bc44:	10c7c83a 	sub	r3,r2,r3
  80bc48:	1900200e 	bge	r3,r4,80bccc <__swbuf_r+0xe8>
  80bc4c:	18c00044 	addi	r3,r3,1
  80bc50:	81000217 	ldw	r4,8(r16)
  80bc54:	11400044 	addi	r5,r2,1
  80bc58:	81400015 	stw	r5,0(r16)
  80bc5c:	213fffc4 	addi	r4,r4,-1
  80bc60:	81000215 	stw	r4,8(r16)
  80bc64:	14c00005 	stb	r19,0(r2)
  80bc68:	80800517 	ldw	r2,20(r16)
  80bc6c:	10c01e26 	beq	r2,r3,80bce8 <__swbuf_r+0x104>
  80bc70:	8080030b 	ldhu	r2,12(r16)
  80bc74:	1080004c 	andi	r2,r2,1
  80bc78:	10000226 	beq	r2,zero,80bc84 <__swbuf_r+0xa0>
  80bc7c:	00800284 	movi	r2,10
  80bc80:	88801926 	beq	r17,r2,80bce8 <__swbuf_r+0x104>
  80bc84:	8805883a 	mov	r2,r17
  80bc88:	dfc00417 	ldw	ra,16(sp)
  80bc8c:	dcc00317 	ldw	r19,12(sp)
  80bc90:	dc800217 	ldw	r18,8(sp)
  80bc94:	dc400117 	ldw	r17,4(sp)
  80bc98:	dc000017 	ldw	r16,0(sp)
  80bc9c:	dec00504 	addi	sp,sp,20
  80bca0:	f800283a 	ret
  80bca4:	81401917 	ldw	r5,100(r16)
  80bca8:	00b7ffc4 	movi	r2,-8193
  80bcac:	21080014 	ori	r4,r4,8192
  80bcb0:	2884703a 	and	r2,r5,r2
  80bcb4:	80801915 	stw	r2,100(r16)
  80bcb8:	80800017 	ldw	r2,0(r16)
  80bcbc:	8100030d 	sth	r4,12(r16)
  80bcc0:	81000517 	ldw	r4,20(r16)
  80bcc4:	10c7c83a 	sub	r3,r2,r3
  80bcc8:	193fe016 	blt	r3,r4,80bc4c <__alt_mem_onchip_mem+0xff78bc4c>
  80bccc:	800b883a 	mov	r5,r16
  80bcd0:	9009883a 	mov	r4,r18
  80bcd4:	08068d80 	call	8068d8 <_fflush_r>
  80bcd8:	1000071e 	bne	r2,zero,80bcf8 <__swbuf_r+0x114>
  80bcdc:	80800017 	ldw	r2,0(r16)
  80bce0:	00c00044 	movi	r3,1
  80bce4:	003fda06 	br	80bc50 <__alt_mem_onchip_mem+0xff78bc50>
  80bce8:	800b883a 	mov	r5,r16
  80bcec:	9009883a 	mov	r4,r18
  80bcf0:	08068d80 	call	8068d8 <_fflush_r>
  80bcf4:	103fe326 	beq	r2,zero,80bc84 <__alt_mem_onchip_mem+0xff78bc84>
  80bcf8:	00bfffc4 	movi	r2,-1
  80bcfc:	003fe206 	br	80bc88 <__alt_mem_onchip_mem+0xff78bc88>
  80bd00:	800b883a 	mov	r5,r16
  80bd04:	9009883a 	mov	r4,r18
  80bd08:	0804ce00 	call	804ce0 <__swsetup_r>
  80bd0c:	103ffa1e 	bne	r2,zero,80bcf8 <__alt_mem_onchip_mem+0xff78bcf8>
  80bd10:	8100030b 	ldhu	r4,12(r16)
  80bd14:	80c00417 	ldw	r3,16(r16)
  80bd18:	003fc506 	br	80bc30 <__alt_mem_onchip_mem+0xff78bc30>
  80bd1c:	0806cb40 	call	806cb4 <__sinit>
  80bd20:	003fbc06 	br	80bc14 <__alt_mem_onchip_mem+0xff78bc14>

0080bd24 <__swbuf>:
  80bd24:	00802074 	movhi	r2,129
  80bd28:	10956904 	addi	r2,r2,21924
  80bd2c:	280d883a 	mov	r6,r5
  80bd30:	200b883a 	mov	r5,r4
  80bd34:	11000017 	ldw	r4,0(r2)
  80bd38:	080bbe41 	jmpi	80bbe4 <__swbuf_r>

0080bd3c <_wcrtomb_r>:
  80bd3c:	defff604 	addi	sp,sp,-40
  80bd40:	00802074 	movhi	r2,129
  80bd44:	dc800815 	stw	r18,32(sp)
  80bd48:	dc400715 	stw	r17,28(sp)
  80bd4c:	dc000615 	stw	r16,24(sp)
  80bd50:	10956d04 	addi	r2,r2,21940
  80bd54:	dfc00915 	stw	ra,36(sp)
  80bd58:	2021883a 	mov	r16,r4
  80bd5c:	3823883a 	mov	r17,r7
  80bd60:	14800017 	ldw	r18,0(r2)
  80bd64:	28001426 	beq	r5,zero,80bdb8 <_wcrtomb_r+0x7c>
  80bd68:	d9400415 	stw	r5,16(sp)
  80bd6c:	d9800515 	stw	r6,20(sp)
  80bd70:	080733c0 	call	80733c <__locale_charset>
  80bd74:	d9800517 	ldw	r6,20(sp)
  80bd78:	d9400417 	ldw	r5,16(sp)
  80bd7c:	100f883a 	mov	r7,r2
  80bd80:	dc400015 	stw	r17,0(sp)
  80bd84:	8009883a 	mov	r4,r16
  80bd88:	903ee83a 	callr	r18
  80bd8c:	00ffffc4 	movi	r3,-1
  80bd90:	10c0031e 	bne	r2,r3,80bda0 <_wcrtomb_r+0x64>
  80bd94:	88000015 	stw	zero,0(r17)
  80bd98:	00c02284 	movi	r3,138
  80bd9c:	80c00015 	stw	r3,0(r16)
  80bda0:	dfc00917 	ldw	ra,36(sp)
  80bda4:	dc800817 	ldw	r18,32(sp)
  80bda8:	dc400717 	ldw	r17,28(sp)
  80bdac:	dc000617 	ldw	r16,24(sp)
  80bdb0:	dec00a04 	addi	sp,sp,40
  80bdb4:	f800283a 	ret
  80bdb8:	080733c0 	call	80733c <__locale_charset>
  80bdbc:	100f883a 	mov	r7,r2
  80bdc0:	dc400015 	stw	r17,0(sp)
  80bdc4:	000d883a 	mov	r6,zero
  80bdc8:	d9400104 	addi	r5,sp,4
  80bdcc:	8009883a 	mov	r4,r16
  80bdd0:	903ee83a 	callr	r18
  80bdd4:	003fed06 	br	80bd8c <__alt_mem_onchip_mem+0xff78bd8c>

0080bdd8 <wcrtomb>:
  80bdd8:	defff604 	addi	sp,sp,-40
  80bddc:	00802074 	movhi	r2,129
  80bde0:	dc800615 	stw	r18,24(sp)
  80bde4:	dc400515 	stw	r17,20(sp)
  80bde8:	10956904 	addi	r2,r2,21924
  80bdec:	dfc00915 	stw	ra,36(sp)
  80bdf0:	dd000815 	stw	r20,32(sp)
  80bdf4:	dcc00715 	stw	r19,28(sp)
  80bdf8:	dc000415 	stw	r16,16(sp)
  80bdfc:	3025883a 	mov	r18,r6
  80be00:	14400017 	ldw	r17,0(r2)
  80be04:	20001926 	beq	r4,zero,80be6c <wcrtomb+0x94>
  80be08:	00802074 	movhi	r2,129
  80be0c:	10956d04 	addi	r2,r2,21940
  80be10:	15000017 	ldw	r20,0(r2)
  80be14:	2021883a 	mov	r16,r4
  80be18:	2827883a 	mov	r19,r5
  80be1c:	080733c0 	call	80733c <__locale_charset>
  80be20:	100f883a 	mov	r7,r2
  80be24:	dc800015 	stw	r18,0(sp)
  80be28:	980d883a 	mov	r6,r19
  80be2c:	800b883a 	mov	r5,r16
  80be30:	8809883a 	mov	r4,r17
  80be34:	a03ee83a 	callr	r20
  80be38:	00ffffc4 	movi	r3,-1
  80be3c:	10c0031e 	bne	r2,r3,80be4c <wcrtomb+0x74>
  80be40:	90000015 	stw	zero,0(r18)
  80be44:	00c02284 	movi	r3,138
  80be48:	88c00015 	stw	r3,0(r17)
  80be4c:	dfc00917 	ldw	ra,36(sp)
  80be50:	dd000817 	ldw	r20,32(sp)
  80be54:	dcc00717 	ldw	r19,28(sp)
  80be58:	dc800617 	ldw	r18,24(sp)
  80be5c:	dc400517 	ldw	r17,20(sp)
  80be60:	dc000417 	ldw	r16,16(sp)
  80be64:	dec00a04 	addi	sp,sp,40
  80be68:	f800283a 	ret
  80be6c:	00802074 	movhi	r2,129
  80be70:	10956d04 	addi	r2,r2,21940
  80be74:	14000017 	ldw	r16,0(r2)
  80be78:	080733c0 	call	80733c <__locale_charset>
  80be7c:	100f883a 	mov	r7,r2
  80be80:	dc800015 	stw	r18,0(sp)
  80be84:	000d883a 	mov	r6,zero
  80be88:	d9400104 	addi	r5,sp,4
  80be8c:	8809883a 	mov	r4,r17
  80be90:	803ee83a 	callr	r16
  80be94:	003fe806 	br	80be38 <__alt_mem_onchip_mem+0xff78be38>

0080be98 <__ascii_wctomb>:
  80be98:	28000526 	beq	r5,zero,80beb0 <__ascii_wctomb+0x18>
  80be9c:	00803fc4 	movi	r2,255
  80bea0:	11800536 	bltu	r2,r6,80beb8 <__ascii_wctomb+0x20>
  80bea4:	29800005 	stb	r6,0(r5)
  80bea8:	00800044 	movi	r2,1
  80beac:	f800283a 	ret
  80beb0:	0005883a 	mov	r2,zero
  80beb4:	f800283a 	ret
  80beb8:	00802284 	movi	r2,138
  80bebc:	20800015 	stw	r2,0(r4)
  80bec0:	00bfffc4 	movi	r2,-1
  80bec4:	f800283a 	ret

0080bec8 <_wctomb_r>:
  80bec8:	00802074 	movhi	r2,129
  80becc:	defff904 	addi	sp,sp,-28
  80bed0:	10956d04 	addi	r2,r2,21940
  80bed4:	dfc00615 	stw	ra,24(sp)
  80bed8:	dc400515 	stw	r17,20(sp)
  80bedc:	dc000415 	stw	r16,16(sp)
  80bee0:	3823883a 	mov	r17,r7
  80bee4:	14000017 	ldw	r16,0(r2)
  80bee8:	d9000115 	stw	r4,4(sp)
  80beec:	d9400215 	stw	r5,8(sp)
  80bef0:	d9800315 	stw	r6,12(sp)
  80bef4:	080733c0 	call	80733c <__locale_charset>
  80bef8:	d9800317 	ldw	r6,12(sp)
  80befc:	d9400217 	ldw	r5,8(sp)
  80bf00:	d9000117 	ldw	r4,4(sp)
  80bf04:	100f883a 	mov	r7,r2
  80bf08:	dc400015 	stw	r17,0(sp)
  80bf0c:	803ee83a 	callr	r16
  80bf10:	dfc00617 	ldw	ra,24(sp)
  80bf14:	dc400517 	ldw	r17,20(sp)
  80bf18:	dc000417 	ldw	r16,16(sp)
  80bf1c:	dec00704 	addi	sp,sp,28
  80bf20:	f800283a 	ret

0080bf24 <__udivdi3>:
  80bf24:	defff504 	addi	sp,sp,-44
  80bf28:	dcc00415 	stw	r19,16(sp)
  80bf2c:	dc000115 	stw	r16,4(sp)
  80bf30:	dfc00a15 	stw	ra,40(sp)
  80bf34:	df000915 	stw	fp,36(sp)
  80bf38:	ddc00815 	stw	r23,32(sp)
  80bf3c:	dd800715 	stw	r22,28(sp)
  80bf40:	dd400615 	stw	r21,24(sp)
  80bf44:	dd000515 	stw	r20,20(sp)
  80bf48:	dc800315 	stw	r18,12(sp)
  80bf4c:	dc400215 	stw	r17,8(sp)
  80bf50:	2027883a 	mov	r19,r4
  80bf54:	2821883a 	mov	r16,r5
  80bf58:	3800411e 	bne	r7,zero,80c060 <__udivdi3+0x13c>
  80bf5c:	3023883a 	mov	r17,r6
  80bf60:	2025883a 	mov	r18,r4
  80bf64:	2980522e 	bgeu	r5,r6,80c0b0 <__udivdi3+0x18c>
  80bf68:	00bfffd4 	movui	r2,65535
  80bf6c:	282d883a 	mov	r22,r5
  80bf70:	1180a836 	bltu	r2,r6,80c214 <__udivdi3+0x2f0>
  80bf74:	00803fc4 	movi	r2,255
  80bf78:	1185803a 	cmpltu	r2,r2,r6
  80bf7c:	100490fa 	slli	r2,r2,3
  80bf80:	3086d83a 	srl	r3,r6,r2
  80bf84:	01002074 	movhi	r4,129
  80bf88:	210d5304 	addi	r4,r4,13644
  80bf8c:	20c7883a 	add	r3,r4,r3
  80bf90:	18c00003 	ldbu	r3,0(r3)
  80bf94:	1885883a 	add	r2,r3,r2
  80bf98:	00c00804 	movi	r3,32
  80bf9c:	1887c83a 	sub	r3,r3,r2
  80bfa0:	18000526 	beq	r3,zero,80bfb8 <__udivdi3+0x94>
  80bfa4:	80e0983a 	sll	r16,r16,r3
  80bfa8:	9884d83a 	srl	r2,r19,r2
  80bfac:	30e2983a 	sll	r17,r6,r3
  80bfb0:	98e4983a 	sll	r18,r19,r3
  80bfb4:	142cb03a 	or	r22,r2,r16
  80bfb8:	882ad43a 	srli	r21,r17,16
  80bfbc:	b009883a 	mov	r4,r22
  80bfc0:	8d3fffcc 	andi	r20,r17,65535
  80bfc4:	a80b883a 	mov	r5,r21
  80bfc8:	080cb300 	call	80cb30 <__umodsi3>
  80bfcc:	b009883a 	mov	r4,r22
  80bfd0:	a80b883a 	mov	r5,r21
  80bfd4:	1027883a 	mov	r19,r2
  80bfd8:	080cacc0 	call	80cacc <__udivsi3>
  80bfdc:	102d883a 	mov	r22,r2
  80bfe0:	9826943a 	slli	r19,r19,16
  80bfe4:	9004d43a 	srli	r2,r18,16
  80bfe8:	a5a1383a 	mul	r16,r20,r22
  80bfec:	14c4b03a 	or	r2,r2,r19
  80bff0:	1400052e 	bgeu	r2,r16,80c008 <__udivdi3+0xe4>
  80bff4:	1445883a 	add	r2,r2,r17
  80bff8:	b0ffffc4 	addi	r3,r22,-1
  80bffc:	14400136 	bltu	r2,r17,80c004 <__udivdi3+0xe0>
  80c000:	14012336 	bltu	r2,r16,80c490 <__udivdi3+0x56c>
  80c004:	182d883a 	mov	r22,r3
  80c008:	1421c83a 	sub	r16,r2,r16
  80c00c:	a80b883a 	mov	r5,r21
  80c010:	8009883a 	mov	r4,r16
  80c014:	080cb300 	call	80cb30 <__umodsi3>
  80c018:	1027883a 	mov	r19,r2
  80c01c:	a80b883a 	mov	r5,r21
  80c020:	8009883a 	mov	r4,r16
  80c024:	080cacc0 	call	80cacc <__udivsi3>
  80c028:	9826943a 	slli	r19,r19,16
  80c02c:	a0a9383a 	mul	r20,r20,r2
  80c030:	94bfffcc 	andi	r18,r18,65535
  80c034:	94e4b03a 	or	r18,r18,r19
  80c038:	9500052e 	bgeu	r18,r20,80c050 <__udivdi3+0x12c>
  80c03c:	8ca5883a 	add	r18,r17,r18
  80c040:	10ffffc4 	addi	r3,r2,-1
  80c044:	9440f136 	bltu	r18,r17,80c40c <__udivdi3+0x4e8>
  80c048:	9500f02e 	bgeu	r18,r20,80c40c <__udivdi3+0x4e8>
  80c04c:	10bfff84 	addi	r2,r2,-2
  80c050:	b00c943a 	slli	r6,r22,16
  80c054:	0007883a 	mov	r3,zero
  80c058:	3084b03a 	or	r2,r6,r2
  80c05c:	00005906 	br	80c1c4 <__udivdi3+0x2a0>
  80c060:	29c05636 	bltu	r5,r7,80c1bc <__udivdi3+0x298>
  80c064:	00bfffd4 	movui	r2,65535
  80c068:	11c0622e 	bgeu	r2,r7,80c1f4 <__udivdi3+0x2d0>
  80c06c:	00804034 	movhi	r2,256
  80c070:	10bfffc4 	addi	r2,r2,-1
  80c074:	11c0ee36 	bltu	r2,r7,80c430 <__udivdi3+0x50c>
  80c078:	00800404 	movi	r2,16
  80c07c:	3886d83a 	srl	r3,r7,r2
  80c080:	01002074 	movhi	r4,129
  80c084:	210d5304 	addi	r4,r4,13644
  80c088:	20c7883a 	add	r3,r4,r3
  80c08c:	18c00003 	ldbu	r3,0(r3)
  80c090:	05400804 	movi	r21,32
  80c094:	1885883a 	add	r2,r3,r2
  80c098:	a8abc83a 	sub	r21,r21,r2
  80c09c:	a800621e 	bne	r21,zero,80c228 <__udivdi3+0x304>
  80c0a0:	3c00e936 	bltu	r7,r16,80c448 <__udivdi3+0x524>
  80c0a4:	9985403a 	cmpgeu	r2,r19,r6
  80c0a8:	0007883a 	mov	r3,zero
  80c0ac:	00004506 	br	80c1c4 <__udivdi3+0x2a0>
  80c0b0:	3000041e 	bne	r6,zero,80c0c4 <__udivdi3+0x1a0>
  80c0b4:	000b883a 	mov	r5,zero
  80c0b8:	01000044 	movi	r4,1
  80c0bc:	080cacc0 	call	80cacc <__udivsi3>
  80c0c0:	1023883a 	mov	r17,r2
  80c0c4:	00bfffd4 	movui	r2,65535
  80c0c8:	14404e2e 	bgeu	r2,r17,80c204 <__udivdi3+0x2e0>
  80c0cc:	00804034 	movhi	r2,256
  80c0d0:	10bfffc4 	addi	r2,r2,-1
  80c0d4:	1440d836 	bltu	r2,r17,80c438 <__udivdi3+0x514>
  80c0d8:	00800404 	movi	r2,16
  80c0dc:	8886d83a 	srl	r3,r17,r2
  80c0e0:	01002074 	movhi	r4,129
  80c0e4:	210d5304 	addi	r4,r4,13644
  80c0e8:	20c7883a 	add	r3,r4,r3
  80c0ec:	18c00003 	ldbu	r3,0(r3)
  80c0f0:	1885883a 	add	r2,r3,r2
  80c0f4:	00c00804 	movi	r3,32
  80c0f8:	1887c83a 	sub	r3,r3,r2
  80c0fc:	18008f1e 	bne	r3,zero,80c33c <__udivdi3+0x418>
  80c100:	882ad43a 	srli	r21,r17,16
  80c104:	8461c83a 	sub	r16,r16,r17
  80c108:	8d3fffcc 	andi	r20,r17,65535
  80c10c:	00c00044 	movi	r3,1
  80c110:	8009883a 	mov	r4,r16
  80c114:	a80b883a 	mov	r5,r21
  80c118:	d8c00015 	stw	r3,0(sp)
  80c11c:	080cb300 	call	80cb30 <__umodsi3>
  80c120:	8009883a 	mov	r4,r16
  80c124:	a80b883a 	mov	r5,r21
  80c128:	1027883a 	mov	r19,r2
  80c12c:	080cacc0 	call	80cacc <__udivsi3>
  80c130:	9826943a 	slli	r19,r19,16
  80c134:	9008d43a 	srli	r4,r18,16
  80c138:	1521383a 	mul	r16,r2,r20
  80c13c:	102d883a 	mov	r22,r2
  80c140:	24c8b03a 	or	r4,r4,r19
  80c144:	d8c00017 	ldw	r3,0(sp)
  80c148:	2400052e 	bgeu	r4,r16,80c160 <__udivdi3+0x23c>
  80c14c:	2449883a 	add	r4,r4,r17
  80c150:	b0bfffc4 	addi	r2,r22,-1
  80c154:	24400136 	bltu	r4,r17,80c15c <__udivdi3+0x238>
  80c158:	2400ca36 	bltu	r4,r16,80c484 <__udivdi3+0x560>
  80c15c:	102d883a 	mov	r22,r2
  80c160:	2421c83a 	sub	r16,r4,r16
  80c164:	a80b883a 	mov	r5,r21
  80c168:	8009883a 	mov	r4,r16
  80c16c:	d8c00015 	stw	r3,0(sp)
  80c170:	080cb300 	call	80cb30 <__umodsi3>
  80c174:	1027883a 	mov	r19,r2
  80c178:	a80b883a 	mov	r5,r21
  80c17c:	8009883a 	mov	r4,r16
  80c180:	080cacc0 	call	80cacc <__udivsi3>
  80c184:	9826943a 	slli	r19,r19,16
  80c188:	1529383a 	mul	r20,r2,r20
  80c18c:	94bfffcc 	andi	r18,r18,65535
  80c190:	94e4b03a 	or	r18,r18,r19
  80c194:	d8c00017 	ldw	r3,0(sp)
  80c198:	9500052e 	bgeu	r18,r20,80c1b0 <__udivdi3+0x28c>
  80c19c:	8ca5883a 	add	r18,r17,r18
  80c1a0:	113fffc4 	addi	r4,r2,-1
  80c1a4:	94409736 	bltu	r18,r17,80c404 <__udivdi3+0x4e0>
  80c1a8:	9500962e 	bgeu	r18,r20,80c404 <__udivdi3+0x4e0>
  80c1ac:	10bfff84 	addi	r2,r2,-2
  80c1b0:	b00c943a 	slli	r6,r22,16
  80c1b4:	3084b03a 	or	r2,r6,r2
  80c1b8:	00000206 	br	80c1c4 <__udivdi3+0x2a0>
  80c1bc:	0007883a 	mov	r3,zero
  80c1c0:	0005883a 	mov	r2,zero
  80c1c4:	dfc00a17 	ldw	ra,40(sp)
  80c1c8:	df000917 	ldw	fp,36(sp)
  80c1cc:	ddc00817 	ldw	r23,32(sp)
  80c1d0:	dd800717 	ldw	r22,28(sp)
  80c1d4:	dd400617 	ldw	r21,24(sp)
  80c1d8:	dd000517 	ldw	r20,20(sp)
  80c1dc:	dcc00417 	ldw	r19,16(sp)
  80c1e0:	dc800317 	ldw	r18,12(sp)
  80c1e4:	dc400217 	ldw	r17,8(sp)
  80c1e8:	dc000117 	ldw	r16,4(sp)
  80c1ec:	dec00b04 	addi	sp,sp,44
  80c1f0:	f800283a 	ret
  80c1f4:	00803fc4 	movi	r2,255
  80c1f8:	11c5803a 	cmpltu	r2,r2,r7
  80c1fc:	100490fa 	slli	r2,r2,3
  80c200:	003f9e06 	br	80c07c <__alt_mem_onchip_mem+0xff78c07c>
  80c204:	00803fc4 	movi	r2,255
  80c208:	1445803a 	cmpltu	r2,r2,r17
  80c20c:	100490fa 	slli	r2,r2,3
  80c210:	003fb206 	br	80c0dc <__alt_mem_onchip_mem+0xff78c0dc>
  80c214:	00804034 	movhi	r2,256
  80c218:	10bfffc4 	addi	r2,r2,-1
  80c21c:	11808836 	bltu	r2,r6,80c440 <__udivdi3+0x51c>
  80c220:	00800404 	movi	r2,16
  80c224:	003f5606 	br	80bf80 <__alt_mem_onchip_mem+0xff78bf80>
  80c228:	30aed83a 	srl	r23,r6,r2
  80c22c:	3d4e983a 	sll	r7,r7,r21
  80c230:	80acd83a 	srl	r22,r16,r2
  80c234:	9884d83a 	srl	r2,r19,r2
  80c238:	3deeb03a 	or	r23,r7,r23
  80c23c:	b824d43a 	srli	r18,r23,16
  80c240:	8560983a 	sll	r16,r16,r21
  80c244:	b009883a 	mov	r4,r22
  80c248:	900b883a 	mov	r5,r18
  80c24c:	3568983a 	sll	r20,r6,r21
  80c250:	1420b03a 	or	r16,r2,r16
  80c254:	080cb300 	call	80cb30 <__umodsi3>
  80c258:	b009883a 	mov	r4,r22
  80c25c:	900b883a 	mov	r5,r18
  80c260:	1023883a 	mov	r17,r2
  80c264:	080cacc0 	call	80cacc <__udivsi3>
  80c268:	8808943a 	slli	r4,r17,16
  80c26c:	bf3fffcc 	andi	fp,r23,65535
  80c270:	8006d43a 	srli	r3,r16,16
  80c274:	e0a3383a 	mul	r17,fp,r2
  80c278:	100d883a 	mov	r6,r2
  80c27c:	1906b03a 	or	r3,r3,r4
  80c280:	1c40042e 	bgeu	r3,r17,80c294 <__udivdi3+0x370>
  80c284:	1dc7883a 	add	r3,r3,r23
  80c288:	10bfffc4 	addi	r2,r2,-1
  80c28c:	1dc0752e 	bgeu	r3,r23,80c464 <__udivdi3+0x540>
  80c290:	100d883a 	mov	r6,r2
  80c294:	1c63c83a 	sub	r17,r3,r17
  80c298:	900b883a 	mov	r5,r18
  80c29c:	8809883a 	mov	r4,r17
  80c2a0:	d9800015 	stw	r6,0(sp)
  80c2a4:	080cb300 	call	80cb30 <__umodsi3>
  80c2a8:	102d883a 	mov	r22,r2
  80c2ac:	8809883a 	mov	r4,r17
  80c2b0:	900b883a 	mov	r5,r18
  80c2b4:	080cacc0 	call	80cacc <__udivsi3>
  80c2b8:	b02c943a 	slli	r22,r22,16
  80c2bc:	e089383a 	mul	r4,fp,r2
  80c2c0:	843fffcc 	andi	r16,r16,65535
  80c2c4:	85a0b03a 	or	r16,r16,r22
  80c2c8:	d9800017 	ldw	r6,0(sp)
  80c2cc:	8100042e 	bgeu	r16,r4,80c2e0 <__udivdi3+0x3bc>
  80c2d0:	85e1883a 	add	r16,r16,r23
  80c2d4:	10ffffc4 	addi	r3,r2,-1
  80c2d8:	85c05e2e 	bgeu	r16,r23,80c454 <__udivdi3+0x530>
  80c2dc:	1805883a 	mov	r2,r3
  80c2e0:	300c943a 	slli	r6,r6,16
  80c2e4:	a17fffcc 	andi	r5,r20,65535
  80c2e8:	a028d43a 	srli	r20,r20,16
  80c2ec:	3084b03a 	or	r2,r6,r2
  80c2f0:	10ffffcc 	andi	r3,r2,65535
  80c2f4:	100cd43a 	srli	r6,r2,16
  80c2f8:	194f383a 	mul	r7,r3,r5
  80c2fc:	1d07383a 	mul	r3,r3,r20
  80c300:	314b383a 	mul	r5,r6,r5
  80c304:	3810d43a 	srli	r8,r7,16
  80c308:	8121c83a 	sub	r16,r16,r4
  80c30c:	1947883a 	add	r3,r3,r5
  80c310:	40c7883a 	add	r3,r8,r3
  80c314:	350d383a 	mul	r6,r6,r20
  80c318:	1940022e 	bgeu	r3,r5,80c324 <__udivdi3+0x400>
  80c31c:	01000074 	movhi	r4,1
  80c320:	310d883a 	add	r6,r6,r4
  80c324:	1828d43a 	srli	r20,r3,16
  80c328:	a18d883a 	add	r6,r20,r6
  80c32c:	81803e36 	bltu	r16,r6,80c428 <__udivdi3+0x504>
  80c330:	81803826 	beq	r16,r6,80c414 <__udivdi3+0x4f0>
  80c334:	0007883a 	mov	r3,zero
  80c338:	003fa206 	br	80c1c4 <__alt_mem_onchip_mem+0xff78c1c4>
  80c33c:	88e2983a 	sll	r17,r17,r3
  80c340:	80a8d83a 	srl	r20,r16,r2
  80c344:	80e0983a 	sll	r16,r16,r3
  80c348:	882ad43a 	srli	r21,r17,16
  80c34c:	9884d83a 	srl	r2,r19,r2
  80c350:	a009883a 	mov	r4,r20
  80c354:	a80b883a 	mov	r5,r21
  80c358:	142eb03a 	or	r23,r2,r16
  80c35c:	98e4983a 	sll	r18,r19,r3
  80c360:	080cb300 	call	80cb30 <__umodsi3>
  80c364:	a009883a 	mov	r4,r20
  80c368:	a80b883a 	mov	r5,r21
  80c36c:	1021883a 	mov	r16,r2
  80c370:	080cacc0 	call	80cacc <__udivsi3>
  80c374:	1039883a 	mov	fp,r2
  80c378:	8d3fffcc 	andi	r20,r17,65535
  80c37c:	8020943a 	slli	r16,r16,16
  80c380:	b804d43a 	srli	r2,r23,16
  80c384:	a72d383a 	mul	r22,r20,fp
  80c388:	1404b03a 	or	r2,r2,r16
  80c38c:	1580062e 	bgeu	r2,r22,80c3a8 <__udivdi3+0x484>
  80c390:	1445883a 	add	r2,r2,r17
  80c394:	e0ffffc4 	addi	r3,fp,-1
  80c398:	14403836 	bltu	r2,r17,80c47c <__udivdi3+0x558>
  80c39c:	1580372e 	bgeu	r2,r22,80c47c <__udivdi3+0x558>
  80c3a0:	e73fff84 	addi	fp,fp,-2
  80c3a4:	1445883a 	add	r2,r2,r17
  80c3a8:	15adc83a 	sub	r22,r2,r22
  80c3ac:	a80b883a 	mov	r5,r21
  80c3b0:	b009883a 	mov	r4,r22
  80c3b4:	080cb300 	call	80cb30 <__umodsi3>
  80c3b8:	1027883a 	mov	r19,r2
  80c3bc:	b009883a 	mov	r4,r22
  80c3c0:	a80b883a 	mov	r5,r21
  80c3c4:	080cacc0 	call	80cacc <__udivsi3>
  80c3c8:	9826943a 	slli	r19,r19,16
  80c3cc:	a0a1383a 	mul	r16,r20,r2
  80c3d0:	b93fffcc 	andi	r4,r23,65535
  80c3d4:	24c8b03a 	or	r4,r4,r19
  80c3d8:	2400062e 	bgeu	r4,r16,80c3f4 <__udivdi3+0x4d0>
  80c3dc:	2449883a 	add	r4,r4,r17
  80c3e0:	10ffffc4 	addi	r3,r2,-1
  80c3e4:	24402336 	bltu	r4,r17,80c474 <__udivdi3+0x550>
  80c3e8:	2400222e 	bgeu	r4,r16,80c474 <__udivdi3+0x550>
  80c3ec:	10bfff84 	addi	r2,r2,-2
  80c3f0:	2449883a 	add	r4,r4,r17
  80c3f4:	e038943a 	slli	fp,fp,16
  80c3f8:	2421c83a 	sub	r16,r4,r16
  80c3fc:	e086b03a 	or	r3,fp,r2
  80c400:	003f4306 	br	80c110 <__alt_mem_onchip_mem+0xff78c110>
  80c404:	2005883a 	mov	r2,r4
  80c408:	003f6906 	br	80c1b0 <__alt_mem_onchip_mem+0xff78c1b0>
  80c40c:	1805883a 	mov	r2,r3
  80c410:	003f0f06 	br	80c050 <__alt_mem_onchip_mem+0xff78c050>
  80c414:	1806943a 	slli	r3,r3,16
  80c418:	9d66983a 	sll	r19,r19,r21
  80c41c:	39ffffcc 	andi	r7,r7,65535
  80c420:	19c7883a 	add	r3,r3,r7
  80c424:	98ffc32e 	bgeu	r19,r3,80c334 <__alt_mem_onchip_mem+0xff78c334>
  80c428:	10bfffc4 	addi	r2,r2,-1
  80c42c:	003fc106 	br	80c334 <__alt_mem_onchip_mem+0xff78c334>
  80c430:	00800604 	movi	r2,24
  80c434:	003f1106 	br	80c07c <__alt_mem_onchip_mem+0xff78c07c>
  80c438:	00800604 	movi	r2,24
  80c43c:	003f2706 	br	80c0dc <__alt_mem_onchip_mem+0xff78c0dc>
  80c440:	00800604 	movi	r2,24
  80c444:	003ece06 	br	80bf80 <__alt_mem_onchip_mem+0xff78bf80>
  80c448:	0007883a 	mov	r3,zero
  80c44c:	00800044 	movi	r2,1
  80c450:	003f5c06 	br	80c1c4 <__alt_mem_onchip_mem+0xff78c1c4>
  80c454:	813fa12e 	bgeu	r16,r4,80c2dc <__alt_mem_onchip_mem+0xff78c2dc>
  80c458:	10bfff84 	addi	r2,r2,-2
  80c45c:	85e1883a 	add	r16,r16,r23
  80c460:	003f9f06 	br	80c2e0 <__alt_mem_onchip_mem+0xff78c2e0>
  80c464:	1c7f8a2e 	bgeu	r3,r17,80c290 <__alt_mem_onchip_mem+0xff78c290>
  80c468:	31bfff84 	addi	r6,r6,-2
  80c46c:	1dc7883a 	add	r3,r3,r23
  80c470:	003f8806 	br	80c294 <__alt_mem_onchip_mem+0xff78c294>
  80c474:	1805883a 	mov	r2,r3
  80c478:	003fde06 	br	80c3f4 <__alt_mem_onchip_mem+0xff78c3f4>
  80c47c:	1839883a 	mov	fp,r3
  80c480:	003fc906 	br	80c3a8 <__alt_mem_onchip_mem+0xff78c3a8>
  80c484:	b5bfff84 	addi	r22,r22,-2
  80c488:	2449883a 	add	r4,r4,r17
  80c48c:	003f3406 	br	80c160 <__alt_mem_onchip_mem+0xff78c160>
  80c490:	b5bfff84 	addi	r22,r22,-2
  80c494:	1445883a 	add	r2,r2,r17
  80c498:	003edb06 	br	80c008 <__alt_mem_onchip_mem+0xff78c008>

0080c49c <__umoddi3>:
  80c49c:	defff404 	addi	sp,sp,-48
  80c4a0:	df000a15 	stw	fp,40(sp)
  80c4a4:	dc400315 	stw	r17,12(sp)
  80c4a8:	dc000215 	stw	r16,8(sp)
  80c4ac:	dfc00b15 	stw	ra,44(sp)
  80c4b0:	ddc00915 	stw	r23,36(sp)
  80c4b4:	dd800815 	stw	r22,32(sp)
  80c4b8:	dd400715 	stw	r21,28(sp)
  80c4bc:	dd000615 	stw	r20,24(sp)
  80c4c0:	dcc00515 	stw	r19,20(sp)
  80c4c4:	dc800415 	stw	r18,16(sp)
  80c4c8:	2021883a 	mov	r16,r4
  80c4cc:	2823883a 	mov	r17,r5
  80c4d0:	2839883a 	mov	fp,r5
  80c4d4:	38003c1e 	bne	r7,zero,80c5c8 <__umoddi3+0x12c>
  80c4d8:	3027883a 	mov	r19,r6
  80c4dc:	2029883a 	mov	r20,r4
  80c4e0:	2980512e 	bgeu	r5,r6,80c628 <__umoddi3+0x18c>
  80c4e4:	00bfffd4 	movui	r2,65535
  80c4e8:	11809a36 	bltu	r2,r6,80c754 <__umoddi3+0x2b8>
  80c4ec:	01003fc4 	movi	r4,255
  80c4f0:	2189803a 	cmpltu	r4,r4,r6
  80c4f4:	200890fa 	slli	r4,r4,3
  80c4f8:	3104d83a 	srl	r2,r6,r4
  80c4fc:	00c02074 	movhi	r3,129
  80c500:	18cd5304 	addi	r3,r3,13644
  80c504:	1885883a 	add	r2,r3,r2
  80c508:	10c00003 	ldbu	r3,0(r2)
  80c50c:	00800804 	movi	r2,32
  80c510:	1909883a 	add	r4,r3,r4
  80c514:	1125c83a 	sub	r18,r2,r4
  80c518:	90000526 	beq	r18,zero,80c530 <__umoddi3+0x94>
  80c51c:	8ca2983a 	sll	r17,r17,r18
  80c520:	8108d83a 	srl	r4,r16,r4
  80c524:	34a6983a 	sll	r19,r6,r18
  80c528:	84a8983a 	sll	r20,r16,r18
  80c52c:	2478b03a 	or	fp,r4,r17
  80c530:	982ed43a 	srli	r23,r19,16
  80c534:	e009883a 	mov	r4,fp
  80c538:	9dbfffcc 	andi	r22,r19,65535
  80c53c:	b80b883a 	mov	r5,r23
  80c540:	080cb300 	call	80cb30 <__umodsi3>
  80c544:	e009883a 	mov	r4,fp
  80c548:	b80b883a 	mov	r5,r23
  80c54c:	102b883a 	mov	r21,r2
  80c550:	080cacc0 	call	80cacc <__udivsi3>
  80c554:	a806943a 	slli	r3,r21,16
  80c558:	a008d43a 	srli	r4,r20,16
  80c55c:	b085383a 	mul	r2,r22,r2
  80c560:	20c8b03a 	or	r4,r4,r3
  80c564:	2080032e 	bgeu	r4,r2,80c574 <__umoddi3+0xd8>
  80c568:	24c9883a 	add	r4,r4,r19
  80c56c:	24c00136 	bltu	r4,r19,80c574 <__umoddi3+0xd8>
  80c570:	20811036 	bltu	r4,r2,80c9b4 <__umoddi3+0x518>
  80c574:	20abc83a 	sub	r21,r4,r2
  80c578:	b80b883a 	mov	r5,r23
  80c57c:	a809883a 	mov	r4,r21
  80c580:	080cb300 	call	80cb30 <__umodsi3>
  80c584:	1023883a 	mov	r17,r2
  80c588:	b80b883a 	mov	r5,r23
  80c58c:	a809883a 	mov	r4,r21
  80c590:	080cacc0 	call	80cacc <__udivsi3>
  80c594:	8822943a 	slli	r17,r17,16
  80c598:	b085383a 	mul	r2,r22,r2
  80c59c:	a0ffffcc 	andi	r3,r20,65535
  80c5a0:	1c46b03a 	or	r3,r3,r17
  80c5a4:	1880042e 	bgeu	r3,r2,80c5b8 <__umoddi3+0x11c>
  80c5a8:	1cc7883a 	add	r3,r3,r19
  80c5ac:	1cc00236 	bltu	r3,r19,80c5b8 <__umoddi3+0x11c>
  80c5b0:	1880012e 	bgeu	r3,r2,80c5b8 <__umoddi3+0x11c>
  80c5b4:	1cc7883a 	add	r3,r3,r19
  80c5b8:	1885c83a 	sub	r2,r3,r2
  80c5bc:	1484d83a 	srl	r2,r2,r18
  80c5c0:	0007883a 	mov	r3,zero
  80c5c4:	00004f06 	br	80c704 <__umoddi3+0x268>
  80c5c8:	29c04c36 	bltu	r5,r7,80c6fc <__umoddi3+0x260>
  80c5cc:	00bfffd4 	movui	r2,65535
  80c5d0:	11c0582e 	bgeu	r2,r7,80c734 <__umoddi3+0x298>
  80c5d4:	00804034 	movhi	r2,256
  80c5d8:	10bfffc4 	addi	r2,r2,-1
  80c5dc:	11c0e736 	bltu	r2,r7,80c97c <__umoddi3+0x4e0>
  80c5e0:	01000404 	movi	r4,16
  80c5e4:	3904d83a 	srl	r2,r7,r4
  80c5e8:	00c02074 	movhi	r3,129
  80c5ec:	18cd5304 	addi	r3,r3,13644
  80c5f0:	1885883a 	add	r2,r3,r2
  80c5f4:	14c00003 	ldbu	r19,0(r2)
  80c5f8:	00c00804 	movi	r3,32
  80c5fc:	9927883a 	add	r19,r19,r4
  80c600:	1ce9c83a 	sub	r20,r3,r19
  80c604:	a000581e 	bne	r20,zero,80c768 <__umoddi3+0x2cc>
  80c608:	3c400136 	bltu	r7,r17,80c610 <__umoddi3+0x174>
  80c60c:	8180eb36 	bltu	r16,r6,80c9bc <__umoddi3+0x520>
  80c610:	8185c83a 	sub	r2,r16,r6
  80c614:	89e3c83a 	sub	r17,r17,r7
  80c618:	8089803a 	cmpltu	r4,r16,r2
  80c61c:	8939c83a 	sub	fp,r17,r4
  80c620:	e007883a 	mov	r3,fp
  80c624:	00003706 	br	80c704 <__umoddi3+0x268>
  80c628:	3000041e 	bne	r6,zero,80c63c <__umoddi3+0x1a0>
  80c62c:	000b883a 	mov	r5,zero
  80c630:	01000044 	movi	r4,1
  80c634:	080cacc0 	call	80cacc <__udivsi3>
  80c638:	1027883a 	mov	r19,r2
  80c63c:	00bfffd4 	movui	r2,65535
  80c640:	14c0402e 	bgeu	r2,r19,80c744 <__umoddi3+0x2a8>
  80c644:	00804034 	movhi	r2,256
  80c648:	10bfffc4 	addi	r2,r2,-1
  80c64c:	14c0cd36 	bltu	r2,r19,80c984 <__umoddi3+0x4e8>
  80c650:	00800404 	movi	r2,16
  80c654:	9886d83a 	srl	r3,r19,r2
  80c658:	01002074 	movhi	r4,129
  80c65c:	210d5304 	addi	r4,r4,13644
  80c660:	20c7883a 	add	r3,r4,r3
  80c664:	18c00003 	ldbu	r3,0(r3)
  80c668:	1887883a 	add	r3,r3,r2
  80c66c:	00800804 	movi	r2,32
  80c670:	10e5c83a 	sub	r18,r2,r3
  80c674:	9000901e 	bne	r18,zero,80c8b8 <__umoddi3+0x41c>
  80c678:	982cd43a 	srli	r22,r19,16
  80c67c:	8ce3c83a 	sub	r17,r17,r19
  80c680:	9d7fffcc 	andi	r21,r19,65535
  80c684:	b00b883a 	mov	r5,r22
  80c688:	8809883a 	mov	r4,r17
  80c68c:	080cb300 	call	80cb30 <__umodsi3>
  80c690:	8809883a 	mov	r4,r17
  80c694:	b00b883a 	mov	r5,r22
  80c698:	1021883a 	mov	r16,r2
  80c69c:	080cacc0 	call	80cacc <__udivsi3>
  80c6a0:	8006943a 	slli	r3,r16,16
  80c6a4:	a008d43a 	srli	r4,r20,16
  80c6a8:	1545383a 	mul	r2,r2,r21
  80c6ac:	20c8b03a 	or	r4,r4,r3
  80c6b0:	2080042e 	bgeu	r4,r2,80c6c4 <__umoddi3+0x228>
  80c6b4:	24c9883a 	add	r4,r4,r19
  80c6b8:	24c00236 	bltu	r4,r19,80c6c4 <__umoddi3+0x228>
  80c6bc:	2080012e 	bgeu	r4,r2,80c6c4 <__umoddi3+0x228>
  80c6c0:	24c9883a 	add	r4,r4,r19
  80c6c4:	20a1c83a 	sub	r16,r4,r2
  80c6c8:	b00b883a 	mov	r5,r22
  80c6cc:	8009883a 	mov	r4,r16
  80c6d0:	080cb300 	call	80cb30 <__umodsi3>
  80c6d4:	1023883a 	mov	r17,r2
  80c6d8:	b00b883a 	mov	r5,r22
  80c6dc:	8009883a 	mov	r4,r16
  80c6e0:	080cacc0 	call	80cacc <__udivsi3>
  80c6e4:	8822943a 	slli	r17,r17,16
  80c6e8:	1545383a 	mul	r2,r2,r21
  80c6ec:	a53fffcc 	andi	r20,r20,65535
  80c6f0:	a446b03a 	or	r3,r20,r17
  80c6f4:	18bfb02e 	bgeu	r3,r2,80c5b8 <__alt_mem_onchip_mem+0xff78c5b8>
  80c6f8:	003fab06 	br	80c5a8 <__alt_mem_onchip_mem+0xff78c5a8>
  80c6fc:	2005883a 	mov	r2,r4
  80c700:	2807883a 	mov	r3,r5
  80c704:	dfc00b17 	ldw	ra,44(sp)
  80c708:	df000a17 	ldw	fp,40(sp)
  80c70c:	ddc00917 	ldw	r23,36(sp)
  80c710:	dd800817 	ldw	r22,32(sp)
  80c714:	dd400717 	ldw	r21,28(sp)
  80c718:	dd000617 	ldw	r20,24(sp)
  80c71c:	dcc00517 	ldw	r19,20(sp)
  80c720:	dc800417 	ldw	r18,16(sp)
  80c724:	dc400317 	ldw	r17,12(sp)
  80c728:	dc000217 	ldw	r16,8(sp)
  80c72c:	dec00c04 	addi	sp,sp,48
  80c730:	f800283a 	ret
  80c734:	04c03fc4 	movi	r19,255
  80c738:	99c9803a 	cmpltu	r4,r19,r7
  80c73c:	200890fa 	slli	r4,r4,3
  80c740:	003fa806 	br	80c5e4 <__alt_mem_onchip_mem+0xff78c5e4>
  80c744:	00803fc4 	movi	r2,255
  80c748:	14c5803a 	cmpltu	r2,r2,r19
  80c74c:	100490fa 	slli	r2,r2,3
  80c750:	003fc006 	br	80c654 <__alt_mem_onchip_mem+0xff78c654>
  80c754:	00804034 	movhi	r2,256
  80c758:	10bfffc4 	addi	r2,r2,-1
  80c75c:	11808b36 	bltu	r2,r6,80c98c <__umoddi3+0x4f0>
  80c760:	01000404 	movi	r4,16
  80c764:	003f6406 	br	80c4f8 <__alt_mem_onchip_mem+0xff78c4f8>
  80c768:	34c4d83a 	srl	r2,r6,r19
  80c76c:	3d0e983a 	sll	r7,r7,r20
  80c770:	8cf8d83a 	srl	fp,r17,r19
  80c774:	8d10983a 	sll	r8,r17,r20
  80c778:	38aab03a 	or	r21,r7,r2
  80c77c:	a82cd43a 	srli	r22,r21,16
  80c780:	84e2d83a 	srl	r17,r16,r19
  80c784:	e009883a 	mov	r4,fp
  80c788:	b00b883a 	mov	r5,r22
  80c78c:	8a22b03a 	or	r17,r17,r8
  80c790:	3524983a 	sll	r18,r6,r20
  80c794:	080cb300 	call	80cb30 <__umodsi3>
  80c798:	e009883a 	mov	r4,fp
  80c79c:	b00b883a 	mov	r5,r22
  80c7a0:	102f883a 	mov	r23,r2
  80c7a4:	080cacc0 	call	80cacc <__udivsi3>
  80c7a8:	100d883a 	mov	r6,r2
  80c7ac:	b808943a 	slli	r4,r23,16
  80c7b0:	aa3fffcc 	andi	r8,r21,65535
  80c7b4:	8804d43a 	srli	r2,r17,16
  80c7b8:	41af383a 	mul	r23,r8,r6
  80c7bc:	8520983a 	sll	r16,r16,r20
  80c7c0:	1104b03a 	or	r2,r2,r4
  80c7c4:	15c0042e 	bgeu	r2,r23,80c7d8 <__umoddi3+0x33c>
  80c7c8:	1545883a 	add	r2,r2,r21
  80c7cc:	30ffffc4 	addi	r3,r6,-1
  80c7d0:	1540742e 	bgeu	r2,r21,80c9a4 <__umoddi3+0x508>
  80c7d4:	180d883a 	mov	r6,r3
  80c7d8:	15efc83a 	sub	r23,r2,r23
  80c7dc:	b00b883a 	mov	r5,r22
  80c7e0:	b809883a 	mov	r4,r23
  80c7e4:	d9800115 	stw	r6,4(sp)
  80c7e8:	da000015 	stw	r8,0(sp)
  80c7ec:	080cb300 	call	80cb30 <__umodsi3>
  80c7f0:	b00b883a 	mov	r5,r22
  80c7f4:	b809883a 	mov	r4,r23
  80c7f8:	1039883a 	mov	fp,r2
  80c7fc:	080cacc0 	call	80cacc <__udivsi3>
  80c800:	da000017 	ldw	r8,0(sp)
  80c804:	e038943a 	slli	fp,fp,16
  80c808:	100b883a 	mov	r5,r2
  80c80c:	4089383a 	mul	r4,r8,r2
  80c810:	8a3fffcc 	andi	r8,r17,65535
  80c814:	4710b03a 	or	r8,r8,fp
  80c818:	d9800117 	ldw	r6,4(sp)
  80c81c:	4100042e 	bgeu	r8,r4,80c830 <__umoddi3+0x394>
  80c820:	4551883a 	add	r8,r8,r21
  80c824:	10bfffc4 	addi	r2,r2,-1
  80c828:	45405a2e 	bgeu	r8,r21,80c994 <__umoddi3+0x4f8>
  80c82c:	100b883a 	mov	r5,r2
  80c830:	300c943a 	slli	r6,r6,16
  80c834:	91ffffcc 	andi	r7,r18,65535
  80c838:	9004d43a 	srli	r2,r18,16
  80c83c:	314cb03a 	or	r6,r6,r5
  80c840:	317fffcc 	andi	r5,r6,65535
  80c844:	300cd43a 	srli	r6,r6,16
  80c848:	29d3383a 	mul	r9,r5,r7
  80c84c:	288b383a 	mul	r5,r5,r2
  80c850:	31cf383a 	mul	r7,r6,r7
  80c854:	4806d43a 	srli	r3,r9,16
  80c858:	4111c83a 	sub	r8,r8,r4
  80c85c:	29cb883a 	add	r5,r5,r7
  80c860:	194b883a 	add	r5,r3,r5
  80c864:	3085383a 	mul	r2,r6,r2
  80c868:	29c0022e 	bgeu	r5,r7,80c874 <__umoddi3+0x3d8>
  80c86c:	00c00074 	movhi	r3,1
  80c870:	10c5883a 	add	r2,r2,r3
  80c874:	2808d43a 	srli	r4,r5,16
  80c878:	280a943a 	slli	r5,r5,16
  80c87c:	4a7fffcc 	andi	r9,r9,65535
  80c880:	2085883a 	add	r2,r4,r2
  80c884:	2a4b883a 	add	r5,r5,r9
  80c888:	40803636 	bltu	r8,r2,80c964 <__umoddi3+0x4c8>
  80c88c:	40804d26 	beq	r8,r2,80c9c4 <__umoddi3+0x528>
  80c890:	4089c83a 	sub	r4,r8,r2
  80c894:	280f883a 	mov	r7,r5
  80c898:	81cfc83a 	sub	r7,r16,r7
  80c89c:	81c7803a 	cmpltu	r3,r16,r7
  80c8a0:	20c7c83a 	sub	r3,r4,r3
  80c8a4:	1cc4983a 	sll	r2,r3,r19
  80c8a8:	3d0ed83a 	srl	r7,r7,r20
  80c8ac:	1d06d83a 	srl	r3,r3,r20
  80c8b0:	11c4b03a 	or	r2,r2,r7
  80c8b4:	003f9306 	br	80c704 <__alt_mem_onchip_mem+0xff78c704>
  80c8b8:	9ca6983a 	sll	r19,r19,r18
  80c8bc:	88e8d83a 	srl	r20,r17,r3
  80c8c0:	80c4d83a 	srl	r2,r16,r3
  80c8c4:	982cd43a 	srli	r22,r19,16
  80c8c8:	8ca2983a 	sll	r17,r17,r18
  80c8cc:	a009883a 	mov	r4,r20
  80c8d0:	b00b883a 	mov	r5,r22
  80c8d4:	1478b03a 	or	fp,r2,r17
  80c8d8:	080cb300 	call	80cb30 <__umodsi3>
  80c8dc:	a009883a 	mov	r4,r20
  80c8e0:	b00b883a 	mov	r5,r22
  80c8e4:	1023883a 	mov	r17,r2
  80c8e8:	080cacc0 	call	80cacc <__udivsi3>
  80c8ec:	9d7fffcc 	andi	r21,r19,65535
  80c8f0:	880a943a 	slli	r5,r17,16
  80c8f4:	e008d43a 	srli	r4,fp,16
  80c8f8:	a885383a 	mul	r2,r21,r2
  80c8fc:	84a8983a 	sll	r20,r16,r18
  80c900:	2148b03a 	or	r4,r4,r5
  80c904:	2080042e 	bgeu	r4,r2,80c918 <__umoddi3+0x47c>
  80c908:	24c9883a 	add	r4,r4,r19
  80c90c:	24c00236 	bltu	r4,r19,80c918 <__umoddi3+0x47c>
  80c910:	2080012e 	bgeu	r4,r2,80c918 <__umoddi3+0x47c>
  80c914:	24c9883a 	add	r4,r4,r19
  80c918:	20a3c83a 	sub	r17,r4,r2
  80c91c:	b00b883a 	mov	r5,r22
  80c920:	8809883a 	mov	r4,r17
  80c924:	080cb300 	call	80cb30 <__umodsi3>
  80c928:	102f883a 	mov	r23,r2
  80c92c:	8809883a 	mov	r4,r17
  80c930:	b00b883a 	mov	r5,r22
  80c934:	080cacc0 	call	80cacc <__udivsi3>
  80c938:	b82e943a 	slli	r23,r23,16
  80c93c:	a885383a 	mul	r2,r21,r2
  80c940:	e13fffcc 	andi	r4,fp,65535
  80c944:	25c8b03a 	or	r4,r4,r23
  80c948:	2080042e 	bgeu	r4,r2,80c95c <__umoddi3+0x4c0>
  80c94c:	24c9883a 	add	r4,r4,r19
  80c950:	24c00236 	bltu	r4,r19,80c95c <__umoddi3+0x4c0>
  80c954:	2080012e 	bgeu	r4,r2,80c95c <__umoddi3+0x4c0>
  80c958:	24c9883a 	add	r4,r4,r19
  80c95c:	20a3c83a 	sub	r17,r4,r2
  80c960:	003f4806 	br	80c684 <__alt_mem_onchip_mem+0xff78c684>
  80c964:	2c8fc83a 	sub	r7,r5,r18
  80c968:	1545c83a 	sub	r2,r2,r21
  80c96c:	29cb803a 	cmpltu	r5,r5,r7
  80c970:	1145c83a 	sub	r2,r2,r5
  80c974:	4089c83a 	sub	r4,r8,r2
  80c978:	003fc706 	br	80c898 <__alt_mem_onchip_mem+0xff78c898>
  80c97c:	01000604 	movi	r4,24
  80c980:	003f1806 	br	80c5e4 <__alt_mem_onchip_mem+0xff78c5e4>
  80c984:	00800604 	movi	r2,24
  80c988:	003f3206 	br	80c654 <__alt_mem_onchip_mem+0xff78c654>
  80c98c:	01000604 	movi	r4,24
  80c990:	003ed906 	br	80c4f8 <__alt_mem_onchip_mem+0xff78c4f8>
  80c994:	413fa52e 	bgeu	r8,r4,80c82c <__alt_mem_onchip_mem+0xff78c82c>
  80c998:	297fff84 	addi	r5,r5,-2
  80c99c:	4551883a 	add	r8,r8,r21
  80c9a0:	003fa306 	br	80c830 <__alt_mem_onchip_mem+0xff78c830>
  80c9a4:	15ff8b2e 	bgeu	r2,r23,80c7d4 <__alt_mem_onchip_mem+0xff78c7d4>
  80c9a8:	31bfff84 	addi	r6,r6,-2
  80c9ac:	1545883a 	add	r2,r2,r21
  80c9b0:	003f8906 	br	80c7d8 <__alt_mem_onchip_mem+0xff78c7d8>
  80c9b4:	24c9883a 	add	r4,r4,r19
  80c9b8:	003eee06 	br	80c574 <__alt_mem_onchip_mem+0xff78c574>
  80c9bc:	8005883a 	mov	r2,r16
  80c9c0:	003f1706 	br	80c620 <__alt_mem_onchip_mem+0xff78c620>
  80c9c4:	817fe736 	bltu	r16,r5,80c964 <__alt_mem_onchip_mem+0xff78c964>
  80c9c8:	280f883a 	mov	r7,r5
  80c9cc:	0009883a 	mov	r4,zero
  80c9d0:	003fb106 	br	80c898 <__alt_mem_onchip_mem+0xff78c898>

0080c9d4 <__divsi3>:
  80c9d4:	20001b16 	blt	r4,zero,80ca44 <__divsi3+0x70>
  80c9d8:	000f883a 	mov	r7,zero
  80c9dc:	28001616 	blt	r5,zero,80ca38 <__divsi3+0x64>
  80c9e0:	200d883a 	mov	r6,r4
  80c9e4:	29001a2e 	bgeu	r5,r4,80ca50 <__divsi3+0x7c>
  80c9e8:	00800804 	movi	r2,32
  80c9ec:	00c00044 	movi	r3,1
  80c9f0:	00000106 	br	80c9f8 <__divsi3+0x24>
  80c9f4:	10000d26 	beq	r2,zero,80ca2c <__divsi3+0x58>
  80c9f8:	294b883a 	add	r5,r5,r5
  80c9fc:	10bfffc4 	addi	r2,r2,-1
  80ca00:	18c7883a 	add	r3,r3,r3
  80ca04:	293ffb36 	bltu	r5,r4,80c9f4 <__alt_mem_onchip_mem+0xff78c9f4>
  80ca08:	0005883a 	mov	r2,zero
  80ca0c:	18000726 	beq	r3,zero,80ca2c <__divsi3+0x58>
  80ca10:	0005883a 	mov	r2,zero
  80ca14:	31400236 	bltu	r6,r5,80ca20 <__divsi3+0x4c>
  80ca18:	314dc83a 	sub	r6,r6,r5
  80ca1c:	10c4b03a 	or	r2,r2,r3
  80ca20:	1806d07a 	srli	r3,r3,1
  80ca24:	280ad07a 	srli	r5,r5,1
  80ca28:	183ffa1e 	bne	r3,zero,80ca14 <__alt_mem_onchip_mem+0xff78ca14>
  80ca2c:	38000126 	beq	r7,zero,80ca34 <__divsi3+0x60>
  80ca30:	0085c83a 	sub	r2,zero,r2
  80ca34:	f800283a 	ret
  80ca38:	014bc83a 	sub	r5,zero,r5
  80ca3c:	39c0005c 	xori	r7,r7,1
  80ca40:	003fe706 	br	80c9e0 <__alt_mem_onchip_mem+0xff78c9e0>
  80ca44:	0109c83a 	sub	r4,zero,r4
  80ca48:	01c00044 	movi	r7,1
  80ca4c:	003fe306 	br	80c9dc <__alt_mem_onchip_mem+0xff78c9dc>
  80ca50:	00c00044 	movi	r3,1
  80ca54:	003fee06 	br	80ca10 <__alt_mem_onchip_mem+0xff78ca10>

0080ca58 <__modsi3>:
  80ca58:	20001716 	blt	r4,zero,80cab8 <__modsi3+0x60>
  80ca5c:	000f883a 	mov	r7,zero
  80ca60:	2005883a 	mov	r2,r4
  80ca64:	28001216 	blt	r5,zero,80cab0 <__modsi3+0x58>
  80ca68:	2900162e 	bgeu	r5,r4,80cac4 <__modsi3+0x6c>
  80ca6c:	01800804 	movi	r6,32
  80ca70:	00c00044 	movi	r3,1
  80ca74:	00000106 	br	80ca7c <__modsi3+0x24>
  80ca78:	30000a26 	beq	r6,zero,80caa4 <__modsi3+0x4c>
  80ca7c:	294b883a 	add	r5,r5,r5
  80ca80:	31bfffc4 	addi	r6,r6,-1
  80ca84:	18c7883a 	add	r3,r3,r3
  80ca88:	293ffb36 	bltu	r5,r4,80ca78 <__alt_mem_onchip_mem+0xff78ca78>
  80ca8c:	18000526 	beq	r3,zero,80caa4 <__modsi3+0x4c>
  80ca90:	1806d07a 	srli	r3,r3,1
  80ca94:	11400136 	bltu	r2,r5,80ca9c <__modsi3+0x44>
  80ca98:	1145c83a 	sub	r2,r2,r5
  80ca9c:	280ad07a 	srli	r5,r5,1
  80caa0:	183ffb1e 	bne	r3,zero,80ca90 <__alt_mem_onchip_mem+0xff78ca90>
  80caa4:	38000126 	beq	r7,zero,80caac <__modsi3+0x54>
  80caa8:	0085c83a 	sub	r2,zero,r2
  80caac:	f800283a 	ret
  80cab0:	014bc83a 	sub	r5,zero,r5
  80cab4:	003fec06 	br	80ca68 <__alt_mem_onchip_mem+0xff78ca68>
  80cab8:	0109c83a 	sub	r4,zero,r4
  80cabc:	01c00044 	movi	r7,1
  80cac0:	003fe706 	br	80ca60 <__alt_mem_onchip_mem+0xff78ca60>
  80cac4:	00c00044 	movi	r3,1
  80cac8:	003ff106 	br	80ca90 <__alt_mem_onchip_mem+0xff78ca90>

0080cacc <__udivsi3>:
  80cacc:	200d883a 	mov	r6,r4
  80cad0:	2900152e 	bgeu	r5,r4,80cb28 <__udivsi3+0x5c>
  80cad4:	28001416 	blt	r5,zero,80cb28 <__udivsi3+0x5c>
  80cad8:	00800804 	movi	r2,32
  80cadc:	00c00044 	movi	r3,1
  80cae0:	00000206 	br	80caec <__udivsi3+0x20>
  80cae4:	10000e26 	beq	r2,zero,80cb20 <__udivsi3+0x54>
  80cae8:	28000516 	blt	r5,zero,80cb00 <__udivsi3+0x34>
  80caec:	294b883a 	add	r5,r5,r5
  80caf0:	10bfffc4 	addi	r2,r2,-1
  80caf4:	18c7883a 	add	r3,r3,r3
  80caf8:	293ffa36 	bltu	r5,r4,80cae4 <__alt_mem_onchip_mem+0xff78cae4>
  80cafc:	18000826 	beq	r3,zero,80cb20 <__udivsi3+0x54>
  80cb00:	0005883a 	mov	r2,zero
  80cb04:	31400236 	bltu	r6,r5,80cb10 <__udivsi3+0x44>
  80cb08:	314dc83a 	sub	r6,r6,r5
  80cb0c:	10c4b03a 	or	r2,r2,r3
  80cb10:	1806d07a 	srli	r3,r3,1
  80cb14:	280ad07a 	srli	r5,r5,1
  80cb18:	183ffa1e 	bne	r3,zero,80cb04 <__alt_mem_onchip_mem+0xff78cb04>
  80cb1c:	f800283a 	ret
  80cb20:	0005883a 	mov	r2,zero
  80cb24:	f800283a 	ret
  80cb28:	00c00044 	movi	r3,1
  80cb2c:	003ff406 	br	80cb00 <__alt_mem_onchip_mem+0xff78cb00>

0080cb30 <__umodsi3>:
  80cb30:	2005883a 	mov	r2,r4
  80cb34:	2900122e 	bgeu	r5,r4,80cb80 <__umodsi3+0x50>
  80cb38:	28001116 	blt	r5,zero,80cb80 <__umodsi3+0x50>
  80cb3c:	01800804 	movi	r6,32
  80cb40:	00c00044 	movi	r3,1
  80cb44:	00000206 	br	80cb50 <__umodsi3+0x20>
  80cb48:	30000c26 	beq	r6,zero,80cb7c <__umodsi3+0x4c>
  80cb4c:	28000516 	blt	r5,zero,80cb64 <__umodsi3+0x34>
  80cb50:	294b883a 	add	r5,r5,r5
  80cb54:	31bfffc4 	addi	r6,r6,-1
  80cb58:	18c7883a 	add	r3,r3,r3
  80cb5c:	293ffa36 	bltu	r5,r4,80cb48 <__alt_mem_onchip_mem+0xff78cb48>
  80cb60:	18000626 	beq	r3,zero,80cb7c <__umodsi3+0x4c>
  80cb64:	1806d07a 	srli	r3,r3,1
  80cb68:	11400136 	bltu	r2,r5,80cb70 <__umodsi3+0x40>
  80cb6c:	1145c83a 	sub	r2,r2,r5
  80cb70:	280ad07a 	srli	r5,r5,1
  80cb74:	183ffb1e 	bne	r3,zero,80cb64 <__alt_mem_onchip_mem+0xff78cb64>
  80cb78:	f800283a 	ret
  80cb7c:	f800283a 	ret
  80cb80:	00c00044 	movi	r3,1
  80cb84:	003ff706 	br	80cb64 <__alt_mem_onchip_mem+0xff78cb64>

0080cb88 <__adddf3>:
  80cb88:	02c00434 	movhi	r11,16
  80cb8c:	5affffc4 	addi	r11,r11,-1
  80cb90:	2806d7fa 	srli	r3,r5,31
  80cb94:	2ad4703a 	and	r10,r5,r11
  80cb98:	3ad2703a 	and	r9,r7,r11
  80cb9c:	3804d53a 	srli	r2,r7,20
  80cba0:	3018d77a 	srli	r12,r6,29
  80cba4:	280ad53a 	srli	r5,r5,20
  80cba8:	501490fa 	slli	r10,r10,3
  80cbac:	2010d77a 	srli	r8,r4,29
  80cbb0:	481290fa 	slli	r9,r9,3
  80cbb4:	380ed7fa 	srli	r7,r7,31
  80cbb8:	defffb04 	addi	sp,sp,-20
  80cbbc:	dc800215 	stw	r18,8(sp)
  80cbc0:	dc400115 	stw	r17,4(sp)
  80cbc4:	dc000015 	stw	r16,0(sp)
  80cbc8:	dfc00415 	stw	ra,16(sp)
  80cbcc:	dcc00315 	stw	r19,12(sp)
  80cbd0:	1c803fcc 	andi	r18,r3,255
  80cbd4:	2c01ffcc 	andi	r16,r5,2047
  80cbd8:	5210b03a 	or	r8,r10,r8
  80cbdc:	202290fa 	slli	r17,r4,3
  80cbe0:	1081ffcc 	andi	r2,r2,2047
  80cbe4:	4b12b03a 	or	r9,r9,r12
  80cbe8:	300c90fa 	slli	r6,r6,3
  80cbec:	91c07526 	beq	r18,r7,80cdc4 <__adddf3+0x23c>
  80cbf0:	8087c83a 	sub	r3,r16,r2
  80cbf4:	00c0ab0e 	bge	zero,r3,80cea4 <__adddf3+0x31c>
  80cbf8:	10002a1e 	bne	r2,zero,80cca4 <__adddf3+0x11c>
  80cbfc:	4984b03a 	or	r2,r9,r6
  80cc00:	1000961e 	bne	r2,zero,80ce5c <__adddf3+0x2d4>
  80cc04:	888001cc 	andi	r2,r17,7
  80cc08:	10000726 	beq	r2,zero,80cc28 <__adddf3+0xa0>
  80cc0c:	888003cc 	andi	r2,r17,15
  80cc10:	00c00104 	movi	r3,4
  80cc14:	10c00426 	beq	r2,r3,80cc28 <__adddf3+0xa0>
  80cc18:	88c7883a 	add	r3,r17,r3
  80cc1c:	1c63803a 	cmpltu	r17,r3,r17
  80cc20:	4451883a 	add	r8,r8,r17
  80cc24:	1823883a 	mov	r17,r3
  80cc28:	4080202c 	andhi	r2,r8,128
  80cc2c:	10005926 	beq	r2,zero,80cd94 <__adddf3+0x20c>
  80cc30:	84000044 	addi	r16,r16,1
  80cc34:	0081ffc4 	movi	r2,2047
  80cc38:	8080ba26 	beq	r16,r2,80cf24 <__adddf3+0x39c>
  80cc3c:	00bfe034 	movhi	r2,65408
  80cc40:	10bfffc4 	addi	r2,r2,-1
  80cc44:	4090703a 	and	r8,r8,r2
  80cc48:	4004977a 	slli	r2,r8,29
  80cc4c:	4010927a 	slli	r8,r8,9
  80cc50:	8822d0fa 	srli	r17,r17,3
  80cc54:	8401ffcc 	andi	r16,r16,2047
  80cc58:	4010d33a 	srli	r8,r8,12
  80cc5c:	9007883a 	mov	r3,r18
  80cc60:	1444b03a 	or	r2,r2,r17
  80cc64:	8401ffcc 	andi	r16,r16,2047
  80cc68:	8020953a 	slli	r16,r16,20
  80cc6c:	18c03fcc 	andi	r3,r3,255
  80cc70:	01000434 	movhi	r4,16
  80cc74:	213fffc4 	addi	r4,r4,-1
  80cc78:	180697fa 	slli	r3,r3,31
  80cc7c:	4110703a 	and	r8,r8,r4
  80cc80:	4410b03a 	or	r8,r8,r16
  80cc84:	40c6b03a 	or	r3,r8,r3
  80cc88:	dfc00417 	ldw	ra,16(sp)
  80cc8c:	dcc00317 	ldw	r19,12(sp)
  80cc90:	dc800217 	ldw	r18,8(sp)
  80cc94:	dc400117 	ldw	r17,4(sp)
  80cc98:	dc000017 	ldw	r16,0(sp)
  80cc9c:	dec00504 	addi	sp,sp,20
  80cca0:	f800283a 	ret
  80cca4:	0081ffc4 	movi	r2,2047
  80cca8:	80bfd626 	beq	r16,r2,80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80ccac:	4a402034 	orhi	r9,r9,128
  80ccb0:	00800e04 	movi	r2,56
  80ccb4:	10c09f16 	blt	r2,r3,80cf34 <__adddf3+0x3ac>
  80ccb8:	008007c4 	movi	r2,31
  80ccbc:	10c0c216 	blt	r2,r3,80cfc8 <__adddf3+0x440>
  80ccc0:	00800804 	movi	r2,32
  80ccc4:	10c5c83a 	sub	r2,r2,r3
  80ccc8:	488a983a 	sll	r5,r9,r2
  80cccc:	30c8d83a 	srl	r4,r6,r3
  80ccd0:	3084983a 	sll	r2,r6,r2
  80ccd4:	48c6d83a 	srl	r3,r9,r3
  80ccd8:	290cb03a 	or	r6,r5,r4
  80ccdc:	1004c03a 	cmpne	r2,r2,zero
  80cce0:	308cb03a 	or	r6,r6,r2
  80cce4:	898dc83a 	sub	r6,r17,r6
  80cce8:	89a3803a 	cmpltu	r17,r17,r6
  80ccec:	40d1c83a 	sub	r8,r8,r3
  80ccf0:	4451c83a 	sub	r8,r8,r17
  80ccf4:	3023883a 	mov	r17,r6
  80ccf8:	4080202c 	andhi	r2,r8,128
  80ccfc:	10002326 	beq	r2,zero,80cd8c <__adddf3+0x204>
  80cd00:	04c02034 	movhi	r19,128
  80cd04:	9cffffc4 	addi	r19,r19,-1
  80cd08:	44e6703a 	and	r19,r8,r19
  80cd0c:	98007626 	beq	r19,zero,80cee8 <__adddf3+0x360>
  80cd10:	9809883a 	mov	r4,r19
  80cd14:	080f18c0 	call	80f18c <__clzsi2>
  80cd18:	10fffe04 	addi	r3,r2,-8
  80cd1c:	010007c4 	movi	r4,31
  80cd20:	20c07716 	blt	r4,r3,80cf00 <__adddf3+0x378>
  80cd24:	00800804 	movi	r2,32
  80cd28:	10c5c83a 	sub	r2,r2,r3
  80cd2c:	8884d83a 	srl	r2,r17,r2
  80cd30:	98d0983a 	sll	r8,r19,r3
  80cd34:	88e2983a 	sll	r17,r17,r3
  80cd38:	1204b03a 	or	r2,r2,r8
  80cd3c:	1c007416 	blt	r3,r16,80cf10 <__adddf3+0x388>
  80cd40:	1c21c83a 	sub	r16,r3,r16
  80cd44:	82000044 	addi	r8,r16,1
  80cd48:	00c007c4 	movi	r3,31
  80cd4c:	1a009116 	blt	r3,r8,80cf94 <__adddf3+0x40c>
  80cd50:	00c00804 	movi	r3,32
  80cd54:	1a07c83a 	sub	r3,r3,r8
  80cd58:	8a08d83a 	srl	r4,r17,r8
  80cd5c:	88e2983a 	sll	r17,r17,r3
  80cd60:	10c6983a 	sll	r3,r2,r3
  80cd64:	1210d83a 	srl	r8,r2,r8
  80cd68:	8804c03a 	cmpne	r2,r17,zero
  80cd6c:	1906b03a 	or	r3,r3,r4
  80cd70:	18a2b03a 	or	r17,r3,r2
  80cd74:	0021883a 	mov	r16,zero
  80cd78:	003fa206 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80cd7c:	1890b03a 	or	r8,r3,r2
  80cd80:	40017d26 	beq	r8,zero,80d378 <__adddf3+0x7f0>
  80cd84:	1011883a 	mov	r8,r2
  80cd88:	1823883a 	mov	r17,r3
  80cd8c:	888001cc 	andi	r2,r17,7
  80cd90:	103f9e1e 	bne	r2,zero,80cc0c <__alt_mem_onchip_mem+0xff78cc0c>
  80cd94:	4004977a 	slli	r2,r8,29
  80cd98:	8822d0fa 	srli	r17,r17,3
  80cd9c:	4010d0fa 	srli	r8,r8,3
  80cda0:	9007883a 	mov	r3,r18
  80cda4:	1444b03a 	or	r2,r2,r17
  80cda8:	0101ffc4 	movi	r4,2047
  80cdac:	81002426 	beq	r16,r4,80ce40 <__adddf3+0x2b8>
  80cdb0:	8120703a 	and	r16,r16,r4
  80cdb4:	01000434 	movhi	r4,16
  80cdb8:	213fffc4 	addi	r4,r4,-1
  80cdbc:	4110703a 	and	r8,r8,r4
  80cdc0:	003fa806 	br	80cc64 <__alt_mem_onchip_mem+0xff78cc64>
  80cdc4:	8089c83a 	sub	r4,r16,r2
  80cdc8:	01005e0e 	bge	zero,r4,80cf44 <__adddf3+0x3bc>
  80cdcc:	10002b26 	beq	r2,zero,80ce7c <__adddf3+0x2f4>
  80cdd0:	0081ffc4 	movi	r2,2047
  80cdd4:	80bf8b26 	beq	r16,r2,80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80cdd8:	4a402034 	orhi	r9,r9,128
  80cddc:	00800e04 	movi	r2,56
  80cde0:	1100a40e 	bge	r2,r4,80d074 <__adddf3+0x4ec>
  80cde4:	498cb03a 	or	r6,r9,r6
  80cde8:	300ac03a 	cmpne	r5,r6,zero
  80cdec:	0013883a 	mov	r9,zero
  80cdf0:	2c4b883a 	add	r5,r5,r17
  80cdf4:	2c63803a 	cmpltu	r17,r5,r17
  80cdf8:	4a11883a 	add	r8,r9,r8
  80cdfc:	8a11883a 	add	r8,r17,r8
  80ce00:	2823883a 	mov	r17,r5
  80ce04:	4080202c 	andhi	r2,r8,128
  80ce08:	103fe026 	beq	r2,zero,80cd8c <__alt_mem_onchip_mem+0xff78cd8c>
  80ce0c:	84000044 	addi	r16,r16,1
  80ce10:	0081ffc4 	movi	r2,2047
  80ce14:	8080d226 	beq	r16,r2,80d160 <__adddf3+0x5d8>
  80ce18:	00bfe034 	movhi	r2,65408
  80ce1c:	10bfffc4 	addi	r2,r2,-1
  80ce20:	4090703a 	and	r8,r8,r2
  80ce24:	880ad07a 	srli	r5,r17,1
  80ce28:	400897fa 	slli	r4,r8,31
  80ce2c:	88c0004c 	andi	r3,r17,1
  80ce30:	28e2b03a 	or	r17,r5,r3
  80ce34:	4010d07a 	srli	r8,r8,1
  80ce38:	2462b03a 	or	r17,r4,r17
  80ce3c:	003f7106 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80ce40:	4088b03a 	or	r4,r8,r2
  80ce44:	20014526 	beq	r4,zero,80d35c <__adddf3+0x7d4>
  80ce48:	01000434 	movhi	r4,16
  80ce4c:	42000234 	orhi	r8,r8,8
  80ce50:	213fffc4 	addi	r4,r4,-1
  80ce54:	4110703a 	and	r8,r8,r4
  80ce58:	003f8206 	br	80cc64 <__alt_mem_onchip_mem+0xff78cc64>
  80ce5c:	18ffffc4 	addi	r3,r3,-1
  80ce60:	1800491e 	bne	r3,zero,80cf88 <__adddf3+0x400>
  80ce64:	898bc83a 	sub	r5,r17,r6
  80ce68:	8963803a 	cmpltu	r17,r17,r5
  80ce6c:	4251c83a 	sub	r8,r8,r9
  80ce70:	4451c83a 	sub	r8,r8,r17
  80ce74:	2823883a 	mov	r17,r5
  80ce78:	003f9f06 	br	80ccf8 <__alt_mem_onchip_mem+0xff78ccf8>
  80ce7c:	4984b03a 	or	r2,r9,r6
  80ce80:	103f6026 	beq	r2,zero,80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80ce84:	213fffc4 	addi	r4,r4,-1
  80ce88:	2000931e 	bne	r4,zero,80d0d8 <__adddf3+0x550>
  80ce8c:	898d883a 	add	r6,r17,r6
  80ce90:	3463803a 	cmpltu	r17,r6,r17
  80ce94:	4251883a 	add	r8,r8,r9
  80ce98:	8a11883a 	add	r8,r17,r8
  80ce9c:	3023883a 	mov	r17,r6
  80cea0:	003fd806 	br	80ce04 <__alt_mem_onchip_mem+0xff78ce04>
  80cea4:	1800541e 	bne	r3,zero,80cff8 <__adddf3+0x470>
  80cea8:	80800044 	addi	r2,r16,1
  80ceac:	1081ffcc 	andi	r2,r2,2047
  80ceb0:	00c00044 	movi	r3,1
  80ceb4:	1880a00e 	bge	r3,r2,80d138 <__adddf3+0x5b0>
  80ceb8:	8989c83a 	sub	r4,r17,r6
  80cebc:	8905803a 	cmpltu	r2,r17,r4
  80cec0:	4267c83a 	sub	r19,r8,r9
  80cec4:	98a7c83a 	sub	r19,r19,r2
  80cec8:	9880202c 	andhi	r2,r19,128
  80cecc:	10006326 	beq	r2,zero,80d05c <__adddf3+0x4d4>
  80ced0:	3463c83a 	sub	r17,r6,r17
  80ced4:	4a07c83a 	sub	r3,r9,r8
  80ced8:	344d803a 	cmpltu	r6,r6,r17
  80cedc:	19a7c83a 	sub	r19,r3,r6
  80cee0:	3825883a 	mov	r18,r7
  80cee4:	983f8a1e 	bne	r19,zero,80cd10 <__alt_mem_onchip_mem+0xff78cd10>
  80cee8:	8809883a 	mov	r4,r17
  80ceec:	080f18c0 	call	80f18c <__clzsi2>
  80cef0:	10800804 	addi	r2,r2,32
  80cef4:	10fffe04 	addi	r3,r2,-8
  80cef8:	010007c4 	movi	r4,31
  80cefc:	20ff890e 	bge	r4,r3,80cd24 <__alt_mem_onchip_mem+0xff78cd24>
  80cf00:	10bff604 	addi	r2,r2,-40
  80cf04:	8884983a 	sll	r2,r17,r2
  80cf08:	0023883a 	mov	r17,zero
  80cf0c:	1c3f8c0e 	bge	r3,r16,80cd40 <__alt_mem_onchip_mem+0xff78cd40>
  80cf10:	023fe034 	movhi	r8,65408
  80cf14:	423fffc4 	addi	r8,r8,-1
  80cf18:	80e1c83a 	sub	r16,r16,r3
  80cf1c:	1210703a 	and	r8,r2,r8
  80cf20:	003f3806 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80cf24:	9007883a 	mov	r3,r18
  80cf28:	0011883a 	mov	r8,zero
  80cf2c:	0005883a 	mov	r2,zero
  80cf30:	003f4c06 	br	80cc64 <__alt_mem_onchip_mem+0xff78cc64>
  80cf34:	498cb03a 	or	r6,r9,r6
  80cf38:	300cc03a 	cmpne	r6,r6,zero
  80cf3c:	0007883a 	mov	r3,zero
  80cf40:	003f6806 	br	80cce4 <__alt_mem_onchip_mem+0xff78cce4>
  80cf44:	20009c1e 	bne	r4,zero,80d1b8 <__adddf3+0x630>
  80cf48:	80800044 	addi	r2,r16,1
  80cf4c:	1141ffcc 	andi	r5,r2,2047
  80cf50:	01000044 	movi	r4,1
  80cf54:	2140670e 	bge	r4,r5,80d0f4 <__adddf3+0x56c>
  80cf58:	0101ffc4 	movi	r4,2047
  80cf5c:	11007f26 	beq	r2,r4,80d15c <__adddf3+0x5d4>
  80cf60:	898d883a 	add	r6,r17,r6
  80cf64:	4247883a 	add	r3,r8,r9
  80cf68:	3451803a 	cmpltu	r8,r6,r17
  80cf6c:	40d1883a 	add	r8,r8,r3
  80cf70:	402297fa 	slli	r17,r8,31
  80cf74:	300cd07a 	srli	r6,r6,1
  80cf78:	4010d07a 	srli	r8,r8,1
  80cf7c:	1021883a 	mov	r16,r2
  80cf80:	89a2b03a 	or	r17,r17,r6
  80cf84:	003f1f06 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80cf88:	0081ffc4 	movi	r2,2047
  80cf8c:	80bf481e 	bne	r16,r2,80ccb0 <__alt_mem_onchip_mem+0xff78ccb0>
  80cf90:	003f1c06 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80cf94:	843ff844 	addi	r16,r16,-31
  80cf98:	01000804 	movi	r4,32
  80cf9c:	1406d83a 	srl	r3,r2,r16
  80cfa0:	41005026 	beq	r8,r4,80d0e4 <__adddf3+0x55c>
  80cfa4:	01001004 	movi	r4,64
  80cfa8:	2211c83a 	sub	r8,r4,r8
  80cfac:	1204983a 	sll	r2,r2,r8
  80cfb0:	88a2b03a 	or	r17,r17,r2
  80cfb4:	8822c03a 	cmpne	r17,r17,zero
  80cfb8:	1c62b03a 	or	r17,r3,r17
  80cfbc:	0011883a 	mov	r8,zero
  80cfc0:	0021883a 	mov	r16,zero
  80cfc4:	003f7106 	br	80cd8c <__alt_mem_onchip_mem+0xff78cd8c>
  80cfc8:	193ff804 	addi	r4,r3,-32
  80cfcc:	00800804 	movi	r2,32
  80cfd0:	4908d83a 	srl	r4,r9,r4
  80cfd4:	18804526 	beq	r3,r2,80d0ec <__adddf3+0x564>
  80cfd8:	00801004 	movi	r2,64
  80cfdc:	10c5c83a 	sub	r2,r2,r3
  80cfe0:	4886983a 	sll	r3,r9,r2
  80cfe4:	198cb03a 	or	r6,r3,r6
  80cfe8:	300cc03a 	cmpne	r6,r6,zero
  80cfec:	218cb03a 	or	r6,r4,r6
  80cff0:	0007883a 	mov	r3,zero
  80cff4:	003f3b06 	br	80cce4 <__alt_mem_onchip_mem+0xff78cce4>
  80cff8:	80002a26 	beq	r16,zero,80d0a4 <__adddf3+0x51c>
  80cffc:	0101ffc4 	movi	r4,2047
  80d000:	11006826 	beq	r2,r4,80d1a4 <__adddf3+0x61c>
  80d004:	00c7c83a 	sub	r3,zero,r3
  80d008:	42002034 	orhi	r8,r8,128
  80d00c:	01000e04 	movi	r4,56
  80d010:	20c07c16 	blt	r4,r3,80d204 <__adddf3+0x67c>
  80d014:	010007c4 	movi	r4,31
  80d018:	20c0da16 	blt	r4,r3,80d384 <__adddf3+0x7fc>
  80d01c:	01000804 	movi	r4,32
  80d020:	20c9c83a 	sub	r4,r4,r3
  80d024:	4114983a 	sll	r10,r8,r4
  80d028:	88cad83a 	srl	r5,r17,r3
  80d02c:	8908983a 	sll	r4,r17,r4
  80d030:	40c6d83a 	srl	r3,r8,r3
  80d034:	5162b03a 	or	r17,r10,r5
  80d038:	2008c03a 	cmpne	r4,r4,zero
  80d03c:	8922b03a 	or	r17,r17,r4
  80d040:	3463c83a 	sub	r17,r6,r17
  80d044:	48c7c83a 	sub	r3,r9,r3
  80d048:	344d803a 	cmpltu	r6,r6,r17
  80d04c:	1991c83a 	sub	r8,r3,r6
  80d050:	1021883a 	mov	r16,r2
  80d054:	3825883a 	mov	r18,r7
  80d058:	003f2706 	br	80ccf8 <__alt_mem_onchip_mem+0xff78ccf8>
  80d05c:	24d0b03a 	or	r8,r4,r19
  80d060:	40001b1e 	bne	r8,zero,80d0d0 <__adddf3+0x548>
  80d064:	0005883a 	mov	r2,zero
  80d068:	0007883a 	mov	r3,zero
  80d06c:	0021883a 	mov	r16,zero
  80d070:	003f4d06 	br	80cda8 <__alt_mem_onchip_mem+0xff78cda8>
  80d074:	008007c4 	movi	r2,31
  80d078:	11003c16 	blt	r2,r4,80d16c <__adddf3+0x5e4>
  80d07c:	00800804 	movi	r2,32
  80d080:	1105c83a 	sub	r2,r2,r4
  80d084:	488e983a 	sll	r7,r9,r2
  80d088:	310ad83a 	srl	r5,r6,r4
  80d08c:	3084983a 	sll	r2,r6,r2
  80d090:	4912d83a 	srl	r9,r9,r4
  80d094:	394ab03a 	or	r5,r7,r5
  80d098:	1004c03a 	cmpne	r2,r2,zero
  80d09c:	288ab03a 	or	r5,r5,r2
  80d0a0:	003f5306 	br	80cdf0 <__alt_mem_onchip_mem+0xff78cdf0>
  80d0a4:	4448b03a 	or	r4,r8,r17
  80d0a8:	20003e26 	beq	r4,zero,80d1a4 <__adddf3+0x61c>
  80d0ac:	00c6303a 	nor	r3,zero,r3
  80d0b0:	18003a1e 	bne	r3,zero,80d19c <__adddf3+0x614>
  80d0b4:	3463c83a 	sub	r17,r6,r17
  80d0b8:	4a07c83a 	sub	r3,r9,r8
  80d0bc:	344d803a 	cmpltu	r6,r6,r17
  80d0c0:	1991c83a 	sub	r8,r3,r6
  80d0c4:	1021883a 	mov	r16,r2
  80d0c8:	3825883a 	mov	r18,r7
  80d0cc:	003f0a06 	br	80ccf8 <__alt_mem_onchip_mem+0xff78ccf8>
  80d0d0:	2023883a 	mov	r17,r4
  80d0d4:	003f0d06 	br	80cd0c <__alt_mem_onchip_mem+0xff78cd0c>
  80d0d8:	0081ffc4 	movi	r2,2047
  80d0dc:	80bf3f1e 	bne	r16,r2,80cddc <__alt_mem_onchip_mem+0xff78cddc>
  80d0e0:	003ec806 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d0e4:	0005883a 	mov	r2,zero
  80d0e8:	003fb106 	br	80cfb0 <__alt_mem_onchip_mem+0xff78cfb0>
  80d0ec:	0007883a 	mov	r3,zero
  80d0f0:	003fbc06 	br	80cfe4 <__alt_mem_onchip_mem+0xff78cfe4>
  80d0f4:	4444b03a 	or	r2,r8,r17
  80d0f8:	8000871e 	bne	r16,zero,80d318 <__adddf3+0x790>
  80d0fc:	1000ba26 	beq	r2,zero,80d3e8 <__adddf3+0x860>
  80d100:	4984b03a 	or	r2,r9,r6
  80d104:	103ebf26 	beq	r2,zero,80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d108:	8985883a 	add	r2,r17,r6
  80d10c:	4247883a 	add	r3,r8,r9
  80d110:	1451803a 	cmpltu	r8,r2,r17
  80d114:	40d1883a 	add	r8,r8,r3
  80d118:	40c0202c 	andhi	r3,r8,128
  80d11c:	1023883a 	mov	r17,r2
  80d120:	183f1a26 	beq	r3,zero,80cd8c <__alt_mem_onchip_mem+0xff78cd8c>
  80d124:	00bfe034 	movhi	r2,65408
  80d128:	10bfffc4 	addi	r2,r2,-1
  80d12c:	2021883a 	mov	r16,r4
  80d130:	4090703a 	and	r8,r8,r2
  80d134:	003eb306 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d138:	4444b03a 	or	r2,r8,r17
  80d13c:	8000291e 	bne	r16,zero,80d1e4 <__adddf3+0x65c>
  80d140:	10004b1e 	bne	r2,zero,80d270 <__adddf3+0x6e8>
  80d144:	4990b03a 	or	r8,r9,r6
  80d148:	40008b26 	beq	r8,zero,80d378 <__adddf3+0x7f0>
  80d14c:	4811883a 	mov	r8,r9
  80d150:	3023883a 	mov	r17,r6
  80d154:	3825883a 	mov	r18,r7
  80d158:	003eaa06 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d15c:	1021883a 	mov	r16,r2
  80d160:	0011883a 	mov	r8,zero
  80d164:	0005883a 	mov	r2,zero
  80d168:	003f0f06 	br	80cda8 <__alt_mem_onchip_mem+0xff78cda8>
  80d16c:	217ff804 	addi	r5,r4,-32
  80d170:	00800804 	movi	r2,32
  80d174:	494ad83a 	srl	r5,r9,r5
  80d178:	20807d26 	beq	r4,r2,80d370 <__adddf3+0x7e8>
  80d17c:	00801004 	movi	r2,64
  80d180:	1109c83a 	sub	r4,r2,r4
  80d184:	4912983a 	sll	r9,r9,r4
  80d188:	498cb03a 	or	r6,r9,r6
  80d18c:	300cc03a 	cmpne	r6,r6,zero
  80d190:	298ab03a 	or	r5,r5,r6
  80d194:	0013883a 	mov	r9,zero
  80d198:	003f1506 	br	80cdf0 <__alt_mem_onchip_mem+0xff78cdf0>
  80d19c:	0101ffc4 	movi	r4,2047
  80d1a0:	113f9a1e 	bne	r2,r4,80d00c <__alt_mem_onchip_mem+0xff78d00c>
  80d1a4:	4811883a 	mov	r8,r9
  80d1a8:	3023883a 	mov	r17,r6
  80d1ac:	1021883a 	mov	r16,r2
  80d1b0:	3825883a 	mov	r18,r7
  80d1b4:	003e9306 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d1b8:	8000161e 	bne	r16,zero,80d214 <__adddf3+0x68c>
  80d1bc:	444ab03a 	or	r5,r8,r17
  80d1c0:	28005126 	beq	r5,zero,80d308 <__adddf3+0x780>
  80d1c4:	0108303a 	nor	r4,zero,r4
  80d1c8:	20004d1e 	bne	r4,zero,80d300 <__adddf3+0x778>
  80d1cc:	89a3883a 	add	r17,r17,r6
  80d1d0:	4253883a 	add	r9,r8,r9
  80d1d4:	898d803a 	cmpltu	r6,r17,r6
  80d1d8:	3251883a 	add	r8,r6,r9
  80d1dc:	1021883a 	mov	r16,r2
  80d1e0:	003f0806 	br	80ce04 <__alt_mem_onchip_mem+0xff78ce04>
  80d1e4:	1000301e 	bne	r2,zero,80d2a8 <__adddf3+0x720>
  80d1e8:	4984b03a 	or	r2,r9,r6
  80d1ec:	10007126 	beq	r2,zero,80d3b4 <__adddf3+0x82c>
  80d1f0:	4811883a 	mov	r8,r9
  80d1f4:	3023883a 	mov	r17,r6
  80d1f8:	3825883a 	mov	r18,r7
  80d1fc:	0401ffc4 	movi	r16,2047
  80d200:	003e8006 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d204:	4462b03a 	or	r17,r8,r17
  80d208:	8822c03a 	cmpne	r17,r17,zero
  80d20c:	0007883a 	mov	r3,zero
  80d210:	003f8b06 	br	80d040 <__alt_mem_onchip_mem+0xff78d040>
  80d214:	0141ffc4 	movi	r5,2047
  80d218:	11403b26 	beq	r2,r5,80d308 <__adddf3+0x780>
  80d21c:	0109c83a 	sub	r4,zero,r4
  80d220:	42002034 	orhi	r8,r8,128
  80d224:	01400e04 	movi	r5,56
  80d228:	29006716 	blt	r5,r4,80d3c8 <__adddf3+0x840>
  80d22c:	014007c4 	movi	r5,31
  80d230:	29007016 	blt	r5,r4,80d3f4 <__adddf3+0x86c>
  80d234:	01400804 	movi	r5,32
  80d238:	290bc83a 	sub	r5,r5,r4
  80d23c:	4154983a 	sll	r10,r8,r5
  80d240:	890ed83a 	srl	r7,r17,r4
  80d244:	894a983a 	sll	r5,r17,r5
  80d248:	4108d83a 	srl	r4,r8,r4
  80d24c:	51e2b03a 	or	r17,r10,r7
  80d250:	280ac03a 	cmpne	r5,r5,zero
  80d254:	8962b03a 	or	r17,r17,r5
  80d258:	89a3883a 	add	r17,r17,r6
  80d25c:	2253883a 	add	r9,r4,r9
  80d260:	898d803a 	cmpltu	r6,r17,r6
  80d264:	3251883a 	add	r8,r6,r9
  80d268:	1021883a 	mov	r16,r2
  80d26c:	003ee506 	br	80ce04 <__alt_mem_onchip_mem+0xff78ce04>
  80d270:	4984b03a 	or	r2,r9,r6
  80d274:	103e6326 	beq	r2,zero,80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d278:	8987c83a 	sub	r3,r17,r6
  80d27c:	88c9803a 	cmpltu	r4,r17,r3
  80d280:	4245c83a 	sub	r2,r8,r9
  80d284:	1105c83a 	sub	r2,r2,r4
  80d288:	1100202c 	andhi	r4,r2,128
  80d28c:	203ebb26 	beq	r4,zero,80cd7c <__alt_mem_onchip_mem+0xff78cd7c>
  80d290:	3463c83a 	sub	r17,r6,r17
  80d294:	4a07c83a 	sub	r3,r9,r8
  80d298:	344d803a 	cmpltu	r6,r6,r17
  80d29c:	1991c83a 	sub	r8,r3,r6
  80d2a0:	3825883a 	mov	r18,r7
  80d2a4:	003e5706 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d2a8:	4984b03a 	or	r2,r9,r6
  80d2ac:	10002e26 	beq	r2,zero,80d368 <__adddf3+0x7e0>
  80d2b0:	4004d0fa 	srli	r2,r8,3
  80d2b4:	8822d0fa 	srli	r17,r17,3
  80d2b8:	4010977a 	slli	r8,r8,29
  80d2bc:	10c0022c 	andhi	r3,r2,8
  80d2c0:	4462b03a 	or	r17,r8,r17
  80d2c4:	18000826 	beq	r3,zero,80d2e8 <__adddf3+0x760>
  80d2c8:	4808d0fa 	srli	r4,r9,3
  80d2cc:	20c0022c 	andhi	r3,r4,8
  80d2d0:	1800051e 	bne	r3,zero,80d2e8 <__adddf3+0x760>
  80d2d4:	300cd0fa 	srli	r6,r6,3
  80d2d8:	4806977a 	slli	r3,r9,29
  80d2dc:	2005883a 	mov	r2,r4
  80d2e0:	3825883a 	mov	r18,r7
  80d2e4:	19a2b03a 	or	r17,r3,r6
  80d2e8:	8810d77a 	srli	r8,r17,29
  80d2ec:	100490fa 	slli	r2,r2,3
  80d2f0:	882290fa 	slli	r17,r17,3
  80d2f4:	0401ffc4 	movi	r16,2047
  80d2f8:	4090b03a 	or	r8,r8,r2
  80d2fc:	003e4106 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d300:	0141ffc4 	movi	r5,2047
  80d304:	117fc71e 	bne	r2,r5,80d224 <__alt_mem_onchip_mem+0xff78d224>
  80d308:	4811883a 	mov	r8,r9
  80d30c:	3023883a 	mov	r17,r6
  80d310:	1021883a 	mov	r16,r2
  80d314:	003e3b06 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d318:	10002f26 	beq	r2,zero,80d3d8 <__adddf3+0x850>
  80d31c:	4984b03a 	or	r2,r9,r6
  80d320:	10001126 	beq	r2,zero,80d368 <__adddf3+0x7e0>
  80d324:	4004d0fa 	srli	r2,r8,3
  80d328:	8822d0fa 	srli	r17,r17,3
  80d32c:	4010977a 	slli	r8,r8,29
  80d330:	10c0022c 	andhi	r3,r2,8
  80d334:	4462b03a 	or	r17,r8,r17
  80d338:	183feb26 	beq	r3,zero,80d2e8 <__alt_mem_onchip_mem+0xff78d2e8>
  80d33c:	4808d0fa 	srli	r4,r9,3
  80d340:	20c0022c 	andhi	r3,r4,8
  80d344:	183fe81e 	bne	r3,zero,80d2e8 <__alt_mem_onchip_mem+0xff78d2e8>
  80d348:	300cd0fa 	srli	r6,r6,3
  80d34c:	4806977a 	slli	r3,r9,29
  80d350:	2005883a 	mov	r2,r4
  80d354:	19a2b03a 	or	r17,r3,r6
  80d358:	003fe306 	br	80d2e8 <__alt_mem_onchip_mem+0xff78d2e8>
  80d35c:	0011883a 	mov	r8,zero
  80d360:	0005883a 	mov	r2,zero
  80d364:	003e3f06 	br	80cc64 <__alt_mem_onchip_mem+0xff78cc64>
  80d368:	0401ffc4 	movi	r16,2047
  80d36c:	003e2506 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d370:	0013883a 	mov	r9,zero
  80d374:	003f8406 	br	80d188 <__alt_mem_onchip_mem+0xff78d188>
  80d378:	0005883a 	mov	r2,zero
  80d37c:	0007883a 	mov	r3,zero
  80d380:	003e8906 	br	80cda8 <__alt_mem_onchip_mem+0xff78cda8>
  80d384:	197ff804 	addi	r5,r3,-32
  80d388:	01000804 	movi	r4,32
  80d38c:	414ad83a 	srl	r5,r8,r5
  80d390:	19002426 	beq	r3,r4,80d424 <__adddf3+0x89c>
  80d394:	01001004 	movi	r4,64
  80d398:	20c7c83a 	sub	r3,r4,r3
  80d39c:	40c6983a 	sll	r3,r8,r3
  80d3a0:	1c46b03a 	or	r3,r3,r17
  80d3a4:	1806c03a 	cmpne	r3,r3,zero
  80d3a8:	28e2b03a 	or	r17,r5,r3
  80d3ac:	0007883a 	mov	r3,zero
  80d3b0:	003f2306 	br	80d040 <__alt_mem_onchip_mem+0xff78d040>
  80d3b4:	0007883a 	mov	r3,zero
  80d3b8:	5811883a 	mov	r8,r11
  80d3bc:	00bfffc4 	movi	r2,-1
  80d3c0:	0401ffc4 	movi	r16,2047
  80d3c4:	003e7806 	br	80cda8 <__alt_mem_onchip_mem+0xff78cda8>
  80d3c8:	4462b03a 	or	r17,r8,r17
  80d3cc:	8822c03a 	cmpne	r17,r17,zero
  80d3d0:	0009883a 	mov	r4,zero
  80d3d4:	003fa006 	br	80d258 <__alt_mem_onchip_mem+0xff78d258>
  80d3d8:	4811883a 	mov	r8,r9
  80d3dc:	3023883a 	mov	r17,r6
  80d3e0:	0401ffc4 	movi	r16,2047
  80d3e4:	003e0706 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d3e8:	4811883a 	mov	r8,r9
  80d3ec:	3023883a 	mov	r17,r6
  80d3f0:	003e0406 	br	80cc04 <__alt_mem_onchip_mem+0xff78cc04>
  80d3f4:	21fff804 	addi	r7,r4,-32
  80d3f8:	01400804 	movi	r5,32
  80d3fc:	41ced83a 	srl	r7,r8,r7
  80d400:	21400a26 	beq	r4,r5,80d42c <__adddf3+0x8a4>
  80d404:	01401004 	movi	r5,64
  80d408:	2909c83a 	sub	r4,r5,r4
  80d40c:	4108983a 	sll	r4,r8,r4
  80d410:	2448b03a 	or	r4,r4,r17
  80d414:	2008c03a 	cmpne	r4,r4,zero
  80d418:	3922b03a 	or	r17,r7,r4
  80d41c:	0009883a 	mov	r4,zero
  80d420:	003f8d06 	br	80d258 <__alt_mem_onchip_mem+0xff78d258>
  80d424:	0007883a 	mov	r3,zero
  80d428:	003fdd06 	br	80d3a0 <__alt_mem_onchip_mem+0xff78d3a0>
  80d42c:	0009883a 	mov	r4,zero
  80d430:	003ff706 	br	80d410 <__alt_mem_onchip_mem+0xff78d410>

0080d434 <__divdf3>:
  80d434:	defff204 	addi	sp,sp,-56
  80d438:	dd400915 	stw	r21,36(sp)
  80d43c:	282ad53a 	srli	r21,r5,20
  80d440:	dd000815 	stw	r20,32(sp)
  80d444:	2828d7fa 	srli	r20,r5,31
  80d448:	dc000415 	stw	r16,16(sp)
  80d44c:	04000434 	movhi	r16,16
  80d450:	df000c15 	stw	fp,48(sp)
  80d454:	843fffc4 	addi	r16,r16,-1
  80d458:	dfc00d15 	stw	ra,52(sp)
  80d45c:	ddc00b15 	stw	r23,44(sp)
  80d460:	dd800a15 	stw	r22,40(sp)
  80d464:	dcc00715 	stw	r19,28(sp)
  80d468:	dc800615 	stw	r18,24(sp)
  80d46c:	dc400515 	stw	r17,20(sp)
  80d470:	ad41ffcc 	andi	r21,r21,2047
  80d474:	2c20703a 	and	r16,r5,r16
  80d478:	a7003fcc 	andi	fp,r20,255
  80d47c:	a8006126 	beq	r21,zero,80d604 <__divdf3+0x1d0>
  80d480:	0081ffc4 	movi	r2,2047
  80d484:	2025883a 	mov	r18,r4
  80d488:	a8803726 	beq	r21,r2,80d568 <__divdf3+0x134>
  80d48c:	80800434 	orhi	r2,r16,16
  80d490:	100490fa 	slli	r2,r2,3
  80d494:	2020d77a 	srli	r16,r4,29
  80d498:	202490fa 	slli	r18,r4,3
  80d49c:	ad7f0044 	addi	r21,r21,-1023
  80d4a0:	80a0b03a 	or	r16,r16,r2
  80d4a4:	0027883a 	mov	r19,zero
  80d4a8:	0013883a 	mov	r9,zero
  80d4ac:	3804d53a 	srli	r2,r7,20
  80d4b0:	382cd7fa 	srli	r22,r7,31
  80d4b4:	04400434 	movhi	r17,16
  80d4b8:	8c7fffc4 	addi	r17,r17,-1
  80d4bc:	1081ffcc 	andi	r2,r2,2047
  80d4c0:	3011883a 	mov	r8,r6
  80d4c4:	3c62703a 	and	r17,r7,r17
  80d4c8:	b5c03fcc 	andi	r23,r22,255
  80d4cc:	10006c26 	beq	r2,zero,80d680 <__divdf3+0x24c>
  80d4d0:	00c1ffc4 	movi	r3,2047
  80d4d4:	10c06426 	beq	r2,r3,80d668 <__divdf3+0x234>
  80d4d8:	88c00434 	orhi	r3,r17,16
  80d4dc:	180690fa 	slli	r3,r3,3
  80d4e0:	3022d77a 	srli	r17,r6,29
  80d4e4:	301090fa 	slli	r8,r6,3
  80d4e8:	10bf0044 	addi	r2,r2,-1023
  80d4ec:	88e2b03a 	or	r17,r17,r3
  80d4f0:	000f883a 	mov	r7,zero
  80d4f4:	a58cf03a 	xor	r6,r20,r22
  80d4f8:	3cc8b03a 	or	r4,r7,r19
  80d4fc:	a8abc83a 	sub	r21,r21,r2
  80d500:	008003c4 	movi	r2,15
  80d504:	3007883a 	mov	r3,r6
  80d508:	34c03fcc 	andi	r19,r6,255
  80d50c:	11009036 	bltu	r2,r4,80d750 <__divdf3+0x31c>
  80d510:	200890ba 	slli	r4,r4,2
  80d514:	00802074 	movhi	r2,129
  80d518:	10b54a04 	addi	r2,r2,-10968
  80d51c:	2089883a 	add	r4,r4,r2
  80d520:	20800017 	ldw	r2,0(r4)
  80d524:	1000683a 	jmp	r2
  80d528:	0080d750 	cmplti	r2,zero,861
  80d52c:	0080d5a0 	cmpeqi	r2,zero,854
  80d530:	0080d740 	call	80d74 <__alt_mem_sdram-0x77f28c>
  80d534:	0080d594 	movui	r2,854
  80d538:	0080d740 	call	80d74 <__alt_mem_sdram-0x77f28c>
  80d53c:	0080d714 	movui	r2,860
  80d540:	0080d740 	call	80d74 <__alt_mem_sdram-0x77f28c>
  80d544:	0080d594 	movui	r2,854
  80d548:	0080d5a0 	cmpeqi	r2,zero,854
  80d54c:	0080d5a0 	cmpeqi	r2,zero,854
  80d550:	0080d714 	movui	r2,860
  80d554:	0080d594 	movui	r2,854
  80d558:	0080d584 	movi	r2,854
  80d55c:	0080d584 	movi	r2,854
  80d560:	0080d584 	movi	r2,854
  80d564:	0080da34 	movhi	r2,872
  80d568:	2404b03a 	or	r2,r4,r16
  80d56c:	1000661e 	bne	r2,zero,80d708 <__divdf3+0x2d4>
  80d570:	04c00204 	movi	r19,8
  80d574:	0021883a 	mov	r16,zero
  80d578:	0025883a 	mov	r18,zero
  80d57c:	02400084 	movi	r9,2
  80d580:	003fca06 	br	80d4ac <__alt_mem_onchip_mem+0xff78d4ac>
  80d584:	8023883a 	mov	r17,r16
  80d588:	9011883a 	mov	r8,r18
  80d58c:	e02f883a 	mov	r23,fp
  80d590:	480f883a 	mov	r7,r9
  80d594:	00800084 	movi	r2,2
  80d598:	3881311e 	bne	r7,r2,80da60 <__divdf3+0x62c>
  80d59c:	b827883a 	mov	r19,r23
  80d5a0:	98c0004c 	andi	r3,r19,1
  80d5a4:	0081ffc4 	movi	r2,2047
  80d5a8:	000b883a 	mov	r5,zero
  80d5ac:	0025883a 	mov	r18,zero
  80d5b0:	1004953a 	slli	r2,r2,20
  80d5b4:	18c03fcc 	andi	r3,r3,255
  80d5b8:	04400434 	movhi	r17,16
  80d5bc:	8c7fffc4 	addi	r17,r17,-1
  80d5c0:	180697fa 	slli	r3,r3,31
  80d5c4:	2c4a703a 	and	r5,r5,r17
  80d5c8:	288ab03a 	or	r5,r5,r2
  80d5cc:	28c6b03a 	or	r3,r5,r3
  80d5d0:	9005883a 	mov	r2,r18
  80d5d4:	dfc00d17 	ldw	ra,52(sp)
  80d5d8:	df000c17 	ldw	fp,48(sp)
  80d5dc:	ddc00b17 	ldw	r23,44(sp)
  80d5e0:	dd800a17 	ldw	r22,40(sp)
  80d5e4:	dd400917 	ldw	r21,36(sp)
  80d5e8:	dd000817 	ldw	r20,32(sp)
  80d5ec:	dcc00717 	ldw	r19,28(sp)
  80d5f0:	dc800617 	ldw	r18,24(sp)
  80d5f4:	dc400517 	ldw	r17,20(sp)
  80d5f8:	dc000417 	ldw	r16,16(sp)
  80d5fc:	dec00e04 	addi	sp,sp,56
  80d600:	f800283a 	ret
  80d604:	2404b03a 	or	r2,r4,r16
  80d608:	2027883a 	mov	r19,r4
  80d60c:	10003926 	beq	r2,zero,80d6f4 <__divdf3+0x2c0>
  80d610:	80012e26 	beq	r16,zero,80dacc <__divdf3+0x698>
  80d614:	8009883a 	mov	r4,r16
  80d618:	d9800315 	stw	r6,12(sp)
  80d61c:	d9c00215 	stw	r7,8(sp)
  80d620:	080f18c0 	call	80f18c <__clzsi2>
  80d624:	d9800317 	ldw	r6,12(sp)
  80d628:	d9c00217 	ldw	r7,8(sp)
  80d62c:	113ffd44 	addi	r4,r2,-11
  80d630:	00c00704 	movi	r3,28
  80d634:	19012116 	blt	r3,r4,80dabc <__divdf3+0x688>
  80d638:	00c00744 	movi	r3,29
  80d63c:	147ffe04 	addi	r17,r2,-8
  80d640:	1907c83a 	sub	r3,r3,r4
  80d644:	8460983a 	sll	r16,r16,r17
  80d648:	98c6d83a 	srl	r3,r19,r3
  80d64c:	9c64983a 	sll	r18,r19,r17
  80d650:	1c20b03a 	or	r16,r3,r16
  80d654:	1080fcc4 	addi	r2,r2,1011
  80d658:	00abc83a 	sub	r21,zero,r2
  80d65c:	0027883a 	mov	r19,zero
  80d660:	0013883a 	mov	r9,zero
  80d664:	003f9106 	br	80d4ac <__alt_mem_onchip_mem+0xff78d4ac>
  80d668:	3446b03a 	or	r3,r6,r17
  80d66c:	18001f1e 	bne	r3,zero,80d6ec <__divdf3+0x2b8>
  80d670:	0023883a 	mov	r17,zero
  80d674:	0011883a 	mov	r8,zero
  80d678:	01c00084 	movi	r7,2
  80d67c:	003f9d06 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>
  80d680:	3446b03a 	or	r3,r6,r17
  80d684:	18001526 	beq	r3,zero,80d6dc <__divdf3+0x2a8>
  80d688:	88011b26 	beq	r17,zero,80daf8 <__divdf3+0x6c4>
  80d68c:	8809883a 	mov	r4,r17
  80d690:	d9800315 	stw	r6,12(sp)
  80d694:	da400115 	stw	r9,4(sp)
  80d698:	080f18c0 	call	80f18c <__clzsi2>
  80d69c:	d9800317 	ldw	r6,12(sp)
  80d6a0:	da400117 	ldw	r9,4(sp)
  80d6a4:	113ffd44 	addi	r4,r2,-11
  80d6a8:	00c00704 	movi	r3,28
  80d6ac:	19010e16 	blt	r3,r4,80dae8 <__divdf3+0x6b4>
  80d6b0:	00c00744 	movi	r3,29
  80d6b4:	123ffe04 	addi	r8,r2,-8
  80d6b8:	1907c83a 	sub	r3,r3,r4
  80d6bc:	8a22983a 	sll	r17,r17,r8
  80d6c0:	30c6d83a 	srl	r3,r6,r3
  80d6c4:	3210983a 	sll	r8,r6,r8
  80d6c8:	1c62b03a 	or	r17,r3,r17
  80d6cc:	1080fcc4 	addi	r2,r2,1011
  80d6d0:	0085c83a 	sub	r2,zero,r2
  80d6d4:	000f883a 	mov	r7,zero
  80d6d8:	003f8606 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>
  80d6dc:	0023883a 	mov	r17,zero
  80d6e0:	0011883a 	mov	r8,zero
  80d6e4:	01c00044 	movi	r7,1
  80d6e8:	003f8206 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>
  80d6ec:	01c000c4 	movi	r7,3
  80d6f0:	003f8006 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>
  80d6f4:	04c00104 	movi	r19,4
  80d6f8:	0021883a 	mov	r16,zero
  80d6fc:	0025883a 	mov	r18,zero
  80d700:	02400044 	movi	r9,1
  80d704:	003f6906 	br	80d4ac <__alt_mem_onchip_mem+0xff78d4ac>
  80d708:	04c00304 	movi	r19,12
  80d70c:	024000c4 	movi	r9,3
  80d710:	003f6606 	br	80d4ac <__alt_mem_onchip_mem+0xff78d4ac>
  80d714:	01400434 	movhi	r5,16
  80d718:	0007883a 	mov	r3,zero
  80d71c:	297fffc4 	addi	r5,r5,-1
  80d720:	04bfffc4 	movi	r18,-1
  80d724:	0081ffc4 	movi	r2,2047
  80d728:	003fa106 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80d72c:	00c00044 	movi	r3,1
  80d730:	1887c83a 	sub	r3,r3,r2
  80d734:	01000e04 	movi	r4,56
  80d738:	20c1210e 	bge	r4,r3,80dbc0 <__divdf3+0x78c>
  80d73c:	98c0004c 	andi	r3,r19,1
  80d740:	0005883a 	mov	r2,zero
  80d744:	000b883a 	mov	r5,zero
  80d748:	0025883a 	mov	r18,zero
  80d74c:	003f9806 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80d750:	8c00fd36 	bltu	r17,r16,80db48 <__divdf3+0x714>
  80d754:	8440fb26 	beq	r16,r17,80db44 <__divdf3+0x710>
  80d758:	8007883a 	mov	r3,r16
  80d75c:	ad7fffc4 	addi	r21,r21,-1
  80d760:	0021883a 	mov	r16,zero
  80d764:	4004d63a 	srli	r2,r8,24
  80d768:	8822923a 	slli	r17,r17,8
  80d76c:	1809883a 	mov	r4,r3
  80d770:	402c923a 	slli	r22,r8,8
  80d774:	88b8b03a 	or	fp,r17,r2
  80d778:	e028d43a 	srli	r20,fp,16
  80d77c:	d8c00015 	stw	r3,0(sp)
  80d780:	e5ffffcc 	andi	r23,fp,65535
  80d784:	a00b883a 	mov	r5,r20
  80d788:	080cacc0 	call	80cacc <__udivsi3>
  80d78c:	d8c00017 	ldw	r3,0(sp)
  80d790:	a00b883a 	mov	r5,r20
  80d794:	d8800315 	stw	r2,12(sp)
  80d798:	1809883a 	mov	r4,r3
  80d79c:	080cb300 	call	80cb30 <__umodsi3>
  80d7a0:	d9800317 	ldw	r6,12(sp)
  80d7a4:	1006943a 	slli	r3,r2,16
  80d7a8:	9004d43a 	srli	r2,r18,16
  80d7ac:	b9a3383a 	mul	r17,r23,r6
  80d7b0:	10c4b03a 	or	r2,r2,r3
  80d7b4:	1440062e 	bgeu	r2,r17,80d7d0 <__divdf3+0x39c>
  80d7b8:	1705883a 	add	r2,r2,fp
  80d7bc:	30ffffc4 	addi	r3,r6,-1
  80d7c0:	1700ee36 	bltu	r2,fp,80db7c <__divdf3+0x748>
  80d7c4:	1440ed2e 	bgeu	r2,r17,80db7c <__divdf3+0x748>
  80d7c8:	31bfff84 	addi	r6,r6,-2
  80d7cc:	1705883a 	add	r2,r2,fp
  80d7d0:	1463c83a 	sub	r17,r2,r17
  80d7d4:	a00b883a 	mov	r5,r20
  80d7d8:	8809883a 	mov	r4,r17
  80d7dc:	d9800315 	stw	r6,12(sp)
  80d7e0:	080cacc0 	call	80cacc <__udivsi3>
  80d7e4:	a00b883a 	mov	r5,r20
  80d7e8:	8809883a 	mov	r4,r17
  80d7ec:	d8800215 	stw	r2,8(sp)
  80d7f0:	080cb300 	call	80cb30 <__umodsi3>
  80d7f4:	d9c00217 	ldw	r7,8(sp)
  80d7f8:	1004943a 	slli	r2,r2,16
  80d7fc:	94bfffcc 	andi	r18,r18,65535
  80d800:	b9d1383a 	mul	r8,r23,r7
  80d804:	90a4b03a 	or	r18,r18,r2
  80d808:	d9800317 	ldw	r6,12(sp)
  80d80c:	9200062e 	bgeu	r18,r8,80d828 <__divdf3+0x3f4>
  80d810:	9725883a 	add	r18,r18,fp
  80d814:	38bfffc4 	addi	r2,r7,-1
  80d818:	9700d636 	bltu	r18,fp,80db74 <__divdf3+0x740>
  80d81c:	9200d52e 	bgeu	r18,r8,80db74 <__divdf3+0x740>
  80d820:	39ffff84 	addi	r7,r7,-2
  80d824:	9725883a 	add	r18,r18,fp
  80d828:	3004943a 	slli	r2,r6,16
  80d82c:	b012d43a 	srli	r9,r22,16
  80d830:	b1bfffcc 	andi	r6,r22,65535
  80d834:	11e2b03a 	or	r17,r2,r7
  80d838:	8806d43a 	srli	r3,r17,16
  80d83c:	893fffcc 	andi	r4,r17,65535
  80d840:	218b383a 	mul	r5,r4,r6
  80d844:	30c5383a 	mul	r2,r6,r3
  80d848:	2249383a 	mul	r4,r4,r9
  80d84c:	280ed43a 	srli	r7,r5,16
  80d850:	9225c83a 	sub	r18,r18,r8
  80d854:	2089883a 	add	r4,r4,r2
  80d858:	3909883a 	add	r4,r7,r4
  80d85c:	1a47383a 	mul	r3,r3,r9
  80d860:	2080022e 	bgeu	r4,r2,80d86c <__divdf3+0x438>
  80d864:	00800074 	movhi	r2,1
  80d868:	1887883a 	add	r3,r3,r2
  80d86c:	2004d43a 	srli	r2,r4,16
  80d870:	2008943a 	slli	r4,r4,16
  80d874:	297fffcc 	andi	r5,r5,65535
  80d878:	10c7883a 	add	r3,r2,r3
  80d87c:	2149883a 	add	r4,r4,r5
  80d880:	90c0a536 	bltu	r18,r3,80db18 <__divdf3+0x6e4>
  80d884:	90c0bf26 	beq	r18,r3,80db84 <__divdf3+0x750>
  80d888:	90c7c83a 	sub	r3,r18,r3
  80d88c:	810fc83a 	sub	r7,r16,r4
  80d890:	81e5803a 	cmpltu	r18,r16,r7
  80d894:	1ca5c83a 	sub	r18,r3,r18
  80d898:	e480c126 	beq	fp,r18,80dba0 <__divdf3+0x76c>
  80d89c:	a00b883a 	mov	r5,r20
  80d8a0:	9009883a 	mov	r4,r18
  80d8a4:	d9800315 	stw	r6,12(sp)
  80d8a8:	d9c00215 	stw	r7,8(sp)
  80d8ac:	da400115 	stw	r9,4(sp)
  80d8b0:	080cacc0 	call	80cacc <__udivsi3>
  80d8b4:	a00b883a 	mov	r5,r20
  80d8b8:	9009883a 	mov	r4,r18
  80d8bc:	d8800015 	stw	r2,0(sp)
  80d8c0:	080cb300 	call	80cb30 <__umodsi3>
  80d8c4:	d9c00217 	ldw	r7,8(sp)
  80d8c8:	da000017 	ldw	r8,0(sp)
  80d8cc:	1006943a 	slli	r3,r2,16
  80d8d0:	3804d43a 	srli	r2,r7,16
  80d8d4:	ba21383a 	mul	r16,r23,r8
  80d8d8:	d9800317 	ldw	r6,12(sp)
  80d8dc:	10c4b03a 	or	r2,r2,r3
  80d8e0:	da400117 	ldw	r9,4(sp)
  80d8e4:	1400062e 	bgeu	r2,r16,80d900 <__divdf3+0x4cc>
  80d8e8:	1705883a 	add	r2,r2,fp
  80d8ec:	40ffffc4 	addi	r3,r8,-1
  80d8f0:	1700ad36 	bltu	r2,fp,80dba8 <__divdf3+0x774>
  80d8f4:	1400ac2e 	bgeu	r2,r16,80dba8 <__divdf3+0x774>
  80d8f8:	423fff84 	addi	r8,r8,-2
  80d8fc:	1705883a 	add	r2,r2,fp
  80d900:	1421c83a 	sub	r16,r2,r16
  80d904:	a00b883a 	mov	r5,r20
  80d908:	8009883a 	mov	r4,r16
  80d90c:	d9800315 	stw	r6,12(sp)
  80d910:	d9c00215 	stw	r7,8(sp)
  80d914:	da000015 	stw	r8,0(sp)
  80d918:	da400115 	stw	r9,4(sp)
  80d91c:	080cacc0 	call	80cacc <__udivsi3>
  80d920:	8009883a 	mov	r4,r16
  80d924:	a00b883a 	mov	r5,r20
  80d928:	1025883a 	mov	r18,r2
  80d92c:	080cb300 	call	80cb30 <__umodsi3>
  80d930:	d9c00217 	ldw	r7,8(sp)
  80d934:	1004943a 	slli	r2,r2,16
  80d938:	bcaf383a 	mul	r23,r23,r18
  80d93c:	393fffcc 	andi	r4,r7,65535
  80d940:	2088b03a 	or	r4,r4,r2
  80d944:	d9800317 	ldw	r6,12(sp)
  80d948:	da000017 	ldw	r8,0(sp)
  80d94c:	da400117 	ldw	r9,4(sp)
  80d950:	25c0062e 	bgeu	r4,r23,80d96c <__divdf3+0x538>
  80d954:	2709883a 	add	r4,r4,fp
  80d958:	90bfffc4 	addi	r2,r18,-1
  80d95c:	27009436 	bltu	r4,fp,80dbb0 <__divdf3+0x77c>
  80d960:	25c0932e 	bgeu	r4,r23,80dbb0 <__divdf3+0x77c>
  80d964:	94bfff84 	addi	r18,r18,-2
  80d968:	2709883a 	add	r4,r4,fp
  80d96c:	4004943a 	slli	r2,r8,16
  80d970:	25efc83a 	sub	r23,r4,r23
  80d974:	1490b03a 	or	r8,r2,r18
  80d978:	4008d43a 	srli	r4,r8,16
  80d97c:	40ffffcc 	andi	r3,r8,65535
  80d980:	30c5383a 	mul	r2,r6,r3
  80d984:	1a47383a 	mul	r3,r3,r9
  80d988:	310d383a 	mul	r6,r6,r4
  80d98c:	100ad43a 	srli	r5,r2,16
  80d990:	4913383a 	mul	r9,r9,r4
  80d994:	1987883a 	add	r3,r3,r6
  80d998:	28c7883a 	add	r3,r5,r3
  80d99c:	1980022e 	bgeu	r3,r6,80d9a8 <__divdf3+0x574>
  80d9a0:	01000074 	movhi	r4,1
  80d9a4:	4913883a 	add	r9,r9,r4
  80d9a8:	1808d43a 	srli	r4,r3,16
  80d9ac:	1806943a 	slli	r3,r3,16
  80d9b0:	10bfffcc 	andi	r2,r2,65535
  80d9b4:	2253883a 	add	r9,r4,r9
  80d9b8:	1887883a 	add	r3,r3,r2
  80d9bc:	ba403836 	bltu	r23,r9,80daa0 <__divdf3+0x66c>
  80d9c0:	ba403626 	beq	r23,r9,80da9c <__divdf3+0x668>
  80d9c4:	42000054 	ori	r8,r8,1
  80d9c8:	a880ffc4 	addi	r2,r21,1023
  80d9cc:	00bf570e 	bge	zero,r2,80d72c <__alt_mem_onchip_mem+0xff78d72c>
  80d9d0:	40c001cc 	andi	r3,r8,7
  80d9d4:	18000726 	beq	r3,zero,80d9f4 <__divdf3+0x5c0>
  80d9d8:	40c003cc 	andi	r3,r8,15
  80d9dc:	01000104 	movi	r4,4
  80d9e0:	19000426 	beq	r3,r4,80d9f4 <__divdf3+0x5c0>
  80d9e4:	4107883a 	add	r3,r8,r4
  80d9e8:	1a11803a 	cmpltu	r8,r3,r8
  80d9ec:	8a23883a 	add	r17,r17,r8
  80d9f0:	1811883a 	mov	r8,r3
  80d9f4:	88c0402c 	andhi	r3,r17,256
  80d9f8:	18000426 	beq	r3,zero,80da0c <__divdf3+0x5d8>
  80d9fc:	00ffc034 	movhi	r3,65280
  80da00:	18ffffc4 	addi	r3,r3,-1
  80da04:	a8810004 	addi	r2,r21,1024
  80da08:	88e2703a 	and	r17,r17,r3
  80da0c:	00c1ff84 	movi	r3,2046
  80da10:	18bee316 	blt	r3,r2,80d5a0 <__alt_mem_onchip_mem+0xff78d5a0>
  80da14:	8824977a 	slli	r18,r17,29
  80da18:	4010d0fa 	srli	r8,r8,3
  80da1c:	8822927a 	slli	r17,r17,9
  80da20:	1081ffcc 	andi	r2,r2,2047
  80da24:	9224b03a 	or	r18,r18,r8
  80da28:	880ad33a 	srli	r5,r17,12
  80da2c:	98c0004c 	andi	r3,r19,1
  80da30:	003edf06 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80da34:	8080022c 	andhi	r2,r16,8
  80da38:	10001226 	beq	r2,zero,80da84 <__divdf3+0x650>
  80da3c:	8880022c 	andhi	r2,r17,8
  80da40:	1000101e 	bne	r2,zero,80da84 <__divdf3+0x650>
  80da44:	00800434 	movhi	r2,16
  80da48:	89400234 	orhi	r5,r17,8
  80da4c:	10bfffc4 	addi	r2,r2,-1
  80da50:	b007883a 	mov	r3,r22
  80da54:	288a703a 	and	r5,r5,r2
  80da58:	4025883a 	mov	r18,r8
  80da5c:	003f3106 	br	80d724 <__alt_mem_onchip_mem+0xff78d724>
  80da60:	008000c4 	movi	r2,3
  80da64:	3880a626 	beq	r7,r2,80dd00 <__divdf3+0x8cc>
  80da68:	00800044 	movi	r2,1
  80da6c:	3880521e 	bne	r7,r2,80dbb8 <__divdf3+0x784>
  80da70:	b807883a 	mov	r3,r23
  80da74:	0005883a 	mov	r2,zero
  80da78:	000b883a 	mov	r5,zero
  80da7c:	0025883a 	mov	r18,zero
  80da80:	003ecb06 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80da84:	00800434 	movhi	r2,16
  80da88:	81400234 	orhi	r5,r16,8
  80da8c:	10bfffc4 	addi	r2,r2,-1
  80da90:	a007883a 	mov	r3,r20
  80da94:	288a703a 	and	r5,r5,r2
  80da98:	003f2206 	br	80d724 <__alt_mem_onchip_mem+0xff78d724>
  80da9c:	183fca26 	beq	r3,zero,80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80daa0:	e5ef883a 	add	r23,fp,r23
  80daa4:	40bfffc4 	addi	r2,r8,-1
  80daa8:	bf00392e 	bgeu	r23,fp,80db90 <__divdf3+0x75c>
  80daac:	1011883a 	mov	r8,r2
  80dab0:	ba7fc41e 	bne	r23,r9,80d9c4 <__alt_mem_onchip_mem+0xff78d9c4>
  80dab4:	b0ffc31e 	bne	r22,r3,80d9c4 <__alt_mem_onchip_mem+0xff78d9c4>
  80dab8:	003fc306 	br	80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80dabc:	143ff604 	addi	r16,r2,-40
  80dac0:	9c20983a 	sll	r16,r19,r16
  80dac4:	0025883a 	mov	r18,zero
  80dac8:	003ee206 	br	80d654 <__alt_mem_onchip_mem+0xff78d654>
  80dacc:	d9800315 	stw	r6,12(sp)
  80dad0:	d9c00215 	stw	r7,8(sp)
  80dad4:	080f18c0 	call	80f18c <__clzsi2>
  80dad8:	10800804 	addi	r2,r2,32
  80dadc:	d9c00217 	ldw	r7,8(sp)
  80dae0:	d9800317 	ldw	r6,12(sp)
  80dae4:	003ed106 	br	80d62c <__alt_mem_onchip_mem+0xff78d62c>
  80dae8:	147ff604 	addi	r17,r2,-40
  80daec:	3462983a 	sll	r17,r6,r17
  80daf0:	0011883a 	mov	r8,zero
  80daf4:	003ef506 	br	80d6cc <__alt_mem_onchip_mem+0xff78d6cc>
  80daf8:	3009883a 	mov	r4,r6
  80dafc:	d9800315 	stw	r6,12(sp)
  80db00:	da400115 	stw	r9,4(sp)
  80db04:	080f18c0 	call	80f18c <__clzsi2>
  80db08:	10800804 	addi	r2,r2,32
  80db0c:	da400117 	ldw	r9,4(sp)
  80db10:	d9800317 	ldw	r6,12(sp)
  80db14:	003ee306 	br	80d6a4 <__alt_mem_onchip_mem+0xff78d6a4>
  80db18:	85a1883a 	add	r16,r16,r22
  80db1c:	8585803a 	cmpltu	r2,r16,r22
  80db20:	1705883a 	add	r2,r2,fp
  80db24:	14a5883a 	add	r18,r2,r18
  80db28:	88bfffc4 	addi	r2,r17,-1
  80db2c:	e4800c2e 	bgeu	fp,r18,80db60 <__divdf3+0x72c>
  80db30:	90c03e36 	bltu	r18,r3,80dc2c <__divdf3+0x7f8>
  80db34:	1c806926 	beq	r3,r18,80dcdc <__divdf3+0x8a8>
  80db38:	90c7c83a 	sub	r3,r18,r3
  80db3c:	1023883a 	mov	r17,r2
  80db40:	003f5206 	br	80d88c <__alt_mem_onchip_mem+0xff78d88c>
  80db44:	923f0436 	bltu	r18,r8,80d758 <__alt_mem_onchip_mem+0xff78d758>
  80db48:	800897fa 	slli	r4,r16,31
  80db4c:	9004d07a 	srli	r2,r18,1
  80db50:	8006d07a 	srli	r3,r16,1
  80db54:	902097fa 	slli	r16,r18,31
  80db58:	20a4b03a 	or	r18,r4,r2
  80db5c:	003f0106 	br	80d764 <__alt_mem_onchip_mem+0xff78d764>
  80db60:	e4bff51e 	bne	fp,r18,80db38 <__alt_mem_onchip_mem+0xff78db38>
  80db64:	85bff22e 	bgeu	r16,r22,80db30 <__alt_mem_onchip_mem+0xff78db30>
  80db68:	e0c7c83a 	sub	r3,fp,r3
  80db6c:	1023883a 	mov	r17,r2
  80db70:	003f4606 	br	80d88c <__alt_mem_onchip_mem+0xff78d88c>
  80db74:	100f883a 	mov	r7,r2
  80db78:	003f2b06 	br	80d828 <__alt_mem_onchip_mem+0xff78d828>
  80db7c:	180d883a 	mov	r6,r3
  80db80:	003f1306 	br	80d7d0 <__alt_mem_onchip_mem+0xff78d7d0>
  80db84:	813fe436 	bltu	r16,r4,80db18 <__alt_mem_onchip_mem+0xff78db18>
  80db88:	0007883a 	mov	r3,zero
  80db8c:	003f3f06 	br	80d88c <__alt_mem_onchip_mem+0xff78d88c>
  80db90:	ba402c36 	bltu	r23,r9,80dc44 <__divdf3+0x810>
  80db94:	4dc05426 	beq	r9,r23,80dce8 <__divdf3+0x8b4>
  80db98:	1011883a 	mov	r8,r2
  80db9c:	003f8906 	br	80d9c4 <__alt_mem_onchip_mem+0xff78d9c4>
  80dba0:	023fffc4 	movi	r8,-1
  80dba4:	003f8806 	br	80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80dba8:	1811883a 	mov	r8,r3
  80dbac:	003f5406 	br	80d900 <__alt_mem_onchip_mem+0xff78d900>
  80dbb0:	1025883a 	mov	r18,r2
  80dbb4:	003f6d06 	br	80d96c <__alt_mem_onchip_mem+0xff78d96c>
  80dbb8:	b827883a 	mov	r19,r23
  80dbbc:	003f8206 	br	80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80dbc0:	010007c4 	movi	r4,31
  80dbc4:	20c02616 	blt	r4,r3,80dc60 <__divdf3+0x82c>
  80dbc8:	00800804 	movi	r2,32
  80dbcc:	10c5c83a 	sub	r2,r2,r3
  80dbd0:	888a983a 	sll	r5,r17,r2
  80dbd4:	40c8d83a 	srl	r4,r8,r3
  80dbd8:	4084983a 	sll	r2,r8,r2
  80dbdc:	88e2d83a 	srl	r17,r17,r3
  80dbe0:	2906b03a 	or	r3,r5,r4
  80dbe4:	1004c03a 	cmpne	r2,r2,zero
  80dbe8:	1886b03a 	or	r3,r3,r2
  80dbec:	188001cc 	andi	r2,r3,7
  80dbf0:	10000726 	beq	r2,zero,80dc10 <__divdf3+0x7dc>
  80dbf4:	188003cc 	andi	r2,r3,15
  80dbf8:	01000104 	movi	r4,4
  80dbfc:	11000426 	beq	r2,r4,80dc10 <__divdf3+0x7dc>
  80dc00:	1805883a 	mov	r2,r3
  80dc04:	10c00104 	addi	r3,r2,4
  80dc08:	1885803a 	cmpltu	r2,r3,r2
  80dc0c:	88a3883a 	add	r17,r17,r2
  80dc10:	8880202c 	andhi	r2,r17,128
  80dc14:	10002726 	beq	r2,zero,80dcb4 <__divdf3+0x880>
  80dc18:	98c0004c 	andi	r3,r19,1
  80dc1c:	00800044 	movi	r2,1
  80dc20:	000b883a 	mov	r5,zero
  80dc24:	0025883a 	mov	r18,zero
  80dc28:	003e6106 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80dc2c:	85a1883a 	add	r16,r16,r22
  80dc30:	8585803a 	cmpltu	r2,r16,r22
  80dc34:	1705883a 	add	r2,r2,fp
  80dc38:	14a5883a 	add	r18,r2,r18
  80dc3c:	8c7fff84 	addi	r17,r17,-2
  80dc40:	003f1106 	br	80d888 <__alt_mem_onchip_mem+0xff78d888>
  80dc44:	b589883a 	add	r4,r22,r22
  80dc48:	25ad803a 	cmpltu	r22,r4,r22
  80dc4c:	b739883a 	add	fp,r22,fp
  80dc50:	40bfff84 	addi	r2,r8,-2
  80dc54:	bf2f883a 	add	r23,r23,fp
  80dc58:	202d883a 	mov	r22,r4
  80dc5c:	003f9306 	br	80daac <__alt_mem_onchip_mem+0xff78daac>
  80dc60:	013ff844 	movi	r4,-31
  80dc64:	2085c83a 	sub	r2,r4,r2
  80dc68:	8888d83a 	srl	r4,r17,r2
  80dc6c:	00800804 	movi	r2,32
  80dc70:	18802126 	beq	r3,r2,80dcf8 <__divdf3+0x8c4>
  80dc74:	00801004 	movi	r2,64
  80dc78:	10c5c83a 	sub	r2,r2,r3
  80dc7c:	8884983a 	sll	r2,r17,r2
  80dc80:	1204b03a 	or	r2,r2,r8
  80dc84:	1004c03a 	cmpne	r2,r2,zero
  80dc88:	2084b03a 	or	r2,r4,r2
  80dc8c:	144001cc 	andi	r17,r2,7
  80dc90:	88000d1e 	bne	r17,zero,80dcc8 <__divdf3+0x894>
  80dc94:	000b883a 	mov	r5,zero
  80dc98:	1024d0fa 	srli	r18,r2,3
  80dc9c:	98c0004c 	andi	r3,r19,1
  80dca0:	0005883a 	mov	r2,zero
  80dca4:	9464b03a 	or	r18,r18,r17
  80dca8:	003e4106 	br	80d5b0 <__alt_mem_onchip_mem+0xff78d5b0>
  80dcac:	1007883a 	mov	r3,r2
  80dcb0:	0023883a 	mov	r17,zero
  80dcb4:	880a927a 	slli	r5,r17,9
  80dcb8:	1805883a 	mov	r2,r3
  80dcbc:	8822977a 	slli	r17,r17,29
  80dcc0:	280ad33a 	srli	r5,r5,12
  80dcc4:	003ff406 	br	80dc98 <__alt_mem_onchip_mem+0xff78dc98>
  80dcc8:	10c003cc 	andi	r3,r2,15
  80dccc:	01000104 	movi	r4,4
  80dcd0:	193ff626 	beq	r3,r4,80dcac <__alt_mem_onchip_mem+0xff78dcac>
  80dcd4:	0023883a 	mov	r17,zero
  80dcd8:	003fca06 	br	80dc04 <__alt_mem_onchip_mem+0xff78dc04>
  80dcdc:	813fd336 	bltu	r16,r4,80dc2c <__alt_mem_onchip_mem+0xff78dc2c>
  80dce0:	1023883a 	mov	r17,r2
  80dce4:	003fa806 	br	80db88 <__alt_mem_onchip_mem+0xff78db88>
  80dce8:	b0ffd636 	bltu	r22,r3,80dc44 <__alt_mem_onchip_mem+0xff78dc44>
  80dcec:	1011883a 	mov	r8,r2
  80dcf0:	b0ff341e 	bne	r22,r3,80d9c4 <__alt_mem_onchip_mem+0xff78d9c4>
  80dcf4:	003f3406 	br	80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80dcf8:	0005883a 	mov	r2,zero
  80dcfc:	003fe006 	br	80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80dd00:	00800434 	movhi	r2,16
  80dd04:	89400234 	orhi	r5,r17,8
  80dd08:	10bfffc4 	addi	r2,r2,-1
  80dd0c:	b807883a 	mov	r3,r23
  80dd10:	288a703a 	and	r5,r5,r2
  80dd14:	4025883a 	mov	r18,r8
  80dd18:	003e8206 	br	80d724 <__alt_mem_onchip_mem+0xff78d724>

0080dd1c <__eqdf2>:
  80dd1c:	2804d53a 	srli	r2,r5,20
  80dd20:	3806d53a 	srli	r3,r7,20
  80dd24:	02000434 	movhi	r8,16
  80dd28:	423fffc4 	addi	r8,r8,-1
  80dd2c:	1081ffcc 	andi	r2,r2,2047
  80dd30:	0281ffc4 	movi	r10,2047
  80dd34:	2a12703a 	and	r9,r5,r8
  80dd38:	18c1ffcc 	andi	r3,r3,2047
  80dd3c:	3a10703a 	and	r8,r7,r8
  80dd40:	280ad7fa 	srli	r5,r5,31
  80dd44:	380ed7fa 	srli	r7,r7,31
  80dd48:	12801026 	beq	r2,r10,80dd8c <__eqdf2+0x70>
  80dd4c:	0281ffc4 	movi	r10,2047
  80dd50:	1a800a26 	beq	r3,r10,80dd7c <__eqdf2+0x60>
  80dd54:	10c00226 	beq	r2,r3,80dd60 <__eqdf2+0x44>
  80dd58:	00800044 	movi	r2,1
  80dd5c:	f800283a 	ret
  80dd60:	4a3ffd1e 	bne	r9,r8,80dd58 <__alt_mem_onchip_mem+0xff78dd58>
  80dd64:	21bffc1e 	bne	r4,r6,80dd58 <__alt_mem_onchip_mem+0xff78dd58>
  80dd68:	29c00c26 	beq	r5,r7,80dd9c <__eqdf2+0x80>
  80dd6c:	103ffa1e 	bne	r2,zero,80dd58 <__alt_mem_onchip_mem+0xff78dd58>
  80dd70:	2244b03a 	or	r2,r4,r9
  80dd74:	1004c03a 	cmpne	r2,r2,zero
  80dd78:	f800283a 	ret
  80dd7c:	3214b03a 	or	r10,r6,r8
  80dd80:	503ff426 	beq	r10,zero,80dd54 <__alt_mem_onchip_mem+0xff78dd54>
  80dd84:	00800044 	movi	r2,1
  80dd88:	f800283a 	ret
  80dd8c:	2254b03a 	or	r10,r4,r9
  80dd90:	503fee26 	beq	r10,zero,80dd4c <__alt_mem_onchip_mem+0xff78dd4c>
  80dd94:	00800044 	movi	r2,1
  80dd98:	f800283a 	ret
  80dd9c:	0005883a 	mov	r2,zero
  80dda0:	f800283a 	ret

0080dda4 <__gedf2>:
  80dda4:	2804d53a 	srli	r2,r5,20
  80dda8:	3806d53a 	srli	r3,r7,20
  80ddac:	02000434 	movhi	r8,16
  80ddb0:	423fffc4 	addi	r8,r8,-1
  80ddb4:	1081ffcc 	andi	r2,r2,2047
  80ddb8:	0241ffc4 	movi	r9,2047
  80ddbc:	2a14703a 	and	r10,r5,r8
  80ddc0:	18c1ffcc 	andi	r3,r3,2047
  80ddc4:	3a10703a 	and	r8,r7,r8
  80ddc8:	280ad7fa 	srli	r5,r5,31
  80ddcc:	380ed7fa 	srli	r7,r7,31
  80ddd0:	12401d26 	beq	r2,r9,80de48 <__gedf2+0xa4>
  80ddd4:	0241ffc4 	movi	r9,2047
  80ddd8:	1a401226 	beq	r3,r9,80de24 <__gedf2+0x80>
  80dddc:	1000081e 	bne	r2,zero,80de00 <__gedf2+0x5c>
  80dde0:	2296b03a 	or	r11,r4,r10
  80dde4:	5813003a 	cmpeq	r9,r11,zero
  80dde8:	1800091e 	bne	r3,zero,80de10 <__gedf2+0x6c>
  80ddec:	3218b03a 	or	r12,r6,r8
  80ddf0:	6000071e 	bne	r12,zero,80de10 <__gedf2+0x6c>
  80ddf4:	0005883a 	mov	r2,zero
  80ddf8:	5800101e 	bne	r11,zero,80de3c <__gedf2+0x98>
  80ddfc:	f800283a 	ret
  80de00:	18000c1e 	bne	r3,zero,80de34 <__gedf2+0x90>
  80de04:	3212b03a 	or	r9,r6,r8
  80de08:	48000c26 	beq	r9,zero,80de3c <__gedf2+0x98>
  80de0c:	0013883a 	mov	r9,zero
  80de10:	39c03fcc 	andi	r7,r7,255
  80de14:	48000826 	beq	r9,zero,80de38 <__gedf2+0x94>
  80de18:	38000926 	beq	r7,zero,80de40 <__gedf2+0x9c>
  80de1c:	00800044 	movi	r2,1
  80de20:	f800283a 	ret
  80de24:	3212b03a 	or	r9,r6,r8
  80de28:	483fec26 	beq	r9,zero,80dddc <__alt_mem_onchip_mem+0xff78dddc>
  80de2c:	00bfff84 	movi	r2,-2
  80de30:	f800283a 	ret
  80de34:	39c03fcc 	andi	r7,r7,255
  80de38:	29c00626 	beq	r5,r7,80de54 <__gedf2+0xb0>
  80de3c:	283ff726 	beq	r5,zero,80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80de40:	00bfffc4 	movi	r2,-1
  80de44:	f800283a 	ret
  80de48:	2292b03a 	or	r9,r4,r10
  80de4c:	483fe126 	beq	r9,zero,80ddd4 <__alt_mem_onchip_mem+0xff78ddd4>
  80de50:	003ff606 	br	80de2c <__alt_mem_onchip_mem+0xff78de2c>
  80de54:	18bff916 	blt	r3,r2,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de58:	10c00316 	blt	r2,r3,80de68 <__gedf2+0xc4>
  80de5c:	42bff736 	bltu	r8,r10,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de60:	52000326 	beq	r10,r8,80de70 <__gedf2+0xcc>
  80de64:	5200042e 	bgeu	r10,r8,80de78 <__gedf2+0xd4>
  80de68:	283fec1e 	bne	r5,zero,80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80de6c:	003ff406 	br	80de40 <__alt_mem_onchip_mem+0xff78de40>
  80de70:	313ff236 	bltu	r6,r4,80de3c <__alt_mem_onchip_mem+0xff78de3c>
  80de74:	21bffc36 	bltu	r4,r6,80de68 <__alt_mem_onchip_mem+0xff78de68>
  80de78:	0005883a 	mov	r2,zero
  80de7c:	f800283a 	ret

0080de80 <__ledf2>:
  80de80:	2804d53a 	srli	r2,r5,20
  80de84:	3810d53a 	srli	r8,r7,20
  80de88:	00c00434 	movhi	r3,16
  80de8c:	18ffffc4 	addi	r3,r3,-1
  80de90:	1081ffcc 	andi	r2,r2,2047
  80de94:	0241ffc4 	movi	r9,2047
  80de98:	28d4703a 	and	r10,r5,r3
  80de9c:	4201ffcc 	andi	r8,r8,2047
  80dea0:	38c6703a 	and	r3,r7,r3
  80dea4:	280ad7fa 	srli	r5,r5,31
  80dea8:	380ed7fa 	srli	r7,r7,31
  80deac:	12401f26 	beq	r2,r9,80df2c <__ledf2+0xac>
  80deb0:	0241ffc4 	movi	r9,2047
  80deb4:	42401426 	beq	r8,r9,80df08 <__ledf2+0x88>
  80deb8:	1000091e 	bne	r2,zero,80dee0 <__ledf2+0x60>
  80debc:	2296b03a 	or	r11,r4,r10
  80dec0:	5813003a 	cmpeq	r9,r11,zero
  80dec4:	29403fcc 	andi	r5,r5,255
  80dec8:	40000a1e 	bne	r8,zero,80def4 <__ledf2+0x74>
  80decc:	30d8b03a 	or	r12,r6,r3
  80ded0:	6000081e 	bne	r12,zero,80def4 <__ledf2+0x74>
  80ded4:	0005883a 	mov	r2,zero
  80ded8:	5800111e 	bne	r11,zero,80df20 <__ledf2+0xa0>
  80dedc:	f800283a 	ret
  80dee0:	29403fcc 	andi	r5,r5,255
  80dee4:	40000c1e 	bne	r8,zero,80df18 <__ledf2+0x98>
  80dee8:	30d2b03a 	or	r9,r6,r3
  80deec:	48000c26 	beq	r9,zero,80df20 <__ledf2+0xa0>
  80def0:	0013883a 	mov	r9,zero
  80def4:	39c03fcc 	andi	r7,r7,255
  80def8:	48000826 	beq	r9,zero,80df1c <__ledf2+0x9c>
  80defc:	38001126 	beq	r7,zero,80df44 <__ledf2+0xc4>
  80df00:	00800044 	movi	r2,1
  80df04:	f800283a 	ret
  80df08:	30d2b03a 	or	r9,r6,r3
  80df0c:	483fea26 	beq	r9,zero,80deb8 <__alt_mem_onchip_mem+0xff78deb8>
  80df10:	00800084 	movi	r2,2
  80df14:	f800283a 	ret
  80df18:	39c03fcc 	andi	r7,r7,255
  80df1c:	39400726 	beq	r7,r5,80df3c <__ledf2+0xbc>
  80df20:	2800081e 	bne	r5,zero,80df44 <__ledf2+0xc4>
  80df24:	00800044 	movi	r2,1
  80df28:	f800283a 	ret
  80df2c:	2292b03a 	or	r9,r4,r10
  80df30:	483fdf26 	beq	r9,zero,80deb0 <__alt_mem_onchip_mem+0xff78deb0>
  80df34:	00800084 	movi	r2,2
  80df38:	f800283a 	ret
  80df3c:	4080030e 	bge	r8,r2,80df4c <__ledf2+0xcc>
  80df40:	383fef26 	beq	r7,zero,80df00 <__alt_mem_onchip_mem+0xff78df00>
  80df44:	00bfffc4 	movi	r2,-1
  80df48:	f800283a 	ret
  80df4c:	123feb16 	blt	r2,r8,80defc <__alt_mem_onchip_mem+0xff78defc>
  80df50:	1abff336 	bltu	r3,r10,80df20 <__alt_mem_onchip_mem+0xff78df20>
  80df54:	50c00326 	beq	r10,r3,80df64 <__ledf2+0xe4>
  80df58:	50c0042e 	bgeu	r10,r3,80df6c <__ledf2+0xec>
  80df5c:	283fe81e 	bne	r5,zero,80df00 <__alt_mem_onchip_mem+0xff78df00>
  80df60:	003ff806 	br	80df44 <__alt_mem_onchip_mem+0xff78df44>
  80df64:	313fee36 	bltu	r6,r4,80df20 <__alt_mem_onchip_mem+0xff78df20>
  80df68:	21bffc36 	bltu	r4,r6,80df5c <__alt_mem_onchip_mem+0xff78df5c>
  80df6c:	0005883a 	mov	r2,zero
  80df70:	f800283a 	ret

0080df74 <__muldf3>:
  80df74:	defff304 	addi	sp,sp,-52
  80df78:	2804d53a 	srli	r2,r5,20
  80df7c:	dd800915 	stw	r22,36(sp)
  80df80:	282cd7fa 	srli	r22,r5,31
  80df84:	dc000315 	stw	r16,12(sp)
  80df88:	04000434 	movhi	r16,16
  80df8c:	dd400815 	stw	r21,32(sp)
  80df90:	dc800515 	stw	r18,20(sp)
  80df94:	843fffc4 	addi	r16,r16,-1
  80df98:	dfc00c15 	stw	ra,48(sp)
  80df9c:	df000b15 	stw	fp,44(sp)
  80dfa0:	ddc00a15 	stw	r23,40(sp)
  80dfa4:	dd000715 	stw	r20,28(sp)
  80dfa8:	dcc00615 	stw	r19,24(sp)
  80dfac:	dc400415 	stw	r17,16(sp)
  80dfb0:	1481ffcc 	andi	r18,r2,2047
  80dfb4:	2c20703a 	and	r16,r5,r16
  80dfb8:	b02b883a 	mov	r21,r22
  80dfbc:	b2403fcc 	andi	r9,r22,255
  80dfc0:	90006026 	beq	r18,zero,80e144 <__muldf3+0x1d0>
  80dfc4:	0081ffc4 	movi	r2,2047
  80dfc8:	2029883a 	mov	r20,r4
  80dfcc:	90803626 	beq	r18,r2,80e0a8 <__muldf3+0x134>
  80dfd0:	80800434 	orhi	r2,r16,16
  80dfd4:	100490fa 	slli	r2,r2,3
  80dfd8:	2020d77a 	srli	r16,r4,29
  80dfdc:	202890fa 	slli	r20,r4,3
  80dfe0:	94bf0044 	addi	r18,r18,-1023
  80dfe4:	80a0b03a 	or	r16,r16,r2
  80dfe8:	0027883a 	mov	r19,zero
  80dfec:	0039883a 	mov	fp,zero
  80dff0:	3804d53a 	srli	r2,r7,20
  80dff4:	382ed7fa 	srli	r23,r7,31
  80dff8:	04400434 	movhi	r17,16
  80dffc:	8c7fffc4 	addi	r17,r17,-1
  80e000:	1081ffcc 	andi	r2,r2,2047
  80e004:	3011883a 	mov	r8,r6
  80e008:	3c62703a 	and	r17,r7,r17
  80e00c:	ba803fcc 	andi	r10,r23,255
  80e010:	10006d26 	beq	r2,zero,80e1c8 <__muldf3+0x254>
  80e014:	00c1ffc4 	movi	r3,2047
  80e018:	10c06526 	beq	r2,r3,80e1b0 <__muldf3+0x23c>
  80e01c:	88c00434 	orhi	r3,r17,16
  80e020:	180690fa 	slli	r3,r3,3
  80e024:	3022d77a 	srli	r17,r6,29
  80e028:	301090fa 	slli	r8,r6,3
  80e02c:	10bf0044 	addi	r2,r2,-1023
  80e030:	88e2b03a 	or	r17,r17,r3
  80e034:	000b883a 	mov	r5,zero
  80e038:	9085883a 	add	r2,r18,r2
  80e03c:	2cc8b03a 	or	r4,r5,r19
  80e040:	00c003c4 	movi	r3,15
  80e044:	bdacf03a 	xor	r22,r23,r22
  80e048:	12c00044 	addi	r11,r2,1
  80e04c:	19009936 	bltu	r3,r4,80e2b4 <__muldf3+0x340>
  80e050:	200890ba 	slli	r4,r4,2
  80e054:	00c02074 	movhi	r3,129
  80e058:	18f81a04 	addi	r3,r3,-8088
  80e05c:	20c9883a 	add	r4,r4,r3
  80e060:	20c00017 	ldw	r3,0(r4)
  80e064:	1800683a 	jmp	r3
  80e068:	0080e2b4 	movhi	r2,906
  80e06c:	0080e0c8 	cmpgei	r2,zero,899
  80e070:	0080e0c8 	cmpgei	r2,zero,899
  80e074:	0080e0c4 	movi	r2,899
  80e078:	0080e290 	cmplti	r2,zero,906
  80e07c:	0080e290 	cmplti	r2,zero,906
  80e080:	0080e278 	rdprs	r2,zero,905
  80e084:	0080e0c4 	movi	r2,899
  80e088:	0080e290 	cmplti	r2,zero,906
  80e08c:	0080e278 	rdprs	r2,zero,905
  80e090:	0080e290 	cmplti	r2,zero,906
  80e094:	0080e0c4 	movi	r2,899
  80e098:	0080e2a0 	cmpeqi	r2,zero,906
  80e09c:	0080e2a0 	cmpeqi	r2,zero,906
  80e0a0:	0080e2a0 	cmpeqi	r2,zero,906
  80e0a4:	0080e4bc 	xorhi	r2,zero,914
  80e0a8:	2404b03a 	or	r2,r4,r16
  80e0ac:	10006f1e 	bne	r2,zero,80e26c <__muldf3+0x2f8>
  80e0b0:	04c00204 	movi	r19,8
  80e0b4:	0021883a 	mov	r16,zero
  80e0b8:	0029883a 	mov	r20,zero
  80e0bc:	07000084 	movi	fp,2
  80e0c0:	003fcb06 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e0c4:	502d883a 	mov	r22,r10
  80e0c8:	00800084 	movi	r2,2
  80e0cc:	28805726 	beq	r5,r2,80e22c <__muldf3+0x2b8>
  80e0d0:	008000c4 	movi	r2,3
  80e0d4:	28816626 	beq	r5,r2,80e670 <__muldf3+0x6fc>
  80e0d8:	00800044 	movi	r2,1
  80e0dc:	2881411e 	bne	r5,r2,80e5e4 <__muldf3+0x670>
  80e0e0:	b02b883a 	mov	r21,r22
  80e0e4:	0005883a 	mov	r2,zero
  80e0e8:	000b883a 	mov	r5,zero
  80e0ec:	0029883a 	mov	r20,zero
  80e0f0:	1004953a 	slli	r2,r2,20
  80e0f4:	a8c03fcc 	andi	r3,r21,255
  80e0f8:	04400434 	movhi	r17,16
  80e0fc:	8c7fffc4 	addi	r17,r17,-1
  80e100:	180697fa 	slli	r3,r3,31
  80e104:	2c4a703a 	and	r5,r5,r17
  80e108:	288ab03a 	or	r5,r5,r2
  80e10c:	28c6b03a 	or	r3,r5,r3
  80e110:	a005883a 	mov	r2,r20
  80e114:	dfc00c17 	ldw	ra,48(sp)
  80e118:	df000b17 	ldw	fp,44(sp)
  80e11c:	ddc00a17 	ldw	r23,40(sp)
  80e120:	dd800917 	ldw	r22,36(sp)
  80e124:	dd400817 	ldw	r21,32(sp)
  80e128:	dd000717 	ldw	r20,28(sp)
  80e12c:	dcc00617 	ldw	r19,24(sp)
  80e130:	dc800517 	ldw	r18,20(sp)
  80e134:	dc400417 	ldw	r17,16(sp)
  80e138:	dc000317 	ldw	r16,12(sp)
  80e13c:	dec00d04 	addi	sp,sp,52
  80e140:	f800283a 	ret
  80e144:	2404b03a 	or	r2,r4,r16
  80e148:	2027883a 	mov	r19,r4
  80e14c:	10004226 	beq	r2,zero,80e258 <__muldf3+0x2e4>
  80e150:	8000fc26 	beq	r16,zero,80e544 <__muldf3+0x5d0>
  80e154:	8009883a 	mov	r4,r16
  80e158:	d9800215 	stw	r6,8(sp)
  80e15c:	d9c00015 	stw	r7,0(sp)
  80e160:	da400115 	stw	r9,4(sp)
  80e164:	080f18c0 	call	80f18c <__clzsi2>
  80e168:	d9800217 	ldw	r6,8(sp)
  80e16c:	d9c00017 	ldw	r7,0(sp)
  80e170:	da400117 	ldw	r9,4(sp)
  80e174:	113ffd44 	addi	r4,r2,-11
  80e178:	00c00704 	movi	r3,28
  80e17c:	1900ed16 	blt	r3,r4,80e534 <__muldf3+0x5c0>
  80e180:	00c00744 	movi	r3,29
  80e184:	147ffe04 	addi	r17,r2,-8
  80e188:	1907c83a 	sub	r3,r3,r4
  80e18c:	8460983a 	sll	r16,r16,r17
  80e190:	98c6d83a 	srl	r3,r19,r3
  80e194:	9c68983a 	sll	r20,r19,r17
  80e198:	1c20b03a 	or	r16,r3,r16
  80e19c:	1080fcc4 	addi	r2,r2,1011
  80e1a0:	00a5c83a 	sub	r18,zero,r2
  80e1a4:	0027883a 	mov	r19,zero
  80e1a8:	0039883a 	mov	fp,zero
  80e1ac:	003f9006 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e1b0:	3446b03a 	or	r3,r6,r17
  80e1b4:	1800261e 	bne	r3,zero,80e250 <__muldf3+0x2dc>
  80e1b8:	0023883a 	mov	r17,zero
  80e1bc:	0011883a 	mov	r8,zero
  80e1c0:	01400084 	movi	r5,2
  80e1c4:	003f9c06 	br	80e038 <__alt_mem_onchip_mem+0xff78e038>
  80e1c8:	3446b03a 	or	r3,r6,r17
  80e1cc:	18001c26 	beq	r3,zero,80e240 <__muldf3+0x2cc>
  80e1d0:	8800ce26 	beq	r17,zero,80e50c <__muldf3+0x598>
  80e1d4:	8809883a 	mov	r4,r17
  80e1d8:	d9800215 	stw	r6,8(sp)
  80e1dc:	da400115 	stw	r9,4(sp)
  80e1e0:	da800015 	stw	r10,0(sp)
  80e1e4:	080f18c0 	call	80f18c <__clzsi2>
  80e1e8:	d9800217 	ldw	r6,8(sp)
  80e1ec:	da400117 	ldw	r9,4(sp)
  80e1f0:	da800017 	ldw	r10,0(sp)
  80e1f4:	113ffd44 	addi	r4,r2,-11
  80e1f8:	00c00704 	movi	r3,28
  80e1fc:	1900bf16 	blt	r3,r4,80e4fc <__muldf3+0x588>
  80e200:	00c00744 	movi	r3,29
  80e204:	123ffe04 	addi	r8,r2,-8
  80e208:	1907c83a 	sub	r3,r3,r4
  80e20c:	8a22983a 	sll	r17,r17,r8
  80e210:	30c6d83a 	srl	r3,r6,r3
  80e214:	3210983a 	sll	r8,r6,r8
  80e218:	1c62b03a 	or	r17,r3,r17
  80e21c:	1080fcc4 	addi	r2,r2,1011
  80e220:	0085c83a 	sub	r2,zero,r2
  80e224:	000b883a 	mov	r5,zero
  80e228:	003f8306 	br	80e038 <__alt_mem_onchip_mem+0xff78e038>
  80e22c:	b02b883a 	mov	r21,r22
  80e230:	0081ffc4 	movi	r2,2047
  80e234:	000b883a 	mov	r5,zero
  80e238:	0029883a 	mov	r20,zero
  80e23c:	003fac06 	br	80e0f0 <__alt_mem_onchip_mem+0xff78e0f0>
  80e240:	0023883a 	mov	r17,zero
  80e244:	0011883a 	mov	r8,zero
  80e248:	01400044 	movi	r5,1
  80e24c:	003f7a06 	br	80e038 <__alt_mem_onchip_mem+0xff78e038>
  80e250:	014000c4 	movi	r5,3
  80e254:	003f7806 	br	80e038 <__alt_mem_onchip_mem+0xff78e038>
  80e258:	04c00104 	movi	r19,4
  80e25c:	0021883a 	mov	r16,zero
  80e260:	0029883a 	mov	r20,zero
  80e264:	07000044 	movi	fp,1
  80e268:	003f6106 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e26c:	04c00304 	movi	r19,12
  80e270:	070000c4 	movi	fp,3
  80e274:	003f5e06 	br	80dff0 <__alt_mem_onchip_mem+0xff78dff0>
  80e278:	01400434 	movhi	r5,16
  80e27c:	002b883a 	mov	r21,zero
  80e280:	297fffc4 	addi	r5,r5,-1
  80e284:	053fffc4 	movi	r20,-1
  80e288:	0081ffc4 	movi	r2,2047
  80e28c:	003f9806 	br	80e0f0 <__alt_mem_onchip_mem+0xff78e0f0>
  80e290:	8023883a 	mov	r17,r16
  80e294:	a011883a 	mov	r8,r20
  80e298:	e00b883a 	mov	r5,fp
  80e29c:	003f8a06 	br	80e0c8 <__alt_mem_onchip_mem+0xff78e0c8>
  80e2a0:	8023883a 	mov	r17,r16
  80e2a4:	a011883a 	mov	r8,r20
  80e2a8:	482d883a 	mov	r22,r9
  80e2ac:	e00b883a 	mov	r5,fp
  80e2b0:	003f8506 	br	80e0c8 <__alt_mem_onchip_mem+0xff78e0c8>
  80e2b4:	a00ad43a 	srli	r5,r20,16
  80e2b8:	401ad43a 	srli	r13,r8,16
  80e2bc:	a53fffcc 	andi	r20,r20,65535
  80e2c0:	423fffcc 	andi	r8,r8,65535
  80e2c4:	4519383a 	mul	r12,r8,r20
  80e2c8:	4147383a 	mul	r3,r8,r5
  80e2cc:	6d09383a 	mul	r4,r13,r20
  80e2d0:	600cd43a 	srli	r6,r12,16
  80e2d4:	2b5d383a 	mul	r14,r5,r13
  80e2d8:	20c9883a 	add	r4,r4,r3
  80e2dc:	310d883a 	add	r6,r6,r4
  80e2e0:	30c0022e 	bgeu	r6,r3,80e2ec <__muldf3+0x378>
  80e2e4:	00c00074 	movhi	r3,1
  80e2e8:	70dd883a 	add	r14,r14,r3
  80e2ec:	8826d43a 	srli	r19,r17,16
  80e2f0:	8bffffcc 	andi	r15,r17,65535
  80e2f4:	7d23383a 	mul	r17,r15,r20
  80e2f8:	7949383a 	mul	r4,r15,r5
  80e2fc:	9d29383a 	mul	r20,r19,r20
  80e300:	8814d43a 	srli	r10,r17,16
  80e304:	3012943a 	slli	r9,r6,16
  80e308:	a129883a 	add	r20,r20,r4
  80e30c:	633fffcc 	andi	r12,r12,65535
  80e310:	5515883a 	add	r10,r10,r20
  80e314:	3006d43a 	srli	r3,r6,16
  80e318:	4b13883a 	add	r9,r9,r12
  80e31c:	2ccb383a 	mul	r5,r5,r19
  80e320:	5100022e 	bgeu	r10,r4,80e32c <__muldf3+0x3b8>
  80e324:	01000074 	movhi	r4,1
  80e328:	290b883a 	add	r5,r5,r4
  80e32c:	802ad43a 	srli	r21,r16,16
  80e330:	843fffcc 	andi	r16,r16,65535
  80e334:	440d383a 	mul	r6,r8,r16
  80e338:	4565383a 	mul	r18,r8,r21
  80e33c:	8349383a 	mul	r4,r16,r13
  80e340:	500e943a 	slli	r7,r10,16
  80e344:	3010d43a 	srli	r8,r6,16
  80e348:	5028d43a 	srli	r20,r10,16
  80e34c:	2489883a 	add	r4,r4,r18
  80e350:	8abfffcc 	andi	r10,r17,65535
  80e354:	3a95883a 	add	r10,r7,r10
  80e358:	4119883a 	add	r12,r8,r4
  80e35c:	a169883a 	add	r20,r20,r5
  80e360:	1a87883a 	add	r3,r3,r10
  80e364:	6d5b383a 	mul	r13,r13,r21
  80e368:	6480022e 	bgeu	r12,r18,80e374 <__muldf3+0x400>
  80e36c:	01000074 	movhi	r4,1
  80e370:	691b883a 	add	r13,r13,r4
  80e374:	7c25383a 	mul	r18,r15,r16
  80e378:	7d4b383a 	mul	r5,r15,r21
  80e37c:	84cf383a 	mul	r7,r16,r19
  80e380:	901ed43a 	srli	r15,r18,16
  80e384:	6008d43a 	srli	r4,r12,16
  80e388:	6010943a 	slli	r8,r12,16
  80e38c:	394f883a 	add	r7,r7,r5
  80e390:	333fffcc 	andi	r12,r6,65535
  80e394:	79df883a 	add	r15,r15,r7
  80e398:	235b883a 	add	r13,r4,r13
  80e39c:	9d63383a 	mul	r17,r19,r21
  80e3a0:	4309883a 	add	r4,r8,r12
  80e3a4:	7940022e 	bgeu	r15,r5,80e3b0 <__muldf3+0x43c>
  80e3a8:	01400074 	movhi	r5,1
  80e3ac:	8963883a 	add	r17,r17,r5
  80e3b0:	780a943a 	slli	r5,r15,16
  80e3b4:	91bfffcc 	andi	r6,r18,65535
  80e3b8:	70c7883a 	add	r3,r14,r3
  80e3bc:	298d883a 	add	r6,r5,r6
  80e3c0:	1a8f803a 	cmpltu	r7,r3,r10
  80e3c4:	350b883a 	add	r5,r6,r20
  80e3c8:	20c7883a 	add	r3,r4,r3
  80e3cc:	3955883a 	add	r10,r7,r5
  80e3d0:	1909803a 	cmpltu	r4,r3,r4
  80e3d4:	6a91883a 	add	r8,r13,r10
  80e3d8:	780cd43a 	srli	r6,r15,16
  80e3dc:	2219883a 	add	r12,r4,r8
  80e3e0:	2d0b803a 	cmpltu	r5,r5,r20
  80e3e4:	51cf803a 	cmpltu	r7,r10,r7
  80e3e8:	29ceb03a 	or	r7,r5,r7
  80e3ec:	4351803a 	cmpltu	r8,r8,r13
  80e3f0:	610b803a 	cmpltu	r5,r12,r4
  80e3f4:	4148b03a 	or	r4,r8,r5
  80e3f8:	398f883a 	add	r7,r7,r6
  80e3fc:	3909883a 	add	r4,r7,r4
  80e400:	1810927a 	slli	r8,r3,9
  80e404:	2449883a 	add	r4,r4,r17
  80e408:	2008927a 	slli	r4,r4,9
  80e40c:	6022d5fa 	srli	r17,r12,23
  80e410:	1806d5fa 	srli	r3,r3,23
  80e414:	4252b03a 	or	r9,r8,r9
  80e418:	600a927a 	slli	r5,r12,9
  80e41c:	4810c03a 	cmpne	r8,r9,zero
  80e420:	2462b03a 	or	r17,r4,r17
  80e424:	40c6b03a 	or	r3,r8,r3
  80e428:	8900402c 	andhi	r4,r17,256
  80e42c:	1950b03a 	or	r8,r3,r5
  80e430:	20000726 	beq	r4,zero,80e450 <__muldf3+0x4dc>
  80e434:	4006d07a 	srli	r3,r8,1
  80e438:	880497fa 	slli	r2,r17,31
  80e43c:	4200004c 	andi	r8,r8,1
  80e440:	8822d07a 	srli	r17,r17,1
  80e444:	1a10b03a 	or	r8,r3,r8
  80e448:	1210b03a 	or	r8,r2,r8
  80e44c:	5805883a 	mov	r2,r11
  80e450:	1140ffc4 	addi	r5,r2,1023
  80e454:	0140440e 	bge	zero,r5,80e568 <__muldf3+0x5f4>
  80e458:	40c001cc 	andi	r3,r8,7
  80e45c:	18000726 	beq	r3,zero,80e47c <__muldf3+0x508>
  80e460:	40c003cc 	andi	r3,r8,15
  80e464:	01000104 	movi	r4,4
  80e468:	19000426 	beq	r3,r4,80e47c <__muldf3+0x508>
  80e46c:	4107883a 	add	r3,r8,r4
  80e470:	1a11803a 	cmpltu	r8,r3,r8
  80e474:	8a23883a 	add	r17,r17,r8
  80e478:	1811883a 	mov	r8,r3
  80e47c:	88c0402c 	andhi	r3,r17,256
  80e480:	18000426 	beq	r3,zero,80e494 <__muldf3+0x520>
  80e484:	11410004 	addi	r5,r2,1024
  80e488:	00bfc034 	movhi	r2,65280
  80e48c:	10bfffc4 	addi	r2,r2,-1
  80e490:	88a2703a 	and	r17,r17,r2
  80e494:	0081ff84 	movi	r2,2046
  80e498:	117f6416 	blt	r2,r5,80e22c <__alt_mem_onchip_mem+0xff78e22c>
  80e49c:	8828977a 	slli	r20,r17,29
  80e4a0:	4010d0fa 	srli	r8,r8,3
  80e4a4:	8822927a 	slli	r17,r17,9
  80e4a8:	2881ffcc 	andi	r2,r5,2047
  80e4ac:	a228b03a 	or	r20,r20,r8
  80e4b0:	880ad33a 	srli	r5,r17,12
  80e4b4:	b02b883a 	mov	r21,r22
  80e4b8:	003f0d06 	br	80e0f0 <__alt_mem_onchip_mem+0xff78e0f0>
  80e4bc:	8080022c 	andhi	r2,r16,8
  80e4c0:	10000926 	beq	r2,zero,80e4e8 <__muldf3+0x574>
  80e4c4:	8880022c 	andhi	r2,r17,8
  80e4c8:	1000071e 	bne	r2,zero,80e4e8 <__muldf3+0x574>
  80e4cc:	00800434 	movhi	r2,16
  80e4d0:	89400234 	orhi	r5,r17,8
  80e4d4:	10bfffc4 	addi	r2,r2,-1
  80e4d8:	b82b883a 	mov	r21,r23
  80e4dc:	288a703a 	and	r5,r5,r2
  80e4e0:	4029883a 	mov	r20,r8
  80e4e4:	003f6806 	br	80e288 <__alt_mem_onchip_mem+0xff78e288>
  80e4e8:	00800434 	movhi	r2,16
  80e4ec:	81400234 	orhi	r5,r16,8
  80e4f0:	10bfffc4 	addi	r2,r2,-1
  80e4f4:	288a703a 	and	r5,r5,r2
  80e4f8:	003f6306 	br	80e288 <__alt_mem_onchip_mem+0xff78e288>
  80e4fc:	147ff604 	addi	r17,r2,-40
  80e500:	3462983a 	sll	r17,r6,r17
  80e504:	0011883a 	mov	r8,zero
  80e508:	003f4406 	br	80e21c <__alt_mem_onchip_mem+0xff78e21c>
  80e50c:	3009883a 	mov	r4,r6
  80e510:	d9800215 	stw	r6,8(sp)
  80e514:	da400115 	stw	r9,4(sp)
  80e518:	da800015 	stw	r10,0(sp)
  80e51c:	080f18c0 	call	80f18c <__clzsi2>
  80e520:	10800804 	addi	r2,r2,32
  80e524:	da800017 	ldw	r10,0(sp)
  80e528:	da400117 	ldw	r9,4(sp)
  80e52c:	d9800217 	ldw	r6,8(sp)
  80e530:	003f3006 	br	80e1f4 <__alt_mem_onchip_mem+0xff78e1f4>
  80e534:	143ff604 	addi	r16,r2,-40
  80e538:	9c20983a 	sll	r16,r19,r16
  80e53c:	0029883a 	mov	r20,zero
  80e540:	003f1606 	br	80e19c <__alt_mem_onchip_mem+0xff78e19c>
  80e544:	d9800215 	stw	r6,8(sp)
  80e548:	d9c00015 	stw	r7,0(sp)
  80e54c:	da400115 	stw	r9,4(sp)
  80e550:	080f18c0 	call	80f18c <__clzsi2>
  80e554:	10800804 	addi	r2,r2,32
  80e558:	da400117 	ldw	r9,4(sp)
  80e55c:	d9c00017 	ldw	r7,0(sp)
  80e560:	d9800217 	ldw	r6,8(sp)
  80e564:	003f0306 	br	80e174 <__alt_mem_onchip_mem+0xff78e174>
  80e568:	00c00044 	movi	r3,1
  80e56c:	1947c83a 	sub	r3,r3,r5
  80e570:	00800e04 	movi	r2,56
  80e574:	10feda16 	blt	r2,r3,80e0e0 <__alt_mem_onchip_mem+0xff78e0e0>
  80e578:	008007c4 	movi	r2,31
  80e57c:	10c01b16 	blt	r2,r3,80e5ec <__muldf3+0x678>
  80e580:	00800804 	movi	r2,32
  80e584:	10c5c83a 	sub	r2,r2,r3
  80e588:	888a983a 	sll	r5,r17,r2
  80e58c:	40c8d83a 	srl	r4,r8,r3
  80e590:	4084983a 	sll	r2,r8,r2
  80e594:	88e2d83a 	srl	r17,r17,r3
  80e598:	2906b03a 	or	r3,r5,r4
  80e59c:	1004c03a 	cmpne	r2,r2,zero
  80e5a0:	1886b03a 	or	r3,r3,r2
  80e5a4:	188001cc 	andi	r2,r3,7
  80e5a8:	10000726 	beq	r2,zero,80e5c8 <__muldf3+0x654>
  80e5ac:	188003cc 	andi	r2,r3,15
  80e5b0:	01000104 	movi	r4,4
  80e5b4:	11000426 	beq	r2,r4,80e5c8 <__muldf3+0x654>
  80e5b8:	1805883a 	mov	r2,r3
  80e5bc:	10c00104 	addi	r3,r2,4
  80e5c0:	1885803a 	cmpltu	r2,r3,r2
  80e5c4:	88a3883a 	add	r17,r17,r2
  80e5c8:	8880202c 	andhi	r2,r17,128
  80e5cc:	10001c26 	beq	r2,zero,80e640 <__muldf3+0x6cc>
  80e5d0:	b02b883a 	mov	r21,r22
  80e5d4:	00800044 	movi	r2,1
  80e5d8:	000b883a 	mov	r5,zero
  80e5dc:	0029883a 	mov	r20,zero
  80e5e0:	003ec306 	br	80e0f0 <__alt_mem_onchip_mem+0xff78e0f0>
  80e5e4:	5805883a 	mov	r2,r11
  80e5e8:	003f9906 	br	80e450 <__alt_mem_onchip_mem+0xff78e450>
  80e5ec:	00bff844 	movi	r2,-31
  80e5f0:	1145c83a 	sub	r2,r2,r5
  80e5f4:	8888d83a 	srl	r4,r17,r2
  80e5f8:	00800804 	movi	r2,32
  80e5fc:	18801a26 	beq	r3,r2,80e668 <__muldf3+0x6f4>
  80e600:	00801004 	movi	r2,64
  80e604:	10c5c83a 	sub	r2,r2,r3
  80e608:	8884983a 	sll	r2,r17,r2
  80e60c:	1204b03a 	or	r2,r2,r8
  80e610:	1004c03a 	cmpne	r2,r2,zero
  80e614:	2084b03a 	or	r2,r4,r2
  80e618:	144001cc 	andi	r17,r2,7
  80e61c:	88000d1e 	bne	r17,zero,80e654 <__muldf3+0x6e0>
  80e620:	000b883a 	mov	r5,zero
  80e624:	1028d0fa 	srli	r20,r2,3
  80e628:	b02b883a 	mov	r21,r22
  80e62c:	0005883a 	mov	r2,zero
  80e630:	a468b03a 	or	r20,r20,r17
  80e634:	003eae06 	br	80e0f0 <__alt_mem_onchip_mem+0xff78e0f0>
  80e638:	1007883a 	mov	r3,r2
  80e63c:	0023883a 	mov	r17,zero
  80e640:	880a927a 	slli	r5,r17,9
  80e644:	1805883a 	mov	r2,r3
  80e648:	8822977a 	slli	r17,r17,29
  80e64c:	280ad33a 	srli	r5,r5,12
  80e650:	003ff406 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80e654:	10c003cc 	andi	r3,r2,15
  80e658:	01000104 	movi	r4,4
  80e65c:	193ff626 	beq	r3,r4,80e638 <__alt_mem_onchip_mem+0xff78e638>
  80e660:	0023883a 	mov	r17,zero
  80e664:	003fd506 	br	80e5bc <__alt_mem_onchip_mem+0xff78e5bc>
  80e668:	0005883a 	mov	r2,zero
  80e66c:	003fe706 	br	80e60c <__alt_mem_onchip_mem+0xff78e60c>
  80e670:	00800434 	movhi	r2,16
  80e674:	89400234 	orhi	r5,r17,8
  80e678:	10bfffc4 	addi	r2,r2,-1
  80e67c:	b02b883a 	mov	r21,r22
  80e680:	288a703a 	and	r5,r5,r2
  80e684:	4029883a 	mov	r20,r8
  80e688:	003eff06 	br	80e288 <__alt_mem_onchip_mem+0xff78e288>

0080e68c <__subdf3>:
  80e68c:	02000434 	movhi	r8,16
  80e690:	423fffc4 	addi	r8,r8,-1
  80e694:	defffb04 	addi	sp,sp,-20
  80e698:	2a14703a 	and	r10,r5,r8
  80e69c:	3812d53a 	srli	r9,r7,20
  80e6a0:	3a10703a 	and	r8,r7,r8
  80e6a4:	2006d77a 	srli	r3,r4,29
  80e6a8:	3004d77a 	srli	r2,r6,29
  80e6ac:	dc000015 	stw	r16,0(sp)
  80e6b0:	501490fa 	slli	r10,r10,3
  80e6b4:	2820d53a 	srli	r16,r5,20
  80e6b8:	401090fa 	slli	r8,r8,3
  80e6bc:	dc800215 	stw	r18,8(sp)
  80e6c0:	dc400115 	stw	r17,4(sp)
  80e6c4:	dfc00415 	stw	ra,16(sp)
  80e6c8:	202290fa 	slli	r17,r4,3
  80e6cc:	dcc00315 	stw	r19,12(sp)
  80e6d0:	4a41ffcc 	andi	r9,r9,2047
  80e6d4:	0101ffc4 	movi	r4,2047
  80e6d8:	2824d7fa 	srli	r18,r5,31
  80e6dc:	8401ffcc 	andi	r16,r16,2047
  80e6e0:	50c6b03a 	or	r3,r10,r3
  80e6e4:	380ed7fa 	srli	r7,r7,31
  80e6e8:	408ab03a 	or	r5,r8,r2
  80e6ec:	300c90fa 	slli	r6,r6,3
  80e6f0:	49009626 	beq	r9,r4,80e94c <__subdf3+0x2c0>
  80e6f4:	39c0005c 	xori	r7,r7,1
  80e6f8:	8245c83a 	sub	r2,r16,r9
  80e6fc:	3c807426 	beq	r7,r18,80e8d0 <__subdf3+0x244>
  80e700:	0080af0e 	bge	zero,r2,80e9c0 <__subdf3+0x334>
  80e704:	48002a1e 	bne	r9,zero,80e7b0 <__subdf3+0x124>
  80e708:	2988b03a 	or	r4,r5,r6
  80e70c:	20009a1e 	bne	r4,zero,80e978 <__subdf3+0x2ec>
  80e710:	888001cc 	andi	r2,r17,7
  80e714:	10000726 	beq	r2,zero,80e734 <__subdf3+0xa8>
  80e718:	888003cc 	andi	r2,r17,15
  80e71c:	01000104 	movi	r4,4
  80e720:	11000426 	beq	r2,r4,80e734 <__subdf3+0xa8>
  80e724:	890b883a 	add	r5,r17,r4
  80e728:	2c63803a 	cmpltu	r17,r5,r17
  80e72c:	1c47883a 	add	r3,r3,r17
  80e730:	2823883a 	mov	r17,r5
  80e734:	1880202c 	andhi	r2,r3,128
  80e738:	10005926 	beq	r2,zero,80e8a0 <__subdf3+0x214>
  80e73c:	84000044 	addi	r16,r16,1
  80e740:	0081ffc4 	movi	r2,2047
  80e744:	8080be26 	beq	r16,r2,80ea40 <__subdf3+0x3b4>
  80e748:	017fe034 	movhi	r5,65408
  80e74c:	297fffc4 	addi	r5,r5,-1
  80e750:	1946703a 	and	r3,r3,r5
  80e754:	1804977a 	slli	r2,r3,29
  80e758:	1806927a 	slli	r3,r3,9
  80e75c:	8822d0fa 	srli	r17,r17,3
  80e760:	8401ffcc 	andi	r16,r16,2047
  80e764:	180ad33a 	srli	r5,r3,12
  80e768:	9100004c 	andi	r4,r18,1
  80e76c:	1444b03a 	or	r2,r2,r17
  80e770:	80c1ffcc 	andi	r3,r16,2047
  80e774:	1820953a 	slli	r16,r3,20
  80e778:	20c03fcc 	andi	r3,r4,255
  80e77c:	180897fa 	slli	r4,r3,31
  80e780:	00c00434 	movhi	r3,16
  80e784:	18ffffc4 	addi	r3,r3,-1
  80e788:	28c6703a 	and	r3,r5,r3
  80e78c:	1c06b03a 	or	r3,r3,r16
  80e790:	1906b03a 	or	r3,r3,r4
  80e794:	dfc00417 	ldw	ra,16(sp)
  80e798:	dcc00317 	ldw	r19,12(sp)
  80e79c:	dc800217 	ldw	r18,8(sp)
  80e7a0:	dc400117 	ldw	r17,4(sp)
  80e7a4:	dc000017 	ldw	r16,0(sp)
  80e7a8:	dec00504 	addi	sp,sp,20
  80e7ac:	f800283a 	ret
  80e7b0:	0101ffc4 	movi	r4,2047
  80e7b4:	813fd626 	beq	r16,r4,80e710 <__alt_mem_onchip_mem+0xff78e710>
  80e7b8:	29402034 	orhi	r5,r5,128
  80e7bc:	01000e04 	movi	r4,56
  80e7c0:	2080a316 	blt	r4,r2,80ea50 <__subdf3+0x3c4>
  80e7c4:	010007c4 	movi	r4,31
  80e7c8:	2080c616 	blt	r4,r2,80eae4 <__subdf3+0x458>
  80e7cc:	01000804 	movi	r4,32
  80e7d0:	2089c83a 	sub	r4,r4,r2
  80e7d4:	2910983a 	sll	r8,r5,r4
  80e7d8:	308ed83a 	srl	r7,r6,r2
  80e7dc:	3108983a 	sll	r4,r6,r4
  80e7e0:	2884d83a 	srl	r2,r5,r2
  80e7e4:	41ccb03a 	or	r6,r8,r7
  80e7e8:	2008c03a 	cmpne	r4,r4,zero
  80e7ec:	310cb03a 	or	r6,r6,r4
  80e7f0:	898dc83a 	sub	r6,r17,r6
  80e7f4:	89a3803a 	cmpltu	r17,r17,r6
  80e7f8:	1887c83a 	sub	r3,r3,r2
  80e7fc:	1c47c83a 	sub	r3,r3,r17
  80e800:	3023883a 	mov	r17,r6
  80e804:	1880202c 	andhi	r2,r3,128
  80e808:	10002326 	beq	r2,zero,80e898 <__subdf3+0x20c>
  80e80c:	04c02034 	movhi	r19,128
  80e810:	9cffffc4 	addi	r19,r19,-1
  80e814:	1ce6703a 	and	r19,r3,r19
  80e818:	98007a26 	beq	r19,zero,80ea04 <__subdf3+0x378>
  80e81c:	9809883a 	mov	r4,r19
  80e820:	080f18c0 	call	80f18c <__clzsi2>
  80e824:	113ffe04 	addi	r4,r2,-8
  80e828:	00c007c4 	movi	r3,31
  80e82c:	19007b16 	blt	r3,r4,80ea1c <__subdf3+0x390>
  80e830:	00800804 	movi	r2,32
  80e834:	1105c83a 	sub	r2,r2,r4
  80e838:	8884d83a 	srl	r2,r17,r2
  80e83c:	9906983a 	sll	r3,r19,r4
  80e840:	8922983a 	sll	r17,r17,r4
  80e844:	10c4b03a 	or	r2,r2,r3
  80e848:	24007816 	blt	r4,r16,80ea2c <__subdf3+0x3a0>
  80e84c:	2421c83a 	sub	r16,r4,r16
  80e850:	80c00044 	addi	r3,r16,1
  80e854:	010007c4 	movi	r4,31
  80e858:	20c09516 	blt	r4,r3,80eab0 <__subdf3+0x424>
  80e85c:	01400804 	movi	r5,32
  80e860:	28cbc83a 	sub	r5,r5,r3
  80e864:	88c8d83a 	srl	r4,r17,r3
  80e868:	8962983a 	sll	r17,r17,r5
  80e86c:	114a983a 	sll	r5,r2,r5
  80e870:	10c6d83a 	srl	r3,r2,r3
  80e874:	8804c03a 	cmpne	r2,r17,zero
  80e878:	290ab03a 	or	r5,r5,r4
  80e87c:	28a2b03a 	or	r17,r5,r2
  80e880:	0021883a 	mov	r16,zero
  80e884:	003fa206 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80e888:	2090b03a 	or	r8,r4,r2
  80e88c:	40018e26 	beq	r8,zero,80eec8 <__subdf3+0x83c>
  80e890:	1007883a 	mov	r3,r2
  80e894:	2023883a 	mov	r17,r4
  80e898:	888001cc 	andi	r2,r17,7
  80e89c:	103f9e1e 	bne	r2,zero,80e718 <__alt_mem_onchip_mem+0xff78e718>
  80e8a0:	1804977a 	slli	r2,r3,29
  80e8a4:	8822d0fa 	srli	r17,r17,3
  80e8a8:	1810d0fa 	srli	r8,r3,3
  80e8ac:	9100004c 	andi	r4,r18,1
  80e8b0:	1444b03a 	or	r2,r2,r17
  80e8b4:	00c1ffc4 	movi	r3,2047
  80e8b8:	80c02826 	beq	r16,r3,80e95c <__subdf3+0x2d0>
  80e8bc:	01400434 	movhi	r5,16
  80e8c0:	297fffc4 	addi	r5,r5,-1
  80e8c4:	80e0703a 	and	r16,r16,r3
  80e8c8:	414a703a 	and	r5,r8,r5
  80e8cc:	003fa806 	br	80e770 <__alt_mem_onchip_mem+0xff78e770>
  80e8d0:	0080630e 	bge	zero,r2,80ea60 <__subdf3+0x3d4>
  80e8d4:	48003026 	beq	r9,zero,80e998 <__subdf3+0x30c>
  80e8d8:	0101ffc4 	movi	r4,2047
  80e8dc:	813f8c26 	beq	r16,r4,80e710 <__alt_mem_onchip_mem+0xff78e710>
  80e8e0:	29402034 	orhi	r5,r5,128
  80e8e4:	01000e04 	movi	r4,56
  80e8e8:	2080a90e 	bge	r4,r2,80eb90 <__subdf3+0x504>
  80e8ec:	298cb03a 	or	r6,r5,r6
  80e8f0:	3012c03a 	cmpne	r9,r6,zero
  80e8f4:	0005883a 	mov	r2,zero
  80e8f8:	4c53883a 	add	r9,r9,r17
  80e8fc:	4c63803a 	cmpltu	r17,r9,r17
  80e900:	10c7883a 	add	r3,r2,r3
  80e904:	88c7883a 	add	r3,r17,r3
  80e908:	4823883a 	mov	r17,r9
  80e90c:	1880202c 	andhi	r2,r3,128
  80e910:	1000d026 	beq	r2,zero,80ec54 <__subdf3+0x5c8>
  80e914:	84000044 	addi	r16,r16,1
  80e918:	0081ffc4 	movi	r2,2047
  80e91c:	8080fe26 	beq	r16,r2,80ed18 <__subdf3+0x68c>
  80e920:	00bfe034 	movhi	r2,65408
  80e924:	10bfffc4 	addi	r2,r2,-1
  80e928:	1886703a 	and	r3,r3,r2
  80e92c:	880ad07a 	srli	r5,r17,1
  80e930:	180497fa 	slli	r2,r3,31
  80e934:	8900004c 	andi	r4,r17,1
  80e938:	2922b03a 	or	r17,r5,r4
  80e93c:	1806d07a 	srli	r3,r3,1
  80e940:	1462b03a 	or	r17,r2,r17
  80e944:	3825883a 	mov	r18,r7
  80e948:	003f7106 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80e94c:	2984b03a 	or	r2,r5,r6
  80e950:	103f6826 	beq	r2,zero,80e6f4 <__alt_mem_onchip_mem+0xff78e6f4>
  80e954:	39c03fcc 	andi	r7,r7,255
  80e958:	003f6706 	br	80e6f8 <__alt_mem_onchip_mem+0xff78e6f8>
  80e95c:	4086b03a 	or	r3,r8,r2
  80e960:	18015226 	beq	r3,zero,80eeac <__subdf3+0x820>
  80e964:	00c00434 	movhi	r3,16
  80e968:	41400234 	orhi	r5,r8,8
  80e96c:	18ffffc4 	addi	r3,r3,-1
  80e970:	28ca703a 	and	r5,r5,r3
  80e974:	003f7e06 	br	80e770 <__alt_mem_onchip_mem+0xff78e770>
  80e978:	10bfffc4 	addi	r2,r2,-1
  80e97c:	1000491e 	bne	r2,zero,80eaa4 <__subdf3+0x418>
  80e980:	898fc83a 	sub	r7,r17,r6
  80e984:	89e3803a 	cmpltu	r17,r17,r7
  80e988:	1947c83a 	sub	r3,r3,r5
  80e98c:	1c47c83a 	sub	r3,r3,r17
  80e990:	3823883a 	mov	r17,r7
  80e994:	003f9b06 	br	80e804 <__alt_mem_onchip_mem+0xff78e804>
  80e998:	2988b03a 	or	r4,r5,r6
  80e99c:	203f5c26 	beq	r4,zero,80e710 <__alt_mem_onchip_mem+0xff78e710>
  80e9a0:	10bfffc4 	addi	r2,r2,-1
  80e9a4:	1000931e 	bne	r2,zero,80ebf4 <__subdf3+0x568>
  80e9a8:	898d883a 	add	r6,r17,r6
  80e9ac:	3463803a 	cmpltu	r17,r6,r17
  80e9b0:	1947883a 	add	r3,r3,r5
  80e9b4:	88c7883a 	add	r3,r17,r3
  80e9b8:	3023883a 	mov	r17,r6
  80e9bc:	003fd306 	br	80e90c <__alt_mem_onchip_mem+0xff78e90c>
  80e9c0:	1000541e 	bne	r2,zero,80eb14 <__subdf3+0x488>
  80e9c4:	80800044 	addi	r2,r16,1
  80e9c8:	1081ffcc 	andi	r2,r2,2047
  80e9cc:	01000044 	movi	r4,1
  80e9d0:	2080a20e 	bge	r4,r2,80ec5c <__subdf3+0x5d0>
  80e9d4:	8989c83a 	sub	r4,r17,r6
  80e9d8:	8905803a 	cmpltu	r2,r17,r4
  80e9dc:	1967c83a 	sub	r19,r3,r5
  80e9e0:	98a7c83a 	sub	r19,r19,r2
  80e9e4:	9880202c 	andhi	r2,r19,128
  80e9e8:	10006326 	beq	r2,zero,80eb78 <__subdf3+0x4ec>
  80e9ec:	3463c83a 	sub	r17,r6,r17
  80e9f0:	28c7c83a 	sub	r3,r5,r3
  80e9f4:	344d803a 	cmpltu	r6,r6,r17
  80e9f8:	19a7c83a 	sub	r19,r3,r6
  80e9fc:	3825883a 	mov	r18,r7
  80ea00:	983f861e 	bne	r19,zero,80e81c <__alt_mem_onchip_mem+0xff78e81c>
  80ea04:	8809883a 	mov	r4,r17
  80ea08:	080f18c0 	call	80f18c <__clzsi2>
  80ea0c:	10800804 	addi	r2,r2,32
  80ea10:	113ffe04 	addi	r4,r2,-8
  80ea14:	00c007c4 	movi	r3,31
  80ea18:	193f850e 	bge	r3,r4,80e830 <__alt_mem_onchip_mem+0xff78e830>
  80ea1c:	10bff604 	addi	r2,r2,-40
  80ea20:	8884983a 	sll	r2,r17,r2
  80ea24:	0023883a 	mov	r17,zero
  80ea28:	243f880e 	bge	r4,r16,80e84c <__alt_mem_onchip_mem+0xff78e84c>
  80ea2c:	00ffe034 	movhi	r3,65408
  80ea30:	18ffffc4 	addi	r3,r3,-1
  80ea34:	8121c83a 	sub	r16,r16,r4
  80ea38:	10c6703a 	and	r3,r2,r3
  80ea3c:	003f3406 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ea40:	9100004c 	andi	r4,r18,1
  80ea44:	000b883a 	mov	r5,zero
  80ea48:	0005883a 	mov	r2,zero
  80ea4c:	003f4806 	br	80e770 <__alt_mem_onchip_mem+0xff78e770>
  80ea50:	298cb03a 	or	r6,r5,r6
  80ea54:	300cc03a 	cmpne	r6,r6,zero
  80ea58:	0005883a 	mov	r2,zero
  80ea5c:	003f6406 	br	80e7f0 <__alt_mem_onchip_mem+0xff78e7f0>
  80ea60:	10009a1e 	bne	r2,zero,80eccc <__subdf3+0x640>
  80ea64:	82400044 	addi	r9,r16,1
  80ea68:	4881ffcc 	andi	r2,r9,2047
  80ea6c:	02800044 	movi	r10,1
  80ea70:	5080670e 	bge	r10,r2,80ec10 <__subdf3+0x584>
  80ea74:	0081ffc4 	movi	r2,2047
  80ea78:	4880af26 	beq	r9,r2,80ed38 <__subdf3+0x6ac>
  80ea7c:	898d883a 	add	r6,r17,r6
  80ea80:	1945883a 	add	r2,r3,r5
  80ea84:	3447803a 	cmpltu	r3,r6,r17
  80ea88:	1887883a 	add	r3,r3,r2
  80ea8c:	182297fa 	slli	r17,r3,31
  80ea90:	300cd07a 	srli	r6,r6,1
  80ea94:	1806d07a 	srli	r3,r3,1
  80ea98:	4821883a 	mov	r16,r9
  80ea9c:	89a2b03a 	or	r17,r17,r6
  80eaa0:	003f1b06 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80eaa4:	0101ffc4 	movi	r4,2047
  80eaa8:	813f441e 	bne	r16,r4,80e7bc <__alt_mem_onchip_mem+0xff78e7bc>
  80eaac:	003f1806 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80eab0:	843ff844 	addi	r16,r16,-31
  80eab4:	01400804 	movi	r5,32
  80eab8:	1408d83a 	srl	r4,r2,r16
  80eabc:	19405026 	beq	r3,r5,80ec00 <__subdf3+0x574>
  80eac0:	01401004 	movi	r5,64
  80eac4:	28c7c83a 	sub	r3,r5,r3
  80eac8:	10c4983a 	sll	r2,r2,r3
  80eacc:	88a2b03a 	or	r17,r17,r2
  80ead0:	8822c03a 	cmpne	r17,r17,zero
  80ead4:	2462b03a 	or	r17,r4,r17
  80ead8:	0007883a 	mov	r3,zero
  80eadc:	0021883a 	mov	r16,zero
  80eae0:	003f6d06 	br	80e898 <__alt_mem_onchip_mem+0xff78e898>
  80eae4:	11fff804 	addi	r7,r2,-32
  80eae8:	01000804 	movi	r4,32
  80eaec:	29ced83a 	srl	r7,r5,r7
  80eaf0:	11004526 	beq	r2,r4,80ec08 <__subdf3+0x57c>
  80eaf4:	01001004 	movi	r4,64
  80eaf8:	2089c83a 	sub	r4,r4,r2
  80eafc:	2904983a 	sll	r2,r5,r4
  80eb00:	118cb03a 	or	r6,r2,r6
  80eb04:	300cc03a 	cmpne	r6,r6,zero
  80eb08:	398cb03a 	or	r6,r7,r6
  80eb0c:	0005883a 	mov	r2,zero
  80eb10:	003f3706 	br	80e7f0 <__alt_mem_onchip_mem+0xff78e7f0>
  80eb14:	80002a26 	beq	r16,zero,80ebc0 <__subdf3+0x534>
  80eb18:	0101ffc4 	movi	r4,2047
  80eb1c:	49006626 	beq	r9,r4,80ecb8 <__subdf3+0x62c>
  80eb20:	0085c83a 	sub	r2,zero,r2
  80eb24:	18c02034 	orhi	r3,r3,128
  80eb28:	01000e04 	movi	r4,56
  80eb2c:	20807e16 	blt	r4,r2,80ed28 <__subdf3+0x69c>
  80eb30:	010007c4 	movi	r4,31
  80eb34:	2080e716 	blt	r4,r2,80eed4 <__subdf3+0x848>
  80eb38:	01000804 	movi	r4,32
  80eb3c:	2089c83a 	sub	r4,r4,r2
  80eb40:	1914983a 	sll	r10,r3,r4
  80eb44:	8890d83a 	srl	r8,r17,r2
  80eb48:	8908983a 	sll	r4,r17,r4
  80eb4c:	1884d83a 	srl	r2,r3,r2
  80eb50:	5222b03a 	or	r17,r10,r8
  80eb54:	2006c03a 	cmpne	r3,r4,zero
  80eb58:	88e2b03a 	or	r17,r17,r3
  80eb5c:	3463c83a 	sub	r17,r6,r17
  80eb60:	2885c83a 	sub	r2,r5,r2
  80eb64:	344d803a 	cmpltu	r6,r6,r17
  80eb68:	1187c83a 	sub	r3,r2,r6
  80eb6c:	4821883a 	mov	r16,r9
  80eb70:	3825883a 	mov	r18,r7
  80eb74:	003f2306 	br	80e804 <__alt_mem_onchip_mem+0xff78e804>
  80eb78:	24d0b03a 	or	r8,r4,r19
  80eb7c:	40001b1e 	bne	r8,zero,80ebec <__subdf3+0x560>
  80eb80:	0005883a 	mov	r2,zero
  80eb84:	0009883a 	mov	r4,zero
  80eb88:	0021883a 	mov	r16,zero
  80eb8c:	003f4906 	br	80e8b4 <__alt_mem_onchip_mem+0xff78e8b4>
  80eb90:	010007c4 	movi	r4,31
  80eb94:	20803a16 	blt	r4,r2,80ec80 <__subdf3+0x5f4>
  80eb98:	01000804 	movi	r4,32
  80eb9c:	2089c83a 	sub	r4,r4,r2
  80eba0:	2912983a 	sll	r9,r5,r4
  80eba4:	3090d83a 	srl	r8,r6,r2
  80eba8:	3108983a 	sll	r4,r6,r4
  80ebac:	2884d83a 	srl	r2,r5,r2
  80ebb0:	4a12b03a 	or	r9,r9,r8
  80ebb4:	2008c03a 	cmpne	r4,r4,zero
  80ebb8:	4912b03a 	or	r9,r9,r4
  80ebbc:	003f4e06 	br	80e8f8 <__alt_mem_onchip_mem+0xff78e8f8>
  80ebc0:	1c48b03a 	or	r4,r3,r17
  80ebc4:	20003c26 	beq	r4,zero,80ecb8 <__subdf3+0x62c>
  80ebc8:	0084303a 	nor	r2,zero,r2
  80ebcc:	1000381e 	bne	r2,zero,80ecb0 <__subdf3+0x624>
  80ebd0:	3463c83a 	sub	r17,r6,r17
  80ebd4:	28c5c83a 	sub	r2,r5,r3
  80ebd8:	344d803a 	cmpltu	r6,r6,r17
  80ebdc:	1187c83a 	sub	r3,r2,r6
  80ebe0:	4821883a 	mov	r16,r9
  80ebe4:	3825883a 	mov	r18,r7
  80ebe8:	003f0606 	br	80e804 <__alt_mem_onchip_mem+0xff78e804>
  80ebec:	2023883a 	mov	r17,r4
  80ebf0:	003f0906 	br	80e818 <__alt_mem_onchip_mem+0xff78e818>
  80ebf4:	0101ffc4 	movi	r4,2047
  80ebf8:	813f3a1e 	bne	r16,r4,80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80ebfc:	003ec406 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ec00:	0005883a 	mov	r2,zero
  80ec04:	003fb106 	br	80eacc <__alt_mem_onchip_mem+0xff78eacc>
  80ec08:	0005883a 	mov	r2,zero
  80ec0c:	003fbc06 	br	80eb00 <__alt_mem_onchip_mem+0xff78eb00>
  80ec10:	1c44b03a 	or	r2,r3,r17
  80ec14:	80008e1e 	bne	r16,zero,80ee50 <__subdf3+0x7c4>
  80ec18:	1000c826 	beq	r2,zero,80ef3c <__subdf3+0x8b0>
  80ec1c:	2984b03a 	or	r2,r5,r6
  80ec20:	103ebb26 	beq	r2,zero,80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ec24:	8989883a 	add	r4,r17,r6
  80ec28:	1945883a 	add	r2,r3,r5
  80ec2c:	2447803a 	cmpltu	r3,r4,r17
  80ec30:	1887883a 	add	r3,r3,r2
  80ec34:	1880202c 	andhi	r2,r3,128
  80ec38:	2023883a 	mov	r17,r4
  80ec3c:	103f1626 	beq	r2,zero,80e898 <__alt_mem_onchip_mem+0xff78e898>
  80ec40:	00bfe034 	movhi	r2,65408
  80ec44:	10bfffc4 	addi	r2,r2,-1
  80ec48:	5021883a 	mov	r16,r10
  80ec4c:	1886703a 	and	r3,r3,r2
  80ec50:	003eaf06 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ec54:	3825883a 	mov	r18,r7
  80ec58:	003f0f06 	br	80e898 <__alt_mem_onchip_mem+0xff78e898>
  80ec5c:	1c44b03a 	or	r2,r3,r17
  80ec60:	8000251e 	bne	r16,zero,80ecf8 <__subdf3+0x66c>
  80ec64:	1000661e 	bne	r2,zero,80ee00 <__subdf3+0x774>
  80ec68:	2990b03a 	or	r8,r5,r6
  80ec6c:	40009626 	beq	r8,zero,80eec8 <__subdf3+0x83c>
  80ec70:	2807883a 	mov	r3,r5
  80ec74:	3023883a 	mov	r17,r6
  80ec78:	3825883a 	mov	r18,r7
  80ec7c:	003ea406 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ec80:	127ff804 	addi	r9,r2,-32
  80ec84:	01000804 	movi	r4,32
  80ec88:	2a52d83a 	srl	r9,r5,r9
  80ec8c:	11008c26 	beq	r2,r4,80eec0 <__subdf3+0x834>
  80ec90:	01001004 	movi	r4,64
  80ec94:	2085c83a 	sub	r2,r4,r2
  80ec98:	2884983a 	sll	r2,r5,r2
  80ec9c:	118cb03a 	or	r6,r2,r6
  80eca0:	300cc03a 	cmpne	r6,r6,zero
  80eca4:	4992b03a 	or	r9,r9,r6
  80eca8:	0005883a 	mov	r2,zero
  80ecac:	003f1206 	br	80e8f8 <__alt_mem_onchip_mem+0xff78e8f8>
  80ecb0:	0101ffc4 	movi	r4,2047
  80ecb4:	493f9c1e 	bne	r9,r4,80eb28 <__alt_mem_onchip_mem+0xff78eb28>
  80ecb8:	2807883a 	mov	r3,r5
  80ecbc:	3023883a 	mov	r17,r6
  80ecc0:	4821883a 	mov	r16,r9
  80ecc4:	3825883a 	mov	r18,r7
  80ecc8:	003e9106 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80eccc:	80001f1e 	bne	r16,zero,80ed4c <__subdf3+0x6c0>
  80ecd0:	1c48b03a 	or	r4,r3,r17
  80ecd4:	20005a26 	beq	r4,zero,80ee40 <__subdf3+0x7b4>
  80ecd8:	0084303a 	nor	r2,zero,r2
  80ecdc:	1000561e 	bne	r2,zero,80ee38 <__subdf3+0x7ac>
  80ece0:	89a3883a 	add	r17,r17,r6
  80ece4:	1945883a 	add	r2,r3,r5
  80ece8:	898d803a 	cmpltu	r6,r17,r6
  80ecec:	3087883a 	add	r3,r6,r2
  80ecf0:	4821883a 	mov	r16,r9
  80ecf4:	003f0506 	br	80e90c <__alt_mem_onchip_mem+0xff78e90c>
  80ecf8:	10002b1e 	bne	r2,zero,80eda8 <__subdf3+0x71c>
  80ecfc:	2984b03a 	or	r2,r5,r6
  80ed00:	10008026 	beq	r2,zero,80ef04 <__subdf3+0x878>
  80ed04:	2807883a 	mov	r3,r5
  80ed08:	3023883a 	mov	r17,r6
  80ed0c:	3825883a 	mov	r18,r7
  80ed10:	0401ffc4 	movi	r16,2047
  80ed14:	003e7e06 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ed18:	3809883a 	mov	r4,r7
  80ed1c:	0011883a 	mov	r8,zero
  80ed20:	0005883a 	mov	r2,zero
  80ed24:	003ee306 	br	80e8b4 <__alt_mem_onchip_mem+0xff78e8b4>
  80ed28:	1c62b03a 	or	r17,r3,r17
  80ed2c:	8822c03a 	cmpne	r17,r17,zero
  80ed30:	0005883a 	mov	r2,zero
  80ed34:	003f8906 	br	80eb5c <__alt_mem_onchip_mem+0xff78eb5c>
  80ed38:	3809883a 	mov	r4,r7
  80ed3c:	4821883a 	mov	r16,r9
  80ed40:	0011883a 	mov	r8,zero
  80ed44:	0005883a 	mov	r2,zero
  80ed48:	003eda06 	br	80e8b4 <__alt_mem_onchip_mem+0xff78e8b4>
  80ed4c:	0101ffc4 	movi	r4,2047
  80ed50:	49003b26 	beq	r9,r4,80ee40 <__subdf3+0x7b4>
  80ed54:	0085c83a 	sub	r2,zero,r2
  80ed58:	18c02034 	orhi	r3,r3,128
  80ed5c:	01000e04 	movi	r4,56
  80ed60:	20806e16 	blt	r4,r2,80ef1c <__subdf3+0x890>
  80ed64:	010007c4 	movi	r4,31
  80ed68:	20807716 	blt	r4,r2,80ef48 <__subdf3+0x8bc>
  80ed6c:	01000804 	movi	r4,32
  80ed70:	2089c83a 	sub	r4,r4,r2
  80ed74:	1914983a 	sll	r10,r3,r4
  80ed78:	8890d83a 	srl	r8,r17,r2
  80ed7c:	8908983a 	sll	r4,r17,r4
  80ed80:	1884d83a 	srl	r2,r3,r2
  80ed84:	5222b03a 	or	r17,r10,r8
  80ed88:	2006c03a 	cmpne	r3,r4,zero
  80ed8c:	88e2b03a 	or	r17,r17,r3
  80ed90:	89a3883a 	add	r17,r17,r6
  80ed94:	1145883a 	add	r2,r2,r5
  80ed98:	898d803a 	cmpltu	r6,r17,r6
  80ed9c:	3087883a 	add	r3,r6,r2
  80eda0:	4821883a 	mov	r16,r9
  80eda4:	003ed906 	br	80e90c <__alt_mem_onchip_mem+0xff78e90c>
  80eda8:	2984b03a 	or	r2,r5,r6
  80edac:	10004226 	beq	r2,zero,80eeb8 <__subdf3+0x82c>
  80edb0:	1808d0fa 	srli	r4,r3,3
  80edb4:	8822d0fa 	srli	r17,r17,3
  80edb8:	1806977a 	slli	r3,r3,29
  80edbc:	2080022c 	andhi	r2,r4,8
  80edc0:	1c62b03a 	or	r17,r3,r17
  80edc4:	10000826 	beq	r2,zero,80ede8 <__subdf3+0x75c>
  80edc8:	2812d0fa 	srli	r9,r5,3
  80edcc:	4880022c 	andhi	r2,r9,8
  80edd0:	1000051e 	bne	r2,zero,80ede8 <__subdf3+0x75c>
  80edd4:	300cd0fa 	srli	r6,r6,3
  80edd8:	2804977a 	slli	r2,r5,29
  80eddc:	4809883a 	mov	r4,r9
  80ede0:	3825883a 	mov	r18,r7
  80ede4:	11a2b03a 	or	r17,r2,r6
  80ede8:	8806d77a 	srli	r3,r17,29
  80edec:	200890fa 	slli	r4,r4,3
  80edf0:	882290fa 	slli	r17,r17,3
  80edf4:	0401ffc4 	movi	r16,2047
  80edf8:	1906b03a 	or	r3,r3,r4
  80edfc:	003e4406 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ee00:	2984b03a 	or	r2,r5,r6
  80ee04:	103e4226 	beq	r2,zero,80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ee08:	8989c83a 	sub	r4,r17,r6
  80ee0c:	8911803a 	cmpltu	r8,r17,r4
  80ee10:	1945c83a 	sub	r2,r3,r5
  80ee14:	1205c83a 	sub	r2,r2,r8
  80ee18:	1200202c 	andhi	r8,r2,128
  80ee1c:	403e9a26 	beq	r8,zero,80e888 <__alt_mem_onchip_mem+0xff78e888>
  80ee20:	3463c83a 	sub	r17,r6,r17
  80ee24:	28c5c83a 	sub	r2,r5,r3
  80ee28:	344d803a 	cmpltu	r6,r6,r17
  80ee2c:	1187c83a 	sub	r3,r2,r6
  80ee30:	3825883a 	mov	r18,r7
  80ee34:	003e3606 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ee38:	0101ffc4 	movi	r4,2047
  80ee3c:	493fc71e 	bne	r9,r4,80ed5c <__alt_mem_onchip_mem+0xff78ed5c>
  80ee40:	2807883a 	mov	r3,r5
  80ee44:	3023883a 	mov	r17,r6
  80ee48:	4821883a 	mov	r16,r9
  80ee4c:	003e3006 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ee50:	10003626 	beq	r2,zero,80ef2c <__subdf3+0x8a0>
  80ee54:	2984b03a 	or	r2,r5,r6
  80ee58:	10001726 	beq	r2,zero,80eeb8 <__subdf3+0x82c>
  80ee5c:	1808d0fa 	srli	r4,r3,3
  80ee60:	8822d0fa 	srli	r17,r17,3
  80ee64:	1806977a 	slli	r3,r3,29
  80ee68:	2080022c 	andhi	r2,r4,8
  80ee6c:	1c62b03a 	or	r17,r3,r17
  80ee70:	10000726 	beq	r2,zero,80ee90 <__subdf3+0x804>
  80ee74:	2812d0fa 	srli	r9,r5,3
  80ee78:	4880022c 	andhi	r2,r9,8
  80ee7c:	1000041e 	bne	r2,zero,80ee90 <__subdf3+0x804>
  80ee80:	300cd0fa 	srli	r6,r6,3
  80ee84:	2804977a 	slli	r2,r5,29
  80ee88:	4809883a 	mov	r4,r9
  80ee8c:	11a2b03a 	or	r17,r2,r6
  80ee90:	8806d77a 	srli	r3,r17,29
  80ee94:	200890fa 	slli	r4,r4,3
  80ee98:	882290fa 	slli	r17,r17,3
  80ee9c:	3825883a 	mov	r18,r7
  80eea0:	1906b03a 	or	r3,r3,r4
  80eea4:	0401ffc4 	movi	r16,2047
  80eea8:	003e1906 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80eeac:	000b883a 	mov	r5,zero
  80eeb0:	0005883a 	mov	r2,zero
  80eeb4:	003e2e06 	br	80e770 <__alt_mem_onchip_mem+0xff78e770>
  80eeb8:	0401ffc4 	movi	r16,2047
  80eebc:	003e1406 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80eec0:	0005883a 	mov	r2,zero
  80eec4:	003f7506 	br	80ec9c <__alt_mem_onchip_mem+0xff78ec9c>
  80eec8:	0005883a 	mov	r2,zero
  80eecc:	0009883a 	mov	r4,zero
  80eed0:	003e7806 	br	80e8b4 <__alt_mem_onchip_mem+0xff78e8b4>
  80eed4:	123ff804 	addi	r8,r2,-32
  80eed8:	01000804 	movi	r4,32
  80eedc:	1a10d83a 	srl	r8,r3,r8
  80eee0:	11002526 	beq	r2,r4,80ef78 <__subdf3+0x8ec>
  80eee4:	01001004 	movi	r4,64
  80eee8:	2085c83a 	sub	r2,r4,r2
  80eeec:	1884983a 	sll	r2,r3,r2
  80eef0:	1444b03a 	or	r2,r2,r17
  80eef4:	1004c03a 	cmpne	r2,r2,zero
  80eef8:	40a2b03a 	or	r17,r8,r2
  80eefc:	0005883a 	mov	r2,zero
  80ef00:	003f1606 	br	80eb5c <__alt_mem_onchip_mem+0xff78eb5c>
  80ef04:	02000434 	movhi	r8,16
  80ef08:	0009883a 	mov	r4,zero
  80ef0c:	423fffc4 	addi	r8,r8,-1
  80ef10:	00bfffc4 	movi	r2,-1
  80ef14:	0401ffc4 	movi	r16,2047
  80ef18:	003e6606 	br	80e8b4 <__alt_mem_onchip_mem+0xff78e8b4>
  80ef1c:	1c62b03a 	or	r17,r3,r17
  80ef20:	8822c03a 	cmpne	r17,r17,zero
  80ef24:	0005883a 	mov	r2,zero
  80ef28:	003f9906 	br	80ed90 <__alt_mem_onchip_mem+0xff78ed90>
  80ef2c:	2807883a 	mov	r3,r5
  80ef30:	3023883a 	mov	r17,r6
  80ef34:	0401ffc4 	movi	r16,2047
  80ef38:	003df506 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ef3c:	2807883a 	mov	r3,r5
  80ef40:	3023883a 	mov	r17,r6
  80ef44:	003df206 	br	80e710 <__alt_mem_onchip_mem+0xff78e710>
  80ef48:	123ff804 	addi	r8,r2,-32
  80ef4c:	01000804 	movi	r4,32
  80ef50:	1a10d83a 	srl	r8,r3,r8
  80ef54:	11000a26 	beq	r2,r4,80ef80 <__subdf3+0x8f4>
  80ef58:	01001004 	movi	r4,64
  80ef5c:	2085c83a 	sub	r2,r4,r2
  80ef60:	1884983a 	sll	r2,r3,r2
  80ef64:	1444b03a 	or	r2,r2,r17
  80ef68:	1004c03a 	cmpne	r2,r2,zero
  80ef6c:	40a2b03a 	or	r17,r8,r2
  80ef70:	0005883a 	mov	r2,zero
  80ef74:	003f8606 	br	80ed90 <__alt_mem_onchip_mem+0xff78ed90>
  80ef78:	0005883a 	mov	r2,zero
  80ef7c:	003fdc06 	br	80eef0 <__alt_mem_onchip_mem+0xff78eef0>
  80ef80:	0005883a 	mov	r2,zero
  80ef84:	003ff706 	br	80ef64 <__alt_mem_onchip_mem+0xff78ef64>

0080ef88 <__fixdfsi>:
  80ef88:	280cd53a 	srli	r6,r5,20
  80ef8c:	00c00434 	movhi	r3,16
  80ef90:	18ffffc4 	addi	r3,r3,-1
  80ef94:	3181ffcc 	andi	r6,r6,2047
  80ef98:	01c0ff84 	movi	r7,1022
  80ef9c:	28c6703a 	and	r3,r5,r3
  80efa0:	280ad7fa 	srli	r5,r5,31
  80efa4:	3980120e 	bge	r7,r6,80eff0 <__fixdfsi+0x68>
  80efa8:	00810744 	movi	r2,1053
  80efac:	11800c16 	blt	r2,r6,80efe0 <__fixdfsi+0x58>
  80efb0:	00810cc4 	movi	r2,1075
  80efb4:	1185c83a 	sub	r2,r2,r6
  80efb8:	01c007c4 	movi	r7,31
  80efbc:	18c00434 	orhi	r3,r3,16
  80efc0:	38800d16 	blt	r7,r2,80eff8 <__fixdfsi+0x70>
  80efc4:	31befb44 	addi	r6,r6,-1043
  80efc8:	2084d83a 	srl	r2,r4,r2
  80efcc:	1986983a 	sll	r3,r3,r6
  80efd0:	1884b03a 	or	r2,r3,r2
  80efd4:	28000726 	beq	r5,zero,80eff4 <__fixdfsi+0x6c>
  80efd8:	0085c83a 	sub	r2,zero,r2
  80efdc:	f800283a 	ret
  80efe0:	00a00034 	movhi	r2,32768
  80efe4:	10bfffc4 	addi	r2,r2,-1
  80efe8:	2885883a 	add	r2,r5,r2
  80efec:	f800283a 	ret
  80eff0:	0005883a 	mov	r2,zero
  80eff4:	f800283a 	ret
  80eff8:	008104c4 	movi	r2,1043
  80effc:	1185c83a 	sub	r2,r2,r6
  80f000:	1884d83a 	srl	r2,r3,r2
  80f004:	003ff306 	br	80efd4 <__alt_mem_onchip_mem+0xff78efd4>

0080f008 <__floatsidf>:
  80f008:	defffd04 	addi	sp,sp,-12
  80f00c:	dfc00215 	stw	ra,8(sp)
  80f010:	dc400115 	stw	r17,4(sp)
  80f014:	dc000015 	stw	r16,0(sp)
  80f018:	20002b26 	beq	r4,zero,80f0c8 <__floatsidf+0xc0>
  80f01c:	2023883a 	mov	r17,r4
  80f020:	2020d7fa 	srli	r16,r4,31
  80f024:	20002d16 	blt	r4,zero,80f0dc <__floatsidf+0xd4>
  80f028:	8809883a 	mov	r4,r17
  80f02c:	080f18c0 	call	80f18c <__clzsi2>
  80f030:	01410784 	movi	r5,1054
  80f034:	288bc83a 	sub	r5,r5,r2
  80f038:	01010cc4 	movi	r4,1075
  80f03c:	2149c83a 	sub	r4,r4,r5
  80f040:	00c007c4 	movi	r3,31
  80f044:	1900160e 	bge	r3,r4,80f0a0 <__floatsidf+0x98>
  80f048:	00c104c4 	movi	r3,1043
  80f04c:	1947c83a 	sub	r3,r3,r5
  80f050:	88c6983a 	sll	r3,r17,r3
  80f054:	00800434 	movhi	r2,16
  80f058:	10bfffc4 	addi	r2,r2,-1
  80f05c:	1886703a 	and	r3,r3,r2
  80f060:	2941ffcc 	andi	r5,r5,2047
  80f064:	800d883a 	mov	r6,r16
  80f068:	0005883a 	mov	r2,zero
  80f06c:	280a953a 	slli	r5,r5,20
  80f070:	31803fcc 	andi	r6,r6,255
  80f074:	01000434 	movhi	r4,16
  80f078:	300c97fa 	slli	r6,r6,31
  80f07c:	213fffc4 	addi	r4,r4,-1
  80f080:	1906703a 	and	r3,r3,r4
  80f084:	1946b03a 	or	r3,r3,r5
  80f088:	1986b03a 	or	r3,r3,r6
  80f08c:	dfc00217 	ldw	ra,8(sp)
  80f090:	dc400117 	ldw	r17,4(sp)
  80f094:	dc000017 	ldw	r16,0(sp)
  80f098:	dec00304 	addi	sp,sp,12
  80f09c:	f800283a 	ret
  80f0a0:	00c002c4 	movi	r3,11
  80f0a4:	1887c83a 	sub	r3,r3,r2
  80f0a8:	88c6d83a 	srl	r3,r17,r3
  80f0ac:	8904983a 	sll	r2,r17,r4
  80f0b0:	01000434 	movhi	r4,16
  80f0b4:	213fffc4 	addi	r4,r4,-1
  80f0b8:	2941ffcc 	andi	r5,r5,2047
  80f0bc:	1906703a 	and	r3,r3,r4
  80f0c0:	800d883a 	mov	r6,r16
  80f0c4:	003fe906 	br	80f06c <__alt_mem_onchip_mem+0xff78f06c>
  80f0c8:	000d883a 	mov	r6,zero
  80f0cc:	000b883a 	mov	r5,zero
  80f0d0:	0007883a 	mov	r3,zero
  80f0d4:	0005883a 	mov	r2,zero
  80f0d8:	003fe406 	br	80f06c <__alt_mem_onchip_mem+0xff78f06c>
  80f0dc:	0123c83a 	sub	r17,zero,r4
  80f0e0:	003fd106 	br	80f028 <__alt_mem_onchip_mem+0xff78f028>

0080f0e4 <__floatunsidf>:
  80f0e4:	defffe04 	addi	sp,sp,-8
  80f0e8:	dc000015 	stw	r16,0(sp)
  80f0ec:	dfc00115 	stw	ra,4(sp)
  80f0f0:	2021883a 	mov	r16,r4
  80f0f4:	20002226 	beq	r4,zero,80f180 <__floatunsidf+0x9c>
  80f0f8:	080f18c0 	call	80f18c <__clzsi2>
  80f0fc:	01010784 	movi	r4,1054
  80f100:	2089c83a 	sub	r4,r4,r2
  80f104:	01810cc4 	movi	r6,1075
  80f108:	310dc83a 	sub	r6,r6,r4
  80f10c:	00c007c4 	movi	r3,31
  80f110:	1980120e 	bge	r3,r6,80f15c <__floatunsidf+0x78>
  80f114:	00c104c4 	movi	r3,1043
  80f118:	1907c83a 	sub	r3,r3,r4
  80f11c:	80ca983a 	sll	r5,r16,r3
  80f120:	00800434 	movhi	r2,16
  80f124:	10bfffc4 	addi	r2,r2,-1
  80f128:	2101ffcc 	andi	r4,r4,2047
  80f12c:	0021883a 	mov	r16,zero
  80f130:	288a703a 	and	r5,r5,r2
  80f134:	2008953a 	slli	r4,r4,20
  80f138:	00c00434 	movhi	r3,16
  80f13c:	18ffffc4 	addi	r3,r3,-1
  80f140:	28c6703a 	and	r3,r5,r3
  80f144:	8005883a 	mov	r2,r16
  80f148:	1906b03a 	or	r3,r3,r4
  80f14c:	dfc00117 	ldw	ra,4(sp)
  80f150:	dc000017 	ldw	r16,0(sp)
  80f154:	dec00204 	addi	sp,sp,8
  80f158:	f800283a 	ret
  80f15c:	00c002c4 	movi	r3,11
  80f160:	188bc83a 	sub	r5,r3,r2
  80f164:	814ad83a 	srl	r5,r16,r5
  80f168:	00c00434 	movhi	r3,16
  80f16c:	18ffffc4 	addi	r3,r3,-1
  80f170:	81a0983a 	sll	r16,r16,r6
  80f174:	2101ffcc 	andi	r4,r4,2047
  80f178:	28ca703a 	and	r5,r5,r3
  80f17c:	003fed06 	br	80f134 <__alt_mem_onchip_mem+0xff78f134>
  80f180:	0009883a 	mov	r4,zero
  80f184:	000b883a 	mov	r5,zero
  80f188:	003fea06 	br	80f134 <__alt_mem_onchip_mem+0xff78f134>

0080f18c <__clzsi2>:
  80f18c:	00bfffd4 	movui	r2,65535
  80f190:	11000536 	bltu	r2,r4,80f1a8 <__clzsi2+0x1c>
  80f194:	00803fc4 	movi	r2,255
  80f198:	11000f36 	bltu	r2,r4,80f1d8 <__clzsi2+0x4c>
  80f19c:	00800804 	movi	r2,32
  80f1a0:	0007883a 	mov	r3,zero
  80f1a4:	00000506 	br	80f1bc <__clzsi2+0x30>
  80f1a8:	00804034 	movhi	r2,256
  80f1ac:	10bfffc4 	addi	r2,r2,-1
  80f1b0:	11000c2e 	bgeu	r2,r4,80f1e4 <__clzsi2+0x58>
  80f1b4:	00800204 	movi	r2,8
  80f1b8:	00c00604 	movi	r3,24
  80f1bc:	20c8d83a 	srl	r4,r4,r3
  80f1c0:	00c02074 	movhi	r3,129
  80f1c4:	18cd5304 	addi	r3,r3,13644
  80f1c8:	1909883a 	add	r4,r3,r4
  80f1cc:	20c00003 	ldbu	r3,0(r4)
  80f1d0:	10c5c83a 	sub	r2,r2,r3
  80f1d4:	f800283a 	ret
  80f1d8:	00800604 	movi	r2,24
  80f1dc:	00c00204 	movi	r3,8
  80f1e0:	003ff606 	br	80f1bc <__alt_mem_onchip_mem+0xff78f1bc>
  80f1e4:	00800404 	movi	r2,16
  80f1e8:	1007883a 	mov	r3,r2
  80f1ec:	003ff306 	br	80f1bc <__alt_mem_onchip_mem+0xff78f1bc>

0080f1f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f1f0:	defff504 	addi	sp,sp,-44
  80f1f4:	df000a15 	stw	fp,40(sp)
  80f1f8:	df000a04 	addi	fp,sp,40
  80f1fc:	e13ffc15 	stw	r4,-16(fp)
  80f200:	e17ffd15 	stw	r5,-12(fp)
  80f204:	e1bffe15 	stw	r6,-8(fp)
  80f208:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f20c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f210:	d0a7a417 	ldw	r2,-24944(gp)
  
  if (alt_ticks_per_second ())
  80f214:	10003c26 	beq	r2,zero,80f308 <alt_alarm_start+0x118>
  {
    if (alarm)
  80f218:	e0bffc17 	ldw	r2,-16(fp)
  80f21c:	10003826 	beq	r2,zero,80f300 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f220:	e0bffc17 	ldw	r2,-16(fp)
  80f224:	e0fffe17 	ldw	r3,-8(fp)
  80f228:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f22c:	e0bffc17 	ldw	r2,-16(fp)
  80f230:	e0ffff17 	ldw	r3,-4(fp)
  80f234:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f238:	0005303a 	rdctl	r2,status
  80f23c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f240:	e0fff917 	ldw	r3,-28(fp)
  80f244:	00bfff84 	movi	r2,-2
  80f248:	1884703a 	and	r2,r3,r2
  80f24c:	1001703a 	wrctl	status,r2
  
  return context;
  80f250:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f254:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f258:	d0a7a517 	ldw	r2,-24940(gp)
      
      current_nticks = alt_nticks();
  80f25c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f260:	e0fffd17 	ldw	r3,-12(fp)
  80f264:	e0bff617 	ldw	r2,-40(fp)
  80f268:	1885883a 	add	r2,r3,r2
  80f26c:	10c00044 	addi	r3,r2,1
  80f270:	e0bffc17 	ldw	r2,-16(fp)
  80f274:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f278:	e0bffc17 	ldw	r2,-16(fp)
  80f27c:	10c00217 	ldw	r3,8(r2)
  80f280:	e0bff617 	ldw	r2,-40(fp)
  80f284:	1880042e 	bgeu	r3,r2,80f298 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80f288:	e0bffc17 	ldw	r2,-16(fp)
  80f28c:	00c00044 	movi	r3,1
  80f290:	10c00405 	stb	r3,16(r2)
  80f294:	00000206 	br	80f2a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f298:	e0bffc17 	ldw	r2,-16(fp)
  80f29c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f2a0:	e0bffc17 	ldw	r2,-16(fp)
  80f2a4:	d0e00d04 	addi	r3,gp,-32716
  80f2a8:	e0fffa15 	stw	r3,-24(fp)
  80f2ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f2b0:	e0bffb17 	ldw	r2,-20(fp)
  80f2b4:	e0fffa17 	ldw	r3,-24(fp)
  80f2b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f2bc:	e0bffa17 	ldw	r2,-24(fp)
  80f2c0:	10c00017 	ldw	r3,0(r2)
  80f2c4:	e0bffb17 	ldw	r2,-20(fp)
  80f2c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f2cc:	e0bffa17 	ldw	r2,-24(fp)
  80f2d0:	10800017 	ldw	r2,0(r2)
  80f2d4:	e0fffb17 	ldw	r3,-20(fp)
  80f2d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f2dc:	e0bffa17 	ldw	r2,-24(fp)
  80f2e0:	e0fffb17 	ldw	r3,-20(fp)
  80f2e4:	10c00015 	stw	r3,0(r2)
  80f2e8:	e0bff817 	ldw	r2,-32(fp)
  80f2ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2f0:	e0bff717 	ldw	r2,-36(fp)
  80f2f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f2f8:	0005883a 	mov	r2,zero
  80f2fc:	00000306 	br	80f30c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80f300:	00bffa84 	movi	r2,-22
  80f304:	00000106 	br	80f30c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80f308:	00bfde84 	movi	r2,-134
  }
}
  80f30c:	e037883a 	mov	sp,fp
  80f310:	df000017 	ldw	fp,0(sp)
  80f314:	dec00104 	addi	sp,sp,4
  80f318:	f800283a 	ret

0080f31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f31c:	defffe04 	addi	sp,sp,-8
  80f320:	dfc00115 	stw	ra,4(sp)
  80f324:	df000015 	stw	fp,0(sp)
  80f328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f32c:	d0a00b17 	ldw	r2,-32724(gp)
  80f330:	10000326 	beq	r2,zero,80f340 <alt_get_errno+0x24>
  80f334:	d0a00b17 	ldw	r2,-32724(gp)
  80f338:	103ee83a 	callr	r2
  80f33c:	00000106 	br	80f344 <alt_get_errno+0x28>
  80f340:	d0a7a004 	addi	r2,gp,-24960
}
  80f344:	e037883a 	mov	sp,fp
  80f348:	dfc00117 	ldw	ra,4(sp)
  80f34c:	df000017 	ldw	fp,0(sp)
  80f350:	dec00204 	addi	sp,sp,8
  80f354:	f800283a 	ret

0080f358 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80f358:	defffb04 	addi	sp,sp,-20
  80f35c:	dfc00415 	stw	ra,16(sp)
  80f360:	df000315 	stw	fp,12(sp)
  80f364:	df000304 	addi	fp,sp,12
  80f368:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80f36c:	e0bfff17 	ldw	r2,-4(fp)
  80f370:	10000616 	blt	r2,zero,80f38c <close+0x34>
  80f374:	e0bfff17 	ldw	r2,-4(fp)
  80f378:	10c00324 	muli	r3,r2,12
  80f37c:	00802074 	movhi	r2,129
  80f380:	10907704 	addi	r2,r2,16860
  80f384:	1885883a 	add	r2,r3,r2
  80f388:	00000106 	br	80f390 <close+0x38>
  80f38c:	0005883a 	mov	r2,zero
  80f390:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80f394:	e0bffd17 	ldw	r2,-12(fp)
  80f398:	10001926 	beq	r2,zero,80f400 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80f39c:	e0bffd17 	ldw	r2,-12(fp)
  80f3a0:	10800017 	ldw	r2,0(r2)
  80f3a4:	10800417 	ldw	r2,16(r2)
  80f3a8:	10000626 	beq	r2,zero,80f3c4 <close+0x6c>
  80f3ac:	e0bffd17 	ldw	r2,-12(fp)
  80f3b0:	10800017 	ldw	r2,0(r2)
  80f3b4:	10800417 	ldw	r2,16(r2)
  80f3b8:	e13ffd17 	ldw	r4,-12(fp)
  80f3bc:	103ee83a 	callr	r2
  80f3c0:	00000106 	br	80f3c8 <close+0x70>
  80f3c4:	0005883a 	mov	r2,zero
  80f3c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80f3cc:	e13fff17 	ldw	r4,-4(fp)
  80f3d0:	080fa180 	call	80fa18 <alt_release_fd>
    if (rval < 0)
  80f3d4:	e0bffe17 	ldw	r2,-8(fp)
  80f3d8:	1000070e 	bge	r2,zero,80f3f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80f3dc:	080f31c0 	call	80f31c <alt_get_errno>
  80f3e0:	1007883a 	mov	r3,r2
  80f3e4:	e0bffe17 	ldw	r2,-8(fp)
  80f3e8:	0085c83a 	sub	r2,zero,r2
  80f3ec:	18800015 	stw	r2,0(r3)
      return -1;
  80f3f0:	00bfffc4 	movi	r2,-1
  80f3f4:	00000706 	br	80f414 <close+0xbc>
    }
    return 0;
  80f3f8:	0005883a 	mov	r2,zero
  80f3fc:	00000506 	br	80f414 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f400:	080f31c0 	call	80f31c <alt_get_errno>
  80f404:	1007883a 	mov	r3,r2
  80f408:	00801444 	movi	r2,81
  80f40c:	18800015 	stw	r2,0(r3)
    return -1;
  80f410:	00bfffc4 	movi	r2,-1
  }
}
  80f414:	e037883a 	mov	sp,fp
  80f418:	dfc00117 	ldw	ra,4(sp)
  80f41c:	df000017 	ldw	fp,0(sp)
  80f420:	dec00204 	addi	sp,sp,8
  80f424:	f800283a 	ret

0080f428 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80f428:	defffc04 	addi	sp,sp,-16
  80f42c:	df000315 	stw	fp,12(sp)
  80f430:	df000304 	addi	fp,sp,12
  80f434:	e13ffd15 	stw	r4,-12(fp)
  80f438:	e17ffe15 	stw	r5,-8(fp)
  80f43c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80f440:	e0bfff17 	ldw	r2,-4(fp)
}
  80f444:	e037883a 	mov	sp,fp
  80f448:	df000017 	ldw	fp,0(sp)
  80f44c:	dec00104 	addi	sp,sp,4
  80f450:	f800283a 	ret

0080f454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f454:	defffe04 	addi	sp,sp,-8
  80f458:	dfc00115 	stw	ra,4(sp)
  80f45c:	df000015 	stw	fp,0(sp)
  80f460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f464:	d0a00b17 	ldw	r2,-32724(gp)
  80f468:	10000326 	beq	r2,zero,80f478 <alt_get_errno+0x24>
  80f46c:	d0a00b17 	ldw	r2,-32724(gp)
  80f470:	103ee83a 	callr	r2
  80f474:	00000106 	br	80f47c <alt_get_errno+0x28>
  80f478:	d0a7a004 	addi	r2,gp,-24960
}
  80f47c:	e037883a 	mov	sp,fp
  80f480:	dfc00117 	ldw	ra,4(sp)
  80f484:	df000017 	ldw	fp,0(sp)
  80f488:	dec00204 	addi	sp,sp,8
  80f48c:	f800283a 	ret

0080f490 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80f490:	defffb04 	addi	sp,sp,-20
  80f494:	dfc00415 	stw	ra,16(sp)
  80f498:	df000315 	stw	fp,12(sp)
  80f49c:	df000304 	addi	fp,sp,12
  80f4a0:	e13ffe15 	stw	r4,-8(fp)
  80f4a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f4a8:	e0bffe17 	ldw	r2,-8(fp)
  80f4ac:	10000616 	blt	r2,zero,80f4c8 <fstat+0x38>
  80f4b0:	e0bffe17 	ldw	r2,-8(fp)
  80f4b4:	10c00324 	muli	r3,r2,12
  80f4b8:	00802074 	movhi	r2,129
  80f4bc:	10907704 	addi	r2,r2,16860
  80f4c0:	1885883a 	add	r2,r3,r2
  80f4c4:	00000106 	br	80f4cc <fstat+0x3c>
  80f4c8:	0005883a 	mov	r2,zero
  80f4cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80f4d0:	e0bffd17 	ldw	r2,-12(fp)
  80f4d4:	10001026 	beq	r2,zero,80f518 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80f4d8:	e0bffd17 	ldw	r2,-12(fp)
  80f4dc:	10800017 	ldw	r2,0(r2)
  80f4e0:	10800817 	ldw	r2,32(r2)
  80f4e4:	10000726 	beq	r2,zero,80f504 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80f4e8:	e0bffd17 	ldw	r2,-12(fp)
  80f4ec:	10800017 	ldw	r2,0(r2)
  80f4f0:	10800817 	ldw	r2,32(r2)
  80f4f4:	e17fff17 	ldw	r5,-4(fp)
  80f4f8:	e13ffd17 	ldw	r4,-12(fp)
  80f4fc:	103ee83a 	callr	r2
  80f500:	00000a06 	br	80f52c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80f504:	e0bfff17 	ldw	r2,-4(fp)
  80f508:	00c80004 	movi	r3,8192
  80f50c:	10c00115 	stw	r3,4(r2)
      return 0;
  80f510:	0005883a 	mov	r2,zero
  80f514:	00000506 	br	80f52c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f518:	080f4540 	call	80f454 <alt_get_errno>
  80f51c:	1007883a 	mov	r3,r2
  80f520:	00801444 	movi	r2,81
  80f524:	18800015 	stw	r2,0(r3)
    return -1;
  80f528:	00bfffc4 	movi	r2,-1
  }
}
  80f52c:	e037883a 	mov	sp,fp
  80f530:	dfc00117 	ldw	ra,4(sp)
  80f534:	df000017 	ldw	fp,0(sp)
  80f538:	dec00204 	addi	sp,sp,8
  80f53c:	f800283a 	ret

0080f540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f540:	defffe04 	addi	sp,sp,-8
  80f544:	dfc00115 	stw	ra,4(sp)
  80f548:	df000015 	stw	fp,0(sp)
  80f54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f550:	d0a00b17 	ldw	r2,-32724(gp)
  80f554:	10000326 	beq	r2,zero,80f564 <alt_get_errno+0x24>
  80f558:	d0a00b17 	ldw	r2,-32724(gp)
  80f55c:	103ee83a 	callr	r2
  80f560:	00000106 	br	80f568 <alt_get_errno+0x28>
  80f564:	d0a7a004 	addi	r2,gp,-24960
}
  80f568:	e037883a 	mov	sp,fp
  80f56c:	dfc00117 	ldw	ra,4(sp)
  80f570:	df000017 	ldw	fp,0(sp)
  80f574:	dec00204 	addi	sp,sp,8
  80f578:	f800283a 	ret

0080f57c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f57c:	deffed04 	addi	sp,sp,-76
  80f580:	dfc01215 	stw	ra,72(sp)
  80f584:	df001115 	stw	fp,68(sp)
  80f588:	df001104 	addi	fp,sp,68
  80f58c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f590:	e0bfff17 	ldw	r2,-4(fp)
  80f594:	10000616 	blt	r2,zero,80f5b0 <isatty+0x34>
  80f598:	e0bfff17 	ldw	r2,-4(fp)
  80f59c:	10c00324 	muli	r3,r2,12
  80f5a0:	00802074 	movhi	r2,129
  80f5a4:	10907704 	addi	r2,r2,16860
  80f5a8:	1885883a 	add	r2,r3,r2
  80f5ac:	00000106 	br	80f5b4 <isatty+0x38>
  80f5b0:	0005883a 	mov	r2,zero
  80f5b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f5b8:	e0bfef17 	ldw	r2,-68(fp)
  80f5bc:	10000e26 	beq	r2,zero,80f5f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f5c0:	e0bfef17 	ldw	r2,-68(fp)
  80f5c4:	10800017 	ldw	r2,0(r2)
  80f5c8:	10800817 	ldw	r2,32(r2)
  80f5cc:	1000021e 	bne	r2,zero,80f5d8 <isatty+0x5c>
    {
      return 1;
  80f5d0:	00800044 	movi	r2,1
  80f5d4:	00000d06 	br	80f60c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f5d8:	e0bff004 	addi	r2,fp,-64
  80f5dc:	100b883a 	mov	r5,r2
  80f5e0:	e13fff17 	ldw	r4,-4(fp)
  80f5e4:	080f4900 	call	80f490 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f5e8:	e0bff117 	ldw	r2,-60(fp)
  80f5ec:	10880020 	cmpeqi	r2,r2,8192
  80f5f0:	10803fcc 	andi	r2,r2,255
  80f5f4:	00000506 	br	80f60c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f5f8:	080f5400 	call	80f540 <alt_get_errno>
  80f5fc:	1007883a 	mov	r3,r2
  80f600:	00801444 	movi	r2,81
  80f604:	18800015 	stw	r2,0(r3)
    return 0;
  80f608:	0005883a 	mov	r2,zero
  }
}
  80f60c:	e037883a 	mov	sp,fp
  80f610:	dfc00117 	ldw	ra,4(sp)
  80f614:	df000017 	ldw	fp,0(sp)
  80f618:	dec00204 	addi	sp,sp,8
  80f61c:	f800283a 	ret

0080f620 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80f620:	defffc04 	addi	sp,sp,-16
  80f624:	df000315 	stw	fp,12(sp)
  80f628:	df000304 	addi	fp,sp,12
  80f62c:	e13ffd15 	stw	r4,-12(fp)
  80f630:	e17ffe15 	stw	r5,-8(fp)
  80f634:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80f638:	e0fffe17 	ldw	r3,-8(fp)
  80f63c:	e0bffd17 	ldw	r2,-12(fp)
  80f640:	18800c26 	beq	r3,r2,80f674 <alt_load_section+0x54>
  {
    while( to != end )
  80f644:	00000806 	br	80f668 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80f648:	e0bffe17 	ldw	r2,-8(fp)
  80f64c:	10c00104 	addi	r3,r2,4
  80f650:	e0fffe15 	stw	r3,-8(fp)
  80f654:	e0fffd17 	ldw	r3,-12(fp)
  80f658:	19000104 	addi	r4,r3,4
  80f65c:	e13ffd15 	stw	r4,-12(fp)
  80f660:	18c00017 	ldw	r3,0(r3)
  80f664:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80f668:	e0fffe17 	ldw	r3,-8(fp)
  80f66c:	e0bfff17 	ldw	r2,-4(fp)
  80f670:	18bff51e 	bne	r3,r2,80f648 <__alt_mem_onchip_mem+0xff78f648>
    {
      *to++ = *from++;
    }
  }
}
  80f674:	0001883a 	nop
  80f678:	e037883a 	mov	sp,fp
  80f67c:	df000017 	ldw	fp,0(sp)
  80f680:	dec00104 	addi	sp,sp,4
  80f684:	f800283a 	ret

0080f688 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80f688:	defffe04 	addi	sp,sp,-8
  80f68c:	dfc00115 	stw	ra,4(sp)
  80f690:	df000015 	stw	fp,0(sp)
  80f694:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80f698:	01802074 	movhi	r6,129
  80f69c:	31957a04 	addi	r6,r6,21992
  80f6a0:	01402074 	movhi	r5,129
  80f6a4:	294e4404 	addi	r5,r5,14608
  80f6a8:	01002074 	movhi	r4,129
  80f6ac:	21157a04 	addi	r4,r4,21992
  80f6b0:	080f6200 	call	80f620 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80f6b4:	01802034 	movhi	r6,128
  80f6b8:	31809104 	addi	r6,r6,580
  80f6bc:	01402034 	movhi	r5,128
  80f6c0:	29400804 	addi	r5,r5,32
  80f6c4:	01002034 	movhi	r4,128
  80f6c8:	21000804 	addi	r4,r4,32
  80f6cc:	080f6200 	call	80f620 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80f6d0:	01802074 	movhi	r6,129
  80f6d4:	318e4404 	addi	r6,r6,14608
  80f6d8:	01402074 	movhi	r5,129
  80f6dc:	294cc504 	addi	r5,r5,13076
  80f6e0:	01002074 	movhi	r4,129
  80f6e4:	210cc504 	addi	r4,r4,13076
  80f6e8:	080f6200 	call	80f620 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80f6ec:	081221c0 	call	81221c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80f6f0:	08124040 	call	812404 <alt_icache_flush_all>
}
  80f6f4:	0001883a 	nop
  80f6f8:	e037883a 	mov	sp,fp
  80f6fc:	dfc00117 	ldw	ra,4(sp)
  80f700:	df000017 	ldw	fp,0(sp)
  80f704:	dec00204 	addi	sp,sp,8
  80f708:	f800283a 	ret

0080f70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f70c:	defffe04 	addi	sp,sp,-8
  80f710:	dfc00115 	stw	ra,4(sp)
  80f714:	df000015 	stw	fp,0(sp)
  80f718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f71c:	d0a00b17 	ldw	r2,-32724(gp)
  80f720:	10000326 	beq	r2,zero,80f730 <alt_get_errno+0x24>
  80f724:	d0a00b17 	ldw	r2,-32724(gp)
  80f728:	103ee83a 	callr	r2
  80f72c:	00000106 	br	80f734 <alt_get_errno+0x28>
  80f730:	d0a7a004 	addi	r2,gp,-24960
}
  80f734:	e037883a 	mov	sp,fp
  80f738:	dfc00117 	ldw	ra,4(sp)
  80f73c:	df000017 	ldw	fp,0(sp)
  80f740:	dec00204 	addi	sp,sp,8
  80f744:	f800283a 	ret

0080f748 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f748:	defff904 	addi	sp,sp,-28
  80f74c:	dfc00615 	stw	ra,24(sp)
  80f750:	df000515 	stw	fp,20(sp)
  80f754:	df000504 	addi	fp,sp,20
  80f758:	e13ffd15 	stw	r4,-12(fp)
  80f75c:	e17ffe15 	stw	r5,-8(fp)
  80f760:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f764:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f768:	e0bffd17 	ldw	r2,-12(fp)
  80f76c:	10000616 	blt	r2,zero,80f788 <lseek+0x40>
  80f770:	e0bffd17 	ldw	r2,-12(fp)
  80f774:	10c00324 	muli	r3,r2,12
  80f778:	00802074 	movhi	r2,129
  80f77c:	10907704 	addi	r2,r2,16860
  80f780:	1885883a 	add	r2,r3,r2
  80f784:	00000106 	br	80f78c <lseek+0x44>
  80f788:	0005883a 	mov	r2,zero
  80f78c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	10001026 	beq	r2,zero,80f7d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f798:	e0bffc17 	ldw	r2,-16(fp)
  80f79c:	10800017 	ldw	r2,0(r2)
  80f7a0:	10800717 	ldw	r2,28(r2)
  80f7a4:	10000926 	beq	r2,zero,80f7cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f7a8:	e0bffc17 	ldw	r2,-16(fp)
  80f7ac:	10800017 	ldw	r2,0(r2)
  80f7b0:	10800717 	ldw	r2,28(r2)
  80f7b4:	e1bfff17 	ldw	r6,-4(fp)
  80f7b8:	e17ffe17 	ldw	r5,-8(fp)
  80f7bc:	e13ffc17 	ldw	r4,-16(fp)
  80f7c0:	103ee83a 	callr	r2
  80f7c4:	e0bffb15 	stw	r2,-20(fp)
  80f7c8:	00000506 	br	80f7e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f7cc:	00bfde84 	movi	r2,-134
  80f7d0:	e0bffb15 	stw	r2,-20(fp)
  80f7d4:	00000206 	br	80f7e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f7d8:	00bfebc4 	movi	r2,-81
  80f7dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f7e0:	e0bffb17 	ldw	r2,-20(fp)
  80f7e4:	1000070e 	bge	r2,zero,80f804 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80f7e8:	080f70c0 	call	80f70c <alt_get_errno>
  80f7ec:	1007883a 	mov	r3,r2
  80f7f0:	e0bffb17 	ldw	r2,-20(fp)
  80f7f4:	0085c83a 	sub	r2,zero,r2
  80f7f8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f7fc:	00bfffc4 	movi	r2,-1
  80f800:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f804:	e0bffb17 	ldw	r2,-20(fp)
}
  80f808:	e037883a 	mov	sp,fp
  80f80c:	dfc00117 	ldw	ra,4(sp)
  80f810:	df000017 	ldw	fp,0(sp)
  80f814:	dec00204 	addi	sp,sp,8
  80f818:	f800283a 	ret

0080f81c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80f81c:	defffd04 	addi	sp,sp,-12
  80f820:	dfc00215 	stw	ra,8(sp)
  80f824:	df000115 	stw	fp,4(sp)
  80f828:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80f82c:	0009883a 	mov	r4,zero
  80f830:	080fe380 	call	80fe38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80f834:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80f838:	080fe700 	call	80fe70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80f83c:	01802074 	movhi	r6,129
  80f840:	318d9604 	addi	r6,r6,13912
  80f844:	01402074 	movhi	r5,129
  80f848:	294d9604 	addi	r5,r5,13912
  80f84c:	01002074 	movhi	r4,129
  80f850:	210d9604 	addi	r4,r4,13912
  80f854:	081279c0 	call	81279c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80f858:	08123440 	call	812344 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80f85c:	01002074 	movhi	r4,129
  80f860:	2108e904 	addi	r4,r4,9124
  80f864:	0812f800 	call	812f80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80f868:	d0a7a117 	ldw	r2,-24956(gp)
  80f86c:	d0e7a217 	ldw	r3,-24952(gp)
  80f870:	d127a317 	ldw	r4,-24948(gp)
  80f874:	200d883a 	mov	r6,r4
  80f878:	180b883a 	mov	r5,r3
  80f87c:	1009883a 	mov	r4,r2
  80f880:	08006a80 	call	8006a8 <main>
  80f884:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80f888:	01000044 	movi	r4,1
  80f88c:	080f3580 	call	80f358 <close>
  exit (result);
  80f890:	e13fff17 	ldw	r4,-4(fp)
  80f894:	0812f940 	call	812f94 <exit>

0080f898 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80f898:	defffe04 	addi	sp,sp,-8
  80f89c:	df000115 	stw	fp,4(sp)
  80f8a0:	df000104 	addi	fp,sp,4
  80f8a4:	e13fff15 	stw	r4,-4(fp)
}
  80f8a8:	0001883a 	nop
  80f8ac:	e037883a 	mov	sp,fp
  80f8b0:	df000017 	ldw	fp,0(sp)
  80f8b4:	dec00104 	addi	sp,sp,4
  80f8b8:	f800283a 	ret

0080f8bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80f8bc:	defffe04 	addi	sp,sp,-8
  80f8c0:	df000115 	stw	fp,4(sp)
  80f8c4:	df000104 	addi	fp,sp,4
  80f8c8:	e13fff15 	stw	r4,-4(fp)
}
  80f8cc:	0001883a 	nop
  80f8d0:	e037883a 	mov	sp,fp
  80f8d4:	df000017 	ldw	fp,0(sp)
  80f8d8:	dec00104 	addi	sp,sp,4
  80f8dc:	f800283a 	ret

0080f8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f8e0:	defffe04 	addi	sp,sp,-8
  80f8e4:	dfc00115 	stw	ra,4(sp)
  80f8e8:	df000015 	stw	fp,0(sp)
  80f8ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f8f0:	d0a00b17 	ldw	r2,-32724(gp)
  80f8f4:	10000326 	beq	r2,zero,80f904 <alt_get_errno+0x24>
  80f8f8:	d0a00b17 	ldw	r2,-32724(gp)
  80f8fc:	103ee83a 	callr	r2
  80f900:	00000106 	br	80f908 <alt_get_errno+0x28>
  80f904:	d0a7a004 	addi	r2,gp,-24960
}
  80f908:	e037883a 	mov	sp,fp
  80f90c:	dfc00117 	ldw	ra,4(sp)
  80f910:	df000017 	ldw	fp,0(sp)
  80f914:	dec00204 	addi	sp,sp,8
  80f918:	f800283a 	ret

0080f91c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f91c:	defff904 	addi	sp,sp,-28
  80f920:	dfc00615 	stw	ra,24(sp)
  80f924:	df000515 	stw	fp,20(sp)
  80f928:	df000504 	addi	fp,sp,20
  80f92c:	e13ffd15 	stw	r4,-12(fp)
  80f930:	e17ffe15 	stw	r5,-8(fp)
  80f934:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f938:	e0bffd17 	ldw	r2,-12(fp)
  80f93c:	10000616 	blt	r2,zero,80f958 <read+0x3c>
  80f940:	e0bffd17 	ldw	r2,-12(fp)
  80f944:	10c00324 	muli	r3,r2,12
  80f948:	00802074 	movhi	r2,129
  80f94c:	10907704 	addi	r2,r2,16860
  80f950:	1885883a 	add	r2,r3,r2
  80f954:	00000106 	br	80f95c <read+0x40>
  80f958:	0005883a 	mov	r2,zero
  80f95c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f960:	e0bffb17 	ldw	r2,-20(fp)
  80f964:	10002226 	beq	r2,zero,80f9f0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f968:	e0bffb17 	ldw	r2,-20(fp)
  80f96c:	10800217 	ldw	r2,8(r2)
  80f970:	108000cc 	andi	r2,r2,3
  80f974:	10800060 	cmpeqi	r2,r2,1
  80f978:	1000181e 	bne	r2,zero,80f9dc <read+0xc0>
        (fd->dev->read))
  80f97c:	e0bffb17 	ldw	r2,-20(fp)
  80f980:	10800017 	ldw	r2,0(r2)
  80f984:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f988:	10001426 	beq	r2,zero,80f9dc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f98c:	e0bffb17 	ldw	r2,-20(fp)
  80f990:	10800017 	ldw	r2,0(r2)
  80f994:	10800517 	ldw	r2,20(r2)
  80f998:	e0ffff17 	ldw	r3,-4(fp)
  80f99c:	180d883a 	mov	r6,r3
  80f9a0:	e17ffe17 	ldw	r5,-8(fp)
  80f9a4:	e13ffb17 	ldw	r4,-20(fp)
  80f9a8:	103ee83a 	callr	r2
  80f9ac:	e0bffc15 	stw	r2,-16(fp)
  80f9b0:	e0bffc17 	ldw	r2,-16(fp)
  80f9b4:	1000070e 	bge	r2,zero,80f9d4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80f9b8:	080f8e00 	call	80f8e0 <alt_get_errno>
  80f9bc:	1007883a 	mov	r3,r2
  80f9c0:	e0bffc17 	ldw	r2,-16(fp)
  80f9c4:	0085c83a 	sub	r2,zero,r2
  80f9c8:	18800015 	stw	r2,0(r3)
          return -1;
  80f9cc:	00bfffc4 	movi	r2,-1
  80f9d0:	00000c06 	br	80fa04 <read+0xe8>
        }
        return rval;
  80f9d4:	e0bffc17 	ldw	r2,-16(fp)
  80f9d8:	00000a06 	br	80fa04 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f9dc:	080f8e00 	call	80f8e0 <alt_get_errno>
  80f9e0:	1007883a 	mov	r3,r2
  80f9e4:	00800344 	movi	r2,13
  80f9e8:	18800015 	stw	r2,0(r3)
  80f9ec:	00000406 	br	80fa00 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f9f0:	080f8e00 	call	80f8e0 <alt_get_errno>
  80f9f4:	1007883a 	mov	r3,r2
  80f9f8:	00801444 	movi	r2,81
  80f9fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fa00:	00bfffc4 	movi	r2,-1
}
  80fa04:	e037883a 	mov	sp,fp
  80fa08:	dfc00117 	ldw	ra,4(sp)
  80fa0c:	df000017 	ldw	fp,0(sp)
  80fa10:	dec00204 	addi	sp,sp,8
  80fa14:	f800283a 	ret

0080fa18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80fa18:	defffe04 	addi	sp,sp,-8
  80fa1c:	df000115 	stw	fp,4(sp)
  80fa20:	df000104 	addi	fp,sp,4
  80fa24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80fa28:	e0bfff17 	ldw	r2,-4(fp)
  80fa2c:	108000d0 	cmplti	r2,r2,3
  80fa30:	10000d1e 	bne	r2,zero,80fa68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80fa34:	00802074 	movhi	r2,129
  80fa38:	10907704 	addi	r2,r2,16860
  80fa3c:	e0ffff17 	ldw	r3,-4(fp)
  80fa40:	18c00324 	muli	r3,r3,12
  80fa44:	10c5883a 	add	r2,r2,r3
  80fa48:	10800204 	addi	r2,r2,8
  80fa4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80fa50:	00802074 	movhi	r2,129
  80fa54:	10907704 	addi	r2,r2,16860
  80fa58:	e0ffff17 	ldw	r3,-4(fp)
  80fa5c:	18c00324 	muli	r3,r3,12
  80fa60:	10c5883a 	add	r2,r2,r3
  80fa64:	10000015 	stw	zero,0(r2)
  }
}
  80fa68:	0001883a 	nop
  80fa6c:	e037883a 	mov	sp,fp
  80fa70:	df000017 	ldw	fp,0(sp)
  80fa74:	dec00104 	addi	sp,sp,4
  80fa78:	f800283a 	ret

0080fa7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80fa7c:	defff904 	addi	sp,sp,-28
  80fa80:	df000615 	stw	fp,24(sp)
  80fa84:	df000604 	addi	fp,sp,24
  80fa88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa8c:	0005303a 	rdctl	r2,status
  80fa90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa94:	e0fffe17 	ldw	r3,-8(fp)
  80fa98:	00bfff84 	movi	r2,-2
  80fa9c:	1884703a 	and	r2,r3,r2
  80faa0:	1001703a 	wrctl	status,r2
  
  return context;
  80faa4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80faa8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80faac:	d0a00c17 	ldw	r2,-32720(gp)
  80fab0:	10c000c4 	addi	r3,r2,3
  80fab4:	00bfff04 	movi	r2,-4
  80fab8:	1884703a 	and	r2,r3,r2
  80fabc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80fac0:	d0e00c17 	ldw	r3,-32720(gp)
  80fac4:	e0bfff17 	ldw	r2,-4(fp)
  80fac8:	1887883a 	add	r3,r3,r2
  80facc:	00804034 	movhi	r2,256
  80fad0:	10800004 	addi	r2,r2,0
  80fad4:	10c0062e 	bgeu	r2,r3,80faf0 <sbrk+0x74>
  80fad8:	e0bffb17 	ldw	r2,-20(fp)
  80fadc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fae0:	e0bffa17 	ldw	r2,-24(fp)
  80fae4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80fae8:	00bfffc4 	movi	r2,-1
  80faec:	00000b06 	br	80fb1c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80faf0:	d0a00c17 	ldw	r2,-32720(gp)
  80faf4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80faf8:	d0e00c17 	ldw	r3,-32720(gp)
  80fafc:	e0bfff17 	ldw	r2,-4(fp)
  80fb00:	1885883a 	add	r2,r3,r2
  80fb04:	d0a00c15 	stw	r2,-32720(gp)
  80fb08:	e0bffb17 	ldw	r2,-20(fp)
  80fb0c:	e0bffc15 	stw	r2,-16(fp)
  80fb10:	e0bffc17 	ldw	r2,-16(fp)
  80fb14:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80fb18:	e0bffd17 	ldw	r2,-12(fp)
} 
  80fb1c:	e037883a 	mov	sp,fp
  80fb20:	df000017 	ldw	fp,0(sp)
  80fb24:	dec00104 	addi	sp,sp,4
  80fb28:	f800283a 	ret

0080fb2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fb2c:	defffa04 	addi	sp,sp,-24
  80fb30:	df000515 	stw	fp,20(sp)
  80fb34:	df000504 	addi	fp,sp,20
  80fb38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb3c:	0005303a 	rdctl	r2,status
  80fb40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb44:	e0fffc17 	ldw	r3,-16(fp)
  80fb48:	00bfff84 	movi	r2,-2
  80fb4c:	1884703a 	and	r2,r3,r2
  80fb50:	1001703a 	wrctl	status,r2
  
  return context;
  80fb54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80fb58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80fb5c:	e0bfff17 	ldw	r2,-4(fp)
  80fb60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80fb64:	e0bffd17 	ldw	r2,-12(fp)
  80fb68:	10800017 	ldw	r2,0(r2)
  80fb6c:	e0fffd17 	ldw	r3,-12(fp)
  80fb70:	18c00117 	ldw	r3,4(r3)
  80fb74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80fb78:	e0bffd17 	ldw	r2,-12(fp)
  80fb7c:	10800117 	ldw	r2,4(r2)
  80fb80:	e0fffd17 	ldw	r3,-12(fp)
  80fb84:	18c00017 	ldw	r3,0(r3)
  80fb88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80fb8c:	e0bffd17 	ldw	r2,-12(fp)
  80fb90:	e0fffd17 	ldw	r3,-12(fp)
  80fb94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80fb98:	e0bffd17 	ldw	r2,-12(fp)
  80fb9c:	e0fffd17 	ldw	r3,-12(fp)
  80fba0:	10c00015 	stw	r3,0(r2)
  80fba4:	e0bffb17 	ldw	r2,-20(fp)
  80fba8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbac:	e0bffe17 	ldw	r2,-8(fp)
  80fbb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80fbb4:	0001883a 	nop
  80fbb8:	e037883a 	mov	sp,fp
  80fbbc:	df000017 	ldw	fp,0(sp)
  80fbc0:	dec00104 	addi	sp,sp,4
  80fbc4:	f800283a 	ret

0080fbc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fbc8:	defffb04 	addi	sp,sp,-20
  80fbcc:	dfc00415 	stw	ra,16(sp)
  80fbd0:	df000315 	stw	fp,12(sp)
  80fbd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80fbd8:	d0a00d17 	ldw	r2,-32716(gp)
  80fbdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80fbe0:	d0a7a517 	ldw	r2,-24940(gp)
  80fbe4:	10800044 	addi	r2,r2,1
  80fbe8:	d0a7a515 	stw	r2,-24940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fbec:	00002e06 	br	80fca8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fbf0:	e0bffd17 	ldw	r2,-12(fp)
  80fbf4:	10800017 	ldw	r2,0(r2)
  80fbf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fbfc:	e0bffd17 	ldw	r2,-12(fp)
  80fc00:	10800403 	ldbu	r2,16(r2)
  80fc04:	10803fcc 	andi	r2,r2,255
  80fc08:	10000426 	beq	r2,zero,80fc1c <alt_tick+0x54>
  80fc0c:	d0a7a517 	ldw	r2,-24940(gp)
  80fc10:	1000021e 	bne	r2,zero,80fc1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80fc14:	e0bffd17 	ldw	r2,-12(fp)
  80fc18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fc1c:	e0bffd17 	ldw	r2,-12(fp)
  80fc20:	10800217 	ldw	r2,8(r2)
  80fc24:	d0e7a517 	ldw	r3,-24940(gp)
  80fc28:	18801d36 	bltu	r3,r2,80fca0 <alt_tick+0xd8>
  80fc2c:	e0bffd17 	ldw	r2,-12(fp)
  80fc30:	10800403 	ldbu	r2,16(r2)
  80fc34:	10803fcc 	andi	r2,r2,255
  80fc38:	1000191e 	bne	r2,zero,80fca0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fc3c:	e0bffd17 	ldw	r2,-12(fp)
  80fc40:	10800317 	ldw	r2,12(r2)
  80fc44:	e0fffd17 	ldw	r3,-12(fp)
  80fc48:	18c00517 	ldw	r3,20(r3)
  80fc4c:	1809883a 	mov	r4,r3
  80fc50:	103ee83a 	callr	r2
  80fc54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fc58:	e0bfff17 	ldw	r2,-4(fp)
  80fc5c:	1000031e 	bne	r2,zero,80fc6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fc60:	e13ffd17 	ldw	r4,-12(fp)
  80fc64:	080fb2c0 	call	80fb2c <alt_alarm_stop>
  80fc68:	00000d06 	br	80fca0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fc6c:	e0bffd17 	ldw	r2,-12(fp)
  80fc70:	10c00217 	ldw	r3,8(r2)
  80fc74:	e0bfff17 	ldw	r2,-4(fp)
  80fc78:	1887883a 	add	r3,r3,r2
  80fc7c:	e0bffd17 	ldw	r2,-12(fp)
  80fc80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fc84:	e0bffd17 	ldw	r2,-12(fp)
  80fc88:	10c00217 	ldw	r3,8(r2)
  80fc8c:	d0a7a517 	ldw	r2,-24940(gp)
  80fc90:	1880032e 	bgeu	r3,r2,80fca0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fc94:	e0bffd17 	ldw	r2,-12(fp)
  80fc98:	00c00044 	movi	r3,1
  80fc9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fca0:	e0bffe17 	ldw	r2,-8(fp)
  80fca4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fca8:	e0fffd17 	ldw	r3,-12(fp)
  80fcac:	d0a00d04 	addi	r2,gp,-32716
  80fcb0:	18bfcf1e 	bne	r3,r2,80fbf0 <__alt_mem_onchip_mem+0xff78fbf0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fcb4:	0001883a 	nop
}
  80fcb8:	0001883a 	nop
  80fcbc:	e037883a 	mov	sp,fp
  80fcc0:	dfc00117 	ldw	ra,4(sp)
  80fcc4:	df000017 	ldw	fp,0(sp)
  80fcc8:	dec00204 	addi	sp,sp,8
  80fccc:	f800283a 	ret

0080fcd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fcd0:	defffe04 	addi	sp,sp,-8
  80fcd4:	dfc00115 	stw	ra,4(sp)
  80fcd8:	df000015 	stw	fp,0(sp)
  80fcdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fce0:	d0a00b17 	ldw	r2,-32724(gp)
  80fce4:	10000326 	beq	r2,zero,80fcf4 <alt_get_errno+0x24>
  80fce8:	d0a00b17 	ldw	r2,-32724(gp)
  80fcec:	103ee83a 	callr	r2
  80fcf0:	00000106 	br	80fcf8 <alt_get_errno+0x28>
  80fcf4:	d0a7a004 	addi	r2,gp,-24960
}
  80fcf8:	e037883a 	mov	sp,fp
  80fcfc:	dfc00117 	ldw	ra,4(sp)
  80fd00:	df000017 	ldw	fp,0(sp)
  80fd04:	dec00204 	addi	sp,sp,8
  80fd08:	f800283a 	ret

0080fd0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80fd0c:	defff904 	addi	sp,sp,-28
  80fd10:	dfc00615 	stw	ra,24(sp)
  80fd14:	df000515 	stw	fp,20(sp)
  80fd18:	df000504 	addi	fp,sp,20
  80fd1c:	e13ffd15 	stw	r4,-12(fp)
  80fd20:	e17ffe15 	stw	r5,-8(fp)
  80fd24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80fd28:	e0bffd17 	ldw	r2,-12(fp)
  80fd2c:	10000616 	blt	r2,zero,80fd48 <write+0x3c>
  80fd30:	e0bffd17 	ldw	r2,-12(fp)
  80fd34:	10c00324 	muli	r3,r2,12
  80fd38:	00802074 	movhi	r2,129
  80fd3c:	10907704 	addi	r2,r2,16860
  80fd40:	1885883a 	add	r2,r3,r2
  80fd44:	00000106 	br	80fd4c <write+0x40>
  80fd48:	0005883a 	mov	r2,zero
  80fd4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80fd50:	e0bffb17 	ldw	r2,-20(fp)
  80fd54:	10002126 	beq	r2,zero,80fddc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80fd58:	e0bffb17 	ldw	r2,-20(fp)
  80fd5c:	10800217 	ldw	r2,8(r2)
  80fd60:	108000cc 	andi	r2,r2,3
  80fd64:	10001826 	beq	r2,zero,80fdc8 <write+0xbc>
  80fd68:	e0bffb17 	ldw	r2,-20(fp)
  80fd6c:	10800017 	ldw	r2,0(r2)
  80fd70:	10800617 	ldw	r2,24(r2)
  80fd74:	10001426 	beq	r2,zero,80fdc8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80fd78:	e0bffb17 	ldw	r2,-20(fp)
  80fd7c:	10800017 	ldw	r2,0(r2)
  80fd80:	10800617 	ldw	r2,24(r2)
  80fd84:	e0ffff17 	ldw	r3,-4(fp)
  80fd88:	180d883a 	mov	r6,r3
  80fd8c:	e17ffe17 	ldw	r5,-8(fp)
  80fd90:	e13ffb17 	ldw	r4,-20(fp)
  80fd94:	103ee83a 	callr	r2
  80fd98:	e0bffc15 	stw	r2,-16(fp)
  80fd9c:	e0bffc17 	ldw	r2,-16(fp)
  80fda0:	1000070e 	bge	r2,zero,80fdc0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80fda4:	080fcd00 	call	80fcd0 <alt_get_errno>
  80fda8:	1007883a 	mov	r3,r2
  80fdac:	e0bffc17 	ldw	r2,-16(fp)
  80fdb0:	0085c83a 	sub	r2,zero,r2
  80fdb4:	18800015 	stw	r2,0(r3)
        return -1;
  80fdb8:	00bfffc4 	movi	r2,-1
  80fdbc:	00000c06 	br	80fdf0 <write+0xe4>
      }
      return rval;
  80fdc0:	e0bffc17 	ldw	r2,-16(fp)
  80fdc4:	00000a06 	br	80fdf0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80fdc8:	080fcd00 	call	80fcd0 <alt_get_errno>
  80fdcc:	1007883a 	mov	r3,r2
  80fdd0:	00800344 	movi	r2,13
  80fdd4:	18800015 	stw	r2,0(r3)
  80fdd8:	00000406 	br	80fdec <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80fddc:	080fcd00 	call	80fcd0 <alt_get_errno>
  80fde0:	1007883a 	mov	r3,r2
  80fde4:	00801444 	movi	r2,81
  80fde8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80fdec:	00bfffc4 	movi	r2,-1
}
  80fdf0:	e037883a 	mov	sp,fp
  80fdf4:	dfc00117 	ldw	ra,4(sp)
  80fdf8:	df000017 	ldw	fp,0(sp)
  80fdfc:	dec00204 	addi	sp,sp,8
  80fe00:	f800283a 	ret

0080fe04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80fe04:	defffd04 	addi	sp,sp,-12
  80fe08:	dfc00215 	stw	ra,8(sp)
  80fe0c:	df000115 	stw	fp,4(sp)
  80fe10:	df000104 	addi	fp,sp,4
  80fe14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80fe18:	d1600804 	addi	r5,gp,-32736
  80fe1c:	e13fff17 	ldw	r4,-4(fp)
  80fe20:	08122a00 	call	8122a0 <alt_dev_llist_insert>
}
  80fe24:	e037883a 	mov	sp,fp
  80fe28:	dfc00117 	ldw	ra,4(sp)
  80fe2c:	df000017 	ldw	fp,0(sp)
  80fe30:	dec00204 	addi	sp,sp,8
  80fe34:	f800283a 	ret

0080fe38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80fe38:	defffd04 	addi	sp,sp,-12
  80fe3c:	dfc00215 	stw	ra,8(sp)
  80fe40:	df000115 	stw	fp,4(sp)
  80fe44:	df000104 	addi	fp,sp,4
  80fe48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80fe4c:	0812a9c0 	call	812a9c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80fe50:	00800044 	movi	r2,1
  80fe54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80fe58:	0001883a 	nop
  80fe5c:	e037883a 	mov	sp,fp
  80fe60:	dfc00117 	ldw	ra,4(sp)
  80fe64:	df000017 	ldw	fp,0(sp)
  80fe68:	dec00204 	addi	sp,sp,8
  80fe6c:	f800283a 	ret

0080fe70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80fe70:	defffe04 	addi	sp,sp,-8
  80fe74:	dfc00115 	stw	ra,4(sp)
  80fe78:	df000015 	stw	fp,0(sp)
  80fe7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80fe80:	01c0fa04 	movi	r7,1000
  80fe84:	01800084 	movi	r6,2
  80fe88:	000b883a 	mov	r5,zero
  80fe8c:	01004434 	movhi	r4,272
  80fe90:	21040804 	addi	r4,r4,4128
  80fe94:	08118c80 	call	8118c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80fe98:	01800044 	movi	r6,1
  80fe9c:	000b883a 	mov	r5,zero
  80fea0:	01002074 	movhi	r4,129
  80fea4:	2110e104 	addi	r4,r4,17284
  80fea8:	08100700 	call	810070 <altera_avalon_jtag_uart_init>
  80feac:	01002074 	movhi	r4,129
  80feb0:	2110d704 	addi	r4,r4,17244
  80feb4:	080fe040 	call	80fe04 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80feb8:	01002074 	movhi	r4,129
  80febc:	2114f904 	addi	r4,r4,21476
  80fec0:	08116bc0 	call	8116bc <altera_avalon_lcd_16207_init>
  80fec4:	01002074 	movhi	r4,129
  80fec8:	2114ef04 	addi	r4,r4,21436
  80fecc:	080fe040 	call	80fe04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  80fed0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80fed4:	000d883a 	mov	r6,zero
  80fed8:	000b883a 	mov	r5,zero
  80fedc:	01002074 	movhi	r4,129
  80fee0:	21154104 	addi	r4,r4,21764
  80fee4:	0811a540 	call	811a54 <altera_avalon_uart_init>
  80fee8:	01002074 	movhi	r4,129
  80feec:	21153704 	addi	r4,r4,21724
  80fef0:	080fe040 	call	80fe04 <alt_dev_reg>
}
  80fef4:	0001883a 	nop
  80fef8:	e037883a 	mov	sp,fp
  80fefc:	dfc00117 	ldw	ra,4(sp)
  80ff00:	df000017 	ldw	fp,0(sp)
  80ff04:	dec00204 	addi	sp,sp,8
  80ff08:	f800283a 	ret

0080ff0c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ff0c:	defffa04 	addi	sp,sp,-24
  80ff10:	dfc00515 	stw	ra,20(sp)
  80ff14:	df000415 	stw	fp,16(sp)
  80ff18:	df000404 	addi	fp,sp,16
  80ff1c:	e13ffd15 	stw	r4,-12(fp)
  80ff20:	e17ffe15 	stw	r5,-8(fp)
  80ff24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ff28:	e0bffd17 	ldw	r2,-12(fp)
  80ff2c:	10800017 	ldw	r2,0(r2)
  80ff30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ff34:	e0bffc17 	ldw	r2,-16(fp)
  80ff38:	10c00a04 	addi	r3,r2,40
  80ff3c:	e0bffd17 	ldw	r2,-12(fp)
  80ff40:	10800217 	ldw	r2,8(r2)
  80ff44:	100f883a 	mov	r7,r2
  80ff48:	e1bfff17 	ldw	r6,-4(fp)
  80ff4c:	e17ffe17 	ldw	r5,-8(fp)
  80ff50:	1809883a 	mov	r4,r3
  80ff54:	08105340 	call	810534 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ff58:	e037883a 	mov	sp,fp
  80ff5c:	dfc00117 	ldw	ra,4(sp)
  80ff60:	df000017 	ldw	fp,0(sp)
  80ff64:	dec00204 	addi	sp,sp,8
  80ff68:	f800283a 	ret

0080ff6c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ff6c:	defffa04 	addi	sp,sp,-24
  80ff70:	dfc00515 	stw	ra,20(sp)
  80ff74:	df000415 	stw	fp,16(sp)
  80ff78:	df000404 	addi	fp,sp,16
  80ff7c:	e13ffd15 	stw	r4,-12(fp)
  80ff80:	e17ffe15 	stw	r5,-8(fp)
  80ff84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ff88:	e0bffd17 	ldw	r2,-12(fp)
  80ff8c:	10800017 	ldw	r2,0(r2)
  80ff90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ff94:	e0bffc17 	ldw	r2,-16(fp)
  80ff98:	10c00a04 	addi	r3,r2,40
  80ff9c:	e0bffd17 	ldw	r2,-12(fp)
  80ffa0:	10800217 	ldw	r2,8(r2)
  80ffa4:	100f883a 	mov	r7,r2
  80ffa8:	e1bfff17 	ldw	r6,-4(fp)
  80ffac:	e17ffe17 	ldw	r5,-8(fp)
  80ffb0:	1809883a 	mov	r4,r3
  80ffb4:	08107500 	call	810750 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ffb8:	e037883a 	mov	sp,fp
  80ffbc:	dfc00117 	ldw	ra,4(sp)
  80ffc0:	df000017 	ldw	fp,0(sp)
  80ffc4:	dec00204 	addi	sp,sp,8
  80ffc8:	f800283a 	ret

0080ffcc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ffcc:	defffc04 	addi	sp,sp,-16
  80ffd0:	dfc00315 	stw	ra,12(sp)
  80ffd4:	df000215 	stw	fp,8(sp)
  80ffd8:	df000204 	addi	fp,sp,8
  80ffdc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ffe0:	e0bfff17 	ldw	r2,-4(fp)
  80ffe4:	10800017 	ldw	r2,0(r2)
  80ffe8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ffec:	e0bffe17 	ldw	r2,-8(fp)
  80fff0:	10c00a04 	addi	r3,r2,40
  80fff4:	e0bfff17 	ldw	r2,-4(fp)
  80fff8:	10800217 	ldw	r2,8(r2)
  80fffc:	100b883a 	mov	r5,r2
  810000:	1809883a 	mov	r4,r3
  810004:	08103dc0 	call	8103dc <altera_avalon_jtag_uart_close>
}
  810008:	e037883a 	mov	sp,fp
  81000c:	dfc00117 	ldw	ra,4(sp)
  810010:	df000017 	ldw	fp,0(sp)
  810014:	dec00204 	addi	sp,sp,8
  810018:	f800283a 	ret

0081001c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81001c:	defffa04 	addi	sp,sp,-24
  810020:	dfc00515 	stw	ra,20(sp)
  810024:	df000415 	stw	fp,16(sp)
  810028:	df000404 	addi	fp,sp,16
  81002c:	e13ffd15 	stw	r4,-12(fp)
  810030:	e17ffe15 	stw	r5,-8(fp)
  810034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810038:	e0bffd17 	ldw	r2,-12(fp)
  81003c:	10800017 	ldw	r2,0(r2)
  810040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810044:	e0bffc17 	ldw	r2,-16(fp)
  810048:	10800a04 	addi	r2,r2,40
  81004c:	e1bfff17 	ldw	r6,-4(fp)
  810050:	e17ffe17 	ldw	r5,-8(fp)
  810054:	1009883a 	mov	r4,r2
  810058:	08104440 	call	810444 <altera_avalon_jtag_uart_ioctl>
}
  81005c:	e037883a 	mov	sp,fp
  810060:	dfc00117 	ldw	ra,4(sp)
  810064:	df000017 	ldw	fp,0(sp)
  810068:	dec00204 	addi	sp,sp,8
  81006c:	f800283a 	ret

00810070 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810070:	defffa04 	addi	sp,sp,-24
  810074:	dfc00515 	stw	ra,20(sp)
  810078:	df000415 	stw	fp,16(sp)
  81007c:	df000404 	addi	fp,sp,16
  810080:	e13ffd15 	stw	r4,-12(fp)
  810084:	e17ffe15 	stw	r5,-8(fp)
  810088:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81008c:	e0bffd17 	ldw	r2,-12(fp)
  810090:	00c00044 	movi	r3,1
  810094:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810098:	e0bffd17 	ldw	r2,-12(fp)
  81009c:	10800017 	ldw	r2,0(r2)
  8100a0:	10800104 	addi	r2,r2,4
  8100a4:	1007883a 	mov	r3,r2
  8100a8:	e0bffd17 	ldw	r2,-12(fp)
  8100ac:	10800817 	ldw	r2,32(r2)
  8100b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8100b4:	e0bffe17 	ldw	r2,-8(fp)
  8100b8:	e0ffff17 	ldw	r3,-4(fp)
  8100bc:	d8000015 	stw	zero,0(sp)
  8100c0:	e1fffd17 	ldw	r7,-12(fp)
  8100c4:	01802074 	movhi	r6,129
  8100c8:	31804c04 	addi	r6,r6,304
  8100cc:	180b883a 	mov	r5,r3
  8100d0:	1009883a 	mov	r4,r2
  8100d4:	08124380 	call	812438 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8100d8:	e0bffd17 	ldw	r2,-12(fp)
  8100dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8100e0:	e0bffd17 	ldw	r2,-12(fp)
  8100e4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8100e8:	d0e7a417 	ldw	r3,-24944(gp)
  8100ec:	e1fffd17 	ldw	r7,-12(fp)
  8100f0:	01802074 	movhi	r6,129
  8100f4:	3180cf04 	addi	r6,r6,828
  8100f8:	180b883a 	mov	r5,r3
  8100fc:	1009883a 	mov	r4,r2
  810100:	080f1f00 	call	80f1f0 <alt_alarm_start>
  810104:	1000040e 	bge	r2,zero,810118 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810108:	e0fffd17 	ldw	r3,-12(fp)
  81010c:	00a00034 	movhi	r2,32768
  810110:	10bfffc4 	addi	r2,r2,-1
  810114:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810118:	0001883a 	nop
  81011c:	e037883a 	mov	sp,fp
  810120:	dfc00117 	ldw	ra,4(sp)
  810124:	df000017 	ldw	fp,0(sp)
  810128:	dec00204 	addi	sp,sp,8
  81012c:	f800283a 	ret

00810130 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810130:	defff804 	addi	sp,sp,-32
  810134:	df000715 	stw	fp,28(sp)
  810138:	df000704 	addi	fp,sp,28
  81013c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810140:	e0bfff17 	ldw	r2,-4(fp)
  810144:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  810148:	e0bffb17 	ldw	r2,-20(fp)
  81014c:	10800017 	ldw	r2,0(r2)
  810150:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810154:	e0bffc17 	ldw	r2,-16(fp)
  810158:	10800104 	addi	r2,r2,4
  81015c:	10800037 	ldwio	r2,0(r2)
  810160:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810164:	e0bffd17 	ldw	r2,-12(fp)
  810168:	1080c00c 	andi	r2,r2,768
  81016c:	10006d26 	beq	r2,zero,810324 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810170:	e0bffd17 	ldw	r2,-12(fp)
  810174:	1080400c 	andi	r2,r2,256
  810178:	10003526 	beq	r2,zero,810250 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81017c:	00800074 	movhi	r2,1
  810180:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810184:	e0bffb17 	ldw	r2,-20(fp)
  810188:	10800a17 	ldw	r2,40(r2)
  81018c:	10800044 	addi	r2,r2,1
  810190:	1081ffcc 	andi	r2,r2,2047
  810194:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  810198:	e0bffb17 	ldw	r2,-20(fp)
  81019c:	10c00b17 	ldw	r3,44(r2)
  8101a0:	e0bffe17 	ldw	r2,-8(fp)
  8101a4:	18801526 	beq	r3,r2,8101fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8101a8:	e0bffc17 	ldw	r2,-16(fp)
  8101ac:	10800037 	ldwio	r2,0(r2)
  8101b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8101b4:	e0bff917 	ldw	r2,-28(fp)
  8101b8:	10a0000c 	andi	r2,r2,32768
  8101bc:	10001126 	beq	r2,zero,810204 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8101c0:	e0bffb17 	ldw	r2,-20(fp)
  8101c4:	10800a17 	ldw	r2,40(r2)
  8101c8:	e0fff917 	ldw	r3,-28(fp)
  8101cc:	1809883a 	mov	r4,r3
  8101d0:	e0fffb17 	ldw	r3,-20(fp)
  8101d4:	1885883a 	add	r2,r3,r2
  8101d8:	10800e04 	addi	r2,r2,56
  8101dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8101e0:	e0bffb17 	ldw	r2,-20(fp)
  8101e4:	10800a17 	ldw	r2,40(r2)
  8101e8:	10800044 	addi	r2,r2,1
  8101ec:	10c1ffcc 	andi	r3,r2,2047
  8101f0:	e0bffb17 	ldw	r2,-20(fp)
  8101f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8101f8:	003fe206 	br	810184 <__alt_mem_onchip_mem+0xff790184>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  8101fc:	0001883a 	nop
  810200:	00000106 	br	810208 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810204:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810208:	e0bff917 	ldw	r2,-28(fp)
  81020c:	10bfffec 	andhi	r2,r2,65535
  810210:	10000f26 	beq	r2,zero,810250 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810214:	e0bffb17 	ldw	r2,-20(fp)
  810218:	10c00817 	ldw	r3,32(r2)
  81021c:	00bfff84 	movi	r2,-2
  810220:	1886703a 	and	r3,r3,r2
  810224:	e0bffb17 	ldw	r2,-20(fp)
  810228:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81022c:	e0bffc17 	ldw	r2,-16(fp)
  810230:	10800104 	addi	r2,r2,4
  810234:	1007883a 	mov	r3,r2
  810238:	e0bffb17 	ldw	r2,-20(fp)
  81023c:	10800817 	ldw	r2,32(r2)
  810240:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810244:	e0bffc17 	ldw	r2,-16(fp)
  810248:	10800104 	addi	r2,r2,4
  81024c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810250:	e0bffd17 	ldw	r2,-12(fp)
  810254:	1080800c 	andi	r2,r2,512
  810258:	103fbe26 	beq	r2,zero,810154 <__alt_mem_onchip_mem+0xff790154>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81025c:	e0bffd17 	ldw	r2,-12(fp)
  810260:	1004d43a 	srli	r2,r2,16
  810264:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810268:	00001406 	br	8102bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81026c:	e0bffc17 	ldw	r2,-16(fp)
  810270:	e0fffb17 	ldw	r3,-20(fp)
  810274:	18c00d17 	ldw	r3,52(r3)
  810278:	e13ffb17 	ldw	r4,-20(fp)
  81027c:	20c7883a 	add	r3,r4,r3
  810280:	18c20e04 	addi	r3,r3,2104
  810284:	18c00003 	ldbu	r3,0(r3)
  810288:	18c03fcc 	andi	r3,r3,255
  81028c:	18c0201c 	xori	r3,r3,128
  810290:	18ffe004 	addi	r3,r3,-128
  810294:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810298:	e0bffb17 	ldw	r2,-20(fp)
  81029c:	10800d17 	ldw	r2,52(r2)
  8102a0:	10800044 	addi	r2,r2,1
  8102a4:	10c1ffcc 	andi	r3,r2,2047
  8102a8:	e0bffb17 	ldw	r2,-20(fp)
  8102ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8102b0:	e0bffa17 	ldw	r2,-24(fp)
  8102b4:	10bfffc4 	addi	r2,r2,-1
  8102b8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8102bc:	e0bffa17 	ldw	r2,-24(fp)
  8102c0:	10000526 	beq	r2,zero,8102d8 <altera_avalon_jtag_uart_irq+0x1a8>
  8102c4:	e0bffb17 	ldw	r2,-20(fp)
  8102c8:	10c00d17 	ldw	r3,52(r2)
  8102cc:	e0bffb17 	ldw	r2,-20(fp)
  8102d0:	10800c17 	ldw	r2,48(r2)
  8102d4:	18bfe51e 	bne	r3,r2,81026c <__alt_mem_onchip_mem+0xff79026c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8102d8:	e0bffa17 	ldw	r2,-24(fp)
  8102dc:	103f9d26 	beq	r2,zero,810154 <__alt_mem_onchip_mem+0xff790154>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8102e0:	e0bffb17 	ldw	r2,-20(fp)
  8102e4:	10c00817 	ldw	r3,32(r2)
  8102e8:	00bfff44 	movi	r2,-3
  8102ec:	1886703a 	and	r3,r3,r2
  8102f0:	e0bffb17 	ldw	r2,-20(fp)
  8102f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8102f8:	e0bffb17 	ldw	r2,-20(fp)
  8102fc:	10800017 	ldw	r2,0(r2)
  810300:	10800104 	addi	r2,r2,4
  810304:	1007883a 	mov	r3,r2
  810308:	e0bffb17 	ldw	r2,-20(fp)
  81030c:	10800817 	ldw	r2,32(r2)
  810310:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810314:	e0bffc17 	ldw	r2,-16(fp)
  810318:	10800104 	addi	r2,r2,4
  81031c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810320:	003f8c06 	br	810154 <__alt_mem_onchip_mem+0xff790154>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810324:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  810328:	0001883a 	nop
  81032c:	e037883a 	mov	sp,fp
  810330:	df000017 	ldw	fp,0(sp)
  810334:	dec00104 	addi	sp,sp,4
  810338:	f800283a 	ret

0081033c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  81033c:	defff804 	addi	sp,sp,-32
  810340:	df000715 	stw	fp,28(sp)
  810344:	df000704 	addi	fp,sp,28
  810348:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81034c:	e0bffb17 	ldw	r2,-20(fp)
  810350:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810354:	e0bff917 	ldw	r2,-28(fp)
  810358:	10800017 	ldw	r2,0(r2)
  81035c:	10800104 	addi	r2,r2,4
  810360:	10800037 	ldwio	r2,0(r2)
  810364:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810368:	e0bffa17 	ldw	r2,-24(fp)
  81036c:	1081000c 	andi	r2,r2,1024
  810370:	10000b26 	beq	r2,zero,8103a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810374:	e0bff917 	ldw	r2,-28(fp)
  810378:	10800017 	ldw	r2,0(r2)
  81037c:	10800104 	addi	r2,r2,4
  810380:	1007883a 	mov	r3,r2
  810384:	e0bff917 	ldw	r2,-28(fp)
  810388:	10800817 	ldw	r2,32(r2)
  81038c:	10810014 	ori	r2,r2,1024
  810390:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810394:	e0bff917 	ldw	r2,-28(fp)
  810398:	10000915 	stw	zero,36(r2)
  81039c:	00000a06 	br	8103c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8103a0:	e0bff917 	ldw	r2,-28(fp)
  8103a4:	10c00917 	ldw	r3,36(r2)
  8103a8:	00a00034 	movhi	r2,32768
  8103ac:	10bfff04 	addi	r2,r2,-4
  8103b0:	10c00536 	bltu	r2,r3,8103c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8103b4:	e0bff917 	ldw	r2,-28(fp)
  8103b8:	10800917 	ldw	r2,36(r2)
  8103bc:	10c00044 	addi	r3,r2,1
  8103c0:	e0bff917 	ldw	r2,-28(fp)
  8103c4:	10c00915 	stw	r3,36(r2)
  8103c8:	d0a7a417 	ldw	r2,-24944(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  8103cc:	e037883a 	mov	sp,fp
  8103d0:	df000017 	ldw	fp,0(sp)
  8103d4:	dec00104 	addi	sp,sp,4
  8103d8:	f800283a 	ret

008103dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8103dc:	defffd04 	addi	sp,sp,-12
  8103e0:	df000215 	stw	fp,8(sp)
  8103e4:	df000204 	addi	fp,sp,8
  8103e8:	e13ffe15 	stw	r4,-8(fp)
  8103ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8103f0:	00000506 	br	810408 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8103f4:	e0bfff17 	ldw	r2,-4(fp)
  8103f8:	1090000c 	andi	r2,r2,16384
  8103fc:	10000226 	beq	r2,zero,810408 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810400:	00bffd44 	movi	r2,-11
  810404:	00000b06 	br	810434 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  810408:	e0bffe17 	ldw	r2,-8(fp)
  81040c:	10c00d17 	ldw	r3,52(r2)
  810410:	e0bffe17 	ldw	r2,-8(fp)
  810414:	10800c17 	ldw	r2,48(r2)
  810418:	18800526 	beq	r3,r2,810430 <altera_avalon_jtag_uart_close+0x54>
  81041c:	e0bffe17 	ldw	r2,-8(fp)
  810420:	10c00917 	ldw	r3,36(r2)
  810424:	e0bffe17 	ldw	r2,-8(fp)
  810428:	10800117 	ldw	r2,4(r2)
  81042c:	18bff136 	bltu	r3,r2,8103f4 <__alt_mem_onchip_mem+0xff7903f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810430:	0005883a 	mov	r2,zero
}
  810434:	e037883a 	mov	sp,fp
  810438:	df000017 	ldw	fp,0(sp)
  81043c:	dec00104 	addi	sp,sp,4
  810440:	f800283a 	ret

00810444 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  810444:	defffa04 	addi	sp,sp,-24
  810448:	df000515 	stw	fp,20(sp)
  81044c:	df000504 	addi	fp,sp,20
  810450:	e13ffd15 	stw	r4,-12(fp)
  810454:	e17ffe15 	stw	r5,-8(fp)
  810458:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  81045c:	00bff9c4 	movi	r2,-25
  810460:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  810464:	e0bffe17 	ldw	r2,-8(fp)
  810468:	10da8060 	cmpeqi	r3,r2,27137
  81046c:	1800031e 	bne	r3,zero,81047c <altera_avalon_jtag_uart_ioctl+0x38>
  810470:	109a80a0 	cmpeqi	r2,r2,27138
  810474:	1000181e 	bne	r2,zero,8104d8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  810478:	00002906 	br	810520 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81047c:	e0bffd17 	ldw	r2,-12(fp)
  810480:	10c00117 	ldw	r3,4(r2)
  810484:	00a00034 	movhi	r2,32768
  810488:	10bfffc4 	addi	r2,r2,-1
  81048c:	18802126 	beq	r3,r2,810514 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  810490:	e0bfff17 	ldw	r2,-4(fp)
  810494:	10800017 	ldw	r2,0(r2)
  810498:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81049c:	e0bffc17 	ldw	r2,-16(fp)
  8104a0:	10800090 	cmplti	r2,r2,2
  8104a4:	1000061e 	bne	r2,zero,8104c0 <altera_avalon_jtag_uart_ioctl+0x7c>
  8104a8:	e0fffc17 	ldw	r3,-16(fp)
  8104ac:	00a00034 	movhi	r2,32768
  8104b0:	10bfffc4 	addi	r2,r2,-1
  8104b4:	18800226 	beq	r3,r2,8104c0 <altera_avalon_jtag_uart_ioctl+0x7c>
  8104b8:	e0bffc17 	ldw	r2,-16(fp)
  8104bc:	00000206 	br	8104c8 <altera_avalon_jtag_uart_ioctl+0x84>
  8104c0:	00a00034 	movhi	r2,32768
  8104c4:	10bfff84 	addi	r2,r2,-2
  8104c8:	e0fffd17 	ldw	r3,-12(fp)
  8104cc:	18800115 	stw	r2,4(r3)
      rc = 0;
  8104d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  8104d4:	00000f06 	br	810514 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8104d8:	e0bffd17 	ldw	r2,-12(fp)
  8104dc:	10c00117 	ldw	r3,4(r2)
  8104e0:	00a00034 	movhi	r2,32768
  8104e4:	10bfffc4 	addi	r2,r2,-1
  8104e8:	18800c26 	beq	r3,r2,81051c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  8104ec:	e0bffd17 	ldw	r2,-12(fp)
  8104f0:	10c00917 	ldw	r3,36(r2)
  8104f4:	e0bffd17 	ldw	r2,-12(fp)
  8104f8:	10800117 	ldw	r2,4(r2)
  8104fc:	1885803a 	cmpltu	r2,r3,r2
  810500:	10c03fcc 	andi	r3,r2,255
  810504:	e0bfff17 	ldw	r2,-4(fp)
  810508:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81050c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  810510:	00000206 	br	81051c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  810514:	0001883a 	nop
  810518:	00000106 	br	810520 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  81051c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  810520:	e0bffb17 	ldw	r2,-20(fp)
}
  810524:	e037883a 	mov	sp,fp
  810528:	df000017 	ldw	fp,0(sp)
  81052c:	dec00104 	addi	sp,sp,4
  810530:	f800283a 	ret

00810534 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  810534:	defff304 	addi	sp,sp,-52
  810538:	dfc00c15 	stw	ra,48(sp)
  81053c:	df000b15 	stw	fp,44(sp)
  810540:	df000b04 	addi	fp,sp,44
  810544:	e13ffc15 	stw	r4,-16(fp)
  810548:	e17ffd15 	stw	r5,-12(fp)
  81054c:	e1bffe15 	stw	r6,-8(fp)
  810550:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  810554:	e0bffd17 	ldw	r2,-12(fp)
  810558:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81055c:	00004706 	br	81067c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  810560:	e0bffc17 	ldw	r2,-16(fp)
  810564:	10800a17 	ldw	r2,40(r2)
  810568:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  81056c:	e0bffc17 	ldw	r2,-16(fp)
  810570:	10800b17 	ldw	r2,44(r2)
  810574:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  810578:	e0fff717 	ldw	r3,-36(fp)
  81057c:	e0bff817 	ldw	r2,-32(fp)
  810580:	18800536 	bltu	r3,r2,810598 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  810584:	e0fff717 	ldw	r3,-36(fp)
  810588:	e0bff817 	ldw	r2,-32(fp)
  81058c:	1885c83a 	sub	r2,r3,r2
  810590:	e0bff615 	stw	r2,-40(fp)
  810594:	00000406 	br	8105a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  810598:	00c20004 	movi	r3,2048
  81059c:	e0bff817 	ldw	r2,-32(fp)
  8105a0:	1885c83a 	sub	r2,r3,r2
  8105a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8105a8:	e0bff617 	ldw	r2,-40(fp)
  8105ac:	10001e26 	beq	r2,zero,810628 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8105b0:	e0fffe17 	ldw	r3,-8(fp)
  8105b4:	e0bff617 	ldw	r2,-40(fp)
  8105b8:	1880022e 	bgeu	r3,r2,8105c4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8105bc:	e0bffe17 	ldw	r2,-8(fp)
  8105c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8105c4:	e0bffc17 	ldw	r2,-16(fp)
  8105c8:	10c00e04 	addi	r3,r2,56
  8105cc:	e0bff817 	ldw	r2,-32(fp)
  8105d0:	1885883a 	add	r2,r3,r2
  8105d4:	e1bff617 	ldw	r6,-40(fp)
  8105d8:	100b883a 	mov	r5,r2
  8105dc:	e13ff517 	ldw	r4,-44(fp)
  8105e0:	0807e480 	call	807e48 <memcpy>
      ptr   += n;
  8105e4:	e0fff517 	ldw	r3,-44(fp)
  8105e8:	e0bff617 	ldw	r2,-40(fp)
  8105ec:	1885883a 	add	r2,r3,r2
  8105f0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  8105f4:	e0fffe17 	ldw	r3,-8(fp)
  8105f8:	e0bff617 	ldw	r2,-40(fp)
  8105fc:	1885c83a 	sub	r2,r3,r2
  810600:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810604:	e0fff817 	ldw	r3,-32(fp)
  810608:	e0bff617 	ldw	r2,-40(fp)
  81060c:	1885883a 	add	r2,r3,r2
  810610:	10c1ffcc 	andi	r3,r2,2047
  810614:	e0bffc17 	ldw	r2,-16(fp)
  810618:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81061c:	e0bffe17 	ldw	r2,-8(fp)
  810620:	00bfcf16 	blt	zero,r2,810560 <__alt_mem_onchip_mem+0xff790560>
  810624:	00000106 	br	81062c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  810628:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  81062c:	e0fff517 	ldw	r3,-44(fp)
  810630:	e0bffd17 	ldw	r2,-12(fp)
  810634:	1880141e 	bne	r3,r2,810688 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  810638:	e0bfff17 	ldw	r2,-4(fp)
  81063c:	1090000c 	andi	r2,r2,16384
  810640:	1000131e 	bne	r2,zero,810690 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  810644:	0001883a 	nop
  810648:	e0bffc17 	ldw	r2,-16(fp)
  81064c:	10c00a17 	ldw	r3,40(r2)
  810650:	e0bff717 	ldw	r2,-36(fp)
  810654:	1880051e 	bne	r3,r2,81066c <altera_avalon_jtag_uart_read+0x138>
  810658:	e0bffc17 	ldw	r2,-16(fp)
  81065c:	10c00917 	ldw	r3,36(r2)
  810660:	e0bffc17 	ldw	r2,-16(fp)
  810664:	10800117 	ldw	r2,4(r2)
  810668:	18bff736 	bltu	r3,r2,810648 <__alt_mem_onchip_mem+0xff790648>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81066c:	e0bffc17 	ldw	r2,-16(fp)
  810670:	10c00a17 	ldw	r3,40(r2)
  810674:	e0bff717 	ldw	r2,-36(fp)
  810678:	18800726 	beq	r3,r2,810698 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81067c:	e0bffe17 	ldw	r2,-8(fp)
  810680:	00bfb716 	blt	zero,r2,810560 <__alt_mem_onchip_mem+0xff790560>
  810684:	00000506 	br	81069c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  810688:	0001883a 	nop
  81068c:	00000306 	br	81069c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  810690:	0001883a 	nop
  810694:	00000106 	br	81069c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  810698:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81069c:	e0fff517 	ldw	r3,-44(fp)
  8106a0:	e0bffd17 	ldw	r2,-12(fp)
  8106a4:	18801826 	beq	r3,r2,810708 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106a8:	0005303a 	rdctl	r2,status
  8106ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106b0:	e0fffb17 	ldw	r3,-20(fp)
  8106b4:	00bfff84 	movi	r2,-2
  8106b8:	1884703a 	and	r2,r3,r2
  8106bc:	1001703a 	wrctl	status,r2
  
  return context;
  8106c0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  8106c4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8106c8:	e0bffc17 	ldw	r2,-16(fp)
  8106cc:	10800817 	ldw	r2,32(r2)
  8106d0:	10c00054 	ori	r3,r2,1
  8106d4:	e0bffc17 	ldw	r2,-16(fp)
  8106d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8106dc:	e0bffc17 	ldw	r2,-16(fp)
  8106e0:	10800017 	ldw	r2,0(r2)
  8106e4:	10800104 	addi	r2,r2,4
  8106e8:	1007883a 	mov	r3,r2
  8106ec:	e0bffc17 	ldw	r2,-16(fp)
  8106f0:	10800817 	ldw	r2,32(r2)
  8106f4:	18800035 	stwio	r2,0(r3)
  8106f8:	e0bffa17 	ldw	r2,-24(fp)
  8106fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810700:	e0bff917 	ldw	r2,-28(fp)
  810704:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  810708:	e0fff517 	ldw	r3,-44(fp)
  81070c:	e0bffd17 	ldw	r2,-12(fp)
  810710:	18800426 	beq	r3,r2,810724 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  810714:	e0fff517 	ldw	r3,-44(fp)
  810718:	e0bffd17 	ldw	r2,-12(fp)
  81071c:	1885c83a 	sub	r2,r3,r2
  810720:	00000606 	br	81073c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  810724:	e0bfff17 	ldw	r2,-4(fp)
  810728:	1090000c 	andi	r2,r2,16384
  81072c:	10000226 	beq	r2,zero,810738 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  810730:	00bffd44 	movi	r2,-11
  810734:	00000106 	br	81073c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  810738:	00bffec4 	movi	r2,-5
}
  81073c:	e037883a 	mov	sp,fp
  810740:	dfc00117 	ldw	ra,4(sp)
  810744:	df000017 	ldw	fp,0(sp)
  810748:	dec00204 	addi	sp,sp,8
  81074c:	f800283a 	ret

00810750 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  810750:	defff304 	addi	sp,sp,-52
  810754:	dfc00c15 	stw	ra,48(sp)
  810758:	df000b15 	stw	fp,44(sp)
  81075c:	df000b04 	addi	fp,sp,44
  810760:	e13ffc15 	stw	r4,-16(fp)
  810764:	e17ffd15 	stw	r5,-12(fp)
  810768:	e1bffe15 	stw	r6,-8(fp)
  81076c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  810770:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  810774:	e0bffd17 	ldw	r2,-12(fp)
  810778:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81077c:	00003706 	br	81085c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  810780:	e0bffc17 	ldw	r2,-16(fp)
  810784:	10800c17 	ldw	r2,48(r2)
  810788:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  81078c:	e0bffc17 	ldw	r2,-16(fp)
  810790:	10800d17 	ldw	r2,52(r2)
  810794:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  810798:	e0fff917 	ldw	r3,-28(fp)
  81079c:	e0bff517 	ldw	r2,-44(fp)
  8107a0:	1880062e 	bgeu	r3,r2,8107bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8107a4:	e0fff517 	ldw	r3,-44(fp)
  8107a8:	e0bff917 	ldw	r2,-28(fp)
  8107ac:	1885c83a 	sub	r2,r3,r2
  8107b0:	10bfffc4 	addi	r2,r2,-1
  8107b4:	e0bff615 	stw	r2,-40(fp)
  8107b8:	00000b06 	br	8107e8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8107bc:	e0bff517 	ldw	r2,-44(fp)
  8107c0:	10000526 	beq	r2,zero,8107d8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8107c4:	00c20004 	movi	r3,2048
  8107c8:	e0bff917 	ldw	r2,-28(fp)
  8107cc:	1885c83a 	sub	r2,r3,r2
  8107d0:	e0bff615 	stw	r2,-40(fp)
  8107d4:	00000406 	br	8107e8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8107d8:	00c1ffc4 	movi	r3,2047
  8107dc:	e0bff917 	ldw	r2,-28(fp)
  8107e0:	1885c83a 	sub	r2,r3,r2
  8107e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8107e8:	e0bff617 	ldw	r2,-40(fp)
  8107ec:	10001e26 	beq	r2,zero,810868 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  8107f0:	e0fffe17 	ldw	r3,-8(fp)
  8107f4:	e0bff617 	ldw	r2,-40(fp)
  8107f8:	1880022e 	bgeu	r3,r2,810804 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  8107fc:	e0bffe17 	ldw	r2,-8(fp)
  810800:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810804:	e0bffc17 	ldw	r2,-16(fp)
  810808:	10c20e04 	addi	r3,r2,2104
  81080c:	e0bff917 	ldw	r2,-28(fp)
  810810:	1885883a 	add	r2,r3,r2
  810814:	e1bff617 	ldw	r6,-40(fp)
  810818:	e17ffd17 	ldw	r5,-12(fp)
  81081c:	1009883a 	mov	r4,r2
  810820:	0807e480 	call	807e48 <memcpy>
      ptr   += n;
  810824:	e0fffd17 	ldw	r3,-12(fp)
  810828:	e0bff617 	ldw	r2,-40(fp)
  81082c:	1885883a 	add	r2,r3,r2
  810830:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810834:	e0fffe17 	ldw	r3,-8(fp)
  810838:	e0bff617 	ldw	r2,-40(fp)
  81083c:	1885c83a 	sub	r2,r3,r2
  810840:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810844:	e0fff917 	ldw	r3,-28(fp)
  810848:	e0bff617 	ldw	r2,-40(fp)
  81084c:	1885883a 	add	r2,r3,r2
  810850:	10c1ffcc 	andi	r3,r2,2047
  810854:	e0bffc17 	ldw	r2,-16(fp)
  810858:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81085c:	e0bffe17 	ldw	r2,-8(fp)
  810860:	00bfc716 	blt	zero,r2,810780 <__alt_mem_onchip_mem+0xff790780>
  810864:	00000106 	br	81086c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  810868:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81086c:	0005303a 	rdctl	r2,status
  810870:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810874:	e0fffb17 	ldw	r3,-20(fp)
  810878:	00bfff84 	movi	r2,-2
  81087c:	1884703a 	and	r2,r3,r2
  810880:	1001703a 	wrctl	status,r2
  
  return context;
  810884:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810888:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81088c:	e0bffc17 	ldw	r2,-16(fp)
  810890:	10800817 	ldw	r2,32(r2)
  810894:	10c00094 	ori	r3,r2,2
  810898:	e0bffc17 	ldw	r2,-16(fp)
  81089c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8108a0:	e0bffc17 	ldw	r2,-16(fp)
  8108a4:	10800017 	ldw	r2,0(r2)
  8108a8:	10800104 	addi	r2,r2,4
  8108ac:	1007883a 	mov	r3,r2
  8108b0:	e0bffc17 	ldw	r2,-16(fp)
  8108b4:	10800817 	ldw	r2,32(r2)
  8108b8:	18800035 	stwio	r2,0(r3)
  8108bc:	e0bffa17 	ldw	r2,-24(fp)
  8108c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108c4:	e0bff817 	ldw	r2,-32(fp)
  8108c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8108cc:	e0bffe17 	ldw	r2,-8(fp)
  8108d0:	0080100e 	bge	zero,r2,810914 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8108d4:	e0bfff17 	ldw	r2,-4(fp)
  8108d8:	1090000c 	andi	r2,r2,16384
  8108dc:	1000101e 	bne	r2,zero,810920 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8108e0:	0001883a 	nop
  8108e4:	e0bffc17 	ldw	r2,-16(fp)
  8108e8:	10c00d17 	ldw	r3,52(r2)
  8108ec:	e0bff517 	ldw	r2,-44(fp)
  8108f0:	1880051e 	bne	r3,r2,810908 <altera_avalon_jtag_uart_write+0x1b8>
  8108f4:	e0bffc17 	ldw	r2,-16(fp)
  8108f8:	10c00917 	ldw	r3,36(r2)
  8108fc:	e0bffc17 	ldw	r2,-16(fp)
  810900:	10800117 	ldw	r2,4(r2)
  810904:	18bff736 	bltu	r3,r2,8108e4 <__alt_mem_onchip_mem+0xff7908e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810908:	e0bffc17 	ldw	r2,-16(fp)
  81090c:	10800917 	ldw	r2,36(r2)
  810910:	1000051e 	bne	r2,zero,810928 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  810914:	e0bffe17 	ldw	r2,-8(fp)
  810918:	00bfd016 	blt	zero,r2,81085c <__alt_mem_onchip_mem+0xff79085c>
  81091c:	00000306 	br	81092c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  810920:	0001883a 	nop
  810924:	00000106 	br	81092c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  810928:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81092c:	e0fffd17 	ldw	r3,-12(fp)
  810930:	e0bff717 	ldw	r2,-36(fp)
  810934:	18800426 	beq	r3,r2,810948 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  810938:	e0fffd17 	ldw	r3,-12(fp)
  81093c:	e0bff717 	ldw	r2,-36(fp)
  810940:	1885c83a 	sub	r2,r3,r2
  810944:	00000606 	br	810960 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810948:	e0bfff17 	ldw	r2,-4(fp)
  81094c:	1090000c 	andi	r2,r2,16384
  810950:	10000226 	beq	r2,zero,81095c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810954:	00bffd44 	movi	r2,-11
  810958:	00000106 	br	810960 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81095c:	00bffec4 	movi	r2,-5
}
  810960:	e037883a 	mov	sp,fp
  810964:	dfc00117 	ldw	ra,4(sp)
  810968:	df000017 	ldw	fp,0(sp)
  81096c:	dec00204 	addi	sp,sp,8
  810970:	f800283a 	ret

00810974 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810974:	defffa04 	addi	sp,sp,-24
  810978:	dfc00515 	stw	ra,20(sp)
  81097c:	df000415 	stw	fp,16(sp)
  810980:	df000404 	addi	fp,sp,16
  810984:	e13ffe15 	stw	r4,-8(fp)
  810988:	2805883a 	mov	r2,r5
  81098c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810990:	e0bffe17 	ldw	r2,-8(fp)
  810994:	10800017 	ldw	r2,0(r2)
  810998:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81099c:	008003f4 	movhi	r2,15
  8109a0:	10909004 	addi	r2,r2,16960
  8109a4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8109a8:	e0bffe17 	ldw	r2,-8(fp)
  8109ac:	10800803 	ldbu	r2,32(r2)
  8109b0:	10803fcc 	andi	r2,r2,255
  8109b4:	1080201c 	xori	r2,r2,128
  8109b8:	10bfe004 	addi	r2,r2,-128
  8109bc:	1000151e 	bne	r2,zero,810a14 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8109c0:	00000906 	br	8109e8 <lcd_write_command+0x74>
    if (--i == 0)
  8109c4:	e0bffc17 	ldw	r2,-16(fp)
  8109c8:	10bfffc4 	addi	r2,r2,-1
  8109cc:	e0bffc15 	stw	r2,-16(fp)
  8109d0:	e0bffc17 	ldw	r2,-16(fp)
  8109d4:	1000041e 	bne	r2,zero,8109e8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8109d8:	e0bffe17 	ldw	r2,-8(fp)
  8109dc:	00c00044 	movi	r3,1
  8109e0:	10c00805 	stb	r3,32(r2)
      return;
  8109e4:	00000c06 	br	810a18 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8109e8:	e0bffd17 	ldw	r2,-12(fp)
  8109ec:	10800104 	addi	r2,r2,4
  8109f0:	10800037 	ldwio	r2,0(r2)
  8109f4:	1080200c 	andi	r2,r2,128
  8109f8:	103ff21e 	bne	r2,zero,8109c4 <__alt_mem_onchip_mem+0xff7909c4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8109fc:	01001904 	movi	r4,100
  810a00:	0812a6c0 	call	812a6c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  810a04:	e0bffd17 	ldw	r2,-12(fp)
  810a08:	e0ffff03 	ldbu	r3,-4(fp)
  810a0c:	10c00035 	stwio	r3,0(r2)
  810a10:	00000106 	br	810a18 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810a14:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  810a18:	e037883a 	mov	sp,fp
  810a1c:	dfc00117 	ldw	ra,4(sp)
  810a20:	df000017 	ldw	fp,0(sp)
  810a24:	dec00204 	addi	sp,sp,8
  810a28:	f800283a 	ret

00810a2c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  810a2c:	defffa04 	addi	sp,sp,-24
  810a30:	dfc00515 	stw	ra,20(sp)
  810a34:	df000415 	stw	fp,16(sp)
  810a38:	df000404 	addi	fp,sp,16
  810a3c:	e13ffe15 	stw	r4,-8(fp)
  810a40:	2805883a 	mov	r2,r5
  810a44:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810a48:	e0bffe17 	ldw	r2,-8(fp)
  810a4c:	10800017 	ldw	r2,0(r2)
  810a50:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810a54:	008003f4 	movhi	r2,15
  810a58:	10909004 	addi	r2,r2,16960
  810a5c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  810a60:	e0bffe17 	ldw	r2,-8(fp)
  810a64:	10800803 	ldbu	r2,32(r2)
  810a68:	10803fcc 	andi	r2,r2,255
  810a6c:	1080201c 	xori	r2,r2,128
  810a70:	10bfe004 	addi	r2,r2,-128
  810a74:	10001d1e 	bne	r2,zero,810aec <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810a78:	00000906 	br	810aa0 <lcd_write_data+0x74>
    if (--i == 0)
  810a7c:	e0bffc17 	ldw	r2,-16(fp)
  810a80:	10bfffc4 	addi	r2,r2,-1
  810a84:	e0bffc15 	stw	r2,-16(fp)
  810a88:	e0bffc17 	ldw	r2,-16(fp)
  810a8c:	1000041e 	bne	r2,zero,810aa0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  810a90:	e0bffe17 	ldw	r2,-8(fp)
  810a94:	00c00044 	movi	r3,1
  810a98:	10c00805 	stb	r3,32(r2)
      return;
  810a9c:	00001406 	br	810af0 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810aa0:	e0bffd17 	ldw	r2,-12(fp)
  810aa4:	10800104 	addi	r2,r2,4
  810aa8:	10800037 	ldwio	r2,0(r2)
  810aac:	1080200c 	andi	r2,r2,128
  810ab0:	103ff21e 	bne	r2,zero,810a7c <__alt_mem_onchip_mem+0xff790a7c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  810ab4:	01001904 	movi	r4,100
  810ab8:	0812a6c0 	call	812a6c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  810abc:	e0bffd17 	ldw	r2,-12(fp)
  810ac0:	10800204 	addi	r2,r2,8
  810ac4:	1007883a 	mov	r3,r2
  810ac8:	e0bfff03 	ldbu	r2,-4(fp)
  810acc:	18800035 	stwio	r2,0(r3)

  sp->address++;
  810ad0:	e0bffe17 	ldw	r2,-8(fp)
  810ad4:	108008c3 	ldbu	r2,35(r2)
  810ad8:	10800044 	addi	r2,r2,1
  810adc:	1007883a 	mov	r3,r2
  810ae0:	e0bffe17 	ldw	r2,-8(fp)
  810ae4:	10c008c5 	stb	r3,35(r2)
  810ae8:	00000106 	br	810af0 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810aec:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  810af0:	e037883a 	mov	sp,fp
  810af4:	dfc00117 	ldw	ra,4(sp)
  810af8:	df000017 	ldw	fp,0(sp)
  810afc:	dec00204 	addi	sp,sp,8
  810b00:	f800283a 	ret

00810b04 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  810b04:	defffc04 	addi	sp,sp,-16
  810b08:	dfc00315 	stw	ra,12(sp)
  810b0c:	df000215 	stw	fp,8(sp)
  810b10:	df000204 	addi	fp,sp,8
  810b14:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  810b18:	01400044 	movi	r5,1
  810b1c:	e13fff17 	ldw	r4,-4(fp)
  810b20:	08109740 	call	810974 <lcd_write_command>

  sp->x = 0;
  810b24:	e0bfff17 	ldw	r2,-4(fp)
  810b28:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  810b2c:	e0bfff17 	ldw	r2,-4(fp)
  810b30:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  810b34:	e0bfff17 	ldw	r2,-4(fp)
  810b38:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810b3c:	e03ffe15 	stw	zero,-8(fp)
  810b40:	00001b06 	br	810bb0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810b44:	e0bffe17 	ldw	r2,-8(fp)
  810b48:	108018e4 	muli	r2,r2,99
  810b4c:	10801004 	addi	r2,r2,64
  810b50:	e0ffff17 	ldw	r3,-4(fp)
  810b54:	1885883a 	add	r2,r3,r2
  810b58:	01801444 	movi	r6,81
  810b5c:	01400804 	movi	r5,32
  810b60:	1009883a 	mov	r4,r2
  810b64:	0807f900 	call	807f90 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810b68:	e0bffe17 	ldw	r2,-8(fp)
  810b6c:	108018e4 	muli	r2,r2,99
  810b70:	10800c04 	addi	r2,r2,48
  810b74:	e0ffff17 	ldw	r3,-4(fp)
  810b78:	1885883a 	add	r2,r3,r2
  810b7c:	01800404 	movi	r6,16
  810b80:	01400804 	movi	r5,32
  810b84:	1009883a 	mov	r4,r2
  810b88:	0807f900 	call	807f90 <memset>
    sp->line[y].width = 0;
  810b8c:	e0ffff17 	ldw	r3,-4(fp)
  810b90:	e0bffe17 	ldw	r2,-8(fp)
  810b94:	108018e4 	muli	r2,r2,99
  810b98:	1885883a 	add	r2,r3,r2
  810b9c:	10802444 	addi	r2,r2,145
  810ba0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810ba4:	e0bffe17 	ldw	r2,-8(fp)
  810ba8:	10800044 	addi	r2,r2,1
  810bac:	e0bffe15 	stw	r2,-8(fp)
  810bb0:	e0bffe17 	ldw	r2,-8(fp)
  810bb4:	10800090 	cmplti	r2,r2,2
  810bb8:	103fe21e 	bne	r2,zero,810b44 <__alt_mem_onchip_mem+0xff790b44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  810bbc:	0001883a 	nop
  810bc0:	e037883a 	mov	sp,fp
  810bc4:	dfc00117 	ldw	ra,4(sp)
  810bc8:	df000017 	ldw	fp,0(sp)
  810bcc:	dec00204 	addi	sp,sp,8
  810bd0:	f800283a 	ret

00810bd4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  810bd4:	defff704 	addi	sp,sp,-36
  810bd8:	dfc00815 	stw	ra,32(sp)
  810bdc:	df000715 	stw	fp,28(sp)
  810be0:	df000704 	addi	fp,sp,28
  810be4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  810be8:	e0bfff17 	ldw	r2,-4(fp)
  810bec:	10800943 	ldbu	r2,37(r2)
  810bf0:	10803fcc 	andi	r2,r2,255
  810bf4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810bf8:	e03ff915 	stw	zero,-28(fp)
  810bfc:	00006706 	br	810d9c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  810c00:	e0ffff17 	ldw	r3,-4(fp)
  810c04:	e0bff917 	ldw	r2,-28(fp)
  810c08:	108018e4 	muli	r2,r2,99
  810c0c:	1885883a 	add	r2,r3,r2
  810c10:	10802444 	addi	r2,r2,145
  810c14:	10800003 	ldbu	r2,0(r2)
  810c18:	10803fcc 	andi	r2,r2,255
  810c1c:	1080201c 	xori	r2,r2,128
  810c20:	10bfe004 	addi	r2,r2,-128
  810c24:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  810c28:	e0ffff17 	ldw	r3,-4(fp)
  810c2c:	e0bff917 	ldw	r2,-28(fp)
  810c30:	108018e4 	muli	r2,r2,99
  810c34:	1885883a 	add	r2,r3,r2
  810c38:	10802484 	addi	r2,r2,146
  810c3c:	10800003 	ldbu	r2,0(r2)
  810c40:	10c03fcc 	andi	r3,r2,255
  810c44:	e0bffc17 	ldw	r2,-16(fp)
  810c48:	1885383a 	mul	r2,r3,r2
  810c4c:	1005d23a 	srai	r2,r2,8
  810c50:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810c54:	e0fffb17 	ldw	r3,-20(fp)
  810c58:	e0bffd17 	ldw	r2,-12(fp)
  810c5c:	18800116 	blt	r3,r2,810c64 <lcd_repaint_screen+0x90>
      offset = 0;
  810c60:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810c64:	e03ffa15 	stw	zero,-24(fp)
  810c68:	00004606 	br	810d84 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810c6c:	e0fffa17 	ldw	r3,-24(fp)
  810c70:	e0bffb17 	ldw	r2,-20(fp)
  810c74:	1885883a 	add	r2,r3,r2
  810c78:	e17ffd17 	ldw	r5,-12(fp)
  810c7c:	1009883a 	mov	r4,r2
  810c80:	080ca580 	call	80ca58 <__modsi3>
  810c84:	1009883a 	mov	r4,r2
  810c88:	e0ffff17 	ldw	r3,-4(fp)
  810c8c:	e0bff917 	ldw	r2,-28(fp)
  810c90:	108018e4 	muli	r2,r2,99
  810c94:	1885883a 	add	r2,r3,r2
  810c98:	1105883a 	add	r2,r2,r4
  810c9c:	10801004 	addi	r2,r2,64
  810ca0:	10800003 	ldbu	r2,0(r2)
  810ca4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  810ca8:	e0ffff17 	ldw	r3,-4(fp)
  810cac:	e0bff917 	ldw	r2,-28(fp)
  810cb0:	108018e4 	muli	r2,r2,99
  810cb4:	1887883a 	add	r3,r3,r2
  810cb8:	e0bffa17 	ldw	r2,-24(fp)
  810cbc:	1885883a 	add	r2,r3,r2
  810cc0:	10800c04 	addi	r2,r2,48
  810cc4:	10800003 	ldbu	r2,0(r2)
  810cc8:	10c03fcc 	andi	r3,r2,255
  810ccc:	18c0201c 	xori	r3,r3,128
  810cd0:	18ffe004 	addi	r3,r3,-128
  810cd4:	e0bffe07 	ldb	r2,-8(fp)
  810cd8:	18802726 	beq	r3,r2,810d78 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  810cdc:	e0fff917 	ldw	r3,-28(fp)
  810ce0:	d0a00f04 	addi	r2,gp,-32708
  810ce4:	1885883a 	add	r2,r3,r2
  810ce8:	10800003 	ldbu	r2,0(r2)
  810cec:	1007883a 	mov	r3,r2
  810cf0:	e0bffa17 	ldw	r2,-24(fp)
  810cf4:	1885883a 	add	r2,r3,r2
  810cf8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  810cfc:	e0fffe43 	ldbu	r3,-7(fp)
  810d00:	e0bfff17 	ldw	r2,-4(fp)
  810d04:	108008c3 	ldbu	r2,35(r2)
  810d08:	10803fcc 	andi	r2,r2,255
  810d0c:	1080201c 	xori	r2,r2,128
  810d10:	10bfe004 	addi	r2,r2,-128
  810d14:	18800a26 	beq	r3,r2,810d40 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810d18:	e0fffe43 	ldbu	r3,-7(fp)
  810d1c:	00bfe004 	movi	r2,-128
  810d20:	1884b03a 	or	r2,r3,r2
  810d24:	10803fcc 	andi	r2,r2,255
  810d28:	100b883a 	mov	r5,r2
  810d2c:	e13fff17 	ldw	r4,-4(fp)
  810d30:	08109740 	call	810974 <lcd_write_command>
          sp->address = address;
  810d34:	e0fffe43 	ldbu	r3,-7(fp)
  810d38:	e0bfff17 	ldw	r2,-4(fp)
  810d3c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810d40:	e0bffe03 	ldbu	r2,-8(fp)
  810d44:	10803fcc 	andi	r2,r2,255
  810d48:	100b883a 	mov	r5,r2
  810d4c:	e13fff17 	ldw	r4,-4(fp)
  810d50:	0810a2c0 	call	810a2c <lcd_write_data>
        sp->line[y].visible[x] = c;
  810d54:	e0ffff17 	ldw	r3,-4(fp)
  810d58:	e0bff917 	ldw	r2,-28(fp)
  810d5c:	108018e4 	muli	r2,r2,99
  810d60:	1887883a 	add	r3,r3,r2
  810d64:	e0bffa17 	ldw	r2,-24(fp)
  810d68:	1885883a 	add	r2,r3,r2
  810d6c:	10800c04 	addi	r2,r2,48
  810d70:	e0fffe03 	ldbu	r3,-8(fp)
  810d74:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810d78:	e0bffa17 	ldw	r2,-24(fp)
  810d7c:	10800044 	addi	r2,r2,1
  810d80:	e0bffa15 	stw	r2,-24(fp)
  810d84:	e0bffa17 	ldw	r2,-24(fp)
  810d88:	10800410 	cmplti	r2,r2,16
  810d8c:	103fb71e 	bne	r2,zero,810c6c <__alt_mem_onchip_mem+0xff790c6c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810d90:	e0bff917 	ldw	r2,-28(fp)
  810d94:	10800044 	addi	r2,r2,1
  810d98:	e0bff915 	stw	r2,-28(fp)
  810d9c:	e0bff917 	ldw	r2,-28(fp)
  810da0:	10800090 	cmplti	r2,r2,2
  810da4:	103f961e 	bne	r2,zero,810c00 <__alt_mem_onchip_mem+0xff790c00>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810da8:	0001883a 	nop
  810dac:	e037883a 	mov	sp,fp
  810db0:	dfc00117 	ldw	ra,4(sp)
  810db4:	df000017 	ldw	fp,0(sp)
  810db8:	dec00204 	addi	sp,sp,8
  810dbc:	f800283a 	ret

00810dc0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  810dc0:	defffc04 	addi	sp,sp,-16
  810dc4:	dfc00315 	stw	ra,12(sp)
  810dc8:	df000215 	stw	fp,8(sp)
  810dcc:	df000204 	addi	fp,sp,8
  810dd0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810dd4:	e03ffe15 	stw	zero,-8(fp)
  810dd8:	00001d06 	br	810e50 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  810ddc:	e0bffe17 	ldw	r2,-8(fp)
  810de0:	00800f16 	blt	zero,r2,810e20 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  810de4:	e0bffe17 	ldw	r2,-8(fp)
  810de8:	108018e4 	muli	r2,r2,99
  810dec:	10801004 	addi	r2,r2,64
  810df0:	e0ffff17 	ldw	r3,-4(fp)
  810df4:	1889883a 	add	r4,r3,r2
  810df8:	e0bffe17 	ldw	r2,-8(fp)
  810dfc:	10800044 	addi	r2,r2,1
  810e00:	108018e4 	muli	r2,r2,99
  810e04:	10801004 	addi	r2,r2,64
  810e08:	e0ffff17 	ldw	r3,-4(fp)
  810e0c:	1885883a 	add	r2,r3,r2
  810e10:	01801404 	movi	r6,80
  810e14:	100b883a 	mov	r5,r2
  810e18:	0807e480 	call	807e48 <memcpy>
  810e1c:	00000906 	br	810e44 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810e20:	e0bffe17 	ldw	r2,-8(fp)
  810e24:	108018e4 	muli	r2,r2,99
  810e28:	10801004 	addi	r2,r2,64
  810e2c:	e0ffff17 	ldw	r3,-4(fp)
  810e30:	1885883a 	add	r2,r3,r2
  810e34:	01801404 	movi	r6,80
  810e38:	01400804 	movi	r5,32
  810e3c:	1009883a 	mov	r4,r2
  810e40:	0807f900 	call	807f90 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810e44:	e0bffe17 	ldw	r2,-8(fp)
  810e48:	10800044 	addi	r2,r2,1
  810e4c:	e0bffe15 	stw	r2,-8(fp)
  810e50:	e0bffe17 	ldw	r2,-8(fp)
  810e54:	10800090 	cmplti	r2,r2,2
  810e58:	103fe01e 	bne	r2,zero,810ddc <__alt_mem_onchip_mem+0xff790ddc>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810e5c:	e0bfff17 	ldw	r2,-4(fp)
  810e60:	10800883 	ldbu	r2,34(r2)
  810e64:	10bfffc4 	addi	r2,r2,-1
  810e68:	1007883a 	mov	r3,r2
  810e6c:	e0bfff17 	ldw	r2,-4(fp)
  810e70:	10c00885 	stb	r3,34(r2)
}
  810e74:	0001883a 	nop
  810e78:	e037883a 	mov	sp,fp
  810e7c:	dfc00117 	ldw	ra,4(sp)
  810e80:	df000017 	ldw	fp,0(sp)
  810e84:	dec00204 	addi	sp,sp,8
  810e88:	f800283a 	ret

00810e8c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810e8c:	defff904 	addi	sp,sp,-28
  810e90:	dfc00615 	stw	ra,24(sp)
  810e94:	df000515 	stw	fp,20(sp)
  810e98:	df000504 	addi	fp,sp,20
  810e9c:	e13ffe15 	stw	r4,-8(fp)
  810ea0:	2805883a 	mov	r2,r5
  810ea4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  810ea8:	e03ffb15 	stw	zero,-20(fp)
  810eac:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  810eb0:	e0bffe17 	ldw	r2,-8(fp)
  810eb4:	10800a03 	ldbu	r2,40(r2)
  810eb8:	10803fcc 	andi	r2,r2,255
  810ebc:	1080201c 	xori	r2,r2,128
  810ec0:	10bfe004 	addi	r2,r2,-128
  810ec4:	108016d8 	cmpnei	r2,r2,91
  810ec8:	1000411e 	bne	r2,zero,810fd0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  810ecc:	e0bffe17 	ldw	r2,-8(fp)
  810ed0:	10800a04 	addi	r2,r2,40
  810ed4:	10800044 	addi	r2,r2,1
  810ed8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  810edc:	00000c06 	br	810f10 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  810ee0:	e0bffb17 	ldw	r2,-20(fp)
  810ee4:	10c002a4 	muli	r3,r2,10
  810ee8:	e0bffd17 	ldw	r2,-12(fp)
  810eec:	11000044 	addi	r4,r2,1
  810ef0:	e13ffd15 	stw	r4,-12(fp)
  810ef4:	10800003 	ldbu	r2,0(r2)
  810ef8:	10803fcc 	andi	r2,r2,255
  810efc:	1080201c 	xori	r2,r2,128
  810f00:	10bfe004 	addi	r2,r2,-128
  810f04:	10bff404 	addi	r2,r2,-48
  810f08:	1885883a 	add	r2,r3,r2
  810f0c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  810f10:	d0e01117 	ldw	r3,-32700(gp)
  810f14:	e0bffd17 	ldw	r2,-12(fp)
  810f18:	10800003 	ldbu	r2,0(r2)
  810f1c:	10803fcc 	andi	r2,r2,255
  810f20:	1080201c 	xori	r2,r2,128
  810f24:	10bfe004 	addi	r2,r2,-128
  810f28:	10800044 	addi	r2,r2,1
  810f2c:	1885883a 	add	r2,r3,r2
  810f30:	10800003 	ldbu	r2,0(r2)
  810f34:	10803fcc 	andi	r2,r2,255
  810f38:	1080010c 	andi	r2,r2,4
  810f3c:	103fe81e 	bne	r2,zero,810ee0 <__alt_mem_onchip_mem+0xff790ee0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810f40:	e0bffd17 	ldw	r2,-12(fp)
  810f44:	10800003 	ldbu	r2,0(r2)
  810f48:	10803fcc 	andi	r2,r2,255
  810f4c:	1080201c 	xori	r2,r2,128
  810f50:	10bfe004 	addi	r2,r2,-128
  810f54:	10800ed8 	cmpnei	r2,r2,59
  810f58:	10001f1e 	bne	r2,zero,810fd8 <lcd_handle_escape+0x14c>
    {
      ptr++;
  810f5c:	e0bffd17 	ldw	r2,-12(fp)
  810f60:	10800044 	addi	r2,r2,1
  810f64:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  810f68:	00000c06 	br	810f9c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810f6c:	e0bffc17 	ldw	r2,-16(fp)
  810f70:	10c002a4 	muli	r3,r2,10
  810f74:	e0bffd17 	ldw	r2,-12(fp)
  810f78:	11000044 	addi	r4,r2,1
  810f7c:	e13ffd15 	stw	r4,-12(fp)
  810f80:	10800003 	ldbu	r2,0(r2)
  810f84:	10803fcc 	andi	r2,r2,255
  810f88:	1080201c 	xori	r2,r2,128
  810f8c:	10bfe004 	addi	r2,r2,-128
  810f90:	10bff404 	addi	r2,r2,-48
  810f94:	1885883a 	add	r2,r3,r2
  810f98:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810f9c:	d0e01117 	ldw	r3,-32700(gp)
  810fa0:	e0bffd17 	ldw	r2,-12(fp)
  810fa4:	10800003 	ldbu	r2,0(r2)
  810fa8:	10803fcc 	andi	r2,r2,255
  810fac:	1080201c 	xori	r2,r2,128
  810fb0:	10bfe004 	addi	r2,r2,-128
  810fb4:	10800044 	addi	r2,r2,1
  810fb8:	1885883a 	add	r2,r3,r2
  810fbc:	10800003 	ldbu	r2,0(r2)
  810fc0:	10803fcc 	andi	r2,r2,255
  810fc4:	1080010c 	andi	r2,r2,4
  810fc8:	103fe81e 	bne	r2,zero,810f6c <__alt_mem_onchip_mem+0xff790f6c>
  810fcc:	00000206 	br	810fd8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  810fd0:	00bfffc4 	movi	r2,-1
  810fd4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  810fd8:	e0bfff07 	ldb	r2,-4(fp)
  810fdc:	10c012a0 	cmpeqi	r3,r2,74
  810fe0:	1800291e 	bne	r3,zero,811088 <lcd_handle_escape+0x1fc>
  810fe4:	10c012c8 	cmpgei	r3,r2,75
  810fe8:	1800031e 	bne	r3,zero,810ff8 <lcd_handle_escape+0x16c>
  810fec:	10801220 	cmpeqi	r2,r2,72
  810ff0:	1000061e 	bne	r2,zero,81100c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810ff4:	00004a06 	br	811120 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  810ff8:	10c012e0 	cmpeqi	r3,r2,75
  810ffc:	1800281e 	bne	r3,zero,8110a0 <lcd_handle_escape+0x214>
  811000:	108019a0 	cmpeqi	r2,r2,102
  811004:	1000011e 	bne	r2,zero,81100c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811008:	00004506 	br	811120 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  81100c:	e0bffc17 	ldw	r2,-16(fp)
  811010:	0080050e 	bge	zero,r2,811028 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  811014:	e0bffc17 	ldw	r2,-16(fp)
  811018:	10bfffc4 	addi	r2,r2,-1
  81101c:	1007883a 	mov	r3,r2
  811020:	e0bffe17 	ldw	r2,-8(fp)
  811024:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  811028:	e0bffb17 	ldw	r2,-20(fp)
  81102c:	0080370e 	bge	zero,r2,81110c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811030:	e0bffb17 	ldw	r2,-20(fp)
  811034:	10bfffc4 	addi	r2,r2,-1
  811038:	1007883a 	mov	r3,r2
  81103c:	e0bffe17 	ldw	r2,-8(fp)
  811040:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811044:	e0bffe17 	ldw	r2,-8(fp)
  811048:	10800883 	ldbu	r2,34(r2)
  81104c:	10803fcc 	andi	r2,r2,255
  811050:	10800170 	cmpltui	r2,r2,5
  811054:	1000061e 	bne	r2,zero,811070 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  811058:	e0bffe17 	ldw	r2,-8(fp)
  81105c:	00c00104 	movi	r3,4
  811060:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  811064:	00000206 	br	811070 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  811068:	e13ffe17 	ldw	r4,-8(fp)
  81106c:	0810dc00 	call	810dc0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  811070:	e0bffe17 	ldw	r2,-8(fp)
  811074:	10800883 	ldbu	r2,34(r2)
  811078:	10803fcc 	andi	r2,r2,255
  81107c:	108000e8 	cmpgeui	r2,r2,3
  811080:	103ff91e 	bne	r2,zero,811068 <__alt_mem_onchip_mem+0xff791068>
        lcd_scroll_up(sp);
    }
    break;
  811084:	00002106 	br	81110c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  811088:	e0bffb17 	ldw	r2,-20(fp)
  81108c:	10800098 	cmpnei	r2,r2,2
  811090:	1000201e 	bne	r2,zero,811114 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811094:	e13ffe17 	ldw	r4,-8(fp)
  811098:	0810b040 	call	810b04 <lcd_clear_screen>
    break;
  81109c:	00001d06 	br	811114 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8110a0:	e0bffb17 	ldw	r2,-20(fp)
  8110a4:	00801d16 	blt	zero,r2,81111c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8110a8:	e0bffe17 	ldw	r2,-8(fp)
  8110ac:	10800843 	ldbu	r2,33(r2)
  8110b0:	10803fcc 	andi	r2,r2,255
  8110b4:	10801428 	cmpgeui	r2,r2,80
  8110b8:	1000181e 	bne	r2,zero,81111c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8110bc:	e0bffe17 	ldw	r2,-8(fp)
  8110c0:	10800883 	ldbu	r2,34(r2)
  8110c4:	10803fcc 	andi	r2,r2,255
  8110c8:	108018e4 	muli	r2,r2,99
  8110cc:	10801004 	addi	r2,r2,64
  8110d0:	e0fffe17 	ldw	r3,-8(fp)
  8110d4:	1887883a 	add	r3,r3,r2
  8110d8:	e0bffe17 	ldw	r2,-8(fp)
  8110dc:	10800843 	ldbu	r2,33(r2)
  8110e0:	10803fcc 	andi	r2,r2,255
  8110e4:	1889883a 	add	r4,r3,r2
  8110e8:	e0bffe17 	ldw	r2,-8(fp)
  8110ec:	10800843 	ldbu	r2,33(r2)
  8110f0:	10803fcc 	andi	r2,r2,255
  8110f4:	00c01404 	movi	r3,80
  8110f8:	1885c83a 	sub	r2,r3,r2
  8110fc:	100d883a 	mov	r6,r2
  811100:	01400804 	movi	r5,32
  811104:	0807f900 	call	807f90 <memset>
    }
    break;
  811108:	00000406 	br	81111c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  81110c:	0001883a 	nop
  811110:	00000306 	br	811120 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  811114:	0001883a 	nop
  811118:	00000106 	br	811120 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  81111c:	0001883a 	nop
  }
}
  811120:	0001883a 	nop
  811124:	e037883a 	mov	sp,fp
  811128:	dfc00117 	ldw	ra,4(sp)
  81112c:	df000017 	ldw	fp,0(sp)
  811130:	dec00204 	addi	sp,sp,8
  811134:	f800283a 	ret

00811138 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  811138:	defff304 	addi	sp,sp,-52
  81113c:	dfc00c15 	stw	ra,48(sp)
  811140:	df000b15 	stw	fp,44(sp)
  811144:	df000b04 	addi	fp,sp,44
  811148:	e13ffc15 	stw	r4,-16(fp)
  81114c:	e17ffd15 	stw	r5,-12(fp)
  811150:	e1bffe15 	stw	r6,-8(fp)
  811154:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  811158:	e0bffe17 	ldw	r2,-8(fp)
  81115c:	e0fffd17 	ldw	r3,-12(fp)
  811160:	1885883a 	add	r2,r3,r2
  811164:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  811168:	e0bffc17 	ldw	r2,-16(fp)
  81116c:	00c00044 	movi	r3,1
  811170:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811174:	00009906 	br	8113dc <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  811178:	e0bffd17 	ldw	r2,-12(fp)
  81117c:	10800003 	ldbu	r2,0(r2)
  811180:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811184:	e0bffc17 	ldw	r2,-16(fp)
  811188:	10800903 	ldbu	r2,36(r2)
  81118c:	10803fcc 	andi	r2,r2,255
  811190:	1080201c 	xori	r2,r2,128
  811194:	10bfe004 	addi	r2,r2,-128
  811198:	10003716 	blt	r2,zero,811278 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  81119c:	e0bffc17 	ldw	r2,-16(fp)
  8111a0:	10800903 	ldbu	r2,36(r2)
  8111a4:	10803fcc 	andi	r2,r2,255
  8111a8:	1080201c 	xori	r2,r2,128
  8111ac:	10bfe004 	addi	r2,r2,-128
  8111b0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8111b4:	e0bffa17 	ldw	r2,-24(fp)
  8111b8:	1000031e 	bne	r2,zero,8111c8 <altera_avalon_lcd_16207_write+0x90>
  8111bc:	e0bff907 	ldb	r2,-28(fp)
  8111c0:	108016d8 	cmpnei	r2,r2,91
  8111c4:	10000d1e 	bne	r2,zero,8111fc <altera_avalon_lcd_16207_write+0xc4>
  8111c8:	e0bffa17 	ldw	r2,-24(fp)
  8111cc:	10001826 	beq	r2,zero,811230 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8111d0:	d0e01117 	ldw	r3,-32700(gp)
  8111d4:	e0bff907 	ldb	r2,-28(fp)
  8111d8:	10800044 	addi	r2,r2,1
  8111dc:	1885883a 	add	r2,r3,r2
  8111e0:	10800003 	ldbu	r2,0(r2)
  8111e4:	10803fcc 	andi	r2,r2,255
  8111e8:	1080010c 	andi	r2,r2,4
  8111ec:	1000101e 	bne	r2,zero,811230 <altera_avalon_lcd_16207_write+0xf8>
  8111f0:	e0bff907 	ldb	r2,-28(fp)
  8111f4:	10800ee0 	cmpeqi	r2,r2,59
  8111f8:	10000d1e 	bne	r2,zero,811230 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8111fc:	e0fffc17 	ldw	r3,-16(fp)
  811200:	e0bffa17 	ldw	r2,-24(fp)
  811204:	1885883a 	add	r2,r3,r2
  811208:	10800a04 	addi	r2,r2,40
  81120c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  811210:	e0bff907 	ldb	r2,-28(fp)
  811214:	100b883a 	mov	r5,r2
  811218:	e13ffc17 	ldw	r4,-16(fp)
  81121c:	0810e8c0 	call	810e8c <lcd_handle_escape>

        sp->esccount = -1;
  811220:	e0bffc17 	ldw	r2,-16(fp)
  811224:	00ffffc4 	movi	r3,-1
  811228:	10c00905 	stb	r3,36(r2)
  81122c:	00006806 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811230:	e0bffc17 	ldw	r2,-16(fp)
  811234:	10800903 	ldbu	r2,36(r2)
  811238:	10803fcc 	andi	r2,r2,255
  81123c:	108001e8 	cmpgeui	r2,r2,7
  811240:	1000631e 	bne	r2,zero,8113d0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811244:	e0fffc17 	ldw	r3,-16(fp)
  811248:	e0bffa17 	ldw	r2,-24(fp)
  81124c:	1885883a 	add	r2,r3,r2
  811250:	10800a04 	addi	r2,r2,40
  811254:	e0fff903 	ldbu	r3,-28(fp)
  811258:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  81125c:	e0bffc17 	ldw	r2,-16(fp)
  811260:	10800903 	ldbu	r2,36(r2)
  811264:	10800044 	addi	r2,r2,1
  811268:	1007883a 	mov	r3,r2
  81126c:	e0bffc17 	ldw	r2,-16(fp)
  811270:	10c00905 	stb	r3,36(r2)
  811274:	00005606 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811278:	e0bff907 	ldb	r2,-28(fp)
  81127c:	108006d8 	cmpnei	r2,r2,27
  811280:	1000031e 	bne	r2,zero,811290 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811284:	e0bffc17 	ldw	r2,-16(fp)
  811288:	10000905 	stb	zero,36(r2)
  81128c:	00005006 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811290:	e0bff907 	ldb	r2,-28(fp)
  811294:	10800358 	cmpnei	r2,r2,13
  811298:	1000031e 	bne	r2,zero,8112a8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  81129c:	e0bffc17 	ldw	r2,-16(fp)
  8112a0:	10000845 	stb	zero,33(r2)
  8112a4:	00004a06 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  8112a8:	e0bff907 	ldb	r2,-28(fp)
  8112ac:	10800298 	cmpnei	r2,r2,10
  8112b0:	1000101e 	bne	r2,zero,8112f4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  8112b4:	e0bffc17 	ldw	r2,-16(fp)
  8112b8:	10000845 	stb	zero,33(r2)
      sp->y++;
  8112bc:	e0bffc17 	ldw	r2,-16(fp)
  8112c0:	10800883 	ldbu	r2,34(r2)
  8112c4:	10800044 	addi	r2,r2,1
  8112c8:	1007883a 	mov	r3,r2
  8112cc:	e0bffc17 	ldw	r2,-16(fp)
  8112d0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8112d4:	e0bffc17 	ldw	r2,-16(fp)
  8112d8:	10800883 	ldbu	r2,34(r2)
  8112dc:	10803fcc 	andi	r2,r2,255
  8112e0:	108000f0 	cmpltui	r2,r2,3
  8112e4:	10003a1e 	bne	r2,zero,8113d0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8112e8:	e13ffc17 	ldw	r4,-16(fp)
  8112ec:	0810dc00 	call	810dc0 <lcd_scroll_up>
  8112f0:	00003706 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8112f4:	e0bff907 	ldb	r2,-28(fp)
  8112f8:	10800218 	cmpnei	r2,r2,8
  8112fc:	10000b1e 	bne	r2,zero,81132c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811300:	e0bffc17 	ldw	r2,-16(fp)
  811304:	10800843 	ldbu	r2,33(r2)
  811308:	10803fcc 	andi	r2,r2,255
  81130c:	10003026 	beq	r2,zero,8113d0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811310:	e0bffc17 	ldw	r2,-16(fp)
  811314:	10800843 	ldbu	r2,33(r2)
  811318:	10bfffc4 	addi	r2,r2,-1
  81131c:	1007883a 	mov	r3,r2
  811320:	e0bffc17 	ldw	r2,-16(fp)
  811324:	10c00845 	stb	r3,33(r2)
  811328:	00002906 	br	8113d0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  81132c:	d0e01117 	ldw	r3,-32700(gp)
  811330:	e0bff907 	ldb	r2,-28(fp)
  811334:	10800044 	addi	r2,r2,1
  811338:	1885883a 	add	r2,r3,r2
  81133c:	10800003 	ldbu	r2,0(r2)
  811340:	10803fcc 	andi	r2,r2,255
  811344:	1080201c 	xori	r2,r2,128
  811348:	10bfe004 	addi	r2,r2,-128
  81134c:	108025cc 	andi	r2,r2,151
  811350:	10001f26 	beq	r2,zero,8113d0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811354:	e0bffc17 	ldw	r2,-16(fp)
  811358:	10800883 	ldbu	r2,34(r2)
  81135c:	10803fcc 	andi	r2,r2,255
  811360:	108000b0 	cmpltui	r2,r2,2
  811364:	1000021e 	bne	r2,zero,811370 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811368:	e13ffc17 	ldw	r4,-16(fp)
  81136c:	0810dc00 	call	810dc0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811370:	e0bffc17 	ldw	r2,-16(fp)
  811374:	10800843 	ldbu	r2,33(r2)
  811378:	10803fcc 	andi	r2,r2,255
  81137c:	10801428 	cmpgeui	r2,r2,80
  811380:	10000d1e 	bne	r2,zero,8113b8 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811384:	e0bffc17 	ldw	r2,-16(fp)
  811388:	10800883 	ldbu	r2,34(r2)
  81138c:	10c03fcc 	andi	r3,r2,255
  811390:	e0bffc17 	ldw	r2,-16(fp)
  811394:	10800843 	ldbu	r2,33(r2)
  811398:	10803fcc 	andi	r2,r2,255
  81139c:	e13ffc17 	ldw	r4,-16(fp)
  8113a0:	18c018e4 	muli	r3,r3,99
  8113a4:	20c7883a 	add	r3,r4,r3
  8113a8:	1885883a 	add	r2,r3,r2
  8113ac:	10801004 	addi	r2,r2,64
  8113b0:	e0fff903 	ldbu	r3,-28(fp)
  8113b4:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8113b8:	e0bffc17 	ldw	r2,-16(fp)
  8113bc:	10800843 	ldbu	r2,33(r2)
  8113c0:	10800044 	addi	r2,r2,1
  8113c4:	1007883a 	mov	r3,r2
  8113c8:	e0bffc17 	ldw	r2,-16(fp)
  8113cc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8113d0:	e0bffd17 	ldw	r2,-12(fp)
  8113d4:	10800044 	addi	r2,r2,1
  8113d8:	e0bffd15 	stw	r2,-12(fp)
  8113dc:	e0fffd17 	ldw	r3,-12(fp)
  8113e0:	e0bff817 	ldw	r2,-32(fp)
  8113e4:	18bf6436 	bltu	r3,r2,811178 <__alt_mem_onchip_mem+0xff791178>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8113e8:	00800404 	movi	r2,16
  8113ec:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8113f0:	e03ff515 	stw	zero,-44(fp)
  8113f4:	00003706 	br	8114d4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8113f8:	00801404 	movi	r2,80
  8113fc:	e0bff715 	stw	r2,-36(fp)
  811400:	00001106 	br	811448 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  811404:	e0bff717 	ldw	r2,-36(fp)
  811408:	10bfffc4 	addi	r2,r2,-1
  81140c:	e13ffc17 	ldw	r4,-16(fp)
  811410:	e0fff517 	ldw	r3,-44(fp)
  811414:	18c018e4 	muli	r3,r3,99
  811418:	20c7883a 	add	r3,r4,r3
  81141c:	1885883a 	add	r2,r3,r2
  811420:	10801004 	addi	r2,r2,64
  811424:	10800003 	ldbu	r2,0(r2)
  811428:	10803fcc 	andi	r2,r2,255
  81142c:	1080201c 	xori	r2,r2,128
  811430:	10bfe004 	addi	r2,r2,-128
  811434:	10800820 	cmpeqi	r2,r2,32
  811438:	10000626 	beq	r2,zero,811454 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81143c:	e0bff717 	ldw	r2,-36(fp)
  811440:	10bfffc4 	addi	r2,r2,-1
  811444:	e0bff715 	stw	r2,-36(fp)
  811448:	e0bff717 	ldw	r2,-36(fp)
  81144c:	00bfed16 	blt	zero,r2,811404 <__alt_mem_onchip_mem+0xff791404>
  811450:	00000106 	br	811458 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  811454:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  811458:	e0bff717 	ldw	r2,-36(fp)
  81145c:	10800448 	cmpgei	r2,r2,17
  811460:	1000031e 	bne	r2,zero,811470 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  811464:	00800404 	movi	r2,16
  811468:	e0bff715 	stw	r2,-36(fp)
  81146c:	00000306 	br	81147c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  811470:	e0bff717 	ldw	r2,-36(fp)
  811474:	10800044 	addi	r2,r2,1
  811478:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  81147c:	e0bff717 	ldw	r2,-36(fp)
  811480:	1009883a 	mov	r4,r2
  811484:	e0fffc17 	ldw	r3,-16(fp)
  811488:	e0bff517 	ldw	r2,-44(fp)
  81148c:	108018e4 	muli	r2,r2,99
  811490:	1885883a 	add	r2,r3,r2
  811494:	10802444 	addi	r2,r2,145
  811498:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  81149c:	e0fff617 	ldw	r3,-40(fp)
  8114a0:	e0bff717 	ldw	r2,-36(fp)
  8114a4:	1880020e 	bge	r3,r2,8114b0 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8114a8:	e0bff717 	ldw	r2,-36(fp)
  8114ac:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8114b0:	e0fffc17 	ldw	r3,-16(fp)
  8114b4:	e0bff517 	ldw	r2,-44(fp)
  8114b8:	108018e4 	muli	r2,r2,99
  8114bc:	1885883a 	add	r2,r3,r2
  8114c0:	10802484 	addi	r2,r2,146
  8114c4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8114c8:	e0bff517 	ldw	r2,-44(fp)
  8114cc:	10800044 	addi	r2,r2,1
  8114d0:	e0bff515 	stw	r2,-44(fp)
  8114d4:	e0bff517 	ldw	r2,-44(fp)
  8114d8:	10800090 	cmplti	r2,r2,2
  8114dc:	103fc61e 	bne	r2,zero,8113f8 <__alt_mem_onchip_mem+0xff7913f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8114e0:	e0bff617 	ldw	r2,-40(fp)
  8114e4:	10800448 	cmpgei	r2,r2,17
  8114e8:	1000031e 	bne	r2,zero,8114f8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  8114ec:	e0bffc17 	ldw	r2,-16(fp)
  8114f0:	10000985 	stb	zero,38(r2)
  8114f4:	00002e06 	br	8115b0 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  8114f8:	e0bff617 	ldw	r2,-40(fp)
  8114fc:	1085883a 	add	r2,r2,r2
  811500:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  811504:	e0bff617 	ldw	r2,-40(fp)
  811508:	1007883a 	mov	r3,r2
  81150c:	e0bffc17 	ldw	r2,-16(fp)
  811510:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811514:	e03ff515 	stw	zero,-44(fp)
  811518:	00002206 	br	8115a4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81151c:	e0fffc17 	ldw	r3,-16(fp)
  811520:	e0bff517 	ldw	r2,-44(fp)
  811524:	108018e4 	muli	r2,r2,99
  811528:	1885883a 	add	r2,r3,r2
  81152c:	10802444 	addi	r2,r2,145
  811530:	10800003 	ldbu	r2,0(r2)
  811534:	10803fcc 	andi	r2,r2,255
  811538:	1080201c 	xori	r2,r2,128
  81153c:	10bfe004 	addi	r2,r2,-128
  811540:	10800450 	cmplti	r2,r2,17
  811544:	1000141e 	bne	r2,zero,811598 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  811548:	e0fffc17 	ldw	r3,-16(fp)
  81154c:	e0bff517 	ldw	r2,-44(fp)
  811550:	108018e4 	muli	r2,r2,99
  811554:	1885883a 	add	r2,r3,r2
  811558:	10802444 	addi	r2,r2,145
  81155c:	10800003 	ldbu	r2,0(r2)
  811560:	10803fcc 	andi	r2,r2,255
  811564:	1080201c 	xori	r2,r2,128
  811568:	10bfe004 	addi	r2,r2,-128
  81156c:	1004923a 	slli	r2,r2,8
  811570:	e17ff617 	ldw	r5,-40(fp)
  811574:	1009883a 	mov	r4,r2
  811578:	080c9d40 	call	80c9d4 <__divsi3>
  81157c:	1009883a 	mov	r4,r2
  811580:	e0fffc17 	ldw	r3,-16(fp)
  811584:	e0bff517 	ldw	r2,-44(fp)
  811588:	108018e4 	muli	r2,r2,99
  81158c:	1885883a 	add	r2,r3,r2
  811590:	10802484 	addi	r2,r2,146
  811594:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811598:	e0bff517 	ldw	r2,-44(fp)
  81159c:	10800044 	addi	r2,r2,1
  8115a0:	e0bff515 	stw	r2,-44(fp)
  8115a4:	e0bff517 	ldw	r2,-44(fp)
  8115a8:	10800090 	cmplti	r2,r2,2
  8115ac:	103fdb1e 	bne	r2,zero,81151c <__alt_mem_onchip_mem+0xff79151c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8115b0:	e0bffc17 	ldw	r2,-16(fp)
  8115b4:	10800943 	ldbu	r2,37(r2)
  8115b8:	10803fcc 	andi	r2,r2,255
  8115bc:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  8115c0:	e13ffc17 	ldw	r4,-16(fp)
  8115c4:	0810bd40 	call	810bd4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  8115c8:	e0bffc17 	ldw	r2,-16(fp)
  8115cc:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	10800943 	ldbu	r2,37(r2)
  8115d8:	10c03fcc 	andi	r3,r2,255
  8115dc:	e0bffb17 	ldw	r2,-20(fp)
  8115e0:	18800426 	beq	r3,r2,8115f4 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  8115e4:	e0bffc17 	ldw	r2,-16(fp)
  8115e8:	00c00044 	movi	r3,1
  8115ec:	10c009c5 	stb	r3,39(r2)
  }
  8115f0:	003fef06 	br	8115b0 <__alt_mem_onchip_mem+0xff7915b0>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  8115f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  8115f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8115fc:	e037883a 	mov	sp,fp
  811600:	dfc00117 	ldw	ra,4(sp)
  811604:	df000017 	ldw	fp,0(sp)
  811608:	dec00204 	addi	sp,sp,8
  81160c:	f800283a 	ret

00811610 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  811610:	defffc04 	addi	sp,sp,-16
  811614:	dfc00315 	stw	ra,12(sp)
  811618:	df000215 	stw	fp,8(sp)
  81161c:	df000204 	addi	fp,sp,8
  811620:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  811624:	e0bfff17 	ldw	r2,-4(fp)
  811628:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81162c:	e0bffe17 	ldw	r2,-8(fp)
  811630:	10800943 	ldbu	r2,37(r2)
  811634:	10803fcc 	andi	r2,r2,255
  811638:	10c00044 	addi	r3,r2,1
  81163c:	e0bffe17 	ldw	r2,-8(fp)
  811640:	10800983 	ldbu	r2,38(r2)
  811644:	10803fcc 	andi	r2,r2,255
  811648:	18800316 	blt	r3,r2,811658 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  81164c:	e0bffe17 	ldw	r2,-8(fp)
  811650:	10000945 	stb	zero,37(r2)
  811654:	00000606 	br	811670 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  811658:	e0bffe17 	ldw	r2,-8(fp)
  81165c:	10800943 	ldbu	r2,37(r2)
  811660:	10800044 	addi	r2,r2,1
  811664:	1007883a 	mov	r3,r2
  811668:	e0bffe17 	ldw	r2,-8(fp)
  81166c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  811670:	e0bffe17 	ldw	r2,-8(fp)
  811674:	10800983 	ldbu	r2,38(r2)
  811678:	10803fcc 	andi	r2,r2,255
  81167c:	10000826 	beq	r2,zero,8116a0 <alt_lcd_16207_timeout+0x90>
  811680:	e0bffe17 	ldw	r2,-8(fp)
  811684:	108009c3 	ldbu	r2,39(r2)
  811688:	10803fcc 	andi	r2,r2,255
  81168c:	1080201c 	xori	r2,r2,128
  811690:	10bfe004 	addi	r2,r2,-128
  811694:	1000021e 	bne	r2,zero,8116a0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  811698:	e13ffe17 	ldw	r4,-8(fp)
  81169c:	0810bd40 	call	810bd4 <lcd_repaint_screen>

  return sp->period;
  8116a0:	e0bffe17 	ldw	r2,-8(fp)
  8116a4:	10800717 	ldw	r2,28(r2)
}
  8116a8:	e037883a 	mov	sp,fp
  8116ac:	dfc00117 	ldw	ra,4(sp)
  8116b0:	df000017 	ldw	fp,0(sp)
  8116b4:	dec00204 	addi	sp,sp,8
  8116b8:	f800283a 	ret

008116bc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8116bc:	defffc04 	addi	sp,sp,-16
  8116c0:	dfc00315 	stw	ra,12(sp)
  8116c4:	df000215 	stw	fp,8(sp)
  8116c8:	df000204 	addi	fp,sp,8
  8116cc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8116d0:	e0bfff17 	ldw	r2,-4(fp)
  8116d4:	10800017 	ldw	r2,0(r2)
  8116d8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8116dc:	e0bfff17 	ldw	r2,-4(fp)
  8116e0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8116e4:	010ea604 	movi	r4,15000
  8116e8:	0812a6c0 	call	812a6c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8116ec:	e0bffe17 	ldw	r2,-8(fp)
  8116f0:	00c00c04 	movi	r3,48
  8116f4:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8116f8:	01040104 	movi	r4,4100
  8116fc:	0812a6c0 	call	812a6c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811700:	e0bffe17 	ldw	r2,-8(fp)
  811704:	00c00c04 	movi	r3,48
  811708:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81170c:	0100fa04 	movi	r4,1000
  811710:	0812a6c0 	call	812a6c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  811714:	e0bffe17 	ldw	r2,-8(fp)
  811718:	00c00c04 	movi	r3,48
  81171c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  811720:	01400e04 	movi	r5,56
  811724:	e13fff17 	ldw	r4,-4(fp)
  811728:	08109740 	call	810974 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81172c:	01400204 	movi	r5,8
  811730:	e13fff17 	ldw	r4,-4(fp)
  811734:	08109740 	call	810974 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  811738:	e13fff17 	ldw	r4,-4(fp)
  81173c:	0810b040 	call	810b04 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  811740:	01400184 	movi	r5,6
  811744:	e13fff17 	ldw	r4,-4(fp)
  811748:	08109740 	call	810974 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81174c:	01400304 	movi	r5,12
  811750:	e13fff17 	ldw	r4,-4(fp)
  811754:	08109740 	call	810974 <lcd_write_command>

  sp->esccount = -1;
  811758:	e0bfff17 	ldw	r2,-4(fp)
  81175c:	00ffffc4 	movi	r3,-1
  811760:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  811764:	e0bfff17 	ldw	r2,-4(fp)
  811768:	10800a04 	addi	r2,r2,40
  81176c:	01800204 	movi	r6,8
  811770:	000b883a 	mov	r5,zero
  811774:	1009883a 	mov	r4,r2
  811778:	0807f900 	call	807f90 <memset>

  sp->scrollpos = 0;
  81177c:	e0bfff17 	ldw	r2,-4(fp)
  811780:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  811784:	e0bfff17 	ldw	r2,-4(fp)
  811788:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  81178c:	e0bfff17 	ldw	r2,-4(fp)
  811790:	100009c5 	stb	zero,39(r2)
  811794:	d0a7a417 	ldw	r2,-24944(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  811798:	01400284 	movi	r5,10
  81179c:	1009883a 	mov	r4,r2
  8117a0:	080cacc0 	call	80cacc <__udivsi3>
  8117a4:	1007883a 	mov	r3,r2
  8117a8:	e0bfff17 	ldw	r2,-4(fp)
  8117ac:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8117b0:	e0bfff17 	ldw	r2,-4(fp)
  8117b4:	10c00104 	addi	r3,r2,4
  8117b8:	e0bfff17 	ldw	r2,-4(fp)
  8117bc:	10800717 	ldw	r2,28(r2)
  8117c0:	e1ffff17 	ldw	r7,-4(fp)
  8117c4:	01802074 	movhi	r6,129
  8117c8:	31858404 	addi	r6,r6,5648
  8117cc:	100b883a 	mov	r5,r2
  8117d0:	1809883a 	mov	r4,r3
  8117d4:	080f1f00 	call	80f1f0 <alt_alarm_start>
}
  8117d8:	0001883a 	nop
  8117dc:	e037883a 	mov	sp,fp
  8117e0:	dfc00117 	ldw	ra,4(sp)
  8117e4:	df000017 	ldw	fp,0(sp)
  8117e8:	dec00204 	addi	sp,sp,8
  8117ec:	f800283a 	ret

008117f0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8117f0:	defffa04 	addi	sp,sp,-24
  8117f4:	dfc00515 	stw	ra,20(sp)
  8117f8:	df000415 	stw	fp,16(sp)
  8117fc:	df000404 	addi	fp,sp,16
  811800:	e13ffd15 	stw	r4,-12(fp)
  811804:	e17ffe15 	stw	r5,-8(fp)
  811808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81180c:	e0bffd17 	ldw	r2,-12(fp)
  811810:	10800017 	ldw	r2,0(r2)
  811814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  811818:	e0bffc17 	ldw	r2,-16(fp)
  81181c:	10c00a04 	addi	r3,r2,40
  811820:	e0bffd17 	ldw	r2,-12(fp)
  811824:	10800217 	ldw	r2,8(r2)
  811828:	100f883a 	mov	r7,r2
  81182c:	e1bfff17 	ldw	r6,-4(fp)
  811830:	e17ffe17 	ldw	r5,-8(fp)
  811834:	1809883a 	mov	r4,r3
  811838:	08111380 	call	811138 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81183c:	e037883a 	mov	sp,fp
  811840:	dfc00117 	ldw	ra,4(sp)
  811844:	df000017 	ldw	fp,0(sp)
  811848:	dec00204 	addi	sp,sp,8
  81184c:	f800283a 	ret

00811850 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  811850:	defffa04 	addi	sp,sp,-24
  811854:	dfc00515 	stw	ra,20(sp)
  811858:	df000415 	stw	fp,16(sp)
  81185c:	df000404 	addi	fp,sp,16
  811860:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811864:	0007883a 	mov	r3,zero
  811868:	e0bfff17 	ldw	r2,-4(fp)
  81186c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  811870:	e0bfff17 	ldw	r2,-4(fp)
  811874:	10800104 	addi	r2,r2,4
  811878:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81187c:	0005303a 	rdctl	r2,status
  811880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811884:	e0fffd17 	ldw	r3,-12(fp)
  811888:	00bfff84 	movi	r2,-2
  81188c:	1884703a 	and	r2,r3,r2
  811890:	1001703a 	wrctl	status,r2
  
  return context;
  811894:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811898:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  81189c:	080fbc80 	call	80fbc8 <alt_tick>
  8118a0:	e0bffc17 	ldw	r2,-16(fp)
  8118a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8118a8:	e0bffe17 	ldw	r2,-8(fp)
  8118ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8118b0:	0001883a 	nop
  8118b4:	e037883a 	mov	sp,fp
  8118b8:	dfc00117 	ldw	ra,4(sp)
  8118bc:	df000017 	ldw	fp,0(sp)
  8118c0:	dec00204 	addi	sp,sp,8
  8118c4:	f800283a 	ret

008118c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8118c8:	defff804 	addi	sp,sp,-32
  8118cc:	dfc00715 	stw	ra,28(sp)
  8118d0:	df000615 	stw	fp,24(sp)
  8118d4:	df000604 	addi	fp,sp,24
  8118d8:	e13ffc15 	stw	r4,-16(fp)
  8118dc:	e17ffd15 	stw	r5,-12(fp)
  8118e0:	e1bffe15 	stw	r6,-8(fp)
  8118e4:	e1ffff15 	stw	r7,-4(fp)
  8118e8:	e0bfff17 	ldw	r2,-4(fp)
  8118ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8118f0:	d0a7a417 	ldw	r2,-24944(gp)
  8118f4:	1000021e 	bne	r2,zero,811900 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8118f8:	e0bffb17 	ldw	r2,-20(fp)
  8118fc:	d0a7a415 	stw	r2,-24944(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  811900:	e0bffc17 	ldw	r2,-16(fp)
  811904:	10800104 	addi	r2,r2,4
  811908:	00c001c4 	movi	r3,7
  81190c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  811910:	d8000015 	stw	zero,0(sp)
  811914:	e1fffc17 	ldw	r7,-16(fp)
  811918:	01802074 	movhi	r6,129
  81191c:	31861404 	addi	r6,r6,6224
  811920:	e17ffe17 	ldw	r5,-8(fp)
  811924:	e13ffd17 	ldw	r4,-12(fp)
  811928:	08124380 	call	812438 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81192c:	0001883a 	nop
  811930:	e037883a 	mov	sp,fp
  811934:	dfc00117 	ldw	ra,4(sp)
  811938:	df000017 	ldw	fp,0(sp)
  81193c:	dec00204 	addi	sp,sp,8
  811940:	f800283a 	ret

00811944 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811944:	defffa04 	addi	sp,sp,-24
  811948:	dfc00515 	stw	ra,20(sp)
  81194c:	df000415 	stw	fp,16(sp)
  811950:	df000404 	addi	fp,sp,16
  811954:	e13ffd15 	stw	r4,-12(fp)
  811958:	e17ffe15 	stw	r5,-8(fp)
  81195c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811960:	e0bffd17 	ldw	r2,-12(fp)
  811964:	10800017 	ldw	r2,0(r2)
  811968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81196c:	e0bffc17 	ldw	r2,-16(fp)
  811970:	10c00a04 	addi	r3,r2,40
  811974:	e0bffd17 	ldw	r2,-12(fp)
  811978:	10800217 	ldw	r2,8(r2)
  81197c:	100f883a 	mov	r7,r2
  811980:	e1bfff17 	ldw	r6,-4(fp)
  811984:	e17ffe17 	ldw	r5,-8(fp)
  811988:	1809883a 	mov	r4,r3
  81198c:	0811e580 	call	811e58 <altera_avalon_uart_read>
      fd->fd_flags);
}
  811990:	e037883a 	mov	sp,fp
  811994:	dfc00117 	ldw	ra,4(sp)
  811998:	df000017 	ldw	fp,0(sp)
  81199c:	dec00204 	addi	sp,sp,8
  8119a0:	f800283a 	ret

008119a4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8119a4:	defffa04 	addi	sp,sp,-24
  8119a8:	dfc00515 	stw	ra,20(sp)
  8119ac:	df000415 	stw	fp,16(sp)
  8119b0:	df000404 	addi	fp,sp,16
  8119b4:	e13ffd15 	stw	r4,-12(fp)
  8119b8:	e17ffe15 	stw	r5,-8(fp)
  8119bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8119c0:	e0bffd17 	ldw	r2,-12(fp)
  8119c4:	10800017 	ldw	r2,0(r2)
  8119c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8119cc:	e0bffc17 	ldw	r2,-16(fp)
  8119d0:	10c00a04 	addi	r3,r2,40
  8119d4:	e0bffd17 	ldw	r2,-12(fp)
  8119d8:	10800217 	ldw	r2,8(r2)
  8119dc:	100f883a 	mov	r7,r2
  8119e0:	e1bfff17 	ldw	r6,-4(fp)
  8119e4:	e17ffe17 	ldw	r5,-8(fp)
  8119e8:	1809883a 	mov	r4,r3
  8119ec:	08120700 	call	812070 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8119f0:	e037883a 	mov	sp,fp
  8119f4:	dfc00117 	ldw	ra,4(sp)
  8119f8:	df000017 	ldw	fp,0(sp)
  8119fc:	dec00204 	addi	sp,sp,8
  811a00:	f800283a 	ret

00811a04 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  811a04:	defffc04 	addi	sp,sp,-16
  811a08:	dfc00315 	stw	ra,12(sp)
  811a0c:	df000215 	stw	fp,8(sp)
  811a10:	df000204 	addi	fp,sp,8
  811a14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811a18:	e0bfff17 	ldw	r2,-4(fp)
  811a1c:	10800017 	ldw	r2,0(r2)
  811a20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  811a24:	e0bffe17 	ldw	r2,-8(fp)
  811a28:	10c00a04 	addi	r3,r2,40
  811a2c:	e0bfff17 	ldw	r2,-4(fp)
  811a30:	10800217 	ldw	r2,8(r2)
  811a34:	100b883a 	mov	r5,r2
  811a38:	1809883a 	mov	r4,r3
  811a3c:	0811dc80 	call	811dc8 <altera_avalon_uart_close>
}
  811a40:	e037883a 	mov	sp,fp
  811a44:	dfc00117 	ldw	ra,4(sp)
  811a48:	df000017 	ldw	fp,0(sp)
  811a4c:	dec00204 	addi	sp,sp,8
  811a50:	f800283a 	ret

00811a54 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811a54:	defff804 	addi	sp,sp,-32
  811a58:	dfc00715 	stw	ra,28(sp)
  811a5c:	df000615 	stw	fp,24(sp)
  811a60:	df000604 	addi	fp,sp,24
  811a64:	e13ffd15 	stw	r4,-12(fp)
  811a68:	e17ffe15 	stw	r5,-8(fp)
  811a6c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  811a70:	e0bffd17 	ldw	r2,-12(fp)
  811a74:	10800017 	ldw	r2,0(r2)
  811a78:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811a7c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811a80:	1000041e 	bne	r2,zero,811a94 <altera_avalon_uart_init+0x40>
  811a84:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811a88:	1000021e 	bne	r2,zero,811a94 <altera_avalon_uart_init+0x40>
  811a8c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  811a90:	10000226 	beq	r2,zero,811a9c <altera_avalon_uart_init+0x48>
  811a94:	00800044 	movi	r2,1
  811a98:	00000106 	br	811aa0 <altera_avalon_uart_init+0x4c>
  811a9c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811aa0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  811aa4:	e0bffc17 	ldw	r2,-16(fp)
  811aa8:	10000f1e 	bne	r2,zero,811ae8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  811aac:	e0bffd17 	ldw	r2,-12(fp)
  811ab0:	00c32004 	movi	r3,3200
  811ab4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  811ab8:	e0bffb17 	ldw	r2,-20(fp)
  811abc:	10800304 	addi	r2,r2,12
  811ac0:	e0fffd17 	ldw	r3,-12(fp)
  811ac4:	18c00117 	ldw	r3,4(r3)
  811ac8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  811acc:	d8000015 	stw	zero,0(sp)
  811ad0:	e1fffd17 	ldw	r7,-12(fp)
  811ad4:	01802074 	movhi	r6,129
  811ad8:	3186c004 	addi	r6,r6,6912
  811adc:	e17fff17 	ldw	r5,-4(fp)
  811ae0:	e13ffe17 	ldw	r4,-8(fp)
  811ae4:	08124380 	call	812438 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  811ae8:	0001883a 	nop
  811aec:	e037883a 	mov	sp,fp
  811af0:	dfc00117 	ldw	ra,4(sp)
  811af4:	df000017 	ldw	fp,0(sp)
  811af8:	dec00204 	addi	sp,sp,8
  811afc:	f800283a 	ret

00811b00 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  811b00:	defffa04 	addi	sp,sp,-24
  811b04:	dfc00515 	stw	ra,20(sp)
  811b08:	df000415 	stw	fp,16(sp)
  811b0c:	df000404 	addi	fp,sp,16
  811b10:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  811b14:	e0bfff17 	ldw	r2,-4(fp)
  811b18:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  811b1c:	e0bffc17 	ldw	r2,-16(fp)
  811b20:	10800017 	ldw	r2,0(r2)
  811b24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  811b28:	e0bffd17 	ldw	r2,-12(fp)
  811b2c:	10800204 	addi	r2,r2,8
  811b30:	10800037 	ldwio	r2,0(r2)
  811b34:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  811b38:	e0bffd17 	ldw	r2,-12(fp)
  811b3c:	10800204 	addi	r2,r2,8
  811b40:	0007883a 	mov	r3,zero
  811b44:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811b48:	e0bffd17 	ldw	r2,-12(fp)
  811b4c:	10800204 	addi	r2,r2,8
  811b50:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811b54:	e0bffe17 	ldw	r2,-8(fp)
  811b58:	1080200c 	andi	r2,r2,128
  811b5c:	10000326 	beq	r2,zero,811b6c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  811b60:	e17ffe17 	ldw	r5,-8(fp)
  811b64:	e13ffc17 	ldw	r4,-16(fp)
  811b68:	0811b9c0 	call	811b9c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811b6c:	e0bffe17 	ldw	r2,-8(fp)
  811b70:	1081100c 	andi	r2,r2,1088
  811b74:	10000326 	beq	r2,zero,811b84 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811b78:	e17ffe17 	ldw	r5,-8(fp)
  811b7c:	e13ffc17 	ldw	r4,-16(fp)
  811b80:	0811c800 	call	811c80 <altera_avalon_uart_txirq>
  }
  

}
  811b84:	0001883a 	nop
  811b88:	e037883a 	mov	sp,fp
  811b8c:	dfc00117 	ldw	ra,4(sp)
  811b90:	df000017 	ldw	fp,0(sp)
  811b94:	dec00204 	addi	sp,sp,8
  811b98:	f800283a 	ret

00811b9c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811b9c:	defffc04 	addi	sp,sp,-16
  811ba0:	df000315 	stw	fp,12(sp)
  811ba4:	df000304 	addi	fp,sp,12
  811ba8:	e13ffe15 	stw	r4,-8(fp)
  811bac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  811bb0:	e0bfff17 	ldw	r2,-4(fp)
  811bb4:	108000cc 	andi	r2,r2,3
  811bb8:	10002c1e 	bne	r2,zero,811c6c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  811bbc:	e0bffe17 	ldw	r2,-8(fp)
  811bc0:	10800317 	ldw	r2,12(r2)
  811bc4:	e0bffe17 	ldw	r2,-8(fp)
  811bc8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811bcc:	e0bffe17 	ldw	r2,-8(fp)
  811bd0:	10800317 	ldw	r2,12(r2)
  811bd4:	10800044 	addi	r2,r2,1
  811bd8:	10800fcc 	andi	r2,r2,63
  811bdc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  811be0:	e0bffe17 	ldw	r2,-8(fp)
  811be4:	10800317 	ldw	r2,12(r2)
  811be8:	e0fffe17 	ldw	r3,-8(fp)
  811bec:	18c00017 	ldw	r3,0(r3)
  811bf0:	18c00037 	ldwio	r3,0(r3)
  811bf4:	1809883a 	mov	r4,r3
  811bf8:	e0fffe17 	ldw	r3,-8(fp)
  811bfc:	1885883a 	add	r2,r3,r2
  811c00:	10800704 	addi	r2,r2,28
  811c04:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  811c08:	e0bffe17 	ldw	r2,-8(fp)
  811c0c:	e0fffd17 	ldw	r3,-12(fp)
  811c10:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811c14:	e0bffe17 	ldw	r2,-8(fp)
  811c18:	10800317 	ldw	r2,12(r2)
  811c1c:	10800044 	addi	r2,r2,1
  811c20:	10800fcc 	andi	r2,r2,63
  811c24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  811c28:	e0bffe17 	ldw	r2,-8(fp)
  811c2c:	10c00217 	ldw	r3,8(r2)
  811c30:	e0bffd17 	ldw	r2,-12(fp)
  811c34:	18800e1e 	bne	r3,r2,811c70 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811c38:	e0bffe17 	ldw	r2,-8(fp)
  811c3c:	10c00117 	ldw	r3,4(r2)
  811c40:	00bfdfc4 	movi	r2,-129
  811c44:	1886703a 	and	r3,r3,r2
  811c48:	e0bffe17 	ldw	r2,-8(fp)
  811c4c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	10800017 	ldw	r2,0(r2)
  811c58:	10800304 	addi	r2,r2,12
  811c5c:	e0fffe17 	ldw	r3,-8(fp)
  811c60:	18c00117 	ldw	r3,4(r3)
  811c64:	10c00035 	stwio	r3,0(r2)
  811c68:	00000106 	br	811c70 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811c6c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  811c70:	e037883a 	mov	sp,fp
  811c74:	df000017 	ldw	fp,0(sp)
  811c78:	dec00104 	addi	sp,sp,4
  811c7c:	f800283a 	ret

00811c80 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811c80:	defffb04 	addi	sp,sp,-20
  811c84:	df000415 	stw	fp,16(sp)
  811c88:	df000404 	addi	fp,sp,16
  811c8c:	e13ffc15 	stw	r4,-16(fp)
  811c90:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811c94:	e0bffc17 	ldw	r2,-16(fp)
  811c98:	10c00417 	ldw	r3,16(r2)
  811c9c:	e0bffc17 	ldw	r2,-16(fp)
  811ca0:	10800517 	ldw	r2,20(r2)
  811ca4:	18803226 	beq	r3,r2,811d70 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811ca8:	e0bffc17 	ldw	r2,-16(fp)
  811cac:	10800617 	ldw	r2,24(r2)
  811cb0:	1080008c 	andi	r2,r2,2
  811cb4:	10000326 	beq	r2,zero,811cc4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811cb8:	e0bffd17 	ldw	r2,-12(fp)
  811cbc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811cc0:	10001d26 	beq	r2,zero,811d38 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811cc4:	e0bffc17 	ldw	r2,-16(fp)
  811cc8:	10800417 	ldw	r2,16(r2)
  811ccc:	e0bffc17 	ldw	r2,-16(fp)
  811cd0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811cd4:	e0bffc17 	ldw	r2,-16(fp)
  811cd8:	10800017 	ldw	r2,0(r2)
  811cdc:	10800104 	addi	r2,r2,4
  811ce0:	e0fffc17 	ldw	r3,-16(fp)
  811ce4:	18c00417 	ldw	r3,16(r3)
  811ce8:	e13ffc17 	ldw	r4,-16(fp)
  811cec:	20c7883a 	add	r3,r4,r3
  811cf0:	18c01704 	addi	r3,r3,92
  811cf4:	18c00003 	ldbu	r3,0(r3)
  811cf8:	18c03fcc 	andi	r3,r3,255
  811cfc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811d00:	e0bffc17 	ldw	r2,-16(fp)
  811d04:	10800417 	ldw	r2,16(r2)
  811d08:	10800044 	addi	r2,r2,1
  811d0c:	e0fffc17 	ldw	r3,-16(fp)
  811d10:	18800415 	stw	r2,16(r3)
  811d14:	10c00fcc 	andi	r3,r2,63
  811d18:	e0bffc17 	ldw	r2,-16(fp)
  811d1c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811d20:	e0bffc17 	ldw	r2,-16(fp)
  811d24:	10800117 	ldw	r2,4(r2)
  811d28:	10c01014 	ori	r3,r2,64
  811d2c:	e0bffc17 	ldw	r2,-16(fp)
  811d30:	10c00115 	stw	r3,4(r2)
  811d34:	00000e06 	br	811d70 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811d38:	e0bffc17 	ldw	r2,-16(fp)
  811d3c:	10800017 	ldw	r2,0(r2)
  811d40:	10800204 	addi	r2,r2,8
  811d44:	10800037 	ldwio	r2,0(r2)
  811d48:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811d4c:	e0bffd17 	ldw	r2,-12(fp)
  811d50:	1082000c 	andi	r2,r2,2048
  811d54:	1000061e 	bne	r2,zero,811d70 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811d58:	e0bffc17 	ldw	r2,-16(fp)
  811d5c:	10c00117 	ldw	r3,4(r2)
  811d60:	00bfefc4 	movi	r2,-65
  811d64:	1886703a 	and	r3,r3,r2
  811d68:	e0bffc17 	ldw	r2,-16(fp)
  811d6c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  811d70:	e0bffc17 	ldw	r2,-16(fp)
  811d74:	10c00417 	ldw	r3,16(r2)
  811d78:	e0bffc17 	ldw	r2,-16(fp)
  811d7c:	10800517 	ldw	r2,20(r2)
  811d80:	1880061e 	bne	r3,r2,811d9c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811d84:	e0bffc17 	ldw	r2,-16(fp)
  811d88:	10c00117 	ldw	r3,4(r2)
  811d8c:	00beefc4 	movi	r2,-1089
  811d90:	1886703a 	and	r3,r3,r2
  811d94:	e0bffc17 	ldw	r2,-16(fp)
  811d98:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811d9c:	e0bffc17 	ldw	r2,-16(fp)
  811da0:	10800017 	ldw	r2,0(r2)
  811da4:	10800304 	addi	r2,r2,12
  811da8:	e0fffc17 	ldw	r3,-16(fp)
  811dac:	18c00117 	ldw	r3,4(r3)
  811db0:	10c00035 	stwio	r3,0(r2)
}
  811db4:	0001883a 	nop
  811db8:	e037883a 	mov	sp,fp
  811dbc:	df000017 	ldw	fp,0(sp)
  811dc0:	dec00104 	addi	sp,sp,4
  811dc4:	f800283a 	ret

00811dc8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811dc8:	defffd04 	addi	sp,sp,-12
  811dcc:	df000215 	stw	fp,8(sp)
  811dd0:	df000204 	addi	fp,sp,8
  811dd4:	e13ffe15 	stw	r4,-8(fp)
  811dd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811ddc:	00000506 	br	811df4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811de0:	e0bfff17 	ldw	r2,-4(fp)
  811de4:	1090000c 	andi	r2,r2,16384
  811de8:	10000226 	beq	r2,zero,811df4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811dec:	00bffd44 	movi	r2,-11
  811df0:	00000606 	br	811e0c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  811df4:	e0bffe17 	ldw	r2,-8(fp)
  811df8:	10c00417 	ldw	r3,16(r2)
  811dfc:	e0bffe17 	ldw	r2,-8(fp)
  811e00:	10800517 	ldw	r2,20(r2)
  811e04:	18bff61e 	bne	r3,r2,811de0 <__alt_mem_onchip_mem+0xff791de0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811e08:	0005883a 	mov	r2,zero
}
  811e0c:	e037883a 	mov	sp,fp
  811e10:	df000017 	ldw	fp,0(sp)
  811e14:	dec00104 	addi	sp,sp,4
  811e18:	f800283a 	ret

00811e1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811e1c:	defffe04 	addi	sp,sp,-8
  811e20:	dfc00115 	stw	ra,4(sp)
  811e24:	df000015 	stw	fp,0(sp)
  811e28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811e2c:	d0a00b17 	ldw	r2,-32724(gp)
  811e30:	10000326 	beq	r2,zero,811e40 <alt_get_errno+0x24>
  811e34:	d0a00b17 	ldw	r2,-32724(gp)
  811e38:	103ee83a 	callr	r2
  811e3c:	00000106 	br	811e44 <alt_get_errno+0x28>
  811e40:	d0a7a004 	addi	r2,gp,-24960
}
  811e44:	e037883a 	mov	sp,fp
  811e48:	dfc00117 	ldw	ra,4(sp)
  811e4c:	df000017 	ldw	fp,0(sp)
  811e50:	dec00204 	addi	sp,sp,8
  811e54:	f800283a 	ret

00811e58 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811e58:	defff204 	addi	sp,sp,-56
  811e5c:	dfc00d15 	stw	ra,52(sp)
  811e60:	df000c15 	stw	fp,48(sp)
  811e64:	df000c04 	addi	fp,sp,48
  811e68:	e13ffc15 	stw	r4,-16(fp)
  811e6c:	e17ffd15 	stw	r5,-12(fp)
  811e70:	e1bffe15 	stw	r6,-8(fp)
  811e74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811e78:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811e7c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  811e80:	e0bfff17 	ldw	r2,-4(fp)
  811e84:	1090000c 	andi	r2,r2,16384
  811e88:	1005003a 	cmpeq	r2,r2,zero
  811e8c:	10803fcc 	andi	r2,r2,255
  811e90:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811e94:	00001306 	br	811ee4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811e98:	e0bff517 	ldw	r2,-44(fp)
  811e9c:	10800044 	addi	r2,r2,1
  811ea0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811ea4:	e0bffd17 	ldw	r2,-12(fp)
  811ea8:	10c00044 	addi	r3,r2,1
  811eac:	e0fffd15 	stw	r3,-12(fp)
  811eb0:	e0fffc17 	ldw	r3,-16(fp)
  811eb4:	18c00217 	ldw	r3,8(r3)
  811eb8:	e13ffc17 	ldw	r4,-16(fp)
  811ebc:	20c7883a 	add	r3,r4,r3
  811ec0:	18c00704 	addi	r3,r3,28
  811ec4:	18c00003 	ldbu	r3,0(r3)
  811ec8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  811ecc:	e0bffc17 	ldw	r2,-16(fp)
  811ed0:	10800217 	ldw	r2,8(r2)
  811ed4:	10800044 	addi	r2,r2,1
  811ed8:	10c00fcc 	andi	r3,r2,63
  811edc:	e0bffc17 	ldw	r2,-16(fp)
  811ee0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811ee4:	e0fff517 	ldw	r3,-44(fp)
  811ee8:	e0bffe17 	ldw	r2,-8(fp)
  811eec:	1880050e 	bge	r3,r2,811f04 <altera_avalon_uart_read+0xac>
  811ef0:	e0bffc17 	ldw	r2,-16(fp)
  811ef4:	10c00217 	ldw	r3,8(r2)
  811ef8:	e0bffc17 	ldw	r2,-16(fp)
  811efc:	10800317 	ldw	r2,12(r2)
  811f00:	18bfe51e 	bne	r3,r2,811e98 <__alt_mem_onchip_mem+0xff791e98>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811f04:	e0bff517 	ldw	r2,-44(fp)
  811f08:	1000251e 	bne	r2,zero,811fa0 <altera_avalon_uart_read+0x148>
  811f0c:	e0bffc17 	ldw	r2,-16(fp)
  811f10:	10c00217 	ldw	r3,8(r2)
  811f14:	e0bffc17 	ldw	r2,-16(fp)
  811f18:	10800317 	ldw	r2,12(r2)
  811f1c:	1880201e 	bne	r3,r2,811fa0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  811f20:	e0bff617 	ldw	r2,-40(fp)
  811f24:	1000071e 	bne	r2,zero,811f44 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811f28:	0811e1c0 	call	811e1c <alt_get_errno>
  811f2c:	1007883a 	mov	r3,r2
  811f30:	008002c4 	movi	r2,11
  811f34:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  811f38:	00800044 	movi	r2,1
  811f3c:	e0bff405 	stb	r2,-48(fp)
        break;
  811f40:	00001b06 	br	811fb0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f44:	0005303a 	rdctl	r2,status
  811f48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f4c:	e0fff917 	ldw	r3,-28(fp)
  811f50:	00bfff84 	movi	r2,-2
  811f54:	1884703a 	and	r2,r3,r2
  811f58:	1001703a 	wrctl	status,r2
  
  return context;
  811f5c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  811f60:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811f64:	e0bffc17 	ldw	r2,-16(fp)
  811f68:	10800117 	ldw	r2,4(r2)
  811f6c:	10c02014 	ori	r3,r2,128
  811f70:	e0bffc17 	ldw	r2,-16(fp)
  811f74:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811f78:	e0bffc17 	ldw	r2,-16(fp)
  811f7c:	10800017 	ldw	r2,0(r2)
  811f80:	10800304 	addi	r2,r2,12
  811f84:	e0fffc17 	ldw	r3,-16(fp)
  811f88:	18c00117 	ldw	r3,4(r3)
  811f8c:	10c00035 	stwio	r3,0(r2)
  811f90:	e0bff817 	ldw	r2,-32(fp)
  811f94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f98:	e0bffa17 	ldw	r2,-24(fp)
  811f9c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811fa0:	e0bff517 	ldw	r2,-44(fp)
  811fa4:	1000021e 	bne	r2,zero,811fb0 <altera_avalon_uart_read+0x158>
  811fa8:	e0bffe17 	ldw	r2,-8(fp)
  811fac:	103fcd1e 	bne	r2,zero,811ee4 <__alt_mem_onchip_mem+0xff791ee4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811fb0:	0005303a 	rdctl	r2,status
  811fb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811fb8:	e0fffb17 	ldw	r3,-20(fp)
  811fbc:	00bfff84 	movi	r2,-2
  811fc0:	1884703a 	and	r2,r3,r2
  811fc4:	1001703a 	wrctl	status,r2
  
  return context;
  811fc8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811fcc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811fd0:	e0bffc17 	ldw	r2,-16(fp)
  811fd4:	10800117 	ldw	r2,4(r2)
  811fd8:	10c02014 	ori	r3,r2,128
  811fdc:	e0bffc17 	ldw	r2,-16(fp)
  811fe0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811fe4:	e0bffc17 	ldw	r2,-16(fp)
  811fe8:	10800017 	ldw	r2,0(r2)
  811fec:	10800304 	addi	r2,r2,12
  811ff0:	e0fffc17 	ldw	r3,-16(fp)
  811ff4:	18c00117 	ldw	r3,4(r3)
  811ff8:	10c00035 	stwio	r3,0(r2)
  811ffc:	e0bff817 	ldw	r2,-32(fp)
  812000:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812004:	e0bff717 	ldw	r2,-36(fp)
  812008:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  81200c:	e0bff403 	ldbu	r2,-48(fp)
  812010:	10000226 	beq	r2,zero,81201c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  812014:	00bffd44 	movi	r2,-11
  812018:	00000106 	br	812020 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  81201c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812020:	e037883a 	mov	sp,fp
  812024:	dfc00117 	ldw	ra,4(sp)
  812028:	df000017 	ldw	fp,0(sp)
  81202c:	dec00204 	addi	sp,sp,8
  812030:	f800283a 	ret

00812034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812034:	defffe04 	addi	sp,sp,-8
  812038:	dfc00115 	stw	ra,4(sp)
  81203c:	df000015 	stw	fp,0(sp)
  812040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812044:	d0a00b17 	ldw	r2,-32724(gp)
  812048:	10000326 	beq	r2,zero,812058 <alt_get_errno+0x24>
  81204c:	d0a00b17 	ldw	r2,-32724(gp)
  812050:	103ee83a 	callr	r2
  812054:	00000106 	br	81205c <alt_get_errno+0x28>
  812058:	d0a7a004 	addi	r2,gp,-24960
}
  81205c:	e037883a 	mov	sp,fp
  812060:	dfc00117 	ldw	ra,4(sp)
  812064:	df000017 	ldw	fp,0(sp)
  812068:	dec00204 	addi	sp,sp,8
  81206c:	f800283a 	ret

00812070 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  812070:	defff204 	addi	sp,sp,-56
  812074:	dfc00d15 	stw	ra,52(sp)
  812078:	df000c15 	stw	fp,48(sp)
  81207c:	df000c04 	addi	fp,sp,48
  812080:	e13ffc15 	stw	r4,-16(fp)
  812084:	e17ffd15 	stw	r5,-12(fp)
  812088:	e1bffe15 	stw	r6,-8(fp)
  81208c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  812090:	e0bffe17 	ldw	r2,-8(fp)
  812094:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  812098:	e0bfff17 	ldw	r2,-4(fp)
  81209c:	1090000c 	andi	r2,r2,16384
  8120a0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8120a4:	00003c06 	br	812198 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8120a8:	e0bffc17 	ldw	r2,-16(fp)
  8120ac:	10800517 	ldw	r2,20(r2)
  8120b0:	10800044 	addi	r2,r2,1
  8120b4:	10800fcc 	andi	r2,r2,63
  8120b8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8120bc:	e0bffc17 	ldw	r2,-16(fp)
  8120c0:	10c00417 	ldw	r3,16(r2)
  8120c4:	e0bff717 	ldw	r2,-36(fp)
  8120c8:	1880221e 	bne	r3,r2,812154 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8120cc:	e0bff517 	ldw	r2,-44(fp)
  8120d0:	10000526 	beq	r2,zero,8120e8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8120d4:	08120340 	call	812034 <alt_get_errno>
  8120d8:	1007883a 	mov	r3,r2
  8120dc:	008002c4 	movi	r2,11
  8120e0:	18800015 	stw	r2,0(r3)
        break;
  8120e4:	00002e06 	br	8121a0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120e8:	0005303a 	rdctl	r2,status
  8120ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120f0:	e0fff917 	ldw	r3,-28(fp)
  8120f4:	00bfff84 	movi	r2,-2
  8120f8:	1884703a 	and	r2,r3,r2
  8120fc:	1001703a 	wrctl	status,r2
  
  return context;
  812100:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812104:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812108:	e0bffc17 	ldw	r2,-16(fp)
  81210c:	10800117 	ldw	r2,4(r2)
  812110:	10c11014 	ori	r3,r2,1088
  812114:	e0bffc17 	ldw	r2,-16(fp)
  812118:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81211c:	e0bffc17 	ldw	r2,-16(fp)
  812120:	10800017 	ldw	r2,0(r2)
  812124:	10800304 	addi	r2,r2,12
  812128:	e0fffc17 	ldw	r3,-16(fp)
  81212c:	18c00117 	ldw	r3,4(r3)
  812130:	10c00035 	stwio	r3,0(r2)
  812134:	e0bff817 	ldw	r2,-32(fp)
  812138:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81213c:	e0bff617 	ldw	r2,-40(fp)
  812140:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812144:	e0bffc17 	ldw	r2,-16(fp)
  812148:	10c00417 	ldw	r3,16(r2)
  81214c:	e0bff717 	ldw	r2,-36(fp)
  812150:	18bffc26 	beq	r3,r2,812144 <__alt_mem_onchip_mem+0xff792144>
      }
    }

    count--;
  812154:	e0bff417 	ldw	r2,-48(fp)
  812158:	10bfffc4 	addi	r2,r2,-1
  81215c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  812160:	e0bffc17 	ldw	r2,-16(fp)
  812164:	10c00517 	ldw	r3,20(r2)
  812168:	e0bffd17 	ldw	r2,-12(fp)
  81216c:	11000044 	addi	r4,r2,1
  812170:	e13ffd15 	stw	r4,-12(fp)
  812174:	10800003 	ldbu	r2,0(r2)
  812178:	1009883a 	mov	r4,r2
  81217c:	e0bffc17 	ldw	r2,-16(fp)
  812180:	10c5883a 	add	r2,r2,r3
  812184:	10801704 	addi	r2,r2,92
  812188:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  81218c:	e0bffc17 	ldw	r2,-16(fp)
  812190:	e0fff717 	ldw	r3,-36(fp)
  812194:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812198:	e0bff417 	ldw	r2,-48(fp)
  81219c:	103fc21e 	bne	r2,zero,8120a8 <__alt_mem_onchip_mem+0xff7920a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8121a0:	0005303a 	rdctl	r2,status
  8121a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8121a8:	e0fffb17 	ldw	r3,-20(fp)
  8121ac:	00bfff84 	movi	r2,-2
  8121b0:	1884703a 	and	r2,r3,r2
  8121b4:	1001703a 	wrctl	status,r2
  
  return context;
  8121b8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8121bc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8121c0:	e0bffc17 	ldw	r2,-16(fp)
  8121c4:	10800117 	ldw	r2,4(r2)
  8121c8:	10c11014 	ori	r3,r2,1088
  8121cc:	e0bffc17 	ldw	r2,-16(fp)
  8121d0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8121d4:	e0bffc17 	ldw	r2,-16(fp)
  8121d8:	10800017 	ldw	r2,0(r2)
  8121dc:	10800304 	addi	r2,r2,12
  8121e0:	e0fffc17 	ldw	r3,-16(fp)
  8121e4:	18c00117 	ldw	r3,4(r3)
  8121e8:	10c00035 	stwio	r3,0(r2)
  8121ec:	e0bff817 	ldw	r2,-32(fp)
  8121f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121f4:	e0bffa17 	ldw	r2,-24(fp)
  8121f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8121fc:	e0fffe17 	ldw	r3,-8(fp)
  812200:	e0bff417 	ldw	r2,-48(fp)
  812204:	1885c83a 	sub	r2,r3,r2
}
  812208:	e037883a 	mov	sp,fp
  81220c:	dfc00117 	ldw	ra,4(sp)
  812210:	df000017 	ldw	fp,0(sp)
  812214:	dec00204 	addi	sp,sp,8
  812218:	f800283a 	ret

0081221c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81221c:	defffe04 	addi	sp,sp,-8
  812220:	df000115 	stw	fp,4(sp)
  812224:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812228:	e03fff15 	stw	zero,-4(fp)
  81222c:	00000506 	br	812244 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812230:	e0bfff17 	ldw	r2,-4(fp)
  812234:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812238:	e0bfff17 	ldw	r2,-4(fp)
  81223c:	10800804 	addi	r2,r2,32
  812240:	e0bfff15 	stw	r2,-4(fp)
  812244:	e0bfff17 	ldw	r2,-4(fp)
  812248:	10820030 	cmpltui	r2,r2,2048
  81224c:	103ff81e 	bne	r2,zero,812230 <__alt_mem_onchip_mem+0xff792230>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812250:	0001883a 	nop
  812254:	e037883a 	mov	sp,fp
  812258:	df000017 	ldw	fp,0(sp)
  81225c:	dec00104 	addi	sp,sp,4
  812260:	f800283a 	ret

00812264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812264:	defffe04 	addi	sp,sp,-8
  812268:	dfc00115 	stw	ra,4(sp)
  81226c:	df000015 	stw	fp,0(sp)
  812270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812274:	d0a00b17 	ldw	r2,-32724(gp)
  812278:	10000326 	beq	r2,zero,812288 <alt_get_errno+0x24>
  81227c:	d0a00b17 	ldw	r2,-32724(gp)
  812280:	103ee83a 	callr	r2
  812284:	00000106 	br	81228c <alt_get_errno+0x28>
  812288:	d0a7a004 	addi	r2,gp,-24960
}
  81228c:	e037883a 	mov	sp,fp
  812290:	dfc00117 	ldw	ra,4(sp)
  812294:	df000017 	ldw	fp,0(sp)
  812298:	dec00204 	addi	sp,sp,8
  81229c:	f800283a 	ret

008122a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8122a0:	defffa04 	addi	sp,sp,-24
  8122a4:	dfc00515 	stw	ra,20(sp)
  8122a8:	df000415 	stw	fp,16(sp)
  8122ac:	df000404 	addi	fp,sp,16
  8122b0:	e13ffe15 	stw	r4,-8(fp)
  8122b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8122b8:	e0bffe17 	ldw	r2,-8(fp)
  8122bc:	10000326 	beq	r2,zero,8122cc <alt_dev_llist_insert+0x2c>
  8122c0:	e0bffe17 	ldw	r2,-8(fp)
  8122c4:	10800217 	ldw	r2,8(r2)
  8122c8:	1000061e 	bne	r2,zero,8122e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8122cc:	08122640 	call	812264 <alt_get_errno>
  8122d0:	1007883a 	mov	r3,r2
  8122d4:	00800584 	movi	r2,22
  8122d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8122dc:	00bffa84 	movi	r2,-22
  8122e0:	00001306 	br	812330 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8122e4:	e0bffe17 	ldw	r2,-8(fp)
  8122e8:	e0ffff17 	ldw	r3,-4(fp)
  8122ec:	e0fffc15 	stw	r3,-16(fp)
  8122f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8122f4:	e0bffd17 	ldw	r2,-12(fp)
  8122f8:	e0fffc17 	ldw	r3,-16(fp)
  8122fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812300:	e0bffc17 	ldw	r2,-16(fp)
  812304:	10c00017 	ldw	r3,0(r2)
  812308:	e0bffd17 	ldw	r2,-12(fp)
  81230c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812310:	e0bffc17 	ldw	r2,-16(fp)
  812314:	10800017 	ldw	r2,0(r2)
  812318:	e0fffd17 	ldw	r3,-12(fp)
  81231c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812320:	e0bffc17 	ldw	r2,-16(fp)
  812324:	e0fffd17 	ldw	r3,-12(fp)
  812328:	10c00015 	stw	r3,0(r2)

  return 0;  
  81232c:	0005883a 	mov	r2,zero
}
  812330:	e037883a 	mov	sp,fp
  812334:	dfc00117 	ldw	ra,4(sp)
  812338:	df000017 	ldw	fp,0(sp)
  81233c:	dec00204 	addi	sp,sp,8
  812340:	f800283a 	ret

00812344 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812344:	defffd04 	addi	sp,sp,-12
  812348:	dfc00215 	stw	ra,8(sp)
  81234c:	df000115 	stw	fp,4(sp)
  812350:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812354:	00802074 	movhi	r2,129
  812358:	108cc404 	addi	r2,r2,13072
  81235c:	e0bfff15 	stw	r2,-4(fp)
  812360:	00000606 	br	81237c <_do_ctors+0x38>
        (*ctor) (); 
  812364:	e0bfff17 	ldw	r2,-4(fp)
  812368:	10800017 	ldw	r2,0(r2)
  81236c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812370:	e0bfff17 	ldw	r2,-4(fp)
  812374:	10bfff04 	addi	r2,r2,-4
  812378:	e0bfff15 	stw	r2,-4(fp)
  81237c:	e0ffff17 	ldw	r3,-4(fp)
  812380:	00802074 	movhi	r2,129
  812384:	108cc504 	addi	r2,r2,13076
  812388:	18bff62e 	bgeu	r3,r2,812364 <__alt_mem_onchip_mem+0xff792364>
        (*ctor) (); 
}
  81238c:	0001883a 	nop
  812390:	e037883a 	mov	sp,fp
  812394:	dfc00117 	ldw	ra,4(sp)
  812398:	df000017 	ldw	fp,0(sp)
  81239c:	dec00204 	addi	sp,sp,8
  8123a0:	f800283a 	ret

008123a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8123a4:	defffd04 	addi	sp,sp,-12
  8123a8:	dfc00215 	stw	ra,8(sp)
  8123ac:	df000115 	stw	fp,4(sp)
  8123b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8123b4:	00802074 	movhi	r2,129
  8123b8:	108cc404 	addi	r2,r2,13072
  8123bc:	e0bfff15 	stw	r2,-4(fp)
  8123c0:	00000606 	br	8123dc <_do_dtors+0x38>
        (*dtor) (); 
  8123c4:	e0bfff17 	ldw	r2,-4(fp)
  8123c8:	10800017 	ldw	r2,0(r2)
  8123cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8123d0:	e0bfff17 	ldw	r2,-4(fp)
  8123d4:	10bfff04 	addi	r2,r2,-4
  8123d8:	e0bfff15 	stw	r2,-4(fp)
  8123dc:	e0ffff17 	ldw	r3,-4(fp)
  8123e0:	00802074 	movhi	r2,129
  8123e4:	108cc504 	addi	r2,r2,13076
  8123e8:	18bff62e 	bgeu	r3,r2,8123c4 <__alt_mem_onchip_mem+0xff7923c4>
        (*dtor) (); 
}
  8123ec:	0001883a 	nop
  8123f0:	e037883a 	mov	sp,fp
  8123f4:	dfc00117 	ldw	ra,4(sp)
  8123f8:	df000017 	ldw	fp,0(sp)
  8123fc:	dec00204 	addi	sp,sp,8
  812400:	f800283a 	ret

00812404 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  812404:	defffe04 	addi	sp,sp,-8
  812408:	dfc00115 	stw	ra,4(sp)
  81240c:	df000015 	stw	fp,0(sp)
  812410:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  812414:	01440004 	movi	r5,4096
  812418:	0009883a 	mov	r4,zero
  81241c:	0812e540 	call	812e54 <alt_icache_flush>
#endif
}
  812420:	0001883a 	nop
  812424:	e037883a 	mov	sp,fp
  812428:	dfc00117 	ldw	ra,4(sp)
  81242c:	df000017 	ldw	fp,0(sp)
  812430:	dec00204 	addi	sp,sp,8
  812434:	f800283a 	ret

00812438 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812438:	defff904 	addi	sp,sp,-28
  81243c:	dfc00615 	stw	ra,24(sp)
  812440:	df000515 	stw	fp,20(sp)
  812444:	df000504 	addi	fp,sp,20
  812448:	e13ffc15 	stw	r4,-16(fp)
  81244c:	e17ffd15 	stw	r5,-12(fp)
  812450:	e1bffe15 	stw	r6,-8(fp)
  812454:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812458:	e0800217 	ldw	r2,8(fp)
  81245c:	d8800015 	stw	r2,0(sp)
  812460:	e1ffff17 	ldw	r7,-4(fp)
  812464:	e1bffe17 	ldw	r6,-8(fp)
  812468:	e17ffd17 	ldw	r5,-12(fp)
  81246c:	e13ffc17 	ldw	r4,-16(fp)
  812470:	08125e80 	call	8125e8 <alt_iic_isr_register>
}  
  812474:	e037883a 	mov	sp,fp
  812478:	dfc00117 	ldw	ra,4(sp)
  81247c:	df000017 	ldw	fp,0(sp)
  812480:	dec00204 	addi	sp,sp,8
  812484:	f800283a 	ret

00812488 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812488:	defff904 	addi	sp,sp,-28
  81248c:	df000615 	stw	fp,24(sp)
  812490:	df000604 	addi	fp,sp,24
  812494:	e13ffe15 	stw	r4,-8(fp)
  812498:	e17fff15 	stw	r5,-4(fp)
  81249c:	e0bfff17 	ldw	r2,-4(fp)
  8124a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8124a4:	0005303a 	rdctl	r2,status
  8124a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8124ac:	e0fffb17 	ldw	r3,-20(fp)
  8124b0:	00bfff84 	movi	r2,-2
  8124b4:	1884703a 	and	r2,r3,r2
  8124b8:	1001703a 	wrctl	status,r2
  
  return context;
  8124bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8124c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8124c4:	00c00044 	movi	r3,1
  8124c8:	e0bffa17 	ldw	r2,-24(fp)
  8124cc:	1884983a 	sll	r2,r3,r2
  8124d0:	1007883a 	mov	r3,r2
  8124d4:	d0a7a617 	ldw	r2,-24936(gp)
  8124d8:	1884b03a 	or	r2,r3,r2
  8124dc:	d0a7a615 	stw	r2,-24936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8124e0:	d0a7a617 	ldw	r2,-24936(gp)
  8124e4:	100170fa 	wrctl	ienable,r2
  8124e8:	e0bffc17 	ldw	r2,-16(fp)
  8124ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124f0:	e0bffd17 	ldw	r2,-12(fp)
  8124f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8124f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8124fc:	0001883a 	nop
}
  812500:	e037883a 	mov	sp,fp
  812504:	df000017 	ldw	fp,0(sp)
  812508:	dec00104 	addi	sp,sp,4
  81250c:	f800283a 	ret

00812510 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812510:	defff904 	addi	sp,sp,-28
  812514:	df000615 	stw	fp,24(sp)
  812518:	df000604 	addi	fp,sp,24
  81251c:	e13ffe15 	stw	r4,-8(fp)
  812520:	e17fff15 	stw	r5,-4(fp)
  812524:	e0bfff17 	ldw	r2,-4(fp)
  812528:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81252c:	0005303a 	rdctl	r2,status
  812530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812534:	e0fffb17 	ldw	r3,-20(fp)
  812538:	00bfff84 	movi	r2,-2
  81253c:	1884703a 	and	r2,r3,r2
  812540:	1001703a 	wrctl	status,r2
  
  return context;
  812544:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812548:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  81254c:	00c00044 	movi	r3,1
  812550:	e0bffa17 	ldw	r2,-24(fp)
  812554:	1884983a 	sll	r2,r3,r2
  812558:	0084303a 	nor	r2,zero,r2
  81255c:	1007883a 	mov	r3,r2
  812560:	d0a7a617 	ldw	r2,-24936(gp)
  812564:	1884703a 	and	r2,r3,r2
  812568:	d0a7a615 	stw	r2,-24936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81256c:	d0a7a617 	ldw	r2,-24936(gp)
  812570:	100170fa 	wrctl	ienable,r2
  812574:	e0bffc17 	ldw	r2,-16(fp)
  812578:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81257c:	e0bffd17 	ldw	r2,-12(fp)
  812580:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812584:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812588:	0001883a 	nop
}
  81258c:	e037883a 	mov	sp,fp
  812590:	df000017 	ldw	fp,0(sp)
  812594:	dec00104 	addi	sp,sp,4
  812598:	f800283a 	ret

0081259c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81259c:	defffc04 	addi	sp,sp,-16
  8125a0:	df000315 	stw	fp,12(sp)
  8125a4:	df000304 	addi	fp,sp,12
  8125a8:	e13ffe15 	stw	r4,-8(fp)
  8125ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8125b0:	000530fa 	rdctl	r2,ienable
  8125b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8125b8:	00c00044 	movi	r3,1
  8125bc:	e0bfff17 	ldw	r2,-4(fp)
  8125c0:	1884983a 	sll	r2,r3,r2
  8125c4:	1007883a 	mov	r3,r2
  8125c8:	e0bffd17 	ldw	r2,-12(fp)
  8125cc:	1884703a 	and	r2,r3,r2
  8125d0:	1004c03a 	cmpne	r2,r2,zero
  8125d4:	10803fcc 	andi	r2,r2,255
}
  8125d8:	e037883a 	mov	sp,fp
  8125dc:	df000017 	ldw	fp,0(sp)
  8125e0:	dec00104 	addi	sp,sp,4
  8125e4:	f800283a 	ret

008125e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8125e8:	defff504 	addi	sp,sp,-44
  8125ec:	dfc00a15 	stw	ra,40(sp)
  8125f0:	df000915 	stw	fp,36(sp)
  8125f4:	df000904 	addi	fp,sp,36
  8125f8:	e13ffc15 	stw	r4,-16(fp)
  8125fc:	e17ffd15 	stw	r5,-12(fp)
  812600:	e1bffe15 	stw	r6,-8(fp)
  812604:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812608:	00bffa84 	movi	r2,-22
  81260c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812610:	e0bffd17 	ldw	r2,-12(fp)
  812614:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812618:	e0bff817 	ldw	r2,-32(fp)
  81261c:	10800808 	cmpgei	r2,r2,32
  812620:	1000271e 	bne	r2,zero,8126c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812624:	0005303a 	rdctl	r2,status
  812628:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81262c:	e0fffb17 	ldw	r3,-20(fp)
  812630:	00bfff84 	movi	r2,-2
  812634:	1884703a 	and	r2,r3,r2
  812638:	1001703a 	wrctl	status,r2
  
  return context;
  81263c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812640:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812644:	00802074 	movhi	r2,129
  812648:	109d3e04 	addi	r2,r2,29944
  81264c:	e0fff817 	ldw	r3,-32(fp)
  812650:	180690fa 	slli	r3,r3,3
  812654:	10c5883a 	add	r2,r2,r3
  812658:	e0fffe17 	ldw	r3,-8(fp)
  81265c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812660:	00802074 	movhi	r2,129
  812664:	109d3e04 	addi	r2,r2,29944
  812668:	e0fff817 	ldw	r3,-32(fp)
  81266c:	180690fa 	slli	r3,r3,3
  812670:	10c5883a 	add	r2,r2,r3
  812674:	10800104 	addi	r2,r2,4
  812678:	e0ffff17 	ldw	r3,-4(fp)
  81267c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812680:	e0bffe17 	ldw	r2,-8(fp)
  812684:	10000526 	beq	r2,zero,81269c <alt_iic_isr_register+0xb4>
  812688:	e0bff817 	ldw	r2,-32(fp)
  81268c:	100b883a 	mov	r5,r2
  812690:	e13ffc17 	ldw	r4,-16(fp)
  812694:	08124880 	call	812488 <alt_ic_irq_enable>
  812698:	00000406 	br	8126ac <alt_iic_isr_register+0xc4>
  81269c:	e0bff817 	ldw	r2,-32(fp)
  8126a0:	100b883a 	mov	r5,r2
  8126a4:	e13ffc17 	ldw	r4,-16(fp)
  8126a8:	08125100 	call	812510 <alt_ic_irq_disable>
  8126ac:	e0bff715 	stw	r2,-36(fp)
  8126b0:	e0bffa17 	ldw	r2,-24(fp)
  8126b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8126b8:	e0bff917 	ldw	r2,-28(fp)
  8126bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8126c0:	e0bff717 	ldw	r2,-36(fp)
}
  8126c4:	e037883a 	mov	sp,fp
  8126c8:	dfc00117 	ldw	ra,4(sp)
  8126cc:	df000017 	ldw	fp,0(sp)
  8126d0:	dec00204 	addi	sp,sp,8
  8126d4:	f800283a 	ret

008126d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8126d8:	defff904 	addi	sp,sp,-28
  8126dc:	dfc00615 	stw	ra,24(sp)
  8126e0:	df000515 	stw	fp,20(sp)
  8126e4:	df000504 	addi	fp,sp,20
  8126e8:	e13ffc15 	stw	r4,-16(fp)
  8126ec:	e17ffd15 	stw	r5,-12(fp)
  8126f0:	e1bffe15 	stw	r6,-8(fp)
  8126f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8126f8:	e1bfff17 	ldw	r6,-4(fp)
  8126fc:	e17ffe17 	ldw	r5,-8(fp)
  812700:	e13ffd17 	ldw	r4,-12(fp)
  812704:	08129180 	call	812918 <open>
  812708:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81270c:	e0bffb17 	ldw	r2,-20(fp)
  812710:	10001c16 	blt	r2,zero,812784 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812714:	00802074 	movhi	r2,129
  812718:	10907704 	addi	r2,r2,16860
  81271c:	e0fffb17 	ldw	r3,-20(fp)
  812720:	18c00324 	muli	r3,r3,12
  812724:	10c5883a 	add	r2,r2,r3
  812728:	10c00017 	ldw	r3,0(r2)
  81272c:	e0bffc17 	ldw	r2,-16(fp)
  812730:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812734:	00802074 	movhi	r2,129
  812738:	10907704 	addi	r2,r2,16860
  81273c:	e0fffb17 	ldw	r3,-20(fp)
  812740:	18c00324 	muli	r3,r3,12
  812744:	10c5883a 	add	r2,r2,r3
  812748:	10800104 	addi	r2,r2,4
  81274c:	10c00017 	ldw	r3,0(r2)
  812750:	e0bffc17 	ldw	r2,-16(fp)
  812754:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812758:	00802074 	movhi	r2,129
  81275c:	10907704 	addi	r2,r2,16860
  812760:	e0fffb17 	ldw	r3,-20(fp)
  812764:	18c00324 	muli	r3,r3,12
  812768:	10c5883a 	add	r2,r2,r3
  81276c:	10800204 	addi	r2,r2,8
  812770:	10c00017 	ldw	r3,0(r2)
  812774:	e0bffc17 	ldw	r2,-16(fp)
  812778:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81277c:	e13ffb17 	ldw	r4,-20(fp)
  812780:	080fa180 	call	80fa18 <alt_release_fd>
  }
} 
  812784:	0001883a 	nop
  812788:	e037883a 	mov	sp,fp
  81278c:	dfc00117 	ldw	ra,4(sp)
  812790:	df000017 	ldw	fp,0(sp)
  812794:	dec00204 	addi	sp,sp,8
  812798:	f800283a 	ret

0081279c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81279c:	defffb04 	addi	sp,sp,-20
  8127a0:	dfc00415 	stw	ra,16(sp)
  8127a4:	df000315 	stw	fp,12(sp)
  8127a8:	df000304 	addi	fp,sp,12
  8127ac:	e13ffd15 	stw	r4,-12(fp)
  8127b0:	e17ffe15 	stw	r5,-8(fp)
  8127b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8127b8:	01c07fc4 	movi	r7,511
  8127bc:	01800044 	movi	r6,1
  8127c0:	e17ffd17 	ldw	r5,-12(fp)
  8127c4:	01002074 	movhi	r4,129
  8127c8:	21107a04 	addi	r4,r4,16872
  8127cc:	08126d80 	call	8126d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8127d0:	01c07fc4 	movi	r7,511
  8127d4:	000d883a 	mov	r6,zero
  8127d8:	e17ffe17 	ldw	r5,-8(fp)
  8127dc:	01002074 	movhi	r4,129
  8127e0:	21107704 	addi	r4,r4,16860
  8127e4:	08126d80 	call	8126d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8127e8:	01c07fc4 	movi	r7,511
  8127ec:	01800044 	movi	r6,1
  8127f0:	e17fff17 	ldw	r5,-4(fp)
  8127f4:	01002074 	movhi	r4,129
  8127f8:	21107d04 	addi	r4,r4,16884
  8127fc:	08126d80 	call	8126d8 <alt_open_fd>
}  
  812800:	0001883a 	nop
  812804:	e037883a 	mov	sp,fp
  812808:	dfc00117 	ldw	ra,4(sp)
  81280c:	df000017 	ldw	fp,0(sp)
  812810:	dec00204 	addi	sp,sp,8
  812814:	f800283a 	ret

00812818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812818:	defffe04 	addi	sp,sp,-8
  81281c:	dfc00115 	stw	ra,4(sp)
  812820:	df000015 	stw	fp,0(sp)
  812824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812828:	d0a00b17 	ldw	r2,-32724(gp)
  81282c:	10000326 	beq	r2,zero,81283c <alt_get_errno+0x24>
  812830:	d0a00b17 	ldw	r2,-32724(gp)
  812834:	103ee83a 	callr	r2
  812838:	00000106 	br	812840 <alt_get_errno+0x28>
  81283c:	d0a7a004 	addi	r2,gp,-24960
}
  812840:	e037883a 	mov	sp,fp
  812844:	dfc00117 	ldw	ra,4(sp)
  812848:	df000017 	ldw	fp,0(sp)
  81284c:	dec00204 	addi	sp,sp,8
  812850:	f800283a 	ret

00812854 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  812854:	defffd04 	addi	sp,sp,-12
  812858:	df000215 	stw	fp,8(sp)
  81285c:	df000204 	addi	fp,sp,8
  812860:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  812864:	e0bfff17 	ldw	r2,-4(fp)
  812868:	10800217 	ldw	r2,8(r2)
  81286c:	10d00034 	orhi	r3,r2,16384
  812870:	e0bfff17 	ldw	r2,-4(fp)
  812874:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  812878:	e03ffe15 	stw	zero,-8(fp)
  81287c:	00001d06 	br	8128f4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  812880:	00802074 	movhi	r2,129
  812884:	10907704 	addi	r2,r2,16860
  812888:	e0fffe17 	ldw	r3,-8(fp)
  81288c:	18c00324 	muli	r3,r3,12
  812890:	10c5883a 	add	r2,r2,r3
  812894:	10c00017 	ldw	r3,0(r2)
  812898:	e0bfff17 	ldw	r2,-4(fp)
  81289c:	10800017 	ldw	r2,0(r2)
  8128a0:	1880111e 	bne	r3,r2,8128e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8128a4:	00802074 	movhi	r2,129
  8128a8:	10907704 	addi	r2,r2,16860
  8128ac:	e0fffe17 	ldw	r3,-8(fp)
  8128b0:	18c00324 	muli	r3,r3,12
  8128b4:	10c5883a 	add	r2,r2,r3
  8128b8:	10800204 	addi	r2,r2,8
  8128bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8128c0:	1000090e 	bge	r2,zero,8128e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8128c4:	e0bffe17 	ldw	r2,-8(fp)
  8128c8:	10c00324 	muli	r3,r2,12
  8128cc:	00802074 	movhi	r2,129
  8128d0:	10907704 	addi	r2,r2,16860
  8128d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8128d8:	e0bfff17 	ldw	r2,-4(fp)
  8128dc:	18800226 	beq	r3,r2,8128e8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8128e0:	00bffcc4 	movi	r2,-13
  8128e4:	00000806 	br	812908 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8128e8:	e0bffe17 	ldw	r2,-8(fp)
  8128ec:	10800044 	addi	r2,r2,1
  8128f0:	e0bffe15 	stw	r2,-8(fp)
  8128f4:	d0a00a17 	ldw	r2,-32728(gp)
  8128f8:	1007883a 	mov	r3,r2
  8128fc:	e0bffe17 	ldw	r2,-8(fp)
  812900:	18bfdf2e 	bgeu	r3,r2,812880 <__alt_mem_onchip_mem+0xff792880>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  812904:	0005883a 	mov	r2,zero
}
  812908:	e037883a 	mov	sp,fp
  81290c:	df000017 	ldw	fp,0(sp)
  812910:	dec00104 	addi	sp,sp,4
  812914:	f800283a 	ret

00812918 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  812918:	defff604 	addi	sp,sp,-40
  81291c:	dfc00915 	stw	ra,36(sp)
  812920:	df000815 	stw	fp,32(sp)
  812924:	df000804 	addi	fp,sp,32
  812928:	e13ffd15 	stw	r4,-12(fp)
  81292c:	e17ffe15 	stw	r5,-8(fp)
  812930:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  812934:	00bfffc4 	movi	r2,-1
  812938:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  81293c:	00bffb44 	movi	r2,-19
  812940:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  812944:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  812948:	d1600804 	addi	r5,gp,-32736
  81294c:	e13ffd17 	ldw	r4,-12(fp)
  812950:	0812c180 	call	812c18 <alt_find_dev>
  812954:	e0bff815 	stw	r2,-32(fp)
  812958:	e0bff817 	ldw	r2,-32(fp)
  81295c:	1000051e 	bne	r2,zero,812974 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  812960:	e13ffd17 	ldw	r4,-12(fp)
  812964:	0812ca80 	call	812ca8 <alt_find_file>
  812968:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  81296c:	00800044 	movi	r2,1
  812970:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  812974:	e0bff817 	ldw	r2,-32(fp)
  812978:	10002926 	beq	r2,zero,812a20 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  81297c:	e13ff817 	ldw	r4,-32(fp)
  812980:	0812db00 	call	812db0 <alt_get_fd>
  812984:	e0bff915 	stw	r2,-28(fp)
  812988:	e0bff917 	ldw	r2,-28(fp)
  81298c:	1000030e 	bge	r2,zero,81299c <open+0x84>
    {
      status = index;
  812990:	e0bff917 	ldw	r2,-28(fp)
  812994:	e0bffa15 	stw	r2,-24(fp)
  812998:	00002306 	br	812a28 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  81299c:	e0bff917 	ldw	r2,-28(fp)
  8129a0:	10c00324 	muli	r3,r2,12
  8129a4:	00802074 	movhi	r2,129
  8129a8:	10907704 	addi	r2,r2,16860
  8129ac:	1885883a 	add	r2,r3,r2
  8129b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8129b4:	e0fffe17 	ldw	r3,-8(fp)
  8129b8:	00900034 	movhi	r2,16384
  8129bc:	10bfffc4 	addi	r2,r2,-1
  8129c0:	1886703a 	and	r3,r3,r2
  8129c4:	e0bffc17 	ldw	r2,-16(fp)
  8129c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8129cc:	e0bffb17 	ldw	r2,-20(fp)
  8129d0:	1000051e 	bne	r2,zero,8129e8 <open+0xd0>
  8129d4:	e13ffc17 	ldw	r4,-16(fp)
  8129d8:	08128540 	call	812854 <alt_file_locked>
  8129dc:	e0bffa15 	stw	r2,-24(fp)
  8129e0:	e0bffa17 	ldw	r2,-24(fp)
  8129e4:	10001016 	blt	r2,zero,812a28 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8129e8:	e0bff817 	ldw	r2,-32(fp)
  8129ec:	10800317 	ldw	r2,12(r2)
  8129f0:	10000826 	beq	r2,zero,812a14 <open+0xfc>
  8129f4:	e0bff817 	ldw	r2,-32(fp)
  8129f8:	10800317 	ldw	r2,12(r2)
  8129fc:	e1ffff17 	ldw	r7,-4(fp)
  812a00:	e1bffe17 	ldw	r6,-8(fp)
  812a04:	e17ffd17 	ldw	r5,-12(fp)
  812a08:	e13ffc17 	ldw	r4,-16(fp)
  812a0c:	103ee83a 	callr	r2
  812a10:	00000106 	br	812a18 <open+0x100>
  812a14:	0005883a 	mov	r2,zero
  812a18:	e0bffa15 	stw	r2,-24(fp)
  812a1c:	00000206 	br	812a28 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  812a20:	00bffb44 	movi	r2,-19
  812a24:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  812a28:	e0bffa17 	ldw	r2,-24(fp)
  812a2c:	1000090e 	bge	r2,zero,812a54 <open+0x13c>
  {
    alt_release_fd (index);  
  812a30:	e13ff917 	ldw	r4,-28(fp)
  812a34:	080fa180 	call	80fa18 <alt_release_fd>
    ALT_ERRNO = -status;
  812a38:	08128180 	call	812818 <alt_get_errno>
  812a3c:	1007883a 	mov	r3,r2
  812a40:	e0bffa17 	ldw	r2,-24(fp)
  812a44:	0085c83a 	sub	r2,zero,r2
  812a48:	18800015 	stw	r2,0(r3)
    return -1;
  812a4c:	00bfffc4 	movi	r2,-1
  812a50:	00000106 	br	812a58 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  812a54:	e0bff917 	ldw	r2,-28(fp)
}
  812a58:	e037883a 	mov	sp,fp
  812a5c:	dfc00117 	ldw	ra,4(sp)
  812a60:	df000017 	ldw	fp,0(sp)
  812a64:	dec00204 	addi	sp,sp,8
  812a68:	f800283a 	ret

00812a6c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812a6c:	defffd04 	addi	sp,sp,-12
  812a70:	dfc00215 	stw	ra,8(sp)
  812a74:	df000115 	stw	fp,4(sp)
  812a78:	df000104 	addi	fp,sp,4
  812a7c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812a80:	e13fff17 	ldw	r4,-4(fp)
  812a84:	0812ac00 	call	812ac0 <alt_busy_sleep>
}
  812a88:	e037883a 	mov	sp,fp
  812a8c:	dfc00117 	ldw	ra,4(sp)
  812a90:	df000017 	ldw	fp,0(sp)
  812a94:	dec00204 	addi	sp,sp,8
  812a98:	f800283a 	ret

00812a9c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812a9c:	deffff04 	addi	sp,sp,-4
  812aa0:	df000015 	stw	fp,0(sp)
  812aa4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812aa8:	000170fa 	wrctl	ienable,zero
}
  812aac:	0001883a 	nop
  812ab0:	e037883a 	mov	sp,fp
  812ab4:	df000017 	ldw	fp,0(sp)
  812ab8:	dec00104 	addi	sp,sp,4
  812abc:	f800283a 	ret

00812ac0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812ac0:	defffa04 	addi	sp,sp,-24
  812ac4:	dfc00515 	stw	ra,20(sp)
  812ac8:	df000415 	stw	fp,16(sp)
  812acc:	df000404 	addi	fp,sp,16
  812ad0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812ad4:	008000c4 	movi	r2,3
  812ad8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812adc:	e0fffd17 	ldw	r3,-12(fp)
  812ae0:	008003f4 	movhi	r2,15
  812ae4:	10909004 	addi	r2,r2,16960
  812ae8:	1885383a 	mul	r2,r3,r2
  812aec:	100b883a 	mov	r5,r2
  812af0:	0100bef4 	movhi	r4,763
  812af4:	213c2004 	addi	r4,r4,-3968
  812af8:	080cacc0 	call	80cacc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812afc:	100b883a 	mov	r5,r2
  812b00:	01200034 	movhi	r4,32768
  812b04:	213fffc4 	addi	r4,r4,-1
  812b08:	080cacc0 	call	80cacc <__udivsi3>
  812b0c:	100b883a 	mov	r5,r2
  812b10:	e13fff17 	ldw	r4,-4(fp)
  812b14:	080cacc0 	call	80cacc <__udivsi3>
  812b18:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812b1c:	e0bffe17 	ldw	r2,-8(fp)
  812b20:	10002a26 	beq	r2,zero,812bcc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  812b24:	e03ffc15 	stw	zero,-16(fp)
  812b28:	00001706 	br	812b88 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  812b2c:	00a00034 	movhi	r2,32768
  812b30:	10bfffc4 	addi	r2,r2,-1
  812b34:	10bfffc4 	addi	r2,r2,-1
  812b38:	103ffe1e 	bne	r2,zero,812b34 <__alt_mem_onchip_mem+0xff792b34>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  812b3c:	e0fffd17 	ldw	r3,-12(fp)
  812b40:	008003f4 	movhi	r2,15
  812b44:	10909004 	addi	r2,r2,16960
  812b48:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812b4c:	100b883a 	mov	r5,r2
  812b50:	0100bef4 	movhi	r4,763
  812b54:	213c2004 	addi	r4,r4,-3968
  812b58:	080cacc0 	call	80cacc <__udivsi3>
  812b5c:	100b883a 	mov	r5,r2
  812b60:	01200034 	movhi	r4,32768
  812b64:	213fffc4 	addi	r4,r4,-1
  812b68:	080cacc0 	call	80cacc <__udivsi3>
  812b6c:	1007883a 	mov	r3,r2
  812b70:	e0bfff17 	ldw	r2,-4(fp)
  812b74:	10c5c83a 	sub	r2,r2,r3
  812b78:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812b7c:	e0bffc17 	ldw	r2,-16(fp)
  812b80:	10800044 	addi	r2,r2,1
  812b84:	e0bffc15 	stw	r2,-16(fp)
  812b88:	e0fffc17 	ldw	r3,-16(fp)
  812b8c:	e0bffe17 	ldw	r2,-8(fp)
  812b90:	18bfe616 	blt	r3,r2,812b2c <__alt_mem_onchip_mem+0xff792b2c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812b94:	e0fffd17 	ldw	r3,-12(fp)
  812b98:	008003f4 	movhi	r2,15
  812b9c:	10909004 	addi	r2,r2,16960
  812ba0:	1885383a 	mul	r2,r3,r2
  812ba4:	100b883a 	mov	r5,r2
  812ba8:	0100bef4 	movhi	r4,763
  812bac:	213c2004 	addi	r4,r4,-3968
  812bb0:	080cacc0 	call	80cacc <__udivsi3>
  812bb4:	1007883a 	mov	r3,r2
  812bb8:	e0bfff17 	ldw	r2,-4(fp)
  812bbc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812bc0:	10bfffc4 	addi	r2,r2,-1
  812bc4:	103ffe1e 	bne	r2,zero,812bc0 <__alt_mem_onchip_mem+0xff792bc0>
  812bc8:	00000d06 	br	812c00 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812bcc:	e0fffd17 	ldw	r3,-12(fp)
  812bd0:	008003f4 	movhi	r2,15
  812bd4:	10909004 	addi	r2,r2,16960
  812bd8:	1885383a 	mul	r2,r3,r2
  812bdc:	100b883a 	mov	r5,r2
  812be0:	0100bef4 	movhi	r4,763
  812be4:	213c2004 	addi	r4,r4,-3968
  812be8:	080cacc0 	call	80cacc <__udivsi3>
  812bec:	1007883a 	mov	r3,r2
  812bf0:	e0bfff17 	ldw	r2,-4(fp)
  812bf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812bf8:	10bfffc4 	addi	r2,r2,-1
  812bfc:	00bffe16 	blt	zero,r2,812bf8 <__alt_mem_onchip_mem+0xff792bf8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812c00:	0005883a 	mov	r2,zero
}
  812c04:	e037883a 	mov	sp,fp
  812c08:	dfc00117 	ldw	ra,4(sp)
  812c0c:	df000017 	ldw	fp,0(sp)
  812c10:	dec00204 	addi	sp,sp,8
  812c14:	f800283a 	ret

00812c18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812c18:	defffa04 	addi	sp,sp,-24
  812c1c:	dfc00515 	stw	ra,20(sp)
  812c20:	df000415 	stw	fp,16(sp)
  812c24:	df000404 	addi	fp,sp,16
  812c28:	e13ffe15 	stw	r4,-8(fp)
  812c2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812c30:	e0bfff17 	ldw	r2,-4(fp)
  812c34:	10800017 	ldw	r2,0(r2)
  812c38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812c3c:	e13ffe17 	ldw	r4,-8(fp)
  812c40:	08093940 	call	809394 <strlen>
  812c44:	10800044 	addi	r2,r2,1
  812c48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812c4c:	00000d06 	br	812c84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812c50:	e0bffc17 	ldw	r2,-16(fp)
  812c54:	10800217 	ldw	r2,8(r2)
  812c58:	e0fffd17 	ldw	r3,-12(fp)
  812c5c:	180d883a 	mov	r6,r3
  812c60:	e17ffe17 	ldw	r5,-8(fp)
  812c64:	1009883a 	mov	r4,r2
  812c68:	0812fcc0 	call	812fcc <memcmp>
  812c6c:	1000021e 	bne	r2,zero,812c78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812c70:	e0bffc17 	ldw	r2,-16(fp)
  812c74:	00000706 	br	812c94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812c78:	e0bffc17 	ldw	r2,-16(fp)
  812c7c:	10800017 	ldw	r2,0(r2)
  812c80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812c84:	e0fffc17 	ldw	r3,-16(fp)
  812c88:	e0bfff17 	ldw	r2,-4(fp)
  812c8c:	18bff01e 	bne	r3,r2,812c50 <__alt_mem_onchip_mem+0xff792c50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812c90:	0005883a 	mov	r2,zero
}
  812c94:	e037883a 	mov	sp,fp
  812c98:	dfc00117 	ldw	ra,4(sp)
  812c9c:	df000017 	ldw	fp,0(sp)
  812ca0:	dec00204 	addi	sp,sp,8
  812ca4:	f800283a 	ret

00812ca8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  812ca8:	defffb04 	addi	sp,sp,-20
  812cac:	dfc00415 	stw	ra,16(sp)
  812cb0:	df000315 	stw	fp,12(sp)
  812cb4:	df000304 	addi	fp,sp,12
  812cb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  812cbc:	d0a00617 	ldw	r2,-32744(gp)
  812cc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812cc4:	00003106 	br	812d8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  812cc8:	e0bffd17 	ldw	r2,-12(fp)
  812ccc:	10800217 	ldw	r2,8(r2)
  812cd0:	1009883a 	mov	r4,r2
  812cd4:	08093940 	call	809394 <strlen>
  812cd8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  812cdc:	e0bffd17 	ldw	r2,-12(fp)
  812ce0:	10c00217 	ldw	r3,8(r2)
  812ce4:	e0bffe17 	ldw	r2,-8(fp)
  812ce8:	10bfffc4 	addi	r2,r2,-1
  812cec:	1885883a 	add	r2,r3,r2
  812cf0:	10800003 	ldbu	r2,0(r2)
  812cf4:	10803fcc 	andi	r2,r2,255
  812cf8:	1080201c 	xori	r2,r2,128
  812cfc:	10bfe004 	addi	r2,r2,-128
  812d00:	10800bd8 	cmpnei	r2,r2,47
  812d04:	1000031e 	bne	r2,zero,812d14 <alt_find_file+0x6c>
    {
      len -= 1;
  812d08:	e0bffe17 	ldw	r2,-8(fp)
  812d0c:	10bfffc4 	addi	r2,r2,-1
  812d10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812d14:	e0bffe17 	ldw	r2,-8(fp)
  812d18:	e0ffff17 	ldw	r3,-4(fp)
  812d1c:	1885883a 	add	r2,r3,r2
  812d20:	10800003 	ldbu	r2,0(r2)
  812d24:	10803fcc 	andi	r2,r2,255
  812d28:	1080201c 	xori	r2,r2,128
  812d2c:	10bfe004 	addi	r2,r2,-128
  812d30:	10800be0 	cmpeqi	r2,r2,47
  812d34:	1000081e 	bne	r2,zero,812d58 <alt_find_file+0xb0>
  812d38:	e0bffe17 	ldw	r2,-8(fp)
  812d3c:	e0ffff17 	ldw	r3,-4(fp)
  812d40:	1885883a 	add	r2,r3,r2
  812d44:	10800003 	ldbu	r2,0(r2)
  812d48:	10803fcc 	andi	r2,r2,255
  812d4c:	1080201c 	xori	r2,r2,128
  812d50:	10bfe004 	addi	r2,r2,-128
  812d54:	10000a1e 	bne	r2,zero,812d80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  812d58:	e0bffd17 	ldw	r2,-12(fp)
  812d5c:	10800217 	ldw	r2,8(r2)
  812d60:	e0fffe17 	ldw	r3,-8(fp)
  812d64:	180d883a 	mov	r6,r3
  812d68:	e17fff17 	ldw	r5,-4(fp)
  812d6c:	1009883a 	mov	r4,r2
  812d70:	0812fcc0 	call	812fcc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  812d74:	1000021e 	bne	r2,zero,812d80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  812d78:	e0bffd17 	ldw	r2,-12(fp)
  812d7c:	00000706 	br	812d9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  812d80:	e0bffd17 	ldw	r2,-12(fp)
  812d84:	10800017 	ldw	r2,0(r2)
  812d88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  812d8c:	e0fffd17 	ldw	r3,-12(fp)
  812d90:	d0a00604 	addi	r2,gp,-32744
  812d94:	18bfcc1e 	bne	r3,r2,812cc8 <__alt_mem_onchip_mem+0xff792cc8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  812d98:	0005883a 	mov	r2,zero
}
  812d9c:	e037883a 	mov	sp,fp
  812da0:	dfc00117 	ldw	ra,4(sp)
  812da4:	df000017 	ldw	fp,0(sp)
  812da8:	dec00204 	addi	sp,sp,8
  812dac:	f800283a 	ret

00812db0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  812db0:	defffc04 	addi	sp,sp,-16
  812db4:	df000315 	stw	fp,12(sp)
  812db8:	df000304 	addi	fp,sp,12
  812dbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  812dc0:	00bffa04 	movi	r2,-24
  812dc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812dc8:	e03ffd15 	stw	zero,-12(fp)
  812dcc:	00001906 	br	812e34 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  812dd0:	00802074 	movhi	r2,129
  812dd4:	10907704 	addi	r2,r2,16860
  812dd8:	e0fffd17 	ldw	r3,-12(fp)
  812ddc:	18c00324 	muli	r3,r3,12
  812de0:	10c5883a 	add	r2,r2,r3
  812de4:	10800017 	ldw	r2,0(r2)
  812de8:	10000f1e 	bne	r2,zero,812e28 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  812dec:	00802074 	movhi	r2,129
  812df0:	10907704 	addi	r2,r2,16860
  812df4:	e0fffd17 	ldw	r3,-12(fp)
  812df8:	18c00324 	muli	r3,r3,12
  812dfc:	10c5883a 	add	r2,r2,r3
  812e00:	e0ffff17 	ldw	r3,-4(fp)
  812e04:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  812e08:	d0e00a17 	ldw	r3,-32728(gp)
  812e0c:	e0bffd17 	ldw	r2,-12(fp)
  812e10:	1880020e 	bge	r3,r2,812e1c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  812e14:	e0bffd17 	ldw	r2,-12(fp)
  812e18:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  812e1c:	e0bffd17 	ldw	r2,-12(fp)
  812e20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  812e24:	00000606 	br	812e40 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  812e28:	e0bffd17 	ldw	r2,-12(fp)
  812e2c:	10800044 	addi	r2,r2,1
  812e30:	e0bffd15 	stw	r2,-12(fp)
  812e34:	e0bffd17 	ldw	r2,-12(fp)
  812e38:	10800810 	cmplti	r2,r2,32
  812e3c:	103fe41e 	bne	r2,zero,812dd0 <__alt_mem_onchip_mem+0xff792dd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  812e40:	e0bffe17 	ldw	r2,-8(fp)
}
  812e44:	e037883a 	mov	sp,fp
  812e48:	df000017 	ldw	fp,0(sp)
  812e4c:	dec00104 	addi	sp,sp,4
  812e50:	f800283a 	ret

00812e54 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  812e54:	defffb04 	addi	sp,sp,-20
  812e58:	df000415 	stw	fp,16(sp)
  812e5c:	df000404 	addi	fp,sp,16
  812e60:	e13ffe15 	stw	r4,-8(fp)
  812e64:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  812e68:	e0bfff17 	ldw	r2,-4(fp)
  812e6c:	10840070 	cmpltui	r2,r2,4097
  812e70:	1000021e 	bne	r2,zero,812e7c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  812e74:	00840004 	movi	r2,4096
  812e78:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  812e7c:	e0fffe17 	ldw	r3,-8(fp)
  812e80:	e0bfff17 	ldw	r2,-4(fp)
  812e84:	1885883a 	add	r2,r3,r2
  812e88:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812e8c:	e0bffe17 	ldw	r2,-8(fp)
  812e90:	e0bffc15 	stw	r2,-16(fp)
  812e94:	00000506 	br	812eac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812ea0:	e0bffc17 	ldw	r2,-16(fp)
  812ea4:	10800804 	addi	r2,r2,32
  812ea8:	e0bffc15 	stw	r2,-16(fp)
  812eac:	e0fffc17 	ldw	r3,-16(fp)
  812eb0:	e0bffd17 	ldw	r2,-12(fp)
  812eb4:	18bff836 	bltu	r3,r2,812e98 <__alt_mem_onchip_mem+0xff792e98>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812eb8:	e0bffe17 	ldw	r2,-8(fp)
  812ebc:	108007cc 	andi	r2,r2,31
  812ec0:	10000226 	beq	r2,zero,812ecc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812ec4:	e0bffc17 	ldw	r2,-16(fp)
  812ec8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812ecc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812ed0:	0001883a 	nop
  812ed4:	e037883a 	mov	sp,fp
  812ed8:	df000017 	ldw	fp,0(sp)
  812edc:	dec00104 	addi	sp,sp,4
  812ee0:	f800283a 	ret

00812ee4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  812ee4:	defffe04 	addi	sp,sp,-8
  812ee8:	df000115 	stw	fp,4(sp)
  812eec:	df000104 	addi	fp,sp,4
  812ef0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  812ef4:	e0bfff17 	ldw	r2,-4(fp)
  812ef8:	10bffe84 	addi	r2,r2,-6
  812efc:	10c00428 	cmpgeui	r3,r2,16
  812f00:	18001a1e 	bne	r3,zero,812f6c <alt_exception_cause_generated_bad_addr+0x88>
  812f04:	100690ba 	slli	r3,r2,2
  812f08:	00802074 	movhi	r2,129
  812f0c:	108bc704 	addi	r2,r2,12060
  812f10:	1885883a 	add	r2,r3,r2
  812f14:	10800017 	ldw	r2,0(r2)
  812f18:	1000683a 	jmp	r2
  812f1c:	00812f5c 	xori	r2,zero,1213
  812f20:	00812f5c 	xori	r2,zero,1213
  812f24:	00812f6c 	andhi	r2,zero,1213
  812f28:	00812f6c 	andhi	r2,zero,1213
  812f2c:	00812f6c 	andhi	r2,zero,1213
  812f30:	00812f5c 	xori	r2,zero,1213
  812f34:	00812f64 	muli	r2,zero,1213
  812f38:	00812f6c 	andhi	r2,zero,1213
  812f3c:	00812f5c 	xori	r2,zero,1213
  812f40:	00812f5c 	xori	r2,zero,1213
  812f44:	00812f6c 	andhi	r2,zero,1213
  812f48:	00812f5c 	xori	r2,zero,1213
  812f4c:	00812f64 	muli	r2,zero,1213
  812f50:	00812f6c 	andhi	r2,zero,1213
  812f54:	00812f6c 	andhi	r2,zero,1213
  812f58:	00812f5c 	xori	r2,zero,1213
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812f5c:	00800044 	movi	r2,1
  812f60:	00000306 	br	812f70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  812f64:	0005883a 	mov	r2,zero
  812f68:	00000106 	br	812f70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  812f6c:	0005883a 	mov	r2,zero
  }
}
  812f70:	e037883a 	mov	sp,fp
  812f74:	df000017 	ldw	fp,0(sp)
  812f78:	dec00104 	addi	sp,sp,4
  812f7c:	f800283a 	ret

00812f80 <atexit>:
  812f80:	200b883a 	mov	r5,r4
  812f84:	000f883a 	mov	r7,zero
  812f88:	000d883a 	mov	r6,zero
  812f8c:	0009883a 	mov	r4,zero
  812f90:	08130481 	jmpi	813048 <__register_exitproc>

00812f94 <exit>:
  812f94:	defffe04 	addi	sp,sp,-8
  812f98:	000b883a 	mov	r5,zero
  812f9c:	dc000015 	stw	r16,0(sp)
  812fa0:	dfc00115 	stw	ra,4(sp)
  812fa4:	2021883a 	mov	r16,r4
  812fa8:	08131600 	call	813160 <__call_exitprocs>
  812fac:	00802074 	movhi	r2,129
  812fb0:	10956804 	addi	r2,r2,21920
  812fb4:	11000017 	ldw	r4,0(r2)
  812fb8:	20800f17 	ldw	r2,60(r4)
  812fbc:	10000126 	beq	r2,zero,812fc4 <exit+0x30>
  812fc0:	103ee83a 	callr	r2
  812fc4:	8009883a 	mov	r4,r16
  812fc8:	08132e00 	call	8132e0 <_exit>

00812fcc <memcmp>:
  812fcc:	01c000c4 	movi	r7,3
  812fd0:	3980192e 	bgeu	r7,r6,813038 <memcmp+0x6c>
  812fd4:	2144b03a 	or	r2,r4,r5
  812fd8:	11c4703a 	and	r2,r2,r7
  812fdc:	10000f26 	beq	r2,zero,81301c <memcmp+0x50>
  812fe0:	20800003 	ldbu	r2,0(r4)
  812fe4:	28c00003 	ldbu	r3,0(r5)
  812fe8:	10c0151e 	bne	r2,r3,813040 <memcmp+0x74>
  812fec:	31bfff84 	addi	r6,r6,-2
  812ff0:	01ffffc4 	movi	r7,-1
  812ff4:	00000406 	br	813008 <memcmp+0x3c>
  812ff8:	20800003 	ldbu	r2,0(r4)
  812ffc:	28c00003 	ldbu	r3,0(r5)
  813000:	31bfffc4 	addi	r6,r6,-1
  813004:	10c00e1e 	bne	r2,r3,813040 <memcmp+0x74>
  813008:	21000044 	addi	r4,r4,1
  81300c:	29400044 	addi	r5,r5,1
  813010:	31fff91e 	bne	r6,r7,812ff8 <__alt_mem_onchip_mem+0xff792ff8>
  813014:	0005883a 	mov	r2,zero
  813018:	f800283a 	ret
  81301c:	20c00017 	ldw	r3,0(r4)
  813020:	28800017 	ldw	r2,0(r5)
  813024:	18bfee1e 	bne	r3,r2,812fe0 <__alt_mem_onchip_mem+0xff792fe0>
  813028:	31bfff04 	addi	r6,r6,-4
  81302c:	21000104 	addi	r4,r4,4
  813030:	29400104 	addi	r5,r5,4
  813034:	39bff936 	bltu	r7,r6,81301c <__alt_mem_onchip_mem+0xff79301c>
  813038:	303fe91e 	bne	r6,zero,812fe0 <__alt_mem_onchip_mem+0xff792fe0>
  81303c:	003ff506 	br	813014 <__alt_mem_onchip_mem+0xff793014>
  813040:	10c5c83a 	sub	r2,r2,r3
  813044:	f800283a 	ret

00813048 <__register_exitproc>:
  813048:	defffa04 	addi	sp,sp,-24
  81304c:	dc000315 	stw	r16,12(sp)
  813050:	04002074 	movhi	r16,129
  813054:	84156804 	addi	r16,r16,21920
  813058:	80c00017 	ldw	r3,0(r16)
  81305c:	dc400415 	stw	r17,16(sp)
  813060:	dfc00515 	stw	ra,20(sp)
  813064:	18805217 	ldw	r2,328(r3)
  813068:	2023883a 	mov	r17,r4
  81306c:	10003726 	beq	r2,zero,81314c <__register_exitproc+0x104>
  813070:	10c00117 	ldw	r3,4(r2)
  813074:	010007c4 	movi	r4,31
  813078:	20c00e16 	blt	r4,r3,8130b4 <__register_exitproc+0x6c>
  81307c:	1a000044 	addi	r8,r3,1
  813080:	8800221e 	bne	r17,zero,81310c <__register_exitproc+0xc4>
  813084:	18c00084 	addi	r3,r3,2
  813088:	18c7883a 	add	r3,r3,r3
  81308c:	18c7883a 	add	r3,r3,r3
  813090:	12000115 	stw	r8,4(r2)
  813094:	10c7883a 	add	r3,r2,r3
  813098:	19400015 	stw	r5,0(r3)
  81309c:	0005883a 	mov	r2,zero
  8130a0:	dfc00517 	ldw	ra,20(sp)
  8130a4:	dc400417 	ldw	r17,16(sp)
  8130a8:	dc000317 	ldw	r16,12(sp)
  8130ac:	dec00604 	addi	sp,sp,24
  8130b0:	f800283a 	ret
  8130b4:	00800034 	movhi	r2,0
  8130b8:	10800004 	addi	r2,r2,0
  8130bc:	10002626 	beq	r2,zero,813158 <__register_exitproc+0x110>
  8130c0:	01006404 	movi	r4,400
  8130c4:	d9400015 	stw	r5,0(sp)
  8130c8:	d9800115 	stw	r6,4(sp)
  8130cc:	d9c00215 	stw	r7,8(sp)
  8130d0:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  8130d4:	d9400017 	ldw	r5,0(sp)
  8130d8:	d9800117 	ldw	r6,4(sp)
  8130dc:	d9c00217 	ldw	r7,8(sp)
  8130e0:	10001d26 	beq	r2,zero,813158 <__register_exitproc+0x110>
  8130e4:	81000017 	ldw	r4,0(r16)
  8130e8:	10000115 	stw	zero,4(r2)
  8130ec:	02000044 	movi	r8,1
  8130f0:	22405217 	ldw	r9,328(r4)
  8130f4:	0007883a 	mov	r3,zero
  8130f8:	12400015 	stw	r9,0(r2)
  8130fc:	20805215 	stw	r2,328(r4)
  813100:	10006215 	stw	zero,392(r2)
  813104:	10006315 	stw	zero,396(r2)
  813108:	883fde26 	beq	r17,zero,813084 <__alt_mem_onchip_mem+0xff793084>
  81310c:	18c9883a 	add	r4,r3,r3
  813110:	2109883a 	add	r4,r4,r4
  813114:	1109883a 	add	r4,r2,r4
  813118:	21802215 	stw	r6,136(r4)
  81311c:	01800044 	movi	r6,1
  813120:	12406217 	ldw	r9,392(r2)
  813124:	30cc983a 	sll	r6,r6,r3
  813128:	4992b03a 	or	r9,r9,r6
  81312c:	12406215 	stw	r9,392(r2)
  813130:	21c04215 	stw	r7,264(r4)
  813134:	01000084 	movi	r4,2
  813138:	893fd21e 	bne	r17,r4,813084 <__alt_mem_onchip_mem+0xff793084>
  81313c:	11006317 	ldw	r4,396(r2)
  813140:	218cb03a 	or	r6,r4,r6
  813144:	11806315 	stw	r6,396(r2)
  813148:	003fce06 	br	813084 <__alt_mem_onchip_mem+0xff793084>
  81314c:	18805304 	addi	r2,r3,332
  813150:	18805215 	stw	r2,328(r3)
  813154:	003fc606 	br	813070 <__alt_mem_onchip_mem+0xff793070>
  813158:	00bfffc4 	movi	r2,-1
  81315c:	003fd006 	br	8130a0 <__alt_mem_onchip_mem+0xff7930a0>

00813160 <__call_exitprocs>:
  813160:	defff504 	addi	sp,sp,-44
  813164:	df000915 	stw	fp,36(sp)
  813168:	dd400615 	stw	r21,24(sp)
  81316c:	dc800315 	stw	r18,12(sp)
  813170:	dfc00a15 	stw	ra,40(sp)
  813174:	ddc00815 	stw	r23,32(sp)
  813178:	dd800715 	stw	r22,28(sp)
  81317c:	dd000515 	stw	r20,20(sp)
  813180:	dcc00415 	stw	r19,16(sp)
  813184:	dc400215 	stw	r17,8(sp)
  813188:	dc000115 	stw	r16,4(sp)
  81318c:	d9000015 	stw	r4,0(sp)
  813190:	2839883a 	mov	fp,r5
  813194:	04800044 	movi	r18,1
  813198:	057fffc4 	movi	r21,-1
  81319c:	00802074 	movhi	r2,129
  8131a0:	10956804 	addi	r2,r2,21920
  8131a4:	12000017 	ldw	r8,0(r2)
  8131a8:	45005217 	ldw	r20,328(r8)
  8131ac:	44c05204 	addi	r19,r8,328
  8131b0:	a0001c26 	beq	r20,zero,813224 <__call_exitprocs+0xc4>
  8131b4:	a0800117 	ldw	r2,4(r20)
  8131b8:	15ffffc4 	addi	r23,r2,-1
  8131bc:	b8000d16 	blt	r23,zero,8131f4 <__call_exitprocs+0x94>
  8131c0:	14000044 	addi	r16,r2,1
  8131c4:	8421883a 	add	r16,r16,r16
  8131c8:	8421883a 	add	r16,r16,r16
  8131cc:	84402004 	addi	r17,r16,128
  8131d0:	a463883a 	add	r17,r20,r17
  8131d4:	a421883a 	add	r16,r20,r16
  8131d8:	e0001e26 	beq	fp,zero,813254 <__call_exitprocs+0xf4>
  8131dc:	80804017 	ldw	r2,256(r16)
  8131e0:	e0801c26 	beq	fp,r2,813254 <__call_exitprocs+0xf4>
  8131e4:	bdffffc4 	addi	r23,r23,-1
  8131e8:	843fff04 	addi	r16,r16,-4
  8131ec:	8c7fff04 	addi	r17,r17,-4
  8131f0:	bd7ff91e 	bne	r23,r21,8131d8 <__alt_mem_onchip_mem+0xff7931d8>
  8131f4:	00800034 	movhi	r2,0
  8131f8:	10800004 	addi	r2,r2,0
  8131fc:	10000926 	beq	r2,zero,813224 <__call_exitprocs+0xc4>
  813200:	a0800117 	ldw	r2,4(r20)
  813204:	1000301e 	bne	r2,zero,8132c8 <__call_exitprocs+0x168>
  813208:	a0800017 	ldw	r2,0(r20)
  81320c:	10003226 	beq	r2,zero,8132d8 <__call_exitprocs+0x178>
  813210:	a009883a 	mov	r4,r20
  813214:	98800015 	stw	r2,0(r19)
  813218:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  81321c:	9d000017 	ldw	r20,0(r19)
  813220:	a03fe41e 	bne	r20,zero,8131b4 <__alt_mem_onchip_mem+0xff7931b4>
  813224:	dfc00a17 	ldw	ra,40(sp)
  813228:	df000917 	ldw	fp,36(sp)
  81322c:	ddc00817 	ldw	r23,32(sp)
  813230:	dd800717 	ldw	r22,28(sp)
  813234:	dd400617 	ldw	r21,24(sp)
  813238:	dd000517 	ldw	r20,20(sp)
  81323c:	dcc00417 	ldw	r19,16(sp)
  813240:	dc800317 	ldw	r18,12(sp)
  813244:	dc400217 	ldw	r17,8(sp)
  813248:	dc000117 	ldw	r16,4(sp)
  81324c:	dec00b04 	addi	sp,sp,44
  813250:	f800283a 	ret
  813254:	a0800117 	ldw	r2,4(r20)
  813258:	80c00017 	ldw	r3,0(r16)
  81325c:	10bfffc4 	addi	r2,r2,-1
  813260:	15c01426 	beq	r2,r23,8132b4 <__call_exitprocs+0x154>
  813264:	80000015 	stw	zero,0(r16)
  813268:	183fde26 	beq	r3,zero,8131e4 <__alt_mem_onchip_mem+0xff7931e4>
  81326c:	95c8983a 	sll	r4,r18,r23
  813270:	a0806217 	ldw	r2,392(r20)
  813274:	a5800117 	ldw	r22,4(r20)
  813278:	2084703a 	and	r2,r4,r2
  81327c:	10000b26 	beq	r2,zero,8132ac <__call_exitprocs+0x14c>
  813280:	a0806317 	ldw	r2,396(r20)
  813284:	2088703a 	and	r4,r4,r2
  813288:	20000c1e 	bne	r4,zero,8132bc <__call_exitprocs+0x15c>
  81328c:	89400017 	ldw	r5,0(r17)
  813290:	d9000017 	ldw	r4,0(sp)
  813294:	183ee83a 	callr	r3
  813298:	a0800117 	ldw	r2,4(r20)
  81329c:	15bfbf1e 	bne	r2,r22,81319c <__alt_mem_onchip_mem+0xff79319c>
  8132a0:	98800017 	ldw	r2,0(r19)
  8132a4:	153fcf26 	beq	r2,r20,8131e4 <__alt_mem_onchip_mem+0xff7931e4>
  8132a8:	003fbc06 	br	81319c <__alt_mem_onchip_mem+0xff79319c>
  8132ac:	183ee83a 	callr	r3
  8132b0:	003ff906 	br	813298 <__alt_mem_onchip_mem+0xff793298>
  8132b4:	a5c00115 	stw	r23,4(r20)
  8132b8:	003feb06 	br	813268 <__alt_mem_onchip_mem+0xff793268>
  8132bc:	89000017 	ldw	r4,0(r17)
  8132c0:	183ee83a 	callr	r3
  8132c4:	003ff406 	br	813298 <__alt_mem_onchip_mem+0xff793298>
  8132c8:	a0800017 	ldw	r2,0(r20)
  8132cc:	a027883a 	mov	r19,r20
  8132d0:	1029883a 	mov	r20,r2
  8132d4:	003fb606 	br	8131b0 <__alt_mem_onchip_mem+0xff7931b0>
  8132d8:	0005883a 	mov	r2,zero
  8132dc:	003ffb06 	br	8132cc <__alt_mem_onchip_mem+0xff7932cc>

008132e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8132e0:	defffd04 	addi	sp,sp,-12
  8132e4:	df000215 	stw	fp,8(sp)
  8132e8:	df000204 	addi	fp,sp,8
  8132ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8132f0:	0001883a 	nop
  8132f4:	e0bfff17 	ldw	r2,-4(fp)
  8132f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8132fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813300:	10000226 	beq	r2,zero,81330c <_exit+0x2c>
    ALT_SIM_FAIL();
  813304:	002af070 	cmpltui	zero,zero,43969
  813308:	00000106 	br	813310 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  81330c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813310:	003fff06 	br	813310 <__alt_mem_onchip_mem+0xff793310>
