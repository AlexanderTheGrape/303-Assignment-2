/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include "sccharts.h"
#include <stdio.h>
#include <stdlib.h>
#include <system.h>
#include <altera_avalon_pio_regs.h>
#include <sys/alt_alarm.h>
#include <sys/alt_irq.h>
#include <alt_types.h>
#include <fcntl.h>
#include <unistd.h>

alt_u32 avi_timer_isr(void* context);
alt_u32 aei_timer_isr(void* context);
alt_u32 vrp_timer_isr(void* context);
alt_u32 pvarp_timer_isr(void* context);
alt_u32 uri_timer_isr(void* context);
alt_u32 lri_timer_isr(void* context);

static alt_alarm timer_AVI;
static alt_alarm timer_AEI;
static alt_alarm timer_PVARP;
static alt_alarm timer_VRP;
static alt_alarm timer_LRI;
static alt_alarm timer_URI;

FILE* uart_file;

void timer_controller();
void init_buttons_pio();
void buttons_isr(void* context, alt_u32 id);
void read_uart();
void send_uart();

//below two are used as context. timerCount is used as context for the timer ISR, while
//buttonValue is used as context for the button interrupts in int_button_pio
static volatile int timerCount = 0;
static volatile int buttonValue = 1;

int VSenseFlag = 0;
int ASenseFlag = 0;
int AVITOFlag = 0;
int AEITOFlag = 0;
int PVARPTOFlag = 0;
int VRPTOFlag = 0;
int LRITOFlag = 0;
int URITOFlag = 0;
int AVI_running = 0;
int AEI_running = 0;
int PVARP_running = 0;
int VRP_running = 0;
int URI_running = 0;
int LRI_running = 0;

#define AVI_VALUE 300
#define AEI_VALUE 800
#define PVARP_VALUE 50
#define VRP_VALUE 150
#define LRI_VALUE 950
#define URI_VALUE 900
#define LED_BUFFER 100

alt_u32 avi_timer_isr(void* context) {
	AVITOFlag = 1;
	return 0;
}

alt_u32 aei_timer_isr(void* context) {
	AEITOFlag = 1;
	return 0;
}

alt_u32 vrp_timer_isr(void* context) {
	VRPTOFlag = 1;
	return 0;
}

alt_u32 pvarp_timer_isr(void* context) {
	PVARPTOFlag = 1;
	return 0;
}

alt_u32 uri_timer_isr(void* context) {
	URITOFlag = 1;
	return 0;
}

alt_u32 lri_timer_isr(void* context) {
	LRITOFlag = 1;
	return 0;
}

void timer_controller() {

	// Starts the timers if event occurred
	void* context_for_timer = (void*) &timerCount;

	if (AVI_stop && AVI_running) {

			alt_alarm_stop(&timer_AVI);
			printf("AVI Stop \n");
			AVI_running = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);

	}else if (AVI_start > 0) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000010);
		if (AVI_running) {
			alt_alarm_stop(&timer_AVI);
			AVI_running = 0;
			printf("AVI_stopped \n");
		}
		alt_alarm_start(&timer_AVI, AVI_VALUE, avi_timer_isr, context_for_timer);
		printf("AVI timer started \n");
		AVI_running = 1;
	}

	if (AEI_stop && AEI_running) {

			alt_alarm_stop(&timer_AEI);
			printf("AEI Stop \n");
			AEI_running = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);

	}else if (AEI_start > 0) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000100);
		if (AEI_running) {
			alt_alarm_stop(&timer_AEI);
			AEI_running = 0;
			printf("AEI_stopped \n");
		}
		alt_alarm_start(&timer_AEI, AEI_VALUE, aei_timer_isr, context_for_timer);
		printf("AEI Started \n");
		AEI_running = 1;
	}

	if (PVARP_start > 0) {

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000001000);
		if (PVARP_running) {
			alt_alarm_stop(&timer_PVARP);
			PVARP_running = 0;
			printf("PVARP_stopped \n");
		}
		alt_alarm_start(&timer_PVARP, PVARP_VALUE, pvarp_timer_isr, context_for_timer);
		printf("PVARP Start \n");
		PVARP_running = 1;
	}

	if (VRP_start > 0) {

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000010000);
		if(VRP_running) {
			alt_alarm_stop(&timer_VRP);
			VRP_running = 0;
			printf("VRP_stopped \n");
		}

		alt_alarm_start(&timer_VRP, VRP_VALUE, vrp_timer_isr, context_for_timer);
		printf("VRP Start \n");
		VRP_running = 1;
	}

	if (LRI_stop && LRI_running) {
			alt_alarm_stop(&timer_LRI);
			LRI_running = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);
			printf("LRI Stop \n");
	}else if(LRI_start > 0) {

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000100000);
		if (LRI_running) {
			alt_alarm_stop(&timer_LRI);
			LRI_running = 0;
			printf("LRI_stopped \n");
		}
		alt_alarm_start(&timer_LRI, LRI_VALUE, lri_timer_isr, context_for_timer);
		printf("LRI Start \n");
		LRI_running = 1;
	}


	if (URI_start > 0) {

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000001000000);
		if (URI_running) {
			alt_alarm_stop(&timer_URI);
			URI_running = 0;
			printf("URI_stopped \n");
		}
		alt_alarm_start(&timer_URI, URI_VALUE, uri_timer_isr, context_for_timer);
		printf("URI Start \n");
		URI_running = 1;
	}

	// Stops the timers if event occurred
	/*if (AVI_stop) {
		printf("AVI Stop \n");
		alt_alarm_stop(&timer_AVI);
		AVI_running = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);
	}
	if (AEI_stop) {
		printf("AEI Stop \n");
		alt_alarm_stop(&timer_AEI);
		AEI_running = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);
	}
	if (LRI_stop) {
		printf("LRI Stop \n");
		alt_alarm_stop(&timer_LRI);
		LRI_running = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);
	}*/
}

void read_uart(){
	char uart_buffer[10];
	int length = 0;
	length = read(uart_file, uart_buffer, sizeof(uart_buffer) - 1);

	if(length > 0) {
		for (int i = 0; i < length; i++) {
			if (uart_buffer[i] == 'V') {
				VSenseFlag = 1;
				printf("VSenseFLAG \n ");


			} else if (uart_buffer[i] == 'A') {
				ASenseFlag = 1;

			}
		}
	}
}

void send_uart(){

	if(APace & VPace){
		printf("Error. Should not pace!\n");
	}else if(APace){
		char a = 'A';
		write(uart_file, &a, 1);
		printf("Pacing A to Machine\n");

	}else if(VPace){
		char v = 'V';
		write(uart_file, &v, 1);
		printf("Pacing V to Machine\n");
	}
}

void init_buttons_pio(){
	void* context = (void*) &buttonValue;

	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x7);

	// register the ISR
	alt_irq_register(BUTTONS_IRQ, context, buttons_isr);
}

void buttons_isr(void* context, alt_u32 id) {
	int* temp = (int*) context; // need to cast the context first before using it
	(*temp) = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);

	printf("button: %i\n", *temp);

	if (*temp == 1) {
		VSenseFlag = 1;
	} else if (*temp == 2) {
		ASenseFlag = 1;
	}
}

void set_leds() {

	if(VPace && APace){
		//This should not happen
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00000011);
	}else if (VPace == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00000001);
	} else if (APace == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00000010);
	} else {
		//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00000000);
	}
}

int main()
{
	init_buttons_pio();
	int switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x01;
	uart_file = open(UART_NAME, O_NONBLOCK | O_RDWR);



	if (!uart_file) {
		printf("Cannot open file \n");
	}
	reset();

	while(1){
		//Switching modes
		switch_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x01;

		if (switch_value == 0) {
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000000);
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x03);
		} else if (switch_value == 0b0000000000000001){
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b000000000000000001);
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x00);
			read_uart();
		}


		//printf("value %d", VSenseFlag);
		if (VSenseFlag == 1) {
			VSense = 1;
			VSenseFlag = 0;
			printf("VSense! \n");
		} else {
			VSense = 0;
		}
		if (ASenseFlag == 1) {
			ASense = 1;
			ASenseFlag = 0;
			printf("ASense! \n");
		}else{
			ASense = 0;
		}

		//Time out logic

		if(AVITOFlag == 1) {
			AVITO = 1;
			AVITOFlag = 0;
			AVI_running = 0;
			printf("AVI has timed out \n");
		} else {
			AVITO = 0;
		}
		if(AEITOFlag == 1) {
			AEITO = 1;
			AEITOFlag = 0;
			AEI_running = 0;
			printf("AEI has timed out \n");
		} else {
			AEITO = 0;
		}
		if(PVARPTOFlag == 1) {
			PVARPTO = 1;
			PVARPTOFlag = 0;
			PVARP_running = 0;
			printf("PVARP has timed out \n");
		} else {
			PVARPTO = 0;
		}
		if(VRPTOFlag == 1) {
			VRPTO = 1;
			VRPTOFlag = 0;
			VRP_running = 0;
			//Clear leds for next V event
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0b00000000);
			printf("VRP has timed out \n");
		} else {
			VRPTO = 0;
		}
		if(URITOFlag == 1) {
			URITO = 1;
			URITOFlag = 0;
			URI_running = 0;
			printf("URI has timed out \n");
		} else {
			URITO = 0;
		}
		if(LRITOFlag == 1) {
			LRITO = 1;
			LRITOFlag = 0;
			LRI_running = 0;
			printf("LRI has timed out \n");
		} else {
			LRITO = 0;
		}

		tick();
		timer_controller();
		send_uart();
		set_leds();

	}

}


///*
// * "Hello World" example.
// *
// * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
// * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
// * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
// * device in your system's hardware.
// * The memory footprint of this hosted application is ~69 kbytes by default
// * using the standard reference design.
// *
// * For a reduced footprint version of this template, and an explanation of how
// * to reduce the memory footprint for a given application, see the
// * "small_hello_world" template.
// *
// */
//
//#include <stdio.h>
//#include "sys/alt_alarm.h"
//#include <altera_avalon_pio_regs.h>
//#include <alt_types.h>
//#include <system.h>
//#include "sys/alt_irq.h"
//#include <string.h>
//
//#include "pacemaker.h"
////#include "pacemaker.c"
//
////----Timer Value Macros-----
//#define AVI_Value 300
//#define AEI_Value 800
//#define PVARP_Value 50
//#define VRP_Value 150
//#define LRI_Value 950
//#define URI_Value 900
//
////#define AVI_Value 1000
////#define AEI_Value 1500000
////#define PVARP_Value 500
////#define VRP_Value 500
////#define LRI_Value 3000
////#define URI_Value 2000
//
////----Declare Timers----
//alt_alarm AVI_timer;
//alt_alarm PVARP_timer;
//alt_alarm VRP_timer;
//alt_alarm AEI_timer;
//alt_alarm LRI_timer;
//alt_alarm URI_timer;
//
//alt_alarm Atrial_timer;
//alt_alarm Ventricular_timer;
//
////----Set all timeout flags to 0----
////AVITO = 0;
////PVARPTO = 0;
////VRPTO = 0;
////AEITO = 0;
////LRITO = 0;
////URITO = 0;
//
//unsigned int LEDbits = 0;  //Turn all LEDs off
//
//unsigned int LED0 = 0; //Atrial event LED turned off
//unsigned int LED1 = 0; //Ventricular event LED turned off
//
////unsigned int buttonVal = 0;
//unsigned int uiButton = 0; //Set button value to 0
////void * buttonContext = (void*) &uiButtonValue;
//unsigned int maskedButton0 = 0; //Set button 0 value to 0
//unsigned int maskedButton1 = 0; //Set button 1 value to 0
//unsigned int button0_pressed = 0; //Set button 0 to unpressed
//unsigned int button1_pressed = 0; //Set button 1 to unpressed
//
//int AVITOFlag = 0;
//
////ISR called when atrial timer ends. Used to hold atrial LED on for
////a predefined time so it can be seen.
//alt_u32 Atrial_timer_ISR(void* context)
//{
//	LED0 = 0; //Turn atrial LED off
//	return 0; //Don't restart timer
//}
//
////ISR called when ventricular timer ends. Used to hold ventricular LED on for
////a predefined time so it can be seen.
//alt_u32 Ventricular_timer_ISR(void* context)
//{
//	LED1 = 0; //Turn ventricular LED off
//	return 0; //Don't restart timer
//}
//
////ISR called when AVI timer ends. Used to set AVI timeout flag high
//alt_u32 AVI_timer_ISR(void* context)
//{
//	AVITOFlag = 1; //Set AVI timeout flag
////	alt_alarm_stop(&AVI_timer);
//	return 0; //Don't restart timer
//}
//
////ISR called when PVARP timer ends. Used to set PVARP timeout flag high
//alt_u32 PVARP_timer_ISR(void* context)
//{
//	PVARPTO = 1; //Set PVARP timeout flag
//	printf("PVARP timed out\n");
////	alt_alarm_stop(&PVARP_timer);
//	return 0; //Don't restart timer
//}
//
////ISR called when VRP timer ends. Used to set VRP timeout flag high
//alt_u32 VRP_timer_ISR(void* context)
//{
//	VRPTO = 1; //Set VRP timeout flag
//	printf("VRP timed out\n");
////	alt_alarm_stop(&VRP_timer);
//	return 0; //Don't restart timer
//}
//
////ISR called when AEI timer ends. Used to set AEI timeout flag high
//alt_u32 AEI_timer_ISR(void* context)
//{
//	AEITO = 1; //Set AEI timeout flag
//	printf("AEI timed out\n");
////	alt_alarm_stop(&AEI_timer);
//	return 0; //Don't restart timer
//}
//
////ISR called when LRI timer ends. Used to set LRI timeout flag high
//alt_u32 LRI_timer_ISR(void* context)
//{
//	LRITO = 1; //Set LRI timeout flag
//	printf("LRI timed out\n");
////	alt_alarm_stop(&LRI_timer);
//	return 0; //Don't restart timer
//}
//
////ISR called when URI timer ends. Used to set URI timeout flag high
//alt_u32 URI_timer_ISR(void* context)
//{
//	URITO = 1; //Set URI timeout flag
//	printf("URI timed out\n");
////	alt_alarm_stop(&URI_timer);
//	return 0; //Don't restart timer
//}
//
////This function checks if a button is pushed and sets the appropriate flag
//void pollButtons()
//{
//	// Poll buttons
//	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); //Read the buttons register
//	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// Clear the edge capture register
//	int maskedButton0 = uiButton & (1 << 0); //Mask out the bit for button 0 (atrial event button)
//	int maskedButton1 = uiButton & (1 << 1); //Mask out the bit for button 1 (ventricular event button)
//
//	if (maskedButton0 > 0){ //Check if button 0 is not pushed
//		ASense = 0; //Reset atrial sense flag
//	} else {
//		ASense = 1; //Set atrial sense flag
////		printf("--- ASense! ---\n");
//	}
//	if (maskedButton1 > 0){ //Check if button 1 is not pushed
//		VSense = 0; //Reset ventricular sense flag
//	} else {
//		VSense = 1; //Set ventricular sense flag
////		printf("--- VSense! ---\n");
//	}
//
////	printf("button0 is: %d \n", maskedButton0);
////	printf("button1 is: %d \n", maskedButton1);
////	printf("ASense is: %d \n", ASense);
////	printf("VSense is: %d \n", VSense);
//}
//
////This function is used to blink the LEDs to show sensing
////and pacing of the heart.
//void heartLEDs()
//{
//
//	unsigned int A_LED = ASense || APace; //Set atrial LED if A sensed or paced
//	unsigned int V_LED = VSense || VPace; //Set ventricular LED if V sensed or paced
//
//	if (A_LED == 1) //Check if A was sensed or paced
//	{
//		LED0 = 1; //Set atrial LED on
//		alt_alarm_stop(&Atrial_timer); //Check timer is stopped before starting
//		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL); // Start timer
//	}
//
//	if (V_LED == 1)
//	{
//		LED1 = 1; //Set ventricular LED on
//		alt_alarm_stop(&Ventricular_timer); //Check timer is stopped before starting
//		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL); // Start timer
//	}
//
//	LEDbits = 0; //Set all LEDs off
//	//Set atrial and ventricular LEDs to their current state
//	LEDbits = LEDbits || (LED0 << 0);
//	LEDbits = LEDbits || (LED1 << 1);
//
//	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits); //Write LED values
//}
//
////This function is used to start all timers at the time they need starting.
//void startTimers()
//{
////	if (AVI_stop == 1)
////	{
////		printf("avi stop is met\n");
////
////		alt_alarm_stop(&PVARP_timer);
////		alt_alarm_stop(&VRP_timer);
////		alt_alarm_stop(&AEI_timer);
////		alt_alarm_stop(&LRI_timer);
////		alt_alarm_stop(&URI_timer);
////
////		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
////		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
////		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
////		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
////		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
////	}
//	if (AVI_start == 1)
//	{
//
//		alt_alarm_stop(&AVI_timer);
//		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
//		printf("avi start \n");
//	}
//	else if (AVI_stop == 1)
//	{
//		alt_alarm_stop(&AVI_timer);
//		printf("avi stop\n");
//	}
//
//
//	if (PVARP_start == 1)
//	{
//		alt_alarm_stop(&PVARP_timer);
//		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
//		printf("pvarp start\n");
//	}
////	else if (PVARP_stop == 1)
////	{
////		alt_alarm_stop(&PVARP_timer);
////	}
//
//
//	if(VRP_start==1)
//	{
//		alt_alarm_stop(&VRP_timer);
//		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//		printf("vrp start\n");
//	}
////	else if (VRP_stop == 1)
////	{
////		alt_alarm_stop(&VRP_timer);
////	}
//
//
//	if(AEI_start==1)
//	{
//		alt_alarm_stop(&AEI_timer);
//		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//		printf("aei start\n");
//	}
//	else if (AEI_stop == 1)
//	{
//		alt_alarm_stop(&AEI_timer);
//		printf("aei stop \n");
//	}
//
//
//	if (URI_start == 1)
//	{
//		alt_alarm_stop(&URI_timer);
//		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//		printf("uri start\n");
//	}
////	else if (URI_stop == 1)
////	{
////		alt_alarm_stop(&URI_timer);
////	}
//
//
//	if (LRI_start == 1)
//	{
//		alt_alarm_stop(&LRI_timer);
//		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//		printf("lri start\n");
//	}
//	else if (LRI_stop == 1)
//	{
//		alt_alarm_stop(&LRI_timer);
//		printf("lri stop\n");
//	}
//
//
//	if (VPace == 1)
//	{
//		printf("**********V paced**");
////		AVITO = 0;
//	}
//
//	AVITO = 0;
//	PVARPTO = 0;
//	VRPTO = 0;
//	AEITO = 0;
//	LRITO = 0;
//	URITO = 0;
//
//	AVI_start = 0;
//	PVARP_start = 0;
//	VRP_start = 0;
//	AEI_start = 0;
//	LRI_start = 0;
//	URI_start = 0;
//
//	AVI_stop = 0;
////	PVARP_stop = 0;
////	VRP_stop = 0;
//	AEI_stop = 0;
//	LRI_stop = 0;
////	URI_stop = 0;
//}
//
//int main()
//{
//	// Reset the scc
//	reset();
//
////	// Start the AVI timer
////	AVI_timeout = 0;
////	alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
//
//	// Start all the timers but AVI
////	alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
////	alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
////	alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
////	alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
////	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//
//////	AVI_stop = 1;
////	tick();
////	ASense = 1;
////	LRI_start = 1;
////	URI_start = 1;
////	tick();
////	startTimers();
//////	alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//////	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
////	LRI_start = 0;
////	URI_start = 0;
////	ASense = 0;
////	printf("AVI start is %i \r\n", AVI_start);
////	startTimers();
//
////	APace = 1;
////	heartLEDs();
//
//	int count = 0;
//
//	while(1) // Main loop
//	{
//		pollButtons();
//		if (AVITOFlag == 1) {
//			AVITO = 1;
//			AVITOFlag = 0;
//			printf("----AVI timed out----\n");
//		} else {
//			AVITO = 0;
//		}
//		tick();
//		startTimers();
//		heartLEDs();
//
////		printf("URI_start is: %i \n", URI_start);
////		printf("AEI_start is: %i \n", AEI_start);
//
//		count = count + 1;
//		if (count % 2000 == 0){
//			//printf("another 2000 iterations have passed\n");
////			printf("AVITO is: %i \n", AVITO);
//			//printf("URI_start is: %i \n", URI_start);
////			printf("URI_start is: %i \n", URI_start);
//		}
////		printf("LRI_start: %c", LRI_start);
////		printf("AVI_start = %i \r\n", AVI_start);
//	}
//
////	void* Timercontext = 0;
//
////	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, Timercontext);
//
////  printf("Hello from Nios II!\n");
//
//  return 0;
//}
//
////
////void startTimers()
////{
////	if (AVI_stop == 1)
////	{
////		printf("avi stop is met\n");
////
////		alt_alarm_stop(&PVARP_timer);
////		alt_alarm_stop(&VRP_timer);
////		alt_alarm_stop(&AEI_timer);
////		alt_alarm_stop(&LRI_timer);
////		alt_alarm_stop(&URI_timer);
////
////		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
////		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
////		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
////		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
////		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
////	}
////	if (AVI_start == 1)
////	{
////		printf("avi start is met\n");
////		alt_alarm_stop(&AVI_timer);
////		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
////	}
////
////	if (PVARP_start == 1)
////	{
////		printf("pvarp start is met\n");
////		alt_alarm_stop(&PVARP_timer);
////		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
////	}
////	if(VRP_start==1)
////	{
////		printf("vrp start is met\n");
////		alt_alarm_stop(&VRP_timer);
////		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
////	}
////	if(AEI_start==1)
////	{
////		printf("aei start is met\n");
////		alt_alarm_stop(&AEI_timer);
////		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
////	}
////	if (URI_start == 1)
////	{
////		printf("uri start is met\n");
////		alt_alarm_stop(&URI_timer);
////		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
////	}
////	if (LRI_start == 1)
////	{
////		printf("lri start is met\n");
////		alt_alarm_stop(&LRI_timer);
////		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
////	}
////
////	if (VPace == 1)
////	{
////		printf("**********V paced**");
////		AVITO = 0;
////	}
////
//////	AVITO = 0;
////	PVARPTO = 0;
////	VRPTO = 0;
////	AEITO = 0;
////	LRITO = 0;
////	URITO = 0;
////
////	AVI_start = 0;
////	PVARP_start = 0;
////	VRP_start = 0;
////	AEI_start = 0;
////	LRI_start = 0;
////	URI_start = 0;
////}
