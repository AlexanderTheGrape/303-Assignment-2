/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "sys/alt_alarm.h"
#include <altera_avalon_pio_regs.h>
#include <alt_types.h>
#include <system.h>
#include "sys/alt_irq.h"
#include <string.h>

#include "pacemaker.h"

#include <unistd.h>
#include <fcntl.h>

//----Timer Value Macros-----
#define AVI_Value 300
#define AEI_Value 800
#define PVARP_Value 50
#define VRP_Value 150
#define LRI_Value 950
#define URI_Value 900

//#define AVI_Value 1000
//#define AEI_Value 1500000
//#define PVARP_Value 500
//#define VRP_Value 500
//#define LRI_Value 3000
//#define URI_Value 2000

//----Declare Timers----
alt_alarm AVI_timer;
alt_alarm PVARP_timer;
alt_alarm VRP_timer;
alt_alarm AEI_timer;
alt_alarm LRI_timer;
alt_alarm URI_timer;

alt_alarm Atrial_timer;
alt_alarm AtrialPace_timer;
alt_alarm Ventricular_timer;
alt_alarm VentricularPace_timer;

//----Set all timeout flags to 0----
int AVITOFlag = 0;
int PVARPTOFlag = 0;
int VRPTOFlag = 0;
int AEITOFlag = 0;
int LRITOFlag = 0;
int URITOFlag = 0;

unsigned int LEDbits = 0;  //Turn all LEDs off

unsigned int LED0 = 0; //Atrial event LED turned off
unsigned int LED1 = 0; //Ventricular event LED turned off

unsigned int LED3 = 0; //Atrial event LED turned off
unsigned int LED4 = 0; //Ventricular event LED turned off

//unsigned int buttonVal = 0;
unsigned int uiButton = 0; //Set button value to 0
//void * buttonContext = (void*) &uiButtonValue;
unsigned int maskedButton0 = 0; //Set button 0 value to 0
unsigned int maskedButton1 = 0; //Set button 1 value to 0
unsigned int button0_pressed = 0; //Set button 0 to unpressed
unsigned int button1_pressed = 0; //Set button 1 to unpressed

unsigned int switch_bits = 0;
unsigned int mode = 0;
unsigned int switch0 = 0;



// Initialise UART
int uart_fd;
FILE* uart_fp;


//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 Atrial_timer_ISR(void* context)
{
	LED0 = 0; //Turn atrial LED off
	return 0; //Don't restart timer
}

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 Ventricular_timer_ISR(void* context)
{
	LED1 = 0; //Turn ventricular LED off
	return 0; //Don't restart timer
}

//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 AtrialPace_timer_ISR(void* context)
{
	LED3 = 0; //Turn atrial LED off
	return 0; //Don't restart timer
}

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 VentricularPace_timer_ISR(void* context)
{
	LED4 = 0; //Turn ventricular LED off
	return 0; //Don't restart timer
}

//ISR called when AVI timer ends. Used to set AVI timeout flag high
alt_u32 AVI_timer_ISR(void* context)
{
	AVITOFlag = 1; //Set AVI timeout flag
	printf("AVI timed out\n");
//	alt_alarm_stop(&AVI_timer);
	return 0; //Don't restart timer
}

//ISR called when PVARP timer ends. Used to set PVARP timeout flag high
alt_u32 PVARP_timer_ISR(void* context)
{
	PVARPTOFlag = 1; //Set PVARP timeout flag
	printf("PVARP timed out\n");
//	alt_alarm_stop(&PVARP_timer);
	return 0; //Don't restart timer
}

//ISR called when VRP timer ends. Used to set VRP timeout flag high
alt_u32 VRP_timer_ISR(void* context)
{
	VRPTOFlag = 1; //Set VRP timeout flag
	printf("VRP timed out\n");
//	alt_alarm_stop(&VRP_timer);
	return 0; //Don't restart timer
}

//ISR called when AEI timer ends. Used to set AEI timeout flag high
alt_u32 AEI_timer_ISR(void* context)
{
	AEITOFlag = 1; //Set AEI timeout flag
	printf("AEI timed out\n");
//	alt_alarm_stop(&AEI_timer);
	return 0; //Don't restart timer
}

//ISR called when LRI timer ends. Used to set LRI timeout flag high
alt_u32 LRI_timer_ISR(void* context)
{
	LRITOFlag = 1; //Set LRI timeout flag
	printf("LRI timed out\n");
//	alt_alarm_stop(&LRI_timer);
	return 0; //Don't restart timer
}

//ISR called when URI timer ends. Used to set URI timeout flag high
alt_u32 URI_timer_ISR(void* context)
{
	URITOFlag = 1; //Set URI timeout flag
	printf("URI timed out\n");
//	alt_alarm_stop(&URI_timer);
	return 0; //Don't restart timer
}


void checkSwitches()
{
	switch_bits = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE); // clear the edge capture register
	switch0 = ((1 << 0)&(switch_bits)); // Mask switch 0
	if (switch0 == 0) // Mode 1 if switch set to 0
	{
		mode = 1;
	} else // Mode 1 if switch set to 0
	{
		mode = 2;
	}
}

//This function checks if a button is pushed and sets the appropriate flag
void pollButtons()
{
	if (mode == 1){ // Buttons disabled in mode 2
		// Poll buttons
		uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); //Read the buttons register
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// Clear the edge capture register
		int maskedButton0 = uiButton & (1 << 0); //Mask out the bit for button 0 (ventricular event button)
		int maskedButton1 = uiButton & (1 << 1); //Mask out the bit for button 1 (atrial event button)

		if (maskedButton1 > 0){ //Check if button 0 is not pushed
			ASense = 0; //Reset atrial sense flag
		} else {
			ASense = 1; //Set atrial sense flag
	//		printf("--- ASense! ---\n");
		}
		if (maskedButton0 > 0){ //Check if button 1 is not pushed
			VSense = 0; //Reset ventricular sense flag
		} else {
			VSense = 1; //Set ventricular sense flag
	//		printf("--- VSense! ---\n");
		}
	}
}
//This function is used to blink the LEDs to show sensing
//and pacing of the heart.
void heartLEDs()
{
	if (ASense == 1) //Check if A was sensed or paced
	{
		LED0 = 1; //Set atrial LED on
		alt_alarm_stop(&Atrial_timer); //Check timer is stopped before starting
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL); // Start timer
	}

	if (VSense == 1)
	{
		LED1 = 1; //Set ventricular LED on
		alt_alarm_stop(&Ventricular_timer); //Check timer is stopped before starting
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL); // Start timer
	}

	if (APace == 1)
	{
		LED3 = 1; //Set ventricular LED on
		alt_alarm_stop(&AtrialPace_timer); //Check timer is stopped before starting
		alt_alarm_start(&AtrialPace_timer, 100, AtrialPace_timer_ISR, NULL); // Start timer
	}
	if (VPace == 1)
	{
		LED4 = 1; //Set ventricular LED on
		alt_alarm_stop(&VentricularPace_timer); //Check timer is stopped before starting
		alt_alarm_start(&VentricularPace_timer, 100, VentricularPace_timer_ISR, NULL); // Start timer
	}


	LEDbits = 0; //Set all LEDs off
	//Set atrial and ventricular LEDs to their current state
	LEDbits = (LEDbits | (LED0 << 1)); // LED 1 represents atrial senses
	LEDbits = (LEDbits | (LED1 << 0)); // LED 0 represents ventricular senses
	LEDbits = (LEDbits | (LED3 << 4)); // LED 4 represents atrial senses
	LEDbits = (LEDbits | (LED4 << 3)); // LED 3 represents ventricular senses

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits); //Write LED values
}

//Flags are used as a buffer before being output to SCCharts.
void setFlags()
{
	// This function sets flags as a buffer, to account for the
	// difference in speed between the C and SCC logic.
	if (AVITOFlag == 1) {
		AVITO = 1;
		AVITOFlag = 0;
		printf("----AVI timed out----\n");
	} else {
		AVITO = 0;
	}

	if (PVARPTOFlag == 1) {
		PVARPTO = 1;
		PVARPTOFlag = 0;
			printf("----PVARP timed out----\n");
	} else {
		PVARPTO = 0;
	}

	if (VRPTOFlag == 1) {
		VRPTO= 1;
		VRPTOFlag = 0;
			printf("----VRP timed out----\n");
	} else {
		VRPTO = 0;
	}

	if (AEITOFlag == 1) {
		AEITO = 1;
		AEITOFlag = 0;
			printf("----AEI timed out----\n");
	} else {
		AEITO = 0;
	}

	if (LRITOFlag == 1) {
		LRITO= 1;
		LRITOFlag = 0;
			printf("----LRI timed out----\n");
	} else {
		LRITO = 0;
	}

	if (URITOFlag == 1) {
		URITO = 1;
		URITOFlag = 0;
			printf("----URI timed out----\n");
	} else {
		URITO = 0;
	}
}

//This function is used to start all timers at the time they need starting.
void startTimers()
{

	if (AVI_start == 1) // Start the relevant timer if SCChart provides the start signal
	{
		alt_alarm_stop(&AVI_timer); // Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL); // start timer
		printf("avi start \n");
	}
	else if (AVI_stop == 1)
	{
		alt_alarm_stop(&AVI_timer); // Stop the timer, if it hasn't started yet it's ok
		printf("avi stop\n");
	}

	if (PVARP_start == 1)
	{
		alt_alarm_stop(&PVARP_timer);// Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);// start timer
		printf("pvarp start\n");
	}

	if(VRP_start==1)
	{
		alt_alarm_stop(&VRP_timer);// Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);// start timer
		printf("vrp start\n");
	}

	if(AEI_start==1)
	{
		alt_alarm_stop(&AEI_timer);// Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);// start timer
		printf("aei start\n");
	}
	else if (AEI_stop == 1)
	{
		alt_alarm_stop(&AEI_timer);// Stop the timer, if it hasn't started yet it's ok
		printf("aei stop \n");
	}

	if (URI_start == 1)
	{
		alt_alarm_stop(&URI_timer);// Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);// start timer
		printf("uri start\n");
	}

	if (LRI_start == 1)
	{
		alt_alarm_stop(&LRI_timer);// Stop the timer, if it hasn't started yet it's ok
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);// start timer
		printf("lri start\n");
	}
	else if (LRI_stop == 1)
	{
		alt_alarm_stop(&LRI_timer);// Stop the timer, if it hasn't started yet it's ok
		printf("lri stop\n");
	}


	if (VPace == 1)
	{
		printf("**********V paced**");
	}

	AVI_start = 0;
	PVARP_start = 0;
	VRP_start = 0;
	AEI_start = 0;
	LRI_start = 0;
	URI_start = 0;

	AVI_stop = 0;
//	PVARP_stop = 0;
//	VRP_stop = 0;
	AEI_stop = 0;
	LRI_stop = 0;
//	URI_stop = 0;
}

void initialiseUART()
{
	//set the file pointer for the uart peripheral
	uart_fd = open(UART_NAME, O_RDWR | O_NONBLOCK);
	uart_fp = fopen(UART_NAME,"r+"); // for reference
	if(!uart_fp) // Check we actually have a file pointer
	{
		printf("Failed to open UART");
	} else {
		printf("Open UART success");
	}
}

void UARTreceive(){
	if (mode == 2){
		char uartString[255]; // Create an empty string
		int uart_rxcount = read(uart_fd, &uartString, sizeof(uartString)); // Read from UART

		if(uart_rxcount > 0) // Check we've actually received something
		{
			if(uartString[0] == 'A') // Check if we received ASense
			{
				ASense = 1;
			}
			else
			{
				ASense = 0;
			}

			if(uartString[0] == 'V') // Check if we received VSense
			{
				VSense = 1;
			}
			else
			{
				VSense = 0;
			}
		}
	}
}

void UARTwrite(){
	if (mode == 2)
	{
		char A = 'A';
		char V = 'V';

		if(APace == 1){
			write(uart_fd, &A, 1);
		}
		if(VPace == 1){
			write(uart_fd, &V, 1);
		}
	}
}



int main()
{
	// Reset the scc
	reset();

	initialiseUART();

	while(1) // Main loop
	{
		pollButtons();
		setFlags();
		tick();
		startTimers();
		heartLEDs();
		checkSwitches();
		UARTwrite();
		UARTreceive();
	}

  return 0;
}
