/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "sys/alt_alarm.h"
#include <altera_avalon_pio_regs.h>
#include <alt_types.h>
#include <system.h>
#include "sys/alt_irq.h"
#include <string.h>

#include "pacemaker.h"
//#include "pacemaker.c"

//----Timer Value Macros-----
#define AVI_Value 300
#define AEI_Value 800
#define PVARP_Value 50
#define VRP_Value 150
#define LRI_Value 950
#define URI_Value 900

//#define AVI_Value 1000
//#define AEI_Value 1500000
//#define PVARP_Value 500
//#define VRP_Value 500
//#define LRI_Value 3000
//#define URI_Value 2000

//----Declare Timers----
alt_alarm AVI_timer;
alt_alarm PVARP_timer;
alt_alarm VRP_timer;
alt_alarm AEI_timer;
alt_alarm LRI_timer;
alt_alarm URI_timer;

alt_alarm Atrial_timer;
alt_alarm Ventricular_timer;

//----Set all timeout flags to 0----
//AVITO = 0;
//PVARPTO = 0;
//VRPTO = 0;
//AEITO = 0;
//LRITO = 0;
//URITO = 0;

unsigned int LEDbits = 0;  //Turn all LEDs off

unsigned int LED0 = 0; //Atrial event LED turned off
unsigned int LED1 = 0; //Ventricular event LED turned off

//unsigned int buttonVal = 0;
unsigned int uiButton = 0; //Set button value to 0
//void * buttonContext = (void*) &uiButtonValue;
unsigned int maskedButton0 = 0; //Set button 0 value to 0
unsigned int maskedButton1 = 0; //Set button 1 value to 0
unsigned int button0_pressed = 0; //Set button 0 to unpressed
unsigned int button1_pressed = 0; //Set button 1 to unpressed

//ISR called when atrial timer ends. Used to hold atrial LED on for
//a predefined time so it can be seen.
alt_u32 Atrial_timer_ISR(void* context)
{
	LED0 = 0; //Turn atrial LED off
	return 0; //Don't restart timer
}

//ISR called when ventricular timer ends. Used to hold ventricular LED on for
//a predefined time so it can be seen.
alt_u32 Ventricular_timer_ISR(void* context)
{
	LED1 = 0; //Turn ventricular LED off
	return 0; //Don't restart timer
}

//ISR called when AVI timer ends. Used to set AVI timeout flag high
alt_u32 AVI_timer_ISR(void* context)
{
	AVITO = 1; //Set AVI timeout flag
	printf("----AVI timed out----\n");
//	alt_alarm_stop(&AVI_timer);
	return 0; //Don't restart timer
}

//ISR called when PVARP timer ends. Used to set PVARP timeout flag high
alt_u32 PVARP_timer_ISR(void* context)
{
	PVARPTO = 1; //Set PVARP timeout flag
	printf("PVARP timed out\n");
//	alt_alarm_stop(&PVARP_timer);
	return 0; //Don't restart timer
}

//ISR called when VRP timer ends. Used to set VRP timeout flag high
alt_u32 VRP_timer_ISR(void* context)
{
	VRPTO = 1; //Set VRP timeout flag
	printf("VRP timed out\n");
//	alt_alarm_stop(&VRP_timer);
	return 0; //Don't restart timer
}

//ISR called when AEI timer ends. Used to set AEI timeout flag high
alt_u32 AEI_timer_ISR(void* context)
{
	AEITO = 1; //Set AEI timeout flag
	printf("AEI timed out\n");
//	alt_alarm_stop(&AEI_timer);
	return 0; //Don't restart timer
}

//ISR called when LRI timer ends. Used to set LRI timeout flag high
alt_u32 LRI_timer_ISR(void* context)
{
	LRITO = 1; //Set LRI timeout flag
	printf("LRI timed out\n");
//	alt_alarm_stop(&LRI_timer);
	return 0; //Don't restart timer
}

//ISR called when URI timer ends. Used to set URI timeout flag high
alt_u32 URI_timer_ISR(void* context)
{
	URITO = 1; //Set URI timeout flag
	printf("URI timed out\n");
//	alt_alarm_stop(&URI_timer);
	return 0; //Don't restart timer
}

//This function checks if a button is pushed and sets the appropriate flag
void pollButtons()
{
	// Poll buttons
	uiButton = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE); //Read the buttons register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);// Clear the edge capture register
	int maskedButton0 = uiButton & (1 << 0); //Mask out the bit for button 0 (atrial event button)
	int maskedButton1 = uiButton & (1 << 1); //Mask out the bit for button 1 (ventricular event button)

	if (maskedButton0 > 0){ //Check if button 0 is not pushed
		ASense = 0; //Reset atrial sense flag
	} else {
		ASense = 1; //Set atrial sense flag
//		printf("--- ASense! ---\n");
	}
	if (maskedButton1 > 0){ //Check if button 1 is not pushed
		VSense = 0; //Reset ventricular sense flag
	} else {
		VSense = 1; //Set ventricular sense flag
//		printf("--- VSense! ---\n");
	}

//	printf("button0 is: %d \n", maskedButton0);
//	printf("button1 is: %d \n", maskedButton1);
//	printf("ASense is: %d \n", ASense);
//	printf("VSense is: %d \n", VSense);
}

//This function is used to blink the LEDs to show sensing
//and pacing of the heart.
void heartLEDs()
{

	unsigned int A_LED = ASense || APace; //Set atrial LED if A sensed or paced
	unsigned int V_LED = VSense || VPace; //Set ventricular LED if V sensed or paced

	if (A_LED == 1) //Check if A was sensed or paced
	{
		LED0 = 1; //Set atrial LED on
		alt_alarm_stop(&Atrial_timer); //Check timer is stopped before starting
		alt_alarm_start(&Atrial_timer, 100, Atrial_timer_ISR, NULL); // Start timer
	}

	if (V_LED == 1)
	{
		LED1 = 1; //Set ventricular LED on
		alt_alarm_stop(&Ventricular_timer); //Check timer is stopped before starting
		alt_alarm_start(&Ventricular_timer, 100, Ventricular_timer_ISR, NULL); // Start timer
	}

	LEDbits = 0; //Set all LEDs off
	//Set atrial and ventricular LEDs to their current state
	LEDbits = LEDbits || (LED0 << 0);
	LEDbits = LEDbits || (LED1 << 1);

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, LEDbits); //Write LED values
}

//This function is used to start all timers at the time they need starting.
void startTimers()
{
//	if (AVI_stop == 1)
//	{
//		printf("avi stop is met\n");
//
//		alt_alarm_stop(&PVARP_timer);
//		alt_alarm_stop(&VRP_timer);
//		alt_alarm_stop(&AEI_timer);
//		alt_alarm_stop(&LRI_timer);
//		alt_alarm_stop(&URI_timer);
//
//		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
//		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//	}
	if (AVI_start == 1)
	{
		printf("avi start is met\n");
		alt_alarm_stop(&AVI_timer);
		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
	}
	else if (AVI_stop == 1)
	{
		alt_alarm_stop(&AVI_timer);
	}


	if (PVARP_start == 1)
	{
		printf("pvarp start is met\n");
		alt_alarm_stop(&PVARP_timer);
		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
	}
//	else if (PVARP_stop == 1)
//	{
//		alt_alarm_stop(&PVARP_timer);
//	}


	if(VRP_start==1)
	{
		printf("vrp start is met\n");
		alt_alarm_stop(&VRP_timer);
		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
	}
//	else if (VRP_stop == 1)
//	{
//		alt_alarm_stop(&VRP_timer);
//	}


	if(AEI_start==1)
	{
		printf("aei start is met\n");
		alt_alarm_stop(&AEI_timer);
		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
	}
	else if (AEI_stop == 1)
	{
		alt_alarm_stop(&AEI_timer);
	}


	if (URI_start == 1)
	{
		printf("uri start is met\n");
		alt_alarm_stop(&URI_timer);
		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
	}
//	else if (URI_stop == 1)
//	{
//		alt_alarm_stop(&URI_timer);
//	}


	if (LRI_start == 1)
	{
		printf("lri start is met\n");
		alt_alarm_stop(&LRI_timer);
		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
	}
	else if (LRI_stop == 1)
	{
		alt_alarm_stop(&LRI_timer);
	}


	if (VPace == 1)
	{
		printf("**********V paced**");
//		AVITO = 0;
	}

	AVITO = 0;
	PVARPTO = 0;
	VRPTO = 0;
	AEITO = 0;
	LRITO = 0;
	URITO = 0;

	AVI_start = 0;
	PVARP_start = 0;
	VRP_start = 0;
	AEI_start = 0;
	LRI_start = 0;
	URI_start = 0;

	AVI_stop = 0;
//	PVARP_stop = 0;
//	VRP_stop = 0;
	AEI_stop = 0;
	LRI_stop = 0;
//	URI_stop = 0;
}

int main()
{
	// Reset the scc
	reset();

//	// Start the AVI timer
//	AVI_timeout = 0;
//	alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);

	// Start all the timers but AVI
//	alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
//	alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//	alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//	alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);

////	AVI_stop = 1;
//	tick();
//	ASense = 1;
//	LRI_start = 1;
//	URI_start = 1;
//	tick();
//	startTimers();
////	alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
////	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//	LRI_start = 0;
//	URI_start = 0;
//	ASense = 0;
//	printf("AVI start is %i \r\n", AVI_start);
//	startTimers();

//	APace = 1;
//	heartLEDs();

	int count = 0;

	while(1) // Main loop
	{
		tick();
		startTimers();
		pollButtons();
		heartLEDs();

//		printf("URI_start is: %i \n", URI_start);
//		printf("AEI_start is: %i \n", AEI_start);

		count = count + 1;
		if (count % 2000 == 0){
			printf("another 2000 iterations have passed\n");
//			printf("AVITO is: %i \n", AVITO);
			printf("URI_start is: %i \n", URI_start);
//			printf("URI_start is: %i \n", URI_start);
		}
//		printf("LRI_start: %c", LRI_start);
//		printf("AVI_start = %i \r\n", AVI_start);
	}

//	void* Timercontext = 0;

//	alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, Timercontext);

//  printf("Hello from Nios II!\n");

  return 0;
}

//
//void startTimers()
//{
//	if (AVI_stop == 1)
//	{
//		printf("avi stop is met\n");
//
//		alt_alarm_stop(&PVARP_timer);
//		alt_alarm_stop(&VRP_timer);
//		alt_alarm_stop(&AEI_timer);
//		alt_alarm_stop(&LRI_timer);
//		alt_alarm_stop(&URI_timer);
//
//		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
//		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//	}
//	if (AVI_start == 1)
//	{
//		printf("avi start is met\n");
//		alt_alarm_stop(&AVI_timer);
//		alt_alarm_start(&AVI_timer, AVI_Value, AVI_timer_ISR, NULL);
//	}
//
//	if (PVARP_start == 1)
//	{
//		printf("pvarp start is met\n");
//		alt_alarm_stop(&PVARP_timer);
//		alt_alarm_start(&PVARP_timer, PVARP_Value, PVARP_timer_ISR, NULL);
//	}
//	if(VRP_start==1)
//	{
//		printf("vrp start is met\n");
//		alt_alarm_stop(&VRP_timer);
//		alt_alarm_start(&VRP_timer, VRP_Value, VRP_timer_ISR, NULL);
//	}
//	if(AEI_start==1)
//	{
//		printf("aei start is met\n");
//		alt_alarm_stop(&AEI_timer);
//		alt_alarm_start(&AEI_timer, AEI_Value, AEI_timer_ISR, NULL);
//	}
//	if (URI_start == 1)
//	{
//		printf("uri start is met\n");
//		alt_alarm_stop(&URI_timer);
//		alt_alarm_start(&URI_timer, URI_Value, URI_timer_ISR, NULL);
//	}
//	if (LRI_start == 1)
//	{
//		printf("lri start is met\n");
//		alt_alarm_stop(&LRI_timer);
//		alt_alarm_start(&LRI_timer, LRI_Value, LRI_timer_ISR, NULL);
//	}
//
//	if (VPace == 1)
//	{
//		printf("**********V paced**");
//		AVITO = 0;
//	}
//
////	AVITO = 0;
//	PVARPTO = 0;
//	VRPTO = 0;
//	AEITO = 0;
//	LRITO = 0;
//	URITO = 0;
//
//	AVI_start = 0;
//	PVARP_start = 0;
//	VRP_start = 0;
//	AEI_start = 0;
//	LRI_start = 0;
//	URI_start = 0;
//}
